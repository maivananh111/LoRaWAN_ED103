
LoRaWAN_ED103_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000207e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  08020978  08020978  00021978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080217a8  080217a8  00023b14  2**0
                  CONTENTS
  4 .ARM          00000008  080217a8  080217a8  000227a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080217b0  080217b0  00023b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080217b0  080217b0  000227b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080217b8  080217b8  000227b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000b14  20000000  080217bc  00023000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001844  20000b18  080222d0  00023b18  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000235c  080222d0  0002435c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023b14  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034d1d  00000000  00000000  00023b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007bc2  00000000  00000000  00058861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002558  00000000  00000000  00060428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c9c  00000000  00000000  00062980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4be  00000000  00000000  0006461c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d5e1  00000000  00000000  00090ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f13c2  00000000  00000000  000be0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001af47d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b52c  00000000  00000000  001af4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001ba9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b18 	.word	0x20000b18
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08020960 	.word	0x08020960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b1c 	.word	0x20000b1c
 80001cc:	08020960 	.word	0x08020960

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c26:	f000 b9d3 	b.w	8000fd0 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f86b 	bl	8000d14 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f85e 	bl	8000d14 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f84d 	bl	8000d14 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f83f 	bl	8000d14 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b988 	b.w	8000fd0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f824 	bl	8000d14 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d14e      	bne.n	8000dbe <__udivmoddi4+0xaa>
 8000d20:	4694      	mov	ip, r2
 8000d22:	458c      	cmp	ip, r1
 8000d24:	4686      	mov	lr, r0
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	d962      	bls.n	8000df2 <__udivmoddi4+0xde>
 8000d2c:	b14a      	cbz	r2, 8000d42 <__udivmoddi4+0x2e>
 8000d2e:	f1c2 0320 	rsb	r3, r2, #32
 8000d32:	4091      	lsls	r1, r2
 8000d34:	fa20 f303 	lsr.w	r3, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	4319      	orrs	r1, r3
 8000d3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f f68c 	uxth.w	r6, ip
 8000d4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb07 1114 	mls	r1, r7, r4, r1
 8000d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5a:	fb04 f106 	mul.w	r1, r4, r6
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x64>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d6a:	f080 8112 	bcs.w	8000f92 <__udivmoddi4+0x27e>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 810f 	bls.w	8000f92 <__udivmoddi4+0x27e>
 8000d74:	3c02      	subs	r4, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a59      	subs	r1, r3, r1
 8000d7a:	fa1f f38e 	uxth.w	r3, lr
 8000d7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d82:	fb07 1110 	mls	r1, r7, r0, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb00 f606 	mul.w	r6, r0, r6
 8000d8e:	429e      	cmp	r6, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x94>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d9a:	f080 80fc 	bcs.w	8000f96 <__udivmoddi4+0x282>
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	f240 80f9 	bls.w	8000f96 <__udivmoddi4+0x282>
 8000da4:	4463      	add	r3, ip
 8000da6:	3802      	subs	r0, #2
 8000da8:	1b9b      	subs	r3, r3, r6
 8000daa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11d      	cbz	r5, 8000dba <__udivmoddi4+0xa6>
 8000db2:	40d3      	lsrs	r3, r2
 8000db4:	2200      	movs	r2, #0
 8000db6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d905      	bls.n	8000dce <__udivmoddi4+0xba>
 8000dc2:	b10d      	cbz	r5, 8000dc8 <__udivmoddi4+0xb4>
 8000dc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e7f5      	b.n	8000dba <__udivmoddi4+0xa6>
 8000dce:	fab3 f183 	clz	r1, r3
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d146      	bne.n	8000e64 <__udivmoddi4+0x150>
 8000dd6:	42a3      	cmp	r3, r4
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xcc>
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	f0c0 80f0 	bcc.w	8000fc0 <__udivmoddi4+0x2ac>
 8000de0:	1a86      	subs	r6, r0, r2
 8000de2:	eb64 0303 	sbc.w	r3, r4, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d0e6      	beq.n	8000dba <__udivmoddi4+0xa6>
 8000dec:	e9c5 6300 	strd	r6, r3, [r5]
 8000df0:	e7e3      	b.n	8000dba <__udivmoddi4+0xa6>
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x204>
 8000df8:	eba1 040c 	sub.w	r4, r1, ip
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa1f f78c 	uxth.w	r7, ip
 8000e04:	2101      	movs	r1, #1
 8000e06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb07 f006 	mul.w	r0, r7, r6
 8000e1a:	4298      	cmp	r0, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x11c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x11a>
 8000e28:	4298      	cmp	r0, r3
 8000e2a:	f200 80cd 	bhi.w	8000fc8 <__udivmoddi4+0x2b4>
 8000e2e:	4626      	mov	r6, r4
 8000e30:	1a1c      	subs	r4, r3, r0
 8000e32:	fa1f f38e 	uxth.w	r3, lr
 8000e36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e42:	fb00 f707 	mul.w	r7, r0, r7
 8000e46:	429f      	cmp	r7, r3
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x148>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x146>
 8000e54:	429f      	cmp	r7, r3
 8000e56:	f200 80b0 	bhi.w	8000fba <__udivmoddi4+0x2a6>
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	1bdb      	subs	r3, r3, r7
 8000e5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e62:	e7a5      	b.n	8000db0 <__udivmoddi4+0x9c>
 8000e64:	f1c1 0620 	rsb	r6, r1, #32
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e74:	fa04 f301 	lsl.w	r3, r4, r1
 8000e78:	ea43 030c 	orr.w	r3, r3, ip
 8000e7c:	40f4      	lsrs	r4, r6
 8000e7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e82:	0c38      	lsrs	r0, r7, #16
 8000e84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e88:	fbb4 fef0 	udiv	lr, r4, r0
 8000e8c:	fa1f fc87 	uxth.w	ip, r7
 8000e90:	fb00 441e 	mls	r4, r0, lr, r4
 8000e94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e98:	fb0e f90c 	mul.w	r9, lr, ip
 8000e9c:	45a1      	cmp	r9, r4
 8000e9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea2:	d90a      	bls.n	8000eba <__udivmoddi4+0x1a6>
 8000ea4:	193c      	adds	r4, r7, r4
 8000ea6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eaa:	f080 8084 	bcs.w	8000fb6 <__udivmoddi4+0x2a2>
 8000eae:	45a1      	cmp	r9, r4
 8000eb0:	f240 8081 	bls.w	8000fb6 <__udivmoddi4+0x2a2>
 8000eb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	eba4 0409 	sub.w	r4, r4, r9
 8000ebe:	fa1f f983 	uxth.w	r9, r3
 8000ec2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ec6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ece:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x1d2>
 8000ed6:	193c      	adds	r4, r7, r4
 8000ed8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000edc:	d267      	bcs.n	8000fae <__udivmoddi4+0x29a>
 8000ede:	45a4      	cmp	ip, r4
 8000ee0:	d965      	bls.n	8000fae <__udivmoddi4+0x29a>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eea:	fba0 9302 	umull	r9, r3, r0, r2
 8000eee:	eba4 040c 	sub.w	r4, r4, ip
 8000ef2:	429c      	cmp	r4, r3
 8000ef4:	46ce      	mov	lr, r9
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	d351      	bcc.n	8000f9e <__udivmoddi4+0x28a>
 8000efa:	d04e      	beq.n	8000f9a <__udivmoddi4+0x286>
 8000efc:	b155      	cbz	r5, 8000f14 <__udivmoddi4+0x200>
 8000efe:	ebb8 030e 	subs.w	r3, r8, lr
 8000f02:	eb64 040c 	sbc.w	r4, r4, ip
 8000f06:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0a:	40cb      	lsrs	r3, r1
 8000f0c:	431e      	orrs	r6, r3
 8000f0e:	40cc      	lsrs	r4, r1
 8000f10:	e9c5 6400 	strd	r6, r4, [r5]
 8000f14:	2100      	movs	r1, #0
 8000f16:	e750      	b.n	8000dba <__udivmoddi4+0xa6>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f24:	fa24 f303 	lsr.w	r3, r4, r3
 8000f28:	4094      	lsls	r4, r2
 8000f2a:	430c      	orrs	r4, r1
 8000f2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f34:	fa1f f78c 	uxth.w	r7, ip
 8000f38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f40:	0c23      	lsrs	r3, r4, #16
 8000f42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f46:	fb00 f107 	mul.w	r1, r0, r7
 8000f4a:	4299      	cmp	r1, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x24c>
 8000f4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f52:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f56:	d22c      	bcs.n	8000fb2 <__udivmoddi4+0x29e>
 8000f58:	4299      	cmp	r1, r3
 8000f5a:	d92a      	bls.n	8000fb2 <__udivmoddi4+0x29e>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	b2a4      	uxth	r4, r4
 8000f64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f68:	fb08 3311 	mls	r3, r8, r1, r3
 8000f6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f70:	fb01 f307 	mul.w	r3, r1, r7
 8000f74:	42a3      	cmp	r3, r4
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x276>
 8000f78:	eb1c 0404 	adds.w	r4, ip, r4
 8000f7c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f80:	d213      	bcs.n	8000faa <__udivmoddi4+0x296>
 8000f82:	42a3      	cmp	r3, r4
 8000f84:	d911      	bls.n	8000faa <__udivmoddi4+0x296>
 8000f86:	3902      	subs	r1, #2
 8000f88:	4464      	add	r4, ip
 8000f8a:	1ae4      	subs	r4, r4, r3
 8000f8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f90:	e739      	b.n	8000e06 <__udivmoddi4+0xf2>
 8000f92:	4604      	mov	r4, r0
 8000f94:	e6f0      	b.n	8000d78 <__udivmoddi4+0x64>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e706      	b.n	8000da8 <__udivmoddi4+0x94>
 8000f9a:	45c8      	cmp	r8, r9
 8000f9c:	d2ae      	bcs.n	8000efc <__udivmoddi4+0x1e8>
 8000f9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fa6:	3801      	subs	r0, #1
 8000fa8:	e7a8      	b.n	8000efc <__udivmoddi4+0x1e8>
 8000faa:	4631      	mov	r1, r6
 8000fac:	e7ed      	b.n	8000f8a <__udivmoddi4+0x276>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	e799      	b.n	8000ee6 <__udivmoddi4+0x1d2>
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	e7d4      	b.n	8000f60 <__udivmoddi4+0x24c>
 8000fb6:	46d6      	mov	lr, sl
 8000fb8:	e77f      	b.n	8000eba <__udivmoddi4+0x1a6>
 8000fba:	4463      	add	r3, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e74d      	b.n	8000e5c <__udivmoddi4+0x148>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e70f      	b.n	8000de8 <__udivmoddi4+0xd4>
 8000fc8:	3e02      	subs	r6, #2
 8000fca:	4463      	add	r3, ip
 8000fcc:	e730      	b.n	8000e30 <__udivmoddi4+0x11c>
 8000fce:	bf00      	nop

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fea:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8000fec:	4a29      	ldr	r2, [pc, #164]	@ (8001094 <MX_ADC1_Init+0xc0>)
 8000fee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ff0:	4b27      	ldr	r3, [pc, #156]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001002:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001008:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <MX_ADC1_Init+0xbc>)
 800100a:	2204      	movs	r2, #4
 800100c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800100e:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001010:	2200      	movs	r2, #0
 8001012:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001016:	2200      	movs	r2, #0
 8001018:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800101a:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <MX_ADC1_Init+0xbc>)
 800101c:	2201      	movs	r2, #1
 800101e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001020:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_ADC1_Init+0xbc>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_ADC1_Init+0xbc>)
 800103e:	2200      	movs	r2, #0
 8001040:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104a:	4811      	ldr	r0, [pc, #68]	@ (8001090 <MX_ADC1_Init+0xbc>)
 800104c:	f001 fa7a 	bl	8002544 <HAL_ADC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001056:	f000 fd15 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_ADC1_Init+0xc4>)
 800105c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105e:	2306      	movs	r3, #6
 8001060:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001066:	237f      	movs	r3, #127	@ 0x7f
 8001068:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800106a:	2304      	movs	r3, #4
 800106c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001078:	f001 fba6 	bl	80027c8 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001082:	f000 fcff 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000b34 	.word	0x20000b34
 8001094:	50040000 	.word	0x50040000
 8001098:	19200040 	.word	0x19200040

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0a0      	sub	sp, #128	@ 0x80
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	225c      	movs	r2, #92	@ 0x5c
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f017 fd7d 	bl	8018bbc <memset>
  if(adcHandle->Instance==ADC1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a25      	ldr	r2, [pc, #148]	@ (800115c <HAL_ADC_MspInit+0xc0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d143      	bne.n	8001154 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010d6:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010d8:	2301      	movs	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010e0:	2308      	movs	r3, #8
 80010e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010e4:	2307      	movs	r3, #7
 80010e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 f8c6 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001106:	f000 fcbd 	bl	8001a84 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_ADC_MspInit+0xc4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a14      	ldr	r2, [pc, #80]	@ (8001160 <HAL_ADC_MspInit+0xc4>)
 8001110:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_ADC_MspInit+0xc4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <HAL_ADC_MspInit+0xc4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a0e      	ldr	r2, [pc, #56]	@ (8001160 <HAL_ADC_MspInit+0xc4>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <HAL_ADC_MspInit+0xc4>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800113a:	2302      	movs	r3, #2
 800113c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800113e:	230b      	movs	r3, #11
 8001140:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001150:	f002 f82e 	bl	80031b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001154:	bf00      	nop
 8001156:	3780      	adds	r7, #128	@ 0x80
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	50040000 	.word	0x50040000
 8001160:	40021000 	.word	0x40021000

08001164 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b51      	ldr	r3, [pc, #324]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a50      	ldr	r2, [pc, #320]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b4e      	ldr	r3, [pc, #312]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	4b4b      	ldr	r3, [pc, #300]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a4a      	ldr	r2, [pc, #296]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b48      	ldr	r3, [pc, #288]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b45      	ldr	r3, [pc, #276]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a44      	ldr	r2, [pc, #272]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b42      	ldr	r3, [pc, #264]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b3f      	ldr	r3, [pc, #252]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a3e      	ldr	r2, [pc, #248]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b3c      	ldr	r3, [pc, #240]	@ (80012c0 <MX_GPIO_Init+0x15c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_CS_Pin|LORA_RST_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e4:	f002 f976 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ee:	2303      	movs	r3, #3
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4831      	ldr	r0, [pc, #196]	@ (80012c4 <MX_GPIO_Init+0x160>)
 80011fe:	f001 ffd7 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001202:	230b      	movs	r3, #11
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	482c      	ldr	r0, [pc, #176]	@ (80012c8 <MX_GPIO_Init+0x164>)
 8001216:	f001 ffcb 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800121a:	f649 4305 	movw	r3, #39941	@ 0x9c05
 800121e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001220:	2303      	movs	r3, #3
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001232:	f001 ffbd 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_INT_Pin;
 8001236:	2308      	movs	r3, #8
 8001238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_INT_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124e:	f001 ffaf 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LORA_CS_Pin|LORA_RST_Pin;
 8001252:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f001 ff9f 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001272:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8001276:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001278:	2303      	movs	r3, #3
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4811      	ldr	r0, [pc, #68]	@ (80012cc <MX_GPIO_Init+0x168>)
 8001288:	f001 ff92 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 800128c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f001 ff84 	bl	80031b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2009      	movs	r0, #9
 80012ae:	f001 ff48 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80012b2:	2009      	movs	r0, #9
 80012b4:	f001 ff61 	bl	800317a <HAL_NVIC_EnableIRQ>

}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	@ 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000800 	.word	0x48000800
 80012c8:	48001c00 	.word	0x48001c00
 80012cc:	48000400 	.word	0x48000400

080012d0 <log_get_tagprop>:

__attribute__((weak)) uint32_t log_port_get_systime(void){
	return 0;
}

static log_tagprop_t *log_get_tagprop(const char *tag){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<_num_tagprop; i++){
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e016      	b.n	800130c <log_get_tagprop+0x3c>
		if(strcmp(_tagprop[i].tag, tag) == 0)
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2216      	movs	r2, #22
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001320 <log_get_tagprop+0x50>)
 80012e8:	4413      	add	r3, r2
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7fe ff6f 	bl	80001d0 <strcmp>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d106      	bne.n	8001306 <log_get_tagprop+0x36>
			return &_tagprop[i];
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2216      	movs	r2, #22
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <log_get_tagprop+0x50>)
 8001302:	4413      	add	r3, r2
 8001304:	e008      	b.n	8001318 <log_get_tagprop+0x48>
	for(uint8_t i=0; i<_num_tagprop; i++){
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	3301      	adds	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <log_get_tagprop+0x54>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	429a      	cmp	r2, r3
 8001314:	d3e3      	bcc.n	80012de <log_get_tagprop+0xe>
	}

	return NULL;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000b98 	.word	0x20000b98
 8001324:	20000d50 	.word	0x20000d50

08001328 <_log>:

	if(idx > LOG_NUM_PROP_SET) _num_tagprop++;
}


static inline void _log(log_level_t level, log_stylecolor_t style, bool prevline, const char header, const char *tag, const char *format, va_list args){
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	b08f      	sub	sp, #60	@ 0x3c
 800132c:	af06      	add	r7, sp, #24
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	460b      	mov	r3, r1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	4613      	mov	r3, r2
 8001344:	713b      	strb	r3, [r7, #4]
	uint32_t time = log_port_get_systime();
 8001346:	f000 f90b 	bl	8001560 <log_port_get_systime>
 800134a:	61b8      	str	r0, [r7, #24]
	char *arg_buffer = NULL;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
	char *out_buffer = NULL;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
	log_stylecolor_t log_style = style;
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	77fb      	strb	r3, [r7, #31]

	log_tagprop_t *tagprop = log_get_tagprop(tag);
 8001358:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800135a:	f7ff ffb9 	bl	80012d0 <log_get_tagprop>
 800135e:	6178      	str	r0, [r7, #20]
	if(tagprop != NULL){
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d016      	beq.n	8001394 <_log+0x6c>
		if(!((uint8_t)level & tagprop->level) && _enable)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	7d1a      	ldrb	r2, [r3, #20]
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	4013      	ands	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d103      	bne.n	800137c <_log+0x54>
 8001374:	4b38      	ldr	r3, [pc, #224]	@ (8001458 <_log+0x130>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d165      	bne.n	8001448 <_log+0x120>
			return;
		log_style = (log_stylecolor_t)(32 - __builtin_clz(level) + tagprop->style*8);
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	7d5b      	ldrb	r3, [r3, #21]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	b2da      	uxtb	r2, r3
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	3320      	adds	r3, #32
 8001392:	77fb      	strb	r3, [r7, #31]
	}

	if(vasprintf(&arg_buffer, format, args) == -1)
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800139a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800139c:	4618      	mov	r0, r3
 800139e:	f017 fc03 	bl	8018ba8 <vasprintf>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013a8:	d050      	beq.n	800144c <_log+0x124>
		return;
	if(asprintf(&out_buffer, "%s%s%c [%"PRIu32"] %s: %s%s%s", (!prevline)? "\r\n":"\033[2K\r", COLOR_START[log_style], header, time, tag, arg_buffer, COLOR_END,
 80013aa:	797b      	ldrb	r3, [r7, #5]
 80013ac:	f083 0301 	eor.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <_log+0x92>
 80013b6:	4d29      	ldr	r5, [pc, #164]	@ (800145c <_log+0x134>)
 80013b8:	e000      	b.n	80013bc <_log+0x94>
 80013ba:	4d29      	ldr	r5, [pc, #164]	@ (8001460 <_log+0x138>)
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	4a29      	ldr	r2, [pc, #164]	@ (8001464 <_log+0x13c>)
 80013c0:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80013c4:	793b      	ldrb	r3, [r7, #4]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4927      	ldr	r1, [pc, #156]	@ (8001468 <_log+0x140>)
 80013ca:	6809      	ldr	r1, [r1, #0]
			(_prev_is_prevline == true && prevline == false)? "\r\n":"") == -1)
 80013cc:	4827      	ldr	r0, [pc, #156]	@ (800146c <_log+0x144>)
 80013ce:	7800      	ldrb	r0, [r0, #0]
	if(asprintf(&out_buffer, "%s%s%c [%"PRIu32"] %s: %s%s%s", (!prevline)? "\r\n":"\033[2K\r", COLOR_START[log_style], header, time, tag, arg_buffer, COLOR_END,
 80013d0:	2800      	cmp	r0, #0
 80013d2:	d007      	beq.n	80013e4 <_log+0xbc>
			(_prev_is_prevline == true && prevline == false)? "\r\n":"") == -1)
 80013d4:	7978      	ldrb	r0, [r7, #5]
 80013d6:	f080 0001 	eor.w	r0, r0, #1
 80013da:	b2c0      	uxtb	r0, r0
 80013dc:	2800      	cmp	r0, #0
 80013de:	d001      	beq.n	80013e4 <_log+0xbc>
	if(asprintf(&out_buffer, "%s%s%c [%"PRIu32"] %s: %s%s%s", (!prevline)? "\r\n":"\033[2K\r", COLOR_START[log_style], header, time, tag, arg_buffer, COLOR_END,
 80013e0:	481e      	ldr	r0, [pc, #120]	@ (800145c <_log+0x134>)
 80013e2:	e000      	b.n	80013e6 <_log+0xbe>
 80013e4:	4822      	ldr	r0, [pc, #136]	@ (8001470 <_log+0x148>)
 80013e6:	f107 040c 	add.w	r4, r7, #12
 80013ea:	9005      	str	r0, [sp, #20]
 80013ec:	9104      	str	r1, [sp, #16]
 80013ee:	9203      	str	r2, [sp, #12]
 80013f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013f2:	9202      	str	r2, [sp, #8]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	9201      	str	r2, [sp, #4]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4633      	mov	r3, r6
 80013fc:	462a      	mov	r2, r5
 80013fe:	491d      	ldr	r1, [pc, #116]	@ (8001474 <_log+0x14c>)
 8001400:	4620      	mov	r0, r4
 8001402:	f017 fb95 	bl	8018b30 <asprintf>
 8001406:	4603      	mov	r3, r0
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800140c:	d020      	beq.n	8001450 <_log+0x128>
		return;
	log_port_flush_string(out_buffer, strlen(out_buffer));
 800140e:	68fc      	ldr	r4, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4618      	mov	r0, r3
 8001414:	f7fe fee6 	bl	80001e4 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	b29b      	uxth	r3, r3
 800141c:	4619      	mov	r1, r3
 800141e:	4620      	mov	r0, r4
 8001420:	f000 f88a 	bl	8001538 <log_port_flush_string>
	_prev_is_prevline = prevline;
 8001424:	4a11      	ldr	r2, [pc, #68]	@ (800146c <_log+0x144>)
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	7013      	strb	r3, [r2, #0]

	if(arg_buffer) free(arg_buffer);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <_log+0x110>
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4618      	mov	r0, r3
 8001434:	f016 ffc6 	bl	80183c4 <free>
	if(out_buffer) free(out_buffer);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d009      	beq.n	8001452 <_log+0x12a>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4618      	mov	r0, r3
 8001442:	f016 ffbf 	bl	80183c4 <free>
 8001446:	e004      	b.n	8001452 <_log+0x12a>
			return;
 8001448:	bf00      	nop
 800144a:	e002      	b.n	8001452 <_log+0x12a>
		return;
 800144c:	bf00      	nop
 800144e:	e000      	b.n	8001452 <_log+0x12a>
		return;
 8001450:	bf00      	nop
}
 8001452:	3724      	adds	r7, #36	@ 0x24
 8001454:	46bd      	mov	sp, r7
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001458:	20000000 	.word	0x20000000
 800145c:	08020a80 	.word	0x08020a80
 8001460:	08020a84 	.word	0x08020a84
 8001464:	20000008 	.word	0x20000008
 8001468:	20000004 	.word	0x20000004
 800146c:	20000d51 	.word	0x20000d51
 8001470:	08020a8c 	.word	0x08020a8c
 8001474:	08020a90 	.word	0x08020a90

08001478 <LOG_LEVEL_ERROR>:

void LOG_LEVEL_ERROR(const char *tag, bool prevline, const char *format, ...){
 8001478:	b40c      	push	{r2, r3}
 800147a:	b580      	push	{r7, lr}
 800147c:	b088      	sub	sp, #32
 800147e:	af04      	add	r7, sp, #16
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	70fb      	strb	r3, [r7, #3]
	va_list args;
	va_start(args, format);
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	60fb      	str	r3, [r7, #12]
	_log(LOG_ERROR, _default_loge, prevline, 'E', tag, format, args);
 800148c:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <LOG_LEVEL_ERROR+0x3c>)
 800148e:	7819      	ldrb	r1, [r3, #0]
 8001490:	78fa      	ldrb	r2, [r7, #3]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2345      	movs	r3, #69	@ 0x45
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff ff41 	bl	8001328 <_log>
	va_end(args);
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014b0:	b002      	add	sp, #8
 80014b2:	4770      	bx	lr
 80014b4:	20000001 	.word	0x20000001

080014b8 <LOG_LEVEL_INFO>:
	va_start(args, format);
	_log(LOG_WARNING, _default_logw, prevline, 'W', tag, format, args);
	va_end(args);
}

void LOG_LEVEL_INFO(const char *tag, bool prevline, const char *format, ...){
 80014b8:	b40c      	push	{r2, r3}
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b088      	sub	sp, #32
 80014be:	af04      	add	r7, sp, #16
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	70fb      	strb	r3, [r7, #3]
	va_list args;
	va_start(args, format);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	60fb      	str	r3, [r7, #12]
	_log(LOG_INFO, _default_logi, prevline, 'I', tag, format, args);
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <LOG_LEVEL_INFO+0x3c>)
 80014ce:	7819      	ldrb	r1, [r3, #0]
 80014d0:	78fa      	ldrb	r2, [r7, #3]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2349      	movs	r3, #73	@ 0x49
 80014e0:	2008      	movs	r0, #8
 80014e2:	f7ff ff21 	bl	8001328 <_log>
	va_end(args);
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014f0:	b002      	add	sp, #8
 80014f2:	4770      	bx	lr
 80014f4:	20000002 	.word	0x20000002

080014f8 <LOG_LEVEL_DEBUG>:

void LOG_LEVEL_DEBUG(const char *tag, bool prevline, const char *format, ...){
 80014f8:	b40c      	push	{r2, r3}
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b088      	sub	sp, #32
 80014fe:	af04      	add	r7, sp, #16
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	70fb      	strb	r3, [r7, #3]
	va_list args;
	va_start(args, format);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	60fb      	str	r3, [r7, #12]
	_log(LOG_DEBUG, _default_logd, prevline, 'D', tag, format, args);
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <LOG_LEVEL_DEBUG+0x3c>)
 800150e:	7819      	ldrb	r1, [r3, #0]
 8001510:	78fa      	ldrb	r2, [r7, #3]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	9302      	str	r3, [sp, #8]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2344      	movs	r3, #68	@ 0x44
 8001520:	2010      	movs	r0, #16
 8001522:	f7ff ff01 	bl	8001328 <_log>
	va_end(args);
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001530:	b002      	add	sp, #8
 8001532:	4770      	bx	lr
 8001534:	20000003 	.word	0x20000003

08001538 <log_port_flush_string>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define TAG "WAN"
void log_port_flush_string(char *string, uint16_t length){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, length, 1000);
 8001544:	887a      	ldrh	r2, [r7, #2]
 8001546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4803      	ldr	r0, [pc, #12]	@ (800155c <log_port_flush_string+0x24>)
 800154e:	f004 fedd 	bl	800630c <HAL_UART_Transmit>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000e0c 	.word	0x20000e0c

08001560 <log_port_get_systime>:

uint32_t log_port_get_systime(void){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	return (uint32_t)HAL_GetTick();
 8001564:	f000 fe32 	bl	80021cc <HAL_GetTick>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f000 fdc1 	bl	80020fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f842 	bl	8001600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f7ff fdf2 	bl	8001164 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001580:	f7ff fd28 	bl	8000fd4 <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8001584:	f000 fb4c 	bl	8001c20 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001588:	f000 fd06 	bl	8001f98 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TIMER_IF_Init();
 800158c:	f016 fc8c 	bl	8017ea8 <TIMER_IF_Init>
  LOGI(TAG, "cc");
 8001590:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <main+0x74>)
 8001592:	2100      	movs	r1, #0
 8001594:	4814      	ldr	r0, [pc, #80]	@ (80015e8 <main+0x78>)
 8001596:	f7ff ff8f 	bl	80014b8 <LOG_LEVEL_INFO>
  Radio_HardWare_Init();
 800159a:	f014 ffc5 	bl	8016528 <Radio_HardWare_Init>
  LmHandlerInit( &LmHandlerCallbacks, &LmHandlerParams );
 800159e:	4913      	ldr	r1, [pc, #76]	@ (80015ec <main+0x7c>)
 80015a0:	4813      	ldr	r0, [pc, #76]	@ (80015f0 <main+0x80>)
 80015a2:	f006 ff2f 	bl	8008404 <LmHandlerInit>
  LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams );
 80015a6:	4913      	ldr	r1, [pc, #76]	@ (80015f4 <main+0x84>)
 80015a8:	2000      	movs	r0, #0
 80015aa:	f007 fbf3 	bl	8008d94 <LmHandlerPackageRegister>
  LmHandlerJoin( );
 80015ae:	f007 f877 	bl	80086a0 <LmHandlerJoin>
  LOGI(TAG, "JOINING");
 80015b2:	4a11      	ldr	r2, [pc, #68]	@ (80015f8 <main+0x88>)
 80015b4:	2100      	movs	r1, #0
 80015b6:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <main+0x78>)
 80015b8:	f7ff ff7e 	bl	80014b8 <LOG_LEVEL_INFO>
  StartTxProcess( LORAMAC_HANDLER_TX_ON_TIMER );
 80015bc:	2000      	movs	r0, #0
 80015be:	f000 f993 	bl	80018e8 <StartTxProcess>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		LmHandlerProcess( );
 80015c2:	f007 f805 	bl	80085d0 <LmHandlerProcess>
		UplinkProcess( );
 80015c6:	f000 f9c5 	bl	8001954 <UplinkProcess>

//      CRITICAL_SECTION_BEGIN( );
		if( IsMacProcessPending == 1 ){
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <main+0x8c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d103      	bne.n	80015dc <main+0x6c>
			IsMacProcessPending = 0;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <main+0x8c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
 80015da:	e7f2      	b.n	80015c2 <main+0x52>

		}
		else{
		  HAL_Delay(10);
 80015dc:	200a      	movs	r0, #10
 80015de:	f000 fe01 	bl	80021e4 <HAL_Delay>
		LmHandlerProcess( );
 80015e2:	e7ee      	b.n	80015c2 <main+0x52>
 80015e4:	08020abc 	.word	0x08020abc
 80015e8:	08020ac0 	.word	0x08020ac0
 80015ec:	200001c0 	.word	0x200001c0
 80015f0:	20000184 	.word	0x20000184
 80015f4:	200001cc 	.word	0x200001cc
 80015f8:	08020ac4 	.word	0x08020ac4
 80015fc:	20000d78 	.word	0x20000d78

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b096      	sub	sp, #88	@ 0x58
 8001604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	2244      	movs	r2, #68	@ 0x44
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f017 fad4 	bl	8018bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001622:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001626:	f001 ffa3 	bl	8003570 <HAL_PWREx_ControlVoltageScaling>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001630:	f000 fa28 	bl	8001a84 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001634:	f001 ff7e 	bl	8003534 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <SystemClock_Config+0xa8>)
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800163e:	4a1a      	ldr	r2, [pc, #104]	@ (80016a8 <SystemClock_Config+0xa8>)
 8001640:	f023 0318 	bic.w	r3, r3, #24
 8001644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001648:	2314      	movs	r3, #20
 800164a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800164c:	2301      	movs	r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001650:	2301      	movs	r3, #1
 8001652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001658:	23b0      	movs	r3, #176	@ 0xb0
 800165a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4618      	mov	r0, r3
 8001666:	f001 ffd9 	bl	800361c <HAL_RCC_OscConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001670:	f000 fa08 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001674:	230f      	movs	r3, #15
 8001676:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	2102      	movs	r1, #2
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fbd9 	bl	8003e44 <HAL_RCC_ClockConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001698:	f000 f9f4 	bl	8001a84 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800169c:	f003 f80e 	bl	80046bc <HAL_RCCEx_EnableMSIPLLMode>
}
 80016a0:	bf00      	nop
 80016a2:	3758      	adds	r7, #88	@ 0x58
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
//	if (GPIO_Pin == LORA_INT_Pin) {
		RadioOnDioIrq();
 80016b6:	f014 fd3b 	bl	8016130 <RadioOnDioIrq>
//	}
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <OnMacProcessNotify>:


static void OnMacProcessNotify(void) {
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
	IsMacProcessPending = 1;
 80016c8:	4b03      	ldr	r3, [pc, #12]	@ (80016d8 <OnMacProcessNotify+0x14>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	20000d78 	.word	0x20000d78

080016dc <OnNvmContextChange>:

static void OnNvmContextChange(LmHandlerNvmContextStates_t state) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	LOGI(TAG, "OnNvmContextChange");
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <OnNvmContextChange+0x1c>)
 80016e8:	2100      	movs	r1, #0
 80016ea:	4804      	ldr	r0, [pc, #16]	@ (80016fc <OnNvmContextChange+0x20>)
 80016ec:	f7ff fee4 	bl	80014b8 <LOG_LEVEL_INFO>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	08020acc 	.word	0x08020acc
 80016fc:	08020ac0 	.word	0x08020ac0

08001700 <OnNetworkParametersChange>:

static void OnNetworkParametersChange(CommissioningParams_t *params) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	LOGI(TAG, "OnNetworkParametersChange");
 8001708:	4a04      	ldr	r2, [pc, #16]	@ (800171c <OnNetworkParametersChange+0x1c>)
 800170a:	2100      	movs	r1, #0
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <OnNetworkParametersChange+0x20>)
 800170e:	f7ff fed3 	bl	80014b8 <LOG_LEVEL_INFO>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	08020ae0 	.word	0x08020ae0
 8001720:	08020ac0 	.word	0x08020ac0

08001724 <OnMacMcpsRequest>:

static void OnMacMcpsRequest(LoRaMacStatus_t status, McpsReq_t *mcpsReq) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
	LOGI(TAG, "OnMacMcpsRequest");
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <OnMacMcpsRequest+0x20>)
 8001732:	2100      	movs	r1, #0
 8001734:	4804      	ldr	r0, [pc, #16]	@ (8001748 <OnMacMcpsRequest+0x24>)
 8001736:	f7ff febf 	bl	80014b8 <LOG_LEVEL_INFO>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	08020afc 	.word	0x08020afc
 8001748:	08020ac0 	.word	0x08020ac0

0800174c <OnMacMlmeRequest>:

static void OnMacMlmeRequest(LoRaMacStatus_t status, MlmeReq_t *mlmeReq) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
	LOGI(TAG, "OnMacMlmeRequest, status = %d", status);
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4a04      	ldr	r2, [pc, #16]	@ (800176c <OnMacMlmeRequest+0x20>)
 800175c:	2100      	movs	r1, #0
 800175e:	4804      	ldr	r0, [pc, #16]	@ (8001770 <OnMacMlmeRequest+0x24>)
 8001760:	f7ff feaa 	bl	80014b8 <LOG_LEVEL_INFO>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	08020b10 	.word	0x08020b10
 8001770:	08020ac0 	.word	0x08020ac0

08001774 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *params) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	LOGI(TAG, "OnJoinRequest");
 800177c:	4a0f      	ldr	r2, [pc, #60]	@ (80017bc <OnJoinRequest+0x48>)
 800177e:	2100      	movs	r1, #0
 8001780:	480f      	ldr	r0, [pc, #60]	@ (80017c0 <OnJoinRequest+0x4c>)
 8001782:	f7ff fe99 	bl	80014b8 <LOG_LEVEL_INFO>

	if (params->Status == LORAMAC_HANDLER_ERROR) {
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001790:	d107      	bne.n	80017a2 <OnJoinRequest+0x2e>
		LOGE(TAG, "JOIN FAILED");
 8001792:	4a0c      	ldr	r2, [pc, #48]	@ (80017c4 <OnJoinRequest+0x50>)
 8001794:	2100      	movs	r1, #0
 8001796:	480a      	ldr	r0, [pc, #40]	@ (80017c0 <OnJoinRequest+0x4c>)
 8001798:	f7ff fe6e 	bl	8001478 <LOG_LEVEL_ERROR>
		LmHandlerJoin();
 800179c:	f006 ff80 	bl	80086a0 <LmHandlerJoin>
	}
	else {
		LOGI(TAG, "JOINED");
		LmHandlerRequestClass( LORAWAN_DEFAULT_CLASS);
	}
}
 80017a0:	e007      	b.n	80017b2 <OnJoinRequest+0x3e>
		LOGI(TAG, "JOINED");
 80017a2:	4a09      	ldr	r2, [pc, #36]	@ (80017c8 <OnJoinRequest+0x54>)
 80017a4:	2100      	movs	r1, #0
 80017a6:	4806      	ldr	r0, [pc, #24]	@ (80017c0 <OnJoinRequest+0x4c>)
 80017a8:	f7ff fe86 	bl	80014b8 <LOG_LEVEL_INFO>
		LmHandlerRequestClass( LORAWAN_DEFAULT_CLASS);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f007 f8a7 	bl	8008900 <LmHandlerRequestClass>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	08020b30 	.word	0x08020b30
 80017c0:	08020ac0 	.word	0x08020ac0
 80017c4:	08020b40 	.word	0x08020b40
 80017c8:	08020b4c 	.word	0x08020b4c

080017cc <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	LOGI(TAG, "OnTxData");
 80017d4:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <OnTxData+0x1c>)
 80017d6:	2100      	movs	r1, #0
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <OnTxData+0x20>)
 80017da:	f7ff fe6d 	bl	80014b8 <LOG_LEVEL_INFO>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	08020b54 	.word	0x08020b54
 80017ec:	08020ac0 	.word	0x08020ac0

080017f0 <OnRxData>:

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	switch (appData->Port) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	3b01      	subs	r3, #1
 8001800:	2b01      	cmp	r3, #1
		case 1:
		case LORAWAN_APP_PORT:
		break;
		default:
		break;
 8001802:	bf00      	nop
	}
	LOGI(TAG, "OnRxData");
 8001804:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <OnRxData+0x28>)
 8001806:	2100      	movs	r1, #0
 8001808:	4804      	ldr	r0, [pc, #16]	@ (800181c <OnRxData+0x2c>)
 800180a:	f7ff fe55 	bl	80014b8 <LOG_LEVEL_INFO>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08020b60 	.word	0x08020b60
 800181c:	08020ac0 	.word	0x08020ac0

08001820 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	LmHandlerAppData_t appData = { .Buffer = NULL, .BufferSize = 0, .Port = 0 };
 800182a:	2300      	movs	r3, #0
 800182c:	723b      	strb	r3, [r7, #8]
 800182e:	2300      	movs	r3, #0
 8001830:	727b      	strb	r3, [r7, #9]
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
	LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG);
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f006 ff57 	bl	80086f0 <LmHandlerSend>
	LOGI(TAG, "OnClassChange");
 8001842:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <OnClassChange+0x34>)
 8001844:	2100      	movs	r1, #0
 8001846:	4804      	ldr	r0, [pc, #16]	@ (8001858 <OnClassChange+0x38>)
 8001848:	f7ff fe36 	bl	80014b8 <LOG_LEVEL_INFO>
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	08020b6c 	.word	0x08020b6c
 8001858:	08020ac0 	.word	0x08020ac0

0800185c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LoRaMAcHandlerBeaconParams_t *params) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	switch (params->State) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d005      	beq.n	8001878 <OnBeaconStatusChange+0x1c>
 800186c:	2b03      	cmp	r3, #3
 800186e:	dc05      	bgt.n	800187c <OnBeaconStatusChange+0x20>
 8001870:	2b01      	cmp	r3, #1
 8001872:	d001      	beq.n	8001878 <OnBeaconStatusChange+0x1c>
 8001874:	2b02      	cmp	r3, #2
		case LORAMAC_HANDLER_BEACON_LOST:
		case LORAMAC_HANDLER_BEACON_NRX: {
			break;
		}
		default: {
			break;
 8001876:	e001      	b.n	800187c <OnBeaconStatusChange+0x20>
			break;
 8001878:	bf00      	nop
 800187a:	e000      	b.n	800187e <OnBeaconStatusChange+0x22>
			break;
 800187c:	bf00      	nop
		}
	}
	LOGI(TAG, "OnBeaconStatusChange");
 800187e:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <OnBeaconStatusChange+0x34>)
 8001880:	2100      	movs	r1, #0
 8001882:	4804      	ldr	r0, [pc, #16]	@ (8001894 <OnBeaconStatusChange+0x38>)
 8001884:	f7ff fe18 	bl	80014b8 <LOG_LEVEL_INFO>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	08020b7c 	.word	0x08020b7c
 8001894:	08020ac0 	.word	0x08020ac0

08001898 <PrepareTxFrame>:

/*!
 * Prepares the payload of the frame and transmits it.
 */
static void PrepareTxFrame(void) {
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	if (LmHandlerIsBusy() == true)
 800189c:	f006 fe78 	bl	8008590 <LmHandlerIsBusy>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d115      	bne.n	80018d2 <PrepareTxFrame+0x3a>
		return;

	AppData.Port = LORAWAN_APP_PORT;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <PrepareTxFrame+0x40>)
 80018a8:	2202      	movs	r2, #2
 80018aa:	701a      	strb	r2, [r3, #0]
	if (LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE)
 80018ac:	2100      	movs	r1, #0
 80018ae:	480a      	ldr	r0, [pc, #40]	@ (80018d8 <PrepareTxFrame+0x40>)
 80018b0:	f006 ff1e 	bl	80086f0 <LmHandlerSend>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <PrepareTxFrame+0x2e>
			== LORAMAC_HANDLER_SUCCESS) {
		LOGI(TAG, "SEND uplink done");
 80018ba:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <PrepareTxFrame+0x44>)
 80018bc:	2100      	movs	r1, #0
 80018be:	4808      	ldr	r0, [pc, #32]	@ (80018e0 <PrepareTxFrame+0x48>)
 80018c0:	f7ff fdfa 	bl	80014b8 <LOG_LEVEL_INFO>
 80018c4:	e006      	b.n	80018d4 <PrepareTxFrame+0x3c>
	}
	else{
		LOGE(TAG, "SEND uplink failed");
 80018c6:	4a07      	ldr	r2, [pc, #28]	@ (80018e4 <PrepareTxFrame+0x4c>)
 80018c8:	2100      	movs	r1, #0
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <PrepareTxFrame+0x48>)
 80018cc:	f7ff fdd4 	bl	8001478 <LOG_LEVEL_ERROR>
 80018d0:	e000      	b.n	80018d4 <PrepareTxFrame+0x3c>
		return;
 80018d2:	bf00      	nop
	}
}
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000017c 	.word	0x2000017c
 80018dc:	08020b94 	.word	0x08020b94
 80018e0:	08020ac0 	.word	0x08020ac0
 80018e4:	08020ba8 	.word	0x08020ba8

080018e8 <StartTxProcess>:

static void StartTxProcess(LmHandlerTxEvents_t txEvent) {
 80018e8:	b5b0      	push	{r4, r5, r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af04      	add	r7, sp, #16
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	switch (txEvent) {
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d021      	beq.n	800193c <StartTxProcess+0x54>
		default:
			// Intentional fall through
		case LORAMAC_HANDLER_TX_ON_TIMER: {
			// Schedule 1st packet transmission
			TimerInit(&TxTimer, OnTxTimerEvent);
 80018f8:	2300      	movs	r3, #0
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <StartTxProcess+0x60>)
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	2300      	movs	r3, #0
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	480f      	ldr	r0, [pc, #60]	@ (800194c <StartTxProcess+0x64>)
 800190e:	f015 ff15 	bl	801773c <UTIL_TIMER_Create>
			TimerSetValue(&TxTimer, APP_TX_DUTYCYCLE + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND ));
 8001912:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001916:	480e      	ldr	r0, [pc, #56]	@ (8001950 <StartTxProcess+0x68>)
 8001918:	f016 fcde 	bl	80182d8 <randr>
 800191c:	4603      	mov	r3, r0
 800191e:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8001922:	3320      	adds	r3, #32
 8001924:	17da      	asrs	r2, r3, #31
 8001926:	461c      	mov	r4, r3
 8001928:	4615      	mov	r5, r2
 800192a:	4622      	mov	r2, r4
 800192c:	462b      	mov	r3, r5
 800192e:	4807      	ldr	r0, [pc, #28]	@ (800194c <StartTxProcess+0x64>)
 8001930:	f016 f834 	bl	801799c <UTIL_TIMER_SetPeriod>
			OnTxTimerEvent( NULL);
 8001934:	2000      	movs	r0, #0
 8001936:	f000 f827 	bl	8001988 <OnTxTimerEvent>
		}
		break;
 800193a:	e000      	b.n	800193e <StartTxProcess+0x56>
		case LORAMAC_HANDLER_TX_ON_EVENT: {
		}
		break;
 800193c:	bf00      	nop
	}
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bdb0      	pop	{r4, r5, r7, pc}
 8001946:	bf00      	nop
 8001948:	08001989 	.word	0x08001989
 800194c:	20000d58 	.word	0x20000d58
 8001950:	fffffc18 	.word	0xfffffc18

08001954 <UplinkProcess>:

static void UplinkProcess(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
	uint8_t isPending = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195e:	b672      	cpsid	i
}
 8001960:	bf00      	nop
	CRITICAL_SECTION_BEGIN();
	isPending = IsTxFramePending;
 8001962:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <UplinkProcess+0x30>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
	IsTxFramePending = 0;
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <UplinkProcess+0x30>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800196e:	b662      	cpsie	i
}
 8001970:	bf00      	nop
	CRITICAL_SECTION_END();
	if (isPending == 1)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <UplinkProcess+0x28>
		PrepareTxFrame();
 8001978:	f7ff ff8e 	bl	8001898 <PrepareTxFrame>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000d79 	.word	0x20000d79

08001988 <OnTxTimerEvent>:

/*!
 * Function executed on TxTimer event
 */
static void OnTxTimerEvent(void *context) {
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	TimerStop(&TxTimer);
 8001990:	480e      	ldr	r0, [pc, #56]	@ (80019cc <OnTxTimerEvent+0x44>)
 8001992:	f015 ff93 	bl	80178bc <UTIL_TIMER_Stop>
	IsTxFramePending = 1;
 8001996:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <OnTxTimerEvent+0x48>)
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
	// Schedule next transmission
	TimerSetValue(&TxTimer, APP_TX_DUTYCYCLE + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND ));
 800199c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019a0:	480c      	ldr	r0, [pc, #48]	@ (80019d4 <OnTxTimerEvent+0x4c>)
 80019a2:	f016 fc99 	bl	80182d8 <randr>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80019ac:	3320      	adds	r3, #32
 80019ae:	17da      	asrs	r2, r3, #31
 80019b0:	461c      	mov	r4, r3
 80019b2:	4615      	mov	r5, r2
 80019b4:	4622      	mov	r2, r4
 80019b6:	462b      	mov	r3, r5
 80019b8:	4804      	ldr	r0, [pc, #16]	@ (80019cc <OnTxTimerEvent+0x44>)
 80019ba:	f015 ffef 	bl	801799c <UTIL_TIMER_SetPeriod>
	TimerStart(&TxTimer);
 80019be:	4803      	ldr	r0, [pc, #12]	@ (80019cc <OnTxTimerEvent+0x44>)
 80019c0:	f015 fef8 	bl	80177b4 <UTIL_TIMER_Start>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bdb0      	pop	{r4, r5, r7, pc}
 80019cc:	20000d58 	.word	0x20000d58
 80019d0:	20000d79 	.word	0x20000d79
 80019d4:	fffffc18 	.word	0xfffffc18

080019d8 <BoardGetRandomSeed>:



uint32_t BoardGetRandomSeed(void) {
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	return 128;
 80019dc:	2380      	movs	r3, #128	@ 0x80
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <BoardGetUniqueId>:

void BoardGetUniqueId(uint8_t *id) {
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	id[7] = ((*(uint32_t*) UID_BASE+1)) >> 24;
 80019f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <BoardGetUniqueId+0x88>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	0e1a      	lsrs	r2, r3, #24
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3307      	adds	r3, #7
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	701a      	strb	r2, [r3, #0]
	id[6] = ((*(uint32_t*) UID_BASE+1)) >> 16;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <BoardGetUniqueId+0x88>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	0c1a      	lsrs	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3306      	adds	r3, #6
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	701a      	strb	r2, [r3, #0]
	id[5] = ((*(uint32_t*) UID_BASE+1)) >> 8;
 8001a10:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <BoardGetUniqueId+0x88>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	0a1a      	lsrs	r2, r3, #8
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3305      	adds	r3, #5
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]
	id[4] = ((*(uint32_t*) UID_BASE+1));
 8001a20:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <BoardGetUniqueId+0x88>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	3201      	adds	r2, #1
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	701a      	strb	r2, [r3, #0]
	id[3] = ((*(uint32_t*) UID_BASE)) >> 24;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <BoardGetUniqueId+0x88>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0e1a      	lsrs	r2, r3, #24
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3303      	adds	r3, #3
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
	id[2] = ((*(uint32_t*) UID_BASE)) >> 16;
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <BoardGetUniqueId+0x88>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	0c1a      	lsrs	r2, r3, #16
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3302      	adds	r3, #2
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
	id[1] = ((*(uint32_t*) UID_BASE)) >> 8;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <BoardGetUniqueId+0x88>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0a1a      	lsrs	r2, r3, #8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3301      	adds	r3, #1
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]
	id[0] = ((*(uint32_t*) UID_BASE));
 8001a5a:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <BoardGetUniqueId+0x88>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	701a      	strb	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	1fff7590 	.word	0x1fff7590

08001a74 <BoardGetBatteryLevel>:

uint8_t BoardGetBatteryLevel( void ){
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
	return 127;
 8001a78:	237f      	movs	r3, #127	@ 0x7f
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <Error_Handler+0x8>

08001a90 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b092      	sub	sp, #72	@ 0x48
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	222c      	movs	r2, #44	@ 0x2c
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f017 f883 	bl	8018bbc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8001bac <MX_RTC_Init+0x11c>)
 8001aba:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001abc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 8001ac2:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1000;
 8001ac8:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001aca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ace:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ad0:	4b35      	ldr	r3, [pc, #212]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ad6:	4b34      	ldr	r3, [pc, #208]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001adc:	4b32      	ldr	r3, [pc, #200]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ae2:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ae8:	482f      	ldr	r0, [pc, #188]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001aea:	f002 fee9 	bl	80048c0 <HAL_RTC_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8001af4:	f7ff ffc6 	bl	8001a84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b16:	2200      	movs	r2, #0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4823      	ldr	r0, [pc, #140]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001b1c:	f002 ff58 	bl	80049d0 <HAL_RTC_SetTime>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8001b26:	f7ff ffad 	bl	8001a84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001b42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4817      	ldr	r0, [pc, #92]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001b4c:	f003 f839 	bl	8004bc2 <HAL_RTC_SetDate>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_RTC_Init+0xca>
  {
    Error_Handler();
 8001b56:	f7ff ff95 	bl	8001a84 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <MX_RTC_Init+0x118>)
 8001b92:	f003 f8eb 	bl	8004d6c <HAL_RTC_SetAlarm_IT>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8001b9c:	f7ff ff72 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	3748      	adds	r7, #72	@ 0x48
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000d7c 	.word	0x20000d7c
 8001bac:	40002800 	.word	0x40002800

08001bb0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b09a      	sub	sp, #104	@ 0x68
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	225c      	movs	r2, #92	@ 0x5c
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f016 fffb 	bl	8018bbc <memset>
  if(rtcHandle->Instance==RTC)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a13      	ldr	r2, [pc, #76]	@ (8001c18 <HAL_RTC_MspInit+0x68>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d11f      	bne.n	8001c10 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bd4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bda:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 fb53 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001bec:	f7ff ff4a 	bl	8001a84 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_RTC_MspInit+0x6c>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf6:	4a09      	ldr	r2, [pc, #36]	@ (8001c1c <HAL_RTC_MspInit+0x6c>)
 8001bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	2029      	movs	r0, #41	@ 0x29
 8001c06:	f001 fa9c 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c0a:	2029      	movs	r0, #41	@ 0x29
 8001c0c:	f001 fab5 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c10:	bf00      	nop
 8001c12:	3768      	adds	r7, #104	@ 0x68
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40002800 	.word	0x40002800
 8001c1c:	40021000 	.word	0x40021000

08001c20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c26:	4a1c      	ldr	r2, [pc, #112]	@ (8001c98 <MX_SPI1_Init+0x78>)
 8001c28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c32:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c38:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c3a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c40:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c46:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c56:	2208      	movs	r2, #8
 8001c58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c6e:	2207      	movs	r2, #7
 8001c70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <MX_SPI1_Init+0x74>)
 8001c80:	f003 fbc9 	bl	8005416 <HAL_SPI_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c8a:	f7ff fefb 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000da0 	.word	0x20000da0
 8001c98:	40013000 	.word	0x40013000

08001c9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	@ 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a17      	ldr	r2, [pc, #92]	@ (8001d18 <HAL_SPI_MspInit+0x7c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d128      	bne.n	8001d10 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cbe:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <HAL_SPI_MspInit+0x80>)
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc2:	4a16      	ldr	r2, [pc, #88]	@ (8001d1c <HAL_SPI_MspInit+0x80>)
 8001cc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cca:	4b14      	ldr	r3, [pc, #80]	@ (8001d1c <HAL_SPI_MspInit+0x80>)
 8001ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <HAL_SPI_MspInit+0x80>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cda:	4a10      	ldr	r2, [pc, #64]	@ (8001d1c <HAL_SPI_MspInit+0x80>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <HAL_SPI_MspInit+0x80>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cee:	23e0      	movs	r3, #224	@ 0xe0
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cfe:	2305      	movs	r3, #5
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d0c:	f001 fa50 	bl	80031b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d10:	bf00      	nop
 8001d12:	3728      	adds	r7, #40	@ 0x28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40013000 	.word	0x40013000
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d32:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d42:	4a08      	ldr	r2, [pc, #32]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <NMI_Handler+0x4>

08001d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <MemManage_Handler+0x4>

08001d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbe:	f000 f9f1 	bl	80021a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_INT_Pin);
 8001dca:	2008      	movs	r0, #8
 8001dcc:	f001 fb9a 	bl	8003504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <RTC_Alarm_IRQHandler+0x10>)
 8001dda:	f003 f997 	bl	800510c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000d7c 	.word	0x20000d7c

08001de8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return 1;
 8001dec:	2301      	movs	r3, #1
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_kill>:

int _kill(int pid, int sig)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e02:	f017 fd49 	bl	8019898 <__errno>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2216      	movs	r2, #22
 8001e0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_exit>:

void _exit (int status)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ffe7 	bl	8001df8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e2a:	bf00      	nop
 8001e2c:	e7fd      	b.n	8001e2a <_exit+0x12>

08001e2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e00a      	b.n	8001e56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e40:	f3af 8000 	nop.w
 8001e44:	4601      	mov	r1, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	60ba      	str	r2, [r7, #8]
 8001e4c:	b2ca      	uxtb	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	dbf0      	blt.n	8001e40 <_read+0x12>
  }

  return len;
 8001e5e:	687b      	ldr	r3, [r7, #4]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	e009      	b.n	8001e8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	60ba      	str	r2, [r7, #8]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dbf1      	blt.n	8001e7a <_write+0x12>
  }
  return len;
 8001e96:	687b      	ldr	r3, [r7, #4]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_close>:

int _close(int file)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec8:	605a      	str	r2, [r3, #4]
  return 0;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_isatty>:

int _isatty(int file)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee0:	2301      	movs	r3, #1
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f38:	f017 fcae 	bl	8019898 <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f46:	e009      	b.n	8001f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f48:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <_sbrk+0x64>)
 8001f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20010000 	.word	0x20010000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	20000e08 	.word	0x20000e08
 8001f70:	20002360 	.word	0x20002360

08001f74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <SystemInit+0x20>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7e:	4a05      	ldr	r2, [pc, #20]	@ (8001f94 <SystemInit+0x20>)
 8001f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001f9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ff4 <MX_USART1_UART_Init+0x5c>)
 8001fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	@ (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fdc:	f004 f948 	bl	8006270 <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fe6:	f7ff fd4d 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000e0c 	.word	0x20000e0c
 8001ff4:	40013800 	.word	0x40013800

08001ff8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b0a0      	sub	sp, #128	@ 0x80
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	225c      	movs	r2, #92	@ 0x5c
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f016 fdcf 	bl	8018bbc <memset>
  if(uartHandle->Instance==USART1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1e      	ldr	r2, [pc, #120]	@ (800209c <HAL_UART_MspInit+0xa4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d135      	bne.n	8002094 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002028:	2301      	movs	r3, #1
 800202a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800202c:	2300      	movs	r3, #0
 800202e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	4618      	mov	r0, r3
 8002036:	f002 f929 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002040:	f7ff fd20 	bl	8001a84 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002044:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <HAL_UART_MspInit+0xa8>)
 8002046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002048:	4a15      	ldr	r2, [pc, #84]	@ (80020a0 <HAL_UART_MspInit+0xa8>)
 800204a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800204e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002050:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <HAL_UART_MspInit+0xa8>)
 8002052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <HAL_UART_MspInit+0xa8>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002060:	4a0f      	ldr	r2, [pc, #60]	@ (80020a0 <HAL_UART_MspInit+0xa8>)
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002068:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <HAL_UART_MspInit+0xa8>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002074:	23c0      	movs	r3, #192	@ 0xc0
 8002076:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002084:	2307      	movs	r3, #7
 8002086:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002088:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800208c:	4619      	mov	r1, r3
 800208e:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <HAL_UART_MspInit+0xac>)
 8002090:	f001 f88e 	bl	80031b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002094:	bf00      	nop
 8002096:	3780      	adds	r7, #128	@ 0x80
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40013800 	.word	0x40013800
 80020a0:	40021000 	.word	0x40021000
 80020a4:	48000400 	.word	0x48000400

080020a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020ac:	f7ff ff62 	bl	8001f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b0:	480c      	ldr	r0, [pc, #48]	@ (80020e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80020b2:	490d      	ldr	r1, [pc, #52]	@ (80020e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020b4:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <LoopForever+0xe>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c6:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020c8:	4c0a      	ldr	r4, [pc, #40]	@ (80020f4 <LoopForever+0x16>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d6:	f017 fbe5 	bl	80198a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020da:	f7ff fa49 	bl	8001570 <main>

080020de <LoopForever>:

LoopForever:
    b LoopForever
 80020de:	e7fe      	b.n	80020de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	20000b14 	.word	0x20000b14
  ldr r2, =_sidata
 80020ec:	080217bc 	.word	0x080217bc
  ldr r2, =_sbss
 80020f0:	20000b18 	.word	0x20000b18
  ldr r4, =_ebss
 80020f4:	2000235c 	.word	0x2000235c

080020f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC1_IRQHandler>

080020fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002104:	2003      	movs	r0, #3
 8002106:	f001 f811 	bl	800312c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800210a:	200f      	movs	r0, #15
 800210c:	f000 f80e 	bl	800212c <HAL_InitTick>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	e001      	b.n	8002120 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800211c:	f7ff fe00 	bl	8001d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002120:	79fb      	ldrb	r3, [r7, #7]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002138:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <HAL_InitTick+0x6c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d023      	beq.n	8002188 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002140:	4b16      	ldr	r3, [pc, #88]	@ (800219c <HAL_InitTick+0x70>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <HAL_InitTick+0x6c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f001 f81d 	bl	8003196 <HAL_SYSTICK_Config>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10f      	bne.n	8002182 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b0f      	cmp	r3, #15
 8002166:	d809      	bhi.n	800217c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002168:	2200      	movs	r2, #0
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002170:	f000 ffe7 	bl	8003142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002174:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <HAL_InitTick+0x74>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e007      	b.n	800218c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e004      	b.n	800218c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
 8002186:	e001      	b.n	800218c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200001e4 	.word	0x200001e4
 800219c:	200001dc 	.word	0x200001dc
 80021a0:	200001e0 	.word	0x200001e0

080021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_IncTick+0x20>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_IncTick+0x24>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <HAL_IncTick+0x24>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	200001e4 	.word	0x200001e4
 80021c8:	20000e94 	.word	0x20000e94

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b03      	ldr	r3, [pc, #12]	@ (80021e0 <HAL_GetTick+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000e94 	.word	0x20000e94

080021e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff ffee 	bl	80021cc <HAL_GetTick>
 80021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021fc:	d005      	beq.n	800220a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_Delay+0x44>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800220a:	bf00      	nop
 800220c:	f7ff ffde 	bl	80021cc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d8f7      	bhi.n	800220c <HAL_Delay+0x28>
  {
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200001e4 	.word	0x200001e4

0800222c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	609a      	str	r2, [r3, #8]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	609a      	str	r2, [r3, #8]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3360      	adds	r3, #96	@ 0x60
 80022a6:	461a      	mov	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <LL_ADC_SetOffset+0x44>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	03fff000 	.word	0x03fff000

080022dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3360      	adds	r3, #96	@ 0x60
 80022ea:	461a      	mov	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3360      	adds	r3, #96	@ 0x60
 8002318:	461a      	mov	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	431a      	orrs	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800233e:	b480      	push	{r7}
 8002340:	b087      	sub	sp, #28
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3330      	adds	r3, #48	@ 0x30
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	4413      	add	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	211f      	movs	r1, #31
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	401a      	ands	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	f003 011f 	and.w	r1, r3, #31
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	431a      	orrs	r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002396:	b480      	push	{r7}
 8002398:	b087      	sub	sp, #28
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3314      	adds	r3, #20
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	0e5b      	lsrs	r3, r3, #25
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	4413      	add	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	0d1b      	lsrs	r3, r3, #20
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2107      	movs	r1, #7
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	401a      	ands	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	0d1b      	lsrs	r3, r3, #20
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	431a      	orrs	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0318 	and.w	r3, r3, #24
 800240e:	4908      	ldr	r1, [pc, #32]	@ (8002430 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002410:	40d9      	lsrs	r1, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	400b      	ands	r3, r1
 8002416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241a:	431a      	orrs	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	0007ffff 	.word	0x0007ffff

08002434 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002444:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6093      	str	r3, [r2, #8]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800246c:	d101      	bne.n	8002472 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002490:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002494:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024bc:	d101      	bne.n	80024c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <LL_ADC_IsEnabled+0x18>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <LL_ADC_IsEnabled+0x1a>
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b04      	cmp	r3, #4
 8002508:	d101      	bne.n	800250e <LL_ADC_REG_IsConversionOngoing+0x18>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b08      	cmp	r3, #8
 800252e:	d101      	bne.n	8002534 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e126      	b.n	80027ac <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7fe fd95 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff67 	bl	8002458 <LL_ADC_IsDeepPowerDownEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff4d 	bl	8002434 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff82 	bl	80024a8 <LL_ADC_IsInternalRegulatorEnabled>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d115      	bne.n	80025d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff66 	bl	8002480 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025b4:	4b7f      	ldr	r3, [pc, #508]	@ (80027b4 <HAL_ADC_Init+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	4a7f      	ldr	r2, [pc, #508]	@ (80027b8 <HAL_ADC_Init+0x274>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	3301      	adds	r3, #1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025c8:	e002      	b.n	80025d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f9      	bne.n	80025ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff64 	bl	80024a8 <LL_ADC_IsInternalRegulatorEnabled>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10d      	bne.n	8002602 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ea:	f043 0210 	orr.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff75 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 800260c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 80bf 	bne.w	800279a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 80bb 	bne.w	800279a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002628:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800262c:	f043 0202 	orr.w	r2, r3, #2
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff49 	bl	80024d0 <LL_ADC_IsEnabled>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002644:	485d      	ldr	r0, [pc, #372]	@ (80027bc <HAL_ADC_Init+0x278>)
 8002646:	f7ff ff43 	bl	80024d0 <LL_ADC_IsEnabled>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4619      	mov	r1, r3
 8002656:	485a      	ldr	r0, [pc, #360]	@ (80027c0 <HAL_ADC_Init+0x27c>)
 8002658:	f7ff fde8 	bl	800222c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7e5b      	ldrb	r3, [r3, #25]
 8002660:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002666:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800266c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002672:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800267a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d106      	bne.n	8002698 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	3b01      	subs	r3, #1
 8002690:	045b      	lsls	r3, r3, #17
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d009      	beq.n	80026b4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	4b42      	ldr	r3, [pc, #264]	@ (80027c4 <HAL_ADC_Init+0x280>)
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	69b9      	ldr	r1, [r7, #24]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff25 	bl	800251c <LL_ADC_INJ_IsConversionOngoing>
 80026d2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d13d      	bne.n	8002756 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d13a      	bne.n	8002756 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026e4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ec:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026fc:	f023 0302 	bic.w	r3, r3, #2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	69b9      	ldr	r1, [r7, #24]
 8002706:	430b      	orrs	r3, r1
 8002708:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002710:	2b01      	cmp	r3, #1
 8002712:	d118      	bne.n	8002746 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800271e:	f023 0304 	bic.w	r3, r3, #4
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002730:	4311      	orrs	r1, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002736:	430a      	orrs	r2, r1
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	611a      	str	r2, [r3, #16]
 8002744:	e007      	b.n	8002756 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d10c      	bne.n	8002778 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002764:	f023 010f 	bic.w	r1, r3, #15
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	1e5a      	subs	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	631a      	str	r2, [r3, #48]	@ 0x30
 8002776:	e007      	b.n	8002788 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 020f 	bic.w	r2, r2, #15
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278c:	f023 0303 	bic.w	r3, r3, #3
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	@ 0x54
 8002798:	e007      	b.n	80027aa <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279e:	f043 0210 	orr.w	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3720      	adds	r7, #32
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	200001dc 	.word	0x200001dc
 80027b8:	053e2d63 	.word	0x053e2d63
 80027bc:	50040000 	.word	0x50040000
 80027c0:	50040300 	.word	0x50040300
 80027c4:	fff0c007 	.word	0xfff0c007

080027c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0b6      	sub	sp, #216	@ 0xd8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x22>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e3bb      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x79a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fe7d 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 83a0 	bne.w	8002f44 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b05      	cmp	r3, #5
 8002812:	d824      	bhi.n	800285e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	3b02      	subs	r3, #2
 800281a:	2b03      	cmp	r3, #3
 800281c:	d81b      	bhi.n	8002856 <HAL_ADC_ConfigChannel+0x8e>
 800281e:	a201      	add	r2, pc, #4	@ (adr r2, 8002824 <HAL_ADC_ConfigChannel+0x5c>)
 8002820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002824:	08002835 	.word	0x08002835
 8002828:	0800283d 	.word	0x0800283d
 800282c:	08002845 	.word	0x08002845
 8002830:	0800284d 	.word	0x0800284d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002834:	230c      	movs	r3, #12
 8002836:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800283a:	e010      	b.n	800285e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800283c:	2312      	movs	r3, #18
 800283e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002842:	e00c      	b.n	800285e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002844:	2318      	movs	r3, #24
 8002846:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800284a:	e008      	b.n	800285e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800284c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002854:	e003      	b.n	800285e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002856:	2306      	movs	r3, #6
 8002858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800285c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800286c:	f7ff fd67 	bl	800233e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fe3e 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 800287a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fe4a 	bl	800251c <LL_ADC_INJ_IsConversionOngoing>
 8002888:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800288c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 81a4 	bne.w	8002bde <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 819f 	bne.w	8002bde <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	461a      	mov	r2, r3
 80028ae:	f7ff fd72 	bl	8002396 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d00a      	beq.n	80028ea <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6919      	ldr	r1, [r3, #16]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028e4:	f7ff fcd6 	bl	8002294 <LL_ADC_SetOffset>
 80028e8:	e179      	b.n	8002bde <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fcf3 	bl	80022dc <LL_ADC_GetOffsetChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x14e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fce8 	bl	80022dc <LL_ADC_GetOffsetChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	0e9b      	lsrs	r3, r3, #26
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	e01e      	b.n	8002954 <HAL_ADC_ConfigChannel+0x18c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fcdd 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002934:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002938:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800293c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e004      	b.n	8002952 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002948:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_ADC_ConfigChannel+0x1a4>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0e9b      	lsrs	r3, r3, #26
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	e018      	b.n	800299e <HAL_ADC_ConfigChannel+0x1d6>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002980:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e004      	b.n	800299e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002994:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800299e:	429a      	cmp	r2, r3
 80029a0:	d106      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fcac 	bl	8002308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2101      	movs	r1, #1
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fc90 	bl	80022dc <LL_ADC_GetOffsetChannel>
 80029bc:	4603      	mov	r3, r0
 80029be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x214>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2101      	movs	r1, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fc85 	bl	80022dc <LL_ADC_GetOffsetChannel>
 80029d2:	4603      	mov	r3, r0
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	f003 021f 	and.w	r2, r3, #31
 80029da:	e01e      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x252>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2101      	movs	r1, #1
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fc7a 	bl	80022dc <LL_ADC_GetOffsetChannel>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80029fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	e004      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002a0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d105      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x26a>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	0e9b      	lsrs	r3, r3, #26
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	e018      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x29c>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002a4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e004      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002a5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d106      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2101      	movs	r1, #1
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fc49 	bl	8002308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fc2d 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x2da>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2102      	movs	r1, #2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fc22 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	0e9b      	lsrs	r3, r3, #26
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	e01e      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x318>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fc17 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ac4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	e004      	b.n	8002ade <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x330>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	0e9b      	lsrs	r3, r3, #26
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	e014      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x35a>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002b06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002b14:	2320      	movs	r3, #32
 8002b16:	e004      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d106      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fbea 	bl	8002308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2103      	movs	r1, #3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fbce 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10a      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x398>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2103      	movs	r1, #3
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fbc3 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002b56:	4603      	mov	r3, r0
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	f003 021f 	and.w	r2, r3, #31
 8002b5e:	e017      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x3c8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2103      	movs	r1, #3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fbb8 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b7a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002b7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b82:	2320      	movs	r3, #32
 8002b84:	e003      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x3e0>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	e011      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x404>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002bba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	e003      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002bc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d106      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2103      	movs	r1, #3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fb95 	bl	8002308 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fc74 	bl	80024d0 <LL_ADC_IsEnabled>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 8140 	bne.w	8002e70 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6819      	ldr	r1, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f7ff fbf5 	bl	80023ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	4a8f      	ldr	r2, [pc, #572]	@ (8002e44 <HAL_ADC_ConfigChannel+0x67c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	f040 8131 	bne.w	8002e70 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10b      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x46e>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0e9b      	lsrs	r3, r3, #26
 8002c24:	3301      	adds	r3, #1
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2b09      	cmp	r3, #9
 8002c2c:	bf94      	ite	ls
 8002c2e:	2301      	movls	r3, #1
 8002c30:	2300      	movhi	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	e019      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x4a2>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	e003      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	2b09      	cmp	r3, #9
 8002c62:	bf94      	ite	ls
 8002c64:	2301      	movls	r3, #1
 8002c66:	2300      	movhi	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d079      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d107      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x4c2>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0e9b      	lsrs	r3, r3, #26
 8002c80:	3301      	adds	r3, #1
 8002c82:	069b      	lsls	r3, r3, #26
 8002c84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c88:	e015      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x4ee>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c9a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	069b      	lsls	r3, r3, #26
 8002cb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x50e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	e017      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x53e>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e003      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	2101      	movs	r1, #1
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	ea42 0103 	orr.w	r1, r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x564>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f003 021f 	and.w	r2, r3, #31
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	051b      	lsls	r3, r3, #20
 8002d2a:	e018      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x596>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002d44:	2320      	movs	r3, #32
 8002d46:	e003      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f003 021f 	and.w	r2, r3, #31
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	e081      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d107      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x5b6>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0e9b      	lsrs	r3, r3, #26
 8002d74:	3301      	adds	r3, #1
 8002d76:	069b      	lsls	r3, r3, #26
 8002d78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d7c:	e015      	b.n	8002daa <HAL_ADC_ConfigChannel+0x5e2>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e003      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	069b      	lsls	r3, r3, #26
 8002da6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x602>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	0e9b      	lsrs	r3, r3, #26
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	e017      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x632>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	61bb      	str	r3, [r7, #24]
  return result;
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002de2:	2320      	movs	r3, #32
 8002de4:	e003      	b.n	8002dee <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	ea42 0103 	orr.w	r1, r2, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10d      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x65e>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	0e9b      	lsrs	r3, r3, #26
 8002e10:	3301      	adds	r3, #1
 8002e12:	f003 021f 	and.w	r2, r3, #31
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b1e      	subs	r3, #30
 8002e1e:	051b      	lsls	r3, r3, #20
 8002e20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e24:	e01e      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x69c>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	60fb      	str	r3, [r7, #12]
  return result;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	e006      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x688>
 8002e42:	bf00      	nop
 8002e44:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	f003 021f 	and.w	r2, r3, #31
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b1e      	subs	r3, #30
 8002e5e:	051b      	lsls	r3, r3, #20
 8002e60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e64:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f7ff fa93 	bl	8002396 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b3d      	ldr	r3, [pc, #244]	@ (8002f6c <HAL_ADC_ConfigChannel+0x7a4>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d06c      	beq.n	8002f56 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e7c:	483c      	ldr	r0, [pc, #240]	@ (8002f70 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e7e:	f7ff f9fb 	bl	8002278 <LL_ADC_GetCommonPathInternalCh>
 8002e82:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a3a      	ldr	r2, [pc, #232]	@ (8002f74 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d127      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d121      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a35      	ldr	r2, [pc, #212]	@ (8002f78 <HAL_ADC_ConfigChannel+0x7b0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d157      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ea6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002eaa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002eae:	4619      	mov	r1, r3
 8002eb0:	482f      	ldr	r0, [pc, #188]	@ (8002f70 <HAL_ADC_ConfigChannel+0x7a8>)
 8002eb2:	f7ff f9ce 	bl	8002252 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb6:	4b31      	ldr	r3, [pc, #196]	@ (8002f7c <HAL_ADC_ConfigChannel+0x7b4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	099b      	lsrs	r3, r3, #6
 8002ebc:	4a30      	ldr	r2, [pc, #192]	@ (8002f80 <HAL_ADC_ConfigChannel+0x7b8>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	099b      	lsrs	r3, r3, #6
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ed0:	e002      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f9      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ede:	e03a      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a27      	ldr	r2, [pc, #156]	@ (8002f84 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d113      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002eea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002eee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1f      	ldr	r2, [pc, #124]	@ (8002f78 <HAL_ADC_ConfigChannel+0x7b0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d12a      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4819      	ldr	r0, [pc, #100]	@ (8002f70 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f0c:	f7ff f9a1 	bl	8002252 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f10:	e021      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d11c      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d116      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a12      	ldr	r2, [pc, #72]	@ (8002f78 <HAL_ADC_ConfigChannel+0x7b0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d111      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	480c      	ldr	r0, [pc, #48]	@ (8002f70 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f3e:	f7ff f988 	bl	8002252 <LL_ADC_SetCommonPathInternalCh>
 8002f42:	e008      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	37d8      	adds	r7, #216	@ 0xd8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	80080000 	.word	0x80080000
 8002f70:	50040300 	.word	0x50040300
 8002f74:	c7520000 	.word	0xc7520000
 8002f78:	50040000 	.word	0x50040000
 8002f7c:	200001dc 	.word	0x200001dc
 8002f80:	053e2d63 	.word	0x053e2d63
 8002f84:	cb840000 	.word	0xcb840000
 8002f88:	80000001 	.word	0x80000001

08002f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fbe:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60d3      	str	r3, [r2, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4907      	ldr	r1, [pc, #28]	@ (8003028 <__NVIC_EnableIRQ+0x38>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	@ (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	@ (800307c <__NVIC_SetPriority+0x50>)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	@ 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
         );
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	@ 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f8:	d301      	bcc.n	80030fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00f      	b.n	800311e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003128 <SysTick_Config+0x40>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003106:	210f      	movs	r1, #15
 8003108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800310c:	f7ff ff8e 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <SysTick_Config+0x40>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <SysTick_Config+0x40>)
 8003118:	2207      	movs	r2, #7
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010

0800312c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff29 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003154:	f7ff ff3e 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 8003158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f7ff ff8e 	bl	8003080 <NVIC_EncodePriority>
 8003164:	4602      	mov	r2, r0
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff5d 	bl	800302c <__NVIC_SetPriority>
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff31 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffa2 	bl	80030e8 <SysTick_Config>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031be:	e154      	b.n	800346a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2101      	movs	r1, #1
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	4013      	ands	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8146 	beq.w	8003464 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d005      	beq.n	80031f0 <HAL_GPIO_Init+0x40>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d130      	bne.n	8003252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	2203      	movs	r2, #3
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003226:	2201      	movs	r2, #1
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	f003 0201 	and.w	r2, r3, #1
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b03      	cmp	r3, #3
 800325c:	d017      	beq.n	800328e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	2203      	movs	r2, #3
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d123      	bne.n	80032e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	08da      	lsrs	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3208      	adds	r2, #8
 80032a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	220f      	movs	r2, #15
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	08da      	lsrs	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3208      	adds	r2, #8
 80032dc:	6939      	ldr	r1, [r7, #16]
 80032de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	2203      	movs	r2, #3
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0203 	and.w	r2, r3, #3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80a0 	beq.w	8003464 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003324:	4b58      	ldr	r3, [pc, #352]	@ (8003488 <HAL_GPIO_Init+0x2d8>)
 8003326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003328:	4a57      	ldr	r2, [pc, #348]	@ (8003488 <HAL_GPIO_Init+0x2d8>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003330:	4b55      	ldr	r3, [pc, #340]	@ (8003488 <HAL_GPIO_Init+0x2d8>)
 8003332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800333c:	4a53      	ldr	r2, [pc, #332]	@ (800348c <HAL_GPIO_Init+0x2dc>)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003348:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	220f      	movs	r2, #15
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003366:	d019      	beq.n	800339c <HAL_GPIO_Init+0x1ec>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a49      	ldr	r2, [pc, #292]	@ (8003490 <HAL_GPIO_Init+0x2e0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d013      	beq.n	8003398 <HAL_GPIO_Init+0x1e8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a48      	ldr	r2, [pc, #288]	@ (8003494 <HAL_GPIO_Init+0x2e4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00d      	beq.n	8003394 <HAL_GPIO_Init+0x1e4>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a47      	ldr	r2, [pc, #284]	@ (8003498 <HAL_GPIO_Init+0x2e8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d007      	beq.n	8003390 <HAL_GPIO_Init+0x1e0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a46      	ldr	r2, [pc, #280]	@ (800349c <HAL_GPIO_Init+0x2ec>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_GPIO_Init+0x1dc>
 8003388:	2304      	movs	r3, #4
 800338a:	e008      	b.n	800339e <HAL_GPIO_Init+0x1ee>
 800338c:	2307      	movs	r3, #7
 800338e:	e006      	b.n	800339e <HAL_GPIO_Init+0x1ee>
 8003390:	2303      	movs	r3, #3
 8003392:	e004      	b.n	800339e <HAL_GPIO_Init+0x1ee>
 8003394:	2302      	movs	r3, #2
 8003396:	e002      	b.n	800339e <HAL_GPIO_Init+0x1ee>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <HAL_GPIO_Init+0x1ee>
 800339c:	2300      	movs	r3, #0
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	f002 0203 	and.w	r2, r2, #3
 80033a4:	0092      	lsls	r2, r2, #2
 80033a6:	4093      	lsls	r3, r2
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033ae:	4937      	ldr	r1, [pc, #220]	@ (800348c <HAL_GPIO_Init+0x2dc>)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033bc:	4b38      	ldr	r3, [pc, #224]	@ (80034a0 <HAL_GPIO_Init+0x2f0>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033e0:	4a2f      	ldr	r2, [pc, #188]	@ (80034a0 <HAL_GPIO_Init+0x2f0>)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033e6:	4b2e      	ldr	r3, [pc, #184]	@ (80034a0 <HAL_GPIO_Init+0x2f0>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800340a:	4a25      	ldr	r2, [pc, #148]	@ (80034a0 <HAL_GPIO_Init+0x2f0>)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003410:	4b23      	ldr	r3, [pc, #140]	@ (80034a0 <HAL_GPIO_Init+0x2f0>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	43db      	mvns	r3, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003434:	4a1a      	ldr	r2, [pc, #104]	@ (80034a0 <HAL_GPIO_Init+0x2f0>)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800343a:	4b19      	ldr	r3, [pc, #100]	@ (80034a0 <HAL_GPIO_Init+0x2f0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800345e:	4a10      	ldr	r2, [pc, #64]	@ (80034a0 <HAL_GPIO_Init+0x2f0>)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	3301      	adds	r3, #1
 8003468:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	f47f aea3 	bne.w	80031c0 <HAL_GPIO_Init+0x10>
  }
}
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40021000 	.word	0x40021000
 800348c:	40010000 	.word	0x40010000
 8003490:	48000400 	.word	0x48000400
 8003494:	48000800 	.word	0x48000800
 8003498:	48000c00 	.word	0x48000c00
 800349c:	48001000 	.word	0x48001000
 80034a0:	40010400 	.word	0x40010400

080034a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e001      	b.n	80034c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	807b      	strh	r3, [r7, #2]
 80034e0:	4613      	mov	r3, r2
 80034e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e4:	787b      	ldrb	r3, [r7, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ea:	887a      	ldrh	r2, [r7, #2]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034f0:	e002      	b.n	80034f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800350e:	4b08      	ldr	r3, [pc, #32]	@ (8003530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d006      	beq.n	8003528 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800351a:	4a05      	ldr	r2, [pc, #20]	@ (8003530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe f8c2 	bl	80016ac <HAL_GPIO_EXTI_Callback>
  }
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40010400 	.word	0x40010400

08003534 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003538:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800353e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003542:	6013      	str	r3, [r2, #0]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40007000 	.word	0x40007000

08003554 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <HAL_PWREx_GetVoltageRange+0x18>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003560:	4618      	mov	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40007000 	.word	0x40007000

08003570 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800357e:	d130      	bne.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003580:	4b23      	ldr	r3, [pc, #140]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800358c:	d038      	beq.n	8003600 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800358e:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003596:	4a1e      	ldr	r2, [pc, #120]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003598:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800359c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800359e:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2232      	movs	r2, #50	@ 0x32
 80035a4:	fb02 f303 	mul.w	r3, r2, r3
 80035a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003618 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0c9b      	lsrs	r3, r3, #18
 80035b0:	3301      	adds	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035b4:	e002      	b.n	80035bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035bc:	4b14      	ldr	r3, [pc, #80]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c8:	d102      	bne.n	80035d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f2      	bne.n	80035b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035dc:	d110      	bne.n	8003600 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e00f      	b.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ee:	d007      	beq.n	8003600 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035f0:	4b07      	ldr	r3, [pc, #28]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035f8:	4a05      	ldr	r2, [pc, #20]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40007000 	.word	0x40007000
 8003614:	200001dc 	.word	0x200001dc
 8003618:	431bde83 	.word	0x431bde83

0800361c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f000 bc02 	b.w	8003e34 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003630:	4b96      	ldr	r3, [pc, #600]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 030c 	and.w	r3, r3, #12
 8003638:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800363a:	4b94      	ldr	r3, [pc, #592]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80e4 	beq.w	800381a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_RCC_OscConfig+0x4c>
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b0c      	cmp	r3, #12
 800365c:	f040 808b 	bne.w	8003776 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b01      	cmp	r3, #1
 8003664:	f040 8087 	bne.w	8003776 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003668:	4b88      	ldr	r3, [pc, #544]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_OscConfig+0x64>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e3d9      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1a      	ldr	r2, [r3, #32]
 8003684:	4b81      	ldr	r3, [pc, #516]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d004      	beq.n	800369a <HAL_RCC_OscConfig+0x7e>
 8003690:	4b7e      	ldr	r3, [pc, #504]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003698:	e005      	b.n	80036a6 <HAL_RCC_OscConfig+0x8a>
 800369a:	4b7c      	ldr	r3, [pc, #496]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 800369c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d223      	bcs.n	80036f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fd8c 	bl	80041cc <RCC_SetFlashLatencyFromMSIRange>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e3ba      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036be:	4b73      	ldr	r3, [pc, #460]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a72      	ldr	r2, [pc, #456]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80036c4:	f043 0308 	orr.w	r3, r3, #8
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b70      	ldr	r3, [pc, #448]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	496d      	ldr	r1, [pc, #436]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036dc:	4b6b      	ldr	r3, [pc, #428]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	4968      	ldr	r1, [pc, #416]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
 80036f0:	e025      	b.n	800373e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f2:	4b66      	ldr	r3, [pc, #408]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a65      	ldr	r2, [pc, #404]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80036f8:	f043 0308 	orr.w	r3, r3, #8
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b63      	ldr	r3, [pc, #396]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4960      	ldr	r1, [pc, #384]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 800370c:	4313      	orrs	r3, r2
 800370e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003710:	4b5e      	ldr	r3, [pc, #376]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	495b      	ldr	r1, [pc, #364]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fd4c 	bl	80041cc <RCC_SetFlashLatencyFromMSIRange>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e37a      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800373e:	f000 fc81 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8003742:	4602      	mov	r2, r0
 8003744:	4b51      	ldr	r3, [pc, #324]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	4950      	ldr	r1, [pc, #320]	@ (8003890 <HAL_RCC_OscConfig+0x274>)
 8003750:	5ccb      	ldrb	r3, [r1, r3]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	fa22 f303 	lsr.w	r3, r2, r3
 800375a:	4a4e      	ldr	r2, [pc, #312]	@ (8003894 <HAL_RCC_OscConfig+0x278>)
 800375c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800375e:	4b4e      	ldr	r3, [pc, #312]	@ (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fce2 	bl	800212c <HAL_InitTick>
 8003768:	4603      	mov	r3, r0
 800376a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d052      	beq.n	8003818 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	e35e      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d032      	beq.n	80037e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800377e:	4b43      	ldr	r3, [pc, #268]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a42      	ldr	r2, [pc, #264]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800378a:	f7fe fd1f 	bl	80021cc <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003792:	f7fe fd1b 	bl	80021cc <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e347      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037a4:	4b39      	ldr	r3, [pc, #228]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b0:	4b36      	ldr	r3, [pc, #216]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a35      	ldr	r2, [pc, #212]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80037b6:	f043 0308 	orr.w	r3, r3, #8
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b33      	ldr	r3, [pc, #204]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	4930      	ldr	r1, [pc, #192]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ce:	4b2f      	ldr	r3, [pc, #188]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	492b      	ldr	r1, [pc, #172]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
 80037e2:	e01a      	b.n	800381a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037e4:	4b29      	ldr	r3, [pc, #164]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a28      	ldr	r2, [pc, #160]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037f0:	f7fe fcec 	bl	80021cc <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037f8:	f7fe fce8 	bl	80021cc <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e314      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800380a:	4b20      	ldr	r3, [pc, #128]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x1dc>
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003818:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d073      	beq.n	800390e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b08      	cmp	r3, #8
 800382a:	d005      	beq.n	8003838 <HAL_RCC_OscConfig+0x21c>
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d10e      	bne.n	8003850 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b03      	cmp	r3, #3
 8003836:	d10b      	bne.n	8003850 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003838:	4b14      	ldr	r3, [pc, #80]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d063      	beq.n	800390c <HAL_RCC_OscConfig+0x2f0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d15f      	bne.n	800390c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e2f1      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003858:	d106      	bne.n	8003868 <HAL_RCC_OscConfig+0x24c>
 800385a:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a0b      	ldr	r2, [pc, #44]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e025      	b.n	80038b4 <HAL_RCC_OscConfig+0x298>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003870:	d114      	bne.n	800389c <HAL_RCC_OscConfig+0x280>
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a05      	ldr	r2, [pc, #20]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4b03      	ldr	r3, [pc, #12]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a02      	ldr	r2, [pc, #8]	@ (800388c <HAL_RCC_OscConfig+0x270>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e013      	b.n	80038b4 <HAL_RCC_OscConfig+0x298>
 800388c:	40021000 	.word	0x40021000
 8003890:	08020d9c 	.word	0x08020d9c
 8003894:	200001dc 	.word	0x200001dc
 8003898:	200001e0 	.word	0x200001e0
 800389c:	4ba0      	ldr	r3, [pc, #640]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a9f      	ldr	r2, [pc, #636]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 80038a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b9d      	ldr	r3, [pc, #628]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a9c      	ldr	r2, [pc, #624]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 80038ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d013      	beq.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fe fc86 	bl	80021cc <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c4:	f7fe fc82 	bl	80021cc <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	@ 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e2ae      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d6:	4b92      	ldr	r3, [pc, #584]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x2a8>
 80038e2:	e014      	b.n	800390e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe fc72 	bl	80021cc <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fe fc6e 	bl	80021cc <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	@ 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e29a      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038fe:	4b88      	ldr	r3, [pc, #544]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x2d0>
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d060      	beq.n	80039dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b04      	cmp	r3, #4
 800391e:	d005      	beq.n	800392c <HAL_RCC_OscConfig+0x310>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b0c      	cmp	r3, #12
 8003924:	d119      	bne.n	800395a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d116      	bne.n	800395a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800392c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_OscConfig+0x328>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e277      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003944:	4b76      	ldr	r3, [pc, #472]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	061b      	lsls	r3, r3, #24
 8003952:	4973      	ldr	r1, [pc, #460]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003958:	e040      	b.n	80039dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d023      	beq.n	80039aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003962:	4b6f      	ldr	r3, [pc, #444]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6e      	ldr	r2, [pc, #440]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800396c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fe fc2d 	bl	80021cc <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003976:	f7fe fc29 	bl	80021cc <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e255      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003988:	4b65      	ldr	r3, [pc, #404]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b62      	ldr	r3, [pc, #392]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	495f      	ldr	r1, [pc, #380]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
 80039a8:	e018      	b.n	80039dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fe fc09 	bl	80021cc <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7fe fc05 	bl	80021cc <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e231      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039d0:	4b53      	ldr	r3, [pc, #332]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d03c      	beq.n	8003a62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01c      	beq.n	8003a2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fe fbe4 	bl	80021cc <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a08:	f7fe fbe0 	bl	80021cc <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e20c      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a1a:	4b41      	ldr	r3, [pc, #260]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ef      	beq.n	8003a08 <HAL_RCC_OscConfig+0x3ec>
 8003a28:	e01b      	b.n	8003a62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a30:	4a3b      	ldr	r2, [pc, #236]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fbc7 	bl	80021cc <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a42:	f7fe fbc3 	bl	80021cc <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1ef      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a54:	4b32      	ldr	r3, [pc, #200]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1ef      	bne.n	8003a42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 80a6 	beq.w	8003bbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a70:	2300      	movs	r3, #0
 8003a72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a74:	4b2a      	ldr	r3, [pc, #168]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10d      	bne.n	8003a9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	4b27      	ldr	r3, [pc, #156]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	4a26      	ldr	r2, [pc, #152]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a8c:	4b24      	ldr	r3, [pc, #144]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9c:	4b21      	ldr	r3, [pc, #132]	@ (8003b24 <HAL_RCC_OscConfig+0x508>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d118      	bne.n	8003ada <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <HAL_RCC_OscConfig+0x508>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1d      	ldr	r2, [pc, #116]	@ (8003b24 <HAL_RCC_OscConfig+0x508>)
 8003aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab4:	f7fe fb8a 	bl	80021cc <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abc:	f7fe fb86 	bl	80021cc <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1b2      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ace:	4b15      	ldr	r3, [pc, #84]	@ (8003b24 <HAL_RCC_OscConfig+0x508>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d108      	bne.n	8003af4 <HAL_RCC_OscConfig+0x4d8>
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003af2:	e029      	b.n	8003b48 <HAL_RCC_OscConfig+0x52c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d115      	bne.n	8003b28 <HAL_RCC_OscConfig+0x50c>
 8003afc:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b02:	4a07      	ldr	r2, [pc, #28]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b0c:	4b04      	ldr	r3, [pc, #16]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b12:	4a03      	ldr	r2, [pc, #12]	@ (8003b20 <HAL_RCC_OscConfig+0x504>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b1c:	e014      	b.n	8003b48 <HAL_RCC_OscConfig+0x52c>
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40007000 	.word	0x40007000
 8003b28:	4b9a      	ldr	r3, [pc, #616]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2e:	4a99      	ldr	r2, [pc, #612]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b38:	4b96      	ldr	r3, [pc, #600]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3e:	4a95      	ldr	r2, [pc, #596]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003b40:	f023 0304 	bic.w	r3, r3, #4
 8003b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d016      	beq.n	8003b7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fe fb3c 	bl	80021cc <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fe fb38 	bl	80021cc <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e162      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b6e:	4b89      	ldr	r3, [pc, #548]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0ed      	beq.n	8003b58 <HAL_RCC_OscConfig+0x53c>
 8003b7c:	e015      	b.n	8003baa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7e:	f7fe fb25 	bl	80021cc <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b84:	e00a      	b.n	8003b9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7fe fb21 	bl	80021cc <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e14b      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b9c:	4b7d      	ldr	r3, [pc, #500]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1ed      	bne.n	8003b86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003baa:	7ffb      	ldrb	r3, [r7, #31]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb0:	4b78      	ldr	r3, [pc, #480]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	4a77      	ldr	r2, [pc, #476]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d03c      	beq.n	8003c42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01c      	beq.n	8003c0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bd0:	4b70      	ldr	r3, [pc, #448]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bd6:	4a6f      	ldr	r2, [pc, #444]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fe faf4 	bl	80021cc <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be8:	f7fe faf0 	bl	80021cc <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e11c      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bfa:	4b66      	ldr	r3, [pc, #408]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ef      	beq.n	8003be8 <HAL_RCC_OscConfig+0x5cc>
 8003c08:	e01b      	b.n	8003c42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c0a:	4b62      	ldr	r3, [pc, #392]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c10:	4a60      	ldr	r2, [pc, #384]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1a:	f7fe fad7 	bl	80021cc <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c22:	f7fe fad3 	bl	80021cc <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0ff      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c34:	4b57      	ldr	r3, [pc, #348]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1ef      	bne.n	8003c22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80f3 	beq.w	8003e32 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	f040 80c9 	bne.w	8003de8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c56:	4b4f      	ldr	r3, [pc, #316]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 0203 	and.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d12c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	3b01      	subs	r3, #1
 8003c76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d123      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d113      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d109      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d06b      	beq.n	8003d9c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d062      	beq.n	8003d90 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cca:	4b32      	ldr	r3, [pc, #200]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0ac      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003cda:	4b2e      	ldr	r3, [pc, #184]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2d      	ldr	r2, [pc, #180]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003ce0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ce4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ce6:	f7fe fa71 	bl	80021cc <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cee:	f7fe fa6d 	bl	80021cc <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e099      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d00:	4b24      	ldr	r3, [pc, #144]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f0      	bne.n	8003cee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d0c:	4b21      	ldr	r3, [pc, #132]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	4b21      	ldr	r3, [pc, #132]	@ (8003d98 <HAL_RCC_OscConfig+0x77c>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d1c:	3a01      	subs	r2, #1
 8003d1e:	0112      	lsls	r2, r2, #4
 8003d20:	4311      	orrs	r1, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d26:	0212      	lsls	r2, r2, #8
 8003d28:	4311      	orrs	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d2e:	0852      	lsrs	r2, r2, #1
 8003d30:	3a01      	subs	r2, #1
 8003d32:	0552      	lsls	r2, r2, #21
 8003d34:	4311      	orrs	r1, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d3a:	0852      	lsrs	r2, r2, #1
 8003d3c:	3a01      	subs	r2, #1
 8003d3e:	0652      	lsls	r2, r2, #25
 8003d40:	4311      	orrs	r1, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d46:	06d2      	lsls	r2, r2, #27
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	4912      	ldr	r1, [pc, #72]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d50:	4b10      	ldr	r3, [pc, #64]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0f      	ldr	r2, [pc, #60]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a0c      	ldr	r2, [pc, #48]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d68:	f7fe fa30 	bl	80021cc <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fe fa2c 	bl	80021cc <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e058      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d82:	4b04      	ldr	r3, [pc, #16]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d8e:	e050      	b.n	8003e32 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e04f      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
 8003d94:	40021000 	.word	0x40021000
 8003d98:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9c:	4b27      	ldr	r3, [pc, #156]	@ (8003e3c <HAL_RCC_OscConfig+0x820>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d144      	bne.n	8003e32 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003da8:	4b24      	ldr	r3, [pc, #144]	@ (8003e3c <HAL_RCC_OscConfig+0x820>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a23      	ldr	r2, [pc, #140]	@ (8003e3c <HAL_RCC_OscConfig+0x820>)
 8003dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003db2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003db4:	4b21      	ldr	r3, [pc, #132]	@ (8003e3c <HAL_RCC_OscConfig+0x820>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a20      	ldr	r2, [pc, #128]	@ (8003e3c <HAL_RCC_OscConfig+0x820>)
 8003dba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dc0:	f7fe fa04 	bl	80021cc <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fe fa00 	bl	80021cc <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e02c      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dda:	4b18      	ldr	r3, [pc, #96]	@ (8003e3c <HAL_RCC_OscConfig+0x820>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x7ac>
 8003de6:	e024      	b.n	8003e32 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d01f      	beq.n	8003e2e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b13      	ldr	r3, [pc, #76]	@ (8003e3c <HAL_RCC_OscConfig+0x820>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a12      	ldr	r2, [pc, #72]	@ (8003e3c <HAL_RCC_OscConfig+0x820>)
 8003df4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fe f9e7 	bl	80021cc <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fe f9e3 	bl	80021cc <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e00f      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e14:	4b09      	ldr	r3, [pc, #36]	@ (8003e3c <HAL_RCC_OscConfig+0x820>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003e20:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <HAL_RCC_OscConfig+0x820>)
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	4905      	ldr	r1, [pc, #20]	@ (8003e3c <HAL_RCC_OscConfig+0x820>)
 8003e26:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <HAL_RCC_OscConfig+0x824>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	60cb      	str	r3, [r1, #12]
 8003e2c:	e001      	b.n	8003e32 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	feeefffc 	.word	0xfeeefffc

08003e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0e7      	b.n	8004028 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e58:	4b75      	ldr	r3, [pc, #468]	@ (8004030 <HAL_RCC_ClockConfig+0x1ec>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d910      	bls.n	8003e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b72      	ldr	r3, [pc, #456]	@ (8004030 <HAL_RCC_ClockConfig+0x1ec>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 0207 	bic.w	r2, r3, #7
 8003e6e:	4970      	ldr	r1, [pc, #448]	@ (8004030 <HAL_RCC_ClockConfig+0x1ec>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b6e      	ldr	r3, [pc, #440]	@ (8004030 <HAL_RCC_ClockConfig+0x1ec>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0cf      	b.n	8004028 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d010      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	4b66      	ldr	r3, [pc, #408]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d908      	bls.n	8003eb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea4:	4b63      	ldr	r3, [pc, #396]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4960      	ldr	r1, [pc, #384]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d04c      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eca:	4b5a      	ldr	r3, [pc, #360]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d121      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e0a6      	b.n	8004028 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee2:	4b54      	ldr	r3, [pc, #336]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d115      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e09a      	b.n	8004028 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003efa:	4b4e      	ldr	r3, [pc, #312]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e08e      	b.n	8004028 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e086      	b.n	8004028 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f1a:	4b46      	ldr	r3, [pc, #280]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f023 0203 	bic.w	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4943      	ldr	r1, [pc, #268]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2c:	f7fe f94e 	bl	80021cc <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f34:	f7fe f94a 	bl	80021cc <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e06e      	b.n	8004028 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 020c 	and.w	r2, r3, #12
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d1eb      	bne.n	8003f34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d010      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	4b31      	ldr	r3, [pc, #196]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d208      	bcs.n	8003f8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b2e      	ldr	r3, [pc, #184]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	492b      	ldr	r1, [pc, #172]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f8a:	4b29      	ldr	r3, [pc, #164]	@ (8004030 <HAL_RCC_ClockConfig+0x1ec>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d210      	bcs.n	8003fba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f98:	4b25      	ldr	r3, [pc, #148]	@ (8004030 <HAL_RCC_ClockConfig+0x1ec>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f023 0207 	bic.w	r2, r3, #7
 8003fa0:	4923      	ldr	r1, [pc, #140]	@ (8004030 <HAL_RCC_ClockConfig+0x1ec>)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa8:	4b21      	ldr	r3, [pc, #132]	@ (8004030 <HAL_RCC_ClockConfig+0x1ec>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d001      	beq.n	8003fba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e036      	b.n	8004028 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	4918      	ldr	r1, [pc, #96]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d009      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe4:	4b13      	ldr	r3, [pc, #76]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4910      	ldr	r1, [pc, #64]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ff8:	f000 f824 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <HAL_RCC_ClockConfig+0x1f0>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	091b      	lsrs	r3, r3, #4
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	490b      	ldr	r1, [pc, #44]	@ (8004038 <HAL_RCC_ClockConfig+0x1f4>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	4a09      	ldr	r2, [pc, #36]	@ (800403c <HAL_RCC_ClockConfig+0x1f8>)
 8004016:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004018:	4b09      	ldr	r3, [pc, #36]	@ (8004040 <HAL_RCC_ClockConfig+0x1fc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe f885 	bl	800212c <HAL_InitTick>
 8004022:	4603      	mov	r3, r0
 8004024:	72fb      	strb	r3, [r7, #11]

  return status;
 8004026:	7afb      	ldrb	r3, [r7, #11]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40022000 	.word	0x40022000
 8004034:	40021000 	.word	0x40021000
 8004038:	08020d9c 	.word	0x08020d9c
 800403c:	200001dc 	.word	0x200001dc
 8004040:	200001e0 	.word	0x200001e0

08004044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004044:	b480      	push	{r7}
 8004046:	b089      	sub	sp, #36	@ 0x24
 8004048:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	2300      	movs	r3, #0
 8004050:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004052:	4b3e      	ldr	r3, [pc, #248]	@ (800414c <HAL_RCC_GetSysClockFreq+0x108>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800405c:	4b3b      	ldr	r3, [pc, #236]	@ (800414c <HAL_RCC_GetSysClockFreq+0x108>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x34>
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b0c      	cmp	r3, #12
 8004070:	d121      	bne.n	80040b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d11e      	bne.n	80040b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004078:	4b34      	ldr	r3, [pc, #208]	@ (800414c <HAL_RCC_GetSysClockFreq+0x108>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d107      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004084:	4b31      	ldr	r3, [pc, #196]	@ (800414c <HAL_RCC_GetSysClockFreq+0x108>)
 8004086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e005      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004094:	4b2d      	ldr	r3, [pc, #180]	@ (800414c <HAL_RCC_GetSysClockFreq+0x108>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10d      	bne.n	80040cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d102      	bne.n	80040c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040bc:	4b25      	ldr	r3, [pc, #148]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x110>)
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	e004      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040c8:	4b23      	ldr	r3, [pc, #140]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x114>)
 80040ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b0c      	cmp	r3, #12
 80040d0:	d134      	bne.n	800413c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040d2:	4b1e      	ldr	r3, [pc, #120]	@ (800414c <HAL_RCC_GetSysClockFreq+0x108>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d003      	beq.n	80040ea <HAL_RCC_GetSysClockFreq+0xa6>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d003      	beq.n	80040f0 <HAL_RCC_GetSysClockFreq+0xac>
 80040e8:	e005      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x110>)
 80040ec:	617b      	str	r3, [r7, #20]
      break;
 80040ee:	e005      	b.n	80040fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040f0:	4b19      	ldr	r3, [pc, #100]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x114>)
 80040f2:	617b      	str	r3, [r7, #20]
      break;
 80040f4:	e002      	b.n	80040fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	617b      	str	r3, [r7, #20]
      break;
 80040fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040fc:	4b13      	ldr	r3, [pc, #76]	@ (800414c <HAL_RCC_GetSysClockFreq+0x108>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	3301      	adds	r3, #1
 8004108:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800410a:	4b10      	ldr	r3, [pc, #64]	@ (800414c <HAL_RCC_GetSysClockFreq+0x108>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	fb03 f202 	mul.w	r2, r3, r2
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004122:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <HAL_RCC_GetSysClockFreq+0x108>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	0e5b      	lsrs	r3, r3, #25
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	3301      	adds	r3, #1
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	fbb2 f3f3 	udiv	r3, r2, r3
 800413a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800413c:	69bb      	ldr	r3, [r7, #24]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3724      	adds	r7, #36	@ 0x24
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000
 8004150:	08020db4 	.word	0x08020db4
 8004154:	00f42400 	.word	0x00f42400
 8004158:	007a1200 	.word	0x007a1200

0800415c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004160:	4b03      	ldr	r3, [pc, #12]	@ (8004170 <HAL_RCC_GetHCLKFreq+0x14>)
 8004162:	681b      	ldr	r3, [r3, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	200001dc 	.word	0x200001dc

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004178:	f7ff fff0 	bl	800415c <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4904      	ldr	r1, [pc, #16]	@ (800419c <HAL_RCC_GetPCLK1Freq+0x28>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	08020dac 	.word	0x08020dac

080041a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041a4:	f7ff ffda 	bl	800415c <HAL_RCC_GetHCLKFreq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	0adb      	lsrs	r3, r3, #11
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	4904      	ldr	r1, [pc, #16]	@ (80041c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041b6:	5ccb      	ldrb	r3, [r1, r3]
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40021000 	.word	0x40021000
 80041c8:	08020dac 	.word	0x08020dac

080041cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041e4:	f7ff f9b6 	bl	8003554 <HAL_PWREx_GetVoltageRange>
 80041e8:	6178      	str	r0, [r7, #20]
 80041ea:	e014      	b.n	8004216 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ec:	4b25      	ldr	r3, [pc, #148]	@ (8004284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f0:	4a24      	ldr	r2, [pc, #144]	@ (8004284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041f8:	4b22      	ldr	r3, [pc, #136]	@ (8004284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004204:	f7ff f9a6 	bl	8003554 <HAL_PWREx_GetVoltageRange>
 8004208:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800420a:	4b1e      	ldr	r3, [pc, #120]	@ (8004284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800420c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420e:	4a1d      	ldr	r2, [pc, #116]	@ (8004284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004214:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800421c:	d10b      	bne.n	8004236 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b80      	cmp	r3, #128	@ 0x80
 8004222:	d919      	bls.n	8004258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2ba0      	cmp	r3, #160	@ 0xa0
 8004228:	d902      	bls.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800422a:	2302      	movs	r3, #2
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	e013      	b.n	8004258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004230:	2301      	movs	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	e010      	b.n	8004258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b80      	cmp	r3, #128	@ 0x80
 800423a:	d902      	bls.n	8004242 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800423c:	2303      	movs	r3, #3
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	e00a      	b.n	8004258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b80      	cmp	r3, #128	@ 0x80
 8004246:	d102      	bne.n	800424e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004248:	2302      	movs	r3, #2
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	e004      	b.n	8004258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b70      	cmp	r3, #112	@ 0x70
 8004252:	d101      	bne.n	8004258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004254:	2301      	movs	r3, #1
 8004256:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004258:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f023 0207 	bic.w	r2, r3, #7
 8004260:	4909      	ldr	r1, [pc, #36]	@ (8004288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004268:	4b07      	ldr	r3, [pc, #28]	@ (8004288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	429a      	cmp	r2, r3
 8004274:	d001      	beq.n	800427a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000
 8004288:	40022000 	.word	0x40022000

0800428c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004294:	2300      	movs	r3, #0
 8004296:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004298:	2300      	movs	r3, #0
 800429a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d031      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042b0:	d01a      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80042b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042b6:	d814      	bhi.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042c0:	d10f      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80042c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ce:	e00c      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	2100      	movs	r1, #0
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fa00 	bl	80046dc <RCCEx_PLLSAI1_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042e0:	e003      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	74fb      	strb	r3, [r7, #19]
      break;
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80042e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ea:	7cfb      	ldrb	r3, [r7, #19]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10b      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042f0:	4b51      	ldr	r3, [pc, #324]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	494e      	ldr	r1, [pc, #312]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004306:	e001      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 809e 	beq.w	8004456 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800431a:	2300      	movs	r3, #0
 800431c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800431e:	4b46      	ldr	r3, [pc, #280]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800432e:	2300      	movs	r3, #0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004334:	4b40      	ldr	r3, [pc, #256]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004338:	4a3f      	ldr	r2, [pc, #252]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800433a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800433e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004340:	4b3d      	ldr	r3, [pc, #244]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800434c:	2301      	movs	r3, #1
 800434e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004350:	4b3a      	ldr	r3, [pc, #232]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a39      	ldr	r2, [pc, #228]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800435a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800435c:	f7fd ff36 	bl	80021cc <HAL_GetTick>
 8004360:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004362:	e009      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004364:	f7fd ff32 	bl	80021cc <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d902      	bls.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	74fb      	strb	r3, [r7, #19]
        break;
 8004376:	e005      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004378:	4b30      	ldr	r3, [pc, #192]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0ef      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004384:	7cfb      	ldrb	r3, [r7, #19]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d15a      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800438a:	4b2b      	ldr	r3, [pc, #172]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004394:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01e      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d019      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043a6:	4b24      	ldr	r3, [pc, #144]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043b2:	4b21      	ldr	r3, [pc, #132]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043d2:	4a19      	ldr	r2, [pc, #100]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d016      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd fef2 	bl	80021cc <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ea:	e00b      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ec:	f7fd feee 	bl	80021cc <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d902      	bls.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	74fb      	strb	r3, [r7, #19]
            break;
 8004402:	e006      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004404:	4b0c      	ldr	r3, [pc, #48]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0ec      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004412:	7cfb      	ldrb	r3, [r7, #19]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10b      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004418:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004426:	4904      	ldr	r1, [pc, #16]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800442e:	e009      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	74bb      	strb	r3, [r7, #18]
 8004434:	e006      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004444:	7c7b      	ldrb	r3, [r7, #17]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444a:	4b9b      	ldr	r3, [pc, #620]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444e:	4a9a      	ldr	r2, [pc, #616]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004454:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004462:	4b95      	ldr	r3, [pc, #596]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004468:	f023 0203 	bic.w	r2, r3, #3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	4991      	ldr	r1, [pc, #580]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004484:	4b8c      	ldr	r3, [pc, #560]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448a:	f023 020c 	bic.w	r2, r3, #12
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004492:	4989      	ldr	r1, [pc, #548]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044a6:	4b84      	ldr	r3, [pc, #528]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b4:	4980      	ldr	r1, [pc, #512]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044c8:	4b7b      	ldr	r3, [pc, #492]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	4978      	ldr	r1, [pc, #480]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ea:	4b73      	ldr	r3, [pc, #460]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	496f      	ldr	r1, [pc, #444]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800450c:	4b6a      	ldr	r3, [pc, #424]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	4967      	ldr	r1, [pc, #412]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800452e:	4b62      	ldr	r3, [pc, #392]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004534:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	495e      	ldr	r1, [pc, #376]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004550:	4b59      	ldr	r3, [pc, #356]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004556:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455e:	4956      	ldr	r1, [pc, #344]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004572:	4b51      	ldr	r3, [pc, #324]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	494d      	ldr	r1, [pc, #308]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d028      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004594:	4b48      	ldr	r3, [pc, #288]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a2:	4945      	ldr	r1, [pc, #276]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045b2:	d106      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b4:	4b40      	ldr	r3, [pc, #256]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a3f      	ldr	r2, [pc, #252]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045be:	60d3      	str	r3, [r2, #12]
 80045c0:	e011      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045ca:	d10c      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f882 	bl	80046dc <RCCEx_PLLSAI1_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80045e2:	7cfb      	ldrb	r3, [r7, #19]
 80045e4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d028      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045f2:	4b31      	ldr	r3, [pc, #196]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004600:	492d      	ldr	r1, [pc, #180]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004610:	d106      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004612:	4b29      	ldr	r3, [pc, #164]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	4a28      	ldr	r2, [pc, #160]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004618:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800461c:	60d3      	str	r3, [r2, #12]
 800461e:	e011      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004628:	d10c      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	2101      	movs	r1, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f000 f853 	bl	80046dc <RCCEx_PLLSAI1_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01c      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004650:	4b19      	ldr	r3, [pc, #100]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465e:	4916      	ldr	r1, [pc, #88]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800466e:	d10c      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	2102      	movs	r1, #2
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f830 	bl	80046dc <RCCEx_PLLSAI1_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004686:	7cfb      	ldrb	r3, [r7, #19]
 8004688:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004696:	4b08      	ldr	r3, [pc, #32]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a4:	4904      	ldr	r1, [pc, #16]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000

080046bc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80046c0:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a04      	ldr	r2, [pc, #16]	@ (80046d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	bf00      	nop
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000

080046dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ea:	4b74      	ldr	r3, [pc, #464]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d018      	beq.n	8004728 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046f6:	4b71      	ldr	r3, [pc, #452]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0203 	and.w	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d10d      	bne.n	8004722 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
       ||
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800470e:	4b6b      	ldr	r3, [pc, #428]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
       ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d047      	beq.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	e044      	b.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d018      	beq.n	8004762 <RCCEx_PLLSAI1_Config+0x86>
 8004730:	2b03      	cmp	r3, #3
 8004732:	d825      	bhi.n	8004780 <RCCEx_PLLSAI1_Config+0xa4>
 8004734:	2b01      	cmp	r3, #1
 8004736:	d002      	beq.n	800473e <RCCEx_PLLSAI1_Config+0x62>
 8004738:	2b02      	cmp	r3, #2
 800473a:	d009      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x74>
 800473c:	e020      	b.n	8004780 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800473e:	4b5f      	ldr	r3, [pc, #380]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d11d      	bne.n	8004786 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474e:	e01a      	b.n	8004786 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004750:	4b5a      	ldr	r3, [pc, #360]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004758:	2b00      	cmp	r3, #0
 800475a:	d116      	bne.n	800478a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004760:	e013      	b.n	800478a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004762:	4b56      	ldr	r3, [pc, #344]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800476e:	4b53      	ldr	r3, [pc, #332]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800477e:	e006      	b.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	e004      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004796:	4b49      	ldr	r3, [pc, #292]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	430b      	orrs	r3, r1
 80047ac:	4943      	ldr	r1, [pc, #268]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d17c      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047b8:	4b40      	ldr	r3, [pc, #256]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a3f      	ldr	r2, [pc, #252]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c4:	f7fd fd02 	bl	80021cc <HAL_GetTick>
 80047c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ca:	e009      	b.n	80047e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047cc:	f7fd fcfe 	bl	80021cc <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d902      	bls.n	80047e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	73fb      	strb	r3, [r7, #15]
        break;
 80047de:	e005      	b.n	80047ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047e0:	4b36      	ldr	r3, [pc, #216]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1ef      	bne.n	80047cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d15f      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d110      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f8:	4b30      	ldr	r3, [pc, #192]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004800:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6892      	ldr	r2, [r2, #8]
 8004808:	0211      	lsls	r1, r2, #8
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68d2      	ldr	r2, [r2, #12]
 800480e:	06d2      	lsls	r2, r2, #27
 8004810:	430a      	orrs	r2, r1
 8004812:	492a      	ldr	r1, [pc, #168]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004814:	4313      	orrs	r3, r2
 8004816:	610b      	str	r3, [r1, #16]
 8004818:	e027      	b.n	800486a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d112      	bne.n	8004846 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004820:	4b26      	ldr	r3, [pc, #152]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004828:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6892      	ldr	r2, [r2, #8]
 8004830:	0211      	lsls	r1, r2, #8
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6912      	ldr	r2, [r2, #16]
 8004836:	0852      	lsrs	r2, r2, #1
 8004838:	3a01      	subs	r2, #1
 800483a:	0552      	lsls	r2, r2, #21
 800483c:	430a      	orrs	r2, r1
 800483e:	491f      	ldr	r1, [pc, #124]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	610b      	str	r3, [r1, #16]
 8004844:	e011      	b.n	800486a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004846:	4b1d      	ldr	r3, [pc, #116]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800484e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6892      	ldr	r2, [r2, #8]
 8004856:	0211      	lsls	r1, r2, #8
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6952      	ldr	r2, [r2, #20]
 800485c:	0852      	lsrs	r2, r2, #1
 800485e:	3a01      	subs	r2, #1
 8004860:	0652      	lsls	r2, r2, #25
 8004862:	430a      	orrs	r2, r1
 8004864:	4915      	ldr	r1, [pc, #84]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004866:	4313      	orrs	r3, r2
 8004868:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800486a:	4b14      	ldr	r3, [pc, #80]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a13      	ldr	r2, [pc, #76]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004870:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004874:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004876:	f7fd fca9 	bl	80021cc <HAL_GetTick>
 800487a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800487c:	e009      	b.n	8004892 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800487e:	f7fd fca5 	bl	80021cc <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d902      	bls.n	8004892 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	73fb      	strb	r3, [r7, #15]
          break;
 8004890:	e005      	b.n	800489e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004892:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0ef      	beq.n	800487e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	4903      	ldr	r1, [pc, #12]	@ (80048bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40021000 	.word	0x40021000

080048c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d079      	beq.n	80049c6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd f962 	bl	8001bb0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b10      	cmp	r3, #16
 8004900:	d058      	beq.n	80049b4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	22ca      	movs	r2, #202	@ 0xca
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2253      	movs	r2, #83	@ 0x53
 8004910:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fc64 	bl	80051e0 <RTC_EnterInitMode>
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d127      	bne.n	8004972 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004934:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6899      	ldr	r1, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	68d2      	ldr	r2, [r2, #12]
 800495c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6919      	ldr	r1, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	041a      	lsls	r2, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fc68 	bl	8005248 <RTC_ExitInitMode>
 8004978:	4603      	mov	r3, r0
 800497a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d113      	bne.n	80049aa <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0203 	bic.w	r2, r2, #3
 8004990:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	22ff      	movs	r2, #255	@ 0xff
 80049b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80049b2:	e001      	b.n	80049b8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d103      	bne.n	80049c6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_RTC_SetTime+0x1a>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e08b      	b.n	8004b02 <HAL_RTC_SetTime+0x132>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	22ca      	movs	r2, #202	@ 0xca
 8004a00:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2253      	movs	r2, #83	@ 0x53
 8004a08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fbe8 	bl	80051e0 <RTC_EnterInitMode>
 8004a10:	4603      	mov	r3, r0
 8004a12:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d163      	bne.n	8004ae2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d126      	bne.n	8004a6e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d102      	bne.n	8004a34 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2200      	movs	r2, #0
 8004a32:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fc43 	bl	80052c4 <RTC_ByteToBcd2>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fc3c 	bl	80052c4 <RTC_ByteToBcd2>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a50:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	789b      	ldrb	r3, [r3, #2]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fc34 	bl	80052c4 <RTC_ByteToBcd2>
 8004a5c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a5e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	78db      	ldrb	r3, [r3, #3]
 8004a66:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	e018      	b.n	8004aa0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a8e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a94:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	78db      	ldrb	r3, [r3, #3]
 8004a9a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004aaa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004aae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004abe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fbb5 	bl	8005248 <RTC_ExitInitMode>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	22ff      	movs	r2, #255	@ 0xff
 8004ae8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d103      	bne.n	8004af8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd90      	pop	{r4, r7, pc}

08004b0a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004b38:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	0d9b      	lsrs	r3, r3, #22
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11a      	bne.n	8004bb8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fbbc 	bl	8005304 <RTC_Bcd2ToByte>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fbb3 	bl	8005304 <RTC_Bcd2ToByte>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	789b      	ldrb	r3, [r3, #2]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fbaa 	bl	8005304 <RTC_Bcd2ToByte>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004bc2:	b590      	push	{r4, r7, lr}
 8004bc4:	b087      	sub	sp, #28
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_RTC_SetDate+0x1a>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e075      	b.n	8004cc8 <HAL_RTC_SetDate+0x106>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10e      	bne.n	8004c10 <HAL_RTC_SetDate+0x4e>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	f023 0310 	bic.w	r3, r3, #16
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	330a      	adds	r3, #10
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d11c      	bne.n	8004c50 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	78db      	ldrb	r3, [r3, #3]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fb52 	bl	80052c4 <RTC_ByteToBcd2>
 8004c20:	4603      	mov	r3, r0
 8004c22:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fb4b 	bl	80052c4 <RTC_ByteToBcd2>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004c32:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	789b      	ldrb	r3, [r3, #2]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fb43 	bl	80052c4 <RTC_ByteToBcd2>
 8004c3e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c40:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	e00e      	b.n	8004c6e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	78db      	ldrb	r3, [r3, #3]
 8004c54:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c5c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c62:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	22ca      	movs	r2, #202	@ 0xca
 8004c74:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2253      	movs	r2, #83	@ 0x53
 8004c7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 faae 	bl	80051e0 <RTC_EnterInitMode>
 8004c84:	4603      	mov	r3, r0
 8004c86:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c98:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c9c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fad2 	bl	8005248 <RTC_ExitInitMode>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	22ff      	movs	r2, #255	@ 0xff
 8004cae:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004cb0:	7cfb      	ldrb	r3, [r7, #19]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d103      	bne.n	8004cbe <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004cc6:	7cfb      	ldrb	r3, [r7, #19]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd90      	pop	{r4, r7, pc}

08004cd0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ce6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004cea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	0a1b      	lsrs	r3, r3, #8
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	0b5b      	lsrs	r3, r3, #13
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d11a      	bne.n	8004d60 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	78db      	ldrb	r3, [r3, #3]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fae8 	bl	8005304 <RTC_Bcd2ToByte>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461a      	mov	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fadf 	bl	8005304 <RTC_Bcd2ToByte>
 8004d46:	4603      	mov	r3, r0
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	789b      	ldrb	r3, [r3, #2]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fad6 	bl	8005304 <RTC_Bcd2ToByte>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b089      	sub	sp, #36	@ 0x24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_RTC_SetAlarm_IT+0x1a>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e127      	b.n	8004fd6 <HAL_RTC_SetAlarm_IT+0x26a>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2202      	movs	r2, #2
 8004d92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d137      	bne.n	8004e0c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2200      	movs	r2, #0
 8004dae:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fa85 	bl	80052c4 <RTC_ByteToBcd2>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fa7e 	bl	80052c4 <RTC_ByteToBcd2>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004dcc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	789b      	ldrb	r3, [r3, #2]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fa76 	bl	80052c4 <RTC_ByteToBcd2>
 8004dd8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004dda:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	78db      	ldrb	r3, [r3, #3]
 8004de2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004de4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fa68 	bl	80052c4 <RTC_ByteToBcd2>
 8004df4:	4603      	mov	r3, r0
 8004df6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004df8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e00:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	e023      	b.n	8004e54 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e2c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e32:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	78db      	ldrb	r3, [r3, #3]
 8004e38:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e3a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e42:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e44:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e4a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	22ca      	movs	r2, #202	@ 0xca
 8004e66:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2253      	movs	r2, #83	@ 0x53
 8004e6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e78:	d14a      	bne.n	8004f10 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e88:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004e9a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004e9c:	f7fd f996 	bl	80021cc <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004ea2:	e015      	b.n	8004ed0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ea4:	f7fd f992 	bl	80021cc <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004eb2:	d90d      	bls.n	8004ed0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	22ff      	movs	r2, #255	@ 0xff
 8004eba:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e082      	b.n	8004fd6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0e2      	beq.n	8004ea4 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004efc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f0c:	609a      	str	r2, [r3, #8]
 8004f0e:	e049      	b.n	8004fa4 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004f1e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004f30:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004f32:	f7fd f94b 	bl	80021cc <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004f38:	e015      	b.n	8004f66 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f3a:	f7fd f947 	bl	80021cc <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f48:	d90d      	bls.n	8004f66 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	22ff      	movs	r2, #255	@ 0xff
 8004f50:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2203      	movs	r2, #3
 8004f56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e037      	b.n	8004fd6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0e2      	beq.n	8004f3a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f92:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fa2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004faa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fae:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004fb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fba:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	22ff      	movs	r2, #255	@ 0xff
 8004fc2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3724      	adds	r7, #36	@ 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd90      	pop	{r4, r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40010400 	.word	0x40010400

08004fe4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_RTC_DeactivateAlarm+0x18>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e083      	b.n	8005104 <HAL_RTC_DeactivateAlarm+0x120>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	22ca      	movs	r2, #202	@ 0xca
 8005012:	625a      	str	r2, [r3, #36]	@ 0x24
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2253      	movs	r2, #83	@ 0x53
 800501a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005022:	d131      	bne.n	8005088 <HAL_RTC_DeactivateAlarm+0xa4>
    /* AlarmA */
#if defined (RTC_ALRMASSR_SSCLR)
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005032:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005042:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005044:	f7fd f8c2 	bl	80021cc <HAL_GetTick>
 8005048:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800504a:	e015      	b.n	8005078 <HAL_RTC_DeactivateAlarm+0x94>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800504c:	f7fd f8be 	bl	80021cc <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800505a:	d90d      	bls.n	8005078 <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	22ff      	movs	r2, #255	@ 0xff
 8005062:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2203      	movs	r2, #3
 8005068:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e045      	b.n	8005104 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0e2      	beq.n	800504c <HAL_RTC_DeactivateAlarm+0x68>
 8005086:	e030      	b.n	80050ea <HAL_RTC_DeactivateAlarm+0x106>
    /* AlarmB */
#if defined (RTC_ALRMBSSR_SSCLR)
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005096:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050a6:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80050a8:	f7fd f890 	bl	80021cc <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80050ae:	e015      	b.n	80050dc <HAL_RTC_DeactivateAlarm+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050b0:	f7fd f88c 	bl	80021cc <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050be:	d90d      	bls.n	80050dc <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	22ff      	movs	r2, #255	@ 0xff
 80050c6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2203      	movs	r2, #3
 80050cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e013      	b.n	8005104 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0e2      	beq.n	80050b0 <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	22ff      	movs	r2, #255	@ 0xff
 80050f0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005114:	4b1f      	ldr	r3, [pc, #124]	@ (8005194 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005116:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800511a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d012      	beq.n	8005150 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	b2da      	uxtb	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005148:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f012 ffda 	bl	8018104 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d012      	beq.n	8005184 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800517c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f910 	bl	80053a4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40010400 	.word	0x40010400

08005198 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a0d      	ldr	r2, [pc, #52]	@ (80051dc <HAL_RTC_WaitForSynchro+0x44>)
 80051a6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80051a8:	f7fd f810 	bl	80021cc <HAL_GetTick>
 80051ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051ae:	e009      	b.n	80051c4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051b0:	f7fd f80c 	bl	80021cc <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051be:	d901      	bls.n	80051c4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e007      	b.n	80051d4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0ee      	beq.n	80051b0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	0003ff5f 	.word	0x0003ff5f

080051e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d120      	bne.n	800523c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005202:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005204:	f7fc ffe2 	bl	80021cc <HAL_GetTick>
 8005208:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800520a:	e00d      	b.n	8005228 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800520c:	f7fc ffde 	bl	80021cc <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800521a:	d905      	bls.n	8005228 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2203      	movs	r2, #3
 8005224:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d102      	bne.n	800523c <RTC_EnterInitMode+0x5c>
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d1e7      	bne.n	800520c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800523c:	7bfb      	ldrb	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005254:	4b1a      	ldr	r3, [pc, #104]	@ (80052c0 <RTC_ExitInitMode+0x78>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4a19      	ldr	r2, [pc, #100]	@ (80052c0 <RTC_ExitInitMode+0x78>)
 800525a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800525e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005260:	4b17      	ldr	r3, [pc, #92]	@ (80052c0 <RTC_ExitInitMode+0x78>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10c      	bne.n	8005286 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff ff93 	bl	8005198 <HAL_RTC_WaitForSynchro>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01e      	beq.n	80052b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2203      	movs	r2, #3
 800527c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	73fb      	strb	r3, [r7, #15]
 8005284:	e017      	b.n	80052b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005286:	4b0e      	ldr	r3, [pc, #56]	@ (80052c0 <RTC_ExitInitMode+0x78>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	4a0d      	ldr	r2, [pc, #52]	@ (80052c0 <RTC_ExitInitMode+0x78>)
 800528c:	f023 0320 	bic.w	r3, r3, #32
 8005290:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7ff ff80 	bl	8005198 <HAL_RTC_WaitForSynchro>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2203      	movs	r2, #3
 80052a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052aa:	4b05      	ldr	r3, [pc, #20]	@ (80052c0 <RTC_ExitInitMode+0x78>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	4a04      	ldr	r2, [pc, #16]	@ (80052c0 <RTC_ExitInitMode+0x78>)
 80052b0:	f043 0320 	orr.w	r3, r3, #32
 80052b4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40002800 	.word	0x40002800

080052c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80052d6:	e005      	b.n	80052e4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80052de:	7afb      	ldrb	r3, [r7, #11]
 80052e0:	3b0a      	subs	r3, #10
 80052e2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80052e4:	7afb      	ldrb	r3, [r7, #11]
 80052e6:	2b09      	cmp	r3, #9
 80052e8:	d8f6      	bhi.n	80052d8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	7afb      	ldrb	r3, [r7, #11]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	b2db      	uxtb	r3, r3
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	0092      	lsls	r2, r2, #2
 8005318:	4413      	add	r3, r2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	b2da      	uxtb	r2, r3
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	4413      	add	r3, r2
 800532a:	b2db      	uxtb	r3, r3
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_RTCEx_EnableBypassShadow+0x16>
 800534a:	2302      	movs	r3, #2
 800534c:	e024      	b.n	8005398 <HAL_RTCEx_EnableBypassShadow+0x60>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	22ca      	movs	r2, #202	@ 0xca
 8005364:	625a      	str	r2, [r3, #36]	@ 0x24
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2253      	movs	r2, #83	@ 0x53
 800536c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0220 	orr.w	r2, r2, #32
 800537c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	22ff      	movs	r2, #255	@ 0xff
 8005384:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3350      	adds	r3, #80	@ 0x50
 80053ca:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	009a      	lsls	r2, r3, #2
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	4413      	add	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	461a      	mov	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6013      	str	r3, [r2, #0]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3350      	adds	r3, #80	@ 0x50
 80053fa:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e095      	b.n	8005554 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d108      	bne.n	8005442 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005438:	d009      	beq.n	800544e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	61da      	str	r2, [r3, #28]
 8005440:	e005      	b.n	800544e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fc fc17 	bl	8001c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005484:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800548e:	d902      	bls.n	8005496 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e002      	b.n	800549c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005496:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800549a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80054a4:	d007      	beq.n	80054b6 <HAL_SPI_Init+0xa0>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054ae:	d002      	beq.n	80054b6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f8:	ea42 0103 	orr.w	r1, r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	0c1b      	lsrs	r3, r3, #16
 8005512:	f003 0204 	and.w	r2, r3, #4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005532:	ea42 0103 	orr.w	r1, r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800556c:	f7fc fe2e 	bl	80021cc <HAL_GetTick>
 8005570:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	d001      	beq.n	8005586 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005582:	2302      	movs	r3, #2
 8005584:	e15c      	b.n	8005840 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_SPI_Transmit+0x36>
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e154      	b.n	8005840 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_SPI_Transmit+0x48>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e14d      	b.n	8005840 <HAL_SPI_Transmit+0x2e4>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2203      	movs	r2, #3
 80055b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	88fa      	ldrh	r2, [r7, #6]
 80055c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	88fa      	ldrh	r2, [r7, #6]
 80055ca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f6:	d10f      	bne.n	8005618 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005606:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005616:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005622:	2b40      	cmp	r3, #64	@ 0x40
 8005624:	d007      	beq.n	8005636 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005634:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800563e:	d952      	bls.n	80056e6 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_SPI_Transmit+0xf2>
 8005648:	8b7b      	ldrh	r3, [r7, #26]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d145      	bne.n	80056da <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005652:	881a      	ldrh	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565e:	1c9a      	adds	r2, r3, #2
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005672:	e032      	b.n	80056da <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b02      	cmp	r3, #2
 8005680:	d112      	bne.n	80056a8 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005686:	881a      	ldrh	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005692:	1c9a      	adds	r2, r3, #2
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056a6:	e018      	b.n	80056da <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a8:	f7fc fd90 	bl	80021cc <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d803      	bhi.n	80056c0 <HAL_SPI_Transmit+0x164>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056be:	d102      	bne.n	80056c6 <HAL_SPI_Transmit+0x16a>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e0b2      	b.n	8005840 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1c7      	bne.n	8005674 <HAL_SPI_Transmit+0x118>
 80056e4:	e083      	b.n	80057ee <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_SPI_Transmit+0x198>
 80056ee:	8b7b      	ldrh	r3, [r7, #26]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d177      	bne.n	80057e4 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d912      	bls.n	8005724 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	1c9a      	adds	r2, r3, #2
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b02      	subs	r3, #2
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005722:	e05f      	b.n	80057e4 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	7812      	ldrb	r2, [r2, #0]
 8005730:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005740:	b29b      	uxth	r3, r3
 8005742:	3b01      	subs	r3, #1
 8005744:	b29a      	uxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800574a:	e04b      	b.n	80057e4 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b02      	cmp	r3, #2
 8005758:	d12b      	bne.n	80057b2 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d912      	bls.n	800578a <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005768:	881a      	ldrh	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005774:	1c9a      	adds	r2, r3, #2
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b02      	subs	r3, #2
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005788:	e02c      	b.n	80057e4 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057b0:	e018      	b.n	80057e4 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057b2:	f7fc fd0b 	bl	80021cc <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d803      	bhi.n	80057ca <HAL_SPI_Transmit+0x26e>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057c8:	d102      	bne.n	80057d0 <HAL_SPI_Transmit+0x274>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e02d      	b.n	8005840 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1ae      	bne.n	800574c <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fcf6 	bl	80061e4 <SPI_EndRxTxTransaction>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10a      	bne.n	8005822 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800583e:	2300      	movs	r3, #0
  }
}
 8005840:	4618      	mov	r0, r3
 8005842:	3720      	adds	r7, #32
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af02      	add	r7, sp, #8
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	4613      	mov	r3, r2
 8005856:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d001      	beq.n	8005868 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005864:	2302      	movs	r3, #2
 8005866:	e123      	b.n	8005ab0 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005870:	d112      	bne.n	8005898 <HAL_SPI_Receive+0x50>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10e      	bne.n	8005898 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2204      	movs	r2, #4
 800587e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005882:	88fa      	ldrh	r2, [r7, #6]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f912 	bl	8005ab8 <HAL_SPI_TransmitReceive>
 8005894:	4603      	mov	r3, r0
 8005896:	e10b      	b.n	8005ab0 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005898:	f7fc fc98 	bl	80021cc <HAL_GetTick>
 800589c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_SPI_Receive+0x62>
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e100      	b.n	8005ab0 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_SPI_Receive+0x74>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e0f9      	b.n	8005ab0 <HAL_SPI_Receive+0x268>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2204      	movs	r2, #4
 80058c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	88fa      	ldrh	r2, [r7, #6]
 80058dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	88fa      	ldrh	r2, [r7, #6]
 80058e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800590e:	d908      	bls.n	8005922 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	e007      	b.n	8005932 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005930:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800593a:	d10f      	bne.n	800595c <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800594a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800595a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005966:	2b40      	cmp	r3, #64	@ 0x40
 8005968:	d007      	beq.n	800597a <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005978:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005982:	d875      	bhi.n	8005a70 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005984:	e037      	b.n	80059f6 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b01      	cmp	r3, #1
 8005992:	d117      	bne.n	80059c4 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f103 020c 	add.w	r2, r3, #12
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	7812      	ldrb	r2, [r2, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80059c2:	e018      	b.n	80059f6 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c4:	f7fc fc02 	bl	80021cc <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d803      	bhi.n	80059dc <HAL_SPI_Receive+0x194>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059da:	d102      	bne.n	80059e2 <HAL_SPI_Receive+0x19a>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e05c      	b.n	8005ab0 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1c1      	bne.n	8005986 <HAL_SPI_Receive+0x13e>
 8005a02:	e03b      	b.n	8005a7c <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d115      	bne.n	8005a3e <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1c:	b292      	uxth	r2, r2
 8005a1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	1c9a      	adds	r2, r3, #2
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005a3c:	e018      	b.n	8005a70 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a3e:	f7fc fbc5 	bl	80021cc <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d803      	bhi.n	8005a56 <HAL_SPI_Receive+0x20e>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a54:	d102      	bne.n	8005a5c <HAL_SPI_Receive+0x214>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e01f      	b.n	8005ab0 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1c3      	bne.n	8005a04 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 fb57 	bl	8006134 <SPI_EndRxTransaction>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005aae:	2300      	movs	r3, #0
  }
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	@ 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aca:	f7fc fb7f 	bl	80021cc <HAL_GetTick>
 8005ace:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ad6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005ade:	887b      	ldrh	r3, [r7, #2]
 8005ae0:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005ae2:	887b      	ldrh	r3, [r7, #2]
 8005ae4:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ae6:	7ffb      	ldrb	r3, [r7, #31]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d00c      	beq.n	8005b06 <HAL_SPI_TransmitReceive+0x4e>
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005af2:	d106      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x4a>
 8005afc:	7ffb      	ldrb	r3, [r7, #31]
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d001      	beq.n	8005b06 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005b02:	2302      	movs	r3, #2
 8005b04:	e1f3      	b.n	8005eee <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <HAL_SPI_TransmitReceive+0x60>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_SPI_TransmitReceive+0x60>
 8005b12:	887b      	ldrh	r3, [r7, #2]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e1e8      	b.n	8005eee <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x72>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e1e1      	b.n	8005eee <HAL_SPI_TransmitReceive+0x436>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d003      	beq.n	8005b46 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2205      	movs	r2, #5
 8005b42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	887a      	ldrh	r2, [r7, #2]
 8005b56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	887a      	ldrh	r2, [r7, #2]
 8005b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	887a      	ldrh	r2, [r7, #2]
 8005b6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	887a      	ldrh	r2, [r7, #2]
 8005b72:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b88:	d802      	bhi.n	8005b90 <HAL_SPI_TransmitReceive+0xd8>
 8005b8a:	8abb      	ldrh	r3, [r7, #20]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d908      	bls.n	8005ba2 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b9e:	605a      	str	r2, [r3, #4]
 8005ba0:	e007      	b.n	8005bb2 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005bb0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbc:	2b40      	cmp	r3, #64	@ 0x40
 8005bbe:	d007      	beq.n	8005bd0 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bd8:	f240 8083 	bls.w	8005ce2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_SPI_TransmitReceive+0x132>
 8005be4:	8afb      	ldrh	r3, [r7, #22]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d16f      	bne.n	8005cca <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bee:	881a      	ldrh	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfa:	1c9a      	adds	r2, r3, #2
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c0e:	e05c      	b.n	8005cca <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d11b      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x19e>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d016      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x19e>
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d113      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	881a      	ldrh	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3e:	1c9a      	adds	r2, r3, #2
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d11c      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x1e6>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d016      	beq.n	8005c9e <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7a:	b292      	uxth	r2, r2
 8005c7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	1c9a      	adds	r2, r3, #2
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c9e:	f7fc fa95 	bl	80021cc <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d80d      	bhi.n	8005cca <HAL_SPI_TransmitReceive+0x212>
 8005cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cb4:	d009      	beq.n	8005cca <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e111      	b.n	8005eee <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d19d      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x158>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d197      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x158>
 8005ce0:	e0e5      	b.n	8005eae <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_SPI_TransmitReceive+0x23a>
 8005cea:	8afb      	ldrh	r3, [r7, #22]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	f040 80d1 	bne.w	8005e94 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d912      	bls.n	8005d22 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	881a      	ldrh	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0c:	1c9a      	adds	r2, r3, #2
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b02      	subs	r3, #2
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d20:	e0b8      	b.n	8005e94 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	330c      	adds	r3, #12
 8005d2c:	7812      	ldrb	r2, [r2, #0]
 8005d2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d48:	e0a4      	b.n	8005e94 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d134      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x30a>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d02f      	beq.n	8005dc2 <HAL_SPI_TransmitReceive+0x30a>
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d12c      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d912      	bls.n	8005d98 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	881a      	ldrh	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d82:	1c9a      	adds	r2, r3, #2
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b02      	subs	r3, #2
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d96:	e012      	b.n	8005dbe <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	7812      	ldrb	r2, [r2, #0]
 8005da4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d148      	bne.n	8005e62 <HAL_SPI_TransmitReceive+0x3aa>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d042      	beq.n	8005e62 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d923      	bls.n	8005e30 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df2:	b292      	uxth	r2, r2
 8005df4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfa:	1c9a      	adds	r2, r3, #2
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b02      	subs	r3, #2
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d81f      	bhi.n	8005e5e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	e016      	b.n	8005e5e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f103 020c 	add.w	r2, r3, #12
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	7812      	ldrb	r2, [r2, #0]
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e62:	f7fc f9b3 	bl	80021cc <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d803      	bhi.n	8005e7a <HAL_SPI_TransmitReceive+0x3c2>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e78:	d102      	bne.n	8005e80 <HAL_SPI_TransmitReceive+0x3c8>
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d109      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e02c      	b.n	8005eee <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f47f af55 	bne.w	8005d4a <HAL_SPI_TransmitReceive+0x292>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f47f af4e 	bne.w	8005d4a <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eae:	6a3a      	ldr	r2, [r7, #32]
 8005eb0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f996 	bl	80061e4 <SPI_EndRxTxTransaction>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e00e      	b.n	8005eee <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e000      	b.n	8005eee <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
  }
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3728      	adds	r7, #40	@ 0x28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	4613      	mov	r3, r2
 8005f06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f08:	f7fc f960 	bl	80021cc <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f10:	1a9b      	subs	r3, r3, r2
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f18:	f7fc f958 	bl	80021cc <HAL_GetTick>
 8005f1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f1e:	4b39      	ldr	r3, [pc, #228]	@ (8006004 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	015b      	lsls	r3, r3, #5
 8005f24:	0d1b      	lsrs	r3, r3, #20
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	fb02 f303 	mul.w	r3, r2, r3
 8005f2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f2e:	e054      	b.n	8005fda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f36:	d050      	beq.n	8005fda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f38:	f7fc f948 	bl	80021cc <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d902      	bls.n	8005f4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d13d      	bne.n	8005fca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f66:	d111      	bne.n	8005f8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f70:	d004      	beq.n	8005f7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f7a:	d107      	bne.n	8005f8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f94:	d10f      	bne.n	8005fb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e017      	b.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	bf0c      	ite	eq
 8005fea:	2301      	moveq	r3, #1
 8005fec:	2300      	movne	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d19b      	bne.n	8005f30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	200001dc 	.word	0x200001dc

08006008 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	@ 0x28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800601a:	f7fc f8d7 	bl	80021cc <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	4413      	add	r3, r2
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800602a:	f7fc f8cf 	bl	80021cc <HAL_GetTick>
 800602e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006038:	4b3d      	ldr	r3, [pc, #244]	@ (8006130 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	00da      	lsls	r2, r3, #3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	0d1b      	lsrs	r3, r3, #20
 8006048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006050:	e060      	b.n	8006114 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006058:	d107      	bne.n	800606a <SPI_WaitFifoStateUntilTimeout+0x62>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d104      	bne.n	800606a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006068:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006070:	d050      	beq.n	8006114 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006072:	f7fc f8ab 	bl	80021cc <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800607e:	429a      	cmp	r2, r3
 8006080:	d902      	bls.n	8006088 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	2b00      	cmp	r3, #0
 8006086:	d13d      	bne.n	8006104 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006096:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060a0:	d111      	bne.n	80060c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060aa:	d004      	beq.n	80060b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060b4:	d107      	bne.n	80060c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ce:	d10f      	bne.n	80060f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e010      	b.n	8006126 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	3b01      	subs	r3, #1
 8006112:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	4013      	ands	r3, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d196      	bne.n	8006052 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3728      	adds	r7, #40	@ 0x28
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	200001dc 	.word	0x200001dc

08006134 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006148:	d111      	bne.n	800616e <SPI_EndRxTransaction+0x3a>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006152:	d004      	beq.n	800615e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800615c:	d107      	bne.n	800616e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800616c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2200      	movs	r2, #0
 8006176:	2180      	movs	r1, #128	@ 0x80
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f7ff febd 	bl	8005ef8 <SPI_WaitFlagStateUntilTimeout>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d007      	beq.n	8006194 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006188:	f043 0220 	orr.w	r2, r3, #32
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e023      	b.n	80061dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800619c:	d11d      	bne.n	80061da <SPI_EndRxTransaction+0xa6>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061a6:	d004      	beq.n	80061b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b0:	d113      	bne.n	80061da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff ff22 	bl	8006008 <SPI_WaitFifoStateUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d007      	beq.n	80061da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ce:	f043 0220 	orr.w	r2, r3, #32
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e000      	b.n	80061dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff ff03 	bl	8006008 <SPI_WaitFifoStateUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800620c:	f043 0220 	orr.w	r2, r3, #32
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e027      	b.n	8006268 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2200      	movs	r2, #0
 8006220:	2180      	movs	r1, #128	@ 0x80
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff fe68 	bl	8005ef8 <SPI_WaitFlagStateUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006232:	f043 0220 	orr.w	r2, r3, #32
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e014      	b.n	8006268 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2200      	movs	r2, #0
 8006246:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7ff fedc 	bl	8006008 <SPI_WaitFifoStateUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800625a:	f043 0220 	orr.w	r2, r3, #32
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e000      	b.n	8006268 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e040      	b.n	8006304 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fb feb0 	bl	8001ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2224      	movs	r2, #36	@ 0x24
 800629c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0201 	bic.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fb0c 	bl	80068d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f8af 	bl	8006420 <UART_SetConfig>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e01b      	b.n	8006304 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fb8b 	bl	8006a18 <UART_CheckIdleState>
 8006302:	4603      	mov	r3, r0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	@ 0x28
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4613      	mov	r3, r2
 800631a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006320:	2b20      	cmp	r3, #32
 8006322:	d177      	bne.n	8006414 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_UART_Transmit+0x24>
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e070      	b.n	8006416 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2221      	movs	r2, #33	@ 0x21
 8006340:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006342:	f7fb ff43 	bl	80021cc <HAL_GetTick>
 8006346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	88fa      	ldrh	r2, [r7, #6]
 800634c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	88fa      	ldrh	r2, [r7, #6]
 8006354:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006360:	d108      	bne.n	8006374 <HAL_UART_Transmit+0x68>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d104      	bne.n	8006374 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	e003      	b.n	800637c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006378:	2300      	movs	r3, #0
 800637a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800637c:	e02f      	b.n	80063de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2200      	movs	r2, #0
 8006386:	2180      	movs	r1, #128	@ 0x80
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fbed 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d004      	beq.n	800639e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e03b      	b.n	8006416 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	881a      	ldrh	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063b0:	b292      	uxth	r2, r2
 80063b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	3302      	adds	r3, #2
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	e007      	b.n	80063cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	781a      	ldrb	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	3301      	adds	r3, #1
 80063ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1c9      	bne.n	800637e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2200      	movs	r2, #0
 80063f2:	2140      	movs	r1, #64	@ 0x40
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 fbb7 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e005      	b.n	8006416 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	e000      	b.n	8006416 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006414:	2302      	movs	r3, #2
  }
}
 8006416:	4618      	mov	r0, r3
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006424:	b08a      	sub	sp, #40	@ 0x28
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	431a      	orrs	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	431a      	orrs	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	4313      	orrs	r3, r2
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	4b9e      	ldr	r3, [pc, #632]	@ (80066c8 <UART_SetConfig+0x2a8>)
 8006450:	4013      	ands	r3, r2
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006458:	430b      	orrs	r3, r1
 800645a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a93      	ldr	r2, [pc, #588]	@ (80066cc <UART_SetConfig+0x2ac>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006488:	4313      	orrs	r3, r2
 800648a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800649c:	430a      	orrs	r2, r1
 800649e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a8a      	ldr	r2, [pc, #552]	@ (80066d0 <UART_SetConfig+0x2b0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d126      	bne.n	80064f8 <UART_SetConfig+0xd8>
 80064aa:	4b8a      	ldr	r3, [pc, #552]	@ (80066d4 <UART_SetConfig+0x2b4>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d81b      	bhi.n	80064f0 <UART_SetConfig+0xd0>
 80064b8:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <UART_SetConfig+0xa0>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064e1 	.word	0x080064e1
 80064c8:	080064d9 	.word	0x080064d9
 80064cc:	080064e9 	.word	0x080064e9
 80064d0:	2301      	movs	r3, #1
 80064d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d6:	e0ab      	b.n	8006630 <UART_SetConfig+0x210>
 80064d8:	2302      	movs	r3, #2
 80064da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064de:	e0a7      	b.n	8006630 <UART_SetConfig+0x210>
 80064e0:	2304      	movs	r3, #4
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e6:	e0a3      	b.n	8006630 <UART_SetConfig+0x210>
 80064e8:	2308      	movs	r3, #8
 80064ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ee:	e09f      	b.n	8006630 <UART_SetConfig+0x210>
 80064f0:	2310      	movs	r3, #16
 80064f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f6:	e09b      	b.n	8006630 <UART_SetConfig+0x210>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a76      	ldr	r2, [pc, #472]	@ (80066d8 <UART_SetConfig+0x2b8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d138      	bne.n	8006574 <UART_SetConfig+0x154>
 8006502:	4b74      	ldr	r3, [pc, #464]	@ (80066d4 <UART_SetConfig+0x2b4>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006508:	f003 030c 	and.w	r3, r3, #12
 800650c:	2b0c      	cmp	r3, #12
 800650e:	d82d      	bhi.n	800656c <UART_SetConfig+0x14c>
 8006510:	a201      	add	r2, pc, #4	@ (adr r2, 8006518 <UART_SetConfig+0xf8>)
 8006512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006516:	bf00      	nop
 8006518:	0800654d 	.word	0x0800654d
 800651c:	0800656d 	.word	0x0800656d
 8006520:	0800656d 	.word	0x0800656d
 8006524:	0800656d 	.word	0x0800656d
 8006528:	0800655d 	.word	0x0800655d
 800652c:	0800656d 	.word	0x0800656d
 8006530:	0800656d 	.word	0x0800656d
 8006534:	0800656d 	.word	0x0800656d
 8006538:	08006555 	.word	0x08006555
 800653c:	0800656d 	.word	0x0800656d
 8006540:	0800656d 	.word	0x0800656d
 8006544:	0800656d 	.word	0x0800656d
 8006548:	08006565 	.word	0x08006565
 800654c:	2300      	movs	r3, #0
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006552:	e06d      	b.n	8006630 <UART_SetConfig+0x210>
 8006554:	2302      	movs	r3, #2
 8006556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655a:	e069      	b.n	8006630 <UART_SetConfig+0x210>
 800655c:	2304      	movs	r3, #4
 800655e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006562:	e065      	b.n	8006630 <UART_SetConfig+0x210>
 8006564:	2308      	movs	r3, #8
 8006566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800656a:	e061      	b.n	8006630 <UART_SetConfig+0x210>
 800656c:	2310      	movs	r3, #16
 800656e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006572:	e05d      	b.n	8006630 <UART_SetConfig+0x210>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a58      	ldr	r2, [pc, #352]	@ (80066dc <UART_SetConfig+0x2bc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d125      	bne.n	80065ca <UART_SetConfig+0x1aa>
 800657e:	4b55      	ldr	r3, [pc, #340]	@ (80066d4 <UART_SetConfig+0x2b4>)
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006584:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006588:	2b30      	cmp	r3, #48	@ 0x30
 800658a:	d016      	beq.n	80065ba <UART_SetConfig+0x19a>
 800658c:	2b30      	cmp	r3, #48	@ 0x30
 800658e:	d818      	bhi.n	80065c2 <UART_SetConfig+0x1a2>
 8006590:	2b20      	cmp	r3, #32
 8006592:	d00a      	beq.n	80065aa <UART_SetConfig+0x18a>
 8006594:	2b20      	cmp	r3, #32
 8006596:	d814      	bhi.n	80065c2 <UART_SetConfig+0x1a2>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <UART_SetConfig+0x182>
 800659c:	2b10      	cmp	r3, #16
 800659e:	d008      	beq.n	80065b2 <UART_SetConfig+0x192>
 80065a0:	e00f      	b.n	80065c2 <UART_SetConfig+0x1a2>
 80065a2:	2300      	movs	r3, #0
 80065a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a8:	e042      	b.n	8006630 <UART_SetConfig+0x210>
 80065aa:	2302      	movs	r3, #2
 80065ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b0:	e03e      	b.n	8006630 <UART_SetConfig+0x210>
 80065b2:	2304      	movs	r3, #4
 80065b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b8:	e03a      	b.n	8006630 <UART_SetConfig+0x210>
 80065ba:	2308      	movs	r3, #8
 80065bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065c0:	e036      	b.n	8006630 <UART_SetConfig+0x210>
 80065c2:	2310      	movs	r3, #16
 80065c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065c8:	e032      	b.n	8006630 <UART_SetConfig+0x210>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a3f      	ldr	r2, [pc, #252]	@ (80066cc <UART_SetConfig+0x2ac>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d12a      	bne.n	800662a <UART_SetConfig+0x20a>
 80065d4:	4b3f      	ldr	r3, [pc, #252]	@ (80066d4 <UART_SetConfig+0x2b4>)
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065e2:	d01a      	beq.n	800661a <UART_SetConfig+0x1fa>
 80065e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065e8:	d81b      	bhi.n	8006622 <UART_SetConfig+0x202>
 80065ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065ee:	d00c      	beq.n	800660a <UART_SetConfig+0x1ea>
 80065f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065f4:	d815      	bhi.n	8006622 <UART_SetConfig+0x202>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <UART_SetConfig+0x1e2>
 80065fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065fe:	d008      	beq.n	8006612 <UART_SetConfig+0x1f2>
 8006600:	e00f      	b.n	8006622 <UART_SetConfig+0x202>
 8006602:	2300      	movs	r3, #0
 8006604:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006608:	e012      	b.n	8006630 <UART_SetConfig+0x210>
 800660a:	2302      	movs	r3, #2
 800660c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006610:	e00e      	b.n	8006630 <UART_SetConfig+0x210>
 8006612:	2304      	movs	r3, #4
 8006614:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006618:	e00a      	b.n	8006630 <UART_SetConfig+0x210>
 800661a:	2308      	movs	r3, #8
 800661c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006620:	e006      	b.n	8006630 <UART_SetConfig+0x210>
 8006622:	2310      	movs	r3, #16
 8006624:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006628:	e002      	b.n	8006630 <UART_SetConfig+0x210>
 800662a:	2310      	movs	r3, #16
 800662c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a25      	ldr	r2, [pc, #148]	@ (80066cc <UART_SetConfig+0x2ac>)
 8006636:	4293      	cmp	r3, r2
 8006638:	f040 808a 	bne.w	8006750 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800663c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006640:	2b08      	cmp	r3, #8
 8006642:	d824      	bhi.n	800668e <UART_SetConfig+0x26e>
 8006644:	a201      	add	r2, pc, #4	@ (adr r2, 800664c <UART_SetConfig+0x22c>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	08006671 	.word	0x08006671
 8006650:	0800668f 	.word	0x0800668f
 8006654:	08006679 	.word	0x08006679
 8006658:	0800668f 	.word	0x0800668f
 800665c:	0800667f 	.word	0x0800667f
 8006660:	0800668f 	.word	0x0800668f
 8006664:	0800668f 	.word	0x0800668f
 8006668:	0800668f 	.word	0x0800668f
 800666c:	08006687 	.word	0x08006687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006670:	f7fd fd80 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 8006674:	61f8      	str	r0, [r7, #28]
        break;
 8006676:	e010      	b.n	800669a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006678:	4b19      	ldr	r3, [pc, #100]	@ (80066e0 <UART_SetConfig+0x2c0>)
 800667a:	61fb      	str	r3, [r7, #28]
        break;
 800667c:	e00d      	b.n	800669a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667e:	f7fd fce1 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8006682:	61f8      	str	r0, [r7, #28]
        break;
 8006684:	e009      	b.n	800669a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800668a:	61fb      	str	r3, [r7, #28]
        break;
 800668c:	e005      	b.n	800669a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006698:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 8109 	beq.w	80068b4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	4413      	add	r3, r2
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d305      	bcc.n	80066be <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d912      	bls.n	80066e4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066c4:	e0f6      	b.n	80068b4 <UART_SetConfig+0x494>
 80066c6:	bf00      	nop
 80066c8:	efff69f3 	.word	0xefff69f3
 80066cc:	40008000 	.word	0x40008000
 80066d0:	40013800 	.word	0x40013800
 80066d4:	40021000 	.word	0x40021000
 80066d8:	40004400 	.word	0x40004400
 80066dc:	40004800 	.word	0x40004800
 80066e0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2200      	movs	r2, #0
 80066e8:	461c      	mov	r4, r3
 80066ea:	4615      	mov	r5, r2
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	022b      	lsls	r3, r5, #8
 80066f6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80066fa:	0222      	lsls	r2, r4, #8
 80066fc:	68f9      	ldr	r1, [r7, #12]
 80066fe:	6849      	ldr	r1, [r1, #4]
 8006700:	0849      	lsrs	r1, r1, #1
 8006702:	2000      	movs	r0, #0
 8006704:	4688      	mov	r8, r1
 8006706:	4681      	mov	r9, r0
 8006708:	eb12 0a08 	adds.w	sl, r2, r8
 800670c:	eb43 0b09 	adc.w	fp, r3, r9
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800671e:	4650      	mov	r0, sl
 8006720:	4659      	mov	r1, fp
 8006722:	f7fa fac1 	bl	8000ca8 <__aeabi_uldivmod>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4613      	mov	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006734:	d308      	bcc.n	8006748 <UART_SetConfig+0x328>
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800673c:	d204      	bcs.n	8006748 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	60da      	str	r2, [r3, #12]
 8006746:	e0b5      	b.n	80068b4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800674e:	e0b1      	b.n	80068b4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006758:	d15d      	bne.n	8006816 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800675a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800675e:	2b08      	cmp	r3, #8
 8006760:	d827      	bhi.n	80067b2 <UART_SetConfig+0x392>
 8006762:	a201      	add	r2, pc, #4	@ (adr r2, 8006768 <UART_SetConfig+0x348>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	0800678d 	.word	0x0800678d
 800676c:	08006795 	.word	0x08006795
 8006770:	0800679d 	.word	0x0800679d
 8006774:	080067b3 	.word	0x080067b3
 8006778:	080067a3 	.word	0x080067a3
 800677c:	080067b3 	.word	0x080067b3
 8006780:	080067b3 	.word	0x080067b3
 8006784:	080067b3 	.word	0x080067b3
 8006788:	080067ab 	.word	0x080067ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800678c:	f7fd fcf2 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 8006790:	61f8      	str	r0, [r7, #28]
        break;
 8006792:	e014      	b.n	80067be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006794:	f7fd fd04 	bl	80041a0 <HAL_RCC_GetPCLK2Freq>
 8006798:	61f8      	str	r0, [r7, #28]
        break;
 800679a:	e010      	b.n	80067be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800679c:	4b4c      	ldr	r3, [pc, #304]	@ (80068d0 <UART_SetConfig+0x4b0>)
 800679e:	61fb      	str	r3, [r7, #28]
        break;
 80067a0:	e00d      	b.n	80067be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067a2:	f7fd fc4f 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 80067a6:	61f8      	str	r0, [r7, #28]
        break;
 80067a8:	e009      	b.n	80067be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ae:	61fb      	str	r3, [r7, #28]
        break;
 80067b0:	e005      	b.n	80067be <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d077      	beq.n	80068b4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	005a      	lsls	r2, r3, #1
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	441a      	add	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b0f      	cmp	r3, #15
 80067de:	d916      	bls.n	800680e <UART_SetConfig+0x3ee>
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e6:	d212      	bcs.n	800680e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	f023 030f 	bic.w	r3, r3, #15
 80067f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	8afb      	ldrh	r3, [r7, #22]
 8006800:	4313      	orrs	r3, r2
 8006802:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	8afa      	ldrh	r2, [r7, #22]
 800680a:	60da      	str	r2, [r3, #12]
 800680c:	e052      	b.n	80068b4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006814:	e04e      	b.n	80068b4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006816:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800681a:	2b08      	cmp	r3, #8
 800681c:	d827      	bhi.n	800686e <UART_SetConfig+0x44e>
 800681e:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <UART_SetConfig+0x404>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006849 	.word	0x08006849
 8006828:	08006851 	.word	0x08006851
 800682c:	08006859 	.word	0x08006859
 8006830:	0800686f 	.word	0x0800686f
 8006834:	0800685f 	.word	0x0800685f
 8006838:	0800686f 	.word	0x0800686f
 800683c:	0800686f 	.word	0x0800686f
 8006840:	0800686f 	.word	0x0800686f
 8006844:	08006867 	.word	0x08006867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006848:	f7fd fc94 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 800684c:	61f8      	str	r0, [r7, #28]
        break;
 800684e:	e014      	b.n	800687a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006850:	f7fd fca6 	bl	80041a0 <HAL_RCC_GetPCLK2Freq>
 8006854:	61f8      	str	r0, [r7, #28]
        break;
 8006856:	e010      	b.n	800687a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006858:	4b1d      	ldr	r3, [pc, #116]	@ (80068d0 <UART_SetConfig+0x4b0>)
 800685a:	61fb      	str	r3, [r7, #28]
        break;
 800685c:	e00d      	b.n	800687a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800685e:	f7fd fbf1 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8006862:	61f8      	str	r0, [r7, #28]
        break;
 8006864:	e009      	b.n	800687a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800686a:	61fb      	str	r3, [r7, #28]
        break;
 800686c:	e005      	b.n	800687a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006878:	bf00      	nop
    }

    if (pclk != 0U)
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d019      	beq.n	80068b4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	085a      	lsrs	r2, r3, #1
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	441a      	add	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006892:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	2b0f      	cmp	r3, #15
 8006898:	d909      	bls.n	80068ae <UART_SetConfig+0x48e>
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a0:	d205      	bcs.n	80068ae <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60da      	str	r2, [r3, #12]
 80068ac:	e002      	b.n	80068b4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3728      	adds	r7, #40	@ 0x28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ce:	bf00      	nop
 80068d0:	00f42400 	.word	0x00f42400

080068d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01a      	beq.n	80069ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069d2:	d10a      	bne.n	80069ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	605a      	str	r2, [r3, #4]
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b098      	sub	sp, #96	@ 0x60
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a28:	f7fb fbd0 	bl	80021cc <HAL_GetTick>
 8006a2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0308 	and.w	r3, r3, #8
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d12e      	bne.n	8006a9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a44:	2200      	movs	r2, #0
 8006a46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f88c 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d021      	beq.n	8006a9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e6      	bne.n	8006a56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e062      	b.n	8006b60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d149      	bne.n	8006b3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f856 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d03c      	beq.n	8006b3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ae2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e6      	bne.n	8006ac2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b14:	61fa      	str	r2, [r7, #28]
 8006b16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	69b9      	ldr	r1, [r7, #24]
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	617b      	str	r3, [r7, #20]
   return(result);
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e5      	bne.n	8006af4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e011      	b.n	8006b60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3758      	adds	r7, #88	@ 0x58
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b78:	e04f      	b.n	8006c1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b80:	d04b      	beq.n	8006c1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b82:	f7fb fb23 	bl	80021cc <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d302      	bcc.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e04e      	b.n	8006c3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d037      	beq.n	8006c1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b80      	cmp	r3, #128	@ 0x80
 8006bae:	d034      	beq.n	8006c1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b40      	cmp	r3, #64	@ 0x40
 8006bb4:	d031      	beq.n	8006c1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d110      	bne.n	8006be6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f838 	bl	8006c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e029      	b.n	8006c3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bf4:	d111      	bne.n	8006c1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f81e 	bl	8006c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e00f      	b.n	8006c3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4013      	ands	r3, r2
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	bf0c      	ite	eq
 8006c2a:	2301      	moveq	r3, #1
 8006c2c:	2300      	movne	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d0a0      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b095      	sub	sp, #84	@ 0x54
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	461a      	mov	r2, r3
 8006c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e6      	bne.n	8006c4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3308      	adds	r3, #8
 8006c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f023 0301 	bic.w	r3, r3, #1
 8006c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e5      	bne.n	8006c7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d118      	bne.n	8006cea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f023 0310 	bic.w	r3, r3, #16
 8006ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6979      	ldr	r1, [r7, #20]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e6      	bne.n	8006cb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006cfe:	bf00      	nop
 8006d00:	3754      	adds	r7, #84	@ 0x54
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	7852      	ldrb	r2, [r2, #1]
 8006d24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3302      	adds	r3, #2
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	7892      	ldrb	r2, [r2, #2]
 8006d2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3303      	adds	r3, #3
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	78d2      	ldrb	r2, [r2, #3]
 8006d38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	7912      	ldrb	r2, [r2, #4]
 8006d42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3305      	adds	r3, #5
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	7952      	ldrb	r2, [r2, #5]
 8006d4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3306      	adds	r3, #6
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	7992      	ldrb	r2, [r2, #6]
 8006d56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3307      	adds	r3, #7
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	79d2      	ldrb	r2, [r2, #7]
 8006d60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3308      	adds	r3, #8
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	7a12      	ldrb	r2, [r2, #8]
 8006d6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3309      	adds	r3, #9
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	7a52      	ldrb	r2, [r2, #9]
 8006d74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	330a      	adds	r3, #10
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	7a92      	ldrb	r2, [r2, #10]
 8006d7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	330b      	adds	r3, #11
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	7ad2      	ldrb	r2, [r2, #11]
 8006d88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	7b12      	ldrb	r2, [r2, #12]
 8006d92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	330d      	adds	r3, #13
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	7b52      	ldrb	r2, [r2, #13]
 8006d9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	330e      	adds	r3, #14
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	7b92      	ldrb	r2, [r2, #14]
 8006da6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	330f      	adds	r3, #15
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	7bd2      	ldrb	r2, [r2, #15]
 8006db0:	701a      	strb	r2, [r3, #0]
#endif
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 8006dcc:	e007      	b.n	8006dde <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	1c53      	adds	r3, r2, #1
 8006dd2:	60bb      	str	r3, [r7, #8]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	1c59      	adds	r1, r3, #1
 8006dd8:	60f9      	str	r1, [r7, #12]
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	1e5a      	subs	r2, r3, #1
 8006de2:	71fa      	strb	r2, [r7, #7]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f2      	bne.n	8006dce <copy_block_nn+0x10>
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <xor_block>:

static void xor_block( void *d, const void *s )
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	781a      	ldrb	r2, [r3, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	4053      	eors	r3, r2
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3301      	adds	r3, #1
 8006e14:	7819      	ldrb	r1, [r3, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	781a      	ldrb	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	404a      	eors	r2, r1
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3302      	adds	r3, #2
 8006e2a:	7819      	ldrb	r1, [r3, #0]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	3302      	adds	r3, #2
 8006e30:	781a      	ldrb	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	3302      	adds	r3, #2
 8006e36:	404a      	eors	r2, r1
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3303      	adds	r3, #3
 8006e40:	7819      	ldrb	r1, [r3, #0]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	3303      	adds	r3, #3
 8006e46:	781a      	ldrb	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3303      	adds	r3, #3
 8006e4c:	404a      	eors	r2, r1
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	3304      	adds	r3, #4
 8006e56:	7819      	ldrb	r1, [r3, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	781a      	ldrb	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3304      	adds	r3, #4
 8006e62:	404a      	eors	r2, r1
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3305      	adds	r3, #5
 8006e6c:	7819      	ldrb	r1, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	3305      	adds	r3, #5
 8006e72:	781a      	ldrb	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3305      	adds	r3, #5
 8006e78:	404a      	eors	r2, r1
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3306      	adds	r3, #6
 8006e82:	7819      	ldrb	r1, [r3, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	3306      	adds	r3, #6
 8006e88:	781a      	ldrb	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3306      	adds	r3, #6
 8006e8e:	404a      	eors	r2, r1
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3307      	adds	r3, #7
 8006e98:	7819      	ldrb	r1, [r3, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	3307      	adds	r3, #7
 8006e9e:	781a      	ldrb	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3307      	adds	r3, #7
 8006ea4:	404a      	eors	r2, r1
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3308      	adds	r3, #8
 8006eae:	7819      	ldrb	r1, [r3, #0]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	781a      	ldrb	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	404a      	eors	r2, r1
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3309      	adds	r3, #9
 8006ec4:	7819      	ldrb	r1, [r3, #0]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	3309      	adds	r3, #9
 8006eca:	781a      	ldrb	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3309      	adds	r3, #9
 8006ed0:	404a      	eors	r2, r1
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	330a      	adds	r3, #10
 8006eda:	7819      	ldrb	r1, [r3, #0]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	330a      	adds	r3, #10
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	330a      	adds	r3, #10
 8006ee6:	404a      	eors	r2, r1
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	330b      	adds	r3, #11
 8006ef0:	7819      	ldrb	r1, [r3, #0]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	330b      	adds	r3, #11
 8006ef6:	781a      	ldrb	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	330b      	adds	r3, #11
 8006efc:	404a      	eors	r2, r1
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	330c      	adds	r3, #12
 8006f06:	7819      	ldrb	r1, [r3, #0]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	330c      	adds	r3, #12
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	330c      	adds	r3, #12
 8006f12:	404a      	eors	r2, r1
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	330d      	adds	r3, #13
 8006f1c:	7819      	ldrb	r1, [r3, #0]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	330d      	adds	r3, #13
 8006f22:	781a      	ldrb	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	330d      	adds	r3, #13
 8006f28:	404a      	eors	r2, r1
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	330e      	adds	r3, #14
 8006f32:	7819      	ldrb	r1, [r3, #0]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	330e      	adds	r3, #14
 8006f38:	781a      	ldrb	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	330e      	adds	r3, #14
 8006f3e:	404a      	eors	r2, r1
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	330f      	adds	r3, #15
 8006f48:	7819      	ldrb	r1, [r3, #0]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	330f      	adds	r3, #15
 8006f4e:	781a      	ldrb	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	330f      	adds	r3, #15
 8006f54:	404a      	eors	r2, r1
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]
#endif
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	781a      	ldrb	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	4053      	eors	r3, r2
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	3301      	adds	r3, #1
 8006f86:	7819      	ldrb	r1, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	781a      	ldrb	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3301      	adds	r3, #1
 8006f92:	404a      	eors	r2, r1
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	3302      	adds	r3, #2
 8006f9c:	7819      	ldrb	r1, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	781a      	ldrb	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3302      	adds	r3, #2
 8006fa8:	404a      	eors	r2, r1
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	3303      	adds	r3, #3
 8006fb2:	7819      	ldrb	r1, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3303      	adds	r3, #3
 8006fb8:	781a      	ldrb	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3303      	adds	r3, #3
 8006fbe:	404a      	eors	r2, r1
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	7819      	ldrb	r1, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	781a      	ldrb	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	404a      	eors	r2, r1
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	3305      	adds	r3, #5
 8006fde:	7819      	ldrb	r1, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3305      	adds	r3, #5
 8006fe4:	781a      	ldrb	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3305      	adds	r3, #5
 8006fea:	404a      	eors	r2, r1
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	3306      	adds	r3, #6
 8006ff4:	7819      	ldrb	r1, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3306      	adds	r3, #6
 8006ffa:	781a      	ldrb	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3306      	adds	r3, #6
 8007000:	404a      	eors	r2, r1
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	3307      	adds	r3, #7
 800700a:	7819      	ldrb	r1, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3307      	adds	r3, #7
 8007010:	781a      	ldrb	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3307      	adds	r3, #7
 8007016:	404a      	eors	r2, r1
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	3308      	adds	r3, #8
 8007020:	7819      	ldrb	r1, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3308      	adds	r3, #8
 8007026:	781a      	ldrb	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3308      	adds	r3, #8
 800702c:	404a      	eors	r2, r1
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3309      	adds	r3, #9
 8007036:	7819      	ldrb	r1, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3309      	adds	r3, #9
 800703c:	781a      	ldrb	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3309      	adds	r3, #9
 8007042:	404a      	eors	r2, r1
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	330a      	adds	r3, #10
 800704c:	7819      	ldrb	r1, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	330a      	adds	r3, #10
 8007052:	781a      	ldrb	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	330a      	adds	r3, #10
 8007058:	404a      	eors	r2, r1
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	330b      	adds	r3, #11
 8007062:	7819      	ldrb	r1, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	330b      	adds	r3, #11
 8007068:	781a      	ldrb	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	330b      	adds	r3, #11
 800706e:	404a      	eors	r2, r1
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	330c      	adds	r3, #12
 8007078:	7819      	ldrb	r1, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	330c      	adds	r3, #12
 800707e:	781a      	ldrb	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	330c      	adds	r3, #12
 8007084:	404a      	eors	r2, r1
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	330d      	adds	r3, #13
 800708e:	7819      	ldrb	r1, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	330d      	adds	r3, #13
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	330d      	adds	r3, #13
 800709a:	404a      	eors	r2, r1
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	330e      	adds	r3, #14
 80070a4:	7819      	ldrb	r1, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	330e      	adds	r3, #14
 80070aa:	781a      	ldrb	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	330e      	adds	r3, #14
 80070b0:	404a      	eors	r2, r1
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	330f      	adds	r3, #15
 80070ba:	7819      	ldrb	r1, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	330f      	adds	r3, #15
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	330f      	adds	r3, #15
 80070c6:	404a      	eors	r2, r1
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80070cc:	bf00      	nop
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff fe86 	bl	8006df6 <xor_block>
}
 80070ea:	bf00      	nop
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	4b48      	ldr	r3, [pc, #288]	@ (8007224 <shift_sub_rows+0x130>)
 8007104:	5c9a      	ldrb	r2, [r3, r2]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3304      	adds	r3, #4
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	4619      	mov	r1, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3304      	adds	r3, #4
 8007116:	4a43      	ldr	r2, [pc, #268]	@ (8007224 <shift_sub_rows+0x130>)
 8007118:	5c52      	ldrb	r2, [r2, r1]
 800711a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3308      	adds	r3, #8
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	4619      	mov	r1, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3308      	adds	r3, #8
 8007128:	4a3e      	ldr	r2, [pc, #248]	@ (8007224 <shift_sub_rows+0x130>)
 800712a:	5c52      	ldrb	r2, [r2, r1]
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	330c      	adds	r3, #12
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	4619      	mov	r1, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	330c      	adds	r3, #12
 800713a:	4a3a      	ldr	r2, [pc, #232]	@ (8007224 <shift_sub_rows+0x130>)
 800713c:	5c52      	ldrb	r2, [r2, r1]
 800713e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	73fb      	strb	r3, [r7, #15]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3305      	adds	r3, #5
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	4619      	mov	r1, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3301      	adds	r3, #1
 8007152:	4a34      	ldr	r2, [pc, #208]	@ (8007224 <shift_sub_rows+0x130>)
 8007154:	5c52      	ldrb	r2, [r2, r1]
 8007156:	701a      	strb	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3309      	adds	r3, #9
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	4619      	mov	r1, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3305      	adds	r3, #5
 8007164:	4a2f      	ldr	r2, [pc, #188]	@ (8007224 <shift_sub_rows+0x130>)
 8007166:	5c52      	ldrb	r2, [r2, r1]
 8007168:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	330d      	adds	r3, #13
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	4619      	mov	r1, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3309      	adds	r3, #9
 8007176:	4a2b      	ldr	r2, [pc, #172]	@ (8007224 <shift_sub_rows+0x130>)
 8007178:	5c52      	ldrb	r2, [r2, r1]
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	7bfa      	ldrb	r2, [r7, #15]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	330d      	adds	r3, #13
 8007182:	4928      	ldr	r1, [pc, #160]	@ (8007224 <shift_sub_rows+0x130>)
 8007184:	5c8a      	ldrb	r2, [r1, r2]
 8007186:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	789b      	ldrb	r3, [r3, #2]
 800718c:	73fb      	strb	r3, [r7, #15]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	330a      	adds	r3, #10
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	4619      	mov	r1, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3302      	adds	r3, #2
 800719a:	4a22      	ldr	r2, [pc, #136]	@ (8007224 <shift_sub_rows+0x130>)
 800719c:	5c52      	ldrb	r2, [r2, r1]
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	7bfa      	ldrb	r2, [r7, #15]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	330a      	adds	r3, #10
 80071a6:	491f      	ldr	r1, [pc, #124]	@ (8007224 <shift_sub_rows+0x130>)
 80071a8:	5c8a      	ldrb	r2, [r1, r2]
 80071aa:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	799b      	ldrb	r3, [r3, #6]
 80071b0:	73fb      	strb	r3, [r7, #15]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	330e      	adds	r3, #14
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	4619      	mov	r1, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3306      	adds	r3, #6
 80071be:	4a19      	ldr	r2, [pc, #100]	@ (8007224 <shift_sub_rows+0x130>)
 80071c0:	5c52      	ldrb	r2, [r2, r1]
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	7bfa      	ldrb	r2, [r7, #15]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	330e      	adds	r3, #14
 80071ca:	4916      	ldr	r1, [pc, #88]	@ (8007224 <shift_sub_rows+0x130>)
 80071cc:	5c8a      	ldrb	r2, [r1, r2]
 80071ce:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	7bdb      	ldrb	r3, [r3, #15]
 80071d4:	73fb      	strb	r3, [r7, #15]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	330b      	adds	r3, #11
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	4619      	mov	r1, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	330f      	adds	r3, #15
 80071e2:	4a10      	ldr	r2, [pc, #64]	@ (8007224 <shift_sub_rows+0x130>)
 80071e4:	5c52      	ldrb	r2, [r2, r1]
 80071e6:	701a      	strb	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3307      	adds	r3, #7
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	4619      	mov	r1, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	330b      	adds	r3, #11
 80071f4:	4a0b      	ldr	r2, [pc, #44]	@ (8007224 <shift_sub_rows+0x130>)
 80071f6:	5c52      	ldrb	r2, [r2, r1]
 80071f8:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3303      	adds	r3, #3
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	4619      	mov	r1, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3307      	adds	r3, #7
 8007206:	4a07      	ldr	r2, [pc, #28]	@ (8007224 <shift_sub_rows+0x130>)
 8007208:	5c52      	ldrb	r2, [r2, r1]
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	7bfa      	ldrb	r2, [r7, #15]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3303      	adds	r3, #3
 8007212:	4904      	ldr	r1, [pc, #16]	@ (8007224 <shift_sub_rows+0x130>)
 8007214:	5c8a      	ldrb	r2, [r1, r2]
 8007216:	701a      	strb	r2, [r3, #0]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	08020de4 	.word	0x08020de4

08007228 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8007230:	f107 0308 	add.w	r3, r7, #8
 8007234:	6879      	ldr	r1, [r7, #4]
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fd67 	bl	8006d0a <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800723c:	7a3b      	ldrb	r3, [r7, #8]
 800723e:	461a      	mov	r2, r3
 8007240:	4b9a      	ldr	r3, [pc, #616]	@ (80074ac <mix_sub_columns+0x284>)
 8007242:	5c9a      	ldrb	r2, [r3, r2]
 8007244:	7b7b      	ldrb	r3, [r7, #13]
 8007246:	4619      	mov	r1, r3
 8007248:	4b99      	ldr	r3, [pc, #612]	@ (80074b0 <mix_sub_columns+0x288>)
 800724a:	5c5b      	ldrb	r3, [r3, r1]
 800724c:	4053      	eors	r3, r2
 800724e:	b2da      	uxtb	r2, r3
 8007250:	7cbb      	ldrb	r3, [r7, #18]
 8007252:	4619      	mov	r1, r3
 8007254:	4b97      	ldr	r3, [pc, #604]	@ (80074b4 <mix_sub_columns+0x28c>)
 8007256:	5c5b      	ldrb	r3, [r3, r1]
 8007258:	4053      	eors	r3, r2
 800725a:	b2da      	uxtb	r2, r3
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	4619      	mov	r1, r3
 8007260:	4b94      	ldr	r3, [pc, #592]	@ (80074b4 <mix_sub_columns+0x28c>)
 8007262:	5c5b      	ldrb	r3, [r3, r1]
 8007264:	4053      	eors	r3, r2
 8007266:	b2da      	uxtb	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800726c:	7a3b      	ldrb	r3, [r7, #8]
 800726e:	461a      	mov	r2, r3
 8007270:	4b90      	ldr	r3, [pc, #576]	@ (80074b4 <mix_sub_columns+0x28c>)
 8007272:	5c9a      	ldrb	r2, [r3, r2]
 8007274:	7b7b      	ldrb	r3, [r7, #13]
 8007276:	4619      	mov	r1, r3
 8007278:	4b8c      	ldr	r3, [pc, #560]	@ (80074ac <mix_sub_columns+0x284>)
 800727a:	5c5b      	ldrb	r3, [r3, r1]
 800727c:	4053      	eors	r3, r2
 800727e:	b2da      	uxtb	r2, r3
 8007280:	7cbb      	ldrb	r3, [r7, #18]
 8007282:	4619      	mov	r1, r3
 8007284:	4b8a      	ldr	r3, [pc, #552]	@ (80074b0 <mix_sub_columns+0x288>)
 8007286:	5c5b      	ldrb	r3, [r3, r1]
 8007288:	4053      	eors	r3, r2
 800728a:	b2d9      	uxtb	r1, r3
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	461a      	mov	r2, r3
 8007290:	4b88      	ldr	r3, [pc, #544]	@ (80074b4 <mix_sub_columns+0x28c>)
 8007292:	5c9a      	ldrb	r2, [r3, r2]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3301      	adds	r3, #1
 8007298:	404a      	eors	r2, r1
 800729a:	b2d2      	uxtb	r2, r2
 800729c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800729e:	7a3b      	ldrb	r3, [r7, #8]
 80072a0:	461a      	mov	r2, r3
 80072a2:	4b84      	ldr	r3, [pc, #528]	@ (80074b4 <mix_sub_columns+0x28c>)
 80072a4:	5c9a      	ldrb	r2, [r3, r2]
 80072a6:	7b7b      	ldrb	r3, [r7, #13]
 80072a8:	4619      	mov	r1, r3
 80072aa:	4b82      	ldr	r3, [pc, #520]	@ (80074b4 <mix_sub_columns+0x28c>)
 80072ac:	5c5b      	ldrb	r3, [r3, r1]
 80072ae:	4053      	eors	r3, r2
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	7cbb      	ldrb	r3, [r7, #18]
 80072b4:	4619      	mov	r1, r3
 80072b6:	4b7d      	ldr	r3, [pc, #500]	@ (80074ac <mix_sub_columns+0x284>)
 80072b8:	5c5b      	ldrb	r3, [r3, r1]
 80072ba:	4053      	eors	r3, r2
 80072bc:	b2d9      	uxtb	r1, r3
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	461a      	mov	r2, r3
 80072c2:	4b7b      	ldr	r3, [pc, #492]	@ (80074b0 <mix_sub_columns+0x288>)
 80072c4:	5c9a      	ldrb	r2, [r3, r2]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3302      	adds	r3, #2
 80072ca:	404a      	eors	r2, r1
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80072d0:	7a3b      	ldrb	r3, [r7, #8]
 80072d2:	461a      	mov	r2, r3
 80072d4:	4b76      	ldr	r3, [pc, #472]	@ (80074b0 <mix_sub_columns+0x288>)
 80072d6:	5c9a      	ldrb	r2, [r3, r2]
 80072d8:	7b7b      	ldrb	r3, [r7, #13]
 80072da:	4619      	mov	r1, r3
 80072dc:	4b75      	ldr	r3, [pc, #468]	@ (80074b4 <mix_sub_columns+0x28c>)
 80072de:	5c5b      	ldrb	r3, [r3, r1]
 80072e0:	4053      	eors	r3, r2
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	7cbb      	ldrb	r3, [r7, #18]
 80072e6:	4619      	mov	r1, r3
 80072e8:	4b72      	ldr	r3, [pc, #456]	@ (80074b4 <mix_sub_columns+0x28c>)
 80072ea:	5c5b      	ldrb	r3, [r3, r1]
 80072ec:	4053      	eors	r3, r2
 80072ee:	b2d9      	uxtb	r1, r3
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	461a      	mov	r2, r3
 80072f4:	4b6d      	ldr	r3, [pc, #436]	@ (80074ac <mix_sub_columns+0x284>)
 80072f6:	5c9a      	ldrb	r2, [r3, r2]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3303      	adds	r3, #3
 80072fc:	404a      	eors	r2, r1
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8007302:	7b3b      	ldrb	r3, [r7, #12]
 8007304:	461a      	mov	r2, r3
 8007306:	4b69      	ldr	r3, [pc, #420]	@ (80074ac <mix_sub_columns+0x284>)
 8007308:	5c9a      	ldrb	r2, [r3, r2]
 800730a:	7c7b      	ldrb	r3, [r7, #17]
 800730c:	4619      	mov	r1, r3
 800730e:	4b68      	ldr	r3, [pc, #416]	@ (80074b0 <mix_sub_columns+0x288>)
 8007310:	5c5b      	ldrb	r3, [r3, r1]
 8007312:	4053      	eors	r3, r2
 8007314:	b2da      	uxtb	r2, r3
 8007316:	7dbb      	ldrb	r3, [r7, #22]
 8007318:	4619      	mov	r1, r3
 800731a:	4b66      	ldr	r3, [pc, #408]	@ (80074b4 <mix_sub_columns+0x28c>)
 800731c:	5c5b      	ldrb	r3, [r3, r1]
 800731e:	4053      	eors	r3, r2
 8007320:	b2d9      	uxtb	r1, r3
 8007322:	7afb      	ldrb	r3, [r7, #11]
 8007324:	461a      	mov	r2, r3
 8007326:	4b63      	ldr	r3, [pc, #396]	@ (80074b4 <mix_sub_columns+0x28c>)
 8007328:	5c9a      	ldrb	r2, [r3, r2]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3304      	adds	r3, #4
 800732e:	404a      	eors	r2, r1
 8007330:	b2d2      	uxtb	r2, r2
 8007332:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8007334:	7b3b      	ldrb	r3, [r7, #12]
 8007336:	461a      	mov	r2, r3
 8007338:	4b5e      	ldr	r3, [pc, #376]	@ (80074b4 <mix_sub_columns+0x28c>)
 800733a:	5c9a      	ldrb	r2, [r3, r2]
 800733c:	7c7b      	ldrb	r3, [r7, #17]
 800733e:	4619      	mov	r1, r3
 8007340:	4b5a      	ldr	r3, [pc, #360]	@ (80074ac <mix_sub_columns+0x284>)
 8007342:	5c5b      	ldrb	r3, [r3, r1]
 8007344:	4053      	eors	r3, r2
 8007346:	b2da      	uxtb	r2, r3
 8007348:	7dbb      	ldrb	r3, [r7, #22]
 800734a:	4619      	mov	r1, r3
 800734c:	4b58      	ldr	r3, [pc, #352]	@ (80074b0 <mix_sub_columns+0x288>)
 800734e:	5c5b      	ldrb	r3, [r3, r1]
 8007350:	4053      	eors	r3, r2
 8007352:	b2d9      	uxtb	r1, r3
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	461a      	mov	r2, r3
 8007358:	4b56      	ldr	r3, [pc, #344]	@ (80074b4 <mix_sub_columns+0x28c>)
 800735a:	5c9a      	ldrb	r2, [r3, r2]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3305      	adds	r3, #5
 8007360:	404a      	eors	r2, r1
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8007366:	7b3b      	ldrb	r3, [r7, #12]
 8007368:	461a      	mov	r2, r3
 800736a:	4b52      	ldr	r3, [pc, #328]	@ (80074b4 <mix_sub_columns+0x28c>)
 800736c:	5c9a      	ldrb	r2, [r3, r2]
 800736e:	7c7b      	ldrb	r3, [r7, #17]
 8007370:	4619      	mov	r1, r3
 8007372:	4b50      	ldr	r3, [pc, #320]	@ (80074b4 <mix_sub_columns+0x28c>)
 8007374:	5c5b      	ldrb	r3, [r3, r1]
 8007376:	4053      	eors	r3, r2
 8007378:	b2da      	uxtb	r2, r3
 800737a:	7dbb      	ldrb	r3, [r7, #22]
 800737c:	4619      	mov	r1, r3
 800737e:	4b4b      	ldr	r3, [pc, #300]	@ (80074ac <mix_sub_columns+0x284>)
 8007380:	5c5b      	ldrb	r3, [r3, r1]
 8007382:	4053      	eors	r3, r2
 8007384:	b2d9      	uxtb	r1, r3
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	461a      	mov	r2, r3
 800738a:	4b49      	ldr	r3, [pc, #292]	@ (80074b0 <mix_sub_columns+0x288>)
 800738c:	5c9a      	ldrb	r2, [r3, r2]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3306      	adds	r3, #6
 8007392:	404a      	eors	r2, r1
 8007394:	b2d2      	uxtb	r2, r2
 8007396:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007398:	7b3b      	ldrb	r3, [r7, #12]
 800739a:	461a      	mov	r2, r3
 800739c:	4b44      	ldr	r3, [pc, #272]	@ (80074b0 <mix_sub_columns+0x288>)
 800739e:	5c9a      	ldrb	r2, [r3, r2]
 80073a0:	7c7b      	ldrb	r3, [r7, #17]
 80073a2:	4619      	mov	r1, r3
 80073a4:	4b43      	ldr	r3, [pc, #268]	@ (80074b4 <mix_sub_columns+0x28c>)
 80073a6:	5c5b      	ldrb	r3, [r3, r1]
 80073a8:	4053      	eors	r3, r2
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	7dbb      	ldrb	r3, [r7, #22]
 80073ae:	4619      	mov	r1, r3
 80073b0:	4b40      	ldr	r3, [pc, #256]	@ (80074b4 <mix_sub_columns+0x28c>)
 80073b2:	5c5b      	ldrb	r3, [r3, r1]
 80073b4:	4053      	eors	r3, r2
 80073b6:	b2d9      	uxtb	r1, r3
 80073b8:	7afb      	ldrb	r3, [r7, #11]
 80073ba:	461a      	mov	r2, r3
 80073bc:	4b3b      	ldr	r3, [pc, #236]	@ (80074ac <mix_sub_columns+0x284>)
 80073be:	5c9a      	ldrb	r2, [r3, r2]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3307      	adds	r3, #7
 80073c4:	404a      	eors	r2, r1
 80073c6:	b2d2      	uxtb	r2, r2
 80073c8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80073ca:	7c3b      	ldrb	r3, [r7, #16]
 80073cc:	461a      	mov	r2, r3
 80073ce:	4b37      	ldr	r3, [pc, #220]	@ (80074ac <mix_sub_columns+0x284>)
 80073d0:	5c9a      	ldrb	r2, [r3, r2]
 80073d2:	7d7b      	ldrb	r3, [r7, #21]
 80073d4:	4619      	mov	r1, r3
 80073d6:	4b36      	ldr	r3, [pc, #216]	@ (80074b0 <mix_sub_columns+0x288>)
 80073d8:	5c5b      	ldrb	r3, [r3, r1]
 80073da:	4053      	eors	r3, r2
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	7abb      	ldrb	r3, [r7, #10]
 80073e0:	4619      	mov	r1, r3
 80073e2:	4b34      	ldr	r3, [pc, #208]	@ (80074b4 <mix_sub_columns+0x28c>)
 80073e4:	5c5b      	ldrb	r3, [r3, r1]
 80073e6:	4053      	eors	r3, r2
 80073e8:	b2d9      	uxtb	r1, r3
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	461a      	mov	r2, r3
 80073ee:	4b31      	ldr	r3, [pc, #196]	@ (80074b4 <mix_sub_columns+0x28c>)
 80073f0:	5c9a      	ldrb	r2, [r3, r2]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3308      	adds	r3, #8
 80073f6:	404a      	eors	r2, r1
 80073f8:	b2d2      	uxtb	r2, r2
 80073fa:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80073fc:	7c3b      	ldrb	r3, [r7, #16]
 80073fe:	461a      	mov	r2, r3
 8007400:	4b2c      	ldr	r3, [pc, #176]	@ (80074b4 <mix_sub_columns+0x28c>)
 8007402:	5c9a      	ldrb	r2, [r3, r2]
 8007404:	7d7b      	ldrb	r3, [r7, #21]
 8007406:	4619      	mov	r1, r3
 8007408:	4b28      	ldr	r3, [pc, #160]	@ (80074ac <mix_sub_columns+0x284>)
 800740a:	5c5b      	ldrb	r3, [r3, r1]
 800740c:	4053      	eors	r3, r2
 800740e:	b2da      	uxtb	r2, r3
 8007410:	7abb      	ldrb	r3, [r7, #10]
 8007412:	4619      	mov	r1, r3
 8007414:	4b26      	ldr	r3, [pc, #152]	@ (80074b0 <mix_sub_columns+0x288>)
 8007416:	5c5b      	ldrb	r3, [r3, r1]
 8007418:	4053      	eors	r3, r2
 800741a:	b2d9      	uxtb	r1, r3
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	461a      	mov	r2, r3
 8007420:	4b24      	ldr	r3, [pc, #144]	@ (80074b4 <mix_sub_columns+0x28c>)
 8007422:	5c9a      	ldrb	r2, [r3, r2]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3309      	adds	r3, #9
 8007428:	404a      	eors	r2, r1
 800742a:	b2d2      	uxtb	r2, r2
 800742c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800742e:	7c3b      	ldrb	r3, [r7, #16]
 8007430:	461a      	mov	r2, r3
 8007432:	4b20      	ldr	r3, [pc, #128]	@ (80074b4 <mix_sub_columns+0x28c>)
 8007434:	5c9a      	ldrb	r2, [r3, r2]
 8007436:	7d7b      	ldrb	r3, [r7, #21]
 8007438:	4619      	mov	r1, r3
 800743a:	4b1e      	ldr	r3, [pc, #120]	@ (80074b4 <mix_sub_columns+0x28c>)
 800743c:	5c5b      	ldrb	r3, [r3, r1]
 800743e:	4053      	eors	r3, r2
 8007440:	b2da      	uxtb	r2, r3
 8007442:	7abb      	ldrb	r3, [r7, #10]
 8007444:	4619      	mov	r1, r3
 8007446:	4b19      	ldr	r3, [pc, #100]	@ (80074ac <mix_sub_columns+0x284>)
 8007448:	5c5b      	ldrb	r3, [r3, r1]
 800744a:	4053      	eors	r3, r2
 800744c:	b2d9      	uxtb	r1, r3
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	461a      	mov	r2, r3
 8007452:	4b17      	ldr	r3, [pc, #92]	@ (80074b0 <mix_sub_columns+0x288>)
 8007454:	5c9a      	ldrb	r2, [r3, r2]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	330a      	adds	r3, #10
 800745a:	404a      	eors	r2, r1
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007460:	7c3b      	ldrb	r3, [r7, #16]
 8007462:	461a      	mov	r2, r3
 8007464:	4b12      	ldr	r3, [pc, #72]	@ (80074b0 <mix_sub_columns+0x288>)
 8007466:	5c9a      	ldrb	r2, [r3, r2]
 8007468:	7d7b      	ldrb	r3, [r7, #21]
 800746a:	4619      	mov	r1, r3
 800746c:	4b11      	ldr	r3, [pc, #68]	@ (80074b4 <mix_sub_columns+0x28c>)
 800746e:	5c5b      	ldrb	r3, [r3, r1]
 8007470:	4053      	eors	r3, r2
 8007472:	b2da      	uxtb	r2, r3
 8007474:	7abb      	ldrb	r3, [r7, #10]
 8007476:	4619      	mov	r1, r3
 8007478:	4b0e      	ldr	r3, [pc, #56]	@ (80074b4 <mix_sub_columns+0x28c>)
 800747a:	5c5b      	ldrb	r3, [r3, r1]
 800747c:	4053      	eors	r3, r2
 800747e:	b2d9      	uxtb	r1, r3
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	461a      	mov	r2, r3
 8007484:	4b09      	ldr	r3, [pc, #36]	@ (80074ac <mix_sub_columns+0x284>)
 8007486:	5c9a      	ldrb	r2, [r3, r2]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	330b      	adds	r3, #11
 800748c:	404a      	eors	r2, r1
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8007492:	7d3b      	ldrb	r3, [r7, #20]
 8007494:	461a      	mov	r2, r3
 8007496:	4b05      	ldr	r3, [pc, #20]	@ (80074ac <mix_sub_columns+0x284>)
 8007498:	5c9a      	ldrb	r2, [r3, r2]
 800749a:	7a7b      	ldrb	r3, [r7, #9]
 800749c:	4619      	mov	r1, r3
 800749e:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <mix_sub_columns+0x288>)
 80074a0:	5c5b      	ldrb	r3, [r3, r1]
 80074a2:	4053      	eors	r3, r2
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	4619      	mov	r1, r3
 80074aa:	e005      	b.n	80074b8 <mix_sub_columns+0x290>
 80074ac:	08020ee4 	.word	0x08020ee4
 80074b0:	08020fe4 	.word	0x08020fe4
 80074b4:	08020de4 	.word	0x08020de4
 80074b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007570 <mix_sub_columns+0x348>)
 80074ba:	5c5b      	ldrb	r3, [r3, r1]
 80074bc:	4053      	eors	r3, r2
 80074be:	b2d9      	uxtb	r1, r3
 80074c0:	7cfb      	ldrb	r3, [r7, #19]
 80074c2:	461a      	mov	r2, r3
 80074c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007570 <mix_sub_columns+0x348>)
 80074c6:	5c9a      	ldrb	r2, [r3, r2]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	330c      	adds	r3, #12
 80074cc:	404a      	eors	r2, r1
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80074d2:	7d3b      	ldrb	r3, [r7, #20]
 80074d4:	461a      	mov	r2, r3
 80074d6:	4b26      	ldr	r3, [pc, #152]	@ (8007570 <mix_sub_columns+0x348>)
 80074d8:	5c9a      	ldrb	r2, [r3, r2]
 80074da:	7a7b      	ldrb	r3, [r7, #9]
 80074dc:	4619      	mov	r1, r3
 80074de:	4b25      	ldr	r3, [pc, #148]	@ (8007574 <mix_sub_columns+0x34c>)
 80074e0:	5c5b      	ldrb	r3, [r3, r1]
 80074e2:	4053      	eors	r3, r2
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	4619      	mov	r1, r3
 80074ea:	4b23      	ldr	r3, [pc, #140]	@ (8007578 <mix_sub_columns+0x350>)
 80074ec:	5c5b      	ldrb	r3, [r3, r1]
 80074ee:	4053      	eors	r3, r2
 80074f0:	b2d9      	uxtb	r1, r3
 80074f2:	7cfb      	ldrb	r3, [r7, #19]
 80074f4:	461a      	mov	r2, r3
 80074f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007570 <mix_sub_columns+0x348>)
 80074f8:	5c9a      	ldrb	r2, [r3, r2]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	330d      	adds	r3, #13
 80074fe:	404a      	eors	r2, r1
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8007504:	7d3b      	ldrb	r3, [r7, #20]
 8007506:	461a      	mov	r2, r3
 8007508:	4b19      	ldr	r3, [pc, #100]	@ (8007570 <mix_sub_columns+0x348>)
 800750a:	5c9a      	ldrb	r2, [r3, r2]
 800750c:	7a7b      	ldrb	r3, [r7, #9]
 800750e:	4619      	mov	r1, r3
 8007510:	4b17      	ldr	r3, [pc, #92]	@ (8007570 <mix_sub_columns+0x348>)
 8007512:	5c5b      	ldrb	r3, [r3, r1]
 8007514:	4053      	eors	r3, r2
 8007516:	b2da      	uxtb	r2, r3
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	4619      	mov	r1, r3
 800751c:	4b15      	ldr	r3, [pc, #84]	@ (8007574 <mix_sub_columns+0x34c>)
 800751e:	5c5b      	ldrb	r3, [r3, r1]
 8007520:	4053      	eors	r3, r2
 8007522:	b2d9      	uxtb	r1, r3
 8007524:	7cfb      	ldrb	r3, [r7, #19]
 8007526:	461a      	mov	r2, r3
 8007528:	4b13      	ldr	r3, [pc, #76]	@ (8007578 <mix_sub_columns+0x350>)
 800752a:	5c9a      	ldrb	r2, [r3, r2]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	330e      	adds	r3, #14
 8007530:	404a      	eors	r2, r1
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007536:	7d3b      	ldrb	r3, [r7, #20]
 8007538:	461a      	mov	r2, r3
 800753a:	4b0f      	ldr	r3, [pc, #60]	@ (8007578 <mix_sub_columns+0x350>)
 800753c:	5c9a      	ldrb	r2, [r3, r2]
 800753e:	7a7b      	ldrb	r3, [r7, #9]
 8007540:	4619      	mov	r1, r3
 8007542:	4b0b      	ldr	r3, [pc, #44]	@ (8007570 <mix_sub_columns+0x348>)
 8007544:	5c5b      	ldrb	r3, [r3, r1]
 8007546:	4053      	eors	r3, r2
 8007548:	b2da      	uxtb	r2, r3
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	4619      	mov	r1, r3
 800754e:	4b08      	ldr	r3, [pc, #32]	@ (8007570 <mix_sub_columns+0x348>)
 8007550:	5c5b      	ldrb	r3, [r3, r1]
 8007552:	4053      	eors	r3, r2
 8007554:	b2d9      	uxtb	r1, r3
 8007556:	7cfb      	ldrb	r3, [r7, #19]
 8007558:	461a      	mov	r2, r3
 800755a:	4b06      	ldr	r3, [pc, #24]	@ (8007574 <mix_sub_columns+0x34c>)
 800755c:	5c9a      	ldrb	r2, [r3, r2]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	330f      	adds	r3, #15
 8007562:	404a      	eors	r2, r1
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	701a      	strb	r2, [r3, #0]
  }
 8007568:	bf00      	nop
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	08020de4 	.word	0x08020de4
 8007574:	08020ee4 	.word	0x08020ee4
 8007578:	08020fe4 	.word	0x08020fe4

0800757c <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	460b      	mov	r3, r1
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800758a:	7afb      	ldrb	r3, [r7, #11]
 800758c:	3b10      	subs	r3, #16
 800758e:	2b10      	cmp	r3, #16
 8007590:	bf8c      	ite	hi
 8007592:	2201      	movhi	r2, #1
 8007594:	2200      	movls	r2, #0
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	2a00      	cmp	r2, #0
 800759a:	d10b      	bne.n	80075b4 <aes_set_key+0x38>
 800759c:	4a64      	ldr	r2, [pc, #400]	@ (8007730 <aes_set_key+0x1b4>)
 800759e:	fa22 f303 	lsr.w	r3, r2, r3
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bf14      	ite	ne
 80075aa:	2301      	movne	r3, #1
 80075ac:	2300      	moveq	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d105      	bne.n	80075c0 <aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 80075bc:	23ff      	movs	r3, #255	@ 0xff
 80075be:	e0b2      	b.n	8007726 <aes_set_key+0x1aa>
        break;
 80075c0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	7afa      	ldrb	r2, [r7, #11]
 80075c6:	68f9      	ldr	r1, [r7, #12]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff fbf8 	bl	8006dbe <copy_block_nn>
    hi = (keylen + 28) << 2;
 80075ce:	7afb      	ldrb	r3, [r7, #11]
 80075d0:	331c      	adds	r3, #28
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 80075d8:	7c7b      	ldrb	r3, [r7, #17]
 80075da:	091b      	lsrs	r3, r3, #4
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80075e8:	7afb      	ldrb	r3, [r7, #11]
 80075ea:	75fb      	strb	r3, [r7, #23]
 80075ec:	2301      	movs	r3, #1
 80075ee:	75bb      	strb	r3, [r7, #22]
 80075f0:	e093      	b.n	800771a <aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	3b04      	subs	r3, #4
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	5cd3      	ldrb	r3, [r2, r3]
 80075fa:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	3b03      	subs	r3, #3
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	5cd3      	ldrb	r3, [r2, r3]
 8007604:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	3b02      	subs	r3, #2
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	5cd3      	ldrb	r3, [r2, r3]
 800760e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	3b01      	subs	r3, #1
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	5cd3      	ldrb	r3, [r2, r3]
 8007618:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	7afa      	ldrb	r2, [r7, #11]
 800761e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007622:	fb01 f202 	mul.w	r2, r1, r2
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d127      	bne.n	800767e <aes_set_key+0x102>
        {
            tt = t0;
 800762e:	7d7b      	ldrb	r3, [r7, #21]
 8007630:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 8007632:	7d3b      	ldrb	r3, [r7, #20]
 8007634:	4a3f      	ldr	r2, [pc, #252]	@ (8007734 <aes_set_key+0x1b8>)
 8007636:	5cd2      	ldrb	r2, [r2, r3]
 8007638:	7dbb      	ldrb	r3, [r7, #22]
 800763a:	4053      	eors	r3, r2
 800763c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800763e:	7cfb      	ldrb	r3, [r7, #19]
 8007640:	4a3c      	ldr	r2, [pc, #240]	@ (8007734 <aes_set_key+0x1b8>)
 8007642:	5cd3      	ldrb	r3, [r2, r3]
 8007644:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 8007646:	7cbb      	ldrb	r3, [r7, #18]
 8007648:	4a3a      	ldr	r2, [pc, #232]	@ (8007734 <aes_set_key+0x1b8>)
 800764a:	5cd3      	ldrb	r3, [r2, r3]
 800764c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800764e:	7c3b      	ldrb	r3, [r7, #16]
 8007650:	4a38      	ldr	r2, [pc, #224]	@ (8007734 <aes_set_key+0x1b8>)
 8007652:	5cd3      	ldrb	r3, [r2, r3]
 8007654:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 8007656:	7dbb      	ldrb	r3, [r7, #22]
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	b25a      	sxtb	r2, r3
 800765c:	7dbb      	ldrb	r3, [r7, #22]
 800765e:	09db      	lsrs	r3, r3, #7
 8007660:	b2db      	uxtb	r3, r3
 8007662:	4619      	mov	r1, r3
 8007664:	0049      	lsls	r1, r1, #1
 8007666:	440b      	add	r3, r1
 8007668:	4619      	mov	r1, r3
 800766a:	00c8      	lsls	r0, r1, #3
 800766c:	4619      	mov	r1, r3
 800766e:	4603      	mov	r3, r0
 8007670:	440b      	add	r3, r1
 8007672:	b2db      	uxtb	r3, r3
 8007674:	b25b      	sxtb	r3, r3
 8007676:	4053      	eors	r3, r2
 8007678:	b25b      	sxtb	r3, r3
 800767a:	75bb      	strb	r3, [r7, #22]
 800767c:	e01c      	b.n	80076b8 <aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800767e:	7afb      	ldrb	r3, [r7, #11]
 8007680:	2b18      	cmp	r3, #24
 8007682:	d919      	bls.n	80076b8 <aes_set_key+0x13c>
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	7afa      	ldrb	r2, [r7, #11]
 8007688:	fbb3 f1f2 	udiv	r1, r3, r2
 800768c:	fb01 f202 	mul.w	r2, r1, r2
 8007690:	1a9b      	subs	r3, r3, r2
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b10      	cmp	r3, #16
 8007696:	d10f      	bne.n	80076b8 <aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 8007698:	7d7b      	ldrb	r3, [r7, #21]
 800769a:	4a26      	ldr	r2, [pc, #152]	@ (8007734 <aes_set_key+0x1b8>)
 800769c:	5cd3      	ldrb	r3, [r2, r3]
 800769e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 80076a0:	7d3b      	ldrb	r3, [r7, #20]
 80076a2:	4a24      	ldr	r2, [pc, #144]	@ (8007734 <aes_set_key+0x1b8>)
 80076a4:	5cd3      	ldrb	r3, [r2, r3]
 80076a6:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 80076a8:	7cfb      	ldrb	r3, [r7, #19]
 80076aa:	4a22      	ldr	r2, [pc, #136]	@ (8007734 <aes_set_key+0x1b8>)
 80076ac:	5cd3      	ldrb	r3, [r2, r3]
 80076ae:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 80076b0:	7cbb      	ldrb	r3, [r7, #18]
 80076b2:	4a20      	ldr	r2, [pc, #128]	@ (8007734 <aes_set_key+0x1b8>)
 80076b4:	5cd3      	ldrb	r3, [r2, r3]
 80076b6:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 80076b8:	7dfa      	ldrb	r2, [r7, #23]
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80076c0:	7c3b      	ldrb	r3, [r7, #16]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	5cd1      	ldrb	r1, [r2, r3]
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	7d7a      	ldrb	r2, [r7, #21]
 80076ca:	404a      	eors	r2, r1
 80076cc:	b2d1      	uxtb	r1, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80076d2:	7c3b      	ldrb	r3, [r7, #16]
 80076d4:	3301      	adds	r3, #1
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	5cd1      	ldrb	r1, [r2, r3]
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	3301      	adds	r3, #1
 80076de:	7d3a      	ldrb	r2, [r7, #20]
 80076e0:	404a      	eors	r2, r1
 80076e2:	b2d1      	uxtb	r1, r2
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80076e8:	7c3b      	ldrb	r3, [r7, #16]
 80076ea:	3302      	adds	r3, #2
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	5cd1      	ldrb	r1, [r2, r3]
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	3302      	adds	r3, #2
 80076f4:	7cfa      	ldrb	r2, [r7, #19]
 80076f6:	404a      	eors	r2, r1
 80076f8:	b2d1      	uxtb	r1, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80076fe:	7c3b      	ldrb	r3, [r7, #16]
 8007700:	3303      	adds	r3, #3
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	5cd1      	ldrb	r1, [r2, r3]
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	3303      	adds	r3, #3
 800770a:	7cba      	ldrb	r2, [r7, #18]
 800770c:	404a      	eors	r2, r1
 800770e:	b2d1      	uxtb	r1, r2
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	3304      	adds	r3, #4
 8007718:	75fb      	strb	r3, [r7, #23]
 800771a:	7dfa      	ldrb	r2, [r7, #23]
 800771c:	7c7b      	ldrb	r3, [r7, #17]
 800771e:	429a      	cmp	r2, r3
 8007720:	f4ff af67 	bcc.w	80075f2 <aes_set_key+0x76>
    }
    return 0;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	00010101 	.word	0x00010101
 8007734:	08020de4 	.word	0x08020de4

08007738 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	@ 0x28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d038      	beq.n	80077c0 <aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	f107 0314 	add.w	r3, r7, #20
 8007754:	68f9      	ldr	r1, [r7, #12]
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fc05 	bl	8006f66 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800775c:	2301      	movs	r3, #1
 800775e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007762:	e014      	b.n	800778e <aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8007764:	f107 0314 	add.w	r3, r7, #20
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fd5d 	bl	8007228 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007774:	0112      	lsls	r2, r2, #4
 8007776:	441a      	add	r2, r3
 8007778:	f107 0314 	add.w	r3, r7, #20
 800777c:	4611      	mov	r1, r2
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff fcaa 	bl	80070d8 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007788:	3301      	adds	r3, #1
 800778a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007794:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007798:	429a      	cmp	r2, r3
 800779a:	d3e3      	bcc.n	8007764 <aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800779c:	f107 0314 	add.w	r3, r7, #20
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff fca7 	bl	80070f4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80077ac:	0112      	lsls	r2, r2, #4
 80077ae:	441a      	add	r2, r3
 80077b0:	f107 0314 	add.w	r3, r7, #20
 80077b4:	4619      	mov	r1, r3
 80077b6:	68b8      	ldr	r0, [r7, #8]
 80077b8:	f7ff fbd5 	bl	8006f66 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	e000      	b.n	80077c2 <aes_encrypt+0x8a>
        return ( uint8_t )-1;
 80077c0:	23ff      	movs	r3, #255	@ 0xff
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3728      	adds	r7, #40	@ 0x28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b082      	sub	sp, #8
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	33f1      	adds	r3, #241	@ 0xf1
 80077d6:	2210      	movs	r2, #16
 80077d8:	2100      	movs	r1, #0
 80077da:	4618      	mov	r0, r3
 80077dc:	f010 fdd0 	bl	8018380 <memset1>
            ctx->M_n = 0;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        memset1(ctx->rijndael.ksch, '\0', 240);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	22f0      	movs	r2, #240	@ 0xf0
 80077ec:	2100      	movs	r1, #0
 80077ee:	4618      	mov	r0, r3
 80077f0:	f010 fdc6 	bl	8018380 <memset1>
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	461a      	mov	r2, r3
 800780a:	2110      	movs	r1, #16
 800780c:	6838      	ldr	r0, [r7, #0]
 800780e:	f7ff feb5 	bl	800757c <aes_set_key>
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b08c      	sub	sp, #48	@ 0x30
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 808f 	beq.w	8007950 <AES_CMAC_Update+0x136>
                  mlen = MIN(16 - ctx->M_n, len);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007838:	f1c3 0310 	rsb	r3, r3, #16
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	4293      	cmp	r3, r2
 8007840:	bf28      	it	cs
 8007842:	4613      	movcs	r3, r2
 8007844:	627b      	str	r3, [r7, #36]	@ 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007852:	4413      	add	r3, r2
 8007854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007856:	b292      	uxth	r2, r2
 8007858:	68b9      	ldr	r1, [r7, #8]
 800785a:	4618      	mov	r0, r3
 800785c:	f010 fd53 	bl	8018306 <memcpy1>
                    ctx->M_n += mlen;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	441a      	add	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    if (ctx->M_n < 16 || len == mlen)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007876:	2b0f      	cmp	r3, #15
 8007878:	d97b      	bls.n	8007972 <AES_CMAC_Update+0x158>
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	429a      	cmp	r2, r3
 8007880:	d077      	beq.n	8007972 <AES_CMAC_Update+0x158>
                            return;
                   XOR(ctx->M_last, ctx->X);
 8007882:	2300      	movs	r3, #0
 8007884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007886:	e015      	b.n	80078b4 <AES_CMAC_Update+0x9a>
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788c:	4413      	add	r3, r2
 800788e:	33f1      	adds	r3, #241	@ 0xf1
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	68f9      	ldr	r1, [r7, #12]
 8007894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007896:	440b      	add	r3, r1
 8007898:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	4053      	eors	r3, r2
 80078a0:	b2d9      	uxtb	r1, r3
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a6:	4413      	add	r3, r2
 80078a8:	33f1      	adds	r3, #241	@ 0xf1
 80078aa:	460a      	mov	r2, r1
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b0:	3301      	adds	r3, #1
 80078b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b6:	2b0f      	cmp	r3, #15
 80078b8:	dde6      	ble.n	8007888 <AES_CMAC_Update+0x6e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f103 00f1 	add.w	r0, r3, #241	@ 0xf1
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	33f1      	adds	r3, #241	@ 0xf1
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4619      	mov	r1, r3
 80078c8:	f7ff ff36 	bl	8007738 <aes_encrypt>
                    data += mlen;
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	4413      	add	r3, r2
 80078d2:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 80078dc:	e038      	b.n	8007950 <AES_CMAC_Update+0x136>

                    XOR(data, ctx->X);
 80078de:	2300      	movs	r3, #0
 80078e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078e2:	e013      	b.n	800790c <AES_CMAC_Update+0xf2>
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e8:	4413      	add	r3, r2
 80078ea:	33f1      	adds	r3, #241	@ 0xf1
 80078ec:	781a      	ldrb	r2, [r3, #0]
 80078ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f0:	68b9      	ldr	r1, [r7, #8]
 80078f2:	440b      	add	r3, r1
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	4053      	eors	r3, r2
 80078f8:	b2d9      	uxtb	r1, r3
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fe:	4413      	add	r3, r2
 8007900:	33f1      	adds	r3, #241	@ 0xf1
 8007902:	460a      	mov	r2, r1
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	3301      	adds	r3, #1
 800790a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800790c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790e:	2b0f      	cmp	r3, #15
 8007910:	dde8      	ble.n	80078e4 <AES_CMAC_Update+0xca>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8007918:	f107 0314 	add.w	r3, r7, #20
 800791c:	2210      	movs	r2, #16
 800791e:	4618      	mov	r0, r3
 8007920:	f010 fcf1 	bl	8018306 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	f107 0114 	add.w	r1, r7, #20
 800792a:	f107 0314 	add.w	r3, r7, #20
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff ff02 	bl	8007738 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	33f1      	adds	r3, #241	@ 0xf1
 8007938:	f107 0114 	add.w	r1, r7, #20
 800793c:	2210      	movs	r2, #16
 800793e:	4618      	mov	r0, r3
 8007940:	f010 fce1 	bl	8018306 <memcpy1>

                    data += 16;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	3310      	adds	r3, #16
 8007948:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	3b10      	subs	r3, #16
 800794e:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b10      	cmp	r3, #16
 8007954:	d8c3      	bhi.n	80078de <AES_CMAC_Update+0xc4>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	b292      	uxth	r2, r2
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	4618      	mov	r0, r3
 8007964:	f010 fccf 	bl	8018306 <memcpy1>
            ctx->M_n = len;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 8007970:	e000      	b.n	8007974 <AES_CMAC_Update+0x15a>
                            return;
 8007972:	bf00      	nop
}
 8007974:	3730      	adds	r7, #48	@ 0x30
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b092      	sub	sp, #72	@ 0x48
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8007984:	f107 031c 	add.w	r3, r7, #28
 8007988:	2210      	movs	r2, #16
 800798a:	2100      	movs	r1, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f010 fcf7 	bl	8018380 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	f107 011c 	add.w	r1, r7, #28
 8007998:	f107 031c 	add.w	r3, r7, #28
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff fecb 	bl	8007738 <aes_encrypt>

            if (K[0] & 0x80) {
 80079a2:	7f3b      	ldrb	r3, [r7, #28]
 80079a4:	b25b      	sxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	da30      	bge.n	8007a0c <AES_CMAC_Final+0x92>
                    LSHIFT(K, K);
 80079aa:	2300      	movs	r3, #0
 80079ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ae:	e01b      	b.n	80079e8 <AES_CMAC_Final+0x6e>
 80079b0:	f107 021c 	add.w	r2, r7, #28
 80079b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079b6:	4413      	add	r3, r2
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	b25a      	sxtb	r2, r3
 80079be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079c0:	3301      	adds	r3, #1
 80079c2:	3348      	adds	r3, #72	@ 0x48
 80079c4:	443b      	add	r3, r7
 80079c6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80079ca:	09db      	lsrs	r3, r3, #7
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	b25b      	sxtb	r3, r3
 80079d0:	4313      	orrs	r3, r2
 80079d2:	b25b      	sxtb	r3, r3
 80079d4:	b2d9      	uxtb	r1, r3
 80079d6:	f107 021c 	add.w	r2, r7, #28
 80079da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079dc:	4413      	add	r3, r2
 80079de:	460a      	mov	r2, r1
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079e4:	3301      	adds	r3, #1
 80079e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80079e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079ea:	2b0e      	cmp	r3, #14
 80079ec:	dde0      	ble.n	80079b0 <AES_CMAC_Final+0x36>
 80079ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                   K[15] ^= 0x87;
 80079fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079fe:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 8007a02:	43db      	mvns	r3, r3
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a0a:	e027      	b.n	8007a5c <AES_CMAC_Final+0xe2>
            } else
                    LSHIFT(K, K);
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a10:	e01b      	b.n	8007a4a <AES_CMAC_Final+0xd0>
 8007a12:	f107 021c 	add.w	r2, r7, #28
 8007a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a18:	4413      	add	r3, r2
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	b25a      	sxtb	r2, r3
 8007a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a22:	3301      	adds	r3, #1
 8007a24:	3348      	adds	r3, #72	@ 0x48
 8007a26:	443b      	add	r3, r7
 8007a28:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007a2c:	09db      	lsrs	r3, r3, #7
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	b25b      	sxtb	r3, r3
 8007a32:	4313      	orrs	r3, r2
 8007a34:	b25b      	sxtb	r3, r3
 8007a36:	b2d9      	uxtb	r1, r3
 8007a38:	f107 021c 	add.w	r2, r7, #28
 8007a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a3e:	4413      	add	r3, r2
 8007a40:	460a      	mov	r2, r1
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a46:	3301      	adds	r3, #1
 8007a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a4c:	2b0e      	cmp	r3, #14
 8007a4e:	dde0      	ble.n	8007a12 <AES_CMAC_Final+0x98>
 8007a50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


            if (ctx->M_n == 16) {
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007a62:	2b10      	cmp	r3, #16
 8007a64:	d11d      	bne.n	8007aa2 <AES_CMAC_Final+0x128>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 8007a66:	2300      	movs	r3, #0
 8007a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a6a:	e016      	b.n	8007a9a <AES_CMAC_Final+0x120>
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a70:	4413      	add	r3, r2
 8007a72:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	f107 011c 	add.w	r1, r7, #28
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a7e:	440b      	add	r3, r1
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	4053      	eors	r3, r2
 8007a84:	b2d9      	uxtb	r1, r3
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8007a90:	460a      	mov	r2, r1
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a96:	3301      	adds	r3, #1
 8007a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9c:	2b0f      	cmp	r3, #15
 8007a9e:	dde5      	ble.n	8007a6c <AES_CMAC_Final+0xf2>
 8007aa0:	e096      	b.n	8007bd0 <AES_CMAC_Final+0x256>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 8007aa2:	7f3b      	ldrb	r3, [r7, #28]
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	da30      	bge.n	8007b0c <AES_CMAC_Final+0x192>
                          LSHIFT(K, K);
 8007aaa:	2300      	movs	r3, #0
 8007aac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007aae:	e01b      	b.n	8007ae8 <AES_CMAC_Final+0x16e>
 8007ab0:	f107 021c 	add.w	r2, r7, #28
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab6:	4413      	add	r3, r2
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	b25a      	sxtb	r2, r3
 8007abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	3348      	adds	r3, #72	@ 0x48
 8007ac4:	443b      	add	r3, r7
 8007ac6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007aca:	09db      	lsrs	r3, r3, #7
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	b25b      	sxtb	r3, r3
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	b25b      	sxtb	r3, r3
 8007ad4:	b2d9      	uxtb	r1, r3
 8007ad6:	f107 021c 	add.w	r2, r7, #28
 8007ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007adc:	4413      	add	r3, r2
 8007ade:	460a      	mov	r2, r1
 8007ae0:	701a      	strb	r2, [r3, #0]
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aea:	2b0e      	cmp	r3, #14
 8007aec:	dde0      	ble.n	8007ab0 <AES_CMAC_Final+0x136>
 8007aee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                          K[15] ^= 0x87;
 8007afa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007afe:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 8007b02:	43db      	mvns	r3, r3
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b0a:	e027      	b.n	8007b5c <AES_CMAC_Final+0x1e2>
                  } else
                           LSHIFT(K, K);
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b10:	e01b      	b.n	8007b4a <AES_CMAC_Final+0x1d0>
 8007b12:	f107 021c 	add.w	r2, r7, #28
 8007b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b18:	4413      	add	r3, r2
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	b25a      	sxtb	r2, r3
 8007b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b22:	3301      	adds	r3, #1
 8007b24:	3348      	adds	r3, #72	@ 0x48
 8007b26:	443b      	add	r3, r7
 8007b28:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007b2c:	09db      	lsrs	r3, r3, #7
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	b25b      	sxtb	r3, r3
 8007b32:	4313      	orrs	r3, r2
 8007b34:	b25b      	sxtb	r3, r3
 8007b36:	b2d9      	uxtb	r1, r3
 8007b38:	f107 021c 	add.w	r2, r7, #28
 8007b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3e:	4413      	add	r3, r2
 8007b40:	460a      	mov	r2, r1
 8007b42:	701a      	strb	r2, [r3, #0]
 8007b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b46:	3301      	adds	r3, #1
 8007b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4c:	2b0e      	cmp	r3, #14
 8007b4e:	dde0      	ble.n	8007b12 <AES_CMAC_Final+0x198>
 8007b50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	4413      	add	r3, r2
 8007b66:	2280      	movs	r2, #128	@ 0x80
 8007b68:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
                   while (++ctx->M_n < 16)
 8007b6c:	e007      	b.n	8007b7e <AES_CMAC_Final+0x204>
                         ctx->M_last[ctx->M_n] = 0;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	4413      	add	r3, r2
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
                   while (++ctx->M_n < 16)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007b92:	2b0f      	cmp	r3, #15
 8007b94:	d9eb      	bls.n	8007b6e <AES_CMAC_Final+0x1f4>
   
                  XOR(K, ctx->M_last);
 8007b96:	2300      	movs	r3, #0
 8007b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b9a:	e016      	b.n	8007bca <AES_CMAC_Final+0x250>
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8007ba6:	781a      	ldrb	r2, [r3, #0]
 8007ba8:	f107 011c 	add.w	r1, r7, #28
 8007bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bae:	440b      	add	r3, r1
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	4053      	eors	r3, r2
 8007bb4:	b2d9      	uxtb	r1, r3
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bba:	4413      	add	r3, r2
 8007bbc:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8007bc0:	460a      	mov	r2, r1
 8007bc2:	701a      	strb	r2, [r3, #0]
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	2b0f      	cmp	r3, #15
 8007bce:	dde5      	ble.n	8007b9c <AES_CMAC_Final+0x222>


           }
           XOR(ctx->M_last, ctx->X);
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bd4:	e015      	b.n	8007c02 <AES_CMAC_Final+0x288>
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bda:	4413      	add	r3, r2
 8007bdc:	33f1      	adds	r3, #241	@ 0xf1
 8007bde:	781a      	ldrb	r2, [r3, #0]
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be4:	440b      	add	r3, r1
 8007be6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	4053      	eors	r3, r2
 8007bee:	b2d9      	uxtb	r1, r3
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf4:	4413      	add	r3, r2
 8007bf6:	33f1      	adds	r3, #241	@ 0xf1
 8007bf8:	460a      	mov	r2, r1
 8007bfa:	701a      	strb	r2, [r3, #0]
 8007bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfe:	3301      	adds	r3, #1
 8007c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c04:	2b0f      	cmp	r3, #15
 8007c06:	dde6      	ble.n	8007bd6 <AES_CMAC_Final+0x25c>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	2210      	movs	r2, #16
 8007c14:	4618      	mov	r0, r3
 8007c16:	f010 fb76 	bl	8018306 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	f107 030c 	add.w	r3, r7, #12
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff fd88 	bl	8007738 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8007c28:	f107 031c 	add.w	r3, r7, #28
 8007c2c:	2210      	movs	r2, #16
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f010 fba5 	bl	8018380 <memset1>

}
 8007c36:	bf00      	nop
 8007c38:	3748      	adds	r7, #72	@ 0x48
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
	...

08007c40 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	6039      	str	r1, [r7, #0]
 8007c4a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
 8007c50:	e01b      	b.n	8007c8a <GetKeyByID+0x4a>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8007c52:	7bfa      	ldrb	r2, [r7, #15]
 8007c54:	4912      	ldr	r1, [pc, #72]	@ (8007ca0 <GetKeyByID+0x60>)
 8007c56:	4613      	mov	r3, r2
 8007c58:	011b      	lsls	r3, r3, #4
 8007c5a:	4413      	add	r3, r2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	79fa      	ldrb	r2, [r7, #7]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d10c      	bne.n	8007c84 <GetKeyByID+0x44>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8007c6a:	7bfa      	ldrb	r2, [r7, #15]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	011b      	lsls	r3, r3, #4
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8007c76:	4a0a      	ldr	r2, [pc, #40]	@ (8007ca0 <GetKeyByID+0x60>)
 8007c78:	4413      	add	r3, r2
 8007c7a:	1d1a      	adds	r2, r3, #4
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8007c80:	2300      	movs	r3, #0
 8007c82:	e006      	b.n	8007c92 <GetKeyByID+0x52>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	3301      	adds	r3, #1
 8007c88:	73fb      	strb	r3, [r7, #15]
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
 8007c8c:	2b17      	cmp	r3, #23
 8007c8e:	d9e0      	bls.n	8007c52 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007c90:	2303      	movs	r3, #3
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20000e98 	.word	0x20000e98

08007ca4 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
    return;
 8007ca8:	bf00      	nop
}
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
	...

08007cb4 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08a      	sub	sp, #40	@ 0x28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	80fb      	strh	r3, [r7, #6]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	717b      	strb	r3, [r7, #5]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <ComputeCmac+0x22>
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <ComputeCmac+0x26>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e038      	b.n	8007d4c <ComputeCmac+0x98>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8007cda:	481e      	ldr	r0, [pc, #120]	@ (8007d54 <ComputeCmac+0xa0>)
 8007cdc:	f7ff fd75 	bl	80077ca <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8007ce0:	f107 0210 	add.w	r2, r7, #16
 8007ce4:	797b      	ldrb	r3, [r7, #5]
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff ffa9 	bl	8007c40 <GetKeyByID>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( retval == SECURE_ELEMENT_SUCCESS )
 8007cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d125      	bne.n	8007d48 <ComputeCmac+0x94>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	4619      	mov	r1, r3
 8007d02:	4814      	ldr	r0, [pc, #80]	@ (8007d54 <ComputeCmac+0xa0>)
 8007d04:	f7ff fd7a 	bl	80077fc <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d004      	beq.n	8007d18 <ComputeCmac+0x64>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 8007d0e:	2210      	movs	r2, #16
 8007d10:	68f9      	ldr	r1, [r7, #12]
 8007d12:	4810      	ldr	r0, [pc, #64]	@ (8007d54 <ComputeCmac+0xa0>)
 8007d14:	f7ff fd81 	bl	800781a <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	480d      	ldr	r0, [pc, #52]	@ (8007d54 <ComputeCmac+0xa0>)
 8007d20:	f7ff fd7b 	bl	800781a <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8007d24:	f107 0314 	add.w	r3, r7, #20
 8007d28:	490a      	ldr	r1, [pc, #40]	@ (8007d54 <ComputeCmac+0xa0>)
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff fe25 	bl	800797a <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
 8007d32:	061a      	lsls	r2, r3, #24
 8007d34:	7dbb      	ldrb	r3, [r7, #22]
 8007d36:	041b      	lsls	r3, r3, #16
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	7d7b      	ldrb	r3, [r7, #21]
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	7d3a      	ldrb	r2, [r7, #20]
 8007d42:	431a      	orrs	r2, r3
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	601a      	str	r2, [r3, #0]
    }

    return retval;
 8007d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3728      	adds	r7, #40	@ 0x28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	20000fac 	.word	0x20000fac

08007d58 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
    uint8_t itr = 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	77fb      	strb	r3, [r7, #31]
    uint8_t zeroKey[16] = { 0 };
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	f107 0310 	add.w	r3, r7, #16
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	605a      	str	r2, [r3, #4]
 8007d72:	609a      	str	r2, [r3, #8]

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8007d74:	7ffb      	ldrb	r3, [r7, #31]
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	77fa      	strb	r2, [r7, #31]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4aac      	ldr	r2, [pc, #688]	@ (8008030 <SecureElementInit+0x2d8>)
 8007d7e:	460b      	mov	r3, r1
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	440b      	add	r3, r1
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8007d8e:	7ffb      	ldrb	r3, [r7, #31]
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	77fa      	strb	r2, [r7, #31]
 8007d94:	4619      	mov	r1, r3
 8007d96:	4aa6      	ldr	r2, [pc, #664]	@ (8008030 <SecureElementInit+0x2d8>)
 8007d98:	460b      	mov	r3, r1
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	440b      	add	r3, r1
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007da4:	2201      	movs	r2, #1
 8007da6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 8007da8:	7ffb      	ldrb	r3, [r7, #31]
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	77fa      	strb	r2, [r7, #31]
 8007dae:	4619      	mov	r1, r3
 8007db0:	4a9f      	ldr	r2, [pc, #636]	@ (8008030 <SecureElementInit+0x2d8>)
 8007db2:	460b      	mov	r3, r1
 8007db4:	011b      	lsls	r3, r3, #4
 8007db6:	440b      	add	r3, r1
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 8007dc2:	7ffb      	ldrb	r3, [r7, #31]
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	77fa      	strb	r2, [r7, #31]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4a99      	ldr	r2, [pc, #612]	@ (8008030 <SecureElementInit+0x2d8>)
 8007dcc:	460b      	mov	r3, r1
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	440b      	add	r3, r1
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007dd8:	2203      	movs	r2, #3
 8007dda:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 8007ddc:	7ffb      	ldrb	r3, [r7, #31]
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	77fa      	strb	r2, [r7, #31]
 8007de2:	4619      	mov	r1, r3
 8007de4:	4a92      	ldr	r2, [pc, #584]	@ (8008030 <SecureElementInit+0x2d8>)
 8007de6:	460b      	mov	r3, r1
 8007de8:	011b      	lsls	r3, r3, #4
 8007dea:	440b      	add	r3, r1
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007df2:	2204      	movs	r2, #4
 8007df4:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8007df6:	7ffb      	ldrb	r3, [r7, #31]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	77fa      	strb	r2, [r7, #31]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4a8c      	ldr	r2, [pc, #560]	@ (8008030 <SecureElementInit+0x2d8>)
 8007e00:	460b      	mov	r3, r1
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	440b      	add	r3, r1
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007e0c:	2205      	movs	r2, #5
 8007e0e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8007e10:	7ffb      	ldrb	r3, [r7, #31]
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	77fa      	strb	r2, [r7, #31]
 8007e16:	4619      	mov	r1, r3
 8007e18:	4a85      	ldr	r2, [pc, #532]	@ (8008030 <SecureElementInit+0x2d8>)
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	011b      	lsls	r3, r3, #4
 8007e1e:	440b      	add	r3, r1
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007e26:	2206      	movs	r2, #6
 8007e28:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 8007e2a:	7ffb      	ldrb	r3, [r7, #31]
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	77fa      	strb	r2, [r7, #31]
 8007e30:	4619      	mov	r1, r3
 8007e32:	4a7f      	ldr	r2, [pc, #508]	@ (8008030 <SecureElementInit+0x2d8>)
 8007e34:	460b      	mov	r3, r1
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	440b      	add	r3, r1
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007e40:	2207      	movs	r2, #7
 8007e42:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8007e44:	7ffb      	ldrb	r3, [r7, #31]
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	77fa      	strb	r2, [r7, #31]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4a78      	ldr	r2, [pc, #480]	@ (8008030 <SecureElementInit+0x2d8>)
 8007e4e:	460b      	mov	r3, r1
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	440b      	add	r3, r1
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 8007e5e:	7ffb      	ldrb	r3, [r7, #31]
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	77fa      	strb	r2, [r7, #31]
 8007e64:	4619      	mov	r1, r3
 8007e66:	4a72      	ldr	r2, [pc, #456]	@ (8008030 <SecureElementInit+0x2d8>)
 8007e68:	460b      	mov	r3, r1
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	440b      	add	r3, r1
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007e74:	2209      	movs	r2, #9
 8007e76:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 8007e78:	7ffb      	ldrb	r3, [r7, #31]
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	77fa      	strb	r2, [r7, #31]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4a6b      	ldr	r2, [pc, #428]	@ (8008030 <SecureElementInit+0x2d8>)
 8007e82:	460b      	mov	r3, r1
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	440b      	add	r3, r1
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007e8e:	227f      	movs	r2, #127	@ 0x7f
 8007e90:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 8007e92:	7ffb      	ldrb	r3, [r7, #31]
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	77fa      	strb	r2, [r7, #31]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4a65      	ldr	r2, [pc, #404]	@ (8008030 <SecureElementInit+0x2d8>)
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	440b      	add	r3, r1
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007ea8:	2280      	movs	r2, #128	@ 0x80
 8007eaa:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 8007eac:	7ffb      	ldrb	r3, [r7, #31]
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	77fa      	strb	r2, [r7, #31]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4a5e      	ldr	r2, [pc, #376]	@ (8008030 <SecureElementInit+0x2d8>)
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	011b      	lsls	r3, r3, #4
 8007eba:	440b      	add	r3, r1
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007ec2:	2281      	movs	r2, #129	@ 0x81
 8007ec4:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 8007ec6:	7ffb      	ldrb	r3, [r7, #31]
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	77fa      	strb	r2, [r7, #31]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4a58      	ldr	r2, [pc, #352]	@ (8008030 <SecureElementInit+0x2d8>)
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	440b      	add	r3, r1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007edc:	2282      	movs	r2, #130	@ 0x82
 8007ede:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8007ee0:	7ffb      	ldrb	r3, [r7, #31]
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	77fa      	strb	r2, [r7, #31]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4a51      	ldr	r2, [pc, #324]	@ (8008030 <SecureElementInit+0x2d8>)
 8007eea:	460b      	mov	r3, r1
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	440b      	add	r3, r1
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007ef6:	2283      	movs	r2, #131	@ 0x83
 8007ef8:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 8007efa:	7ffb      	ldrb	r3, [r7, #31]
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	77fa      	strb	r2, [r7, #31]
 8007f00:	4619      	mov	r1, r3
 8007f02:	4a4b      	ldr	r2, [pc, #300]	@ (8008030 <SecureElementInit+0x2d8>)
 8007f04:	460b      	mov	r3, r1
 8007f06:	011b      	lsls	r3, r3, #4
 8007f08:	440b      	add	r3, r1
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007f10:	2284      	movs	r2, #132	@ 0x84
 8007f12:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8007f14:	7ffb      	ldrb	r3, [r7, #31]
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	77fa      	strb	r2, [r7, #31]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4a44      	ldr	r2, [pc, #272]	@ (8008030 <SecureElementInit+0x2d8>)
 8007f1e:	460b      	mov	r3, r1
 8007f20:	011b      	lsls	r3, r3, #4
 8007f22:	440b      	add	r3, r1
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007f2a:	2285      	movs	r2, #133	@ 0x85
 8007f2c:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8007f2e:	7ffb      	ldrb	r3, [r7, #31]
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	77fa      	strb	r2, [r7, #31]
 8007f34:	4619      	mov	r1, r3
 8007f36:	4a3e      	ldr	r2, [pc, #248]	@ (8008030 <SecureElementInit+0x2d8>)
 8007f38:	460b      	mov	r3, r1
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	440b      	add	r3, r1
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007f44:	2286      	movs	r2, #134	@ 0x86
 8007f46:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 8007f48:	7ffb      	ldrb	r3, [r7, #31]
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	77fa      	strb	r2, [r7, #31]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4a37      	ldr	r2, [pc, #220]	@ (8008030 <SecureElementInit+0x2d8>)
 8007f52:	460b      	mov	r3, r1
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	440b      	add	r3, r1
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007f5e:	2287      	movs	r2, #135	@ 0x87
 8007f60:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 8007f62:	7ffb      	ldrb	r3, [r7, #31]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	77fa      	strb	r2, [r7, #31]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4a31      	ldr	r2, [pc, #196]	@ (8008030 <SecureElementInit+0x2d8>)
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	440b      	add	r3, r1
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007f78:	2288      	movs	r2, #136	@ 0x88
 8007f7a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 8007f7c:	7ffb      	ldrb	r3, [r7, #31]
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	77fa      	strb	r2, [r7, #31]
 8007f82:	4619      	mov	r1, r3
 8007f84:	4a2a      	ldr	r2, [pc, #168]	@ (8008030 <SecureElementInit+0x2d8>)
 8007f86:	460b      	mov	r3, r1
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	440b      	add	r3, r1
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007f92:	2289      	movs	r2, #137	@ 0x89
 8007f94:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 8007f96:	7ffb      	ldrb	r3, [r7, #31]
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	77fa      	strb	r2, [r7, #31]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4a24      	ldr	r2, [pc, #144]	@ (8008030 <SecureElementInit+0x2d8>)
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	440b      	add	r3, r1
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007fac:	228a      	movs	r2, #138	@ 0x8a
 8007fae:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8007fb0:	7ffb      	ldrb	r3, [r7, #31]
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	77fa      	strb	r2, [r7, #31]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008030 <SecureElementInit+0x2d8>)
 8007fba:	460b      	mov	r3, r1
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	440b      	add	r3, r1
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007fc6:	228b      	movs	r2, #139	@ 0x8b
 8007fc8:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 8007fca:	7ffa      	ldrb	r2, [r7, #31]
 8007fcc:	4918      	ldr	r1, [pc, #96]	@ (8008030 <SecureElementInit+0x2d8>)
 8007fce:	4613      	mov	r3, r2
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	4413      	add	r3, r2
 8007fd4:	440b      	add	r3, r1
 8007fd6:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8007fda:	228c      	movs	r2, #140	@ 0x8c
 8007fdc:	701a      	strb	r2, [r3, #0]

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8007fde:	7ffa      	ldrb	r2, [r7, #31]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8007fea:	4a11      	ldr	r2, [pc, #68]	@ (8008030 <SecureElementInit+0x2d8>)
 8007fec:	4413      	add	r3, r2
 8007fee:	3305      	adds	r3, #5
 8007ff0:	f107 010c 	add.w	r1, r7, #12
 8007ff4:	2210      	movs	r2, #16
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f010 f985 	bl	8018306 <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 8007ffc:	2210      	movs	r2, #16
 8007ffe:	2100      	movs	r1, #0
 8008000:	480b      	ldr	r0, [pc, #44]	@ (8008030 <SecureElementInit+0x2d8>)
 8008002:	f010 f9bd 	bl	8018380 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 8008006:	2210      	movs	r2, #16
 8008008:	2100      	movs	r1, #0
 800800a:	480a      	ldr	r0, [pc, #40]	@ (8008034 <SecureElementInit+0x2dc>)
 800800c:	f010 f9b8 	bl	8018380 <memset1>

    // Assign callback
    if( seNvmCtxChanged != 0 )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <SecureElementInit+0x2c6>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 8008016:	4a08      	ldr	r2, [pc, #32]	@ (8008038 <SecureElementInit+0x2e0>)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	e002      	b.n	8008024 <SecureElementInit+0x2cc>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
 800801e:	4b06      	ldr	r3, [pc, #24]	@ (8008038 <SecureElementInit+0x2e0>)
 8008020:	4a06      	ldr	r2, [pc, #24]	@ (800803c <SecureElementInit+0x2e4>)
 8008022:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3720      	adds	r7, #32
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20000e98 	.word	0x20000e98
 8008034:	20000ea8 	.word	0x20000ea8
 8008038:	2000125c 	.word	0x2000125c
 800803c:	08007ca5 	.word	0x08007ca5

08008040 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d007      	beq.n	800805e <SecureElementRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 800804e:	f44f 7271 	mov.w	r2, #964	@ 0x3c4
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	4804      	ldr	r0, [pc, #16]	@ (8008068 <SecureElementRestoreNvmCtx+0x28>)
 8008056:	f010 f956 	bl	8018306 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 800805a:	2300      	movs	r3, #0
 800805c:	e000      	b.n	8008060 <SecureElementRestoreNvmCtx+0x20>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800805e:	2302      	movs	r3, #2
    }
}
 8008060:	4618      	mov	r0, r3
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	20000e98 	.word	0x20000e98

0800806c <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f44f 7271 	mov.w	r2, #964	@ 0x3c4
 800807a:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
 800807c:	4b03      	ldr	r3, [pc, #12]	@ (800808c <SecureElementGetNvmCtx+0x20>)
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	20000e98 	.word	0x20000e98

08008090 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80080a2:	2302      	movs	r3, #2
 80080a4:	e05b      	b.n	800815e <SecureElementSetKey+0xce>
    }

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80080a6:	2300      	movs	r3, #0
 80080a8:	77fb      	strb	r3, [r7, #31]
 80080aa:	e054      	b.n	8008156 <SecureElementSetKey+0xc6>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 80080ac:	7ffa      	ldrb	r2, [r7, #31]
 80080ae:	492e      	ldr	r1, [pc, #184]	@ (8008168 <SecureElementSetKey+0xd8>)
 80080b0:	4613      	mov	r3, r2
 80080b2:	011b      	lsls	r3, r3, #4
 80080b4:	4413      	add	r3, r2
 80080b6:	440b      	add	r3, r1
 80080b8:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	79fa      	ldrb	r2, [r7, #7]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d145      	bne.n	8008150 <SecureElementSetKey+0xc0>
        {
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	2b80      	cmp	r3, #128	@ 0x80
 80080c8:	d008      	beq.n	80080dc <SecureElementSetKey+0x4c>
 80080ca:	79fb      	ldrb	r3, [r7, #7]
 80080cc:	2b83      	cmp	r3, #131	@ 0x83
 80080ce:	d005      	beq.n	80080dc <SecureElementSetKey+0x4c>
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	2b86      	cmp	r3, #134	@ 0x86
 80080d4:	d002      	beq.n	80080dc <SecureElementSetKey+0x4c>
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	2b89      	cmp	r3, #137	@ 0x89
 80080da:	d126      	bne.n	800812a <SecureElementSetKey+0x9a>
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80080dc:	2306      	movs	r3, #6
 80080de:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[16] = { 0 };
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	f107 0310 	add.w	r3, r7, #16
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80080f0:	f107 030c 	add.w	r3, r7, #12
 80080f4:	227f      	movs	r2, #127	@ 0x7f
 80080f6:	2110      	movs	r1, #16
 80080f8:	6838      	ldr	r0, [r7, #0]
 80080fa:	f000 f887 	bl	800820c <SecureElementAesEncrypt>
 80080fe:	4603      	mov	r3, r0
 8008100:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8008102:	7ffa      	ldrb	r2, [r7, #31]
 8008104:	4613      	mov	r3, r2
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	4413      	add	r3, r2
 800810a:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 800810e:	4a16      	ldr	r2, [pc, #88]	@ (8008168 <SecureElementSetKey+0xd8>)
 8008110:	4413      	add	r3, r2
 8008112:	3305      	adds	r3, #5
 8008114:	f107 010c 	add.w	r1, r7, #12
 8008118:	2210      	movs	r2, #16
 800811a:	4618      	mov	r0, r3
 800811c:	f010 f8f3 	bl	8018306 <memcpy1>
                SeNvmCtxChanged( );
 8008120:	4b12      	ldr	r3, [pc, #72]	@ (800816c <SecureElementSetKey+0xdc>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4798      	blx	r3

                return retval;
 8008126:	7fbb      	ldrb	r3, [r7, #30]
 8008128:	e019      	b.n	800815e <SecureElementSetKey+0xce>
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 800812a:	7ffa      	ldrb	r2, [r7, #31]
 800812c:	4613      	mov	r3, r2
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	4413      	add	r3, r2
 8008132:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8008136:	4a0c      	ldr	r2, [pc, #48]	@ (8008168 <SecureElementSetKey+0xd8>)
 8008138:	4413      	add	r3, r2
 800813a:	3305      	adds	r3, #5
 800813c:	2210      	movs	r2, #16
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	4618      	mov	r0, r3
 8008142:	f010 f8e0 	bl	8018306 <memcpy1>
                SeNvmCtxChanged( );
 8008146:	4b09      	ldr	r3, [pc, #36]	@ (800816c <SecureElementSetKey+0xdc>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 800814c:	2300      	movs	r3, #0
 800814e:	e006      	b.n	800815e <SecureElementSetKey+0xce>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008150:	7ffb      	ldrb	r3, [r7, #31]
 8008152:	3301      	adds	r3, #1
 8008154:	77fb      	strb	r3, [r7, #31]
 8008156:	7ffb      	ldrb	r3, [r7, #31]
 8008158:	2b17      	cmp	r3, #23
 800815a:	d9a7      	bls.n	80080ac <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800815c:	2303      	movs	r3, #3
}
 800815e:	4618      	mov	r0, r3
 8008160:	3720      	adds	r7, #32
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000e98 	.word	0x20000e98
 800816c:	2000125c 	.word	0x2000125c

08008170 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4611      	mov	r1, r2
 800817c:	461a      	mov	r2, r3
 800817e:	460b      	mov	r3, r1
 8008180:	80fb      	strh	r3, [r7, #6]
 8008182:	4613      	mov	r3, r2
 8008184:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8008186:	797b      	ldrb	r3, [r7, #5]
 8008188:	2b7e      	cmp	r3, #126	@ 0x7e
 800818a:	d901      	bls.n	8008190 <SecureElementComputeAesCmac+0x20>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800818c:	2303      	movs	r3, #3
 800818e:	e009      	b.n	80081a4 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8008190:	7979      	ldrb	r1, [r7, #5]
 8008192:	88fa      	ldrh	r2, [r7, #6]
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	460b      	mov	r3, r1
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f7ff fd89 	bl	8007cb4 <ComputeCmac>
 80081a2:	4603      	mov	r3, r0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	461a      	mov	r2, r3
 80081b8:	460b      	mov	r3, r1
 80081ba:	817b      	strh	r3, [r7, #10]
 80081bc:	4613      	mov	r3, r2
 80081be:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80081c6:	2302      	movs	r3, #2
 80081c8:	e01b      	b.n	8008202 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80081ca:	2306      	movs	r3, #6
 80081cc:	75fb      	strb	r3, [r7, #23]
    uint32_t compCmac = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	613b      	str	r3, [r7, #16]
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80081d2:	7a79      	ldrb	r1, [r7, #9]
 80081d4:	897a      	ldrh	r2, [r7, #10]
 80081d6:	f107 0310 	add.w	r3, r7, #16
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	460b      	mov	r3, r1
 80081de:	68f9      	ldr	r1, [r7, #12]
 80081e0:	2000      	movs	r0, #0
 80081e2:	f7ff fd67 	bl	8007cb4 <ComputeCmac>
 80081e6:	4603      	mov	r3, r0
 80081e8:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	e006      	b.n	8008202 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d001      	beq.n	8008200 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 80081fc:	2301      	movs	r3, #1
 80081fe:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8008200:	7dfb      	ldrb	r3, [r7, #23]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	607b      	str	r3, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	817b      	strh	r3, [r7, #10]
 800821a:	4613      	mov	r3, r2
 800821c:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <SecureElementAesEncrypt+0x1e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <SecureElementAesEncrypt+0x22>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800822a:	2302      	movs	r3, #2
 800822c:	e036      	b.n	800829c <SecureElementAesEncrypt+0x90>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800822e:	897b      	ldrh	r3, [r7, #10]
 8008230:	f003 030f 	and.w	r3, r3, #15
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <SecureElementAesEncrypt+0x32>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800823a:	2305      	movs	r3, #5
 800823c:	e02e      	b.n	800829c <SecureElementAesEncrypt+0x90>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 800823e:	22f0      	movs	r2, #240	@ 0xf0
 8008240:	2100      	movs	r1, #0
 8008242:	4818      	ldr	r0, [pc, #96]	@ (80082a4 <SecureElementAesEncrypt+0x98>)
 8008244:	f010 f89c 	bl	8018380 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8008248:	f107 0210 	add.w	r2, r7, #16
 800824c:	7a7b      	ldrb	r3, [r7, #9]
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fcf5 	bl	8007c40 <GetKeyByID>
 8008256:	4603      	mov	r3, r0
 8008258:	75bb      	strb	r3, [r7, #22]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800825a:	7dbb      	ldrb	r3, [r7, #22]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d11c      	bne.n	800829a <SecureElementAesEncrypt+0x8e>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	3301      	adds	r3, #1
 8008264:	4a0f      	ldr	r2, [pc, #60]	@ (80082a4 <SecureElementAesEncrypt+0x98>)
 8008266:	2110      	movs	r1, #16
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff f987 	bl	800757c <aes_set_key>

        uint8_t block = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	75fb      	strb	r3, [r7, #23]

        while( size != 0 )
 8008272:	e00f      	b.n	8008294 <SecureElementAesEncrypt+0x88>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	18d0      	adds	r0, r2, r3
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	4413      	add	r3, r2
 8008280:	4a08      	ldr	r2, [pc, #32]	@ (80082a4 <SecureElementAesEncrypt+0x98>)
 8008282:	4619      	mov	r1, r3
 8008284:	f7ff fa58 	bl	8007738 <aes_encrypt>
            block = block + 16;
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	3310      	adds	r3, #16
 800828c:	75fb      	strb	r3, [r7, #23]
            size = size - 16;
 800828e:	897b      	ldrh	r3, [r7, #10]
 8008290:	3b10      	subs	r3, #16
 8008292:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 8008294:	897b      	ldrh	r3, [r7, #10]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1ec      	bne.n	8008274 <SecureElementAesEncrypt+0x68>
        }
    }
    return retval;
 800829a:	7dbb      	ldrb	r3, [r7, #22]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3718      	adds	r7, #24
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20000eb8 	.word	0x20000eb8

080082a8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	@ 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4611      	mov	r1, r2
 80082b4:	461a      	mov	r2, r3
 80082b6:	460b      	mov	r3, r1
 80082b8:	71fb      	strb	r3, [r7, #7]
 80082ba:	4613      	mov	r3, r2
 80082bc:	71bb      	strb	r3, [r7, #6]
    if( input == NULL )
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80082c4:	2302      	movs	r3, #2
 80082c6:	e03b      	b.n	8008340 <SecureElementDeriveAndStoreKey+0x98>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80082c8:	2306      	movs	r3, #6
 80082ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t key[16] = { 0 };
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]
 80082d2:	f107 0318 	add.w	r3, r7, #24
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	605a      	str	r2, [r3, #4]
 80082dc:	609a      	str	r2, [r3, #8]

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 80082de:	79bb      	ldrb	r3, [r7, #6]
 80082e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80082e2:	d10a      	bne.n	80082fa <SecureElementDeriveAndStoreKey+0x52>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d102      	bne.n	80082f0 <SecureElementDeriveAndStoreKey+0x48>
 80082ea:	7bbb      	ldrb	r3, [r7, #14]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <SecureElementDeriveAndStoreKey+0x4e>
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d101      	bne.n	80082fa <SecureElementDeriveAndStoreKey+0x52>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e022      	b.n	8008340 <SecureElementDeriveAndStoreKey+0x98>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 80082fa:	f107 0314 	add.w	r3, r7, #20
 80082fe:	79fa      	ldrb	r2, [r7, #7]
 8008300:	2110      	movs	r1, #16
 8008302:	68b8      	ldr	r0, [r7, #8]
 8008304:	f7ff ff82 	bl	800820c <SecureElementAesEncrypt>
 8008308:	4603      	mov	r3, r0
 800830a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( retval != SECURE_ELEMENT_SUCCESS )
 800830e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008312:	2b00      	cmp	r3, #0
 8008314:	d002      	beq.n	800831c <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 8008316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800831a:	e011      	b.n	8008340 <SecureElementDeriveAndStoreKey+0x98>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800831c:	f107 0214 	add.w	r2, r7, #20
 8008320:	79bb      	ldrb	r3, [r7, #6]
 8008322:	4611      	mov	r1, r2
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff feb3 	bl	8008090 <SecureElementSetKey>
 800832a:	4603      	mov	r3, r0
 800832c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( retval != SECURE_ELEMENT_SUCCESS )
 8008330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <SecureElementDeriveAndStoreKey+0x96>
    {
        return retval;
 8008338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800833c:	e000      	b.n	8008340 <SecureElementDeriveAndStoreKey+0x98>
    }

    return SECURE_ELEMENT_SUCCESS;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3728      	adds	r7, #40	@ 0x28
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008356:	2302      	movs	r3, #2
 8008358:	e006      	b.n	8008368 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random( );
 800835a:	4b05      	ldr	r3, [pc, #20]	@ (8008370 <SecureElementRandomNumber+0x28>)
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	4798      	blx	r3
 8008360:	4602      	mov	r2, r0
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	0802113c 	.word	0x0802113c

08008374 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008382:	2302      	movs	r3, #2
 8008384:	e008      	b.n	8008398 <SecureElementSetDevEui+0x24>
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 8008386:	2210      	movs	r2, #16
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4805      	ldr	r0, [pc, #20]	@ (80083a0 <SecureElementSetDevEui+0x2c>)
 800838c:	f00f ffbb 	bl	8018306 <memcpy1>
    SeNvmCtxChanged( );
 8008390:	4b04      	ldr	r3, [pc, #16]	@ (80083a4 <SecureElementSetDevEui+0x30>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20000e98 	.word	0x20000e98
 80083a4:	2000125c 	.word	0x2000125c

080083a8 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
    return SeNvmCtx.DevEui;
 80083ac:	4b02      	ldr	r3, [pc, #8]	@ (80083b8 <SecureElementGetDevEui+0x10>)
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	20000e98 	.word	0x20000e98

080083bc <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80083ca:	2302      	movs	r3, #2
 80083cc:	e008      	b.n	80083e0 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 80083ce:	2210      	movs	r2, #16
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	4805      	ldr	r0, [pc, #20]	@ (80083e8 <SecureElementSetJoinEui+0x2c>)
 80083d4:	f00f ff97 	bl	8018306 <memcpy1>
    SeNvmCtxChanged( );
 80083d8:	4b04      	ldr	r3, [pc, #16]	@ (80083ec <SecureElementSetJoinEui+0x30>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20000ea8 	.word	0x20000ea8
 80083ec:	2000125c 	.word	0x2000125c

080083f0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0
    return SeNvmCtx.JoinEui;
 80083f4:	4b02      	ldr	r3, [pc, #8]	@ (8008400 <SecureElementGetJoinEui+0x10>)
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	20000ea8 	.word	0x20000ea8

08008404 <LmHandlerInit>:

static void LmHandlerPackagesProcess( void );

LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks,
                                      LmHandlerParams_t *handlerParams )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08a      	sub	sp, #40	@ 0x28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
    //
    MibRequestConfirm_t mibReq;
    LmHandlerParams = handlerParams;
 800840e:	4a51      	ldr	r2, [pc, #324]	@ (8008554 <LmHandlerInit+0x150>)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	6013      	str	r3, [r2, #0]
    LmHandlerCallbacks = handlerCallbacks;
 8008414:	4a50      	ldr	r2, [pc, #320]	@ (8008558 <LmHandlerInit+0x154>)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800841a:	4b50      	ldr	r3, [pc, #320]	@ (800855c <LmHandlerInit+0x158>)
 800841c:	4a50      	ldr	r2, [pc, #320]	@ (8008560 <LmHandlerInit+0x15c>)
 800841e:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008420:	4b4e      	ldr	r3, [pc, #312]	@ (800855c <LmHandlerInit+0x158>)
 8008422:	4a50      	ldr	r2, [pc, #320]	@ (8008564 <LmHandlerInit+0x160>)
 8008424:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008426:	4b4d      	ldr	r3, [pc, #308]	@ (800855c <LmHandlerInit+0x158>)
 8008428:	4a4f      	ldr	r2, [pc, #316]	@ (8008568 <LmHandlerInit+0x164>)
 800842a:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800842c:	4b4b      	ldr	r3, [pc, #300]	@ (800855c <LmHandlerInit+0x158>)
 800842e:	4a4f      	ldr	r2, [pc, #316]	@ (800856c <LmHandlerInit+0x168>)
 8008430:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8008432:	4b49      	ldr	r3, [pc, #292]	@ (8008558 <LmHandlerInit+0x154>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a4d      	ldr	r2, [pc, #308]	@ (8008570 <LmHandlerInit+0x16c>)
 800843a:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800843c:	4b46      	ldr	r3, [pc, #280]	@ (8008558 <LmHandlerInit+0x154>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	4a4b      	ldr	r2, [pc, #300]	@ (8008570 <LmHandlerInit+0x16c>)
 8008444:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 8008446:	4b4a      	ldr	r3, [pc, #296]	@ (8008570 <LmHandlerInit+0x16c>)
 8008448:	4a4a      	ldr	r2, [pc, #296]	@ (8008574 <LmHandlerInit+0x170>)
 800844a:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800844c:	4b42      	ldr	r3, [pc, #264]	@ (8008558 <LmHandlerInit+0x154>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	4a47      	ldr	r2, [pc, #284]	@ (8008570 <LmHandlerInit+0x16c>)
 8008454:	60d3      	str	r3, [r2, #12]

    IsClassBSwitchPending = false;
 8008456:	4b48      	ldr	r3, [pc, #288]	@ (8008578 <LmHandlerInit+0x174>)
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams->Region ) != LORAMAC_STATUS_OK )
 800845c:	4b3d      	ldr	r3, [pc, #244]	@ (8008554 <LmHandlerInit+0x150>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	4942      	ldr	r1, [pc, #264]	@ (8008570 <LmHandlerInit+0x16c>)
 8008466:	483d      	ldr	r0, [pc, #244]	@ (800855c <LmHandlerInit+0x158>)
 8008468:	f006 fbba 	bl	800ebe0 <LoRaMacInitialization>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 8008472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008476:	e068      	b.n	800854a <LmHandlerInit+0x146>
    }

    // Try to restore from NVM and query the mac if possible.
    if( NvmCtxMgmtRestore( ) == NVMCTXMGMT_STATUS_SUCCESS )
 8008478:	f000 fded 	bl	8009056 <NvmCtxMgmtRestore>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d105      	bne.n	800848e <LmHandlerInit+0x8a>
    {
        LmHandlerCallbacks->OnNvmContextChange( LORAMAC_HANDLER_NVM_RESTORE );
 8008482:	4b35      	ldr	r3, [pc, #212]	@ (8008558 <LmHandlerInit+0x154>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	2000      	movs	r0, #0
 800848a:	4798      	blx	r3
 800848c:	e023      	b.n	80084d6 <LmHandlerInit+0xd2>
#if( ABP_ACTIVATION_LRWAN_VERSION == ABP_ACTIVATION_LRWAN_VERSION_V10x )
        mibReq.Type = MIB_GEN_APP_KEY;
        mibReq.Param.GenAppKey = CommissioningParams.GenAppKey;
        LoRaMacMibSetRequestConfirm( &mibReq );
#else
        mibReq.Type = MIB_APP_KEY;
 800848e:	2308      	movs	r3, #8
 8008490:	723b      	strb	r3, [r7, #8]
        mibReq.Param.AppKey = CommissioningParams.AppKey;
 8008492:	4b3a      	ldr	r3, [pc, #232]	@ (800857c <LmHandlerInit+0x178>)
 8008494:	60fb      	str	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008496:	f107 0308 	add.w	r3, r7, #8
 800849a:	4618      	mov	r0, r3
 800849c:	f007 f962 	bl	800f764 <LoRaMacMibSetRequestConfirm>
#endif

        mibReq.Type = MIB_NWK_KEY;
 80084a0:	2309      	movs	r3, #9
 80084a2:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NwkKey = CommissioningParams.NwkKey;
 80084a4:	4b36      	ldr	r3, [pc, #216]	@ (8008580 <LmHandlerInit+0x17c>)
 80084a6:	60fb      	str	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80084a8:	f107 0308 	add.w	r3, r7, #8
 80084ac:	4618      	mov	r0, r3
 80084ae:	f007 f959 	bl	800f764 <LoRaMacMibSetRequestConfirm>

#if( STATIC_DEVICE_EUI != 1 )
        LmHandlerCallbacks->GetUniqueId( CommissioningParams.DevEui );
#endif

        mibReq.Type = MIB_DEV_EUI;
 80084b2:	2302      	movs	r3, #2
 80084b4:	723b      	strb	r3, [r7, #8]
        mibReq.Param.DevEui = CommissioningParams.DevEui;
 80084b6:	4b33      	ldr	r3, [pc, #204]	@ (8008584 <LmHandlerInit+0x180>)
 80084b8:	60fb      	str	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80084ba:	f107 0308 	add.w	r3, r7, #8
 80084be:	4618      	mov	r0, r3
 80084c0:	f007 f950 	bl	800f764 <LoRaMacMibSetRequestConfirm>

        mibReq.Type = MIB_JOIN_EUI;
 80084c4:	2303      	movs	r3, #3
 80084c6:	723b      	strb	r3, [r7, #8]
        mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 80084c8:	4b2f      	ldr	r3, [pc, #188]	@ (8008588 <LmHandlerInit+0x184>)
 80084ca:	60fb      	str	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80084cc:	f107 0308 	add.w	r3, r7, #8
 80084d0:	4618      	mov	r0, r3
 80084d2:	f007 f947 	bl	800f764 <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_APP_S_KEY;
        mibReq.Param.AppSKey = CommissioningParams.AppSKey;
        LoRaMacMibSetRequestConfirm( &mibReq );
#endif
    }
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80084d6:	231d      	movs	r3, #29
 80084d8:	723b      	strb	r3, [r7, #8]
    mibReq.Param.EnablePublicNetwork = LmHandlerParams->PublicNetworkEnable;
 80084da:	4b1e      	ldr	r3, [pc, #120]	@ (8008554 <LmHandlerInit+0x150>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	78db      	ldrb	r3, [r3, #3]
 80084e0:	733b      	strb	r3, [r7, #12]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80084e2:	f107 0308 	add.w	r3, r7, #8
 80084e6:	4618      	mov	r0, r3
 80084e8:	f007 f93c 	bl	800f764 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 80084ec:	2304      	movs	r3, #4
 80084ee:	723b      	strb	r3, [r7, #8]
    mibReq.Param.AdrEnable = LmHandlerParams->AdrEnable;
 80084f0:	4b18      	ldr	r3, [pc, #96]	@ (8008554 <LmHandlerInit+0x150>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	785b      	ldrb	r3, [r3, #1]
 80084f6:	733b      	strb	r3, [r7, #12]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80084f8:	f107 0308 	add.w	r3, r7, #8
 80084fc:	4618      	mov	r0, r3
 80084fe:	f007 f931 	bl	800f764 <LoRaMacMibSetRequestConfirm>

    LoRaMacTestSetDutyCycleOn( LmHandlerParams->DutyCycleEnabled );
 8008502:	4b14      	ldr	r3, [pc, #80]	@ (8008554 <LmHandlerInit+0x150>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	791b      	ldrb	r3, [r3, #4]
 8008508:	4618      	mov	r0, r3
 800850a:	f008 f991 	bl	8010830 <LoRaMacTestSetDutyCycleOn>

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800850e:	2330      	movs	r3, #48	@ 0x30
 8008510:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = 20;
 8008512:	2314      	movs	r3, #20
 8008514:	60fb      	str	r3, [r7, #12]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008516:	f107 0308 	add.w	r3, r7, #8
 800851a:	4618      	mov	r0, r3
 800851c:	f007 f922 	bl	800f764 <LoRaMacMibSetRequestConfirm>

    LoRaMacStart( );
 8008520:	f006 fed2 	bl	800f2c8 <LoRaMacStart>

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008524:	2301      	movs	r3, #1
 8008526:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008528:	f107 0308 	add.w	r3, r7, #8
 800852c:	4618      	mov	r0, r3
 800852e:	f006 ff73 	bl	800f418 <LoRaMacMibGetRequestConfirm>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d107      	bne.n	8008548 <LmHandlerInit+0x144>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008538:	7b3b      	ldrb	r3, [r7, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d104      	bne.n	8008548 <LmHandlerInit+0x144>
        {
            LmHandlerCallbacks->OnNetworkParametersChange( &CommissioningParams );
 800853e:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <LmHandlerInit+0x154>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	4811      	ldr	r0, [pc, #68]	@ (800858c <LmHandlerInit+0x188>)
 8008546:	4798      	blx	r3
        }
    }
    return LORAMAC_HANDLER_SUCCESS;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3728      	adds	r7, #40	@ 0x28
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20001270 	.word	0x20001270
 8008558:	20001274 	.word	0x20001274
 800855c:	20001278 	.word	0x20001278
 8008560:	08008a21 	.word	0x08008a21
 8008564:	08008a89 	.word	0x08008a89
 8008568:	08008b51 	.word	0x08008b51
 800856c:	08008c79 	.word	0x08008c79
 8008570:	20001288 	.word	0x20001288
 8008574:	08009031 	.word	0x08009031
 8008578:	200012b4 	.word	0x200012b4
 800857c:	200001f9 	.word	0x200001f9
 8008580:	20000209 	.word	0x20000209
 8008584:	200001e9 	.word	0x200001e9
 8008588:	200001f1 	.word	0x200001f1
 800858c:	200001e8 	.word	0x200001e8

08008590 <LmHandlerIsBusy>:

bool LmHandlerIsBusy( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == true )
 8008594:	f004 f826 	bl	800c5e4 <LoRaMacIsBusy>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <LmHandlerIsBusy+0x12>
    {
        return true;
 800859e:	2301      	movs	r3, #1
 80085a0:	e012      	b.n	80085c8 <LmHandlerIsBusy+0x38>
    }
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80085a2:	f000 f889 	bl	80086b8 <LmHandlerJoinStatus>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d003      	beq.n	80085b4 <LmHandlerIsBusy+0x24>
    {
        // The network isn't yet joined, try again later.
        LmHandlerJoin( );
 80085ac:	f000 f878 	bl	80086a0 <LmHandlerJoin>
        return true;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e009      	b.n	80085c8 <LmHandlerIsBusy+0x38>
    }

    if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 80085b4:	4b05      	ldr	r3, [pc, #20]	@ (80085cc <LmHandlerIsBusy+0x3c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	4798      	blx	r3
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <LmHandlerIsBusy+0x36>
    {
        return true;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e000      	b.n	80085c8 <LmHandlerIsBusy+0x38>
    }
    return false;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20001260 	.word	0x20001260

080085d0 <LmHandlerProcess>:

void LmHandlerProcess( void )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
    // Process Radio IRQ
    if( Radio.IrqProcess != NULL )
 80085d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008604 <LmHandlerProcess+0x34>)
 80085d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <LmHandlerProcess+0x12>
    {
        Radio.IrqProcess( );
 80085dc:	4b09      	ldr	r3, [pc, #36]	@ (8008604 <LmHandlerProcess+0x34>)
 80085de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e0:	4798      	blx	r3
    }

    // Processes the LoRaMac events
    LoRaMacProcess( );
 80085e2:	f004 f9e7 	bl	800c9b4 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 80085e6:	f000 fcef 	bl	8008fc8 <LmHandlerPackagesProcess>

    if( NvmCtxMgmtStore( ) == NVMCTXMGMT_STATUS_SUCCESS )
 80085ea:	f000 fd2c 	bl	8009046 <NvmCtxMgmtStore>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <LmHandlerProcess+0x2e>
    {
        LmHandlerCallbacks->OnNvmContextChange( LORAMAC_HANDLER_NVM_STORE );
 80085f4:	4b04      	ldr	r3, [pc, #16]	@ (8008608 <LmHandlerProcess+0x38>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	2001      	movs	r0, #1
 80085fc:	4798      	blx	r3
    }
}
 80085fe:	bf00      	nop
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	0802113c 	.word	0x0802113c
 8008608:	20001274 	.word	0x20001274

0800860c <LmHandlerJoinRequest>:
 * \Note if the device is ABP, this is a pass through function
 *
 * \param [IN] isOtaa Indicates which activation mode must be used
 */
static void LmHandlerJoinRequest( bool isOtaa )
{
 800860c:	b590      	push	{r4, r7, lr}
 800860e:	b091      	sub	sp, #68	@ 0x44
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	71fb      	strb	r3, [r7, #7]
    if( isOtaa == true )
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01c      	beq.n	8008656 <LmHandlerJoinRequest+0x4a>
    {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_JOIN;
 800861c:	2300      	movs	r3, #0
 800861e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        mlmeReq.Req.Join.Datarate = LmHandlerParams->TxDatarate;
 8008622:	4b1c      	ldr	r3, [pc, #112]	@ (8008694 <LmHandlerJoinRequest+0x88>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        // Update commissioning parameters activation type variable.
        CommissioningParams.IsOtaaActivation = true;
 8008630:	4b19      	ldr	r3, [pc, #100]	@ (8008698 <LmHandlerJoinRequest+0x8c>)
 8008632:	2201      	movs	r2, #1
 8008634:	701a      	strb	r2, [r3, #0]

        // Starts the OTAA join procedure
        LmHandlerCallbacks->OnMacMlmeRequest( LoRaMacMlmeRequest( &mlmeReq ), &mlmeReq );
 8008636:	4b19      	ldr	r3, [pc, #100]	@ (800869c <LmHandlerJoinRequest+0x90>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6a1c      	ldr	r4, [r3, #32]
 800863c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008640:	4618      	mov	r0, r3
 8008642:	f007 fec3 	bl	80103cc <LoRaMacMlmeRequest>
 8008646:	4603      	mov	r3, r0
 8008648:	461a      	mov	r2, r3
 800864a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800864e:	4619      	mov	r1, r3
 8008650:	4610      	mov	r0, r2
 8008652:	47a0      	blx	r4
        LoRaMacMibSetRequestConfirm( &mibReq );

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &joinParams );
    }
}
 8008654:	e01a      	b.n	800868c <LmHandlerJoinRequest+0x80>
        LmHandlerJoinParams_t joinParams =
 8008656:	4b10      	ldr	r3, [pc, #64]	@ (8008698 <LmHandlerJoinRequest+0x8c>)
 8008658:	62bb      	str	r3, [r7, #40]	@ 0x28
            .Datarate = LmHandlerParams->TxDatarate,
 800865a:	4b0e      	ldr	r3, [pc, #56]	@ (8008694 <LmHandlerJoinRequest+0x88>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f993 3002 	ldrsb.w	r3, [r3, #2]
        LmHandlerJoinParams_t joinParams =
 8008662:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8008666:	2300      	movs	r3, #0
 8008668:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800866c:	2301      	movs	r3, #1
 800866e:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008670:	2301      	movs	r3, #1
 8008672:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008674:	f107 0308 	add.w	r3, r7, #8
 8008678:	4618      	mov	r0, r3
 800867a:	f007 f873 	bl	800f764 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &joinParams );
 800867e:	4b07      	ldr	r3, [pc, #28]	@ (800869c <LmHandlerJoinRequest+0x90>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008684:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
}
 800868c:	bf00      	nop
 800868e:	3744      	adds	r7, #68	@ 0x44
 8008690:	46bd      	mov	sp, r7
 8008692:	bd90      	pop	{r4, r7, pc}
 8008694:	20001270 	.word	0x20001270
 8008698:	200001e8 	.word	0x200001e8
 800869c:	20001274 	.word	0x20001274

080086a0 <LmHandlerJoin>:

void LmHandlerJoin( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0
    LmHandlerJoinRequest( CommissioningParams.IsOtaaActivation );
 80086a4:	4b03      	ldr	r3, [pc, #12]	@ (80086b4 <LmHandlerJoin+0x14>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff ffaf 	bl	800860c <LmHandlerJoinRequest>
}
 80086ae:	bf00      	nop
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	200001e8 	.word	0x200001e8

080086b8 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	@ 0x28
 80086bc:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80086be:	2301      	movs	r3, #1
 80086c0:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80086c2:	1d3b      	adds	r3, r7, #4
 80086c4:	4618      	mov	r0, r3
 80086c6:	f006 fea7 	bl	800f418 <LoRaMacMibGetRequestConfirm>
 80086ca:	4603      	mov	r3, r0
 80086cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 80086d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d106      	bne.n	80086e6 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80086d8:	7a3b      	ldrb	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 80086de:	2300      	movs	r3, #0
 80086e0:	e002      	b.n	80086e8 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e000      	b.n	80086e8 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 80086e6:	2300      	movs	r3, #0
    }
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3728      	adds	r7, #40	@ 0x28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
    LoRaMacStatus_t status;
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80086fc:	f7ff ffdc 	bl	80086b8 <LmHandlerJoinStatus>
 8008700:	4603      	mov	r3, r0
 8008702:	2b01      	cmp	r3, #1
 8008704:	d007      	beq.n	8008716 <LmHandlerSend+0x26>
    {
        // The network isn't joined, try again.
        LmHandlerJoinRequest( CommissioningParams.IsOtaaActivation );
 8008706:	4b3a      	ldr	r3, [pc, #232]	@ (80087f0 <LmHandlerSend+0x100>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff ff7e 	bl	800860c <LmHandlerJoinRequest>
        return LORAMAC_HANDLER_ERROR;
 8008710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008714:	e067      	b.n	80087e6 <LmHandlerSend+0xf6>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8008716:	4b37      	ldr	r3, [pc, #220]	@ (80087f4 <LmHandlerSend+0x104>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	4798      	blx	r3
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00d      	beq.n	8008740 <LmHandlerSend+0x50>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	781a      	ldrb	r2, [r3, #0]
 8008728:	4b32      	ldr	r3, [pc, #200]	@ (80087f4 <LmHandlerSend+0x104>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	429a      	cmp	r2, r3
 8008730:	d006      	beq.n	8008740 <LmHandlerSend+0x50>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <LmHandlerSend+0x50>
    {
        return LORAMAC_HANDLER_ERROR;
 800873a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800873e:	e052      	b.n	80087e6 <LmHandlerSend+0xf6>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams->TxDatarate;
 8008740:	4b2d      	ldr	r3, [pc, #180]	@ (80087f8 <LmHandlerSend+0x108>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008748:	76bb      	strb	r3, [r7, #26]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	785b      	ldrb	r3, [r3, #1]
 800874e:	f107 0208 	add.w	r2, r7, #8
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f006 fdc5 	bl	800f2e4 <LoRaMacQueryTxPossible>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d009      	beq.n	8008774 <LmHandlerSend+0x84>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8008760:	4b26      	ldr	r3, [pc, #152]	@ (80087fc <LmHandlerSend+0x10c>)
 8008762:	2200      	movs	r2, #0
 8008764:	721a      	strb	r2, [r3, #8]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8008766:	2300      	movs	r3, #0
 8008768:	733b      	strb	r3, [r7, #12]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	833b      	strh	r3, [r7, #24]
 8008772:	e015      	b.n	80087a0 <LmHandlerSend+0xb0>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 8008774:	4a21      	ldr	r2, [pc, #132]	@ (80087fc <LmHandlerSend+0x10c>)
 8008776:	78fb      	ldrb	r3, [r7, #3]
 8008778:	7213      	strb	r3, [r2, #8]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	833b      	strh	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	617b      	str	r3, [r7, #20]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d102      	bne.n	8008798 <LmHandlerSend+0xa8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8008792:	2300      	movs	r3, #0
 8008794:	733b      	strb	r3, [r7, #12]
 8008796:	e003      	b.n	80087a0 <LmHandlerSend+0xb0>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 8008798:	2301      	movs	r3, #1
 800879a:	733b      	strb	r3, [r7, #12]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800879c:	2308      	movs	r3, #8
 800879e:	76fb      	strb	r3, [r7, #27]
        }
    }

    TxParams.AppData = *appData;
 80087a0:	4b16      	ldr	r3, [pc, #88]	@ (80087fc <LmHandlerSend+0x10c>)
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	3310      	adds	r3, #16
 80087a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087aa:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams->TxDatarate;
 80087ae:	4b12      	ldr	r3, [pc, #72]	@ (80087f8 <LmHandlerSend+0x108>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80087b6:	4b11      	ldr	r3, [pc, #68]	@ (80087fc <LmHandlerSend+0x10c>)
 80087b8:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq );
 80087ba:	f107 030c 	add.w	r3, r7, #12
 80087be:	4618      	mov	r0, r3
 80087c0:	f007 ff42 	bl	8010648 <LoRaMacMcpsRequest>
 80087c4:	4603      	mov	r3, r0
 80087c6:	77fb      	strb	r3, [r7, #31]
    LmHandlerCallbacks->OnMacMcpsRequest( status, &mcpsReq );
 80087c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008800 <LmHandlerSend+0x110>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	f107 010c 	add.w	r1, r7, #12
 80087d2:	7ffa      	ldrb	r2, [r7, #31]
 80087d4:	4610      	mov	r0, r2
 80087d6:	4798      	blx	r3

    if( status == LORAMAC_STATUS_OK )
 80087d8:	7ffb      	ldrb	r3, [r7, #31]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <LmHandlerSend+0xf2>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80087de:	2300      	movs	r3, #0
 80087e0:	e001      	b.n	80087e6 <LmHandlerSend+0xf6>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	200001e8 	.word	0x200001e8
 80087f4:	20001260 	.word	0x20001260
 80087f8:	20001270 	.word	0x20001270
 80087fc:	2000022c 	.word	0x2000022c
 8008800:	20001274 	.word	0x20001274

08008804 <LmHandlerDeviceTimeReq>:

static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800880a:	2309      	movs	r3, #9
 800880c:	713b      	strb	r3, [r7, #4]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800880e:	1d3b      	adds	r3, r7, #4
 8008810:	4618      	mov	r0, r3
 8008812:	f007 fddb 	bl	80103cc <LoRaMacMlmeRequest>
 8008816:	4603      	mov	r3, r0
 8008818:	75fb      	strb	r3, [r7, #23]
    LmHandlerCallbacks->OnMacMlmeRequest( status, &mlmeReq );
 800881a:	4b09      	ldr	r3, [pc, #36]	@ (8008840 <LmHandlerDeviceTimeReq+0x3c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	1d39      	adds	r1, r7, #4
 8008822:	7dfa      	ldrb	r2, [r7, #23]
 8008824:	4610      	mov	r0, r2
 8008826:	4798      	blx	r3

    if( status == LORAMAC_STATUS_OK )
 8008828:	7dfb      	ldrb	r3, [r7, #23]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <LmHandlerDeviceTimeReq+0x2e>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800882e:	2300      	movs	r3, #0
 8008830:	e001      	b.n	8008836 <LmHandlerDeviceTimeReq+0x32>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8008832:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8008836:	4618      	mov	r0, r3
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20001274 	.word	0x20001274

08008844 <LmHandlerBeaconReq>:

static LmHandlerErrorStatus_t LmHandlerBeaconReq( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_BEACON_ACQUISITION;
 800884a:	230b      	movs	r3, #11
 800884c:	713b      	strb	r3, [r7, #4]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800884e:	1d3b      	adds	r3, r7, #4
 8008850:	4618      	mov	r0, r3
 8008852:	f007 fdbb 	bl	80103cc <LoRaMacMlmeRequest>
 8008856:	4603      	mov	r3, r0
 8008858:	75fb      	strb	r3, [r7, #23]
    LmHandlerCallbacks->OnMacMlmeRequest( status, &mlmeReq );
 800885a:	4b09      	ldr	r3, [pc, #36]	@ (8008880 <LmHandlerBeaconReq+0x3c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	1d39      	adds	r1, r7, #4
 8008862:	7dfa      	ldrb	r2, [r7, #23]
 8008864:	4610      	mov	r0, r2
 8008866:	4798      	blx	r3

    if( status == LORAMAC_STATUS_OK )
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <LmHandlerBeaconReq+0x2e>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800886e:	2300      	movs	r3, #0
 8008870:	e001      	b.n	8008876 <LmHandlerBeaconReq+0x32>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8008872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	20001274 	.word	0x20001274

08008884 <LmHandlerPingSlotReq>:

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08a      	sub	sp, #40	@ 0x28
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800888e:	230c      	movs	r3, #12
 8008890:	753b      	strb	r3, [r7, #20]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	b2da      	uxtb	r2, r3
 800889a:	7e3b      	ldrb	r3, [r7, #24]
 800889c:	f362 0302 	bfi	r3, r2, #0, #3
 80088a0:	763b      	strb	r3, [r7, #24]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.RFU = 0;
 80088a2:	7e3b      	ldrb	r3, [r7, #24]
 80088a4:	f36f 03c7 	bfc	r3, #3, #5
 80088a8:	763b      	strb	r3, [r7, #24]

    status = LoRaMacMlmeRequest( &mlmeReq );
 80088aa:	f107 0314 	add.w	r3, r7, #20
 80088ae:	4618      	mov	r0, r3
 80088b0:	f007 fd8c 	bl	80103cc <LoRaMacMlmeRequest>
 80088b4:	4603      	mov	r3, r0
 80088b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LmHandlerCallbacks->OnMacMlmeRequest( status, &mlmeReq );
 80088ba:	4b10      	ldr	r3, [pc, #64]	@ (80088fc <LmHandlerPingSlotReq+0x78>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	f107 0114 	add.w	r1, r7, #20
 80088c4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3

    if( status == LORAMAC_STATUS_OK )
 80088cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10d      	bne.n	80088f0 <LmHandlerPingSlotReq+0x6c>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 80088d4:	2300      	movs	r3, #0
 80088d6:	733b      	strb	r3, [r7, #12]
 80088d8:	2300      	movs	r3, #0
 80088da:	737b      	strb	r3, [r7, #13]
 80088dc:	2300      	movs	r3, #0
 80088de:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        return LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 80088e0:	f107 030c 	add.w	r3, r7, #12
 80088e4:	2100      	movs	r1, #0
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff ff02 	bl	80086f0 <LmHandlerSend>
 80088ec:	4603      	mov	r3, r0
 80088ee:	e001      	b.n	80088f4 <LmHandlerPingSlotReq+0x70>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80088f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3728      	adds	r7, #40	@ 0x28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20001274 	.word	0x20001274

08008900 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08c      	sub	sp, #48	@ 0x30
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800890a:	2300      	movs	r3, #0
 800890c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    mibReq.Type = MIB_DEVICE_CLASS;
 8008910:	2300      	movs	r3, #0
 8008912:	733b      	strb	r3, [r7, #12]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008914:	f107 030c 	add.w	r3, r7, #12
 8008918:	4618      	mov	r0, r3
 800891a:	f006 fd7d 	bl	800f418 <LoRaMacMibGetRequestConfirm>
    currentClass = mibReq.Param.Class;
 800891e:	7c3b      	ldrb	r3, [r7, #16]
 8008920:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 8008924:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8008928:	79fb      	ldrb	r3, [r7, #7]
 800892a:	429a      	cmp	r2, r3
 800892c:	d04f      	beq.n	80089ce <LmHandlerRequestClass+0xce>
    {
        switch( newClass )
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	2b02      	cmp	r3, #2
 8008932:	d02e      	beq.n	8008992 <LmHandlerRequestClass+0x92>
 8008934:	2b02      	cmp	r3, #2
 8008936:	dc47      	bgt.n	80089c8 <LmHandlerRequestClass+0xc8>
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <LmHandlerRequestClass+0x42>
 800893c:	2b01      	cmp	r3, #1
 800893e:	d018      	beq.n	8008972 <LmHandlerRequestClass+0x72>
                    errorStatus = LORAMAC_HANDLER_ERROR;
                }
            }
            break;
        default:
            break;
 8008940:	e042      	b.n	80089c8 <LmHandlerRequestClass+0xc8>
                if( currentClass != CLASS_A )
 8008942:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008946:	2b00      	cmp	r3, #0
 8008948:	d040      	beq.n	80089cc <LmHandlerRequestClass+0xcc>
                    mibReq.Param.Class = CLASS_A;
 800894a:	2300      	movs	r3, #0
 800894c:	743b      	strb	r3, [r7, #16]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800894e:	f107 030c 	add.w	r3, r7, #12
 8008952:	4618      	mov	r0, r3
 8008954:	f006 ff06 	bl	800f764 <LoRaMacMibSetRequestConfirm>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d105      	bne.n	800896a <LmHandlerRequestClass+0x6a>
                        LmHandlerCallbacks->OnClassChange( CLASS_A );
 800895e:	4b1f      	ldr	r3, [pc, #124]	@ (80089dc <LmHandlerRequestClass+0xdc>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008964:	2000      	movs	r0, #0
 8008966:	4798      	blx	r3
            break;
 8008968:	e030      	b.n	80089cc <LmHandlerRequestClass+0xcc>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800896a:	23ff      	movs	r3, #255	@ 0xff
 800896c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 8008970:	e02c      	b.n	80089cc <LmHandlerRequestClass+0xcc>
                if( currentClass != CLASS_A )
 8008972:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <LmHandlerRequestClass+0x80>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800897a:	23ff      	movs	r3, #255	@ 0xff
 800897c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                errorStatus = LmHandlerDeviceTimeReq( );
 8008980:	f7ff ff40 	bl	8008804 <LmHandlerDeviceTimeReq>
 8008984:	4603      	mov	r3, r0
 8008986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                IsClassBSwitchPending = true;
 800898a:	4b15      	ldr	r3, [pc, #84]	@ (80089e0 <LmHandlerRequestClass+0xe0>)
 800898c:	2201      	movs	r2, #1
 800898e:	701a      	strb	r2, [r3, #0]
            break;
 8008990:	e01d      	b.n	80089ce <LmHandlerRequestClass+0xce>
                if( currentClass != CLASS_A )
 8008992:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <LmHandlerRequestClass+0xa0>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800899a:	23ff      	movs	r3, #255	@ 0xff
 800899c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                mibReq.Param.Class = CLASS_C;
 80089a0:	2302      	movs	r3, #2
 80089a2:	743b      	strb	r3, [r7, #16]
                if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80089a4:	f107 030c 	add.w	r3, r7, #12
 80089a8:	4618      	mov	r0, r3
 80089aa:	f006 fedb 	bl	800f764 <LoRaMacMibSetRequestConfirm>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <LmHandlerRequestClass+0xc0>
                    LmHandlerCallbacks->OnClassChange( CLASS_C );
 80089b4:	4b09      	ldr	r3, [pc, #36]	@ (80089dc <LmHandlerRequestClass+0xdc>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ba:	2002      	movs	r0, #2
 80089bc:	4798      	blx	r3
            break;
 80089be:	e006      	b.n	80089ce <LmHandlerRequestClass+0xce>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80089c0:	23ff      	movs	r3, #255	@ 0xff
 80089c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 80089c6:	e002      	b.n	80089ce <LmHandlerRequestClass+0xce>
            break;
 80089c8:	bf00      	nop
 80089ca:	e000      	b.n	80089ce <LmHandlerRequestClass+0xce>
            break;
 80089cc:	bf00      	nop
        }
    }
    return errorStatus;
 80089ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3730      	adds	r7, #48	@ 0x30
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20001274 	.word	0x20001274
 80089e0:	200012b4 	.word	0x200012b4

080089e4 <LmHandlerGetCurrentClass>:

DeviceClass_t LmHandlerGetCurrentClass( void )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b088      	sub	sp, #32
 80089e8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
 80089ea:	2300      	movs	r3, #0
 80089ec:	703b      	strb	r3, [r7, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80089ee:	463b      	mov	r3, r7
 80089f0:	4618      	mov	r0, r3
 80089f2:	f006 fd11 	bl	800f418 <LoRaMacMibGetRequestConfirm>

    return mibReq.Param.Class;
 80089f6:	793b      	ldrb	r3, [r7, #4]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3720      	adds	r7, #32
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <LmHandlerGetCurrentDatarate>:

int8_t LmHandlerGetCurrentDatarate( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibGet;

    mibGet.Type = MIB_CHANNELS_DATARATE;
 8008a06:	232d      	movs	r3, #45	@ 0x2d
 8008a08:	703b      	strb	r3, [r7, #0]
    LoRaMacMibGetRequestConfirm( &mibGet );
 8008a0a:	463b      	mov	r3, r7
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f006 fd03 	bl	800f418 <LoRaMacMibGetRequestConfirm>

    return mibGet.Param.ChannelsDatarate;
 8008a12:	f997 3004 	ldrsb.w	r3, [r7, #4]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3720      	adds	r7, #32
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 8008a28:	4b15      	ldr	r3, [pc, #84]	@ (8008a80 <McpsConfirm+0x60>)
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	785a      	ldrb	r2, [r3, #1]
 8008a32:	4b13      	ldr	r3, [pc, #76]	@ (8008a80 <McpsConfirm+0x60>)
 8008a34:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	789b      	ldrb	r3, [r3, #2]
 8008a3a:	b25a      	sxtb	r2, r3
 8008a3c:	4b10      	ldr	r3, [pc, #64]	@ (8008a80 <McpsConfirm+0x60>)
 8008a3e:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	4a0e      	ldr	r2, [pc, #56]	@ (8008a80 <McpsConfirm+0x60>)
 8008a46:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8008a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a80 <McpsConfirm+0x60>)
 8008a50:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	4b09      	ldr	r3, [pc, #36]	@ (8008a80 <McpsConfirm+0x60>)
 8008a5a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	791b      	ldrb	r3, [r3, #4]
 8008a60:	461a      	mov	r2, r3
 8008a62:	4b07      	ldr	r3, [pc, #28]	@ (8008a80 <McpsConfirm+0x60>)
 8008a64:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 8008a66:	4b07      	ldr	r3, [pc, #28]	@ (8008a84 <McpsConfirm+0x64>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6c:	4804      	ldr	r0, [pc, #16]	@ (8008a80 <McpsConfirm+0x60>)
 8008a6e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	2000      	movs	r0, #0
 8008a74:	f000 fa24 	bl	8008ec0 <LmHandlerPackagesNotify>
}
 8008a78:	bf00      	nop
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	2000022c 	.word	0x2000022c
 8008a84:	20001274 	.word	0x20001274

08008a88 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
    LmHandlerAppData_t appData;

    RxParams.IsMcpsIndication = 1;
 8008a90:	4b2d      	ldr	r3, [pc, #180]	@ (8008b48 <McpsIndication+0xc0>)
 8008a92:	2201      	movs	r2, #1
 8008a94:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	785a      	ldrb	r2, [r3, #1]
 8008a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8008b48 <McpsIndication+0xc0>)
 8008a9c:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8008b48 <McpsIndication+0xc0>)
 8008aa0:	785b      	ldrb	r3, [r3, #1]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d14b      	bne.n	8008b3e <McpsIndication+0xb6>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	791b      	ldrb	r3, [r3, #4]
 8008aaa:	b25a      	sxtb	r2, r3
 8008aac:	4b26      	ldr	r3, [pc, #152]	@ (8008b48 <McpsIndication+0xc0>)
 8008aae:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = mcpsIndication->Rssi;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008ab6:	b25a      	sxtb	r2, r3
 8008ab8:	4b23      	ldr	r3, [pc, #140]	@ (8008b48 <McpsIndication+0xc0>)
 8008aba:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = mcpsIndication->Snr;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f993 2010 	ldrsb.w	r2, [r3, #16]
 8008ac2:	4b21      	ldr	r3, [pc, #132]	@ (8008b48 <McpsIndication+0xc0>)
 8008ac4:	729a      	strb	r2, [r3, #10]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	4a1f      	ldr	r2, [pc, #124]	@ (8008b48 <McpsIndication+0xc0>)
 8008acc:	60d3      	str	r3, [r2, #12]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	7c5b      	ldrb	r3, [r3, #17]
 8008ad2:	b25a      	sxtb	r2, r3
 8008ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8008b48 <McpsIndication+0xc0>)
 8008ad6:	741a      	strb	r2, [r3, #16]

    appData.Port = mcpsIndication->Port;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	78db      	ldrb	r3, [r3, #3]
 8008adc:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	7b1b      	ldrb	r3, [r3, #12]
 8008ae2:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8008aea:	4b18      	ldr	r3, [pc, #96]	@ (8008b4c <McpsIndication+0xc4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af0:	f107 0210 	add.w	r2, r7, #16
 8008af4:	4914      	ldr	r1, [pc, #80]	@ (8008b48 <McpsIndication+0xc0>)
 8008af6:	4610      	mov	r0, r2
 8008af8:	4798      	blx	r3

    if( mcpsIndication->DeviceTimeAnsReceived == true )
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	7f1b      	ldrb	r3, [r3, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <McpsIndication+0x82>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8008b02:	4b12      	ldr	r3, [pc, #72]	@ (8008b4c <McpsIndication+0xc4>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b08:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	2001      	movs	r0, #1
 8008b0e:	f000 f9d7 	bl	8008ec0 <LmHandlerPackagesNotify>

    if( ( mcpsIndication->FramePending == true ) && ( LmHandlerGetCurrentClass( ) == CLASS_A ) )
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	795b      	ldrb	r3, [r3, #5]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d112      	bne.n	8008b40 <McpsIndication+0xb8>
 8008b1a:	f7ff ff63 	bl	80089e4 <LmHandlerGetCurrentClass>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10d      	bne.n	8008b40 <McpsIndication+0xb8>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 8008b24:	2300      	movs	r3, #0
 8008b26:	723b      	strb	r3, [r7, #8]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	727b      	strb	r3, [r7, #9]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 8008b30:	f107 0308 	add.w	r3, r7, #8
 8008b34:	2100      	movs	r1, #0
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff fdda 	bl	80086f0 <LmHandlerSend>
 8008b3c:	e000      	b.n	8008b40 <McpsIndication+0xb8>
        return;
 8008b3e:	bf00      	nop
    }
}
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000248 	.word	0x20000248
 8008b4c:	20001274 	.word	0x20001274

08008b50 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08a      	sub	sp, #40	@ 0x28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8008b58:	4b43      	ldr	r3, [pc, #268]	@ (8008c68 <MlmeConfirm+0x118>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	785a      	ldrb	r2, [r3, #1]
 8008b62:	4b41      	ldr	r3, [pc, #260]	@ (8008c68 <MlmeConfirm+0x118>)
 8008b64:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8008b66:	4b41      	ldr	r3, [pc, #260]	@ (8008c6c <MlmeConfirm+0x11c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6c:	483e      	ldr	r0, [pc, #248]	@ (8008c68 <MlmeConfirm+0x118>)
 8008b6e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	2002      	movs	r0, #2
 8008b74:	f000 f9a4 	bl	8008ec0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b0c      	cmp	r3, #12
 8008b7e:	d86b      	bhi.n	8008c58 <MlmeConfirm+0x108>
 8008b80:	a201      	add	r2, pc, #4	@ (adr r2, 8008b88 <MlmeConfirm+0x38>)
 8008b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b86:	bf00      	nop
 8008b88:	08008bbd 	.word	0x08008bbd
 8008b8c:	08008c59 	.word	0x08008c59
 8008b90:	08008c59 	.word	0x08008c59
 8008b94:	08008c59 	.word	0x08008c59
 8008b98:	08008c59 	.word	0x08008c59
 8008b9c:	08008c59 	.word	0x08008c59
 8008ba0:	08008c59 	.word	0x08008c59
 8008ba4:	08008c59 	.word	0x08008c59
 8008ba8:	08008c59 	.word	0x08008c59
 8008bac:	08008c01 	.word	0x08008c01
 8008bb0:	08008c59 	.word	0x08008c59
 8008bb4:	08008c0f 	.word	0x08008c0f
 8008bb8:	08008c25 	.word	0x08008c25
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 8008bbc:	2306      	movs	r3, #6
 8008bbe:	723b      	strb	r3, [r7, #8]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008bc0:	f107 0308 	add.w	r3, r7, #8
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f006 fc27 	bl	800f418 <LoRaMacMibGetRequestConfirm>
            JoinParams.CommissioningParams->DevAddr = mibReq.Param.DevAddr;
 8008bca:	4b29      	ldr	r3, [pc, #164]	@ (8008c70 <MlmeConfirm+0x120>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	639a      	str	r2, [r3, #56]	@ 0x38
            JoinParams.Datarate = LmHandlerGetCurrentDatarate( );
 8008bd2:	f7ff ff15 	bl	8008a00 <LmHandlerGetCurrentDatarate>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4b25      	ldr	r3, [pc, #148]	@ (8008c70 <MlmeConfirm+0x120>)
 8008bdc:	711a      	strb	r2, [r3, #4]

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	785b      	ldrb	r3, [r3, #1]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d103      	bne.n	8008bee <MlmeConfirm+0x9e>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008be6:	4b22      	ldr	r3, [pc, #136]	@ (8008c70 <MlmeConfirm+0x120>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	715a      	strb	r2, [r3, #5]
 8008bec:	e002      	b.n	8008bf4 <MlmeConfirm+0xa4>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008bee:	4b20      	ldr	r3, [pc, #128]	@ (8008c70 <MlmeConfirm+0x120>)
 8008bf0:	22ff      	movs	r2, #255	@ 0xff
 8008bf2:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c6c <MlmeConfirm+0x11c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfa:	481d      	ldr	r0, [pc, #116]	@ (8008c70 <MlmeConfirm+0x120>)
 8008bfc:	4798      	blx	r3
        }
        break;
 8008bfe:	e02e      	b.n	8008c5e <MlmeConfirm+0x10e>
            // Check NbGateways
        }
        break;
    case MLME_DEVICE_TIME:
        {
            if( IsClassBSwitchPending == true )
 8008c00:	4b1c      	ldr	r3, [pc, #112]	@ (8008c74 <MlmeConfirm+0x124>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d029      	beq.n	8008c5c <MlmeConfirm+0x10c>
            {
                LmHandlerBeaconReq( );
 8008c08:	f7ff fe1c 	bl	8008844 <LmHandlerBeaconReq>
            }
        }
        break;
 8008c0c:	e026      	b.n	8008c5c <MlmeConfirm+0x10c>
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d103      	bne.n	8008c1e <MlmeConfirm+0xce>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( 0 );
 8008c16:	2000      	movs	r0, #0
 8008c18:	f7ff fe34 	bl	8008884 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 8008c1c:	e01f      	b.n	8008c5e <MlmeConfirm+0x10e>
                LmHandlerDeviceTimeReq( );
 8008c1e:	f7ff fdf1 	bl	8008804 <LmHandlerDeviceTimeReq>
        break;
 8008c22:	e01c      	b.n	8008c5e <MlmeConfirm+0x10e>
    case MLME_PING_SLOT_INFO:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	785b      	ldrb	r3, [r3, #1]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d111      	bne.n	8008c50 <MlmeConfirm+0x100>
            {
                MibRequestConfirm_t mibReq;

                // Class B is now activated
                mibReq.Type = MIB_DEVICE_CLASS;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	723b      	strb	r3, [r7, #8]
                mibReq.Param.Class = CLASS_B;
 8008c30:	2301      	movs	r3, #1
 8008c32:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008c34:	f107 0308 	add.w	r3, r7, #8
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f006 fd93 	bl	800f764 <LoRaMacMibSetRequestConfirm>
                // Notify upper layer
                LmHandlerCallbacks->OnClassChange( CLASS_B );
 8008c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008c6c <MlmeConfirm+0x11c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c44:	2001      	movs	r0, #1
 8008c46:	4798      	blx	r3
                IsClassBSwitchPending = false;
 8008c48:	4b0a      	ldr	r3, [pc, #40]	@ (8008c74 <MlmeConfirm+0x124>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	701a      	strb	r2, [r3, #0]
            else
            {
                LmHandlerPingSlotReq( 0 );
            }
        }
        break;
 8008c4e:	e006      	b.n	8008c5e <MlmeConfirm+0x10e>
                LmHandlerPingSlotReq( 0 );
 8008c50:	2000      	movs	r0, #0
 8008c52:	f7ff fe17 	bl	8008884 <LmHandlerPingSlotReq>
        break;
 8008c56:	e002      	b.n	8008c5e <MlmeConfirm+0x10e>
    default:
        break;
 8008c58:	bf00      	nop
 8008c5a:	e000      	b.n	8008c5e <MlmeConfirm+0x10e>
        break;
 8008c5c:	bf00      	nop
    }
}
 8008c5e:	bf00      	nop
 8008c60:	3728      	adds	r7, #40	@ 0x28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	2000022c 	.word	0x2000022c
 8008c6c:	20001274 	.word	0x20001274
 8008c70:	20000224 	.word	0x20000224
 8008c74:	200012b4 	.word	0x200012b4

08008c78 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication )
{
 8008c78:	b5b0      	push	{r4, r5, r7, lr}
 8008c7a:	b08c      	sub	sp, #48	@ 0x30
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
    RxParams.IsMcpsIndication = 0;
 8008c80:	4b40      	ldr	r3, [pc, #256]	@ (8008d84 <MlmeIndication+0x10c>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	785a      	ldrb	r2, [r3, #1]
 8008c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8008d84 <MlmeIndication+0x10c>)
 8008c8c:	705a      	strb	r2, [r3, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8008c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8008d84 <MlmeIndication+0x10c>)
 8008c90:	785b      	ldrb	r3, [r3, #1]
 8008c92:	2b0e      	cmp	r3, #14
 8008c94:	d005      	beq.n	8008ca2 <MlmeIndication+0x2a>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8008c96:	4b3c      	ldr	r3, [pc, #240]	@ (8008d88 <MlmeIndication+0x110>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9c:	4939      	ldr	r1, [pc, #228]	@ (8008d84 <MlmeIndication+0x10c>)
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	2003      	movs	r0, #3
 8008ca6:	f000 f90b 	bl	8008ec0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	2b0e      	cmp	r3, #14
 8008cb0:	d015      	beq.n	8008cde <MlmeIndication+0x66>
 8008cb2:	2b0e      	cmp	r3, #14
 8008cb4:	dc61      	bgt.n	8008d7a <MlmeIndication+0x102>
 8008cb6:	2b06      	cmp	r3, #6
 8008cb8:	d002      	beq.n	8008cc0 <MlmeIndication+0x48>
 8008cba:	2b0a      	cmp	r3, #10
 8008cbc:	d033      	beq.n	8008d26 <MlmeIndication+0xae>
            LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
        }
        break;
    }
    default:
        break;
 8008cbe:	e05c      	b.n	8008d7a <MlmeIndication+0x102>
            LmHandlerAppData_t appData =
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8008ccc:	2300      	movs	r3, #0
 8008cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 8008cd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff fd0a 	bl	80086f0 <LmHandlerSend>
        break;
 8008cdc:	e04e      	b.n	8008d7c <MlmeIndication+0x104>
            mibReq.Type = MIB_DEVICE_CLASS;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	723b      	strb	r3, [r7, #8]
            mibReq.Param.Class = CLASS_A;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008ce6:	f107 0308 	add.w	r3, r7, #8
 8008cea:	4618      	mov	r0, r3
 8008cec:	f006 fd3a 	bl	800f764 <LoRaMacMibSetRequestConfirm>
            BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 8008cf0:	4b26      	ldr	r3, [pc, #152]	@ (8008d8c <MlmeIndication+0x114>)
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	705a      	strb	r2, [r3, #1]
            BeaconParams.Info.Time.Seconds = 0;
 8008cf6:	4b25      	ldr	r3, [pc, #148]	@ (8008d8c <MlmeIndication+0x114>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	605a      	str	r2, [r3, #4]
            BeaconParams.Info.GwSpecific.InfoDesc = 0;
 8008cfc:	4b23      	ldr	r3, [pc, #140]	@ (8008d8c <MlmeIndication+0x114>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	755a      	strb	r2, [r3, #21]
            memset1( BeaconParams.Info.GwSpecific.Info, 0, 6 );
 8008d02:	2206      	movs	r2, #6
 8008d04:	2100      	movs	r1, #0
 8008d06:	4822      	ldr	r0, [pc, #136]	@ (8008d90 <MlmeIndication+0x118>)
 8008d08:	f00f fb3a 	bl	8018380 <memset1>
            LmHandlerCallbacks->OnClassChange( CLASS_A );
 8008d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8008d88 <MlmeIndication+0x110>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d12:	2000      	movs	r0, #0
 8008d14:	4798      	blx	r3
            LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 8008d16:	4b1c      	ldr	r3, [pc, #112]	@ (8008d88 <MlmeIndication+0x110>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d1c:	481b      	ldr	r0, [pc, #108]	@ (8008d8c <MlmeIndication+0x114>)
 8008d1e:	4798      	blx	r3
            LmHandlerDeviceTimeReq( );
 8008d20:	f7ff fd70 	bl	8008804 <LmHandlerDeviceTimeReq>
        break;
 8008d24:	e02a      	b.n	8008d7c <MlmeIndication+0x104>
        if( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	2b0e      	cmp	r3, #14
 8008d2c:	d112      	bne.n	8008d54 <MlmeIndication+0xdc>
            BeaconParams.State = LORAMAC_HANDLER_BEACON_RX;
 8008d2e:	4b17      	ldr	r3, [pc, #92]	@ (8008d8c <MlmeIndication+0x114>)
 8008d30:	2202      	movs	r2, #2
 8008d32:	705a      	strb	r2, [r3, #1]
            BeaconParams.Info = mlmeIndication->BeaconInfo;
 8008d34:	4a15      	ldr	r2, [pc, #84]	@ (8008d8c <MlmeIndication+0x114>)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	1d14      	adds	r4, r2, #4
 8008d3a:	1d1d      	adds	r5, r3, #4
 8008d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008d44:	e884 0003 	stmia.w	r4, {r0, r1}
            LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 8008d48:	4b0f      	ldr	r3, [pc, #60]	@ (8008d88 <MlmeIndication+0x110>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d4e:	480f      	ldr	r0, [pc, #60]	@ (8008d8c <MlmeIndication+0x114>)
 8008d50:	4798      	blx	r3
        break;
 8008d52:	e013      	b.n	8008d7c <MlmeIndication+0x104>
            BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 8008d54:	4b0d      	ldr	r3, [pc, #52]	@ (8008d8c <MlmeIndication+0x114>)
 8008d56:	2203      	movs	r2, #3
 8008d58:	705a      	strb	r2, [r3, #1]
            BeaconParams.Info = mlmeIndication->BeaconInfo;
 8008d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d8c <MlmeIndication+0x114>)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	1d14      	adds	r4, r2, #4
 8008d60:	1d1d      	adds	r5, r3, #4
 8008d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008d6a:	e884 0003 	stmia.w	r4, {r0, r1}
            LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 8008d6e:	4b06      	ldr	r3, [pc, #24]	@ (8008d88 <MlmeIndication+0x110>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d74:	4805      	ldr	r0, [pc, #20]	@ (8008d8c <MlmeIndication+0x114>)
 8008d76:	4798      	blx	r3
        break;
 8008d78:	e000      	b.n	8008d7c <MlmeIndication+0x104>
        break;
 8008d7a:	bf00      	nop
    }
}
 8008d7c:	bf00      	nop
 8008d7e:	3730      	adds	r7, #48	@ 0x30
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bdb0      	pop	{r4, r5, r7, pc}
 8008d84:	20000248 	.word	0x20000248
 8008d88:	20001274 	.word	0x20001274
 8008d8c:	20001298 	.word	0x20001298
 8008d90:	200012ae 	.word	0x200012ae

08008d94 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
    switch( id )
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d81a      	bhi.n	8008de0 <LmHandlerPackageRegister+0x4c>
 8008daa:	a201      	add	r2, pc, #4	@ (adr r2, 8008db0 <LmHandlerPackageRegister+0x1c>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008dc9 	.word	0x08008dc9
 8008db8:	08008dd1 	.word	0x08008dd1
 8008dbc:	08008dd9 	.word	0x08008dd9
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmphCompliancePackageFactory( );
 8008dc0:	f001 f8a4 	bl	8009f0c <LmphCompliancePackageFactory>
 8008dc4:	60f8      	str	r0, [r7, #12]
            break;
 8008dc6:	e00b      	b.n	8008de0 <LmHandlerPackageRegister+0x4c>
        }
        case PACKAGE_ID_CLOCK_SYNC:
        {
            package = LmphClockSyncPackageFactory( );
 8008dc8:	f000 fede 	bl	8009b88 <LmphClockSyncPackageFactory>
 8008dcc:	60f8      	str	r0, [r7, #12]
            break;
 8008dce:	e007      	b.n	8008de0 <LmHandlerPackageRegister+0x4c>
        }
        case PACKAGE_ID_REMOTE_MCAST_SETUP:
        {
            package = LmhpRemoteMcastSetupPackageFactory( );
 8008dd0:	f001 ff7a 	bl	800acc8 <LmhpRemoteMcastSetupPackageFactory>
 8008dd4:	60f8      	str	r0, [r7, #12]
            break;
 8008dd6:	e003      	b.n	8008de0 <LmHandlerPackageRegister+0x4c>
        }
        case PACKAGE_ID_FRAGMENTATION:
        {
            package = LmhpFragmentationPackageFactory( );
 8008dd8:	f001 fb9e 	bl	800a518 <LmhpFragmentationPackageFactory>
 8008ddc:	60f8      	str	r0, [r7, #12]
            break;
 8008dde:	bf00      	nop
        }
    }
    if( package != NULL )
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d03d      	beq.n	8008e62 <LmHandlerPackageRegister+0xce>
    {
        LmHandlerPackages[id] = package;
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	4921      	ldr	r1, [pc, #132]	@ (8008e70 <LmHandlerPackageRegister+0xdc>)
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnMacMcpsRequest = LmHandlerCallbacks->OnMacMcpsRequest;
 8008df0:	4b20      	ldr	r3, [pc, #128]	@ (8008e74 <LmHandlerPackageRegister+0xe0>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	79fb      	ldrb	r3, [r7, #7]
 8008df6:	491e      	ldr	r1, [pc, #120]	@ (8008e70 <LmHandlerPackageRegister+0xdc>)
 8008df8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008dfc:	69d2      	ldr	r2, [r2, #28]
 8008dfe:	625a      	str	r2, [r3, #36]	@ 0x24
        LmHandlerPackages[id]->OnMacMlmeRequest = LmHandlerCallbacks->OnMacMlmeRequest;
 8008e00:	4b1c      	ldr	r3, [pc, #112]	@ (8008e74 <LmHandlerPackageRegister+0xe0>)
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	79fb      	ldrb	r3, [r7, #7]
 8008e06:	491a      	ldr	r1, [pc, #104]	@ (8008e70 <LmHandlerPackageRegister+0xdc>)
 8008e08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e0c:	6a12      	ldr	r2, [r2, #32]
 8008e0e:	629a      	str	r2, [r3, #40]	@ 0x28
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoinRequest;
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	4a17      	ldr	r2, [pc, #92]	@ (8008e70 <LmHandlerPackageRegister+0xdc>)
 8008e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e18:	4a17      	ldr	r2, [pc, #92]	@ (8008e78 <LmHandlerPackageRegister+0xe4>)
 8008e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8008e1c:	79fb      	ldrb	r3, [r7, #7]
 8008e1e:	4a14      	ldr	r2, [pc, #80]	@ (8008e70 <LmHandlerPackageRegister+0xdc>)
 8008e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e24:	4a15      	ldr	r2, [pc, #84]	@ (8008e7c <LmHandlerPackageRegister+0xe8>)
 8008e26:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	4a11      	ldr	r2, [pc, #68]	@ (8008e70 <LmHandlerPackageRegister+0xdc>)
 8008e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e30:	4a13      	ldr	r2, [pc, #76]	@ (8008e80 <LmHandlerPackageRegister+0xec>)
 8008e32:	635a      	str	r2, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 8008e34:	4b0f      	ldr	r3, [pc, #60]	@ (8008e74 <LmHandlerPackageRegister+0xe0>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	79fb      	ldrb	r3, [r7, #7]
 8008e3a:	490d      	ldr	r1, [pc, #52]	@ (8008e70 <LmHandlerPackageRegister+0xdc>)
 8008e3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e40:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008e42:	639a      	str	r2, [r3, #56]	@ 0x38
        LmHandlerPackages[id]->Init( params, LmHandlerParams->DataBuffer, LmHandlerParams->DataBufferMaxSize );
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	4a0a      	ldr	r2, [pc, #40]	@ (8008e70 <LmHandlerPackageRegister+0xdc>)
 8008e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8008e84 <LmHandlerPackageRegister+0xf0>)
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	6891      	ldr	r1, [r2, #8]
 8008e54:	4a0b      	ldr	r2, [pc, #44]	@ (8008e84 <LmHandlerPackageRegister+0xf0>)
 8008e56:	6812      	ldr	r2, [r2, #0]
 8008e58:	7952      	ldrb	r2, [r2, #5]
 8008e5a:	6838      	ldr	r0, [r7, #0]
 8008e5c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e001      	b.n	8008e66 <LmHandlerPackageRegister+0xd2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8008e62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20001260 	.word	0x20001260
 8008e74:	20001274 	.word	0x20001274
 8008e78:	0800860d 	.word	0x0800860d
 8008e7c:	080086f1 	.word	0x080086f1
 8008e80:	08008805 	.word	0x08008805
 8008e84:	20001270 	.word	0x20001270

08008e88 <LmHandlerPackageIsInitialized>:

bool LmHandlerPackageIsInitialized( uint8_t id )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	71fb      	strb	r3, [r7, #7]
    if( LmHandlerPackages[id]->IsInitialized != NULL )
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	4a09      	ldr	r2, [pc, #36]	@ (8008ebc <LmHandlerPackageIsInitialized+0x34>)
 8008e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d007      	beq.n	8008eb0 <LmHandlerPackageIsInitialized+0x28>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	4a06      	ldr	r2, [pc, #24]	@ (8008ebc <LmHandlerPackageIsInitialized+0x34>)
 8008ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	4798      	blx	r3
 8008eac:	4603      	mov	r3, r0
 8008eae:	e000      	b.n	8008eb2 <LmHandlerPackageIsInitialized+0x2a>
    }
    else
    {
        return false;
 8008eb0:	2300      	movs	r3, #0
    }
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	20001260 	.word	0x20001260

08008ec0 <LmHandlerPackagesNotify>:
        return false;
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	6039      	str	r1, [r7, #0]
 8008eca:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
 8008ed0:	e06f      	b.n	8008fb2 <LmHandlerPackagesNotify+0xf2>
    {
        if( LmHandlerPackages[i] != NULL )
 8008ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ed6:	4a3b      	ldr	r2, [pc, #236]	@ (8008fc4 <LmHandlerPackagesNotify+0x104>)
 8008ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d062      	beq.n	8008fa6 <LmHandlerPackagesNotify+0xe6>
        {
            switch( notifyType )
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d85f      	bhi.n	8008fa6 <LmHandlerPackagesNotify+0xe6>
 8008ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8008eec <LmHandlerPackagesNotify+0x2c>)
 8008ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eec:	08008efd 	.word	0x08008efd
 8008ef0:	08008f1f 	.word	0x08008f1f
 8008ef4:	08008f55 	.word	0x08008f55
 8008ef8:	08008f77 	.word	0x08008f77
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8008efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f00:	4a30      	ldr	r2, [pc, #192]	@ (8008fc4 <LmHandlerPackagesNotify+0x104>)
 8008f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d045      	beq.n	8008f98 <LmHandlerPackagesNotify+0xd8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( params );
 8008f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f10:	4a2c      	ldr	r2, [pc, #176]	@ (8008fc4 <LmHandlerPackagesNotify+0x104>)
 8008f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	6838      	ldr	r0, [r7, #0]
 8008f1a:	4798      	blx	r3
                    }
                    break;
 8008f1c:	e03c      	b.n	8008f98 <LmHandlerPackagesNotify+0xd8>
                }
                case PACKAGE_MCPS_INDICATION:
                {
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f22:	4a28      	ldr	r2, [pc, #160]	@ (8008fc4 <LmHandlerPackagesNotify+0x104>)
 8008f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d036      	beq.n	8008f9c <LmHandlerPackagesNotify+0xdc>
                        ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t* )params )->Port ) )
 8008f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f32:	4a24      	ldr	r2, [pc, #144]	@ (8008fc4 <LmHandlerPackagesNotify+0x104>)
 8008f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f38:	781a      	ldrb	r2, [r3, #0]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d12c      	bne.n	8008f9c <LmHandlerPackagesNotify+0xdc>
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( params );
 8008f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f46:	4a1f      	ldr	r2, [pc, #124]	@ (8008fc4 <LmHandlerPackagesNotify+0x104>)
 8008f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	6838      	ldr	r0, [r7, #0]
 8008f50:	4798      	blx	r3
                    }
                    break;
 8008f52:	e023      	b.n	8008f9c <LmHandlerPackagesNotify+0xdc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8008f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f58:	4a1a      	ldr	r2, [pc, #104]	@ (8008fc4 <LmHandlerPackagesNotify+0x104>)
 8008f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d01d      	beq.n	8008fa0 <LmHandlerPackagesNotify+0xe0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( params );
 8008f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f68:	4a16      	ldr	r2, [pc, #88]	@ (8008fc4 <LmHandlerPackagesNotify+0x104>)
 8008f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	6838      	ldr	r0, [r7, #0]
 8008f72:	4798      	blx	r3
                    }
                    break;
 8008f74:	e014      	b.n	8008fa0 <LmHandlerPackagesNotify+0xe0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8008f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f7a:	4a12      	ldr	r2, [pc, #72]	@ (8008fc4 <LmHandlerPackagesNotify+0x104>)
 8008f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00e      	beq.n	8008fa4 <LmHandlerPackagesNotify+0xe4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8008f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8008fc4 <LmHandlerPackagesNotify+0x104>)
 8008f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	6838      	ldr	r0, [r7, #0]
 8008f94:	4798      	blx	r3
                    }
                    break;
 8008f96:	e005      	b.n	8008fa4 <LmHandlerPackagesNotify+0xe4>
                    break;
 8008f98:	bf00      	nop
 8008f9a:	e004      	b.n	8008fa6 <LmHandlerPackagesNotify+0xe6>
                    break;
 8008f9c:	bf00      	nop
 8008f9e:	e002      	b.n	8008fa6 <LmHandlerPackagesNotify+0xe6>
                    break;
 8008fa0:	bf00      	nop
 8008fa2:	e000      	b.n	8008fa6 <LmHandlerPackagesNotify+0xe6>
                    break;
 8008fa4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	3301      	adds	r3, #1
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	73fb      	strb	r3, [r7, #15]
 8008fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	dd8b      	ble.n	8008ed2 <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 8008fba:	bf00      	nop
 8008fbc:	bf00      	nop
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	20001260 	.word	0x20001260

08008fc8 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008fce:	2300      	movs	r3, #0
 8008fd0:	71fb      	strb	r3, [r7, #7]
 8008fd2:	e022      	b.n	800901a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fd8:	4a14      	ldr	r2, [pc, #80]	@ (800902c <LmHandlerPackagesProcess+0x64>)
 8008fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d015      	beq.n	800900e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fe6:	4a11      	ldr	r2, [pc, #68]	@ (800902c <LmHandlerPackagesProcess+0x64>)
 8008fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fec:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00d      	beq.n	800900e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8008ff2:	79fb      	ldrb	r3, [r7, #7]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff ff47 	bl	8008e88 <LmHandlerPackageIsInitialized>
 8008ffa:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d006      	beq.n	800900e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 8009000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009004:	4a09      	ldr	r2, [pc, #36]	@ (800902c <LmHandlerPackagesProcess+0x64>)
 8009006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800900e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	3301      	adds	r3, #1
 8009016:	b2db      	uxtb	r3, r3
 8009018:	71fb      	strb	r3, [r7, #7]
 800901a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800901e:	2b03      	cmp	r3, #3
 8009020:	ddd8      	ble.n	8008fd4 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 8009022:	bf00      	nop
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	20001260 	.word	0x20001260

08009030 <NvmCtxMgmtEvent>:
static NvmmDataBlock_t ClassBNvmCtxDataBlock;
#endif
#endif

void NvmCtxMgmtEvent( LoRaMacNvmCtxModule_t module )
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	71fb      	strb	r3, [r7, #7]
        {
            break;
        }
    }
#endif
}
 800903a:	bf00      	nop
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore( void )
{
 8009046:	b480      	push	{r7}
 8009048:	af00      	add	r7, sp, #0
    // Resume LoRaMac
    LoRaMacStart( );

    return NVMCTXMGMT_STATUS_SUCCESS;
#else
    return NVMCTXMGMT_STATUS_FAIL;
 800904a:	2301      	movs	r3, #1
#endif
}
 800904c:	4618      	mov	r0, r3
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore( void )
{
 8009056:	b480      	push	{r7}
 8009058:	af00      	add	r7, sp, #0
        LoRaMacMibSetRequestConfirm( &mibReq );
    }

    return status;
#else
    return NVMCTXMGMT_STATUS_FAIL;
 800905a:	2301      	movs	r3, #1
#endif
}
 800905c:	4618      	mov	r0, r3
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
	...

08009068 <FragDecoderInit>:
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
void FragDecoderInit( uint16_t fragNb, uint8_t fragSize, FragDecoderCallbacks_t *callbacks )
#else
void FragDecoderInit( uint16_t fragNb, uint8_t fragSize, uint8_t *file, uint32_t fileSize )
#endif
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	603a      	str	r2, [r7, #0]
 8009072:	80fb      	strh	r3, [r7, #6]
 8009074:	460b      	mov	r3, r1
 8009076:	717b      	strb	r3, [r7, #5]
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
    FragDecoder.Callbacks = callbacks;
 8009078:	4a37      	ldr	r2, [pc, #220]	@ (8009158 <FragDecoderInit+0xf0>)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	6013      	str	r3, [r2, #0]
#else
    FragDecoder.File = file;
    FragDecoder.FileSize = fileSize;
#endif
    FragDecoder.FragNb = fragNb;                                // FragNb = FRAG_MAX_SIZE
 800907e:	4a36      	ldr	r2, [pc, #216]	@ (8009158 <FragDecoderInit+0xf0>)
 8009080:	88fb      	ldrh	r3, [r7, #6]
 8009082:	8093      	strh	r3, [r2, #4]
    FragDecoder.FragSize = fragSize;                            // number of byte on a row
 8009084:	4a34      	ldr	r2, [pc, #208]	@ (8009158 <FragDecoderInit+0xf0>)
 8009086:	797b      	ldrb	r3, [r7, #5]
 8009088:	7193      	strb	r3, [r2, #6]
    FragDecoder.Status.FragNbLastRx = 0;
 800908a:	4b33      	ldr	r3, [pc, #204]	@ (8009158 <FragDecoderInit+0xf0>)
 800908c:	2200      	movs	r2, #0
 800908e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    FragDecoder.Status.FragNbLost = 0;
 8009092:	4b31      	ldr	r3, [pc, #196]	@ (8009158 <FragDecoderInit+0xf0>)
 8009094:	2200      	movs	r2, #0
 8009096:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    FragDecoder.M2BLine = 0;
 800909a:	4b2f      	ldr	r3, [pc, #188]	@ (8009158 <FragDecoderInit+0xf0>)
 800909c:	2200      	movs	r2, #0
 800909e:	609a      	str	r2, [r3, #8]

    // Initialize missing fragments index array
    for( uint16_t i = 0; i < FRAG_MAX_NB; i++ )
 80090a0:	2300      	movs	r3, #0
 80090a2:	83fb      	strh	r3, [r7, #30]
 80090a4:	e009      	b.n	80090ba <FragDecoderInit+0x52>
    {
        FragDecoder.FragNbMissingIndex[i] = 1;
 80090a6:	8bfb      	ldrh	r3, [r7, #30]
 80090a8:	4a2b      	ldr	r2, [pc, #172]	@ (8009158 <FragDecoderInit+0xf0>)
 80090aa:	3308      	adds	r3, #8
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	4413      	add	r3, r2
 80090b0:	2201      	movs	r2, #1
 80090b2:	805a      	strh	r2, [r3, #2]
    for( uint16_t i = 0; i < FRAG_MAX_NB; i++ )
 80090b4:	8bfb      	ldrh	r3, [r7, #30]
 80090b6:	3301      	adds	r3, #1
 80090b8:	83fb      	strh	r3, [r7, #30]
 80090ba:	8bfb      	ldrh	r3, [r7, #30]
 80090bc:	2b14      	cmp	r3, #20
 80090be:	d9f2      	bls.n	80090a6 <FragDecoderInit+0x3e>
    }

    // Initialize parity matrix
    for( uint32_t i = 0; i < ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ); i++ )
 80090c0:	2300      	movs	r3, #0
 80090c2:	61bb      	str	r3, [r7, #24]
 80090c4:	e008      	b.n	80090d8 <FragDecoderInit+0x70>
    {
        FragDecoder.S[i] = 0;
 80090c6:	4a24      	ldr	r2, [pc, #144]	@ (8009158 <FragDecoderInit+0xf0>)
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	4413      	add	r3, r2
 80090cc:	333c      	adds	r3, #60	@ 0x3c
 80090ce:	2200      	movs	r2, #0
 80090d0:	701a      	strb	r2, [r3, #0]
    for( uint32_t i = 0; i < ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ); i++ )
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	3301      	adds	r3, #1
 80090d6:	61bb      	str	r3, [r7, #24]
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d0f3      	beq.n	80090c6 <FragDecoderInit+0x5e>
    }

    for( uint32_t i = 0; i < ( ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ) * FRAG_MAX_REDUNDANCY ); i++ )
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	e008      	b.n	80090f6 <FragDecoderInit+0x8e>
    {
       FragDecoder.MatrixM2B[i] = 0xFF;
 80090e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009158 <FragDecoderInit+0xf0>)
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	4413      	add	r3, r2
 80090ea:	330c      	adds	r3, #12
 80090ec:	22ff      	movs	r2, #255	@ 0xff
 80090ee:	701a      	strb	r2, [r3, #0]
    for( uint32_t i = 0; i < ( ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ) * FRAG_MAX_REDUNDANCY ); i++ )
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	3301      	adds	r3, #1
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	d9f3      	bls.n	80090e4 <FragDecoderInit+0x7c>
    }
    
    // Initialize final uncoded data buffer ( FRAG_MAX_NB * FRAG_MAX_SIZE )
    for( uint32_t i = 0; i < ( fragNb * fragSize ); i++ )
 80090fc:	2300      	movs	r3, #0
 80090fe:	613b      	str	r3, [r7, #16]
 8009100:	e015      	b.n	800912e <FragDecoderInit+0xc6>
    {
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
        if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderWrite != NULL ) )
 8009102:	4b15      	ldr	r3, [pc, #84]	@ (8009158 <FragDecoderInit+0xf0>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00e      	beq.n	8009128 <FragDecoderInit+0xc0>
 800910a:	4b13      	ldr	r3, [pc, #76]	@ (8009158 <FragDecoderInit+0xf0>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d009      	beq.n	8009128 <FragDecoderInit+0xc0>
        {
            FragDecoder.Callbacks->FragDecoderWrite( i, ( uint8_t[] ){ 0xFF }, 1 );
 8009114:	4b10      	ldr	r3, [pc, #64]	@ (8009158 <FragDecoderInit+0xf0>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	22ff      	movs	r2, #255	@ 0xff
 800911c:	733a      	strb	r2, [r7, #12]
 800911e:	f107 010c 	add.w	r1, r7, #12
 8009122:	2201      	movs	r2, #1
 8009124:	6938      	ldr	r0, [r7, #16]
 8009126:	4798      	blx	r3
    for( uint32_t i = 0; i < ( fragNb * fragSize ); i++ )
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	3301      	adds	r3, #1
 800912c:	613b      	str	r3, [r7, #16]
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	797a      	ldrb	r2, [r7, #5]
 8009132:	fb02 f303 	mul.w	r3, r2, r3
 8009136:	461a      	mov	r2, r3
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	4293      	cmp	r3, r2
 800913c:	d3e1      	bcc.n	8009102 <FragDecoderInit+0x9a>
        }
#else
        FragDecoder.File[i] = 0xFF;
#endif
    }
    FragDecoder.Status.FragNbLost = 0;
 800913e:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <FragDecoderInit+0xf0>)
 8009140:	2200      	movs	r2, #0
 8009142:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    FragDecoder.Status.FragNbLastRx = 0;
 8009146:	4b04      	ldr	r3, [pc, #16]	@ (8009158 <FragDecoderInit+0xf0>)
 8009148:	2200      	movs	r2, #0
 800914a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
}
 800914e:	bf00      	nop
 8009150:	3720      	adds	r7, #32
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200012b8 	.word	0x200012b8

0800915c <FragDecoderGetMaxFileSize>:

#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
uint32_t FragDecoderGetMaxFileSize( void )
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
    return FRAG_MAX_NB * FRAG_MAX_SIZE;
 8009160:	f240 431a 	movw	r3, #1050	@ 0x41a
}
 8009164:	4618      	mov	r0, r3
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
	...

08009170 <FragDecoderProcess>:
#endif

int32_t FragDecoderProcess( uint16_t fragCounter, uint8_t *rawData )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b09a      	sub	sp, #104	@ 0x68
 8009174:	af00      	add	r7, sp, #0
 8009176:	4603      	mov	r3, r0
 8009178:	6039      	str	r1, [r7, #0]
 800917a:	80fb      	strh	r3, [r7, #6]
    uint16_t firstOneInRow = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    int32_t first = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	663b      	str	r3, [r7, #96]	@ 0x60
    int32_t noInfo = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint8_t matrixRow[(FRAG_MAX_NB >> 3 ) + 1];
    uint8_t matrixDataTemp[FRAG_MAX_SIZE];
    uint8_t dataTempVector[( FRAG_MAX_REDUNDANCY >> 3 ) + 1];
    uint8_t dataTempVector2[( FRAG_MAX_REDUNDANCY >> 3 ) + 1];

    memset1( matrixRow, 0, ( FRAG_MAX_NB >> 3 ) + 1 );
 800918a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800918e:	2203      	movs	r2, #3
 8009190:	2100      	movs	r1, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f00f f8f4 	bl	8018380 <memset1>
    memset1( matrixDataTemp, 0, FRAG_MAX_SIZE );
 8009198:	f107 0310 	add.w	r3, r7, #16
 800919c:	2232      	movs	r2, #50	@ 0x32
 800919e:	2100      	movs	r1, #0
 80091a0:	4618      	mov	r0, r3
 80091a2:	f00f f8ed 	bl	8018380 <memset1>
    memset1( dataTempVector, 0, ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 );
 80091a6:	f107 030c 	add.w	r3, r7, #12
 80091aa:	2201      	movs	r2, #1
 80091ac:	2100      	movs	r1, #0
 80091ae:	4618      	mov	r0, r3
 80091b0:	f00f f8e6 	bl	8018380 <memset1>
    memset1( dataTempVector2, 0, ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 );
 80091b4:	f107 0308 	add.w	r3, r7, #8
 80091b8:	2201      	movs	r2, #1
 80091ba:	2100      	movs	r1, #0
 80091bc:	4618      	mov	r0, r3
 80091be:	f00f f8df 	bl	8018380 <memset1>

    FragDecoder.Status.FragNbRx = fragCounter;
 80091c2:	4aa9      	ldr	r2, [pc, #676]	@ (8009468 <FragDecoderProcess+0x2f8>)
 80091c4:	88fb      	ldrh	r3, [r7, #6]
 80091c6:	87d3      	strh	r3, [r2, #62]	@ 0x3e

    if( fragCounter < FragDecoder.Status.FragNbLastRx )
 80091c8:	4ba7      	ldr	r3, [pc, #668]	@ (8009468 <FragDecoderProcess+0x2f8>)
 80091ca:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80091ce:	88fa      	ldrh	r2, [r7, #6]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d202      	bcs.n	80091da <FragDecoderProcess+0x6a>
    {
        return FRAG_SESSION_ONGOING;  // Drop frame out of order
 80091d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091d8:	e1ad      	b.n	8009536 <FragDecoderProcess+0x3c6>
    }

    // The M (FragNb) first packets aren't encoded or in other words they are
    // encoded with the unitary matrix
    if( fragCounter < ( FragDecoder.FragNb + 1 ) )
 80091da:	4ba3      	ldr	r3, [pc, #652]	@ (8009468 <FragDecoderProcess+0x2f8>)
 80091dc:	889b      	ldrh	r3, [r3, #4]
 80091de:	88fa      	ldrh	r2, [r7, #6]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d815      	bhi.n	8009210 <FragDecoderProcess+0xa0>
    {
        // The M first frame are not encoded store them
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
        SetRow( rawData, fragCounter - 1, FragDecoder.FragSize );
 80091e4:	88fb      	ldrh	r3, [r7, #6]
 80091e6:	3b01      	subs	r3, #1
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	4a9f      	ldr	r2, [pc, #636]	@ (8009468 <FragDecoderProcess+0x2f8>)
 80091ec:	7992      	ldrb	r2, [r2, #6]
 80091ee:	4619      	mov	r1, r3
 80091f0:	6838      	ldr	r0, [r7, #0]
 80091f2:	f000 f9bb 	bl	800956c <SetRow>
#else
        SetRow( FragDecoder.File, rawData, fragCounter - 1, FragDecoder.FragSize );
#endif

        FragDecoder.FragNbMissingIndex[fragCounter - 1] = 0;
 80091f6:	88fb      	ldrh	r3, [r7, #6]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	4a9b      	ldr	r2, [pc, #620]	@ (8009468 <FragDecoderProcess+0x2f8>)
 80091fc:	3308      	adds	r3, #8
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	4413      	add	r3, r2
 8009202:	2200      	movs	r2, #0
 8009204:	805a      	strh	r2, [r3, #2]

        // Update the FragDecoder.FragNbMissingIndex with the loosing frame
        FragFindMissingFrags( fragCounter );
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	4618      	mov	r0, r3
 800920a:	f000 fb73 	bl	80098f4 <FragFindMissingFrags>
 800920e:	e190      	b.n	8009532 <FragDecoderProcess+0x3c2>
    }
    else
    {
        if( FragDecoder.Status.FragNbLost > FRAG_MAX_REDUNDANCY )
 8009210:	4b95      	ldr	r3, [pc, #596]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009212:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009216:	2b05      	cmp	r3, #5
 8009218:	d905      	bls.n	8009226 <FragDecoderProcess+0xb6>
        {
           FragDecoder.Status.MatrixError = 1;
 800921a:	4b93      	ldr	r3, [pc, #588]	@ (8009468 <FragDecoderProcess+0x2f8>)
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
           return FRAG_SESSION_FINISHED;
 8009222:	2300      	movs	r3, #0
 8009224:	e187      	b.n	8009536 <FragDecoderProcess+0x3c6>
        }
        // At this point we receive encoded frames and the number of loosing frames
        // is well known: FragDecoder.FragNbLost - 1;

        // In case of the end of true data is missing
        FragFindMissingFrags( fragCounter );
 8009226:	88fb      	ldrh	r3, [r7, #6]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fb63 	bl	80098f4 <FragFindMissingFrags>

        if( FragDecoder.Status.FragNbLost == 0 )
 800922e:	4b8e      	ldr	r3, [pc, #568]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009230:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009234:	2b00      	cmp	r3, #0
 8009236:	d103      	bne.n	8009240 <FragDecoderProcess+0xd0>
        { 
            // the case : all the M(FragNb) first rows have been transmitted with no error
            return FragDecoder.Status.FragNbLost;
 8009238:	4b8b      	ldr	r3, [pc, #556]	@ (8009468 <FragDecoderProcess+0x2f8>)
 800923a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800923e:	e17a      	b.n	8009536 <FragDecoderProcess+0x3c6>
        }

        // fragCounter - FragDecoder.FragNb
        FragGetParityMatrixRow( fragCounter - FragDecoder.FragNb, FragDecoder.FragNb, matrixRow );
 8009240:	88fb      	ldrh	r3, [r7, #6]
 8009242:	4a89      	ldr	r2, [pc, #548]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009244:	8892      	ldrh	r2, [r2, #4]
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	4a87      	ldr	r2, [pc, #540]	@ (8009468 <FragDecoderProcess+0x2f8>)
 800924a:	8892      	ldrh	r2, [r2, #4]
 800924c:	4611      	mov	r1, r2
 800924e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fab7 	bl	80097c6 <FragGetParityMatrixRow>

        for( int32_t i = 0; i < FragDecoder.FragNb; i++ )
 8009258:	2300      	movs	r3, #0
 800925a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800925c:	e045      	b.n	80092ea <FragDecoderProcess+0x17a>
        {
            if( GetParity( i , matrixRow ) == 1 )
 800925e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8009266:	4611      	mov	r1, r2
 8009268:	4618      	mov	r0, r3
 800926a:	f000 f9c3 	bl	80095f4 <GetParity>
 800926e:	4603      	mov	r3, r0
 8009270:	2b01      	cmp	r3, #1
 8009272:	d137      	bne.n	80092e4 <FragDecoderProcess+0x174>
            {
                if( FragDecoder.FragNbMissingIndex[i] == 0 )
 8009274:	4a7c      	ldr	r2, [pc, #496]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009276:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009278:	3308      	adds	r3, #8
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	4413      	add	r3, r2
 800927e:	885b      	ldrh	r3, [r3, #2]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d11b      	bne.n	80092bc <FragDecoderProcess+0x14c>
                {
                    // XOR with already receive frag
                    SetParity( i, matrixRow, 0 );
 8009284:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009286:	b2db      	uxtb	r3, r3
 8009288:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800928c:	2200      	movs	r2, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f000 f9d0 	bl	8009634 <SetParity>
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
                    GetRow( matrixDataTemp, i, FragDecoder.FragSize );
 8009294:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009296:	b299      	uxth	r1, r3
 8009298:	4b73      	ldr	r3, [pc, #460]	@ (8009468 <FragDecoderProcess+0x2f8>)
 800929a:	799b      	ldrb	r3, [r3, #6]
 800929c:	461a      	mov	r2, r3
 800929e:	f107 0310 	add.w	r3, r7, #16
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 f984 	bl	80095b0 <GetRow>
#else
                    GetRow( matrixDataTemp, FragDecoder.File, i, FragDecoder.FragSize );
#endif
                    XorDataLine( rawData, matrixDataTemp, FragDecoder.FragSize );
 80092a8:	4b6f      	ldr	r3, [pc, #444]	@ (8009468 <FragDecoderProcess+0x2f8>)
 80092aa:	799b      	ldrb	r3, [r3, #6]
 80092ac:	461a      	mov	r2, r3
 80092ae:	f107 0310 	add.w	r3, r7, #16
 80092b2:	4619      	mov	r1, r3
 80092b4:	6838      	ldr	r0, [r7, #0]
 80092b6:	f000 fa1a 	bl	80096ee <XorDataLine>
 80092ba:	e013      	b.n	80092e4 <FragDecoderProcess+0x174>
                }
                else
                {
                    // Fill the "little" boolean matrix m2b
                    SetParity( FragDecoder.FragNbMissingIndex[i] - 1, dataTempVector, 1 );
 80092bc:	4a6a      	ldr	r2, [pc, #424]	@ (8009468 <FragDecoderProcess+0x2f8>)
 80092be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092c0:	3308      	adds	r3, #8
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	4413      	add	r3, r2
 80092c6:	885b      	ldrh	r3, [r3, #2]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f107 010c 	add.w	r1, r7, #12
 80092d2:	2201      	movs	r2, #1
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 f9ad 	bl	8009634 <SetParity>
                    if( first == 0 )
 80092da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <FragDecoderProcess+0x174>
                    {
                        first = 1;
 80092e0:	2301      	movs	r3, #1
 80092e2:	663b      	str	r3, [r7, #96]	@ 0x60
        for( int32_t i = 0; i < FragDecoder.FragNb; i++ )
 80092e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092e6:	3301      	adds	r3, #1
 80092e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092ea:	4b5f      	ldr	r3, [pc, #380]	@ (8009468 <FragDecoderProcess+0x2f8>)
 80092ec:	889b      	ldrh	r3, [r3, #4]
 80092ee:	461a      	mov	r2, r3
 80092f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092f2:	4293      	cmp	r3, r2
 80092f4:	dbb3      	blt.n	800925e <FragDecoderProcess+0xee>
                    }
                }
            }
        }

        firstOneInRow = BitArrayFindFirstOne( dataTempVector, FragDecoder.Status.FragNbLost );
 80092f6:	4b5c      	ldr	r3, [pc, #368]	@ (8009468 <FragDecoderProcess+0x2f8>)
 80092f8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80092fc:	f107 030c 	add.w	r3, r7, #12
 8009300:	4611      	mov	r1, r2
 8009302:	4618      	mov	r0, r3
 8009304:	f000 fab5 	bl	8009872 <BitArrayFindFirstOne>
 8009308:	4603      	mov	r3, r0
 800930a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

        if( first > 0 )
 800930e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009310:	2b00      	cmp	r3, #0
 8009312:	f340 810e 	ble.w	8009532 <FragDecoderProcess+0x3c2>
        {
            int32_t li;
            int32_t lj;

            // Manage a new line in MatrixM2B
            while( GetParity( firstOneInRow, FragDecoder.S ) == 1 )
 8009316:	e049      	b.n	80093ac <FragDecoderProcess+0x23c>
            { 
                // Row already diagonalized exist & ( FragDecoder.MatrixM2B[firstOneInRow][0] )
                FragExtractLineFromBinaryMatrix( dataTempVector2, firstOneInRow, FragDecoder.Status.FragNbLost );
 8009318:	4b53      	ldr	r3, [pc, #332]	@ (8009468 <FragDecoderProcess+0x2f8>)
 800931a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800931e:	f8b7 1066 	ldrh.w	r1, [r7, #102]	@ 0x66
 8009322:	f107 0308 	add.w	r3, r7, #8
 8009326:	4618      	mov	r0, r3
 8009328:	f000 fb4e 	bl	80099c8 <FragExtractLineFromBinaryMatrix>
                XorParityLine( dataTempVector, dataTempVector2, FragDecoder.Status.FragNbLost );
 800932c:	4b4e      	ldr	r3, [pc, #312]	@ (8009468 <FragDecoderProcess+0x2f8>)
 800932e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009332:	461a      	mov	r2, r3
 8009334:	f107 0108 	add.w	r1, r7, #8
 8009338:	f107 030c 	add.w	r3, r7, #12
 800933c:	4618      	mov	r0, r3
 800933e:	f000 f9fb 	bl	8009738 <XorParityLine>
                // Have to store it in the mi th position of the missing frag
                li = FragFindMissingIndex( firstOneInRow );
 8009342:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fb18 	bl	800997c <FragFindMissingIndex>
 800934c:	4603      	mov	r3, r0
 800934e:	64fb      	str	r3, [r7, #76]	@ 0x4c
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
                GetRow( matrixDataTemp, li, FragDecoder.FragSize );
 8009350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009352:	b299      	uxth	r1, r3
 8009354:	4b44      	ldr	r3, [pc, #272]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009356:	799b      	ldrb	r3, [r3, #6]
 8009358:	461a      	mov	r2, r3
 800935a:	f107 0310 	add.w	r3, r7, #16
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f926 	bl	80095b0 <GetRow>
#else
                GetRow( matrixDataTemp, FragDecoder.File, li, FragDecoder.FragSize );
#endif
                XorDataLine( rawData, matrixDataTemp, FragDecoder.FragSize );
 8009364:	4b40      	ldr	r3, [pc, #256]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009366:	799b      	ldrb	r3, [r3, #6]
 8009368:	461a      	mov	r2, r3
 800936a:	f107 0310 	add.w	r3, r7, #16
 800936e:	4619      	mov	r1, r3
 8009370:	6838      	ldr	r0, [r7, #0]
 8009372:	f000 f9bc 	bl	80096ee <XorDataLine>
                if( BitArrayIsAllZeros( dataTempVector, FragDecoder.Status.FragNbLost ) )
 8009376:	4b3c      	ldr	r3, [pc, #240]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009378:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800937c:	f107 030c 	add.w	r3, r7, #12
 8009380:	4611      	mov	r1, r2
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fa95 	bl	80098b2 <BitArrayIsAllZeros>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <FragDecoderProcess+0x224>
                {
                    noInfo = 1;
 800938e:	2301      	movs	r3, #1
 8009390:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    break;
 8009392:	e015      	b.n	80093c0 <FragDecoderProcess+0x250>
                }
                firstOneInRow = BitArrayFindFirstOne( dataTempVector, FragDecoder.Status.FragNbLost );
 8009394:	4b34      	ldr	r3, [pc, #208]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009396:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800939a:	f107 030c 	add.w	r3, r7, #12
 800939e:	4611      	mov	r1, r2
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 fa66 	bl	8009872 <BitArrayFindFirstOne>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
            while( GetParity( firstOneInRow, FragDecoder.S ) == 1 )
 80093ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	492e      	ldr	r1, [pc, #184]	@ (800946c <FragDecoderProcess+0x2fc>)
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 f91d 	bl	80095f4 <GetParity>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d0ab      	beq.n	8009318 <FragDecoderProcess+0x1a8>
            }

            if( noInfo == 0 )
 80093c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d125      	bne.n	8009412 <FragDecoderProcess+0x2a2>
            {
                FragPushLineToBinaryMatrix( dataTempVector, firstOneInRow, FragDecoder.Status.FragNbLost );
 80093c6:	4b28      	ldr	r3, [pc, #160]	@ (8009468 <FragDecoderProcess+0x2f8>)
 80093c8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80093cc:	f8b7 1066 	ldrh.w	r1, [r7, #102]	@ 0x66
 80093d0:	f107 030c 	add.w	r3, r7, #12
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 fb6b 	bl	8009ab0 <FragPushLineToBinaryMatrix>
                li = FragFindMissingIndex( firstOneInRow );
 80093da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 facc 	bl	800997c <FragFindMissingIndex>
 80093e4:	4603      	mov	r3, r0
 80093e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
                SetRow( rawData, li, FragDecoder.FragSize );
 80093e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	4a1e      	ldr	r2, [pc, #120]	@ (8009468 <FragDecoderProcess+0x2f8>)
 80093ee:	7992      	ldrb	r2, [r2, #6]
 80093f0:	4619      	mov	r1, r3
 80093f2:	6838      	ldr	r0, [r7, #0]
 80093f4:	f000 f8ba 	bl	800956c <SetRow>
#else
                SetRow( FragDecoder.File, rawData, li, FragDecoder.FragSize );
#endif
                SetParity( firstOneInRow, FragDecoder.S, 1 );
 80093f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2201      	movs	r2, #1
 8009400:	491a      	ldr	r1, [pc, #104]	@ (800946c <FragDecoderProcess+0x2fc>)
 8009402:	4618      	mov	r0, r3
 8009404:	f000 f916 	bl	8009634 <SetParity>
                FragDecoder.M2BLine++;
 8009408:	4b17      	ldr	r3, [pc, #92]	@ (8009468 <FragDecoderProcess+0x2f8>)
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	3301      	adds	r3, #1
 800940e:	4a16      	ldr	r2, [pc, #88]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009410:	6093      	str	r3, [r2, #8]
            }

            if( FragDecoder.M2BLine == FragDecoder.Status.FragNbLost )
 8009412:	4b15      	ldr	r3, [pc, #84]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	4a14      	ldr	r2, [pc, #80]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009418:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 800941c:	4293      	cmp	r3, r2
 800941e:	f040 8088 	bne.w	8009532 <FragDecoderProcess+0x3c2>
            { 
                // Then last step diagonalized
                if( FragDecoder.Status.FragNbLost > 1 )
 8009422:	4b11      	ldr	r3, [pc, #68]	@ (8009468 <FragDecoderProcess+0x2f8>)
 8009424:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009428:	2b01      	cmp	r3, #1
 800942a:	d97e      	bls.n	800952a <FragDecoderProcess+0x3ba>
                {
                    int32_t i, j;

                    for( i = ( FragDecoder.Status.FragNbLost - 2 ); i >= 0 ; i-- )
 800942c:	4b0e      	ldr	r3, [pc, #56]	@ (8009468 <FragDecoderProcess+0x2f8>)
 800942e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009432:	3b02      	subs	r3, #2
 8009434:	657b      	str	r3, [r7, #84]	@ 0x54
 8009436:	e071      	b.n	800951c <FragDecoderProcess+0x3ac>
                    {
                        li = FragFindMissingIndex( i );
 8009438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800943a:	b29b      	uxth	r3, r3
 800943c:	4618      	mov	r0, r3
 800943e:	f000 fa9d 	bl	800997c <FragFindMissingIndex>
 8009442:	4603      	mov	r3, r0
 8009444:	64fb      	str	r3, [r7, #76]	@ 0x4c
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
                        GetRow( matrixDataTemp, li, FragDecoder.FragSize );
 8009446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009448:	b299      	uxth	r1, r3
 800944a:	4b07      	ldr	r3, [pc, #28]	@ (8009468 <FragDecoderProcess+0x2f8>)
 800944c:	799b      	ldrb	r3, [r3, #6]
 800944e:	461a      	mov	r2, r3
 8009450:	f107 0310 	add.w	r3, r7, #16
 8009454:	4618      	mov	r0, r3
 8009456:	f000 f8ab 	bl	80095b0 <GetRow>
#else
                        GetRow( matrixDataTemp, FragDecoder.File, li, FragDecoder.FragSize );
#endif
                        for( j = ( FragDecoder.Status.FragNbLost - 1 ); j > i; j--)
 800945a:	4b03      	ldr	r3, [pc, #12]	@ (8009468 <FragDecoderProcess+0x2f8>)
 800945c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009460:	3b01      	subs	r3, #1
 8009462:	653b      	str	r3, [r7, #80]	@ 0x50
 8009464:	e049      	b.n	80094fa <FragDecoderProcess+0x38a>
 8009466:	bf00      	nop
 8009468:	200012b8 	.word	0x200012b8
 800946c:	200012f4 	.word	0x200012f4
                        {
                            FragExtractLineFromBinaryMatrix( dataTempVector2, i, FragDecoder.Status.FragNbLost );
 8009470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009472:	b299      	uxth	r1, r3
 8009474:	4b32      	ldr	r3, [pc, #200]	@ (8009540 <FragDecoderProcess+0x3d0>)
 8009476:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800947a:	f107 0308 	add.w	r3, r7, #8
 800947e:	4618      	mov	r0, r3
 8009480:	f000 faa2 	bl	80099c8 <FragExtractLineFromBinaryMatrix>
                            FragExtractLineFromBinaryMatrix( dataTempVector, j, FragDecoder.Status.FragNbLost );
 8009484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009486:	b299      	uxth	r1, r3
 8009488:	4b2d      	ldr	r3, [pc, #180]	@ (8009540 <FragDecoderProcess+0x3d0>)
 800948a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800948e:	f107 030c 	add.w	r3, r7, #12
 8009492:	4618      	mov	r0, r3
 8009494:	f000 fa98 	bl	80099c8 <FragExtractLineFromBinaryMatrix>
                            if( GetParity( j, dataTempVector2 ) == 1 )
 8009498:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800949a:	b2db      	uxtb	r3, r3
 800949c:	f107 0208 	add.w	r2, r7, #8
 80094a0:	4611      	mov	r1, r2
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 f8a6 	bl	80095f4 <GetParity>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d122      	bne.n	80094f4 <FragDecoderProcess+0x384>
                            {
                                XorParityLine( dataTempVector2, dataTempVector, FragDecoder.Status.FragNbLost );
 80094ae:	4b24      	ldr	r3, [pc, #144]	@ (8009540 <FragDecoderProcess+0x3d0>)
 80094b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80094b4:	461a      	mov	r2, r3
 80094b6:	f107 010c 	add.w	r1, r7, #12
 80094ba:	f107 0308 	add.w	r3, r7, #8
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 f93a 	bl	8009738 <XorParityLine>

                                lj = FragFindMissingIndex( j );
 80094c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fa57 	bl	800997c <FragFindMissingIndex>
 80094ce:	4603      	mov	r3, r0
 80094d0:	64bb      	str	r3, [r7, #72]	@ 0x48

#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
                                GetRow( rawData, lj, FragDecoder.FragSize );
 80094d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009540 <FragDecoderProcess+0x3d0>)
 80094d8:	7992      	ldrb	r2, [r2, #6]
 80094da:	4619      	mov	r1, r3
 80094dc:	6838      	ldr	r0, [r7, #0]
 80094de:	f000 f867 	bl	80095b0 <GetRow>
#else
                                GetRow( rawData, FragDecoder.File, lj, FragDecoder.FragSize );
#endif
                                XorDataLine( matrixDataTemp , rawData , FragDecoder.FragSize );
 80094e2:	4b17      	ldr	r3, [pc, #92]	@ (8009540 <FragDecoderProcess+0x3d0>)
 80094e4:	799b      	ldrb	r3, [r3, #6]
 80094e6:	461a      	mov	r2, r3
 80094e8:	f107 0310 	add.w	r3, r7, #16
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 f8fd 	bl	80096ee <XorDataLine>
                        for( j = ( FragDecoder.Status.FragNbLost - 1 ); j > i; j--)
 80094f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094f6:	3b01      	subs	r3, #1
 80094f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80094fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80094fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094fe:	429a      	cmp	r2, r3
 8009500:	dcb6      	bgt.n	8009470 <FragDecoderProcess+0x300>
                            }
                        }
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
                        SetRow( matrixDataTemp, li, FragDecoder.FragSize );
 8009502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009504:	b299      	uxth	r1, r3
 8009506:	4b0e      	ldr	r3, [pc, #56]	@ (8009540 <FragDecoderProcess+0x3d0>)
 8009508:	799b      	ldrb	r3, [r3, #6]
 800950a:	461a      	mov	r2, r3
 800950c:	f107 0310 	add.w	r3, r7, #16
 8009510:	4618      	mov	r0, r3
 8009512:	f000 f82b 	bl	800956c <SetRow>
                    for( i = ( FragDecoder.Status.FragNbLost - 2 ); i >= 0 ; i-- )
 8009516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009518:	3b01      	subs	r3, #1
 800951a:	657b      	str	r3, [r7, #84]	@ 0x54
 800951c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800951e:	2b00      	cmp	r3, #0
 8009520:	da8a      	bge.n	8009438 <FragDecoderProcess+0x2c8>
#else
                        SetRow( FragDecoder.File, matrixDataTemp, li, FragDecoder.FragSize );
#endif
                    }
                    return FragDecoder.Status.FragNbLost;
 8009522:	4b07      	ldr	r3, [pc, #28]	@ (8009540 <FragDecoderProcess+0x3d0>)
 8009524:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009528:	e005      	b.n	8009536 <FragDecoderProcess+0x3c6>
                }
                else
                { 
                    //If not ( FragDecoder.FragNbLost > 1 )
                    return FragDecoder.Status.FragNbLost;
 800952a:	4b05      	ldr	r3, [pc, #20]	@ (8009540 <FragDecoderProcess+0x3d0>)
 800952c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009530:	e001      	b.n	8009536 <FragDecoderProcess+0x3c6>
                }
            }
        }
    }
    return FRAG_SESSION_ONGOING;
 8009532:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8009536:	4618      	mov	r0, r3
 8009538:	3768      	adds	r7, #104	@ 0x68
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	200012b8 	.word	0x200012b8

08009544 <FragDecoderGetStatus>:

FragDecoderStatus_t FragDecoderGetStatus( void )
{ 
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
    return FragDecoder.Status;
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	4b06      	ldr	r3, [pc, #24]	@ (8009568 <FragDecoderGetStatus+0x24>)
 8009550:	333e      	adds	r3, #62	@ 0x3e
 8009552:	6819      	ldr	r1, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	6011      	str	r1, [r2, #0]
 8009558:	6053      	str	r3, [r2, #4]
}
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	200012b8 	.word	0x200012b8

0800956c <SetRow>:
 *=============================================================================
 */

#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
static void SetRow( uint8_t *src, uint16_t row, uint16_t size )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	807b      	strh	r3, [r7, #2]
 8009578:	4613      	mov	r3, r2
 800957a:	803b      	strh	r3, [r7, #0]
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderWrite != NULL ) )
 800957c:	4b0b      	ldr	r3, [pc, #44]	@ (80095ac <SetRow+0x40>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00f      	beq.n	80095a4 <SetRow+0x38>
 8009584:	4b09      	ldr	r3, [pc, #36]	@ (80095ac <SetRow+0x40>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00a      	beq.n	80095a4 <SetRow+0x38>
    {
        FragDecoder.Callbacks->FragDecoderWrite( row * size, src, size );
 800958e:	4b07      	ldr	r3, [pc, #28]	@ (80095ac <SetRow+0x40>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	887a      	ldrh	r2, [r7, #2]
 8009596:	8839      	ldrh	r1, [r7, #0]
 8009598:	fb01 f202 	mul.w	r2, r1, r2
 800959c:	4610      	mov	r0, r2
 800959e:	883a      	ldrh	r2, [r7, #0]
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	4798      	blx	r3
    }
}
 80095a4:	bf00      	nop
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	200012b8 	.word	0x200012b8

080095b0 <GetRow>:

static void GetRow( uint8_t *dst, uint16_t row, uint16_t size )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	807b      	strh	r3, [r7, #2]
 80095bc:	4613      	mov	r3, r2
 80095be:	803b      	strh	r3, [r7, #0]
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderRead != NULL ) )
 80095c0:	4b0b      	ldr	r3, [pc, #44]	@ (80095f0 <GetRow+0x40>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00f      	beq.n	80095e8 <GetRow+0x38>
 80095c8:	4b09      	ldr	r3, [pc, #36]	@ (80095f0 <GetRow+0x40>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00a      	beq.n	80095e8 <GetRow+0x38>
    {
        FragDecoder.Callbacks->FragDecoderRead( row * size, dst, size );
 80095d2:	4b07      	ldr	r3, [pc, #28]	@ (80095f0 <GetRow+0x40>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	887a      	ldrh	r2, [r7, #2]
 80095da:	8839      	ldrh	r1, [r7, #0]
 80095dc:	fb01 f202 	mul.w	r2, r1, r2
 80095e0:	4610      	mov	r0, r2
 80095e2:	883a      	ldrh	r2, [r7, #0]
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	4798      	blx	r3
    }
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	200012b8 	.word	0x200012b8

080095f4 <GetParity>:
    memcpy1( dst, &src[row * size], size );
}
#endif

static uint8_t GetParity( uint8_t index, uint8_t *matrixRow  )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	6039      	str	r1, [r7, #0]
 80095fe:	71fb      	strb	r3, [r7, #7]
    uint8_t parity;
    parity = matrixRow[index >> 3];
 8009600:	79fb      	ldrb	r3, [r7, #7]
 8009602:	08db      	lsrs	r3, r3, #3
 8009604:	b2db      	uxtb	r3, r3
 8009606:	461a      	mov	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	4413      	add	r3, r2
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	73fb      	strb	r3, [r7, #15]
    parity = ( parity >> ( 7 - ( index % 8 ) ) ) & 0x01;
 8009610:	7bfa      	ldrb	r2, [r7, #15]
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	43db      	mvns	r3, r3
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	fa42 f303 	asr.w	r3, r2, r3
 800961e:	b2db      	uxtb	r3, r3
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	73fb      	strb	r3, [r7, #15]
    return parity;
 8009626:	7bfb      	ldrb	r3, [r7, #15]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <SetParity>:

static void SetParity( uint8_t index, uint8_t *matrixRow, uint8_t parity )
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	6039      	str	r1, [r7, #0]
 800963e:	71fb      	strb	r3, [r7, #7]
 8009640:	4613      	mov	r3, r2
 8009642:	71bb      	strb	r3, [r7, #6]
    uint8_t mask = 0xFF - ( 1 << ( 7 - ( index % 8 ) ) );
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	43db      	mvns	r3, r3
 8009648:	f003 0307 	and.w	r3, r3, #7
 800964c:	2201      	movs	r2, #1
 800964e:	fa02 f303 	lsl.w	r3, r2, r3
 8009652:	b2db      	uxtb	r3, r3
 8009654:	43db      	mvns	r3, r3
 8009656:	73fb      	strb	r3, [r7, #15]
    parity = parity << ( 7 - ( index % 8 ) );
 8009658:	79ba      	ldrb	r2, [r7, #6]
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	43db      	mvns	r3, r3
 800965e:	f003 0307 	and.w	r3, r3, #7
 8009662:	fa02 f303 	lsl.w	r3, r2, r3
 8009666:	71bb      	strb	r3, [r7, #6]
    matrixRow[index >> 3] = ( matrixRow[index >> 3] & mask ) + parity;
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	08db      	lsrs	r3, r3, #3
 800966c:	b2db      	uxtb	r3, r3
 800966e:	461a      	mov	r2, r3
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	4413      	add	r3, r2
 8009674:	781a      	ldrb	r2, [r3, #0]
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	4013      	ands	r3, r2
 800967a:	b2d9      	uxtb	r1, r3
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	08db      	lsrs	r3, r3, #3
 8009680:	b2db      	uxtb	r3, r3
 8009682:	461a      	mov	r2, r3
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	4413      	add	r3, r2
 8009688:	79ba      	ldrb	r2, [r7, #6]
 800968a:	440a      	add	r2, r1
 800968c:	b2d2      	uxtb	r2, r2
 800968e:	701a      	strb	r2, [r3, #0]
}
 8009690:	bf00      	nop
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <IsPowerOfTwo>:

static bool IsPowerOfTwo( uint32_t x )
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
    uint8_t sumBit = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	73fb      	strb	r3, [r7, #15]

    for( uint8_t i = 0; i < 32; i++ )
 80096a8:	2300      	movs	r3, #0
 80096aa:	73bb      	strb	r3, [r7, #14]
 80096ac:	e010      	b.n	80096d0 <IsPowerOfTwo+0x34>
    {
        sumBit += ( x & ( 1 << i ) ) >> i;
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	2201      	movs	r2, #1
 80096b2:	fa02 f303 	lsl.w	r3, r2, r3
 80096b6:	461a      	mov	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	401a      	ands	r2, r3
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	fa22 f303 	lsr.w	r3, r2, r3
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	4413      	add	r3, r2
 80096c8:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = 0; i < 32; i++ )
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	3301      	adds	r3, #1
 80096ce:	73bb      	strb	r3, [r7, #14]
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	2b1f      	cmp	r3, #31
 80096d4:	d9eb      	bls.n	80096ae <IsPowerOfTwo+0x12>
    }
    if( sumBit == 1 )
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <IsPowerOfTwo+0x44>
    {
        return true;
 80096dc:	2301      	movs	r3, #1
 80096de:	e000      	b.n	80096e2 <IsPowerOfTwo+0x46>
    }
    return false;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <XorDataLine>:

static void XorDataLine( uint8_t *line1, uint8_t *line2, int32_t size )
{
 80096ee:	b480      	push	{r7}
 80096f0:	b087      	sub	sp, #28
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	607a      	str	r2, [r7, #4]
    for( int32_t i = 0; i < size; i++ )
 80096fa:	2300      	movs	r3, #0
 80096fc:	617b      	str	r3, [r7, #20]
 80096fe:	e010      	b.n	8009722 <XorDataLine+0x34>
    {
        line1[i] = line1[i] ^ line2[i];
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4413      	add	r3, r2
 8009706:	7819      	ldrb	r1, [r3, #0]
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	4413      	add	r3, r2
 800970e:	781a      	ldrb	r2, [r3, #0]
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	4403      	add	r3, r0
 8009716:	404a      	eors	r2, r1
 8009718:	b2d2      	uxtb	r2, r2
 800971a:	701a      	strb	r2, [r3, #0]
    for( int32_t i = 0; i < size; i++ )
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	3301      	adds	r3, #1
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	429a      	cmp	r2, r3
 8009728:	dbea      	blt.n	8009700 <XorDataLine+0x12>
    }
}
 800972a:	bf00      	nop
 800972c:	bf00      	nop
 800972e:	371c      	adds	r7, #28
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <XorParityLine>:

static void XorParityLine( uint8_t* line1, uint8_t* line2, int32_t size )
{
 8009738:	b5b0      	push	{r4, r5, r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
    for( int32_t i = 0; i < size; i++ )
 8009744:	2300      	movs	r3, #0
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	e01a      	b.n	8009780 <XorParityLine+0x48>
    {
        SetParity( i, line1, ( GetParity( i, line1 ) ^ GetParity( i, line2 ) ) );
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	b2dc      	uxtb	r4, r3
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	b2db      	uxtb	r3, r3
 8009752:	68f9      	ldr	r1, [r7, #12]
 8009754:	4618      	mov	r0, r3
 8009756:	f7ff ff4d 	bl	80095f4 <GetParity>
 800975a:	4603      	mov	r3, r0
 800975c:	461d      	mov	r5, r3
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	4618      	mov	r0, r3
 8009766:	f7ff ff45 	bl	80095f4 <GetParity>
 800976a:	4603      	mov	r3, r0
 800976c:	406b      	eors	r3, r5
 800976e:	b2db      	uxtb	r3, r3
 8009770:	461a      	mov	r2, r3
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	4620      	mov	r0, r4
 8009776:	f7ff ff5d 	bl	8009634 <SetParity>
    for( int32_t i = 0; i < size; i++ )
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	3301      	adds	r3, #1
 800977e:	617b      	str	r3, [r7, #20]
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	dbe0      	blt.n	800974a <XorParityLine+0x12>
    }
}
 8009788:	bf00      	nop
 800978a:	bf00      	nop
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bdb0      	pop	{r4, r5, r7, pc}

08009792 <FragPrbs23>:

static int32_t FragPrbs23( int32_t value )
{
 8009792:	b480      	push	{r7}
 8009794:	b085      	sub	sp, #20
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
    int32_t b0 = value & 0x01;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	60fb      	str	r3, [r7, #12]
    int32_t b1 = ( value & 0x20 ) >> 5;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	115b      	asrs	r3, r3, #5
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	60bb      	str	r3, [r7, #8]
    return ( value >> 1 ) + ( ( b0 ^ b1 ) << 22 );;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	105a      	asrs	r2, r3, #1
 80097b0:	68f9      	ldr	r1, [r7, #12]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	404b      	eors	r3, r1
 80097b6:	059b      	lsls	r3, r3, #22
 80097b8:	4413      	add	r3, r2
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <FragGetParityMatrixRow>:

static void FragGetParityMatrixRow( int32_t n, int32_t m, uint8_t *matrixRow )
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b08a      	sub	sp, #40	@ 0x28
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	60f8      	str	r0, [r7, #12]
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	607a      	str	r2, [r7, #4]
    int32_t mTemp;
    int32_t x;
    int32_t nbCoeff = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	61fb      	str	r3, [r7, #28]
    int32_t r;

    if( IsPowerOfTwo( m ) != false )
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff ff5f 	bl	800969c <IsPowerOfTwo>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <FragGetParityMatrixRow+0x24>
    {
        mTemp = 1;
 80097e4:	2301      	movs	r3, #1
 80097e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80097e8:	e001      	b.n	80097ee <FragGetParityMatrixRow+0x28>
    }
    else 
    {
        mTemp = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    x = 1 + ( 1001 * n );
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80097f4:	fb02 f303 	mul.w	r3, r2, r3
 80097f8:	3301      	adds	r3, #1
 80097fa:	623b      	str	r3, [r7, #32]
    for( uint8_t i = 0; i < ( ( m >> 3 ) + 1 ); i++ )
 80097fc:	2300      	movs	r3, #0
 80097fe:	75fb      	strb	r3, [r7, #23]
 8009800:	e007      	b.n	8009812 <FragGetParityMatrixRow+0x4c>
    {
        matrixRow[i] = 0;
 8009802:	7dfb      	ldrb	r3, [r7, #23]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	4413      	add	r3, r2
 8009808:	2200      	movs	r2, #0
 800980a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < ( ( m >> 3 ) + 1 ); i++ )
 800980c:	7dfb      	ldrb	r3, [r7, #23]
 800980e:	3301      	adds	r3, #1
 8009810:	75fb      	strb	r3, [r7, #23]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	10da      	asrs	r2, r3, #3
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	429a      	cmp	r2, r3
 800981a:	daf2      	bge.n	8009802 <FragGetParityMatrixRow+0x3c>
    }
    while( nbCoeff < ( m >> 1 ) )
 800981c:	e01f      	b.n	800985e <FragGetParityMatrixRow+0x98>
    {
        r = 1 << 16;
 800981e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009822:	61bb      	str	r3, [r7, #24]
        while( r >= m )
 8009824:	e00d      	b.n	8009842 <FragGetParityMatrixRow+0x7c>
        {
            x = FragPrbs23( x );
 8009826:	6a38      	ldr	r0, [r7, #32]
 8009828:	f7ff ffb3 	bl	8009792 <FragPrbs23>
 800982c:	6238      	str	r0, [r7, #32]
            r = x % ( m + mTemp );
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009832:	441a      	add	r2, r3
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	fb93 f1f2 	sdiv	r1, r3, r2
 800983a:	fb01 f202 	mul.w	r2, r1, r2
 800983e:	1a9b      	subs	r3, r3, r2
 8009840:	61bb      	str	r3, [r7, #24]
        while( r >= m )
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	429a      	cmp	r2, r3
 8009848:	daed      	bge.n	8009826 <FragGetParityMatrixRow+0x60>
        }
        SetParity( r, matrixRow, 1 );
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2201      	movs	r2, #1
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff feee 	bl	8009634 <SetParity>
        nbCoeff += 1;
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	3301      	adds	r3, #1
 800985c:	61fb      	str	r3, [r7, #28]
    while( nbCoeff < ( m >> 1 ) )
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	105b      	asrs	r3, r3, #1
 8009862:	69fa      	ldr	r2, [r7, #28]
 8009864:	429a      	cmp	r2, r3
 8009866:	dbda      	blt.n	800981e <FragGetParityMatrixRow+0x58>
    }
}
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	3728      	adds	r7, #40	@ 0x28
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <BitArrayFindFirstOne>:

static uint16_t BitArrayFindFirstOne( uint8_t *bitArray, uint16_t size )
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	460b      	mov	r3, r1
 800987c:	807b      	strh	r3, [r7, #2]
    for( uint16_t i = 0; i < size; i++)
 800987e:	2300      	movs	r3, #0
 8009880:	81fb      	strh	r3, [r7, #14]
 8009882:	e00d      	b.n	80098a0 <BitArrayFindFirstOne+0x2e>
    {
        if ( GetParity( i, bitArray ) == 1 )
 8009884:	89fb      	ldrh	r3, [r7, #14]
 8009886:	b2db      	uxtb	r3, r3
 8009888:	6879      	ldr	r1, [r7, #4]
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff feb2 	bl	80095f4 <GetParity>
 8009890:	4603      	mov	r3, r0
 8009892:	2b01      	cmp	r3, #1
 8009894:	d101      	bne.n	800989a <BitArrayFindFirstOne+0x28>
        {
            return i;
 8009896:	89fb      	ldrh	r3, [r7, #14]
 8009898:	e007      	b.n	80098aa <BitArrayFindFirstOne+0x38>
    for( uint16_t i = 0; i < size; i++)
 800989a:	89fb      	ldrh	r3, [r7, #14]
 800989c:	3301      	adds	r3, #1
 800989e:	81fb      	strh	r3, [r7, #14]
 80098a0:	89fa      	ldrh	r2, [r7, #14]
 80098a2:	887b      	ldrh	r3, [r7, #2]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d3ed      	bcc.n	8009884 <BitArrayFindFirstOne+0x12>
        }
    }
    return 0;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <BitArrayIsAllZeros>:

static uint8_t BitArrayIsAllZeros( uint8_t *bitArray, uint16_t  size )
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	807b      	strh	r3, [r7, #2]
    for( uint16_t i = 0; i < size; i++ )
 80098be:	2300      	movs	r3, #0
 80098c0:	81fb      	strh	r3, [r7, #14]
 80098c2:	e00d      	b.n	80098e0 <BitArrayIsAllZeros+0x2e>
    {
        if( GetParity( i, bitArray ) == 1 )
 80098c4:	89fb      	ldrh	r3, [r7, #14]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	6879      	ldr	r1, [r7, #4]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7ff fe92 	bl	80095f4 <GetParity>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d101      	bne.n	80098da <BitArrayIsAllZeros+0x28>
        {
            return 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	e007      	b.n	80098ea <BitArrayIsAllZeros+0x38>
    for( uint16_t i = 0; i < size; i++ )
 80098da:	89fb      	ldrh	r3, [r7, #14]
 80098dc:	3301      	adds	r3, #1
 80098de:	81fb      	strh	r3, [r7, #14]
 80098e0:	89fa      	ldrh	r2, [r7, #14]
 80098e2:	887b      	ldrh	r3, [r7, #2]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d3ed      	bcc.n	80098c4 <BitArrayIsAllZeros+0x12>
        }
    }
    return 1;
 80098e8:	2301      	movs	r3, #1
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <FragFindMissingFrags>:
 *
 * \param [IN]  counter Current fragment counter
 * \param [OUT] FragDecoder.FragNbMissingIndex[] array is updated in place
 */
static void FragFindMissingFrags( uint16_t counter )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	4603      	mov	r3, r0
 80098fc:	80fb      	strh	r3, [r7, #6]
    int32_t i;
    for( i = FragDecoder.Status.FragNbLastRx; i < ( counter - 1 ); i++ )
 80098fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009978 <FragFindMissingFrags+0x84>)
 8009900:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	e01a      	b.n	800993e <FragFindMissingFrags+0x4a>
    {
        if( i < FragDecoder.FragNb )
 8009908:	4b1b      	ldr	r3, [pc, #108]	@ (8009978 <FragFindMissingFrags+0x84>)
 800990a:	889b      	ldrh	r3, [r3, #4]
 800990c:	461a      	mov	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4293      	cmp	r3, r2
 8009912:	da11      	bge.n	8009938 <FragFindMissingFrags+0x44>
        {
            FragDecoder.Status.FragNbLost++;
 8009914:	4b18      	ldr	r3, [pc, #96]	@ (8009978 <FragFindMissingFrags+0x84>)
 8009916:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800991a:	3301      	adds	r3, #1
 800991c:	b29a      	uxth	r2, r3
 800991e:	4b16      	ldr	r3, [pc, #88]	@ (8009978 <FragFindMissingFrags+0x84>)
 8009920:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            FragDecoder.FragNbMissingIndex[i] = FragDecoder.Status.FragNbLost;
 8009924:	4b14      	ldr	r3, [pc, #80]	@ (8009978 <FragFindMissingFrags+0x84>)
 8009926:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800992a:	4a13      	ldr	r2, [pc, #76]	@ (8009978 <FragFindMissingFrags+0x84>)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3308      	adds	r3, #8
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	4413      	add	r3, r2
 8009934:	460a      	mov	r2, r1
 8009936:	805a      	strh	r2, [r3, #2]
    for( i = FragDecoder.Status.FragNbLastRx; i < ( counter - 1 ); i++ )
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3301      	adds	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	88fb      	ldrh	r3, [r7, #6]
 8009940:	3b01      	subs	r3, #1
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	429a      	cmp	r2, r3
 8009946:	dbdf      	blt.n	8009908 <FragFindMissingFrags+0x14>
        }
    }
    if( i < FragDecoder.FragNb )
 8009948:	4b0b      	ldr	r3, [pc, #44]	@ (8009978 <FragFindMissingFrags+0x84>)
 800994a:	889b      	ldrh	r3, [r3, #4]
 800994c:	461a      	mov	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	4293      	cmp	r3, r2
 8009952:	da04      	bge.n	800995e <FragFindMissingFrags+0x6a>
    {
        FragDecoder.Status.FragNbLastRx = counter;
 8009954:	4a08      	ldr	r2, [pc, #32]	@ (8009978 <FragFindMissingFrags+0x84>)
 8009956:	88fb      	ldrh	r3, [r7, #6]
 8009958:	f8a2 3042 	strh.w	r3, [r2, #66]	@ 0x42
        FragDecoder.Status.FragNbLastRx = FragDecoder.FragNb + 1;
    }
    DBG( "RECEIVED    : %5d / %5d Fragments\r\n", FragDecoder.Status.FragNbRx, FragDecoder.FragNb );
    DBG( "              %5d / %5d Bytes\r\n", FragDecoder.Status.FragNbRx * FragDecoder.FragSize, FragDecoder.FragNb * FragDecoder.FragSize );
    DBG( "LOST        :       %7d Fragments\r\n\r\n", FragDecoder.Status.FragNbLost );
}
 800995c:	e006      	b.n	800996c <FragFindMissingFrags+0x78>
        FragDecoder.Status.FragNbLastRx = FragDecoder.FragNb + 1;
 800995e:	4b06      	ldr	r3, [pc, #24]	@ (8009978 <FragFindMissingFrags+0x84>)
 8009960:	889b      	ldrh	r3, [r3, #4]
 8009962:	3301      	adds	r3, #1
 8009964:	b29a      	uxth	r2, r3
 8009966:	4b04      	ldr	r3, [pc, #16]	@ (8009978 <FragFindMissingFrags+0x84>)
 8009968:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
}
 800996c:	bf00      	nop
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	200012b8 	.word	0x200012b8

0800997c <FragFindMissingIndex>:
 * \param [IN] x   x th missing frag
 *
 * \retval counter The counter value associated to the x th missing frag
 */
static uint16_t FragFindMissingIndex( uint16_t x )
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	80fb      	strh	r3, [r7, #6]
    for( uint16_t i = 0; i < FragDecoder.FragNb; i++ )
 8009986:	2300      	movs	r3, #0
 8009988:	81fb      	strh	r3, [r7, #14]
 800998a:	e00f      	b.n	80099ac <FragFindMissingIndex+0x30>
    {
        if( FragDecoder.FragNbMissingIndex[i] == ( x + 1 ) )
 800998c:	89fb      	ldrh	r3, [r7, #14]
 800998e:	4a0d      	ldr	r2, [pc, #52]	@ (80099c4 <FragFindMissingIndex+0x48>)
 8009990:	3308      	adds	r3, #8
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	4413      	add	r3, r2
 8009996:	885b      	ldrh	r3, [r3, #2]
 8009998:	461a      	mov	r2, r3
 800999a:	88fb      	ldrh	r3, [r7, #6]
 800999c:	3301      	adds	r3, #1
 800999e:	429a      	cmp	r2, r3
 80099a0:	d101      	bne.n	80099a6 <FragFindMissingIndex+0x2a>
        {
            return i;
 80099a2:	89fb      	ldrh	r3, [r7, #14]
 80099a4:	e008      	b.n	80099b8 <FragFindMissingIndex+0x3c>
    for( uint16_t i = 0; i < FragDecoder.FragNb; i++ )
 80099a6:	89fb      	ldrh	r3, [r7, #14]
 80099a8:	3301      	adds	r3, #1
 80099aa:	81fb      	strh	r3, [r7, #14]
 80099ac:	4b05      	ldr	r3, [pc, #20]	@ (80099c4 <FragFindMissingIndex+0x48>)
 80099ae:	889b      	ldrh	r3, [r3, #4]
 80099b0:	89fa      	ldrh	r2, [r7, #14]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d3ea      	bcc.n	800998c <FragFindMissingIndex+0x10>
        }
    }
    return 0;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	200012b8 	.word	0x200012b8

080099c8 <FragExtractLineFromBinaryMatrix>:
 * \param [IN] bitArray  Pointer to the bit array
 * \param [IN] rowIndex  Matrix row index
 * \param [IN] bitsInRow Number of bits in one row
 */
static void FragExtractLineFromBinaryMatrix( uint8_t* bitArray, uint16_t rowIndex, uint16_t bitsInRow )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	807b      	strh	r3, [r7, #2]
 80099d4:	4613      	mov	r3, r2
 80099d6:	803b      	strh	r3, [r7, #0]
    uint32_t findByte = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	617b      	str	r3, [r7, #20]
    uint32_t findBitInByte = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	613b      	str	r3, [r7, #16]

    if( rowIndex > 0 )
 80099e0:	887b      	ldrh	r3, [r7, #2]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d01f      	beq.n	8009a26 <FragExtractLineFromBinaryMatrix+0x5e>
    {
        findByte      = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) >> 3;
 80099e6:	887b      	ldrh	r3, [r7, #2]
 80099e8:	883a      	ldrh	r2, [r7, #0]
 80099ea:	fb03 f202 	mul.w	r2, r3, r2
 80099ee:	887b      	ldrh	r3, [r7, #2]
 80099f0:	8879      	ldrh	r1, [r7, #2]
 80099f2:	3901      	subs	r1, #1
 80099f4:	fb01 f303 	mul.w	r3, r1, r3
 80099f8:	105b      	asrs	r3, r3, #1
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	10db      	asrs	r3, r3, #3
 80099fe:	617b      	str	r3, [r7, #20]
        findBitInByte = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) % 8;
 8009a00:	887b      	ldrh	r3, [r7, #2]
 8009a02:	883a      	ldrh	r2, [r7, #0]
 8009a04:	fb03 f202 	mul.w	r2, r3, r2
 8009a08:	887b      	ldrh	r3, [r7, #2]
 8009a0a:	8879      	ldrh	r1, [r7, #2]
 8009a0c:	3901      	subs	r1, #1
 8009a0e:	fb01 f303 	mul.w	r3, r1, r3
 8009a12:	105b      	asrs	r3, r3, #1
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	425a      	negs	r2, r3
 8009a18:	f003 0307 	and.w	r3, r3, #7
 8009a1c:	f002 0207 	and.w	r2, r2, #7
 8009a20:	bf58      	it	pl
 8009a22:	4253      	negpl	r3, r2
 8009a24:	613b      	str	r3, [r7, #16]
    }
    if( rowIndex > 0 )
 8009a26:	887b      	ldrh	r3, [r7, #2]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d010      	beq.n	8009a4e <FragExtractLineFromBinaryMatrix+0x86>
    {
        for( uint16_t i = 0; i < rowIndex; i++ )
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	81fb      	strh	r3, [r7, #14]
 8009a30:	e009      	b.n	8009a46 <FragExtractLineFromBinaryMatrix+0x7e>
        {
            SetParity( i, bitArray, 0 );
 8009a32:	89fb      	ldrh	r3, [r7, #14]
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2200      	movs	r2, #0
 8009a38:	6879      	ldr	r1, [r7, #4]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff fdfa 	bl	8009634 <SetParity>
        for( uint16_t i = 0; i < rowIndex; i++ )
 8009a40:	89fb      	ldrh	r3, [r7, #14]
 8009a42:	3301      	adds	r3, #1
 8009a44:	81fb      	strh	r3, [r7, #14]
 8009a46:	89fa      	ldrh	r2, [r7, #14]
 8009a48:	887b      	ldrh	r3, [r7, #2]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d3f1      	bcc.n	8009a32 <FragExtractLineFromBinaryMatrix+0x6a>
        }
    }
    for( uint16_t i = rowIndex; i < bitsInRow; i++ )
 8009a4e:	887b      	ldrh	r3, [r7, #2]
 8009a50:	81bb      	strh	r3, [r7, #12]
 8009a52:	e022      	b.n	8009a9a <FragExtractLineFromBinaryMatrix+0xd2>
    {
        SetParity( i,
 8009a54:	89bb      	ldrh	r3, [r7, #12]
 8009a56:	b2d8      	uxtb	r0, r3
                   bitArray, 
                   ( FragDecoder.MatrixM2B[findByte] >> ( 7 - findBitInByte ) ) & 0x01 );
 8009a58:	4a14      	ldr	r2, [pc, #80]	@ (8009aac <FragExtractLineFromBinaryMatrix+0xe4>)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	330c      	adds	r3, #12
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	f1c3 0307 	rsb	r3, r3, #7
 8009a6a:	fa42 f303 	asr.w	r3, r2, r3
 8009a6e:	b2db      	uxtb	r3, r3
        SetParity( i,
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	461a      	mov	r2, r3
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	f7ff fddb 	bl	8009634 <SetParity>

        findBitInByte++;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	3301      	adds	r3, #1
 8009a82:	613b      	str	r3, [r7, #16]
        if( findBitInByte == 8 )
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2b08      	cmp	r3, #8
 8009a88:	d104      	bne.n	8009a94 <FragExtractLineFromBinaryMatrix+0xcc>
        {
            findBitInByte = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	613b      	str	r3, [r7, #16]
            findByte++;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	3301      	adds	r3, #1
 8009a92:	617b      	str	r3, [r7, #20]
    for( uint16_t i = rowIndex; i < bitsInRow; i++ )
 8009a94:	89bb      	ldrh	r3, [r7, #12]
 8009a96:	3301      	adds	r3, #1
 8009a98:	81bb      	strh	r3, [r7, #12]
 8009a9a:	89ba      	ldrh	r2, [r7, #12]
 8009a9c:	883b      	ldrh	r3, [r7, #0]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d3d8      	bcc.n	8009a54 <FragExtractLineFromBinaryMatrix+0x8c>
        }
    }
}
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
 8009aa6:	3718      	adds	r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	200012b8 	.word	0x200012b8

08009ab0 <FragPushLineToBinaryMatrix>:
 * \param [IN] bitArray  Pointer to the bit array
 * \param [IN] rowIndex  Matrix row index
 * \param [IN] bitsInRow Number of bits in one row
 */
static void FragPushLineToBinaryMatrix( uint8_t *bitArray, uint16_t rowIndex, uint16_t bitsInRow )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	807b      	strh	r3, [r7, #2]
 8009abc:	4613      	mov	r3, r2
 8009abe:	803b      	strh	r3, [r7, #0]
    uint32_t findByte = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	617b      	str	r3, [r7, #20]
    uint32_t findBitInByte = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	613b      	str	r3, [r7, #16]

    if ( rowIndex > 0) {
 8009ac8:	887b      	ldrh	r3, [r7, #2]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d01f      	beq.n	8009b0e <FragPushLineToBinaryMatrix+0x5e>
        findByte      = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) >> 3;
 8009ace:	887b      	ldrh	r3, [r7, #2]
 8009ad0:	883a      	ldrh	r2, [r7, #0]
 8009ad2:	fb03 f202 	mul.w	r2, r3, r2
 8009ad6:	887b      	ldrh	r3, [r7, #2]
 8009ad8:	8879      	ldrh	r1, [r7, #2]
 8009ada:	3901      	subs	r1, #1
 8009adc:	fb01 f303 	mul.w	r3, r1, r3
 8009ae0:	105b      	asrs	r3, r3, #1
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	10db      	asrs	r3, r3, #3
 8009ae6:	617b      	str	r3, [r7, #20]
        findBitInByte = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) % 8;
 8009ae8:	887b      	ldrh	r3, [r7, #2]
 8009aea:	883a      	ldrh	r2, [r7, #0]
 8009aec:	fb03 f202 	mul.w	r2, r3, r2
 8009af0:	887b      	ldrh	r3, [r7, #2]
 8009af2:	8879      	ldrh	r1, [r7, #2]
 8009af4:	3901      	subs	r1, #1
 8009af6:	fb01 f303 	mul.w	r3, r1, r3
 8009afa:	105b      	asrs	r3, r3, #1
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	425a      	negs	r2, r3
 8009b00:	f003 0307 	and.w	r3, r3, #7
 8009b04:	f002 0207 	and.w	r2, r2, #7
 8009b08:	bf58      	it	pl
 8009b0a:	4253      	negpl	r3, r2
 8009b0c:	613b      	str	r3, [r7, #16]

    }
    for( uint16_t i = rowIndex; i < bitsInRow; i++ )
 8009b0e:	887b      	ldrh	r3, [r7, #2]
 8009b10:	81fb      	strh	r3, [r7, #14]
 8009b12:	e02e      	b.n	8009b72 <FragPushLineToBinaryMatrix+0xc2>
    {
        if( GetParity( i, bitArray ) == 0 )
 8009b14:	89fb      	ldrh	r3, [r7, #14]
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7ff fd6a 	bl	80095f4 <GetParity>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d117      	bne.n	8009b56 <FragPushLineToBinaryMatrix+0xa6>
        {
            FragDecoder.MatrixM2B[findByte] = FragDecoder.MatrixM2B[findByte] & ( 0xFF - ( 1 << ( 7 - findBitInByte ) ) );
 8009b26:	4a17      	ldr	r2, [pc, #92]	@ (8009b84 <FragPushLineToBinaryMatrix+0xd4>)
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	330c      	adds	r3, #12
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	b25a      	sxtb	r2, r3
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	f1c3 0307 	rsb	r3, r3, #7
 8009b38:	2101      	movs	r1, #1
 8009b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b3e:	b25b      	sxtb	r3, r3
 8009b40:	43db      	mvns	r3, r3
 8009b42:	b25b      	sxtb	r3, r3
 8009b44:	4013      	ands	r3, r2
 8009b46:	b25b      	sxtb	r3, r3
 8009b48:	b2d9      	uxtb	r1, r3
 8009b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8009b84 <FragPushLineToBinaryMatrix+0xd4>)
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	4413      	add	r3, r2
 8009b50:	330c      	adds	r3, #12
 8009b52:	460a      	mov	r2, r1
 8009b54:	701a      	strb	r2, [r3, #0]
        }
        findBitInByte++;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	613b      	str	r3, [r7, #16]
        if( findBitInByte == 8 )
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b08      	cmp	r3, #8
 8009b60:	d104      	bne.n	8009b6c <FragPushLineToBinaryMatrix+0xbc>
        {
            findBitInByte = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	613b      	str	r3, [r7, #16]
            findByte++;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	617b      	str	r3, [r7, #20]
    for( uint16_t i = rowIndex; i < bitsInRow; i++ )
 8009b6c:	89fb      	ldrh	r3, [r7, #14]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	81fb      	strh	r3, [r7, #14]
 8009b72:	89fa      	ldrh	r2, [r7, #14]
 8009b74:	883b      	ldrh	r3, [r7, #0]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d3cc      	bcc.n	8009b14 <FragPushLineToBinaryMatrix+0x64>
        }
    }
}
 8009b7a:	bf00      	nop
 8009b7c:	bf00      	nop
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	200012b8 	.word	0x200012b8

08009b88 <LmphClockSyncPackageFactory>:
    .OnDeviceTimeRequest = NULL,                               // To be initialized by LmHandler
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
};

LmhPackage_t *LmphClockSyncPackageFactory( void )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	af00      	add	r7, sp, #0
    return &LmhpClockSyncPackage;
 8009b8c:	4b02      	ldr	r3, [pc, #8]	@ (8009b98 <LmphClockSyncPackageFactory+0x10>)
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	2000025c 	.word	0x2000025c

08009b9c <LmhpClockSyncInit>:

static void LmhpClockSyncInit( void * params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	71fb      	strb	r3, [r7, #7]
    if( dataBuffer != NULL )
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00c      	beq.n	8009bca <LmhpClockSyncInit+0x2e>
    {
        LmhpClockSyncState.DataBuffer = dataBuffer;
 8009bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8009be4 <LmhpClockSyncInit+0x48>)
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	6053      	str	r3, [r2, #4]
        LmhpClockSyncState.DataBufferMaxSize = dataBufferMaxSize;
 8009bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8009be4 <LmhpClockSyncInit+0x48>)
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	7093      	strb	r3, [r2, #2]
        LmhpClockSyncState.Initialized = true;
 8009bbc:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <LmhpClockSyncInit+0x48>)
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	701a      	strb	r2, [r3, #0]
        LmhpClockSyncState.IsRunning = true;
 8009bc2:	4b08      	ldr	r3, [pc, #32]	@ (8009be4 <LmhpClockSyncInit+0x48>)
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	705a      	strb	r2, [r3, #1]
    else
    {
        LmhpClockSyncState.IsRunning = false;
        LmhpClockSyncState.Initialized = false;
    }
}
 8009bc8:	e005      	b.n	8009bd6 <LmhpClockSyncInit+0x3a>
        LmhpClockSyncState.IsRunning = false;
 8009bca:	4b06      	ldr	r3, [pc, #24]	@ (8009be4 <LmhpClockSyncInit+0x48>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	705a      	strb	r2, [r3, #1]
        LmhpClockSyncState.Initialized = false;
 8009bd0:	4b04      	ldr	r3, [pc, #16]	@ (8009be4 <LmhpClockSyncInit+0x48>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	701a      	strb	r2, [r3, #0]
}
 8009bd6:	bf00      	nop
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	20001300 	.word	0x20001300

08009be8 <LmhpClockSyncIsInitialized>:

static bool LmhpClockSyncIsInitialized( void )
{
 8009be8:	b480      	push	{r7}
 8009bea:	af00      	add	r7, sp, #0
    return LmhpClockSyncState.Initialized;
 8009bec:	4b03      	ldr	r3, [pc, #12]	@ (8009bfc <LmhpClockSyncIsInitialized+0x14>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	20001300 	.word	0x20001300

08009c00 <LmhpClockSyncIsRunning>:

static bool LmhpClockSyncIsRunning( void )
{
 8009c00:	b480      	push	{r7}
 8009c02:	af00      	add	r7, sp, #0
    if( LmhpClockSyncState.Initialized == false )
 8009c04:	4b07      	ldr	r3, [pc, #28]	@ (8009c24 <LmhpClockSyncIsRunning+0x24>)
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	f083 0301 	eor.w	r3, r3, #1
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <LmhpClockSyncIsRunning+0x16>
    {
        return false;
 8009c12:	2300      	movs	r3, #0
 8009c14:	e001      	b.n	8009c1a <LmhpClockSyncIsRunning+0x1a>
    }

    return LmhpClockSyncState.IsRunning;
 8009c16:	4b03      	ldr	r3, [pc, #12]	@ (8009c24 <LmhpClockSyncIsRunning+0x24>)
 8009c18:	785b      	ldrb	r3, [r3, #1]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	20001300 	.word	0x20001300

08009c28 <LmhpClockSyncProcess>:

static void LmhpClockSyncProcess( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
    // Nothing to process
}
 8009c2c:	bf00      	nop
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
	...

08009c38 <LmhpClockSyncOnMcpsConfirm>:

static void LmhpClockSyncOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08a      	sub	sp, #40	@ 0x28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    if( LmhpClockSyncState.AppTimeReqPending == true )
 8009c40:	4b14      	ldr	r3, [pc, #80]	@ (8009c94 <LmhpClockSyncOnMcpsConfirm+0x5c>)
 8009c42:	7a5b      	ldrb	r3, [r3, #9]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d021      	beq.n	8009c8c <LmhpClockSyncOnMcpsConfirm+0x54>
    {
        // Revert ADR setting
        mibReq.Type = MIB_ADR;
 8009c48:	2304      	movs	r3, #4
 8009c4a:	723b      	strb	r3, [r7, #8]
        mibReq.Param.AdrEnable = LmhpClockSyncState.AdrEnabledPrev;
 8009c4c:	4b11      	ldr	r3, [pc, #68]	@ (8009c94 <LmhpClockSyncOnMcpsConfirm+0x5c>)
 8009c4e:	7a9b      	ldrb	r3, [r3, #10]
 8009c50:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8009c52:	f107 0308 	add.w	r3, r7, #8
 8009c56:	4618      	mov	r0, r3
 8009c58:	f005 fd84 	bl	800f764 <LoRaMacMibSetRequestConfirm>

        // Revert NbTrans setting
        mibReq.Type = MIB_CHANNELS_NB_TRANS;
 8009c5c:	2326      	movs	r3, #38	@ 0x26
 8009c5e:	723b      	strb	r3, [r7, #8]
        mibReq.Param.ChannelsNbTrans = LmhpClockSyncState.NbTransPrev;
 8009c60:	4b0c      	ldr	r3, [pc, #48]	@ (8009c94 <LmhpClockSyncOnMcpsConfirm+0x5c>)
 8009c62:	7adb      	ldrb	r3, [r3, #11]
 8009c64:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8009c66:	f107 0308 	add.w	r3, r7, #8
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f005 fd7a 	bl	800f764 <LoRaMacMibSetRequestConfirm>

        // Revert data rate setting
        mibReq.Type = MIB_CHANNELS_DATARATE;
 8009c70:	232d      	movs	r3, #45	@ 0x2d
 8009c72:	723b      	strb	r3, [r7, #8]
        mibReq.Param.ChannelsDatarate = LmhpClockSyncState.DataratePrev;
 8009c74:	4b07      	ldr	r3, [pc, #28]	@ (8009c94 <LmhpClockSyncOnMcpsConfirm+0x5c>)
 8009c76:	7b1b      	ldrb	r3, [r3, #12]
 8009c78:	b25b      	sxtb	r3, r3
 8009c7a:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );        
 8009c7c:	f107 0308 	add.w	r3, r7, #8
 8009c80:	4618      	mov	r0, r3
 8009c82:	f005 fd6f 	bl	800f764 <LoRaMacMibSetRequestConfirm>
        
        LmhpClockSyncState.AppTimeReqPending = false;
 8009c86:	4b03      	ldr	r3, [pc, #12]	@ (8009c94 <LmhpClockSyncOnMcpsConfirm+0x5c>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	725a      	strb	r2, [r3, #9]
    }
}
 8009c8c:	bf00      	nop
 8009c8e:	3728      	adds	r7, #40	@ 0x28
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	20001300 	.word	0x20001300

08009c98 <LmhpClockSyncOnMcpsIndication>:

static void LmhpClockSyncOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08a      	sub	sp, #40	@ 0x28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t dataBufferIndex = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    while( cmdIndex < mcpsIndication->BufferSize )
 8009cac:	e10a      	b.n	8009ec4 <LmhpClockSyncOnMcpsIndication+0x22c>
    {
        switch( mcpsIndication->Buffer[cmdIndex++] )
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	689a      	ldr	r2, [r3, #8]
 8009cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cb6:	1c59      	adds	r1, r3, #1
 8009cb8:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8009cbc:	4413      	add	r3, r2
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b03      	cmp	r3, #3
 8009cc2:	f200 80ff 	bhi.w	8009ec4 <LmhpClockSyncOnMcpsIndication+0x22c>
 8009cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ccc <LmhpClockSyncOnMcpsIndication+0x34>)
 8009cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ccc:	08009cdd 	.word	0x08009cdd
 8009cd0:	08009d1b 	.word	0x08009d1b
 8009cd4:	08009e1b 	.word	0x08009e1b
 8009cd8:	08009ec5 	.word	0x08009ec5
        {
            case CLOCK_SYNC_PKG_VERSION_REQ:
            {
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_PKG_VERSION_ANS;
 8009cdc:	4b88      	ldr	r3, [pc, #544]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ce4:	1c59      	adds	r1, r3, #1
 8009ce6:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 8009cea:	4413      	add	r3, r2
 8009cec:	2200      	movs	r2, #0
 8009cee:	701a      	strb	r2, [r3, #0]
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_ID;
 8009cf0:	4b83      	ldr	r3, [pc, #524]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009cf8:	1c59      	adds	r1, r3, #1
 8009cfa:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 8009cfe:	4413      	add	r3, r2
 8009d00:	2201      	movs	r2, #1
 8009d02:	701a      	strb	r2, [r3, #0]
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_VERSION;
 8009d04:	4b7e      	ldr	r3, [pc, #504]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d0c:	1c59      	adds	r1, r3, #1
 8009d0e:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 8009d12:	4413      	add	r3, r2
 8009d14:	2201      	movs	r2, #1
 8009d16:	701a      	strb	r2, [r3, #0]
                break;
 8009d18:	e0d4      	b.n	8009ec4 <LmhpClockSyncOnMcpsIndication+0x22c>
            }
            case CLOCK_SYNC_APP_TIME_ANS:
            {
                // Check if a more precise time correction has been received.
                // If yes then don't process and ignore this answer.
                if( mcpsIndication->DeviceTimeAnsReceived == true )
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	7f1b      	ldrb	r3, [r3, #28]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f040 80cd 	bne.w	8009ebe <LmhpClockSyncOnMcpsIndication+0x226>
                {
                    break;
                }
                int32_t timeCorrection = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	623b      	str	r3, [r7, #32]
                timeCorrection  = ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d30:	1c59      	adds	r1, r3, #1
 8009d32:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8009d36:	4413      	add	r3, r2
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	623b      	str	r3, [r7, #32]
                timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	689a      	ldr	r2, [r3, #8]
 8009d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d44:	1c59      	adds	r1, r3, #1
 8009d46:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8009d4a:	4413      	add	r3, r2
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	021b      	lsls	r3, r3, #8
 8009d50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009d54:	6a3a      	ldr	r2, [r7, #32]
 8009d56:	4413      	add	r3, r2
 8009d58:	623b      	str	r3, [r7, #32]
                timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689a      	ldr	r2, [r3, #8]
 8009d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d62:	1c59      	adds	r1, r3, #1
 8009d64:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8009d68:	4413      	add	r3, r2
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	041b      	lsls	r3, r3, #16
 8009d6e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009d72:	6a3a      	ldr	r2, [r7, #32]
 8009d74:	4413      	add	r3, r2
 8009d76:	623b      	str	r3, [r7, #32]
                timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689a      	ldr	r2, [r3, #8]
 8009d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d80:	1c59      	adds	r1, r3, #1
 8009d82:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8009d86:	4413      	add	r3, r2
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	061a      	lsls	r2, r3, #24
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	4413      	add	r3, r2
 8009d90:	623b      	str	r3, [r7, #32]
                if( ( mcpsIndication->Buffer[cmdIndex++] & 0x0F ) == LmhpClockSyncState.TimeReqParam.Fields.TokenReq )
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	689a      	ldr	r2, [r3, #8]
 8009d96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d9a:	1c59      	adds	r1, r3, #1
 8009d9c:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8009da0:	4413      	add	r3, r2
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	f003 030f 	and.w	r3, r3, #15
 8009da8:	4a55      	ldr	r2, [pc, #340]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009daa:	7a12      	ldrb	r2, [r2, #8]
 8009dac:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8009db0:	b2d2      	uxtb	r2, r2
 8009db2:	4293      	cmp	r3, r2
 8009db4:	f040 8085 	bne.w	8009ec2 <LmhpClockSyncOnMcpsIndication+0x22a>
                {
                    SysTime_t curTime = { .Seconds = 0, .SubSeconds = 0 };
 8009db8:	2300      	movs	r3, #0
 8009dba:	61bb      	str	r3, [r7, #24]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	83bb      	strh	r3, [r7, #28]
                    curTime = SysTimeGet( );
 8009dc0:	f107 0318 	add.w	r3, r7, #24
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f00d fc5d 	bl	8017684 <SysTimeGet>
                    curTime.Seconds += timeCorrection;
 8009dca:	69ba      	ldr	r2, [r7, #24]
 8009dcc:	6a3b      	ldr	r3, [r7, #32]
 8009dce:	4413      	add	r3, r2
 8009dd0:	61bb      	str	r3, [r7, #24]
                    SysTimeSet( curTime );
 8009dd2:	f107 0318 	add.w	r3, r7, #24
 8009dd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009dda:	f00d fc23 	bl	8017624 <SysTimeSet>
                    LmhpClockSyncState.TimeReqParam.Fields.TokenReq = ( LmhpClockSyncState.TimeReqParam.Fields.TokenReq + 1 ) & 0x0F;
 8009dde:	4b48      	ldr	r3, [pc, #288]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009de0:	7a1b      	ldrb	r3, [r3, #8]
 8009de2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	3301      	adds	r3, #1
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	f003 030f 	and.w	r3, r3, #15
 8009df0:	b2d9      	uxtb	r1, r3
 8009df2:	4a43      	ldr	r2, [pc, #268]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009df4:	7a13      	ldrb	r3, [r2, #8]
 8009df6:	f361 0303 	bfi	r3, r1, #0, #4
 8009dfa:	7213      	strb	r3, [r2, #8]
                    if( LmhpClockSyncPackage.OnSysTimeUpdate != NULL )
 8009dfc:	4b41      	ldr	r3, [pc, #260]	@ (8009f04 <LmhpClockSyncOnMcpsIndication+0x26c>)
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d05e      	beq.n	8009ec2 <LmhpClockSyncOnMcpsIndication+0x22a>
                    {
                        if( ( timeCorrection >= -1 ) && ( timeCorrection <= 1 ) )
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e0a:	db5a      	blt.n	8009ec2 <LmhpClockSyncOnMcpsIndication+0x22a>
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	dc57      	bgt.n	8009ec2 <LmhpClockSyncOnMcpsIndication+0x22a>
                        {
                            LmhpClockSyncPackage.OnSysTimeUpdate( );
 8009e12:	4b3c      	ldr	r3, [pc, #240]	@ (8009f04 <LmhpClockSyncOnMcpsIndication+0x26c>)
 8009e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e16:	4798      	blx	r3
                        }
                    }
                }
                break;
 8009e18:	e053      	b.n	8009ec2 <LmhpClockSyncOnMcpsIndication+0x22a>
            }
            case CLOCK_SYNC_APP_TIME_PERIOD_REQ:
            {
                // Increment index
                cmdIndex++;
 8009e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e1e:	3301      	adds	r3, #1
 8009e20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                // TODO implement command prosessing and handling
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_APP_TIME_PERIOD_ANS;
 8009e24:	4b36      	ldr	r3, [pc, #216]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e2c:	1c59      	adds	r1, r3, #1
 8009e2e:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 8009e32:	4413      	add	r3, r2
 8009e34:	2202      	movs	r2, #2
 8009e36:	701a      	strb	r2, [r3, #0]
                // Answer status not supported.
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = 0x01;
 8009e38:	4b31      	ldr	r3, [pc, #196]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e40:	1c59      	adds	r1, r3, #1
 8009e42:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 8009e46:	4413      	add	r3, r2
 8009e48:	2201      	movs	r2, #1
 8009e4a:	701a      	strb	r2, [r3, #0]

                SysTime_t curTime = SysTimeGet( );
 8009e4c:	f107 0310 	add.w	r3, r7, #16
 8009e50:	4618      	mov	r0, r3
 8009e52:	f00d fc17 	bl	8017684 <SysTimeGet>
                // Substract Unix to Gps epcoh offset. The system time is based on Unix time.
                curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	4b2b      	ldr	r3, [pc, #172]	@ (8009f08 <LmhpClockSyncOnMcpsIndication+0x270>)
 8009e5a:	4413      	add	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 0  ) & 0xFF;
 8009e5e:	6939      	ldr	r1, [r7, #16]
 8009e60:	4b27      	ldr	r3, [pc, #156]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e68:	1c58      	adds	r0, r3, #1
 8009e6a:	f887 0026 	strb.w	r0, [r7, #38]	@ 0x26
 8009e6e:	4413      	add	r3, r2
 8009e70:	b2ca      	uxtb	r2, r1
 8009e72:	701a      	strb	r2, [r3, #0]
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 8  ) & 0xFF;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	0a19      	lsrs	r1, r3, #8
 8009e78:	4b21      	ldr	r3, [pc, #132]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e80:	1c58      	adds	r0, r3, #1
 8009e82:	f887 0026 	strb.w	r0, [r7, #38]	@ 0x26
 8009e86:	4413      	add	r3, r2
 8009e88:	b2ca      	uxtb	r2, r1
 8009e8a:	701a      	strb	r2, [r3, #0]
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 16 ) & 0xFF;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	0c19      	lsrs	r1, r3, #16
 8009e90:	4b1b      	ldr	r3, [pc, #108]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e98:	1c58      	adds	r0, r3, #1
 8009e9a:	f887 0026 	strb.w	r0, [r7, #38]	@ 0x26
 8009e9e:	4413      	add	r3, r2
 8009ea0:	b2ca      	uxtb	r2, r1
 8009ea2:	701a      	strb	r2, [r3, #0]
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 24 ) & 0xFF;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	0e19      	lsrs	r1, r3, #24
 8009ea8:	4b15      	ldr	r3, [pc, #84]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009eb0:	1c58      	adds	r0, r3, #1
 8009eb2:	f887 0026 	strb.w	r0, [r7, #38]	@ 0x26
 8009eb6:	4413      	add	r3, r2
 8009eb8:	b2ca      	uxtb	r2, r1
 8009eba:	701a      	strb	r2, [r3, #0]
                break;
 8009ebc:	e002      	b.n	8009ec4 <LmhpClockSyncOnMcpsIndication+0x22c>
                    break;
 8009ebe:	bf00      	nop
 8009ec0:	e000      	b.n	8009ec4 <LmhpClockSyncOnMcpsIndication+0x22c>
                break;
 8009ec2:	bf00      	nop
    while( cmdIndex < mcpsIndication->BufferSize )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	7b1b      	ldrb	r3, [r3, #12]
 8009ec8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	f4ff aeee 	bcc.w	8009cae <LmhpClockSyncOnMcpsIndication+0x16>
                break;
            }
        }
    }

    if( dataBufferIndex != 0 )
 8009ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00e      	beq.n	8009ef8 <LmhpClockSyncOnMcpsIndication+0x260>
    {
        // Answer commands
        LmHandlerAppData_t appData =
 8009eda:	23ca      	movs	r3, #202	@ 0xca
 8009edc:	723b      	strb	r3, [r7, #8]
 8009ede:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ee2:	727b      	strb	r3, [r7, #9]
        {
            .Buffer = LmhpClockSyncState.DataBuffer,
 8009ee4:	4b06      	ldr	r3, [pc, #24]	@ (8009f00 <LmhpClockSyncOnMcpsIndication+0x268>)
 8009ee6:	685b      	ldr	r3, [r3, #4]
        LmHandlerAppData_t appData =
 8009ee8:	60fb      	str	r3, [r7, #12]
            .BufferSize = dataBufferIndex,
            .Port = CLOCK_SYNC_PORT
        };
        LmhpClockSyncPackage.OnSendRequest( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 8009eea:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <LmhpClockSyncOnMcpsIndication+0x26c>)
 8009eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eee:	f107 0208 	add.w	r2, r7, #8
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4798      	blx	r3
    }
}
 8009ef8:	bf00      	nop
 8009efa:	3728      	adds	r7, #40	@ 0x28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20001300 	.word	0x20001300
 8009f04:	2000025c 	.word	0x2000025c
 8009f08:	ed2ac280 	.word	0xed2ac280

08009f0c <LmphCompliancePackageFactory>:
    .OnDeviceTimeRequest = NULL,                               // To be initialized by LmHandler
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
};

LmhPackage_t *LmphCompliancePackageFactory( void )
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 8009f10:	4b02      	ldr	r3, [pc, #8]	@ (8009f1c <LmphCompliancePackageFactory+0x10>)
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	20000298 	.word	0x20000298

08009f20 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00f      	beq.n	8009f54 <LmhpComplianceInit+0x34>
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00c      	beq.n	8009f54 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8009f3a:	4a0d      	ldr	r2, [pc, #52]	@ (8009f70 <LmhpComplianceInit+0x50>)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8009f40:	4a0c      	ldr	r2, [pc, #48]	@ (8009f74 <LmhpComplianceInit+0x54>)
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8009f46:	4a0b      	ldr	r2, [pc, #44]	@ (8009f74 <LmhpComplianceInit+0x54>)
 8009f48:	79fb      	ldrb	r3, [r7, #7]
 8009f4a:	7193      	strb	r3, [r2, #6]
        ComplianceTestState.Initialized = true;
 8009f4c:	4b09      	ldr	r3, [pc, #36]	@ (8009f74 <LmhpComplianceInit+0x54>)
 8009f4e:	2201      	movs	r2, #1
 8009f50:	701a      	strb	r2, [r3, #0]
 8009f52:	e006      	b.n	8009f62 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8009f54:	4b06      	ldr	r3, [pc, #24]	@ (8009f70 <LmhpComplianceInit+0x50>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8009f5a:	4b06      	ldr	r3, [pc, #24]	@ (8009f74 <LmhpComplianceInit+0x54>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	701a      	strb	r2, [r3, #0]
    }
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20001344 	.word	0x20001344
 8009f74:	20001330 	.word	0x20001330

08009f78 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8009f78:	b480      	push	{r7}
 8009f7a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8009f7c:	4b03      	ldr	r3, [pc, #12]	@ (8009f8c <LmhpComplianceIsInitialized+0x14>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	20001330 	.word	0x20001330

08009f90 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8009f90:	b480      	push	{r7}
 8009f92:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8009f94:	4b07      	ldr	r3, [pc, #28]	@ (8009fb4 <LmhpComplianceIsRunning+0x24>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	f083 0301 	eor.w	r3, r3, #1
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	e001      	b.n	8009faa <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 8009fa6:	4b03      	ldr	r3, [pc, #12]	@ (8009fb4 <LmhpComplianceIsRunning+0x24>)
 8009fa8:	785b      	ldrb	r3, [r3, #1]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	20001330 	.word	0x20001330

08009fb8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8009fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8009ffc <LmhpComplianceOnMlmeConfirm+0x44>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	f083 0301 	eor.w	r3, r3, #1
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10f      	bne.n	8009fee <LmhpComplianceOnMlmeConfirm+0x36>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	d10c      	bne.n	8009ff0 <LmhpComplianceOnMlmeConfirm+0x38>
    {
        ComplianceTestState.LinkCheck = true;
 8009fd6:	4b09      	ldr	r3, [pc, #36]	@ (8009ffc <LmhpComplianceOnMlmeConfirm+0x44>)
 8009fd8:	2201      	movs	r2, #1
 8009fda:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	7c1a      	ldrb	r2, [r3, #16]
 8009fe0:	4b06      	ldr	r3, [pc, #24]	@ (8009ffc <LmhpComplianceOnMlmeConfirm+0x44>)
 8009fe2:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	7c5a      	ldrb	r2, [r3, #17]
 8009fe8:	4b04      	ldr	r3, [pc, #16]	@ (8009ffc <LmhpComplianceOnMlmeConfirm+0x44>)
 8009fea:	741a      	strb	r2, [r3, #16]
 8009fec:	e000      	b.n	8009ff0 <LmhpComplianceOnMlmeConfirm+0x38>
        return;
 8009fee:	bf00      	nop
    }
}
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	20001330 	.word	0x20001330

0800a000 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800a006:	4b2e      	ldr	r3, [pc, #184]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	f083 0301 	eor.w	r3, r3, #1
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800a014:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a018:	e04e      	b.n	800a0b8 <LmhpComplianceTxProcess+0xb8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800a01a:	4b29      	ldr	r3, [pc, #164]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a01c:	7b9b      	ldrb	r3, [r3, #14]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d019      	beq.n	800a056 <LmhpComplianceTxProcess+0x56>
    {
        ComplianceTestState.LinkCheck = false;
 800a022:	4b27      	ldr	r3, [pc, #156]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a024:	2200      	movs	r2, #0
 800a026:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800a028:	4b25      	ldr	r3, [pc, #148]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a02a:	2203      	movs	r2, #3
 800a02c:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = 5;
 800a02e:	4b24      	ldr	r3, [pc, #144]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	2205      	movs	r2, #5
 800a034:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800a036:	4b22      	ldr	r3, [pc, #136]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	3301      	adds	r3, #1
 800a03c:	4a20      	ldr	r2, [pc, #128]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a03e:	7bd2      	ldrb	r2, [r2, #15]
 800a040:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800a042:	4b1f      	ldr	r3, [pc, #124]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	3302      	adds	r3, #2
 800a048:	4a1d      	ldr	r2, [pc, #116]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a04a:	7c12      	ldrb	r2, [r2, #16]
 800a04c:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800a04e:	4b1c      	ldr	r3, [pc, #112]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a050:	2201      	movs	r2, #1
 800a052:	709a      	strb	r2, [r3, #2]
 800a054:	e01c      	b.n	800a090 <LmhpComplianceTxProcess+0x90>
    }
    else
    {
        switch( ComplianceTestState.State )
 800a056:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a058:	789b      	ldrb	r3, [r3, #2]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d005      	beq.n	800a06a <LmhpComplianceTxProcess+0x6a>
 800a05e:	2b04      	cmp	r3, #4
 800a060:	d116      	bne.n	800a090 <LmhpComplianceTxProcess+0x90>
        {
        case 4:
            ComplianceTestState.State = 1;
 800a062:	4b17      	ldr	r3, [pc, #92]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a064:	2201      	movs	r2, #1
 800a066:	709a      	strb	r2, [r3, #2]
            break;
 800a068:	e012      	b.n	800a090 <LmhpComplianceTxProcess+0x90>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800a06a:	4b15      	ldr	r3, [pc, #84]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a06c:	2202      	movs	r2, #2
 800a06e:	71da      	strb	r2, [r3, #7]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800a070:	4b13      	ldr	r3, [pc, #76]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a072:	899b      	ldrh	r3, [r3, #12]
 800a074:	0a1b      	lsrs	r3, r3, #8
 800a076:	b29a      	uxth	r2, r3
 800a078:	4b11      	ldr	r3, [pc, #68]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	b2d2      	uxtb	r2, r2
 800a07e:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800a080:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a082:	899a      	ldrh	r2, [r3, #12]
 800a084:	4b0e      	ldr	r3, [pc, #56]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	3301      	adds	r3, #1
 800a08a:	b2d2      	uxtb	r2, r2
 800a08c:	701a      	strb	r2, [r3, #0]
            break;
 800a08e:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800a090:	23e0      	movs	r3, #224	@ 0xe0
 800a092:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800a094:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a096:	79db      	ldrb	r3, [r3, #7]
    LmHandlerAppData_t appData =
 800a098:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800a09a:	4b09      	ldr	r3, [pc, #36]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a09c:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800a09e:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800a0a0:	4808      	ldr	r0, [pc, #32]	@ (800a0c4 <LmhpComplianceTxProcess+0xc4>)
 800a0a2:	f00d fb87 	bl	80177b4 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed );
 800a0a6:	4b08      	ldr	r3, [pc, #32]	@ (800a0c8 <LmhpComplianceTxProcess+0xc8>)
 800a0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0aa:	4a05      	ldr	r2, [pc, #20]	@ (800a0c0 <LmhpComplianceTxProcess+0xc0>)
 800a0ac:	7912      	ldrb	r2, [r2, #4]
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	463a      	mov	r2, r7
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	4798      	blx	r3
 800a0b6:	4603      	mov	r3, r0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	20001330 	.word	0x20001330
 800a0c4:	20001310 	.word	0x20001310
 800a0c8:	20000298 	.word	0x20000298

0800a0cc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800a0cc:	b590      	push	{r4, r7, lr}
 800a0ce:	b0a1      	sub	sp, #132	@ 0x84
 800a0d0:	af04      	add	r7, sp, #16
 800a0d2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800a0d4:	4ba6      	ldr	r3, [pc, #664]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	f083 0301 	eor.w	r3, r3, #1
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f040 81e1 	bne.w	800a4a6 <LmhpComplianceOnMcpsIndication+0x3da>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7b5b      	ldrb	r3, [r3, #13]
 800a0e8:	f083 0301 	eor.w	r3, r3, #1
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f040 81db 	bne.w	800a4aa <LmhpComplianceOnMcpsIndication+0x3de>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	78db      	ldrb	r3, [r3, #3]
 800a0f8:	2be0      	cmp	r3, #224	@ 0xe0
 800a0fa:	f040 81d8 	bne.w	800a4ae <LmhpComplianceOnMcpsIndication+0x3e2>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800a0fe:	4b9c      	ldr	r3, [pc, #624]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a100:	785b      	ldrb	r3, [r3, #1]
 800a102:	f083 0301 	eor.w	r3, r3, #1
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d06d      	beq.n	800a1e8 <LmhpComplianceOnMcpsIndication+0x11c>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	7b1b      	ldrb	r3, [r3, #12]
 800a110:	2b04      	cmp	r3, #4
 800a112:	f040 81d1 	bne.w	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	f040 81cb 	bne.w	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	3301      	adds	r3, #1
 800a128:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	f040 81c4 	bne.w	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	3302      	adds	r3, #2
 800a136:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800a138:	2b01      	cmp	r3, #1
 800a13a:	f040 81bd 	bne.w	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	3303      	adds	r3, #3
 800a144:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800a146:	2b01      	cmp	r3, #1
 800a148:	f040 81b6 	bne.w	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800a14c:	4b88      	ldr	r3, [pc, #544]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a14e:	2200      	movs	r2, #0
 800a150:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.TxPending = false;
 800a152:	4b87      	ldr	r3, [pc, #540]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a154:	2200      	movs	r2, #0
 800a156:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800a158:	4b85      	ldr	r3, [pc, #532]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a15a:	22e0      	movs	r2, #224	@ 0xe0
 800a15c:	715a      	strb	r2, [r3, #5]
            ComplianceTestState.DataBufferSize = 2;
 800a15e:	4b84      	ldr	r3, [pc, #528]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a160:	2202      	movs	r2, #2
 800a162:	71da      	strb	r2, [r3, #7]
            ComplianceTestState.DownLinkCounter = 0;
 800a164:	4b82      	ldr	r3, [pc, #520]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a166:	2200      	movs	r2, #0
 800a168:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800a16a:	4b81      	ldr	r3, [pc, #516]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800a170:	4b7f      	ldr	r3, [pc, #508]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a172:	2200      	movs	r2, #0
 800a174:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800a176:	4b7e      	ldr	r3, [pc, #504]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a178:	2200      	movs	r2, #0
 800a17a:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800a17c:	4b7c      	ldr	r3, [pc, #496]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a17e:	2201      	movs	r2, #1
 800a180:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800a182:	4b7b      	ldr	r3, [pc, #492]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a184:	2201      	movs	r2, #1
 800a186:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800a188:	2304      	movs	r3, #4
 800a18a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 800a18c:	2301      	movs	r3, #1
 800a18e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a190:	f107 030c 	add.w	r3, r7, #12
 800a194:	4618      	mov	r0, r3
 800a196:	f005 fae5 	bl	800f764 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800a19a:	2000      	movs	r0, #0
 800a19c:	f006 fb48 	bl	8010830 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800a1a0:	4b74      	ldr	r3, [pc, #464]	@ (800a374 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <LmhpComplianceOnMcpsIndication+0xe6>
            {
                LmhpComplianceParams->StopPeripherals( );
 800a1aa:	4b72      	ldr	r3, [pc, #456]	@ (800a374 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	9302      	str	r3, [sp, #8]
 800a1b6:	4b70      	ldr	r3, [pc, #448]	@ (800a378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800a1b8:	9301      	str	r3, [sp, #4]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1c2:	f04f 0300 	mov.w	r3, #0
 800a1c6:	486d      	ldr	r0, [pc, #436]	@ (800a37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800a1c8:	f00d fab8 	bl	801773c <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800a1cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1d0:	f04f 0300 	mov.w	r3, #0
 800a1d4:	4869      	ldr	r0, [pc, #420]	@ (800a37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800a1d6:	f00d fbe1 	bl	801799c <UTIL_TIMER_SetPeriod>
  __ASM volatile ("cpsid i" : : : "memory");
 800a1da:	b672      	cpsid	i
}
 800a1dc:	bf00      	nop

            // Confirm compliance test protocol activation
            CRITICAL_SECTION_BEGIN( );
            ComplianceTestState.TxPending = true; //LmhpComplianceTxProcess( );
 800a1de:	4b64      	ldr	r3, [pc, #400]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	70da      	strb	r2, [r3, #3]
  __ASM volatile ("cpsie i" : : : "memory");
 800a1e4:	b662      	cpsie	i
}
 800a1e6:	e167      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        }
    }
    else
    {
        // Increment the compliance certification protocol downlink counter
        ComplianceTestState.DownLinkCounter++;
 800a1e8:	4b61      	ldr	r3, [pc, #388]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a1ea:	899b      	ldrh	r3, [r3, #12]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	4b5f      	ldr	r3, [pc, #380]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a1f2:	819a      	strh	r2, [r3, #12]

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	781a      	ldrb	r2, [r3, #0]
 800a1fa:	4b5d      	ldr	r3, [pc, #372]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a1fc:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800a1fe:	4b5c      	ldr	r3, [pc, #368]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a200:	789b      	ldrb	r3, [r3, #2]
 800a202:	2b0a      	cmp	r3, #10
 800a204:	f200 8155 	bhi.w	800a4b2 <LmhpComplianceOnMcpsIndication+0x3e6>
 800a208:	a201      	add	r2, pc, #4	@ (adr r2, 800a210 <LmhpComplianceOnMcpsIndication+0x144>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a23d 	.word	0x0800a23d
 800a214:	0800a287 	.word	0x0800a287
 800a218:	0800a28f 	.word	0x0800a28f
 800a21c:	0800a29d 	.word	0x0800a29d
 800a220:	0800a2ab 	.word	0x0800a2ab
 800a224:	0800a303 	.word	0x0800a303
 800a228:	0800a327 	.word	0x0800a327
 800a22c:	0800a385 	.word	0x0800a385
 800a230:	0800a43b 	.word	0x0800a43b
 800a234:	0800a45f 	.word	0x0800a45f
 800a238:	0800a479 	.word	0x0800a479
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800a23c:	484f      	ldr	r0, [pc, #316]	@ (800a37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800a23e:	f00d fb3d 	bl	80178bc <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800a242:	4b4b      	ldr	r3, [pc, #300]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a244:	2200      	movs	r2, #0
 800a246:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800a248:	4b49      	ldr	r3, [pc, #292]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800a24e:	2304      	movs	r3, #4
 800a250:	733b      	strb	r3, [r7, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800a252:	4b48      	ldr	r3, [pc, #288]	@ (800a374 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	743b      	strb	r3, [r7, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800a25a:	f107 030c 	add.w	r3, r7, #12
 800a25e:	4618      	mov	r0, r3
 800a260:	f005 fa80 	bl	800f764 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800a264:	4b43      	ldr	r3, [pc, #268]	@ (800a374 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	785b      	ldrb	r3, [r3, #1]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f006 fae0 	bl	8010830 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800a270:	4b40      	ldr	r3, [pc, #256]	@ (800a374 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 811d 	beq.w	800a4b6 <LmhpComplianceOnMcpsIndication+0x3ea>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800a27c:	4b3d      	ldr	r3, [pc, #244]	@ (800a374 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	4798      	blx	r3
                }
            }
            break;
 800a284:	e117      	b.n	800a4b6 <LmhpComplianceOnMcpsIndication+0x3ea>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800a286:	4b3a      	ldr	r3, [pc, #232]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a288:	2202      	movs	r2, #2
 800a28a:	71da      	strb	r2, [r3, #7]
            break;
 800a28c:	e114      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800a28e:	4b38      	ldr	r3, [pc, #224]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a290:	2201      	movs	r2, #1
 800a292:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.State = 1;
 800a294:	4b36      	ldr	r3, [pc, #216]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a296:	2201      	movs	r2, #1
 800a298:	709a      	strb	r2, [r3, #2]
            break;
 800a29a:	e10d      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800a29c:	4b34      	ldr	r3, [pc, #208]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.State = 1;
 800a2a2:	4b33      	ldr	r3, [pc, #204]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	709a      	strb	r2, [r3, #2]
            break;
 800a2a8:	e106      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	7b1a      	ldrb	r2, [r3, #12]
 800a2ae:	4b30      	ldr	r3, [pc, #192]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a2b0:	71da      	strb	r2, [r3, #7]

            ComplianceTestState.DataBuffer[0] = 4;
 800a2b2:	4b2f      	ldr	r3, [pc, #188]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	2204      	movs	r2, #4
 800a2b8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800a2c0:	e012      	b.n	800a2e8 <LmhpComplianceOnMcpsIndication+0x21c>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	689a      	ldr	r2, [r3, #8]
 800a2c6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a2ca:	4413      	add	r3, r2
 800a2cc:	781a      	ldrb	r2, [r3, #0]
 800a2ce:	4b28      	ldr	r3, [pc, #160]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a2d0:	6899      	ldr	r1, [r3, #8]
 800a2d2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a2d6:	440b      	add	r3, r1
 800a2d8:	3201      	adds	r2, #1
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800a2de:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800a2e8:	4b21      	ldr	r3, [pc, #132]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a2ea:	799a      	ldrb	r2, [r3, #6]
 800a2ec:	4b20      	ldr	r3, [pc, #128]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a2ee:	79db      	ldrb	r3, [r3, #7]
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	bf28      	it	cs
 800a2f4:	4613      	movcs	r3, r2
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d3e0      	bcc.n	800a2c2 <LmhpComplianceOnMcpsIndication+0x1f6>
            }
            break;
 800a300:	e0da      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800a302:	2303      	movs	r3, #3
 800a304:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

                LmhpCompliancePackage.OnMacMlmeRequest( LoRaMacMlmeRequest( &mlmeReq ), &mlmeReq );
 800a308:	4b1d      	ldr	r3, [pc, #116]	@ (800a380 <LmhpComplianceOnMcpsIndication+0x2b4>)
 800a30a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a30c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a310:	4618      	mov	r0, r3
 800a312:	f006 f85b 	bl	80103cc <LoRaMacMlmeRequest>
 800a316:	4603      	mov	r3, r0
 800a318:	461a      	mov	r2, r3
 800a31a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a31e:	4619      	mov	r1, r3
 800a320:	4610      	mov	r0, r2
 800a322:	47a0      	blx	r4
            }
            break;
 800a324:	e0c8      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
            {
                MibRequestConfirm_t mibReq;

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800a326:	4b12      	ldr	r3, [pc, #72]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a328:	2200      	movs	r2, #0
 800a32a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800a32c:	4b10      	ldr	r3, [pc, #64]	@ (800a370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800a32e:	2200      	movs	r2, #0
 800a330:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800a332:	2304      	movs	r3, #4
 800a334:	733b      	strb	r3, [r7, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800a336:	4b0f      	ldr	r3, [pc, #60]	@ (800a374 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	743b      	strb	r3, [r7, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800a33e:	f107 030c 	add.w	r3, r7, #12
 800a342:	4618      	mov	r0, r3
 800a344:	f005 fa0e 	bl	800f764 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800a348:	4b0a      	ldr	r3, [pc, #40]	@ (800a374 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	785b      	ldrb	r3, [r3, #1]
 800a34e:	4618      	mov	r0, r3
 800a350:	f006 fa6e 	bl	8010830 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800a354:	4b07      	ldr	r3, [pc, #28]	@ (800a374 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <LmhpComplianceOnMcpsIndication+0x29a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800a35e:	4b05      	ldr	r3, [pc, #20]	@ (800a374 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( true );
 800a366:	4b06      	ldr	r3, [pc, #24]	@ (800a380 <LmhpComplianceOnMcpsIndication+0x2b4>)
 800a368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36a:	2001      	movs	r0, #1
 800a36c:	4798      	blx	r3
            }
            break;
 800a36e:	e0a3      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
 800a370:	20001330 	.word	0x20001330
 800a374:	20001344 	.word	0x20001344
 800a378:	0800a4f9 	.word	0x0800a4f9
 800a37c:	20001310 	.word	0x20001310
 800a380:	20000298 	.word	0x20000298
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	7b1b      	ldrb	r3, [r3, #12]
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d113      	bne.n	800a3b4 <LmhpComplianceOnMcpsIndication+0x2e8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800a38c:	2304      	movs	r3, #4
 800a38e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	3301      	adds	r3, #1
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	021b      	lsls	r3, r3, #8
 800a39c:	b21a      	sxth	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	3302      	adds	r3, #2
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	b21b      	sxth	r3, r3
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	b21b      	sxth	r3, r3
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800a3b2:	e030      	b.n	800a416 <LmhpComplianceOnMcpsIndication+0x34a>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	7b1b      	ldrb	r3, [r3, #12]
 800a3b8:	2b07      	cmp	r3, #7
 800a3ba:	d12c      	bne.n	800a416 <LmhpComplianceOnMcpsIndication+0x34a>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800a3bc:	2305      	movs	r3, #5
 800a3be:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	021b      	lsls	r3, r3, #8
 800a3cc:	b21a      	sxth	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	b21b      	sxth	r3, r3
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	b21b      	sxth	r3, r3
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	3303      	adds	r3, #3
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	041a      	lsls	r2, r3, #16
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	6892      	ldr	r2, [r2, #8]
 800a3fc:	3205      	adds	r2, #5
 800a3fe:	7812      	ldrb	r2, [r2, #0]
 800a400:	4313      	orrs	r3, r2
 800a402:	461a      	mov	r2, r3
 800a404:	2364      	movs	r3, #100	@ 0x64
 800a406:	fb02 f303 	mul.w	r3, r2, r3
 800a40a:	657b      	str	r3, [r7, #84]	@ 0x54
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	799b      	ldrb	r3, [r3, #6]
 800a412:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
                }
                LmhpCompliancePackage.OnMacMlmeRequest( LoRaMacMlmeRequest( &mlmeReq ), &mlmeReq );
 800a416:	4b2a      	ldr	r3, [pc, #168]	@ (800a4c0 <LmhpComplianceOnMcpsIndication+0x3f4>)
 800a418:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a41a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a41e:	4618      	mov	r0, r3
 800a420:	f005 ffd4 	bl	80103cc <LoRaMacMlmeRequest>
 800a424:	4603      	mov	r3, r0
 800a426:	461a      	mov	r2, r3
 800a428:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a42c:	4619      	mov	r1, r3
 800a42e:	4610      	mov	r0, r2
 800a430:	47a0      	blx	r4
                ComplianceTestState.State = 1;
 800a432:	4b24      	ldr	r3, [pc, #144]	@ (800a4c4 <LmhpComplianceOnMcpsIndication+0x3f8>)
 800a434:	2201      	movs	r2, #1
 800a436:	709a      	strb	r2, [r3, #2]
            }
            break;
 800a438:	e03e      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800a43a:	2309      	movs	r3, #9
 800a43c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

                LmhpCompliancePackage.OnMacMlmeRequest( LoRaMacMlmeRequest( &mlmeReq ), &mlmeReq );
 800a440:	4b1f      	ldr	r3, [pc, #124]	@ (800a4c0 <LmhpComplianceOnMcpsIndication+0x3f4>)
 800a442:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a444:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a448:	4618      	mov	r0, r3
 800a44a:	f005 ffbf 	bl	80103cc <LoRaMacMlmeRequest>
 800a44e:	4603      	mov	r3, r0
 800a450:	461a      	mov	r2, r3
 800a452:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a456:	4619      	mov	r1, r3
 800a458:	4610      	mov	r0, r2
 800a45a:	47a0      	blx	r4
            }
            break;
 800a45c:	e02c      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800a45e:	2300      	movs	r3, #0
 800a460:	733b      	strb	r3, [r7, #12]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	3301      	adds	r3, #1
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	743b      	strb	r3, [r7, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800a46c:	f107 030c 	add.w	r3, r7, #12
 800a470:	4618      	mov	r0, r3
 800a472:	f005 f977 	bl	800f764 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800a476:	e01f      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800a478:	230c      	movs	r3, #12
 800a47a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	785b      	ldrb	r3, [r3, #1]
 800a484:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

                LmhpCompliancePackage.OnMacMlmeRequest( LoRaMacMlmeRequest( &mlmeReq ), &mlmeReq );
 800a488:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c0 <LmhpComplianceOnMcpsIndication+0x3f4>)
 800a48a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a48c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a490:	4618      	mov	r0, r3
 800a492:	f005 ff9b 	bl	80103cc <LoRaMacMlmeRequest>
 800a496:	4603      	mov	r3, r0
 800a498:	461a      	mov	r2, r3
 800a49a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	47a0      	blx	r4
            }
            break;
 800a4a4:	e008      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        return;
 800a4a6:	bf00      	nop
 800a4a8:	e006      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        return;
 800a4aa:	bf00      	nop
 800a4ac:	e004      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        return;
 800a4ae:	bf00      	nop
 800a4b0:	e002      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
        default:
            break;
 800a4b2:	bf00      	nop
 800a4b4:	e000      	b.n	800a4b8 <LmhpComplianceOnMcpsIndication+0x3ec>
            break;
 800a4b6:	bf00      	nop
        }
    }
}
 800a4b8:	3774      	adds	r7, #116	@ 0x74
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd90      	pop	{r4, r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000298 	.word	0x20000298
 800a4c4:	20001330 	.word	0x20001330

0800a4c8 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a4ce:	b672      	cpsid	i
}
 800a4d0:	bf00      	nop
    bool isPending;

    CRITICAL_SECTION_BEGIN( );
    isPending = ComplianceTestState.TxPending;
 800a4d2:	4b08      	ldr	r3, [pc, #32]	@ (800a4f4 <LmhpComplianceProcess+0x2c>)
 800a4d4:	78db      	ldrb	r3, [r3, #3]
 800a4d6:	71fb      	strb	r3, [r7, #7]
    ComplianceTestState.TxPending = false;
 800a4d8:	4b06      	ldr	r3, [pc, #24]	@ (800a4f4 <LmhpComplianceProcess+0x2c>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	70da      	strb	r2, [r3, #3]
  __ASM volatile ("cpsie i" : : : "memory");
 800a4de:	b662      	cpsie	i
}
 800a4e0:	bf00      	nop
    CRITICAL_SECTION_END( );
    if( isPending == true )
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <LmhpComplianceProcess+0x24>
    {
        LmhpComplianceTxProcess( );
 800a4e8:	f7ff fd8a 	bl	800a000 <LmhpComplianceTxProcess>
    }
}
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	20001330 	.word	0x20001330

0800a4f8 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
    ComplianceTestState.TxPending = true;
 800a500:	4b04      	ldr	r3, [pc, #16]	@ (800a514 <OnComplianceTxNextPacketTimerEvent+0x1c>)
 800a502:	2201      	movs	r2, #1
 800a504:	70da      	strb	r2, [r3, #3]
}
 800a506:	bf00      	nop
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	20001330 	.word	0x20001330

0800a518 <LmhpFragmentationPackageFactory>:
    .OnDeviceTimeRequest = NULL,                               // To be initialized by LmHandler
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
};

LmhPackage_t *LmhpFragmentationPackageFactory( void )
{
 800a518:	b480      	push	{r7}
 800a51a:	af00      	add	r7, sp, #0
    return &LmhpFragmentationPackage;
 800a51c:	4b02      	ldr	r3, [pc, #8]	@ (800a528 <LmhpFragmentationPackageFactory+0x10>)
}
 800a51e:	4618      	mov	r0, r3
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	200002d4 	.word	0x200002d4

0800a52c <LmhpFragmentationInit>:

static void LmhpFragmentationInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	4613      	mov	r3, r2
 800a538:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d012      	beq.n	800a566 <LmhpFragmentationInit+0x3a>
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00f      	beq.n	800a566 <LmhpFragmentationInit+0x3a>
    {
        LmhpFragmentationParams = ( LmhpFragmentationParams_t* )params;
 800a546:	4a10      	ldr	r2, [pc, #64]	@ (800a588 <LmhpFragmentationInit+0x5c>)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6013      	str	r3, [r2, #0]
        LmhpFragmentationState.DataBuffer = dataBuffer;
 800a54c:	4a0f      	ldr	r2, [pc, #60]	@ (800a58c <LmhpFragmentationInit+0x60>)
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	6053      	str	r3, [r2, #4]
        LmhpFragmentationState.DataBufferMaxSize = dataBufferMaxSize;
 800a552:	4a0e      	ldr	r2, [pc, #56]	@ (800a58c <LmhpFragmentationInit+0x60>)
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	7093      	strb	r3, [r2, #2]
        LmhpFragmentationState.Initialized = true;
 800a558:	4b0c      	ldr	r3, [pc, #48]	@ (800a58c <LmhpFragmentationInit+0x60>)
 800a55a:	2201      	movs	r2, #1
 800a55c:	701a      	strb	r2, [r3, #0]
        LmhpFragmentationState.IsRunning = true;
 800a55e:	4b0b      	ldr	r3, [pc, #44]	@ (800a58c <LmhpFragmentationInit+0x60>)
 800a560:	2201      	movs	r2, #1
 800a562:	705a      	strb	r2, [r3, #1]
 800a564:	e009      	b.n	800a57a <LmhpFragmentationInit+0x4e>
    }
    else
    {
        LmhpFragmentationParams = NULL;
 800a566:	4b08      	ldr	r3, [pc, #32]	@ (800a588 <LmhpFragmentationInit+0x5c>)
 800a568:	2200      	movs	r2, #0
 800a56a:	601a      	str	r2, [r3, #0]
        LmhpFragmentationState.IsRunning = false;
 800a56c:	4b07      	ldr	r3, [pc, #28]	@ (800a58c <LmhpFragmentationInit+0x60>)
 800a56e:	2200      	movs	r2, #0
 800a570:	705a      	strb	r2, [r3, #1]
        LmhpFragmentationState.Initialized = false;
 800a572:	4b06      	ldr	r3, [pc, #24]	@ (800a58c <LmhpFragmentationInit+0x60>)
 800a574:	2200      	movs	r2, #0
 800a576:	701a      	strb	r2, [r3, #0]
    }
}
 800a578:	bf00      	nop
 800a57a:	bf00      	nop
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	20001348 	.word	0x20001348
 800a58c:	2000134c 	.word	0x2000134c

0800a590 <LmhpFragmentationIsInitialized>:

static bool LmhpFragmentationIsInitialized( void )
{
 800a590:	b480      	push	{r7}
 800a592:	af00      	add	r7, sp, #0
    return LmhpFragmentationState.Initialized;
 800a594:	4b03      	ldr	r3, [pc, #12]	@ (800a5a4 <LmhpFragmentationIsInitialized+0x14>)
 800a596:	781b      	ldrb	r3, [r3, #0]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	2000134c 	.word	0x2000134c

0800a5a8 <LmhpFragmentationIsRunning>:

static bool LmhpFragmentationIsRunning( void )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	af00      	add	r7, sp, #0
    if( LmhpFragmentationState.Initialized == false )
 800a5ac:	4b07      	ldr	r3, [pc, #28]	@ (800a5cc <LmhpFragmentationIsRunning+0x24>)
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	f083 0301 	eor.w	r3, r3, #1
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d001      	beq.n	800a5be <LmhpFragmentationIsRunning+0x16>
    {
        return false;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	e001      	b.n	800a5c2 <LmhpFragmentationIsRunning+0x1a>
    }

    return LmhpFragmentationState.IsRunning;
 800a5be:	4b03      	ldr	r3, [pc, #12]	@ (800a5cc <LmhpFragmentationIsRunning+0x24>)
 800a5c0:	785b      	ldrb	r3, [r3, #1]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	2000134c 	.word	0x2000134c

0800a5d0 <LmhpFragmentationProcess>:

static void LmhpFragmentationProcess( void )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0
    // TODO: Start a timer to randomly delay the answer

}
 800a5d4:	bf00      	nop
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
	...

0800a5e0 <LmhpFragmentationOnMcpsIndication>:

static void LmhpFragmentationOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800a5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5e2:	b091      	sub	sp, #68	@ 0x44
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
    uint8_t cmdIndex = 0;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t dataBufferIndex = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    bool isAnswerDelayed = false;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    while( cmdIndex < mcpsIndication->BufferSize )
 800a5fa:	e33e      	b.n	800ac7a <LmhpFragmentationOnMcpsIndication+0x69a>
    {
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a604:	1c59      	adds	r1, r3, #1
 800a606:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a60a:	4413      	add	r3, r2
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b08      	cmp	r3, #8
 800a610:	f200 8324 	bhi.w	800ac5c <LmhpFragmentationOnMcpsIndication+0x67c>
 800a614:	a201      	add	r2, pc, #4	@ (adr r2, 800a61c <LmhpFragmentationOnMcpsIndication+0x3c>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a641 	.word	0x0800a641
 800a620:	0800a689 	.word	0x0800a689
 800a624:	0800a7e9 	.word	0x0800a7e9
 800a628:	0800a9c7 	.word	0x0800a9c7
 800a62c:	0800ac5d 	.word	0x0800ac5d
 800a630:	0800ac5d 	.word	0x0800ac5d
 800a634:	0800ac5d 	.word	0x0800ac5d
 800a638:	0800ac5d 	.word	0x0800ac5d
 800a63c:	0800aa77 	.word	0x0800aa77
        {
            case FRAGMENTATION_PKG_VERSION_REQ:
            {
                if( mcpsIndication->Multicast == 1 )
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	789b      	ldrb	r3, [r3, #2]
 800a644:	2b01      	cmp	r3, #1
 800a646:	f000 830b 	beq.w	800ac60 <LmhpFragmentationOnMcpsIndication+0x680>
                {
                    // Multicast channel. Don't process command.
                    break;
                }
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_PKG_VERSION_ANS;
 800a64a:	4b65      	ldr	r3, [pc, #404]	@ (800a7e0 <LmhpFragmentationOnMcpsIndication+0x200>)
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a652:	1c59      	adds	r1, r3, #1
 800a654:	f887 103e 	strb.w	r1, [r7, #62]	@ 0x3e
 800a658:	4413      	add	r3, r2
 800a65a:	2200      	movs	r2, #0
 800a65c:	701a      	strb	r2, [r3, #0]
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_ID;
 800a65e:	4b60      	ldr	r3, [pc, #384]	@ (800a7e0 <LmhpFragmentationOnMcpsIndication+0x200>)
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a666:	1c59      	adds	r1, r3, #1
 800a668:	f887 103e 	strb.w	r1, [r7, #62]	@ 0x3e
 800a66c:	4413      	add	r3, r2
 800a66e:	2203      	movs	r2, #3
 800a670:	701a      	strb	r2, [r3, #0]
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_VERSION;
 800a672:	4b5b      	ldr	r3, [pc, #364]	@ (800a7e0 <LmhpFragmentationOnMcpsIndication+0x200>)
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a67a:	1c59      	adds	r1, r3, #1
 800a67c:	f887 103e 	strb.w	r1, [r7, #62]	@ 0x3e
 800a680:	4413      	add	r3, r2
 800a682:	2201      	movs	r2, #1
 800a684:	701a      	strb	r2, [r3, #0]
                break;
 800a686:	e2f8      	b.n	800ac7a <LmhpFragmentationOnMcpsIndication+0x69a>
            }
            case FRAGMENTATION_FRAG_STATUS_REQ:
            {
                uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	689a      	ldr	r2, [r3, #8]
 800a68c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a690:	1c59      	adds	r1, r3, #1
 800a692:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a696:	4413      	add	r3, r2
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                uint8_t participants = fragIndex & 0x01;
 800a69e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                fragIndex >>= 1;
 800a6aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a6ae:	085b      	lsrs	r3, r3, #1
 800a6b0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus( );
 800a6b4:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a6b8:	494a      	ldr	r1, [pc, #296]	@ (800a7e4 <LmhpFragmentationOnMcpsIndication+0x204>)
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	005b      	lsls	r3, r3, #1
 800a6be:	4413      	add	r3, r2
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	440b      	add	r3, r1
 800a6c4:	f103 0408 	add.w	r4, r3, #8
 800a6c8:	463b      	mov	r3, r7
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe ff3a 	bl	8009544 <FragDecoderGetStatus>
 800a6d0:	1d23      	adds	r3, r4, #4
 800a6d2:	463a      	mov	r2, r7
 800a6d4:	6810      	ldr	r0, [r2, #0]
 800a6d6:	6851      	ldr	r1, [r2, #4]
 800a6d8:	c303      	stmia	r3!, {r0, r1}

                if( ( participants == 1 ) ||
 800a6da:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d011      	beq.n	800a706 <LmhpFragmentationOnMcpsIndication+0x126>
 800a6e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f040 82bc 	bne.w	800ac64 <LmhpFragmentationOnMcpsIndication+0x684>
                    ( ( participants == 0 ) && ( FragSessionData[fragIndex].FragDecoderStatus.FragNbLost > 0 ) ) )
 800a6ec:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a6f0:	493c      	ldr	r1, [pc, #240]	@ (800a7e4 <LmhpFragmentationOnMcpsIndication+0x204>)
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	4413      	add	r3, r2
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	440b      	add	r3, r1
 800a6fc:	330e      	adds	r3, #14
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	f000 82af 	beq.w	800ac64 <LmhpFragmentationOnMcpsIndication+0x684>
                {
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_STATUS_ANS;
 800a706:	4b36      	ldr	r3, [pc, #216]	@ (800a7e0 <LmhpFragmentationOnMcpsIndication+0x200>)
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a70e:	1c59      	adds	r1, r3, #1
 800a710:	f887 103e 	strb.w	r1, [r7, #62]	@ 0x3e
 800a714:	4413      	add	r3, r2
 800a716:	2201      	movs	r2, #1
 800a718:	701a      	strb	r2, [r3, #0]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = ( fragIndex << 14 ) |
 800a71a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a71e:	039b      	lsls	r3, r3, #14
 800a720:	b259      	sxtb	r1, r3
                                                                           ( ( FragSessionData[fragIndex].FragDecoderStatus.FragNbRx >> 8 ) & 0x3F );
 800a722:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a726:	482f      	ldr	r0, [pc, #188]	@ (800a7e4 <LmhpFragmentationOnMcpsIndication+0x204>)
 800a728:	4613      	mov	r3, r2
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	4413      	add	r3, r2
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	4403      	add	r3, r0
 800a732:	330c      	adds	r3, #12
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	0a1b      	lsrs	r3, r3, #8
 800a738:	b29b      	uxth	r3, r3
 800a73a:	b25b      	sxtb	r3, r3
 800a73c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a740:	b25b      	sxtb	r3, r3
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = ( fragIndex << 14 ) |
 800a742:	430b      	orrs	r3, r1
 800a744:	b259      	sxtb	r1, r3
 800a746:	4b26      	ldr	r3, [pc, #152]	@ (800a7e0 <LmhpFragmentationOnMcpsIndication+0x200>)
 800a748:	685a      	ldr	r2, [r3, #4]
 800a74a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a74e:	1c58      	adds	r0, r3, #1
 800a750:	f887 003e 	strb.w	r0, [r7, #62]	@ 0x3e
 800a754:	4413      	add	r3, r2
 800a756:	b2ca      	uxtb	r2, r1
 800a758:	701a      	strb	r2, [r3, #0]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.FragNbRx & 0xFF;
 800a75a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a75e:	4921      	ldr	r1, [pc, #132]	@ (800a7e4 <LmhpFragmentationOnMcpsIndication+0x204>)
 800a760:	4613      	mov	r3, r2
 800a762:	005b      	lsls	r3, r3, #1
 800a764:	4413      	add	r3, r2
 800a766:	00db      	lsls	r3, r3, #3
 800a768:	440b      	add	r3, r1
 800a76a:	330c      	adds	r3, #12
 800a76c:	8819      	ldrh	r1, [r3, #0]
 800a76e:	4b1c      	ldr	r3, [pc, #112]	@ (800a7e0 <LmhpFragmentationOnMcpsIndication+0x200>)
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a776:	1c58      	adds	r0, r3, #1
 800a778:	f887 003e 	strb.w	r0, [r7, #62]	@ 0x3e
 800a77c:	4413      	add	r3, r2
 800a77e:	b2ca      	uxtb	r2, r1
 800a780:	701a      	strb	r2, [r3, #0]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.FragNbLost;
 800a782:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a786:	4917      	ldr	r1, [pc, #92]	@ (800a7e4 <LmhpFragmentationOnMcpsIndication+0x204>)
 800a788:	4613      	mov	r3, r2
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	4413      	add	r3, r2
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	440b      	add	r3, r1
 800a792:	330e      	adds	r3, #14
 800a794:	8819      	ldrh	r1, [r3, #0]
 800a796:	4b12      	ldr	r3, [pc, #72]	@ (800a7e0 <LmhpFragmentationOnMcpsIndication+0x200>)
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a79e:	1c58      	adds	r0, r3, #1
 800a7a0:	f887 003e 	strb.w	r0, [r7, #62]	@ 0x3e
 800a7a4:	4413      	add	r3, r2
 800a7a6:	b2ca      	uxtb	r2, r1
 800a7a8:	701a      	strb	r2, [r3, #0]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.MatrixError & 0x01;
 800a7aa:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a7ae:	490d      	ldr	r1, [pc, #52]	@ (800a7e4 <LmhpFragmentationOnMcpsIndication+0x204>)
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	4413      	add	r3, r2
 800a7b6:	00db      	lsls	r3, r3, #3
 800a7b8:	440b      	add	r3, r1
 800a7ba:	3312      	adds	r3, #18
 800a7bc:	781a      	ldrb	r2, [r3, #0]
 800a7be:	4b08      	ldr	r3, [pc, #32]	@ (800a7e0 <LmhpFragmentationOnMcpsIndication+0x200>)
 800a7c0:	6859      	ldr	r1, [r3, #4]
 800a7c2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a7c6:	1c58      	adds	r0, r3, #1
 800a7c8:	f887 003e 	strb.w	r0, [r7, #62]	@ 0x3e
 800a7cc:	440b      	add	r3, r1
 800a7ce:	f002 0201 	and.w	r2, r2, #1
 800a7d2:	b2d2      	uxtb	r2, r2
 800a7d4:	701a      	strb	r2, [r3, #0]
                    isAnswerDelayed = true;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                }
                break;
 800a7dc:	e242      	b.n	800ac64 <LmhpFragmentationOnMcpsIndication+0x684>
 800a7de:	bf00      	nop
 800a7e0:	2000134c 	.word	0x2000134c
 800a7e4:	20001358 	.word	0x20001358
            }
            case FRAGMENTATION_FRAG_SESSION_SETUP_REQ:
            {
                if( mcpsIndication->Multicast == 1 )
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	789b      	ldrb	r3, [r3, #2]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	f000 823b 	beq.w	800ac68 <LmhpFragmentationOnMcpsIndication+0x688>
                {
                    // Multicast channel. Don't process command.
                    break;
                }
                FragSessionData_t fragSessionData;
                uint8_t status = 0x00;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

                fragSessionData.FragGroupData.FragSession.Value = mcpsIndication->Buffer[cmdIndex++];
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	689a      	ldr	r2, [r3, #8]
 800a7fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a800:	1c59      	adds	r1, r3, #1
 800a802:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a806:	4413      	add	r3, r2
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	777b      	strb	r3, [r7, #29]
                
                fragSessionData.FragGroupData.FragNb =  ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x00FF;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a814:	1c59      	adds	r1, r3, #1
 800a816:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a81a:	4413      	add	r3, r2
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	83fb      	strh	r3, [r7, #30]
                fragSessionData.FragGroupData.FragNb |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0xFF00;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a828:	1c59      	adds	r1, r3, #1
 800a82a:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a82e:	4413      	add	r3, r2
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	021b      	lsls	r3, r3, #8
 800a834:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a838:	8bfa      	ldrh	r2, [r7, #30]
 800a83a:	b212      	sxth	r2, r2
 800a83c:	b21b      	sxth	r3, r3
 800a83e:	4313      	orrs	r3, r2
 800a840:	b21b      	sxth	r3, r3
 800a842:	b29b      	uxth	r3, r3
 800a844:	83fb      	strh	r3, [r7, #30]

                fragSessionData.FragGroupData.FragSize = mcpsIndication->Buffer[cmdIndex++];
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	689a      	ldr	r2, [r3, #8]
 800a84a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a84e:	1c59      	adds	r1, r3, #1
 800a850:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a854:	4413      	add	r3, r2
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	f887 3020 	strb.w	r3, [r7, #32]

                fragSessionData.FragGroupData.Control.Value = mcpsIndication->Buffer[cmdIndex++];
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	689a      	ldr	r2, [r3, #8]
 800a860:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a864:	1c59      	adds	r1, r3, #1
 800a866:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a86a:	4413      	add	r3, r2
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                fragSessionData.FragGroupData.Padding = mcpsIndication->Buffer[cmdIndex++];
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	689a      	ldr	r2, [r3, #8]
 800a876:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a87a:	1c59      	adds	r1, r3, #1
 800a87c:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a880:	4413      	add	r3, r2
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

                fragSessionData.FragGroupData.Descriptor =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	689a      	ldr	r2, [r3, #8]
 800a88c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a890:	1c59      	adds	r1, r3, #1
 800a892:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a896:	4413      	add	r3, r2
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	627b      	str	r3, [r7, #36]	@ 0x24
                fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	689a      	ldr	r2, [r3, #8]
 800a8a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a8a4:	1c59      	adds	r1, r3, #1
 800a8a6:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a8aa:	4413      	add	r3, r2
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	021b      	lsls	r3, r3, #8
 800a8b0:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b6:	4413      	add	r3, r2
 800a8b8:	627b      	str	r3, [r7, #36]	@ 0x24
                fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	689a      	ldr	r2, [r3, #8]
 800a8be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a8c2:	1c59      	adds	r1, r3, #1
 800a8c4:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a8c8:	4413      	add	r3, r2
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	041b      	lsls	r3, r3, #16
 800a8ce:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d4:	4413      	add	r3, r2
 800a8d6:	627b      	str	r3, [r7, #36]	@ 0x24
                fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	689a      	ldr	r2, [r3, #8]
 800a8dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a8e0:	1c59      	adds	r1, r3, #1
 800a8e2:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a8e6:	4413      	add	r3, r2
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	061a      	lsls	r2, r3, #24
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ee:	4413      	add	r3, r2
 800a8f0:	627b      	str	r3, [r7, #36]	@ 0x24

                if( fragSessionData.FragGroupData.Control.Fields.FragAlgo > 0 )
 800a8f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a8f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d005      	beq.n	800a90c <LmhpFragmentationOnMcpsIndication+0x32c>
                {
                    status |= 0x01; // Encoding unsupported
 800a900:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800a904:	f043 0301 	orr.w	r3, r3, #1
 800a908:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                }

#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
                if( ( fragSessionData.FragGroupData.FragNb * fragSessionData.FragGroupData.FragSize ) > FragDecoderGetMaxFileSize( ) )
 800a90c:	8bfb      	ldrh	r3, [r7, #30]
 800a90e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a912:	fb02 f303 	mul.w	r3, r2, r3
 800a916:	461c      	mov	r4, r3
 800a918:	f7fe fc20 	bl	800915c <FragDecoderGetMaxFileSize>
 800a91c:	4603      	mov	r3, r0
 800a91e:	429c      	cmp	r4, r3
 800a920:	d905      	bls.n	800a92e <LmhpFragmentationOnMcpsIndication+0x34e>
                {
                    status |= 0x02; // Not enough Memory
 800a922:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800a926:	f043 0302 	orr.w	r3, r3, #2
 800a92a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                if( ( fragSessionData.FragGroupData.FragNb * fragSessionData.FragGroupData.FragSize ) > LmhpFragmentationParams->BufferSize )
                {
                    status |= 0x02; // Not enough Memory
                }
#endif
                status |= ( fragSessionData.FragGroupData.FragSession.Fields.FragIndex << 6 ) & 0xC0;
 800a92e:	7f7b      	ldrb	r3, [r7, #29]
 800a930:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a934:	b2db      	uxtb	r3, r3
 800a936:	019b      	lsls	r3, r3, #6
 800a938:	b25a      	sxtb	r2, r3
 800a93a:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 800a93e:	4313      	orrs	r3, r2
 800a940:	b25b      	sxtb	r3, r3
 800a942:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                if( fragSessionData.FragGroupData.Descriptor != 0x01020304 )
                {
                    //status |= 0x08; // Wrong Descriptor
                }

                if( ( status & 0x0F ) == 0 )
 800a946:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800a94a:	f003 030f 	and.w	r3, r3, #15
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d120      	bne.n	800a994 <LmhpFragmentationOnMcpsIndication+0x3b4>
                {
                    // The FragSessionSetup is accepted
                    fragSessionData.FragGroupData.IsActive = true;
 800a952:	2301      	movs	r3, #1
 800a954:	773b      	strb	r3, [r7, #28]
                    fragSessionData.FragDecoderPorcessStatus = FRAG_SESSION_ONGOING;
 800a956:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a95a:	633b      	str	r3, [r7, #48]	@ 0x30
                    FragSessionData[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] = fragSessionData;
 800a95c:	7f7b      	ldrb	r3, [r7, #29]
 800a95e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a962:	b2db      	uxtb	r3, r3
 800a964:	4619      	mov	r1, r3
 800a966:	4ac1      	ldr	r2, [pc, #772]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800a968:	460b      	mov	r3, r1
 800a96a:	005b      	lsls	r3, r3, #1
 800a96c:	440b      	add	r3, r1
 800a96e:	00db      	lsls	r3, r3, #3
 800a970:	4413      	add	r3, r2
 800a972:	461d      	mov	r5, r3
 800a974:	f107 041c 	add.w	r4, r7, #28
 800a978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a97a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a97c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a980:	e885 0003 	stmia.w	r5, {r0, r1}
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
                    FragDecoderInit( fragSessionData.FragGroupData.FragNb,
 800a984:	8bfb      	ldrh	r3, [r7, #30]
 800a986:	f897 1020 	ldrb.w	r1, [r7, #32]
                                     fragSessionData.FragGroupData.FragSize,
                                     &LmhpFragmentationParams->DecoderCallbacks );
 800a98a:	4ab9      	ldr	r2, [pc, #740]	@ (800ac70 <LmhpFragmentationOnMcpsIndication+0x690>)
 800a98c:	6812      	ldr	r2, [r2, #0]
                    FragDecoderInit( fragSessionData.FragGroupData.FragNb,
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe fb6a 	bl	8009068 <FragDecoderInit>
                                     fragSessionData.FragGroupData.FragSize,
                                     LmhpFragmentationParams->Buffer,
                                     LmhpFragmentationParams->BufferSize );
#endif
                }
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_SESSION_SETUP_ANS;
 800a994:	4bb7      	ldr	r3, [pc, #732]	@ (800ac74 <LmhpFragmentationOnMcpsIndication+0x694>)
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a99c:	1c59      	adds	r1, r3, #1
 800a99e:	f887 103e 	strb.w	r1, [r7, #62]	@ 0x3e
 800a9a2:	4413      	add	r3, r2
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	701a      	strb	r2, [r3, #0]
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 800a9a8:	4bb2      	ldr	r3, [pc, #712]	@ (800ac74 <LmhpFragmentationOnMcpsIndication+0x694>)
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a9b0:	1c59      	adds	r1, r3, #1
 800a9b2:	f887 103e 	strb.w	r1, [r7, #62]	@ 0x3e
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800a9bc:	701a      	strb	r2, [r3, #0]
                isAnswerDelayed = false;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                break;
 800a9c4:	e159      	b.n	800ac7a <LmhpFragmentationOnMcpsIndication+0x69a>
            }
            case FRAGMENTATION_FRAG_SESSION_DELETE_REQ:
            {
                if( mcpsIndication->Multicast == 1 )
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	789b      	ldrb	r3, [r3, #2]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	f000 8154 	beq.w	800ac78 <LmhpFragmentationOnMcpsIndication+0x698>
                {
                    // Multicast channel. Don't process command.
                    break;
                }
                uint8_t status = 0x00;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	689a      	ldr	r2, [r3, #8]
 800a9da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a9de:	1c59      	adds	r1, r3, #1
 800a9e0:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800a9e4:	4413      	add	r3, r2
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f003 0303 	and.w	r3, r3, #3
 800a9ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

                status |= id;
 800a9f0:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800a9f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                if( ( id >= FRAGMENTATION_MAX_SESSIONS ) || ( FragSessionData[id].FragGroupData.IsActive == false ) )
 800a9fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d80d      	bhi.n	800aa22 <LmhpFragmentationOnMcpsIndication+0x442>
 800aa06:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800aa0a:	4998      	ldr	r1, [pc, #608]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	4413      	add	r3, r2
 800aa12:	00db      	lsls	r3, r3, #3
 800aa14:	440b      	add	r3, r1
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f083 0301 	eor.w	r3, r3, #1
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d006      	beq.n	800aa30 <LmhpFragmentationOnMcpsIndication+0x450>
                {
                    status |= 0x04; // Session does not exist
 800aa22:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800aa26:	f043 0304 	orr.w	r3, r3, #4
 800aa2a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800aa2e:	e009      	b.n	800aa44 <LmhpFragmentationOnMcpsIndication+0x464>
                }
                else
                {
                    // Delete session
                    FragSessionData[id].FragGroupData.IsActive = false;
 800aa30:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800aa34:	498d      	ldr	r1, [pc, #564]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800aa36:	4613      	mov	r3, r2
 800aa38:	005b      	lsls	r3, r3, #1
 800aa3a:	4413      	add	r3, r2
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	440b      	add	r3, r1
 800aa40:	2200      	movs	r2, #0
 800aa42:	701a      	strb	r2, [r3, #0]
                }
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_SESSION_DELETE_ANS;
 800aa44:	4b8b      	ldr	r3, [pc, #556]	@ (800ac74 <LmhpFragmentationOnMcpsIndication+0x694>)
 800aa46:	685a      	ldr	r2, [r3, #4]
 800aa48:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800aa4c:	1c59      	adds	r1, r3, #1
 800aa4e:	f887 103e 	strb.w	r1, [r7, #62]	@ 0x3e
 800aa52:	4413      	add	r3, r2
 800aa54:	2203      	movs	r2, #3
 800aa56:	701a      	strb	r2, [r3, #0]
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 800aa58:	4b86      	ldr	r3, [pc, #536]	@ (800ac74 <LmhpFragmentationOnMcpsIndication+0x694>)
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800aa60:	1c59      	adds	r1, r3, #1
 800aa62:	f887 103e 	strb.w	r1, [r7, #62]	@ 0x3e
 800aa66:	4413      	add	r3, r2
 800aa68:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800aa6c:	701a      	strb	r2, [r3, #0]
                isAnswerDelayed = false;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                break;
 800aa74:	e101      	b.n	800ac7a <LmhpFragmentationOnMcpsIndication+0x69a>
            }
            case FRAGMENTATION_DATA_FRAGMENT:
            {
                uint8_t fragIndex = 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                uint16_t fragCounter = 0;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	873b      	strh	r3, [r7, #56]	@ 0x38

                fragCounter = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x00FF;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aa88:	1c59      	adds	r1, r3, #1
 800aa8a:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800aa8e:	4413      	add	r3, r2
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	873b      	strh	r3, [r7, #56]	@ 0x38
                fragCounter |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0xFF00;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	689a      	ldr	r2, [r3, #8]
 800aa98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aa9c:	1c59      	adds	r1, r3, #1
 800aa9e:	f887 103f 	strb.w	r1, [r7, #63]	@ 0x3f
 800aaa2:	4413      	add	r3, r2
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	021b      	lsls	r3, r3, #8
 800aaa8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aaac:	b21a      	sxth	r2, r3
 800aaae:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800aab2:	4313      	orrs	r3, r2
 800aab4:	b21b      	sxth	r3, r3
 800aab6:	873b      	strh	r3, [r7, #56]	@ 0x38

                fragIndex = ( fragCounter >> 14 ) & 0x03;
 800aab8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800aaba:	0b9b      	lsrs	r3, r3, #14
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	f003 0303 	and.w	r3, r3, #3
 800aac4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                fragCounter &= 0x3FFF;
 800aac8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800aaca:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800aace:	873b      	strh	r3, [r7, #56]	@ 0x38
                    //    // Ignore message
                    //    break;
                    //}
                }

                if( FragSessionData[fragIndex].FragDecoderPorcessStatus == FRAG_SESSION_ONGOING )
 800aad0:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800aad4:	4965      	ldr	r1, [pc, #404]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800aad6:	4613      	mov	r3, r2
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	4413      	add	r3, r2
 800aadc:	00db      	lsls	r3, r3, #3
 800aade:	440b      	add	r3, r1
 800aae0:	3314      	adds	r3, #20
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aae8:	d15a      	bne.n	800aba0 <LmhpFragmentationOnMcpsIndication+0x5c0>
                {
                    FragSessionData[fragIndex].FragDecoderPorcessStatus = FragDecoderProcess( fragCounter, &mcpsIndication->Buffer[cmdIndex] );
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	689a      	ldr	r2, [r3, #8]
 800aaee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aaf2:	441a      	add	r2, r3
 800aaf4:	f897 403a 	ldrb.w	r4, [r7, #58]	@ 0x3a
 800aaf8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800aafa:	4611      	mov	r1, r2
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe fb37 	bl	8009170 <FragDecoderProcess>
 800ab02:	4602      	mov	r2, r0
 800ab04:	4959      	ldr	r1, [pc, #356]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800ab06:	4623      	mov	r3, r4
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	4423      	add	r3, r4
 800ab0c:	00db      	lsls	r3, r3, #3
 800ab0e:	440b      	add	r3, r1
 800ab10:	3314      	adds	r3, #20
 800ab12:	601a      	str	r2, [r3, #0]
                    FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus( );
 800ab14:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ab18:	4954      	ldr	r1, [pc, #336]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	4413      	add	r3, r2
 800ab20:	00db      	lsls	r3, r3, #3
 800ab22:	440b      	add	r3, r1
 800ab24:	f103 0408 	add.w	r4, r3, #8
 800ab28:	463b      	mov	r3, r7
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fd0a 	bl	8009544 <FragDecoderGetStatus>
 800ab30:	1d23      	adds	r3, r4, #4
 800ab32:	463a      	mov	r2, r7
 800ab34:	6810      	ldr	r0, [r2, #0]
 800ab36:	6851      	ldr	r1, [r2, #4]
 800ab38:	c303      	stmia	r3!, {r0, r1}
                    if( LmhpFragmentationParams->OnProgress != NULL )
 800ab3a:	4b4d      	ldr	r3, [pc, #308]	@ (800ac70 <LmhpFragmentationOnMcpsIndication+0x690>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d07b      	beq.n	800ac3c <LmhpFragmentationOnMcpsIndication+0x65c>
                    {
                        LmhpFragmentationParams->OnProgress( FragSessionData[fragIndex].FragDecoderStatus.FragNbRx,
 800ab44:	4b4a      	ldr	r3, [pc, #296]	@ (800ac70 <LmhpFragmentationOnMcpsIndication+0x690>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	689c      	ldr	r4, [r3, #8]
 800ab4a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ab4e:	4947      	ldr	r1, [pc, #284]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800ab50:	4613      	mov	r3, r2
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	4413      	add	r3, r2
 800ab56:	00db      	lsls	r3, r3, #3
 800ab58:	440b      	add	r3, r1
 800ab5a:	330c      	adds	r3, #12
 800ab5c:	8818      	ldrh	r0, [r3, #0]
 800ab5e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ab62:	4942      	ldr	r1, [pc, #264]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800ab64:	4613      	mov	r3, r2
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	4413      	add	r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	440b      	add	r3, r1
 800ab6e:	3302      	adds	r3, #2
 800ab70:	8819      	ldrh	r1, [r3, #0]
 800ab72:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ab76:	4d3d      	ldr	r5, [pc, #244]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800ab78:	4613      	mov	r3, r2
 800ab7a:	005b      	lsls	r3, r3, #1
 800ab7c:	4413      	add	r3, r2
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	442b      	add	r3, r5
 800ab82:	3304      	adds	r3, #4
 800ab84:	781d      	ldrb	r5, [r3, #0]
 800ab86:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ab8a:	4e38      	ldr	r6, [pc, #224]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	005b      	lsls	r3, r3, #1
 800ab90:	4413      	add	r3, r2
 800ab92:	00db      	lsls	r3, r3, #3
 800ab94:	4433      	add	r3, r6
 800ab96:	330e      	adds	r3, #14
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	462a      	mov	r2, r5
 800ab9c:	47a0      	blx	r4
 800ab9e:	e04d      	b.n	800ac3c <LmhpFragmentationOnMcpsIndication+0x65c>
                                                             FragSessionData[fragIndex].FragDecoderStatus.FragNbLost );
                    }
                }
                else
                {
                    if( FragSessionData[fragIndex].FragDecoderPorcessStatus >= 0 )
 800aba0:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800aba4:	4931      	ldr	r1, [pc, #196]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800aba6:	4613      	mov	r3, r2
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	4413      	add	r3, r2
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	440b      	add	r3, r1
 800abb0:	3314      	adds	r3, #20
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	db41      	blt.n	800ac3c <LmhpFragmentationOnMcpsIndication+0x65c>
                    {
                        // Fragmentation successfully done
                        FragSessionData[fragIndex].FragDecoderPorcessStatus = FRAG_SESSION_NOT_STARTED;
 800abb8:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800abbc:	492b      	ldr	r1, [pc, #172]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800abbe:	4613      	mov	r3, r2
 800abc0:	005b      	lsls	r3, r3, #1
 800abc2:	4413      	add	r3, r2
 800abc4:	00db      	lsls	r3, r3, #3
 800abc6:	440b      	add	r3, r1
 800abc8:	3314      	adds	r3, #20
 800abca:	f06f 0201 	mvn.w	r2, #1
 800abce:	601a      	str	r2, [r3, #0]
                        if( LmhpFragmentationParams->OnDone != NULL )
 800abd0:	4b27      	ldr	r3, [pc, #156]	@ (800ac70 <LmhpFragmentationOnMcpsIndication+0x690>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d030      	beq.n	800ac3c <LmhpFragmentationOnMcpsIndication+0x65c>
                        {
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
                            LmhpFragmentationParams->OnDone( FragSessionData[fragIndex].FragDecoderPorcessStatus,
 800abda:	4b25      	ldr	r3, [pc, #148]	@ (800ac70 <LmhpFragmentationOnMcpsIndication+0x690>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68dc      	ldr	r4, [r3, #12]
 800abe0:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800abe4:	4921      	ldr	r1, [pc, #132]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800abe6:	4613      	mov	r3, r2
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	4413      	add	r3, r2
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	440b      	add	r3, r1
 800abf0:	3314      	adds	r3, #20
 800abf2:	6818      	ldr	r0, [r3, #0]
                                                            ( FragSessionData[fragIndex].FragGroupData.FragNb * FragSessionData[fragIndex].FragGroupData.FragSize ) - FragSessionData[fragIndex].FragGroupData.Padding );
 800abf4:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800abf8:	491c      	ldr	r1, [pc, #112]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800abfa:	4613      	mov	r3, r2
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	4413      	add	r3, r2
 800ac00:	00db      	lsls	r3, r3, #3
 800ac02:	440b      	add	r3, r1
 800ac04:	3302      	adds	r3, #2
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	461d      	mov	r5, r3
 800ac0a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ac0e:	4917      	ldr	r1, [pc, #92]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800ac10:	4613      	mov	r3, r2
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	4413      	add	r3, r2
 800ac16:	00db      	lsls	r3, r3, #3
 800ac18:	440b      	add	r3, r1
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	fb03 f105 	mul.w	r1, r3, r5
 800ac22:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ac26:	4d11      	ldr	r5, [pc, #68]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800ac28:	4613      	mov	r3, r2
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	4413      	add	r3, r2
 800ac2e:	00db      	lsls	r3, r3, #3
 800ac30:	442b      	add	r3, r5
 800ac32:	3306      	adds	r3, #6
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	1acb      	subs	r3, r1, r3
                            LmhpFragmentationParams->OnDone( FragSessionData[fragIndex].FragDecoderPorcessStatus,
 800ac38:	4619      	mov	r1, r3
 800ac3a:	47a0      	blx	r4
                                                            ( FragSessionData[fragIndex].FragGroupData.FragNb * FragSessionData[fragIndex].FragGroupData.FragSize ) - FragSessionData[fragIndex].FragGroupData.Padding );
#endif
                        }
                    }
                }
                cmdIndex += FragSessionData[fragIndex].FragGroupData.FragSize;
 800ac3c:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ac40:	490a      	ldr	r1, [pc, #40]	@ (800ac6c <LmhpFragmentationOnMcpsIndication+0x68c>)
 800ac42:	4613      	mov	r3, r2
 800ac44:	005b      	lsls	r3, r3, #1
 800ac46:	4413      	add	r3, r2
 800ac48:	00db      	lsls	r3, r3, #3
 800ac4a:	440b      	add	r3, r1
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	781a      	ldrb	r2, [r3, #0]
 800ac50:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ac54:	4413      	add	r3, r2
 800ac56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                break;
 800ac5a:	e00e      	b.n	800ac7a <LmhpFragmentationOnMcpsIndication+0x69a>
            }
            default:
            {
                break;
 800ac5c:	bf00      	nop
 800ac5e:	e00c      	b.n	800ac7a <LmhpFragmentationOnMcpsIndication+0x69a>
                    break;
 800ac60:	bf00      	nop
 800ac62:	e00a      	b.n	800ac7a <LmhpFragmentationOnMcpsIndication+0x69a>
                break;
 800ac64:	bf00      	nop
 800ac66:	e008      	b.n	800ac7a <LmhpFragmentationOnMcpsIndication+0x69a>
                    break;
 800ac68:	bf00      	nop
 800ac6a:	e006      	b.n	800ac7a <LmhpFragmentationOnMcpsIndication+0x69a>
 800ac6c:	20001358 	.word	0x20001358
 800ac70:	20001348 	.word	0x20001348
 800ac74:	2000134c 	.word	0x2000134c
                    break;
 800ac78:	bf00      	nop
    while( cmdIndex < mcpsIndication->BufferSize )
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	7b1b      	ldrb	r3, [r3, #12]
 800ac7e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ac82:	429a      	cmp	r2, r3
 800ac84:	f4ff acba 	bcc.w	800a5fc <LmhpFragmentationOnMcpsIndication+0x1c>
            }
        }
    }

    if( isAnswerDelayed == true )
 800ac88:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d112      	bne.n	800acb6 <LmhpFragmentationOnMcpsIndication+0x6d6>
    {
        // TODO: Start a timer to randomly delay the answer
    }
    else
    {
        if( dataBufferIndex != 0 )
 800ac90:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00e      	beq.n	800acb6 <LmhpFragmentationOnMcpsIndication+0x6d6>
        {
            // Answer commands
            LmHandlerAppData_t appData =
 800ac98:	23c9      	movs	r3, #201	@ 0xc9
 800ac9a:	753b      	strb	r3, [r7, #20]
 800ac9c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800aca0:	757b      	strb	r3, [r7, #21]
            {
                .Buffer = LmhpFragmentationState.DataBuffer,
 800aca2:	4b07      	ldr	r3, [pc, #28]	@ (800acc0 <LmhpFragmentationOnMcpsIndication+0x6e0>)
 800aca4:	685b      	ldr	r3, [r3, #4]
            LmHandlerAppData_t appData =
 800aca6:	61bb      	str	r3, [r7, #24]
                .BufferSize = dataBufferIndex,
                .Port = FRAGMENTATION_PORT
            };
            LmhpFragmentationPackage.OnSendRequest( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 800aca8:	4b06      	ldr	r3, [pc, #24]	@ (800acc4 <LmhpFragmentationOnMcpsIndication+0x6e4>)
 800acaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acac:	f107 0214 	add.w	r2, r7, #20
 800acb0:	2100      	movs	r1, #0
 800acb2:	4610      	mov	r0, r2
 800acb4:	4798      	blx	r3
        }
    }
}
 800acb6:	bf00      	nop
 800acb8:	3744      	adds	r7, #68	@ 0x44
 800acba:	46bd      	mov	sp, r7
 800acbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acbe:	bf00      	nop
 800acc0:	2000134c 	.word	0x2000134c
 800acc4:	200002d4 	.word	0x200002d4

0800acc8 <LmhpRemoteMcastSetupPackageFactory>:
    .OnDeviceTimeRequest = NULL,                               // To be initialized by LmHandler
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
};

LmhPackage_t *LmhpRemoteMcastSetupPackageFactory( void )
{
 800acc8:	b480      	push	{r7}
 800acca:	af00      	add	r7, sp, #0
    return &LmhpRemoteMcastSetupPackage;
 800accc:	4b02      	ldr	r3, [pc, #8]	@ (800acd8 <LmhpRemoteMcastSetupPackageFactory+0x10>)
}
 800acce:	4618      	mov	r0, r3
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	20000310 	.word	0x20000310

0800acdc <LmhpRemoteMcastSetupInit>:

static void LmhpRemoteMcastSetupInit( void * params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b088      	sub	sp, #32
 800ace0:	af04      	add	r7, sp, #16
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	4613      	mov	r3, r2
 800ace8:	71fb      	strb	r3, [r7, #7]
    if( dataBuffer != NULL )
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d026      	beq.n	800ad3e <LmhpRemoteMcastSetupInit+0x62>
    {
        LmhpRemoteMcastSetupState.DataBuffer = dataBuffer;
 800acf0:	4a18      	ldr	r2, [pc, #96]	@ (800ad54 <LmhpRemoteMcastSetupInit+0x78>)
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	6053      	str	r3, [r2, #4]
        LmhpRemoteMcastSetupState.DataBufferMaxSize = dataBufferMaxSize;
 800acf6:	4a17      	ldr	r2, [pc, #92]	@ (800ad54 <LmhpRemoteMcastSetupInit+0x78>)
 800acf8:	79fb      	ldrb	r3, [r7, #7]
 800acfa:	7093      	strb	r3, [r2, #2]
        LmhpRemoteMcastSetupState.Initialized = true;
 800acfc:	4b15      	ldr	r3, [pc, #84]	@ (800ad54 <LmhpRemoteMcastSetupInit+0x78>)
 800acfe:	2201      	movs	r2, #1
 800ad00:	701a      	strb	r2, [r3, #0]
        LmhpRemoteMcastSetupState.IsRunning = true;
 800ad02:	4b14      	ldr	r3, [pc, #80]	@ (800ad54 <LmhpRemoteMcastSetupInit+0x78>)
 800ad04:	2201      	movs	r2, #1
 800ad06:	705a      	strb	r2, [r3, #1]
        TimerInit( &SessionStartTimer, OnSessionStartTimer );
 800ad08:	2300      	movs	r3, #0
 800ad0a:	9302      	str	r3, [sp, #8]
 800ad0c:	4b12      	ldr	r3, [pc, #72]	@ (800ad58 <LmhpRemoteMcastSetupInit+0x7c>)
 800ad0e:	9301      	str	r3, [sp, #4]
 800ad10:	2300      	movs	r3, #0
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad18:	f04f 0300 	mov.w	r3, #0
 800ad1c:	480f      	ldr	r0, [pc, #60]	@ (800ad5c <LmhpRemoteMcastSetupInit+0x80>)
 800ad1e:	f00c fd0d 	bl	801773c <UTIL_TIMER_Create>
        TimerInit( &SessionStopTimer, OnSessionStopTimer );
 800ad22:	2300      	movs	r3, #0
 800ad24:	9302      	str	r3, [sp, #8]
 800ad26:	4b0e      	ldr	r3, [pc, #56]	@ (800ad60 <LmhpRemoteMcastSetupInit+0x84>)
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad32:	f04f 0300 	mov.w	r3, #0
 800ad36:	480b      	ldr	r0, [pc, #44]	@ (800ad64 <LmhpRemoteMcastSetupInit+0x88>)
 800ad38:	f00c fd00 	bl	801773c <UTIL_TIMER_Create>
    else
    {
        LmhpRemoteMcastSetupState.IsRunning = false;
        LmhpRemoteMcastSetupState.Initialized = false;
    }
}
 800ad3c:	e005      	b.n	800ad4a <LmhpRemoteMcastSetupInit+0x6e>
        LmhpRemoteMcastSetupState.IsRunning = false;
 800ad3e:	4b05      	ldr	r3, [pc, #20]	@ (800ad54 <LmhpRemoteMcastSetupInit+0x78>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	705a      	strb	r2, [r3, #1]
        LmhpRemoteMcastSetupState.Initialized = false;
 800ad44:	4b03      	ldr	r3, [pc, #12]	@ (800ad54 <LmhpRemoteMcastSetupInit+0x78>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	701a      	strb	r2, [r3, #0]
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	200013b8 	.word	0x200013b8
 800ad58:	0800b74d 	.word	0x0800b74d
 800ad5c:	20001490 	.word	0x20001490
 800ad60:	0800b799 	.word	0x0800b799
 800ad64:	200014b0 	.word	0x200014b0

0800ad68 <LmhpRemoteMcastSetupIsInitialized>:

static bool LmhpRemoteMcastSetupIsInitialized( void )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	af00      	add	r7, sp, #0
    return LmhpRemoteMcastSetupState.Initialized;
 800ad6c:	4b03      	ldr	r3, [pc, #12]	@ (800ad7c <LmhpRemoteMcastSetupIsInitialized+0x14>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	200013b8 	.word	0x200013b8

0800ad80 <LmhpRemoteMcastSetupIsRunning>:

static bool LmhpRemoteMcastSetupIsRunning( void )
{
 800ad80:	b480      	push	{r7}
 800ad82:	af00      	add	r7, sp, #0
    if( LmhpRemoteMcastSetupState.Initialized == false )
 800ad84:	4b07      	ldr	r3, [pc, #28]	@ (800ada4 <LmhpRemoteMcastSetupIsRunning+0x24>)
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	f083 0301 	eor.w	r3, r3, #1
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <LmhpRemoteMcastSetupIsRunning+0x16>
    {
        return false;
 800ad92:	2300      	movs	r3, #0
 800ad94:	e001      	b.n	800ad9a <LmhpRemoteMcastSetupIsRunning+0x1a>
    }

    return LmhpRemoteMcastSetupState.IsRunning;
 800ad96:	4b03      	ldr	r3, [pc, #12]	@ (800ada4 <LmhpRemoteMcastSetupIsRunning+0x24>)
 800ad98:	785b      	ldrb	r3, [r3, #1]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	200013b8 	.word	0x200013b8

0800ada8 <LmhpRemoteMcastSetupProcess>:

static void LmhpRemoteMcastSetupProcess( void )
{
 800ada8:	b480      	push	{r7}
 800adaa:	af00      	add	r7, sp, #0
    // TODO: add sessions handling
}
 800adac:	bf00      	nop
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
	...

0800adb8 <LmhpRemoteMcastSetupOnMcpsIndication>:

static void LmhpRemoteMcastSetupOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800adb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adba:	b095      	sub	sp, #84	@ 0x54
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint8_t dataBufferIndex = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

    while( cmdIndex < mcpsIndication->BufferSize )
 800adcc:	f000 bc33 	b.w	800b636 <LmhpRemoteMcastSetupOnMcpsIndication+0x87e>
    {
        switch( mcpsIndication->Buffer[cmdIndex++] )
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800add8:	1c59      	adds	r1, r3, #1
 800adda:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800adde:	4413      	add	r3, r2
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	2b05      	cmp	r3, #5
 800ade4:	f200 8426 	bhi.w	800b634 <LmhpRemoteMcastSetupOnMcpsIndication+0x87c>
 800ade8:	a201      	add	r2, pc, #4	@ (adr r2, 800adf0 <LmhpRemoteMcastSetupOnMcpsIndication+0x38>)
 800adea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adee:	bf00      	nop
 800adf0:	0800ae09 	.word	0x0800ae09
 800adf4:	0800b635 	.word	0x0800b635
 800adf8:	0800ae47 	.word	0x0800ae47
 800adfc:	0800b245 	.word	0x0800b245
 800ae00:	0800b2bd 	.word	0x0800b2bd
 800ae04:	0800b635 	.word	0x0800b635
        {
            case REMOTE_MCAST_SETUP_PKG_VERSION_REQ:
            {
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_PKG_VERSION_ANS;
 800ae08:	4b53      	ldr	r3, [pc, #332]	@ (800af58 <LmhpRemoteMcastSetupOnMcpsIndication+0x1a0>)
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800ae10:	1c59      	adds	r1, r3, #1
 800ae12:	f887 104e 	strb.w	r1, [r7, #78]	@ 0x4e
 800ae16:	4413      	add	r3, r2
 800ae18:	2200      	movs	r2, #0
 800ae1a:	701a      	strb	r2, [r3, #0]
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_ID;
 800ae1c:	4b4e      	ldr	r3, [pc, #312]	@ (800af58 <LmhpRemoteMcastSetupOnMcpsIndication+0x1a0>)
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800ae24:	1c59      	adds	r1, r3, #1
 800ae26:	f887 104e 	strb.w	r1, [r7, #78]	@ 0x4e
 800ae2a:	4413      	add	r3, r2
 800ae2c:	2202      	movs	r2, #2
 800ae2e:	701a      	strb	r2, [r3, #0]
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_VERSION;
 800ae30:	4b49      	ldr	r3, [pc, #292]	@ (800af58 <LmhpRemoteMcastSetupOnMcpsIndication+0x1a0>)
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800ae38:	1c59      	adds	r1, r3, #1
 800ae3a:	f887 104e 	strb.w	r1, [r7, #78]	@ 0x4e
 800ae3e:	4413      	add	r3, r2
 800ae40:	2201      	movs	r2, #1
 800ae42:	701a      	strb	r2, [r3, #0]
                break;
 800ae44:	e3f7      	b.n	800b636 <LmhpRemoteMcastSetupOnMcpsIndication+0x87e>
                // TODO implement command prosessing and handling
                break;
            }
            case REMOTE_MCAST_SETUP_MC_GROUP_SETUP_REQ:
            {
                uint8_t id = mcpsIndication->Buffer[cmdIndex++];
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	689a      	ldr	r2, [r3, #8]
 800ae4a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ae4e:	1c59      	adds	r1, r3, #1
 800ae50:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800ae54:	4413      	add	r3, r2
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                McSessionData[id].McGroupData.IdHeader.Value = id;
 800ae5c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800ae60:	4a3e      	ldr	r2, [pc, #248]	@ (800af5c <LmhpRemoteMcastSetupOnMcpsIndication+0x1a4>)
 800ae62:	2134      	movs	r1, #52	@ 0x34
 800ae64:	fb01 f303 	mul.w	r3, r1, r3
 800ae68:	4413      	add	r3, r2
 800ae6a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ae6e:	701a      	strb	r2, [r3, #0]

                McSessionData[id].McGroupData.McAddr =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	689a      	ldr	r2, [r3, #8]
 800ae74:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ae78:	1c59      	adds	r1, r3, #1
 800ae7a:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800ae7e:	4413      	add	r3, r2
 800ae80:	781a      	ldrb	r2, [r3, #0]
 800ae82:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800ae86:	4610      	mov	r0, r2
 800ae88:	4a34      	ldr	r2, [pc, #208]	@ (800af5c <LmhpRemoteMcastSetupOnMcpsIndication+0x1a4>)
 800ae8a:	2134      	movs	r1, #52	@ 0x34
 800ae8c:	fb01 f303 	mul.w	r3, r1, r3
 800ae90:	4413      	add	r3, r2
 800ae92:	3304      	adds	r3, #4
 800ae94:	6018      	str	r0, [r3, #0]
                McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	689a      	ldr	r2, [r3, #8]
 800ae9a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ae9e:	1c59      	adds	r1, r3, #1
 800aea0:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800aea4:	4413      	add	r3, r2
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	021b      	lsls	r3, r3, #8
 800aeaa:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 800aeae:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800aeb2:	4a2a      	ldr	r2, [pc, #168]	@ (800af5c <LmhpRemoteMcastSetupOnMcpsIndication+0x1a4>)
 800aeb4:	2134      	movs	r1, #52	@ 0x34
 800aeb6:	fb01 f303 	mul.w	r3, r1, r3
 800aeba:	4413      	add	r3, r2
 800aebc:	3304      	adds	r3, #4
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	4601      	mov	r1, r0
 800aec2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800aec6:	440a      	add	r2, r1
 800aec8:	4924      	ldr	r1, [pc, #144]	@ (800af5c <LmhpRemoteMcastSetupOnMcpsIndication+0x1a4>)
 800aeca:	2034      	movs	r0, #52	@ 0x34
 800aecc:	fb00 f303 	mul.w	r3, r0, r3
 800aed0:	440b      	add	r3, r1
 800aed2:	3304      	adds	r3, #4
 800aed4:	601a      	str	r2, [r3, #0]
                McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	689a      	ldr	r2, [r3, #8]
 800aeda:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800aede:	1c59      	adds	r1, r3, #1
 800aee0:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800aee4:	4413      	add	r3, r2
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	041b      	lsls	r3, r3, #16
 800aeea:	f403 007f 	and.w	r0, r3, #16711680	@ 0xff0000
 800aeee:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800aef2:	4a1a      	ldr	r2, [pc, #104]	@ (800af5c <LmhpRemoteMcastSetupOnMcpsIndication+0x1a4>)
 800aef4:	2134      	movs	r1, #52	@ 0x34
 800aef6:	fb01 f303 	mul.w	r3, r1, r3
 800aefa:	4413      	add	r3, r2
 800aefc:	3304      	adds	r3, #4
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	4601      	mov	r1, r0
 800af02:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800af06:	440a      	add	r2, r1
 800af08:	4914      	ldr	r1, [pc, #80]	@ (800af5c <LmhpRemoteMcastSetupOnMcpsIndication+0x1a4>)
 800af0a:	2034      	movs	r0, #52	@ 0x34
 800af0c:	fb00 f303 	mul.w	r3, r0, r3
 800af10:	440b      	add	r3, r1
 800af12:	3304      	adds	r3, #4
 800af14:	601a      	str	r2, [r3, #0]
                McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	689a      	ldr	r2, [r3, #8]
 800af1a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800af1e:	1c59      	adds	r1, r3, #1
 800af20:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800af24:	4413      	add	r3, r2
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	0619      	lsls	r1, r3, #24
 800af2a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800af2e:	4a0b      	ldr	r2, [pc, #44]	@ (800af5c <LmhpRemoteMcastSetupOnMcpsIndication+0x1a4>)
 800af30:	2034      	movs	r0, #52	@ 0x34
 800af32:	fb00 f303 	mul.w	r3, r0, r3
 800af36:	4413      	add	r3, r2
 800af38:	3304      	adds	r3, #4
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800af40:	440a      	add	r2, r1
 800af42:	4906      	ldr	r1, [pc, #24]	@ (800af5c <LmhpRemoteMcastSetupOnMcpsIndication+0x1a4>)
 800af44:	2034      	movs	r0, #52	@ 0x34
 800af46:	fb00 f303 	mul.w	r3, r0, r3
 800af4a:	440b      	add	r3, r1
 800af4c:	3304      	adds	r3, #4
 800af4e:	601a      	str	r2, [r3, #0]

                for( int8_t i = 0; i < 16; i++ )
 800af50:	2300      	movs	r3, #0
 800af52:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800af56:	e020      	b.n	800af9a <LmhpRemoteMcastSetupOnMcpsIndication+0x1e2>
 800af58:	200013b8 	.word	0x200013b8
 800af5c:	200013c0 	.word	0x200013c0
                {
                    McSessionData[id].McGroupData.McKeyEncrypted[i] = mcpsIndication->Buffer[cmdIndex++];
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	689a      	ldr	r2, [r3, #8]
 800af64:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800af68:	1c59      	adds	r1, r3, #1
 800af6a:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800af6e:	18d1      	adds	r1, r2, r3
 800af70:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800af74:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800af78:	780e      	ldrb	r6, [r1, #0]
 800af7a:	49ce      	ldr	r1, [pc, #824]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800af7c:	2034      	movs	r0, #52	@ 0x34
 800af7e:	fb00 f202 	mul.w	r2, r0, r2
 800af82:	440a      	add	r2, r1
 800af84:	4413      	add	r3, r2
 800af86:	3308      	adds	r3, #8
 800af88:	4632      	mov	r2, r6
 800af8a:	701a      	strb	r2, [r3, #0]
                for( int8_t i = 0; i < 16; i++ )
 800af8c:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800af90:	b2db      	uxtb	r3, r3
 800af92:	3301      	adds	r3, #1
 800af94:	b2db      	uxtb	r3, r3
 800af96:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800af9a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800af9e:	2b0f      	cmp	r3, #15
 800afa0:	ddde      	ble.n	800af60 <LmhpRemoteMcastSetupOnMcpsIndication+0x1a8>
                }

                McSessionData[id].McGroupData.McFCountMin =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	689a      	ldr	r2, [r3, #8]
 800afa6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800afaa:	1c59      	adds	r1, r3, #1
 800afac:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800afb0:	4413      	add	r3, r2
 800afb2:	781a      	ldrb	r2, [r3, #0]
 800afb4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800afb8:	4610      	mov	r0, r2
 800afba:	4abe      	ldr	r2, [pc, #760]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800afbc:	2134      	movs	r1, #52	@ 0x34
 800afbe:	fb01 f303 	mul.w	r3, r1, r3
 800afc2:	4413      	add	r3, r2
 800afc4:	3318      	adds	r3, #24
 800afc6:	6018      	str	r0, [r3, #0]
                McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800afd0:	1c59      	adds	r1, r3, #1
 800afd2:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800afd6:	4413      	add	r3, r2
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	021b      	lsls	r3, r3, #8
 800afdc:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 800afe0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800afe4:	4ab3      	ldr	r2, [pc, #716]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800afe6:	2134      	movs	r1, #52	@ 0x34
 800afe8:	fb01 f303 	mul.w	r3, r1, r3
 800afec:	4413      	add	r3, r2
 800afee:	3318      	adds	r3, #24
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	4601      	mov	r1, r0
 800aff4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800aff8:	440a      	add	r2, r1
 800affa:	49ae      	ldr	r1, [pc, #696]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800affc:	2034      	movs	r0, #52	@ 0x34
 800affe:	fb00 f303 	mul.w	r3, r0, r3
 800b002:	440b      	add	r3, r1
 800b004:	3318      	adds	r3, #24
 800b006:	601a      	str	r2, [r3, #0]
                McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b010:	1c59      	adds	r1, r3, #1
 800b012:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b016:	4413      	add	r3, r2
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	041b      	lsls	r3, r3, #16
 800b01c:	f403 007f 	and.w	r0, r3, #16711680	@ 0xff0000
 800b020:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b024:	4aa3      	ldr	r2, [pc, #652]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b026:	2134      	movs	r1, #52	@ 0x34
 800b028:	fb01 f303 	mul.w	r3, r1, r3
 800b02c:	4413      	add	r3, r2
 800b02e:	3318      	adds	r3, #24
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	4601      	mov	r1, r0
 800b034:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b038:	440a      	add	r2, r1
 800b03a:	499e      	ldr	r1, [pc, #632]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b03c:	2034      	movs	r0, #52	@ 0x34
 800b03e:	fb00 f303 	mul.w	r3, r0, r3
 800b042:	440b      	add	r3, r1
 800b044:	3318      	adds	r3, #24
 800b046:	601a      	str	r2, [r3, #0]
                McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	689a      	ldr	r2, [r3, #8]
 800b04c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b050:	1c59      	adds	r1, r3, #1
 800b052:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b056:	4413      	add	r3, r2
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	0619      	lsls	r1, r3, #24
 800b05c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b060:	4a94      	ldr	r2, [pc, #592]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b062:	2034      	movs	r0, #52	@ 0x34
 800b064:	fb00 f303 	mul.w	r3, r0, r3
 800b068:	4413      	add	r3, r2
 800b06a:	3318      	adds	r3, #24
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b072:	440a      	add	r2, r1
 800b074:	498f      	ldr	r1, [pc, #572]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b076:	2034      	movs	r0, #52	@ 0x34
 800b078:	fb00 f303 	mul.w	r3, r0, r3
 800b07c:	440b      	add	r3, r1
 800b07e:	3318      	adds	r3, #24
 800b080:	601a      	str	r2, [r3, #0]

                McSessionData[id].McGroupData.McFCountMax =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	689a      	ldr	r2, [r3, #8]
 800b086:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b08a:	1c59      	adds	r1, r3, #1
 800b08c:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b090:	4413      	add	r3, r2
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b098:	4610      	mov	r0, r2
 800b09a:	4a86      	ldr	r2, [pc, #536]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b09c:	2134      	movs	r1, #52	@ 0x34
 800b09e:	fb01 f303 	mul.w	r3, r1, r3
 800b0a2:	4413      	add	r3, r2
 800b0a4:	331c      	adds	r3, #28
 800b0a6:	6018      	str	r0, [r3, #0]
                McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	689a      	ldr	r2, [r3, #8]
 800b0ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b0b0:	1c59      	adds	r1, r3, #1
 800b0b2:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b0b6:	4413      	add	r3, r2
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	021b      	lsls	r3, r3, #8
 800b0bc:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 800b0c0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b0c4:	4a7b      	ldr	r2, [pc, #492]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b0c6:	2134      	movs	r1, #52	@ 0x34
 800b0c8:	fb01 f303 	mul.w	r3, r1, r3
 800b0cc:	4413      	add	r3, r2
 800b0ce:	331c      	adds	r3, #28
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	4601      	mov	r1, r0
 800b0d4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b0d8:	440a      	add	r2, r1
 800b0da:	4976      	ldr	r1, [pc, #472]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b0dc:	2034      	movs	r0, #52	@ 0x34
 800b0de:	fb00 f303 	mul.w	r3, r0, r3
 800b0e2:	440b      	add	r3, r1
 800b0e4:	331c      	adds	r3, #28
 800b0e6:	601a      	str	r2, [r3, #0]
                McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	689a      	ldr	r2, [r3, #8]
 800b0ec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b0f0:	1c59      	adds	r1, r3, #1
 800b0f2:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b0f6:	4413      	add	r3, r2
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	041b      	lsls	r3, r3, #16
 800b0fc:	f403 007f 	and.w	r0, r3, #16711680	@ 0xff0000
 800b100:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b104:	4a6b      	ldr	r2, [pc, #428]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b106:	2134      	movs	r1, #52	@ 0x34
 800b108:	fb01 f303 	mul.w	r3, r1, r3
 800b10c:	4413      	add	r3, r2
 800b10e:	331c      	adds	r3, #28
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	4601      	mov	r1, r0
 800b114:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b118:	440a      	add	r2, r1
 800b11a:	4966      	ldr	r1, [pc, #408]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b11c:	2034      	movs	r0, #52	@ 0x34
 800b11e:	fb00 f303 	mul.w	r3, r0, r3
 800b122:	440b      	add	r3, r1
 800b124:	331c      	adds	r3, #28
 800b126:	601a      	str	r2, [r3, #0]
                McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	689a      	ldr	r2, [r3, #8]
 800b12c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b130:	1c59      	adds	r1, r3, #1
 800b132:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b136:	4413      	add	r3, r2
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	0619      	lsls	r1, r3, #24
 800b13c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b140:	4a5c      	ldr	r2, [pc, #368]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b142:	2034      	movs	r0, #52	@ 0x34
 800b144:	fb00 f303 	mul.w	r3, r0, r3
 800b148:	4413      	add	r3, r2
 800b14a:	331c      	adds	r3, #28
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b152:	440a      	add	r2, r1
 800b154:	4957      	ldr	r1, [pc, #348]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b156:	2034      	movs	r0, #52	@ 0x34
 800b158:	fb00 f303 	mul.w	r3, r0, r3
 800b15c:	440b      	add	r3, r1
 800b15e:	331c      	adds	r3, #28
 800b160:	601a      	str	r2, [r3, #0]

                McChannelParams_t channel = 
 800b162:	2302      	movs	r3, #2
 800b164:	773b      	strb	r3, [r7, #28]
 800b166:	2301      	movs	r3, #1
 800b168:	777b      	strb	r3, [r7, #29]
                {
                    .Class = CLASS_C, // Field not used for multicast channel setup. Must be initialized to something
                    .IsEnabled = true,
                    .GroupID = ( AddressIdentifier_t )McSessionData[id].McGroupData.IdHeader.Fields.McGroupId,
 800b16a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b16e:	4a51      	ldr	r2, [pc, #324]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b170:	2134      	movs	r1, #52	@ 0x34
 800b172:	fb01 f303 	mul.w	r3, r1, r3
 800b176:	4413      	add	r3, r2
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b17e:	b2db      	uxtb	r3, r3
                McChannelParams_t channel = 
 800b180:	77bb      	strb	r3, [r7, #30]
                    .Address = McSessionData[id].McGroupData.McAddr,
 800b182:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b186:	4a4b      	ldr	r2, [pc, #300]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b188:	2134      	movs	r1, #52	@ 0x34
 800b18a:	fb01 f303 	mul.w	r3, r1, r3
 800b18e:	4413      	add	r3, r2
 800b190:	3304      	adds	r3, #4
 800b192:	681b      	ldr	r3, [r3, #0]
                McChannelParams_t channel = 
 800b194:	623b      	str	r3, [r7, #32]
                    .McKeyE = McSessionData[id].McGroupData.McKeyEncrypted,
 800b196:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b19a:	2234      	movs	r2, #52	@ 0x34
 800b19c:	fb02 f303 	mul.w	r3, r2, r3
 800b1a0:	3308      	adds	r3, #8
 800b1a2:	4a44      	ldr	r2, [pc, #272]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b1a4:	4413      	add	r3, r2
                McChannelParams_t channel = 
 800b1a6:	627b      	str	r3, [r7, #36]	@ 0x24
                    .FCountMin = McSessionData[id].McGroupData.McFCountMin,
 800b1a8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b1ac:	4a41      	ldr	r2, [pc, #260]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b1ae:	2134      	movs	r1, #52	@ 0x34
 800b1b0:	fb01 f303 	mul.w	r3, r1, r3
 800b1b4:	4413      	add	r3, r2
 800b1b6:	3318      	adds	r3, #24
 800b1b8:	681b      	ldr	r3, [r3, #0]
                McChannelParams_t channel = 
 800b1ba:	62bb      	str	r3, [r7, #40]	@ 0x28
                    .FCountMax = McSessionData[id].McGroupData.McFCountMax,
 800b1bc:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b1c0:	4a3c      	ldr	r2, [pc, #240]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b1c2:	2134      	movs	r1, #52	@ 0x34
 800b1c4:	fb01 f303 	mul.w	r3, r1, r3
 800b1c8:	4413      	add	r3, r2
 800b1ca:	331c      	adds	r3, #28
 800b1cc:	681b      	ldr	r3, [r3, #0]
                McChannelParams_t channel = 
 800b1ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    {
                        .Frequency = 0,
                        .Datarate = 0
                    }
                };
                uint8_t idError = 0x01; // One bit value
 800b1da:	2301      	movs	r3, #1
 800b1dc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                if( LoRaMacMcChannelSetup( &channel ) == LORAMAC_STATUS_OK )
 800b1e0:	f107 031c 	add.w	r3, r7, #28
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f004 ff8f 	bl	8010108 <LoRaMacMcChannelSetup>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d102      	bne.n	800b1f6 <LmhpRemoteMcastSetupOnMcpsIndication+0x43e>
                {
                    idError = 0x00;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                }
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_SETUP_ANS;
 800b1f6:	4b30      	ldr	r3, [pc, #192]	@ (800b2b8 <LmhpRemoteMcastSetupOnMcpsIndication+0x500>)
 800b1f8:	685a      	ldr	r2, [r3, #4]
 800b1fa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b1fe:	1c59      	adds	r1, r3, #1
 800b200:	f887 104e 	strb.w	r1, [r7, #78]	@ 0x4e
 800b204:	4413      	add	r3, r2
 800b206:	2202      	movs	r2, #2
 800b208:	701a      	strb	r2, [r3, #0]
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( idError << 2 ) | McSessionData[id].McGroupData.IdHeader.Fields.McGroupId;
 800b20a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	b25a      	sxtb	r2, r3
 800b212:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b216:	4927      	ldr	r1, [pc, #156]	@ (800b2b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x4fc>)
 800b218:	2034      	movs	r0, #52	@ 0x34
 800b21a:	fb00 f303 	mul.w	r3, r0, r3
 800b21e:	440b      	add	r3, r1
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b226:	b2db      	uxtb	r3, r3
 800b228:	b25b      	sxtb	r3, r3
 800b22a:	4313      	orrs	r3, r2
 800b22c:	b259      	sxtb	r1, r3
 800b22e:	4b22      	ldr	r3, [pc, #136]	@ (800b2b8 <LmhpRemoteMcastSetupOnMcpsIndication+0x500>)
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b236:	1c58      	adds	r0, r3, #1
 800b238:	f887 004e 	strb.w	r0, [r7, #78]	@ 0x4e
 800b23c:	4413      	add	r3, r2
 800b23e:	b2ca      	uxtb	r2, r1
 800b240:	701a      	strb	r2, [r3, #0]
                break;
 800b242:	e1f8      	b.n	800b636 <LmhpRemoteMcastSetupOnMcpsIndication+0x87e>
            }
            case REMOTE_MCAST_SETUP_MC_GROUP_DELETE_REQ:
            {
                uint8_t status = 0x00;
 800b244:	2300      	movs	r3, #0
 800b246:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
                uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	689a      	ldr	r2, [r3, #8]
 800b24e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b252:	1c59      	adds	r1, r3, #1
 800b254:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b258:	4413      	add	r3, r2
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	f003 0303 	and.w	r3, r3, #3
 800b260:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

                status = id;
 800b264:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b268:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_DELETE_ANS;
 800b26c:	4b12      	ldr	r3, [pc, #72]	@ (800b2b8 <LmhpRemoteMcastSetupOnMcpsIndication+0x500>)
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b274:	1c59      	adds	r1, r3, #1
 800b276:	f887 104e 	strb.w	r1, [r7, #78]	@ 0x4e
 800b27a:	4413      	add	r3, r2
 800b27c:	2203      	movs	r2, #3
 800b27e:	701a      	strb	r2, [r3, #0]

                if( LoRaMacMcChannelDelete( ( AddressIdentifier_t )id ) != LORAMAC_STATUS_OK )
 800b280:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b284:	4618      	mov	r0, r3
 800b286:	f004 ffa9 	bl	80101dc <LoRaMacMcChannelDelete>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d005      	beq.n	800b29c <LmhpRemoteMcastSetupOnMcpsIndication+0x4e4>
                {
                    status |= 0x04; // McGroupUndefined bit set
 800b290:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800b294:	f043 0304 	orr.w	r3, r3, #4
 800b298:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
                }
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 800b29c:	4b06      	ldr	r3, [pc, #24]	@ (800b2b8 <LmhpRemoteMcastSetupOnMcpsIndication+0x500>)
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b2a4:	1c59      	adds	r1, r3, #1
 800b2a6:	f887 104e 	strb.w	r1, [r7, #78]	@ 0x4e
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800b2b0:	701a      	strb	r2, [r3, #0]
                break;
 800b2b2:	e1c0      	b.n	800b636 <LmhpRemoteMcastSetupOnMcpsIndication+0x87e>
 800b2b4:	200013c0 	.word	0x200013c0
 800b2b8:	200013b8 	.word	0x200013b8
            }
            case REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_REQ:
            {
                uint8_t status = 0x00;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	76fb      	strb	r3, [r7, #27]
                uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b2c8:	1c59      	adds	r1, r3, #1
 800b2ca:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b2ce:	4413      	add	r3, r2
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	f003 0303 	and.w	r3, r3, #3
 800b2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

                McSessionData[id].SessionTime =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	689a      	ldr	r2, [r3, #8]
 800b2de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b2e2:	1c59      	adds	r1, r3, #1
 800b2e4:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b2e8:	4413      	add	r3, r2
 800b2ea:	781a      	ldrb	r2, [r3, #0]
 800b2ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	4acb      	ldr	r2, [pc, #812]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b2f4:	2134      	movs	r1, #52	@ 0x34
 800b2f6:	fb01 f303 	mul.w	r3, r1, r3
 800b2fa:	4413      	add	r3, r2
 800b2fc:	3324      	adds	r3, #36	@ 0x24
 800b2fe:	6018      	str	r0, [r3, #0]
                McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	689a      	ldr	r2, [r3, #8]
 800b304:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b308:	1c59      	adds	r1, r3, #1
 800b30a:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b30e:	4413      	add	r3, r2
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	021b      	lsls	r3, r3, #8
 800b314:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 800b318:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b31c:	4ac0      	ldr	r2, [pc, #768]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b31e:	2134      	movs	r1, #52	@ 0x34
 800b320:	fb01 f303 	mul.w	r3, r1, r3
 800b324:	4413      	add	r3, r2
 800b326:	3324      	adds	r3, #36	@ 0x24
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	4601      	mov	r1, r0
 800b32c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b330:	440a      	add	r2, r1
 800b332:	49bb      	ldr	r1, [pc, #748]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b334:	2034      	movs	r0, #52	@ 0x34
 800b336:	fb00 f303 	mul.w	r3, r0, r3
 800b33a:	440b      	add	r3, r1
 800b33c:	3324      	adds	r3, #36	@ 0x24
 800b33e:	601a      	str	r2, [r3, #0]
                McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689a      	ldr	r2, [r3, #8]
 800b344:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b348:	1c59      	adds	r1, r3, #1
 800b34a:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b34e:	4413      	add	r3, r2
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	041b      	lsls	r3, r3, #16
 800b354:	f403 007f 	and.w	r0, r3, #16711680	@ 0xff0000
 800b358:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b35c:	4ab0      	ldr	r2, [pc, #704]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b35e:	2134      	movs	r1, #52	@ 0x34
 800b360:	fb01 f303 	mul.w	r3, r1, r3
 800b364:	4413      	add	r3, r2
 800b366:	3324      	adds	r3, #36	@ 0x24
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	4601      	mov	r1, r0
 800b36c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b370:	440a      	add	r2, r1
 800b372:	49ab      	ldr	r1, [pc, #684]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b374:	2034      	movs	r0, #52	@ 0x34
 800b376:	fb00 f303 	mul.w	r3, r0, r3
 800b37a:	440b      	add	r3, r1
 800b37c:	3324      	adds	r3, #36	@ 0x24
 800b37e:	601a      	str	r2, [r3, #0]
                McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689a      	ldr	r2, [r3, #8]
 800b384:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b388:	1c59      	adds	r1, r3, #1
 800b38a:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b38e:	4413      	add	r3, r2
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	0619      	lsls	r1, r3, #24
 800b394:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b398:	4aa1      	ldr	r2, [pc, #644]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b39a:	2034      	movs	r0, #52	@ 0x34
 800b39c:	fb00 f303 	mul.w	r3, r0, r3
 800b3a0:	4413      	add	r3, r2
 800b3a2:	3324      	adds	r3, #36	@ 0x24
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b3aa:	440a      	add	r2, r1
 800b3ac:	499c      	ldr	r1, [pc, #624]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b3ae:	2034      	movs	r0, #52	@ 0x34
 800b3b0:	fb00 f303 	mul.w	r3, r0, r3
 800b3b4:	440b      	add	r3, r1
 800b3b6:	3324      	adds	r3, #36	@ 0x24
 800b3b8:	601a      	str	r2, [r3, #0]

                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                McSessionData[id].SessionTime += UNIX_GPS_EPOCH_OFFSET;
 800b3ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b3be:	4a98      	ldr	r2, [pc, #608]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b3c0:	2134      	movs	r1, #52	@ 0x34
 800b3c2:	fb01 f303 	mul.w	r3, r1, r3
 800b3c6:	4413      	add	r3, r2
 800b3c8:	3324      	adds	r3, #36	@ 0x24
 800b3ca:	6819      	ldr	r1, [r3, #0]
 800b3cc:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800b3d0:	4b94      	ldr	r3, [pc, #592]	@ (800b624 <LmhpRemoteMcastSetupOnMcpsIndication+0x86c>)
 800b3d2:	440b      	add	r3, r1
 800b3d4:	4992      	ldr	r1, [pc, #584]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b3d6:	2034      	movs	r0, #52	@ 0x34
 800b3d8:	fb00 f202 	mul.w	r2, r0, r2
 800b3dc:	440a      	add	r2, r1
 800b3de:	3224      	adds	r2, #36	@ 0x24
 800b3e0:	6013      	str	r3, [r2, #0]

                McSessionData[id].SessionTimeout =  mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	689a      	ldr	r2, [r3, #8]
 800b3e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b3ea:	1c59      	adds	r1, r3, #1
 800b3ec:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b3f0:	4413      	add	r3, r2
 800b3f2:	781a      	ldrb	r2, [r3, #0]
 800b3f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b3f8:	f002 020f 	and.w	r2, r2, #15
 800b3fc:	b2d0      	uxtb	r0, r2
 800b3fe:	4a88      	ldr	r2, [pc, #544]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b400:	2134      	movs	r1, #52	@ 0x34
 800b402:	fb01 f303 	mul.w	r3, r1, r3
 800b406:	4413      	add	r3, r2
 800b408:	3328      	adds	r3, #40	@ 0x28
 800b40a:	4602      	mov	r2, r0
 800b40c:	701a      	strb	r2, [r3, #0]

                McSessionData[id].RxParams.ClassC.Frequency =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	689a      	ldr	r2, [r3, #8]
 800b412:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b416:	1c59      	adds	r1, r3, #1
 800b418:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b41c:	4413      	add	r3, r2
 800b41e:	781a      	ldrb	r2, [r3, #0]
 800b420:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b424:	4610      	mov	r0, r2
 800b426:	4a7e      	ldr	r2, [pc, #504]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b428:	2134      	movs	r1, #52	@ 0x34
 800b42a:	fb01 f303 	mul.w	r3, r1, r3
 800b42e:	4413      	add	r3, r2
 800b430:	332c      	adds	r3, #44	@ 0x2c
 800b432:	6018      	str	r0, [r3, #0]
                McSessionData[id].RxParams.ClassC.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689a      	ldr	r2, [r3, #8]
 800b438:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b43c:	1c59      	adds	r1, r3, #1
 800b43e:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b442:	4413      	add	r3, r2
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	021b      	lsls	r3, r3, #8
 800b448:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 800b44c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b450:	4a73      	ldr	r2, [pc, #460]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b452:	2134      	movs	r1, #52	@ 0x34
 800b454:	fb01 f303 	mul.w	r3, r1, r3
 800b458:	4413      	add	r3, r2
 800b45a:	332c      	adds	r3, #44	@ 0x2c
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	4601      	mov	r1, r0
 800b460:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b464:	430a      	orrs	r2, r1
 800b466:	496e      	ldr	r1, [pc, #440]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b468:	2034      	movs	r0, #52	@ 0x34
 800b46a:	fb00 f303 	mul.w	r3, r0, r3
 800b46e:	440b      	add	r3, r1
 800b470:	332c      	adds	r3, #44	@ 0x2c
 800b472:	601a      	str	r2, [r3, #0]
                McSessionData[id].RxParams.ClassC.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	689a      	ldr	r2, [r3, #8]
 800b478:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b47c:	1c59      	adds	r1, r3, #1
 800b47e:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b482:	4413      	add	r3, r2
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	041b      	lsls	r3, r3, #16
 800b488:	f403 007f 	and.w	r0, r3, #16711680	@ 0xff0000
 800b48c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b490:	4a63      	ldr	r2, [pc, #396]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b492:	2134      	movs	r1, #52	@ 0x34
 800b494:	fb01 f303 	mul.w	r3, r1, r3
 800b498:	4413      	add	r3, r2
 800b49a:	332c      	adds	r3, #44	@ 0x2c
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	4601      	mov	r1, r0
 800b4a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4a4:	430a      	orrs	r2, r1
 800b4a6:	495e      	ldr	r1, [pc, #376]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b4a8:	2034      	movs	r0, #52	@ 0x34
 800b4aa:	fb00 f303 	mul.w	r3, r0, r3
 800b4ae:	440b      	add	r3, r1
 800b4b0:	332c      	adds	r3, #44	@ 0x2c
 800b4b2:	601a      	str	r2, [r3, #0]
                McSessionData[id].RxParams.ClassC.Frequency *= 100;
 800b4b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4b8:	4a59      	ldr	r2, [pc, #356]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b4ba:	2134      	movs	r1, #52	@ 0x34
 800b4bc:	fb01 f303 	mul.w	r3, r1, r3
 800b4c0:	4413      	add	r3, r2
 800b4c2:	332c      	adds	r3, #44	@ 0x2c
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4ca:	2164      	movs	r1, #100	@ 0x64
 800b4cc:	fb01 f202 	mul.w	r2, r1, r2
 800b4d0:	4953      	ldr	r1, [pc, #332]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b4d2:	2034      	movs	r0, #52	@ 0x34
 800b4d4:	fb00 f303 	mul.w	r3, r0, r3
 800b4d8:	440b      	add	r3, r1
 800b4da:	332c      	adds	r3, #44	@ 0x2c
 800b4dc:	601a      	str	r2, [r3, #0]

                McSessionData[id].RxParams.ClassC.Datarate = mcpsIndication->Buffer[cmdIndex++];
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	689a      	ldr	r2, [r3, #8]
 800b4e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b4e6:	1c59      	adds	r1, r3, #1
 800b4e8:	f887 104f 	strb.w	r1, [r7, #79]	@ 0x4f
 800b4ec:	4413      	add	r3, r2
 800b4ee:	781a      	ldrb	r2, [r3, #0]
 800b4f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4f4:	b250      	sxtb	r0, r2
 800b4f6:	4a4a      	ldr	r2, [pc, #296]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b4f8:	2134      	movs	r1, #52	@ 0x34
 800b4fa:	fb01 f303 	mul.w	r3, r1, r3
 800b4fe:	4413      	add	r3, r2
 800b500:	3330      	adds	r3, #48	@ 0x30
 800b502:	4602      	mov	r2, r0
 800b504:	701a      	strb	r2, [r3, #0]

                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_ANS;
 800b506:	4b48      	ldr	r3, [pc, #288]	@ (800b628 <LmhpRemoteMcastSetupOnMcpsIndication+0x870>)
 800b508:	685a      	ldr	r2, [r3, #4]
 800b50a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b50e:	1c59      	adds	r1, r3, #1
 800b510:	f887 104e 	strb.w	r1, [r7, #78]	@ 0x4e
 800b514:	4413      	add	r3, r2
 800b516:	2204      	movs	r2, #4
 800b518:	701a      	strb	r2, [r3, #0]
                if( LoRaMacMcChannelSetupRxParams( ( AddressIdentifier_t )id, &McSessionData[id].RxParams, &status ) == LORAMAC_STATUS_OK )
 800b51a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b51e:	2234      	movs	r2, #52	@ 0x34
 800b520:	fb02 f303 	mul.w	r3, r2, r3
 800b524:	3328      	adds	r3, #40	@ 0x28
 800b526:	4a3e      	ldr	r2, [pc, #248]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b528:	4413      	add	r3, r2
 800b52a:	1d19      	adds	r1, r3, #4
 800b52c:	f107 021b 	add.w	r2, r7, #27
 800b530:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b534:	4618      	mov	r0, r3
 800b536:	f004 fe99 	bl	801026c <LoRaMacMcChannelSetupRxParams>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d163      	bne.n	800b608 <LmhpRemoteMcastSetupOnMcpsIndication+0x850>
                {
                    SysTime_t curTime = { .Seconds = 0, .SubSeconds = 0 };
 800b540:	2300      	movs	r3, #0
 800b542:	613b      	str	r3, [r7, #16]
 800b544:	2300      	movs	r3, #0
 800b546:	82bb      	strh	r3, [r7, #20]
                    curTime = SysTimeGet( );
 800b548:	f107 0310 	add.w	r3, r7, #16
 800b54c:	4618      	mov	r0, r3
 800b54e:	f00c f899 	bl	8017684 <SysTimeGet>

                    int32_t timeToSessionStart = McSessionData[id].SessionTime - curTime.Seconds;
 800b552:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b556:	4a32      	ldr	r2, [pc, #200]	@ (800b620 <LmhpRemoteMcastSetupOnMcpsIndication+0x868>)
 800b558:	2134      	movs	r1, #52	@ 0x34
 800b55a:	fb01 f303 	mul.w	r3, r1, r3
 800b55e:	4413      	add	r3, r2
 800b560:	3324      	adds	r3, #36	@ 0x24
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    if( timeToSessionStart > 0 )
 800b56a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	dd46      	ble.n	800b5fe <LmhpRemoteMcastSetupOnMcpsIndication+0x846>
                    {
                        // Start session start timer
                        TimerSetValue( &SessionStartTimer, timeToSessionStart * 1000 );
 800b570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b572:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b576:	fb02 f303 	mul.w	r3, r2, r3
 800b57a:	17da      	asrs	r2, r3, #31
 800b57c:	461c      	mov	r4, r3
 800b57e:	4615      	mov	r5, r2
 800b580:	4622      	mov	r2, r4
 800b582:	462b      	mov	r3, r5
 800b584:	4829      	ldr	r0, [pc, #164]	@ (800b62c <LmhpRemoteMcastSetupOnMcpsIndication+0x874>)
 800b586:	f00c fa09 	bl	801799c <UTIL_TIMER_SetPeriod>
                        TimerStart( &SessionStartTimer );
 800b58a:	4828      	ldr	r0, [pc, #160]	@ (800b62c <LmhpRemoteMcastSetupOnMcpsIndication+0x874>)
 800b58c:	f00c f912 	bl	80177b4 <UTIL_TIMER_Start>

                        DBG( "Time2SessionStart: %ld ms\r\n", timeToSessionStart * 1000 );
 800b590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b592:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b596:	fb02 f303 	mul.w	r3, r2, r3
 800b59a:	4619      	mov	r1, r3
 800b59c:	4824      	ldr	r0, [pc, #144]	@ (800b630 <LmhpRemoteMcastSetupOnMcpsIndication+0x878>)
 800b59e:	f00d fa21 	bl	80189e4 <printf>

                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 800b5a2:	4b21      	ldr	r3, [pc, #132]	@ (800b628 <LmhpRemoteMcastSetupOnMcpsIndication+0x870>)
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b5aa:	1c59      	adds	r1, r3, #1
 800b5ac:	f887 104e 	strb.w	r1, [r7, #78]	@ 0x4e
 800b5b0:	4413      	add	r3, r2
 800b5b2:	7efa      	ldrb	r2, [r7, #27]
 800b5b4:	701a      	strb	r2, [r3, #0]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 0  ) & 0xFF;
 800b5b6:	4b1c      	ldr	r3, [pc, #112]	@ (800b628 <LmhpRemoteMcastSetupOnMcpsIndication+0x870>)
 800b5b8:	685a      	ldr	r2, [r3, #4]
 800b5ba:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b5be:	1c59      	adds	r1, r3, #1
 800b5c0:	f887 104e 	strb.w	r1, [r7, #78]	@ 0x4e
 800b5c4:	4413      	add	r3, r2
 800b5c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b5c8:	b2d2      	uxtb	r2, r2
 800b5ca:	701a      	strb	r2, [r3, #0]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 8  ) & 0xFF;
 800b5cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ce:	1219      	asrs	r1, r3, #8
 800b5d0:	4b15      	ldr	r3, [pc, #84]	@ (800b628 <LmhpRemoteMcastSetupOnMcpsIndication+0x870>)
 800b5d2:	685a      	ldr	r2, [r3, #4]
 800b5d4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b5d8:	1c58      	adds	r0, r3, #1
 800b5da:	f887 004e 	strb.w	r0, [r7, #78]	@ 0x4e
 800b5de:	4413      	add	r3, r2
 800b5e0:	b2ca      	uxtb	r2, r1
 800b5e2:	701a      	strb	r2, [r3, #0]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 16 ) & 0xFF;
 800b5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5e6:	1419      	asrs	r1, r3, #16
 800b5e8:	4b0f      	ldr	r3, [pc, #60]	@ (800b628 <LmhpRemoteMcastSetupOnMcpsIndication+0x870>)
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b5f0:	1c58      	adds	r0, r3, #1
 800b5f2:	f887 004e 	strb.w	r0, [r7, #78]	@ 0x4e
 800b5f6:	4413      	add	r3, r2
 800b5f8:	b2ca      	uxtb	r2, r1
 800b5fa:	701a      	strb	r2, [r3, #0]
 800b5fc:	e01b      	b.n	800b636 <LmhpRemoteMcastSetupOnMcpsIndication+0x87e>
                        break;
                    }
                    else
                    {
                        // Session start time before current device time
                        status |= 0x10;
 800b5fe:	7efb      	ldrb	r3, [r7, #27]
 800b600:	f043 0310 	orr.w	r3, r3, #16
 800b604:	b2db      	uxtb	r3, r3
 800b606:	76fb      	strb	r3, [r7, #27]
                    }
                }
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 800b608:	4b07      	ldr	r3, [pc, #28]	@ (800b628 <LmhpRemoteMcastSetupOnMcpsIndication+0x870>)
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b610:	1c59      	adds	r1, r3, #1
 800b612:	f887 104e 	strb.w	r1, [r7, #78]	@ 0x4e
 800b616:	4413      	add	r3, r2
 800b618:	7efa      	ldrb	r2, [r7, #27]
 800b61a:	701a      	strb	r2, [r3, #0]
                break;
 800b61c:	e00b      	b.n	800b636 <LmhpRemoteMcastSetupOnMcpsIndication+0x87e>
 800b61e:	bf00      	nop
 800b620:	200013c0 	.word	0x200013c0
 800b624:	12d53d80 	.word	0x12d53d80
 800b628:	200013b8 	.word	0x200013b8
 800b62c:	20001490 	.word	0x20001490
 800b630:	08020bbc 	.word	0x08020bbc
                // TODO implement command prosessing and handling
                break;
            }
            default:
            {
                break;
 800b634:	bf00      	nop
    while( cmdIndex < mcpsIndication->BufferSize )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	7b1b      	ldrb	r3, [r3, #12]
 800b63a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800b63e:	429a      	cmp	r2, r3
 800b640:	f4ff abc6 	bcc.w	800add0 <LmhpRemoteMcastSetupOnMcpsIndication+0x18>
            }
        }
    }

    if( dataBufferIndex != 0 )
 800b644:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d05e      	beq.n	800b70a <LmhpRemoteMcastSetupOnMcpsIndication+0x952>
    {
        // Answer commands
        LmHandlerAppData_t appData =
 800b64c:	23c8      	movs	r3, #200	@ 0xc8
 800b64e:	723b      	strb	r3, [r7, #8]
 800b650:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b654:	727b      	strb	r3, [r7, #9]
        {
            .Buffer = LmhpRemoteMcastSetupState.DataBuffer,
 800b656:	4b2f      	ldr	r3, [pc, #188]	@ (800b714 <LmhpRemoteMcastSetupOnMcpsIndication+0x95c>)
 800b658:	685b      	ldr	r3, [r3, #4]
        LmHandlerAppData_t appData =
 800b65a:	60fb      	str	r3, [r7, #12]
            .BufferSize = dataBufferIndex,
            .Port = REMOTE_MCAST_SETUP_PORT
        };
        LmhpRemoteMcastSetupPackage.OnSendRequest( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 800b65c:	4b2e      	ldr	r3, [pc, #184]	@ (800b718 <LmhpRemoteMcastSetupOnMcpsIndication+0x960>)
 800b65e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b660:	f107 0208 	add.w	r2, r7, #8
 800b664:	2100      	movs	r1, #0
 800b666:	4610      	mov	r0, r2
 800b668:	4798      	blx	r3

        DBG( "ID          : %d\r\n", McSessionData[0].McGroupData.IdHeader.Fields.McGroupId );
 800b66a:	4b2c      	ldr	r3, [pc, #176]	@ (800b71c <LmhpRemoteMcastSetupOnMcpsIndication+0x964>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b672:	b2db      	uxtb	r3, r3
 800b674:	4619      	mov	r1, r3
 800b676:	482a      	ldr	r0, [pc, #168]	@ (800b720 <LmhpRemoteMcastSetupOnMcpsIndication+0x968>)
 800b678:	f00d f9b4 	bl	80189e4 <printf>
        DBG( "McAddr      : %08lX\r\n", McSessionData[0].McGroupData.McAddr );
 800b67c:	4b27      	ldr	r3, [pc, #156]	@ (800b71c <LmhpRemoteMcastSetupOnMcpsIndication+0x964>)
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	4619      	mov	r1, r3
 800b682:	4828      	ldr	r0, [pc, #160]	@ (800b724 <LmhpRemoteMcastSetupOnMcpsIndication+0x96c>)
 800b684:	f00d f9ae 	bl	80189e4 <printf>
        DBG( "McKey       : %02X", McSessionData[0].McGroupData.McKeyEncrypted[0] );
 800b688:	4b24      	ldr	r3, [pc, #144]	@ (800b71c <LmhpRemoteMcastSetupOnMcpsIndication+0x964>)
 800b68a:	7a1b      	ldrb	r3, [r3, #8]
 800b68c:	4619      	mov	r1, r3
 800b68e:	4826      	ldr	r0, [pc, #152]	@ (800b728 <LmhpRemoteMcastSetupOnMcpsIndication+0x970>)
 800b690:	f00d f9a8 	bl	80189e4 <printf>
        for( int i = 1; i < 16; i++ )
 800b694:	2301      	movs	r3, #1
 800b696:	647b      	str	r3, [r7, #68]	@ 0x44
 800b698:	e00b      	b.n	800b6b2 <LmhpRemoteMcastSetupOnMcpsIndication+0x8fa>
        {
            DBG( "-%02X",  McSessionData[0].McGroupData.McKeyEncrypted[i] );
 800b69a:	4a20      	ldr	r2, [pc, #128]	@ (800b71c <LmhpRemoteMcastSetupOnMcpsIndication+0x964>)
 800b69c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b69e:	4413      	add	r3, r2
 800b6a0:	3308      	adds	r3, #8
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4821      	ldr	r0, [pc, #132]	@ (800b72c <LmhpRemoteMcastSetupOnMcpsIndication+0x974>)
 800b6a8:	f00d f99c 	bl	80189e4 <printf>
        for( int i = 1; i < 16; i++ )
 800b6ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6b4:	2b0f      	cmp	r3, #15
 800b6b6:	ddf0      	ble.n	800b69a <LmhpRemoteMcastSetupOnMcpsIndication+0x8e2>
        }
        DBG( "\r\n" );
 800b6b8:	481d      	ldr	r0, [pc, #116]	@ (800b730 <LmhpRemoteMcastSetupOnMcpsIndication+0x978>)
 800b6ba:	f00d f9eb 	bl	8018a94 <puts>
        DBG( "McFCountMin : %lu\r\n",  McSessionData[0].McGroupData.McFCountMin );
 800b6be:	4b17      	ldr	r3, [pc, #92]	@ (800b71c <LmhpRemoteMcastSetupOnMcpsIndication+0x964>)
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	481b      	ldr	r0, [pc, #108]	@ (800b734 <LmhpRemoteMcastSetupOnMcpsIndication+0x97c>)
 800b6c6:	f00d f98d 	bl	80189e4 <printf>
        DBG( "McFCountMax : %lu\r\n",  McSessionData[0].McGroupData.McFCountMax );
 800b6ca:	4b14      	ldr	r3, [pc, #80]	@ (800b71c <LmhpRemoteMcastSetupOnMcpsIndication+0x964>)
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4819      	ldr	r0, [pc, #100]	@ (800b738 <LmhpRemoteMcastSetupOnMcpsIndication+0x980>)
 800b6d2:	f00d f987 	bl	80189e4 <printf>
        DBG( "SessionTime : %lu\r\n",  McSessionData[0].SessionTime );
 800b6d6:	4b11      	ldr	r3, [pc, #68]	@ (800b71c <LmhpRemoteMcastSetupOnMcpsIndication+0x964>)
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4817      	ldr	r0, [pc, #92]	@ (800b73c <LmhpRemoteMcastSetupOnMcpsIndication+0x984>)
 800b6de:	f00d f981 	bl	80189e4 <printf>
        DBG( "SessionTimeT: %d\r\n",  McSessionData[0].SessionTimeout );
 800b6e2:	4b0e      	ldr	r3, [pc, #56]	@ (800b71c <LmhpRemoteMcastSetupOnMcpsIndication+0x964>)
 800b6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	4815      	ldr	r0, [pc, #84]	@ (800b740 <LmhpRemoteMcastSetupOnMcpsIndication+0x988>)
 800b6ec:	f00d f97a 	bl	80189e4 <printf>
        DBG( "Rx Freq     : %lu\r\n", McSessionData[0].RxParams.ClassC.Frequency );
 800b6f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b71c <LmhpRemoteMcastSetupOnMcpsIndication+0x964>)
 800b6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4813      	ldr	r0, [pc, #76]	@ (800b744 <LmhpRemoteMcastSetupOnMcpsIndication+0x98c>)
 800b6f8:	f00d f974 	bl	80189e4 <printf>
        DBG( "Rx DR       : DR_%d\r\n", McSessionData[0].RxParams.ClassC.Datarate );
 800b6fc:	4b07      	ldr	r3, [pc, #28]	@ (800b71c <LmhpRemoteMcastSetupOnMcpsIndication+0x964>)
 800b6fe:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800b702:	4619      	mov	r1, r3
 800b704:	4810      	ldr	r0, [pc, #64]	@ (800b748 <LmhpRemoteMcastSetupOnMcpsIndication+0x990>)
 800b706:	f00d f96d 	bl	80189e4 <printf>

    }
}
 800b70a:	bf00      	nop
 800b70c:	3754      	adds	r7, #84	@ 0x54
 800b70e:	46bd      	mov	sp, r7
 800b710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b712:	bf00      	nop
 800b714:	200013b8 	.word	0x200013b8
 800b718:	20000310 	.word	0x20000310
 800b71c:	200013c0 	.word	0x200013c0
 800b720:	08020bd8 	.word	0x08020bd8
 800b724:	08020bec 	.word	0x08020bec
 800b728:	08020c04 	.word	0x08020c04
 800b72c:	08020c18 	.word	0x08020c18
 800b730:	08020c20 	.word	0x08020c20
 800b734:	08020c24 	.word	0x08020c24
 800b738:	08020c38 	.word	0x08020c38
 800b73c:	08020c4c 	.word	0x08020c4c
 800b740:	08020c60 	.word	0x08020c60
 800b744:	08020c74 	.word	0x08020c74
 800b748:	08020c88 	.word	0x08020c88

0800b74c <OnSessionStartTimer>:

static void OnSessionStartTimer( void *context )
{
 800b74c:	b5b0      	push	{r4, r5, r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
    TimerStop( &SessionStartTimer );
 800b754:	480d      	ldr	r0, [pc, #52]	@ (800b78c <OnSessionStartTimer+0x40>)
 800b756:	f00c f8b1 	bl	80178bc <UTIL_TIMER_Stop>

    // Switch to Class C
    LmHandlerRequestClass( CLASS_C );
 800b75a:	2002      	movs	r0, #2
 800b75c:	f7fd f8d0 	bl	8008900 <LmHandlerRequestClass>

    TimerSetValue( &SessionStopTimer, ( 1 << McSessionData[0].SessionTimeout ) * 1000 );
 800b760:	4b0b      	ldr	r3, [pc, #44]	@ (800b790 <OnSessionStartTimer+0x44>)
 800b762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b766:	461a      	mov	r2, r3
 800b768:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b76c:	4093      	lsls	r3, r2
 800b76e:	17da      	asrs	r2, r3, #31
 800b770:	461c      	mov	r4, r3
 800b772:	4615      	mov	r5, r2
 800b774:	4622      	mov	r2, r4
 800b776:	462b      	mov	r3, r5
 800b778:	4806      	ldr	r0, [pc, #24]	@ (800b794 <OnSessionStartTimer+0x48>)
 800b77a:	f00c f90f 	bl	801799c <UTIL_TIMER_SetPeriod>
    TimerStart( &SessionStopTimer );
 800b77e:	4805      	ldr	r0, [pc, #20]	@ (800b794 <OnSessionStartTimer+0x48>)
 800b780:	f00c f818 	bl	80177b4 <UTIL_TIMER_Start>
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bdb0      	pop	{r4, r5, r7, pc}
 800b78c:	20001490 	.word	0x20001490
 800b790:	200013c0 	.word	0x200013c0
 800b794:	200014b0 	.word	0x200014b0

0800b798 <OnSessionStopTimer>:

static void OnSessionStopTimer( void *context )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
    TimerStop( &SessionStopTimer );
 800b7a0:	4804      	ldr	r0, [pc, #16]	@ (800b7b4 <OnSessionStopTimer+0x1c>)
 800b7a2:	f00c f88b 	bl	80178bc <UTIL_TIMER_Stop>

    // Switch back to Class A
    LmHandlerRequestClass( CLASS_A );
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	f7fd f8aa 	bl	8008900 <LmHandlerRequestClass>
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	200014b0 	.word	0x200014b0

0800b7b8 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800b7b8:	b590      	push	{r4, r7, lr}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b7be:	f00c f9b7 	bl	8017b30 <UTIL_TIMER_GetCurrentTime>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4914      	ldr	r1, [pc, #80]	@ (800b818 <OnRadioTxDone+0x60>)
 800b7c8:	e9c1 2300 	strd	r2, r3, [r1]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b7cc:	4c13      	ldr	r4, [pc, #76]	@ (800b81c <OnRadioTxDone+0x64>)
 800b7ce:	463b      	mov	r3, r7
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f00b ff57 	bl	8017684 <SysTimeGet>
 800b7d6:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800b7da:	463a      	mov	r2, r7
 800b7dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7e0:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800b7e4:	4a0e      	ldr	r2, [pc, #56]	@ (800b820 <OnRadioTxDone+0x68>)
 800b7e6:	7813      	ldrb	r3, [r2, #0]
 800b7e8:	f043 0310 	orr.w	r3, r3, #16
 800b7ec:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b7ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b81c <OnRadioTxDone+0x64>)
 800b7f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00a      	beq.n	800b80e <OnRadioTxDone+0x56>
 800b7f8:	4b08      	ldr	r3, [pc, #32]	@ (800b81c <OnRadioTxDone+0x64>)
 800b7fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d004      	beq.n	800b80e <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b804:	4b05      	ldr	r3, [pc, #20]	@ (800b81c <OnRadioTxDone+0x64>)
 800b806:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	4798      	blx	r3
    }
}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	bd90      	pop	{r4, r7, pc}
 800b816:	bf00      	nop
 800b818:	20001bd0 	.word	0x20001bd0
 800b81c:	200014d0 	.word	0x200014d0
 800b820:	20001bc8 	.word	0x20001bc8

0800b824 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	4608      	mov	r0, r1
 800b82e:	4611      	mov	r1, r2
 800b830:	461a      	mov	r2, r3
 800b832:	4603      	mov	r3, r0
 800b834:	817b      	strh	r3, [r7, #10]
 800b836:	460b      	mov	r3, r1
 800b838:	813b      	strh	r3, [r7, #8]
 800b83a:	4613      	mov	r3, r2
 800b83c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b83e:	f00c f977 	bl	8017b30 <UTIL_TIMER_GetCurrentTime>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4914      	ldr	r1, [pc, #80]	@ (800b898 <OnRadioRxDone+0x74>)
 800b848:	e9c1 2300 	strd	r2, r3, [r1]
    RxDoneParams.Payload = payload;
 800b84c:	4a12      	ldr	r2, [pc, #72]	@ (800b898 <OnRadioRxDone+0x74>)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6093      	str	r3, [r2, #8]
    RxDoneParams.Size = size;
 800b852:	4a11      	ldr	r2, [pc, #68]	@ (800b898 <OnRadioRxDone+0x74>)
 800b854:	897b      	ldrh	r3, [r7, #10]
 800b856:	8193      	strh	r3, [r2, #12]
    RxDoneParams.Rssi = rssi;
 800b858:	4a0f      	ldr	r2, [pc, #60]	@ (800b898 <OnRadioRxDone+0x74>)
 800b85a:	893b      	ldrh	r3, [r7, #8]
 800b85c:	81d3      	strh	r3, [r2, #14]
    RxDoneParams.Snr = snr;
 800b85e:	4a0e      	ldr	r2, [pc, #56]	@ (800b898 <OnRadioRxDone+0x74>)
 800b860:	79fb      	ldrb	r3, [r7, #7]
 800b862:	7413      	strb	r3, [r2, #16]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800b864:	4a0d      	ldr	r2, [pc, #52]	@ (800b89c <OnRadioRxDone+0x78>)
 800b866:	7813      	ldrb	r3, [r2, #0]
 800b868:	f043 0308 	orr.w	r3, r3, #8
 800b86c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b86e:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a0 <OnRadioRxDone+0x7c>)
 800b870:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00a      	beq.n	800b88e <OnRadioRxDone+0x6a>
 800b878:	4b09      	ldr	r3, [pc, #36]	@ (800b8a0 <OnRadioRxDone+0x7c>)
 800b87a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d004      	beq.n	800b88e <OnRadioRxDone+0x6a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b884:	4b06      	ldr	r3, [pc, #24]	@ (800b8a0 <OnRadioRxDone+0x7c>)
 800b886:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	4798      	blx	r3
    }
}
 800b88e:	bf00      	nop
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	20001bd8 	.word	0x20001bd8
 800b89c:	20001bc8 	.word	0x20001bc8
 800b8a0:	200014d0 	.word	0x200014d0

0800b8a4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b8a8:	4a0b      	ldr	r2, [pc, #44]	@ (800b8d8 <OnRadioTxTimeout+0x34>)
 800b8aa:	7813      	ldrb	r3, [r2, #0]
 800b8ac:	f043 0304 	orr.w	r3, r3, #4
 800b8b0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8dc <OnRadioTxTimeout+0x38>)
 800b8b4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00a      	beq.n	800b8d2 <OnRadioTxTimeout+0x2e>
 800b8bc:	4b07      	ldr	r3, [pc, #28]	@ (800b8dc <OnRadioTxTimeout+0x38>)
 800b8be:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d004      	beq.n	800b8d2 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b8c8:	4b04      	ldr	r3, [pc, #16]	@ (800b8dc <OnRadioTxTimeout+0x38>)
 800b8ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	4798      	blx	r3
    }
}
 800b8d2:	bf00      	nop
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20001bc8 	.word	0x20001bc8
 800b8dc:	200014d0 	.word	0x200014d0

0800b8e0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800b8e4:	4a0b      	ldr	r2, [pc, #44]	@ (800b914 <OnRadioRxError+0x34>)
 800b8e6:	7813      	ldrb	r3, [r2, #0]
 800b8e8:	f043 0302 	orr.w	r3, r3, #2
 800b8ec:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b8ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b918 <OnRadioRxError+0x38>)
 800b8f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00a      	beq.n	800b90e <OnRadioRxError+0x2e>
 800b8f8:	4b07      	ldr	r3, [pc, #28]	@ (800b918 <OnRadioRxError+0x38>)
 800b8fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d004      	beq.n	800b90e <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b904:	4b04      	ldr	r3, [pc, #16]	@ (800b918 <OnRadioRxError+0x38>)
 800b906:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	4798      	blx	r3
    }
}
 800b90e:	bf00      	nop
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	20001bc8 	.word	0x20001bc8
 800b918:	200014d0 	.word	0x200014d0

0800b91c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800b920:	4a0b      	ldr	r2, [pc, #44]	@ (800b950 <OnRadioRxTimeout+0x34>)
 800b922:	7813      	ldrb	r3, [r2, #0]
 800b924:	f043 0301 	orr.w	r3, r3, #1
 800b928:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b92a:	4b0a      	ldr	r3, [pc, #40]	@ (800b954 <OnRadioRxTimeout+0x38>)
 800b92c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00a      	beq.n	800b94a <OnRadioRxTimeout+0x2e>
 800b934:	4b07      	ldr	r3, [pc, #28]	@ (800b954 <OnRadioRxTimeout+0x38>)
 800b936:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b940:	4b04      	ldr	r3, [pc, #16]	@ (800b954 <OnRadioRxTimeout+0x38>)
 800b942:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	4798      	blx	r3
    }
}
 800b94a:	bf00      	nop
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20001bc8 	.word	0x20001bc8
 800b954:	200014d0 	.word	0x200014d0

0800b958 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800b958:	b480      	push	{r7}
 800b95a:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b95c:	4b0a      	ldr	r3, [pc, #40]	@ (800b988 <UpdateRxSlotIdleState+0x30>)
 800b95e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800b962:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b966:	2b02      	cmp	r3, #2
 800b968:	d004      	beq.n	800b974 <UpdateRxSlotIdleState+0x1c>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800b96a:	4b07      	ldr	r3, [pc, #28]	@ (800b988 <UpdateRxSlotIdleState+0x30>)
 800b96c:	2206      	movs	r2, #6
 800b96e:	f883 24c4 	strb.w	r2, [r3, #1220]	@ 0x4c4
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800b972:	e003      	b.n	800b97c <UpdateRxSlotIdleState+0x24>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b974:	4b04      	ldr	r3, [pc, #16]	@ (800b988 <UpdateRxSlotIdleState+0x30>)
 800b976:	2202      	movs	r2, #2
 800b978:	f883 24c4 	strb.w	r2, [r3, #1220]	@ 0x4c4
}
 800b97c:	bf00      	nop
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	200014d0 	.word	0x200014d0

0800b98c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800b98c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b990:	b086      	sub	sp, #24
 800b992:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b994:	4b47      	ldr	r3, [pc, #284]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800b996:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800b99a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d002      	beq.n	800b9a8 <ProcessRadioTxDone+0x1c>
    {
        Radio.Sleep( );
 800b9a2:	4b45      	ldr	r3, [pc, #276]	@ (800bab8 <ProcessRadioTxDone+0x12c>)
 800b9a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a6:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800b9a8:	4b42      	ldr	r3, [pc, #264]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800b9aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	469a      	mov	sl, r3
 800b9b2:	4693      	mov	fp, r2
 800b9b4:	4652      	mov	r2, sl
 800b9b6:	465b      	mov	r3, fp
 800b9b8:	4840      	ldr	r0, [pc, #256]	@ (800babc <ProcessRadioTxDone+0x130>)
 800b9ba:	f00b ffef 	bl	801799c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800b9be:	483f      	ldr	r0, [pc, #252]	@ (800babc <ProcessRadioTxDone+0x130>)
 800b9c0:	f00b fef8 	bl	80177b4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800b9c4:	4b3b      	ldr	r3, [pc, #236]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800b9c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	4698      	mov	r8, r3
 800b9ce:	4691      	mov	r9, r2
 800b9d0:	4642      	mov	r2, r8
 800b9d2:	464b      	mov	r3, r9
 800b9d4:	483a      	ldr	r0, [pc, #232]	@ (800bac0 <ProcessRadioTxDone+0x134>)
 800b9d6:	f00b ffe1 	bl	801799c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800b9da:	4839      	ldr	r0, [pc, #228]	@ (800bac0 <ProcessRadioTxDone+0x134>)
 800b9dc:	f00b feea 	bl	80177b4 <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800b9e0:	4b34      	ldr	r3, [pc, #208]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800b9e2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800b9e6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d004      	beq.n	800b9f8 <ProcessRadioTxDone+0x6c>
 800b9ee:	4b31      	ldr	r3, [pc, #196]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800b9f0:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d01d      	beq.n	800ba34 <ProcessRadioTxDone+0xa8>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800b9f8:	2316      	movs	r3, #22
 800b9fa:	753b      	strb	r3, [r7, #20]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b9fc:	4b2d      	ldr	r3, [pc, #180]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800b9fe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	f107 0214 	add.w	r2, r7, #20
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f007 fa21 	bl	8012e52 <RegionGetPhyParam>
 800ba10:	4603      	mov	r3, r0
 800ba12:	613b      	str	r3, [r7, #16]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800ba14:	4b27      	ldr	r3, [pc, #156]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800ba16:	f8d3 23d4 	ldr.w	r2, [r3, #980]	@ 0x3d4
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	2200      	movs	r2, #0
 800ba20:	461c      	mov	r4, r3
 800ba22:	4615      	mov	r5, r2
 800ba24:	4622      	mov	r2, r4
 800ba26:	462b      	mov	r3, r5
 800ba28:	4826      	ldr	r0, [pc, #152]	@ (800bac4 <ProcessRadioTxDone+0x138>)
 800ba2a:	f00b ffb7 	bl	801799c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800ba2e:	4825      	ldr	r0, [pc, #148]	@ (800bac4 <ProcessRadioTxDone+0x138>)
 800ba30:	f00b fec0 	bl	80177b4 <UTIL_TIMER_Start>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800ba34:	4b1f      	ldr	r3, [pc, #124]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800ba36:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ba3a:	4a1e      	ldr	r2, [pc, #120]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800ba3c:	f892 243d 	ldrb.w	r2, [r2, #1085]	@ 0x43d
 800ba40:	f883 213e 	strb.w	r2, [r3, #318]	@ 0x13e
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800ba44:	4b1b      	ldr	r3, [pc, #108]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800ba46:	f893 343d 	ldrb.w	r3, [r3, #1085]	@ 0x43d
 800ba4a:	703b      	strb	r3, [r7, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800ba4c:	4b19      	ldr	r3, [pc, #100]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800ba4e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ba52:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d102      	bne.n	800ba60 <ProcessRadioTxDone+0xd4>
    {
        txDone.Joined  = false;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	707b      	strb	r3, [r7, #1]
 800ba5e:	e001      	b.n	800ba64 <ProcessRadioTxDone+0xd8>
    }
    else
    {
        txDone.Joined  = true;
 800ba60:	2301      	movs	r3, #1
 800ba62:	707b      	strb	r3, [r7, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800ba64:	4b18      	ldr	r3, [pc, #96]	@ (800bac8 <ProcessRadioTxDone+0x13c>)
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800ba6e:	4b11      	ldr	r3, [pc, #68]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800ba70:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	463a      	mov	r2, r7
 800ba78:	4611      	mov	r1, r2
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f007 fa01 	bl	8012e82 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800ba80:	4b0c      	ldr	r3, [pc, #48]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800ba82:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800ba86:	4b10      	ldr	r3, [pc, #64]	@ (800bac8 <ProcessRadioTxDone+0x13c>)
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	e9c1 2372 	strd	r2, r3, [r1, #456]	@ 0x1c8

    if( MacCtx.NodeAckRequested == false )
 800ba90:	4b08      	ldr	r3, [pc, #32]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800ba92:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800ba96:	f083 0301 	eor.w	r3, r3, #1
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d003      	beq.n	800baa8 <ProcessRadioTxDone+0x11c>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800baa0:	4b04      	ldr	r3, [pc, #16]	@ (800bab4 <ProcessRadioTxDone+0x128>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469
    }
}
 800baa8:	bf00      	nop
 800baaa:	3718      	adds	r7, #24
 800baac:	46bd      	mov	sp, r7
 800baae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bab2:	bf00      	nop
 800bab4:	200014d0 	.word	0x200014d0
 800bab8:	0802113c 	.word	0x0802113c
 800babc:	20001860 	.word	0x20001860
 800bac0:	20001880 	.word	0x20001880
 800bac4:	200018e8 	.word	0x200018e8
 800bac8:	20001bd0 	.word	0x20001bd0

0800bacc <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800bad0:	4b10      	ldr	r3, [pc, #64]	@ (800bb14 <PrepareRxDoneAbort+0x48>)
 800bad2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bada:	4a0e      	ldr	r2, [pc, #56]	@ (800bb14 <PrepareRxDoneAbort+0x48>)
 800badc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800bae0:	4b0c      	ldr	r3, [pc, #48]	@ (800bb14 <PrepareRxDoneAbort+0x48>)
 800bae2:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d002      	beq.n	800baf0 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800baea:	2000      	movs	r0, #0
 800baec:	f001 f854 	bl	800cb98 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800baf0:	4a08      	ldr	r2, [pc, #32]	@ (800bb14 <PrepareRxDoneAbort+0x48>)
 800baf2:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800baf6:	f043 0302 	orr.w	r3, r3, #2
 800bafa:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
    MacCtx.MacFlags.Bits.MacDone = 1;
 800bafe:	4a05      	ldr	r2, [pc, #20]	@ (800bb14 <PrepareRxDoneAbort+0x48>)
 800bb00:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800bb04:	f043 0320 	orr.w	r3, r3, #32
 800bb08:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5

    UpdateRxSlotIdleState( );
 800bb0c:	f7ff ff24 	bl	800b958 <UpdateRxSlotIdleState>
}
 800bb10:	bf00      	nop
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	200014d0 	.word	0x200014d0

0800bb18 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800bb18:	b5b0      	push	{r4, r5, r7, lr}
 800bb1a:	b0a6      	sub	sp, #152	@ 0x98
 800bb1c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800bb1e:	2313      	movs	r3, #19
 800bb20:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800bb24:	4bc5      	ldr	r3, [pc, #788]	@ (800be3c <ProcessRadioRxDone+0x324>)
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint16_t size = RxDoneParams.Size;
 800bb2a:	4bc4      	ldr	r3, [pc, #784]	@ (800be3c <ProcessRadioRxDone+0x324>)
 800bb2c:	899b      	ldrh	r3, [r3, #12]
 800bb2e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800bb32:	4bc2      	ldr	r3, [pc, #776]	@ (800be3c <ProcessRadioRxDone+0x324>)
 800bb34:	89db      	ldrh	r3, [r3, #14]
 800bb36:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    int8_t snr = RxDoneParams.Snr;
 800bb3a:	4bc0      	ldr	r3, [pc, #768]	@ (800be3c <ProcessRadioRxDone+0x324>)
 800bb3c:	7c1b      	ldrb	r3, [r3, #16]
 800bb3e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

    uint8_t pktHeaderLen = 0;
 800bb42:	2300      	movs	r3, #0
 800bb44:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

    uint32_t downLinkCounter = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800bb4c:	4bbc      	ldr	r3, [pc, #752]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bb4e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bb52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint8_t multicast = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800bb5e:	2304      	movs	r3, #4
 800bb60:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800bb64:	4bb6      	ldr	r3, [pc, #728]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 246c 	strb.w	r2, [r3, #1132]	@ 0x46c
    MacCtx.McpsIndication.Rssi = rssi;
 800bb6c:	4ab4      	ldr	r2, [pc, #720]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bb6e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800bb72:	f8a2 3456 	strh.w	r3, [r2, #1110]	@ 0x456
    MacCtx.McpsIndication.Snr = snr;
 800bb76:	4ab2      	ldr	r2, [pc, #712]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bb78:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bb7c:	f882 3458 	strb.w	r3, [r2, #1112]	@ 0x458
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800bb80:	4baf      	ldr	r3, [pc, #700]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bb82:	f893 24c4 	ldrb.w	r2, [r3, #1220]	@ 0x4c4
 800bb86:	4bae      	ldr	r3, [pc, #696]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bb88:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459
    MacCtx.McpsIndication.Port = 0;
 800bb8c:	4bac      	ldr	r3, [pc, #688]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f883 244b 	strb.w	r2, [r3, #1099]	@ 0x44b
    MacCtx.McpsIndication.Multicast = 0;
 800bb94:	4baa      	ldr	r3, [pc, #680]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 244a 	strb.w	r2, [r3, #1098]	@ 0x44a
    MacCtx.McpsIndication.FramePending = 0;
 800bb9c:	4ba8      	ldr	r3, [pc, #672]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 244d 	strb.w	r2, [r3, #1101]	@ 0x44d
    MacCtx.McpsIndication.Buffer = NULL;
 800bba4:	4ba6      	ldr	r3, [pc, #664]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bba6:	2200      	movs	r2, #0
 800bba8:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
    MacCtx.McpsIndication.BufferSize = 0;
 800bbac:	4ba4      	ldr	r3, [pc, #656]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2454 	strb.w	r2, [r3, #1108]	@ 0x454
    MacCtx.McpsIndication.RxData = false;
 800bbb4:	4ba2      	ldr	r3, [pc, #648]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455
    MacCtx.McpsIndication.AckReceived = false;
 800bbbc:	4ba0      	ldr	r3, [pc, #640]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 245a 	strb.w	r2, [r3, #1114]	@ 0x45a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800bbc4:	4b9e      	ldr	r3, [pc, #632]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8c3 245c 	str.w	r2, [r3, #1116]	@ 0x45c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800bbcc:	4b9c      	ldr	r3, [pc, #624]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.McpsIndication.DevAddress = 0;
 800bbd4:	4b9a      	ldr	r3, [pc, #616]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f8c3 2460 	str.w	r2, [r3, #1120]	@ 0x460
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800bbdc:	4b98      	ldr	r3, [pc, #608]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 2464 	strb.w	r2, [r3, #1124]	@ 0x464

    Radio.Sleep( );
 800bbe4:	4b97      	ldr	r3, [pc, #604]	@ (800be44 <ProcessRadioRxDone+0x32c>)
 800bbe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbe8:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800bbea:	4897      	ldr	r0, [pc, #604]	@ (800be48 <ProcessRadioRxDone+0x330>)
 800bbec:	f00b fe66 	bl	80178bc <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800bbf0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800bbf8:	f004 ff72 	bl	8010ae0 <LoRaMacClassBRxBeacon>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00a      	beq.n	800bc18 <ProcessRadioRxDone+0x100>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800bc02:	4a8f      	ldr	r2, [pc, #572]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bc04:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800bc08:	f8a2 34ba 	strh.w	r3, [r2, #1210]	@ 0x4ba
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800bc0c:	4a8c      	ldr	r2, [pc, #560]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bc0e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bc12:	f882 34bc 	strb.w	r3, [r2, #1212]	@ 0x4bc
        return;
 800bc16:	e3e3      	b.n	800c3e0 <ProcessRadioRxDone+0x8c8>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800bc18:	4b89      	ldr	r3, [pc, #548]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bc1a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bc1e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d11e      	bne.n	800bc64 <ProcessRadioRxDone+0x14c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800bc26:	f004 ff70 	bl	8010b0a <LoRaMacClassBIsPingExpected>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00a      	beq.n	800bc46 <ProcessRadioRxDone+0x12e>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bc30:	2000      	movs	r0, #0
 800bc32:	f004 ff19 	bl	8010a68 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800bc36:	2000      	movs	r0, #0
 800bc38:	f004 ff3e 	bl	8010ab8 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800bc3c:	4b80      	ldr	r3, [pc, #512]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bc3e:	2204      	movs	r2, #4
 800bc40:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459
 800bc44:	e00e      	b.n	800bc64 <ProcessRadioRxDone+0x14c>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800bc46:	f004 ff68 	bl	8010b1a <LoRaMacClassBIsMulticastExpected>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d009      	beq.n	800bc64 <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bc50:	2000      	movs	r0, #0
 800bc52:	f004 ff14 	bl	8010a7e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800bc56:	2000      	movs	r0, #0
 800bc58:	f004 ff38 	bl	8010acc <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800bc5c:	4b78      	ldr	r3, [pc, #480]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bc5e:	2205      	movs	r2, #5
 800bc60:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800bc64:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800bc68:	1c5a      	adds	r2, r3, #1
 800bc6a:	f887 2076 	strb.w	r2, [r7, #118]	@ 0x76
 800bc6e:	461a      	mov	r2, r3
 800bc70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bc72:	4413      	add	r3, r2
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

    switch( macHdr.Bits.MType )
 800bc7a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800bc7e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	3b01      	subs	r3, #1
 800bc86:	2b06      	cmp	r3, #6
 800bc88:	f200 8381 	bhi.w	800c38e <ProcessRadioRxDone+0x876>
 800bc8c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc94 <ProcessRadioRxDone+0x17c>)
 800bc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc92:	bf00      	nop
 800bc94:	0800bcb1 	.word	0x0800bcb1
 800bc98:	0800c38f 	.word	0x0800c38f
 800bc9c:	0800be55 	.word	0x0800be55
 800bca0:	0800c38f 	.word	0x0800c38f
 800bca4:	0800be4d 	.word	0x0800be4d
 800bca8:	0800c38f 	.word	0x0800c38f
 800bcac:	0800c335 	.word	0x0800c335
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 800bcb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bcb2:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800bcb4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800bcbc:	4b60      	ldr	r3, [pc, #384]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bcbe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bcc2:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d006      	beq.n	800bcd8 <ProcessRadioRxDone+0x1c0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bcca:	4b5d      	ldr	r3, [pc, #372]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                PrepareRxDoneAbort( );
 800bcd2:	f7ff fefb 	bl	800bacc <PrepareRxDoneAbort>
                return;
 800bcd6:	e383      	b.n	800c3e0 <ProcessRadioRxDone+0x8c8>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800bcd8:	f7fc fb8a 	bl	80083f0 <SecureElementGetJoinEui>
 800bcdc:	4601      	mov	r1, r0
 800bcde:	f107 030c 	add.w	r3, r7, #12
 800bce2:	461a      	mov	r2, r3
 800bce4:	20ff      	movs	r0, #255	@ 0xff
 800bce6:	f006 f965 	bl	8011fb4 <LoRaMacCryptoHandleJoinAccept>
 800bcea:	4603      	mov	r3, r0
 800bcec:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800bcf0:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f040 8095 	bne.w	800be24 <ProcessRadioRxDone+0x30c>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800bcfa:	7d7a      	ldrb	r2, [r7, #21]
 800bcfc:	4b50      	ldr	r3, [pc, #320]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bcfe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd02:	649a      	str	r2, [r3, #72]	@ 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800bd04:	4b4e      	ldr	r3, [pc, #312]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd06:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd0a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800bd0c:	7dbb      	ldrb	r3, [r7, #22]
 800bd0e:	021a      	lsls	r2, r3, #8
 800bd10:	4b4b      	ldr	r3, [pc, #300]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd12:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd16:	430a      	orrs	r2, r1
 800bd18:	649a      	str	r2, [r3, #72]	@ 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800bd1a:	4b49      	ldr	r3, [pc, #292]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd1c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd20:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
 800bd24:	041a      	lsls	r2, r3, #16
 800bd26:	4b46      	ldr	r3, [pc, #280]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd28:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	649a      	str	r2, [r3, #72]	@ 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800bd30:	4b43      	ldr	r3, [pc, #268]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd32:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd36:	69ba      	ldr	r2, [r7, #24]
 800bd38:	64da      	str	r2, [r3, #76]	@ 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800bd3a:	7f3b      	ldrb	r3, [r7, #28]
 800bd3c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	4b3f      	ldr	r3, [pc, #252]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd44:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd48:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800bd4c:	7f3b      	ldrb	r3, [r7, #28]
 800bd4e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bd52:	b2da      	uxtb	r2, r3
 800bd54:	4b3a      	ldr	r3, [pc, #232]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd56:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd5a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800bd5e:	7f3b      	ldrb	r3, [r7, #28]
 800bd60:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	4b36      	ldr	r3, [pc, #216]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd68:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd6c:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800bd70:	7f7a      	ldrb	r2, [r7, #29]
 800bd72:	4b33      	ldr	r3, [pc, #204]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd74:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd78:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800bd7c:	4b30      	ldr	r3, [pc, #192]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd7e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd82:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d105      	bne.n	800bd96 <ProcessRadioRxDone+0x27e>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800bd8a:	4b2d      	ldr	r3, [pc, #180]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd8c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd90:	2201      	movs	r2, #1
 800bd92:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800bd96:	4b2a      	ldr	r3, [pc, #168]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bd98:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bd9c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800bda0:	4b27      	ldr	r3, [pc, #156]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bda2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bda6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800bdaa:	fb01 f202 	mul.w	r2, r1, r2
 800bdae:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800bdb2:	4b23      	ldr	r3, [pc, #140]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bdb4:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bdb8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800bdbc:	4b20      	ldr	r3, [pc, #128]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bdbe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bdc2:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 800bdc6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800bdca:	4b1d      	ldr	r3, [pc, #116]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bdcc:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f883 21e2 	strb.w	r2, [r3, #482]	@ 0x1e2

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800bdd6:	f107 030c 	add.w	r3, r7, #12
 800bdda:	3312      	adds	r3, #18
 800bddc:	66fb      	str	r3, [r7, #108]	@ 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800bdde:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	3b11      	subs	r3, #17
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800bdec:	4b14      	ldr	r3, [pc, #80]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800bdee:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f007 f88e 	bl	8012f1c <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800be00:	4b0f      	ldr	r3, [pc, #60]	@ (800be40 <ProcessRadioRxDone+0x328>)
 800be02:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800be06:	2202      	movs	r2, #2
 800be08:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800be0c:	2000      	movs	r0, #0
 800be0e:	f005 fb33 	bl	8011478 <LoRaMacConfirmQueueIsCmdActive>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	f000 82c1 	beq.w	800c39c <ProcessRadioRxDone+0x884>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800be1a:	2100      	movs	r1, #0
 800be1c:	2000      	movs	r0, #0
 800be1e:	f005 fab3 	bl	8011388 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800be22:	e2bb      	b.n	800c39c <ProcessRadioRxDone+0x884>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800be24:	2000      	movs	r0, #0
 800be26:	f005 fb27 	bl	8011478 <LoRaMacConfirmQueueIsCmdActive>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 82b5 	beq.w	800c39c <ProcessRadioRxDone+0x884>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800be32:	2100      	movs	r1, #0
 800be34:	2007      	movs	r0, #7
 800be36:	f005 faa7 	bl	8011388 <LoRaMacConfirmQueueSetStatus>
            break;
 800be3a:	e2af      	b.n	800c39c <ProcessRadioRxDone+0x884>
 800be3c:	20001bd8 	.word	0x20001bd8
 800be40:	200014d0 	.word	0x200014d0
 800be44:	0802113c 	.word	0x0802113c
 800be48:	20001880 	.word	0x20001880
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800be4c:	4baf      	ldr	r3, [pc, #700]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800be4e:	2201      	movs	r2, #1
 800be50:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800be54:	4bad      	ldr	r3, [pc, #692]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800be56:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800be5a:	f893 312d 	ldrb.w	r3, [r3, #301]	@ 0x12d
 800be5e:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800be62:	4baa      	ldr	r3, [pc, #680]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800be64:	f893 344c 	ldrb.w	r3, [r3, #1100]	@ 0x44c
 800be68:	b25b      	sxtb	r3, r3
 800be6a:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800be6e:	230d      	movs	r3, #13
 800be70:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800be74:	4ba5      	ldr	r3, [pc, #660]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800be76:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800be7a:	f893 313f 	ldrb.w	r3, [r3, #319]	@ 0x13f
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d002      	beq.n	800be88 <ProcessRadioRxDone+0x370>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800be82:	230e      	movs	r3, #14
 800be84:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800be88:	4ba0      	ldr	r3, [pc, #640]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800be8a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800be94:	4611      	mov	r1, r2
 800be96:	4618      	mov	r0, r3
 800be98:	f006 ffdb 	bl	8012e52 <RegionGetPhyParam>
 800be9c:	4603      	mov	r3, r0
 800be9e:	667b      	str	r3, [r7, #100]	@ 0x64
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 800bea0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800bea4:	3b0d      	subs	r3, #13
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	b21b      	sxth	r3, r3
 800beaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800beae:	b21a      	sxth	r2, r3
 800beb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800beb2:	b21b      	sxth	r3, r3
 800beb4:	429a      	cmp	r2, r3
 800beb6:	dd06      	ble.n	800bec6 <ProcessRadioRxDone+0x3ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800beb8:	4b94      	ldr	r3, [pc, #592]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                PrepareRxDoneAbort( );
 800bec0:	f7ff fe04 	bl	800bacc <PrepareRxDoneAbort>
                return;
 800bec4:	e28c      	b.n	800c3e0 <ProcessRadioRxDone+0x8c8>
            }
            macMsgData.Buffer = payload;
 800bec6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bec8:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800beca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800bed4:	4b8e      	ldr	r3, [pc, #568]	@ (800c110 <ProcessRadioRxDone+0x5f8>)
 800bed6:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800bed8:	23ff      	movs	r3, #255	@ 0xff
 800beda:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800bede:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bee2:	4618      	mov	r0, r3
 800bee4:	f006 fd3b 	bl	801295e <LoRaMacParserData>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d006      	beq.n	800befc <ProcessRadioRxDone+0x3e4>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800beee:	4b87      	ldr	r3, [pc, #540]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800bef0:	2201      	movs	r2, #1
 800bef2:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                PrepareRxDoneAbort( );
 800bef6:	f7ff fde9 	bl	800bacc <PrepareRxDoneAbort>
                return;
 800befa:	e271      	b.n	800c3e0 <ProcessRadioRxDone+0x8c8>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800befc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800befe:	4a83      	ldr	r2, [pc, #524]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800bf00:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800bf04:	1dba      	adds	r2, r7, #6
 800bf06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f002 fca7 	bl	800e860 <DetermineFrameType>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d006      	beq.n	800bf26 <ProcessRadioRxDone+0x40e>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bf18:	4b7c      	ldr	r3, [pc, #496]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                PrepareRxDoneAbort( );
 800bf20:	f7ff fdd4 	bl	800bacc <PrepareRxDoneAbort>
                return;
 800bf24:	e25c      	b.n	800c3e0 <ProcessRadioRxDone+0x8c8>
            }

            //Check if it is a multicast message
            multicast = 0;
 800bf26:	2300      	movs	r3, #0
 800bf28:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
            downLinkCounter = 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bf30:	2300      	movs	r3, #0
 800bf32:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 800bf36:	e05a      	b.n	800bfee <ProcessRadioRxDone+0x4d6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800bf38:	4b74      	ldr	r3, [pc, #464]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800bf3a:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800bf3e:	f897 2081 	ldrb.w	r2, [r7, #129]	@ 0x81
 800bf42:	4613      	mov	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	440b      	add	r3, r1
 800bf4c:	3354      	adds	r3, #84	@ 0x54
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d146      	bne.n	800bfe4 <ProcessRadioRxDone+0x4cc>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800bf56:	4b6d      	ldr	r3, [pc, #436]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800bf58:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800bf5c:	f897 2081 	ldrb.w	r2, [r7, #129]	@ 0x81
 800bf60:	4613      	mov	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	00db      	lsls	r3, r3, #3
 800bf68:	440b      	add	r3, r1
 800bf6a:	3351      	adds	r3, #81	@ 0x51
 800bf6c:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d038      	beq.n	800bfe4 <ProcessRadioRxDone+0x4cc>
                {
                    multicast = 1;
 800bf72:	2301      	movs	r3, #1
 800bf74:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800bf78:	4b64      	ldr	r3, [pc, #400]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800bf7a:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800bf7e:	f897 2081 	ldrb.w	r2, [r7, #129]	@ 0x81
 800bf82:	4613      	mov	r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4413      	add	r3, r2
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	440b      	add	r3, r1
 800bf8c:	3352      	adds	r3, #82	@ 0x52
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800bf94:	4b5d      	ldr	r3, [pc, #372]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800bf96:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800bf9a:	f897 2081 	ldrb.w	r2, [r7, #129]	@ 0x81
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4413      	add	r3, r2
 800bfa4:	00db      	lsls	r3, r3, #3
 800bfa6:	440b      	add	r3, r1
 800bfa8:	336c      	adds	r3, #108	@ 0x6c
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800bfb0:	4b56      	ldr	r3, [pc, #344]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800bfb2:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800bfb6:	f897 2081 	ldrb.w	r2, [r7, #129]	@ 0x81
 800bfba:	4613      	mov	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	4413      	add	r3, r2
 800bfc0:	00db      	lsls	r3, r3, #3
 800bfc2:	440b      	add	r3, r1
 800bfc4:	3354      	adds	r3, #84	@ 0x54
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800bfcc:	4b4f      	ldr	r3, [pc, #316]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800bfce:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800bfd2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d10e      	bne.n	800bff8 <ProcessRadioRxDone+0x4e0>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800bfda:	4b4c      	ldr	r3, [pc, #304]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800bfdc:	2203      	movs	r2, #3
 800bfde:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459
                    }
                    break;
 800bfe2:	e009      	b.n	800bff8 <ProcessRadioRxDone+0x4e0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bfe4:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800bfe8:	3301      	adds	r3, #1
 800bfea:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 800bfee:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d9a0      	bls.n	800bf38 <ProcessRadioRxDone+0x420>
 800bff6:	e000      	b.n	800bffa <ProcessRadioRxDone+0x4e2>
                    break;
 800bff8:	bf00      	nop
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800bffa:	2315      	movs	r3, #21
 800bffc:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800c000:	4b42      	ldr	r3, [pc, #264]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800c002:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800c00c:	4611      	mov	r1, r2
 800c00e:	4618      	mov	r0, r3
 800c010:	f006 ff1f 	bl	8012e52 <RegionGetPhyParam>
 800c014:	4603      	mov	r3, r0
 800c016:	667b      	str	r3, [r7, #100]	@ 0x64

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800c018:	79bc      	ldrb	r4, [r7, #6]
 800c01a:	4b3c      	ldr	r3, [pc, #240]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800c01c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c020:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c022:	b292      	uxth	r2, r2
 800c024:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 800c028:	f897 0082 	ldrb.w	r0, [r7, #130]	@ 0x82
 800c02c:	f107 0108 	add.w	r1, r7, #8
 800c030:	9102      	str	r1, [sp, #8]
 800c032:	1df9      	adds	r1, r7, #7
 800c034:	9101      	str	r1, [sp, #4]
 800c036:	9200      	str	r2, [sp, #0]
 800c038:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800c03c:	462a      	mov	r2, r5
 800c03e:	4621      	mov	r1, r4
 800c040:	f000 fde0 	bl	800cc04 <GetFCntDown>
 800c044:	4603      	mov	r3, r0
 800c046:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c04a:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d038      	beq.n	800c0c4 <ProcessRadioRxDone+0x5ac>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800c052:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800c056:	2b07      	cmp	r3, #7
 800c058:	d120      	bne.n	800c09c <ProcessRadioRxDone+0x584>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800c05a:	4b2c      	ldr	r3, [pc, #176]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800c05c:	2208      	movs	r2, #8
 800c05e:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800c062:	4b2a      	ldr	r3, [pc, #168]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800c064:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c068:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d122      	bne.n	800c0b6 <ProcessRadioRxDone+0x59e>
 800c070:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800c074:	f023 031f 	bic.w	r3, r3, #31
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2ba0      	cmp	r3, #160	@ 0xa0
 800c07c:	d11b      	bne.n	800c0b6 <ProcessRadioRxDone+0x59e>
 800c07e:	4b23      	ldr	r3, [pc, #140]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800c080:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c084:	f8d3 21e8 	ldr.w	r2, [r3, #488]	@ 0x1e8
 800c088:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d113      	bne.n	800c0b6 <ProcessRadioRxDone+0x59e>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800c08e:	4b1f      	ldr	r3, [pc, #124]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800c090:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c094:	2201      	movs	r2, #1
 800c096:	f883 21c0 	strb.w	r2, [r3, #448]	@ 0x1c0
 800c09a:	e00c      	b.n	800c0b6 <ProcessRadioRxDone+0x59e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800c09c:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800c0a0:	2b08      	cmp	r3, #8
 800c0a2:	d104      	bne.n	800c0ae <ProcessRadioRxDone+0x596>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800c0a4:	4b19      	ldr	r3, [pc, #100]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800c0a6:	220a      	movs	r2, #10
 800c0a8:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
 800c0ac:	e003      	b.n	800c0b6 <ProcessRadioRxDone+0x59e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c0ae:	4b17      	ldr	r3, [pc, #92]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	4a14      	ldr	r2, [pc, #80]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800c0ba:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c
                PrepareRxDoneAbort( );
 800c0be:	f7ff fd05 	bl	800bacc <PrepareRxDoneAbort>
                return;
 800c0c2:	e18d      	b.n	800c3e0 <ProcessRadioRxDone+0x8c8>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800c0c4:	79fa      	ldrb	r2, [r7, #7]
 800c0c6:	68b9      	ldr	r1, [r7, #8]
 800c0c8:	f897 0082 	ldrb.w	r0, [r7, #130]	@ 0x82
 800c0cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c0d8:	f006 fa02 	bl	80124e0 <LoRaMacCryptoUnsecureMessage>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c0e2:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d014      	beq.n	800c114 <ProcessRadioRxDone+0x5fc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800c0ea:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	d104      	bne.n	800c0fc <ProcessRadioRxDone+0x5e4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800c0f2:	4b06      	ldr	r3, [pc, #24]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800c0f4:	220b      	movs	r2, #11
 800c0f6:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
 800c0fa:	e003      	b.n	800c104 <ProcessRadioRxDone+0x5ec>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800c0fc:	4b03      	ldr	r3, [pc, #12]	@ (800c10c <ProcessRadioRxDone+0x5f4>)
 800c0fe:	220c      	movs	r2, #12
 800c100:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                }
                PrepareRxDoneAbort( );
 800c104:	f7ff fce2 	bl	800bacc <PrepareRxDoneAbort>
                return;
 800c108:	e16a      	b.n	800c3e0 <ProcessRadioRxDone+0x8c8>
 800c10a:	bf00      	nop
 800c10c:	200014d0 	.word	0x200014d0
 800c110:	20001708 	.word	0x20001708
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c114:	4bb4      	ldr	r3, [pc, #720]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c116:	2200      	movs	r2, #0
 800c118:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
            MacCtx.McpsIndication.Multicast = multicast;
 800c11c:	4ab2      	ldr	r2, [pc, #712]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c11e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c122:	f882 344a 	strb.w	r3, [r2, #1098]	@ 0x44a
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800c126:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800c12a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	461a      	mov	r2, r3
 800c132:	4bad      	ldr	r3, [pc, #692]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c134:	f883 244d 	strb.w	r2, [r3, #1101]	@ 0x44d
            MacCtx.McpsIndication.Buffer = NULL;
 800c138:	4bab      	ldr	r3, [pc, #684]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
            MacCtx.McpsIndication.BufferSize = 0;
 800c140:	4ba9      	ldr	r3, [pc, #676]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c142:	2200      	movs	r2, #0
 800c144:	f883 2454 	strb.w	r2, [r3, #1108]	@ 0x454
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	4aa7      	ldr	r2, [pc, #668]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c14c:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c150:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800c154:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	bf14      	ite	ne
 800c15e:	2301      	movne	r3, #1
 800c160:	2300      	moveq	r3, #0
 800c162:	b2da      	uxtb	r2, r3
 800c164:	4ba0      	ldr	r3, [pc, #640]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c166:	f883 245a 	strb.w	r2, [r3, #1114]	@ 0x45a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c16a:	4b9f      	ldr	r3, [pc, #636]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c172:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800c176:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	bf14      	ite	ne
 800c180:	2301      	movne	r3, #1
 800c182:	2300      	moveq	r3, #0
 800c184:	b2da      	uxtb	r2, r3
 800c186:	4b98      	ldr	r3, [pc, #608]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c188:	f883 246c 	strb.w	r2, [r3, #1132]	@ 0x46c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800c18c:	4b96      	ldr	r3, [pc, #600]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c18e:	f893 3459 	ldrb.w	r3, [r3, #1113]	@ 0x459
 800c192:	2b00      	cmp	r3, #0
 800c194:	d004      	beq.n	800c1a0 <ProcessRadioRxDone+0x688>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800c196:	4b94      	ldr	r3, [pc, #592]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c198:	f893 3459 	ldrb.w	r3, [r3, #1113]	@ 0x459
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d105      	bne.n	800c1ac <ProcessRadioRxDone+0x694>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800c1a0:	4b91      	ldr	r3, [pc, #580]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c1a2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800c1ac:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d104      	bne.n	800c1be <ProcessRadioRxDone+0x6a6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800c1b4:	4b8c      	ldr	r3, [pc, #560]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
 800c1bc:	e028      	b.n	800c210 <ProcessRadioRxDone+0x6f8>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800c1be:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800c1c2:	f023 031f 	bic.w	r3, r3, #31
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2ba0      	cmp	r3, #160	@ 0xa0
 800c1ca:	d117      	bne.n	800c1fc <ProcessRadioRxDone+0x6e4>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800c1cc:	4b86      	ldr	r3, [pc, #536]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c1ce:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 21c0 	strb.w	r2, [r3, #448]	@ 0x1c0
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800c1d8:	4b83      	ldr	r3, [pc, #524]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c1da:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c1de:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d105      	bne.n	800c1f2 <ProcessRadioRxDone+0x6da>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800c1e6:	4b80      	ldr	r3, [pc, #512]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c1e8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c1ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c1ee:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800c1f2:	4b7d      	ldr	r3, [pc, #500]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
 800c1fa:	e009      	b.n	800c210 <ProcessRadioRxDone+0x6f8>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800c1fc:	4b7a      	ldr	r3, [pc, #488]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c1fe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c202:	2200      	movs	r2, #0
 800c204:	f883 21c0 	strb.w	r2, [r3, #448]	@ 0x1c0
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800c208:	4b77      	ldr	r3, [pc, #476]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800c210:	4b75      	ldr	r3, [pc, #468]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c212:	f893 3459 	ldrb.w	r3, [r3, #1113]	@ 0x459
 800c216:	4a74      	ldr	r2, [pc, #464]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c218:	f892 2468 	ldrb.w	r2, [r2, #1128]	@ 0x468
 800c21c:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800c220:	4618      	mov	r0, r3
 800c222:	f001 fed1 	bl	800dfc8 <RemoveMacCommands>

            switch( fType )
 800c226:	79bb      	ldrb	r3, [r7, #6]
 800c228:	2b03      	cmp	r3, #3
 800c22a:	d874      	bhi.n	800c316 <ProcessRadioRxDone+0x7fe>
 800c22c:	a201      	add	r2, pc, #4	@ (adr r2, 800c234 <ProcessRadioRxDone+0x71c>)
 800c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c232:	bf00      	nop
 800c234:	0800c245 	.word	0x0800c245
 800c238:	0800c295 	.word	0x0800c295
 800c23c:	0800c2cb 	.word	0x0800c2cb
 800c240:	0800c2f1 	.word	0x0800c2f1
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800c244:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800c248:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	461c      	mov	r4, r3
 800c250:	4b65      	ldr	r3, [pc, #404]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c252:	f893 3459 	ldrb.w	r3, [r3, #1113]	@ 0x459
 800c256:	f997 1077 	ldrsb.w	r1, [r7, #119]	@ 0x77
 800c25a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c25e:	f102 0010 	add.w	r0, r2, #16
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	460b      	mov	r3, r1
 800c266:	4622      	mov	r2, r4
 800c268:	2100      	movs	r1, #0
 800c26a:	f000 fe95 	bl	800cf98 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c26e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800c272:	4b5d      	ldr	r3, [pc, #372]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c274:	f883 244b 	strb.w	r2, [r3, #1099]	@ 0x44b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c27a:	4a5b      	ldr	r2, [pc, #364]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c27c:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c280:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800c284:	4b58      	ldr	r3, [pc, #352]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c286:	f883 2454 	strb.w	r2, [r3, #1108]	@ 0x454
                    MacCtx.McpsIndication.RxData = true;
 800c28a:	4b57      	ldr	r3, [pc, #348]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455
                    break;
 800c292:	e047      	b.n	800c324 <ProcessRadioRxDone+0x80c>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800c294:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800c298:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	461c      	mov	r4, r3
 800c2a0:	4b51      	ldr	r3, [pc, #324]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c2a2:	f893 3459 	ldrb.w	r3, [r3, #1113]	@ 0x459
 800c2a6:	f997 1077 	ldrsb.w	r1, [r7, #119]	@ 0x77
 800c2aa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c2ae:	f102 0010 	add.w	r0, r2, #16
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	f000 fe6d 	bl	800cf98 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c2be:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800c2c2:	4b49      	ldr	r3, [pc, #292]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c2c4:	f883 244b 	strb.w	r2, [r3, #1099]	@ 0x44b
                    break;
 800c2c8:	e02c      	b.n	800c324 <ProcessRadioRxDone+0x80c>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800c2ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c2cc:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800c2d0:	4b45      	ldr	r3, [pc, #276]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c2d2:	f893 3459 	ldrb.w	r3, [r3, #1113]	@ 0x459
 800c2d6:	f997 1077 	ldrsb.w	r1, [r7, #119]	@ 0x77
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	2100      	movs	r1, #0
 800c2e0:	f000 fe5a 	bl	800cf98 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c2e4:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800c2e8:	4b3f      	ldr	r3, [pc, #252]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c2ea:	f883 244b 	strb.w	r2, [r3, #1099]	@ 0x44b
                    break;
 800c2ee:	e019      	b.n	800c324 <ProcessRadioRxDone+0x80c>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c2f0:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800c2f4:	4b3c      	ldr	r3, [pc, #240]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c2f6:	f883 244b 	strb.w	r2, [r3, #1099]	@ 0x44b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c2fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2fc:	4a3a      	ldr	r2, [pc, #232]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c2fe:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c302:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800c306:	4b38      	ldr	r3, [pc, #224]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c308:	f883 2454 	strb.w	r2, [r3, #1108]	@ 0x454
                    MacCtx.McpsIndication.RxData = true;
 800c30c:	4b36      	ldr	r3, [pc, #216]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455
                    break;
 800c314:	e006      	b.n	800c324 <ProcessRadioRxDone+0x80c>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c316:	4b34      	ldr	r3, [pc, #208]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c318:	2201      	movs	r2, #1
 800c31a:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                    PrepareRxDoneAbort( );
 800c31e:	f7ff fbd5 	bl	800bacc <PrepareRxDoneAbort>
                    break;
 800c322:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c324:	4a30      	ldr	r2, [pc, #192]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c326:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c32a:	f043 0302 	orr.w	r3, r3, #2
 800c32e:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5

            break;
 800c332:	e034      	b.n	800c39e <ProcessRadioRxDone+0x886>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800c334:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c338:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c33a:	18d1      	adds	r1, r2, r3
 800c33c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c340:	b29b      	uxth	r3, r3
 800c342:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	b29b      	uxth	r3, r3
 800c34a:	461a      	mov	r2, r3
 800c34c:	4827      	ldr	r0, [pc, #156]	@ (800c3ec <ProcessRadioRxDone+0x8d4>)
 800c34e:	f00b ffda 	bl	8018306 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800c352:	4b25      	ldr	r3, [pc, #148]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c354:	2203      	movs	r2, #3
 800c356:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c35a:	4b23      	ldr	r3, [pc, #140]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800c362:	4b21      	ldr	r3, [pc, #132]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c364:	4a21      	ldr	r2, [pc, #132]	@ (800c3ec <ProcessRadioRxDone+0x8d4>)
 800c366:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800c36a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c374:	1ad3      	subs	r3, r2, r3
 800c376:	b2da      	uxtb	r2, r3
 800c378:	4b1b      	ldr	r3, [pc, #108]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c37a:	f883 2454 	strb.w	r2, [r3, #1108]	@ 0x454

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c37e:	4a1a      	ldr	r2, [pc, #104]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c380:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c384:	f043 0302 	orr.w	r3, r3, #2
 800c388:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
            break;
 800c38c:	e007      	b.n	800c39e <ProcessRadioRxDone+0x886>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c38e:	4b16      	ldr	r3, [pc, #88]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c390:	2201      	movs	r2, #1
 800c392:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
            PrepareRxDoneAbort( );
 800c396:	f7ff fb99 	bl	800bacc <PrepareRxDoneAbort>
            break;
 800c39a:	e000      	b.n	800c39e <ProcessRadioRxDone+0x886>
            break;
 800c39c:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800c39e:	4b12      	ldr	r3, [pc, #72]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c3a0:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d008      	beq.n	800c3ba <ProcessRadioRxDone+0x8a2>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800c3a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c3aa:	f893 346c 	ldrb.w	r3, [r3, #1132]	@ 0x46c
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00d      	beq.n	800c3ce <ProcessRadioRxDone+0x8b6>
        {
            OnAckTimeoutTimerEvent( NULL );
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	f000 fbf0 	bl	800cb98 <OnAckTimeoutTimerEvent>
 800c3b8:	e009      	b.n	800c3ce <ProcessRadioRxDone+0x8b6>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800c3ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c3bc:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c3c0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d102      	bne.n	800c3ce <ProcessRadioRxDone+0x8b6>
        {
            OnAckTimeoutTimerEvent( NULL );
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	f000 fbe5 	bl	800cb98 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c3ce:	4a06      	ldr	r2, [pc, #24]	@ (800c3e8 <ProcessRadioRxDone+0x8d0>)
 800c3d0:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c3d4:	f043 0320 	orr.w	r3, r3, #32
 800c3d8:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5

    UpdateRxSlotIdleState( );
 800c3dc:	f7ff fabc 	bl	800b958 <UpdateRxSlotIdleState>
}
 800c3e0:	3788      	adds	r7, #136	@ 0x88
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bdb0      	pop	{r4, r5, r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	200014d0 	.word	0x200014d0
 800c3ec:	20001708 	.word	0x20001708

0800c3f0 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800c3f4:	4b12      	ldr	r3, [pc, #72]	@ (800c440 <ProcessRadioTxTimeout+0x50>)
 800c3f6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c3fa:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d002      	beq.n	800c408 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800c402:	4b10      	ldr	r3, [pc, #64]	@ (800c444 <ProcessRadioTxTimeout+0x54>)
 800c404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c406:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800c408:	f7ff faa6 	bl	800b958 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800c40c:	4b0c      	ldr	r3, [pc, #48]	@ (800c440 <ProcessRadioTxTimeout+0x50>)
 800c40e:	2202      	movs	r2, #2
 800c410:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800c414:	2002      	movs	r0, #2
 800c416:	f005 f801 	bl	801141c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800c41a:	4b09      	ldr	r3, [pc, #36]	@ (800c440 <ProcessRadioTxTimeout+0x50>)
 800c41c:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800c420:	2b00      	cmp	r3, #0
 800c422:	d003      	beq.n	800c42c <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800c424:	4b06      	ldr	r3, [pc, #24]	@ (800c440 <ProcessRadioTxTimeout+0x50>)
 800c426:	2201      	movs	r2, #1
 800c428:	f883 243b 	strb.w	r2, [r3, #1083]	@ 0x43b
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c42c:	4a04      	ldr	r2, [pc, #16]	@ (800c440 <ProcessRadioTxTimeout+0x50>)
 800c42e:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c432:	f043 0320 	orr.w	r3, r3, #32
 800c436:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
}
 800c43a:	bf00      	nop
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	200014d0 	.word	0x200014d0
 800c444:	0802113c 	.word	0x0802113c

0800c448 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	460a      	mov	r2, r1
 800c452:	71fb      	strb	r3, [r7, #7]
 800c454:	4613      	mov	r3, r2
 800c456:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800c458:	2300      	movs	r3, #0
 800c45a:	73fb      	strb	r3, [r7, #15]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800c45c:	4b38      	ldr	r3, [pc, #224]	@ (800c540 <HandleRadioRxErrorTimeout+0xf8>)
 800c45e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c462:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c466:	2b02      	cmp	r3, #2
 800c468:	d002      	beq.n	800c470 <HandleRadioRxErrorTimeout+0x28>
    {
        Radio.Sleep( );
 800c46a:	4b36      	ldr	r3, [pc, #216]	@ (800c544 <HandleRadioRxErrorTimeout+0xfc>)
 800c46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c46e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c470:	f004 fb43 	bl	8010afa <LoRaMacClassBIsBeaconExpected>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d007      	beq.n	800c48a <HandleRadioRxErrorTimeout+0x42>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800c47a:	2002      	movs	r0, #2
 800c47c:	f004 fae9 	bl	8010a52 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800c480:	2000      	movs	r0, #0
 800c482:	f004 fb0f 	bl	8010aa4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800c486:	2301      	movs	r3, #1
 800c488:	73fb      	strb	r3, [r7, #15]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800c48a:	4b2d      	ldr	r3, [pc, #180]	@ (800c540 <HandleRadioRxErrorTimeout+0xf8>)
 800c48c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c490:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c494:	2b01      	cmp	r3, #1
 800c496:	d119      	bne.n	800c4cc <HandleRadioRxErrorTimeout+0x84>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c498:	f004 fb37 	bl	8010b0a <LoRaMacClassBIsPingExpected>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d007      	beq.n	800c4b2 <HandleRadioRxErrorTimeout+0x6a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c4a2:	2000      	movs	r0, #0
 800c4a4:	f004 fae0 	bl	8010a68 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	f004 fb05 	bl	8010ab8 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c4b2:	f004 fb32 	bl	8010b1a <LoRaMacClassBIsMulticastExpected>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d007      	beq.n	800c4cc <HandleRadioRxErrorTimeout+0x84>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c4bc:	2000      	movs	r0, #0
 800c4be:	f004 fade 	bl	8010a7e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	f004 fb02 	bl	8010acc <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	f083 0301 	eor.w	r3, r3, #1
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d02d      	beq.n	800c534 <HandleRadioRxErrorTimeout+0xec>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800c4d8:	4b19      	ldr	r3, [pc, #100]	@ (800c540 <HandleRadioRxErrorTimeout+0xf8>)
 800c4da:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10d      	bne.n	800c4fe <HandleRadioRxErrorTimeout+0xb6>
        {
            if( MacCtx.NodeAckRequested == true )
 800c4e2:	4b17      	ldr	r3, [pc, #92]	@ (800c540 <HandleRadioRxErrorTimeout+0xf8>)
 800c4e4:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d003      	beq.n	800c4f4 <HandleRadioRxErrorTimeout+0xac>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800c4ec:	4a14      	ldr	r2, [pc, #80]	@ (800c540 <HandleRadioRxErrorTimeout+0xf8>)
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
 800c4f0:	f882 3469 	strb.w	r3, [r2, #1129]	@ 0x469
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800c4f4:	79fb      	ldrb	r3, [r7, #7]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f004 ff90 	bl	801141c <LoRaMacConfirmQueueSetStatusCmn>
 800c4fc:	e01a      	b.n	800c534 <HandleRadioRxErrorTimeout+0xec>
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800c4fe:	4b10      	ldr	r3, [pc, #64]	@ (800c540 <HandleRadioRxErrorTimeout+0xf8>)
 800c500:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d003      	beq.n	800c510 <HandleRadioRxErrorTimeout+0xc8>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800c508:	4a0d      	ldr	r2, [pc, #52]	@ (800c540 <HandleRadioRxErrorTimeout+0xf8>)
 800c50a:	79bb      	ldrb	r3, [r7, #6]
 800c50c:	f882 3469 	strb.w	r3, [r2, #1129]	@ 0x469
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800c510:	79bb      	ldrb	r3, [r7, #6]
 800c512:	4618      	mov	r0, r3
 800c514:	f004 ff82 	bl	801141c <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800c518:	4b09      	ldr	r3, [pc, #36]	@ (800c540 <HandleRadioRxErrorTimeout+0xf8>)
 800c51a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c51e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c522:	2b02      	cmp	r3, #2
 800c524:	d006      	beq.n	800c534 <HandleRadioRxErrorTimeout+0xec>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c526:	4a06      	ldr	r2, [pc, #24]	@ (800c540 <HandleRadioRxErrorTimeout+0xf8>)
 800c528:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c52c:	f043 0320 	orr.w	r3, r3, #32
 800c530:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
            }
        }
    }

    UpdateRxSlotIdleState( );
 800c534:	f7ff fa10 	bl	800b958 <UpdateRxSlotIdleState>
}
 800c538:	bf00      	nop
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	200014d0 	.word	0x200014d0
 800c544:	0802113c 	.word	0x0802113c

0800c548 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800c54c:	2106      	movs	r1, #6
 800c54e:	2005      	movs	r0, #5
 800c550:	f7ff ff7a 	bl	800c448 <HandleRadioRxErrorTimeout>
}
 800c554:	bf00      	nop
 800c556:	bd80      	pop	{r7, pc}

0800c558 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800c55c:	2104      	movs	r1, #4
 800c55e:	2003      	movs	r0, #3
 800c560:	f7ff ff72 	bl	800c448 <HandleRadioRxErrorTimeout>
}
 800c564:	bf00      	nop
 800c566:	bd80      	pop	{r7, pc}

0800c568 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c56e:	b672      	cpsid	i
}
 800c570:	bf00      	nop
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
    events = LoRaMacRadioEvents;
 800c572:	4b1b      	ldr	r3, [pc, #108]	@ (800c5e0 <LoRaMacHandleIrqEvents+0x78>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	607b      	str	r3, [r7, #4]
    LoRaMacRadioEvents.Value = 0;
 800c578:	4b19      	ldr	r3, [pc, #100]	@ (800c5e0 <LoRaMacHandleIrqEvents+0x78>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800c57e:	b662      	cpsie	i
}
 800c580:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d027      	beq.n	800c5d8 <LoRaMacHandleIrqEvents+0x70>
    {
        if( events.Events.TxDone == 1 )
 800c588:	793b      	ldrb	r3, [r7, #4]
 800c58a:	f003 0310 	and.w	r3, r3, #16
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	2b00      	cmp	r3, #0
 800c592:	d001      	beq.n	800c598 <LoRaMacHandleIrqEvents+0x30>
        {
            ProcessRadioTxDone( );
 800c594:	f7ff f9fa 	bl	800b98c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800c598:	793b      	ldrb	r3, [r7, #4]
 800c59a:	f003 0308 	and.w	r3, r3, #8
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d001      	beq.n	800c5a8 <LoRaMacHandleIrqEvents+0x40>
        {
            ProcessRadioRxDone( );
 800c5a4:	f7ff fab8 	bl	800bb18 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800c5a8:	793b      	ldrb	r3, [r7, #4]
 800c5aa:	f003 0304 	and.w	r3, r3, #4
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d001      	beq.n	800c5b8 <LoRaMacHandleIrqEvents+0x50>
        {
            ProcessRadioTxTimeout( );
 800c5b4:	f7ff ff1c 	bl	800c3f0 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800c5b8:	793b      	ldrb	r3, [r7, #4]
 800c5ba:	f003 0302 	and.w	r3, r3, #2
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <LoRaMacHandleIrqEvents+0x60>
        {
            ProcessRadioRxError( );
 800c5c4:	f7ff ffc0 	bl	800c548 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800c5c8:	793b      	ldrb	r3, [r7, #4]
 800c5ca:	f003 0301 	and.w	r3, r3, #1
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <LoRaMacHandleIrqEvents+0x70>
        {
            ProcessRadioRxTimeout( );
 800c5d4:	f7ff ffc0 	bl	800c558 <ProcessRadioRxTimeout>
        }
    }
}
 800c5d8:	bf00      	nop
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20001bc8 	.word	0x20001bc8

0800c5e4 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800c5e8:	4b08      	ldr	r3, [pc, #32]	@ (800c60c <LoRaMacIsBusy+0x28>)
 800c5ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d106      	bne.n	800c600 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800c5f2:	4b06      	ldr	r3, [pc, #24]	@ (800c60c <LoRaMacIsBusy+0x28>)
 800c5f4:	f893 34c6 	ldrb.w	r3, [r3, #1222]	@ 0x4c6
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d101      	bne.n	800c600 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	e000      	b.n	800c602 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800c600:	2301      	movs	r3, #1
}
 800c602:	4618      	mov	r0, r3
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	200014d0 	.word	0x200014d0

0800c610 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800c61a:	4a05      	ldr	r2, [pc, #20]	@ (800c630 <LoRaMacEnableRequests+0x20>)
 800c61c:	79fb      	ldrb	r3, [r7, #7]
 800c61e:	f882 34c6 	strb.w	r3, [r2, #1222]	@ 0x4c6
}
 800c622:	bf00      	nop
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	200014d0 	.word	0x200014d0

0800c634 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800c63a:	4b2c      	ldr	r3, [pc, #176]	@ (800c6ec <LoRaMacHandleRequestEvents+0xb8>)
 800c63c:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800c640:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800c642:	4b2a      	ldr	r3, [pc, #168]	@ (800c6ec <LoRaMacHandleRequestEvents+0xb8>)
 800c644:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d14a      	bne.n	800c6e2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c64c:	4b27      	ldr	r3, [pc, #156]	@ (800c6ec <LoRaMacHandleRequestEvents+0xb8>)
 800c64e:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d006      	beq.n	800c66a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800c65c:	4a23      	ldr	r2, [pc, #140]	@ (800c6ec <LoRaMacHandleRequestEvents+0xb8>)
 800c65e:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c662:	f36f 0300 	bfc	r3, #0, #1
 800c666:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c66a:	4b20      	ldr	r3, [pc, #128]	@ (800c6ec <LoRaMacHandleRequestEvents+0xb8>)
 800c66c:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800c670:	f003 0304 	and.w	r3, r3, #4
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	d006      	beq.n	800c688 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c67a:	4a1c      	ldr	r2, [pc, #112]	@ (800c6ec <LoRaMacHandleRequestEvents+0xb8>)
 800c67c:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c680:	f36f 0382 	bfc	r3, #2, #1
 800c684:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c688:	2001      	movs	r0, #1
 800c68a:	f7ff ffc1 	bl	800c610 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800c68e:	793b      	ldrb	r3, [r7, #4]
 800c690:	f003 0301 	and.w	r3, r3, #1
 800c694:	b2db      	uxtb	r3, r3
 800c696:	2b00      	cmp	r3, #0
 800c698:	d005      	beq.n	800c6a6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800c69a:	4b14      	ldr	r3, [pc, #80]	@ (800c6ec <LoRaMacHandleRequestEvents+0xb8>)
 800c69c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4813      	ldr	r0, [pc, #76]	@ (800c6f0 <LoRaMacHandleRequestEvents+0xbc>)
 800c6a4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800c6a6:	793b      	ldrb	r3, [r7, #4]
 800c6a8:	f003 0304 	and.w	r3, r3, #4
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00e      	beq.n	800c6d0 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800c6b2:	4810      	ldr	r0, [pc, #64]	@ (800c6f4 <LoRaMacHandleRequestEvents+0xc0>)
 800c6b4:	f004 fefa 	bl	80114ac <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800c6b8:	f004 ff44 	bl	8011544 <LoRaMacConfirmQueueGetCnt>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d006      	beq.n	800c6d0 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c6c2:	4a0a      	ldr	r2, [pc, #40]	@ (800c6ec <LoRaMacHandleRequestEvents+0xb8>)
 800c6c4:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c6c8:	f043 0304 	orr.w	r3, r3, #4
 800c6cc:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800c6d0:	f004 fa45 	bl	8010b5e <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800c6d4:	4a05      	ldr	r2, [pc, #20]	@ (800c6ec <LoRaMacHandleRequestEvents+0xb8>)
 800c6d6:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c6da:	f36f 1345 	bfc	r3, #5, #1
 800c6de:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
    }
}
 800c6e2:	bf00      	nop
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	200014d0 	.word	0x200014d0
 800c6f0:	20001938 	.word	0x20001938
 800c6f4:	20001950 	.word	0x20001950

0800c6f8 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800c6fe:	4b0a      	ldr	r3, [pc, #40]	@ (800c728 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800c700:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10a      	bne.n	800c71e <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800c708:	2300      	movs	r3, #0
 800c70a:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800c70c:	1dfb      	adds	r3, r7, #7
 800c70e:	4618      	mov	r0, r3
 800c710:	f004 fd34 	bl	801117c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800c714:	79fb      	ldrb	r3, [r7, #7]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d001      	beq.n	800c71e <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800c71a:	f000 fc2d 	bl	800cf78 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800c71e:	bf00      	nop
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	200014d0 	.word	0x200014d0

0800c72c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b088      	sub	sp, #32
 800c730:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800c732:	4b24      	ldr	r3, [pc, #144]	@ (800c7c4 <LoRaMacHandleIndicationEvents+0x98>)
 800c734:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800c738:	f003 0308 	and.w	r3, r3, #8
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00c      	beq.n	800c75c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800c742:	4a20      	ldr	r2, [pc, #128]	@ (800c7c4 <LoRaMacHandleIndicationEvents+0x98>)
 800c744:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c748:	f36f 03c3 	bfc	r3, #3, #1
 800c74c:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800c750:	4b1c      	ldr	r3, [pc, #112]	@ (800c7c4 <LoRaMacHandleIndicationEvents+0x98>)
 800c752:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	481b      	ldr	r0, [pc, #108]	@ (800c7c8 <LoRaMacHandleIndicationEvents+0x9c>)
 800c75a:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800c75c:	4b19      	ldr	r3, [pc, #100]	@ (800c7c4 <LoRaMacHandleIndicationEvents+0x98>)
 800c75e:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800c762:	f003 0310 	and.w	r3, r3, #16
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d011      	beq.n	800c790 <LoRaMacHandleIndicationEvents+0x64>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800c76c:	2306      	movs	r3, #6
 800c76e:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800c774:	4b13      	ldr	r3, [pc, #76]	@ (800c7c4 <LoRaMacHandleIndicationEvents+0x98>)
 800c776:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	1d3a      	adds	r2, r7, #4
 800c77e:	4610      	mov	r0, r2
 800c780:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800c782:	4a10      	ldr	r2, [pc, #64]	@ (800c7c4 <LoRaMacHandleIndicationEvents+0x98>)
 800c784:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c788:	f36f 1304 	bfc	r3, #4, #1
 800c78c:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c790:	4b0c      	ldr	r3, [pc, #48]	@ (800c7c4 <LoRaMacHandleIndicationEvents+0x98>)
 800c792:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800c796:	f003 0302 	and.w	r3, r3, #2
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00c      	beq.n	800c7ba <LoRaMacHandleIndicationEvents+0x8e>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800c7a0:	4a08      	ldr	r2, [pc, #32]	@ (800c7c4 <LoRaMacHandleIndicationEvents+0x98>)
 800c7a2:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c7a6:	f36f 0341 	bfc	r3, #1, #1
 800c7aa:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800c7ae:	4b05      	ldr	r3, [pc, #20]	@ (800c7c4 <LoRaMacHandleIndicationEvents+0x98>)
 800c7b0:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	4805      	ldr	r0, [pc, #20]	@ (800c7cc <LoRaMacHandleIndicationEvents+0xa0>)
 800c7b8:	4798      	blx	r3
    }
}
 800c7ba:	bf00      	nop
 800c7bc:	3720      	adds	r7, #32
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	200014d0 	.word	0x200014d0
 800c7c8:	20001978 	.word	0x20001978
 800c7cc:	20001918 	.word	0x20001918

0800c7d0 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c7d6:	4b33      	ldr	r3, [pc, #204]	@ (800c8a4 <LoRaMacHandleMcpsRequest+0xd4>)
 800c7d8:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800c7dc:	f003 0301 	and.w	r3, r3, #1
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d05a      	beq.n	800c89c <LoRaMacHandleMcpsRequest+0xcc>
    {
        bool stopRetransmission = false;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800c7ee:	4b2d      	ldr	r3, [pc, #180]	@ (800c8a4 <LoRaMacHandleMcpsRequest+0xd4>)
 800c7f0:	f893 3468 	ldrb.w	r3, [r3, #1128]	@ 0x468
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d004      	beq.n	800c802 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800c7f8:	4b2a      	ldr	r3, [pc, #168]	@ (800c8a4 <LoRaMacHandleMcpsRequest+0xd4>)
 800c7fa:	f893 3468 	ldrb.w	r3, [r3, #1128]	@ 0x468
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	d104      	bne.n	800c80c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800c802:	f002 f87d 	bl	800e900 <CheckRetransUnconfirmedUplink>
 800c806:	4603      	mov	r3, r0
 800c808:	71fb      	strb	r3, [r7, #7]
 800c80a:	e022      	b.n	800c852 <LoRaMacHandleMcpsRequest+0x82>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800c80c:	4b25      	ldr	r3, [pc, #148]	@ (800c8a4 <LoRaMacHandleMcpsRequest+0xd4>)
 800c80e:	f893 3468 	ldrb.w	r3, [r3, #1128]	@ 0x468
 800c812:	2b01      	cmp	r3, #1
 800c814:	d11d      	bne.n	800c852 <LoRaMacHandleMcpsRequest+0x82>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800c816:	4b23      	ldr	r3, [pc, #140]	@ (800c8a4 <LoRaMacHandleMcpsRequest+0xd4>)
 800c818:	f893 343b 	ldrb.w	r3, [r3, #1083]	@ 0x43b
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d016      	beq.n	800c84e <LoRaMacHandleMcpsRequest+0x7e>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800c820:	f002 f89c 	bl	800e95c <CheckRetransConfirmedUplink>
 800c824:	4603      	mov	r3, r0
 800c826:	71fb      	strb	r3, [r7, #7]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800c828:	4b1e      	ldr	r3, [pc, #120]	@ (800c8a4 <LoRaMacHandleMcpsRequest+0xd4>)
 800c82a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800c82e:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10d      	bne.n	800c852 <LoRaMacHandleMcpsRequest+0x82>
                {
                    if( stopRetransmission == false )
 800c836:	79fb      	ldrb	r3, [r7, #7]
 800c838:	f083 0301 	eor.w	r3, r3, #1
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d002      	beq.n	800c848 <LoRaMacHandleMcpsRequest+0x78>
                    {
                        AckTimeoutRetriesProcess( );
 800c842:	f002 f8ef 	bl	800ea24 <AckTimeoutRetriesProcess>
 800c846:	e004      	b.n	800c852 <LoRaMacHandleMcpsRequest+0x82>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800c848:	f002 f92e 	bl	800eaa8 <AckTimeoutRetriesFinalize>
 800c84c:	e001      	b.n	800c852 <LoRaMacHandleMcpsRequest+0x82>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800c84e:	2301      	movs	r3, #1
 800c850:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800c852:	79fb      	ldrb	r3, [r7, #7]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00d      	beq.n	800c874 <LoRaMacHandleMcpsRequest+0xa4>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800c858:	4813      	ldr	r0, [pc, #76]	@ (800c8a8 <LoRaMacHandleMcpsRequest+0xd8>)
 800c85a:	f00b f82f 	bl	80178bc <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800c85e:	4b11      	ldr	r3, [pc, #68]	@ (800c8a4 <LoRaMacHandleMcpsRequest+0xd4>)
 800c860:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c864:	f023 0320 	bic.w	r3, r3, #32
 800c868:	4a0e      	ldr	r2, [pc, #56]	@ (800c8a4 <LoRaMacHandleMcpsRequest+0xd4>)
 800c86a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800c86e:	f002 f899 	bl	800e9a4 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800c872:	e013      	b.n	800c89c <LoRaMacHandleMcpsRequest+0xcc>
        else if( waitForRetransmission == false )
 800c874:	79bb      	ldrb	r3, [r7, #6]
 800c876:	f083 0301 	eor.w	r3, r3, #1
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00d      	beq.n	800c89c <LoRaMacHandleMcpsRequest+0xcc>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800c880:	4a08      	ldr	r2, [pc, #32]	@ (800c8a4 <LoRaMacHandleMcpsRequest+0xd4>)
 800c882:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800c886:	f36f 1345 	bfc	r3, #5, #1
 800c88a:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
            MacCtx.AckTimeoutRetry = false;
 800c88e:	4b05      	ldr	r3, [pc, #20]	@ (800c8a4 <LoRaMacHandleMcpsRequest+0xd4>)
 800c890:	2200      	movs	r2, #0
 800c892:	f883 243b 	strb.w	r2, [r3, #1083]	@ 0x43b
            OnTxDelayedTimerEvent( NULL );
 800c896:	2000      	movs	r0, #0
 800c898:	f000 f8cc 	bl	800ca34 <OnTxDelayedTimerEvent>
}
 800c89c:	bf00      	nop
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	200014d0 	.word	0x200014d0
 800c8a8:	20001840 	.word	0x20001840

0800c8ac <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c8b0:	4b1b      	ldr	r3, [pc, #108]	@ (800c920 <LoRaMacHandleMlmeRequest+0x74>)
 800c8b2:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800c8b6:	f003 0304 	and.w	r3, r3, #4
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d02c      	beq.n	800c91a <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	f004 fdd9 	bl	8011478 <LoRaMacConfirmQueueIsCmdActive>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d012      	beq.n	800c8f2 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	f004 fd83 	bl	80113d8 <LoRaMacConfirmQueueGetStatus>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d103      	bne.n	800c8e0 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800c8d8:	4b11      	ldr	r3, [pc, #68]	@ (800c920 <LoRaMacHandleMlmeRequest+0x74>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c8e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c920 <LoRaMacHandleMlmeRequest+0x74>)
 800c8e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c8e6:	f023 0302 	bic.w	r3, r3, #2
 800c8ea:	4a0d      	ldr	r2, [pc, #52]	@ (800c920 <LoRaMacHandleMlmeRequest+0x74>)
 800c8ec:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800c8f0:	e013      	b.n	800c91a <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800c8f2:	2004      	movs	r0, #4
 800c8f4:	f004 fdc0 	bl	8011478 <LoRaMacConfirmQueueIsCmdActive>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d105      	bne.n	800c90a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800c8fe:	2005      	movs	r0, #5
 800c900:	f004 fdba 	bl	8011478 <LoRaMacConfirmQueueIsCmdActive>
 800c904:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800c906:	2b00      	cmp	r3, #0
 800c908:	d007      	beq.n	800c91a <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c90a:	4b05      	ldr	r3, [pc, #20]	@ (800c920 <LoRaMacHandleMlmeRequest+0x74>)
 800c90c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c910:	f023 0302 	bic.w	r3, r3, #2
 800c914:	4a02      	ldr	r2, [pc, #8]	@ (800c920 <LoRaMacHandleMlmeRequest+0x74>)
 800c916:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800c91a:	bf00      	nop
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	200014d0 	.word	0x200014d0

0800c924 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c928:	200b      	movs	r0, #11
 800c92a:	f004 fda5 	bl	8011478 <LoRaMacConfirmQueueIsCmdActive>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d019      	beq.n	800c968 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800c934:	4b0e      	ldr	r3, [pc, #56]	@ (800c970 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c936:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800c93a:	f003 0301 	and.w	r3, r3, #1
 800c93e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c940:	2b00      	cmp	r3, #0
 800c942:	d111      	bne.n	800c968 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c944:	4b0a      	ldr	r3, [pc, #40]	@ (800c970 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c946:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800c94a:	f003 0304 	and.w	r3, r3, #4
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	2b00      	cmp	r3, #0
 800c952:	d009      	beq.n	800c968 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c954:	4b06      	ldr	r3, [pc, #24]	@ (800c970 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c956:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c95a:	f023 0302 	bic.w	r3, r3, #2
 800c95e:	4a04      	ldr	r2, [pc, #16]	@ (800c970 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800c960:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800c964:	2301      	movs	r3, #1
 800c966:	e000      	b.n	800c96a <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	200014d0 	.word	0x200014d0

0800c974 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800c974:	b480      	push	{r7}
 800c976:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800c978:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b0 <LoRaMacCheckForRxAbort+0x3c>)
 800c97a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c97e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00f      	beq.n	800c9a6 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800c986:	4b0a      	ldr	r3, [pc, #40]	@ (800c9b0 <LoRaMacCheckForRxAbort+0x3c>)
 800c988:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c98c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c990:	4a07      	ldr	r2, [pc, #28]	@ (800c9b0 <LoRaMacCheckForRxAbort+0x3c>)
 800c992:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c996:	4b06      	ldr	r3, [pc, #24]	@ (800c9b0 <LoRaMacCheckForRxAbort+0x3c>)
 800c998:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c99c:	f023 0302 	bic.w	r3, r3, #2
 800c9a0:	4a03      	ldr	r2, [pc, #12]	@ (800c9b0 <LoRaMacCheckForRxAbort+0x3c>)
 800c9a2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800c9a6:	bf00      	nop
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr
 800c9b0:	200014d0 	.word	0x200014d0

0800c9b4 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800c9be:	f7ff fdd3 	bl	800c568 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800c9c2:	f004 f94b 	bl	8010c5c <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800c9c6:	4b1a      	ldr	r3, [pc, #104]	@ (800ca30 <LoRaMacProcess+0x7c>)
 800c9c8:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800c9cc:	f003 0320 	and.w	r3, r3, #32
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d01e      	beq.n	800ca14 <LoRaMacProcess+0x60>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	f7ff fe1a 	bl	800c610 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800c9dc:	f7ff ffca 	bl	800c974 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800c9e0:	f002 f8e2 	bl	800eba8 <IsRequestPending>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d006      	beq.n	800c9f8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800c9ea:	f7ff ff9b 	bl	800c924 <LoRaMacCheckForBeaconAcquisition>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	79fb      	ldrb	r3, [r7, #7]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800c9f8:	79fb      	ldrb	r3, [r7, #7]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d103      	bne.n	800ca06 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800c9fe:	f7ff ff55 	bl	800c8ac <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800ca02:	f7ff fee5 	bl	800c7d0 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800ca06:	f7ff fe15 	bl	800c634 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800ca0a:	f7ff fe75 	bl	800c6f8 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ca0e:	2001      	movs	r0, #1
 800ca10:	f7ff fdfe 	bl	800c610 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800ca14:	f7ff fe8a 	bl	800c72c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ca18:	4b05      	ldr	r3, [pc, #20]	@ (800ca30 <LoRaMacProcess+0x7c>)
 800ca1a:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d101      	bne.n	800ca26 <LoRaMacProcess+0x72>
    {
        OpenContinuousRxCWindow( );
 800ca22:	f001 fbf9 	bl	800e218 <OpenContinuousRxCWindow>
    }
}
 800ca26:	bf00      	nop
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	200014d0 	.word	0x200014d0

0800ca34 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ca3c:	4818      	ldr	r0, [pc, #96]	@ (800caa0 <OnTxDelayedTimerEvent+0x6c>)
 800ca3e:	f00a ff3d 	bl	80178bc <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ca42:	4b18      	ldr	r3, [pc, #96]	@ (800caa4 <OnTxDelayedTimerEvent+0x70>)
 800ca44:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ca48:	f023 0320 	bic.w	r3, r3, #32
 800ca4c:	4a15      	ldr	r2, [pc, #84]	@ (800caa4 <OnTxDelayedTimerEvent+0x70>)
 800ca4e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ca52:	2001      	movs	r0, #1
 800ca54:	f001 f89a 	bl	800db8c <ScheduleTx>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d01a      	beq.n	800ca94 <OnTxDelayedTimerEvent+0x60>
 800ca5e:	2b0b      	cmp	r3, #11
 800ca60:	d018      	beq.n	800ca94 <OnTxDelayedTimerEvent+0x60>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ca62:	4b10      	ldr	r3, [pc, #64]	@ (800caa4 <OnTxDelayedTimerEvent+0x70>)
 800ca64:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ca68:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	4b0d      	ldr	r3, [pc, #52]	@ (800caa4 <OnTxDelayedTimerEvent+0x70>)
 800ca70:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ca74:	4b0b      	ldr	r3, [pc, #44]	@ (800caa4 <OnTxDelayedTimerEvent+0x70>)
 800ca76:	f893 243a 	ldrb.w	r2, [r3, #1082]	@ 0x43a
 800ca7a:	4b0a      	ldr	r3, [pc, #40]	@ (800caa4 <OnTxDelayedTimerEvent+0x70>)
 800ca7c:	f883 246d 	strb.w	r2, [r3, #1133]	@ 0x46d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ca80:	4b08      	ldr	r3, [pc, #32]	@ (800caa4 <OnTxDelayedTimerEvent+0x70>)
 800ca82:	2209      	movs	r2, #9
 800ca84:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ca88:	2009      	movs	r0, #9
 800ca8a:	f004 fcc7 	bl	801141c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ca8e:	f001 ff89 	bl	800e9a4 <StopRetransmission>
            break;
 800ca92:	e000      	b.n	800ca96 <OnTxDelayedTimerEvent+0x62>
            break;
 800ca94:	bf00      	nop
        }
    }
}
 800ca96:	bf00      	nop
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	20001840 	.word	0x20001840
 800caa4:	200014d0 	.word	0x200014d0

0800caa8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800cab0:	4b17      	ldr	r3, [pc, #92]	@ (800cb10 <OnRxWindow1TimerEvent+0x68>)
 800cab2:	f893 243d 	ldrb.w	r2, [r3, #1085]	@ 0x43d
 800cab6:	4b16      	ldr	r3, [pc, #88]	@ (800cb10 <OnRxWindow1TimerEvent+0x68>)
 800cab8:	f883 23d8 	strb.w	r2, [r3, #984]	@ 0x3d8
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800cabc:	4b14      	ldr	r3, [pc, #80]	@ (800cb10 <OnRxWindow1TimerEvent+0x68>)
 800cabe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cac2:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 800cac6:	b25a      	sxtb	r2, r3
 800cac8:	4b11      	ldr	r3, [pc, #68]	@ (800cb10 <OnRxWindow1TimerEvent+0x68>)
 800caca:	f883 23db 	strb.w	r2, [r3, #987]	@ 0x3db
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800cace:	4b10      	ldr	r3, [pc, #64]	@ (800cb10 <OnRxWindow1TimerEvent+0x68>)
 800cad0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cad4:	f893 212d 	ldrb.w	r2, [r3, #301]	@ 0x12d
 800cad8:	4b0d      	ldr	r3, [pc, #52]	@ (800cb10 <OnRxWindow1TimerEvent+0x68>)
 800cada:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800cade:	4b0c      	ldr	r3, [pc, #48]	@ (800cb10 <OnRxWindow1TimerEvent+0x68>)
 800cae0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cae4:	f893 213f 	ldrb.w	r2, [r3, #319]	@ 0x13f
 800cae8:	4b09      	ldr	r3, [pc, #36]	@ (800cb10 <OnRxWindow1TimerEvent+0x68>)
 800caea:	f883 23e9 	strb.w	r2, [r3, #1001]	@ 0x3e9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800caee:	4b08      	ldr	r3, [pc, #32]	@ (800cb10 <OnRxWindow1TimerEvent+0x68>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	f883 23ea 	strb.w	r2, [r3, #1002]	@ 0x3ea
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800caf6:	4b06      	ldr	r3, [pc, #24]	@ (800cb10 <OnRxWindow1TimerEvent+0x68>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	f883 23eb 	strb.w	r2, [r3, #1003]	@ 0x3eb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800cafe:	4905      	ldr	r1, [pc, #20]	@ (800cb14 <OnRxWindow1TimerEvent+0x6c>)
 800cb00:	4805      	ldr	r0, [pc, #20]	@ (800cb18 <OnRxWindow1TimerEvent+0x70>)
 800cb02:	f001 fb59 	bl	800e1b8 <RxWindowSetup>
}
 800cb06:	bf00      	nop
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	200014d0 	.word	0x200014d0
 800cb14:	200018a8 	.word	0x200018a8
 800cb18:	20001860 	.word	0x20001860

0800cb1c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800cb24:	4b19      	ldr	r3, [pc, #100]	@ (800cb8c <OnRxWindow2TimerEvent+0x70>)
 800cb26:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d02a      	beq.n	800cb84 <OnRxWindow2TimerEvent+0x68>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800cb2e:	4b17      	ldr	r3, [pc, #92]	@ (800cb8c <OnRxWindow2TimerEvent+0x70>)
 800cb30:	f893 243d 	ldrb.w	r2, [r3, #1085]	@ 0x43d
 800cb34:	4b15      	ldr	r3, [pc, #84]	@ (800cb8c <OnRxWindow2TimerEvent+0x70>)
 800cb36:	f883 23ec 	strb.w	r2, [r3, #1004]	@ 0x3ec
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800cb3a:	4b14      	ldr	r3, [pc, #80]	@ (800cb8c <OnRxWindow2TimerEvent+0x70>)
 800cb3c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cb40:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800cb44:	4a11      	ldr	r2, [pc, #68]	@ (800cb8c <OnRxWindow2TimerEvent+0x70>)
 800cb46:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800cb4a:	4b10      	ldr	r3, [pc, #64]	@ (800cb8c <OnRxWindow2TimerEvent+0x70>)
 800cb4c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cb50:	f893 212d 	ldrb.w	r2, [r3, #301]	@ 0x12d
 800cb54:	4b0d      	ldr	r3, [pc, #52]	@ (800cb8c <OnRxWindow2TimerEvent+0x70>)
 800cb56:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800cb5a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb8c <OnRxWindow2TimerEvent+0x70>)
 800cb5c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cb60:	f893 213f 	ldrb.w	r2, [r3, #319]	@ 0x13f
 800cb64:	4b09      	ldr	r3, [pc, #36]	@ (800cb8c <OnRxWindow2TimerEvent+0x70>)
 800cb66:	f883 23fd 	strb.w	r2, [r3, #1021]	@ 0x3fd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800cb6a:	4b08      	ldr	r3, [pc, #32]	@ (800cb8c <OnRxWindow2TimerEvent+0x70>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f883 23fe 	strb.w	r2, [r3, #1022]	@ 0x3fe
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800cb72:	4b06      	ldr	r3, [pc, #24]	@ (800cb8c <OnRxWindow2TimerEvent+0x70>)
 800cb74:	2201      	movs	r2, #1
 800cb76:	f883 23ff 	strb.w	r2, [r3, #1023]	@ 0x3ff

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800cb7a:	4905      	ldr	r1, [pc, #20]	@ (800cb90 <OnRxWindow2TimerEvent+0x74>)
 800cb7c:	4805      	ldr	r0, [pc, #20]	@ (800cb94 <OnRxWindow2TimerEvent+0x78>)
 800cb7e:	f001 fb1b 	bl	800e1b8 <RxWindowSetup>
 800cb82:	e000      	b.n	800cb86 <OnRxWindow2TimerEvent+0x6a>
        return;
 800cb84:	bf00      	nop
}
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	200014d0 	.word	0x200014d0
 800cb90:	200018bc 	.word	0x200018bc
 800cb94:	20001880 	.word	0x20001880

0800cb98 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800cba0:	4816      	ldr	r0, [pc, #88]	@ (800cbfc <OnAckTimeoutTimerEvent+0x64>)
 800cba2:	f00a fe8b 	bl	80178bc <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800cba6:	4b16      	ldr	r3, [pc, #88]	@ (800cc00 <OnAckTimeoutTimerEvent+0x68>)
 800cba8:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d003      	beq.n	800cbb8 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800cbb0:	4b13      	ldr	r3, [pc, #76]	@ (800cc00 <OnAckTimeoutTimerEvent+0x68>)
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 243b 	strb.w	r2, [r3, #1083]	@ 0x43b
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800cbb8:	4b11      	ldr	r3, [pc, #68]	@ (800cc00 <OnAckTimeoutTimerEvent+0x68>)
 800cbba:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cbbe:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d106      	bne.n	800cbd4 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800cbc6:	4a0e      	ldr	r2, [pc, #56]	@ (800cc00 <OnAckTimeoutTimerEvent+0x68>)
 800cbc8:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800cbcc:	f043 0320 	orr.w	r3, r3, #32
 800cbd0:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cbd4:	4b0a      	ldr	r3, [pc, #40]	@ (800cc00 <OnAckTimeoutTimerEvent+0x68>)
 800cbd6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00a      	beq.n	800cbf4 <OnAckTimeoutTimerEvent+0x5c>
 800cbde:	4b08      	ldr	r3, [pc, #32]	@ (800cc00 <OnAckTimeoutTimerEvent+0x68>)
 800cbe0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d004      	beq.n	800cbf4 <OnAckTimeoutTimerEvent+0x5c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cbea:	4b05      	ldr	r3, [pc, #20]	@ (800cc00 <OnAckTimeoutTimerEvent+0x68>)
 800cbec:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	4798      	blx	r3
    }
}
 800cbf4:	bf00      	nop
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	200018e8 	.word	0x200018e8
 800cc00:	200014d0 	.word	0x200014d0

0800cc04 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60ba      	str	r2, [r7, #8]
 800cc0c:	607b      	str	r3, [r7, #4]
 800cc0e:	4603      	mov	r3, r0
 800cc10:	73fb      	strb	r3, [r7, #15]
 800cc12:	460b      	mov	r3, r1
 800cc14:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d005      	beq.n	800cc28 <GetFCntDown+0x24>
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d002      	beq.n	800cc28 <GetFCntDown+0x24>
 800cc22:	6a3b      	ldr	r3, [r7, #32]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d101      	bne.n	800cc2c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cc28:	230a      	movs	r3, #10
 800cc2a:	e040      	b.n	800ccae <GetFCntDown+0xaa>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	2b04      	cmp	r3, #4
 800cc30:	d831      	bhi.n	800cc96 <GetFCntDown+0x92>
 800cc32:	a201      	add	r2, pc, #4	@ (adr r2, 800cc38 <GetFCntDown+0x34>)
 800cc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc38:	0800cc77 	.word	0x0800cc77
 800cc3c:	0800cc7f 	.word	0x0800cc7f
 800cc40:	0800cc87 	.word	0x0800cc87
 800cc44:	0800cc8f 	.word	0x0800cc8f
 800cc48:	0800cc4d 	.word	0x0800cc4d
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800cc4c:	79bb      	ldrb	r3, [r7, #6]
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d10d      	bne.n	800cc6e <GetFCntDown+0x6a>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800cc52:	7bbb      	ldrb	r3, [r7, #14]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <GetFCntDown+0x5a>
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d103      	bne.n	800cc66 <GetFCntDown+0x62>
                {
                    *fCntID = A_FCNT_DOWN;
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	2202      	movs	r2, #2
 800cc62:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800cc64:	e019      	b.n	800cc9a <GetFCntDown+0x96>
                    *fCntID = N_FCNT_DOWN;
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	2201      	movs	r2, #1
 800cc6a:	701a      	strb	r2, [r3, #0]
            break;
 800cc6c:	e015      	b.n	800cc9a <GetFCntDown+0x96>
                *fCntID = FCNT_DOWN;
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	2203      	movs	r2, #3
 800cc72:	701a      	strb	r2, [r3, #0]
            break;
 800cc74:	e011      	b.n	800cc9a <GetFCntDown+0x96>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	2204      	movs	r2, #4
 800cc7a:	701a      	strb	r2, [r3, #0]
            break;
 800cc7c:	e00d      	b.n	800cc9a <GetFCntDown+0x96>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	2205      	movs	r2, #5
 800cc82:	701a      	strb	r2, [r3, #0]
            break;
 800cc84:	e009      	b.n	800cc9a <GetFCntDown+0x96>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	2206      	movs	r2, #6
 800cc8a:	701a      	strb	r2, [r3, #0]
            break;
 800cc8c:	e005      	b.n	800cc9a <GetFCntDown+0x96>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	2207      	movs	r2, #7
 800cc92:	701a      	strb	r2, [r3, #0]
            break;
 800cc94:	e001      	b.n	800cc9a <GetFCntDown+0x96>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800cc96:	2305      	movs	r3, #5
 800cc98:	e009      	b.n	800ccae <GetFCntDown+0xaa>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	7818      	ldrb	r0, [r3, #0]
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	89db      	ldrh	r3, [r3, #14]
 800cca2:	461a      	mov	r2, r3
 800cca4:	8b39      	ldrh	r1, [r7, #24]
 800cca6:	6a3b      	ldr	r3, [r7, #32]
 800cca8:	f005 f872 	bl	8011d90 <LoRaMacCryptoGetFCntDown>
 800ccac:	4603      	mov	r3, r0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop

0800ccb8 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800ccb8:	b5b0      	push	{r4, r5, r7, lr}
 800ccba:	b086      	sub	sp, #24
 800ccbc:	af02      	add	r7, sp, #8
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	73fb      	strb	r3, [r7, #15]

    switch( MacCtx.NvmCtx->DeviceClass )
 800ccc6:	4b7f      	ldr	r3, [pc, #508]	@ (800cec4 <SwitchClass+0x20c>)
 800ccc8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cccc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	f000 80de 	beq.w	800ce92 <SwitchClass+0x1da>
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	f300 80ef 	bgt.w	800ceba <SwitchClass+0x202>
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d003      	beq.n	800cce8 <SwitchClass+0x30>
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	f000 80c6 	beq.w	800ce72 <SwitchClass+0x1ba>
 800cce6:	e0e8      	b.n	800ceba <SwitchClass+0x202>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800cce8:	79fb      	ldrb	r3, [r7, #7]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d10d      	bne.n	800cd0a <SwitchClass+0x52>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800ccee:	4b75      	ldr	r3, [pc, #468]	@ (800cec4 <SwitchClass+0x20c>)
 800ccf0:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800ccf4:	4b73      	ldr	r3, [pc, #460]	@ (800cec4 <SwitchClass+0x20c>)
 800ccf6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ccfa:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800ccfe:	f502 728e 	add.w	r2, r2, #284	@ 0x11c
 800cd02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd06:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800cd0a:	79fb      	ldrb	r3, [r7, #7]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d10e      	bne.n	800cd2e <SwitchClass+0x76>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800cd10:	79fb      	ldrb	r3, [r7, #7]
 800cd12:	4618      	mov	r0, r3
 800cd14:	f003 ff2a 	bl	8010b6c <LoRaMacClassBSwitchClass>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d105      	bne.n	800cd2e <SwitchClass+0x76>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800cd22:	4b68      	ldr	r3, [pc, #416]	@ (800cec4 <SwitchClass+0x20c>)
 800cd24:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cd28:	79fa      	ldrb	r2, [r7, #7]
 800cd2a:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
                }
            }

            if( deviceClass == CLASS_C )
 800cd2e:	79fb      	ldrb	r3, [r7, #7]
 800cd30:	2b02      	cmp	r3, #2
 800cd32:	f040 80bd 	bne.w	800ceb0 <SwitchClass+0x1f8>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800cd36:	4b63      	ldr	r3, [pc, #396]	@ (800cec4 <SwitchClass+0x20c>)
 800cd38:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cd3c:	79fa      	ldrb	r2, [r7, #7]
 800cd3e:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800cd42:	4a60      	ldr	r2, [pc, #384]	@ (800cec4 <SwitchClass+0x20c>)
 800cd44:	4b5f      	ldr	r3, [pc, #380]	@ (800cec4 <SwitchClass+0x20c>)
 800cd46:	f502 6480 	add.w	r4, r2, #1024	@ 0x400
 800cd4a:	f503 757b 	add.w	r5, r3, #1004	@ 0x3ec
 800cd4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd52:	682b      	ldr	r3, [r5, #0]
 800cd54:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cd56:	4b5b      	ldr	r3, [pc, #364]	@ (800cec4 <SwitchClass+0x20c>)
 800cd58:	2202      	movs	r2, #2
 800cd5a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cd5e:	2300      	movs	r3, #0
 800cd60:	73bb      	strb	r3, [r7, #14]
 800cd62:	e05e      	b.n	800ce22 <SwitchClass+0x16a>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800cd64:	4b57      	ldr	r3, [pc, #348]	@ (800cec4 <SwitchClass+0x20c>)
 800cd66:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800cd6a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4413      	add	r3, r2
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	440b      	add	r3, r1
 800cd78:	3351      	adds	r3, #81	@ 0x51
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d04a      	beq.n	800ce16 <SwitchClass+0x15e>
                    // TODO: Check multicast channel device class.
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800cd80:	4b50      	ldr	r3, [pc, #320]	@ (800cec4 <SwitchClass+0x20c>)
 800cd82:	f8d3 04c8 	ldr.w	r0, [r3, #1224]	@ 0x4c8
 800cd86:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800cd8a:	4b4e      	ldr	r3, [pc, #312]	@ (800cec4 <SwitchClass+0x20c>)
 800cd8c:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800cd90:	4613      	mov	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4413      	add	r3, r2
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	4403      	add	r3, r0
 800cd9a:	3364      	adds	r3, #100	@ 0x64
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f8c1 3124 	str.w	r3, [r1, #292]	@ 0x124
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800cda2:	4b48      	ldr	r3, [pc, #288]	@ (800cec4 <SwitchClass+0x20c>)
 800cda4:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800cda8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800cdac:	4613      	mov	r3, r2
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	4413      	add	r3, r2
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	440b      	add	r3, r1
 800cdb6:	3368      	adds	r3, #104	@ 0x68
 800cdb8:	f993 2000 	ldrsb.w	r2, [r3]
 800cdbc:	4b41      	ldr	r3, [pc, #260]	@ (800cec4 <SwitchClass+0x20c>)
 800cdbe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cdc2:	b2d2      	uxtb	r2, r2
 800cdc4:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800cdc8:	4b3e      	ldr	r3, [pc, #248]	@ (800cec4 <SwitchClass+0x20c>)
 800cdca:	f893 243d 	ldrb.w	r2, [r3, #1085]	@ 0x43d
 800cdce:	4b3d      	ldr	r3, [pc, #244]	@ (800cec4 <SwitchClass+0x20c>)
 800cdd0:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800cdd4:	4b3b      	ldr	r3, [pc, #236]	@ (800cec4 <SwitchClass+0x20c>)
 800cdd6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cdda:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cdde:	4a39      	ldr	r2, [pc, #228]	@ (800cec4 <SwitchClass+0x20c>)
 800cde0:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800cde4:	4b37      	ldr	r3, [pc, #220]	@ (800cec4 <SwitchClass+0x20c>)
 800cde6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cdea:	f893 212d 	ldrb.w	r2, [r3, #301]	@ 0x12d
 800cdee:	4b35      	ldr	r3, [pc, #212]	@ (800cec4 <SwitchClass+0x20c>)
 800cdf0:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800cdf4:	4b33      	ldr	r3, [pc, #204]	@ (800cec4 <SwitchClass+0x20c>)
 800cdf6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cdfa:	f893 213f 	ldrb.w	r2, [r3, #319]	@ 0x13f
 800cdfe:	4b31      	ldr	r3, [pc, #196]	@ (800cec4 <SwitchClass+0x20c>)
 800ce00:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ce04:	4b2f      	ldr	r3, [pc, #188]	@ (800cec4 <SwitchClass+0x20c>)
 800ce06:	2203      	movs	r2, #3
 800ce08:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ce0c:	4b2d      	ldr	r3, [pc, #180]	@ (800cec4 <SwitchClass+0x20c>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
                        break;
 800ce14:	e009      	b.n	800ce2a <SwitchClass+0x172>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ce16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	73bb      	strb	r3, [r7, #14]
 800ce22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	dd9c      	ble.n	800cd64 <SwitchClass+0xac>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ce2a:	4b26      	ldr	r3, [pc, #152]	@ (800cec4 <SwitchClass+0x20c>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ce32:	4b25      	ldr	r3, [pc, #148]	@ (800cec8 <SwitchClass+0x210>)
 800ce34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce36:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800ce38:	4b22      	ldr	r3, [pc, #136]	@ (800cec4 <SwitchClass+0x20c>)
 800ce3a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ce3e:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800ce40:	4b20      	ldr	r3, [pc, #128]	@ (800cec4 <SwitchClass+0x20c>)
 800ce42:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ce46:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800ce4a:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800ce4c:	4b1d      	ldr	r3, [pc, #116]	@ (800cec4 <SwitchClass+0x20c>)
 800ce4e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800ce52:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800ce56:	4b1b      	ldr	r3, [pc, #108]	@ (800cec4 <SwitchClass+0x20c>)
 800ce58:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800ce5c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800ce60:	4c1a      	ldr	r4, [pc, #104]	@ (800cecc <SwitchClass+0x214>)
 800ce62:	9400      	str	r4, [sp, #0]
 800ce64:	f006 f87f 	bl	8012f66 <RegionComputeRxWindowParameters>
                                                 &MacCtx.RxWindowCConfig );
                OpenContinuousRxCWindow( );
 800ce68:	f001 f9d6 	bl	800e218 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ce70:	e01e      	b.n	800ceb0 <SwitchClass+0x1f8>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ce72:	79fb      	ldrb	r3, [r7, #7]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f003 fe79 	bl	8010b6c <LoRaMacClassBSwitchClass>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ce7e:	7bfb      	ldrb	r3, [r7, #15]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d117      	bne.n	800ceb4 <SwitchClass+0x1fc>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800ce84:	4b0f      	ldr	r3, [pc, #60]	@ (800cec4 <SwitchClass+0x20c>)
 800ce86:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ce8a:	79fa      	ldrb	r2, [r7, #7]
 800ce8c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
            }
            break;
 800ce90:	e010      	b.n	800ceb4 <SwitchClass+0x1fc>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ce92:	79fb      	ldrb	r3, [r7, #7]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10f      	bne.n	800ceb8 <SwitchClass+0x200>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800ce98:	4b0a      	ldr	r3, [pc, #40]	@ (800cec4 <SwitchClass+0x20c>)
 800ce9a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ce9e:	79fa      	ldrb	r2, [r7, #7]
 800cea0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800cea4:	4b08      	ldr	r3, [pc, #32]	@ (800cec8 <SwitchClass+0x210>)
 800cea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cea8:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ceae:	e003      	b.n	800ceb8 <SwitchClass+0x200>
            break;
 800ceb0:	bf00      	nop
 800ceb2:	e002      	b.n	800ceba <SwitchClass+0x202>
            break;
 800ceb4:	bf00      	nop
 800ceb6:	e000      	b.n	800ceba <SwitchClass+0x202>
            break;
 800ceb8:	bf00      	nop
        }
    }

    return status;
 800ceba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bdb0      	pop	{r4, r5, r7, pc}
 800cec4:	200014d0 	.word	0x200014d0
 800cec8:	0802113c 	.word	0x0802113c
 800cecc:	200018d0 	.word	0x200018d0

0800ced0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ceda:	4b12      	ldr	r3, [pc, #72]	@ (800cf24 <GetMaxAppPayloadWithoutFOptsLength+0x54>)
 800cedc:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cee0:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800cee4:	73bb      	strb	r3, [r7, #14]
    getPhy.Datarate = datarate;
 800cee6:	79fb      	ldrb	r3, [r7, #7]
 800cee8:	737b      	strb	r3, [r7, #13]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ceea:	230d      	movs	r3, #13
 800ceec:	733b      	strb	r3, [r7, #12]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800ceee:	4b0d      	ldr	r3, [pc, #52]	@ (800cf24 <GetMaxAppPayloadWithoutFOptsLength+0x54>)
 800cef0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cef4:	f893 313f 	ldrb.w	r3, [r3, #319]	@ 0x13f
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d001      	beq.n	800cf00 <GetMaxAppPayloadWithoutFOptsLength+0x30>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800cefc:	230e      	movs	r3, #14
 800cefe:	733b      	strb	r3, [r7, #12]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800cf00:	4b08      	ldr	r3, [pc, #32]	@ (800cf24 <GetMaxAppPayloadWithoutFOptsLength+0x54>)
 800cf02:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	f107 020c 	add.w	r2, r7, #12
 800cf0c:	4611      	mov	r1, r2
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f005 ff9f 	bl	8012e52 <RegionGetPhyParam>
 800cf14:	4603      	mov	r3, r0
 800cf16:	60bb      	str	r3, [r7, #8]

    return phyParam.Value;
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	b2db      	uxtb	r3, r3
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	200014d0 	.word	0x200014d0

0800cf28 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	4603      	mov	r3, r0
 800cf30:	71fb      	strb	r3, [r7, #7]
 800cf32:	460b      	mov	r3, r1
 800cf34:	71bb      	strb	r3, [r7, #6]
 800cf36:	4613      	mov	r3, r2
 800cf38:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800cf42:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff ffc2 	bl	800ced0 <GetMaxAppPayloadWithoutFOptsLength>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800cf50:	79fb      	ldrb	r3, [r7, #7]
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	797b      	ldrb	r3, [r7, #5]
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	4413      	add	r3, r2
 800cf5a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800cf5c:	89ba      	ldrh	r2, [r7, #12]
 800cf5e:	89fb      	ldrh	r3, [r7, #14]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d804      	bhi.n	800cf6e <ValidatePayloadLength+0x46>
 800cf64:	89bb      	ldrh	r3, [r7, #12]
 800cf66:	2bff      	cmp	r3, #255	@ 0xff
 800cf68:	d801      	bhi.n	800cf6e <ValidatePayloadLength+0x46>
    {
        return true;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e000      	b.n	800cf70 <ValidatePayloadLength+0x48>
    }
    return false;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800cf78:	b480      	push	{r7}
 800cf7a:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800cf7c:	4a05      	ldr	r2, [pc, #20]	@ (800cf94 <SetMlmeScheduleUplinkIndication+0x1c>)
 800cf7e:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 800cf82:	f043 0310 	orr.w	r3, r3, #16
 800cf86:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
}
 800cf8a:	bf00      	nop
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	200014d0 	.word	0x200014d0

0800cf98 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800cf98:	b590      	push	{r4, r7, lr}
 800cf9a:	b0a5      	sub	sp, #148	@ 0x94
 800cf9c:	af02      	add	r7, sp, #8
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	4608      	mov	r0, r1
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	70fb      	strb	r3, [r7, #3]
 800cfaa:	460b      	mov	r3, r1
 800cfac:	70bb      	strb	r3, [r7, #2]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

    while( macIndex < commandsSize )
 800cfc4:	f000 bc78 	b.w	800d8b8 <ProcessMacCommands+0x920>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800cfc8:	78fb      	ldrb	r3, [r7, #3]
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	70fa      	strb	r2, [r7, #3]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	3b02      	subs	r3, #2
 800cfd8:	2b11      	cmp	r3, #17
 800cfda:	f200 8473 	bhi.w	800d8c4 <ProcessMacCommands+0x92c>
 800cfde:	a201      	add	r2, pc, #4	@ (adr r2, 800cfe4 <ProcessMacCommands+0x4c>)
 800cfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe4:	0800d02d 	.word	0x0800d02d
 800cfe8:	0800d06f 	.word	0x0800d06f
 800cfec:	0800d1b1 	.word	0x0800d1b1
 800cff0:	0800d1fd 	.word	0x0800d1fd
 800cff4:	0800d305 	.word	0x0800d305
 800cff8:	0800d35d 	.word	0x0800d35d
 800cffc:	0800d40d 	.word	0x0800d40d
 800d000:	0800d477 	.word	0x0800d477
 800d004:	0800d579 	.word	0x0800d579
 800d008:	0800d8c5 	.word	0x0800d8c5
 800d00c:	0800d8c5 	.word	0x0800d8c5
 800d010:	0800d615 	.word	0x0800d615
 800d014:	0800d8c5 	.word	0x0800d8c5
 800d018:	0800d8c5 	.word	0x0800d8c5
 800d01c:	0800d715 	.word	0x0800d715
 800d020:	0800d733 	.word	0x0800d733
 800d024:	0800d7c3 	.word	0x0800d7c3
 800d028:	0800d825 	.word	0x0800d825
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800d02c:	2003      	movs	r0, #3
 800d02e:	f004 fa23 	bl	8011478 <LoRaMacConfirmQueueIsCmdActive>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 8438 	beq.w	800d8aa <ProcessMacCommands+0x912>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800d03a:	2103      	movs	r1, #3
 800d03c:	2000      	movs	r0, #0
 800d03e:	f004 f9a3 	bl	8011388 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800d042:	78fb      	ldrb	r3, [r7, #3]
 800d044:	1c5a      	adds	r2, r3, #1
 800d046:	70fa      	strb	r2, [r7, #3]
 800d048:	461a      	mov	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4413      	add	r3, r2
 800d04e:	781a      	ldrb	r2, [r3, #0]
 800d050:	4bc0      	ldr	r3, [pc, #768]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d052:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800d056:	78fb      	ldrb	r3, [r7, #3]
 800d058:	1c5a      	adds	r2, r3, #1
 800d05a:	70fa      	strb	r2, [r7, #3]
 800d05c:	461a      	mov	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4413      	add	r3, r2
 800d062:	781a      	ldrb	r2, [r3, #0]
 800d064:	4bbb      	ldr	r3, [pc, #748]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d066:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
                }
                break;
 800d06a:	f000 bc1e 	b.w	800d8aa <ProcessMacCommands+0x912>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800d06e:	2300      	movs	r3, #0
 800d070:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800d074:	2300      	movs	r3, #0
 800d076:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800d07a:	2300      	movs	r3, #0
 800d07c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800d080:	2300      	movs	r3, #0
 800d082:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                if( adrBlockFound == false )
 800d086:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d08a:	f083 0301 	eor.w	r3, r3, #1
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	f000 840c 	beq.w	800d8ae <ProcessMacCommands+0x916>
                {
                    adrBlockFound = true;
 800d096:	2301      	movs	r3, #1
 800d098:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800d09c:	78fb      	ldrb	r3, [r7, #3]
 800d09e:	3b01      	subs	r3, #1
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800d0a6:	78ba      	ldrb	r2, [r7, #2]
 800d0a8:	78fb      	ldrb	r3, [r7, #3]
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800d0b6:	4ba7      	ldr	r3, [pc, #668]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d0b8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d0bc:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 800d0c0:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800d0c4:	4ba3      	ldr	r3, [pc, #652]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d0c6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d0ca:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800d0ce:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d0d2:	4ba0      	ldr	r3, [pc, #640]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d0d4:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d0d8:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800d0dc:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800d0e0:	4b9c      	ldr	r3, [pc, #624]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d0e2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d0e6:	f993 30f8 	ldrsb.w	r3, [r3, #248]	@ 0xf8
 800d0ea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800d0ee:	4b99      	ldr	r3, [pc, #612]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d0f0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d0f4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d0f8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800d0fc:	4b95      	ldr	r3, [pc, #596]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d0fe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d102:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800d106:	65bb      	str	r3, [r7, #88]	@ 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800d108:	4b92      	ldr	r3, [pc, #584]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d10a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d10e:	7818      	ldrb	r0, [r3, #0]
 800d110:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800d114:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800d118:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800d11c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d120:	9301      	str	r3, [sp, #4]
 800d122:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	4623      	mov	r3, r4
 800d12a:	f005 ff62 	bl	8012ff2 <RegionLinkAdrReq>
 800d12e:	4603      	mov	r3, r0
 800d130:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800d134:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d138:	f003 0307 	and.w	r3, r3, #7
 800d13c:	2b07      	cmp	r3, #7
 800d13e:	d114      	bne.n	800d16a <ProcessMacCommands+0x1d2>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800d140:	4b84      	ldr	r3, [pc, #528]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d142:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d146:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800d14a:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800d14e:	4b81      	ldr	r3, [pc, #516]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d150:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d154:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800d158:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800d15c:	4b7d      	ldr	r3, [pc, #500]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d15e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d162:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800d166:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800d16a:	2300      	movs	r3, #0
 800d16c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800d170:	e00b      	b.n	800d18a <ProcessMacCommands+0x1f2>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800d172:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800d176:	2201      	movs	r2, #1
 800d178:	4619      	mov	r1, r3
 800d17a:	2003      	movs	r0, #3
 800d17c:	f003 feda 	bl	8010f34 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800d180:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d184:	3301      	adds	r3, #1
 800d186:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800d18a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800d18e:	4a72      	ldr	r2, [pc, #456]	@ (800d358 <ProcessMacCommands+0x3c0>)
 800d190:	fba2 2303 	umull	r2, r3, r2, r3
 800d194:	089b      	lsrs	r3, r3, #2
 800d196:	b2db      	uxtb	r3, r3
 800d198:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d3e8      	bcc.n	800d172 <ProcessMacCommands+0x1da>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800d1a0:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800d1a4:	78fb      	ldrb	r3, [r7, #3]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800d1ae:	e37e      	b.n	800d8ae <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	70fa      	strb	r2, [r7, #3]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	781a      	ldrb	r2, [r3, #0]
 800d1be:	4b65      	ldr	r3, [pc, #404]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d1c0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d1c4:	f002 020f 	and.w	r2, r2, #15
 800d1c8:	b2d2      	uxtb	r2, r2
 800d1ca:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800d1ce:	4b61      	ldr	r3, [pc, #388]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d1d0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d1d4:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800d1d8:	461a      	mov	r2, r3
 800d1da:	2301      	movs	r3, #1
 800d1dc:	fa03 f202 	lsl.w	r2, r3, r2
 800d1e0:	4b5c      	ldr	r3, [pc, #368]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d1e2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d1e6:	b292      	uxth	r2, r2
 800d1e8:	f8a3 21c2 	strh.w	r2, [r3, #450]	@ 0x1c2
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800d1ec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	2004      	movs	r0, #4
 800d1f6:	f003 fe9d 	bl	8010f34 <LoRaMacCommandsAddCmd>
                break;
 800d1fa:	e35d      	b.n	800d8b8 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800d1fc:	2307      	movs	r3, #7
 800d1fe:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800d202:	78fb      	ldrb	r3, [r7, #3]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	4413      	add	r3, r2
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	091b      	lsrs	r3, r3, #4
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	b25b      	sxtb	r3, r3
 800d210:	f003 0307 	and.w	r3, r3, #7
 800d214:	b25b      	sxtb	r3, r3
 800d216:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800d21a:	78fb      	ldrb	r3, [r7, #3]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	4413      	add	r3, r2
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	b25b      	sxtb	r3, r3
 800d224:	f003 030f 	and.w	r3, r3, #15
 800d228:	b25b      	sxtb	r3, r3
 800d22a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800d22e:	78fb      	ldrb	r3, [r7, #3]
 800d230:	3301      	adds	r3, #1
 800d232:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800d234:	78fb      	ldrb	r3, [r7, #3]
 800d236:	1c5a      	adds	r2, r3, #1
 800d238:	70fa      	strb	r2, [r7, #3]
 800d23a:	461a      	mov	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4413      	add	r3, r2
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	1c5a      	adds	r2, r3, #1
 800d248:	70fa      	strb	r2, [r7, #3]
 800d24a:	461a      	mov	r2, r3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4413      	add	r3, r2
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	021a      	lsls	r2, r3, #8
 800d254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d256:	4313      	orrs	r3, r2
 800d258:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d25a:	78fb      	ldrb	r3, [r7, #3]
 800d25c:	1c5a      	adds	r2, r3, #1
 800d25e:	70fa      	strb	r2, [r7, #3]
 800d260:	461a      	mov	r2, r3
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4413      	add	r3, r2
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	041a      	lsls	r2, r3, #16
 800d26a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d26c:	4313      	orrs	r3, r2
 800d26e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800d270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d272:	2264      	movs	r2, #100	@ 0x64
 800d274:	fb02 f303 	mul.w	r3, r2, r3
 800d278:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800d27a:	4b36      	ldr	r3, [pc, #216]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d27c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800d286:	4611      	mov	r1, r2
 800d288:	4618      	mov	r0, r3
 800d28a:	f005 fecc 	bl	8013026 <RegionRxParamSetupReq>
 800d28e:	4603      	mov	r3, r0
 800d290:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800d294:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d298:	f003 0307 	and.w	r3, r3, #7
 800d29c:	2b07      	cmp	r3, #7
 800d29e:	d123      	bne.n	800d2e8 <ProcessMacCommands+0x350>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800d2a0:	f997 204c 	ldrsb.w	r2, [r7, #76]	@ 0x4c
 800d2a4:	4b2b      	ldr	r3, [pc, #172]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d2a6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d2aa:	b2d2      	uxtb	r2, r2
 800d2ac:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800d2b0:	f997 204c 	ldrsb.w	r2, [r7, #76]	@ 0x4c
 800d2b4:	4b27      	ldr	r3, [pc, #156]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d2b6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d2ba:	b2d2      	uxtb	r2, r2
 800d2bc:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800d2c0:	4b24      	ldr	r3, [pc, #144]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d2c2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d2c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d2c8:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800d2cc:	4b21      	ldr	r3, [pc, #132]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d2ce:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d2d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d2d4:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800d2d8:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 800d2dc:	4b1d      	ldr	r3, [pc, #116]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d2de:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d2e2:	b2d2      	uxtb	r2, r2
 800d2e4:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
                }
                macCmdPayload[0] = status;
 800d2e8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d2ec:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800d2f0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	2005      	movs	r0, #5
 800d2fa:	f003 fe1b 	bl	8010f34 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800d2fe:	f7ff fe3b 	bl	800cf78 <SetMlmeScheduleUplinkIndication>
                break;
 800d302:	e2d9      	b.n	800d8b8 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800d304:	23ff      	movs	r3, #255	@ 0xff
 800d306:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800d30a:	4b12      	ldr	r3, [pc, #72]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d30c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00d      	beq.n	800d330 <ProcessMacCommands+0x398>
 800d314:	4b0f      	ldr	r3, [pc, #60]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d316:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d007      	beq.n	800d330 <ProcessMacCommands+0x398>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800d320:	4b0c      	ldr	r3, [pc, #48]	@ (800d354 <ProcessMacCommands+0x3bc>)
 800d322:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4798      	blx	r3
 800d32a:	4603      	mov	r3, r0
 800d32c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800d330:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800d334:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800d338:	787b      	ldrb	r3, [r7, #1]
 800d33a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800d344:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d348:	2202      	movs	r2, #2
 800d34a:	4619      	mov	r1, r3
 800d34c:	2006      	movs	r0, #6
 800d34e:	f003 fdf1 	bl	8010f34 <LoRaMacCommandsAddCmd>
                break;
 800d352:	e2b1      	b.n	800d8b8 <ProcessMacCommands+0x920>
 800d354:	200014d0 	.word	0x200014d0
 800d358:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800d35c:	2303      	movs	r3, #3
 800d35e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800d362:	78fb      	ldrb	r3, [r7, #3]
 800d364:	1c5a      	adds	r2, r3, #1
 800d366:	70fa      	strb	r2, [r7, #3]
 800d368:	461a      	mov	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4413      	add	r3, r2
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	b25b      	sxtb	r3, r3
 800d372:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800d376:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800d37a:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800d37c:	78fb      	ldrb	r3, [r7, #3]
 800d37e:	1c5a      	adds	r2, r3, #1
 800d380:	70fa      	strb	r2, [r7, #3]
 800d382:	461a      	mov	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4413      	add	r3, r2
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d38c:	78fb      	ldrb	r3, [r7, #3]
 800d38e:	1c5a      	adds	r2, r3, #1
 800d390:	70fa      	strb	r2, [r7, #3]
 800d392:	461a      	mov	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4413      	add	r3, r2
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	021a      	lsls	r2, r3, #8
 800d39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d3a2:	78fb      	ldrb	r3, [r7, #3]
 800d3a4:	1c5a      	adds	r2, r3, #1
 800d3a6:	70fa      	strb	r2, [r7, #3]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	041a      	lsls	r2, r3, #16
 800d3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800d3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ba:	2264      	movs	r2, #100	@ 0x64
 800d3bc:	fb02 f303 	mul.w	r3, r2, r3
 800d3c0:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800d3c6:	78fb      	ldrb	r3, [r7, #3]
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	70fa      	strb	r2, [r7, #3]
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	b25b      	sxtb	r3, r3
 800d3d6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800d3da:	4b8c      	ldr	r3, [pc, #560]	@ (800d60c <ProcessMacCommands+0x674>)
 800d3dc:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800d3e6:	4611      	mov	r1, r2
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f005 fe2f 	bl	801304c <RegionNewChannelReq>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                macCmdPayload[0] = status;
 800d3f4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d3f8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800d3fc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d400:	2201      	movs	r2, #1
 800d402:	4619      	mov	r1, r3
 800d404:	2007      	movs	r0, #7
 800d406:	f003 fd95 	bl	8010f34 <LoRaMacCommandsAddCmd>
                break;
 800d40a:	e255      	b.n	800d8b8 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800d40c:	78fb      	ldrb	r3, [r7, #3]
 800d40e:	1c5a      	adds	r2, r3, #1
 800d410:	70fa      	strb	r2, [r7, #3]
 800d412:	461a      	mov	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4413      	add	r3, r2
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	f003 030f 	and.w	r3, r3, #15
 800d41e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800d422:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d426:	2b00      	cmp	r3, #0
 800d428:	d104      	bne.n	800d434 <ProcessMacCommands+0x49c>
                {
                    delay++;
 800d42a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d42e:	3301      	adds	r3, #1
 800d430:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800d434:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d438:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d43c:	fb03 f202 	mul.w	r2, r3, r2
 800d440:	4b72      	ldr	r3, [pc, #456]	@ (800d60c <ProcessMacCommands+0x674>)
 800d442:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d446:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800d44a:	4b70      	ldr	r3, [pc, #448]	@ (800d60c <ProcessMacCommands+0x674>)
 800d44c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d450:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800d454:	4b6d      	ldr	r3, [pc, #436]	@ (800d60c <ProcessMacCommands+0x674>)
 800d456:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d45a:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 800d45e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800d462:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d466:	2200      	movs	r2, #0
 800d468:	4619      	mov	r1, r3
 800d46a:	2008      	movs	r0, #8
 800d46c:	f003 fd62 	bl	8010f34 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800d470:	f7ff fd82 	bl	800cf78 <SetMlmeScheduleUplinkIndication>
                break;
 800d474:	e220      	b.n	800d8b8 <ProcessMacCommands+0x920>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800d476:	78fb      	ldrb	r3, [r7, #3]
 800d478:	1c5a      	adds	r2, r3, #1
 800d47a:	70fa      	strb	r2, [r7, #3]
 800d47c:	461a      	mov	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4413      	add	r3, r2
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800d488:	2300      	movs	r3, #0
 800d48a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800d48e:	2300      	movs	r3, #0
 800d490:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800d494:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800d498:	f003 0320 	and.w	r3, r3, #32
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d002      	beq.n	800d4a6 <ProcessMacCommands+0x50e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800d4a6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800d4aa:	f003 0310 	and.w	r3, r3, #16
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d002      	beq.n	800d4b8 <ProcessMacCommands+0x520>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800d4b8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800d4bc:	f003 030f 	and.w	r3, r3, #15
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800d4c6:	4b51      	ldr	r3, [pc, #324]	@ (800d60c <ProcessMacCommands+0x674>)
 800d4c8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f005 fdcc 	bl	8013072 <RegionTxParamSetupReq>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4e0:	f000 81e7 	beq.w	800d8b2 <ProcessMacCommands+0x91a>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800d4e4:	4b49      	ldr	r3, [pc, #292]	@ (800d60c <ProcessMacCommands+0x674>)
 800d4e6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d4ea:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800d4ee:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800d4f2:	4b46      	ldr	r3, [pc, #280]	@ (800d60c <ProcessMacCommands+0x674>)
 800d4f4:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d4f8:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800d4fc:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800d500:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d504:	461a      	mov	r2, r3
 800d506:	4b42      	ldr	r3, [pc, #264]	@ (800d610 <ProcessMacCommands+0x678>)
 800d508:	5c9a      	ldrb	r2, [r3, r2]
 800d50a:	4b40      	ldr	r3, [pc, #256]	@ (800d60c <ProcessMacCommands+0x674>)
 800d50c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d510:	ee07 2a90 	vmov	s15, r2
 800d514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d518:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800d51c:	2302      	movs	r3, #2
 800d51e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800d522:	4b3a      	ldr	r3, [pc, #232]	@ (800d60c <ProcessMacCommands+0x674>)
 800d524:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d528:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800d52c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800d530:	4b36      	ldr	r3, [pc, #216]	@ (800d60c <ProcessMacCommands+0x674>)
 800d532:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d53c:	4611      	mov	r1, r2
 800d53e:	4618      	mov	r0, r3
 800d540:	f005 fc87 	bl	8012e52 <RegionGetPhyParam>
 800d544:	4603      	mov	r3, r0
 800d546:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800d548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d54a:	b259      	sxtb	r1, r3
 800d54c:	4b2f      	ldr	r3, [pc, #188]	@ (800d60c <ProcessMacCommands+0x674>)
 800d54e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d552:	f993 20f9 	ldrsb.w	r2, [r3, #249]	@ 0xf9
 800d556:	4b2d      	ldr	r3, [pc, #180]	@ (800d60c <ProcessMacCommands+0x674>)
 800d558:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d55c:	428a      	cmp	r2, r1
 800d55e:	bfb8      	it	lt
 800d560:	460a      	movlt	r2, r1
 800d562:	b252      	sxtb	r2, r2
 800d564:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800d568:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d56c:	2200      	movs	r2, #0
 800d56e:	4619      	mov	r1, r3
 800d570:	2009      	movs	r0, #9
 800d572:	f003 fcdf 	bl	8010f34 <LoRaMacCommandsAddCmd>
                }
                break;
 800d576:	e19c      	b.n	800d8b2 <ProcessMacCommands+0x91a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800d578:	2303      	movs	r3, #3
 800d57a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800d57e:	78fb      	ldrb	r3, [r7, #3]
 800d580:	1c5a      	adds	r2, r3, #1
 800d582:	70fa      	strb	r2, [r7, #3]
 800d584:	461a      	mov	r2, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4413      	add	r3, r2
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800d590:	78fb      	ldrb	r3, [r7, #3]
 800d592:	1c5a      	adds	r2, r3, #1
 800d594:	70fa      	strb	r2, [r7, #3]
 800d596:	461a      	mov	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4413      	add	r3, r2
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	62bb      	str	r3, [r7, #40]	@ 0x28
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	1c5a      	adds	r2, r3, #1
 800d5a4:	70fa      	strb	r2, [r7, #3]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	021a      	lsls	r2, r3, #8
 800d5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800d5b6:	78fb      	ldrb	r3, [r7, #3]
 800d5b8:	1c5a      	adds	r2, r3, #1
 800d5ba:	70fa      	strb	r2, [r7, #3]
 800d5bc:	461a      	mov	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	041a      	lsls	r2, r3, #16
 800d5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
                dlChannelReq.Rx1Frequency *= 100;
 800d5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ce:	2264      	movs	r2, #100	@ 0x64
 800d5d0:	fb02 f303 	mul.w	r3, r2, r3
 800d5d4:	62bb      	str	r3, [r7, #40]	@ 0x28

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800d5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d60c <ProcessMacCommands+0x674>)
 800d5d8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d5e2:	4611      	mov	r1, r2
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f005 fd57 	bl	8013098 <RegionDlChannelReq>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                macCmdPayload[0] = status;
 800d5f0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d5f4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800d5f8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	4619      	mov	r1, r3
 800d600:	200a      	movs	r0, #10
 800d602:	f003 fc97 	bl	8010f34 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800d606:	f7ff fcb7 	bl	800cf78 <SetMlmeScheduleUplinkIndication>
                break;
 800d60a:	e155      	b.n	800d8b8 <ProcessMacCommands+0x920>
 800d60c:	200014d0 	.word	0x200014d0
 800d610:	080210e4 	.word	0x080210e4
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 800d614:	f107 031c 	add.w	r3, r7, #28
 800d618:	2200      	movs	r2, #0
 800d61a:	601a      	str	r2, [r3, #0]
 800d61c:	605a      	str	r2, [r3, #4]
                SysTime_t sysTime = { 0 };
 800d61e:	f107 0314 	add.w	r3, r7, #20
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	605a      	str	r2, [r3, #4]
                SysTime_t sysTimeCurrent = { 0 };
 800d628:	f107 030c 	add.w	r3, r7, #12
 800d62c:	2200      	movs	r2, #0
 800d62e:	601a      	str	r2, [r3, #0]
 800d630:	605a      	str	r2, [r3, #4]

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800d632:	78fb      	ldrb	r3, [r7, #3]
 800d634:	1c5a      	adds	r2, r3, #1
 800d636:	70fa      	strb	r2, [r7, #3]
 800d638:	461a      	mov	r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4413      	add	r3, r2
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	61fb      	str	r3, [r7, #28]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800d642:	78fb      	ldrb	r3, [r7, #3]
 800d644:	1c5a      	adds	r2, r3, #1
 800d646:	70fa      	strb	r2, [r7, #3]
 800d648:	461a      	mov	r2, r3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4413      	add	r3, r2
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	021a      	lsls	r2, r3, #8
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	4313      	orrs	r3, r2
 800d656:	61fb      	str	r3, [r7, #28]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800d658:	78fb      	ldrb	r3, [r7, #3]
 800d65a:	1c5a      	adds	r2, r3, #1
 800d65c:	70fa      	strb	r2, [r7, #3]
 800d65e:	461a      	mov	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4413      	add	r3, r2
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	041a      	lsls	r2, r3, #16
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	61fb      	str	r3, [r7, #28]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800d66e:	78fb      	ldrb	r3, [r7, #3]
 800d670:	1c5a      	adds	r2, r3, #1
 800d672:	70fa      	strb	r2, [r7, #3]
 800d674:	461a      	mov	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	4413      	add	r3, r2
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	061a      	lsls	r2, r3, #24
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	4313      	orrs	r3, r2
 800d682:	61fb      	str	r3, [r7, #28]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800d684:	78fb      	ldrb	r3, [r7, #3]
 800d686:	1c5a      	adds	r2, r3, #1
 800d688:	70fa      	strb	r2, [r7, #3]
 800d68a:	461a      	mov	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4413      	add	r3, r2
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	b21b      	sxth	r3, r3
 800d694:	843b      	strh	r3, [r7, #32]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800d696:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d69a:	461a      	mov	r2, r3
 800d69c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6a0:	fb02 f303 	mul.w	r3, r2, r3
 800d6a4:	121b      	asrs	r3, r3, #8
 800d6a6:	b21b      	sxth	r3, r3
 800d6a8:	843b      	strh	r3, [r7, #32]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 800d6aa:	f107 0314 	add.w	r3, r7, #20
 800d6ae:	f107 021c 	add.w	r2, r7, #28
 800d6b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d6b6:	e883 0003 	stmia.w	r3, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800d6ba:	697a      	ldr	r2, [r7, #20]
 800d6bc:	4b83      	ldr	r3, [pc, #524]	@ (800d8cc <ProcessMacCommands+0x934>)
 800d6be:	4413      	add	r3, r2
 800d6c0:	617b      	str	r3, [r7, #20]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 800d6c2:	f107 030c 	add.w	r3, r7, #12
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f009 ffdc 	bl	8017684 <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800d6cc:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800d6d0:	4b7f      	ldr	r3, [pc, #508]	@ (800d8d0 <ProcessMacCommands+0x938>)
 800d6d2:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800d6d6:	9200      	str	r2, [sp, #0]
 800d6d8:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800d6dc:	f107 0214 	add.w	r2, r7, #20
 800d6e0:	ca06      	ldmia	r2, {r1, r2}
 800d6e2:	f009 ff65 	bl	80175b0 <SysTimeSub>
 800d6e6:	f107 0014 	add.w	r0, r7, #20
 800d6ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6f0:	f107 020c 	add.w	r2, r7, #12
 800d6f4:	ca06      	ldmia	r2, {r1, r2}
 800d6f6:	f009 ff21 	bl	801753c <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 800d6fa:	f107 0314 	add.w	r3, r7, #20
 800d6fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d702:	f009 ff8f 	bl	8017624 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800d706:	f003 fa76 	bl	8010bf6 <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800d70a:	4b71      	ldr	r3, [pc, #452]	@ (800d8d0 <ProcessMacCommands+0x938>)
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 2464 	strb.w	r2, [r3, #1124]	@ 0x464
                break;
 800d712:	e0d1      	b.n	800d8b8 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800d714:	4b6e      	ldr	r3, [pc, #440]	@ (800d8d0 <ProcessMacCommands+0x938>)
 800d716:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 800d71a:	2b04      	cmp	r3, #4
 800d71c:	f000 80cb 	beq.w	800d8b6 <ProcessMacCommands+0x91e>
 800d720:	4b6b      	ldr	r3, [pc, #428]	@ (800d8d0 <ProcessMacCommands+0x938>)
 800d722:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 800d726:	2b05      	cmp	r3, #5
 800d728:	f000 80c5 	beq.w	800d8b6 <ProcessMacCommands+0x91e>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 800d72c:	f003 fa40 	bl	8010bb0 <LoRaMacClassBPingSlotInfoAns>
                }
                break;
 800d730:	e0c1      	b.n	800d8b6 <ProcessMacCommands+0x91e>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800d732:	2303      	movs	r3, #3
 800d734:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800d738:	2300      	movs	r3, #0
 800d73a:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800d73c:	78fb      	ldrb	r3, [r7, #3]
 800d73e:	1c5a      	adds	r2, r3, #1
 800d740:	70fa      	strb	r2, [r7, #3]
 800d742:	461a      	mov	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	4413      	add	r3, r2
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800d74c:	78fb      	ldrb	r3, [r7, #3]
 800d74e:	1c5a      	adds	r2, r3, #1
 800d750:	70fa      	strb	r2, [r7, #3]
 800d752:	461a      	mov	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4413      	add	r3, r2
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	021b      	lsls	r3, r3, #8
 800d75c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d75e:	4313      	orrs	r3, r2
 800d760:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800d762:	78fb      	ldrb	r3, [r7, #3]
 800d764:	1c5a      	adds	r2, r3, #1
 800d766:	70fa      	strb	r2, [r7, #3]
 800d768:	461a      	mov	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4413      	add	r3, r2
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	041b      	lsls	r3, r3, #16
 800d772:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d774:	4313      	orrs	r3, r2
 800d776:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800d778:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d77a:	2264      	movs	r2, #100	@ 0x64
 800d77c:	fb02 f303 	mul.w	r3, r2, r3
 800d780:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800d782:	78fb      	ldrb	r3, [r7, #3]
 800d784:	1c5a      	adds	r2, r3, #1
 800d786:	70fa      	strb	r2, [r7, #3]
 800d788:	461a      	mov	r2, r3
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	4413      	add	r3, r2
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	f003 030f 	and.w	r3, r3, #15
 800d794:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800d798:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d79c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f003 fa0d 	bl	8010bbe <LoRaMacClassBPingSlotChannelReq>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800d7aa:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800d7ae:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800d7b2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	2011      	movs	r0, #17
 800d7bc:	f003 fbba 	bl	8010f34 <LoRaMacCommandsAddCmd>
                break;
 800d7c0:	e07a      	b.n	800d8b8 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                uint8_t beaconTimingChannel = 0;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800d7ce:	78fb      	ldrb	r3, [r7, #3]
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	70fa      	strb	r2, [r7, #3]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	4413      	add	r3, r2
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800d7e0:	78fb      	ldrb	r3, [r7, #3]
 800d7e2:	1c5a      	adds	r2, r3, #1
 800d7e4:	70fa      	strb	r2, [r7, #3]
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	021b      	lsls	r3, r3, #8
 800d7f0:	b21a      	sxth	r2, r3
 800d7f2:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	b21b      	sxth	r3, r3
 800d7fa:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                beaconTimingChannel = payload[macIndex++];
 800d7fe:	78fb      	ldrb	r3, [r7, #3]
 800d800:	1c5a      	adds	r2, r3, #1
 800d802:	70fa      	strb	r2, [r7, #3]
 800d804:	461a      	mov	r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4413      	add	r3, r2
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800d810:	4b30      	ldr	r3, [pc, #192]	@ (800d8d4 <ProcessMacCommands+0x93c>)
 800d812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d816:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800d81a:	f8b7 007e 	ldrh.w	r0, [r7, #126]	@ 0x7e
 800d81e:	f003 f9db 	bl	8010bd8 <LoRaMacClassBBeaconTimingAns>
                break;
 800d822:	e049      	b.n	800d8b8 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800d824:	2300      	movs	r3, #0
 800d826:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800d82a:	78fb      	ldrb	r3, [r7, #3]
 800d82c:	1c5a      	adds	r2, r3, #1
 800d82e:	70fa      	strb	r2, [r7, #3]
 800d830:	461a      	mov	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4413      	add	r3, r2
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800d83c:	78fb      	ldrb	r3, [r7, #3]
 800d83e:	1c5a      	adds	r2, r3, #1
 800d840:	70fa      	strb	r2, [r7, #3]
 800d842:	461a      	mov	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	4413      	add	r3, r2
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	021b      	lsls	r3, r3, #8
 800d84c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d850:	4313      	orrs	r3, r2
 800d852:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800d856:	78fb      	ldrb	r3, [r7, #3]
 800d858:	1c5a      	adds	r2, r3, #1
 800d85a:	70fa      	strb	r2, [r7, #3]
 800d85c:	461a      	mov	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4413      	add	r3, r2
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	041b      	lsls	r3, r3, #16
 800d866:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d86a:	4313      	orrs	r3, r2
 800d86c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800d870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d874:	2264      	movs	r2, #100	@ 0x64
 800d876:	fb02 f303 	mul.w	r3, r2, r3
 800d87a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800d87e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800d882:	f003 f9bf 	bl	8010c04 <LoRaMacClassBBeaconFreqReq>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d003      	beq.n	800d894 <ProcessMacCommands+0x8fc>
                    {
                        macCmdPayload[0] = 1;
 800d88c:	2301      	movs	r3, #1
 800d88e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800d892:	e002      	b.n	800d89a <ProcessMacCommands+0x902>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800d894:	2300      	movs	r3, #0
 800d896:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800d89a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d89e:	2201      	movs	r2, #1
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	2013      	movs	r0, #19
 800d8a4:	f003 fb46 	bl	8010f34 <LoRaMacCommandsAddCmd>
                }
                break;
 800d8a8:	e006      	b.n	800d8b8 <ProcessMacCommands+0x920>
                break;
 800d8aa:	bf00      	nop
 800d8ac:	e004      	b.n	800d8b8 <ProcessMacCommands+0x920>
                break;
 800d8ae:	bf00      	nop
 800d8b0:	e002      	b.n	800d8b8 <ProcessMacCommands+0x920>
                break;
 800d8b2:	bf00      	nop
 800d8b4:	e000      	b.n	800d8b8 <ProcessMacCommands+0x920>
                break;
 800d8b6:	bf00      	nop
    while( macIndex < commandsSize )
 800d8b8:	78fa      	ldrb	r2, [r7, #3]
 800d8ba:	78bb      	ldrb	r3, [r7, #2]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	f4ff ab83 	bcc.w	800cfc8 <ProcessMacCommands+0x30>
 800d8c2:	e000      	b.n	800d8c6 <ProcessMacCommands+0x92e>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800d8c4:	bf00      	nop
        }
    }
}
 800d8c6:	378c      	adds	r7, #140	@ 0x8c
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd90      	pop	{r4, r7, pc}
 800d8cc:	12d53d80 	.word	0x12d53d80
 800d8d0:	200014d0 	.word	0x200014d0
 800d8d4:	20001bd8 	.word	0x20001bd8

0800d8d8 <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b08e      	sub	sp, #56	@ 0x38
 800d8dc:	af02      	add	r7, sp, #8
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	607a      	str	r2, [r7, #4]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	72fb      	strb	r3, [r7, #11]
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d8f2:	4b7e      	ldr	r3, [pc, #504]	@ (800daec <Send+0x214>)
 800d8f4:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d8f8:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800d8fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800d900:	4b7a      	ldr	r3, [pc, #488]	@ (800daec <Send+0x214>)
 800d902:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d906:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 800d90a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800d90e:	4b77      	ldr	r3, [pc, #476]	@ (800daec <Send+0x214>)
 800d910:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d918:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800d91a:	4b74      	ldr	r3, [pc, #464]	@ (800daec <Send+0x214>)
 800d91c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d920:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800d924:	2b00      	cmp	r3, #0
 800d926:	d101      	bne.n	800d92c <Send+0x54>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800d928:	2307      	movs	r3, #7
 800d92a:	e0da      	b.n	800dae2 <Send+0x20a>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800d92c:	4b6f      	ldr	r3, [pc, #444]	@ (800daec <Send+0x214>)
 800d92e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d932:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800d936:	2b00      	cmp	r3, #0
 800d938:	d108      	bne.n	800d94c <Send+0x74>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800d93a:	4b6c      	ldr	r3, [pc, #432]	@ (800daec <Send+0x214>)
 800d93c:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800d940:	f04f 0200 	mov.w	r2, #0
 800d944:	f04f 0300 	mov.w	r3, #0
 800d948:	e9c1 2374 	strd	r2, r3, [r1, #464]	@ 0x1d0
    }

    fCtrl.Value = 0;
 800d94c:	2300      	movs	r3, #0
 800d94e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800d952:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d956:	f36f 0303 	bfc	r3, #0, #4
 800d95a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800d95e:	4b63      	ldr	r3, [pc, #396]	@ (800daec <Send+0x214>)
 800d960:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d964:	f893 20f2 	ldrb.w	r2, [r3, #242]	@ 0xf2
 800d968:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d96c:	f362 13c7 	bfi	r3, r2, #7, #1
 800d970:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800d974:	4b5d      	ldr	r3, [pc, #372]	@ (800daec <Send+0x214>)
 800d976:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d97a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d106      	bne.n	800d990 <Send+0xb8>
    {
        fCtrl.Bits.FPending      = 1;
 800d982:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d986:	f043 0310 	orr.w	r3, r3, #16
 800d98a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800d98e:	e005      	b.n	800d99c <Send+0xc4>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800d990:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d994:	f36f 1304 	bfc	r3, #4, #1
 800d998:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800d99c:	4b53      	ldr	r3, [pc, #332]	@ (800daec <Send+0x214>)
 800d99e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d9a2:	f893 31c0 	ldrb.w	r3, [r3, #448]	@ 0x1c0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d005      	beq.n	800d9b6 <Send+0xde>
    {
        fCtrl.Bits.Ack = 1;
 800d9aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d9ae:	f043 0320 	orr.w	r3, r3, #32
 800d9b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800d9b6:	4b4d      	ldr	r3, [pc, #308]	@ (800daec <Send+0x214>)
 800d9b8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d9bc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800d9c0:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800d9c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d9ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	bf14      	ite	ne
 800d9d4:	2301      	movne	r3, #1
 800d9d6:	2300      	moveq	r3, #0
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800d9dc:	4b43      	ldr	r3, [pc, #268]	@ (800daec <Send+0x214>)
 800d9de:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d9e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9e6:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800d9e8:	4b40      	ldr	r3, [pc, #256]	@ (800daec <Send+0x214>)
 800d9ea:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	@ 0x414
 800d9ee:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800d9f0:	4b3e      	ldr	r3, [pc, #248]	@ (800daec <Send+0x214>)
 800d9f2:	f8b3 3416 	ldrh.w	r3, [r3, #1046]	@ 0x416
 800d9f6:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d9f8:	4b3c      	ldr	r3, [pc, #240]	@ (800daec <Send+0x214>)
 800d9fa:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800d9fe:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800da02:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800da06:	4b39      	ldr	r3, [pc, #228]	@ (800daec <Send+0x214>)
 800da08:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800da0c:	f993 30f8 	ldrsb.w	r3, [r3, #248]	@ 0xf8
 800da10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800da14:	4b35      	ldr	r3, [pc, #212]	@ (800daec <Send+0x214>)
 800da16:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800da1a:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800da1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = MacCtx.NvmCtx->Region;
 800da22:	4b32      	ldr	r3, [pc, #200]	@ (800daec <Send+0x214>)
 800da24:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800da2e:	4b2f      	ldr	r3, [pc, #188]	@ (800daec <Send+0x214>)
 800da30:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800da34:	f103 01f9 	add.w	r1, r3, #249	@ 0xf9
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 800da38:	4b2c      	ldr	r3, [pc, #176]	@ (800daec <Send+0x214>)
 800da3a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800da3e:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 800da42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800da46:	f107 0014 	add.w	r0, r7, #20
 800da4a:	f002 ffc5 	bl	80109d8 <LoRaMacAdrCalcNext>
 800da4e:	4603      	mov	r3, r0
 800da50:	461a      	mov	r2, r3
 800da52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800da56:	f362 1386 	bfi	r3, r2, #6, #1
 800da5a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800da5e:	7afa      	ldrb	r2, [r7, #11]
 800da60:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800da64:	893b      	ldrh	r3, [r7, #8]
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f000 fbfe 	bl	800e26c <PrepareFrame>
 800da70:	4603      	mov	r3, r0
 800da72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800da76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d003      	beq.n	800da86 <Send+0x1ae>
 800da7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da82:	2b0a      	cmp	r3, #10
 800da84:	d105      	bne.n	800da92 <Send+0x1ba>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
 800da86:	2000      	movs	r0, #0
 800da88:	f000 f880 	bl	800db8c <ScheduleTx>
 800da8c:	4603      	mov	r3, r0
 800da8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800da92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da96:	2b00      	cmp	r3, #0
 800da98:	d00e      	beq.n	800dab8 <Send+0x1e0>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800da9a:	4b14      	ldr	r3, [pc, #80]	@ (800daec <Send+0x214>)
 800da9c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800daa0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800daa4:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800daa8:	4b10      	ldr	r3, [pc, #64]	@ (800daec <Send+0x214>)
 800daaa:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800daae:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800dab2:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
 800dab6:	e012      	b.n	800dade <Send+0x206>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 800dab8:	4b0c      	ldr	r3, [pc, #48]	@ (800daec <Send+0x214>)
 800daba:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 21c0 	strb.w	r2, [r3, #448]	@ 0x1c0
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800dac4:	4b09      	ldr	r3, [pc, #36]	@ (800daec <Send+0x214>)
 800dac6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800daca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dacc:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800dad0:	f003 faac 	bl	801102c <LoRaMacCommandsRemoveNoneStickyCmds>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d001      	beq.n	800dade <Send+0x206>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dada:	2313      	movs	r3, #19
 800dadc:	e001      	b.n	800dae2 <Send+0x20a>
        }
    }
    return status;
 800dade:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3730      	adds	r7, #48	@ 0x30
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	200014d0 	.word	0x200014d0

0800daf0 <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800dafe:	2300      	movs	r3, #0
 800db00:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800db02:	2301      	movs	r3, #1
 800db04:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800db06:	79fb      	ldrb	r3, [r7, #7]
 800db08:	2bff      	cmp	r3, #255	@ 0xff
 800db0a:	d129      	bne.n	800db60 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800db0c:	2000      	movs	r0, #0
 800db0e:	f7ff f8d3 	bl	800ccb8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800db12:	4b1a      	ldr	r3, [pc, #104]	@ (800db7c <SendReJoinReq+0x8c>)
 800db14:	2200      	movs	r2, #0
 800db16:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800db1a:	4b18      	ldr	r3, [pc, #96]	@ (800db7c <SendReJoinReq+0x8c>)
 800db1c:	4a18      	ldr	r2, [pc, #96]	@ (800db80 <SendReJoinReq+0x90>)
 800db1e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800db22:	4b16      	ldr	r3, [pc, #88]	@ (800db7c <SendReJoinReq+0x8c>)
 800db24:	22ff      	movs	r2, #255	@ 0xff
 800db26:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800db2a:	7b3b      	ldrb	r3, [r7, #12]
 800db2c:	f36f 1347 	bfc	r3, #5, #3
 800db30:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800db32:	7b3a      	ldrb	r2, [r7, #12]
 800db34:	4b11      	ldr	r3, [pc, #68]	@ (800db7c <SendReJoinReq+0x8c>)
 800db36:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800db3a:	f7fa fc59 	bl	80083f0 <SecureElementGetJoinEui>
 800db3e:	4603      	mov	r3, r0
 800db40:	2208      	movs	r2, #8
 800db42:	4619      	mov	r1, r3
 800db44:	480f      	ldr	r0, [pc, #60]	@ (800db84 <SendReJoinReq+0x94>)
 800db46:	f00a fbde 	bl	8018306 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800db4a:	f7fa fc2d 	bl	80083a8 <SecureElementGetDevEui>
 800db4e:	4603      	mov	r3, r0
 800db50:	2208      	movs	r2, #8
 800db52:	4619      	mov	r1, r3
 800db54:	480c      	ldr	r0, [pc, #48]	@ (800db88 <SendReJoinReq+0x98>)
 800db56:	f00a fbd6 	bl	8018306 <memcpy1>

            allowDelayedTx = false;
 800db5a:	2300      	movs	r3, #0
 800db5c:	73fb      	strb	r3, [r7, #15]

            break;
 800db5e:	e002      	b.n	800db66 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800db60:	2302      	movs	r3, #2
 800db62:	73bb      	strb	r3, [r7, #14]
            break;
 800db64:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800db66:	7bfb      	ldrb	r3, [r7, #15]
 800db68:	4618      	mov	r0, r3
 800db6a:	f000 f80f 	bl	800db8c <ScheduleTx>
 800db6e:	4603      	mov	r3, r0
 800db70:	73bb      	strb	r3, [r7, #14]
    return status;
 800db72:	7bbb      	ldrb	r3, [r7, #14]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	200014d0 	.word	0x200014d0
 800db80:	200014d2 	.word	0x200014d2
 800db84:	200015de 	.word	0x200015de
 800db88:	200015e6 	.word	0x200015e6

0800db8c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800db8c:	b590      	push	{r4, r7, lr}
 800db8e:	b091      	sub	sp, #68	@ 0x44
 800db90:	af02      	add	r7, sp, #8
 800db92:	4603      	mov	r3, r0
 800db94:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800db96:	2303      	movs	r3, #3
 800db98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    TimerTime_t dutyCycleTimeOff = 0;
 800db9c:	f04f 0200 	mov.w	r2, #0
 800dba0:	f04f 0300 	mov.w	r3, #0
 800dba4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	60fb      	str	r3, [r7, #12]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800dbac:	4b93      	ldr	r3, [pc, #588]	@ (800ddfc <ScheduleTx+0x270>)
 800dbae:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dbb2:	f893 313e 	ldrb.w	r3, [r3, #318]	@ 0x13e
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f000 f986 	bl	800dec8 <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 800dbbc:	4b8f      	ldr	r3, [pc, #572]	@ (800ddfc <ScheduleTx+0x270>)
 800dbbe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dbc2:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	@ 0x1d0
 800dbc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800dbca:	4b8c      	ldr	r3, [pc, #560]	@ (800ddfc <ScheduleTx+0x270>)
 800dbcc:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dbd0:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800dbd4:	f887 3020 	strb.w	r3, [r7, #32]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800dbd8:	4b88      	ldr	r3, [pc, #544]	@ (800ddfc <ScheduleTx+0x270>)
 800dbda:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dbde:	f893 313d 	ldrb.w	r3, [r3, #317]	@ 0x13d
 800dbe2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800dbe6:	4b85      	ldr	r3, [pc, #532]	@ (800ddfc <ScheduleTx+0x270>)
 800dbe8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dbec:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d103      	bne.n	800dbfc <ScheduleTx+0x70>
    {
        nextChan.Joined = false;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800dbfa:	e002      	b.n	800dc02 <ScheduleTx+0x76>
    }
    else
    {
        nextChan.Joined = true;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    }
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 800dc02:	4b7e      	ldr	r3, [pc, #504]	@ (800ddfc <ScheduleTx+0x270>)
 800dc04:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dc08:	e9d3 2372 	ldrd	r2, r3, [r3, #456]	@ 0x1c8
 800dc0c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 800dc10:	4b7a      	ldr	r3, [pc, #488]	@ (800ddfc <ScheduleTx+0x270>)
 800dc12:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dc16:	7818      	ldrb	r0, [r3, #0]
 800dc18:	4b78      	ldr	r3, [pc, #480]	@ (800ddfc <ScheduleTx+0x270>)
 800dc1a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dc1e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800dc22:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800dc26:	f107 0110 	add.w	r1, r7, #16
 800dc2a:	9300      	str	r3, [sp, #0]
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	4a74      	ldr	r2, [pc, #464]	@ (800de00 <ScheduleTx+0x274>)
 800dc30:	f005 fa71 	bl	8013116 <RegionNextChannel>
 800dc34:	4603      	mov	r3, r0
 800dc36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800dc3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d01f      	beq.n	800dc82 <ScheduleTx+0xf6>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800dc42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc46:	2b0b      	cmp	r3, #11
 800dc48:	d118      	bne.n	800dc7c <ScheduleTx+0xf0>
 800dc4a:	79fb      	ldrb	r3, [r7, #7]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d015      	beq.n	800dc7c <ScheduleTx+0xf0>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 800dc50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800dc54:	4313      	orrs	r3, r2
 800dc56:	d00f      	beq.n	800dc78 <ScheduleTx+0xec>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800dc58:	4b68      	ldr	r3, [pc, #416]	@ (800ddfc <ScheduleTx+0x270>)
 800dc5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dc5e:	f043 0320 	orr.w	r3, r3, #32
 800dc62:	4a66      	ldr	r2, [pc, #408]	@ (800ddfc <ScheduleTx+0x270>)
 800dc64:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 800dc68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800dc6c:	4865      	ldr	r0, [pc, #404]	@ (800de04 <ScheduleTx+0x278>)
 800dc6e:	f009 fe95 	bl	801799c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800dc72:	4864      	ldr	r0, [pc, #400]	@ (800de04 <ScheduleTx+0x278>)
 800dc74:	f009 fd9e 	bl	80177b4 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	e0ba      	b.n	800ddf2 <ScheduleTx+0x266>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800dc7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc80:	e0b7      	b.n	800ddf2 <ScheduleTx+0x266>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800dc82:	4b5e      	ldr	r3, [pc, #376]	@ (800ddfc <ScheduleTx+0x270>)
 800dc84:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dc88:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800dc8a:	4b5c      	ldr	r3, [pc, #368]	@ (800ddfc <ScheduleTx+0x270>)
 800dc8c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dc90:	7818      	ldrb	r0, [r3, #0]
 800dc92:	4b5a      	ldr	r3, [pc, #360]	@ (800ddfc <ScheduleTx+0x270>)
 800dc94:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dc98:	f893 112d 	ldrb.w	r1, [r3, #301]	@ 0x12d
 800dc9c:	4b57      	ldr	r3, [pc, #348]	@ (800ddfc <ScheduleTx+0x270>)
 800dc9e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dca2:	f993 20f9 	ldrsb.w	r2, [r3, #249]	@ 0xf9
 800dca6:	4b55      	ldr	r3, [pc, #340]	@ (800ddfc <ScheduleTx+0x270>)
 800dca8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dcac:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 800dcb0:	b25b      	sxtb	r3, r3
 800dcb2:	f005 fa5a 	bl	801316a <RegionApplyDrOffset>
 800dcb6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800dcb8:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800dcba:	4b50      	ldr	r3, [pc, #320]	@ (800ddfc <ScheduleTx+0x270>)
 800dcbc:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800dcc0:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800dcc4:	4b4d      	ldr	r3, [pc, #308]	@ (800ddfc <ScheduleTx+0x270>)
 800dcc6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800dcca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800dcce:	484e      	ldr	r0, [pc, #312]	@ (800de08 <ScheduleTx+0x27c>)
 800dcd0:	9000      	str	r0, [sp, #0]
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f005 f947 	bl	8012f66 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800dcd8:	4b48      	ldr	r3, [pc, #288]	@ (800ddfc <ScheduleTx+0x270>)
 800dcda:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dcde:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800dce0:	4b46      	ldr	r3, [pc, #280]	@ (800ddfc <ScheduleTx+0x270>)
 800dce2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dce6:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800dcea:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800dcec:	4b43      	ldr	r3, [pc, #268]	@ (800ddfc <ScheduleTx+0x270>)
 800dcee:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800dcf2:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800dcf6:	4b41      	ldr	r3, [pc, #260]	@ (800ddfc <ScheduleTx+0x270>)
 800dcf8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800dcfc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800dd00:	4c42      	ldr	r4, [pc, #264]	@ (800de0c <ScheduleTx+0x280>)
 800dd02:	9400      	str	r4, [sp, #0]
 800dd04:	f005 f92f 	bl	8012f66 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800dd08:	4b3c      	ldr	r3, [pc, #240]	@ (800ddfc <ScheduleTx+0x270>)
 800dd0a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dd0e:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d118      	bne.n	800dd48 <ScheduleTx+0x1bc>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800dd16:	4b39      	ldr	r3, [pc, #228]	@ (800ddfc <ScheduleTx+0x270>)
 800dd18:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dd1c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800dd20:	4a36      	ldr	r2, [pc, #216]	@ (800ddfc <ScheduleTx+0x270>)
 800dd22:	f8d2 23e4 	ldr.w	r2, [r2, #996]	@ 0x3e4
 800dd26:	4413      	add	r3, r2
 800dd28:	4a34      	ldr	r2, [pc, #208]	@ (800ddfc <ScheduleTx+0x270>)
 800dd2a:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800dd2e:	4b33      	ldr	r3, [pc, #204]	@ (800ddfc <ScheduleTx+0x270>)
 800dd30:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dd34:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800dd38:	4a30      	ldr	r2, [pc, #192]	@ (800ddfc <ScheduleTx+0x270>)
 800dd3a:	f8d2 23f8 	ldr.w	r2, [r2, #1016]	@ 0x3f8
 800dd3e:	4413      	add	r3, r2
 800dd40:	4a2e      	ldr	r2, [pc, #184]	@ (800ddfc <ScheduleTx+0x270>)
 800dd42:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
 800dd46:	e036      	b.n	800ddb6 <ScheduleTx+0x22a>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800dd48:	f107 030c 	add.w	r3, r7, #12
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f003 f9b7 	bl	80110c0 <LoRaMacCommandsGetSizeSerializedCmds>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <ScheduleTx+0x1d0>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dd58:	2313      	movs	r3, #19
 800dd5a:	e04a      	b.n	800ddf2 <ScheduleTx+0x266>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800dd5c:	4b27      	ldr	r3, [pc, #156]	@ (800ddfc <ScheduleTx+0x270>)
 800dd5e:	f893 0237 	ldrb.w	r0, [r3, #567]	@ 0x237
 800dd62:	4b26      	ldr	r3, [pc, #152]	@ (800ddfc <ScheduleTx+0x270>)
 800dd64:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dd68:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	b2d2      	uxtb	r2, r2
 800dd70:	4619      	mov	r1, r3
 800dd72:	f7ff f8d9 	bl	800cf28 <ValidatePayloadLength>
 800dd76:	4603      	mov	r3, r0
 800dd78:	f083 0301 	eor.w	r3, r3, #1
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <ScheduleTx+0x1fa>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800dd82:	2308      	movs	r3, #8
 800dd84:	e035      	b.n	800ddf2 <ScheduleTx+0x266>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800dd86:	4b1d      	ldr	r3, [pc, #116]	@ (800ddfc <ScheduleTx+0x270>)
 800dd88:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dd8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800dd90:	4a1a      	ldr	r2, [pc, #104]	@ (800ddfc <ScheduleTx+0x270>)
 800dd92:	f8d2 23e4 	ldr.w	r2, [r2, #996]	@ 0x3e4
 800dd96:	4413      	add	r3, r2
 800dd98:	4a18      	ldr	r2, [pc, #96]	@ (800ddfc <ScheduleTx+0x270>)
 800dd9a:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800dd9e:	4b17      	ldr	r3, [pc, #92]	@ (800ddfc <ScheduleTx+0x270>)
 800dda0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800dda4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800dda8:	4a14      	ldr	r2, [pc, #80]	@ (800ddfc <ScheduleTx+0x270>)
 800ddaa:	f8d2 23f8 	ldr.w	r2, [r2, #1016]	@ 0x3f8
 800ddae:	4413      	add	r3, r2
 800ddb0:	4a12      	ldr	r2, [pc, #72]	@ (800ddfc <ScheduleTx+0x270>)
 800ddb2:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 800ddb6:	4b11      	ldr	r3, [pc, #68]	@ (800ddfc <ScheduleTx+0x270>)
 800ddb8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ddbc:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	4a0e      	ldr	r2, [pc, #56]	@ (800ddfc <ScheduleTx+0x270>)
 800ddc4:	f892 243d 	ldrb.w	r2, [r2, #1085]	@ 0x43d
 800ddc8:	4611      	mov	r1, r2
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 f820 	bl	800de10 <SecureFrame>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    if( retval != LORAMAC_STATUS_OK )
 800ddd6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d002      	beq.n	800dde4 <ScheduleTx+0x258>
    {
        return retval;
 800ddde:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800dde2:	e006      	b.n	800ddf2 <ScheduleTx+0x266>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800dde4:	4b05      	ldr	r3, [pc, #20]	@ (800ddfc <ScheduleTx+0x270>)
 800dde6:	f893 343d 	ldrb.w	r3, [r3, #1085]	@ 0x43d
 800ddea:	4618      	mov	r0, r3
 800ddec:	f000 fb64 	bl	800e4b8 <SendFrameOnChannel>
 800ddf0:	4603      	mov	r3, r0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	373c      	adds	r7, #60	@ 0x3c
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd90      	pop	{r4, r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	200014d0 	.word	0x200014d0
 800de00:	2000190d 	.word	0x2000190d
 800de04:	20001840 	.word	0x20001840
 800de08:	200018a8 	.word	0x200018a8
 800de0c:	200018bc 	.word	0x200018bc

0800de10 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	4603      	mov	r3, r0
 800de18:	460a      	mov	r2, r1
 800de1a:	71fb      	strb	r3, [r7, #7]
 800de1c:	4613      	mov	r3, r2
 800de1e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800de20:	2313      	movs	r3, #19
 800de22:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800de24:	2300      	movs	r3, #0
 800de26:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800de28:	4b25      	ldr	r3, [pc, #148]	@ (800dec0 <SecureFrame+0xb0>)
 800de2a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d002      	beq.n	800de38 <SecureFrame+0x28>
 800de32:	2b04      	cmp	r3, #4
 800de34:	d011      	beq.n	800de5a <SecureFrame+0x4a>
 800de36:	e03b      	b.n	800deb0 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800de38:	4822      	ldr	r0, [pc, #136]	@ (800dec4 <SecureFrame+0xb4>)
 800de3a:	f004 f875 	bl	8011f28 <LoRaMacCryptoPrepareJoinRequest>
 800de3e:	4603      	mov	r3, r0
 800de40:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800de42:	7bfb      	ldrb	r3, [r7, #15]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800de48:	2311      	movs	r3, #17
 800de4a:	e034      	b.n	800deb6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800de4c:	4b1c      	ldr	r3, [pc, #112]	@ (800dec0 <SecureFrame+0xb0>)
 800de4e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800de52:	461a      	mov	r2, r3
 800de54:	4b1a      	ldr	r3, [pc, #104]	@ (800dec0 <SecureFrame+0xb0>)
 800de56:	801a      	strh	r2, [r3, #0]
            break;
 800de58:	e02c      	b.n	800deb4 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800de5a:	f107 0308 	add.w	r3, r7, #8
 800de5e:	4618      	mov	r0, r3
 800de60:	f003 ff7e 	bl	8011d60 <LoRaMacCryptoGetFCntUp>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800de6a:	2312      	movs	r3, #18
 800de6c:	e023      	b.n	800deb6 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800de6e:	4b14      	ldr	r3, [pc, #80]	@ (800dec0 <SecureFrame+0xb0>)
 800de70:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800de74:	2b00      	cmp	r3, #0
 800de76:	d104      	bne.n	800de82 <SecureFrame+0x72>
 800de78:	4b11      	ldr	r3, [pc, #68]	@ (800dec0 <SecureFrame+0xb0>)
 800de7a:	f893 343a 	ldrb.w	r3, [r3, #1082]	@ 0x43a
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d902      	bls.n	800de88 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	3b01      	subs	r3, #1
 800de86:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800de88:	68b8      	ldr	r0, [r7, #8]
 800de8a:	79ba      	ldrb	r2, [r7, #6]
 800de8c:	79f9      	ldrb	r1, [r7, #7]
 800de8e:	4b0d      	ldr	r3, [pc, #52]	@ (800dec4 <SecureFrame+0xb4>)
 800de90:	f004 faae 	bl	80123f0 <LoRaMacCryptoSecureMessage>
 800de94:	4603      	mov	r3, r0
 800de96:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800de98:	7bfb      	ldrb	r3, [r7, #15]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d001      	beq.n	800dea2 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800de9e:	2311      	movs	r3, #17
 800dea0:	e009      	b.n	800deb6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800dea2:	4b07      	ldr	r3, [pc, #28]	@ (800dec0 <SecureFrame+0xb0>)
 800dea4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800dea8:	461a      	mov	r2, r3
 800deaa:	4b05      	ldr	r3, [pc, #20]	@ (800dec0 <SecureFrame+0xb0>)
 800deac:	801a      	strh	r2, [r3, #0]
            break;
 800deae:	e001      	b.n	800deb4 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800deb0:	2303      	movs	r3, #3
 800deb2:	e000      	b.n	800deb6 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	200014d0 	.word	0x200014d0
 800dec4:	200015d8 	.word	0x200015d8

0800dec8 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 800dec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800decc:	b08f      	sub	sp, #60	@ 0x3c
 800dece:	af02      	add	r7, sp, #8
 800ded0:	4603      	mov	r3, r0
 800ded2:	73fb      	strb	r3, [r7, #15]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800ded4:	4b3b      	ldr	r3, [pc, #236]	@ (800dfc4 <CalculateBackOff+0xfc>)
 800ded6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800deda:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d102      	bne.n	800dee8 <CalculateBackOff+0x20>
    {
        calcBackOff.Joined = false;
 800dee2:	2300      	movs	r3, #0
 800dee4:	743b      	strb	r3, [r7, #16]
 800dee6:	e001      	b.n	800deec <CalculateBackOff+0x24>
    }
    else
    {
        calcBackOff.Joined = true;
 800dee8:	2301      	movs	r3, #1
 800deea:	743b      	strb	r3, [r7, #16]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800deec:	4b35      	ldr	r3, [pc, #212]	@ (800dfc4 <CalculateBackOff+0xfc>)
 800deee:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800def2:	f893 313d 	ldrb.w	r3, [r3, #317]	@ 0x13d
 800def6:	74bb      	strb	r3, [r7, #18]
    calcBackOff.Channel = channel;
 800def8:	7bfb      	ldrb	r3, [r7, #15]
 800defa:	74fb      	strb	r3, [r7, #19]
    calcBackOff.ElapsedTime = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800defc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800df00:	4618      	mov	r0, r3
 800df02:	f009 fbf9 	bl	80176f8 <SysTimeGetMcuTime>
 800df06:	4b2f      	ldr	r3, [pc, #188]	@ (800dfc4 <CalculateBackOff+0xfc>)
 800df08:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800df0c:	4638      	mov	r0, r7
 800df0e:	f8d3 21dc 	ldr.w	r2, [r3, #476]	@ 0x1dc
 800df12:	9200      	str	r2, [sp, #0]
 800df14:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800df18:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800df1c:	ca06      	ldmia	r2, {r1, r2}
 800df1e:	f009 fb47 	bl	80175b0 <SysTimeSub>
 800df22:	f107 0314 	add.w	r3, r7, #20
 800df26:	463a      	mov	r2, r7
 800df28:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df2c:	e883 0003 	stmia.w	r3, {r0, r1}
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800df30:	4b24      	ldr	r3, [pc, #144]	@ (800dfc4 <CalculateBackOff+0xfc>)
 800df32:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    calcBackOff.LastTxIsJoinRequest = false;
 800df3e:	2300      	movs	r3, #0
 800df40:	747b      	strb	r3, [r7, #17]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800df42:	4b20      	ldr	r3, [pc, #128]	@ (800dfc4 <CalculateBackOff+0xfc>)
 800df44:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800df48:	f003 0304 	and.w	r3, r3, #4
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d007      	beq.n	800df62 <CalculateBackOff+0x9a>
 800df52:	2000      	movs	r0, #0
 800df54:	f003 fa90 	bl	8011478 <LoRaMacConfirmQueueIsCmdActive>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d001      	beq.n	800df62 <CalculateBackOff+0x9a>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 800df5e:	2301      	movs	r3, #1
 800df60:	747b      	strb	r3, [r7, #17]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800df62:	4b18      	ldr	r3, [pc, #96]	@ (800dfc4 <CalculateBackOff+0xfc>)
 800df64:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	f107 0210 	add.w	r2, r7, #16
 800df6e:	4611      	mov	r1, r2
 800df70:	4618      	mov	r0, r3
 800df72:	f005 f8be 	bl	80130f2 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800df76:	4b13      	ldr	r3, [pc, #76]	@ (800dfc4 <CalculateBackOff+0xfc>)
 800df78:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800df7c:	f8b3 31c2 	ldrh.w	r3, [r3, #450]	@ 0x1c2
 800df80:	b29b      	uxth	r3, r3
 800df82:	2200      	movs	r2, #0
 800df84:	469a      	mov	sl, r3
 800df86:	4693      	mov	fp, r2
 800df88:	f11a 34ff 	adds.w	r4, sl, #4294967295	@ 0xffffffff
 800df8c:	f14b 35ff 	adc.w	r5, fp, #4294967295	@ 0xffffffff
 800df90:	4b0c      	ldr	r3, [pc, #48]	@ (800dfc4 <CalculateBackOff+0xfc>)
 800df92:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800df96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9a:	490a      	ldr	r1, [pc, #40]	@ (800dfc4 <CalculateBackOff+0xfc>)
 800df9c:	f8d1 14c8 	ldr.w	r1, [r1, #1224]	@ 0x4c8
 800dfa0:	fb02 f605 	mul.w	r6, r2, r5
 800dfa4:	fb04 f003 	mul.w	r0, r4, r3
 800dfa8:	4430      	add	r0, r6
 800dfaa:	fba4 8902 	umull	r8, r9, r4, r2
 800dfae:	eb00 0309 	add.w	r3, r0, r9
 800dfb2:	4699      	mov	r9, r3
 800dfb4:	e9c1 8974 	strd	r8, r9, [r1, #464]	@ 0x1d0
}
 800dfb8:	bf00      	nop
 800dfba:	3734      	adds	r7, #52	@ 0x34
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc2:	bf00      	nop
 800dfc4:	200014d0 	.word	0x200014d0

0800dfc8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	4603      	mov	r3, r0
 800dfd0:	7139      	strb	r1, [r7, #4]
 800dfd2:	71fb      	strb	r3, [r7, #7]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800dfd8:	79fb      	ldrb	r3, [r7, #7]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d002      	beq.n	800dfe4 <RemoveMacCommands+0x1c>
 800dfde:	79fb      	ldrb	r3, [r7, #7]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d10d      	bne.n	800e000 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800dfe4:	79bb      	ldrb	r3, [r7, #6]
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d108      	bne.n	800dffc <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800dfea:	793b      	ldrb	r3, [r7, #4]
 800dfec:	f003 0320 	and.w	r3, r3, #32
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d004      	beq.n	800e000 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800dff6:	f003 f83f 	bl	8011078 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800dffa:	e001      	b.n	800e000 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800dffc:	f003 f83c 	bl	8011078 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800e000:	bf00      	nop
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800e00e:	4b69      	ldr	r3, [pc, #420]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e010:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e014:	2200      	movs	r2, #0
 800e016:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 800e01a:	4b66      	ldr	r3, [pc, #408]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e01c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e020:	2200      	movs	r2, #0
 800e022:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

    MacCtx.ChannelsNbTransCounter = 0;
 800e026:	4b63      	ldr	r3, [pc, #396]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e028:	2200      	movs	r2, #0
 800e02a:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.AckTimeoutRetries = 1;
 800e02e:	4b61      	ldr	r3, [pc, #388]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e030:	2201      	movs	r2, #1
 800e032:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 800e036:	4b5f      	ldr	r3, [pc, #380]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e038:	2201      	movs	r2, #1
 800e03a:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a
    MacCtx.AckTimeoutRetry = false;
 800e03e:	4b5d      	ldr	r3, [pc, #372]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e040:	2200      	movs	r2, #0
 800e042:	f883 243b 	strb.w	r2, [r3, #1083]	@ 0x43b

    MacCtx.NvmCtx->MaxDCycle = 0;
 800e046:	4b5b      	ldr	r3, [pc, #364]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e048:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 800e052:	4b58      	ldr	r3, [pc, #352]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e054:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e058:	2201      	movs	r2, #1
 800e05a:	f8a3 21c2 	strh.w	r2, [r3, #450]	@ 0x1c2

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800e05e:	4b55      	ldr	r3, [pc, #340]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e060:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800e064:	4b53      	ldr	r3, [pc, #332]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e066:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e06a:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e06e:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800e072:	4b50      	ldr	r3, [pc, #320]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e074:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800e078:	4b4e      	ldr	r3, [pc, #312]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e07a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e07e:	f992 2005 	ldrsb.w	r2, [r2, #5]
 800e082:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 800e086:	4b4b      	ldr	r3, [pc, #300]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e088:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800e08c:	4b49      	ldr	r3, [pc, #292]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e08e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e092:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 800e096:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800e09a:	4b46      	ldr	r3, [pc, #280]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e09c:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800e0a0:	4b44      	ldr	r3, [pc, #272]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e0a2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e0a6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e0aa:	3228      	adds	r2, #40	@ 0x28
 800e0ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0b0:	e883 0003 	stmia.w	r3, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800e0b4:	4b3f      	ldr	r3, [pc, #252]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e0b6:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800e0ba:	4b3e      	ldr	r3, [pc, #248]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e0bc:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e0c0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e0c4:	3230      	adds	r2, #48	@ 0x30
 800e0c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0ca:	e883 0003 	stmia.w	r3, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 800e0ce:	4b39      	ldr	r3, [pc, #228]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e0d0:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800e0d4:	4b37      	ldr	r3, [pc, #220]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e0d6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e0da:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 800e0de:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 800e0e2:	4b34      	ldr	r3, [pc, #208]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e0e4:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800e0e8:	4b32      	ldr	r3, [pc, #200]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e0ea:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e0ee:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 800e0f2:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800e0f6:	4b2f      	ldr	r3, [pc, #188]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e0f8:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800e0fc:	4b2d      	ldr	r3, [pc, #180]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e0fe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e102:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e104:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800e108:	4b2a      	ldr	r3, [pc, #168]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e10a:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800e10e:	4b29      	ldr	r3, [pc, #164]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e110:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e114:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800e116:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

    MacCtx.NodeAckRequested = false;
 800e11a:	4b26      	ldr	r3, [pc, #152]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
    MacCtx.NvmCtx->SrvAckRequested = false;
 800e122:	4b24      	ldr	r3, [pc, #144]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e124:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 21c0 	strb.w	r2, [r3, #448]	@ 0x1c0

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800e12e:	2301      	movs	r3, #1
 800e130:	713b      	strb	r3, [r7, #4]
    params.NvmCtx = NULL;
 800e132:	2300      	movs	r3, #0
 800e134:	603b      	str	r3, [r7, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800e136:	4b1f      	ldr	r3, [pc, #124]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e138:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	463a      	mov	r2, r7
 800e140:	4611      	mov	r1, r2
 800e142:	4618      	mov	r0, r3
 800e144:	f004 feae 	bl	8012ea4 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800e148:	4b1a      	ldr	r3, [pc, #104]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	f883 243d 	strb.w	r2, [r3, #1085]	@ 0x43d
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800e150:	4b18      	ldr	r3, [pc, #96]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e152:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e156:	4a17      	ldr	r2, [pc, #92]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e158:	f892 243d 	ldrb.w	r2, [r2, #1085]	@ 0x43d
 800e15c:	f883 213e 	strb.w	r2, [r3, #318]	@ 0x13e

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e160:	4b14      	ldr	r3, [pc, #80]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e162:	f893 243d 	ldrb.w	r2, [r3, #1085]	@ 0x43d
 800e166:	4b13      	ldr	r3, [pc, #76]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e168:	f883 23ec 	strb.w	r2, [r3, #1004]	@ 0x3ec
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800e16c:	4b11      	ldr	r3, [pc, #68]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e16e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e172:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800e176:	4a0f      	ldr	r2, [pc, #60]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e178:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800e17c:	4b0d      	ldr	r3, [pc, #52]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e17e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e182:	f893 212d 	ldrb.w	r2, [r3, #301]	@ 0x12d
 800e186:	4b0b      	ldr	r3, [pc, #44]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e188:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800e18c:	4b09      	ldr	r3, [pc, #36]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e18e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e192:	f893 213f 	ldrb.w	r2, [r3, #319]	@ 0x13f
 800e196:	4b07      	ldr	r3, [pc, #28]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e198:	f883 23fd 	strb.w	r2, [r3, #1021]	@ 0x3fd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e19c:	4b05      	ldr	r3, [pc, #20]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f883 23fe 	strb.w	r2, [r3, #1022]	@ 0x3fe
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e1a4:	4b03      	ldr	r3, [pc, #12]	@ (800e1b4 <ResetMacParameters+0x1ac>)
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 23ff 	strb.w	r2, [r3, #1023]	@ 0x3ff
}
 800e1ac:	bf00      	nop
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	200014d0 	.word	0x200014d0

0800e1b8 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f009 fb7a 	bl	80178bc <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800e1c8:	4b10      	ldr	r3, [pc, #64]	@ (800e20c <RxWindowSetup+0x54>)
 800e1ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1cc:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800e1ce:	4b10      	ldr	r3, [pc, #64]	@ (800e210 <RxWindowSetup+0x58>)
 800e1d0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	4a0f      	ldr	r2, [pc, #60]	@ (800e214 <RxWindowSetup+0x5c>)
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f004 fedd 	bl	8012f9a <RegionRxConfig>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00d      	beq.n	800e202 <RxWindowSetup+0x4a>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800e1e6:	4b09      	ldr	r3, [pc, #36]	@ (800e20c <RxWindowSetup+0x54>)
 800e1e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1ea:	4a09      	ldr	r2, [pc, #36]	@ (800e210 <RxWindowSetup+0x58>)
 800e1ec:	f8d2 24c8 	ldr.w	r2, [r2, #1224]	@ 0x4c8
 800e1f0:	f8d2 2104 	ldr.w	r2, [r2, #260]	@ 0x104
 800e1f4:	4610      	mov	r0, r2
 800e1f6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	7cda      	ldrb	r2, [r3, #19]
 800e1fc:	4b04      	ldr	r3, [pc, #16]	@ (800e210 <RxWindowSetup+0x58>)
 800e1fe:	f883 24c4 	strb.w	r2, [r3, #1220]	@ 0x4c4
    }
}
 800e202:	bf00      	nop
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	0802113c 	.word	0x0802113c
 800e210:	200014d0 	.word	0x200014d0
 800e214:	2000191c 	.word	0x2000191c

0800e218 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	af00      	add	r7, sp, #0
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e21c:	4b0f      	ldr	r3, [pc, #60]	@ (800e25c <OpenContinuousRxCWindow+0x44>)
 800e21e:	2202      	movs	r2, #2
 800e220:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800e224:	4b0d      	ldr	r3, [pc, #52]	@ (800e25c <OpenContinuousRxCWindow+0x44>)
 800e226:	2201      	movs	r2, #1
 800e228:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800e22c:	4b0b      	ldr	r3, [pc, #44]	@ (800e25c <OpenContinuousRxCWindow+0x44>)
 800e22e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	4a0a      	ldr	r2, [pc, #40]	@ (800e260 <OpenContinuousRxCWindow+0x48>)
 800e236:	490b      	ldr	r1, [pc, #44]	@ (800e264 <OpenContinuousRxCWindow+0x4c>)
 800e238:	4618      	mov	r0, r3
 800e23a:	f004 feae 	bl	8012f9a <RegionRxConfig>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d009      	beq.n	800e258 <OpenContinuousRxCWindow+0x40>
    {
        Radio.Rx( 0 ); // Continuous mode
 800e244:	4b08      	ldr	r3, [pc, #32]	@ (800e268 <OpenContinuousRxCWindow+0x50>)
 800e246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e248:	2000      	movs	r0, #0
 800e24a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800e24c:	4b03      	ldr	r3, [pc, #12]	@ (800e25c <OpenContinuousRxCWindow+0x44>)
 800e24e:	f893 2413 	ldrb.w	r2, [r3, #1043]	@ 0x413
 800e252:	4b02      	ldr	r3, [pc, #8]	@ (800e25c <OpenContinuousRxCWindow+0x44>)
 800e254:	f883 24c4 	strb.w	r2, [r3, #1220]	@ 0x4c4
    }
}
 800e258:	bf00      	nop
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	200014d0 	.word	0x200014d0
 800e260:	2000191c 	.word	0x2000191c
 800e264:	200018d0 	.word	0x200018d0
 800e268:	0802113c 	.word	0x0802113c

0800e26c <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	603b      	str	r3, [r7, #0]
 800e278:	4613      	mov	r3, r2
 800e27a:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800e27c:	4b89      	ldr	r3, [pc, #548]	@ (800e4a4 <PrepareFrame+0x238>)
 800e27e:	2200      	movs	r2, #0
 800e280:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800e282:	4b88      	ldr	r3, [pc, #544]	@ (800e4a4 <PrepareFrame+0x238>)
 800e284:	2200      	movs	r2, #0
 800e286:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
    uint32_t fCntUp = 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800e28e:	2300      	movs	r3, #0
 800e290:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d101      	bne.n	800e2a0 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800e29c:	2300      	movs	r3, #0
 800e29e:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800e2a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	6839      	ldr	r1, [r7, #0]
 800e2a6:	4880      	ldr	r0, [pc, #512]	@ (800e4a8 <PrepareFrame+0x23c>)
 800e2a8:	f00a f82d 	bl	8018306 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800e2ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e2ae:	b2da      	uxtb	r2, r3
 800e2b0:	4b7c      	ldr	r3, [pc, #496]	@ (800e4a4 <PrepareFrame+0x238>)
 800e2b2:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	781a      	ldrb	r2, [r3, #0]
 800e2ba:	4b7a      	ldr	r3, [pc, #488]	@ (800e4a4 <PrepareFrame+0x238>)
 800e2bc:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b07      	cmp	r3, #7
 800e2ca:	f000 80c9 	beq.w	800e460 <PrepareFrame+0x1f4>
 800e2ce:	2b07      	cmp	r3, #7
 800e2d0:	f300 80de 	bgt.w	800e490 <PrepareFrame+0x224>
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d006      	beq.n	800e2e6 <PrepareFrame+0x7a>
 800e2d8:	2b04      	cmp	r3, #4
 800e2da:	f040 80d9 	bne.w	800e490 <PrepareFrame+0x224>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800e2de:	4b71      	ldr	r3, [pc, #452]	@ (800e4a4 <PrepareFrame+0x238>)
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800e2e6:	4b6f      	ldr	r3, [pc, #444]	@ (800e4a4 <PrepareFrame+0x238>)
 800e2e8:	2204      	movs	r2, #4
 800e2ea:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800e2ee:	4b6d      	ldr	r3, [pc, #436]	@ (800e4a4 <PrepareFrame+0x238>)
 800e2f0:	4a6e      	ldr	r2, [pc, #440]	@ (800e4ac <PrepareFrame+0x240>)
 800e2f2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800e2f6:	4b6b      	ldr	r3, [pc, #428]	@ (800e4a4 <PrepareFrame+0x238>)
 800e2f8:	22ff      	movs	r2, #255	@ 0xff
 800e2fa:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	781a      	ldrb	r2, [r3, #0]
 800e302:	4b68      	ldr	r3, [pc, #416]	@ (800e4a4 <PrepareFrame+0x238>)
 800e304:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800e308:	4a66      	ldr	r2, [pc, #408]	@ (800e4a4 <PrepareFrame+0x238>)
 800e30a:	79fb      	ldrb	r3, [r7, #7]
 800e30c:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800e310:	4b64      	ldr	r3, [pc, #400]	@ (800e4a4 <PrepareFrame+0x238>)
 800e312:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e318:	4a62      	ldr	r2, [pc, #392]	@ (800e4a4 <PrepareFrame+0x238>)
 800e31a:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	781a      	ldrb	r2, [r3, #0]
 800e322:	4b60      	ldr	r3, [pc, #384]	@ (800e4a4 <PrepareFrame+0x238>)
 800e324:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800e328:	4b5e      	ldr	r3, [pc, #376]	@ (800e4a4 <PrepareFrame+0x238>)
 800e32a:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 800e32e:	4b5d      	ldr	r3, [pc, #372]	@ (800e4a4 <PrepareFrame+0x238>)
 800e330:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800e334:	4b5b      	ldr	r3, [pc, #364]	@ (800e4a4 <PrepareFrame+0x238>)
 800e336:	4a5c      	ldr	r2, [pc, #368]	@ (800e4a8 <PrepareFrame+0x23c>)
 800e338:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800e33c:	f107 0318 	add.w	r3, r7, #24
 800e340:	4618      	mov	r0, r3
 800e342:	f003 fd0d 	bl	8011d60 <LoRaMacCryptoGetFCntUp>
 800e346:	4603      	mov	r3, r0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d001      	beq.n	800e350 <PrepareFrame+0xe4>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e34c:	2312      	movs	r3, #18
 800e34e:	e0a5      	b.n	800e49c <PrepareFrame+0x230>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	b29a      	uxth	r2, r3
 800e354:	4b53      	ldr	r3, [pc, #332]	@ (800e4a4 <PrepareFrame+0x238>)
 800e356:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800e35a:	4b52      	ldr	r3, [pc, #328]	@ (800e4a4 <PrepareFrame+0x238>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 246d 	strb.w	r2, [r3, #1133]	@ 0x46d
            MacCtx.McpsConfirm.AckReceived = false;
 800e362:	4b50      	ldr	r3, [pc, #320]	@ (800e4a4 <PrepareFrame+0x238>)
 800e364:	2200      	movs	r2, #0
 800e366:	f883 246c 	strb.w	r2, [r3, #1132]	@ 0x46c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	4a4d      	ldr	r2, [pc, #308]	@ (800e4a4 <PrepareFrame+0x238>)
 800e36e:	f8c2 3478 	str.w	r3, [r2, #1144]	@ 0x478

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e372:	f107 0314 	add.w	r3, r7, #20
 800e376:	4618      	mov	r0, r3
 800e378:	f002 fea2 	bl	80110c0 <LoRaMacCommandsGetSizeSerializedCmds>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <PrepareFrame+0x11a>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e382:	2313      	movs	r3, #19
 800e384:	e08a      	b.n	800e49c <PrepareFrame+0x230>
            }

            if( macCmdsSize > 0 )
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f000 8083 	beq.w	800e494 <PrepareFrame+0x228>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800e38e:	4b45      	ldr	r3, [pc, #276]	@ (800e4a4 <PrepareFrame+0x238>)
 800e390:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e394:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800e398:	4618      	mov	r0, r3
 800e39a:	f7fe fd99 	bl	800ced0 <GetMaxAppPayloadWithoutFOptsLength>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e3a2:	4b40      	ldr	r3, [pc, #256]	@ (800e4a4 <PrepareFrame+0x238>)
 800e3a4:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d01d      	beq.n	800e3e8 <PrepareFrame+0x17c>
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	2b0f      	cmp	r3, #15
 800e3b0:	d81a      	bhi.n	800e3e8 <PrepareFrame+0x17c>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800e3b2:	f107 0314 	add.w	r3, r7, #20
 800e3b6:	4a3e      	ldr	r2, [pc, #248]	@ (800e4b0 <PrepareFrame+0x244>)
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	200f      	movs	r0, #15
 800e3bc:	f002 fe98 	bl	80110f0 <LoRaMacCommandsSerializeCmds>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d001      	beq.n	800e3ca <PrepareFrame+0x15e>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e3c6:	2313      	movs	r3, #19
 800e3c8:	e068      	b.n	800e49c <PrepareFrame+0x230>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	f003 030f 	and.w	r3, r3, #15
 800e3d0:	b2d9      	uxtb	r1, r3
 800e3d2:	68ba      	ldr	r2, [r7, #8]
 800e3d4:	7813      	ldrb	r3, [r2, #0]
 800e3d6:	f361 0303 	bfi	r3, r1, #0, #4
 800e3da:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	781a      	ldrb	r2, [r3, #0]
 800e3e0:	4b30      	ldr	r3, [pc, #192]	@ (800e4a4 <PrepareFrame+0x238>)
 800e3e2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800e3e6:	e055      	b.n	800e494 <PrepareFrame+0x228>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e3e8:	4b2e      	ldr	r3, [pc, #184]	@ (800e4a4 <PrepareFrame+0x238>)
 800e3ea:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d014      	beq.n	800e41c <PrepareFrame+0x1b0>
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	2b0f      	cmp	r3, #15
 800e3f6:	d911      	bls.n	800e41c <PrepareFrame+0x1b0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e3f8:	7ff8      	ldrb	r0, [r7, #31]
 800e3fa:	4b2a      	ldr	r3, [pc, #168]	@ (800e4a4 <PrepareFrame+0x238>)
 800e3fc:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e400:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 800e404:	f107 0314 	add.w	r3, r7, #20
 800e408:	4619      	mov	r1, r3
 800e40a:	f002 fe71 	bl	80110f0 <LoRaMacCommandsSerializeCmds>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d001      	beq.n	800e418 <PrepareFrame+0x1ac>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e414:	2313      	movs	r3, #19
 800e416:	e041      	b.n	800e49c <PrepareFrame+0x230>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800e418:	230a      	movs	r3, #10
 800e41a:	e03f      	b.n	800e49c <PrepareFrame+0x230>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e41c:	7ff8      	ldrb	r0, [r7, #31]
 800e41e:	4b21      	ldr	r3, [pc, #132]	@ (800e4a4 <PrepareFrame+0x238>)
 800e420:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e424:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 800e428:	f107 0314 	add.w	r3, r7, #20
 800e42c:	4619      	mov	r1, r3
 800e42e:	f002 fe5f 	bl	80110f0 <LoRaMacCommandsSerializeCmds>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <PrepareFrame+0x1d0>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e438:	2313      	movs	r3, #19
 800e43a:	e02f      	b.n	800e49c <PrepareFrame+0x230>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800e43c:	4b19      	ldr	r3, [pc, #100]	@ (800e4a4 <PrepareFrame+0x238>)
 800e43e:	2200      	movs	r2, #0
 800e440:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800e444:	4b17      	ldr	r3, [pc, #92]	@ (800e4a4 <PrepareFrame+0x238>)
 800e446:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e44a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800e44e:	4a15      	ldr	r2, [pc, #84]	@ (800e4a4 <PrepareFrame+0x238>)
 800e450:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	b2da      	uxtb	r2, r3
 800e458:	4b12      	ldr	r3, [pc, #72]	@ (800e4a4 <PrepareFrame+0x238>)
 800e45a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 800e45e:	e019      	b.n	800e494 <PrepareFrame+0x228>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d018      	beq.n	800e498 <PrepareFrame+0x22c>
 800e466:	4b0f      	ldr	r3, [pc, #60]	@ (800e4a4 <PrepareFrame+0x238>)
 800e468:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d013      	beq.n	800e498 <PrepareFrame+0x22c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800e470:	4810      	ldr	r0, [pc, #64]	@ (800e4b4 <PrepareFrame+0x248>)
 800e472:	4b0c      	ldr	r3, [pc, #48]	@ (800e4a4 <PrepareFrame+0x238>)
 800e474:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e478:	461a      	mov	r2, r3
 800e47a:	6839      	ldr	r1, [r7, #0]
 800e47c:	f009 ff43 	bl	8018306 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800e480:	4b08      	ldr	r3, [pc, #32]	@ (800e4a4 <PrepareFrame+0x238>)
 800e482:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e486:	3301      	adds	r3, #1
 800e488:	b29a      	uxth	r2, r3
 800e48a:	4b06      	ldr	r3, [pc, #24]	@ (800e4a4 <PrepareFrame+0x238>)
 800e48c:	801a      	strh	r2, [r3, #0]
            }
            break;
 800e48e:	e003      	b.n	800e498 <PrepareFrame+0x22c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e490:	2302      	movs	r3, #2
 800e492:	e003      	b.n	800e49c <PrepareFrame+0x230>
            break;
 800e494:	bf00      	nop
 800e496:	e000      	b.n	800e49a <PrepareFrame+0x22e>
            break;
 800e498:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800e49a:	2300      	movs	r3, #0
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3720      	adds	r7, #32
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	200014d0 	.word	0x200014d0
 800e4a8:	20001608 	.word	0x20001608
 800e4ac:	200014d2 	.word	0x200014d2
 800e4b0:	200015e8 	.word	0x200015e8
 800e4b4:	200014d3 	.word	0x200014d3

0800e4b8 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b08a      	sub	sp, #40	@ 0x28
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	4603      	mov	r3, r0
 800e4c0:	71fb      	strb	r3, [r7, #7]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800e4c6:	79fb      	ldrb	r3, [r7, #7]
 800e4c8:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800e4ca:	4b55      	ldr	r3, [pc, #340]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e4cc:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e4d0:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800e4d4:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800e4d6:	4b52      	ldr	r3, [pc, #328]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e4d8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e4dc:	f993 30f8 	ldrsb.w	r3, [r3, #248]	@ 0xf8
 800e4e0:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800e4e2:	4b4f      	ldr	r3, [pc, #316]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e4e4:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e4e8:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800e4ec:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800e4ee:	4b4c      	ldr	r3, [pc, #304]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e4f0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e4f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800e4f8:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800e4fa:	4b49      	ldr	r3, [pc, #292]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e4fc:	881b      	ldrh	r3, [r3, #0]
 800e4fe:	83bb      	strh	r3, [r7, #28]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e500:	f002 fafb 	bl	8010afa <LoRaMacClassBIsBeaconExpected>
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <SendFrameOnChannel+0x56>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800e50a:	230e      	movs	r3, #14
 800e50c:	e084      	b.n	800e618 <SendFrameOnChannel+0x160>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800e50e:	4b44      	ldr	r3, [pc, #272]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e510:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e514:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d10f      	bne.n	800e53c <SendFrameOnChannel+0x84>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e51c:	f002 faf5 	bl	8010b0a <LoRaMacClassBIsPingExpected>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <SendFrameOnChannel+0x72>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800e526:	230f      	movs	r3, #15
 800e528:	e076      	b.n	800e618 <SendFrameOnChannel+0x160>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e52a:	f002 faf6 	bl	8010b1a <LoRaMacClassBIsMulticastExpected>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d001      	beq.n	800e538 <SendFrameOnChannel+0x80>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800e534:	230f      	movs	r3, #15
 800e536:	e06f      	b.n	800e618 <SendFrameOnChannel+0x160>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 800e538:	f002 fb7f 	bl	8010c3a <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800e53c:	4b38      	ldr	r3, [pc, #224]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e53e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e542:	7818      	ldrb	r0, [r3, #0]
 800e544:	f107 020f 	add.w	r2, r7, #15
 800e548:	f107 0110 	add.w	r1, r7, #16
 800e54c:	4b35      	ldr	r3, [pc, #212]	@ (800e624 <SendFrameOnChannel+0x16c>)
 800e54e:	f004 fd39 	bl	8012fc4 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e552:	4b33      	ldr	r3, [pc, #204]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e554:	2201      	movs	r2, #1
 800e556:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800e55a:	4b31      	ldr	r3, [pc, #196]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e55c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e560:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800e564:	b2da      	uxtb	r2, r3
 800e566:	4b2e      	ldr	r3, [pc, #184]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e568:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
    MacCtx.McpsConfirm.TxPower = txPower;
 800e56c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800e570:	4b2b      	ldr	r3, [pc, #172]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e572:	f883 246b 	strb.w	r2, [r3, #1131]	@ 0x46b
    MacCtx.McpsConfirm.Channel = channel;
 800e576:	79fb      	ldrb	r3, [r7, #7]
 800e578:	4a29      	ldr	r2, [pc, #164]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e57a:	f8c2 347c 	str.w	r3, [r2, #1148]	@ 0x47c

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800e57e:	4b28      	ldr	r3, [pc, #160]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e580:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e588:	4925      	ldr	r1, [pc, #148]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e58a:	f501 618e 	add.w	r1, r1, #1136	@ 0x470
 800e58e:	e9c1 2300 	strd	r2, r3, [r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800e592:	4b23      	ldr	r3, [pc, #140]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e594:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	4920      	ldr	r1, [pc, #128]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e59e:	f501 6192 	add.w	r1, r1, #1168	@ 0x490
 800e5a2:	e941 2302 	strd	r2, r3, [r1, #-8]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800e5a6:	f002 fac0 	bl	8010b2a <LoRaMacClassBIsBeaconModeActive>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d010      	beq.n	800e5d2 <SendFrameOnChannel+0x11a>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800e5b0:	4b1b      	ldr	r3, [pc, #108]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e5b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ba:	4610      	mov	r0, r2
 800e5bc:	4619      	mov	r1, r3
 800e5be:	f002 fb2c 	bl	8010c1a <LoRaMacClassBIsUplinkCollision>
 800e5c2:	e9c7 0108 	strd	r0, r1, [r7, #32]

        if( collisionTime > 0 )
 800e5c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	d001      	beq.n	800e5d2 <SendFrameOnChannel+0x11a>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800e5ce:	2310      	movs	r3, #16
 800e5d0:	e022      	b.n	800e618 <SendFrameOnChannel+0x160>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 800e5d2:	f002 fabd 	bl	8010b50 <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e5d6:	4b12      	ldr	r3, [pc, #72]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e5d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e5dc:	f043 0302 	orr.w	r3, r3, #2
 800e5e0:	4a0f      	ldr	r2, [pc, #60]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e5e2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
 800e5e6:	4b0e      	ldr	r3, [pc, #56]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e5e8:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800e5ec:	f083 0301 	eor.w	r3, r3, #1
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d007      	beq.n	800e606 <SendFrameOnChannel+0x14e>
    {
        MacCtx.ChannelsNbTransCounter++;
 800e5f6:	4b0a      	ldr	r3, [pc, #40]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e5f8:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	b2da      	uxtb	r2, r3
 800e600:	4b07      	ldr	r3, [pc, #28]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e602:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800e606:	4b08      	ldr	r3, [pc, #32]	@ (800e628 <SendFrameOnChannel+0x170>)
 800e608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e60a:	4a05      	ldr	r2, [pc, #20]	@ (800e620 <SendFrameOnChannel+0x168>)
 800e60c:	8812      	ldrh	r2, [r2, #0]
 800e60e:	b2d2      	uxtb	r2, r2
 800e610:	4611      	mov	r1, r2
 800e612:	4806      	ldr	r0, [pc, #24]	@ (800e62c <SendFrameOnChannel+0x174>)
 800e614:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3728      	adds	r7, #40	@ 0x28
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	200014d0 	.word	0x200014d0
 800e624:	20001910 	.word	0x20001910
 800e628:	0802113c 	.word	0x0802113c
 800e62c:	200014d2 	.word	0x200014d2

0800e630 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b086      	sub	sp, #24
 800e634:	af00      	add	r7, sp, #0
 800e636:	4603      	mov	r3, r0
 800e638:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800e63a:	4b1a      	ldr	r3, [pc, #104]	@ (800e6a4 <SetTxContinuousWave+0x74>)
 800e63c:	f893 343d 	ldrb.w	r3, [r3, #1085]	@ 0x43d
 800e640:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800e642:	4b18      	ldr	r3, [pc, #96]	@ (800e6a4 <SetTxContinuousWave+0x74>)
 800e644:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e648:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800e64c:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800e64e:	4b15      	ldr	r3, [pc, #84]	@ (800e6a4 <SetTxContinuousWave+0x74>)
 800e650:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e654:	f993 30f8 	ldrsb.w	r3, [r3, #248]	@ 0xf8
 800e658:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800e65a:	4b12      	ldr	r3, [pc, #72]	@ (800e6a4 <SetTxContinuousWave+0x74>)
 800e65c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e660:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800e664:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800e666:	4b0f      	ldr	r3, [pc, #60]	@ (800e6a4 <SetTxContinuousWave+0x74>)
 800e668:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e66c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800e670:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800e672:	88fb      	ldrh	r3, [r7, #6]
 800e674:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800e676:	4b0b      	ldr	r3, [pc, #44]	@ (800e6a4 <SetTxContinuousWave+0x74>)
 800e678:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	f107 0208 	add.w	r2, r7, #8
 800e682:	4611      	mov	r1, r2
 800e684:	4618      	mov	r0, r3
 800e686:	f004 fd5e 	bl	8013146 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e68a:	4b06      	ldr	r3, [pc, #24]	@ (800e6a4 <SetTxContinuousWave+0x74>)
 800e68c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e690:	f043 0302 	orr.w	r3, r3, #2
 800e694:	4a03      	ldr	r2, [pc, #12]	@ (800e6a4 <SetTxContinuousWave+0x74>)
 800e696:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3718      	adds	r7, #24
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	200014d0 	.word	0x200014d0

0800e6a8 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	6039      	str	r1, [r7, #0]
 800e6b2:	80fb      	strh	r3, [r7, #6]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800e6b8:	4b09      	ldr	r3, [pc, #36]	@ (800e6e0 <SetTxContinuousWave1+0x38>)
 800e6ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6bc:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800e6c0:	88fa      	ldrh	r2, [r7, #6]
 800e6c2:	6838      	ldr	r0, [r7, #0]
 800e6c4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e6c6:	4b07      	ldr	r3, [pc, #28]	@ (800e6e4 <SetTxContinuousWave1+0x3c>)
 800e6c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e6cc:	f043 0302 	orr.w	r3, r3, #2
 800e6d0:	4a04      	ldr	r2, [pc, #16]	@ (800e6e4 <SetTxContinuousWave1+0x3c>)
 800e6d2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800e6d6:	2300      	movs	r3, #0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	0802113c 	.word	0x0802113c
 800e6e4:	200014d0 	.word	0x200014d0

0800e6e8 <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 800e6ee:	4b1d      	ldr	r3, [pc, #116]	@ (800e764 <GetCtxs+0x7c>)
 800e6f0:	4a1d      	ldr	r2, [pc, #116]	@ (800e768 <GetCtxs+0x80>)
 800e6f2:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800e6f4:	4b1b      	ldr	r3, [pc, #108]	@ (800e764 <GetCtxs+0x7c>)
 800e6f6:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 800e6fa:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800e6fc:	481b      	ldr	r0, [pc, #108]	@ (800e76c <GetCtxs+0x84>)
 800e6fe:	f003 fb1f 	bl	8011d40 <LoRaMacCryptoGetNvmCtx>
 800e702:	4603      	mov	r3, r0
 800e704:	4a17      	ldr	r2, [pc, #92]	@ (800e764 <GetCtxs+0x7c>)
 800e706:	6113      	str	r3, [r2, #16]
    GetNvmCtxParams_t params ={ 0 };
 800e708:	2300      	movs	r3, #0
 800e70a:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800e70c:	4b18      	ldr	r3, [pc, #96]	@ (800e770 <GetCtxs+0x88>)
 800e70e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	1d3a      	adds	r2, r7, #4
 800e716:	4611      	mov	r1, r2
 800e718:	4618      	mov	r0, r3
 800e71a:	f004 fbd5 	bl	8012ec8 <RegionGetNvmCtx>
 800e71e:	4603      	mov	r3, r0
 800e720:	4a10      	ldr	r2, [pc, #64]	@ (800e764 <GetCtxs+0x7c>)
 800e722:	6093      	str	r3, [r2, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	4a0f      	ldr	r2, [pc, #60]	@ (800e764 <GetCtxs+0x7c>)
 800e728:	60d3      	str	r3, [r2, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800e72a:	4812      	ldr	r0, [pc, #72]	@ (800e774 <GetCtxs+0x8c>)
 800e72c:	f7f9 fc9e 	bl	800806c <SecureElementGetNvmCtx>
 800e730:	4603      	mov	r3, r0
 800e732:	4a0c      	ldr	r2, [pc, #48]	@ (800e764 <GetCtxs+0x7c>)
 800e734:	6193      	str	r3, [r2, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800e736:	4810      	ldr	r0, [pc, #64]	@ (800e778 <GetCtxs+0x90>)
 800e738:	f002 fbec 	bl	8010f14 <LoRaMacCommandsGetNvmCtx>
 800e73c:	4603      	mov	r3, r0
 800e73e:	4a09      	ldr	r2, [pc, #36]	@ (800e764 <GetCtxs+0x7c>)
 800e740:	6213      	str	r3, [r2, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800e742:	480e      	ldr	r0, [pc, #56]	@ (800e77c <GetCtxs+0x94>)
 800e744:	f002 f977 	bl	8010a36 <LoRaMacClassBGetNvmCtx>
 800e748:	4603      	mov	r3, r0
 800e74a:	4a06      	ldr	r2, [pc, #24]	@ (800e764 <GetCtxs+0x7c>)
 800e74c:	6293      	str	r3, [r2, #40]	@ 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800e74e:	480c      	ldr	r0, [pc, #48]	@ (800e780 <GetCtxs+0x98>)
 800e750:	f002 fdba 	bl	80112c8 <LoRaMacConfirmQueueGetNvmCtx>
 800e754:	4603      	mov	r3, r0
 800e756:	4a03      	ldr	r2, [pc, #12]	@ (800e764 <GetCtxs+0x7c>)
 800e758:	6313      	str	r3, [r2, #48]	@ 0x30
    return &Contexts;
 800e75a:	4b02      	ldr	r3, [pc, #8]	@ (800e764 <GetCtxs+0x7c>)
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3708      	adds	r7, #8
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	20001b90 	.word	0x20001b90
 800e768:	200019a0 	.word	0x200019a0
 800e76c:	20001ba4 	.word	0x20001ba4
 800e770:	200014d0 	.word	0x200014d0
 800e774:	20001bac 	.word	0x20001bac
 800e778:	20001bb4 	.word	0x20001bb4
 800e77c:	20001bbc 	.word	0x20001bbc
 800e780:	20001bc4 	.word	0x20001bc4

0800e784 <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d101      	bne.n	800e796 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e792:	2303      	movs	r3, #3
 800e794:	e05b      	b.n	800e84e <RestoreCtxs+0xca>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800e796:	4b30      	ldr	r3, [pc, #192]	@ (800e858 <RestoreCtxs+0xd4>)
 800e798:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d001      	beq.n	800e7a4 <RestoreCtxs+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	e054      	b.n	800e84e <RestoreCtxs+0xca>
    }

    if( contexts->MacNvmCtx != NULL )
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d008      	beq.n	800e7be <RestoreCtxs+0x3a>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6819      	ldr	r1, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	4828      	ldr	r0, [pc, #160]	@ (800e85c <RestoreCtxs+0xd8>)
 800e7ba:	f009 fda4 	bl	8018306 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 800e7be:	2302      	movs	r3, #2
 800e7c0:	733b      	strb	r3, [r7, #12]
    params.NvmCtx = contexts->RegionNvmCtx;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	689b      	ldr	r3, [r3, #8]
 800e7c6:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800e7c8:	4b23      	ldr	r3, [pc, #140]	@ (800e858 <RestoreCtxs+0xd4>)
 800e7ca:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	f107 0208 	add.w	r2, r7, #8
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f004 fb64 	bl	8012ea4 <RegionInitDefaults>

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	699b      	ldr	r3, [r3, #24]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7f9 fc2d 	bl	8008040 <SecureElementRestoreNvmCtx>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d001      	beq.n	800e7f0 <RestoreCtxs+0x6c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e7ec:	2311      	movs	r3, #17
 800e7ee:	e02e      	b.n	800e84e <RestoreCtxs+0xca>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	691b      	ldr	r3, [r3, #16]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f003 fa8d 	bl	8011d14 <LoRaMacCryptoRestoreNvmCtx>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <RestoreCtxs+0x80>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e800:	2311      	movs	r3, #17
 800e802:	e024      	b.n	800e84e <RestoreCtxs+0xca>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6a1b      	ldr	r3, [r3, #32]
 800e808:	4618      	mov	r0, r3
 800e80a:	f002 fb6d 	bl	8010ee8 <LoRaMacCommandsRestoreNvmCtx>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d001      	beq.n	800e818 <RestoreCtxs+0x94>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e814:	2313      	movs	r3, #19
 800e816:	e01a      	b.n	800e84e <RestoreCtxs+0xca>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e81c:	4618      	mov	r0, r3
 800e81e:	f002 f8ff 	bl	8010a20 <LoRaMacClassBRestoreNvmCtx>
 800e822:	4603      	mov	r3, r0
 800e824:	f083 0301 	eor.w	r3, r3, #1
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d001      	beq.n	800e832 <RestoreCtxs+0xae>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 800e82e:	2314      	movs	r3, #20
 800e830:	e00d      	b.n	800e84e <RestoreCtxs+0xca>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e836:	4618      	mov	r0, r3
 800e838:	f002 fd30 	bl	801129c <LoRaMacConfirmQueueRestoreNvmCtx>
 800e83c:	4603      	mov	r3, r0
 800e83e:	f083 0301 	eor.w	r3, r3, #1
 800e842:	b2db      	uxtb	r3, r3
 800e844:	2b00      	cmp	r3, #0
 800e846:	d001      	beq.n	800e84c <RestoreCtxs+0xc8>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800e848:	2315      	movs	r3, #21
 800e84a:	e000      	b.n	800e84e <RestoreCtxs+0xca>
    }

    return LORAMAC_STATUS_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	200014d0 	.word	0x200014d0
 800e85c:	200019a0 	.word	0x200019a0

0800e860 <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <DetermineFrameType+0x16>
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d101      	bne.n	800e87a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e876:	2303      	movs	r3, #3
 800e878:	e03b      	b.n	800e8f2 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	7b1b      	ldrb	r3, [r3, #12]
 800e87e:	f003 030f 	and.w	r3, r3, #15
 800e882:	b2db      	uxtb	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	d008      	beq.n	800e89a <DetermineFrameType+0x3a>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d003      	beq.n	800e89a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	2200      	movs	r2, #0
 800e896:	701a      	strb	r2, [r3, #0]
 800e898:	e02a      	b.n	800e8f0 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d103      	bne.n	800e8ac <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	701a      	strb	r2, [r3, #0]
 800e8aa:	e021      	b.n	800e8f0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	7b1b      	ldrb	r3, [r3, #12]
 800e8b0:	f003 030f 	and.w	r3, r3, #15
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d108      	bne.n	800e8cc <DetermineFrameType+0x6c>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d103      	bne.n	800e8cc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	2202      	movs	r2, #2
 800e8c8:	701a      	strb	r2, [r3, #0]
 800e8ca:	e011      	b.n	800e8f0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	7b1b      	ldrb	r3, [r3, #12]
 800e8d0:	f003 030f 	and.w	r3, r3, #15
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d108      	bne.n	800e8ec <DetermineFrameType+0x8c>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d003      	beq.n	800e8ec <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	2203      	movs	r2, #3
 800e8e8:	701a      	strb	r2, [r3, #0]
 800e8ea:	e001      	b.n	800e8f0 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800e8ec:	2317      	movs	r3, #23
 800e8ee:	e000      	b.n	800e8f2 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
	...

0800e900 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800e900:	b480      	push	{r7}
 800e902:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800e904:	4b14      	ldr	r3, [pc, #80]	@ (800e958 <CheckRetransUnconfirmedUplink+0x58>)
 800e906:	f893 2438 	ldrb.w	r2, [r3, #1080]	@ 0x438
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800e90a:	4b13      	ldr	r3, [pc, #76]	@ (800e958 <CheckRetransUnconfirmedUplink+0x58>)
 800e90c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e910:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( MacCtx.ChannelsNbTransCounter >=
 800e914:	429a      	cmp	r2, r3
 800e916:	d301      	bcc.n	800e91c <CheckRetransUnconfirmedUplink+0x1c>
    {
        return true;
 800e918:	2301      	movs	r3, #1
 800e91a:	e018      	b.n	800e94e <CheckRetransUnconfirmedUplink+0x4e>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e91c:	4b0e      	ldr	r3, [pc, #56]	@ (800e958 <CheckRetransUnconfirmedUplink+0x58>)
 800e91e:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800e922:	f003 0302 	and.w	r3, r3, #2
 800e926:	b2db      	uxtb	r3, r3
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00f      	beq.n	800e94c <CheckRetransUnconfirmedUplink+0x4c>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800e92c:	4b0a      	ldr	r3, [pc, #40]	@ (800e958 <CheckRetransUnconfirmedUplink+0x58>)
 800e92e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e932:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d101      	bne.n	800e93e <CheckRetransUnconfirmedUplink+0x3e>
        {
            return true;
 800e93a:	2301      	movs	r3, #1
 800e93c:	e007      	b.n	800e94e <CheckRetransUnconfirmedUplink+0x4e>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 800e93e:	4b06      	ldr	r3, [pc, #24]	@ (800e958 <CheckRetransUnconfirmedUplink+0x58>)
 800e940:	f893 3459 	ldrb.w	r3, [r3, #1113]	@ 0x459
 800e944:	2b00      	cmp	r3, #0
 800e946:	d101      	bne.n	800e94c <CheckRetransUnconfirmedUplink+0x4c>
            {
                return true;
 800e948:	2301      	movs	r3, #1
 800e94a:	e000      	b.n	800e94e <CheckRetransUnconfirmedUplink+0x4e>
            }
        }
    }
    return false;
 800e94c:	2300      	movs	r3, #0
}
 800e94e:	4618      	mov	r0, r3
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	200014d0 	.word	0x200014d0

0800e95c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800e95c:	b480      	push	{r7}
 800e95e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800e960:	4b0f      	ldr	r3, [pc, #60]	@ (800e9a0 <CheckRetransConfirmedUplink+0x44>)
 800e962:	f893 243a 	ldrb.w	r2, [r3, #1082]	@ 0x43a
        MacCtx.AckTimeoutRetries )
 800e966:	4b0e      	ldr	r3, [pc, #56]	@ (800e9a0 <CheckRetransConfirmedUplink+0x44>)
 800e968:	f893 3439 	ldrb.w	r3, [r3, #1081]	@ 0x439
    if( MacCtx.AckTimeoutRetriesCounter >=
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d301      	bcc.n	800e974 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800e970:	2301      	movs	r3, #1
 800e972:	e00f      	b.n	800e994 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e974:	4b0a      	ldr	r3, [pc, #40]	@ (800e9a0 <CheckRetransConfirmedUplink+0x44>)
 800e976:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800e97a:	f003 0302 	and.w	r3, r3, #2
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	2b00      	cmp	r3, #0
 800e982:	d006      	beq.n	800e992 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e984:	4b06      	ldr	r3, [pc, #24]	@ (800e9a0 <CheckRetransConfirmedUplink+0x44>)
 800e986:	f893 346c 	ldrb.w	r3, [r3, #1132]	@ 0x46c
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 800e98e:	2301      	movs	r3, #1
 800e990:	e000      	b.n	800e994 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 800e992:	2300      	movs	r3, #0
}
 800e994:	4618      	mov	r0, r3
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	200014d0 	.word	0x200014d0

0800e9a4 <StopRetransmission>:

static bool StopRetransmission( void )
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800e9a8:	4b1d      	ldr	r3, [pc, #116]	@ (800ea20 <StopRetransmission+0x7c>)
 800e9aa:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800e9ae:	f003 0302 	and.w	r3, r3, #2
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d009      	beq.n	800e9cc <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 800e9b8:	4b19      	ldr	r3, [pc, #100]	@ (800ea20 <StopRetransmission+0x7c>)
 800e9ba:	f893 3459 	ldrb.w	r3, [r3, #1113]	@ 0x459
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d013      	beq.n	800e9ea <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 800e9c2:	4b17      	ldr	r3, [pc, #92]	@ (800ea20 <StopRetransmission+0x7c>)
 800e9c4:	f893 3459 	ldrb.w	r3, [r3, #1113]	@ 0x459
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d00e      	beq.n	800e9ea <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800e9cc:	4b14      	ldr	r3, [pc, #80]	@ (800ea20 <StopRetransmission+0x7c>)
 800e9ce:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e9d2:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d007      	beq.n	800e9ea <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 800e9da:	4b11      	ldr	r3, [pc, #68]	@ (800ea20 <StopRetransmission+0x7c>)
 800e9dc:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800e9e0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800e9e4:	3201      	adds	r2, #1
 800e9e6:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800e9ea:	4b0d      	ldr	r3, [pc, #52]	@ (800ea20 <StopRetransmission+0x7c>)
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.NodeAckRequested = false;
 800e9f2:	4b0b      	ldr	r3, [pc, #44]	@ (800ea20 <StopRetransmission+0x7c>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
    MacCtx.AckTimeoutRetry = false;
 800e9fa:	4b09      	ldr	r3, [pc, #36]	@ (800ea20 <StopRetransmission+0x7c>)
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	f883 243b 	strb.w	r2, [r3, #1083]	@ 0x43b
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ea02:	4b07      	ldr	r3, [pc, #28]	@ (800ea20 <StopRetransmission+0x7c>)
 800ea04:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ea08:	f023 0302 	bic.w	r3, r3, #2
 800ea0c:	4a04      	ldr	r2, [pc, #16]	@ (800ea20 <StopRetransmission+0x7c>)
 800ea0e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 800ea12:	2301      	movs	r3, #1
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop
 800ea20:	200014d0 	.word	0x200014d0

0800ea24 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800ea2a:	4b1e      	ldr	r3, [pc, #120]	@ (800eaa4 <AckTimeoutRetriesProcess+0x80>)
 800ea2c:	f893 243a 	ldrb.w	r2, [r3, #1082]	@ 0x43a
 800ea30:	4b1c      	ldr	r3, [pc, #112]	@ (800eaa4 <AckTimeoutRetriesProcess+0x80>)
 800ea32:	f893 3439 	ldrb.w	r3, [r3, #1081]	@ 0x439
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d22f      	bcs.n	800ea9a <AckTimeoutRetriesProcess+0x76>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 800ea3a:	4b1a      	ldr	r3, [pc, #104]	@ (800eaa4 <AckTimeoutRetriesProcess+0x80>)
 800ea3c:	f893 343a 	ldrb.w	r3, [r3, #1082]	@ 0x43a
 800ea40:	3301      	adds	r3, #1
 800ea42:	b2da      	uxtb	r2, r3
 800ea44:	4b17      	ldr	r3, [pc, #92]	@ (800eaa4 <AckTimeoutRetriesProcess+0x80>)
 800ea46:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800ea4a:	4b16      	ldr	r3, [pc, #88]	@ (800eaa4 <AckTimeoutRetriesProcess+0x80>)
 800ea4c:	f893 343a 	ldrb.w	r3, [r3, #1082]	@ 0x43a
 800ea50:	f003 0301 	and.w	r3, r3, #1
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d01f      	beq.n	800ea9a <AckTimeoutRetriesProcess+0x76>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800ea5a:	2322      	movs	r3, #34	@ 0x22
 800ea5c:	713b      	strb	r3, [r7, #4]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ea5e:	4b11      	ldr	r3, [pc, #68]	@ (800eaa4 <AckTimeoutRetriesProcess+0x80>)
 800ea60:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ea64:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800ea68:	71bb      	strb	r3, [r7, #6]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ea6a:	4b0e      	ldr	r3, [pc, #56]	@ (800eaa4 <AckTimeoutRetriesProcess+0x80>)
 800ea6c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ea70:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800ea74:	717b      	strb	r3, [r7, #5]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ea76:	4b0b      	ldr	r3, [pc, #44]	@ (800eaa4 <AckTimeoutRetriesProcess+0x80>)
 800ea78:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	1d3a      	adds	r2, r7, #4
 800ea80:	4611      	mov	r1, r2
 800ea82:	4618      	mov	r0, r3
 800ea84:	f004 f9e5 	bl	8012e52 <RegionGetPhyParam>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	603b      	str	r3, [r7, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800ea8c:	683a      	ldr	r2, [r7, #0]
 800ea8e:	4b05      	ldr	r3, [pc, #20]	@ (800eaa4 <AckTimeoutRetriesProcess+0x80>)
 800ea90:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ea94:	b252      	sxtb	r2, r2
 800ea96:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        }
    }
}
 800ea9a:	bf00      	nop
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	200014d0 	.word	0x200014d0

0800eaa8 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800eaae:	4b14      	ldr	r3, [pc, #80]	@ (800eb00 <AckTimeoutRetriesFinalize+0x58>)
 800eab0:	f893 346c 	ldrb.w	r3, [r3, #1132]	@ 0x46c
 800eab4:	f083 0301 	eor.w	r3, r3, #1
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d015      	beq.n	800eaea <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800eabe:	2301      	movs	r3, #1
 800eac0:	713b      	strb	r3, [r7, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800eac2:	4b10      	ldr	r3, [pc, #64]	@ (800eb04 <AckTimeoutRetriesFinalize+0x5c>)
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	603b      	str	r3, [r7, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800eac8:	4b0d      	ldr	r3, [pc, #52]	@ (800eb00 <AckTimeoutRetriesFinalize+0x58>)
 800eaca:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	463a      	mov	r2, r7
 800ead2:	4611      	mov	r1, r2
 800ead4:	4618      	mov	r0, r3
 800ead6:	f004 f9e5 	bl	8012ea4 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 800eada:	4b09      	ldr	r3, [pc, #36]	@ (800eb00 <AckTimeoutRetriesFinalize+0x58>)
 800eadc:	2200      	movs	r2, #0
 800eade:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
        MacCtx.McpsConfirm.AckReceived = false;
 800eae2:	4b07      	ldr	r3, [pc, #28]	@ (800eb00 <AckTimeoutRetriesFinalize+0x58>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	f883 246c 	strb.w	r2, [r3, #1132]	@ 0x46c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800eaea:	4b05      	ldr	r3, [pc, #20]	@ (800eb00 <AckTimeoutRetriesFinalize+0x58>)
 800eaec:	f893 243a 	ldrb.w	r2, [r3, #1082]	@ 0x43a
 800eaf0:	4b03      	ldr	r3, [pc, #12]	@ (800eb00 <AckTimeoutRetriesFinalize+0x58>)
 800eaf2:	f883 246d 	strb.w	r2, [r3, #1133]	@ 0x46d
}
 800eaf6:	bf00      	nop
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	200014d0 	.word	0x200014d0
 800eb04:	20001b90 	.word	0x20001b90

0800eb08 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	4603      	mov	r3, r0
 800eb10:	71fb      	strb	r3, [r7, #7]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 800eb12:	4b0b      	ldr	r3, [pc, #44]	@ (800eb40 <CallNvmCtxCallback+0x38>)
 800eb14:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00c      	beq.n	800eb36 <CallNvmCtxCallback+0x2e>
 800eb1c:	4b08      	ldr	r3, [pc, #32]	@ (800eb40 <CallNvmCtxCallback+0x38>)
 800eb1e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d006      	beq.n	800eb36 <CallNvmCtxCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 800eb28:	4b05      	ldr	r3, [pc, #20]	@ (800eb40 <CallNvmCtxCallback+0x38>)
 800eb2a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800eb2e:	689b      	ldr	r3, [r3, #8]
 800eb30:	79fa      	ldrb	r2, [r7, #7]
 800eb32:	4610      	mov	r0, r2
 800eb34:	4798      	blx	r3
    }
}
 800eb36:	bf00      	nop
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	200014d0 	.word	0x200014d0

0800eb44 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 800eb48:	2000      	movs	r0, #0
 800eb4a:	f7ff ffdd 	bl	800eb08 <CallNvmCtxCallback>
}
 800eb4e:	bf00      	nop
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 800eb56:	2001      	movs	r0, #1
 800eb58:	f7ff ffd6 	bl	800eb08 <CallNvmCtxCallback>
}
 800eb5c:	bf00      	nop
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800eb64:	2002      	movs	r0, #2
 800eb66:	f7ff ffcf 	bl	800eb08 <CallNvmCtxCallback>
}
 800eb6a:	bf00      	nop
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 800eb72:	2003      	movs	r0, #3
 800eb74:	f7ff ffc8 	bl	800eb08 <CallNvmCtxCallback>
}
 800eb78:	bf00      	nop
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 800eb80:	2004      	movs	r0, #4
 800eb82:	f7ff ffc1 	bl	800eb08 <CallNvmCtxCallback>
}
 800eb86:	bf00      	nop
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 800eb8e:	2005      	movs	r0, #5
 800eb90:	f7ff ffba 	bl	800eb08 <CallNvmCtxCallback>
}
 800eb94:	bf00      	nop
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 800eb9c:	2006      	movs	r0, #6
 800eb9e:	f7ff ffb3 	bl	800eb08 <CallNvmCtxCallback>
}
 800eba2:	bf00      	nop
 800eba4:	bd80      	pop	{r7, pc}
	...

0800eba8 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 800eba8:	b480      	push	{r7}
 800ebaa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800ebac:	4b0b      	ldr	r3, [pc, #44]	@ (800ebdc <IsRequestPending+0x34>)
 800ebae:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800ebb2:	f003 0304 	and.w	r3, r3, #4
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d107      	bne.n	800ebcc <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800ebbc:	4b07      	ldr	r3, [pc, #28]	@ (800ebdc <IsRequestPending+0x34>)
 800ebbe:	f893 34c5 	ldrb.w	r3, [r3, #1221]	@ 0x4c5
 800ebc2:	f003 0301 	and.w	r3, r3, #1
 800ebc6:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d001      	beq.n	800ebd0 <IsRequestPending+0x28>
    {
        return 1;
 800ebcc:	2301      	movs	r3, #1
 800ebce:	e000      	b.n	800ebd2 <IsRequestPending+0x2a>
    }
    return 0;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr
 800ebdc:	200014d0 	.word	0x200014d0

0800ebe0 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800ebe0:	b590      	push	{r4, r7, lr}
 800ebe2:	b09b      	sub	sp, #108	@ 0x6c
 800ebe4:	af04      	add	r7, sp, #16
 800ebe6:	6178      	str	r0, [r7, #20]
 800ebe8:	6139      	str	r1, [r7, #16]
 800ebea:	4613      	mov	r3, r2
 800ebec:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d002      	beq.n	800ebfa <LoRaMacInitialization+0x1a>
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d101      	bne.n	800ebfe <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ebfa:	2303      	movs	r3, #3
 800ebfc:	e351      	b.n	800f2a2 <LoRaMacInitialization+0x6c2>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00b      	beq.n	800ec1e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d007      	beq.n	800ec1e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d003      	beq.n	800ec1e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d101      	bne.n	800ec22 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ec1e:	2303      	movs	r3, #3
 800ec20:	e33f      	b.n	800f2a2 <LoRaMacInitialization+0x6c2>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800ec22:	7bfb      	ldrb	r3, [r7, #15]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f004 f903 	bl	8012e30 <RegionIsActive>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	f083 0301 	eor.w	r3, r3, #1
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d001      	beq.n	800ec3a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800ec36:	2309      	movs	r3, #9
 800ec38:	e333      	b.n	800f2a2 <LoRaMacInitialization+0x6c2>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800ec3a:	49c5      	ldr	r1, [pc, #788]	@ (800ef50 <LoRaMacInitialization+0x370>)
 800ec3c:	6978      	ldr	r0, [r7, #20]
 800ec3e:	f002 fafd 	bl	801123c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800ec42:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 800ec46:	2100      	movs	r1, #0
 800ec48:	48c2      	ldr	r0, [pc, #776]	@ (800ef54 <LoRaMacInitialization+0x374>)
 800ec4a:	f009 fb99 	bl	8018380 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800ec4e:	f44f 629a 	mov.w	r2, #1232	@ 0x4d0
 800ec52:	2100      	movs	r1, #0
 800ec54:	48c0      	ldr	r0, [pc, #768]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ec56:	f009 fb93 	bl	8018380 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 800ec5a:	4bbf      	ldr	r3, [pc, #764]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ec5c:	4abd      	ldr	r2, [pc, #756]	@ (800ef54 <LoRaMacInitialization+0x374>)
 800ec5e:	f8c3 24c8 	str.w	r2, [r3, #1224]	@ 0x4c8

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800ec62:	4bbd      	ldr	r3, [pc, #756]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ec64:	2201      	movs	r2, #1
 800ec66:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a
    MacCtx.AckTimeoutRetries = 1;
 800ec6a:	4bbb      	ldr	r3, [pc, #748]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
    MacCtx.NvmCtx->Region = region;
 800ec72:	4bb9      	ldr	r3, [pc, #740]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ec74:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ec78:	7bfa      	ldrb	r2, [r7, #15]
 800ec7a:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800ec7c:	4bb6      	ldr	r3, [pc, #728]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ec7e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ec82:	2200      	movs	r2, #0
 800ec84:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    MacCtx.NvmCtx->RepeaterSupport = false;
 800ec88:	4bb3      	ldr	r3, [pc, #716]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ec8a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 213f 	strb.w	r2, [r3, #319]	@ 0x13f

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
 800ec94:	2301      	movs	r3, #1
 800ec96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    lrWanVersion.Fields.Minor    = 0;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    lrWanVersion.Fields.Revision = 3;
 800eca0:	2303      	movs	r3, #3
 800eca2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    lrWanVersion.Fields.Rfu      = 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    MacCtx.NvmCtx->Version = lrWanVersion;
 800ecac:	4baa      	ldr	r3, [pc, #680]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ecae:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ecb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecb4:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800ecb8:	230f      	movs	r3, #15
 800ecba:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ecbe:	4ba6      	ldr	r3, [pc, #664]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ecc0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ecca:	4611      	mov	r1, r2
 800eccc:	4618      	mov	r0, r3
 800ecce:	f004 f8c0 	bl	8012e52 <RegionGetPhyParam>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800ecd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ecd8:	4b9f      	ldr	r3, [pc, #636]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ecda:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ecde:	2a00      	cmp	r2, #0
 800ece0:	bf14      	ite	ne
 800ece2:	2201      	movne	r2, #1
 800ece4:	2200      	moveq	r2, #0
 800ece6:	b2d2      	uxtb	r2, r2
 800ece8:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800ecec:	230a      	movs	r3, #10
 800ecee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ecf2:	4b99      	ldr	r3, [pc, #612]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ecf4:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ecfe:	4611      	mov	r1, r2
 800ed00:	4618      	mov	r0, r3
 800ed02:	f004 f8a6 	bl	8012e52 <RegionGetPhyParam>
 800ed06:	4603      	mov	r3, r0
 800ed08:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800ed0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed0c:	4b92      	ldr	r3, [pc, #584]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ed0e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ed12:	b252      	sxtb	r2, r2
 800ed14:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800ed16:	2306      	movs	r3, #6
 800ed18:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ed1c:	4b8e      	ldr	r3, [pc, #568]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ed1e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ed28:	4611      	mov	r1, r2
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f004 f891 	bl	8012e52 <RegionGetPhyParam>
 800ed30:	4603      	mov	r3, r0
 800ed32:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800ed34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed36:	4b88      	ldr	r3, [pc, #544]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ed38:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ed3c:	b252      	sxtb	r2, r2
 800ed3e:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800ed40:	2310      	movs	r3, #16
 800ed42:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ed46:	4b84      	ldr	r3, [pc, #528]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ed48:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ed52:	4611      	mov	r1, r2
 800ed54:	4618      	mov	r0, r3
 800ed56:	f004 f87c 	bl	8012e52 <RegionGetPhyParam>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800ed5e:	4b7e      	ldr	r3, [pc, #504]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ed60:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ed64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed66:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800ed68:	2311      	movs	r3, #17
 800ed6a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ed6e:	4b7a      	ldr	r3, [pc, #488]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ed70:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ed7a:	4611      	mov	r1, r2
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f004 f868 	bl	8012e52 <RegionGetPhyParam>
 800ed82:	4603      	mov	r3, r0
 800ed84:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800ed86:	4b74      	ldr	r3, [pc, #464]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ed88:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ed8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed8e:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800ed90:	2312      	movs	r3, #18
 800ed92:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ed96:	4b70      	ldr	r3, [pc, #448]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ed98:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800eda2:	4611      	mov	r1, r2
 800eda4:	4618      	mov	r0, r3
 800eda6:	f004 f854 	bl	8012e52 <RegionGetPhyParam>
 800edaa:	4603      	mov	r3, r0
 800edac:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800edae:	4b6a      	ldr	r3, [pc, #424]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800edb0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800edb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800edb6:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800edb8:	2313      	movs	r3, #19
 800edba:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800edbe:	4b66      	ldr	r3, [pc, #408]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800edc0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800edca:	4611      	mov	r1, r2
 800edcc:	4618      	mov	r0, r3
 800edce:	f004 f840 	bl	8012e52 <RegionGetPhyParam>
 800edd2:	4603      	mov	r3, r0
 800edd4:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800edd6:	4b60      	ldr	r3, [pc, #384]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800edd8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800eddc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800edde:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800ede0:	2314      	movs	r3, #20
 800ede2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ede6:	4b5c      	ldr	r3, [pc, #368]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ede8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800edf2:	4611      	mov	r1, r2
 800edf4:	4618      	mov	r0, r3
 800edf6:	f004 f82c 	bl	8012e52 <RegionGetPhyParam>
 800edfa:	4603      	mov	r3, r0
 800edfc:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800edfe:	4b56      	ldr	r3, [pc, #344]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ee00:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ee04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee06:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800ee08:	2317      	movs	r3, #23
 800ee0a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ee0e:	4b52      	ldr	r3, [pc, #328]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ee10:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ee1a:	4611      	mov	r1, r2
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f004 f818 	bl	8012e52 <RegionGetPhyParam>
 800ee22:	4603      	mov	r3, r0
 800ee24:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800ee26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee28:	4b4b      	ldr	r3, [pc, #300]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ee2a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ee2e:	b2d2      	uxtb	r2, r2
 800ee30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800ee34:	2318      	movs	r3, #24
 800ee36:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ee3a:	4b47      	ldr	r3, [pc, #284]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ee3c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ee46:	4611      	mov	r1, r2
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f004 f802 	bl	8012e52 <RegionGetPhyParam>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800ee52:	4b41      	ldr	r3, [pc, #260]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ee54:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ee58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee5a:	629a      	str	r2, [r3, #40]	@ 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800ee5c:	4b3e      	ldr	r3, [pc, #248]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ee5e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ee62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee64:	631a      	str	r2, [r3, #48]	@ 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800ee66:	2319      	movs	r3, #25
 800ee68:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ee6c:	4b3a      	ldr	r3, [pc, #232]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ee6e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ee78:	4611      	mov	r1, r2
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f003 ffe9 	bl	8012e52 <RegionGetPhyParam>
 800ee80:	4603      	mov	r3, r0
 800ee82:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800ee84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee86:	4b34      	ldr	r3, [pc, #208]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ee88:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ee8c:	b2d2      	uxtb	r2, r2
 800ee8e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800ee92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee94:	4b30      	ldr	r3, [pc, #192]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ee96:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ee9a:	b2d2      	uxtb	r2, r2
 800ee9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800eea0:	231e      	movs	r3, #30
 800eea2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800eea6:	4b2c      	ldr	r3, [pc, #176]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800eea8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800eeb2:	4611      	mov	r1, r2
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f003 ffcc 	bl	8012e52 <RegionGetPhyParam>
 800eeba:	4603      	mov	r3, r0
 800eebc:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800eebe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eec0:	4b25      	ldr	r3, [pc, #148]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800eec2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800eec6:	b2d2      	uxtb	r2, r2
 800eec8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800eecc:	231f      	movs	r3, #31
 800eece:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800eed2:	4b21      	ldr	r3, [pc, #132]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800eed4:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800eede:	4611      	mov	r1, r2
 800eee0:	4618      	mov	r0, r3
 800eee2:	f003 ffb6 	bl	8012e52 <RegionGetPhyParam>
 800eee6:	4603      	mov	r3, r0
 800eee8:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800eeea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eeec:	4b1a      	ldr	r3, [pc, #104]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800eeee:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800eef2:	b2d2      	uxtb	r2, r2
 800eef4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800eef8:	2320      	movs	r3, #32
 800eefa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800eefe:	4b16      	ldr	r3, [pc, #88]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ef00:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ef0a:	4611      	mov	r1, r2
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f003 ffa0 	bl	8012e52 <RegionGetPhyParam>
 800ef12:	4603      	mov	r3, r0
 800ef14:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800ef16:	4b10      	ldr	r3, [pc, #64]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ef18:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ef1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800ef20:	2321      	movs	r3, #33	@ 0x21
 800ef22:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ef26:	4b0c      	ldr	r3, [pc, #48]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ef28:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ef32:	4611      	mov	r1, r2
 800ef34:	4618      	mov	r0, r3
 800ef36:	f003 ff8c 	bl	8012e52 <RegionGetPhyParam>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800ef3e:	4b06      	ldr	r3, [pc, #24]	@ (800ef58 <LoRaMacInitialization+0x378>)
 800ef40:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ef44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef46:	641a      	str	r2, [r3, #64]	@ 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800ef48:	230b      	movs	r3, #11
 800ef4a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 800ef4e:	e005      	b.n	800ef5c <LoRaMacInitialization+0x37c>
 800ef50:	0800eb99 	.word	0x0800eb99
 800ef54:	200019a0 	.word	0x200019a0
 800ef58:	200014d0 	.word	0x200014d0
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ef5c:	4b9a      	ldr	r3, [pc, #616]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800ef5e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ef68:	4611      	mov	r1, r2
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f003 ff71 	bl	8012e52 <RegionGetPhyParam>
 800ef70:	4603      	mov	r3, r0
 800ef72:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.AdrAckLimit = phyParam.Value;
 800ef74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef76:	b29a      	uxth	r2, r3
 800ef78:	4b93      	ldr	r3, [pc, #588]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800ef7a:	f8a3 2414 	strh.w	r2, [r3, #1044]	@ 0x414

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800ef7e:	230c      	movs	r3, #12
 800ef80:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ef84:	4b90      	ldr	r3, [pc, #576]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800ef86:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800ef90:	4611      	mov	r1, r2
 800ef92:	4618      	mov	r0, r3
 800ef94:	f003 ff5d 	bl	8012e52 <RegionGetPhyParam>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	653b      	str	r3, [r7, #80]	@ 0x50
    MacCtx.AdrAckDelay = phyParam.Value;
 800ef9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	4b89      	ldr	r3, [pc, #548]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800efa2:	f8a3 2416 	strh.w	r2, [r3, #1046]	@ 0x416

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800efa6:	4b88      	ldr	r3, [pc, #544]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800efa8:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800efac:	2201      	movs	r2, #1
 800efae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 800efb2:	4b85      	ldr	r3, [pc, #532]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800efb4:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800efb8:	220a      	movs	r2, #10
 800efba:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800efbc:	4b82      	ldr	r3, [pc, #520]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800efbe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800efc2:	2206      	movs	r2, #6
 800efc4:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800efc6:	4b80      	ldr	r3, [pc, #512]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800efc8:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800efcc:	4b7e      	ldr	r3, [pc, #504]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800efce:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800efd2:	6892      	ldr	r2, [r2, #8]
 800efd4:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800efd8:	4b7b      	ldr	r3, [pc, #492]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800efda:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800efde:	4b7a      	ldr	r3, [pc, #488]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800efe0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800efe4:	7b12      	ldrb	r2, [r2, #12]
 800efe6:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800efea:	4b77      	ldr	r3, [pc, #476]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800efec:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800eff0:	4b75      	ldr	r3, [pc, #468]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800eff2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800eff6:	6912      	ldr	r2, [r2, #16]
 800eff8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800effc:	4b72      	ldr	r3, [pc, #456]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800effe:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800f002:	4b71      	ldr	r3, [pc, #452]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f004:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f008:	6952      	ldr	r2, [r2, #20]
 800f00a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800f00e:	4b6e      	ldr	r3, [pc, #440]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f010:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800f014:	4b6c      	ldr	r3, [pc, #432]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f016:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f01a:	6992      	ldr	r2, [r2, #24]
 800f01c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800f020:	4b69      	ldr	r3, [pc, #420]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f022:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800f026:	4b68      	ldr	r3, [pc, #416]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f028:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f02c:	69d2      	ldr	r2, [r2, #28]
 800f02e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800f032:	4b65      	ldr	r3, [pc, #404]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f034:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800f038:	4b63      	ldr	r3, [pc, #396]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f03a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f03e:	6a12      	ldr	r2, [r2, #32]
 800f040:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800f044:	4b60      	ldr	r3, [pc, #384]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f046:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800f04a:	4b5f      	ldr	r3, [pc, #380]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f04c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f050:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800f054:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118

    ResetMacParameters( );
 800f058:	f7fe ffd6 	bl	800e008 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800f05c:	4b5a      	ldr	r3, [pc, #360]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f05e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f062:	2201      	movs	r2, #1
 800f064:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1

    MacCtx.MacPrimitives = primitives;
 800f068:	4a57      	ldr	r2, [pc, #348]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacCallbacks = callbacks;
 800f070:	4a55      	ldr	r2, [pc, #340]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    MacCtx.MacFlags.Value = 0;
 800f078:	4b53      	ldr	r3, [pc, #332]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f07a:	2200      	movs	r2, #0
 800f07c:	f883 24c5 	strb.w	r2, [r3, #1221]	@ 0x4c5
    MacCtx.MacState = LORAMAC_STOPPED;
 800f080:	4b51      	ldr	r3, [pc, #324]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f082:	2201      	movs	r2, #1
 800f084:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800f088:	4b4f      	ldr	r3, [pc, #316]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f08a:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800f08e:	f04f 0200 	mov.w	r2, #0
 800f092:	f04f 0300 	mov.w	r3, #0
 800f096:	e9c1 2372 	strd	r2, r3, [r1, #456]	@ 0x1c8
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800f09a:	4b4b      	ldr	r3, [pc, #300]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f09c:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 800f0a0:	f04f 0200 	mov.w	r2, #0
 800f0a4:	f04f 0300 	mov.w	r3, #0
 800f0a8:	e9c1 2374 	strd	r2, r3, [r1, #464]	@ 0x1d0

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	9302      	str	r3, [sp, #8]
 800f0b0:	4b46      	ldr	r3, [pc, #280]	@ (800f1cc <LoRaMacInitialization+0x5ec>)
 800f0b2:	9301      	str	r3, [sp, #4]
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	9300      	str	r3, [sp, #0]
 800f0b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f0bc:	f04f 0300 	mov.w	r3, #0
 800f0c0:	4843      	ldr	r0, [pc, #268]	@ (800f1d0 <LoRaMacInitialization+0x5f0>)
 800f0c2:	f008 fb3b 	bl	801773c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	9302      	str	r3, [sp, #8]
 800f0ca:	4b42      	ldr	r3, [pc, #264]	@ (800f1d4 <LoRaMacInitialization+0x5f4>)
 800f0cc:	9301      	str	r3, [sp, #4]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	9300      	str	r3, [sp, #0]
 800f0d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f0d6:	f04f 0300 	mov.w	r3, #0
 800f0da:	483f      	ldr	r0, [pc, #252]	@ (800f1d8 <LoRaMacInitialization+0x5f8>)
 800f0dc:	f008 fb2e 	bl	801773c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	9302      	str	r3, [sp, #8]
 800f0e4:	4b3d      	ldr	r3, [pc, #244]	@ (800f1dc <LoRaMacInitialization+0x5fc>)
 800f0e6:	9301      	str	r3, [sp, #4]
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f0f0:	f04f 0300 	mov.w	r3, #0
 800f0f4:	483a      	ldr	r0, [pc, #232]	@ (800f1e0 <LoRaMacInitialization+0x600>)
 800f0f6:	f008 fb21 	bl	801773c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	9302      	str	r3, [sp, #8]
 800f0fe:	4b39      	ldr	r3, [pc, #228]	@ (800f1e4 <LoRaMacInitialization+0x604>)
 800f100:	9301      	str	r3, [sp, #4]
 800f102:	2300      	movs	r3, #0
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f10a:	f04f 0300 	mov.w	r3, #0
 800f10e:	4836      	ldr	r0, [pc, #216]	@ (800f1e8 <LoRaMacInitialization+0x608>)
 800f110:	f008 fb14 	bl	801773c <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 800f114:	4b2c      	ldr	r3, [pc, #176]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f116:	f8d3 44c8 	ldr.w	r4, [r3, #1224]	@ 0x4c8
 800f11a:	463b      	mov	r3, r7
 800f11c:	4618      	mov	r0, r3
 800f11e:	f008 faeb 	bl	80176f8 <SysTimeGetMcuTime>
 800f122:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 800f126:	463a      	mov	r2, r7
 800f128:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f12c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800f130:	4b25      	ldr	r3, [pc, #148]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f132:	4a2e      	ldr	r2, [pc, #184]	@ (800f1ec <LoRaMacInitialization+0x60c>)
 800f134:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800f138:	4b23      	ldr	r3, [pc, #140]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f13a:	4a2d      	ldr	r2, [pc, #180]	@ (800f1f0 <LoRaMacInitialization+0x610>)
 800f13c:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800f140:	4b21      	ldr	r3, [pc, #132]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f142:	4a2c      	ldr	r2, [pc, #176]	@ (800f1f4 <LoRaMacInitialization+0x614>)
 800f144:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800f148:	4b1f      	ldr	r3, [pc, #124]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f14a:	4a2b      	ldr	r2, [pc, #172]	@ (800f1f8 <LoRaMacInitialization+0x618>)
 800f14c:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800f150:	4b1d      	ldr	r3, [pc, #116]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f152:	4a2a      	ldr	r2, [pc, #168]	@ (800f1fc <LoRaMacInitialization+0x61c>)
 800f154:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800f158:	4b29      	ldr	r3, [pc, #164]	@ (800f200 <LoRaMacInitialization+0x620>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4829      	ldr	r0, [pc, #164]	@ (800f204 <LoRaMacInitialization+0x624>)
 800f15e:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 800f160:	2300      	movs	r3, #0
 800f162:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmCtx = NULL;
 800f166:	2300      	movs	r3, #0
 800f168:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800f16a:	4b17      	ldr	r3, [pc, #92]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f16c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	f107 021c 	add.w	r2, r7, #28
 800f176:	4611      	mov	r1, r2
 800f178:	4618      	mov	r0, r3
 800f17a:	f003 fe93 	bl	8012ea4 <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800f17e:	4822      	ldr	r0, [pc, #136]	@ (800f208 <LoRaMacInitialization+0x628>)
 800f180:	f7f8 fdea 	bl	8007d58 <SecureElementInit>
 800f184:	4603      	mov	r3, r0
 800f186:	2b00      	cmp	r3, #0
 800f188:	d001      	beq.n	800f18e <LoRaMacInitialization+0x5ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800f18a:	2311      	movs	r3, #17
 800f18c:	e089      	b.n	800f2a2 <LoRaMacInitialization+0x6c2>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800f18e:	481f      	ldr	r0, [pc, #124]	@ (800f20c <LoRaMacInitialization+0x62c>)
 800f190:	f002 fd78 	bl	8011c84 <LoRaMacCryptoInit>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d001      	beq.n	800f19e <LoRaMacInitialization+0x5be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800f19a:	2311      	movs	r3, #17
 800f19c:	e081      	b.n	800f2a2 <LoRaMacInitialization+0x6c2>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800f19e:	481c      	ldr	r0, [pc, #112]	@ (800f210 <LoRaMacInitialization+0x630>)
 800f1a0:	f001 fe8a 	bl	8010eb8 <LoRaMacCommandsInit>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d001      	beq.n	800f1ae <LoRaMacInitialization+0x5ce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f1aa:	2313      	movs	r3, #19
 800f1ac:	e079      	b.n	800f2a2 <LoRaMacInitialization+0x6c2>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800f1ae:	4b06      	ldr	r3, [pc, #24]	@ (800f1c8 <LoRaMacInitialization+0x5e8>)
 800f1b0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f1b4:	3350      	adds	r3, #80	@ 0x50
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f002 fe60 	bl	8011e7c <LoRaMacCryptoSetMulticastReference>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d028      	beq.n	800f214 <LoRaMacInitialization+0x634>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800f1c2:	2311      	movs	r3, #17
 800f1c4:	e06d      	b.n	800f2a2 <LoRaMacInitialization+0x6c2>
 800f1c6:	bf00      	nop
 800f1c8:	200014d0 	.word	0x200014d0
 800f1cc:	0800ca35 	.word	0x0800ca35
 800f1d0:	20001840 	.word	0x20001840
 800f1d4:	0800caa9 	.word	0x0800caa9
 800f1d8:	20001860 	.word	0x20001860
 800f1dc:	0800cb1d 	.word	0x0800cb1d
 800f1e0:	20001880 	.word	0x20001880
 800f1e4:	0800cb99 	.word	0x0800cb99
 800f1e8:	200018e8 	.word	0x200018e8
 800f1ec:	0800b7b9 	.word	0x0800b7b9
 800f1f0:	0800b825 	.word	0x0800b825
 800f1f4:	0800b8e1 	.word	0x0800b8e1
 800f1f8:	0800b8a5 	.word	0x0800b8a5
 800f1fc:	0800b91d 	.word	0x0800b91d
 800f200:	0802113c 	.word	0x0802113c
 800f204:	2000181c 	.word	0x2000181c
 800f208:	0800eb6f 	.word	0x0800eb6f
 800f20c:	0800eb61 	.word	0x0800eb61
 800f210:	0800eb7d 	.word	0x0800eb7d
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800f214:	4b25      	ldr	r3, [pc, #148]	@ (800f2ac <LoRaMacInitialization+0x6cc>)
 800f216:	699b      	ldr	r3, [r3, #24]
 800f218:	4798      	blx	r3
 800f21a:	4603      	mov	r3, r0
 800f21c:	4618      	mov	r0, r3
 800f21e:	f009 f84b 	bl	80182b8 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800f222:	4b22      	ldr	r3, [pc, #136]	@ (800f2ac <LoRaMacInitialization+0x6cc>)
 800f224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f226:	4a22      	ldr	r2, [pc, #136]	@ (800f2b0 <LoRaMacInitialization+0x6d0>)
 800f228:	f8d2 24c8 	ldr.w	r2, [r2, #1224]	@ 0x4c8
 800f22c:	f892 20f1 	ldrb.w	r2, [r2, #241]	@ 0xf1
 800f230:	4610      	mov	r0, r2
 800f232:	4798      	blx	r3
    Radio.Sleep( );
 800f234:	4b1d      	ldr	r3, [pc, #116]	@ (800f2ac <LoRaMacInitialization+0x6cc>)
 800f236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f238:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800f23a:	2300      	movs	r3, #0
 800f23c:	64bb      	str	r3, [r7, #72]	@ 0x48
    classBCallbacks.MacProcessNotify = NULL;
 800f23e:	2300      	movs	r3, #0
 800f240:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if( callbacks != NULL )
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d005      	beq.n	800f254 <LoRaMacInitialization+0x674>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	64bb      	str	r3, [r7, #72]	@ 0x48
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800f254:	4b17      	ldr	r3, [pc, #92]	@ (800f2b4 <LoRaMacInitialization+0x6d4>)
 800f256:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800f258:	4b17      	ldr	r3, [pc, #92]	@ (800f2b8 <LoRaMacInitialization+0x6d8>)
 800f25a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800f25c:	4b17      	ldr	r3, [pc, #92]	@ (800f2bc <LoRaMacInitialization+0x6dc>)
 800f25e:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800f260:	4b17      	ldr	r3, [pc, #92]	@ (800f2c0 <LoRaMacInitialization+0x6e0>)
 800f262:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800f264:	4b12      	ldr	r3, [pc, #72]	@ (800f2b0 <LoRaMacInitialization+0x6d0>)
 800f266:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f26a:	334c      	adds	r3, #76	@ 0x4c
 800f26c:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 800f26e:	4b10      	ldr	r3, [pc, #64]	@ (800f2b0 <LoRaMacInitialization+0x6d0>)
 800f270:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f274:	63fb      	str	r3, [r7, #60]	@ 0x3c
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800f276:	4b0e      	ldr	r3, [pc, #56]	@ (800f2b0 <LoRaMacInitialization+0x6d0>)
 800f278:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f27c:	33f8      	adds	r3, #248	@ 0xf8
 800f27e:	643b      	str	r3, [r7, #64]	@ 0x40
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800f280:	4b0b      	ldr	r3, [pc, #44]	@ (800f2b0 <LoRaMacInitialization+0x6d0>)
 800f282:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f286:	3350      	adds	r3, #80	@ 0x50
 800f288:	647b      	str	r3, [r7, #68]	@ 0x44

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800f28a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800f28e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f292:	4a0c      	ldr	r2, [pc, #48]	@ (800f2c4 <LoRaMacInitialization+0x6e4>)
 800f294:	4618      	mov	r0, r3
 800f296:	f001 fbb7 	bl	8010a08 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f29a:	2001      	movs	r0, #1
 800f29c:	f7fd f9b8 	bl	800c610 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800f2a0:	2300      	movs	r3, #0
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	375c      	adds	r7, #92	@ 0x5c
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd90      	pop	{r4, r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	0802113c 	.word	0x0802113c
 800f2b0:	200014d0 	.word	0x200014d0
 800f2b4:	20001978 	.word	0x20001978
 800f2b8:	20001918 	.word	0x20001918
 800f2bc:	20001950 	.word	0x20001950
 800f2c0:	20001995 	.word	0x20001995
 800f2c4:	0800eb8b 	.word	0x0800eb8b

0800f2c8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800f2cc:	4b04      	ldr	r3, [pc, #16]	@ (800f2e0 <LoRaMacStart+0x18>)
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr
 800f2e0:	200014d0 	.word	0x200014d0

0800f2e4 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b08a      	sub	sp, #40	@ 0x28
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	6039      	str	r1, [r7, #0]
 800f2ee:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800f2f0:	4b48      	ldr	r3, [pc, #288]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f2f2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f2f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f2fa:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800f2fc:	4b45      	ldr	r3, [pc, #276]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f2fe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f302:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f306:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800f308:	4b42      	ldr	r3, [pc, #264]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f30a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f30e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f312:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 800f314:	2300      	movs	r3, #0
 800f316:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d101      	bne.n	800f322 <LoRaMacQueryTxPossible+0x3e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f31e:	2303      	movs	r3, #3
 800f320:	e074      	b.n	800f40c <LoRaMacQueryTxPossible+0x128>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800f322:	4b3c      	ldr	r3, [pc, #240]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f324:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f328:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f32c:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 800f32e:	2300      	movs	r3, #0
 800f330:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800f332:	4b38      	ldr	r3, [pc, #224]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f334:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f338:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 800f33c:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800f33e:	4b35      	ldr	r3, [pc, #212]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f340:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f344:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f348:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f34a:	4b32      	ldr	r3, [pc, #200]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f34c:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	@ 0x414
 800f350:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f352:	4b30      	ldr	r3, [pc, #192]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f354:	f8b3 3416 	ldrh.w	r3, [r3, #1046]	@ 0x416
 800f358:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f35a:	4b2e      	ldr	r3, [pc, #184]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f35c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f360:	f993 30f9 	ldrsb.w	r3, [r3, #249]	@ 0xf9
 800f364:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800f368:	4b2a      	ldr	r3, [pc, #168]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f36a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f36e:	f993 30f8 	ldrsb.w	r3, [r3, #248]	@ 0xf8
 800f372:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800f376:	4b27      	ldr	r3, [pc, #156]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f378:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f37c:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f380:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = MacCtx.NvmCtx->Region;
 800f384:	4b23      	ldr	r3, [pc, #140]	@ (800f414 <LoRaMacQueryTxPossible+0x130>)
 800f386:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800f390:	f107 0310 	add.w	r3, r7, #16
 800f394:	f107 020e 	add.w	r2, r7, #14
 800f398:	f107 010f 	add.w	r1, r7, #15
 800f39c:	f107 0014 	add.w	r0, r7, #20
 800f3a0:	f001 fb1a 	bl	80109d8 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f3a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7fd fd91 	bl	800ced0 <GetMaxAppPayloadWithoutFOptsLength>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f3b6:	f107 0308 	add.w	r3, r7, #8
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f001 fe80 	bl	80110c0 <LoRaMacCommandsGetSizeSerializedCmds>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d001      	beq.n	800f3ca <LoRaMacQueryTxPossible+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f3c6:	2313      	movs	r3, #19
 800f3c8:	e020      	b.n	800f40c <LoRaMacQueryTxPossible+0x128>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	2b0f      	cmp	r3, #15
 800f3ce:	d819      	bhi.n	800f404 <LoRaMacQueryTxPossible+0x120>
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	785b      	ldrb	r3, [r3, #1]
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d313      	bcc.n	800f404 <LoRaMacQueryTxPossible+0x120>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	785a      	ldrb	r2, [r3, #1]
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	1ad3      	subs	r3, r2, r3
 800f3e6:	b2da      	uxtb	r2, r3
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	785b      	ldrb	r3, [r3, #1]
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	79fa      	ldrb	r2, [r7, #7]
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	4299      	cmp	r1, r3
 800f3fa:	d301      	bcc.n	800f400 <LoRaMacQueryTxPossible+0x11c>
        {
            return LORAMAC_STATUS_OK;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	e005      	b.n	800f40c <LoRaMacQueryTxPossible+0x128>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800f400:	2308      	movs	r3, #8
 800f402:	e003      	b.n	800f40c <LoRaMacQueryTxPossible+0x128>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	2200      	movs	r2, #0
 800f408:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800f40a:	2308      	movs	r3, #8
    }
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3728      	adds	r7, #40	@ 0x28
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	200014d0 	.word	0x200014d0

0800f418 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b086      	sub	sp, #24
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f420:	2300      	movs	r3, #0
 800f422:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d101      	bne.n	800f42e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f42a:	2303      	movs	r3, #3
 800f42c:	e194      	b.n	800f758 <LoRaMacMibGetRequestConfirm+0x340>
    }

    switch( mibGet->Type )
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	2b34      	cmp	r3, #52	@ 0x34
 800f434:	f200 8189 	bhi.w	800f74a <LoRaMacMibGetRequestConfirm+0x332>
 800f438:	a201      	add	r2, pc, #4	@ (adr r2, 800f440 <LoRaMacMibGetRequestConfirm+0x28>)
 800f43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f43e:	bf00      	nop
 800f440:	0800f515 	.word	0x0800f515
 800f444:	0800f525 	.word	0x0800f525
 800f448:	0800f535 	.word	0x0800f535
 800f44c:	0800f541 	.word	0x0800f541
 800f450:	0800f54d 	.word	0x0800f54d
 800f454:	0800f55d 	.word	0x0800f55d
 800f458:	0800f56b 	.word	0x0800f56b
 800f45c:	0800f74b 	.word	0x0800f74b
 800f460:	0800f74b 	.word	0x0800f74b
 800f464:	0800f74b 	.word	0x0800f74b
 800f468:	0800f74b 	.word	0x0800f74b
 800f46c:	0800f74b 	.word	0x0800f74b
 800f470:	0800f74b 	.word	0x0800f74b
 800f474:	0800f74b 	.word	0x0800f74b
 800f478:	0800f74b 	.word	0x0800f74b
 800f47c:	0800f74b 	.word	0x0800f74b
 800f480:	0800f74b 	.word	0x0800f74b
 800f484:	0800f74b 	.word	0x0800f74b
 800f488:	0800f74b 	.word	0x0800f74b
 800f48c:	0800f74b 	.word	0x0800f74b
 800f490:	0800f74b 	.word	0x0800f74b
 800f494:	0800f74b 	.word	0x0800f74b
 800f498:	0800f74b 	.word	0x0800f74b
 800f49c:	0800f74b 	.word	0x0800f74b
 800f4a0:	0800f74b 	.word	0x0800f74b
 800f4a4:	0800f74b 	.word	0x0800f74b
 800f4a8:	0800f74b 	.word	0x0800f74b
 800f4ac:	0800f74b 	.word	0x0800f74b
 800f4b0:	0800f74b 	.word	0x0800f74b
 800f4b4:	0800f579 	.word	0x0800f579
 800f4b8:	0800f589 	.word	0x0800f589
 800f4bc:	0800f599 	.word	0x0800f599
 800f4c0:	0800f5bd 	.word	0x0800f5bd
 800f4c4:	0800f5d5 	.word	0x0800f5d5
 800f4c8:	0800f5eb 	.word	0x0800f5eb
 800f4cc:	0800f603 	.word	0x0800f603
 800f4d0:	0800f63d 	.word	0x0800f63d
 800f4d4:	0800f619 	.word	0x0800f619
 800f4d8:	0800f661 	.word	0x0800f661
 800f4dc:	0800f671 	.word	0x0800f671
 800f4e0:	0800f681 	.word	0x0800f681
 800f4e4:	0800f691 	.word	0x0800f691
 800f4e8:	0800f6a1 	.word	0x0800f6a1
 800f4ec:	0800f6b1 	.word	0x0800f6b1
 800f4f0:	0800f6c1 	.word	0x0800f6c1
 800f4f4:	0800f6d1 	.word	0x0800f6d1
 800f4f8:	0800f6f1 	.word	0x0800f6f1
 800f4fc:	0800f6e1 	.word	0x0800f6e1
 800f500:	0800f701 	.word	0x0800f701
 800f504:	0800f711 	.word	0x0800f711
 800f508:	0800f721 	.word	0x0800f721
 800f50c:	0800f73d 	.word	0x0800f73d
 800f510:	0800f731 	.word	0x0800f731
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800f514:	4b92      	ldr	r3, [pc, #584]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f516:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f51a:	f893 20f0 	ldrb.w	r2, [r3, #240]	@ 0xf0
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	711a      	strb	r2, [r3, #4]
            break;
 800f522:	e118      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800f524:	4b8e      	ldr	r3, [pc, #568]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f526:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f52a:	f893 21e4 	ldrb.w	r2, [r3, #484]	@ 0x1e4
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	711a      	strb	r2, [r3, #4]
            break;
 800f532:	e110      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800f534:	f7f8 ff38 	bl	80083a8 <SecureElementGetDevEui>
 800f538:	4602      	mov	r2, r0
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	605a      	str	r2, [r3, #4]
            break;
 800f53e:	e10a      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800f540:	f7f8 ff56 	bl	80083f0 <SecureElementGetJoinEui>
 800f544:	4602      	mov	r2, r0
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	605a      	str	r2, [r3, #4]
            break;
 800f54a:	e104      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800f54c:	4b84      	ldr	r3, [pc, #528]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f54e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f552:	f893 20f2 	ldrb.w	r2, [r3, #242]	@ 0xf2
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	711a      	strb	r2, [r3, #4]
            break;
 800f55a:	e0fc      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800f55c:	4b80      	ldr	r3, [pc, #512]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f55e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f562:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	605a      	str	r2, [r3, #4]
            break;
 800f568:	e0f5      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800f56a:	4b7d      	ldr	r3, [pc, #500]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f56c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f570:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	605a      	str	r2, [r3, #4]
            break;
 800f576:	e0ee      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800f578:	4b79      	ldr	r3, [pc, #484]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f57a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f57e:	f893 20f1 	ldrb.w	r2, [r3, #241]	@ 0xf1
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	711a      	strb	r2, [r3, #4]
            break;
 800f586:	e0e6      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800f588:	4b75      	ldr	r3, [pc, #468]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f58a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f58e:	f893 213f 	ldrb.w	r2, [r3, #319]	@ 0x13f
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	711a      	strb	r2, [r3, #4]
            break;
 800f596:	e0de      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800f598:	231d      	movs	r3, #29
 800f59a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f59c:	4b70      	ldr	r3, [pc, #448]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f59e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	f107 0210 	add.w	r2, r7, #16
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f003 fc51 	bl	8012e52 <RegionGetPhyParam>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 800f5b4:	68fa      	ldr	r2, [r7, #12]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	605a      	str	r2, [r3, #4]
            break;
 800f5ba:	e0cc      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800f5bc:	4b68      	ldr	r3, [pc, #416]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f5be:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	3304      	adds	r3, #4
 800f5c6:	f502 728e 	add.w	r2, r2, #284	@ 0x11c
 800f5ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5ce:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f5d2:	e0c0      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800f5d4:	4b62      	ldr	r3, [pc, #392]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f5d6:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	3304      	adds	r3, #4
 800f5de:	3228      	adds	r2, #40	@ 0x28
 800f5e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5e4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f5e8:	e0b5      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800f5ea:	4b5d      	ldr	r3, [pc, #372]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f5ec:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	3304      	adds	r3, #4
 800f5f4:	f502 7292 	add.w	r2, r2, #292	@ 0x124
 800f5f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5fc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f600:	e0a9      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800f602:	4b57      	ldr	r3, [pc, #348]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f604:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	3304      	adds	r3, #4
 800f60c:	3230      	adds	r2, #48	@ 0x30
 800f60e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f612:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800f616:	e09e      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800f618:	231b      	movs	r3, #27
 800f61a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f61c:	4b50      	ldr	r3, [pc, #320]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f61e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	f107 0210 	add.w	r2, r7, #16
 800f628:	4611      	mov	r1, r2
 800f62a:	4618      	mov	r0, r3
 800f62c:	f003 fc11 	bl	8012e52 <RegionGetPhyParam>
 800f630:	4603      	mov	r3, r0
 800f632:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	605a      	str	r2, [r3, #4]
            break;
 800f63a:	e08c      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800f63c:	231a      	movs	r3, #26
 800f63e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f640:	4b47      	ldr	r3, [pc, #284]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f642:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	f107 0210 	add.w	r2, r7, #16
 800f64c:	4611      	mov	r1, r2
 800f64e:	4618      	mov	r0, r3
 800f650:	f003 fbff 	bl	8012e52 <RegionGetPhyParam>
 800f654:	4603      	mov	r3, r0
 800f656:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	605a      	str	r2, [r3, #4]
            break;
 800f65e:	e07a      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800f660:	4b3f      	ldr	r3, [pc, #252]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f662:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f666:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	711a      	strb	r2, [r3, #4]
            break;
 800f66e:	e072      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800f670:	4b3b      	ldr	r3, [pc, #236]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f672:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f676:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	605a      	str	r2, [r3, #4]
            break;
 800f67e:	e06a      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800f680:	4b37      	ldr	r3, [pc, #220]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f682:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f686:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	605a      	str	r2, [r3, #4]
            break;
 800f68e:	e062      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800f690:	4b33      	ldr	r3, [pc, #204]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f692:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f696:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	605a      	str	r2, [r3, #4]
            break;
 800f69e:	e05a      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800f6a0:	4b2f      	ldr	r3, [pc, #188]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f6a2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f6a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	605a      	str	r2, [r3, #4]
            break;
 800f6ae:	e052      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800f6b0:	4b2b      	ldr	r3, [pc, #172]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f6b2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f6b6:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	605a      	str	r2, [r3, #4]
            break;
 800f6be:	e04a      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800f6c0:	4b27      	ldr	r3, [pc, #156]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f6c2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f6c6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	711a      	strb	r2, [r3, #4]
            break;
 800f6ce:	e042      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f6d0:	4b23      	ldr	r3, [pc, #140]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f6d2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f6d6:	f993 20f9 	ldrsb.w	r2, [r3, #249]	@ 0xf9
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	711a      	strb	r2, [r3, #4]
            break;
 800f6de:	e03a      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800f6e0:	4b1f      	ldr	r3, [pc, #124]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f6e2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f6e6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	711a      	strb	r2, [r3, #4]
            break;
 800f6ee:	e032      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800f6f0:	4b1b      	ldr	r3, [pc, #108]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f6f2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f6f6:	f993 20f8 	ldrsb.w	r2, [r3, #248]	@ 0xf8
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	711a      	strb	r2, [r3, #4]
            break;
 800f6fe:	e02a      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800f700:	4b17      	ldr	r3, [pc, #92]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f702:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f706:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	605a      	str	r2, [r3, #4]
            break;
 800f70e:	e022      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800f710:	4b13      	ldr	r3, [pc, #76]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f712:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f716:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	711a      	strb	r2, [r3, #4]
            break;
 800f71e:	e01a      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800f720:	4b0f      	ldr	r3, [pc, #60]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f722:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f726:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	605a      	str	r2, [r3, #4]
            break;
 800f72e:	e012      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 800f730:	f7fe ffda 	bl	800e6e8 <GetCtxs>
 800f734:	4602      	mov	r2, r0
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	605a      	str	r2, [r3, #4]
            break;
 800f73a:	e00c      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800f73c:	4b08      	ldr	r3, [pc, #32]	@ (800f760 <LoRaMacMibGetRequestConfirm+0x348>)
 800f73e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	605a      	str	r2, [r3, #4]
            break;
 800f748:	e005      	b.n	800f756 <LoRaMacMibGetRequestConfirm+0x33e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f001 fa1a 	bl	8010b84 <LoRaMacClassBMibGetRequestConfirm>
 800f750:	4603      	mov	r3, r0
 800f752:	75fb      	strb	r3, [r7, #23]
            break;
 800f754:	bf00      	nop
        }
    }
    return status;
 800f756:	7dfb      	ldrb	r3, [r7, #23]
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3718      	adds	r7, #24
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	200014d0 	.word	0x200014d0

0800f764 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800f764:	b590      	push	{r4, r7, lr}
 800f766:	b089      	sub	sp, #36	@ 0x24
 800f768:	af02      	add	r7, sp, #8
 800f76a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f76c:	2300      	movs	r3, #0
 800f76e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d102      	bne.n	800f77c <LoRaMacMibSetRequestConfirm+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f776:	2303      	movs	r3, #3
 800f778:	f000 bcc0 	b.w	80100fc <LoRaMacMibSetRequestConfirm+0x998>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800f77c:	4bb8      	ldr	r3, [pc, #736]	@ (800fa60 <LoRaMacMibSetRequestConfirm+0x2fc>)
 800f77e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f782:	f003 0302 	and.w	r3, r3, #2
 800f786:	2b00      	cmp	r3, #0
 800f788:	d002      	beq.n	800f790 <LoRaMacMibSetRequestConfirm+0x2c>
    {
        return LORAMAC_STATUS_BUSY;
 800f78a:	2301      	movs	r3, #1
 800f78c:	f000 bcb6 	b.w	80100fc <LoRaMacMibSetRequestConfirm+0x998>
    }

    switch( mibSet->Type )
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	2b35      	cmp	r3, #53	@ 0x35
 800f796:	f200 846f 	bhi.w	8010078 <LoRaMacMibSetRequestConfirm+0x914>
 800f79a:	a201      	add	r2, pc, #4	@ (adr r2, 800f7a0 <LoRaMacMibSetRequestConfirm+0x3c>)
 800f79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a0:	0800f879 	.word	0x0800f879
 800f7a4:	0800f88b 	.word	0x0800f88b
 800f7a8:	0800f8ad 	.word	0x0800f8ad
 800f7ac:	0800f8c5 	.word	0x0800f8c5
 800f7b0:	0800f8dd 	.word	0x0800f8dd
 800f7b4:	0800f8ef 	.word	0x0800f8ef
 800f7b8:	0800f8fd 	.word	0x0800f8fd
 800f7bc:	0800f90b 	.word	0x0800f90b
 800f7c0:	0800f931 	.word	0x0800f931
 800f7c4:	0800f957 	.word	0x0800f957
 800f7c8:	0800f97d 	.word	0x0800f97d
 800f7cc:	0800f9a3 	.word	0x0800f9a3
 800f7d0:	0800f9c9 	.word	0x0800f9c9
 800f7d4:	0800f9ef 	.word	0x0800f9ef
 800f7d8:	0800fa15 	.word	0x0800fa15
 800f7dc:	0800fa3b 	.word	0x0800fa3b
 800f7e0:	0800fa65 	.word	0x0800fa65
 800f7e4:	0800fa8b 	.word	0x0800fa8b
 800f7e8:	0800fab1 	.word	0x0800fab1
 800f7ec:	0800fad7 	.word	0x0800fad7
 800f7f0:	0800fafd 	.word	0x0800fafd
 800f7f4:	0800fb23 	.word	0x0800fb23
 800f7f8:	0800fb49 	.word	0x0800fb49
 800f7fc:	0800fb6f 	.word	0x0800fb6f
 800f800:	0800fb95 	.word	0x0800fb95
 800f804:	0800fbbb 	.word	0x0800fbbb
 800f808:	0800fbe1 	.word	0x0800fbe1
 800f80c:	0800fc07 	.word	0x0800fc07
 800f810:	0800fc2d 	.word	0x0800fc2d
 800f814:	0800fc53 	.word	0x0800fc53
 800f818:	0800fc75 	.word	0x0800fc75
 800f81c:	08010079 	.word	0x08010079
 800f820:	0800fc85 	.word	0x0800fc85
 800f824:	0800fcd1 	.word	0x0800fcd1
 800f828:	0800fd1b 	.word	0x0800fd1b
 800f82c:	0800fdc1 	.word	0x0800fdc1
 800f830:	0800fe3d 	.word	0x0800fe3d
 800f834:	0800fe0b 	.word	0x0800fe0b
 800f838:	0800fe6f 	.word	0x0800fe6f
 800f83c:	0800fe95 	.word	0x0800fe95
 800f840:	0800fea5 	.word	0x0800fea5
 800f844:	0800feb5 	.word	0x0800feb5
 800f848:	0800fec5 	.word	0x0800fec5
 800f84c:	0800fed5 	.word	0x0800fed5
 800f850:	0800fee5 	.word	0x0800fee5
 800f854:	0800ff29 	.word	0x0800ff29
 800f858:	0800ffa3 	.word	0x0800ffa3
 800f85c:	0800ff6d 	.word	0x0800ff6d
 800f860:	0800ffdb 	.word	0x0800ffdb
 800f864:	0800fff5 	.word	0x0800fff5
 800f868:	0801000f 	.word	0x0801000f
 800f86c:	0801001f 	.word	0x0801001f
 800f870:	0801002d 	.word	0x0801002d
 800f874:	0801004b 	.word	0x0801004b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	791b      	ldrb	r3, [r3, #4]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fd fa1b 	bl	800ccb8 <SwitchClass>
 800f882:	4603      	mov	r3, r0
 800f884:	75fb      	strb	r3, [r7, #23]
            break;
 800f886:	f000 bc34 	b.w	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	791b      	ldrb	r3, [r3, #4]
 800f88e:	2b02      	cmp	r3, #2
 800f890:	d008      	beq.n	800f8a4 <LoRaMacMibSetRequestConfirm+0x140>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800f892:	4b73      	ldr	r3, [pc, #460]	@ (800fa60 <LoRaMacMibSetRequestConfirm+0x2fc>)
 800f894:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	7912      	ldrb	r2, [r2, #4]
 800f89c:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f8a0:	f000 bc27 	b.w	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f8a4:	2303      	movs	r3, #3
 800f8a6:	75fb      	strb	r3, [r7, #23]
            break;
 800f8a8:	f000 bc23 	b.w	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7f8 fd5f 	bl	8008374 <SecureElementSetDevEui>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f000 83e3 	beq.w	8010084 <LoRaMacMibSetRequestConfirm+0x920>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f8be:	2303      	movs	r3, #3
 800f8c0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f8c2:	e3df      	b.n	8010084 <LoRaMacMibSetRequestConfirm+0x920>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7f8 fd77 	bl	80083bc <SecureElementSetJoinEui>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	f000 83d9 	beq.w	8010088 <LoRaMacMibSetRequestConfirm+0x924>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f8d6:	2303      	movs	r3, #3
 800f8d8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f8da:	e3d5      	b.n	8010088 <LoRaMacMibSetRequestConfirm+0x924>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800f8dc:	4b60      	ldr	r3, [pc, #384]	@ (800fa60 <LoRaMacMibSetRequestConfirm+0x2fc>)
 800f8de:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	7912      	ldrb	r2, [r2, #4]
 800f8e6:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
            break;
 800f8ea:	f000 bc02 	b.w	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800f8ee:	4b5c      	ldr	r3, [pc, #368]	@ (800fa60 <LoRaMacMibSetRequestConfirm+0x2fc>)
 800f8f0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	6852      	ldr	r2, [r2, #4]
 800f8f8:	649a      	str	r2, [r3, #72]	@ 0x48
            break;
 800f8fa:	e3fa      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800f8fc:	4b58      	ldr	r3, [pc, #352]	@ (800fa60 <LoRaMacMibSetRequestConfirm+0x2fc>)
 800f8fe:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	6852      	ldr	r2, [r2, #4]
 800f906:	64da      	str	r2, [r3, #76]	@ 0x4c
            break;
 800f908:	e3f3      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_GEN_APP_KEY:
        {
            if( mibSet->Param.GenAppKey != NULL )
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00b      	beq.n	800f92a <LoRaMacMibSetRequestConfirm+0x1c6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	4619      	mov	r1, r3
 800f918:	2001      	movs	r0, #1
 800f91a:	f002 fad9 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800f91e:	4603      	mov	r3, r0
 800f920:	2b00      	cmp	r3, #0
 800f922:	f000 83b3 	beq.w	801008c <LoRaMacMibSetRequestConfirm+0x928>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f926:	2311      	movs	r3, #17
 800f928:	e3e8      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f92a:	2303      	movs	r3, #3
 800f92c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f92e:	e3ad      	b.n	801008c <LoRaMacMibSetRequestConfirm+0x928>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00b      	beq.n	800f950 <LoRaMacMibSetRequestConfirm+0x1ec>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	4619      	mov	r1, r3
 800f93e:	2000      	movs	r0, #0
 800f940:	f002 fac6 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800f944:	4603      	mov	r3, r0
 800f946:	2b00      	cmp	r3, #0
 800f948:	f000 83a2 	beq.w	8010090 <LoRaMacMibSetRequestConfirm+0x92c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f94c:	2311      	movs	r3, #17
 800f94e:	e3d5      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f950:	2303      	movs	r3, #3
 800f952:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f954:	e39c      	b.n	8010090 <LoRaMacMibSetRequestConfirm+0x92c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d00b      	beq.n	800f976 <LoRaMacMibSetRequestConfirm+0x212>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	4619      	mov	r1, r3
 800f964:	2002      	movs	r0, #2
 800f966:	f002 fab3 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800f96a:	4603      	mov	r3, r0
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	f000 8391 	beq.w	8010094 <LoRaMacMibSetRequestConfirm+0x930>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f972:	2311      	movs	r3, #17
 800f974:	e3c2      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f976:	2303      	movs	r3, #3
 800f978:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f97a:	e38b      	b.n	8010094 <LoRaMacMibSetRequestConfirm+0x930>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d00b      	beq.n	800f99c <LoRaMacMibSetRequestConfirm+0x238>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	4619      	mov	r1, r3
 800f98a:	2003      	movs	r0, #3
 800f98c:	f002 faa0 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	f000 8380 	beq.w	8010098 <LoRaMacMibSetRequestConfirm+0x934>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f998:	2311      	movs	r3, #17
 800f99a:	e3af      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f99c:	2303      	movs	r3, #3
 800f99e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f9a0:	e37a      	b.n	8010098 <LoRaMacMibSetRequestConfirm+0x934>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00b      	beq.n	800f9c2 <LoRaMacMibSetRequestConfirm+0x25e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	2004      	movs	r0, #4
 800f9b2:	f002 fa8d 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f000 836f 	beq.w	801009c <LoRaMacMibSetRequestConfirm+0x938>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f9be:	2311      	movs	r3, #17
 800f9c0:	e39c      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9c2:	2303      	movs	r3, #3
 800f9c4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f9c6:	e369      	b.n	801009c <LoRaMacMibSetRequestConfirm+0x938>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d00b      	beq.n	800f9e8 <LoRaMacMibSetRequestConfirm+0x284>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	2005      	movs	r0, #5
 800f9d8:	f002 fa7a 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	f000 835e 	beq.w	80100a0 <LoRaMacMibSetRequestConfirm+0x93c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f9e4:	2311      	movs	r3, #17
 800f9e6:	e389      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9e8:	2303      	movs	r3, #3
 800f9ea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f9ec:	e358      	b.n	80100a0 <LoRaMacMibSetRequestConfirm+0x93c>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d00b      	beq.n	800fa0e <LoRaMacMibSetRequestConfirm+0x2aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	2006      	movs	r0, #6
 800f9fe:	f002 fa67 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	f000 834d 	beq.w	80100a4 <LoRaMacMibSetRequestConfirm+0x940>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fa0a:	2311      	movs	r3, #17
 800fa0c:	e376      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa0e:	2303      	movs	r3, #3
 800fa10:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fa12:	e347      	b.n	80100a4 <LoRaMacMibSetRequestConfirm+0x940>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d00b      	beq.n	800fa34 <LoRaMacMibSetRequestConfirm+0x2d0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	4619      	mov	r1, r3
 800fa22:	2007      	movs	r0, #7
 800fa24:	f002 fa54 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 833c 	beq.w	80100a8 <LoRaMacMibSetRequestConfirm+0x944>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fa30:	2311      	movs	r3, #17
 800fa32:	e363      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa34:	2303      	movs	r3, #3
 800fa36:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fa38:	e336      	b.n	80100a8 <LoRaMacMibSetRequestConfirm+0x944>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00b      	beq.n	800fa5a <LoRaMacMibSetRequestConfirm+0x2f6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	4619      	mov	r1, r3
 800fa48:	2008      	movs	r0, #8
 800fa4a:	f002 fa41 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f000 832b 	beq.w	80100ac <LoRaMacMibSetRequestConfirm+0x948>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fa56:	2311      	movs	r3, #17
 800fa58:	e350      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa5a:	2303      	movs	r3, #3
 800fa5c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fa5e:	e325      	b.n	80100ac <LoRaMacMibSetRequestConfirm+0x948>
 800fa60:	200014d0 	.word	0x200014d0
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d00b      	beq.n	800fa84 <LoRaMacMibSetRequestConfirm+0x320>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	4619      	mov	r1, r3
 800fa72:	207f      	movs	r0, #127	@ 0x7f
 800fa74:	f002 fa2c 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	f000 8318 	beq.w	80100b0 <LoRaMacMibSetRequestConfirm+0x94c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fa80:	2311      	movs	r3, #17
 800fa82:	e33b      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa84:	2303      	movs	r3, #3
 800fa86:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fa88:	e312      	b.n	80100b0 <LoRaMacMibSetRequestConfirm+0x94c>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00b      	beq.n	800faaa <LoRaMacMibSetRequestConfirm+0x346>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	4619      	mov	r1, r3
 800fa98:	2080      	movs	r0, #128	@ 0x80
 800fa9a:	f002 fa19 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	f000 8307 	beq.w	80100b4 <LoRaMacMibSetRequestConfirm+0x950>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800faa6:	2311      	movs	r3, #17
 800faa8:	e328      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800faaa:	2303      	movs	r3, #3
 800faac:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800faae:	e301      	b.n	80100b4 <LoRaMacMibSetRequestConfirm+0x950>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d00b      	beq.n	800fad0 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	4619      	mov	r1, r3
 800fabe:	2081      	movs	r0, #129	@ 0x81
 800fac0:	f002 fa06 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	f000 82f6 	beq.w	80100b8 <LoRaMacMibSetRequestConfirm+0x954>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800facc:	2311      	movs	r3, #17
 800face:	e315      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fad0:	2303      	movs	r3, #3
 800fad2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fad4:	e2f0      	b.n	80100b8 <LoRaMacMibSetRequestConfirm+0x954>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d00b      	beq.n	800faf6 <LoRaMacMibSetRequestConfirm+0x392>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	4619      	mov	r1, r3
 800fae4:	2082      	movs	r0, #130	@ 0x82
 800fae6:	f002 f9f3 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	f000 82e5 	beq.w	80100bc <LoRaMacMibSetRequestConfirm+0x958>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800faf2:	2311      	movs	r3, #17
 800faf4:	e302      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800faf6:	2303      	movs	r3, #3
 800faf8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fafa:	e2df      	b.n	80100bc <LoRaMacMibSetRequestConfirm+0x958>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d00b      	beq.n	800fb1c <LoRaMacMibSetRequestConfirm+0x3b8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	4619      	mov	r1, r3
 800fb0a:	2083      	movs	r0, #131	@ 0x83
 800fb0c:	f002 f9e0 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f000 82d4 	beq.w	80100c0 <LoRaMacMibSetRequestConfirm+0x95c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fb18:	2311      	movs	r3, #17
 800fb1a:	e2ef      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb1c:	2303      	movs	r3, #3
 800fb1e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fb20:	e2ce      	b.n	80100c0 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00b      	beq.n	800fb42 <LoRaMacMibSetRequestConfirm+0x3de>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	4619      	mov	r1, r3
 800fb30:	2084      	movs	r0, #132	@ 0x84
 800fb32:	f002 f9cd 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	f000 82c3 	beq.w	80100c4 <LoRaMacMibSetRequestConfirm+0x960>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fb3e:	2311      	movs	r3, #17
 800fb40:	e2dc      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb42:	2303      	movs	r3, #3
 800fb44:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fb46:	e2bd      	b.n	80100c4 <LoRaMacMibSetRequestConfirm+0x960>
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00b      	beq.n	800fb68 <LoRaMacMibSetRequestConfirm+0x404>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	4619      	mov	r1, r3
 800fb56:	2085      	movs	r0, #133	@ 0x85
 800fb58:	f002 f9ba 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	f000 82b2 	beq.w	80100c8 <LoRaMacMibSetRequestConfirm+0x964>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fb64:	2311      	movs	r3, #17
 800fb66:	e2c9      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb68:	2303      	movs	r3, #3
 800fb6a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fb6c:	e2ac      	b.n	80100c8 <LoRaMacMibSetRequestConfirm+0x964>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d00b      	beq.n	800fb8e <LoRaMacMibSetRequestConfirm+0x42a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	2086      	movs	r0, #134	@ 0x86
 800fb7e:	f002 f9a7 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	f000 82a1 	beq.w	80100cc <LoRaMacMibSetRequestConfirm+0x968>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fb8a:	2311      	movs	r3, #17
 800fb8c:	e2b6      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb8e:	2303      	movs	r3, #3
 800fb90:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fb92:	e29b      	b.n	80100cc <LoRaMacMibSetRequestConfirm+0x968>
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d00b      	beq.n	800fbb4 <LoRaMacMibSetRequestConfirm+0x450>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	4619      	mov	r1, r3
 800fba2:	2087      	movs	r0, #135	@ 0x87
 800fba4:	f002 f994 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	f000 8290 	beq.w	80100d0 <LoRaMacMibSetRequestConfirm+0x96c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fbb0:	2311      	movs	r3, #17
 800fbb2:	e2a3      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fbb4:	2303      	movs	r3, #3
 800fbb6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fbb8:	e28a      	b.n	80100d0 <LoRaMacMibSetRequestConfirm+0x96c>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d00b      	beq.n	800fbda <LoRaMacMibSetRequestConfirm+0x476>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	2088      	movs	r0, #136	@ 0x88
 800fbca:	f002 f981 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	f000 827f 	beq.w	80100d4 <LoRaMacMibSetRequestConfirm+0x970>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fbd6:	2311      	movs	r3, #17
 800fbd8:	e290      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fbda:	2303      	movs	r3, #3
 800fbdc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fbde:	e279      	b.n	80100d4 <LoRaMacMibSetRequestConfirm+0x970>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d00b      	beq.n	800fc00 <LoRaMacMibSetRequestConfirm+0x49c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	4619      	mov	r1, r3
 800fbee:	2089      	movs	r0, #137	@ 0x89
 800fbf0:	f002 f96e 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f000 826e 	beq.w	80100d8 <LoRaMacMibSetRequestConfirm+0x974>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fbfc:	2311      	movs	r3, #17
 800fbfe:	e27d      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fc00:	2303      	movs	r3, #3
 800fc02:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fc04:	e268      	b.n	80100d8 <LoRaMacMibSetRequestConfirm+0x974>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00b      	beq.n	800fc26 <LoRaMacMibSetRequestConfirm+0x4c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	4619      	mov	r1, r3
 800fc14:	208a      	movs	r0, #138	@ 0x8a
 800fc16:	f002 f95b 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	f000 825d 	beq.w	80100dc <LoRaMacMibSetRequestConfirm+0x978>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fc22:	2311      	movs	r3, #17
 800fc24:	e26a      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fc26:	2303      	movs	r3, #3
 800fc28:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fc2a:	e257      	b.n	80100dc <LoRaMacMibSetRequestConfirm+0x978>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d00b      	beq.n	800fc4c <LoRaMacMibSetRequestConfirm+0x4e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	4619      	mov	r1, r3
 800fc3a:	208b      	movs	r0, #139	@ 0x8b
 800fc3c:	f002 f948 	bl	8011ed0 <LoRaMacCryptoSetKey>
 800fc40:	4603      	mov	r3, r0
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	f000 824c 	beq.w	80100e0 <LoRaMacMibSetRequestConfirm+0x97c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800fc48:	2311      	movs	r3, #17
 800fc4a:	e257      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fc4c:	2303      	movs	r3, #3
 800fc4e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fc50:	e246      	b.n	80100e0 <LoRaMacMibSetRequestConfirm+0x97c>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800fc52:	4bb2      	ldr	r3, [pc, #712]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fc54:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	7912      	ldrb	r2, [r2, #4]
 800fc5c:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800fc60:	4baf      	ldr	r3, [pc, #700]	@ (800ff20 <LoRaMacMibSetRequestConfirm+0x7bc>)
 800fc62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fc64:	4aad      	ldr	r2, [pc, #692]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fc66:	f8d2 24c8 	ldr.w	r2, [r2, #1224]	@ 0x4c8
 800fc6a:	f892 20f1 	ldrb.w	r2, [r2, #241]	@ 0xf1
 800fc6e:	4610      	mov	r0, r2
 800fc70:	4798      	blx	r3
            break;
 800fc72:	e23e      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800fc74:	4ba9      	ldr	r3, [pc, #676]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fc76:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	7912      	ldrb	r2, [r2, #4]
 800fc7e:	f883 213f 	strb.w	r2, [r3, #319]	@ 0x13f
            break;
 800fc82:	e236      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	7a1b      	ldrb	r3, [r3, #8]
 800fc88:	b25b      	sxtb	r3, r3
 800fc8a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fc8c:	4ba3      	ldr	r3, [pc, #652]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fc8e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fc92:	f893 312d 	ldrb.w	r3, [r3, #301]	@ 0x12d
 800fc96:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800fc98:	4ba0      	ldr	r3, [pc, #640]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fc9a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	f107 0108 	add.w	r1, r7, #8
 800fca4:	2207      	movs	r2, #7
 800fca6:	4618      	mov	r0, r3
 800fca8:	f003 f921 	bl	8012eee <RegionVerify>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d00b      	beq.n	800fcca <LoRaMacMibSetRequestConfirm+0x566>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800fcb2:	4b9a      	ldr	r3, [pc, #616]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fcb4:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fcbe:	3204      	adds	r2, #4
 800fcc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fcc4:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fcc8:	e213      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fcca:	2303      	movs	r3, #3
 800fccc:	75fb      	strb	r3, [r7, #23]
            break;
 800fcce:	e210      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	7a1b      	ldrb	r3, [r3, #8]
 800fcd4:	b25b      	sxtb	r3, r3
 800fcd6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fcd8:	4b90      	ldr	r3, [pc, #576]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fcda:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fcde:	f893 312d 	ldrb.w	r3, [r3, #301]	@ 0x12d
 800fce2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800fce4:	4b8d      	ldr	r3, [pc, #564]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fce6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	f107 0108 	add.w	r1, r7, #8
 800fcf0:	2207      	movs	r2, #7
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f003 f8fb 	bl	8012eee <RegionVerify>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d00a      	beq.n	800fd14 <LoRaMacMibSetRequestConfirm+0x5b0>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800fcfe:	4b87      	ldr	r3, [pc, #540]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fd00:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	3328      	adds	r3, #40	@ 0x28
 800fd08:	3204      	adds	r2, #4
 800fd0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd0e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fd12:	e1ee      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fd14:	2303      	movs	r3, #3
 800fd16:	75fb      	strb	r3, [r7, #23]
            break;
 800fd18:	e1eb      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	7a1b      	ldrb	r3, [r3, #8]
 800fd1e:	b25b      	sxtb	r3, r3
 800fd20:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fd22:	4b7e      	ldr	r3, [pc, #504]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fd24:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fd28:	f893 312d 	ldrb.w	r3, [r3, #301]	@ 0x12d
 800fd2c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800fd2e:	4b7b      	ldr	r3, [pc, #492]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fd30:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	f107 0108 	add.w	r1, r7, #8
 800fd3a:	2207      	movs	r2, #7
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f003 f8d6 	bl	8012eee <RegionVerify>
 800fd42:	4603      	mov	r3, r0
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d038      	beq.n	800fdba <LoRaMacMibSetRequestConfirm+0x656>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800fd48:	4b74      	ldr	r3, [pc, #464]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fd4a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800fd54:	3204      	adds	r2, #4
 800fd56:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd5a:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800fd5e:	4b6f      	ldr	r3, [pc, #444]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fd60:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fd64:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800fd68:	2b02      	cmp	r3, #2
 800fd6a:	f040 81bb 	bne.w	80100e4 <LoRaMacMibSetRequestConfirm+0x980>
 800fd6e:	4b6b      	ldr	r3, [pc, #428]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fd70:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fd74:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	f000 81b3 	beq.w	80100e4 <LoRaMacMibSetRequestConfirm+0x980>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800fd7e:	4b68      	ldr	r3, [pc, #416]	@ (800ff20 <LoRaMacMibSetRequestConfirm+0x7bc>)
 800fd80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd82:	4798      	blx	r3
                    // Compute RxC windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800fd84:	4b65      	ldr	r3, [pc, #404]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fd86:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fd8a:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800fd8c:	4b63      	ldr	r3, [pc, #396]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fd8e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fd92:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800fd96:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800fd98:	4b60      	ldr	r3, [pc, #384]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fd9a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800fd9e:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800fda2:	4b5e      	ldr	r3, [pc, #376]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fda4:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800fda8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800fdac:	4c5d      	ldr	r4, [pc, #372]	@ (800ff24 <LoRaMacMibSetRequestConfirm+0x7c0>)
 800fdae:	9400      	str	r4, [sp, #0]
 800fdb0:	f003 f8d9 	bl	8012f66 <RegionComputeRxWindowParameters>
                                                     &MacCtx.RxWindowCConfig );
                    OpenContinuousRxCWindow( );
 800fdb4:	f7fe fa30 	bl	800e218 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fdb8:	e194      	b.n	80100e4 <LoRaMacMibSetRequestConfirm+0x980>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fdba:	2303      	movs	r3, #3
 800fdbc:	75fb      	strb	r3, [r7, #23]
            break;
 800fdbe:	e191      	b.n	80100e4 <LoRaMacMibSetRequestConfirm+0x980>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	7a1b      	ldrb	r3, [r3, #8]
 800fdc4:	b25b      	sxtb	r3, r3
 800fdc6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fdc8:	4b54      	ldr	r3, [pc, #336]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fdca:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fdce:	f893 312d 	ldrb.w	r3, [r3, #301]	@ 0x12d
 800fdd2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800fdd4:	4b51      	ldr	r3, [pc, #324]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fdd6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	f107 0108 	add.w	r1, r7, #8
 800fde0:	2207      	movs	r2, #7
 800fde2:	4618      	mov	r0, r3
 800fde4:	f003 f883 	bl	8012eee <RegionVerify>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d00a      	beq.n	800fe04 <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800fdee:	4b4b      	ldr	r3, [pc, #300]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fdf0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	3330      	adds	r3, #48	@ 0x30
 800fdf8:	3204      	adds	r2, #4
 800fdfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdfe:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fe02:	e176      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fe04:	2303      	movs	r3, #3
 800fe06:	75fb      	strb	r3, [r7, #23]
            break;
 800fe08:	e173      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800fe10:	2301      	movs	r3, #1
 800fe12:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800fe14:	4b41      	ldr	r3, [pc, #260]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fe16:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	f107 020c 	add.w	r2, r7, #12
 800fe20:	4611      	mov	r1, r2
 800fe22:	4618      	mov	r0, r3
 800fe24:	f003 f88c 	bl	8012f40 <RegionChanMaskSet>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	f083 0301 	eor.w	r3, r3, #1
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	f000 8159 	beq.w	80100e8 <LoRaMacMibSetRequestConfirm+0x984>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fe36:	2303      	movs	r3, #3
 800fe38:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fe3a:	e155      	b.n	80100e8 <LoRaMacMibSetRequestConfirm+0x984>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800fe42:	2300      	movs	r3, #0
 800fe44:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800fe46:	4b35      	ldr	r3, [pc, #212]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fe48:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	f107 020c 	add.w	r2, r7, #12
 800fe52:	4611      	mov	r1, r2
 800fe54:	4618      	mov	r0, r3
 800fe56:	f003 f873 	bl	8012f40 <RegionChanMaskSet>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	f083 0301 	eor.w	r3, r3, #1
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f000 8142 	beq.w	80100ec <LoRaMacMibSetRequestConfirm+0x988>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fe68:	2303      	movs	r3, #3
 800fe6a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800fe6c:	e13e      	b.n	80100ec <LoRaMacMibSetRequestConfirm+0x988>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	791b      	ldrb	r3, [r3, #4]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00b      	beq.n	800fe8e <LoRaMacMibSetRequestConfirm+0x72a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800fe7a:	2b0f      	cmp	r3, #15
 800fe7c:	d807      	bhi.n	800fe8e <LoRaMacMibSetRequestConfirm+0x72a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800fe7e:	4b27      	ldr	r3, [pc, #156]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fe80:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	7912      	ldrb	r2, [r2, #4]
 800fe88:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800fe8c:	e131      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fe8e:	2303      	movs	r3, #3
 800fe90:	75fb      	strb	r3, [r7, #23]
            break;
 800fe92:	e12e      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800fe94:	4b21      	ldr	r3, [pc, #132]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fe96:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fe9a:	687a      	ldr	r2, [r7, #4]
 800fe9c:	6852      	ldr	r2, [r2, #4]
 800fe9e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
            break;
 800fea2:	e126      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800fea4:	4b1d      	ldr	r3, [pc, #116]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fea6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800feaa:	687a      	ldr	r2, [r7, #4]
 800feac:	6852      	ldr	r2, [r2, #4]
 800feae:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            break;
 800feb2:	e11e      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800feb4:	4b19      	ldr	r3, [pc, #100]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800feb6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800feba:	687a      	ldr	r2, [r7, #4]
 800febc:	6852      	ldr	r2, [r2, #4]
 800febe:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            break;
 800fec2:	e116      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800fec4:	4b15      	ldr	r3, [pc, #84]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fec6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	6852      	ldr	r2, [r2, #4]
 800fece:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            break;
 800fed2:	e10e      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800fed4:	4b11      	ldr	r3, [pc, #68]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800fed6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	6852      	ldr	r2, [r2, #4]
 800fede:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
            break;
 800fee2:	e106      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800feea:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800feec:	4b0b      	ldr	r3, [pc, #44]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800feee:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	f107 0108 	add.w	r1, r7, #8
 800fef8:	2206      	movs	r2, #6
 800fefa:	4618      	mov	r0, r3
 800fefc:	f002 fff7 	bl	8012eee <RegionVerify>
 800ff00:	4603      	mov	r3, r0
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d006      	beq.n	800ff14 <LoRaMacMibSetRequestConfirm+0x7b0>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ff06:	4b05      	ldr	r3, [pc, #20]	@ (800ff1c <LoRaMacMibSetRequestConfirm+0x7b8>)
 800ff08:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ff0c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800ff10:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ff12:	e0ee      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ff14:	2303      	movs	r3, #3
 800ff16:	75fb      	strb	r3, [r7, #23]
            break;
 800ff18:	e0eb      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
 800ff1a:	bf00      	nop
 800ff1c:	200014d0 	.word	0x200014d0
 800ff20:	0802113c 	.word	0x0802113c
 800ff24:	200018d0 	.word	0x200018d0
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ff2e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ff30:	4b74      	ldr	r3, [pc, #464]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 800ff32:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ff36:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800ff3a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800ff3c:	4b71      	ldr	r3, [pc, #452]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 800ff3e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	f107 0108 	add.w	r1, r7, #8
 800ff48:	2205      	movs	r2, #5
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f002 ffcf 	bl	8012eee <RegionVerify>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d007      	beq.n	800ff66 <LoRaMacMibSetRequestConfirm+0x802>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ff56:	4b6b      	ldr	r3, [pc, #428]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 800ff58:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ff5c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800ff60:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ff64:	e0c5      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ff66:	2303      	movs	r3, #3
 800ff68:	75fb      	strb	r3, [r7, #23]
            break;
 800ff6a:	e0c2      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ff72:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800ff74:	4b63      	ldr	r3, [pc, #396]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 800ff76:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	f107 0108 	add.w	r1, r7, #8
 800ff80:	220a      	movs	r2, #10
 800ff82:	4618      	mov	r0, r3
 800ff84:	f002 ffb3 	bl	8012eee <RegionVerify>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d006      	beq.n	800ff9c <LoRaMacMibSetRequestConfirm+0x838>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800ff8e:	4b5d      	ldr	r3, [pc, #372]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 800ff90:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ff94:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800ff98:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ff9a:	e0aa      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ff9c:	2303      	movs	r3, #3
 800ff9e:	75fb      	strb	r3, [r7, #23]
            break;
 800ffa0:	e0a7      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ffa8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800ffaa:	4b56      	ldr	r3, [pc, #344]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 800ffac:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	f107 0108 	add.w	r1, r7, #8
 800ffb6:	2209      	movs	r2, #9
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f002 ff98 	bl	8012eee <RegionVerify>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d007      	beq.n	800ffd4 <LoRaMacMibSetRequestConfirm+0x870>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800ffc4:	4b4f      	ldr	r3, [pc, #316]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 800ffc6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ffca:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800ffce:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ffd2:	e08e      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ffd4:	2303      	movs	r3, #3
 800ffd6:	75fb      	strb	r3, [r7, #23]
            break;
 800ffd8:	e08b      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800ffda:	4b4a      	ldr	r3, [pc, #296]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 800ffdc:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	6852      	ldr	r2, [r2, #4]
 800ffe4:	609a      	str	r2, [r3, #8]
 800ffe6:	4a47      	ldr	r2, [pc, #284]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 800ffe8:	f8d2 24c8 	ldr.w	r2, [r2, #1224]	@ 0x4c8
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
            break;
 800fff2:	e07e      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800fff4:	4b43      	ldr	r3, [pc, #268]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 800fff6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	7912      	ldrb	r2, [r2, #4]
 800fffe:	731a      	strb	r2, [r3, #12]
 8010000:	4a40      	ldr	r2, [pc, #256]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 8010002:	f8d2 24c8 	ldr.w	r2, [r2, #1224]	@ 0x4c8
 8010006:	7b1b      	ldrb	r3, [r3, #12]
 8010008:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
            break;
 801000c:	e071      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801000e:	4b3d      	ldr	r3, [pc, #244]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 8010010:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	6852      	ldr	r2, [r2, #4]
 8010018:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
            break;
 801001c:	e069      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801001e:	4b39      	ldr	r3, [pc, #228]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 8010020:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	6852      	ldr	r2, [r2, #4]
 8010028:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 801002a:	e062      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d007      	beq.n	8010044 <LoRaMacMibSetRequestConfirm+0x8e0>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	4618      	mov	r0, r3
 801003a:	f7fe fba3 	bl	800e784 <RestoreCtxs>
 801003e:	4603      	mov	r3, r0
 8010040:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010042:	e056      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010044:	2303      	movs	r3, #3
 8010046:	75fb      	strb	r3, [r7, #23]
            break;
 8010048:	e053      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	799b      	ldrb	r3, [r3, #6]
 801004e:	2b01      	cmp	r3, #1
 8010050:	d80f      	bhi.n	8010072 <LoRaMacMibSetRequestConfirm+0x90e>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8010052:	4b2c      	ldr	r3, [pc, #176]	@ (8010104 <LoRaMacMibSetRequestConfirm+0x9a0>)
 8010054:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	6852      	ldr	r2, [r2, #4]
 801005c:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6858      	ldr	r0, [r3, #4]
 8010064:	f001 fe44 	bl	8011cf0 <LoRaMacCryptoSetLrWanVersion>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d040      	beq.n	80100f0 <LoRaMacMibSetRequestConfirm+0x98c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801006e:	2311      	movs	r3, #17
 8010070:	e044      	b.n	80100fc <LoRaMacMibSetRequestConfirm+0x998>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010072:	2303      	movs	r3, #3
 8010074:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010076:	e03b      	b.n	80100f0 <LoRaMacMibSetRequestConfirm+0x98c>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f000 fd8e 	bl	8010b9a <LoRaMacMibClassBSetRequestConfirm>
 801007e:	4603      	mov	r3, r0
 8010080:	75fb      	strb	r3, [r7, #23]
            break;
 8010082:	e036      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 8010084:	bf00      	nop
 8010086:	e034      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 8010088:	bf00      	nop
 801008a:	e032      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 801008c:	bf00      	nop
 801008e:	e030      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 8010090:	bf00      	nop
 8010092:	e02e      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 8010094:	bf00      	nop
 8010096:	e02c      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 8010098:	bf00      	nop
 801009a:	e02a      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 801009c:	bf00      	nop
 801009e:	e028      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100a0:	bf00      	nop
 80100a2:	e026      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100a4:	bf00      	nop
 80100a6:	e024      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100a8:	bf00      	nop
 80100aa:	e022      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100ac:	bf00      	nop
 80100ae:	e020      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100b0:	bf00      	nop
 80100b2:	e01e      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100b4:	bf00      	nop
 80100b6:	e01c      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100b8:	bf00      	nop
 80100ba:	e01a      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100bc:	bf00      	nop
 80100be:	e018      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100c0:	bf00      	nop
 80100c2:	e016      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100c4:	bf00      	nop
 80100c6:	e014      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100c8:	bf00      	nop
 80100ca:	e012      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100cc:	bf00      	nop
 80100ce:	e010      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100d0:	bf00      	nop
 80100d2:	e00e      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100d4:	bf00      	nop
 80100d6:	e00c      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100d8:	bf00      	nop
 80100da:	e00a      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100dc:	bf00      	nop
 80100de:	e008      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100e0:	bf00      	nop
 80100e2:	e006      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100e4:	bf00      	nop
 80100e6:	e004      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100e8:	bf00      	nop
 80100ea:	e002      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100ec:	bf00      	nop
 80100ee:	e000      	b.n	80100f2 <LoRaMacMibSetRequestConfirm+0x98e>
            break;
 80100f0:	bf00      	nop
        }
    }
    EventRegionNvmCtxChanged( );
 80100f2:	f7fe fd2e 	bl	800eb52 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 80100f6:	f7fe fd25 	bl	800eb44 <EventMacNvmCtxChanged>
    return status;
 80100fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	371c      	adds	r7, #28
 8010100:	46bd      	mov	sp, r7
 8010102:	bd90      	pop	{r4, r7, pc}
 8010104:	200014d0 	.word	0x200014d0

08010108 <LoRaMacMcChannelSetup>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMcChannelSetup( McChannelParams_t *channel )
{
 8010108:	b5b0      	push	{r4, r5, r7, lr}
 801010a:	b084      	sub	sp, #16
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8010110:	4b30      	ldr	r3, [pc, #192]	@ (80101d4 <LoRaMacMcChannelSetup+0xcc>)
 8010112:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010116:	f003 0302 	and.w	r3, r3, #2
 801011a:	2b00      	cmp	r3, #0
 801011c:	d001      	beq.n	8010122 <LoRaMacMcChannelSetup+0x1a>
    {
        return LORAMAC_STATUS_BUSY;
 801011e:	2301      	movs	r3, #1
 8010120:	e054      	b.n	80101cc <LoRaMacMcChannelSetup+0xc4>
    }

    if( channel->GroupID >= LORAMAC_MAX_MC_CTX )
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	789b      	ldrb	r3, [r3, #2]
 8010126:	2b03      	cmp	r3, #3
 8010128:	d901      	bls.n	801012e <LoRaMacMcChannelSetup+0x26>
    {
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 801012a:	2316      	movs	r3, #22
 801012c:	e04e      	b.n	80101cc <LoRaMacMcChannelSetup+0xc4>
    }

    MacCtx.NvmCtx->MulticastChannelList[channel->GroupID].ChannelParams = *channel;
 801012e:	4b29      	ldr	r3, [pc, #164]	@ (80101d4 <LoRaMacMcChannelSetup+0xcc>)
 8010130:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	789b      	ldrb	r3, [r3, #2]
 8010138:	4619      	mov	r1, r3
 801013a:	460b      	mov	r3, r1
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	440b      	add	r3, r1
 8010140:	00db      	lsls	r3, r3, #3
 8010142:	4413      	add	r3, r2
 8010144:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4614      	mov	r4, r2
 801014c:	461d      	mov	r5, r3
 801014e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010152:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010156:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    const KeyIdentifier_t mcKeys[LORAMAC_MAX_MC_CTX] = { MC_KEY_0, MC_KEY_1, MC_KEY_2, MC_KEY_3 };
 801015a:	4b1f      	ldr	r3, [pc, #124]	@ (80101d8 <LoRaMacMcChannelSetup+0xd0>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	60fb      	str	r3, [r7, #12]
    if( LoRaMacCryptoSetKey( mcKeys[channel->GroupID], channel->McKeyE ) != LORAMAC_CRYPTO_SUCCESS )
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	789b      	ldrb	r3, [r3, #2]
 8010164:	3310      	adds	r3, #16
 8010166:	443b      	add	r3, r7
 8010168:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	4619      	mov	r1, r3
 8010172:	4610      	mov	r0, r2
 8010174:	f001 feac 	bl	8011ed0 <LoRaMacCryptoSetKey>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d001      	beq.n	8010182 <LoRaMacMcChannelSetup+0x7a>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801017e:	2311      	movs	r3, #17
 8010180:	e024      	b.n	80101cc <LoRaMacMcChannelSetup+0xc4>
    }

    if( LoRaMacCryptoDeriveMcSessionKeyPair( channel->GroupID, channel->Address ) != LORAMAC_CRYPTO_SUCCESS )
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	789a      	ldrb	r2, [r3, #2]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	4619      	mov	r1, r3
 801018c:	4610      	mov	r0, r2
 801018e:	f002 faa3 	bl	80126d8 <LoRaMacCryptoDeriveMcSessionKeyPair>
 8010192:	4603      	mov	r3, r0
 8010194:	2b00      	cmp	r3, #0
 8010196:	d001      	beq.n	801019c <LoRaMacMcChannelSetup+0x94>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010198:	2311      	movs	r3, #17
 801019a:	e017      	b.n	80101cc <LoRaMacMcChannelSetup+0xc4>
    }

    if( channel->Class == CLASS_B )
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d10e      	bne.n	80101c2 <LoRaMacMcChannelSetup+0xba>
    {
        // Calculate class b parameters
        LoRaMacClassBSetMulticastPeriodicity( &MacCtx.NvmCtx->MulticastChannelList[channel->GroupID] );
 80101a4:	4b0b      	ldr	r3, [pc, #44]	@ (80101d4 <LoRaMacMcChannelSetup+0xcc>)
 80101a6:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	@ 0x4c8
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	789b      	ldrb	r3, [r3, #2]
 80101ae:	4619      	mov	r1, r3
 80101b0:	460b      	mov	r3, r1
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	440b      	add	r3, r1
 80101b6:	00db      	lsls	r3, r3, #3
 80101b8:	3350      	adds	r3, #80	@ 0x50
 80101ba:	4413      	add	r3, r2
 80101bc:	4618      	mov	r0, r3
 80101be:	f000 fd43 	bl	8010c48 <LoRaMacClassBSetMulticastPeriodicity>
    }

    EventMacNvmCtxChanged( );
 80101c2:	f7fe fcbf 	bl	800eb44 <EventMacNvmCtxChanged>
    EventRegionNvmCtxChanged( );
 80101c6:	f7fe fcc4 	bl	800eb52 <EventRegionNvmCtxChanged>
    return LORAMAC_STATUS_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3710      	adds	r7, #16
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bdb0      	pop	{r4, r5, r7, pc}
 80101d4:	200014d0 	.word	0x200014d0
 80101d8:	08020ca0 	.word	0x08020ca0

080101dc <LoRaMacMcChannelDelete>:

LoRaMacStatus_t LoRaMacMcChannelDelete( AddressIdentifier_t groupID )
{
 80101dc:	b5b0      	push	{r4, r5, r7, lr}
 80101de:	b08a      	sub	sp, #40	@ 0x28
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	4603      	mov	r3, r0
 80101e4:	71fb      	strb	r3, [r7, #7]
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80101e6:	4b20      	ldr	r3, [pc, #128]	@ (8010268 <LoRaMacMcChannelDelete+0x8c>)
 80101e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80101ec:	f003 0302 	and.w	r3, r3, #2
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d001      	beq.n	80101f8 <LoRaMacMcChannelDelete+0x1c>
    {
        return LORAMAC_STATUS_BUSY;
 80101f4:	2301      	movs	r3, #1
 80101f6:	e033      	b.n	8010260 <LoRaMacMcChannelDelete+0x84>
    }

    if( ( groupID >= LORAMAC_MAX_MC_CTX ) || 
 80101f8:	79fb      	ldrb	r3, [r7, #7]
 80101fa:	2b03      	cmp	r3, #3
 80101fc:	d80f      	bhi.n	801021e <LoRaMacMcChannelDelete+0x42>
        ( MacCtx.NvmCtx->MulticastChannelList[groupID].ChannelParams.IsEnabled == false ) )
 80101fe:	4b1a      	ldr	r3, [pc, #104]	@ (8010268 <LoRaMacMcChannelDelete+0x8c>)
 8010200:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 8010204:	79fa      	ldrb	r2, [r7, #7]
 8010206:	4613      	mov	r3, r2
 8010208:	009b      	lsls	r3, r3, #2
 801020a:	4413      	add	r3, r2
 801020c:	00db      	lsls	r3, r3, #3
 801020e:	440b      	add	r3, r1
 8010210:	3351      	adds	r3, #81	@ 0x51
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	f083 0301 	eor.w	r3, r3, #1
 8010218:	b2db      	uxtb	r3, r3
    if( ( groupID >= LORAMAC_MAX_MC_CTX ) || 
 801021a:	2b00      	cmp	r3, #0
 801021c:	d001      	beq.n	8010222 <LoRaMacMcChannelDelete+0x46>
    {
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 801021e:	2316      	movs	r3, #22
 8010220:	e01e      	b.n	8010260 <LoRaMacMcChannelDelete+0x84>
    }

    McChannelParams_t channel;

    // Set all channel fields with 0
    memset1( ( uint8_t* )&channel, 0, sizeof( McChannelParams_t ) );
 8010222:	f107 030c 	add.w	r3, r7, #12
 8010226:	221c      	movs	r2, #28
 8010228:	2100      	movs	r1, #0
 801022a:	4618      	mov	r0, r3
 801022c:	f008 f8a8 	bl	8018380 <memset1>

    MacCtx.NvmCtx->MulticastChannelList[groupID].ChannelParams = channel;
 8010230:	4b0d      	ldr	r3, [pc, #52]	@ (8010268 <LoRaMacMcChannelDelete+0x8c>)
 8010232:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 8010236:	79fa      	ldrb	r2, [r7, #7]
 8010238:	4613      	mov	r3, r2
 801023a:	009b      	lsls	r3, r3, #2
 801023c:	4413      	add	r3, r2
 801023e:	00db      	lsls	r3, r3, #3
 8010240:	440b      	add	r3, r1
 8010242:	3350      	adds	r3, #80	@ 0x50
 8010244:	461d      	mov	r5, r3
 8010246:	f107 040c 	add.w	r4, r7, #12
 801024a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801024c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801024e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8010252:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    EventMacNvmCtxChanged( );
 8010256:	f7fe fc75 	bl	800eb44 <EventMacNvmCtxChanged>
    EventRegionNvmCtxChanged( );
 801025a:	f7fe fc7a 	bl	800eb52 <EventRegionNvmCtxChanged>
    return LORAMAC_STATUS_OK;
 801025e:	2300      	movs	r3, #0
}
 8010260:	4618      	mov	r0, r3
 8010262:	3728      	adds	r7, #40	@ 0x28
 8010264:	46bd      	mov	sp, r7
 8010266:	bdb0      	pop	{r4, r5, r7, pc}
 8010268:	200014d0 	.word	0x200014d0

0801026c <LoRaMacMcChannelSetupRxParams>:
    }
    return 0xFF;
}

LoRaMacStatus_t LoRaMacMcChannelSetupRxParams( AddressIdentifier_t groupID, McRxParams_t *rxParams, uint8_t *status )
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b086      	sub	sp, #24
 8010270:	af00      	add	r7, sp, #0
 8010272:	4603      	mov	r3, r0
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]
 8010278:	73fb      	strb	r3, [r7, #15]
   *status = 0x1C + ( groupID & 0x03 );
 801027a:	7bfb      	ldrb	r3, [r7, #15]
 801027c:	f003 0303 	and.w	r3, r3, #3
 8010280:	b2db      	uxtb	r3, r3
 8010282:	331c      	adds	r3, #28
 8010284:	b2da      	uxtb	r2, r3
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801028a:	4b4f      	ldr	r3, [pc, #316]	@ (80103c8 <LoRaMacMcChannelSetupRxParams+0x15c>)
 801028c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010290:	f003 0302 	and.w	r3, r3, #2
 8010294:	2b00      	cmp	r3, #0
 8010296:	d001      	beq.n	801029c <LoRaMacMcChannelSetupRxParams+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8010298:	2301      	movs	r3, #1
 801029a:	e090      	b.n	80103be <LoRaMacMcChannelSetupRxParams+0x152>
    }

    DeviceClass_t devClass = MacCtx.NvmCtx->MulticastChannelList[groupID].ChannelParams.Class;
 801029c:	4b4a      	ldr	r3, [pc, #296]	@ (80103c8 <LoRaMacMcChannelSetupRxParams+0x15c>)
 801029e:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 80102a2:	7bfa      	ldrb	r2, [r7, #15]
 80102a4:	4613      	mov	r3, r2
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	4413      	add	r3, r2
 80102aa:	00db      	lsls	r3, r3, #3
 80102ac:	440b      	add	r3, r1
 80102ae:	3350      	adds	r3, #80	@ 0x50
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	75fb      	strb	r3, [r7, #23]
    if( ( devClass == CLASS_A ) || ( devClass > CLASS_C ) )
 80102b4:	7dfb      	ldrb	r3, [r7, #23]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d002      	beq.n	80102c0 <LoRaMacMcChannelSetupRxParams+0x54>
 80102ba:	7dfb      	ldrb	r3, [r7, #23]
 80102bc:	2b02      	cmp	r3, #2
 80102be:	d901      	bls.n	80102c4 <LoRaMacMcChannelSetupRxParams+0x58>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80102c0:	2303      	movs	r3, #3
 80102c2:	e07c      	b.n	80103be <LoRaMacMcChannelSetupRxParams+0x152>
    }

    if( ( groupID >= LORAMAC_MAX_MC_CTX ) || 
 80102c4:	7bfb      	ldrb	r3, [r7, #15]
 80102c6:	2b03      	cmp	r3, #3
 80102c8:	d80f      	bhi.n	80102ea <LoRaMacMcChannelSetupRxParams+0x7e>
        ( MacCtx.NvmCtx->MulticastChannelList[groupID].ChannelParams.IsEnabled == false ) )
 80102ca:	4b3f      	ldr	r3, [pc, #252]	@ (80103c8 <LoRaMacMcChannelSetupRxParams+0x15c>)
 80102cc:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 80102d0:	7bfa      	ldrb	r2, [r7, #15]
 80102d2:	4613      	mov	r3, r2
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	4413      	add	r3, r2
 80102d8:	00db      	lsls	r3, r3, #3
 80102da:	440b      	add	r3, r1
 80102dc:	3351      	adds	r3, #81	@ 0x51
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	f083 0301 	eor.w	r3, r3, #1
 80102e4:	b2db      	uxtb	r3, r3
    if( ( groupID >= LORAMAC_MAX_MC_CTX ) || 
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d001      	beq.n	80102ee <LoRaMacMcChannelSetupRxParams+0x82>
    {
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 80102ea:	2316      	movs	r3, #22
 80102ec:	e067      	b.n	80103be <LoRaMacMcChannelSetupRxParams+0x152>
    }
    *status &= 0x0F; // groupID OK
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	f003 030f 	and.w	r3, r3, #15
 80102f6:	b2da      	uxtb	r2, r3
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	701a      	strb	r2, [r3, #0]

    VerifyParams_t verify;
    // Check datarate
    if( devClass == CLASS_B )
 80102fc:	7dfb      	ldrb	r3, [r7, #23]
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d104      	bne.n	801030c <LoRaMacMcChannelSetupRxParams+0xa0>
    {
        verify.DatarateParams.Datarate = rxParams->ClassB.Datarate;
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010308:	743b      	strb	r3, [r7, #16]
 801030a:	e003      	b.n	8010314 <LoRaMacMcChannelSetupRxParams+0xa8>
    }
    else
    {
        verify.DatarateParams.Datarate = rxParams->ClassC.Datarate;
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010312:	743b      	strb	r3, [r7, #16]
    }
    verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010314:	4b2c      	ldr	r3, [pc, #176]	@ (80103c8 <LoRaMacMcChannelSetupRxParams+0x15c>)
 8010316:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 801031a:	f893 312d 	ldrb.w	r3, [r3, #301]	@ 0x12d
 801031e:	747b      	strb	r3, [r7, #17]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8010320:	4b29      	ldr	r3, [pc, #164]	@ (80103c8 <LoRaMacMcChannelSetupRxParams+0x15c>)
 8010322:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	f107 0110 	add.w	r1, r7, #16
 801032c:	2207      	movs	r2, #7
 801032e:	4618      	mov	r0, r3
 8010330:	f002 fddd 	bl	8012eee <RegionVerify>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d006      	beq.n	8010348 <LoRaMacMcChannelSetupRxParams+0xdc>
    {
        *status &= 0xFB; // datarate OK
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	f023 0304 	bic.w	r3, r3, #4
 8010342:	b2da      	uxtb	r2, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( devClass == CLASS_B )
 8010348:	7dfb      	ldrb	r3, [r7, #23]
 801034a:	2b01      	cmp	r3, #1
 801034c:	d103      	bne.n	8010356 <LoRaMacMcChannelSetupRxParams+0xea>
    {
        verify.Frequency = rxParams->ClassB.Frequency;
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	613b      	str	r3, [r7, #16]
 8010354:	e002      	b.n	801035c <LoRaMacMcChannelSetupRxParams+0xf0>
    }
    else
    {
        verify.Frequency = rxParams->ClassC.Frequency;
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	613b      	str	r3, [r7, #16]
    }
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) == true )
 801035c:	4b1a      	ldr	r3, [pc, #104]	@ (80103c8 <LoRaMacMcChannelSetupRxParams+0x15c>)
 801035e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	f107 0110 	add.w	r1, r7, #16
 8010368:	2200      	movs	r2, #0
 801036a:	4618      	mov	r0, r3
 801036c:	f002 fdbf 	bl	8012eee <RegionVerify>
 8010370:	4603      	mov	r3, r0
 8010372:	2b00      	cmp	r3, #0
 8010374:	d006      	beq.n	8010384 <LoRaMacMcChannelSetupRxParams+0x118>
    {
        *status &= 0xF7; // frequency OK
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	f023 0308 	bic.w	r3, r3, #8
 801037e:	b2da      	uxtb	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	701a      	strb	r2, [r3, #0]
    }

    if( *status == ( groupID & 0x03 ) )
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	461a      	mov	r2, r3
 801038a:	7bfb      	ldrb	r3, [r7, #15]
 801038c:	f003 0303 	and.w	r3, r3, #3
 8010390:	429a      	cmp	r2, r3
 8010392:	d10f      	bne.n	80103b4 <LoRaMacMcChannelSetupRxParams+0x148>
    {
        // Apply parameters
        MacCtx.NvmCtx->MulticastChannelList[groupID].ChannelParams.RxParams = *rxParams;
 8010394:	4b0c      	ldr	r3, [pc, #48]	@ (80103c8 <LoRaMacMcChannelSetupRxParams+0x15c>)
 8010396:	f8d3 14c8 	ldr.w	r1, [r3, #1224]	@ 0x4c8
 801039a:	7bfa      	ldrb	r2, [r7, #15]
 801039c:	4613      	mov	r3, r2
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4413      	add	r3, r2
 80103a2:	00db      	lsls	r3, r3, #3
 80103a4:	440b      	add	r3, r1
 80103a6:	3360      	adds	r3, #96	@ 0x60
 80103a8:	68ba      	ldr	r2, [r7, #8]
 80103aa:	3304      	adds	r3, #4
 80103ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103b0:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    EventMacNvmCtxChanged( );
 80103b4:	f7fe fbc6 	bl	800eb44 <EventMacNvmCtxChanged>
    EventRegionNvmCtxChanged( );
 80103b8:	f7fe fbcb 	bl	800eb52 <EventRegionNvmCtxChanged>
    return LORAMAC_STATUS_OK;
 80103bc:	2300      	movs	r3, #0
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3718      	adds	r7, #24
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	200014d0 	.word	0x200014d0

080103cc <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80103cc:	b590      	push	{r4, r7, lr}
 80103ce:	b087      	sub	sp, #28
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80103d4:	2302      	movs	r3, #2
 80103d6:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80103d8:	2300      	movs	r3, #0
 80103da:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d101      	bne.n	80103e6 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80103e2:	2303      	movs	r3, #3
 80103e4:	e128      	b.n	8010638 <LoRaMacMlmeRequest+0x26c>
    }
    if( LoRaMacIsBusy( ) == true )
 80103e6:	f7fc f8fd 	bl	800c5e4 <LoRaMacIsBusy>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d001      	beq.n	80103f4 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80103f0:	2301      	movs	r3, #1
 80103f2:	e121      	b.n	8010638 <LoRaMacMlmeRequest+0x26c>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80103f4:	f001 f8b2 	bl	801155c <LoRaMacConfirmQueueIsFull>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d001      	beq.n	8010402 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80103fe:	2301      	movs	r3, #1
 8010400:	e11a      	b.n	8010638 <LoRaMacMlmeRequest+0x26c>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8010402:	f001 f89f 	bl	8011544 <LoRaMacConfirmQueueGetCnt>
 8010406:	4603      	mov	r3, r0
 8010408:	2b00      	cmp	r3, #0
 801040a:	d104      	bne.n	8010416 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801040c:	2228      	movs	r2, #40	@ 0x28
 801040e:	2100      	movs	r1, #0
 8010410:	488b      	ldr	r0, [pc, #556]	@ (8010640 <LoRaMacMlmeRequest+0x274>)
 8010412:	f007 ffb5 	bl	8018380 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010416:	4b8b      	ldr	r3, [pc, #556]	@ (8010644 <LoRaMacMlmeRequest+0x278>)
 8010418:	2201      	movs	r2, #1
 801041a:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801041e:	4a89      	ldr	r2, [pc, #548]	@ (8010644 <LoRaMacMlmeRequest+0x278>)
 8010420:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 8010424:	f043 0304 	orr.w	r3, r3, #4
 8010428:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
    queueElement.Request = mlmeRequest->Type;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010432:	2301      	movs	r3, #1
 8010434:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8010436:	2300      	movs	r3, #0
 8010438:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	2b0d      	cmp	r3, #13
 8010440:	f200 80d3 	bhi.w	80105ea <LoRaMacMlmeRequest+0x21e>
 8010444:	a201      	add	r2, pc, #4	@ (adr r2, 801044c <LoRaMacMlmeRequest+0x80>)
 8010446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801044a:	bf00      	nop
 801044c:	08010485 	.word	0x08010485
 8010450:	080105eb 	.word	0x080105eb
 8010454:	080105eb 	.word	0x080105eb
 8010458:	080104f7 	.word	0x080104f7
 801045c:	08010515 	.word	0x08010515
 8010460:	08010525 	.word	0x08010525
 8010464:	080105eb 	.word	0x080105eb
 8010468:	080105eb 	.word	0x080105eb
 801046c:	080105eb 	.word	0x080105eb
 8010470:	0801053d 	.word	0x0801053d
 8010474:	080105eb 	.word	0x080105eb
 8010478:	080105bf 	.word	0x080105bf
 801047c:	0801055b 	.word	0x0801055b
 8010480:	080105a1 	.word	0x080105a1
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8010484:	4b6f      	ldr	r3, [pc, #444]	@ (8010644 <LoRaMacMlmeRequest+0x278>)
 8010486:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801048a:	f003 0320 	and.w	r3, r3, #32
 801048e:	2b00      	cmp	r3, #0
 8010490:	d001      	beq.n	8010496 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8010492:	2301      	movs	r3, #1
 8010494:	e0d0      	b.n	8010638 <LoRaMacMlmeRequest+0x26c>
            }

            ResetMacParameters( );
 8010496:	f7fd fdb7 	bl	800e008 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801049a:	4b6a      	ldr	r3, [pc, #424]	@ (8010644 <LoRaMacMlmeRequest+0x278>)
 801049c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 80104a0:	7818      	ldrb	r0, [r3, #0]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	791b      	ldrb	r3, [r3, #4]
 80104a6:	b25b      	sxtb	r3, r3
 80104a8:	4a66      	ldr	r2, [pc, #408]	@ (8010644 <LoRaMacMlmeRequest+0x278>)
 80104aa:	f8d2 44c8 	ldr.w	r4, [r2, #1224]	@ 0x4c8
 80104ae:	2200      	movs	r2, #0
 80104b0:	4619      	mov	r1, r3
 80104b2:	f002 fe04 	bl	80130be <RegionAlternateDr>
 80104b6:	4603      	mov	r3, r0
 80104b8:	f884 30f9 	strb.w	r3, [r4, #249]	@ 0xf9

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80104bc:	2307      	movs	r3, #7
 80104be:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 80104c0:	20ff      	movs	r0, #255	@ 0xff
 80104c2:	f7fd fb15 	bl	800daf0 <SendReJoinReq>
 80104c6:	4603      	mov	r3, r0
 80104c8:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80104ca:	7dfb      	ldrb	r3, [r7, #23]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f000 808e 	beq.w	80105ee <LoRaMacMlmeRequest+0x222>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80104d2:	4b5c      	ldr	r3, [pc, #368]	@ (8010644 <LoRaMacMlmeRequest+0x278>)
 80104d4:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 80104d8:	7818      	ldrb	r0, [r3, #0]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	791b      	ldrb	r3, [r3, #4]
 80104de:	b25b      	sxtb	r3, r3
 80104e0:	4a58      	ldr	r2, [pc, #352]	@ (8010644 <LoRaMacMlmeRequest+0x278>)
 80104e2:	f8d2 44c8 	ldr.w	r4, [r2, #1224]	@ 0x4c8
 80104e6:	2201      	movs	r2, #1
 80104e8:	4619      	mov	r1, r3
 80104ea:	f002 fde8 	bl	80130be <RegionAlternateDr>
 80104ee:	4603      	mov	r3, r0
 80104f0:	f884 30f9 	strb.w	r3, [r4, #249]	@ 0xf9
            }
            break;
 80104f4:	e07b      	b.n	80105ee <LoRaMacMlmeRequest+0x222>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80104f6:	2300      	movs	r3, #0
 80104f8:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80104fa:	f107 030c 	add.w	r3, r7, #12
 80104fe:	2200      	movs	r2, #0
 8010500:	4619      	mov	r1, r3
 8010502:	2002      	movs	r0, #2
 8010504:	f000 fd16 	bl	8010f34 <LoRaMacCommandsAddCmd>
 8010508:	4603      	mov	r3, r0
 801050a:	2b00      	cmp	r3, #0
 801050c:	d071      	beq.n	80105f2 <LoRaMacMlmeRequest+0x226>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801050e:	2313      	movs	r3, #19
 8010510:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010512:	e06e      	b.n	80105f2 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	889b      	ldrh	r3, [r3, #4]
 8010518:	4618      	mov	r0, r3
 801051a:	f7fe f889 	bl	800e630 <SetTxContinuousWave>
 801051e:	4603      	mov	r3, r0
 8010520:	75fb      	strb	r3, [r7, #23]
            break;
 8010522:	e06d      	b.n	8010600 <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	8898      	ldrh	r0, [r3, #4]
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6899      	ldr	r1, [r3, #8]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	7b1b      	ldrb	r3, [r3, #12]
 8010530:	461a      	mov	r2, r3
 8010532:	f7fe f8b9 	bl	800e6a8 <SetTxContinuousWave1>
 8010536:	4603      	mov	r3, r0
 8010538:	75fb      	strb	r3, [r7, #23]
            break;
 801053a:	e061      	b.n	8010600 <LoRaMacMlmeRequest+0x234>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801053c:	2300      	movs	r3, #0
 801053e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010540:	f107 030c 	add.w	r3, r7, #12
 8010544:	2200      	movs	r2, #0
 8010546:	4619      	mov	r1, r3
 8010548:	200d      	movs	r0, #13
 801054a:	f000 fcf3 	bl	8010f34 <LoRaMacCommandsAddCmd>
 801054e:	4603      	mov	r3, r0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d050      	beq.n	80105f6 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010554:	2313      	movs	r3, #19
 8010556:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010558:	e04d      	b.n	80105f6 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 801055a:	4b3a      	ldr	r3, [pc, #232]	@ (8010644 <LoRaMacMlmeRequest+0x278>)
 801055c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 8010560:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d148      	bne.n	80105fa <LoRaMacMlmeRequest+0x22e>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	791b      	ldrb	r3, [r3, #4]
 801056c:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	791b      	ldrb	r3, [r3, #4]
 8010572:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010576:	b2db      	uxtb	r3, r3
 8010578:	4618      	mov	r0, r3
 801057a:	f000 fade 	bl	8010b3a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801057e:	7dbb      	ldrb	r3, [r7, #22]
 8010580:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8010582:	2300      	movs	r3, #0
 8010584:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8010586:	f107 030c 	add.w	r3, r7, #12
 801058a:	2201      	movs	r2, #1
 801058c:	4619      	mov	r1, r3
 801058e:	2010      	movs	r0, #16
 8010590:	f000 fcd0 	bl	8010f34 <LoRaMacCommandsAddCmd>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d02f      	beq.n	80105fa <LoRaMacMlmeRequest+0x22e>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801059a:	2313      	movs	r3, #19
 801059c:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 801059e:	e02c      	b.n	80105fa <LoRaMacMlmeRequest+0x22e>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80105a0:	2300      	movs	r3, #0
 80105a2:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80105a4:	f107 030c 	add.w	r3, r7, #12
 80105a8:	2200      	movs	r2, #0
 80105aa:	4619      	mov	r1, r3
 80105ac:	2012      	movs	r0, #18
 80105ae:	f000 fcc1 	bl	8010f34 <LoRaMacCommandsAddCmd>
 80105b2:	4603      	mov	r3, r0
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d022      	beq.n	80105fe <LoRaMacMlmeRequest+0x232>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80105b8:	2313      	movs	r3, #19
 80105ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80105bc:	e01f      	b.n	80105fe <LoRaMacMlmeRequest+0x232>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80105be:	2301      	movs	r3, #1
 80105c0:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80105c2:	f000 fa67 	bl	8010a94 <LoRaMacClassBIsAcquisitionInProgress>
 80105c6:	4603      	mov	r3, r0
 80105c8:	f083 0301 	eor.w	r3, r3, #1
 80105cc:	b2db      	uxtb	r3, r3
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d008      	beq.n	80105e4 <LoRaMacMlmeRequest+0x218>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80105d2:	2000      	movs	r0, #0
 80105d4:	f000 fa3d 	bl	8010a52 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80105d8:	2000      	movs	r0, #0
 80105da:	f000 fa63 	bl	8010aa4 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80105de:	2300      	movs	r3, #0
 80105e0:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80105e2:	e00d      	b.n	8010600 <LoRaMacMlmeRequest+0x234>
                status = LORAMAC_STATUS_BUSY;
 80105e4:	2301      	movs	r3, #1
 80105e6:	75fb      	strb	r3, [r7, #23]
            break;
 80105e8:	e00a      	b.n	8010600 <LoRaMacMlmeRequest+0x234>
        }
        default:
            break;
 80105ea:	bf00      	nop
 80105ec:	e008      	b.n	8010600 <LoRaMacMlmeRequest+0x234>
            break;
 80105ee:	bf00      	nop
 80105f0:	e006      	b.n	8010600 <LoRaMacMlmeRequest+0x234>
            break;
 80105f2:	bf00      	nop
 80105f4:	e004      	b.n	8010600 <LoRaMacMlmeRequest+0x234>
            break;
 80105f6:	bf00      	nop
 80105f8:	e002      	b.n	8010600 <LoRaMacMlmeRequest+0x234>
            break;
 80105fa:	bf00      	nop
 80105fc:	e000      	b.n	8010600 <LoRaMacMlmeRequest+0x234>
            break;
 80105fe:	bf00      	nop
    }

    if( status != LORAMAC_STATUS_OK )
 8010600:	7dfb      	ldrb	r3, [r7, #23]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d010      	beq.n	8010628 <LoRaMacMlmeRequest+0x25c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8010606:	f000 ff9d 	bl	8011544 <LoRaMacConfirmQueueGetCnt>
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d112      	bne.n	8010636 <LoRaMacMlmeRequest+0x26a>
        {
            MacCtx.NodeAckRequested = false;
 8010610:	4b0c      	ldr	r3, [pc, #48]	@ (8010644 <LoRaMacMlmeRequest+0x278>)
 8010612:	2200      	movs	r2, #0
 8010614:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010618:	4a0a      	ldr	r2, [pc, #40]	@ (8010644 <LoRaMacMlmeRequest+0x278>)
 801061a:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 801061e:	f36f 0382 	bfc	r3, #2, #1
 8010622:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
 8010626:	e006      	b.n	8010636 <LoRaMacMlmeRequest+0x26a>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8010628:	f107 0310 	add.w	r3, r7, #16
 801062c:	4618      	mov	r0, r3
 801062e:	f000 fe5b 	bl	80112e8 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8010632:	f7fe fa87 	bl	800eb44 <EventMacNvmCtxChanged>
    }
    return status;
 8010636:	7dfb      	ldrb	r3, [r7, #23]
}
 8010638:	4618      	mov	r0, r3
 801063a:	371c      	adds	r7, #28
 801063c:	46bd      	mov	sp, r7
 801063e:	bd90      	pop	{r4, r7, pc}
 8010640:	20001950 	.word	0x20001950
 8010644:	200014d0 	.word	0x200014d0

08010648 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b08a      	sub	sp, #40	@ 0x28
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010650:	2302      	movs	r3, #2
 8010652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 801065c:	2300      	movs	r3, #0
 801065e:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8010660:	2300      	movs	r3, #0
 8010662:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d101      	bne.n	801066e <LoRaMacMcpsRequest+0x26>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801066a:	2303      	movs	r3, #3
 801066c:	e0d8      	b.n	8010820 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 801066e:	f7fb ffb9 	bl	800c5e4 <LoRaMacIsBusy>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d001      	beq.n	801067c <LoRaMacMcpsRequest+0x34>
    {
        return LORAMAC_STATUS_BUSY;
 8010678:	2301      	movs	r3, #1
 801067a:	e0d1      	b.n	8010820 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 801067c:	2300      	movs	r3, #0
 801067e:	743b      	strb	r3, [r7, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8010680:	2218      	movs	r2, #24
 8010682:	2100      	movs	r1, #0
 8010684:	4868      	ldr	r0, [pc, #416]	@ (8010828 <LoRaMacMcpsRequest+0x1e0>)
 8010686:	f007 fe7b 	bl	8018380 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801068a:	4b68      	ldr	r3, [pc, #416]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 801068c:	2201      	movs	r2, #1
 801068e:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010692:	4b66      	ldr	r3, [pc, #408]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 8010694:	2201      	movs	r2, #1
 8010696:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a

    switch( mcpsRequest->Type )
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	2b03      	cmp	r3, #3
 80106a0:	d03d      	beq.n	801071e <LoRaMacMcpsRequest+0xd6>
 80106a2:	2b03      	cmp	r3, #3
 80106a4:	dc4f      	bgt.n	8010746 <LoRaMacMcpsRequest+0xfe>
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d002      	beq.n	80106b0 <LoRaMacMcpsRequest+0x68>
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d019      	beq.n	80106e2 <LoRaMacMcpsRequest+0x9a>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80106ae:	e04a      	b.n	8010746 <LoRaMacMcpsRequest+0xfe>
            readyToSend = true;
 80106b0:	2301      	movs	r3, #1
 80106b2:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80106b4:	4b5d      	ldr	r3, [pc, #372]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 80106b6:	2201      	movs	r2, #1
 80106b8:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80106bc:	7c3b      	ldrb	r3, [r7, #16]
 80106be:	2202      	movs	r2, #2
 80106c0:	f362 1347 	bfi	r3, r2, #5, #3
 80106c4:	743b      	strb	r3, [r7, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	791b      	ldrb	r3, [r3, #4]
 80106ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	689b      	ldr	r3, [r3, #8]
 80106d2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	899b      	ldrh	r3, [r3, #12]
 80106d8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	7b9b      	ldrb	r3, [r3, #14]
 80106de:	777b      	strb	r3, [r7, #29]
            break;
 80106e0:	e032      	b.n	8010748 <LoRaMacMcpsRequest+0x100>
            readyToSend = true;
 80106e2:	2301      	movs	r3, #1
 80106e4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	7bdb      	ldrb	r3, [r3, #15]
 80106ea:	2b08      	cmp	r3, #8
 80106ec:	bf28      	it	cs
 80106ee:	2308      	movcs	r3, #8
 80106f0:	b2da      	uxtb	r2, r3
 80106f2:	4b4e      	ldr	r3, [pc, #312]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 80106f4:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80106f8:	7c3b      	ldrb	r3, [r7, #16]
 80106fa:	2204      	movs	r2, #4
 80106fc:	f362 1347 	bfi	r3, r2, #5, #3
 8010700:	743b      	strb	r3, [r7, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	791b      	ldrb	r3, [r3, #4]
 8010706:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	689b      	ldr	r3, [r3, #8]
 801070e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	899b      	ldrh	r3, [r3, #12]
 8010714:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	7b9b      	ldrb	r3, [r3, #14]
 801071a:	777b      	strb	r3, [r7, #29]
            break;
 801071c:	e014      	b.n	8010748 <LoRaMacMcpsRequest+0x100>
            readyToSend = true;
 801071e:	2301      	movs	r3, #1
 8010720:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8010722:	4b42      	ldr	r3, [pc, #264]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 8010724:	2201      	movs	r2, #1
 8010726:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801072a:	7c3b      	ldrb	r3, [r7, #16]
 801072c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8010730:	743b      	strb	r3, [r7, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	891b      	ldrh	r3, [r3, #8]
 801073c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	7a9b      	ldrb	r3, [r3, #10]
 8010742:	777b      	strb	r3, [r7, #29]
            break;
 8010744:	e000      	b.n	8010748 <LoRaMacMcpsRequest+0x100>
            break;
 8010746:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010748:	2302      	movs	r3, #2
 801074a:	763b      	strb	r3, [r7, #24]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801074c:	4b37      	ldr	r3, [pc, #220]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 801074e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 8010752:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8010756:	76bb      	strb	r3, [r7, #26]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010758:	4b34      	ldr	r3, [pc, #208]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 801075a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	f107 0218 	add.w	r2, r7, #24
 8010764:	4611      	mov	r1, r2
 8010766:	4618      	mov	r0, r3
 8010768:	f002 fb73 	bl	8012e52 <RegionGetPhyParam>
 801076c:	4603      	mov	r3, r0
 801076e:	617b      	str	r3, [r7, #20]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	b25b      	sxtb	r3, r3
 8010774:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8010778:	4293      	cmp	r3, r2
 801077a:	bfb8      	it	lt
 801077c:	4613      	movlt	r3, r2
 801077e:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8010780:	7f3b      	ldrb	r3, [r7, #28]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d048      	beq.n	8010818 <LoRaMacMcpsRequest+0x1d0>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 8010786:	4b29      	ldr	r3, [pc, #164]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 8010788:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 801078c:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 8010790:	f083 0301 	eor.w	r3, r3, #1
 8010794:	b2db      	uxtb	r3, r3
 8010796:	2b00      	cmp	r3, #0
 8010798:	d01e      	beq.n	80107d8 <LoRaMacMcpsRequest+0x190>
        {
            verify.DatarateParams.Datarate = datarate;
 801079a:	7f7b      	ldrb	r3, [r7, #29]
 801079c:	733b      	strb	r3, [r7, #12]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801079e:	4b23      	ldr	r3, [pc, #140]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 80107a0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 80107a4:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 80107a8:	73bb      	strb	r3, [r7, #14]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 80107aa:	4b20      	ldr	r3, [pc, #128]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 80107ac:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	f107 010c 	add.w	r1, r7, #12
 80107b6:	2205      	movs	r2, #5
 80107b8:	4618      	mov	r0, r3
 80107ba:	f002 fb98 	bl	8012eee <RegionVerify>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d007      	beq.n	80107d4 <LoRaMacMcpsRequest+0x18c>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80107c4:	4b19      	ldr	r3, [pc, #100]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 80107c6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 80107ca:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80107ce:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
 80107d2:	e001      	b.n	80107d8 <LoRaMacMcpsRequest+0x190>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80107d4:	2303      	movs	r3, #3
 80107d6:	e023      	b.n	8010820 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 80107d8:	8bfb      	ldrh	r3, [r7, #30]
 80107da:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80107de:	f107 0010 	add.w	r0, r7, #16
 80107e2:	6a3a      	ldr	r2, [r7, #32]
 80107e4:	f7fd f878 	bl	800d8d8 <Send>
 80107e8:	4603      	mov	r3, r0
 80107ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if( status == LORAMAC_STATUS_OK )
 80107ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d10c      	bne.n	8010810 <LoRaMacMcpsRequest+0x1c8>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	781a      	ldrb	r2, [r3, #0]
 80107fa:	4b0c      	ldr	r3, [pc, #48]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 80107fc:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8010800:	4a0a      	ldr	r2, [pc, #40]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 8010802:	f892 34c5 	ldrb.w	r3, [r2, #1221]	@ 0x4c5
 8010806:	f043 0301 	orr.w	r3, r3, #1
 801080a:	f882 34c5 	strb.w	r3, [r2, #1221]	@ 0x4c5
 801080e:	e003      	b.n	8010818 <LoRaMacMcpsRequest+0x1d0>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8010810:	4b06      	ldr	r3, [pc, #24]	@ (801082c <LoRaMacMcpsRequest+0x1e4>)
 8010812:	2200      	movs	r2, #0
 8010814:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
        }
    }

    EventMacNvmCtxChanged( );
 8010818:	f7fe f994 	bl	800eb44 <EventMacNvmCtxChanged>
    return status;
 801081c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010820:	4618      	mov	r0, r3
 8010822:	3728      	adds	r7, #40	@ 0x28
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	20001938 	.word	0x20001938
 801082c:	200014d0 	.word	0x200014d0

08010830 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	4603      	mov	r3, r0
 8010838:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801083a:	79fb      	ldrb	r3, [r7, #7]
 801083c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 801083e:	4b0b      	ldr	r3, [pc, #44]	@ (801086c <LoRaMacTestSetDutyCycleOn+0x3c>)
 8010840:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	f107 010c 	add.w	r1, r7, #12
 801084a:	220f      	movs	r2, #15
 801084c:	4618      	mov	r0, r3
 801084e:	f002 fb4e 	bl	8012eee <RegionVerify>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d005      	beq.n	8010864 <LoRaMacTestSetDutyCycleOn+0x34>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 8010858:	4b04      	ldr	r3, [pc, #16]	@ (801086c <LoRaMacTestSetDutyCycleOn+0x3c>)
 801085a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 801085e:	79fa      	ldrb	r2, [r7, #7]
 8010860:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
    }
}
 8010864:	bf00      	nop
 8010866:	3710      	adds	r7, #16
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	200014d0 	.word	0x200014d0

08010870 <CalcNextV10X>:
#include "stdbool.h"
#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b08a      	sub	sp, #40	@ 0x28
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	607a      	str	r2, [r7, #4]
 801087c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801087e:	2300      	movs	r3, #0
 8010880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int8_t datarate = adrNext->Datarate;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	7c1b      	ldrb	r3, [r3, #16]
 8010888:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int8_t txPower = adrNext->TxPower;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	7c5b      	ldrb	r3, [r3, #17]
 8010890:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	689a      	ldr	r2, [r3, #8]
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	795b      	ldrb	r3, [r3, #5]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	f000 808b 	beq.w	80109bc <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80108a6:	2302      	movs	r3, #2
 80108a8:	f887 3020 	strb.w	r3, [r7, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	7c9b      	ldrb	r3, [r3, #18]
 80108b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	7cdb      	ldrb	r3, [r3, #19]
 80108b8:	f107 0220 	add.w	r2, r7, #32
 80108bc:	4611      	mov	r1, r2
 80108be:	4618      	mov	r0, r3
 80108c0:	f002 fac7 	bl	8012e52 <RegionGetPhyParam>
 80108c4:	4603      	mov	r3, r0
 80108c6:	61fb      	str	r3, [r7, #28]
        minTxDatarate = phyParam.Value;
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        datarate = MAX( datarate, minTxDatarate );
 80108ce:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 80108d2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80108d6:	4293      	cmp	r3, r2
 80108d8:	bfb8      	it	lt
 80108da:	4613      	movlt	r3, r2
 80108dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        if( datarate == minTxDatarate )
 80108e0:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 80108e4:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d106      	bne.n	80108fa <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	2200      	movs	r2, #0
 80108f0:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80108f2:	2300      	movs	r3, #0
 80108f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80108f8:	e060      	b.n	80109bc <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	689b      	ldr	r3, [r3, #8]
 80108fe:	68fa      	ldr	r2, [r7, #12]
 8010900:	8992      	ldrh	r2, [r2, #12]
 8010902:	4293      	cmp	r3, r2
 8010904:	d303      	bcc.n	801090e <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8010906:	2301      	movs	r3, #1
 8010908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801090c:	e002      	b.n	8010914 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 801090e:	2300      	movs	r3, #0
 8010910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	68fa      	ldr	r2, [r7, #12]
 801091a:	8992      	ldrh	r2, [r2, #12]
 801091c:	4611      	mov	r1, r2
 801091e:	68fa      	ldr	r2, [r7, #12]
 8010920:	89d2      	ldrh	r2, [r2, #14]
 8010922:	440a      	add	r2, r1
 8010924:	4293      	cmp	r3, r2
 8010926:	d349      	bcc.n	80109bc <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8010928:	2308      	movs	r3, #8
 801092a:	f887 3020 	strb.w	r3, [r7, #32]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	7cdb      	ldrb	r3, [r3, #19]
 8010932:	f107 0220 	add.w	r2, r7, #32
 8010936:	4611      	mov	r1, r2
 8010938:	4618      	mov	r0, r3
 801093a:	f002 fa8a 	bl	8012e52 <RegionGetPhyParam>
 801093e:	4603      	mov	r3, r0
 8010940:	61fb      	str	r3, [r7, #28]
                txPower = phyParam.Value;
 8010942:	69fb      	ldr	r3, [r7, #28]
 8010944:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	89d2      	ldrh	r2, [r2, #14]
 8010950:	fbb3 f1f2 	udiv	r1, r3, r2
 8010954:	fb01 f202 	mul.w	r2, r1, r2
 8010958:	1a9b      	subs	r3, r3, r2
 801095a:	2b01      	cmp	r3, #1
 801095c:	d12e      	bne.n	80109bc <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801095e:	2322      	movs	r3, #34	@ 0x22
 8010960:	f887 3020 	strb.w	r3, [r7, #32]
                    getPhy.Datarate = datarate;
 8010964:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010968:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	7c9b      	ldrb	r3, [r3, #18]
 8010970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	7cdb      	ldrb	r3, [r3, #19]
 8010978:	f107 0220 	add.w	r2, r7, #32
 801097c:	4611      	mov	r1, r2
 801097e:	4618      	mov	r0, r3
 8010980:	f002 fa67 	bl	8012e52 <RegionGetPhyParam>
 8010984:	4603      	mov	r3, r0
 8010986:	61fb      	str	r3, [r7, #28]
                    datarate = phyParam.Value;
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                    if( datarate == minTxDatarate )
 801098e:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8010992:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8010996:	429a      	cmp	r2, r3
 8010998:	d110      	bne.n	80109bc <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801099a:	2300      	movs	r3, #0
 801099c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                        if( adrNext->UpdateChanMask == true )
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	791b      	ldrb	r3, [r3, #4]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d009      	beq.n	80109bc <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 80109a8:	2301      	movs	r3, #1
 80109aa:	763b      	strb	r3, [r7, #24]
                            RegionInitDefaults( adrNext->Region, &params );
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	7cdb      	ldrb	r3, [r3, #19]
 80109b0:	f107 0214 	add.w	r2, r7, #20
 80109b4:	4611      	mov	r1, r2
 80109b6:	4618      	mov	r0, r3
 80109b8:	f002 fa74 	bl	8012ea4 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80109c2:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80109ca:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80109cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3728      	adds	r7, #40	@ 0x28
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b084      	sub	sp, #16
 80109dc:	af00      	add	r7, sp, #0
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	607a      	str	r2, [r7, #4]
 80109e4:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	789b      	ldrb	r3, [r3, #2]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d107      	bne.n	80109fe <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	68b9      	ldr	r1, [r7, #8]
 80109f4:	68f8      	ldr	r0, [r7, #12]
 80109f6:	f7ff ff3b 	bl	8010870 <CalcNextV10X>
 80109fa:	4603      	mov	r3, r0
 80109fc:	e000      	b.n	8010a00 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80109fe:	2300      	movs	r3, #0
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b085      	sub	sp, #20
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	60f8      	str	r0, [r7, #12]
 8010a10:	60b9      	str	r1, [r7, #8]
 8010a12:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8010a14:	bf00      	nop
 8010a16:	3714      	adds	r7, #20
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 8010a28:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	370c      	adds	r7, #12
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr

08010a36 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 8010a36:	b480      	push	{r7}
 8010a38:	b083      	sub	sp, #12
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2200      	movs	r2, #0
 8010a42:	601a      	str	r2, [r3, #0]
    return NULL;
 8010a44:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	370c      	adds	r7, #12
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr

08010a52 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8010a52:	b480      	push	{r7}
 8010a54:	b083      	sub	sp, #12
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	4603      	mov	r3, r0
 8010a5a:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010a5c:	bf00      	nop
 8010a5e:	370c      	adds	r7, #12
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr

08010a68 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	71fb      	strb	r3, [r7, #7]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8010a72:	bf00      	nop
 8010a74:	370c      	adds	r7, #12
 8010a76:	46bd      	mov	sp, r7
 8010a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7c:	4770      	bx	lr

08010a7e <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8010a7e:	b480      	push	{r7}
 8010a80:	b083      	sub	sp, #12
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	4603      	mov	r3, r0
 8010a86:	71fb      	strb	r3, [r7, #7]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8010a88:	bf00      	nop
 8010a8a:	370c      	adds	r7, #12
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr

08010a94 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8010a94:	b480      	push	{r7}
 8010a96:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8010a98:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010aac:	bf00      	nop
 8010aae:	370c      	adds	r7, #12
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr

08010ab8 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010ac0:	bf00      	nop
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr

08010acc <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8010acc:	b480      	push	{r7}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010ad4:	bf00      	nop
 8010ad6:	370c      	adds	r7, #12
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr

08010ae0 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	b083      	sub	sp, #12
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	460b      	mov	r3, r1
 8010aea:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8010aec:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	370c      	adds	r7, #12
 8010af2:	46bd      	mov	sp, r7
 8010af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af8:	4770      	bx	lr

08010afa <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8010afa:	b480      	push	{r7}
 8010afc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8010afe:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	46bd      	mov	sp, r7
 8010b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b08:	4770      	bx	lr

08010b0a <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8010b0a:	b480      	push	{r7}
 8010b0c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8010b0e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr

08010b1a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8010b1a:	b480      	push	{r7}
 8010b1c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8010b1e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr

08010b2a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8010b2a:	b480      	push	{r7}
 8010b2c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8010b2e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	46bd      	mov	sp, r7
 8010b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b38:	4770      	bx	lr

08010b3a <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8010b3a:	b480      	push	{r7}
 8010b3c:	b083      	sub	sp, #12
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	4603      	mov	r3, r0
 8010b42:	71fb      	strb	r3, [r7, #7]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8010b44:	bf00      	nop
 8010b46:	370c      	adds	r7, #12
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8010b50:	b480      	push	{r7}
 8010b52:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010b54:	bf00      	nop
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8010b5e:	b480      	push	{r7}
 8010b60:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010b62:	bf00      	nop
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	4603      	mov	r3, r0
 8010b74:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010b76:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	370c      	adds	r7, #12
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b82:	4770      	bx	lr

08010b84 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8010b84:	b480      	push	{r7}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010b8c:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	370c      	adds	r7, #12
 8010b92:	46bd      	mov	sp, r7
 8010b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b98:	4770      	bx	lr

08010b9a <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8010b9a:	b480      	push	{r7}
 8010b9c:	b083      	sub	sp, #12
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010ba2:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	370c      	adds	r7, #12
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr

08010bb0 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010bb4:	bf00      	nop
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr

08010bbe <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8010bbe:	b480      	push	{r7}
 8010bc0:	b083      	sub	sp, #12
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	6039      	str	r1, [r7, #0]
 8010bc8:	71fb      	strb	r3, [r7, #7]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 8010bca:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	370c      	adds	r7, #12
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr

08010bd8 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	e9c7 2300 	strd	r2, r3, [r7]
 8010be2:	4603      	mov	r3, r0
 8010be4:	81fb      	strh	r3, [r7, #14]
 8010be6:	460b      	mov	r3, r1
 8010be8:	737b      	strb	r3, [r7, #13]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010bea:	bf00      	nop
 8010bec:	3714      	adds	r7, #20
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr

08010bf6 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8010bf6:	b480      	push	{r7}
 8010bf8:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010bfa:	bf00      	nop
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr

08010c04 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8010c04:	b480      	push	{r7}
 8010c06:	b083      	sub	sp, #12
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 8010c0c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	370c      	adds	r7, #12
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr

08010c1a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8010c1a:	b480      	push	{r7}
 8010c1c:	b083      	sub	sp, #12
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	e9c7 0100 	strd	r0, r1, [r7]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8010c24:	f04f 0200 	mov.w	r2, #0
 8010c28:	f04f 0300 	mov.w	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010c2c:	4610      	mov	r0, r2
 8010c2e:	4619      	mov	r1, r3
 8010c30:	370c      	adds	r7, #12
 8010c32:	46bd      	mov	sp, r7
 8010c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c38:	4770      	bx	lr

08010c3a <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8010c3a:	b480      	push	{r7}
 8010c3c:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8010c3e:	bf00      	nop
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <LoRaMacClassBSetMulticastPeriodicity>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBSetMulticastPeriodicity( MulticastCtx_t* multicastChannel )
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
    {
        multicastChannel->PingNb = CalcPingNb( multicastChannel->ChannelParams.RxParams.ClassB.Periodicity );
        multicastChannel->PingPeriod = CalcPingPeriod( multicastChannel->PingNb );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010c50:	bf00      	nop
 8010c52:	370c      	adds	r7, #12
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr

08010c5c <LoRaMacClassBProcess>:

void LoRaMacClassBProcess( void )
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8010c60:	bf00      	nop
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr

08010c6a <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8010c6a:	b480      	push	{r7}
 8010c6c:	b085      	sub	sp, #20
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8010c76:	2300      	movs	r3, #0
 8010c78:	81fb      	strh	r3, [r7, #14]
 8010c7a:	e00a      	b.n	8010c92 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8010c7c:	89fb      	ldrh	r3, [r7, #14]
 8010c7e:	68ba      	ldr	r2, [r7, #8]
 8010c80:	4413      	add	r3, r2
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d001      	beq.n	8010c8c <IsSlotFree+0x22>
        {
            return false;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	e006      	b.n	8010c9a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8010c8c:	89fb      	ldrh	r3, [r7, #14]
 8010c8e:	3301      	adds	r3, #1
 8010c90:	81fb      	strh	r3, [r7, #14]
 8010c92:	89fb      	ldrh	r3, [r7, #14]
 8010c94:	2b0f      	cmp	r3, #15
 8010c96:	d9f1      	bls.n	8010c7c <IsSlotFree+0x12>
        }
    }
    return true;
 8010c98:	2301      	movs	r3, #1
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3714      	adds	r7, #20
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr
	...

08010ca8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8010cb2:	e007      	b.n	8010cc4 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8010cb4:	79fb      	ldrb	r3, [r7, #7]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8010cba:	79fb      	ldrb	r3, [r7, #7]
 8010cbc:	2b0f      	cmp	r3, #15
 8010cbe:	d101      	bne.n	8010cc4 <MallocNewMacCommandSlot+0x1c>
        {
            return 0;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	e012      	b.n	8010cea <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8010cc4:	79fb      	ldrb	r3, [r7, #7]
 8010cc6:	011b      	lsls	r3, r3, #4
 8010cc8:	3308      	adds	r3, #8
 8010cca:	4a0a      	ldr	r2, [pc, #40]	@ (8010cf4 <MallocNewMacCommandSlot+0x4c>)
 8010ccc:	4413      	add	r3, r2
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7ff ffcb 	bl	8010c6a <IsSlotFree>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	f083 0301 	eor.w	r3, r3, #1
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d1e9      	bne.n	8010cb4 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8010ce0:	79fb      	ldrb	r3, [r7, #7]
 8010ce2:	011b      	lsls	r3, r3, #4
 8010ce4:	3308      	adds	r3, #8
 8010ce6:	4a03      	ldr	r2, [pc, #12]	@ (8010cf4 <MallocNewMacCommandSlot+0x4c>)
 8010ce8:	4413      	add	r3, r2
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	20001bf4 	.word	0x20001bf4

08010cf8 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d101      	bne.n	8010d0a <FreeMacCommandSlot+0x12>
    {
        return false;
 8010d06:	2300      	movs	r3, #0
 8010d08:	e005      	b.n	8010d16 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8010d0a:	2210      	movs	r2, #16
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f007 fb36 	bl	8018380 <memset1>

    return true;
 8010d14:	2301      	movs	r3, #1
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3708      	adds	r7, #8
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}

08010d1e <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8010d1e:	b480      	push	{r7}
 8010d20:	b083      	sub	sp, #12
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	6078      	str	r0, [r7, #4]
    if( list == 0 )
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d101      	bne.n	8010d30 <LinkedListInit+0x12>
    {
        return false;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	e006      	b.n	8010d3e <LinkedListInit+0x20>
    }

    list->First = 0;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2200      	movs	r2, #0
 8010d34:	601a      	str	r2, [r3, #0]
    list->Last = 0;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	605a      	str	r2, [r3, #4]

    return true;
 8010d3c:	2301      	movs	r3, #1
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	370c      	adds	r7, #12
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr

08010d4a <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8010d4a:	b480      	push	{r7}
 8010d4c:	b083      	sub	sp, #12
 8010d4e:	af00      	add	r7, sp, #0
 8010d50:	6078      	str	r0, [r7, #4]
 8010d52:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d104      	bne.n	8010d64 <LinkedListAdd+0x1a>
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d101      	bne.n	8010d64 <LinkedListAdd+0x1a>
    {
        return false;
 8010d60:	2300      	movs	r3, #0
 8010d62:	e015      	b.n	8010d90 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == 0 )
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d102      	bne.n	8010d72 <LinkedListAdd+0x28>
    {
        list->First = element;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	683a      	ldr	r2, [r7, #0]
 8010d70:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d003      	beq.n	8010d82 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	683a      	ldr	r2, [r7, #0]
 8010d80:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = 0;
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	2200      	movs	r2, #0
 8010d86:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	683a      	ldr	r2, [r7, #0]
 8010d8c:	605a      	str	r2, [r3, #4]

    return true;
 8010d8e:	2301      	movs	r3, #1
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr

08010d9c <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b085      	sub	sp, #20
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d104      	bne.n	8010db6 <LinkedListGetPrevious+0x1a>
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d101      	bne.n	8010db6 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8010db2:	2300      	movs	r3, #0
 8010db4:	e016      	b.n	8010de4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8010dbc:	683a      	ldr	r2, [r7, #0]
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d00c      	beq.n	8010dde <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8010dc4:	e002      	b.n	8010dcc <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d007      	beq.n	8010de2 <LinkedListGetPrevious+0x46>
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	683a      	ldr	r2, [r7, #0]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d1f4      	bne.n	8010dc6 <LinkedListGetPrevious+0x2a>
 8010ddc:	e001      	b.n	8010de2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8010dde:	2300      	movs	r3, #0
 8010de0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8010de2:	68fb      	ldr	r3, [r7, #12]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3714      	adds	r7, #20
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d104      	bne.n	8010e0a <LinkedListRemove+0x1a>
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d101      	bne.n	8010e0a <LinkedListRemove+0x1a>
    {
        return false;
 8010e06:	2300      	movs	r3, #0
 8010e08:	e020      	b.n	8010e4c <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8010e0a:	6839      	ldr	r1, [r7, #0]
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7ff ffc5 	bl	8010d9c <LinkedListGetPrevious>
 8010e12:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	683a      	ldr	r2, [r7, #0]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d103      	bne.n	8010e26 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	681a      	ldr	r2, [r3, #0]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	683a      	ldr	r2, [r7, #0]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d102      	bne.n	8010e36 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d003      	beq.n	8010e44 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	2200      	movs	r2, #0
 8010e48:	601a      	str	r2, [r3, #0]

    return true;
 8010e4a:	2301      	movs	r3, #1
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3710      	adds	r7, #16
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8010e5e:	79fb      	ldrb	r3, [r7, #7]
 8010e60:	2b0a      	cmp	r3, #10
 8010e62:	bf8c      	ite	hi
 8010e64:	2201      	movhi	r2, #1
 8010e66:	2200      	movls	r2, #0
 8010e68:	b2d2      	uxtb	r2, r2
 8010e6a:	2a00      	cmp	r2, #0
 8010e6c:	d10e      	bne.n	8010e8c <IsSticky+0x38>
 8010e6e:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8010e72:	fa22 f303 	lsr.w	r3, r2, r3
 8010e76:	f003 0301 	and.w	r3, r3, #1
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	bf14      	ite	ne
 8010e7e:	2301      	movne	r3, #1
 8010e80:	2300      	moveq	r3, #0
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d001      	beq.n	8010e8c <IsSticky+0x38>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	e000      	b.n	8010e8e <IsSticky+0x3a>
        default:
            return false;
 8010e8c:	2300      	movs	r3, #0
    }
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	370c      	adds	r7, #12
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr
	...

08010e9c <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 8010ea0:	4b04      	ldr	r3, [pc, #16]	@ (8010eb4 <NvmCtxCallback+0x18>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d002      	beq.n	8010eae <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8010ea8:	4b02      	ldr	r3, [pc, #8]	@ (8010eb4 <NvmCtxCallback+0x18>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	4798      	blx	r3
    }
}
 8010eae:	bf00      	nop
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	20001bf0 	.word	0x20001bf0

08010eb8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8010ec0:	22fc      	movs	r2, #252	@ 0xfc
 8010ec2:	2100      	movs	r1, #0
 8010ec4:	4806      	ldr	r0, [pc, #24]	@ (8010ee0 <LoRaMacCommandsInit+0x28>)
 8010ec6:	f007 fa5b 	bl	8018380 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 8010eca:	4805      	ldr	r0, [pc, #20]	@ (8010ee0 <LoRaMacCommandsInit+0x28>)
 8010ecc:	f7ff ff27 	bl	8010d1e <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8010ed0:	4a04      	ldr	r2, [pc, #16]	@ (8010ee4 <LoRaMacCommandsInit+0x2c>)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6013      	str	r3, [r2, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 8010ed6:	2300      	movs	r3, #0
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	20001bf4 	.word	0x20001bf4
 8010ee4:	20001bf0 	.word	0x20001bf0

08010ee8 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d006      	beq.n	8010f04 <LoRaMacCommandsRestoreNvmCtx+0x1c>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 8010ef6:	22fc      	movs	r2, #252	@ 0xfc
 8010ef8:	6879      	ldr	r1, [r7, #4]
 8010efa:	4805      	ldr	r0, [pc, #20]	@ (8010f10 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 8010efc:	f007 fa03 	bl	8018306 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8010f00:	2300      	movs	r3, #0
 8010f02:	e000      	b.n	8010f06 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010f04:	2301      	movs	r3, #1
    }
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3708      	adds	r7, #8
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	20001bf4 	.word	0x20001bf4

08010f14 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 8010f14:	b480      	push	{r7}
 8010f16:	b083      	sub	sp, #12
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	22fc      	movs	r2, #252	@ 0xfc
 8010f20:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8010f22:	4b03      	ldr	r3, [pc, #12]	@ (8010f30 <LoRaMacCommandsGetNvmCtx+0x1c>)
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	370c      	adds	r7, #12
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr
 8010f30:	20001bf4 	.word	0x20001bf4

08010f34 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b086      	sub	sp, #24
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	607a      	str	r2, [r7, #4]
 8010f40:	73fb      	strb	r3, [r7, #15]
    if( payload == 0 )
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d101      	bne.n	8010f4c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010f48:	2301      	movs	r3, #1
 8010f4a:	e035      	b.n	8010fb8 <LoRaMacCommandsAddCmd+0x84>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8010f4c:	f7ff feac 	bl	8010ca8 <MallocNewMacCommandSlot>
 8010f50:	6178      	str	r0, [r7, #20]

    if( newCmd == 0 )
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d101      	bne.n	8010f5c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8010f58:	2302      	movs	r3, #2
 8010f5a:	e02d      	b.n	8010fb8 <LoRaMacCommandsAddCmd+0x84>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 8010f5c:	6979      	ldr	r1, [r7, #20]
 8010f5e:	4818      	ldr	r0, [pc, #96]	@ (8010fc0 <LoRaMacCommandsAddCmd+0x8c>)
 8010f60:	f7ff fef3 	bl	8010d4a <LinkedListAdd>
 8010f64:	4603      	mov	r3, r0
 8010f66:	f083 0301 	eor.w	r3, r3, #1
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d001      	beq.n	8010f74 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8010f70:	2305      	movs	r3, #5
 8010f72:	e021      	b.n	8010fb8 <LoRaMacCommandsAddCmd+0x84>
    }

    // Set Values
    newCmd->CID = cid;
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	7bfa      	ldrb	r2, [r7, #15]
 8010f78:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	687a      	ldr	r2, [r7, #4]
 8010f7e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	3305      	adds	r3, #5
 8010f84:	687a      	ldr	r2, [r7, #4]
 8010f86:	b292      	uxth	r2, r2
 8010f88:	68b9      	ldr	r1, [r7, #8]
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f007 f9bb 	bl	8018306 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8010f90:	7bfb      	ldrb	r3, [r7, #15]
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7ff ff5e 	bl	8010e54 <IsSticky>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8010fa0:	4b07      	ldr	r3, [pc, #28]	@ (8010fc0 <LoRaMacCommandsAddCmd+0x8c>)
 8010fa2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	4413      	add	r3, r2
 8010faa:	3301      	adds	r3, #1
 8010fac:	4a04      	ldr	r2, [pc, #16]	@ (8010fc0 <LoRaMacCommandsAddCmd+0x8c>)
 8010fae:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    NvmCtxCallback( );
 8010fb2:	f7ff ff73 	bl	8010e9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8010fb6:	2300      	movs	r3, #0
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3718      	adds	r7, #24
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	20001bf4 	.word	0x20001bf4

08010fc4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d101      	bne.n	8010fd6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	e023      	b.n	801101e <LoRaMacCommandsRemoveCmd+0x5a>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 8010fd6:	6879      	ldr	r1, [r7, #4]
 8010fd8:	4813      	ldr	r0, [pc, #76]	@ (8011028 <LoRaMacCommandsRemoveCmd+0x64>)
 8010fda:	f7ff ff09 	bl	8010df0 <LinkedListRemove>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	f083 0301 	eor.w	r3, r3, #1
 8010fe4:	b2db      	uxtb	r3, r3
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d001      	beq.n	8010fee <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8010fea:	2303      	movs	r3, #3
 8010fec:	e017      	b.n	801101e <LoRaMacCommandsRemoveCmd+0x5a>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8010fee:	4b0e      	ldr	r3, [pc, #56]	@ (8011028 <LoRaMacCommandsRemoveCmd+0x64>)
 8010ff0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	689b      	ldr	r3, [r3, #8]
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	3b01      	subs	r3, #1
 8010ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8011028 <LoRaMacCommandsRemoveCmd+0x64>)
 8010ffe:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f7ff fe78 	bl	8010cf8 <FreeMacCommandSlot>
 8011008:	4603      	mov	r3, r0
 801100a:	f083 0301 	eor.w	r3, r3, #1
 801100e:	b2db      	uxtb	r3, r3
 8011010:	2b00      	cmp	r3, #0
 8011012:	d001      	beq.n	8011018 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011014:	2305      	movs	r3, #5
 8011016:	e002      	b.n	801101e <LoRaMacCommandsRemoveCmd+0x5a>
    }

    NvmCtxCallback( );
 8011018:	f7ff ff40 	bl	8010e9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	3708      	adds	r7, #8
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	20001bf4 	.word	0x20001bf4

0801102c <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8011032:	4b10      	ldr	r3, [pc, #64]	@ (8011074 <LoRaMacCommandsRemoveNoneStickyCmds+0x48>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011038:	e012      	b.n	8011060 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	7b1b      	ldrb	r3, [r3, #12]
 801103e:	f083 0301 	eor.w	r3, r3, #1
 8011042:	b2db      	uxtb	r3, r3
 8011044:	2b00      	cmp	r3, #0
 8011046:	d008      	beq.n	801105a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f7ff ffb8 	bl	8010fc4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	607b      	str	r3, [r7, #4]
 8011058:	e002      	b.n	8011060 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1e9      	bne.n	801103a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8011066:	f7ff ff19 	bl	8010e9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801106a:	2300      	movs	r3, #0
}
 801106c:	4618      	mov	r0, r3
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	20001bf4 	.word	0x20001bf4

08011078 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 801107e:	4b0f      	ldr	r3, [pc, #60]	@ (80110bc <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011084:	e00f      	b.n	80110a6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	791b      	ldrb	r3, [r3, #4]
 8011090:	4618      	mov	r0, r3
 8011092:	f7ff fedf 	bl	8010e54 <IsSticky>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d002      	beq.n	80110a2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f7ff ff91 	bl	8010fc4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d1ec      	bne.n	8011086 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 80110ac:	f7ff fef6 	bl	8010e9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80110b0:	2300      	movs	r3, #0
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3708      	adds	r7, #8
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
 80110ba:	bf00      	nop
 80110bc:	20001bf4 	.word	0x20001bf4

080110c0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80110c0:	b480      	push	{r7}
 80110c2:	b083      	sub	sp, #12
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d101      	bne.n	80110d2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80110ce:	2301      	movs	r3, #1
 80110d0:	e005      	b.n	80110de <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 80110d2:	4b06      	ldr	r3, [pc, #24]	@ (80110ec <LoRaMacCommandsGetSizeSerializedCmds+0x2c>)
 80110d4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80110dc:	2300      	movs	r3, #0
}
 80110de:	4618      	mov	r0, r3
 80110e0:	370c      	adds	r7, #12
 80110e2:	46bd      	mov	sp, r7
 80110e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e8:	4770      	bx	lr
 80110ea:	bf00      	nop
 80110ec:	20001bf4 	.word	0x20001bf4

080110f0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b086      	sub	sp, #24
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d002      	beq.n	8011108 <LoRaMacCommandsSerializeCmds+0x18>
 8011102:	68bb      	ldr	r3, [r7, #8]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d101      	bne.n	801110c <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011108:	2301      	movs	r3, #1
 801110a:	e030      	b.n	801116e <LoRaMacCommandsSerializeCmds+0x7e>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 801110c:	4b1a      	ldr	r3, [pc, #104]	@ (8011178 <LoRaMacCommandsSerializeCmds+0x88>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	74fb      	strb	r3, [r7, #19]

    // Loop through all elements
    while( curElement != NULL )
 8011116:	e024      	b.n	8011162 <LoRaMacCommandsSerializeCmds+0x72>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8011118:	7cfb      	ldrb	r3, [r7, #19]
 801111a:	68fa      	ldr	r2, [r7, #12]
 801111c:	1ad2      	subs	r2, r2, r3
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	689b      	ldr	r3, [r3, #8]
 8011122:	3301      	adds	r3, #1
 8011124:	429a      	cmp	r2, r3
 8011126:	d320      	bcc.n	801116a <LoRaMacCommandsSerializeCmds+0x7a>
        {
            buffer[itr++] = curElement->CID;
 8011128:	7cfb      	ldrb	r3, [r7, #19]
 801112a:	1c5a      	adds	r2, r3, #1
 801112c:	74fa      	strb	r2, [r7, #19]
 801112e:	461a      	mov	r2, r3
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	4413      	add	r3, r2
 8011134:	697a      	ldr	r2, [r7, #20]
 8011136:	7912      	ldrb	r2, [r2, #4]
 8011138:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801113a:	7cfb      	ldrb	r3, [r7, #19]
 801113c:	687a      	ldr	r2, [r7, #4]
 801113e:	18d0      	adds	r0, r2, r3
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	1d59      	adds	r1, r3, #5
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	689b      	ldr	r3, [r3, #8]
 8011148:	b29b      	uxth	r3, r3
 801114a:	461a      	mov	r2, r3
 801114c:	f007 f8db 	bl	8018306 <memcpy1>
            itr = itr + curElement->PayloadSize;
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	689b      	ldr	r3, [r3, #8]
 8011154:	b2da      	uxtb	r2, r3
 8011156:	7cfb      	ldrb	r3, [r7, #19]
 8011158:	4413      	add	r3, r2
 801115a:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	617b      	str	r3, [r7, #20]
    while( curElement != NULL )
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1d7      	bne.n	8011118 <LoRaMacCommandsSerializeCmds+0x28>
 8011168:	e000      	b.n	801116c <LoRaMacCommandsSerializeCmds+0x7c>
            break;
 801116a:	bf00      	nop
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801116c:	2300      	movs	r3, #0
}
 801116e:	4618      	mov	r0, r3
 8011170:	3718      	adds	r7, #24
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	20001bf4 	.word	0x20001bf4

0801117c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d101      	bne.n	801118e <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801118a:	2301      	movs	r3, #1
 801118c:	e016      	b.n	80111bc <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 801118e:	4b0e      	ldr	r3, [pc, #56]	@ (80111c8 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2200      	movs	r2, #0
 8011198:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801119a:	e00b      	b.n	80111b4 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	7b1b      	ldrb	r3, [r3, #12]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d004      	beq.n	80111ae <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2201      	movs	r2, #1
 80111a8:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80111aa:	2300      	movs	r3, #0
 80111ac:	e006      	b.n	80111bc <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d1f0      	bne.n	801119c <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80111ba:	2300      	movs	r3, #0
}
 80111bc:	4618      	mov	r0, r3
 80111be:	3714      	adds	r7, #20
 80111c0:	46bd      	mov	sp, r7
 80111c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c6:	4770      	bx	lr
 80111c8:	20001bf4 	.word	0x20001bf4

080111cc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80111cc:	b480      	push	{r7}
 80111ce:	b083      	sub	sp, #12
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80111d4:	4b09      	ldr	r3, [pc, #36]	@ (80111fc <IncreaseBufferPointer+0x30>)
 80111d6:	691b      	ldr	r3, [r3, #16]
 80111d8:	3310      	adds	r3, #16
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	429a      	cmp	r2, r3
 80111de:	d103      	bne.n	80111e8 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80111e0:	4b06      	ldr	r3, [pc, #24]	@ (80111fc <IncreaseBufferPointer+0x30>)
 80111e2:	691b      	ldr	r3, [r3, #16]
 80111e4:	607b      	str	r3, [r7, #4]
 80111e6:	e002      	b.n	80111ee <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	3304      	adds	r3, #4
 80111ec:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80111ee:	687b      	ldr	r3, [r7, #4]
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	370c      	adds	r7, #12
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr
 80111fc:	20001d08 	.word	0x20001d08

08011200 <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b086      	sub	sp, #24
 8011204:	af00      	add	r7, sp, #0
 8011206:	4603      	mov	r3, r0
 8011208:	60b9      	str	r1, [r7, #8]
 801120a:	607a      	str	r2, [r7, #4]
 801120c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 8011212:	e00a      	b.n	801122a <GetElement+0x2a>
    {
        if( element->Request == request )
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	7bfa      	ldrb	r2, [r7, #15]
 801121a:	429a      	cmp	r2, r3
 801121c:	d101      	bne.n	8011222 <GetElement+0x22>
        {
            // We have found the element
            return element;
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	e008      	b.n	8011234 <GetElement+0x34>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 8011222:	6978      	ldr	r0, [r7, #20]
 8011224:	f7ff ffd2 	bl	80111cc <IncreaseBufferPointer>
 8011228:	6178      	str	r0, [r7, #20]
    while( element != bufferEnd )
 801122a:	697a      	ldr	r2, [r7, #20]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	429a      	cmp	r2, r3
 8011230:	d1f0      	bne.n	8011214 <GetElement+0x14>
        }
    }
    return NULL;
 8011232:	2300      	movs	r3, #0
}
 8011234:	4618      	mov	r0, r3
 8011236:	3718      	adds	r7, #24
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 8011246:	4a13      	ldr	r2, [pc, #76]	@ (8011294 <LoRaMacConfirmQueueInit+0x58>)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6013      	str	r3, [r2, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 801124c:	4b11      	ldr	r3, [pc, #68]	@ (8011294 <LoRaMacConfirmQueueInit+0x58>)
 801124e:	4a12      	ldr	r2, [pc, #72]	@ (8011298 <LoRaMacConfirmQueueInit+0x5c>)
 8011250:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8011252:	4b10      	ldr	r3, [pc, #64]	@ (8011294 <LoRaMacConfirmQueueInit+0x58>)
 8011254:	691b      	ldr	r3, [r3, #16]
 8011256:	2200      	movs	r2, #0
 8011258:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 801125a:	4b0e      	ldr	r3, [pc, #56]	@ (8011294 <LoRaMacConfirmQueueInit+0x58>)
 801125c:	691b      	ldr	r3, [r3, #16]
 801125e:	461a      	mov	r2, r3
 8011260:	4b0c      	ldr	r3, [pc, #48]	@ (8011294 <LoRaMacConfirmQueueInit+0x58>)
 8011262:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8011264:	4b0b      	ldr	r3, [pc, #44]	@ (8011294 <LoRaMacConfirmQueueInit+0x58>)
 8011266:	691b      	ldr	r3, [r3, #16]
 8011268:	461a      	mov	r2, r3
 801126a:	4b0a      	ldr	r3, [pc, #40]	@ (8011294 <LoRaMacConfirmQueueInit+0x58>)
 801126c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 801126e:	4b09      	ldr	r3, [pc, #36]	@ (8011294 <LoRaMacConfirmQueueInit+0x58>)
 8011270:	691b      	ldr	r3, [r3, #16]
 8011272:	2214      	movs	r2, #20
 8011274:	21ff      	movs	r1, #255	@ 0xff
 8011276:	4618      	mov	r0, r3
 8011278:	f007 f882 	bl	8018380 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801127c:	4b05      	ldr	r3, [pc, #20]	@ (8011294 <LoRaMacConfirmQueueInit+0x58>)
 801127e:	691b      	ldr	r3, [r3, #16]
 8011280:	2201      	movs	r2, #1
 8011282:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 8011284:	4a03      	ldr	r2, [pc, #12]	@ (8011294 <LoRaMacConfirmQueueInit+0x58>)
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	60d3      	str	r3, [r2, #12]
}
 801128a:	bf00      	nop
 801128c:	3708      	adds	r7, #8
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	20001d08 	.word	0x20001d08
 8011298:	20001cf0 	.word	0x20001cf0

0801129c <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d006      	beq.n	80112b8 <LoRaMacConfirmQueueRestoreNvmCtx+0x1c>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 80112aa:	2216      	movs	r2, #22
 80112ac:	6879      	ldr	r1, [r7, #4]
 80112ae:	4805      	ldr	r0, [pc, #20]	@ (80112c4 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 80112b0:	f007 f829 	bl	8018306 <memcpy1>
        return true;
 80112b4:	2301      	movs	r3, #1
 80112b6:	e000      	b.n	80112ba <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    }
    else
    {
        return false;
 80112b8:	2300      	movs	r3, #0
    }
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3708      	adds	r7, #8
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	20001cf0 	.word	0x20001cf0

080112c8 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2216      	movs	r2, #22
 80112d4:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 80112d6:	4b03      	ldr	r3, [pc, #12]	@ (80112e4 <LoRaMacConfirmQueueGetNvmCtx+0x1c>)
}
 80112d8:	4618      	mov	r0, r3
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr
 80112e4:	20001cf0 	.word	0x20001cf0

080112e8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80112f0:	4b16      	ldr	r3, [pc, #88]	@ (801134c <LoRaMacConfirmQueueAdd+0x64>)
 80112f2:	691b      	ldr	r3, [r3, #16]
 80112f4:	7d1b      	ldrb	r3, [r3, #20]
 80112f6:	2b04      	cmp	r3, #4
 80112f8:	d901      	bls.n	80112fe <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 80112fa:	2300      	movs	r3, #0
 80112fc:	e021      	b.n	8011342 <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80112fe:	4b13      	ldr	r3, [pc, #76]	@ (801134c <LoRaMacConfirmQueueAdd+0x64>)
 8011300:	689b      	ldr	r3, [r3, #8]
 8011302:	687a      	ldr	r2, [r7, #4]
 8011304:	7812      	ldrb	r2, [r2, #0]
 8011306:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8011308:	4b10      	ldr	r3, [pc, #64]	@ (801134c <LoRaMacConfirmQueueAdd+0x64>)
 801130a:	689b      	ldr	r3, [r3, #8]
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	7852      	ldrb	r2, [r2, #1]
 8011310:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8011312:	4b0e      	ldr	r3, [pc, #56]	@ (801134c <LoRaMacConfirmQueueAdd+0x64>)
 8011314:	689b      	ldr	r3, [r3, #8]
 8011316:	687a      	ldr	r2, [r7, #4]
 8011318:	78d2      	ldrb	r2, [r2, #3]
 801131a:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 801131c:	4b0b      	ldr	r3, [pc, #44]	@ (801134c <LoRaMacConfirmQueueAdd+0x64>)
 801131e:	689b      	ldr	r3, [r3, #8]
 8011320:	2200      	movs	r2, #0
 8011322:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8011324:	4b09      	ldr	r3, [pc, #36]	@ (801134c <LoRaMacConfirmQueueAdd+0x64>)
 8011326:	691b      	ldr	r3, [r3, #16]
 8011328:	7d1a      	ldrb	r2, [r3, #20]
 801132a:	3201      	adds	r2, #1
 801132c:	b2d2      	uxtb	r2, r2
 801132e:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8011330:	4b06      	ldr	r3, [pc, #24]	@ (801134c <LoRaMacConfirmQueueAdd+0x64>)
 8011332:	689b      	ldr	r3, [r3, #8]
 8011334:	4618      	mov	r0, r3
 8011336:	f7ff ff49 	bl	80111cc <IncreaseBufferPointer>
 801133a:	4603      	mov	r3, r0
 801133c:	4a03      	ldr	r2, [pc, #12]	@ (801134c <LoRaMacConfirmQueueAdd+0x64>)
 801133e:	6093      	str	r3, [r2, #8]

    return true;
 8011340:	2301      	movs	r3, #1
}
 8011342:	4618      	mov	r0, r3
 8011344:	3708      	adds	r7, #8
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
 801134a:	bf00      	nop
 801134c:	20001d08 	.word	0x20001d08

08011350 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8011350:	b580      	push	{r7, lr}
 8011352:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 8011354:	4b0b      	ldr	r3, [pc, #44]	@ (8011384 <LoRaMacConfirmQueueRemoveFirst+0x34>)
 8011356:	691b      	ldr	r3, [r3, #16]
 8011358:	7d1b      	ldrb	r3, [r3, #20]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d101      	bne.n	8011362 <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 801135e:	2300      	movs	r3, #0
 8011360:	e00e      	b.n	8011380 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8011362:	4b08      	ldr	r3, [pc, #32]	@ (8011384 <LoRaMacConfirmQueueRemoveFirst+0x34>)
 8011364:	691b      	ldr	r3, [r3, #16]
 8011366:	7d1a      	ldrb	r2, [r3, #20]
 8011368:	3a01      	subs	r2, #1
 801136a:	b2d2      	uxtb	r2, r2
 801136c:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801136e:	4b05      	ldr	r3, [pc, #20]	@ (8011384 <LoRaMacConfirmQueueRemoveFirst+0x34>)
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	4618      	mov	r0, r3
 8011374:	f7ff ff2a 	bl	80111cc <IncreaseBufferPointer>
 8011378:	4603      	mov	r3, r0
 801137a:	4a02      	ldr	r2, [pc, #8]	@ (8011384 <LoRaMacConfirmQueueRemoveFirst+0x34>)
 801137c:	6053      	str	r3, [r2, #4]

    return true;
 801137e:	2301      	movs	r3, #1
}
 8011380:	4618      	mov	r0, r3
 8011382:	bd80      	pop	{r7, pc}
 8011384:	20001d08 	.word	0x20001d08

08011388 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	4603      	mov	r3, r0
 8011390:	460a      	mov	r2, r1
 8011392:	71fb      	strb	r3, [r7, #7]
 8011394:	4613      	mov	r3, r2
 8011396:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8011398:	2300      	movs	r3, #0
 801139a:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 801139c:	4b0d      	ldr	r3, [pc, #52]	@ (80113d4 <LoRaMacConfirmQueueSetStatus+0x4c>)
 801139e:	691b      	ldr	r3, [r3, #16]
 80113a0:	7d1b      	ldrb	r3, [r3, #20]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d011      	beq.n	80113ca <LoRaMacConfirmQueueSetStatus+0x42>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80113a6:	4b0b      	ldr	r3, [pc, #44]	@ (80113d4 <LoRaMacConfirmQueueSetStatus+0x4c>)
 80113a8:	6859      	ldr	r1, [r3, #4]
 80113aa:	4b0a      	ldr	r3, [pc, #40]	@ (80113d4 <LoRaMacConfirmQueueSetStatus+0x4c>)
 80113ac:	689a      	ldr	r2, [r3, #8]
 80113ae:	79bb      	ldrb	r3, [r7, #6]
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7ff ff25 	bl	8011200 <GetElement>
 80113b6:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d005      	beq.n	80113ca <LoRaMacConfirmQueueSetStatus+0x42>
        {
            element->Status = status;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	79fa      	ldrb	r2, [r7, #7]
 80113c2:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2201      	movs	r2, #1
 80113c8:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80113ca:	bf00      	nop
 80113cc:	3710      	adds	r7, #16
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	20001d08 	.word	0x20001d08

080113d8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	4603      	mov	r3, r0
 80113e0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80113e2:	2300      	movs	r3, #0
 80113e4:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80113e6:	4b0c      	ldr	r3, [pc, #48]	@ (8011418 <LoRaMacConfirmQueueGetStatus+0x40>)
 80113e8:	691b      	ldr	r3, [r3, #16]
 80113ea:	7d1b      	ldrb	r3, [r3, #20]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00e      	beq.n	801140e <LoRaMacConfirmQueueGetStatus+0x36>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80113f0:	4b09      	ldr	r3, [pc, #36]	@ (8011418 <LoRaMacConfirmQueueGetStatus+0x40>)
 80113f2:	6859      	ldr	r1, [r3, #4]
 80113f4:	4b08      	ldr	r3, [pc, #32]	@ (8011418 <LoRaMacConfirmQueueGetStatus+0x40>)
 80113f6:	689a      	ldr	r2, [r3, #8]
 80113f8:	79fb      	ldrb	r3, [r7, #7]
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7ff ff00 	bl	8011200 <GetElement>
 8011400:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d002      	beq.n	801140e <LoRaMacConfirmQueueGetStatus+0x36>
        {
            return element->Status;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	785b      	ldrb	r3, [r3, #1]
 801140c:	e000      	b.n	8011410 <LoRaMacConfirmQueueGetStatus+0x38>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801140e:	2301      	movs	r3, #1
}
 8011410:	4618      	mov	r0, r3
 8011412:	3710      	adds	r7, #16
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	20001d08 	.word	0x20001d08

0801141c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	4603      	mov	r3, r0
 8011424:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8011426:	4b13      	ldr	r3, [pc, #76]	@ (8011474 <LoRaMacConfirmQueueSetStatusCmn+0x58>)
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 801142c:	4b11      	ldr	r3, [pc, #68]	@ (8011474 <LoRaMacConfirmQueueSetStatusCmn+0x58>)
 801142e:	691b      	ldr	r3, [r3, #16]
 8011430:	79fa      	ldrb	r2, [r7, #7]
 8011432:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8011434:	4b0f      	ldr	r3, [pc, #60]	@ (8011474 <LoRaMacConfirmQueueSetStatusCmn+0x58>)
 8011436:	691b      	ldr	r3, [r3, #16]
 8011438:	7d1b      	ldrb	r3, [r3, #20]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d015      	beq.n	801146a <LoRaMacConfirmQueueSetStatusCmn+0x4e>
    {
        do
        {
            element->Status = status;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	79fa      	ldrb	r2, [r7, #7]
 8011442:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	78db      	ldrb	r3, [r3, #3]
 8011448:	f083 0301 	eor.w	r3, r3, #1
 801144c:	b2db      	uxtb	r3, r3
 801144e:	2b00      	cmp	r3, #0
 8011450:	d002      	beq.n	8011458 <LoRaMacConfirmQueueSetStatusCmn+0x3c>
            {
                element->ReadyToHandle = true;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2201      	movs	r2, #1
 8011456:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8011458:	68f8      	ldr	r0, [r7, #12]
 801145a:	f7ff feb7 	bl	80111cc <IncreaseBufferPointer>
 801145e:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8011460:	4b04      	ldr	r3, [pc, #16]	@ (8011474 <LoRaMacConfirmQueueSetStatusCmn+0x58>)
 8011462:	689b      	ldr	r3, [r3, #8]
 8011464:	68fa      	ldr	r2, [r7, #12]
 8011466:	429a      	cmp	r2, r3
 8011468:	d1e9      	bne.n	801143e <LoRaMacConfirmQueueSetStatusCmn+0x22>
    }
}
 801146a:	bf00      	nop
 801146c:	3710      	adds	r7, #16
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}
 8011472:	bf00      	nop
 8011474:	20001d08 	.word	0x20001d08

08011478 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b082      	sub	sp, #8
 801147c:	af00      	add	r7, sp, #0
 801147e:	4603      	mov	r3, r0
 8011480:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8011482:	4b09      	ldr	r3, [pc, #36]	@ (80114a8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8011484:	6859      	ldr	r1, [r3, #4]
 8011486:	4b08      	ldr	r3, [pc, #32]	@ (80114a8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8011488:	689a      	ldr	r2, [r3, #8]
 801148a:	79fb      	ldrb	r3, [r7, #7]
 801148c:	4618      	mov	r0, r3
 801148e:	f7ff feb7 	bl	8011200 <GetElement>
 8011492:	4603      	mov	r3, r0
 8011494:	2b00      	cmp	r3, #0
 8011496:	d001      	beq.n	801149c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8011498:	2301      	movs	r3, #1
 801149a:	e000      	b.n	801149e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801149c:	2300      	movs	r3, #0
}
 801149e:	4618      	mov	r0, r3
 80114a0:	3708      	adds	r7, #8
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}
 80114a6:	bf00      	nop
 80114a8:	20001d08 	.word	0x20001d08

080114ac <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80114b4:	4b22      	ldr	r3, [pc, #136]	@ (8011540 <LoRaMacConfirmQueueHandleCb+0x94>)
 80114b6:	691b      	ldr	r3, [r3, #16]
 80114b8:	7d1b      	ldrb	r3, [r3, #20]
 80114ba:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80114bc:	2300      	movs	r3, #0
 80114be:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80114c0:	2300      	movs	r3, #0
 80114c2:	73fb      	strb	r3, [r7, #15]
 80114c4:	e032      	b.n	801152c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80114c6:	4b1e      	ldr	r3, [pc, #120]	@ (8011540 <LoRaMacConfirmQueueHandleCb+0x94>)
 80114c8:	685b      	ldr	r3, [r3, #4]
 80114ca:	781a      	ldrb	r2, [r3, #0]
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80114d0:	4b1b      	ldr	r3, [pc, #108]	@ (8011540 <LoRaMacConfirmQueueHandleCb+0x94>)
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	785a      	ldrb	r2, [r3, #1]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80114da:	4b19      	ldr	r3, [pc, #100]	@ (8011540 <LoRaMacConfirmQueueHandleCb+0x94>)
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	789b      	ldrb	r3, [r3, #2]
 80114e0:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80114e2:	7b7b      	ldrb	r3, [r7, #13]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d005      	beq.n	80114f4 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80114e8:	4b15      	ldr	r3, [pc, #84]	@ (8011540 <LoRaMacConfirmQueueHandleCb+0x94>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	689b      	ldr	r3, [r3, #8]
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	4798      	blx	r3
 80114f2:	e00b      	b.n	801150c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80114f4:	4b12      	ldr	r3, [pc, #72]	@ (8011540 <LoRaMacConfirmQueueHandleCb+0x94>)
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80114fc:	4b10      	ldr	r3, [pc, #64]	@ (8011540 <LoRaMacConfirmQueueHandleCb+0x94>)
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	785b      	ldrb	r3, [r3, #1]
 8011502:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8011504:	4b0e      	ldr	r3, [pc, #56]	@ (8011540 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	78db      	ldrb	r3, [r3, #3]
 801150a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801150c:	f7ff ff20 	bl	8011350 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8011510:	7b7b      	ldrb	r3, [r7, #13]
 8011512:	f083 0301 	eor.w	r3, r3, #1
 8011516:	b2db      	uxtb	r3, r3
 8011518:	2b00      	cmp	r3, #0
 801151a:	d004      	beq.n	8011526 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801151c:	f107 0308 	add.w	r3, r7, #8
 8011520:	4618      	mov	r0, r3
 8011522:	f7ff fee1 	bl	80112e8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8011526:	7bfb      	ldrb	r3, [r7, #15]
 8011528:	3301      	adds	r3, #1
 801152a:	73fb      	strb	r3, [r7, #15]
 801152c:	7bfa      	ldrb	r2, [r7, #15]
 801152e:	7bbb      	ldrb	r3, [r7, #14]
 8011530:	429a      	cmp	r2, r3
 8011532:	d3c8      	bcc.n	80114c6 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8011534:	bf00      	nop
 8011536:	bf00      	nop
 8011538:	3710      	adds	r7, #16
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
 801153e:	bf00      	nop
 8011540:	20001d08 	.word	0x20001d08

08011544 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8011544:	b480      	push	{r7}
 8011546:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8011548:	4b03      	ldr	r3, [pc, #12]	@ (8011558 <LoRaMacConfirmQueueGetCnt+0x14>)
 801154a:	691b      	ldr	r3, [r3, #16]
 801154c:	7d1b      	ldrb	r3, [r3, #20]
}
 801154e:	4618      	mov	r0, r3
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr
 8011558:	20001d08 	.word	0x20001d08

0801155c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801155c:	b480      	push	{r7}
 801155e:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8011560:	4b06      	ldr	r3, [pc, #24]	@ (801157c <LoRaMacConfirmQueueIsFull+0x20>)
 8011562:	691b      	ldr	r3, [r3, #16]
 8011564:	7d1b      	ldrb	r3, [r3, #20]
 8011566:	2b04      	cmp	r3, #4
 8011568:	d901      	bls.n	801156e <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
 801156a:	2301      	movs	r3, #1
 801156c:	e000      	b.n	8011570 <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
 801156e:	2300      	movs	r3, #0
    }
}
 8011570:	4618      	mov	r0, r3
 8011572:	46bd      	mov	sp, r7
 8011574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop
 801157c:	20001d08 	.word	0x20001d08

08011580 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b08e      	sub	sp, #56	@ 0x38
 8011584:	af00      	add	r7, sp, #0
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	607b      	str	r3, [r7, #4]
 801158a:	460b      	mov	r3, r1
 801158c:	817b      	strh	r3, [r7, #10]
 801158e:	4613      	mov	r3, r2
 8011590:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d101      	bne.n	801159c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011598:	230a      	movs	r3, #10
 801159a:	e086      	b.n	80116aa <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 801159c:	2300      	movs	r3, #0
 801159e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 80115a2:	2301      	movs	r3, #1
 80115a4:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 80115a6:	2300      	movs	r3, #0
 80115a8:	623b      	str	r3, [r7, #32]
 80115aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80115ae:	2200      	movs	r2, #0
 80115b0:	601a      	str	r2, [r3, #0]
 80115b2:	605a      	str	r2, [r3, #4]
 80115b4:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80115b6:	2300      	movs	r3, #0
 80115b8:	613b      	str	r3, [r7, #16]
 80115ba:	f107 0314 	add.w	r3, r7, #20
 80115be:	2200      	movs	r2, #0
 80115c0:	601a      	str	r2, [r3, #0]
 80115c2:	605a      	str	r2, [r3, #4]
 80115c4:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80115c6:	2301      	movs	r3, #1
 80115c8:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80115ca:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80115ce:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	0a1b      	lsrs	r3, r3, #8
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	0c1b      	lsrs	r3, r3, #16
 80115e2:	b2db      	uxtb	r3, r3
 80115e4:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	0e1b      	lsrs	r3, r3, #24
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80115ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115f0:	b2db      	uxtb	r3, r3
 80115f2:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80115f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115f6:	0a1b      	lsrs	r3, r3, #8
 80115f8:	b2db      	uxtb	r3, r3
 80115fa:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80115fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115fe:	0c1b      	lsrs	r3, r3, #16
 8011600:	b2db      	uxtb	r3, r3
 8011602:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8011604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011606:	0e1b      	lsrs	r3, r3, #24
 8011608:	b2db      	uxtb	r3, r3
 801160a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801160c:	e048      	b.n	80116a0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801160e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011610:	b2db      	uxtb	r3, r3
 8011612:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8011614:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011616:	3301      	adds	r3, #1
 8011618:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801161a:	f107 0320 	add.w	r3, r7, #32
 801161e:	7a7a      	ldrb	r2, [r7, #9]
 8011620:	f107 0010 	add.w	r0, r7, #16
 8011624:	2110      	movs	r1, #16
 8011626:	f7f6 fdf1 	bl	800820c <SecureElementAesEncrypt>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d001      	beq.n	8011634 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011630:	230f      	movs	r3, #15
 8011632:	e03a      	b.n	80116aa <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8011634:	2300      	movs	r3, #0
 8011636:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801163a:	e01e      	b.n	801167a <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801163c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8011640:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011644:	4413      	add	r3, r2
 8011646:	461a      	mov	r2, r3
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	4413      	add	r3, r2
 801164c:	7819      	ldrb	r1, [r3, #0]
 801164e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011652:	3338      	adds	r3, #56	@ 0x38
 8011654:	443b      	add	r3, r7
 8011656:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801165a:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 801165e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011662:	4403      	add	r3, r0
 8011664:	4618      	mov	r0, r3
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	4403      	add	r3, r0
 801166a:	404a      	eors	r2, r1
 801166c:	b2d2      	uxtb	r2, r2
 801166e:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8011670:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011674:	3301      	adds	r3, #1
 8011676:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801167a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801167e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011682:	2a10      	cmp	r2, #16
 8011684:	bfa8      	it	ge
 8011686:	2210      	movge	r2, #16
 8011688:	b212      	sxth	r2, r2
 801168a:	4293      	cmp	r3, r2
 801168c:	dbd6      	blt.n	801163c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 801168e:	897b      	ldrh	r3, [r7, #10]
 8011690:	3b10      	subs	r3, #16
 8011692:	b29b      	uxth	r3, r3
 8011694:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8011696:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801169a:	3310      	adds	r3, #16
 801169c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80116a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	dcb2      	bgt.n	801160e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80116a8:	2300      	movs	r3, #0
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3738      	adds	r7, #56	@ 0x38
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
	...

080116b4 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80116b4:	b490      	push	{r4, r7}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	4604      	mov	r4, r0
 80116bc:	4608      	mov	r0, r1
 80116be:	4611      	mov	r1, r2
 80116c0:	461a      	mov	r2, r3
 80116c2:	4623      	mov	r3, r4
 80116c4:	80fb      	strh	r3, [r7, #6]
 80116c6:	4603      	mov	r3, r0
 80116c8:	717b      	strb	r3, [r7, #5]
 80116ca:	460b      	mov	r3, r1
 80116cc:	713b      	strb	r3, [r7, #4]
 80116ce:	4613      	mov	r3, r2
 80116d0:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80116d2:	6a3b      	ldr	r3, [r7, #32]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d101      	bne.n	80116dc <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80116d8:	230a      	movs	r3, #10
 80116da:	e067      	b.n	80117ac <PrepareB0+0xf8>
    }

    b0[0] = 0x49;
 80116dc:	6a3b      	ldr	r3, [r7, #32]
 80116de:	2249      	movs	r2, #73	@ 0x49
 80116e0:	701a      	strb	r2, [r3, #0]

    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 80116e2:	793b      	ldrb	r3, [r7, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d015      	beq.n	8011714 <PrepareB0+0x60>
 80116e8:	78fb      	ldrb	r3, [r7, #3]
 80116ea:	2b01      	cmp	r3, #1
 80116ec:	d112      	bne.n	8011714 <PrepareB0+0x60>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 80116ee:	2300      	movs	r3, #0
 80116f0:	81fb      	strh	r3, [r7, #14]

        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 80116f2:	4b31      	ldr	r3, [pc, #196]	@ (80117b8 <PrepareB0+0x104>)
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	81fb      	strh	r3, [r7, #14]

        b0[1] = confFCnt & 0xFF;
 80116fa:	6a3b      	ldr	r3, [r7, #32]
 80116fc:	3301      	adds	r3, #1
 80116fe:	89fa      	ldrh	r2, [r7, #14]
 8011700:	b2d2      	uxtb	r2, r2
 8011702:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8011704:	89fb      	ldrh	r3, [r7, #14]
 8011706:	0a1b      	lsrs	r3, r3, #8
 8011708:	b29a      	uxth	r2, r3
 801170a:	6a3b      	ldr	r3, [r7, #32]
 801170c:	3302      	adds	r3, #2
 801170e:	b2d2      	uxtb	r2, r2
 8011710:	701a      	strb	r2, [r3, #0]
    {
 8011712:	e007      	b.n	8011724 <PrepareB0+0x70>
    }
    else
    {
        b0[1] = 0x00;
 8011714:	6a3b      	ldr	r3, [r7, #32]
 8011716:	3301      	adds	r3, #1
 8011718:	2200      	movs	r2, #0
 801171a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 801171c:	6a3b      	ldr	r3, [r7, #32]
 801171e:	3302      	adds	r3, #2
 8011720:	2200      	movs	r2, #0
 8011722:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8011724:	6a3b      	ldr	r3, [r7, #32]
 8011726:	3303      	adds	r3, #3
 8011728:	2200      	movs	r2, #0
 801172a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 801172c:	6a3b      	ldr	r3, [r7, #32]
 801172e:	3304      	adds	r3, #4
 8011730:	2200      	movs	r2, #0
 8011732:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8011734:	6a3b      	ldr	r3, [r7, #32]
 8011736:	3305      	adds	r3, #5
 8011738:	78fa      	ldrb	r2, [r7, #3]
 801173a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801173c:	6a3b      	ldr	r3, [r7, #32]
 801173e:	3306      	adds	r3, #6
 8011740:	69ba      	ldr	r2, [r7, #24]
 8011742:	b2d2      	uxtb	r2, r2
 8011744:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8011746:	69bb      	ldr	r3, [r7, #24]
 8011748:	0a1a      	lsrs	r2, r3, #8
 801174a:	6a3b      	ldr	r3, [r7, #32]
 801174c:	3307      	adds	r3, #7
 801174e:	b2d2      	uxtb	r2, r2
 8011750:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8011752:	69bb      	ldr	r3, [r7, #24]
 8011754:	0c1a      	lsrs	r2, r3, #16
 8011756:	6a3b      	ldr	r3, [r7, #32]
 8011758:	3308      	adds	r3, #8
 801175a:	b2d2      	uxtb	r2, r2
 801175c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	0e1a      	lsrs	r2, r3, #24
 8011762:	6a3b      	ldr	r3, [r7, #32]
 8011764:	3309      	adds	r3, #9
 8011766:	b2d2      	uxtb	r2, r2
 8011768:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801176a:	6a3b      	ldr	r3, [r7, #32]
 801176c:	330a      	adds	r3, #10
 801176e:	69fa      	ldr	r2, [r7, #28]
 8011770:	b2d2      	uxtb	r2, r2
 8011772:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	0a1a      	lsrs	r2, r3, #8
 8011778:	6a3b      	ldr	r3, [r7, #32]
 801177a:	330b      	adds	r3, #11
 801177c:	b2d2      	uxtb	r2, r2
 801177e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8011780:	69fb      	ldr	r3, [r7, #28]
 8011782:	0c1a      	lsrs	r2, r3, #16
 8011784:	6a3b      	ldr	r3, [r7, #32]
 8011786:	330c      	adds	r3, #12
 8011788:	b2d2      	uxtb	r2, r2
 801178a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	0e1a      	lsrs	r2, r3, #24
 8011790:	6a3b      	ldr	r3, [r7, #32]
 8011792:	330d      	adds	r3, #13
 8011794:	b2d2      	uxtb	r2, r2
 8011796:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8011798:	6a3b      	ldr	r3, [r7, #32]
 801179a:	330e      	adds	r3, #14
 801179c:	2200      	movs	r2, #0
 801179e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80117a0:	6a3b      	ldr	r3, [r7, #32]
 80117a2:	330f      	adds	r3, #15
 80117a4:	88fa      	ldrh	r2, [r7, #6]
 80117a6:	b2d2      	uxtb	r2, r2
 80117a8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80117aa:	2300      	movs	r3, #0
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3710      	adds	r7, #16
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bc90      	pop	{r4, r7}
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop
 80117b8:	20001d1c 	.word	0x20001d1c

080117bc <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80117bc:	b590      	push	{r4, r7, lr}
 80117be:	b08b      	sub	sp, #44	@ 0x2c
 80117c0:	af04      	add	r7, sp, #16
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	4608      	mov	r0, r1
 80117c6:	4611      	mov	r1, r2
 80117c8:	461a      	mov	r2, r3
 80117ca:	4603      	mov	r3, r0
 80117cc:	807b      	strh	r3, [r7, #2]
 80117ce:	460b      	mov	r3, r1
 80117d0:	707b      	strb	r3, [r7, #1]
 80117d2:	4613      	mov	r3, r2
 80117d4:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d002      	beq.n	80117e2 <ComputeCmacB0+0x26>
 80117dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d101      	bne.n	80117e6 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80117e2:	230a      	movs	r3, #10
 80117e4:	e024      	b.n	8011830 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80117e6:	887b      	ldrh	r3, [r7, #2]
 80117e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80117ec:	d901      	bls.n	80117f2 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80117ee:	230e      	movs	r3, #14
 80117f0:	e01e      	b.n	8011830 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80117f2:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 80117f6:	783a      	ldrb	r2, [r7, #0]
 80117f8:	7879      	ldrb	r1, [r7, #1]
 80117fa:	8878      	ldrh	r0, [r7, #2]
 80117fc:	f107 0308 	add.w	r3, r7, #8
 8011800:	9302      	str	r3, [sp, #8]
 8011802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011804:	9301      	str	r3, [sp, #4]
 8011806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011808:	9300      	str	r3, [sp, #0]
 801180a:	4623      	mov	r3, r4
 801180c:	f7ff ff52 	bl	80116b4 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8011810:	7879      	ldrb	r1, [r7, #1]
 8011812:	887a      	ldrh	r2, [r7, #2]
 8011814:	f107 0008 	add.w	r0, r7, #8
 8011818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801181a:	9300      	str	r3, [sp, #0]
 801181c:	460b      	mov	r3, r1
 801181e:	6879      	ldr	r1, [r7, #4]
 8011820:	f7f6 fca6 	bl	8008170 <SecureElementComputeAesCmac>
 8011824:	4603      	mov	r3, r0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d001      	beq.n	801182e <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801182a:	230f      	movs	r3, #15
 801182c:	e000      	b.n	8011830 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801182e:	2300      	movs	r3, #0
}
 8011830:	4618      	mov	r0, r3
 8011832:	371c      	adds	r7, #28
 8011834:	46bd      	mov	sp, r7
 8011836:	bd90      	pop	{r4, r7, pc}

08011838 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8011838:	b590      	push	{r4, r7, lr}
 801183a:	b0cd      	sub	sp, #308	@ 0x134
 801183c:	af04      	add	r7, sp, #16
 801183e:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8011842:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8011846:	6020      	str	r0, [r4, #0]
 8011848:	460c      	mov	r4, r1
 801184a:	4610      	mov	r0, r2
 801184c:	4619      	mov	r1, r3
 801184e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011852:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8011856:	4622      	mov	r2, r4
 8011858:	801a      	strh	r2, [r3, #0]
 801185a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801185e:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8011862:	4602      	mov	r2, r0
 8011864:	701a      	strb	r2, [r3, #0]
 8011866:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801186a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801186e:	460a      	mov	r2, r1
 8011870:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8011872:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011876:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d101      	bne.n	8011884 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011880:	230a      	movs	r3, #10
 8011882:	e063      	b.n	801194c <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011884:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011888:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011892:	d901      	bls.n	8011898 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011894:	230e      	movs	r3, #14
 8011896:	e059      	b.n	801194c <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011898:	f107 030c 	add.w	r3, r7, #12
 801189c:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80118a0:	2100      	movs	r1, #0
 80118a2:	4618      	mov	r0, r3
 80118a4:	f006 fd6c 	bl	8018380 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80118a8:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 80118ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80118b0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80118b4:	781a      	ldrb	r2, [r3, #0]
 80118b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80118ba:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80118be:	7819      	ldrb	r1, [r3, #0]
 80118c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80118c4:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80118c8:	8818      	ldrh	r0, [r3, #0]
 80118ca:	f107 030c 	add.w	r3, r7, #12
 80118ce:	9302      	str	r3, [sp, #8]
 80118d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80118d4:	9301      	str	r3, [sp, #4]
 80118d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80118da:	9300      	str	r3, [sp, #0]
 80118dc:	4623      	mov	r3, r4
 80118de:	f7ff fee9 	bl	80116b4 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80118e2:	f107 030c 	add.w	r3, r7, #12
 80118e6:	3310      	adds	r3, #16
 80118e8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80118ec:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 80118f0:	8812      	ldrh	r2, [r2, #0]
 80118f2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80118f6:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80118fa:	6809      	ldr	r1, [r1, #0]
 80118fc:	4618      	mov	r0, r3
 80118fe:	f006 fd02 	bl	8018306 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8011902:	2306      	movs	r3, #6
 8011904:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8011908:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801190c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8011910:	881b      	ldrh	r3, [r3, #0]
 8011912:	3310      	adds	r3, #16
 8011914:	b299      	uxth	r1, r3
 8011916:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801191a:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	f107 000c 	add.w	r0, r7, #12
 8011924:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8011928:	f7f6 fc40 	bl	80081ac <SecureElementVerifyAesCmac>
 801192c:	4603      	mov	r3, r0
 801192e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8011932:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8011936:	2b00      	cmp	r3, #0
 8011938:	d101      	bne.n	801193e <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801193a:	2300      	movs	r3, #0
 801193c:	e006      	b.n	801194c <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801193e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8011942:	2b01      	cmp	r3, #1
 8011944:	d101      	bne.n	801194a <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8011946:	2301      	movs	r3, #1
 8011948:	e000      	b.n	801194c <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801194a:	230f      	movs	r3, #15
}
 801194c:	4618      	mov	r0, r3
 801194e:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8011952:	46bd      	mov	sp, r7
 8011954:	bd90      	pop	{r4, r7, pc}
	...

08011958 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8011958:	b480      	push	{r7}
 801195a:	b085      	sub	sp, #20
 801195c:	af00      	add	r7, sp, #0
 801195e:	4603      	mov	r3, r0
 8011960:	6039      	str	r1, [r7, #0]
 8011962:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011964:	2300      	movs	r3, #0
 8011966:	73fb      	strb	r3, [r7, #15]
 8011968:	e011      	b.n	801198e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801196a:	7bfb      	ldrb	r3, [r7, #15]
 801196c:	4a0d      	ldr	r2, [pc, #52]	@ (80119a4 <GetKeyAddrItem+0x4c>)
 801196e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8011972:	79fa      	ldrb	r2, [r7, #7]
 8011974:	429a      	cmp	r2, r3
 8011976:	d107      	bne.n	8011988 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8011978:	7bfb      	ldrb	r3, [r7, #15]
 801197a:	009b      	lsls	r3, r3, #2
 801197c:	4a09      	ldr	r2, [pc, #36]	@ (80119a4 <GetKeyAddrItem+0x4c>)
 801197e:	441a      	add	r2, r3
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8011984:	2300      	movs	r3, #0
 8011986:	e006      	b.n	8011996 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011988:	7bfb      	ldrb	r3, [r7, #15]
 801198a:	3301      	adds	r3, #1
 801198c:	73fb      	strb	r3, [r7, #15]
 801198e:	7bfb      	ldrb	r3, [r7, #15]
 8011990:	2b04      	cmp	r3, #4
 8011992:	d9ea      	bls.n	801196a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8011994:	230c      	movs	r3, #12
}
 8011996:	4618      	mov	r0, r3
 8011998:	3714      	adds	r7, #20
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	2000034c 	.word	0x2000034c

080119a8 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b088      	sub	sp, #32
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	60b9      	str	r1, [r7, #8]
 80119b0:	607a      	str	r2, [r7, #4]
 80119b2:	603b      	str	r3, [r7, #0]
 80119b4:	4603      	mov	r3, r0
 80119b6:	73fb      	strb	r3, [r7, #15]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d005      	beq.n	80119ca <DeriveSessionKey10x+0x22>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d002      	beq.n	80119ca <DeriveSessionKey10x+0x22>
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d101      	bne.n	80119ce <DeriveSessionKey10x+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80119ca:	230a      	movs	r3, #10
 80119cc:	e03f      	b.n	8011a4e <DeriveSessionKey10x+0xa6>
    }

    uint8_t compBase[16] = { 0 };
 80119ce:	2300      	movs	r3, #0
 80119d0:	613b      	str	r3, [r7, #16]
 80119d2:	f107 0314 	add.w	r3, r7, #20
 80119d6:	2200      	movs	r2, #0
 80119d8:	601a      	str	r2, [r3, #0]
 80119da:	605a      	str	r2, [r3, #4]
 80119dc:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80119de:	7bfb      	ldrb	r3, [r7, #15]
 80119e0:	2b07      	cmp	r3, #7
 80119e2:	dc02      	bgt.n	80119ea <DeriveSessionKey10x+0x42>
 80119e4:	2b05      	cmp	r3, #5
 80119e6:	da03      	bge.n	80119f0 <DeriveSessionKey10x+0x48>
 80119e8:	e008      	b.n	80119fc <DeriveSessionKey10x+0x54>
 80119ea:	2b08      	cmp	r3, #8
 80119ec:	d003      	beq.n	80119f6 <DeriveSessionKey10x+0x4e>
 80119ee:	e005      	b.n	80119fc <DeriveSessionKey10x+0x54>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 80119f0:	2301      	movs	r3, #1
 80119f2:	743b      	strb	r3, [r7, #16]
            break;
 80119f4:	e004      	b.n	8011a00 <DeriveSessionKey10x+0x58>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80119f6:	2302      	movs	r3, #2
 80119f8:	743b      	strb	r3, [r7, #16]
            break;
 80119fa:	e001      	b.n	8011a00 <DeriveSessionKey10x+0x58>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80119fc:	230b      	movs	r3, #11
 80119fe:	e026      	b.n	8011a4e <DeriveSessionKey10x+0xa6>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8011a00:	f107 0310 	add.w	r3, r7, #16
 8011a04:	3301      	adds	r3, #1
 8011a06:	2203      	movs	r2, #3
 8011a08:	68b9      	ldr	r1, [r7, #8]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f006 fc7b 	bl	8018306 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8011a10:	f107 0310 	add.w	r3, r7, #16
 8011a14:	3304      	adds	r3, #4
 8011a16:	2203      	movs	r2, #3
 8011a18:	6879      	ldr	r1, [r7, #4]
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f006 fc73 	bl	8018306 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8011a20:	f107 0310 	add.w	r3, r7, #16
 8011a24:	3307      	adds	r3, #7
 8011a26:	2202      	movs	r2, #2
 8011a28:	6839      	ldr	r1, [r7, #0]
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f006 fc6b 	bl	8018306 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011a30:	4b09      	ldr	r3, [pc, #36]	@ (8011a58 <DeriveSessionKey10x+0xb0>)
 8011a32:	6858      	ldr	r0, [r3, #4]
 8011a34:	7bfb      	ldrb	r3, [r7, #15]
 8011a36:	f107 0110 	add.w	r1, r7, #16
 8011a3a:	2202      	movs	r2, #2
 8011a3c:	6800      	ldr	r0, [r0, #0]
 8011a3e:	f7f6 fc33 	bl	80082a8 <SecureElementDeriveAndStoreKey>
 8011a42:	4603      	mov	r3, r0
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d001      	beq.n	8011a4c <DeriveSessionKey10x+0xa4>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011a48:	230f      	movs	r3, #15
 8011a4a:	e000      	b.n	8011a4e <DeriveSessionKey10x+0xa6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011a4c:	2300      	movs	r3, #0
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3720      	adds	r7, #32
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
 8011a56:	bf00      	nop
 8011a58:	20001d1c 	.word	0x20001d1c

08011a5c <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	4603      	mov	r3, r0
 8011a64:	6039      	str	r1, [r7, #0]
 8011a66:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d101      	bne.n	8011a72 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011a6e:	230a      	movs	r3, #10
 8011a70:	e053      	b.n	8011b1a <GetLastFcntDown+0xbe>
    }
    switch( fCntID )
 8011a72:	79fb      	ldrb	r3, [r7, #7]
 8011a74:	3b01      	subs	r3, #1
 8011a76:	2b06      	cmp	r3, #6
 8011a78:	d84c      	bhi.n	8011b14 <GetLastFcntDown+0xb8>
 8011a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8011a80 <GetLastFcntDown+0x24>)
 8011a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a80:	08011a9d 	.word	0x08011a9d
 8011a84:	08011ab5 	.word	0x08011ab5
 8011a88:	08011acd 	.word	0x08011acd
 8011a8c:	08011ae5 	.word	0x08011ae5
 8011a90:	08011af1 	.word	0x08011af1
 8011a94:	08011afd 	.word	0x08011afd
 8011a98:	08011b09 	.word	0x08011b09
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8011a9c:	4b22      	ldr	r3, [pc, #136]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	691a      	ldr	r2, [r3, #16]
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8011aa6:	4b20      	ldr	r3, [pc, #128]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011aa8:	685a      	ldr	r2, [r3, #4]
 8011aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011aac:	685b      	ldr	r3, [r3, #4]
 8011aae:	3210      	adds	r2, #16
 8011ab0:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8011ab2:	e031      	b.n	8011b18 <GetLastFcntDown+0xbc>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8011ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	695a      	ldr	r2, [r3, #20]
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8011abe:	4b1a      	ldr	r3, [pc, #104]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011ac0:	685a      	ldr	r2, [r3, #4]
 8011ac2:	4b19      	ldr	r3, [pc, #100]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011ac4:	685b      	ldr	r3, [r3, #4]
 8011ac6:	3214      	adds	r2, #20
 8011ac8:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8011aca:	e025      	b.n	8011b18 <GetLastFcntDown+0xbc>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8011acc:	4b16      	ldr	r3, [pc, #88]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	699a      	ldr	r2, [r3, #24]
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8011ad6:	4b14      	ldr	r3, [pc, #80]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011ad8:	685a      	ldr	r2, [r3, #4]
 8011ada:	4b13      	ldr	r3, [pc, #76]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011adc:	685b      	ldr	r3, [r3, #4]
 8011ade:	3218      	adds	r2, #24
 8011ae0:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8011ae2:	e019      	b.n	8011b18 <GetLastFcntDown+0xbc>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8011ae4:	4b10      	ldr	r3, [pc, #64]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	69da      	ldr	r2, [r3, #28]
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	601a      	str	r2, [r3, #0]
            break;
 8011aee:	e013      	b.n	8011b18 <GetLastFcntDown+0xbc>
        case MC_FCNT_DOWN_1:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 8011af0:	4b0d      	ldr	r3, [pc, #52]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	6a1a      	ldr	r2, [r3, #32]
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	601a      	str	r2, [r3, #0]
            break;
 8011afa:	e00d      	b.n	8011b18 <GetLastFcntDown+0xbc>
        case MC_FCNT_DOWN_2:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 8011afc:	4b0a      	ldr	r3, [pc, #40]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	601a      	str	r2, [r3, #0]
            break;
 8011b06:	e007      	b.n	8011b18 <GetLastFcntDown+0xbc>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 8011b08:	4b07      	ldr	r3, [pc, #28]	@ (8011b28 <GetLastFcntDown+0xcc>)
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	601a      	str	r2, [r3, #0]
            break;
 8011b12:	e001      	b.n	8011b18 <GetLastFcntDown+0xbc>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011b14:	2305      	movs	r3, #5
 8011b16:	e000      	b.n	8011b1a <GetLastFcntDown+0xbe>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011b18:	2300      	movs	r3, #0
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop
 8011b28:	20001d1c 	.word	0x20001d1c

08011b2c <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b084      	sub	sp, #16
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	4603      	mov	r3, r0
 8011b34:	6039      	str	r1, [r7, #0]
 8011b36:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8011b3c:	f107 020c 	add.w	r2, r7, #12
 8011b40:	79fb      	ldrb	r3, [r7, #7]
 8011b42:	4611      	mov	r1, r2
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7ff ff89 	bl	8011a5c <GetLastFcntDown>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d001      	beq.n	8011b54 <CheckFCntDown+0x28>
    {
        return false;
 8011b50:	2300      	movs	r3, #0
 8011b52:	e00a      	b.n	8011b6a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	683a      	ldr	r2, [r7, #0]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d803      	bhi.n	8011b64 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8011b5c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8011b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011b62:	d101      	bne.n	8011b68 <CheckFCntDown+0x3c>
    {
        return true;
 8011b64:	2301      	movs	r3, #1
 8011b66:	e000      	b.n	8011b6a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8011b68:	2300      	movs	r3, #0
    }
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
	...

08011b74 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b082      	sub	sp, #8
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	6039      	str	r1, [r7, #0]
 8011b7e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8011b80:	79fb      	ldrb	r3, [r7, #7]
 8011b82:	3b01      	subs	r3, #1
 8011b84:	2b06      	cmp	r3, #6
 8011b86:	d834      	bhi.n	8011bf2 <UpdateFCntDown+0x7e>
 8011b88:	a201      	add	r2, pc, #4	@ (adr r2, 8011b90 <UpdateFCntDown+0x1c>)
 8011b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b8e:	bf00      	nop
 8011b90:	08011bad 	.word	0x08011bad
 8011b94:	08011bb7 	.word	0x08011bb7
 8011b98:	08011bc1 	.word	0x08011bc1
 8011b9c:	08011bcb 	.word	0x08011bcb
 8011ba0:	08011bd5 	.word	0x08011bd5
 8011ba4:	08011bdf 	.word	0x08011bdf
 8011ba8:	08011be9 	.word	0x08011be9
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8011bac:	4b15      	ldr	r3, [pc, #84]	@ (8011c04 <UpdateFCntDown+0x90>)
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	683a      	ldr	r2, [r7, #0]
 8011bb2:	611a      	str	r2, [r3, #16]
            break;
 8011bb4:	e01e      	b.n	8011bf4 <UpdateFCntDown+0x80>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 8011bb6:	4b13      	ldr	r3, [pc, #76]	@ (8011c04 <UpdateFCntDown+0x90>)
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	683a      	ldr	r2, [r7, #0]
 8011bbc:	615a      	str	r2, [r3, #20]
            break;
 8011bbe:	e019      	b.n	8011bf4 <UpdateFCntDown+0x80>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8011bc0:	4b10      	ldr	r3, [pc, #64]	@ (8011c04 <UpdateFCntDown+0x90>)
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	683a      	ldr	r2, [r7, #0]
 8011bc6:	619a      	str	r2, [r3, #24]
            break;
 8011bc8:	e014      	b.n	8011bf4 <UpdateFCntDown+0x80>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8011bca:	4b0e      	ldr	r3, [pc, #56]	@ (8011c04 <UpdateFCntDown+0x90>)
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	683a      	ldr	r2, [r7, #0]
 8011bd0:	61da      	str	r2, [r3, #28]
            break;
 8011bd2:	e00f      	b.n	8011bf4 <UpdateFCntDown+0x80>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 8011bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8011c04 <UpdateFCntDown+0x90>)
 8011bd6:	685b      	ldr	r3, [r3, #4]
 8011bd8:	683a      	ldr	r2, [r7, #0]
 8011bda:	621a      	str	r2, [r3, #32]
            break;
 8011bdc:	e00a      	b.n	8011bf4 <UpdateFCntDown+0x80>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 8011bde:	4b09      	ldr	r3, [pc, #36]	@ (8011c04 <UpdateFCntDown+0x90>)
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	683a      	ldr	r2, [r7, #0]
 8011be4:	625a      	str	r2, [r3, #36]	@ 0x24
            break;
 8011be6:	e005      	b.n	8011bf4 <UpdateFCntDown+0x80>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 8011be8:	4b06      	ldr	r3, [pc, #24]	@ (8011c04 <UpdateFCntDown+0x90>)
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	683a      	ldr	r2, [r7, #0]
 8011bee:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8011bf0:	e000      	b.n	8011bf4 <UpdateFCntDown+0x80>
        default:
            break;
 8011bf2:	bf00      	nop
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011bf4:	4b03      	ldr	r3, [pc, #12]	@ (8011c04 <UpdateFCntDown+0x90>)
 8011bf6:	689b      	ldr	r3, [r3, #8]
 8011bf8:	4798      	blx	r3
}
 8011bfa:	bf00      	nop
 8011bfc:	3708      	adds	r7, #8
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	20001d1c 	.word	0x20001d1c

08011c08 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8011c0c:	4b18      	ldr	r3, [pc, #96]	@ (8011c70 <ResetFCnts+0x68>)
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	2200      	movs	r2, #0
 8011c12:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011c14:	4b16      	ldr	r3, [pc, #88]	@ (8011c70 <ResetFCnts+0x68>)
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c1c:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011c1e:	4b14      	ldr	r3, [pc, #80]	@ (8011c70 <ResetFCnts+0x68>)
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c26:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011c28:	4b11      	ldr	r3, [pc, #68]	@ (8011c70 <ResetFCnts+0x68>)
 8011c2a:	685b      	ldr	r3, [r3, #4]
 8011c2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c30:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8011c32:	4b0f      	ldr	r3, [pc, #60]	@ (8011c70 <ResetFCnts+0x68>)
 8011c34:	685a      	ldr	r2, [r3, #4]
 8011c36:	4b0e      	ldr	r3, [pc, #56]	@ (8011c70 <ResetFCnts+0x68>)
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	3218      	adds	r2, #24
 8011c3c:	631a      	str	r2, [r3, #48]	@ 0x30

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8011c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8011c70 <ResetFCnts+0x68>)
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c46:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 8011c48:	4b09      	ldr	r3, [pc, #36]	@ (8011c70 <ResetFCnts+0x68>)
 8011c4a:	685b      	ldr	r3, [r3, #4]
 8011c4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c50:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 8011c52:	4b07      	ldr	r3, [pc, #28]	@ (8011c70 <ResetFCnts+0x68>)
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c5a:	625a      	str	r2, [r3, #36]	@ 0x24
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 8011c5c:	4b04      	ldr	r3, [pc, #16]	@ (8011c70 <ResetFCnts+0x68>)
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c64:	629a      	str	r2, [r3, #40]	@ 0x28

    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011c66:	4b02      	ldr	r3, [pc, #8]	@ (8011c70 <ResetFCnts+0x68>)
 8011c68:	689b      	ldr	r3, [r3, #8]
 8011c6a:	4798      	blx	r3
}
 8011c6c:	bf00      	nop
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	20001d1c 	.word	0x20001d1c

08011c74 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8011c74:	b480      	push	{r7}
 8011c76:	af00      	add	r7, sp, #0
    return;
 8011c78:	bf00      	nop
}
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr
	...

08011c84 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8011c8c:	4b15      	ldr	r3, [pc, #84]	@ (8011ce4 <LoRaMacCryptoInit+0x60>)
 8011c8e:	4a16      	ldr	r2, [pc, #88]	@ (8011ce8 <LoRaMacCryptoInit+0x64>)
 8011c90:	605a      	str	r2, [r3, #4]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d003      	beq.n	8011ca0 <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8011c98:	4a12      	ldr	r2, [pc, #72]	@ (8011ce4 <LoRaMacCryptoInit+0x60>)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6093      	str	r3, [r2, #8]
 8011c9e:	e002      	b.n	8011ca6 <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 8011ca0:	4b10      	ldr	r3, [pc, #64]	@ (8011ce4 <LoRaMacCryptoInit+0x60>)
 8011ca2:	4a12      	ldr	r2, [pc, #72]	@ (8011cec <LoRaMacCryptoInit+0x68>)
 8011ca4:	609a      	str	r2, [r3, #8]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8011ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8011ce4 <LoRaMacCryptoInit+0x60>)
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	2234      	movs	r2, #52	@ 0x34
 8011cac:	2100      	movs	r1, #0
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f006 fb66 	bl	8018380 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 8011cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8011ce4 <LoRaMacCryptoInit+0x60>)
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	2201      	movs	r2, #1
 8011cba:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8011cbc:	4b09      	ldr	r3, [pc, #36]	@ (8011ce4 <LoRaMacCryptoInit+0x60>)
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 1;
 8011cc4:	4b07      	ldr	r3, [pc, #28]	@ (8011ce4 <LoRaMacCryptoInit+0x60>)
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	2201      	movs	r2, #1
 8011cca:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 8011ccc:	4b05      	ldr	r3, [pc, #20]	@ (8011ce4 <LoRaMacCryptoInit+0x60>)
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8011cd4:	f7ff ff98 	bl	8011c08 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8011cd8:	2300      	movs	r3, #0
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3708      	adds	r7, #8
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	20001d1c 	.word	0x20001d1c
 8011ce8:	20001d28 	.word	0x20001d28
 8011cec:	08011c75 	.word	0x08011c75

08011cf0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8011cf8:	4b05      	ldr	r3, [pc, #20]	@ (8011d10 <LoRaMacCryptoSetLrWanVersion+0x20>)
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	687a      	ldr	r2, [r7, #4]
 8011cfe:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8011d00:	2300      	movs	r3, #0
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	370c      	adds	r7, #12
 8011d06:	46bd      	mov	sp, r7
 8011d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0c:	4770      	bx	lr
 8011d0e:	bf00      	nop
 8011d10:	20001d1c 	.word	0x20001d1c

08011d14 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b082      	sub	sp, #8
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d006      	beq.n	8011d30 <LoRaMacCryptoRestoreNvmCtx+0x1c>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8011d22:	2234      	movs	r2, #52	@ 0x34
 8011d24:	6879      	ldr	r1, [r7, #4]
 8011d26:	4805      	ldr	r0, [pc, #20]	@ (8011d3c <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8011d28:	f006 faed 	bl	8018306 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	e000      	b.n	8011d32 <LoRaMacCryptoRestoreNvmCtx+0x1e>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011d30:	230a      	movs	r3, #10
    }
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3708      	adds	r7, #8
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	20001d28 	.word	0x20001d28

08011d40 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8011d40:	b480      	push	{r7}
 8011d42:	b083      	sub	sp, #12
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2234      	movs	r2, #52	@ 0x34
 8011d4c:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8011d4e:	4b03      	ldr	r3, [pc, #12]	@ (8011d5c <LoRaMacCryptoGetNvmCtx+0x1c>)
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	370c      	adds	r7, #12
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr
 8011d5c:	20001d28 	.word	0x20001d28

08011d60 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8011d60:	b480      	push	{r7}
 8011d62:	b083      	sub	sp, #12
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d101      	bne.n	8011d72 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011d6e:	230a      	movs	r3, #10
 8011d70:	e006      	b.n	8011d80 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8011d72:	4b06      	ldr	r3, [pc, #24]	@ (8011d8c <LoRaMacCryptoGetFCntUp+0x2c>)
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	68db      	ldr	r3, [r3, #12]
 8011d78:	1c5a      	adds	r2, r3, #1
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8011d7e:	2300      	movs	r3, #0
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	370c      	adds	r7, #12
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	4770      	bx	lr
 8011d8c:	20001d1c 	.word	0x20001d1c

08011d90 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8011d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011d94:	b08a      	sub	sp, #40	@ 0x28
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	613a      	str	r2, [r7, #16]
 8011d9a:	60fb      	str	r3, [r7, #12]
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	75fb      	strb	r3, [r7, #23]
 8011da0:	460b      	mov	r3, r1
 8011da2:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8011da4:	2300      	movs	r3, #0
 8011da6:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8011da8:	2300      	movs	r3, #0
 8011daa:	627b      	str	r3, [r7, #36]	@ 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011dac:	2313      	movs	r3, #19
 8011dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if( currentDown == NULL )
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d101      	bne.n	8011dbc <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011db8:	230a      	movs	r3, #10
 8011dba:	e058      	b.n	8011e6e <LoRaMacCryptoGetFCntDown+0xde>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8011dbc:	f107 021c 	add.w	r2, r7, #28
 8011dc0:	7dfb      	ldrb	r3, [r7, #23]
 8011dc2:	4611      	mov	r1, r2
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7ff fe49 	bl	8011a5c <GetLastFcntDown>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d002      	beq.n	8011dde <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8011dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011ddc:	e047      	b.n	8011e6e <LoRaMacCryptoGetFCntDown+0xde>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8011dde:	69fb      	ldr	r3, [r7, #28]
 8011de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011de4:	d103      	bne.n	8011dee <LoRaMacCryptoGetFCntDown+0x5e>
    {
         *currentDown = frameFcnt;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	693a      	ldr	r2, [r7, #16]
 8011dea:	601a      	str	r2, [r3, #0]
 8011dec:	e01e      	b.n	8011e2c <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8011dee:	69fb      	ldr	r3, [r7, #28]
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	693a      	ldr	r2, [r7, #16]
 8011df4:	1ad3      	subs	r3, r2, r3
 8011df6:	627b      	str	r3, [r7, #36]	@ 0x24

        if( fCntDiff > 0 )
 8011df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	dd05      	ble.n	8011e0a <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8011dfe:	69fa      	ldr	r2, [r7, #28]
 8011e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e02:	441a      	add	r2, r3
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	601a      	str	r2, [r3, #0]
 8011e08:	e010      	b.n	8011e2c <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8011e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d104      	bne.n	8011e1a <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8011e10:	69fa      	ldr	r2, [r7, #28]
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8011e16:	2307      	movs	r3, #7
 8011e18:	e029      	b.n	8011e6e <LoRaMacCryptoGetFCntDown+0xde>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8011e1a:	69fb      	ldr	r3, [r7, #28]
 8011e1c:	0c1b      	lsrs	r3, r3, #16
 8011e1e:	041b      	lsls	r3, r3, #16
 8011e20:	693a      	ldr	r2, [r7, #16]
 8011e22:	4413      	add	r3, r2
 8011e24:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8011e2c:	4b12      	ldr	r3, [pc, #72]	@ (8011e78 <LoRaMacCryptoGetFCntDown+0xe8>)
 8011e2e:	685b      	ldr	r3, [r3, #4]
 8011e30:	789b      	ldrb	r3, [r3, #2]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d11a      	bne.n	8011e6c <LoRaMacCryptoGetFCntDown+0xdc>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	603b      	str	r3, [r7, #0]
 8011e3e:	607a      	str	r2, [r7, #4]
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	2200      	movs	r2, #0
 8011e44:	469a      	mov	sl, r3
 8011e46:	4693      	mov	fp, r2
 8011e48:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	ebb3 040a 	subs.w	r4, r3, sl
 8011e52:	4613      	mov	r3, r2
 8011e54:	eb63 050b 	sbc.w	r5, r3, fp
 8011e58:	8abb      	ldrh	r3, [r7, #20]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	4698      	mov	r8, r3
 8011e5e:	4691      	mov	r9, r2
 8011e60:	4544      	cmp	r4, r8
 8011e62:	eb75 0309 	sbcs.w	r3, r5, r9
 8011e66:	db01      	blt.n	8011e6c <LoRaMacCryptoGetFCntDown+0xdc>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8011e68:	2308      	movs	r3, #8
 8011e6a:	e000      	b.n	8011e6e <LoRaMacCryptoGetFCntDown+0xde>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011e6c:	2300      	movs	r3, #0
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3728      	adds	r7, #40	@ 0x28
 8011e72:	46bd      	mov	sp, r7
 8011e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011e78:	20001d1c 	.word	0x20001d1c

08011e7c <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b083      	sub	sp, #12
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d101      	bne.n	8011e8e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011e8a:	230a      	movs	r3, #10
 8011e8c:	e018      	b.n	8011ec0 <LoRaMacCryptoSetMulticastReference+0x44>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8011e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8011ecc <LoRaMacCryptoSetMulticastReference+0x50>)
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	f103 021c 	add.w	r2, r3, #28
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	61da      	str	r2, [r3, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 8011e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8011ecc <LoRaMacCryptoSetMulticastReference+0x50>)
 8011e9c:	685a      	ldr	r2, [r3, #4]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	3328      	adds	r3, #40	@ 0x28
 8011ea2:	3220      	adds	r2, #32
 8011ea4:	61da      	str	r2, [r3, #28]
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 8011ea6:	4b09      	ldr	r3, [pc, #36]	@ (8011ecc <LoRaMacCryptoSetMulticastReference+0x50>)
 8011ea8:	685a      	ldr	r2, [r3, #4]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	3350      	adds	r3, #80	@ 0x50
 8011eae:	3224      	adds	r2, #36	@ 0x24
 8011eb0:	61da      	str	r2, [r3, #28]
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 8011eb2:	4b06      	ldr	r3, [pc, #24]	@ (8011ecc <LoRaMacCryptoSetMulticastReference+0x50>)
 8011eb4:	685a      	ldr	r2, [r3, #4]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	3378      	adds	r3, #120	@ 0x78
 8011eba:	3228      	adds	r2, #40	@ 0x28
 8011ebc:	61da      	str	r2, [r3, #28]

    return LORAMAC_CRYPTO_SUCCESS;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	370c      	adds	r7, #12
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr
 8011ecc:	20001d1c 	.word	0x20001d1c

08011ed0 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	6039      	str	r1, [r7, #0]
 8011eda:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8011edc:	79fb      	ldrb	r3, [r7, #7]
 8011ede:	6839      	ldr	r1, [r7, #0]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7f6 f8d5 	bl	8008090 <SecureElementSetKey>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d001      	beq.n	8011ef0 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011eec:	230f      	movs	r3, #15
 8011eee:	e017      	b.n	8011f20 <LoRaMacCryptoSetKey+0x50>
    }
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 8011ef0:	79fb      	ldrb	r3, [r7, #7]
 8011ef2:	2b01      	cmp	r3, #1
 8011ef4:	d002      	beq.n	8011efc <LoRaMacCryptoSetKey+0x2c>
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d110      	bne.n	8011f1e <LoRaMacCryptoSetKey+0x4e>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8011efc:	79fb      	ldrb	r3, [r7, #7]
 8011efe:	4618      	mov	r0, r3
 8011f00:	f000 fb86 	bl	8012610 <LoRaMacCryptoDeriveMcRootKey>
 8011f04:	4603      	mov	r3, r0
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d001      	beq.n	8011f0e <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011f0a:	230f      	movs	r3, #15
 8011f0c:	e008      	b.n	8011f20 <LoRaMacCryptoSetKey+0x50>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8011f0e:	2009      	movs	r0, #9
 8011f10:	f000 fbba 	bl	8012688 <LoRaMacCryptoDeriveMcKEKey>
 8011f14:	4603      	mov	r3, r0
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d001      	beq.n	8011f1e <LoRaMacCryptoSetKey+0x4e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011f1a:	230f      	movs	r3, #15
 8011f1c:	e000      	b.n	8011f20 <LoRaMacCryptoSetKey+0x50>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011f1e:	2300      	movs	r3, #0
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3708      	adds	r7, #8
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b086      	sub	sp, #24
 8011f2c:	af02      	add	r7, sp, #8
 8011f2e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d101      	bne.n	8011f3a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011f36:	230a      	movs	r3, #10
 8011f38:	e036      	b.n	8011fa8 <LoRaMacCryptoPrepareJoinRequest+0x80>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8011f3a:	2302      	movs	r3, #2
 8011f3c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8011f42:	f107 0308 	add.w	r3, r7, #8
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7f6 f9fe 	bl	8008348 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8011f4c:	68ba      	ldr	r2, [r7, #8]
 8011f4e:	4b18      	ldr	r3, [pc, #96]	@ (8011fb0 <LoRaMacCryptoPrepareJoinRequest+0x88>)
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	b292      	uxth	r2, r2
 8011f54:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011f56:	4b16      	ldr	r3, [pc, #88]	@ (8011fb0 <LoRaMacCryptoPrepareJoinRequest+0x88>)
 8011f58:	689b      	ldr	r3, [r3, #8]
 8011f5a:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8011f5c:	4b14      	ldr	r3, [pc, #80]	@ (8011fb0 <LoRaMacCryptoPrepareJoinRequest+0x88>)
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	889a      	ldrh	r2, [r3, #4]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f000 fdeb 	bl	8012b42 <LoRaMacSerializerJoinRequest>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d001      	beq.n	8011f76 <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011f72:	2311      	movs	r3, #17
 8011f74:	e018      	b.n	8011fa8 <LoRaMacCryptoPrepareJoinRequest+0x80>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6819      	ldr	r1, [r3, #0]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	3318      	adds	r3, #24
 8011f7e:	7bfa      	ldrb	r2, [r7, #15]
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	4613      	mov	r3, r2
 8011f84:	2213      	movs	r2, #19
 8011f86:	2000      	movs	r0, #0
 8011f88:	f7f6 f8f2 	bl	8008170 <SecureElementComputeAesCmac>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d001      	beq.n	8011f96 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011f92:	230f      	movs	r3, #15
 8011f94:	e008      	b.n	8011fa8 <LoRaMacCryptoPrepareJoinRequest+0x80>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f000 fdd3 	bl	8012b42 <LoRaMacSerializerJoinRequest>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d001      	beq.n	8011fa6 <LoRaMacCryptoPrepareJoinRequest+0x7e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011fa2:	2311      	movs	r3, #17
 8011fa4:	e000      	b.n	8011fa8 <LoRaMacCryptoPrepareJoinRequest+0x80>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011fa6:	2300      	movs	r3, #0
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3710      	adds	r7, #16
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}
 8011fb0:	20001d1c 	.word	0x20001d1c

08011fb4 <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b0ca      	sub	sp, #296	@ 0x128
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8011fbe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011fc2:	6019      	str	r1, [r3, #0]
 8011fc4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8011fc8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011fcc:	601a      	str	r2, [r3, #0]
 8011fce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8011fd2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8011fd6:	4602      	mov	r2, r0
 8011fd8:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8011fda:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8011fde:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d006      	beq.n	8011ff6 <LoRaMacCryptoHandleJoinAccept+0x42>
 8011fe8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8011fec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d101      	bne.n	8011ffa <LoRaMacCryptoHandleJoinAccept+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011ff6:	230a      	movs	r3, #10
 8011ff8:	e1f3      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011ffa:	2313      	movs	r3, #19
 8011ffc:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 8012000:	2300      	movs	r3, #0
 8012002:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
#endif

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 8012006:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801200a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	2bff      	cmp	r3, #255	@ 0xff
 8012012:	d105      	bne.n	8012020 <LoRaMacCryptoHandleJoinAccept+0x6c>
    {
        encryptionKeyID = NWK_KEY;
 8012014:	2302      	movs	r3, #2
 8012016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 801201a:	230c      	movs	r3, #12
 801201c:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
        }
    }
#endif
    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 8012020:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012024:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	791b      	ldrb	r3, [r3, #4]
 801202c:	461a      	mov	r2, r3
 801202e:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8012032:	b29b      	uxth	r3, r3
 8012034:	4413      	add	r3, r2
 8012036:	b29a      	uxth	r2, r3
 8012038:	f107 0310 	add.w	r3, r7, #16
 801203c:	2100      	movs	r1, #0
 801203e:	4618      	mov	r0, r3
 8012040:	f006 f99e 	bl	8018380 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 8012044:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012048:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	1c58      	adds	r0, r3, #1
 8012052:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012056:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	791b      	ldrb	r3, [r3, #4]
 801205e:	3b01      	subs	r3, #1
 8012060:	b299      	uxth	r1, r3
 8012062:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8012066:	f107 0210 	add.w	r2, r7, #16
 801206a:	4413      	add	r3, r2
 801206c:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8012070:	f7f6 f8cc 	bl	800820c <SecureElementAesEncrypt>
 8012074:	4603      	mov	r3, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	d001      	beq.n	801207e <LoRaMacCryptoHandleJoinAccept+0xca>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801207a:	230f      	movs	r3, #15
 801207c:	e1b1      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 801207e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012082:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	1c58      	adds	r0, r3, #1
 801208c:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8012090:	f107 0210 	add.w	r2, r7, #16
 8012094:	18d1      	adds	r1, r2, r3
 8012096:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801209a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	791b      	ldrb	r3, [r3, #4]
 80120a2:	3b01      	subs	r3, #1
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	461a      	mov	r2, r3
 80120a8:	f006 f92d 	bl	8018306 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80120ac:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80120b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80120b4:	6818      	ldr	r0, [r3, #0]
 80120b6:	f000 fb87 	bl	80127c8 <LoRaMacParserJoinAccept>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d001      	beq.n	80120c4 <LoRaMacCryptoHandleJoinAccept+0x110>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80120c0:	2310      	movs	r3, #16
 80120c2:	e18e      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 80120c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80120c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	7c1b      	ldrb	r3, [r3, #16]
 80120d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d007      	beq.n	80120ea <LoRaMacCryptoHandleJoinAccept+0x136>
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 80120da:	4bc4      	ldr	r3, [pc, #784]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	2201      	movs	r2, #1
 80120e0:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 80120e2:	2303      	movs	r3, #3
 80120e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80120e8:	e006      	b.n	80120f8 <LoRaMacCryptoHandleJoinAccept+0x144>
    }
    else
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 80120ea:	4bc0      	ldr	r3, [pc, #768]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	2200      	movs	r2, #0
 80120f0:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 80120f2:	2302      	movs	r3, #2
 80120f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    }

    // Verify mic
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 80120f8:	4bbc      	ldr	r3, [pc, #752]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	789b      	ldrb	r3, [r3, #2]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d11d      	bne.n	801213e <LoRaMacCryptoHandleJoinAccept+0x18a>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 8012102:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012106:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	6818      	ldr	r0, [r3, #0]
 801210e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012112:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	791b      	ldrb	r3, [r3, #4]
 801211a:	3b04      	subs	r3, #4
 801211c:	b299      	uxth	r1, r3
 801211e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012122:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801212a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801212e:	f7f6 f83d 	bl	80081ac <SecureElementVerifyAesCmac>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	f000 80ac 	beq.w	8012292 <LoRaMacCryptoHandleJoinAccept+0x2de>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801213a:	230f      	movs	r3, #15
 801213c:	e151      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 801213e:	2300      	movs	r3, #0
 8012140:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 8012144:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8012148:	1c5a      	adds	r2, r3, #1
 801214a:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 801214e:	4619      	mov	r1, r3
 8012150:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012154:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8012158:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801215c:	f2a2 1219 	subw	r2, r2, #281	@ 0x119
 8012160:	7812      	ldrb	r2, [r2, #0]
 8012162:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012164:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8012168:	f107 0210 	add.w	r2, r7, #16
 801216c:	18d0      	adds	r0, r2, r3
 801216e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012172:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012176:	2208      	movs	r2, #8
 8012178:	6819      	ldr	r1, [r3, #0]
 801217a:	f006 f8e0 	bl	801833e <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801217e:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8012182:	3308      	adds	r3, #8
 8012184:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 8012188:	4b98      	ldr	r3, [pc, #608]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	8899      	ldrh	r1, [r3, #4]
 801218e:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8012192:	1c5a      	adds	r2, r3, #1
 8012194:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 8012198:	461a      	mov	r2, r3
 801219a:	b2c9      	uxtb	r1, r1
 801219c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80121a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80121a4:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 80121a6:	4b91      	ldr	r3, [pc, #580]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	889b      	ldrh	r3, [r3, #4]
 80121ac:	0a1b      	lsrs	r3, r3, #8
 80121ae:	b299      	uxth	r1, r3
 80121b0:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80121b4:	1c5a      	adds	r2, r3, #1
 80121b6:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 80121ba:	461a      	mov	r2, r3
 80121bc:	b2c9      	uxtb	r1, r1
 80121be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80121c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80121c6:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 80121c8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80121cc:	1c5a      	adds	r2, r3, #1
 80121ce:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 80121d2:	461a      	mov	r2, r3
 80121d4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80121d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	7959      	ldrb	r1, [r3, #5]
 80121e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80121e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80121e8:	5499      	strb	r1, [r3, r2]

        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 80121ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80121ee:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	791b      	ldrb	r3, [r3, #4]
 80121f6:	461a      	mov	r2, r3
 80121f8:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	4413      	add	r3, r2
 8012200:	b29b      	uxth	r3, r3
 8012202:	3b05      	subs	r3, #5
 8012204:	b299      	uxth	r1, r3
 8012206:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801220a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012216:	f107 0010 	add.w	r0, r7, #16
 801221a:	f7f5 ffc7 	bl	80081ac <SecureElementVerifyAesCmac>
 801221e:	4603      	mov	r3, r0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d001      	beq.n	8012228 <LoRaMacCryptoHandleJoinAccept+0x274>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012224:	230f      	movs	r3, #15
 8012226:	e0dc      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 8012228:	2300      	movs	r3, #0
 801222a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 801222e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012232:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	799b      	ldrb	r3, [r3, #6]
 801223a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 801223e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012242:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	79db      	ldrb	r3, [r3, #7]
 801224a:	021b      	lsls	r3, r3, #8
 801224c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8012250:	4313      	orrs	r3, r2
 8012252:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 8012256:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801225a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	7a1b      	ldrb	r3, [r3, #8]
 8012262:	041b      	lsls	r3, r3, #16
 8012264:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8012268:	4313      	orrs	r3, r2
 801226a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 801226e:	4b5f      	ldr	r3, [pc, #380]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	689b      	ldr	r3, [r3, #8]
 8012274:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8012278:	429a      	cmp	r2, r3
 801227a:	d908      	bls.n	801228e <LoRaMacCryptoHandleJoinAccept+0x2da>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 801227c:	4b5b      	ldr	r3, [pc, #364]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8012284:	609a      	str	r2, [r3, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 8012286:	4b59      	ldr	r3, [pc, #356]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 8012288:	689b      	ldr	r3, [r3, #8]
 801228a:	4798      	blx	r3
 801228c:	e001      	b.n	8012292 <LoRaMacCryptoHandleJoinAccept+0x2de>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801228e:	2303      	movs	r3, #3
 8012290:	e0a7      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
    }
    else
#endif
    {
        // prior LoRaWAN 1.1.0
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 8012292:	2001      	movs	r0, #1
 8012294:	f000 f9bc 	bl	8012610 <LoRaMacCryptoDeriveMcRootKey>
 8012298:	4603      	mov	r3, r0
 801229a:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801229e:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d002      	beq.n	80122ac <LoRaMacCryptoHandleJoinAccept+0x2f8>
        {
            return retval;
 80122a6:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80122aa:	e09a      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
        }

        retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80122ac:	2009      	movs	r0, #9
 80122ae:	f000 f9eb 	bl	8012688 <LoRaMacCryptoDeriveMcKEKey>
 80122b2:	4603      	mov	r3, r0
 80122b4:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80122b8:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d002      	beq.n	80122c6 <LoRaMacCryptoHandleJoinAccept+0x312>
        {
            return retval;
 80122c0:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80122c4:	e08d      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
        }

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80122c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80122ca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	1d99      	adds	r1, r3, #6
 80122d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80122d6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f103 0209 	add.w	r2, r3, #9
 80122e0:	4b42      	ldr	r3, [pc, #264]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	3304      	adds	r3, #4
 80122e6:	2008      	movs	r0, #8
 80122e8:	f7ff fb5e 	bl	80119a8 <DeriveSessionKey10x>
 80122ec:	4603      	mov	r3, r0
 80122ee:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80122f2:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d002      	beq.n	8012300 <LoRaMacCryptoHandleJoinAccept+0x34c>
        {
            return retval;
 80122fa:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80122fe:	e070      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8012300:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012304:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	1d99      	adds	r1, r3, #6
 801230c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012310:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	f103 0209 	add.w	r2, r3, #9
 801231a:	4b34      	ldr	r3, [pc, #208]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	3304      	adds	r3, #4
 8012320:	2007      	movs	r0, #7
 8012322:	f7ff fb41 	bl	80119a8 <DeriveSessionKey10x>
 8012326:	4603      	mov	r3, r0
 8012328:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801232c:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8012330:	2b00      	cmp	r3, #0
 8012332:	d002      	beq.n	801233a <LoRaMacCryptoHandleJoinAccept+0x386>
        {
            return retval;
 8012334:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8012338:	e053      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 801233a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801233e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	1d99      	adds	r1, r3, #6
 8012346:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801234a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	f103 0209 	add.w	r2, r3, #9
 8012354:	4b25      	ldr	r3, [pc, #148]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	3304      	adds	r3, #4
 801235a:	2005      	movs	r0, #5
 801235c:	f7ff fb24 	bl	80119a8 <DeriveSessionKey10x>
 8012360:	4603      	mov	r3, r0
 8012362:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012366:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 801236a:	2b00      	cmp	r3, #0
 801236c:	d002      	beq.n	8012374 <LoRaMacCryptoHandleJoinAccept+0x3c0>
        {
            return retval;
 801236e:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8012372:	e036      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8012374:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012378:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	1d99      	adds	r1, r3, #6
 8012380:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8012384:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	f103 0209 	add.w	r2, r3, #9
 801238e:	4b17      	ldr	r3, [pc, #92]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 8012390:	685b      	ldr	r3, [r3, #4]
 8012392:	3304      	adds	r3, #4
 8012394:	2006      	movs	r0, #6
 8012396:	f7ff fb07 	bl	80119a8 <DeriveSessionKey10x>
 801239a:	4603      	mov	r3, r0
 801239c:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80123a0:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d002      	beq.n	80123ae <LoRaMacCryptoHandleJoinAccept+0x3fa>
        {
            return retval;
 80123a8:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80123ac:	e019      	b.n	80123e2 <LoRaMacCryptoHandleJoinAccept+0x42e>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 80123ae:	4b0f      	ldr	r3, [pc, #60]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 80123b0:	2200      	movs	r2, #0
 80123b2:	801a      	strh	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 80123b4:	4b0d      	ldr	r3, [pc, #52]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	2200      	movs	r2, #0
 80123ba:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80123bc:	4b0b      	ldr	r3, [pc, #44]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80123c4:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80123c6:	4b09      	ldr	r3, [pc, #36]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80123ce:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80123d0:	4b06      	ldr	r3, [pc, #24]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80123d8:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80123da:	4b04      	ldr	r3, [pc, #16]	@ (80123ec <LoRaMacCryptoHandleJoinAccept+0x438>)
 80123dc:	689b      	ldr	r3, [r3, #8]
 80123de:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 80123e0:	2300      	movs	r3, #0
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}
 80123ec:	20001d1c 	.word	0x20001d1c

080123f0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80123f0:	b590      	push	{r4, r7, lr}
 80123f2:	b08b      	sub	sp, #44	@ 0x2c
 80123f4:	af04      	add	r7, sp, #16
 80123f6:	60f8      	str	r0, [r7, #12]
 80123f8:	607b      	str	r3, [r7, #4]
 80123fa:	460b      	mov	r3, r1
 80123fc:	72fb      	strb	r3, [r7, #11]
 80123fe:	4613      	mov	r3, r2
 8012400:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012402:	2313      	movs	r3, #19
 8012404:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8012406:	2308      	movs	r3, #8
 8012408:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d101      	bne.n	8012414 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012410:	230a      	movs	r3, #10
 8012412:	e05e      	b.n	80124d2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8012414:	4b31      	ldr	r3, [pc, #196]	@ (80124dc <LoRaMacCryptoSecureMessage+0xec>)
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	68db      	ldr	r3, [r3, #12]
 801241a:	68fa      	ldr	r2, [r7, #12]
 801241c:	429a      	cmp	r2, r3
 801241e:	d201      	bcs.n	8012424 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012420:	2306      	movs	r3, #6
 8012422:	e056      	b.n	80124d2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f893 3020 	ldrb.w	r3, [r3, #32]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d101      	bne.n	8012432 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 801242e:	2307      	movs	r3, #7
 8012430:	75fb      	strb	r3, [r7, #23]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8012432:	4b2a      	ldr	r3, [pc, #168]	@ (80124dc <LoRaMacCryptoSecureMessage+0xec>)
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	68db      	ldr	r3, [r3, #12]
 8012438:	68fa      	ldr	r2, [r7, #12]
 801243a:	429a      	cmp	r2, r3
 801243c:	d916      	bls.n	801246c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012448:	b219      	sxth	r1, r3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	689c      	ldr	r4, [r3, #8]
 801244e:	7dfa      	ldrb	r2, [r7, #23]
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	9301      	str	r3, [sp, #4]
 8012454:	2300      	movs	r3, #0
 8012456:	9300      	str	r3, [sp, #0]
 8012458:	4623      	mov	r3, r4
 801245a:	f7ff f891 	bl	8011580 <PayloadEncrypt>
 801245e:	4603      	mov	r3, r0
 8012460:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012462:	7dbb      	ldrb	r3, [r7, #22]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d001      	beq.n	801246c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8012468:	7dbb      	ldrb	r3, [r7, #22]
 801246a:	e032      	b.n	80124d2 <LoRaMacCryptoSecureMessage+0xe2>
                return retval;
            }
        }
#endif
    }
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 801246c:	4b1b      	ldr	r3, [pc, #108]	@ (80124dc <LoRaMacCryptoSecureMessage+0xec>)
 801246e:	685b      	ldr	r3, [r3, #4]
 8012470:	68fa      	ldr	r2, [r7, #12]
 8012472:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8012474:	4b19      	ldr	r3, [pc, #100]	@ (80124dc <LoRaMacCryptoSecureMessage+0xec>)
 8012476:	689b      	ldr	r3, [r3, #8]
 8012478:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f000 fbe3 	bl	8012c46 <LoRaMacSerializerData>
 8012480:	4603      	mov	r3, r0
 8012482:	2b00      	cmp	r3, #0
 8012484:	d001      	beq.n	801248a <LoRaMacCryptoSecureMessage+0x9a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012486:	2311      	movs	r3, #17
 8012488:	e023      	b.n	80124d2 <LoRaMacCryptoSecureMessage+0xe2>
    else
#endif
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6818      	ldr	r0, [r3, #0]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	791b      	ldrb	r3, [r3, #4]
 8012492:	3b04      	subs	r3, #4
 8012494:	b299      	uxth	r1, r3
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	322c      	adds	r2, #44	@ 0x2c
 801249e:	9203      	str	r2, [sp, #12]
 80124a0:	68fa      	ldr	r2, [r7, #12]
 80124a2:	9202      	str	r2, [sp, #8]
 80124a4:	9301      	str	r3, [sp, #4]
 80124a6:	2300      	movs	r3, #0
 80124a8:	9300      	str	r3, [sp, #0]
 80124aa:	2300      	movs	r3, #0
 80124ac:	2207      	movs	r2, #7
 80124ae:	f7ff f985 	bl	80117bc <ComputeCmacB0>
 80124b2:	4603      	mov	r3, r0
 80124b4:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80124b6:	7dbb      	ldrb	r3, [r7, #22]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d001      	beq.n	80124c0 <LoRaMacCryptoSecureMessage+0xd0>
        {
            return retval;
 80124bc:	7dbb      	ldrb	r3, [r7, #22]
 80124be:	e008      	b.n	80124d2 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f000 fbc0 	bl	8012c46 <LoRaMacSerializerData>
 80124c6:	4603      	mov	r3, r0
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d001      	beq.n	80124d0 <LoRaMacCryptoSecureMessage+0xe0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80124cc:	2311      	movs	r3, #17
 80124ce:	e000      	b.n	80124d2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80124d0:	2300      	movs	r3, #0
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	371c      	adds	r7, #28
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd90      	pop	{r4, r7, pc}
 80124da:	bf00      	nop
 80124dc:	20001d1c 	.word	0x20001d1c

080124e0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80124e0:	b590      	push	{r4, r7, lr}
 80124e2:	b08b      	sub	sp, #44	@ 0x2c
 80124e4:	af04      	add	r7, sp, #16
 80124e6:	60b9      	str	r1, [r7, #8]
 80124e8:	607b      	str	r3, [r7, #4]
 80124ea:	4603      	mov	r3, r0
 80124ec:	73fb      	strb	r3, [r7, #15]
 80124ee:	4613      	mov	r3, r2
 80124f0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80124f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d101      	bne.n	80124fc <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80124f8:	230a      	movs	r3, #10
 80124fa:	e083      	b.n	8012604 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80124fc:	7bbb      	ldrb	r3, [r7, #14]
 80124fe:	6879      	ldr	r1, [r7, #4]
 8012500:	4618      	mov	r0, r3
 8012502:	f7ff fb13 	bl	8011b2c <CheckFCntDown>
 8012506:	4603      	mov	r3, r0
 8012508:	f083 0301 	eor.w	r3, r3, #1
 801250c:	b2db      	uxtb	r3, r3
 801250e:	2b00      	cmp	r3, #0
 8012510:	d001      	beq.n	8012516 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012512:	2306      	movs	r3, #6
 8012514:	e076      	b.n	8012604 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012516:	2313      	movs	r3, #19
 8012518:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801251a:	2308      	movs	r3, #8
 801251c:	75fb      	strb	r3, [r7, #23]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 801251e:	2306      	movs	r3, #6
 8012520:	753b      	strb	r3, [r7, #20]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012524:	f000 fa1b 	bl	801295e <LoRaMacParserData>
 8012528:	4603      	mov	r3, r0
 801252a:	2b00      	cmp	r3, #0
 801252c:	d001      	beq.n	8012532 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801252e:	2310      	movs	r3, #16
 8012530:	e068      	b.n	8012604 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8012532:	f107 0210 	add.w	r2, r7, #16
 8012536:	7bfb      	ldrb	r3, [r7, #15]
 8012538:	4611      	mov	r1, r2
 801253a:	4618      	mov	r0, r3
 801253c:	f7ff fa0c 	bl	8011958 <GetKeyAddrItem>
 8012540:	4603      	mov	r3, r0
 8012542:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012544:	7d7b      	ldrb	r3, [r7, #21]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d001      	beq.n	801254e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801254a:	7d7b      	ldrb	r3, [r7, #21]
 801254c:	e05a      	b.n	8012604 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	785b      	ldrb	r3, [r3, #1]
 8012552:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8012554:	693b      	ldr	r3, [r7, #16]
 8012556:	789b      	ldrb	r3, [r3, #2]
 8012558:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801255a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801255c:	689b      	ldr	r3, [r3, #8]
 801255e:	68ba      	ldr	r2, [r7, #8]
 8012560:	429a      	cmp	r2, r3
 8012562:	d001      	beq.n	8012568 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8012564:	2302      	movs	r3, #2
 8012566:	e04d      	b.n	8012604 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8012568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801256a:	7b1b      	ldrb	r3, [r3, #12]
 801256c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012570:	b2db      	uxtb	r3, r3
 8012572:	2b00      	cmp	r3, #0
 8012574:	bf14      	ite	ne
 8012576:	2301      	movne	r3, #1
 8012578:	2300      	moveq	r3, #0
 801257a:	75bb      	strb	r3, [r7, #22]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 801257c:	4b23      	ldr	r3, [pc, #140]	@ (801260c <LoRaMacCryptoUnsecureMessage+0x12c>)
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	789b      	ldrb	r3, [r3, #2]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d101      	bne.n	801258a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8012586:	2300      	movs	r3, #0
 8012588:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801258a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801258c:	6818      	ldr	r0, [r3, #0]
 801258e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012590:	791b      	ldrb	r3, [r3, #4]
 8012592:	3b04      	subs	r3, #4
 8012594:	b299      	uxth	r1, r3
 8012596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801259a:	7dbc      	ldrb	r4, [r7, #22]
 801259c:	7d3a      	ldrb	r2, [r7, #20]
 801259e:	9303      	str	r3, [sp, #12]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	9302      	str	r3, [sp, #8]
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	9301      	str	r3, [sp, #4]
 80125a8:	2301      	movs	r3, #1
 80125aa:	9300      	str	r3, [sp, #0]
 80125ac:	4623      	mov	r3, r4
 80125ae:	f7ff f943 	bl	8011838 <VerifyCmacB0>
 80125b2:	4603      	mov	r3, r0
 80125b4:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80125b6:	7d7b      	ldrb	r3, [r7, #21]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d001      	beq.n	80125c0 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 80125bc:	7d7b      	ldrb	r3, [r7, #21]
 80125be:	e021      	b.n	8012604 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80125c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d101      	bne.n	80125ce <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 80125ca:	2307      	movs	r3, #7
 80125cc:	75fb      	strb	r3, [r7, #23]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80125ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125d0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80125d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80125d8:	b219      	sxth	r1, r3
 80125da:	7dfa      	ldrb	r2, [r7, #23]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	9301      	str	r3, [sp, #4]
 80125e0:	2301      	movs	r3, #1
 80125e2:	9300      	str	r3, [sp, #0]
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	f7fe ffcb 	bl	8011580 <PayloadEncrypt>
 80125ea:	4603      	mov	r3, r0
 80125ec:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80125ee:	7d7b      	ldrb	r3, [r7, #21]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d001      	beq.n	80125f8 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 80125f4:	7d7b      	ldrb	r3, [r7, #21]
 80125f6:	e005      	b.n	8012604 <LoRaMacCryptoUnsecureMessage+0x124>
            return retval;
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80125f8:	7bbb      	ldrb	r3, [r7, #14]
 80125fa:	6879      	ldr	r1, [r7, #4]
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7ff fab9 	bl	8011b74 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8012602:	2300      	movs	r3, #0
}
 8012604:	4618      	mov	r0, r3
 8012606:	371c      	adds	r7, #28
 8012608:	46bd      	mov	sp, r7
 801260a:	bd90      	pop	{r4, r7, pc}
 801260c:	20001d1c 	.word	0x20001d1c

08012610 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b086      	sub	sp, #24
 8012614:	af00      	add	r7, sp, #0
 8012616:	4603      	mov	r3, r0
 8012618:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than GenAppKey for LoRaWAN 1.0.x or AppKey for LoRaWAN 1.1 or later
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 801261a:	79fb      	ldrb	r3, [r7, #7]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d104      	bne.n	801262a <LoRaMacCryptoDeriveMcRootKey+0x1a>
 8012620:	4b18      	ldr	r3, [pc, #96]	@ (8012684 <LoRaMacCryptoDeriveMcRootKey+0x74>)
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	789b      	ldrb	r3, [r3, #2]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d007      	beq.n	801263a <LoRaMacCryptoDeriveMcRootKey+0x2a>
 801262a:	79fb      	ldrb	r3, [r7, #7]
 801262c:	2b01      	cmp	r3, #1
 801262e:	d106      	bne.n	801263e <LoRaMacCryptoDeriveMcRootKey+0x2e>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 8012630:	4b14      	ldr	r3, [pc, #80]	@ (8012684 <LoRaMacCryptoDeriveMcRootKey+0x74>)
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	789b      	ldrb	r3, [r3, #2]
 8012636:	2b01      	cmp	r3, #1
 8012638:	d101      	bne.n	801263e <LoRaMacCryptoDeriveMcRootKey+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801263a:	230b      	movs	r3, #11
 801263c:	e01d      	b.n	801267a <LoRaMacCryptoDeriveMcRootKey+0x6a>
    }
    uint8_t compBase[16] = { 0 };
 801263e:	2300      	movs	r3, #0
 8012640:	60bb      	str	r3, [r7, #8]
 8012642:	f107 030c 	add.w	r3, r7, #12
 8012646:	2200      	movs	r2, #0
 8012648:	601a      	str	r2, [r3, #0]
 801264a:	605a      	str	r2, [r3, #4]
 801264c:	609a      	str	r2, [r3, #8]

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 801264e:	4b0d      	ldr	r3, [pc, #52]	@ (8012684 <LoRaMacCryptoDeriveMcRootKey+0x74>)
 8012650:	685b      	ldr	r3, [r3, #4]
 8012652:	789b      	ldrb	r3, [r3, #2]
 8012654:	2b01      	cmp	r3, #1
 8012656:	d101      	bne.n	801265c <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        compBase[0] = 0x20;
 8012658:	2320      	movs	r3, #32
 801265a:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 801265c:	4b09      	ldr	r3, [pc, #36]	@ (8012684 <LoRaMacCryptoDeriveMcRootKey+0x74>)
 801265e:	6858      	ldr	r0, [r3, #4]
 8012660:	79fa      	ldrb	r2, [r7, #7]
 8012662:	f107 0108 	add.w	r1, r7, #8
 8012666:	2309      	movs	r3, #9
 8012668:	6800      	ldr	r0, [r0, #0]
 801266a:	f7f5 fe1d 	bl	80082a8 <SecureElementDeriveAndStoreKey>
 801266e:	4603      	mov	r3, r0
 8012670:	2b00      	cmp	r3, #0
 8012672:	d001      	beq.n	8012678 <LoRaMacCryptoDeriveMcRootKey+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012674:	230f      	movs	r3, #15
 8012676:	e000      	b.n	801267a <LoRaMacCryptoDeriveMcRootKey+0x6a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012678:	2300      	movs	r3, #0
}
 801267a:	4618      	mov	r0, r3
 801267c:	3718      	adds	r7, #24
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop
 8012684:	20001d1c 	.word	0x20001d1c

08012688 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b086      	sub	sp, #24
 801268c:	af00      	add	r7, sp, #0
 801268e:	4603      	mov	r3, r0
 8012690:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8012692:	79fb      	ldrb	r3, [r7, #7]
 8012694:	2b09      	cmp	r3, #9
 8012696:	d001      	beq.n	801269c <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012698:	230b      	movs	r3, #11
 801269a:	e016      	b.n	80126ca <LoRaMacCryptoDeriveMcKEKey+0x42>
    }
    uint8_t compBase[16] = { 0 };
 801269c:	2300      	movs	r3, #0
 801269e:	60bb      	str	r3, [r7, #8]
 80126a0:	f107 030c 	add.w	r3, r7, #12
 80126a4:	2200      	movs	r2, #0
 80126a6:	601a      	str	r2, [r3, #0]
 80126a8:	605a      	str	r2, [r3, #4]
 80126aa:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80126ac:	4b09      	ldr	r3, [pc, #36]	@ (80126d4 <LoRaMacCryptoDeriveMcKEKey+0x4c>)
 80126ae:	6858      	ldr	r0, [r3, #4]
 80126b0:	79fa      	ldrb	r2, [r7, #7]
 80126b2:	f107 0108 	add.w	r1, r7, #8
 80126b6:	237f      	movs	r3, #127	@ 0x7f
 80126b8:	6800      	ldr	r0, [r0, #0]
 80126ba:	f7f5 fdf5 	bl	80082a8 <SecureElementDeriveAndStoreKey>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d001      	beq.n	80126c8 <LoRaMacCryptoDeriveMcKEKey+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80126c4:	230f      	movs	r3, #15
 80126c6:	e000      	b.n	80126ca <LoRaMacCryptoDeriveMcKEKey+0x42>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80126c8:	2300      	movs	r3, #0
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3718      	adds	r7, #24
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}
 80126d2:	bf00      	nop
 80126d4:	20001d1c 	.word	0x20001d1c

080126d8 <LoRaMacCryptoDeriveMcSessionKeyPair>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcSessionKeyPair( AddressIdentifier_t addrID, uint32_t mcAddr )
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b08c      	sub	sp, #48	@ 0x30
 80126dc:	af00      	add	r7, sp, #0
 80126de:	4603      	mov	r3, r0
 80126e0:	6039      	str	r1, [r7, #0]
 80126e2:	71fb      	strb	r3, [r7, #7]
    if( mcAddr == 0 )
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d101      	bne.n	80126ee <LoRaMacCryptoDeriveMcSessionKeyPair+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80126ea:	230a      	movs	r3, #10
 80126ec:	e066      	b.n	80127bc <LoRaMacCryptoDeriveMcSessionKeyPair+0xe4>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80126ee:	2313      	movs	r3, #19
 80126f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Determine current security context
    KeyAddr_t* curItem;
    retval = GetKeyAddrItem( addrID, &curItem );
 80126f4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80126f8:	79fb      	ldrb	r3, [r7, #7]
 80126fa:	4611      	mov	r1, r2
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7ff f92b 	bl	8011958 <GetKeyAddrItem>
 8012702:	4603      	mov	r3, r0
 8012704:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012708:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801270c:	2b00      	cmp	r3, #0
 801270e:	d002      	beq.n	8012716 <LoRaMacCryptoDeriveMcSessionKeyPair+0x3e>
    {
        return retval;
 8012710:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012714:	e052      	b.n	80127bc <LoRaMacCryptoDeriveMcSessionKeyPair+0xe4>
    }

    //McAppSKey = aes128_encrypt(McKey, 0x01 | McAddr | pad16)
    //McNwkSKey = aes128_encrypt(McKey, 0x02 | McAddr | pad16)

    uint8_t compBaseAppS[16] = { 0 };
 8012716:	2300      	movs	r3, #0
 8012718:	61bb      	str	r3, [r7, #24]
 801271a:	f107 031c 	add.w	r3, r7, #28
 801271e:	2200      	movs	r2, #0
 8012720:	601a      	str	r2, [r3, #0]
 8012722:	605a      	str	r2, [r3, #4]
 8012724:	609a      	str	r2, [r3, #8]
    uint8_t compBaseNwkS[16] = { 0 };
 8012726:	2300      	movs	r3, #0
 8012728:	60bb      	str	r3, [r7, #8]
 801272a:	f107 030c 	add.w	r3, r7, #12
 801272e:	2200      	movs	r2, #0
 8012730:	601a      	str	r2, [r3, #0]
 8012732:	605a      	str	r2, [r3, #4]
 8012734:	609a      	str	r2, [r3, #8]

    compBaseAppS[0] = 0x01;
 8012736:	2301      	movs	r3, #1
 8012738:	763b      	strb	r3, [r7, #24]
    compBaseAppS[1] = mcAddr & 0xFF;
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	b2db      	uxtb	r3, r3
 801273e:	767b      	strb	r3, [r7, #25]
    compBaseAppS[2] = ( mcAddr >> 8 ) & 0xFF;
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	0a1b      	lsrs	r3, r3, #8
 8012744:	b2db      	uxtb	r3, r3
 8012746:	76bb      	strb	r3, [r7, #26]
    compBaseAppS[3] = ( mcAddr >> 16 ) & 0xFF;
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	0c1b      	lsrs	r3, r3, #16
 801274c:	b2db      	uxtb	r3, r3
 801274e:	76fb      	strb	r3, [r7, #27]
    compBaseAppS[4] = ( mcAddr >> 24 ) & 0xFF;
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	0e1b      	lsrs	r3, r3, #24
 8012754:	b2db      	uxtb	r3, r3
 8012756:	773b      	strb	r3, [r7, #28]

    compBaseNwkS[0] = 0x02;
 8012758:	2302      	movs	r3, #2
 801275a:	723b      	strb	r3, [r7, #8]
    compBaseNwkS[1] = mcAddr & 0xFF;
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	b2db      	uxtb	r3, r3
 8012760:	727b      	strb	r3, [r7, #9]
    compBaseNwkS[2] = ( mcAddr >> 8 ) & 0xFF;
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	0a1b      	lsrs	r3, r3, #8
 8012766:	b2db      	uxtb	r3, r3
 8012768:	72bb      	strb	r3, [r7, #10]
    compBaseNwkS[3] = ( mcAddr >> 16 ) & 0xFF;
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	0c1b      	lsrs	r3, r3, #16
 801276e:	b2db      	uxtb	r3, r3
 8012770:	72fb      	strb	r3, [r7, #11]
    compBaseNwkS[4] = ( mcAddr >> 24 ) & 0xFF;
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	0e1b      	lsrs	r3, r3, #24
 8012776:	b2db      	uxtb	r3, r3
 8012778:	733b      	strb	r3, [r7, #12]

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBaseAppS, curItem->RootKey, curItem->AppSkey ) != SECURE_ELEMENT_SUCCESS )
 801277a:	4b12      	ldr	r3, [pc, #72]	@ (80127c4 <LoRaMacCryptoDeriveMcSessionKeyPair+0xec>)
 801277c:	6858      	ldr	r0, [r3, #4]
 801277e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012780:	78da      	ldrb	r2, [r3, #3]
 8012782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012784:	785b      	ldrb	r3, [r3, #1]
 8012786:	f107 0118 	add.w	r1, r7, #24
 801278a:	6800      	ldr	r0, [r0, #0]
 801278c:	f7f5 fd8c 	bl	80082a8 <SecureElementDeriveAndStoreKey>
 8012790:	4603      	mov	r3, r0
 8012792:	2b00      	cmp	r3, #0
 8012794:	d001      	beq.n	801279a <LoRaMacCryptoDeriveMcSessionKeyPair+0xc2>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012796:	230f      	movs	r3, #15
 8012798:	e010      	b.n	80127bc <LoRaMacCryptoDeriveMcSessionKeyPair+0xe4>
    }

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBaseNwkS, curItem->RootKey, curItem->NwkSkey ) != SECURE_ELEMENT_SUCCESS )
 801279a:	4b0a      	ldr	r3, [pc, #40]	@ (80127c4 <LoRaMacCryptoDeriveMcSessionKeyPair+0xec>)
 801279c:	6858      	ldr	r0, [r3, #4]
 801279e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127a0:	78da      	ldrb	r2, [r3, #3]
 80127a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127a4:	789b      	ldrb	r3, [r3, #2]
 80127a6:	f107 0108 	add.w	r1, r7, #8
 80127aa:	6800      	ldr	r0, [r0, #0]
 80127ac:	f7f5 fd7c 	bl	80082a8 <SecureElementDeriveAndStoreKey>
 80127b0:	4603      	mov	r3, r0
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d001      	beq.n	80127ba <LoRaMacCryptoDeriveMcSessionKeyPair+0xe2>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80127b6:	230f      	movs	r3, #15
 80127b8:	e000      	b.n	80127bc <LoRaMacCryptoDeriveMcSessionKeyPair+0xe4>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80127ba:	2300      	movs	r3, #0
}
 80127bc:	4618      	mov	r0, r3
 80127be:	3730      	adds	r7, #48	@ 0x30
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	20001d1c 	.word	0x20001d1c

080127c8 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d003      	beq.n	80127de <LoRaMacParserJoinAccept+0x16>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d101      	bne.n	80127e2 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80127de:	2302      	movs	r3, #2
 80127e0:	e0b9      	b.n	8012956 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80127e2:	2300      	movs	r3, #0
 80127e4:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	89fb      	ldrh	r3, [r7, #14]
 80127ec:	1c59      	adds	r1, r3, #1
 80127ee:	81f9      	strh	r1, [r7, #14]
 80127f0:	4413      	add	r3, r2
 80127f2:	781a      	ldrb	r2, [r3, #0]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	1d98      	adds	r0, r3, #6
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681a      	ldr	r2, [r3, #0]
 8012800:	89fb      	ldrh	r3, [r7, #14]
 8012802:	4413      	add	r3, r2
 8012804:	2203      	movs	r2, #3
 8012806:	4619      	mov	r1, r3
 8012808:	f005 fd7d 	bl	8018306 <memcpy1>
    bufItr = bufItr + 3;
 801280c:	89fb      	ldrh	r3, [r7, #14]
 801280e:	3303      	adds	r3, #3
 8012810:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f103 0009 	add.w	r0, r3, #9
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	89fb      	ldrh	r3, [r7, #14]
 801281e:	4413      	add	r3, r2
 8012820:	2203      	movs	r2, #3
 8012822:	4619      	mov	r1, r3
 8012824:	f005 fd6f 	bl	8018306 <memcpy1>
    bufItr = bufItr + 3;
 8012828:	89fb      	ldrh	r3, [r7, #14]
 801282a:	3303      	adds	r3, #3
 801282c:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681a      	ldr	r2, [r3, #0]
 8012832:	89fb      	ldrh	r3, [r7, #14]
 8012834:	1c59      	adds	r1, r3, #1
 8012836:	81f9      	strh	r1, [r7, #14]
 8012838:	4413      	add	r3, r2
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	461a      	mov	r2, r3
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681a      	ldr	r2, [r3, #0]
 8012846:	89fb      	ldrh	r3, [r7, #14]
 8012848:	1c59      	adds	r1, r3, #1
 801284a:	81f9      	strh	r1, [r7, #14]
 801284c:	4413      	add	r3, r2
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	021a      	lsls	r2, r3, #8
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	431a      	orrs	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681a      	ldr	r2, [r3, #0]
 8012860:	89fb      	ldrh	r3, [r7, #14]
 8012862:	1c59      	adds	r1, r3, #1
 8012864:	81f9      	strh	r1, [r7, #14]
 8012866:	4413      	add	r3, r2
 8012868:	781b      	ldrb	r3, [r3, #0]
 801286a:	041a      	lsls	r2, r3, #16
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	68db      	ldr	r3, [r3, #12]
 8012870:	431a      	orrs	r2, r3
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	89fb      	ldrh	r3, [r7, #14]
 801287c:	1c59      	adds	r1, r3, #1
 801287e:	81f9      	strh	r1, [r7, #14]
 8012880:	4413      	add	r3, r2
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	061a      	lsls	r2, r3, #24
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	68db      	ldr	r3, [r3, #12]
 801288a:	431a      	orrs	r2, r3
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	89fb      	ldrh	r3, [r7, #14]
 8012896:	1c59      	adds	r1, r3, #1
 8012898:	81f9      	strh	r1, [r7, #14]
 801289a:	4413      	add	r3, r2
 801289c:	781a      	ldrb	r2, [r3, #0]
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681a      	ldr	r2, [r3, #0]
 80128a6:	89fb      	ldrh	r3, [r7, #14]
 80128a8:	1c59      	adds	r1, r3, #1
 80128aa:	81f9      	strh	r1, [r7, #14]
 80128ac:	4413      	add	r3, r2
 80128ae:	781a      	ldrb	r2, [r3, #0]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	791b      	ldrb	r3, [r3, #4]
 80128b8:	1f1a      	subs	r2, r3, #4
 80128ba:	89fb      	ldrh	r3, [r7, #14]
 80128bc:	1ad3      	subs	r3, r2, r3
 80128be:	2b10      	cmp	r3, #16
 80128c0:	d10e      	bne.n	80128e0 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f103 0012 	add.w	r0, r3, #18
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681a      	ldr	r2, [r3, #0]
 80128cc:	89fb      	ldrh	r3, [r7, #14]
 80128ce:	4413      	add	r3, r2
 80128d0:	2210      	movs	r2, #16
 80128d2:	4619      	mov	r1, r3
 80128d4:	f005 fd17 	bl	8018306 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 80128d8:	89fb      	ldrh	r3, [r7, #14]
 80128da:	3310      	adds	r3, #16
 80128dc:	81fb      	strh	r3, [r7, #14]
 80128de:	e008      	b.n	80128f2 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	791b      	ldrb	r3, [r3, #4]
 80128e4:	1f1a      	subs	r2, r3, #4
 80128e6:	89fb      	ldrh	r3, [r7, #14]
 80128e8:	1ad3      	subs	r3, r2, r3
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	dd01      	ble.n	80128f2 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80128ee:	2301      	movs	r3, #1
 80128f0:	e031      	b.n	8012956 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681a      	ldr	r2, [r3, #0]
 80128f6:	89fb      	ldrh	r3, [r7, #14]
 80128f8:	1c59      	adds	r1, r3, #1
 80128fa:	81f9      	strh	r1, [r7, #14]
 80128fc:	4413      	add	r3, r2
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	461a      	mov	r2, r3
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	89fb      	ldrh	r3, [r7, #14]
 801290c:	1c59      	adds	r1, r3, #1
 801290e:	81f9      	strh	r1, [r7, #14]
 8012910:	4413      	add	r3, r2
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	021a      	lsls	r2, r3, #8
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801291a:	431a      	orrs	r2, r3
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681a      	ldr	r2, [r3, #0]
 8012924:	89fb      	ldrh	r3, [r7, #14]
 8012926:	1c59      	adds	r1, r3, #1
 8012928:	81f9      	strh	r1, [r7, #14]
 801292a:	4413      	add	r3, r2
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	041a      	lsls	r2, r3, #16
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012934:	431a      	orrs	r2, r3
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681a      	ldr	r2, [r3, #0]
 801293e:	89fb      	ldrh	r3, [r7, #14]
 8012940:	1c59      	adds	r1, r3, #1
 8012942:	81f9      	strh	r1, [r7, #14]
 8012944:	4413      	add	r3, r2
 8012946:	781b      	ldrb	r3, [r3, #0]
 8012948:	061a      	lsls	r2, r3, #24
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801294e:	431a      	orrs	r2, r3
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8012954:	2300      	movs	r3, #0
}
 8012956:	4618      	mov	r0, r3
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}

0801295e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801295e:	b580      	push	{r7, lr}
 8012960:	b084      	sub	sp, #16
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d003      	beq.n	8012974 <LoRaMacParserData+0x16>
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d101      	bne.n	8012978 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8012974:	2302      	movs	r3, #2
 8012976:	e0e0      	b.n	8012b3a <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8012978:	2300      	movs	r3, #0
 801297a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681a      	ldr	r2, [r3, #0]
 8012980:	89fb      	ldrh	r3, [r7, #14]
 8012982:	1c59      	adds	r1, r3, #1
 8012984:	81f9      	strh	r1, [r7, #14]
 8012986:	4413      	add	r3, r2
 8012988:	781a      	ldrb	r2, [r3, #0]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681a      	ldr	r2, [r3, #0]
 8012992:	89fb      	ldrh	r3, [r7, #14]
 8012994:	1c59      	adds	r1, r3, #1
 8012996:	81f9      	strh	r1, [r7, #14]
 8012998:	4413      	add	r3, r2
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	461a      	mov	r2, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	89fb      	ldrh	r3, [r7, #14]
 80129a8:	1c59      	adds	r1, r3, #1
 80129aa:	81f9      	strh	r1, [r7, #14]
 80129ac:	4413      	add	r3, r2
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	021a      	lsls	r2, r3, #8
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	689b      	ldr	r3, [r3, #8]
 80129b6:	431a      	orrs	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681a      	ldr	r2, [r3, #0]
 80129c0:	89fb      	ldrh	r3, [r7, #14]
 80129c2:	1c59      	adds	r1, r3, #1
 80129c4:	81f9      	strh	r1, [r7, #14]
 80129c6:	4413      	add	r3, r2
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	041a      	lsls	r2, r3, #16
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	689b      	ldr	r3, [r3, #8]
 80129d0:	431a      	orrs	r2, r3
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	89fb      	ldrh	r3, [r7, #14]
 80129dc:	1c59      	adds	r1, r3, #1
 80129de:	81f9      	strh	r1, [r7, #14]
 80129e0:	4413      	add	r3, r2
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	061a      	lsls	r2, r3, #24
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	689b      	ldr	r3, [r3, #8]
 80129ea:	431a      	orrs	r2, r3
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	89fb      	ldrh	r3, [r7, #14]
 80129f6:	1c59      	adds	r1, r3, #1
 80129f8:	81f9      	strh	r1, [r7, #14]
 80129fa:	4413      	add	r3, r2
 80129fc:	781a      	ldrb	r2, [r3, #0]
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681a      	ldr	r2, [r3, #0]
 8012a06:	89fb      	ldrh	r3, [r7, #14]
 8012a08:	1c59      	adds	r1, r3, #1
 8012a0a:	81f9      	strh	r1, [r7, #14]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	461a      	mov	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	89fb      	ldrh	r3, [r7, #14]
 8012a1c:	1c59      	adds	r1, r3, #1
 8012a1e:	81f9      	strh	r1, [r7, #14]
 8012a20:	4413      	add	r3, r2
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	0219      	lsls	r1, r3, #8
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	89db      	ldrh	r3, [r3, #14]
 8012a2a:	b21a      	sxth	r2, r3
 8012a2c:	b20b      	sxth	r3, r1
 8012a2e:	4313      	orrs	r3, r2
 8012a30:	b21b      	sxth	r3, r3
 8012a32:	b29a      	uxth	r2, r3
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f103 0010 	add.w	r0, r3, #16
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681a      	ldr	r2, [r3, #0]
 8012a42:	89fb      	ldrh	r3, [r7, #14]
 8012a44:	18d1      	adds	r1, r2, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	7b1b      	ldrb	r3, [r3, #12]
 8012a4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	461a      	mov	r2, r3
 8012a52:	f005 fc58 	bl	8018306 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	7b1b      	ldrb	r3, [r3, #12]
 8012a5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	461a      	mov	r2, r3
 8012a62:	89fb      	ldrh	r3, [r7, #14]
 8012a64:	4413      	add	r3, r2
 8012a66:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2200      	movs	r2, #0
 8012a74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	791b      	ldrb	r3, [r3, #4]
 8012a7c:	461a      	mov	r2, r3
 8012a7e:	89fb      	ldrh	r3, [r7, #14]
 8012a80:	1ad3      	subs	r3, r2, r3
 8012a82:	2b04      	cmp	r3, #4
 8012a84:	dd27      	ble.n	8012ad6 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681a      	ldr	r2, [r3, #0]
 8012a8a:	89fb      	ldrh	r3, [r7, #14]
 8012a8c:	1c59      	adds	r1, r3, #1
 8012a8e:	81f9      	strh	r1, [r7, #14]
 8012a90:	4413      	add	r3, r2
 8012a92:	781a      	ldrb	r2, [r3, #0]
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	791a      	ldrb	r2, [r3, #4]
 8012a9e:	89fb      	ldrh	r3, [r7, #14]
 8012aa0:	b2db      	uxtb	r3, r3
 8012aa2:	1ad3      	subs	r3, r2, r3
 8012aa4:	b2db      	uxtb	r3, r3
 8012aa6:	3b04      	subs	r3, #4
 8012aa8:	b2da      	uxtb	r2, r3
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	89fb      	ldrh	r3, [r7, #14]
 8012aba:	18d1      	adds	r1, r2, r3
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	f005 fc1f 	bl	8018306 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012ace:	461a      	mov	r2, r3
 8012ad0:	89fb      	ldrh	r3, [r7, #14]
 8012ad2:	4413      	add	r3, r2
 8012ad4:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	791b      	ldrb	r3, [r3, #4]
 8012ade:	3b04      	subs	r3, #4
 8012ae0:	4413      	add	r3, r2
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	461a      	mov	r2, r3
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6819      	ldr	r1, [r3, #0]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	791b      	ldrb	r3, [r3, #4]
 8012af6:	3b03      	subs	r3, #3
 8012af8:	440b      	add	r3, r1
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	021b      	lsls	r3, r3, #8
 8012afe:	431a      	orrs	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6819      	ldr	r1, [r3, #0]
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	791b      	ldrb	r3, [r3, #4]
 8012b10:	3b02      	subs	r3, #2
 8012b12:	440b      	add	r3, r1
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	041b      	lsls	r3, r3, #16
 8012b18:	431a      	orrs	r2, r3
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	6819      	ldr	r1, [r3, #0]
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	791b      	ldrb	r3, [r3, #4]
 8012b2a:	3b01      	subs	r3, #1
 8012b2c:	440b      	add	r3, r1
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	061b      	lsls	r3, r3, #24
 8012b32:	431a      	orrs	r2, r3
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8012b38:	2300      	movs	r3, #0
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3710      	adds	r7, #16
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}

08012b42 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012b42:	b580      	push	{r7, lr}
 8012b44:	b084      	sub	sp, #16
 8012b46:	af00      	add	r7, sp, #0
 8012b48:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d003      	beq.n	8012b58 <LoRaMacSerializerJoinRequest+0x16>
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d101      	bne.n	8012b5c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012b58:	2301      	movs	r3, #1
 8012b5a:	e070      	b.n	8012c3e <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	791b      	ldrb	r3, [r3, #4]
 8012b64:	2b16      	cmp	r3, #22
 8012b66:	d801      	bhi.n	8012b6c <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012b68:	2302      	movs	r3, #2
 8012b6a:	e068      	b.n	8012c3e <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681a      	ldr	r2, [r3, #0]
 8012b70:	89fb      	ldrh	r3, [r7, #14]
 8012b72:	1c59      	adds	r1, r3, #1
 8012b74:	81f9      	strh	r1, [r7, #14]
 8012b76:	4413      	add	r3, r2
 8012b78:	687a      	ldr	r2, [r7, #4]
 8012b7a:	7952      	ldrb	r2, [r2, #5]
 8012b7c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	681a      	ldr	r2, [r3, #0]
 8012b82:	89fb      	ldrh	r3, [r7, #14]
 8012b84:	18d0      	adds	r0, r2, r3
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	3306      	adds	r3, #6
 8012b8a:	2208      	movs	r2, #8
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	f005 fbd6 	bl	801833e <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8012b92:	89fb      	ldrh	r3, [r7, #14]
 8012b94:	3308      	adds	r3, #8
 8012b96:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	89fb      	ldrh	r3, [r7, #14]
 8012b9e:	18d0      	adds	r0, r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	330e      	adds	r3, #14
 8012ba4:	2208      	movs	r2, #8
 8012ba6:	4619      	mov	r1, r3
 8012ba8:	f005 fbc9 	bl	801833e <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8012bac:	89fb      	ldrh	r3, [r7, #14]
 8012bae:	3308      	adds	r3, #8
 8012bb0:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	8ad9      	ldrh	r1, [r3, #22]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681a      	ldr	r2, [r3, #0]
 8012bba:	89fb      	ldrh	r3, [r7, #14]
 8012bbc:	1c58      	adds	r0, r3, #1
 8012bbe:	81f8      	strh	r0, [r7, #14]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	b2ca      	uxtb	r2, r1
 8012bc4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	8adb      	ldrh	r3, [r3, #22]
 8012bca:	0a1b      	lsrs	r3, r3, #8
 8012bcc:	b299      	uxth	r1, r3
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681a      	ldr	r2, [r3, #0]
 8012bd2:	89fb      	ldrh	r3, [r7, #14]
 8012bd4:	1c58      	adds	r0, r3, #1
 8012bd6:	81f8      	strh	r0, [r7, #14]
 8012bd8:	4413      	add	r3, r2
 8012bda:	b2ca      	uxtb	r2, r1
 8012bdc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6999      	ldr	r1, [r3, #24]
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681a      	ldr	r2, [r3, #0]
 8012be6:	89fb      	ldrh	r3, [r7, #14]
 8012be8:	1c58      	adds	r0, r3, #1
 8012bea:	81f8      	strh	r0, [r7, #14]
 8012bec:	4413      	add	r3, r2
 8012bee:	b2ca      	uxtb	r2, r1
 8012bf0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	699b      	ldr	r3, [r3, #24]
 8012bf6:	0a19      	lsrs	r1, r3, #8
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681a      	ldr	r2, [r3, #0]
 8012bfc:	89fb      	ldrh	r3, [r7, #14]
 8012bfe:	1c58      	adds	r0, r3, #1
 8012c00:	81f8      	strh	r0, [r7, #14]
 8012c02:	4413      	add	r3, r2
 8012c04:	b2ca      	uxtb	r2, r1
 8012c06:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	699b      	ldr	r3, [r3, #24]
 8012c0c:	0c19      	lsrs	r1, r3, #16
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	89fb      	ldrh	r3, [r7, #14]
 8012c14:	1c58      	adds	r0, r3, #1
 8012c16:	81f8      	strh	r0, [r7, #14]
 8012c18:	4413      	add	r3, r2
 8012c1a:	b2ca      	uxtb	r2, r1
 8012c1c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	699b      	ldr	r3, [r3, #24]
 8012c22:	0e19      	lsrs	r1, r3, #24
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681a      	ldr	r2, [r3, #0]
 8012c28:	89fb      	ldrh	r3, [r7, #14]
 8012c2a:	1c58      	adds	r0, r3, #1
 8012c2c:	81f8      	strh	r0, [r7, #14]
 8012c2e:	4413      	add	r3, r2
 8012c30:	b2ca      	uxtb	r2, r1
 8012c32:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012c34:	89fb      	ldrh	r3, [r7, #14]
 8012c36:	b2da      	uxtb	r2, r3
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012c3c:	2300      	movs	r3, #0
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3710      	adds	r7, #16
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}

08012c46 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8012c46:	b580      	push	{r7, lr}
 8012c48:	b084      	sub	sp, #16
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d003      	beq.n	8012c5c <LoRaMacSerializerData+0x16>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d101      	bne.n	8012c60 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	e0e3      	b.n	8012e28 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8012c60:	2300      	movs	r3, #0
 8012c62:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8012c64:	2308      	movs	r3, #8
 8012c66:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	7b1b      	ldrb	r3, [r3, #12]
 8012c6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	461a      	mov	r2, r3
 8012c74:	89bb      	ldrh	r3, [r7, #12]
 8012c76:	4413      	add	r3, r2
 8012c78:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d002      	beq.n	8012c8a <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8012c84:	89bb      	ldrh	r3, [r7, #12]
 8012c86:	3301      	adds	r3, #1
 8012c88:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012c90:	461a      	mov	r2, r3
 8012c92:	89bb      	ldrh	r3, [r7, #12]
 8012c94:	4413      	add	r3, r2
 8012c96:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8012c98:	89bb      	ldrh	r3, [r7, #12]
 8012c9a:	3304      	adds	r3, #4
 8012c9c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	791b      	ldrb	r3, [r3, #4]
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	89bb      	ldrh	r3, [r7, #12]
 8012ca6:	4293      	cmp	r3, r2
 8012ca8:	d901      	bls.n	8012cae <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012caa:	2302      	movs	r3, #2
 8012cac:	e0bc      	b.n	8012e28 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	89fb      	ldrh	r3, [r7, #14]
 8012cb4:	1c59      	adds	r1, r3, #1
 8012cb6:	81f9      	strh	r1, [r7, #14]
 8012cb8:	4413      	add	r3, r2
 8012cba:	687a      	ldr	r2, [r7, #4]
 8012cbc:	7952      	ldrb	r2, [r2, #5]
 8012cbe:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	6899      	ldr	r1, [r3, #8]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681a      	ldr	r2, [r3, #0]
 8012cc8:	89fb      	ldrh	r3, [r7, #14]
 8012cca:	1c58      	adds	r0, r3, #1
 8012ccc:	81f8      	strh	r0, [r7, #14]
 8012cce:	4413      	add	r3, r2
 8012cd0:	b2ca      	uxtb	r2, r1
 8012cd2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	689b      	ldr	r3, [r3, #8]
 8012cd8:	0a19      	lsrs	r1, r3, #8
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	89fb      	ldrh	r3, [r7, #14]
 8012ce0:	1c58      	adds	r0, r3, #1
 8012ce2:	81f8      	strh	r0, [r7, #14]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	b2ca      	uxtb	r2, r1
 8012ce8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	689b      	ldr	r3, [r3, #8]
 8012cee:	0c19      	lsrs	r1, r3, #16
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681a      	ldr	r2, [r3, #0]
 8012cf4:	89fb      	ldrh	r3, [r7, #14]
 8012cf6:	1c58      	adds	r0, r3, #1
 8012cf8:	81f8      	strh	r0, [r7, #14]
 8012cfa:	4413      	add	r3, r2
 8012cfc:	b2ca      	uxtb	r2, r1
 8012cfe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	689b      	ldr	r3, [r3, #8]
 8012d04:	0e19      	lsrs	r1, r3, #24
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681a      	ldr	r2, [r3, #0]
 8012d0a:	89fb      	ldrh	r3, [r7, #14]
 8012d0c:	1c58      	adds	r0, r3, #1
 8012d0e:	81f8      	strh	r0, [r7, #14]
 8012d10:	4413      	add	r3, r2
 8012d12:	b2ca      	uxtb	r2, r1
 8012d14:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681a      	ldr	r2, [r3, #0]
 8012d1a:	89fb      	ldrh	r3, [r7, #14]
 8012d1c:	1c59      	adds	r1, r3, #1
 8012d1e:	81f9      	strh	r1, [r7, #14]
 8012d20:	4413      	add	r3, r2
 8012d22:	687a      	ldr	r2, [r7, #4]
 8012d24:	7b12      	ldrb	r2, [r2, #12]
 8012d26:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	89d9      	ldrh	r1, [r3, #14]
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681a      	ldr	r2, [r3, #0]
 8012d30:	89fb      	ldrh	r3, [r7, #14]
 8012d32:	1c58      	adds	r0, r3, #1
 8012d34:	81f8      	strh	r0, [r7, #14]
 8012d36:	4413      	add	r3, r2
 8012d38:	b2ca      	uxtb	r2, r1
 8012d3a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	89db      	ldrh	r3, [r3, #14]
 8012d40:	0a1b      	lsrs	r3, r3, #8
 8012d42:	b299      	uxth	r1, r3
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681a      	ldr	r2, [r3, #0]
 8012d48:	89fb      	ldrh	r3, [r7, #14]
 8012d4a:	1c58      	adds	r0, r3, #1
 8012d4c:	81f8      	strh	r0, [r7, #14]
 8012d4e:	4413      	add	r3, r2
 8012d50:	b2ca      	uxtb	r2, r1
 8012d52:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681a      	ldr	r2, [r3, #0]
 8012d58:	89fb      	ldrh	r3, [r7, #14]
 8012d5a:	18d0      	adds	r0, r2, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f103 0110 	add.w	r1, r3, #16
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	7b1b      	ldrb	r3, [r3, #12]
 8012d66:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	f005 faca 	bl	8018306 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	7b1b      	ldrb	r3, [r3, #12]
 8012d76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	89fb      	ldrh	r3, [r7, #14]
 8012d80:	4413      	add	r3, r2
 8012d82:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d009      	beq.n	8012da2 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	89fb      	ldrh	r3, [r7, #14]
 8012d94:	1c59      	adds	r1, r3, #1
 8012d96:	81f9      	strh	r1, [r7, #14]
 8012d98:	4413      	add	r3, r2
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8012da0:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681a      	ldr	r2, [r3, #0]
 8012da6:	89fb      	ldrh	r3, [r7, #14]
 8012da8:	18d0      	adds	r0, r2, r3
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012db4:	461a      	mov	r2, r3
 8012db6:	f005 faa6 	bl	8018306 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012dc0:	461a      	mov	r2, r3
 8012dc2:	89fb      	ldrh	r3, [r7, #14]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681a      	ldr	r2, [r3, #0]
 8012dd0:	89fb      	ldrh	r3, [r7, #14]
 8012dd2:	1c58      	adds	r0, r3, #1
 8012dd4:	81f8      	strh	r0, [r7, #14]
 8012dd6:	4413      	add	r3, r2
 8012dd8:	b2ca      	uxtb	r2, r1
 8012dda:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012de0:	0a19      	lsrs	r1, r3, #8
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681a      	ldr	r2, [r3, #0]
 8012de6:	89fb      	ldrh	r3, [r7, #14]
 8012de8:	1c58      	adds	r0, r3, #1
 8012dea:	81f8      	strh	r0, [r7, #14]
 8012dec:	4413      	add	r3, r2
 8012dee:	b2ca      	uxtb	r2, r1
 8012df0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012df6:	0c19      	lsrs	r1, r3, #16
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681a      	ldr	r2, [r3, #0]
 8012dfc:	89fb      	ldrh	r3, [r7, #14]
 8012dfe:	1c58      	adds	r0, r3, #1
 8012e00:	81f8      	strh	r0, [r7, #14]
 8012e02:	4413      	add	r3, r2
 8012e04:	b2ca      	uxtb	r2, r1
 8012e06:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e0c:	0e19      	lsrs	r1, r3, #24
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	89fb      	ldrh	r3, [r7, #14]
 8012e14:	1c58      	adds	r0, r3, #1
 8012e16:	81f8      	strh	r0, [r7, #14]
 8012e18:	4413      	add	r3, r2
 8012e1a:	b2ca      	uxtb	r2, r1
 8012e1c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012e1e:	89fb      	ldrh	r3, [r7, #14]
 8012e20:	b2da      	uxtb	r2, r3
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012e26:	2300      	movs	r3, #0
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	3710      	adds	r7, #16
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}

08012e30 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8012e30:	b480      	push	{r7}
 8012e32:	b083      	sub	sp, #12
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	4603      	mov	r3, r0
 8012e38:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012e3a:	79fb      	ldrb	r3, [r7, #7]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d101      	bne.n	8012e44 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 8012e40:	2301      	movs	r3, #1
 8012e42:	e000      	b.n	8012e46 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8012e44:	2300      	movs	r3, #0
        }
    }
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	370c      	adds	r7, #12
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e50:	4770      	bx	lr

08012e52 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8012e52:	b580      	push	{r7, lr}
 8012e54:	b084      	sub	sp, #16
 8012e56:	af00      	add	r7, sp, #0
 8012e58:	4603      	mov	r3, r0
 8012e5a:	6039      	str	r1, [r7, #0]
 8012e5c:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8012e5e:	2300      	movs	r3, #0
 8012e60:	60bb      	str	r3, [r7, #8]
    switch( region )
 8012e62:	79fb      	ldrb	r3, [r7, #7]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d105      	bne.n	8012e74 <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8012e68:	6838      	ldr	r0, [r7, #0]
 8012e6a:	f000 fac5 	bl	80133f8 <RegionAS923GetPhyParam>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	60fb      	str	r3, [r7, #12]
 8012e72:	e001      	b.n	8012e78 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3710      	adds	r7, #16
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}

08012e82 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8012e82:	b580      	push	{r7, lr}
 8012e84:	b082      	sub	sp, #8
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	4603      	mov	r3, r0
 8012e8a:	6039      	str	r1, [r7, #0]
 8012e8c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012e8e:	79fb      	ldrb	r3, [r7, #7]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d103      	bne.n	8012e9c <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 8012e94:	6838      	ldr	r0, [r7, #0]
 8012e96:	f000 fc01 	bl	801369c <RegionAS923SetBandTxDone>
 8012e9a:	e000      	b.n	8012e9e <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8012e9c:	bf00      	nop
        }
    }
}
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	4603      	mov	r3, r0
 8012eac:	6039      	str	r1, [r7, #0]
 8012eae:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012eb0:	79fb      	ldrb	r3, [r7, #7]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d103      	bne.n	8012ebe <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 8012eb6:	6838      	ldr	r0, [r7, #0]
 8012eb8:	f000 fc10 	bl	80136dc <RegionAS923InitDefaults>
 8012ebc:	e000      	b.n	8012ec0 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8012ebe:	bf00      	nop
        }
    }
}
 8012ec0:	bf00      	nop
 8012ec2:	3708      	adds	r7, #8
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}

08012ec8 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b082      	sub	sp, #8
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	4603      	mov	r3, r0
 8012ed0:	6039      	str	r1, [r7, #0]
 8012ed2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012ed4:	79fb      	ldrb	r3, [r7, #7]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d104      	bne.n	8012ee4 <RegionGetNvmCtx+0x1c>
    {
        AS923_GET_NVM_CTX( );
 8012eda:	6838      	ldr	r0, [r7, #0]
 8012edc:	f000 fc76 	bl	80137cc <RegionAS923GetNvmCtx>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	e000      	b.n	8012ee6 <RegionGetNvmCtx+0x1e>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8012ee4:	2300      	movs	r3, #0
        }
    }
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3708      	adds	r7, #8
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}

08012eee <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012eee:	b580      	push	{r7, lr}
 8012ef0:	b082      	sub	sp, #8
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	6039      	str	r1, [r7, #0]
 8012ef8:	71fb      	strb	r3, [r7, #7]
 8012efa:	4613      	mov	r3, r2
 8012efc:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8012efe:	79fb      	ldrb	r3, [r7, #7]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d106      	bne.n	8012f12 <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 8012f04:	79bb      	ldrb	r3, [r7, #6]
 8012f06:	4619      	mov	r1, r3
 8012f08:	6838      	ldr	r0, [r7, #0]
 8012f0a:	f000 fc6f 	bl	80137ec <RegionAS923Verify>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	e000      	b.n	8012f14 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8012f12:	2300      	movs	r3, #0
        }
    }
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3708      	adds	r7, #8
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b082      	sub	sp, #8
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	4603      	mov	r3, r0
 8012f24:	6039      	str	r1, [r7, #0]
 8012f26:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012f28:	79fb      	ldrb	r3, [r7, #7]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d103      	bne.n	8012f36 <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 8012f2e:	6838      	ldr	r0, [r7, #0]
 8012f30:	f000 fcfa 	bl	8013928 <RegionAS923ApplyCFList>
 8012f34:	e000      	b.n	8012f38 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8012f36:	bf00      	nop
        }
    }
}
 8012f38:	bf00      	nop
 8012f3a:	3708      	adds	r7, #8
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	4603      	mov	r3, r0
 8012f48:	6039      	str	r1, [r7, #0]
 8012f4a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012f4c:	79fb      	ldrb	r3, [r7, #7]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d104      	bne.n	8012f5c <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 8012f52:	6838      	ldr	r0, [r7, #0]
 8012f54:	f000 fd5c 	bl	8013a10 <RegionAS923ChanMaskSet>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	e000      	b.n	8012f5e <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8012f5c:	2300      	movs	r3, #0
        }
    }
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3708      	adds	r7, #8
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}

08012f66 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012f66:	b580      	push	{r7, lr}
 8012f68:	b082      	sub	sp, #8
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	603b      	str	r3, [r7, #0]
 8012f6e:	4603      	mov	r3, r0
 8012f70:	71fb      	strb	r3, [r7, #7]
 8012f72:	460b      	mov	r3, r1
 8012f74:	71bb      	strb	r3, [r7, #6]
 8012f76:	4613      	mov	r3, r2
 8012f78:	717b      	strb	r3, [r7, #5]
    switch( region )
 8012f7a:	79fb      	ldrb	r3, [r7, #7]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d107      	bne.n	8012f90 <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8012f80:	7979      	ldrb	r1, [r7, #5]
 8012f82:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	683a      	ldr	r2, [r7, #0]
 8012f8a:	f000 fd67 	bl	8013a5c <RegionAS923ComputeRxWindowParameters>
 8012f8e:	e000      	b.n	8012f92 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8012f90:	bf00      	nop
        }
    }
}
 8012f92:	bf00      	nop
 8012f94:	3708      	adds	r7, #8
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b084      	sub	sp, #16
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	60b9      	str	r1, [r7, #8]
 8012fa4:	607a      	str	r2, [r7, #4]
 8012fa6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8012fa8:	7bfb      	ldrb	r3, [r7, #15]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d105      	bne.n	8012fba <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8012fae:	6879      	ldr	r1, [r7, #4]
 8012fb0:	68b8      	ldr	r0, [r7, #8]
 8012fb2:	f000 fdb5 	bl	8013b20 <RegionAS923RxConfig>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	e000      	b.n	8012fbc <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8012fba:	2300      	movs	r3, #0
        }
    }
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3710      	adds	r7, #16
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	60b9      	str	r1, [r7, #8]
 8012fcc:	607a      	str	r2, [r7, #4]
 8012fce:	603b      	str	r3, [r7, #0]
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8012fd4:	7bfb      	ldrb	r3, [r7, #15]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d106      	bne.n	8012fe8 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 8012fda:	683a      	ldr	r2, [r7, #0]
 8012fdc:	6879      	ldr	r1, [r7, #4]
 8012fde:	68b8      	ldr	r0, [r7, #8]
 8012fe0:	f000 fe64 	bl	8013cac <RegionAS923TxConfig>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	e000      	b.n	8012fea <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8012fe8:	2300      	movs	r3, #0
        }
    }
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	3710      	adds	r7, #16
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}

08012ff2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8012ff2:	b580      	push	{r7, lr}
 8012ff4:	b086      	sub	sp, #24
 8012ff6:	af02      	add	r7, sp, #8
 8012ff8:	60b9      	str	r1, [r7, #8]
 8012ffa:	607a      	str	r2, [r7, #4]
 8012ffc:	603b      	str	r3, [r7, #0]
 8012ffe:	4603      	mov	r3, r0
 8013000:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013002:	7bfb      	ldrb	r3, [r7, #15]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d109      	bne.n	801301c <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 8013008:	69fb      	ldr	r3, [r7, #28]
 801300a:	9300      	str	r3, [sp, #0]
 801300c:	69bb      	ldr	r3, [r7, #24]
 801300e:	683a      	ldr	r2, [r7, #0]
 8013010:	6879      	ldr	r1, [r7, #4]
 8013012:	68b8      	ldr	r0, [r7, #8]
 8013014:	f000 ff0c 	bl	8013e30 <RegionAS923LinkAdrReq>
 8013018:	4603      	mov	r3, r0
 801301a:	e000      	b.n	801301e <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801301c:	2300      	movs	r3, #0
        }
    }
}
 801301e:	4618      	mov	r0, r3
 8013020:	3710      	adds	r7, #16
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}

08013026 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013026:	b580      	push	{r7, lr}
 8013028:	b082      	sub	sp, #8
 801302a:	af00      	add	r7, sp, #0
 801302c:	4603      	mov	r3, r0
 801302e:	6039      	str	r1, [r7, #0]
 8013030:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013032:	79fb      	ldrb	r3, [r7, #7]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d104      	bne.n	8013042 <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 8013038:	6838      	ldr	r0, [r7, #0]
 801303a:	f001 f811 	bl	8014060 <RegionAS923RxParamSetupReq>
 801303e:	4603      	mov	r3, r0
 8013040:	e000      	b.n	8013044 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013042:	2300      	movs	r3, #0
        }
    }
}
 8013044:	4618      	mov	r0, r3
 8013046:	3708      	adds	r7, #8
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	4603      	mov	r3, r0
 8013054:	6039      	str	r1, [r7, #0]
 8013056:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013058:	79fb      	ldrb	r3, [r7, #7]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d104      	bne.n	8013068 <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 801305e:	6838      	ldr	r0, [r7, #0]
 8013060:	f001 f836 	bl	80140d0 <RegionAS923NewChannelReq>
 8013064:	4603      	mov	r3, r0
 8013066:	e000      	b.n	801306a <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013068:	2300      	movs	r3, #0
        }
    }
}
 801306a:	4618      	mov	r0, r3
 801306c:	3708      	adds	r7, #8
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}

08013072 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013072:	b580      	push	{r7, lr}
 8013074:	b082      	sub	sp, #8
 8013076:	af00      	add	r7, sp, #0
 8013078:	4603      	mov	r3, r0
 801307a:	6039      	str	r1, [r7, #0]
 801307c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801307e:	79fb      	ldrb	r3, [r7, #7]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d104      	bne.n	801308e <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8013084:	6838      	ldr	r0, [r7, #0]
 8013086:	f001 f87f 	bl	8014188 <RegionAS923TxParamSetupReq>
 801308a:	4603      	mov	r3, r0
 801308c:	e000      	b.n	8013090 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801308e:	2300      	movs	r3, #0
        }
    }
}
 8013090:	4618      	mov	r0, r3
 8013092:	3708      	adds	r7, #8
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b082      	sub	sp, #8
 801309c:	af00      	add	r7, sp, #0
 801309e:	4603      	mov	r3, r0
 80130a0:	6039      	str	r1, [r7, #0]
 80130a2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80130a4:	79fb      	ldrb	r3, [r7, #7]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d104      	bne.n	80130b4 <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 80130aa:	6838      	ldr	r0, [r7, #0]
 80130ac:	f001 f878 	bl	80141a0 <RegionAS923DlChannelReq>
 80130b0:	4603      	mov	r3, r0
 80130b2:	e000      	b.n	80130b6 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80130b4:	2300      	movs	r3, #0
        }
    }
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}

080130be <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80130be:	b580      	push	{r7, lr}
 80130c0:	b082      	sub	sp, #8
 80130c2:	af00      	add	r7, sp, #0
 80130c4:	4603      	mov	r3, r0
 80130c6:	71fb      	strb	r3, [r7, #7]
 80130c8:	460b      	mov	r3, r1
 80130ca:	71bb      	strb	r3, [r7, #6]
 80130cc:	4613      	mov	r3, r2
 80130ce:	717b      	strb	r3, [r7, #5]
    switch( region )
 80130d0:	79fb      	ldrb	r3, [r7, #7]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d108      	bne.n	80130e8 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 80130d6:	797a      	ldrb	r2, [r7, #5]
 80130d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80130dc:	4611      	mov	r1, r2
 80130de:	4618      	mov	r0, r3
 80130e0:	f001 f89a 	bl	8014218 <RegionAS923AlternateDr>
 80130e4:	4603      	mov	r3, r0
 80130e6:	e000      	b.n	80130ea <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80130e8:	2300      	movs	r3, #0
        }
    }
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3708      	adds	r7, #8
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}

080130f2 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 80130f2:	b580      	push	{r7, lr}
 80130f4:	b082      	sub	sp, #8
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	4603      	mov	r3, r0
 80130fa:	6039      	str	r1, [r7, #0]
 80130fc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80130fe:	79fb      	ldrb	r3, [r7, #7]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d103      	bne.n	801310c <RegionCalcBackOff+0x1a>
    {
        AS923_CALC_BACKOFF( );
 8013104:	6838      	ldr	r0, [r7, #0]
 8013106:	f001 f897 	bl	8014238 <RegionAS923CalcBackOff>
 801310a:	e000      	b.n	801310e <RegionCalcBackOff+0x1c>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
 801310c:	bf00      	nop
        }
    }
}
 801310e:	bf00      	nop
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}

08013116 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013116:	b580      	push	{r7, lr}
 8013118:	b084      	sub	sp, #16
 801311a:	af00      	add	r7, sp, #0
 801311c:	60b9      	str	r1, [r7, #8]
 801311e:	607a      	str	r2, [r7, #4]
 8013120:	603b      	str	r3, [r7, #0]
 8013122:	4603      	mov	r3, r0
 8013124:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013126:	7bfb      	ldrb	r3, [r7, #15]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d107      	bne.n	801313c <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 801312c:	69bb      	ldr	r3, [r7, #24]
 801312e:	683a      	ldr	r2, [r7, #0]
 8013130:	6879      	ldr	r1, [r7, #4]
 8013132:	68b8      	ldr	r0, [r7, #8]
 8013134:	f001 f8ae 	bl	8014294 <RegionAS923NextChannel>
 8013138:	4603      	mov	r3, r0
 801313a:	e000      	b.n	801313e <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801313c:	2309      	movs	r3, #9
        }
    }
}
 801313e:	4618      	mov	r0, r3
 8013140:	3710      	adds	r7, #16
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}

08013146 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8013146:	b580      	push	{r7, lr}
 8013148:	b082      	sub	sp, #8
 801314a:	af00      	add	r7, sp, #0
 801314c:	4603      	mov	r3, r0
 801314e:	6039      	str	r1, [r7, #0]
 8013150:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013152:	79fb      	ldrb	r3, [r7, #7]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d103      	bne.n	8013160 <RegionSetContinuousWave+0x1a>
    {
        AS923_SET_CONTINUOUS_WAVE( );
 8013158:	6838      	ldr	r0, [r7, #0]
 801315a:	f001 fa51 	bl	8014600 <RegionAS923SetContinuousWave>
 801315e:	e000      	b.n	8013162 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8013160:	bf00      	nop
        }
    }
}
 8013162:	bf00      	nop
 8013164:	3708      	adds	r7, #8
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}

0801316a <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801316a:	b590      	push	{r4, r7, lr}
 801316c:	b083      	sub	sp, #12
 801316e:	af00      	add	r7, sp, #0
 8013170:	4604      	mov	r4, r0
 8013172:	4608      	mov	r0, r1
 8013174:	4611      	mov	r1, r2
 8013176:	461a      	mov	r2, r3
 8013178:	4623      	mov	r3, r4
 801317a:	71fb      	strb	r3, [r7, #7]
 801317c:	4603      	mov	r3, r0
 801317e:	71bb      	strb	r3, [r7, #6]
 8013180:	460b      	mov	r3, r1
 8013182:	717b      	strb	r3, [r7, #5]
 8013184:	4613      	mov	r3, r2
 8013186:	713b      	strb	r3, [r7, #4]
    switch( region )
 8013188:	79fb      	ldrb	r3, [r7, #7]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d109      	bne.n	80131a2 <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 801318e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8013192:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013196:	79bb      	ldrb	r3, [r7, #6]
 8013198:	4618      	mov	r0, r3
 801319a:	f001 fa83 	bl	80146a4 <RegionAS923ApplyDrOffset>
 801319e:	4603      	mov	r3, r0
 80131a0:	e000      	b.n	80131a4 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80131a2:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	370c      	adds	r7, #12
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd90      	pop	{r4, r7, pc}

080131ac <GetNextLowerTxDr>:
 */
static RegionAS923NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 80131ac:	b480      	push	{r7}
 80131ae:	b085      	sub	sp, #20
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	4603      	mov	r3, r0
 80131b4:	460a      	mov	r2, r1
 80131b6:	71fb      	strb	r3, [r7, #7]
 80131b8:	4613      	mov	r3, r2
 80131ba:	71bb      	strb	r3, [r7, #6]
    uint8_t nextLowerDr = 0;
 80131bc:	2300      	movs	r3, #0
 80131be:	73fb      	strb	r3, [r7, #15]

    if( dr == minDr )
 80131c0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80131c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d102      	bne.n	80131d2 <GetNextLowerTxDr+0x26>
    {
        nextLowerDr = minDr;
 80131cc:	79bb      	ldrb	r3, [r7, #6]
 80131ce:	73fb      	strb	r3, [r7, #15]
 80131d0:	e002      	b.n	80131d8 <GetNextLowerTxDr+0x2c>
    }
    else
    {
        nextLowerDr = dr - 1;
 80131d2:	79fb      	ldrb	r3, [r7, #7]
 80131d4:	3b01      	subs	r3, #1
 80131d6:	73fb      	strb	r3, [r7, #15]
    }
    return nextLowerDr;
 80131d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3714      	adds	r7, #20
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr

080131e8 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80131e8:	b480      	push	{r7}
 80131ea:	b083      	sub	sp, #12
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
    switch( BandwidthsAS923[drIndex] )
 80131f0:	4a0a      	ldr	r2, [pc, #40]	@ (801321c <GetBandwidth+0x34>)
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131f8:	4a09      	ldr	r2, [pc, #36]	@ (8013220 <GetBandwidth+0x38>)
 80131fa:	4293      	cmp	r3, r2
 80131fc:	d004      	beq.n	8013208 <GetBandwidth+0x20>
 80131fe:	4a09      	ldr	r2, [pc, #36]	@ (8013224 <GetBandwidth+0x3c>)
 8013200:	4293      	cmp	r3, r2
 8013202:	d003      	beq.n	801320c <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8013204:	2300      	movs	r3, #0
 8013206:	e002      	b.n	801320e <GetBandwidth+0x26>
        case 250000:
            return 1;
 8013208:	2301      	movs	r3, #1
 801320a:	e000      	b.n	801320e <GetBandwidth+0x26>
        case 500000:
            return 2;
 801320c:	2302      	movs	r3, #2
    }
}
 801320e:	4618      	mov	r0, r3
 8013210:	370c      	adds	r7, #12
 8013212:	46bd      	mov	sp, r7
 8013214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013218:	4770      	bx	lr
 801321a:	bf00      	nop
 801321c:	080210fc 	.word	0x080210fc
 8013220:	0003d090 	.word	0x0003d090
 8013224:	0007a120 	.word	0x0007a120

08013228 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8013228:	b480      	push	{r7}
 801322a:	b085      	sub	sp, #20
 801322c:	af00      	add	r7, sp, #0
 801322e:	603b      	str	r3, [r7, #0]
 8013230:	4603      	mov	r3, r0
 8013232:	71fb      	strb	r3, [r7, #7]
 8013234:	460b      	mov	r3, r1
 8013236:	71bb      	strb	r3, [r7, #6]
 8013238:	4613      	mov	r3, r2
 801323a:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801323c:	79fb      	ldrb	r3, [r7, #7]
 801323e:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8013240:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8013244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013248:	4293      	cmp	r3, r2
 801324a:	bfb8      	it	lt
 801324c:	4613      	movlt	r3, r2
 801324e:	73fb      	strb	r3, [r7, #15]

    return txPowerResult;
 8013250:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013254:	4618      	mov	r0, r3
 8013256:	3714      	adds	r7, #20
 8013258:	46bd      	mov	sp, r7
 801325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325e:	4770      	bx	lr

08013260 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b082      	sub	sp, #8
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8013268:	4b0d      	ldr	r3, [pc, #52]	@ (80132a0 <VerifyRfFreq+0x40>)
 801326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	4798      	blx	r3
 8013270:	4603      	mov	r3, r0
 8013272:	f083 0301 	eor.w	r3, r3, #1
 8013276:	b2db      	uxtb	r3, r3
 8013278:	2b00      	cmp	r3, #0
 801327a:	d001      	beq.n	8013280 <VerifyRfFreq+0x20>
    {
        return false;
 801327c:	2300      	movs	r3, #0
 801327e:	e00a      	b.n	8013296 <VerifyRfFreq+0x36>
    }

    if( ( freq < 915000000 ) || ( freq > 928000000 ) )
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	4a08      	ldr	r2, [pc, #32]	@ (80132a4 <VerifyRfFreq+0x44>)
 8013284:	4293      	cmp	r3, r2
 8013286:	d903      	bls.n	8013290 <VerifyRfFreq+0x30>
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	4a07      	ldr	r2, [pc, #28]	@ (80132a8 <VerifyRfFreq+0x48>)
 801328c:	4293      	cmp	r3, r2
 801328e:	d901      	bls.n	8013294 <VerifyRfFreq+0x34>
    {
        return false;
 8013290:	2300      	movs	r3, #0
 8013292:	e000      	b.n	8013296 <VerifyRfFreq+0x36>
    }
    return true;
 8013294:	2301      	movs	r3, #1
}
 8013296:	4618      	mov	r0, r3
 8013298:	3708      	adds	r7, #8
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}
 801329e:	bf00      	nop
 80132a0:	0802113c 	.word	0x0802113c
 80132a4:	3689cabf 	.word	0x3689cabf
 80132a8:	37502800 	.word	0x37502800

080132ac <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b086      	sub	sp, #24
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	60ba      	str	r2, [r7, #8]
 80132b4:	607b      	str	r3, [r7, #4]
 80132b6:	4603      	mov	r3, r0
 80132b8:	73fb      	strb	r3, [r7, #15]
 80132ba:	460b      	mov	r3, r1
 80132bc:	73bb      	strb	r3, [r7, #14]
    uint8_t nbEnabledChannels = 0;
 80132be:	2300      	movs	r3, #0
 80132c0:	75fb      	strb	r3, [r7, #23]
    uint8_t delayTransmission = 0;
 80132c2:	2300      	movs	r3, #0
 80132c4:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < AS923_MAX_NB_CHANNELS; i += 16, k++ )
 80132c6:	2300      	movs	r3, #0
 80132c8:	757b      	strb	r3, [r7, #21]
 80132ca:	2300      	movs	r3, #0
 80132cc:	753b      	strb	r3, [r7, #20]
 80132ce:	e086      	b.n	80133de <CountNbOfEnabledChannels+0x132>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80132d0:	2300      	movs	r3, #0
 80132d2:	74fb      	strb	r3, [r7, #19]
 80132d4:	e07a      	b.n	80133cc <CountNbOfEnabledChannels+0x120>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 80132d6:	7d3b      	ldrb	r3, [r7, #20]
 80132d8:	005b      	lsls	r3, r3, #1
 80132da:	68ba      	ldr	r2, [r7, #8]
 80132dc:	4413      	add	r3, r2
 80132de:	881b      	ldrh	r3, [r3, #0]
 80132e0:	461a      	mov	r2, r3
 80132e2:	7cfb      	ldrb	r3, [r7, #19]
 80132e4:	fa42 f303 	asr.w	r3, r2, r3
 80132e8:	f003 0301 	and.w	r3, r3, #1
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d06a      	beq.n	80133c6 <CountNbOfEnabledChannels+0x11a>
            {
                if( channels[i + j].Frequency == 0 )
 80132f0:	7d7a      	ldrb	r2, [r7, #21]
 80132f2:	7cfb      	ldrb	r3, [r7, #19]
 80132f4:	4413      	add	r3, r2
 80132f6:	461a      	mov	r2, r3
 80132f8:	4613      	mov	r3, r2
 80132fa:	005b      	lsls	r3, r3, #1
 80132fc:	4413      	add	r3, r2
 80132fe:	009b      	lsls	r3, r3, #2
 8013300:	461a      	mov	r2, r3
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	4413      	add	r3, r2
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d057      	beq.n	80133bc <CountNbOfEnabledChannels+0x110>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 801330c:	7bfb      	ldrb	r3, [r7, #15]
 801330e:	f083 0301 	eor.w	r3, r3, #1
 8013312:	b2db      	uxtb	r3, r3
 8013314:	2b00      	cmp	r3, #0
 8013316:	d007      	beq.n	8013328 <CountNbOfEnabledChannels+0x7c>
                {
                    if( ( AS923_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8013318:	7cfb      	ldrb	r3, [r7, #19]
 801331a:	2203      	movs	r2, #3
 801331c:	fa42 f303 	asr.w	r3, r2, r3
 8013320:	f003 0301 	and.w	r3, r3, #1
 8013324:	2b00      	cmp	r3, #0
 8013326:	d04b      	beq.n	80133c0 <CountNbOfEnabledChannels+0x114>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8013328:	f997 000e 	ldrsb.w	r0, [r7, #14]
 801332c:	7d7a      	ldrb	r2, [r7, #21]
 801332e:	7cfb      	ldrb	r3, [r7, #19]
 8013330:	4413      	add	r3, r2
 8013332:	461a      	mov	r2, r3
 8013334:	4613      	mov	r3, r2
 8013336:	005b      	lsls	r3, r3, #1
 8013338:	4413      	add	r3, r2
 801333a:	009b      	lsls	r3, r3, #2
 801333c:	461a      	mov	r2, r3
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	4413      	add	r3, r2
 8013342:	7a1b      	ldrb	r3, [r3, #8]
 8013344:	f343 0303 	sbfx	r3, r3, #0, #4
 8013348:	b25b      	sxtb	r3, r3
 801334a:	4619      	mov	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 801334c:	7d7a      	ldrb	r2, [r7, #21]
 801334e:	7cfb      	ldrb	r3, [r7, #19]
 8013350:	4413      	add	r3, r2
 8013352:	461a      	mov	r2, r3
 8013354:	4613      	mov	r3, r2
 8013356:	005b      	lsls	r3, r3, #1
 8013358:	4413      	add	r3, r2
 801335a:	009b      	lsls	r3, r3, #2
 801335c:	461a      	mov	r2, r3
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	4413      	add	r3, r2
 8013362:	7a1b      	ldrb	r3, [r3, #8]
 8013364:	f343 1303 	sbfx	r3, r3, #4, #4
 8013368:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801336a:	461a      	mov	r2, r3
 801336c:	f001 fa80 	bl	8014870 <RegionCommonValueInRange>
 8013370:	4603      	mov	r3, r0
 8013372:	2b00      	cmp	r3, #0
 8013374:	d026      	beq.n	80133c4 <CountNbOfEnabledChannels+0x118>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8013376:	7d7a      	ldrb	r2, [r7, #21]
 8013378:	7cfb      	ldrb	r3, [r7, #19]
 801337a:	4413      	add	r3, r2
 801337c:	461a      	mov	r2, r3
 801337e:	4613      	mov	r3, r2
 8013380:	005b      	lsls	r3, r3, #1
 8013382:	4413      	add	r3, r2
 8013384:	009b      	lsls	r3, r3, #2
 8013386:	461a      	mov	r2, r3
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	4413      	add	r3, r2
 801338c:	7a5b      	ldrb	r3, [r3, #9]
 801338e:	015b      	lsls	r3, r3, #5
 8013390:	6a3a      	ldr	r2, [r7, #32]
 8013392:	4413      	add	r3, r2
 8013394:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8013398:	4313      	orrs	r3, r2
 801339a:	d003      	beq.n	80133a4 <CountNbOfEnabledChannels+0xf8>
                { // Check if the band is available for transmission
                    delayTransmission++;
 801339c:	7dbb      	ldrb	r3, [r7, #22]
 801339e:	3301      	adds	r3, #1
 80133a0:	75bb      	strb	r3, [r7, #22]
                    continue;
 80133a2:	e010      	b.n	80133c6 <CountNbOfEnabledChannels+0x11a>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 80133a4:	7dfb      	ldrb	r3, [r7, #23]
 80133a6:	1c5a      	adds	r2, r3, #1
 80133a8:	75fa      	strb	r2, [r7, #23]
 80133aa:	461a      	mov	r2, r3
 80133ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ae:	4413      	add	r3, r2
 80133b0:	7d79      	ldrb	r1, [r7, #21]
 80133b2:	7cfa      	ldrb	r2, [r7, #19]
 80133b4:	440a      	add	r2, r1
 80133b6:	b2d2      	uxtb	r2, r2
 80133b8:	701a      	strb	r2, [r3, #0]
 80133ba:	e004      	b.n	80133c6 <CountNbOfEnabledChannels+0x11a>
                    continue;
 80133bc:	bf00      	nop
 80133be:	e002      	b.n	80133c6 <CountNbOfEnabledChannels+0x11a>
                        continue;
 80133c0:	bf00      	nop
 80133c2:	e000      	b.n	80133c6 <CountNbOfEnabledChannels+0x11a>
                    continue;
 80133c4:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80133c6:	7cfb      	ldrb	r3, [r7, #19]
 80133c8:	3301      	adds	r3, #1
 80133ca:	74fb      	strb	r3, [r7, #19]
 80133cc:	7cfb      	ldrb	r3, [r7, #19]
 80133ce:	2b0f      	cmp	r3, #15
 80133d0:	d981      	bls.n	80132d6 <CountNbOfEnabledChannels+0x2a>
    for( uint8_t i = 0, k = 0; i < AS923_MAX_NB_CHANNELS; i += 16, k++ )
 80133d2:	7d7b      	ldrb	r3, [r7, #21]
 80133d4:	3310      	adds	r3, #16
 80133d6:	757b      	strb	r3, [r7, #21]
 80133d8:	7d3b      	ldrb	r3, [r7, #20]
 80133da:	3301      	adds	r3, #1
 80133dc:	753b      	strb	r3, [r7, #20]
 80133de:	7d7b      	ldrb	r3, [r7, #21]
 80133e0:	2b0f      	cmp	r3, #15
 80133e2:	f67f af75 	bls.w	80132d0 <CountNbOfEnabledChannels+0x24>
            }
        }
    }

    *delayTx = delayTransmission;
 80133e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e8:	7dba      	ldrb	r2, [r7, #22]
 80133ea:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 80133ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3718      	adds	r7, #24
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
	...

080133f8 <RegionAS923GetPhyParam>:

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8013400:	2300      	movs	r3, #0
 8013402:	60bb      	str	r3, [r7, #8]

    switch( getPhy->Attribute )
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	3b01      	subs	r3, #1
 801340a:	2b34      	cmp	r3, #52	@ 0x34
 801340c:	f200 8127 	bhi.w	801365e <RegionAS923GetPhyParam+0x266>
 8013410:	a201      	add	r2, pc, #4	@ (adr r2, 8013418 <RegionAS923GetPhyParam+0x20>)
 8013412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013416:	bf00      	nop
 8013418:	080134ed 	.word	0x080134ed
 801341c:	08013501 	.word	0x08013501
 8013420:	0801365f 	.word	0x0801365f
 8013424:	0801365f 	.word	0x0801365f
 8013428:	0801365f 	.word	0x0801365f
 801342c:	08013515 	.word	0x08013515
 8013430:	0801365f 	.word	0x0801365f
 8013434:	0801354b 	.word	0x0801354b
 8013438:	0801365f 	.word	0x0801365f
 801343c:	08013551 	.word	0x08013551
 8013440:	08013557 	.word	0x08013557
 8013444:	0801355d 	.word	0x0801355d
 8013448:	08013563 	.word	0x08013563
 801344c:	0801358b 	.word	0x0801358b
 8013450:	080135b3 	.word	0x080135b3
 8013454:	080135b9 	.word	0x080135b9
 8013458:	080135c1 	.word	0x080135c1
 801345c:	080135c9 	.word	0x080135c9
 8013460:	080135d1 	.word	0x080135d1
 8013464:	080135d9 	.word	0x080135d9
 8013468:	080135e1 	.word	0x080135e1
 801346c:	080135e9 	.word	0x080135e9
 8013470:	080135fd 	.word	0x080135fd
 8013474:	08013603 	.word	0x08013603
 8013478:	08013609 	.word	0x08013609
 801347c:	0801360f 	.word	0x0801360f
 8013480:	08013615 	.word	0x08013615
 8013484:	0801361b 	.word	0x0801361b
 8013488:	08013621 	.word	0x08013621
 801348c:	08013627 	.word	0x08013627
 8013490:	0801362d 	.word	0x0801362d
 8013494:	08013633 	.word	0x08013633
 8013498:	08013639 	.word	0x08013639
 801349c:	0801351b 	.word	0x0801351b
 80134a0:	0801365f 	.word	0x0801365f
 80134a4:	0801365f 	.word	0x0801365f
 80134a8:	0801365f 	.word	0x0801365f
 80134ac:	0801365f 	.word	0x0801365f
 80134b0:	0801365f 	.word	0x0801365f
 80134b4:	0801365f 	.word	0x0801365f
 80134b8:	0801365f 	.word	0x0801365f
 80134bc:	0801365f 	.word	0x0801365f
 80134c0:	0801365f 	.word	0x0801365f
 80134c4:	0801365f 	.word	0x0801365f
 80134c8:	0801365f 	.word	0x0801365f
 80134cc:	0801365f 	.word	0x0801365f
 80134d0:	0801365f 	.word	0x0801365f
 80134d4:	0801363f 	.word	0x0801363f
 80134d8:	08013645 	.word	0x08013645
 80134dc:	08013653 	.word	0x08013653
 80134e0:	0801365f 	.word	0x0801365f
 80134e4:	0801365f 	.word	0x0801365f
 80134e8:	08013659 	.word	0x08013659
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	78db      	ldrb	r3, [r3, #3]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d102      	bne.n	80134fa <RegionAS923GetPhyParam+0x102>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 80134f4:	2300      	movs	r3, #0
 80134f6:	60bb      	str	r3, [r7, #8]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 80134f8:	e0b2      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 80134fa:	2302      	movs	r3, #2
 80134fc:	60bb      	str	r3, [r7, #8]
            break;
 80134fe:	e0af      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	789b      	ldrb	r3, [r3, #2]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d102      	bne.n	801350e <RegionAS923GetPhyParam+0x116>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 8013508:	2300      	movs	r3, #0
 801350a:	60bb      	str	r3, [r7, #8]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 801350c:	e0a8      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 801350e:	2302      	movs	r3, #2
 8013510:	60bb      	str	r3, [r7, #8]
            break;
 8013512:	e0a5      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8013514:	2302      	movs	r3, #2
 8013516:	60bb      	str	r3, [r7, #8]
            break;
 8013518:	e0a2      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	789b      	ldrb	r3, [r3, #2]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d109      	bne.n	8013536 <RegionAS923GetPhyParam+0x13e>
            {
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_TX_MIN_DATARATE );
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013528:	2100      	movs	r1, #0
 801352a:	4618      	mov	r0, r3
 801352c:	f7ff fe3e 	bl	80131ac <GetNextLowerTxDr>
 8013530:	4603      	mov	r3, r0
 8013532:	60bb      	str	r3, [r7, #8]
            }
            else
            {
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_DWELL_LIMIT_DATARATE );
            }
            break;
 8013534:	e094      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_DWELL_LIMIT_DATARATE );
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801353c:	2102      	movs	r1, #2
 801353e:	4618      	mov	r0, r3
 8013540:	f7ff fe34 	bl	80131ac <GetNextLowerTxDr>
 8013544:	4603      	mov	r3, r0
 8013546:	60bb      	str	r3, [r7, #8]
            break;
 8013548:	e08a      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 801354a:	2300      	movs	r3, #0
 801354c:	60bb      	str	r3, [r7, #8]
            break;
 801354e:	e087      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 8013550:	2300      	movs	r3, #0
 8013552:	60bb      	str	r3, [r7, #8]
            break;
 8013554:	e084      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = AS923_ADR_ACK_LIMIT;
 8013556:	2340      	movs	r3, #64	@ 0x40
 8013558:	60bb      	str	r3, [r7, #8]
            break;
 801355a:	e081      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = AS923_ADR_ACK_DELAY;
 801355c:	2320      	movs	r3, #32
 801355e:	60bb      	str	r3, [r7, #8]
            break;
 8013560:	e07e      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	789b      	ldrb	r3, [r3, #2]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d107      	bne.n	801357a <RegionAS923GetPhyParam+0x182>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013570:	461a      	mov	r2, r3
 8013572:	4b3f      	ldr	r3, [pc, #252]	@ (8013670 <RegionAS923GetPhyParam+0x278>)
 8013574:	5c9b      	ldrb	r3, [r3, r2]
 8013576:	60bb      	str	r3, [r7, #8]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
            }
            break;
 8013578:	e072      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013580:	461a      	mov	r2, r3
 8013582:	4b3c      	ldr	r3, [pc, #240]	@ (8013674 <RegionAS923GetPhyParam+0x27c>)
 8013584:	5c9b      	ldrb	r3, [r3, r2]
 8013586:	60bb      	str	r3, [r7, #8]
            break;
 8013588:	e06a      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	789b      	ldrb	r3, [r3, #2]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d107      	bne.n	80135a2 <RegionAS923GetPhyParam+0x1aa>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013598:	461a      	mov	r2, r3
 801359a:	4b37      	ldr	r3, [pc, #220]	@ (8013678 <RegionAS923GetPhyParam+0x280>)
 801359c:	5c9b      	ldrb	r3, [r3, r2]
 801359e:	60bb      	str	r3, [r7, #8]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
            }
            break;
 80135a0:	e05e      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80135a8:	461a      	mov	r2, r3
 80135aa:	4b32      	ldr	r3, [pc, #200]	@ (8013674 <RegionAS923GetPhyParam+0x27c>)
 80135ac:	5c9b      	ldrb	r3, [r3, r2]
 80135ae:	60bb      	str	r3, [r7, #8]
            break;
 80135b0:	e056      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 80135b2:	2300      	movs	r3, #0
 80135b4:	60bb      	str	r3, [r7, #8]
            break;
 80135b6:	e053      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 80135b8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80135bc:	60bb      	str	r3, [r7, #8]
            break;
 80135be:	e04f      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = AS923_RECEIVE_DELAY1;
 80135c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80135c4:	60bb      	str	r3, [r7, #8]
            break;
 80135c6:	e04b      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = AS923_RECEIVE_DELAY2;
 80135c8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80135cc:	60bb      	str	r3, [r7, #8]
            break;
 80135ce:	e047      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY1;
 80135d0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80135d4:	60bb      	str	r3, [r7, #8]
            break;
 80135d6:	e043      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY2;
 80135d8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80135dc:	60bb      	str	r3, [r7, #8]
            break;
 80135de:	e03f      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = AS923_MAX_FCNT_GAP;
 80135e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80135e4:	60bb      	str	r3, [r7, #8]
            break;
 80135e6:	e03b      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( AS923_ACKTIMEOUT + randr( -AS923_ACK_TIMEOUT_RND, AS923_ACK_TIMEOUT_RND ) );
 80135e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80135ec:	4823      	ldr	r0, [pc, #140]	@ (801367c <RegionAS923GetPhyParam+0x284>)
 80135ee:	f004 fe73 	bl	80182d8 <randr>
 80135f2:	4603      	mov	r3, r0
 80135f4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80135f8:	60bb      	str	r3, [r7, #8]
            break;
 80135fa:	e031      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = AS923_DEFAULT_RX1_DR_OFFSET;
 80135fc:	2300      	movs	r3, #0
 80135fe:	60bb      	str	r3, [r7, #8]
            break;
 8013600:	e02e      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ;
 8013602:	4b1f      	ldr	r3, [pc, #124]	@ (8013680 <RegionAS923GetPhyParam+0x288>)
 8013604:	60bb      	str	r3, [r7, #8]
            break;
 8013606:	e02b      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 8013608:	2302      	movs	r3, #2
 801360a:	60bb      	str	r3, [r7, #8]
            break;
 801360c:	e028      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 801360e:	4b1d      	ldr	r3, [pc, #116]	@ (8013684 <RegionAS923GetPhyParam+0x28c>)
 8013610:	60bb      	str	r3, [r7, #8]
            break;
 8013612:	e025      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8013614:	4b1c      	ldr	r3, [pc, #112]	@ (8013688 <RegionAS923GetPhyParam+0x290>)
 8013616:	60bb      	str	r3, [r7, #8]
            break;
 8013618:	e022      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 801361a:	2310      	movs	r3, #16
 801361c:	60bb      	str	r3, [r7, #8]
            break;
 801361e:	e01f      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8013620:	4b1a      	ldr	r3, [pc, #104]	@ (801368c <RegionAS923GetPhyParam+0x294>)
 8013622:	60bb      	str	r3, [r7, #8]
            break;
 8013624:	e01c      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8013626:	2301      	movs	r3, #1
 8013628:	60bb      	str	r3, [r7, #8]
            break;
 801362a:	e019      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 801362c:	2301      	movs	r3, #1
 801362e:	60bb      	str	r3, [r7, #8]
            break;
 8013630:	e016      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8013632:	4b17      	ldr	r3, [pc, #92]	@ (8013690 <RegionAS923GetPhyParam+0x298>)
 8013634:	60bb      	str	r3, [r7, #8]
            break;
 8013636:	e013      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8013638:	4b16      	ldr	r3, [pc, #88]	@ (8013694 <RegionAS923GetPhyParam+0x29c>)
 801363a:	60bb      	str	r3, [r7, #8]
            break;
 801363c:	e010      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ;
 801363e:	4b16      	ldr	r3, [pc, #88]	@ (8013698 <RegionAS923GetPhyParam+0x2a0>)
 8013640:	60bb      	str	r3, [r7, #8]
            break;
 8013642:	e00d      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8013644:	2311      	movs	r3, #17
 8013646:	723b      	strb	r3, [r7, #8]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 8013648:	2302      	movs	r3, #2
 801364a:	727b      	strb	r3, [r7, #9]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 801364c:	2300      	movs	r3, #0
 801364e:	72bb      	strb	r3, [r7, #10]
            break;
 8013650:	e006      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8013652:	2303      	movs	r3, #3
 8013654:	60bb      	str	r3, [r7, #8]
            break;
 8013656:	e003      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 8013658:	2303      	movs	r3, #3
 801365a:	60bb      	str	r3, [r7, #8]
            break;
 801365c:	e000      	b.n	8013660 <RegionAS923GetPhyParam+0x268>
        }
        default:
        {
            break;
 801365e:	bf00      	nop
        }
    }

    return phyParam;
 8013660:	68bb      	ldr	r3, [r7, #8]
 8013662:	60fb      	str	r3, [r7, #12]
 8013664:	68fb      	ldr	r3, [r7, #12]
}
 8013666:	4618      	mov	r0, r3
 8013668:	3710      	adds	r7, #16
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}
 801366e:	bf00      	nop
 8013670:	0802111c 	.word	0x0802111c
 8013674:	0802112c 	.word	0x0802112c
 8013678:	08021124 	.word	0x08021124
 801367c:	fffffc18 	.word	0xfffffc18
 8013680:	3706ea00 	.word	0x3706ea00
 8013684:	20001e40 	.word	0x20001e40
 8013688:	20001e42 	.word	0x20001e42
 801368c:	20001d60 	.word	0x20001d60
 8013690:	41c80000 	.word	0x41c80000
 8013694:	40400000 	.word	0x40400000
 8013698:	3709f740 	.word	0x3709f740

0801369c <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	7858      	ldrb	r0, [r3, #1]
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	4619      	mov	r1, r3
 80136ae:	4a0a      	ldr	r2, [pc, #40]	@ (80136d8 <RegionAS923SetBandTxDone+0x3c>)
 80136b0:	460b      	mov	r3, r1
 80136b2:	005b      	lsls	r3, r3, #1
 80136b4:	440b      	add	r3, r1
 80136b6:	009b      	lsls	r3, r3, #2
 80136b8:	4413      	add	r3, r2
 80136ba:	3309      	adds	r3, #9
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	3306      	adds	r3, #6
 80136c0:	015b      	lsls	r3, r3, #5
 80136c2:	4a05      	ldr	r2, [pc, #20]	@ (80136d8 <RegionAS923SetBandTxDone+0x3c>)
 80136c4:	1899      	adds	r1, r3, r2
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80136cc:	f001 f976 	bl	80149bc <RegionCommonSetBandTxDone>
}
 80136d0:	bf00      	nop
 80136d2:	3708      	adds	r7, #8
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	20001d60 	.word	0x20001d60

080136dc <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b096      	sub	sp, #88	@ 0x58
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
    Band_t bands[AS923_MAX_NB_BANDS] =
 80136e4:	2364      	movs	r3, #100	@ 0x64
 80136e6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80136e8:	2300      	movs	r3, #0
 80136ea:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80136ee:	f04f 0200 	mov.w	r2, #0
 80136f2:	f04f 0300 	mov.w	r3, #0
 80136f6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80136fa:	f04f 0200 	mov.w	r2, #0
 80136fe:	f04f 0300 	mov.w	r3, #0
 8013702:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8013706:	f04f 0200 	mov.w	r2, #0
 801370a:	f04f 0300 	mov.w	r3, #0
 801370e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    {
        AS923_BAND0
    };

    switch( params->Type )
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	791b      	ldrb	r3, [r3, #4]
 8013716:	2b02      	cmp	r3, #2
 8013718:	d022      	beq.n	8013760 <RegionAS923InitDefaults+0x84>
 801371a:	2b02      	cmp	r3, #2
 801371c:	dc43      	bgt.n	80137a6 <RegionAS923InitDefaults+0xca>
 801371e:	2b00      	cmp	r3, #0
 8013720:	d002      	beq.n	8013728 <RegionAS923InitDefaults+0x4c>
 8013722:	2b01      	cmp	r3, #1
 8013724:	d028      	beq.n	8013778 <RegionAS923InitDefaults+0x9c>
            NvmCtx.Channels[1] = ( ChannelParams_t ) AS923_LC2;
            break;
        }
        default:
        {
            break;
 8013726:	e03e      	b.n	80137a6 <RegionAS923InitDefaults+0xca>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 8013728:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801372c:	2220      	movs	r2, #32
 801372e:	4619      	mov	r1, r3
 8013730:	4820      	ldr	r0, [pc, #128]	@ (80137b4 <RegionAS923InitDefaults+0xd8>)
 8013732:	f004 fde8 	bl	8018306 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) AS923_LC1;
 8013736:	4b20      	ldr	r3, [pc, #128]	@ (80137b8 <RegionAS923InitDefaults+0xdc>)
 8013738:	4a20      	ldr	r2, [pc, #128]	@ (80137bc <RegionAS923InitDefaults+0xe0>)
 801373a:	ca07      	ldmia	r2, {r0, r1, r2}
 801373c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            NvmCtx.Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8013740:	4b1d      	ldr	r3, [pc, #116]	@ (80137b8 <RegionAS923InitDefaults+0xdc>)
 8013742:	4a1f      	ldr	r2, [pc, #124]	@ (80137c0 <RegionAS923InitDefaults+0xe4>)
 8013744:	330c      	adds	r3, #12
 8013746:	ca07      	ldmia	r2, {r0, r1, r2}
 8013748:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 801374c:	4b1a      	ldr	r3, [pc, #104]	@ (80137b8 <RegionAS923InitDefaults+0xdc>)
 801374e:	2203      	movs	r2, #3
 8013750:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8013754:	2201      	movs	r2, #1
 8013756:	491b      	ldr	r1, [pc, #108]	@ (80137c4 <RegionAS923InitDefaults+0xe8>)
 8013758:	481b      	ldr	r0, [pc, #108]	@ (80137c8 <RegionAS923InitDefaults+0xec>)
 801375a:	f001 f908 	bl	801496e <RegionCommonChanMaskCopy>
            break;
 801375e:	e025      	b.n	80137ac <RegionAS923InitDefaults+0xd0>
            if( params->NvmCtx != 0 )
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d020      	beq.n	80137aa <RegionAS923InitDefaults+0xce>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	22e8      	movs	r2, #232	@ 0xe8
 801376e:	4619      	mov	r1, r3
 8013770:	4811      	ldr	r0, [pc, #68]	@ (80137b8 <RegionAS923InitDefaults+0xdc>)
 8013772:	f004 fdc8 	bl	8018306 <memcpy1>
            break;
 8013776:	e018      	b.n	80137aa <RegionAS923InitDefaults+0xce>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8013778:	4b0f      	ldr	r3, [pc, #60]	@ (80137b8 <RegionAS923InitDefaults+0xdc>)
 801377a:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 801377e:	4b0e      	ldr	r3, [pc, #56]	@ (80137b8 <RegionAS923InitDefaults+0xdc>)
 8013780:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	@ 0xe2
 8013784:	4313      	orrs	r3, r2
 8013786:	b29a      	uxth	r2, r3
 8013788:	4b0b      	ldr	r3, [pc, #44]	@ (80137b8 <RegionAS923InitDefaults+0xdc>)
 801378a:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
            NvmCtx.Channels[0] = ( ChannelParams_t ) AS923_LC1;
 801378e:	4b0a      	ldr	r3, [pc, #40]	@ (80137b8 <RegionAS923InitDefaults+0xdc>)
 8013790:	4a0a      	ldr	r2, [pc, #40]	@ (80137bc <RegionAS923InitDefaults+0xe0>)
 8013792:	ca07      	ldmia	r2, {r0, r1, r2}
 8013794:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            NvmCtx.Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8013798:	4b07      	ldr	r3, [pc, #28]	@ (80137b8 <RegionAS923InitDefaults+0xdc>)
 801379a:	4a09      	ldr	r2, [pc, #36]	@ (80137c0 <RegionAS923InitDefaults+0xe4>)
 801379c:	330c      	adds	r3, #12
 801379e:	ca07      	ldmia	r2, {r0, r1, r2}
 80137a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            break;
 80137a4:	e002      	b.n	80137ac <RegionAS923InitDefaults+0xd0>
            break;
 80137a6:	bf00      	nop
 80137a8:	e000      	b.n	80137ac <RegionAS923InitDefaults+0xd0>
            break;
 80137aa:	bf00      	nop
        }
    }
}
 80137ac:	bf00      	nop
 80137ae:	3758      	adds	r7, #88	@ 0x58
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}
 80137b4:	20001e20 	.word	0x20001e20
 80137b8:	20001d60 	.word	0x20001d60
 80137bc:	08020ca4 	.word	0x08020ca4
 80137c0:	08020cb0 	.word	0x08020cb0
 80137c4:	20001e42 	.word	0x20001e42
 80137c8:	20001e40 	.word	0x20001e40

080137cc <RegionAS923GetNvmCtx>:

void* RegionAS923GetNvmCtx( GetNvmCtxParams_t* params )
{
 80137cc:	b480      	push	{r7}
 80137ce:	b083      	sub	sp, #12
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionAS923NvmCtx_t );
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	22e8      	movs	r2, #232	@ 0xe8
 80137d8:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 80137da:	4b03      	ldr	r3, [pc, #12]	@ (80137e8 <RegionAS923GetNvmCtx+0x1c>)
}
 80137dc:	4618      	mov	r0, r3
 80137de:	370c      	adds	r7, #12
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr
 80137e8:	20001d60 	.word	0x20001d60

080137ec <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b082      	sub	sp, #8
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	460b      	mov	r3, r1
 80137f6:	70fb      	strb	r3, [r7, #3]
    switch( phyAttribute )
 80137f8:	78fb      	ldrb	r3, [r7, #3]
 80137fa:	2b0f      	cmp	r3, #15
 80137fc:	f200 808f 	bhi.w	801391e <RegionAS923Verify+0x132>
 8013800:	a201      	add	r2, pc, #4	@ (adr r2, 8013808 <RegionAS923Verify+0x1c>)
 8013802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013806:	bf00      	nop
 8013808:	08013849 	.word	0x08013849
 801380c:	0801391f 	.word	0x0801391f
 8013810:	0801391f 	.word	0x0801391f
 8013814:	0801391f 	.word	0x0801391f
 8013818:	0801391f 	.word	0x0801391f
 801381c:	08013857 	.word	0x08013857
 8013820:	0801389b 	.word	0x0801389b
 8013824:	080138b9 	.word	0x080138b9
 8013828:	0801391f 	.word	0x0801391f
 801382c:	080138fd 	.word	0x080138fd
 8013830:	080138fd 	.word	0x080138fd
 8013834:	0801391f 	.word	0x0801391f
 8013838:	0801391f 	.word	0x0801391f
 801383c:	0801391f 	.word	0x0801391f
 8013840:	0801391f 	.word	0x0801391f
 8013844:	0801391b 	.word	0x0801391b
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	4618      	mov	r0, r3
 801384e:	f7ff fd07 	bl	8013260 <VerifyRfFreq>
 8013852:	4603      	mov	r3, r0
 8013854:	e064      	b.n	8013920 <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	789b      	ldrb	r3, [r3, #2]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d10e      	bne.n	801387c <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	f993 3000 	ldrsb.w	r3, [r3]
 8013864:	2207      	movs	r2, #7
 8013866:	2100      	movs	r1, #0
 8013868:	4618      	mov	r0, r3
 801386a:	f001 f801 	bl	8014870 <RegionCommonValueInRange>
 801386e:	4603      	mov	r3, r0
 8013870:	2b00      	cmp	r3, #0
 8013872:	bf14      	ite	ne
 8013874:	2301      	movne	r3, #1
 8013876:	2300      	moveq	r3, #0
 8013878:	b2db      	uxtb	r3, r3
 801387a:	e051      	b.n	8013920 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f993 3000 	ldrsb.w	r3, [r3]
 8013882:	2207      	movs	r2, #7
 8013884:	2102      	movs	r1, #2
 8013886:	4618      	mov	r0, r3
 8013888:	f000 fff2 	bl	8014870 <RegionCommonValueInRange>
 801388c:	4603      	mov	r3, r0
 801388e:	2b00      	cmp	r3, #0
 8013890:	bf14      	ite	ne
 8013892:	2301      	movne	r3, #1
 8013894:	2300      	moveq	r3, #0
 8013896:	b2db      	uxtb	r3, r3
 8013898:	e042      	b.n	8013920 <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f993 3000 	ldrsb.w	r3, [r3]
 80138a0:	2205      	movs	r2, #5
 80138a2:	2100      	movs	r1, #0
 80138a4:	4618      	mov	r0, r3
 80138a6:	f000 ffe3 	bl	8014870 <RegionCommonValueInRange>
 80138aa:	4603      	mov	r3, r0
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	bf14      	ite	ne
 80138b0:	2301      	movne	r3, #1
 80138b2:	2300      	moveq	r3, #0
 80138b4:	b2db      	uxtb	r3, r3
 80138b6:	e033      	b.n	8013920 <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	785b      	ldrb	r3, [r3, #1]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d10e      	bne.n	80138de <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f993 3000 	ldrsb.w	r3, [r3]
 80138c6:	2207      	movs	r2, #7
 80138c8:	2100      	movs	r1, #0
 80138ca:	4618      	mov	r0, r3
 80138cc:	f000 ffd0 	bl	8014870 <RegionCommonValueInRange>
 80138d0:	4603      	mov	r3, r0
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	bf14      	ite	ne
 80138d6:	2301      	movne	r3, #1
 80138d8:	2300      	moveq	r3, #0
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	e020      	b.n	8013920 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f993 3000 	ldrsb.w	r3, [r3]
 80138e4:	2207      	movs	r2, #7
 80138e6:	2102      	movs	r1, #2
 80138e8:	4618      	mov	r0, r3
 80138ea:	f000 ffc1 	bl	8014870 <RegionCommonValueInRange>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	bf14      	ite	ne
 80138f4:	2301      	movne	r3, #1
 80138f6:	2300      	moveq	r3, #0
 80138f8:	b2db      	uxtb	r3, r3
 80138fa:	e011      	b.n	8013920 <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f993 3000 	ldrsb.w	r3, [r3]
 8013902:	2207      	movs	r2, #7
 8013904:	2100      	movs	r1, #0
 8013906:	4618      	mov	r0, r3
 8013908:	f000 ffb2 	bl	8014870 <RegionCommonValueInRange>
 801390c:	4603      	mov	r3, r0
 801390e:	2b00      	cmp	r3, #0
 8013910:	bf14      	ite	ne
 8013912:	2301      	movne	r3, #1
 8013914:	2300      	moveq	r3, #0
 8013916:	b2db      	uxtb	r3, r3
 8013918:	e002      	b.n	8013920 <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 801391a:	2300      	movs	r3, #0
 801391c:	e000      	b.n	8013920 <RegionAS923Verify+0x134>
        }
        default:
            return false;
 801391e:	2300      	movs	r3, #0
    }
}
 8013920:	4618      	mov	r0, r3
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}

08013928 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b08a      	sub	sp, #40	@ 0x28
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8013930:	2350      	movs	r3, #80	@ 0x50
 8013932:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	791b      	ldrb	r3, [r3, #4]
 801393a:	2b10      	cmp	r3, #16
 801393c:	d162      	bne.n	8013a04 <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	330f      	adds	r3, #15
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d15e      	bne.n	8013a08 <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801394a:	2300      	movs	r3, #0
 801394c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013950:	2302      	movs	r3, #2
 8013952:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013956:	e050      	b.n	80139fa <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8013958:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801395c:	2b06      	cmp	r3, #6
 801395e:	d824      	bhi.n	80139aa <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013968:	4413      	add	r3, r2
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801396e:	69ba      	ldr	r2, [r7, #24]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6819      	ldr	r1, [r3, #0]
 8013974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013978:	3301      	adds	r3, #1
 801397a:	440b      	add	r3, r1
 801397c:	781b      	ldrb	r3, [r3, #0]
 801397e:	021b      	lsls	r3, r3, #8
 8013980:	4313      	orrs	r3, r2
 8013982:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8013984:	69ba      	ldr	r2, [r7, #24]
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6819      	ldr	r1, [r3, #0]
 801398a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801398e:	3302      	adds	r3, #2
 8013990:	440b      	add	r3, r1
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	041b      	lsls	r3, r3, #16
 8013996:	4313      	orrs	r3, r2
 8013998:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	2264      	movs	r2, #100	@ 0x64
 801399e:	fb02 f303 	mul.w	r3, r2, r3
 80139a2:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80139a4:	2300      	movs	r3, #0
 80139a6:	61fb      	str	r3, [r7, #28]
 80139a8:	e006      	b.n	80139b8 <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80139aa:	2300      	movs	r3, #0
 80139ac:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80139ae:	2300      	movs	r3, #0
 80139b0:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80139b4:	2300      	movs	r3, #0
 80139b6:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80139b8:	69bb      	ldr	r3, [r7, #24]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d00b      	beq.n	80139d6 <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80139be:	f107 0318 	add.w	r3, r7, #24
 80139c2:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80139c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80139c8:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 80139ca:	f107 0310 	add.w	r3, r7, #16
 80139ce:	4618      	mov	r0, r3
 80139d0:	f000 fd56 	bl	8014480 <RegionAS923ChannelAdd>
 80139d4:	e007      	b.n	80139e6 <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80139d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80139da:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 80139dc:	f107 030c 	add.w	r3, r7, #12
 80139e0:	4618      	mov	r0, r3
 80139e2:	f000 fde5 	bl	80145b0 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80139e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80139ea:	3303      	adds	r3, #3
 80139ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80139f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80139f4:	3301      	adds	r3, #1
 80139f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80139fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80139fe:	2b0f      	cmp	r3, #15
 8013a00:	d9aa      	bls.n	8013958 <RegionAS923ApplyCFList+0x30>
 8013a02:	e002      	b.n	8013a0a <RegionAS923ApplyCFList+0xe2>
        return;
 8013a04:	bf00      	nop
 8013a06:	e000      	b.n	8013a0a <RegionAS923ApplyCFList+0xe2>
        return;
 8013a08:	bf00      	nop
        }
    }
}
 8013a0a:	3728      	adds	r7, #40	@ 0x28
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}

08013a10 <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	791b      	ldrb	r3, [r3, #4]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d002      	beq.n	8013a26 <RegionAS923ChanMaskSet+0x16>
 8013a20:	2b01      	cmp	r3, #1
 8013a22:	d008      	beq.n	8013a36 <RegionAS923ChanMaskSet+0x26>
 8013a24:	e00f      	b.n	8013a46 <RegionAS923ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	4619      	mov	r1, r3
 8013a2e:	4809      	ldr	r0, [pc, #36]	@ (8013a54 <RegionAS923ChanMaskSet+0x44>)
 8013a30:	f000 ff9d 	bl	801496e <RegionCommonChanMaskCopy>
            break;
 8013a34:	e009      	b.n	8013a4a <RegionAS923ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	2201      	movs	r2, #1
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	4806      	ldr	r0, [pc, #24]	@ (8013a58 <RegionAS923ChanMaskSet+0x48>)
 8013a40:	f000 ff95 	bl	801496e <RegionCommonChanMaskCopy>
            break;
 8013a44:	e001      	b.n	8013a4a <RegionAS923ChanMaskSet+0x3a>
        }
        default:
            return false;
 8013a46:	2300      	movs	r3, #0
 8013a48:	e000      	b.n	8013a4c <RegionAS923ChanMaskSet+0x3c>
    }
    return true;
 8013a4a:	2301      	movs	r3, #1
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3708      	adds	r7, #8
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	20001e40 	.word	0x20001e40
 8013a58:	20001e42 	.word	0x20001e42

08013a5c <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b088      	sub	sp, #32
 8013a60:	af02      	add	r7, sp, #8
 8013a62:	60ba      	str	r2, [r7, #8]
 8013a64:	607b      	str	r3, [r7, #4]
 8013a66:	4603      	mov	r3, r0
 8013a68:	73fb      	strb	r3, [r7, #15]
 8013a6a:	460b      	mov	r3, r1
 8013a6c:	73bb      	strb	r3, [r7, #14]
    double tSymbol = 0.0;
 8013a6e:	f04f 0200 	mov.w	r2, #0
 8013a72:	f04f 0300 	mov.w	r3, #0
 8013a76:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 8013a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a7e:	2b07      	cmp	r3, #7
 8013a80:	bfa8      	it	ge
 8013a82:	2307      	movge	r3, #7
 8013a84:	b25a      	sxtb	r2, r3
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7ff fba9 	bl	80131e8 <GetBandwidth>
 8013a96:	4603      	mov	r3, r0
 8013a98:	b2da      	uxtb	r2, r3
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013aa4:	2b07      	cmp	r3, #7
 8013aa6:	d10b      	bne.n	8013ac0 <RegionAS923ComputeRxWindowParameters+0x64>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013aae:	461a      	mov	r2, r3
 8013ab0:	4b18      	ldr	r3, [pc, #96]	@ (8013b14 <RegionAS923ComputeRxWindowParameters+0xb8>)
 8013ab2:	5c9b      	ldrb	r3, [r3, r2]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f001 f993 	bl	8014de0 <RegionCommonComputeSymbolTimeFsk>
 8013aba:	ed87 0b04 	vstr	d0, [r7, #16]
 8013abe:	e012      	b.n	8013ae6 <RegionAS923ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	4b12      	ldr	r3, [pc, #72]	@ (8013b14 <RegionAS923ComputeRxWindowParameters+0xb8>)
 8013aca:	5c9a      	ldrb	r2, [r3, r2]
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	4b10      	ldr	r3, [pc, #64]	@ (8013b18 <RegionAS923ComputeRxWindowParameters+0xbc>)
 8013ad6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013ada:	4619      	mov	r1, r3
 8013adc:	4610      	mov	r0, r2
 8013ade:	f001 f951 	bl	8014d84 <RegionCommonComputeSymbolTimeLoRa>
 8013ae2:	ed87 0b04 	vstr	d0, [r7, #16]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8013ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8013b1c <RegionAS923ComputeRxWindowParameters+0xc0>)
 8013ae8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013aea:	4798      	blx	r3
 8013aec:	4601      	mov	r1, r0
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f103 0208 	add.w	r2, r3, #8
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	330c      	adds	r3, #12
 8013af8:	7bb8      	ldrb	r0, [r7, #14]
 8013afa:	9300      	str	r3, [sp, #0]
 8013afc:	4613      	mov	r3, r2
 8013afe:	460a      	mov	r2, r1
 8013b00:	68b9      	ldr	r1, [r7, #8]
 8013b02:	ed97 0b04 	vldr	d0, [r7, #16]
 8013b06:	f001 f989 	bl	8014e1c <RegionCommonComputeRxWindowParameters>
}
 8013b0a:	bf00      	nop
 8013b0c:	3718      	adds	r7, #24
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	080210f4 	.word	0x080210f4
 8013b18:	080210fc 	.word	0x080210fc
 8013b1c:	0802113c 	.word	0x0802113c

08013b20 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013b20:	b5b0      	push	{r4, r5, r7, lr}
 8013b22:	b090      	sub	sp, #64	@ 0x40
 8013b24:	af0a      	add	r7, sp, #40	@ 0x28
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	785b      	ldrb	r3, [r3, #1]
 8013b2e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8013b30:	2300      	movs	r3, #0
 8013b32:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8013b34:	2300      	movs	r3, #0
 8013b36:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	685b      	ldr	r3, [r3, #4]
 8013b3c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8013b3e:	4b55      	ldr	r3, [pc, #340]	@ (8013c94 <RegionAS923RxConfig+0x174>)
 8013b40:	689b      	ldr	r3, [r3, #8]
 8013b42:	4798      	blx	r3
 8013b44:	4603      	mov	r3, r0
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d001      	beq.n	8013b4e <RegionAS923RxConfig+0x2e>
    {
        return false;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	e09d      	b.n	8013c8a <RegionAS923RxConfig+0x16a>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	7cdb      	ldrb	r3, [r3, #19]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d123      	bne.n	8013b9e <RegionAS923RxConfig+0x7e>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	781b      	ldrb	r3, [r3, #0]
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	4a4e      	ldr	r2, [pc, #312]	@ (8013c98 <RegionAS923RxConfig+0x178>)
 8013b5e:	460b      	mov	r3, r1
 8013b60:	005b      	lsls	r3, r3, #1
 8013b62:	440b      	add	r3, r1
 8013b64:	009b      	lsls	r3, r3, #2
 8013b66:	4413      	add	r3, r2
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	4619      	mov	r1, r3
 8013b72:	4a49      	ldr	r2, [pc, #292]	@ (8013c98 <RegionAS923RxConfig+0x178>)
 8013b74:	460b      	mov	r3, r1
 8013b76:	005b      	lsls	r3, r3, #1
 8013b78:	440b      	add	r3, r1
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	4413      	add	r3, r2
 8013b7e:	3304      	adds	r3, #4
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d00b      	beq.n	8013b9e <RegionAS923RxConfig+0x7e>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	4a42      	ldr	r2, [pc, #264]	@ (8013c98 <RegionAS923RxConfig+0x178>)
 8013b8e:	460b      	mov	r3, r1
 8013b90:	005b      	lsls	r3, r3, #1
 8013b92:	440b      	add	r3, r1
 8013b94:	009b      	lsls	r3, r3, #2
 8013b96:	4413      	add	r3, r2
 8013b98:	3304      	adds	r3, #4
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8013b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8013c9c <RegionAS923RxConfig+0x17c>)
 8013ba4:	5cd3      	ldrb	r3, [r2, r3]
 8013ba6:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8013ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8013c94 <RegionAS923RxConfig+0x174>)
 8013baa:	691b      	ldr	r3, [r3, #16]
 8013bac:	6938      	ldr	r0, [r7, #16]
 8013bae:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8013bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013bb4:	2b07      	cmp	r3, #7
 8013bb6:	d128      	bne.n	8013c0a <RegionAS923RxConfig+0xea>
    {
        modem = MODEM_FSK;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8013bbc:	4b35      	ldr	r3, [pc, #212]	@ (8013c94 <RegionAS923RxConfig+0x174>)
 8013bbe:	69dc      	ldr	r4, [r3, #28]
 8013bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013bc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013bc8:	fb02 f303 	mul.w	r3, r2, r3
 8013bcc:	4619      	mov	r1, r3
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	689b      	ldr	r3, [r3, #8]
 8013bd2:	b29b      	uxth	r3, r3
 8013bd4:	687a      	ldr	r2, [r7, #4]
 8013bd6:	7c92      	ldrb	r2, [r2, #18]
 8013bd8:	7df8      	ldrb	r0, [r7, #23]
 8013bda:	9209      	str	r2, [sp, #36]	@ 0x24
 8013bdc:	2200      	movs	r2, #0
 8013bde:	9208      	str	r2, [sp, #32]
 8013be0:	2200      	movs	r2, #0
 8013be2:	9207      	str	r2, [sp, #28]
 8013be4:	2200      	movs	r2, #0
 8013be6:	9206      	str	r2, [sp, #24]
 8013be8:	2201      	movs	r2, #1
 8013bea:	9205      	str	r2, [sp, #20]
 8013bec:	2200      	movs	r2, #0
 8013bee:	9204      	str	r2, [sp, #16]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	9203      	str	r2, [sp, #12]
 8013bf4:	9302      	str	r3, [sp, #8]
 8013bf6:	2305      	movs	r3, #5
 8013bf8:	9301      	str	r3, [sp, #4]
 8013bfa:	4b29      	ldr	r3, [pc, #164]	@ (8013ca0 <RegionAS923RxConfig+0x180>)
 8013bfc:	9300      	str	r3, [sp, #0]
 8013bfe:	2300      	movs	r3, #0
 8013c00:	460a      	mov	r2, r1
 8013c02:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013c06:	47a0      	blx	r4
 8013c08:	e024      	b.n	8013c54 <RegionAS923RxConfig+0x134>
    }
    else
    {
        modem = MODEM_LORA;
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8013c0e:	4b21      	ldr	r3, [pc, #132]	@ (8013c94 <RegionAS923RxConfig+0x174>)
 8013c10:	69dc      	ldr	r4, [r3, #28]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	789b      	ldrb	r3, [r3, #2]
 8013c16:	461d      	mov	r5, r3
 8013c18:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	689b      	ldr	r3, [r3, #8]
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	7c92      	ldrb	r2, [r2, #18]
 8013c26:	7df8      	ldrb	r0, [r7, #23]
 8013c28:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c2a:	2201      	movs	r2, #1
 8013c2c:	9208      	str	r2, [sp, #32]
 8013c2e:	2200      	movs	r2, #0
 8013c30:	9207      	str	r2, [sp, #28]
 8013c32:	2200      	movs	r2, #0
 8013c34:	9206      	str	r2, [sp, #24]
 8013c36:	2200      	movs	r2, #0
 8013c38:	9205      	str	r2, [sp, #20]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	9204      	str	r2, [sp, #16]
 8013c3e:	2200      	movs	r2, #0
 8013c40:	9203      	str	r2, [sp, #12]
 8013c42:	9302      	str	r3, [sp, #8]
 8013c44:	2308      	movs	r3, #8
 8013c46:	9301      	str	r3, [sp, #4]
 8013c48:	2300      	movs	r3, #0
 8013c4a:	9300      	str	r3, [sp, #0]
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	460a      	mov	r2, r1
 8013c50:	4629      	mov	r1, r5
 8013c52:	47a0      	blx	r4
    }

    // Check for repeater support
    if( rxConfig->RepeaterSupport == true )
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	7c5b      	ldrb	r3, [r3, #17]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d005      	beq.n	8013c68 <RegionAS923RxConfig+0x148>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 8013c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c60:	4a10      	ldr	r2, [pc, #64]	@ (8013ca4 <RegionAS923RxConfig+0x184>)
 8013c62:	5cd3      	ldrb	r3, [r2, r3]
 8013c64:	75bb      	strb	r3, [r7, #22]
 8013c66:	e004      	b.n	8013c72 <RegionAS923RxConfig+0x152>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 8013c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8013ca8 <RegionAS923RxConfig+0x188>)
 8013c6e:	5cd3      	ldrb	r3, [r2, r3]
 8013c70:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8013c72:	4b08      	ldr	r3, [pc, #32]	@ (8013c94 <RegionAS923RxConfig+0x174>)
 8013c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013c76:	7dba      	ldrb	r2, [r7, #22]
 8013c78:	320d      	adds	r2, #13
 8013c7a:	b2d1      	uxtb	r1, r2
 8013c7c:	7dfa      	ldrb	r2, [r7, #23]
 8013c7e:	4610      	mov	r0, r2
 8013c80:	4798      	blx	r3

    *datarate = (uint8_t) dr;
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	7bfa      	ldrb	r2, [r7, #15]
 8013c86:	701a      	strb	r2, [r3, #0]
    return true;
 8013c88:	2301      	movs	r3, #1
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3718      	adds	r7, #24
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bdb0      	pop	{r4, r5, r7, pc}
 8013c92:	bf00      	nop
 8013c94:	0802113c 	.word	0x0802113c
 8013c98:	20001d60 	.word	0x20001d60
 8013c9c:	080210f4 	.word	0x080210f4
 8013ca0:	00014585 	.word	0x00014585
 8013ca4:	08021124 	.word	0x08021124
 8013ca8:	0802111c 	.word	0x0802111c

08013cac <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cae:	b093      	sub	sp, #76	@ 0x4c
 8013cb0:	af0a      	add	r7, sp, #40	@ 0x28
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	4b57      	ldr	r3, [pc, #348]	@ (8013e20 <RegionAS923TxConfig+0x174>)
 8013cc2:	5c9b      	ldrb	r3, [r3, r2]
 8013cc4:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	4a54      	ldr	r2, [pc, #336]	@ (8013e24 <RegionAS923TxConfig+0x178>)
 8013cd4:	460b      	mov	r3, r1
 8013cd6:	005b      	lsls	r3, r3, #1
 8013cd8:	440b      	add	r3, r1
 8013cda:	009b      	lsls	r3, r3, #2
 8013cdc:	4413      	add	r3, r2
 8013cde:	3309      	adds	r3, #9
 8013ce0:	781b      	ldrb	r3, [r3, #0]
 8013ce2:	4a50      	ldr	r2, [pc, #320]	@ (8013e24 <RegionAS923TxConfig+0x178>)
 8013ce4:	3306      	adds	r3, #6
 8013ce6:	015b      	lsls	r3, r3, #5
 8013ce8:	4413      	add	r3, r2
 8013cea:	3302      	adds	r3, #2
 8013cec:	f993 1000 	ldrsb.w	r1, [r3]
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8013cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8013e28 <RegionAS923TxConfig+0x17c>)
 8013cf8:	f7ff fa96 	bl	8013228 <LimitTxPower>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7ff fa6e 	bl	80131e8 <GetBandwidth>
 8013d0c:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	edd3 7a01 	vldr	s15, [r3, #4]
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8013d1e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013d22:	eef0 0a47 	vmov.f32	s1, s14
 8013d26:	eeb0 0a67 	vmov.f32	s0, s15
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f001 f906 	bl	8014f3c <RegionCommonComputeTxPower>
 8013d30:	4603      	mov	r3, r0
 8013d32:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8013d34:	4b3d      	ldr	r3, [pc, #244]	@ (8013e2c <RegionAS923TxConfig+0x180>)
 8013d36:	691a      	ldr	r2, [r3, #16]
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	4939      	ldr	r1, [pc, #228]	@ (8013e24 <RegionAS923TxConfig+0x178>)
 8013d40:	4603      	mov	r3, r0
 8013d42:	005b      	lsls	r3, r3, #1
 8013d44:	4403      	add	r3, r0
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	440b      	add	r3, r1
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013d56:	2b07      	cmp	r3, #7
 8013d58:	d124      	bne.n	8013da4 <RegionAS923TxConfig+0xf8>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8013d5e:	4b33      	ldr	r3, [pc, #204]	@ (8013e2c <RegionAS923TxConfig+0x180>)
 8013d60:	6a1e      	ldr	r6, [r3, #32]
 8013d62:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013d66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013d6a:	fb02 f303 	mul.w	r3, r2, r3
 8013d6e:	461a      	mov	r2, r3
 8013d70:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8013d74:	7ff8      	ldrb	r0, [r7, #31]
 8013d76:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8013d7a:	9308      	str	r3, [sp, #32]
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	9307      	str	r3, [sp, #28]
 8013d80:	2300      	movs	r3, #0
 8013d82:	9306      	str	r3, [sp, #24]
 8013d84:	2300      	movs	r3, #0
 8013d86:	9305      	str	r3, [sp, #20]
 8013d88:	2301      	movs	r3, #1
 8013d8a:	9304      	str	r3, [sp, #16]
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	9303      	str	r3, [sp, #12]
 8013d90:	2305      	movs	r3, #5
 8013d92:	9302      	str	r3, [sp, #8]
 8013d94:	2300      	movs	r3, #0
 8013d96:	9301      	str	r3, [sp, #4]
 8013d98:	9200      	str	r2, [sp, #0]
 8013d9a:	69bb      	ldr	r3, [r7, #24]
 8013d9c:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8013da0:	47b0      	blx	r6
 8013da2:	e01d      	b.n	8013de0 <RegionAS923TxConfig+0x134>
    }
    else
    {
        modem = MODEM_LORA;
 8013da4:	2301      	movs	r3, #1
 8013da6:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8013da8:	4b20      	ldr	r3, [pc, #128]	@ (8013e2c <RegionAS923TxConfig+0x180>)
 8013daa:	6a1e      	ldr	r6, [r3, #32]
 8013dac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013db0:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8013db4:	7ff8      	ldrb	r0, [r7, #31]
 8013db6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8013dba:	9208      	str	r2, [sp, #32]
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	9207      	str	r2, [sp, #28]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	9206      	str	r2, [sp, #24]
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	9205      	str	r2, [sp, #20]
 8013dc8:	2201      	movs	r2, #1
 8013dca:	9204      	str	r2, [sp, #16]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	9203      	str	r2, [sp, #12]
 8013dd0:	2208      	movs	r2, #8
 8013dd2:	9202      	str	r2, [sp, #8]
 8013dd4:	2201      	movs	r2, #1
 8013dd6:	9201      	str	r2, [sp, #4]
 8013dd8:	9300      	str	r3, [sp, #0]
 8013dda:	69bb      	ldr	r3, [r7, #24]
 8013ddc:	2200      	movs	r2, #0
 8013dde:	47b0      	blx	r6
    }

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8013de0:	4b12      	ldr	r3, [pc, #72]	@ (8013e2c <RegionAS923TxConfig+0x180>)
 8013de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013de4:	68fa      	ldr	r2, [r7, #12]
 8013de6:	8992      	ldrh	r2, [r2, #12]
 8013de8:	b2d1      	uxtb	r1, r2
 8013dea:	7ffa      	ldrb	r2, [r7, #31]
 8013dec:	4610      	mov	r0, r2
 8013dee:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8013df0:	4b0e      	ldr	r3, [pc, #56]	@ (8013e2c <RegionAS923TxConfig+0x180>)
 8013df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013df4:	68fa      	ldr	r2, [r7, #12]
 8013df6:	8992      	ldrh	r2, [r2, #12]
 8013df8:	b2d1      	uxtb	r1, r2
 8013dfa:	7ffa      	ldrb	r2, [r7, #31]
 8013dfc:	4610      	mov	r0, r2
 8013dfe:	4798      	blx	r3
 8013e00:	4603      	mov	r3, r0
 8013e02:	2200      	movs	r2, #0
 8013e04:	461c      	mov	r4, r3
 8013e06:	4615      	mov	r5, r2
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	e9c3 4500 	strd	r4, r5, [r3]

    *txPower = txPowerLimited;
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	7f7a      	ldrb	r2, [r7, #29]
 8013e12:	701a      	strb	r2, [r3, #0]
    return true;
 8013e14:	2301      	movs	r3, #1
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3724      	adds	r7, #36	@ 0x24
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	080210f4 	.word	0x080210f4
 8013e24:	20001d60 	.word	0x20001d60
 8013e28:	20001e40 	.word	0x20001e40
 8013e2c:	0802113c 	.word	0x0802113c

08013e30 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013e30:	b590      	push	{r4, r7, lr}
 8013e32:	b093      	sub	sp, #76	@ 0x4c
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	60b9      	str	r1, [r7, #8]
 8013e3a:	607a      	str	r2, [r7, #4]
 8013e3c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8013e3e:	2307      	movs	r3, #7
 8013e40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8013e44:	2300      	movs	r3, #0
 8013e46:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8013e50:	2300      	movs	r3, #0
 8013e52:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013e54:	e083      	b.n	8013f5e <RegionAS923LinkAdrReq+0x12e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	685a      	ldr	r2, [r3, #4]
 8013e5a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013e5e:	4413      	add	r3, r2
 8013e60:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8013e64:	4611      	mov	r1, r2
 8013e66:	4618      	mov	r0, r3
 8013e68:	f000 fec2 	bl	8014bf0 <RegionCommonParseLinkAdrReq>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8013e72:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d079      	beq.n	8013f6e <RegionAS923LinkAdrReq+0x13e>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8013e7a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8013e7e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8013e82:	4413      	add	r3, r2
 8013e84:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8013e88:	2307      	movs	r3, #7
 8013e8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8013e8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013e92:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8013e94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d109      	bne.n	8013eb0 <RegionAS923LinkAdrReq+0x80>
 8013e9c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d106      	bne.n	8013eb0 <RegionAS923LinkAdrReq+0x80>
        {
            status &= 0xFE; // Channel mask KO
 8013ea2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013ea6:	f023 0301 	bic.w	r3, r3, #1
 8013eaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013eae:	e056      	b.n	8013f5e <RegionAS923LinkAdrReq+0x12e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8013eb0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d003      	beq.n	8013ec0 <RegionAS923LinkAdrReq+0x90>
 8013eb8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013ebc:	2b05      	cmp	r3, #5
 8013ebe:	d903      	bls.n	8013ec8 <RegionAS923LinkAdrReq+0x98>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8013ec0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8013ec4:	2b06      	cmp	r3, #6
 8013ec6:	d906      	bls.n	8013ed6 <RegionAS923LinkAdrReq+0xa6>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8013ec8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013ecc:	f023 0301 	bic.w	r3, r3, #1
 8013ed0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013ed4:	e043      	b.n	8013f5e <RegionAS923LinkAdrReq+0x12e>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8013edc:	e03b      	b.n	8013f56 <RegionAS923LinkAdrReq+0x126>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8013ede:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013ee2:	2b06      	cmp	r3, #6
 8013ee4:	d117      	bne.n	8013f16 <RegionAS923LinkAdrReq+0xe6>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8013ee6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8013eea:	495b      	ldr	r1, [pc, #364]	@ (8014058 <RegionAS923LinkAdrReq+0x228>)
 8013eec:	4613      	mov	r3, r2
 8013eee:	005b      	lsls	r3, r3, #1
 8013ef0:	4413      	add	r3, r2
 8013ef2:	009b      	lsls	r3, r3, #2
 8013ef4:	440b      	add	r3, r1
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d027      	beq.n	8013f4c <RegionAS923LinkAdrReq+0x11c>
                    {
                        chMask |= 1 << i;
 8013efc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013f00:	2201      	movs	r2, #1
 8013f02:	fa02 f303 	lsl.w	r3, r2, r3
 8013f06:	b21a      	sxth	r2, r3
 8013f08:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013f0a:	b21b      	sxth	r3, r3
 8013f0c:	4313      	orrs	r3, r2
 8013f0e:	b21b      	sxth	r3, r3
 8013f10:	b29b      	uxth	r3, r3
 8013f12:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8013f14:	e01a      	b.n	8013f4c <RegionAS923LinkAdrReq+0x11c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8013f16:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013f18:	461a      	mov	r2, r3
 8013f1a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013f1e:	fa42 f303 	asr.w	r3, r2, r3
 8013f22:	f003 0301 	and.w	r3, r3, #1
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d010      	beq.n	8013f4c <RegionAS923LinkAdrReq+0x11c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8013f2a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8013f2e:	494a      	ldr	r1, [pc, #296]	@ (8014058 <RegionAS923LinkAdrReq+0x228>)
 8013f30:	4613      	mov	r3, r2
 8013f32:	005b      	lsls	r3, r3, #1
 8013f34:	4413      	add	r3, r2
 8013f36:	009b      	lsls	r3, r3, #2
 8013f38:	440b      	add	r3, r1
 8013f3a:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d105      	bne.n	8013f4c <RegionAS923LinkAdrReq+0x11c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8013f40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013f44:	f023 0301 	bic.w	r3, r3, #1
 8013f48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8013f4c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013f50:	3301      	adds	r3, #1
 8013f52:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8013f56:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013f5a:	2b0f      	cmp	r3, #15
 8013f5c:	d9bf      	bls.n	8013ede <RegionAS923LinkAdrReq+0xae>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	7a1b      	ldrb	r3, [r3, #8]
 8013f62:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8013f66:	429a      	cmp	r2, r3
 8013f68:	f4ff af75 	bcc.w	8013e56 <RegionAS923LinkAdrReq+0x26>
 8013f6c:	e000      	b.n	8013f70 <RegionAS923LinkAdrReq+0x140>
            break; // break loop, since no more request has been found
 8013f6e:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013f70:	2302      	movs	r3, #2
 8013f72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	7a5b      	ldrb	r3, [r3, #9]
 8013f7a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 8013f7e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013f82:	4618      	mov	r0, r3
 8013f84:	f7ff fa38 	bl	80133f8 <RegionAS923GetPhyParam>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8013f8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013f90:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	7a9b      	ldrb	r3, [r3, #10]
 8013f96:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013f98:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8013f9c:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8013f9e:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8013fa2:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8013fa4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8013fa8:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8013fb0:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8013fb8:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	7b5b      	ldrb	r3, [r3, #13]
 8013fbe:	b25b      	sxtb	r3, r3
 8013fc0:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8013fc2:	2310      	movs	r3, #16
 8013fc4:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8013fc6:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8013fca:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8013fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fce:	b25b      	sxtb	r3, r3
 8013fd0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 8013fd4:	2307      	movs	r3, #7
 8013fd6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8013fda:	4b1f      	ldr	r3, [pc, #124]	@ (8014058 <RegionAS923LinkAdrReq+0x228>)
 8013fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 8013fde:	2307      	movs	r3, #7
 8013fe0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8013ff0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8013ff4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013ff8:	1c9a      	adds	r2, r3, #2
 8013ffa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013ffe:	1c59      	adds	r1, r3, #1
 8014000:	f107 0010 	add.w	r0, r7, #16
 8014004:	4623      	mov	r3, r4
 8014006:	f000 fe45 	bl	8014c94 <RegionCommonLinkAdrReqVerifyParams>
 801400a:	4603      	mov	r3, r0
 801400c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8014010:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014014:	2b07      	cmp	r3, #7
 8014016:	d108      	bne.n	801402a <RegionAS923LinkAdrReq+0x1fa>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8014018:	2202      	movs	r2, #2
 801401a:	2100      	movs	r1, #0
 801401c:	480f      	ldr	r0, [pc, #60]	@ (801405c <RegionAS923LinkAdrReq+0x22c>)
 801401e:	f004 f9af 	bl	8018380 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8014022:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014024:	4b0c      	ldr	r3, [pc, #48]	@ (8014058 <RegionAS923LinkAdrReq+0x228>)
 8014026:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801402a:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 801402e:	68bb      	ldr	r3, [r7, #8]
 8014030:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8014032:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801403a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8014042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014044:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8014048:	701a      	strb	r2, [r3, #0]

    return status;
 801404a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801404e:	4618      	mov	r0, r3
 8014050:	374c      	adds	r7, #76	@ 0x4c
 8014052:	46bd      	mov	sp, r7
 8014054:	bd90      	pop	{r4, r7, pc}
 8014056:	bf00      	nop
 8014058:	20001d60 	.word	0x20001d60
 801405c:	20001e40 	.word	0x20001e40

08014060 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b084      	sub	sp, #16
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8014068:	2307      	movs	r3, #7
 801406a:	73fb      	strb	r3, [r7, #15]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	685b      	ldr	r3, [r3, #4]
 8014070:	4618      	mov	r0, r3
 8014072:	f7ff f8f5 	bl	8013260 <VerifyRfFreq>
 8014076:	4603      	mov	r3, r0
 8014078:	f083 0301 	eor.w	r3, r3, #1
 801407c:	b2db      	uxtb	r3, r3
 801407e:	2b00      	cmp	r3, #0
 8014080:	d003      	beq.n	801408a <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8014082:	7bfb      	ldrb	r3, [r7, #15]
 8014084:	f023 0301 	bic.w	r3, r3, #1
 8014088:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f993 3000 	ldrsb.w	r3, [r3]
 8014090:	2207      	movs	r2, #7
 8014092:	2100      	movs	r1, #0
 8014094:	4618      	mov	r0, r3
 8014096:	f000 fbeb 	bl	8014870 <RegionCommonValueInRange>
 801409a:	4603      	mov	r3, r0
 801409c:	2b00      	cmp	r3, #0
 801409e:	d103      	bne.n	80140a8 <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80140a0:	7bfb      	ldrb	r3, [r7, #15]
 80140a2:	f023 0302 	bic.w	r3, r3, #2
 80140a6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80140ae:	2207      	movs	r2, #7
 80140b0:	2100      	movs	r1, #0
 80140b2:	4618      	mov	r0, r3
 80140b4:	f000 fbdc 	bl	8014870 <RegionCommonValueInRange>
 80140b8:	4603      	mov	r3, r0
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d103      	bne.n	80140c6 <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80140be:	7bfb      	ldrb	r3, [r7, #15]
 80140c0:	f023 0304 	bic.w	r3, r3, #4
 80140c4:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 80140c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3710      	adds	r7, #16
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <RegionAS923NewChannelReq>:

uint8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b086      	sub	sp, #24
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80140d8:	2303      	movs	r3, #3
 80140da:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d114      	bne.n	8014110 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80140ec:	b2db      	uxtb	r3, r3
 80140ee:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 80140f0:	f107 0308 	add.w	r3, r7, #8
 80140f4:	4618      	mov	r0, r3
 80140f6:	f000 fa5b 	bl	80145b0 <RegionAS923ChannelsRemove>
 80140fa:	4603      	mov	r3, r0
 80140fc:	f083 0301 	eor.w	r3, r3, #1
 8014100:	b2db      	uxtb	r3, r3
 8014102:	2b00      	cmp	r3, #0
 8014104:	d03b      	beq.n	801417e <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 8014106:	7dfb      	ldrb	r3, [r7, #23]
 8014108:	f023 0303 	bic.w	r3, r3, #3
 801410c:	75fb      	strb	r3, [r7, #23]
 801410e:	e036      	b.n	801417e <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801411c:	b2db      	uxtb	r3, r3
 801411e:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8014120:	f107 030c 	add.w	r3, r7, #12
 8014124:	4618      	mov	r0, r3
 8014126:	f000 f9ab 	bl	8014480 <RegionAS923ChannelAdd>
 801412a:	4603      	mov	r3, r0
 801412c:	2b06      	cmp	r3, #6
 801412e:	d820      	bhi.n	8014172 <RegionAS923NewChannelReq+0xa2>
 8014130:	a201      	add	r2, pc, #4	@ (adr r2, 8014138 <RegionAS923NewChannelReq+0x68>)
 8014132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014136:	bf00      	nop
 8014138:	0801417d 	.word	0x0801417d
 801413c:	08014173 	.word	0x08014173
 8014140:	08014173 	.word	0x08014173
 8014144:	08014173 	.word	0x08014173
 8014148:	08014155 	.word	0x08014155
 801414c:	0801415f 	.word	0x0801415f
 8014150:	08014169 	.word	0x08014169
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8014154:	7dfb      	ldrb	r3, [r7, #23]
 8014156:	f023 0301 	bic.w	r3, r3, #1
 801415a:	75fb      	strb	r3, [r7, #23]
                break;
 801415c:	e00f      	b.n	801417e <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801415e:	7dfb      	ldrb	r3, [r7, #23]
 8014160:	f023 0302 	bic.w	r3, r3, #2
 8014164:	75fb      	strb	r3, [r7, #23]
                break;
 8014166:	e00a      	b.n	801417e <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8014168:	7dfb      	ldrb	r3, [r7, #23]
 801416a:	f023 0303 	bic.w	r3, r3, #3
 801416e:	75fb      	strb	r3, [r7, #23]
                break;
 8014170:	e005      	b.n	801417e <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8014172:	7dfb      	ldrb	r3, [r7, #23]
 8014174:	f023 0303 	bic.w	r3, r3, #3
 8014178:	75fb      	strb	r3, [r7, #23]
                break;
 801417a:	e000      	b.n	801417e <RegionAS923NewChannelReq+0xae>
                break;
 801417c:	bf00      	nop
            }
        }
    }

    return status;
 801417e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014180:	4618      	mov	r0, r3
 8014182:	3718      	adds	r7, #24
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}

08014188 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8014188:	b480      	push	{r7}
 801418a:	b083      	sub	sp, #12
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8014190:	2300      	movs	r3, #0
}
 8014192:	4618      	mov	r0, r3
 8014194:	370c      	adds	r7, #12
 8014196:	46bd      	mov	sp, r7
 8014198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419c:	4770      	bx	lr
	...

080141a0 <RegionAS923DlChannelReq>:

uint8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b084      	sub	sp, #16
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80141a8:	2303      	movs	r3, #3
 80141aa:	73fb      	strb	r3, [r7, #15]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7ff f855 	bl	8013260 <VerifyRfFreq>
 80141b6:	4603      	mov	r3, r0
 80141b8:	f083 0301 	eor.w	r3, r3, #1
 80141bc:	b2db      	uxtb	r3, r3
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d003      	beq.n	80141ca <RegionAS923DlChannelReq+0x2a>
    {
        status &= 0xFE;
 80141c2:	7bfb      	ldrb	r3, [r7, #15]
 80141c4:	f023 0301 	bic.w	r3, r3, #1
 80141c8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	781b      	ldrb	r3, [r3, #0]
 80141ce:	4619      	mov	r1, r3
 80141d0:	4a10      	ldr	r2, [pc, #64]	@ (8014214 <RegionAS923DlChannelReq+0x74>)
 80141d2:	460b      	mov	r3, r1
 80141d4:	005b      	lsls	r3, r3, #1
 80141d6:	440b      	add	r3, r1
 80141d8:	009b      	lsls	r3, r3, #2
 80141da:	4413      	add	r3, r2
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d103      	bne.n	80141ea <RegionAS923DlChannelReq+0x4a>
    {
        status &= 0xFD;
 80141e2:	7bfb      	ldrb	r3, [r7, #15]
 80141e4:	f023 0302 	bic.w	r3, r3, #2
 80141e8:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80141ea:	7bfb      	ldrb	r3, [r7, #15]
 80141ec:	2b03      	cmp	r3, #3
 80141ee:	d10c      	bne.n	801420a <RegionAS923DlChannelReq+0x6a>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	4618      	mov	r0, r3
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	685a      	ldr	r2, [r3, #4]
 80141fa:	4906      	ldr	r1, [pc, #24]	@ (8014214 <RegionAS923DlChannelReq+0x74>)
 80141fc:	4603      	mov	r3, r0
 80141fe:	005b      	lsls	r3, r3, #1
 8014200:	4403      	add	r3, r0
 8014202:	009b      	lsls	r3, r3, #2
 8014204:	440b      	add	r3, r1
 8014206:	3304      	adds	r3, #4
 8014208:	601a      	str	r2, [r3, #0]
    }

    return status;
 801420a:	7bfb      	ldrb	r3, [r7, #15]
}
 801420c:	4618      	mov	r0, r3
 801420e:	3710      	adds	r7, #16
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}
 8014214:	20001d60 	.word	0x20001d60

08014218 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8014218:	b480      	push	{r7}
 801421a:	b083      	sub	sp, #12
 801421c:	af00      	add	r7, sp, #0
 801421e:	4603      	mov	r3, r0
 8014220:	460a      	mov	r2, r1
 8014222:	71fb      	strb	r3, [r7, #7]
 8014224:	4613      	mov	r3, r2
 8014226:	71bb      	strb	r3, [r7, #6]
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8014228:	2302      	movs	r3, #2
}
 801422a:	4618      	mov	r0, r3
 801422c:	370c      	adds	r7, #12
 801422e:	46bd      	mov	sp, r7
 8014230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014234:	4770      	bx	lr
	...

08014238 <RegionAS923CalcBackOff>:

void RegionAS923CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b08a      	sub	sp, #40	@ 0x28
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8014240:	4b12      	ldr	r3, [pc, #72]	@ (801428c <RegionAS923CalcBackOff+0x54>)
 8014242:	60bb      	str	r3, [r7, #8]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8014244:	4b12      	ldr	r3, [pc, #72]	@ (8014290 <RegionAS923CalcBackOff+0x58>)
 8014246:	60fb      	str	r3, [r7, #12]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	785b      	ldrb	r3, [r3, #1]
 801424c:	743b      	strb	r3, [r7, #16]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	747b      	strb	r3, [r7, #17]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	789b      	ldrb	r3, [r3, #2]
 8014258:	74bb      	strb	r3, [r7, #18]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	78db      	ldrb	r3, [r3, #3]
 801425e:	74fb      	strb	r3, [r7, #19]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8014260:	687a      	ldr	r2, [r7, #4]
 8014262:	f107 0314 	add.w	r3, r7, #20
 8014266:	3204      	adds	r2, #4
 8014268:	e892 0003 	ldmia.w	r2, {r0, r1}
 801426c:	e883 0003 	stmia.w	r3, {r0, r1}
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014276:	e9c7 2308 	strd	r2, r3, [r7, #32]

    RegionCommonCalcBackOff( &calcBackOffParams );
 801427a:	f107 0308 	add.w	r3, r7, #8
 801427e:	4618      	mov	r0, r3
 8014280:	f000 fe8e 	bl	8014fa0 <RegionCommonCalcBackOff>
}
 8014284:	bf00      	nop
 8014286:	3728      	adds	r7, #40	@ 0x28
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	20001d60 	.word	0x20001d60
 8014290:	20001e20 	.word	0x20001e20

08014294 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014294:	b5b0      	push	{r4, r5, r7, lr}
 8014296:	b096      	sub	sp, #88	@ 0x58
 8014298:	af04      	add	r7, sp, #16
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	607a      	str	r2, [r7, #4]
 80142a0:	603b      	str	r3, [r7, #0]
    uint8_t channelNext = 0;
 80142a2:	2300      	movs	r3, #0
 80142a4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t nbEnabledChannels = 0;
 80142a8:	2300      	movs	r3, #0
 80142aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t delayTx = 0;
 80142ae:	2300      	movs	r3, #0
 80142b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 80142b4:	2300      	movs	r3, #0
 80142b6:	617b      	str	r3, [r7, #20]
 80142b8:	f107 0318 	add.w	r3, r7, #24
 80142bc:	2200      	movs	r2, #0
 80142be:	601a      	str	r2, [r3, #0]
 80142c0:	605a      	str	r2, [r3, #4]
 80142c2:	609a      	str	r2, [r3, #8]
    TimerTime_t nextTxDelay = 0;
 80142c4:	f04f 0200 	mov.w	r2, #0
 80142c8:	f04f 0300 	mov.w	r3, #0
 80142cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 80142d0:	2201      	movs	r2, #1
 80142d2:	2100      	movs	r1, #0
 80142d4:	4866      	ldr	r0, [pc, #408]	@ (8014470 <RegionAS923NextChannel+0x1dc>)
 80142d6:	f000 fb1e 	bl	8014916 <RegionCommonCountChannels>
 80142da:	4603      	mov	r3, r0
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d108      	bne.n	80142f2 <RegionAS923NextChannel+0x5e>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 80142e0:	4b64      	ldr	r3, [pc, #400]	@ (8014474 <RegionAS923NextChannel+0x1e0>)
 80142e2:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 80142e6:	f043 0303 	orr.w	r3, r3, #3
 80142ea:	b29a      	uxth	r2, r3
 80142ec:	4b61      	ldr	r3, [pc, #388]	@ (8014474 <RegionAS923NextChannel+0x1e0>)
 80142ee:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80142f8:	4610      	mov	r0, r2
 80142fa:	4619      	mov	r1, r3
 80142fc:	f003 fc2e 	bl	8017b5c <UTIL_TIMER_GetElapsedTime>
 8014300:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801430a:	4313      	orrs	r3, r2
 801430c:	d008      	beq.n	8014320 <RegionAS923NextChannel+0x8c>
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014314:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8014318:	4290      	cmp	r0, r2
 801431a:	eb71 0303 	sbcs.w	r3, r1, r3
 801431e:	d326      	bcc.n	801436e <RegionAS923NextChannel+0xda>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014320:	6839      	ldr	r1, [r7, #0]
 8014322:	f04f 0200 	mov.w	r2, #0
 8014326:	f04f 0300 	mov.w	r3, #0
 801432a:	e9c1 2300 	strd	r2, r3, [r1]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AS923_MAX_NB_BANDS );
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	7c58      	ldrb	r0, [r3, #17]
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	7c99      	ldrb	r1, [r3, #18]
 8014336:	2301      	movs	r3, #1
 8014338:	4a4f      	ldr	r2, [pc, #316]	@ (8014478 <RegionAS923NextChannel+0x1e4>)
 801433a:	f000 fb60 	bl	80149fe <RegionCommonUpdateBandTimeOff>
 801433e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	7c58      	ldrb	r0, [r3, #17]
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	f993 3010 	ldrsb.w	r3, [r3, #16]
 801434c:	b2d9      	uxtb	r1, r3
 801434e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8014352:	9302      	str	r3, [sp, #8]
 8014354:	f107 0314 	add.w	r3, r7, #20
 8014358:	9301      	str	r3, [sp, #4]
 801435a:	4b47      	ldr	r3, [pc, #284]	@ (8014478 <RegionAS923NextChannel+0x1e4>)
 801435c:	9300      	str	r3, [sp, #0]
 801435e:	4b45      	ldr	r3, [pc, #276]	@ (8014474 <RegionAS923NextChannel+0x1e0>)
 8014360:	4a43      	ldr	r2, [pc, #268]	@ (8014470 <RegionAS923NextChannel+0x1dc>)
 8014362:	f7fe ffa3 	bl	80132ac <CountNbOfEnabledChannels>
 8014366:	4603      	mov	r3, r0
 8014368:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801436c:	e00f      	b.n	801438e <RegionAS923NextChannel+0xfa>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 801436e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014372:	3301      	adds	r3, #1
 8014374:	b2db      	uxtb	r3, r3
 8014376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014380:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8014384:	1a84      	subs	r4, r0, r2
 8014386:	eb61 0503 	sbc.w	r5, r1, r3
 801438a:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
    }

    if( nbEnabledChannels > 0 )
 801438e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014392:	2b00      	cmp	r3, #0
 8014394:	d04c      	beq.n	8014430 <RegionAS923NextChannel+0x19c>
    {
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 8014396:	2300      	movs	r3, #0
 8014398:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801439c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80143a0:	3b01      	subs	r3, #1
 80143a2:	4619      	mov	r1, r3
 80143a4:	2000      	movs	r0, #0
 80143a6:	f003 ff97 	bl	80182d8 <randr>
 80143aa:	4603      	mov	r3, r0
 80143ac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80143b0:	e038      	b.n	8014424 <RegionAS923NextChannel+0x190>
        {
            channelNext = enabledChannels[j];
 80143b2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80143b6:	3348      	adds	r3, #72	@ 0x48
 80143b8:	443b      	add	r3, r7
 80143ba:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80143be:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            j = ( j + 1 ) % nbEnabledChannels;
 80143c2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80143c6:	3301      	adds	r3, #1
 80143c8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80143cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80143d0:	fb01 f202 	mul.w	r2, r1, r2
 80143d4:	1a9b      	subs	r3, r3, r2
 80143d6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

            // Perform carrier sense for AS923_CARRIER_SENSE_TIME
            // If the channel is free, we can stop the LBT mechanism
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, AS923_RSSI_FREE_TH, AS923_CARRIER_SENSE_TIME ) == true )
 80143da:	4b28      	ldr	r3, [pc, #160]	@ (801447c <RegionAS923NextChannel+0x1e8>)
 80143dc:	695c      	ldr	r4, [r3, #20]
 80143de:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80143e2:	4924      	ldr	r1, [pc, #144]	@ (8014474 <RegionAS923NextChannel+0x1e0>)
 80143e4:	4613      	mov	r3, r2
 80143e6:	005b      	lsls	r3, r3, #1
 80143e8:	4413      	add	r3, r2
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	440b      	add	r3, r1
 80143ee:	6819      	ldr	r1, [r3, #0]
 80143f0:	2306      	movs	r3, #6
 80143f2:	f06f 0254 	mvn.w	r2, #84	@ 0x54
 80143f6:	2001      	movs	r0, #1
 80143f8:	47a0      	blx	r4
 80143fa:	4603      	mov	r3, r0
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d00c      	beq.n	801441a <RegionAS923NextChannel+0x186>
            {
                // Free channel found
                *channel = channelNext;
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8014406:	701a      	strb	r2, [r3, #0]
                *time = 0;
 8014408:	6879      	ldr	r1, [r7, #4]
 801440a:	f04f 0200 	mov.w	r2, #0
 801440e:	f04f 0300 	mov.w	r3, #0
 8014412:	e9c1 2300 	strd	r2, r3, [r1]
                return LORAMAC_STATUS_OK;
 8014416:	2300      	movs	r3, #0
 8014418:	e026      	b.n	8014468 <RegionAS923NextChannel+0x1d4>
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 801441a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801441e:	3301      	adds	r3, #1
 8014420:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014424:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014428:	2b0f      	cmp	r3, #15
 801442a:	d9c2      	bls.n	80143b2 <RegionAS923NextChannel+0x11e>
            }
        }
        return LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
 801442c:	230d      	movs	r3, #13
 801442e:	e01b      	b.n	8014468 <RegionAS923NextChannel+0x1d4>
    }
    else
    {
        if( delayTx > 0 )
 8014430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014434:	2b00      	cmp	r3, #0
 8014436:	d006      	beq.n	8014446 <RegionAS923NextChannel+0x1b2>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8014438:	6879      	ldr	r1, [r7, #4]
 801443a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801443e:	e9c1 2300 	strd	r2, r3, [r1]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014442:	230b      	movs	r3, #11
 8014444:	e010      	b.n	8014468 <RegionAS923NextChannel+0x1d4>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8014446:	4b0b      	ldr	r3, [pc, #44]	@ (8014474 <RegionAS923NextChannel+0x1e0>)
 8014448:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 801444c:	f043 0303 	orr.w	r3, r3, #3
 8014450:	b29a      	uxth	r2, r3
 8014452:	4b08      	ldr	r3, [pc, #32]	@ (8014474 <RegionAS923NextChannel+0x1e0>)
 8014454:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
        *time = 0;
 8014458:	6879      	ldr	r1, [r7, #4]
 801445a:	f04f 0200 	mov.w	r2, #0
 801445e:	f04f 0300 	mov.w	r3, #0
 8014462:	e9c1 2300 	strd	r2, r3, [r1]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014466:	230c      	movs	r3, #12
    }
}
 8014468:	4618      	mov	r0, r3
 801446a:	3748      	adds	r7, #72	@ 0x48
 801446c:	46bd      	mov	sp, r7
 801446e:	bdb0      	pop	{r4, r5, r7, pc}
 8014470:	20001e40 	.word	0x20001e40
 8014474:	20001d60 	.word	0x20001d60
 8014478:	20001e20 	.word	0x20001e20
 801447c:	0802113c 	.word	0x0802113c

08014480 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b084      	sub	sp, #16
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 8014488:	2300      	movs	r3, #0
 801448a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801448c:	2300      	movs	r3, #0
 801448e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	791b      	ldrb	r3, [r3, #4]
 8014494:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8014496:	7b7b      	ldrb	r3, [r7, #13]
 8014498:	2b01      	cmp	r3, #1
 801449a:	d801      	bhi.n	80144a0 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801449c:	2306      	movs	r3, #6
 801449e:	e081      	b.n	80145a4 <RegionAS923ChannelAdd+0x124>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 80144a0:	7b7b      	ldrb	r3, [r7, #13]
 80144a2:	2b0f      	cmp	r3, #15
 80144a4:	d901      	bls.n	80144aa <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80144a6:	2303      	movs	r3, #3
 80144a8:	e07c      	b.n	80145a4 <RegionAS923ChannelAdd+0x124>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	7a1b      	ldrb	r3, [r3, #8]
 80144b0:	f343 0303 	sbfx	r3, r3, #0, #4
 80144b4:	b25b      	sxtb	r3, r3
 80144b6:	2207      	movs	r2, #7
 80144b8:	2100      	movs	r1, #0
 80144ba:	4618      	mov	r0, r3
 80144bc:	f000 f9d8 	bl	8014870 <RegionCommonValueInRange>
 80144c0:	4603      	mov	r3, r0
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d101      	bne.n	80144ca <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 80144c6:	2301      	movs	r3, #1
 80144c8:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	7a1b      	ldrb	r3, [r3, #8]
 80144d0:	f343 1303 	sbfx	r3, r3, #4, #4
 80144d4:	b25b      	sxtb	r3, r3
 80144d6:	2207      	movs	r2, #7
 80144d8:	2100      	movs	r1, #0
 80144da:	4618      	mov	r0, r3
 80144dc:	f000 f9c8 	bl	8014870 <RegionCommonValueInRange>
 80144e0:	4603      	mov	r3, r0
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d101      	bne.n	80144ea <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 80144e6:	2301      	movs	r3, #1
 80144e8:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	7a1b      	ldrb	r3, [r3, #8]
 80144f0:	f343 0303 	sbfx	r3, r3, #0, #4
 80144f4:	b25a      	sxtb	r2, r3
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	7a1b      	ldrb	r3, [r3, #8]
 80144fc:	f343 1303 	sbfx	r3, r3, #4, #4
 8014500:	b25b      	sxtb	r3, r3
 8014502:	429a      	cmp	r2, r3
 8014504:	dd01      	ble.n	801450a <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 8014506:	2301      	movs	r3, #1
 8014508:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801450a:	7bbb      	ldrb	r3, [r7, #14]
 801450c:	f083 0301 	eor.w	r3, r3, #1
 8014510:	b2db      	uxtb	r3, r3
 8014512:	2b00      	cmp	r3, #0
 8014514:	d00d      	beq.n	8014532 <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	4618      	mov	r0, r3
 801451e:	f7fe fe9f 	bl	8013260 <VerifyRfFreq>
 8014522:	4603      	mov	r3, r0
 8014524:	f083 0301 	eor.w	r3, r3, #1
 8014528:	b2db      	uxtb	r3, r3
 801452a:	2b00      	cmp	r3, #0
 801452c:	d001      	beq.n	8014532 <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 801452e:	2301      	movs	r3, #1
 8014530:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8014532:	7bfb      	ldrb	r3, [r7, #15]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d004      	beq.n	8014542 <RegionAS923ChannelAdd+0xc2>
 8014538:	7bbb      	ldrb	r3, [r7, #14]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d001      	beq.n	8014542 <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801453e:	2306      	movs	r3, #6
 8014540:	e030      	b.n	80145a4 <RegionAS923ChannelAdd+0x124>
    }
    if( drInvalid == true )
 8014542:	7bfb      	ldrb	r3, [r7, #15]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d001      	beq.n	801454c <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8014548:	2305      	movs	r3, #5
 801454a:	e02b      	b.n	80145a4 <RegionAS923ChannelAdd+0x124>
    }
    if( freqInvalid == true )
 801454c:	7bbb      	ldrb	r3, [r7, #14]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d001      	beq.n	8014556 <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8014552:	2304      	movs	r3, #4
 8014554:	e026      	b.n	80145a4 <RegionAS923ChannelAdd+0x124>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8014556:	7b7a      	ldrb	r2, [r7, #13]
 8014558:	4613      	mov	r3, r2
 801455a:	005b      	lsls	r3, r3, #1
 801455c:	4413      	add	r3, r2
 801455e:	009b      	lsls	r3, r3, #2
 8014560:	4a12      	ldr	r2, [pc, #72]	@ (80145ac <RegionAS923ChannelAdd+0x12c>)
 8014562:	1898      	adds	r0, r3, r2
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	220c      	movs	r2, #12
 801456a:	4619      	mov	r1, r3
 801456c:	f003 fecb 	bl	8018306 <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 8014570:	7b7a      	ldrb	r2, [r7, #13]
 8014572:	490e      	ldr	r1, [pc, #56]	@ (80145ac <RegionAS923ChannelAdd+0x12c>)
 8014574:	4613      	mov	r3, r2
 8014576:	005b      	lsls	r3, r3, #1
 8014578:	4413      	add	r3, r2
 801457a:	009b      	lsls	r3, r3, #2
 801457c:	440b      	add	r3, r1
 801457e:	3309      	adds	r3, #9
 8014580:	2200      	movs	r2, #0
 8014582:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8014584:	4b09      	ldr	r3, [pc, #36]	@ (80145ac <RegionAS923ChannelAdd+0x12c>)
 8014586:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 801458a:	b21a      	sxth	r2, r3
 801458c:	7b7b      	ldrb	r3, [r7, #13]
 801458e:	2101      	movs	r1, #1
 8014590:	fa01 f303 	lsl.w	r3, r1, r3
 8014594:	b21b      	sxth	r3, r3
 8014596:	4313      	orrs	r3, r2
 8014598:	b21b      	sxth	r3, r3
 801459a:	b29a      	uxth	r2, r3
 801459c:	4b03      	ldr	r3, [pc, #12]	@ (80145ac <RegionAS923ChannelAdd+0x12c>)
 801459e:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
    return LORAMAC_STATUS_OK;
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3710      	adds	r7, #16
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}
 80145ac:	20001d60 	.word	0x20001d60

080145b0 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b086      	sub	sp, #24
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	781b      	ldrb	r3, [r3, #0]
 80145bc:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80145be:	7dfb      	ldrb	r3, [r7, #23]
 80145c0:	2b01      	cmp	r3, #1
 80145c2:	d801      	bhi.n	80145c8 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 80145c4:	2300      	movs	r3, #0
 80145c6:	e012      	b.n	80145ee <RegionAS923ChannelsRemove+0x3e>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80145c8:	7dfa      	ldrb	r2, [r7, #23]
 80145ca:	490b      	ldr	r1, [pc, #44]	@ (80145f8 <RegionAS923ChannelsRemove+0x48>)
 80145cc:	4613      	mov	r3, r2
 80145ce:	005b      	lsls	r3, r3, #1
 80145d0:	4413      	add	r3, r2
 80145d2:	009b      	lsls	r3, r3, #2
 80145d4:	440b      	add	r3, r1
 80145d6:	461a      	mov	r2, r3
 80145d8:	2300      	movs	r3, #0
 80145da:	6013      	str	r3, [r2, #0]
 80145dc:	6053      	str	r3, [r2, #4]
 80145de:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 80145e0:	7dfb      	ldrb	r3, [r7, #23]
 80145e2:	2210      	movs	r2, #16
 80145e4:	4619      	mov	r1, r3
 80145e6:	4805      	ldr	r0, [pc, #20]	@ (80145fc <RegionAS923ChannelsRemove+0x4c>)
 80145e8:	f000 f960 	bl	80148ac <RegionCommonChanDisable>
 80145ec:	4603      	mov	r3, r0
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	3718      	adds	r7, #24
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd80      	pop	{r7, pc}
 80145f6:	bf00      	nop
 80145f8:	20001d60 	.word	0x20001d60
 80145fc:	20001e40 	.word	0x20001e40

08014600 <RegionAS923SetContinuousWave>:

void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b084      	sub	sp, #16
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	781b      	ldrb	r3, [r3, #0]
 8014612:	4619      	mov	r1, r3
 8014614:	4a20      	ldr	r2, [pc, #128]	@ (8014698 <RegionAS923SetContinuousWave+0x98>)
 8014616:	460b      	mov	r3, r1
 8014618:	005b      	lsls	r3, r3, #1
 801461a:	440b      	add	r3, r1
 801461c:	009b      	lsls	r3, r3, #2
 801461e:	4413      	add	r3, r2
 8014620:	3309      	adds	r3, #9
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	4a1c      	ldr	r2, [pc, #112]	@ (8014698 <RegionAS923SetContinuousWave+0x98>)
 8014626:	3306      	adds	r3, #6
 8014628:	015b      	lsls	r3, r3, #5
 801462a:	4413      	add	r3, r2
 801462c:	3302      	adds	r3, #2
 801462e:	f993 1000 	ldrsb.w	r1, [r3]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8014638:	4b18      	ldr	r3, [pc, #96]	@ (801469c <RegionAS923SetContinuousWave+0x9c>)
 801463a:	f7fe fdf5 	bl	8013228 <LimitTxPower>
 801463e:	4603      	mov	r3, r0
 8014640:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014642:	2300      	movs	r3, #0
 8014644:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	781b      	ldrb	r3, [r3, #0]
 801464a:	4619      	mov	r1, r3
 801464c:	4a12      	ldr	r2, [pc, #72]	@ (8014698 <RegionAS923SetContinuousWave+0x98>)
 801464e:	460b      	mov	r3, r1
 8014650:	005b      	lsls	r3, r3, #1
 8014652:	440b      	add	r3, r1
 8014654:	009b      	lsls	r3, r3, #2
 8014656:	4413      	add	r3, r2
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	edd3 7a01 	vldr	s15, [r3, #4]
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	ed93 7a02 	vldr	s14, [r3, #8]
 8014668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801466c:	eef0 0a47 	vmov.f32	s1, s14
 8014670:	eeb0 0a67 	vmov.f32	s0, s15
 8014674:	4618      	mov	r0, r3
 8014676:	f000 fc61 	bl	8014f3c <RegionCommonComputeTxPower>
 801467a:	4603      	mov	r3, r0
 801467c:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801467e:	4b08      	ldr	r3, [pc, #32]	@ (80146a0 <RegionAS923SetContinuousWave+0xa0>)
 8014680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014682:	687a      	ldr	r2, [r7, #4]
 8014684:	8992      	ldrh	r2, [r2, #12]
 8014686:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801468a:	68b8      	ldr	r0, [r7, #8]
 801468c:	4798      	blx	r3
}
 801468e:	bf00      	nop
 8014690:	3710      	adds	r7, #16
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	20001d60 	.word	0x20001d60
 801469c:	20001e40 	.word	0x20001e40
 80146a0:	0802113c 	.word	0x0802113c

080146a4 <RegionAS923ApplyDrOffset>:

uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80146a4:	b480      	push	{r7}
 80146a6:	b085      	sub	sp, #20
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	4603      	mov	r3, r0
 80146ac:	71fb      	strb	r3, [r7, #7]
 80146ae:	460b      	mov	r3, r1
 80146b0:	71bb      	strb	r3, [r7, #6]
 80146b2:	4613      	mov	r3, r2
 80146b4:	717b      	strb	r3, [r7, #5]
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;
 80146b6:	2300      	movs	r3, #0
 80146b8:	73fb      	strb	r3, [r7, #15]

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 80146ba:	79fb      	ldrb	r3, [r7, #7]
 80146bc:	2b01      	cmp	r3, #1
 80146be:	d101      	bne.n	80146c4 <RegionAS923ApplyDrOffset+0x20>
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
 80146c0:	2302      	movs	r3, #2
 80146c2:	73fb      	strb	r3, [r7, #15]
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 80146c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80146c8:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80146cc:	4908      	ldr	r1, [pc, #32]	@ (80146f0 <RegionAS923ApplyDrOffset+0x4c>)
 80146ce:	568a      	ldrsb	r2, [r1, r2]
 80146d0:	1a9a      	subs	r2, r3, r2
 80146d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146d6:	4293      	cmp	r3, r2
 80146d8:	bfb8      	it	lt
 80146da:	4613      	movlt	r3, r2
 80146dc:	2b05      	cmp	r3, #5
 80146de:	bfa8      	it	ge
 80146e0:	2305      	movge	r3, #5
 80146e2:	b2db      	uxtb	r3, r3
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	3714      	adds	r7, #20
 80146e8:	46bd      	mov	sp, r7
 80146ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ee:	4770      	bx	lr
 80146f0:	08021134 	.word	0x08021134

080146f4 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80146f4:	b480      	push	{r7}
 80146f6:	b085      	sub	sp, #20
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	4603      	mov	r3, r0
 80146fc:	460a      	mov	r2, r1
 80146fe:	80fb      	strh	r3, [r7, #6]
 8014700:	4613      	mov	r3, r2
 8014702:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014704:	2300      	movs	r3, #0
 8014706:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014708:	2300      	movs	r3, #0
 801470a:	73bb      	strb	r3, [r7, #14]
 801470c:	e011      	b.n	8014732 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801470e:	88fa      	ldrh	r2, [r7, #6]
 8014710:	7bbb      	ldrb	r3, [r7, #14]
 8014712:	2101      	movs	r1, #1
 8014714:	fa01 f303 	lsl.w	r3, r1, r3
 8014718:	401a      	ands	r2, r3
 801471a:	7bbb      	ldrb	r3, [r7, #14]
 801471c:	2101      	movs	r1, #1
 801471e:	fa01 f303 	lsl.w	r3, r1, r3
 8014722:	429a      	cmp	r2, r3
 8014724:	d102      	bne.n	801472c <CountChannels+0x38>
        {
            nbActiveBits++;
 8014726:	7bfb      	ldrb	r3, [r7, #15]
 8014728:	3301      	adds	r3, #1
 801472a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801472c:	7bbb      	ldrb	r3, [r7, #14]
 801472e:	3301      	adds	r3, #1
 8014730:	73bb      	strb	r3, [r7, #14]
 8014732:	7bba      	ldrb	r2, [r7, #14]
 8014734:	797b      	ldrb	r3, [r7, #5]
 8014736:	429a      	cmp	r2, r3
 8014738:	d3e9      	bcc.n	801470e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801473a:	7bfb      	ldrb	r3, [r7, #15]
}
 801473c:	4618      	mov	r0, r3
 801473e:	3714      	adds	r7, #20
 8014740:	46bd      	mov	sp, r7
 8014742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014746:	4770      	bx	lr

08014748 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 8014748:	b480      	push	{r7}
 801474a:	b085      	sub	sp, #20
 801474c:	af00      	add	r7, sp, #0
 801474e:	463b      	mov	r3, r7
 8014750:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t dutyCycle = 0;
 8014754:	2300      	movs	r3, #0
 8014756:	81fb      	strh	r3, [r7, #14]

    if( elapsedTime.Seconds < 3600 )
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801475e:	d202      	bcs.n	8014766 <RegionCommonGetJoinDc+0x1e>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8014760:	2364      	movs	r3, #100	@ 0x64
 8014762:	81fb      	strh	r3, [r7, #14]
 8014764:	e00b      	b.n	801477e <RegionCommonGetJoinDc+0x36>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 801476c:	4293      	cmp	r3, r2
 801476e:	d803      	bhi.n	8014778 <RegionCommonGetJoinDc+0x30>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8014770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014774:	81fb      	strh	r3, [r7, #14]
 8014776:	e002      	b.n	801477e <RegionCommonGetJoinDc+0x36>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8014778:	f242 7310 	movw	r3, #10000	@ 0x2710
 801477c:	81fb      	strh	r3, [r7, #14]
    }
    return dutyCycle;
 801477e:	89fb      	ldrh	r3, [r7, #14]
}
 8014780:	4618      	mov	r0, r3
 8014782:	3714      	adds	r7, #20
 8014784:	46bd      	mov	sp, r7
 8014786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478a:	4770      	bx	lr

0801478c <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b084      	sub	sp, #16
 8014790:	af00      	add	r7, sp, #0
 8014792:	6039      	str	r1, [r7, #0]
 8014794:	4611      	mov	r1, r2
 8014796:	461a      	mov	r2, r3
 8014798:	4603      	mov	r3, r0
 801479a:	71fb      	strb	r3, [r7, #7]
 801479c:	460b      	mov	r3, r1
 801479e:	71bb      	strb	r3, [r7, #6]
 80147a0:	4613      	mov	r3, r2
 80147a2:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80147a4:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80147a8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80147ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80147b0:	4618      	mov	r0, r3
 80147b2:	f000 f85d 	bl	8014870 <RegionCommonValueInRange>
 80147b6:	4603      	mov	r3, r0
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d101      	bne.n	80147c0 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80147bc:	2300      	movs	r3, #0
 80147be:	e053      	b.n	8014868 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80147c0:	2300      	movs	r3, #0
 80147c2:	73fb      	strb	r3, [r7, #15]
 80147c4:	2300      	movs	r3, #0
 80147c6:	73bb      	strb	r3, [r7, #14]
 80147c8:	e049      	b.n	801485e <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80147ca:	2300      	movs	r3, #0
 80147cc:	737b      	strb	r3, [r7, #13]
 80147ce:	e03d      	b.n	801484c <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80147d0:	7bbb      	ldrb	r3, [r7, #14]
 80147d2:	005b      	lsls	r3, r3, #1
 80147d4:	683a      	ldr	r2, [r7, #0]
 80147d6:	4413      	add	r3, r2
 80147d8:	881b      	ldrh	r3, [r3, #0]
 80147da:	461a      	mov	r2, r3
 80147dc:	7b7b      	ldrb	r3, [r7, #13]
 80147de:	fa42 f303 	asr.w	r3, r2, r3
 80147e2:	f003 0301 	and.w	r3, r3, #1
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d02d      	beq.n	8014846 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80147ea:	7bfa      	ldrb	r2, [r7, #15]
 80147ec:	7b7b      	ldrb	r3, [r7, #13]
 80147ee:	4413      	add	r3, r2
 80147f0:	461a      	mov	r2, r3
 80147f2:	4613      	mov	r3, r2
 80147f4:	005b      	lsls	r3, r3, #1
 80147f6:	4413      	add	r3, r2
 80147f8:	009b      	lsls	r3, r3, #2
 80147fa:	461a      	mov	r2, r3
 80147fc:	69fb      	ldr	r3, [r7, #28]
 80147fe:	4413      	add	r3, r2
 8014800:	7a1b      	ldrb	r3, [r3, #8]
 8014802:	f343 0303 	sbfx	r3, r3, #0, #4
 8014806:	b25b      	sxtb	r3, r3
 8014808:	f003 030f 	and.w	r3, r3, #15
 801480c:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801480e:	7bfa      	ldrb	r2, [r7, #15]
 8014810:	7b7b      	ldrb	r3, [r7, #13]
 8014812:	4413      	add	r3, r2
 8014814:	461a      	mov	r2, r3
 8014816:	4613      	mov	r3, r2
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	4413      	add	r3, r2
 801481c:	009b      	lsls	r3, r3, #2
 801481e:	461a      	mov	r2, r3
 8014820:	69fb      	ldr	r3, [r7, #28]
 8014822:	4413      	add	r3, r2
 8014824:	7a1b      	ldrb	r3, [r3, #8]
 8014826:	f343 1303 	sbfx	r3, r3, #4, #4
 801482a:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801482c:	f003 030f 	and.w	r3, r3, #15
 8014830:	b25a      	sxtb	r2, r3
 8014832:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014836:	4618      	mov	r0, r3
 8014838:	f000 f81a 	bl	8014870 <RegionCommonValueInRange>
 801483c:	4603      	mov	r3, r0
 801483e:	2b01      	cmp	r3, #1
 8014840:	d101      	bne.n	8014846 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014842:	2301      	movs	r3, #1
 8014844:	e010      	b.n	8014868 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014846:	7b7b      	ldrb	r3, [r7, #13]
 8014848:	3301      	adds	r3, #1
 801484a:	737b      	strb	r3, [r7, #13]
 801484c:	7b7b      	ldrb	r3, [r7, #13]
 801484e:	2b0f      	cmp	r3, #15
 8014850:	d9be      	bls.n	80147d0 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014852:	7bfb      	ldrb	r3, [r7, #15]
 8014854:	3310      	adds	r3, #16
 8014856:	73fb      	strb	r3, [r7, #15]
 8014858:	7bbb      	ldrb	r3, [r7, #14]
 801485a:	3301      	adds	r3, #1
 801485c:	73bb      	strb	r3, [r7, #14]
 801485e:	7bfa      	ldrb	r2, [r7, #15]
 8014860:	79fb      	ldrb	r3, [r7, #7]
 8014862:	429a      	cmp	r2, r3
 8014864:	d3b1      	bcc.n	80147ca <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014866:	2300      	movs	r3, #0
}
 8014868:	4618      	mov	r0, r3
 801486a:	3710      	adds	r7, #16
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}

08014870 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014870:	b480      	push	{r7}
 8014872:	b083      	sub	sp, #12
 8014874:	af00      	add	r7, sp, #0
 8014876:	4603      	mov	r3, r0
 8014878:	71fb      	strb	r3, [r7, #7]
 801487a:	460b      	mov	r3, r1
 801487c:	71bb      	strb	r3, [r7, #6]
 801487e:	4613      	mov	r3, r2
 8014880:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014882:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014886:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801488a:	429a      	cmp	r2, r3
 801488c:	db07      	blt.n	801489e <RegionCommonValueInRange+0x2e>
 801488e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014892:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014896:	429a      	cmp	r2, r3
 8014898:	dc01      	bgt.n	801489e <RegionCommonValueInRange+0x2e>
    {
        return 1;
 801489a:	2301      	movs	r3, #1
 801489c:	e000      	b.n	80148a0 <RegionCommonValueInRange+0x30>
    }
    return 0;
 801489e:	2300      	movs	r3, #0
}
 80148a0:	4618      	mov	r0, r3
 80148a2:	370c      	adds	r7, #12
 80148a4:	46bd      	mov	sp, r7
 80148a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148aa:	4770      	bx	lr

080148ac <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80148ac:	b480      	push	{r7}
 80148ae:	b085      	sub	sp, #20
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	460b      	mov	r3, r1
 80148b6:	70fb      	strb	r3, [r7, #3]
 80148b8:	4613      	mov	r3, r2
 80148ba:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80148bc:	78fb      	ldrb	r3, [r7, #3]
 80148be:	091b      	lsrs	r3, r3, #4
 80148c0:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80148c2:	78bb      	ldrb	r3, [r7, #2]
 80148c4:	091b      	lsrs	r3, r3, #4
 80148c6:	b2db      	uxtb	r3, r3
 80148c8:	7bfa      	ldrb	r2, [r7, #15]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d803      	bhi.n	80148d6 <RegionCommonChanDisable+0x2a>
 80148ce:	78fa      	ldrb	r2, [r7, #3]
 80148d0:	78bb      	ldrb	r3, [r7, #2]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d301      	bcc.n	80148da <RegionCommonChanDisable+0x2e>
    {
        return false;
 80148d6:	2300      	movs	r3, #0
 80148d8:	e017      	b.n	801490a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80148da:	7bfb      	ldrb	r3, [r7, #15]
 80148dc:	005b      	lsls	r3, r3, #1
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	4413      	add	r3, r2
 80148e2:	881b      	ldrh	r3, [r3, #0]
 80148e4:	b21a      	sxth	r2, r3
 80148e6:	78fb      	ldrb	r3, [r7, #3]
 80148e8:	f003 030f 	and.w	r3, r3, #15
 80148ec:	2101      	movs	r1, #1
 80148ee:	fa01 f303 	lsl.w	r3, r1, r3
 80148f2:	b21b      	sxth	r3, r3
 80148f4:	43db      	mvns	r3, r3
 80148f6:	b21b      	sxth	r3, r3
 80148f8:	4013      	ands	r3, r2
 80148fa:	b219      	sxth	r1, r3
 80148fc:	7bfb      	ldrb	r3, [r7, #15]
 80148fe:	005b      	lsls	r3, r3, #1
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	4413      	add	r3, r2
 8014904:	b28a      	uxth	r2, r1
 8014906:	801a      	strh	r2, [r3, #0]

    return true;
 8014908:	2301      	movs	r3, #1
}
 801490a:	4618      	mov	r0, r3
 801490c:	3714      	adds	r7, #20
 801490e:	46bd      	mov	sp, r7
 8014910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014914:	4770      	bx	lr

08014916 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014916:	b580      	push	{r7, lr}
 8014918:	b084      	sub	sp, #16
 801491a:	af00      	add	r7, sp, #0
 801491c:	6078      	str	r0, [r7, #4]
 801491e:	460b      	mov	r3, r1
 8014920:	70fb      	strb	r3, [r7, #3]
 8014922:	4613      	mov	r3, r2
 8014924:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014926:	2300      	movs	r3, #0
 8014928:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d101      	bne.n	8014934 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8014930:	2300      	movs	r3, #0
 8014932:	e018      	b.n	8014966 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014934:	78fb      	ldrb	r3, [r7, #3]
 8014936:	73bb      	strb	r3, [r7, #14]
 8014938:	e010      	b.n	801495c <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801493a:	7bbb      	ldrb	r3, [r7, #14]
 801493c:	005b      	lsls	r3, r3, #1
 801493e:	687a      	ldr	r2, [r7, #4]
 8014940:	4413      	add	r3, r2
 8014942:	881b      	ldrh	r3, [r3, #0]
 8014944:	2110      	movs	r1, #16
 8014946:	4618      	mov	r0, r3
 8014948:	f7ff fed4 	bl	80146f4 <CountChannels>
 801494c:	4603      	mov	r3, r0
 801494e:	461a      	mov	r2, r3
 8014950:	7bfb      	ldrb	r3, [r7, #15]
 8014952:	4413      	add	r3, r2
 8014954:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014956:	7bbb      	ldrb	r3, [r7, #14]
 8014958:	3301      	adds	r3, #1
 801495a:	73bb      	strb	r3, [r7, #14]
 801495c:	7bba      	ldrb	r2, [r7, #14]
 801495e:	78bb      	ldrb	r3, [r7, #2]
 8014960:	429a      	cmp	r2, r3
 8014962:	d3ea      	bcc.n	801493a <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8014964:	7bfb      	ldrb	r3, [r7, #15]
}
 8014966:	4618      	mov	r0, r3
 8014968:	3710      	adds	r7, #16
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}

0801496e <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801496e:	b480      	push	{r7}
 8014970:	b087      	sub	sp, #28
 8014972:	af00      	add	r7, sp, #0
 8014974:	60f8      	str	r0, [r7, #12]
 8014976:	60b9      	str	r1, [r7, #8]
 8014978:	4613      	mov	r3, r2
 801497a:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d016      	beq.n	80149b0 <RegionCommonChanMaskCopy+0x42>
 8014982:	68bb      	ldr	r3, [r7, #8]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d013      	beq.n	80149b0 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8014988:	2300      	movs	r3, #0
 801498a:	75fb      	strb	r3, [r7, #23]
 801498c:	e00c      	b.n	80149a8 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801498e:	7dfb      	ldrb	r3, [r7, #23]
 8014990:	005b      	lsls	r3, r3, #1
 8014992:	68ba      	ldr	r2, [r7, #8]
 8014994:	441a      	add	r2, r3
 8014996:	7dfb      	ldrb	r3, [r7, #23]
 8014998:	005b      	lsls	r3, r3, #1
 801499a:	68f9      	ldr	r1, [r7, #12]
 801499c:	440b      	add	r3, r1
 801499e:	8812      	ldrh	r2, [r2, #0]
 80149a0:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80149a2:	7dfb      	ldrb	r3, [r7, #23]
 80149a4:	3301      	adds	r3, #1
 80149a6:	75fb      	strb	r3, [r7, #23]
 80149a8:	7dfa      	ldrb	r2, [r7, #23]
 80149aa:	79fb      	ldrb	r3, [r7, #7]
 80149ac:	429a      	cmp	r2, r3
 80149ae:	d3ee      	bcc.n	801498e <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80149b0:	bf00      	nop
 80149b2:	371c      	adds	r7, #28
 80149b4:	46bd      	mov	sp, r7
 80149b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ba:	4770      	bx	lr

080149bc <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 80149bc:	b480      	push	{r7}
 80149be:	b085      	sub	sp, #20
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	60b9      	str	r1, [r7, #8]
 80149c4:	e9c7 2300 	strd	r2, r3, [r7]
 80149c8:	4603      	mov	r3, r0
 80149ca:	73fb      	strb	r3, [r7, #15]
    if( joined == true )
 80149cc:	7bfb      	ldrb	r3, [r7, #15]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d005      	beq.n	80149de <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 80149d2:	68b9      	ldr	r1, [r7, #8]
 80149d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80149d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 80149dc:	e009      	b.n	80149f2 <RegionCommonSetBandTxDone+0x36>
        band->LastTxDoneTime = lastTxDone;
 80149de:	68b9      	ldr	r1, [r7, #8]
 80149e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80149e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
        band->LastJoinTxDoneTime = lastTxDone;
 80149e8:	68b9      	ldr	r1, [r7, #8]
 80149ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80149ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80149f2:	bf00      	nop
 80149f4:	3714      	adds	r7, #20
 80149f6:	46bd      	mov	sp, r7
 80149f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fc:	4770      	bx	lr

080149fe <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 80149fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a02:	b08f      	sub	sp, #60	@ 0x3c
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	603a      	str	r2, [r7, #0]
 8014a08:	461a      	mov	r2, r3
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	71fb      	strb	r3, [r7, #7]
 8014a0e:	460b      	mov	r3, r1
 8014a10:	71bb      	strb	r3, [r7, #6]
 8014a12:	4613      	mov	r3, r2
 8014a14:	717b      	strb	r3, [r7, #5]
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 8014a16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014a1a:	f04f 0300 	mov.w	r3, #0
 8014a1e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 8014a22:	2300      	movs	r3, #0
 8014a24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014a28:	e0ca      	b.n	8014bc0 <RegionCommonUpdateBandTimeOff+0x1c2>
    {
        if( joined == false )
 8014a2a:	79fb      	ldrb	r3, [r7, #7]
 8014a2c:	f083 0301 	eor.w	r3, r3, #1
 8014a30:	b2db      	uxtb	r3, r3
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d065      	beq.n	8014b02 <RegionCommonUpdateBandTimeOff+0x104>
        {
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 8014a36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014a3a:	015b      	lsls	r3, r3, #5
 8014a3c:	683a      	ldr	r2, [r7, #0]
 8014a3e:	4413      	add	r3, r2
 8014a40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8014a44:	4610      	mov	r0, r2
 8014a46:	4619      	mov	r1, r3
 8014a48:	f003 f888 	bl	8017b5c <UTIL_TIMER_GetElapsedTime>
 8014a4c:	e9c7 0106 	strd	r0, r1, [r7, #24]
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 8014a50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014a54:	015b      	lsls	r3, r3, #5
 8014a56:	683a      	ldr	r2, [r7, #0]
 8014a58:	4413      	add	r3, r2
 8014a5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014a5e:	4610      	mov	r0, r2
 8014a60:	4619      	mov	r1, r3
 8014a62:	f003 f87b 	bl	8017b5c <UTIL_TIMER_GetElapsedTime>
 8014a66:	e9c7 0104 	strd	r0, r1, [r7, #16]
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 8014a6a:	79bb      	ldrb	r3, [r7, #6]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d002      	beq.n	8014a76 <RegionCommonUpdateBandTimeOff+0x78>
 8014a70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014a74:	e003      	b.n	8014a7e <RegionCommonUpdateBandTimeOff+0x80>
 8014a76:	f04f 0200 	mov.w	r2, #0
 8014a7a:	f04f 0300 	mov.w	r3, #0
 8014a7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014a82:	4282      	cmp	r2, r0
 8014a84:	eb73 0601 	sbcs.w	r6, r3, r1
 8014a88:	d201      	bcs.n	8014a8e <RegionCommonUpdateBandTimeOff+0x90>
 8014a8a:	4602      	mov	r2, r0
 8014a8c:	460b      	mov	r3, r1
 8014a8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
                                        ( dutyCycle == true ) ? elapsedTx : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 8014a92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014a96:	015b      	lsls	r3, r3, #5
 8014a98:	683a      	ldr	r2, [r7, #0]
 8014a9a:	4413      	add	r3, r2
 8014a9c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8014aa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014aa4:	4290      	cmp	r0, r2
 8014aa6:	eb71 0303 	sbcs.w	r3, r1, r3
 8014aaa:	d30a      	bcc.n	8014ac2 <RegionCommonUpdateBandTimeOff+0xc4>
            {
                bands[i].TimeOff = 0;
 8014aac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014ab0:	015b      	lsls	r3, r3, #5
 8014ab2:	683a      	ldr	r2, [r7, #0]
 8014ab4:	18d1      	adds	r1, r2, r3
 8014ab6:	f04f 0200 	mov.w	r2, #0
 8014aba:	f04f 0300 	mov.w	r3, #0
 8014abe:	e9c1 2306 	strd	r2, r3, [r1, #24]
            }
            if( bands[i].TimeOff != 0 )
 8014ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014ac6:	015b      	lsls	r3, r3, #5
 8014ac8:	683a      	ldr	r2, [r7, #0]
 8014aca:	4413      	add	r3, r2
 8014acc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8014ad0:	4313      	orrs	r3, r2
 8014ad2:	d070      	beq.n	8014bb6 <RegionCommonUpdateBandTimeOff+0x1b8>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 8014ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014ad8:	015b      	lsls	r3, r3, #5
 8014ada:	683a      	ldr	r2, [r7, #0]
 8014adc:	4413      	add	r3, r2
 8014ade:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8014ae2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014ae6:	1a84      	subs	r4, r0, r2
 8014ae8:	eb61 0503 	sbc.w	r5, r1, r3
 8014aec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8014af0:	4294      	cmp	r4, r2
 8014af2:	eb75 0103 	sbcs.w	r1, r5, r3
 8014af6:	d201      	bcs.n	8014afc <RegionCommonUpdateBandTimeOff+0xfe>
 8014af8:	4622      	mov	r2, r4
 8014afa:	462b      	mov	r3, r5
 8014afc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8014b00:	e059      	b.n	8014bb6 <RegionCommonUpdateBandTimeOff+0x1b8>
            }
        }
        else
        {
            if( dutyCycle == true )
 8014b02:	79bb      	ldrb	r3, [r7, #6]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d045      	beq.n	8014b94 <RegionCommonUpdateBandTimeOff+0x196>
            {
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 8014b08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014b0c:	015b      	lsls	r3, r3, #5
 8014b0e:	683a      	ldr	r2, [r7, #0]
 8014b10:	4413      	add	r3, r2
 8014b12:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014b16:	4610      	mov	r0, r2
 8014b18:	4619      	mov	r1, r3
 8014b1a:	f003 f81f 	bl	8017b5c <UTIL_TIMER_GetElapsedTime>
 8014b1e:	e9c7 0108 	strd	r0, r1, [r7, #32]
                if( bands[i].TimeOff <= elapsed )
 8014b22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014b26:	015b      	lsls	r3, r3, #5
 8014b28:	683a      	ldr	r2, [r7, #0]
 8014b2a:	4413      	add	r3, r2
 8014b2c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8014b30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8014b34:	4290      	cmp	r0, r2
 8014b36:	eb71 0303 	sbcs.w	r3, r1, r3
 8014b3a:	d30a      	bcc.n	8014b52 <RegionCommonUpdateBandTimeOff+0x154>
                {
                    bands[i].TimeOff = 0;
 8014b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014b40:	015b      	lsls	r3, r3, #5
 8014b42:	683a      	ldr	r2, [r7, #0]
 8014b44:	18d1      	adds	r1, r2, r3
 8014b46:	f04f 0200 	mov.w	r2, #0
 8014b4a:	f04f 0300 	mov.w	r3, #0
 8014b4e:	e9c1 2306 	strd	r2, r3, [r1, #24]
                }
                if( bands[i].TimeOff != 0 )
 8014b52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014b56:	015b      	lsls	r3, r3, #5
 8014b58:	683a      	ldr	r2, [r7, #0]
 8014b5a:	4413      	add	r3, r2
 8014b5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8014b60:	4313      	orrs	r3, r2
 8014b62:	d028      	beq.n	8014bb6 <RegionCommonUpdateBandTimeOff+0x1b8>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 8014b64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014b68:	015b      	lsls	r3, r3, #5
 8014b6a:	683a      	ldr	r2, [r7, #0]
 8014b6c:	4413      	add	r3, r2
 8014b6e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8014b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014b76:	ebb0 0802 	subs.w	r8, r0, r2
 8014b7a:	eb61 0903 	sbc.w	r9, r1, r3
 8014b7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8014b82:	4590      	cmp	r8, r2
 8014b84:	eb79 0103 	sbcs.w	r1, r9, r3
 8014b88:	d201      	bcs.n	8014b8e <RegionCommonUpdateBandTimeOff+0x190>
 8014b8a:	4642      	mov	r2, r8
 8014b8c:	464b      	mov	r3, r9
 8014b8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8014b92:	e010      	b.n	8014bb6 <RegionCommonUpdateBandTimeOff+0x1b8>
                }
            }
            else
            {
                nextTxDelay = 0;
 8014b94:	f04f 0200 	mov.w	r2, #0
 8014b98:	f04f 0300 	mov.w	r3, #0
 8014b9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
                bands[i].TimeOff = 0;
 8014ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014ba4:	015b      	lsls	r3, r3, #5
 8014ba6:	683a      	ldr	r2, [r7, #0]
 8014ba8:	18d1      	adds	r1, r2, r3
 8014baa:	f04f 0200 	mov.w	r2, #0
 8014bae:	f04f 0300 	mov.w	r3, #0
 8014bb2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    for( uint8_t i = 0; i < nbBands; i++ )
 8014bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014bba:	3301      	adds	r3, #1
 8014bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014bc0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8014bc4:	797b      	ldrb	r3, [r7, #5]
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	f4ff af2f 	bcc.w	8014a2a <RegionCommonUpdateBandTimeOff+0x2c>
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 8014bcc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8014bd0:	1c51      	adds	r1, r2, #1
 8014bd2:	430b      	orrs	r3, r1
 8014bd4:	d002      	beq.n	8014bdc <RegionCommonUpdateBandTimeOff+0x1de>
 8014bd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8014bda:	e003      	b.n	8014be4 <RegionCommonUpdateBandTimeOff+0x1e6>
 8014bdc:	f04f 0200 	mov.w	r2, #0
 8014be0:	f04f 0300 	mov.w	r3, #0
}
 8014be4:	4610      	mov	r0, r2
 8014be6:	4619      	mov	r1, r3
 8014be8:	373c      	adds	r7, #60	@ 0x3c
 8014bea:	46bd      	mov	sp, r7
 8014bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014bf0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014bf0:	b480      	push	{r7}
 8014bf2:	b085      	sub	sp, #20
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	2b03      	cmp	r3, #3
 8014c04:	d13f      	bne.n	8014c86 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	b25a      	sxtb	r2, r3
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014c18:	f003 030f 	and.w	r3, r3, #15
 8014c1c:	b25a      	sxtb	r2, r3
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014c28:	b2db      	uxtb	r3, r3
 8014c2a:	091b      	lsrs	r3, r3, #4
 8014c2c:	b2db      	uxtb	r3, r3
 8014c2e:	b25a      	sxtb	r2, r3
 8014c30:	683b      	ldr	r3, [r7, #0]
 8014c32:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	3302      	adds	r3, #2
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	683b      	ldr	r3, [r7, #0]
 8014c3e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	889b      	ldrh	r3, [r3, #4]
 8014c44:	b21a      	sxth	r2, r3
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	3303      	adds	r3, #3
 8014c4a:	781b      	ldrb	r3, [r3, #0]
 8014c4c:	021b      	lsls	r3, r3, #8
 8014c4e:	b21b      	sxth	r3, r3
 8014c50:	4313      	orrs	r3, r2
 8014c52:	b21b      	sxth	r3, r3
 8014c54:	b29a      	uxth	r2, r3
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	791a      	ldrb	r2, [r3, #4]
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	781b      	ldrb	r3, [r3, #0]
 8014c66:	091b      	lsrs	r3, r3, #4
 8014c68:	b2db      	uxtb	r3, r3
 8014c6a:	f003 0307 	and.w	r3, r3, #7
 8014c6e:	b2da      	uxtb	r2, r3
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	f003 030f 	and.w	r3, r3, #15
 8014c7c:	b2da      	uxtb	r2, r3
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8014c82:	2305      	movs	r3, #5
 8014c84:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8014c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c88:	4618      	mov	r0, r3
 8014c8a:	3714      	adds	r7, #20
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c92:	4770      	bx	lr

08014c94 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8014c94:	b5b0      	push	{r4, r5, r7, lr}
 8014c96:	b088      	sub	sp, #32
 8014c98:	af02      	add	r7, sp, #8
 8014c9a:	60f8      	str	r0, [r7, #12]
 8014c9c:	60b9      	str	r1, [r7, #8]
 8014c9e:	607a      	str	r2, [r7, #4]
 8014ca0:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	791b      	ldrb	r3, [r3, #4]
 8014ca6:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	799b      	ldrb	r3, [r3, #6]
 8014cac:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	79db      	ldrb	r3, [r3, #7]
 8014cb2:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	7a1b      	ldrb	r3, [r3, #8]
 8014cb8:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	795b      	ldrb	r3, [r3, #5]
 8014cbe:	f083 0301 	eor.w	r3, r3, #1
 8014cc2:	b2db      	uxtb	r3, r3
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d008      	beq.n	8014cda <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	7adb      	ldrb	r3, [r3, #11]
 8014ccc:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	7a5b      	ldrb	r3, [r3, #9]
 8014cd2:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	7a9b      	ldrb	r3, [r3, #10]
 8014cd8:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014cda:	7dfb      	ldrb	r3, [r7, #23]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d03a      	beq.n	8014d56 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	7b18      	ldrb	r0, [r3, #12]
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	6919      	ldr	r1, [r3, #16]
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014cf4:	68fa      	ldr	r2, [r7, #12]
 8014cf6:	6992      	ldr	r2, [r2, #24]
 8014cf8:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8014cfc:	9201      	str	r2, [sp, #4]
 8014cfe:	9300      	str	r3, [sp, #0]
 8014d00:	462b      	mov	r3, r5
 8014d02:	4622      	mov	r2, r4
 8014d04:	f7ff fd42 	bl	801478c <RegionCommonChanVerifyDr>
 8014d08:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014d0a:	f083 0301 	eor.w	r3, r3, #1
 8014d0e:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d003      	beq.n	8014d1c <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8014d14:	7dfb      	ldrb	r3, [r7, #23]
 8014d16:	f023 0302 	bic.w	r3, r3, #2
 8014d1a:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8014d28:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7ff fd9f 	bl	8014870 <RegionCommonValueInRange>
 8014d32:	4603      	mov	r3, r0
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d10e      	bne.n	8014d56 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014d3e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014d42:	429a      	cmp	r2, r3
 8014d44:	da03      	bge.n	8014d4e <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	7f5b      	ldrb	r3, [r3, #29]
 8014d4a:	757b      	strb	r3, [r7, #21]
 8014d4c:	e003      	b.n	8014d56 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014d4e:	7dfb      	ldrb	r3, [r7, #23]
 8014d50:	f023 0304 	bic.w	r3, r3, #4
 8014d54:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8014d56:	7dfb      	ldrb	r3, [r7, #23]
 8014d58:	2b07      	cmp	r3, #7
 8014d5a:	d105      	bne.n	8014d68 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8014d5c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d101      	bne.n	8014d68 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8014d64:	2301      	movs	r3, #1
 8014d66:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	7dba      	ldrb	r2, [r7, #22]
 8014d6c:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	7d7a      	ldrb	r2, [r7, #21]
 8014d72:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8014d74:	7d3a      	ldrb	r2, [r7, #20]
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	701a      	strb	r2, [r3, #0]

    return status;
 8014d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3718      	adds	r7, #24
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bdb0      	pop	{r4, r5, r7, pc}

08014d84 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8014d84:	b5b0      	push	{r4, r5, r7, lr}
 8014d86:	b082      	sub	sp, #8
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	6039      	str	r1, [r7, #0]
 8014d8e:	71fb      	strb	r3, [r7, #7]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 8014d90:	79fb      	ldrb	r3, [r7, #7]
 8014d92:	2201      	movs	r2, #1
 8014d94:	fa02 f303 	lsl.w	r3, r2, r3
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7eb fbd3 	bl	8000544 <__aeabi_i2d>
 8014d9e:	4604      	mov	r4, r0
 8014da0:	460d      	mov	r5, r1
 8014da2:	6838      	ldr	r0, [r7, #0]
 8014da4:	f7eb fbbe 	bl	8000524 <__aeabi_ui2d>
 8014da8:	4602      	mov	r2, r0
 8014daa:	460b      	mov	r3, r1
 8014dac:	4620      	mov	r0, r4
 8014dae:	4629      	mov	r1, r5
 8014db0:	f7eb fd5c 	bl	800086c <__aeabi_ddiv>
 8014db4:	4602      	mov	r2, r0
 8014db6:	460b      	mov	r3, r1
 8014db8:	4610      	mov	r0, r2
 8014dba:	4619      	mov	r1, r3
 8014dbc:	f04f 0200 	mov.w	r2, #0
 8014dc0:	4b06      	ldr	r3, [pc, #24]	@ (8014ddc <RegionCommonComputeSymbolTimeLoRa+0x58>)
 8014dc2:	f7eb fc29 	bl	8000618 <__aeabi_dmul>
 8014dc6:	4602      	mov	r2, r0
 8014dc8:	460b      	mov	r3, r1
 8014dca:	ec43 2b17 	vmov	d7, r2, r3
}
 8014dce:	eeb0 0a47 	vmov.f32	s0, s14
 8014dd2:	eef0 0a67 	vmov.f32	s1, s15
 8014dd6:	3708      	adds	r7, #8
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bdb0      	pop	{r4, r5, r7, pc}
 8014ddc:	408f4000 	.word	0x408f4000

08014de0 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	4603      	mov	r3, r0
 8014de8:	71fb      	strb	r3, [r7, #7]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 8014dea:	79fb      	ldrb	r3, [r7, #7]
 8014dec:	4618      	mov	r0, r3
 8014dee:	f7eb fb99 	bl	8000524 <__aeabi_ui2d>
 8014df2:	4602      	mov	r2, r0
 8014df4:	460b      	mov	r3, r1
 8014df6:	f04f 0000 	mov.w	r0, #0
 8014dfa:	4907      	ldr	r1, [pc, #28]	@ (8014e18 <RegionCommonComputeSymbolTimeFsk+0x38>)
 8014dfc:	f7eb fd36 	bl	800086c <__aeabi_ddiv>
 8014e00:	4602      	mov	r2, r0
 8014e02:	460b      	mov	r3, r1
 8014e04:	ec43 2b17 	vmov	d7, r2, r3
}
 8014e08:	eeb0 0a47 	vmov.f32	s0, s14
 8014e0c:	eef0 0a67 	vmov.f32	s1, s15
 8014e10:	3708      	adds	r7, #8
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}
 8014e16:	bf00      	nop
 8014e18:	40200000 	.word	0x40200000

08014e1c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8014e1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014e20:	b086      	sub	sp, #24
 8014e22:	af00      	add	r7, sp, #0
 8014e24:	ed87 0b04 	vstr	d0, [r7, #16]
 8014e28:	60b9      	str	r1, [r7, #8]
 8014e2a:	607a      	str	r2, [r7, #4]
 8014e2c:	603b      	str	r3, [r7, #0]
 8014e2e:	4603      	mov	r3, r0
 8014e30:	73fb      	strb	r3, [r7, #15]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 8014e32:	7bfc      	ldrb	r4, [r7, #15]
 8014e34:	7bfb      	ldrb	r3, [r7, #15]
 8014e36:	3b04      	subs	r3, #4
 8014e38:	005b      	lsls	r3, r3, #1
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7eb fb82 	bl	8000544 <__aeabi_i2d>
 8014e40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014e44:	f7eb fbe8 	bl	8000618 <__aeabi_dmul>
 8014e48:	4602      	mov	r2, r0
 8014e4a:	460b      	mov	r3, r1
 8014e4c:	4690      	mov	r8, r2
 8014e4e:	4699      	mov	r9, r3
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	005b      	lsls	r3, r3, #1
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7eb fb65 	bl	8000524 <__aeabi_ui2d>
 8014e5a:	4602      	mov	r2, r0
 8014e5c:	460b      	mov	r3, r1
 8014e5e:	4640      	mov	r0, r8
 8014e60:	4649      	mov	r1, r9
 8014e62:	f7eb fa23 	bl	80002ac <__adddf3>
 8014e66:	4602      	mov	r2, r0
 8014e68:	460b      	mov	r3, r1
 8014e6a:	4610      	mov	r0, r2
 8014e6c:	4619      	mov	r1, r3
 8014e6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014e72:	f7eb fcfb 	bl	800086c <__aeabi_ddiv>
 8014e76:	4602      	mov	r2, r0
 8014e78:	460b      	mov	r3, r1
 8014e7a:	ec43 2b17 	vmov	d7, r2, r3
 8014e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8014e82:	eef0 0a67 	vmov.f32	s1, s15
 8014e86:	f00b fbe7 	bl	8020658 <ceil>
 8014e8a:	ec53 2b10 	vmov	r2, r3, d0
 8014e8e:	4610      	mov	r0, r2
 8014e90:	4619      	mov	r1, r3
 8014e92:	f7eb fe99 	bl	8000bc8 <__aeabi_d2uiz>
 8014e96:	4603      	mov	r3, r0
 8014e98:	4622      	mov	r2, r4
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	bf38      	it	cc
 8014e9e:	461a      	movcc	r2, r3
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	601a      	str	r2, [r3, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 8014ea4:	f04f 0200 	mov.w	r2, #0
 8014ea8:	4b23      	ldr	r3, [pc, #140]	@ (8014f38 <RegionCommonComputeRxWindowParameters+0x11c>)
 8014eaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014eae:	f7eb fbb3 	bl	8000618 <__aeabi_dmul>
 8014eb2:	4602      	mov	r2, r0
 8014eb4:	460b      	mov	r3, r1
 8014eb6:	4614      	mov	r4, r2
 8014eb8:	461d      	mov	r5, r3
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7eb fb30 	bl	8000524 <__aeabi_ui2d>
 8014ec4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014ec8:	f7eb fba6 	bl	8000618 <__aeabi_dmul>
 8014ecc:	4602      	mov	r2, r0
 8014ece:	460b      	mov	r3, r1
 8014ed0:	4610      	mov	r0, r2
 8014ed2:	4619      	mov	r1, r3
 8014ed4:	f04f 0200 	mov.w	r2, #0
 8014ed8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014edc:	f7eb fcc6 	bl	800086c <__aeabi_ddiv>
 8014ee0:	4602      	mov	r2, r0
 8014ee2:	460b      	mov	r3, r1
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	4629      	mov	r1, r5
 8014ee8:	f7eb f9de 	bl	80002a8 <__aeabi_dsub>
 8014eec:	4602      	mov	r2, r0
 8014eee:	460b      	mov	r3, r1
 8014ef0:	4614      	mov	r4, r2
 8014ef2:	461d      	mov	r5, r3
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f7eb fb15 	bl	8000524 <__aeabi_ui2d>
 8014efa:	4602      	mov	r2, r0
 8014efc:	460b      	mov	r3, r1
 8014efe:	4620      	mov	r0, r4
 8014f00:	4629      	mov	r1, r5
 8014f02:	f7eb f9d1 	bl	80002a8 <__aeabi_dsub>
 8014f06:	4602      	mov	r2, r0
 8014f08:	460b      	mov	r3, r1
 8014f0a:	ec43 2b17 	vmov	d7, r2, r3
 8014f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8014f12:	eef0 0a67 	vmov.f32	s1, s15
 8014f16:	f00b fb9f 	bl	8020658 <ceil>
 8014f1a:	ec53 2b10 	vmov	r2, r3, d0
 8014f1e:	4610      	mov	r0, r2
 8014f20:	4619      	mov	r1, r3
 8014f22:	f7eb fe29 	bl	8000b78 <__aeabi_d2iz>
 8014f26:	4602      	mov	r2, r0
 8014f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f2a:	601a      	str	r2, [r3, #0]
}
 8014f2c:	bf00      	nop
 8014f2e:	3718      	adds	r7, #24
 8014f30:	46bd      	mov	sp, r7
 8014f32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014f36:	bf00      	nop
 8014f38:	40100000 	.word	0x40100000

08014f3c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b086      	sub	sp, #24
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	4603      	mov	r3, r0
 8014f44:	ed87 0a02 	vstr	s0, [r7, #8]
 8014f48:	edc7 0a01 	vstr	s1, [r7, #4]
 8014f4c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f56:	005b      	lsls	r3, r3, #1
 8014f58:	ee07 3a90 	vmov	s15, r3
 8014f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f60:	ed97 7a02 	vldr	s14, [r7, #8]
 8014f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014f68:	edd7 7a01 	vldr	s15, [r7, #4]
 8014f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f70:	ee17 0a90 	vmov	r0, s15
 8014f74:	f7eb faf8 	bl	8000568 <__aeabi_f2d>
 8014f78:	4602      	mov	r2, r0
 8014f7a:	460b      	mov	r3, r1
 8014f7c:	ec43 2b10 	vmov	d0, r2, r3
 8014f80:	f00b fbe6 	bl	8020750 <floor>
 8014f84:	ec53 2b10 	vmov	r2, r3, d0
 8014f88:	4610      	mov	r0, r2
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	f7eb fdf4 	bl	8000b78 <__aeabi_d2iz>
 8014f90:	4603      	mov	r3, r0
 8014f92:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	3718      	adds	r7, #24
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}

08014fa0 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 8014fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa4:	b08b      	sub	sp, #44	@ 0x2c
 8014fa6:	af00      	add	r7, sp, #0
 8014fa8:	61f8      	str	r0, [r7, #28]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8014faa:	69fb      	ldr	r3, [r7, #28]
 8014fac:	6819      	ldr	r1, [r3, #0]
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	7adb      	ldrb	r3, [r3, #11]
 8014fb2:	461a      	mov	r2, r3
 8014fb4:	4613      	mov	r3, r2
 8014fb6:	005b      	lsls	r3, r3, #1
 8014fb8:	4413      	add	r3, r2
 8014fba:	009b      	lsls	r3, r3, #2
 8014fbc:	440b      	add	r3, r1
 8014fbe:	7a5b      	ldrb	r3, [r3, #9]
 8014fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	685a      	ldr	r2, [r3, #4]
 8014fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014fcc:	015b      	lsls	r3, r3, #5
 8014fce:	4413      	add	r3, r2
 8014fd0:	881b      	ldrh	r3, [r3, #0]
 8014fd2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t joinDutyCycle = 0;
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	847b      	strh	r3, [r7, #34]	@ 0x22

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8014fd8:	69fb      	ldr	r3, [r7, #28]
 8014fda:	685a      	ldr	r2, [r3, #4]
 8014fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014fe0:	015b      	lsls	r3, r3, #5
 8014fe2:	18d1      	adds	r1, r2, r3
 8014fe4:	f04f 0200 	mov.w	r2, #0
 8014fe8:	f04f 0300 	mov.w	r3, #0
 8014fec:	e9c1 2306 	strd	r2, r3, [r1, #24]

    if( calcBackOffParams->Joined == false )
 8014ff0:	69fb      	ldr	r3, [r7, #28]
 8014ff2:	7a5b      	ldrb	r3, [r3, #9]
 8014ff4:	f083 0301 	eor.w	r3, r3, #1
 8014ff8:	b2db      	uxtb	r3, r3
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d04f      	beq.n	801509e <RegionCommonCalcBackOff+0xfe>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 8014ffe:	69fb      	ldr	r3, [r7, #28]
 8015000:	330c      	adds	r3, #12
 8015002:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015006:	f7ff fb9f 	bl	8014748 <RegionCommonGetJoinDc>
 801500a:	4603      	mov	r3, r0
 801500c:	847b      	strh	r3, [r7, #34]	@ 0x22
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801500e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015010:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015012:	4293      	cmp	r3, r2
 8015014:	bf38      	it	cc
 8015016:	4613      	movcc	r3, r2
 8015018:	84bb      	strh	r3, [r7, #36]	@ 0x24
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 801501a:	69fb      	ldr	r3, [r7, #28]
 801501c:	7a9b      	ldrb	r3, [r3, #10]
 801501e:	f083 0301 	eor.w	r3, r3, #1
 8015022:	b2db      	uxtb	r3, r3
 8015024:	2b00      	cmp	r3, #0
 8015026:	d013      	beq.n	8015050 <RegionCommonCalcBackOff+0xb0>
 8015028:	69fb      	ldr	r3, [r7, #28]
 801502a:	7a1b      	ldrb	r3, [r3, #8]
 801502c:	f083 0301 	eor.w	r3, r3, #1
 8015030:	b2db      	uxtb	r3, r3
 8015032:	2b00      	cmp	r3, #0
 8015034:	d00c      	beq.n	8015050 <RegionCommonCalcBackOff+0xb0>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8015036:	69fb      	ldr	r3, [r7, #28]
 8015038:	685a      	ldr	r2, [r3, #4]
 801503a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801503e:	015b      	lsls	r3, r3, #5
 8015040:	18d1      	adds	r1, r2, r3
 8015042:	f04f 0200 	mov.w	r2, #0
 8015046:	f04f 0300 	mov.w	r3, #0
 801504a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 801504e:	e057      	b.n	8015100 <RegionCommonCalcBackOff+0x160>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8015050:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015052:	2200      	movs	r2, #0
 8015054:	60bb      	str	r3, [r7, #8]
 8015056:	60fa      	str	r2, [r7, #12]
 8015058:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801505c:	460b      	mov	r3, r1
 801505e:	f113 3aff 	adds.w	sl, r3, #4294967295	@ 0xffffffff
 8015062:	4613      	mov	r3, r2
 8015064:	f143 3bff 	adc.w	fp, r3, #4294967295	@ 0xffffffff
 8015068:	69fb      	ldr	r3, [r7, #28]
 801506a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801506e:	69f9      	ldr	r1, [r7, #28]
 8015070:	6848      	ldr	r0, [r1, #4]
 8015072:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8015076:	0149      	lsls	r1, r1, #5
 8015078:	4401      	add	r1, r0
 801507a:	fb02 f40b 	mul.w	r4, r2, fp
 801507e:	fb0a f003 	mul.w	r0, sl, r3
 8015082:	4420      	add	r0, r4
 8015084:	fbaa 2302 	umull	r2, r3, sl, r2
 8015088:	617b      	str	r3, [r7, #20]
 801508a:	4613      	mov	r3, r2
 801508c:	613b      	str	r3, [r7, #16]
 801508e:	697b      	ldr	r3, [r7, #20]
 8015090:	18c3      	adds	r3, r0, r3
 8015092:	617b      	str	r3, [r7, #20]
 8015094:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015098:	e9c1 3406 	strd	r3, r4, [r1, #24]
}
 801509c:	e030      	b.n	8015100 <RegionCommonCalcBackOff+0x160>
        if( calcBackOffParams->DutyCycleEnabled == true )
 801509e:	69fb      	ldr	r3, [r7, #28]
 80150a0:	7a9b      	ldrb	r3, [r3, #10]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d020      	beq.n	80150e8 <RegionCommonCalcBackOff+0x148>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 80150a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80150a8:	2200      	movs	r2, #0
 80150aa:	603b      	str	r3, [r7, #0]
 80150ac:	607a      	str	r2, [r7, #4]
 80150ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80150b2:	460b      	mov	r3, r1
 80150b4:	f113 38ff 	adds.w	r8, r3, #4294967295	@ 0xffffffff
 80150b8:	4613      	mov	r3, r2
 80150ba:	f143 39ff 	adc.w	r9, r3, #4294967295	@ 0xffffffff
 80150be:	69fb      	ldr	r3, [r7, #28]
 80150c0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80150c4:	69f9      	ldr	r1, [r7, #28]
 80150c6:	6848      	ldr	r0, [r1, #4]
 80150c8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80150cc:	0149      	lsls	r1, r1, #5
 80150ce:	4401      	add	r1, r0
 80150d0:	fb02 f409 	mul.w	r4, r2, r9
 80150d4:	fb08 f003 	mul.w	r0, r8, r3
 80150d8:	4420      	add	r0, r4
 80150da:	fba8 5602 	umull	r5, r6, r8, r2
 80150de:	1983      	adds	r3, r0, r6
 80150e0:	461e      	mov	r6, r3
 80150e2:	e9c1 5606 	strd	r5, r6, [r1, #24]
}
 80150e6:	e00b      	b.n	8015100 <RegionCommonCalcBackOff+0x160>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 80150e8:	69fb      	ldr	r3, [r7, #28]
 80150ea:	685a      	ldr	r2, [r3, #4]
 80150ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80150f0:	015b      	lsls	r3, r3, #5
 80150f2:	18d1      	adds	r1, r2, r3
 80150f4:	f04f 0200 	mov.w	r2, #0
 80150f8:	f04f 0300 	mov.w	r3, #0
 80150fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8015100:	bf00      	nop
 8015102:	372c      	adds	r7, #44	@ 0x2c
 8015104:	46bd      	mov	sp, r7
 8015106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801510c <RadioGetFskBandwidthRegValue>:
 * Returns the known FSK bandwidth registers value
 *
 * @param  bandwidth Bandwidth value in Hz
 * @retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue(uint32_t bandwidth) {
 801510c:	b480      	push	{r7}
 801510e:	b085      	sub	sp, #20
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
	uint8_t i;

	if (bandwidth == 0) {
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d101      	bne.n	801511e <RadioGetFskBandwidthRegValue+0x12>
		return (0x1F);
 801511a:	231f      	movs	r3, #31
 801511c:	e01f      	b.n	801515e <RadioGetFskBandwidthRegValue+0x52>
	}

	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++) {
 801511e:	2300      	movs	r3, #0
 8015120:	73fb      	strb	r3, [r7, #15]
 8015122:	e018      	b.n	8015156 <RadioGetFskBandwidthRegValue+0x4a>
		if ((bandwidth >= FskBandwidths[i].bandwidth)
 8015124:	7bfb      	ldrb	r3, [r7, #15]
 8015126:	4a11      	ldr	r2, [pc, #68]	@ (801516c <RadioGetFskBandwidthRegValue+0x60>)
 8015128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801512c:	687a      	ldr	r2, [r7, #4]
 801512e:	429a      	cmp	r2, r3
 8015130:	d30e      	bcc.n	8015150 <RadioGetFskBandwidthRegValue+0x44>
				&& (bandwidth < FskBandwidths[i + 1].bandwidth)) {
 8015132:	7bfb      	ldrb	r3, [r7, #15]
 8015134:	3301      	adds	r3, #1
 8015136:	4a0d      	ldr	r2, [pc, #52]	@ (801516c <RadioGetFskBandwidthRegValue+0x60>)
 8015138:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801513c:	687a      	ldr	r2, [r7, #4]
 801513e:	429a      	cmp	r2, r3
 8015140:	d206      	bcs.n	8015150 <RadioGetFskBandwidthRegValue+0x44>
			return FskBandwidths[i + 1].RegValue;
 8015142:	7bfb      	ldrb	r3, [r7, #15]
 8015144:	3301      	adds	r3, #1
 8015146:	4a09      	ldr	r2, [pc, #36]	@ (801516c <RadioGetFskBandwidthRegValue+0x60>)
 8015148:	00db      	lsls	r3, r3, #3
 801514a:	4413      	add	r3, r2
 801514c:	791b      	ldrb	r3, [r3, #4]
 801514e:	e006      	b.n	801515e <RadioGetFskBandwidthRegValue+0x52>
	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++) {
 8015150:	7bfb      	ldrb	r3, [r7, #15]
 8015152:	3301      	adds	r3, #1
 8015154:	73fb      	strb	r3, [r7, #15]
 8015156:	7bfb      	ldrb	r3, [r7, #15]
 8015158:	2b14      	cmp	r3, #20
 801515a:	d9e3      	bls.n	8015124 <RadioGetFskBandwidthRegValue+0x18>
		}
	}
	// In case value not found, return bandwidth 0
	return (0x1F);
 801515c:	231f      	movs	r3, #31
	// ERROR: Value not found
	// while (1)
	// 	;
}
 801515e:	4618      	mov	r0, r3
 8015160:	3714      	adds	r7, #20
 8015162:	46bd      	mov	sp, r7
 8015164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015168:	4770      	bx	lr
 801516a:	bf00      	nop
 801516c:	080211b8 	.word	0x080211b8

08015170 <RadioInit>:

void RadioInit(RadioEvents_t *events) {
 8015170:	b580      	push	{r7, lr}
 8015172:	b086      	sub	sp, #24
 8015174:	af04      	add	r7, sp, #16
 8015176:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 8015178:	4a1d      	ldr	r2, [pc, #116]	@ (80151f0 <RadioInit+0x80>)
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	6013      	str	r3, [r2, #0]
	SX126xInit();
 801517e:	f001 f9eb 	bl	8016558 <SX126xInit>
	SX126xSetStandby(STDBY_RC);
 8015182:	2000      	movs	r0, #0
 8015184:	f001 fb24 	bl	80167d0 <SX126xSetStandby>
	SX126xSetRegulatorMode(USE_LDO);
 8015188:	2000      	movs	r0, #0
 801518a:	f001 fbf9 	bl	8016980 <SX126xSetRegulatorMode>

	SX126xSetBufferBaseAddress(0x00, 0x00);
 801518e:	2100      	movs	r1, #0
 8015190:	2000      	movs	r0, #0
 8015192:	f001 fef5 	bl	8016f80 <SX126xSetBufferBaseAddress>
	SX126xSetTxParams(0, RADIO_RAMP_200_US);
 8015196:	2104      	movs	r1, #4
 8015198:	2000      	movs	r0, #0
 801519a:	f001 fd2f 	bl	8016bfc <SX126xSetTxParams>
	SX126xSetDioIrqParams(IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE,
 801519e:	2300      	movs	r3, #0
 80151a0:	2200      	movs	r2, #0
 80151a2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80151a6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80151aa:	f001 fc61 	bl	8016a70 <SX126xSetDioIrqParams>
			IRQ_RADIO_NONE);

	// Initialize driver timeout timers
	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
 80151ae:	2300      	movs	r3, #0
 80151b0:	9302      	str	r3, [sp, #8]
 80151b2:	4b10      	ldr	r3, [pc, #64]	@ (80151f4 <RadioInit+0x84>)
 80151b4:	9301      	str	r3, [sp, #4]
 80151b6:	2300      	movs	r3, #0
 80151b8:	9300      	str	r3, [sp, #0]
 80151ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80151be:	f04f 0300 	mov.w	r3, #0
 80151c2:	480d      	ldr	r0, [pc, #52]	@ (80151f8 <RadioInit+0x88>)
 80151c4:	f002 faba 	bl	801773c <UTIL_TIMER_Create>
	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);
 80151c8:	2300      	movs	r3, #0
 80151ca:	9302      	str	r3, [sp, #8]
 80151cc:	4b0b      	ldr	r3, [pc, #44]	@ (80151fc <RadioInit+0x8c>)
 80151ce:	9301      	str	r3, [sp, #4]
 80151d0:	2300      	movs	r3, #0
 80151d2:	9300      	str	r3, [sp, #0]
 80151d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80151d8:	f04f 0300 	mov.w	r3, #0
 80151dc:	4808      	ldr	r0, [pc, #32]	@ (8015200 <RadioInit+0x90>)
 80151de:	f002 faad 	bl	801773c <UTIL_TIMER_Create>

	IrqFired = false;
 80151e2:	4b08      	ldr	r3, [pc, #32]	@ (8015204 <RadioInit+0x94>)
 80151e4:	2200      	movs	r2, #0
 80151e6:	701a      	strb	r2, [r3, #0]
}
 80151e8:	bf00      	nop
 80151ea:	3708      	adds	r7, #8
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}
 80151f0:	20001fb0 	.word	0x20001fb0
 80151f4:	080160c1 	.word	0x080160c1
 80151f8:	20001e48 	.word	0x20001e48
 80151fc:	080160f9 	.word	0x080160f9
 8015200:	20001e68 	.word	0x20001e68
 8015204:	20001fa7 	.word	0x20001fa7

08015208 <RadioReInit>:

void RadioReInit(RadioEvents_t *events) {
 8015208:	b580      	push	{r7, lr}
 801520a:	b086      	sub	sp, #24
 801520c:	af04      	add	r7, sp, #16
 801520e:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 8015210:	4a12      	ldr	r2, [pc, #72]	@ (801525c <RadioReInit+0x54>)
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	6013      	str	r3, [r2, #0]
	SX126xReInit();
 8015216:	f001 f9b0 	bl	801657a <SX126xReInit>

	// Initialize driver timeout timers
	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
 801521a:	2300      	movs	r3, #0
 801521c:	9302      	str	r3, [sp, #8]
 801521e:	4b10      	ldr	r3, [pc, #64]	@ (8015260 <RadioReInit+0x58>)
 8015220:	9301      	str	r3, [sp, #4]
 8015222:	2300      	movs	r3, #0
 8015224:	9300      	str	r3, [sp, #0]
 8015226:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801522a:	f04f 0300 	mov.w	r3, #0
 801522e:	480d      	ldr	r0, [pc, #52]	@ (8015264 <RadioReInit+0x5c>)
 8015230:	f002 fa84 	bl	801773c <UTIL_TIMER_Create>
	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);
 8015234:	2300      	movs	r3, #0
 8015236:	9302      	str	r3, [sp, #8]
 8015238:	4b0b      	ldr	r3, [pc, #44]	@ (8015268 <RadioReInit+0x60>)
 801523a:	9301      	str	r3, [sp, #4]
 801523c:	2300      	movs	r3, #0
 801523e:	9300      	str	r3, [sp, #0]
 8015240:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015244:	f04f 0300 	mov.w	r3, #0
 8015248:	4808      	ldr	r0, [pc, #32]	@ (801526c <RadioReInit+0x64>)
 801524a:	f002 fa77 	bl	801773c <UTIL_TIMER_Create>

	IrqFired = false;
 801524e:	4b08      	ldr	r3, [pc, #32]	@ (8015270 <RadioReInit+0x68>)
 8015250:	2200      	movs	r2, #0
 8015252:	701a      	strb	r2, [r3, #0]
}
 8015254:	bf00      	nop
 8015256:	3708      	adds	r7, #8
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}
 801525c:	20001fb0 	.word	0x20001fb0
 8015260:	080160c1 	.word	0x080160c1
 8015264:	20001e48 	.word	0x20001e48
 8015268:	080160f9 	.word	0x080160f9
 801526c:	20001e68 	.word	0x20001e68
 8015270:	20001fa7 	.word	0x20001fa7

08015274 <RadioGetStatus>:

RadioState_t RadioGetStatus(void) {
 8015274:	b580      	push	{r7, lr}
 8015276:	af00      	add	r7, sp, #0
	switch (SX126xGetOperatingMode()) {
 8015278:	f001 f986 	bl	8016588 <SX126xGetOperatingMode>
 801527c:	4603      	mov	r3, r0
 801527e:	2b07      	cmp	r3, #7
 8015280:	d00a      	beq.n	8015298 <RadioGetStatus+0x24>
 8015282:	2b07      	cmp	r3, #7
 8015284:	dc0a      	bgt.n	801529c <RadioGetStatus+0x28>
 8015286:	2b04      	cmp	r3, #4
 8015288:	d002      	beq.n	8015290 <RadioGetStatus+0x1c>
 801528a:	2b05      	cmp	r3, #5
 801528c:	d002      	beq.n	8015294 <RadioGetStatus+0x20>
 801528e:	e005      	b.n	801529c <RadioGetStatus+0x28>
		case MODE_TX:
			return RF_TX_RUNNING;
 8015290:	2302      	movs	r3, #2
 8015292:	e004      	b.n	801529e <RadioGetStatus+0x2a>
		case MODE_RX:
			return RF_RX_RUNNING;
 8015294:	2301      	movs	r3, #1
 8015296:	e002      	b.n	801529e <RadioGetStatus+0x2a>
		case MODE_CAD:
			return RF_CAD;
 8015298:	2303      	movs	r3, #3
 801529a:	e000      	b.n	801529e <RadioGetStatus+0x2a>
		default:
			return RF_IDLE;
 801529c:	2300      	movs	r3, #0
	}
}
 801529e:	4618      	mov	r0, r3
 80152a0:	bd80      	pop	{r7, pc}
	...

080152a4 <RadioSetModem>:

void RadioSetModem(RadioModems_t modem) {
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b082      	sub	sp, #8
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	4603      	mov	r3, r0
 80152ac:	71fb      	strb	r3, [r7, #7]
	switch (modem) {
 80152ae:	79fb      	ldrb	r3, [r7, #7]
 80152b0:	2b01      	cmp	r3, #1
 80152b2:	d009      	beq.n	80152c8 <RadioSetModem+0x24>
		default:
		case MODEM_FSK:
			SX126xSetPacketType(PACKET_TYPE_GFSK);
 80152b4:	2000      	movs	r0, #0
 80152b6:	f001 fc81 	bl	8016bbc <SX126xSetPacketType>
			// When switching to GFSK mode the LoRa SyncWord register value is reset
			// Thus, we also reset the RadioPublicNetwork variable
			RadioPublicNetwork.Current = false;
 80152ba:	4b10      	ldr	r3, [pc, #64]	@ (80152fc <RadioSetModem+0x58>)
 80152bc:	2200      	movs	r2, #0
 80152be:	705a      	strb	r2, [r3, #1]
			_modem = modem;
 80152c0:	4a0f      	ldr	r2, [pc, #60]	@ (8015300 <RadioSetModem+0x5c>)
 80152c2:	79fb      	ldrb	r3, [r7, #7]
 80152c4:	7013      	strb	r3, [r2, #0]
		break;
 80152c6:	e015      	b.n	80152f4 <RadioSetModem+0x50>
		case MODEM_LORA:
			SX126xSetPacketType(PACKET_TYPE_LORA);
 80152c8:	2001      	movs	r0, #1
 80152ca:	f001 fc77 	bl	8016bbc <SX126xSetPacketType>
			// Public/Private network register is reset when switching modems
			if (RadioPublicNetwork.Current != RadioPublicNetwork.Previous) {
 80152ce:	4b0b      	ldr	r3, [pc, #44]	@ (80152fc <RadioSetModem+0x58>)
 80152d0:	785a      	ldrb	r2, [r3, #1]
 80152d2:	4b0a      	ldr	r3, [pc, #40]	@ (80152fc <RadioSetModem+0x58>)
 80152d4:	781b      	ldrb	r3, [r3, #0]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d008      	beq.n	80152ec <RadioSetModem+0x48>
				RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 80152da:	4b08      	ldr	r3, [pc, #32]	@ (80152fc <RadioSetModem+0x58>)
 80152dc:	781a      	ldrb	r2, [r3, #0]
 80152de:	4b07      	ldr	r3, [pc, #28]	@ (80152fc <RadioSetModem+0x58>)
 80152e0:	705a      	strb	r2, [r3, #1]
				RadioSetPublicNetwork(RadioPublicNetwork.Current);
 80152e2:	4b06      	ldr	r3, [pc, #24]	@ (80152fc <RadioSetModem+0x58>)
 80152e4:	785b      	ldrb	r3, [r3, #1]
 80152e6:	4618      	mov	r0, r3
 80152e8:	f000 feb4 	bl	8016054 <RadioSetPublicNetwork>
			}
			_modem = modem;
 80152ec:	4a04      	ldr	r2, [pc, #16]	@ (8015300 <RadioSetModem+0x5c>)
 80152ee:	79fb      	ldrb	r3, [r7, #7]
 80152f0:	7013      	strb	r3, [r2, #0]
		break;
 80152f2:	bf00      	nop
	}
}
 80152f4:	bf00      	nop
 80152f6:	3708      	adds	r7, #8
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	20001fac 	.word	0x20001fac
 8015300:	20001faa 	.word	0x20001faa

08015304 <RadioSetChannel>:

void RadioSetChannel(uint32_t freq) {
 8015304:	b580      	push	{r7, lr}
 8015306:	b082      	sub	sp, #8
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
	SX126xSetRfFrequency(freq);
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f001 fc0f 	bl	8016b30 <SX126xSetRfFrequency>
}
 8015312:	bf00      	nop
 8015314:	3708      	adds	r7, #8
 8015316:	46bd      	mov	sp, r7
 8015318:	bd80      	pop	{r7, pc}

0801531a <RadioIsChannelFree>:

bool RadioIsChannelFree(RadioModems_t modem, uint32_t freq, int16_t rssiThresh,
		uint32_t maxCarrierSenseTime) {
 801531a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801531e:	b086      	sub	sp, #24
 8015320:	af00      	add	r7, sp, #0
 8015322:	60b9      	str	r1, [r7, #8]
 8015324:	607b      	str	r3, [r7, #4]
 8015326:	4603      	mov	r3, r0
 8015328:	73fb      	strb	r3, [r7, #15]
 801532a:	4613      	mov	r3, r2
 801532c:	81bb      	strh	r3, [r7, #12]
	bool status = true;
 801532e:	2301      	movs	r3, #1
 8015330:	75fb      	strb	r3, [r7, #23]
	int16_t rssi = 0;
 8015332:	2300      	movs	r3, #0
 8015334:	82bb      	strh	r3, [r7, #20]
	uint32_t carrierSenseTime = 0;
 8015336:	2300      	movs	r3, #0
 8015338:	613b      	str	r3, [r7, #16]

	if (RadioGetStatus() != RF_IDLE) {
 801533a:	f7ff ff9b 	bl	8015274 <RadioGetStatus>
 801533e:	4603      	mov	r3, r0
 8015340:	2b00      	cmp	r3, #0
 8015342:	d001      	beq.n	8015348 <RadioIsChannelFree+0x2e>
		return false;
 8015344:	2300      	movs	r3, #0
 8015346:	e036      	b.n	80153b6 <RadioIsChannelFree+0x9c>
	}

	RadioSetModem(modem);
 8015348:	7bfb      	ldrb	r3, [r7, #15]
 801534a:	4618      	mov	r0, r3
 801534c:	f7ff ffaa 	bl	80152a4 <RadioSetModem>

	RadioSetChannel(freq);
 8015350:	68b8      	ldr	r0, [r7, #8]
 8015352:	f7ff ffd7 	bl	8015304 <RadioSetChannel>

	RadioRx(0);
 8015356:	2000      	movs	r0, #0
 8015358:	f000 fd10 	bl	8015d7c <RadioRx>

	HAL_Delay(1);
 801535c:	2001      	movs	r0, #1
 801535e:	f7ec ff41 	bl	80021e4 <HAL_Delay>

	carrierSenseTime = TimerGetCurrentTime();
 8015362:	f002 fbe5 	bl	8017b30 <UTIL_TIMER_GetCurrentTime>
 8015366:	4602      	mov	r2, r0
 8015368:	460b      	mov	r3, r1
 801536a:	4613      	mov	r3, r2
 801536c:	613b      	str	r3, [r7, #16]

	// Perform carrier sense for maxCarrierSenseTime
	while (TimerGetElapsedTime(carrierSenseTime) < maxCarrierSenseTime) {
 801536e:	e00e      	b.n	801538e <RadioIsChannelFree+0x74>
		rssi = RadioRssi(modem);
 8015370:	7bfb      	ldrb	r3, [r7, #15]
 8015372:	4618      	mov	r0, r3
 8015374:	f000 fdec 	bl	8015f50 <RadioRssi>
 8015378:	4603      	mov	r3, r0
 801537a:	82bb      	strh	r3, [r7, #20]

		if (rssi > rssiThresh) {
 801537c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8015380:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015384:	429a      	cmp	r2, r3
 8015386:	dd02      	ble.n	801538e <RadioIsChannelFree+0x74>
			status = false;
 8015388:	2300      	movs	r3, #0
 801538a:	75fb      	strb	r3, [r7, #23]
			break;
 801538c:	e010      	b.n	80153b0 <RadioIsChannelFree+0x96>
	while (TimerGetElapsedTime(carrierSenseTime) < maxCarrierSenseTime) {
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	2200      	movs	r2, #0
 8015392:	4698      	mov	r8, r3
 8015394:	4691      	mov	r9, r2
 8015396:	4640      	mov	r0, r8
 8015398:	4649      	mov	r1, r9
 801539a:	f002 fbdf 	bl	8017b5c <UTIL_TIMER_GetElapsedTime>
 801539e:	4602      	mov	r2, r0
 80153a0:	460b      	mov	r3, r1
 80153a2:	6879      	ldr	r1, [r7, #4]
 80153a4:	2000      	movs	r0, #0
 80153a6:	460c      	mov	r4, r1
 80153a8:	4605      	mov	r5, r0
 80153aa:	42a2      	cmp	r2, r4
 80153ac:	41ab      	sbcs	r3, r5
 80153ae:	d3df      	bcc.n	8015370 <RadioIsChannelFree+0x56>
		}
	}
	RadioSleep();
 80153b0:	f000 fccc 	bl	8015d4c <RadioSleep>
	return status;
 80153b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3718      	adds	r7, #24
 80153ba:	46bd      	mov	sp, r7
 80153bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080153c0 <RadioRandom>:

uint32_t RadioRandom(void) {
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
	uint32_t rnd = 0;
 80153c6:	2300      	movs	r3, #0
 80153c8:	607b      	str	r3, [r7, #4]

	/*
	 * Radio setup for random number generation
	 */
	// Set LoRa modem ON
	RadioSetModem(MODEM_LORA);
 80153ca:	2001      	movs	r0, #1
 80153cc:	f7ff ff6a 	bl	80152a4 <RadioSetModem>

	// Set radio in continuous reception
	SX126xSetRx(0);
 80153d0:	2000      	movs	r0, #0
 80153d2:	f001 fa35 	bl	8016840 <SX126xSetRx>

	rnd = SX126xGetRandom();
 80153d6:	f001 f9ce 	bl	8016776 <SX126xGetRandom>
 80153da:	6078      	str	r0, [r7, #4]
	RadioSleep();
 80153dc:	f000 fcb6 	bl	8015d4c <RadioSleep>

	return rnd;
 80153e0:	687b      	ldr	r3, [r7, #4]
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	3708      	adds	r7, #8
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
	...

080153ec <RadioSetRxConfig>:
void RadioSetRxConfig(RadioModems_t modem, uint32_t bandwidth,
		uint32_t datarate, uint8_t coderate, uint32_t bandwidthAfc,
		uint16_t preambleLen, uint16_t symbTimeout, bool fixLen,
		uint8_t payloadLen,
		bool crcOn, bool freqHopOn, uint8_t hopPeriod,
		bool iqInverted, bool rxContinuous) {
 80153ec:	b5b0      	push	{r4, r5, r7, lr}
 80153ee:	b086      	sub	sp, #24
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	60b9      	str	r1, [r7, #8]
 80153f4:	607a      	str	r2, [r7, #4]
 80153f6:	461a      	mov	r2, r3
 80153f8:	4603      	mov	r3, r0
 80153fa:	73fb      	strb	r3, [r7, #15]
 80153fc:	4613      	mov	r3, r2
 80153fe:	73bb      	strb	r3, [r7, #14]

	RxContinuous = rxContinuous;
 8015400:	4aae      	ldr	r2, [pc, #696]	@ (80156bc <RadioSetRxConfig+0x2d0>)
 8015402:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8015406:	7013      	strb	r3, [r2, #0]
	if (rxContinuous == true) {
 8015408:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801540c:	2b00      	cmp	r3, #0
 801540e:	d001      	beq.n	8015414 <RadioSetRxConfig+0x28>
		symbTimeout = 0;
 8015410:	2300      	movs	r3, #0
 8015412:	863b      	strh	r3, [r7, #48]	@ 0x30
	}
	if (fixLen == true) {
 8015414:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8015418:	2b00      	cmp	r3, #0
 801541a:	d004      	beq.n	8015426 <RadioSetRxConfig+0x3a>
		MaxPayloadLength = payloadLen;
 801541c:	4aa8      	ldr	r2, [pc, #672]	@ (80156c0 <RadioSetRxConfig+0x2d4>)
 801541e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015422:	7013      	strb	r3, [r2, #0]
 8015424:	e002      	b.n	801542c <RadioSetRxConfig+0x40>
	}
	else {
		MaxPayloadLength = 0xFF;
 8015426:	4ba6      	ldr	r3, [pc, #664]	@ (80156c0 <RadioSetRxConfig+0x2d4>)
 8015428:	22ff      	movs	r2, #255	@ 0xff
 801542a:	701a      	strb	r2, [r3, #0]
	}

	switch (modem) {
 801542c:	7bfb      	ldrb	r3, [r7, #15]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d003      	beq.n	801543a <RadioSetRxConfig+0x4e>
 8015432:	2b01      	cmp	r3, #1
 8015434:	f000 80a4 	beq.w	8015580 <RadioSetRxConfig+0x194>
			// Timeout Max, Timeout handled directly in SetRx function
			RxTimeout = RXTIMEOUT_LORA_MAX;

		break;
	}
}
 8015438:	e13b      	b.n	80156b2 <RadioSetRxConfig+0x2c6>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 801543a:	2000      	movs	r0, #0
 801543c:	f001 fa82 	bl	8016944 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015440:	4ba0      	ldr	r3, [pc, #640]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015442:	2200      	movs	r2, #0
 8015444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8015448:	4a9e      	ldr	r2, [pc, #632]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	6453      	str	r3, [r2, #68]	@ 0x44
			SX126x.ModulationParams.Params.Gfsk.ModulationShaping =
 801544e:	4b9d      	ldr	r3, [pc, #628]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015450:	220b      	movs	r2, #11
 8015452:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
					RadioGetFskBandwidthRegValue(bandwidth);
 8015456:	68b8      	ldr	r0, [r7, #8]
 8015458:	f7ff fe58 	bl	801510c <RadioGetFskBandwidthRegValue>
 801545c:	4603      	mov	r3, r0
 801545e:	461a      	mov	r2, r3
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
 8015460:	4b98      	ldr	r3, [pc, #608]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015462:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8015466:	4b97      	ldr	r3, [pc, #604]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015468:	2200      	movs	r2, #0
 801546a:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 801546c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801546e:	00db      	lsls	r3, r3, #3
 8015470:	b29a      	uxth	r2, r3
 8015472:	4b94      	ldr	r3, [pc, #592]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015474:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect =
 8015476:	4b93      	ldr	r3, [pc, #588]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015478:	2204      	movs	r2, #4
 801547a:	771a      	strb	r2, [r3, #28]
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801547c:	4b91      	ldr	r3, [pc, #580]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 801547e:	2218      	movs	r2, #24
 8015480:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp =
 8015482:	4b90      	ldr	r3, [pc, #576]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015484:	2200      	movs	r2, #0
 8015486:	779a      	strb	r2, [r3, #30]
							RADIO_PACKET_FIXED_LENGTH :
 8015488:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801548c:	f083 0301 	eor.w	r3, r3, #1
 8015490:	b2db      	uxtb	r3, r3
 8015492:	461a      	mov	r2, r3
			SX126x.PacketParams.Params.Gfsk.HeaderType =
 8015494:	4b8b      	ldr	r3, [pc, #556]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015496:	77da      	strb	r2, [r3, #31]
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8015498:	4b89      	ldr	r3, [pc, #548]	@ (80156c0 <RadioSetRxConfig+0x2d4>)
 801549a:	781a      	ldrb	r2, [r3, #0]
 801549c:	4b89      	ldr	r3, [pc, #548]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 801549e:	f883 2020 	strb.w	r2, [r3, #32]
			if (crcOn == true) {
 80154a2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d004      	beq.n	80154b4 <RadioSetRxConfig+0xc8>
				SX126x.PacketParams.Params.Gfsk.CrcLength =
 80154aa:	4b86      	ldr	r3, [pc, #536]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 80154ac:	22f2      	movs	r2, #242	@ 0xf2
 80154ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80154b2:	e003      	b.n	80154bc <RadioSetRxConfig+0xd0>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80154b4:	4b83      	ldr	r3, [pc, #524]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 80154b6:	2201      	movs	r2, #1
 80154b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80154bc:	4b81      	ldr	r3, [pc, #516]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 80154be:	2201      	movs	r2, #1
 80154c0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			RadioStandby();
 80154c4:	f000 fc52 	bl	8015d6c <RadioStandby>
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 80154c8:	4b7e      	ldr	r3, [pc, #504]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 80154ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	bf14      	ite	ne
 80154d2:	2301      	movne	r3, #1
 80154d4:	2300      	moveq	r3, #0
 80154d6:	b2db      	uxtb	r3, r3
 80154d8:	4618      	mov	r0, r3
 80154da:	f7ff fee3 	bl	80152a4 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 80154de:	487a      	ldr	r0, [pc, #488]	@ (80156c8 <RadioSetRxConfig+0x2dc>)
 80154e0:	f001 fbf6 	bl	8016cd0 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 80154e4:	4879      	ldr	r0, [pc, #484]	@ (80156cc <RadioSetRxConfig+0x2e0>)
 80154e6:	f001 fc91 	bl	8016e0c <SX126xSetPacketParams>
			syncWord[0] = 0xC1;
 80154ea:	23c1      	movs	r3, #193	@ 0xc1
 80154ec:	743b      	strb	r3, [r7, #16]
			syncWord[1] = 0x94;
 80154ee:	2394      	movs	r3, #148	@ 0x94
 80154f0:	747b      	strb	r3, [r7, #17]
			syncWord[2] = 0xC1;
 80154f2:	23c1      	movs	r3, #193	@ 0xc1
 80154f4:	74bb      	strb	r3, [r7, #18]
			syncWord[3] = 0x00;
 80154f6:	2300      	movs	r3, #0
 80154f8:	74fb      	strb	r3, [r7, #19]
			syncWord[4] = 0x00;
 80154fa:	2300      	movs	r3, #0
 80154fc:	753b      	strb	r3, [r7, #20]
			syncWord[5] = 0x00;
 80154fe:	2300      	movs	r3, #0
 8015500:	757b      	strb	r3, [r7, #21]
			syncWord[6] = 0x00;
 8015502:	2300      	movs	r3, #0
 8015504:	75bb      	strb	r3, [r7, #22]
			syncWord[7] = 0x00;
 8015506:	2300      	movs	r3, #0
 8015508:	75fb      	strb	r3, [r7, #23]
			SX126xSetSyncWord(syncWord);
 801550a:	f107 0310 	add.w	r3, r7, #16
 801550e:	4618      	mov	r0, r3
 8015510:	f001 f8af 	bl	8016672 <SX126xSetSyncWord>
			SX126xSetWhiteningSeed(0x01FF);
 8015514:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8015518:	f001 f8fa 	bl	8016710 <SX126xSetWhiteningSeed>
					* ((1.0 / (double) datarate) * 8.0) * 1000);
 801551c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801551e:	4618      	mov	r0, r3
 8015520:	f7eb f810 	bl	8000544 <__aeabi_i2d>
 8015524:	4604      	mov	r4, r0
 8015526:	460d      	mov	r5, r1
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	f7ea fffb 	bl	8000524 <__aeabi_ui2d>
 801552e:	4602      	mov	r2, r0
 8015530:	460b      	mov	r3, r1
 8015532:	f04f 0000 	mov.w	r0, #0
 8015536:	4966      	ldr	r1, [pc, #408]	@ (80156d0 <RadioSetRxConfig+0x2e4>)
 8015538:	f7eb f998 	bl	800086c <__aeabi_ddiv>
 801553c:	4602      	mov	r2, r0
 801553e:	460b      	mov	r3, r1
 8015540:	4610      	mov	r0, r2
 8015542:	4619      	mov	r1, r3
 8015544:	f04f 0200 	mov.w	r2, #0
 8015548:	4b62      	ldr	r3, [pc, #392]	@ (80156d4 <RadioSetRxConfig+0x2e8>)
 801554a:	f7eb f865 	bl	8000618 <__aeabi_dmul>
 801554e:	4602      	mov	r2, r0
 8015550:	460b      	mov	r3, r1
 8015552:	4620      	mov	r0, r4
 8015554:	4629      	mov	r1, r5
 8015556:	f7eb f85f 	bl	8000618 <__aeabi_dmul>
 801555a:	4602      	mov	r2, r0
 801555c:	460b      	mov	r3, r1
 801555e:	4610      	mov	r0, r2
 8015560:	4619      	mov	r1, r3
 8015562:	f04f 0200 	mov.w	r2, #0
 8015566:	4b5c      	ldr	r3, [pc, #368]	@ (80156d8 <RadioSetRxConfig+0x2ec>)
 8015568:	f7eb f856 	bl	8000618 <__aeabi_dmul>
 801556c:	4602      	mov	r2, r0
 801556e:	460b      	mov	r3, r1
			RxTimeout = (uint32_t) (symbTimeout
 8015570:	4610      	mov	r0, r2
 8015572:	4619      	mov	r1, r3
 8015574:	f7eb fb28 	bl	8000bc8 <__aeabi_d2uiz>
 8015578:	4603      	mov	r3, r0
 801557a:	4a58      	ldr	r2, [pc, #352]	@ (80156dc <RadioSetRxConfig+0x2f0>)
 801557c:	6013      	str	r3, [r2, #0]
		break;
 801557e:	e098      	b.n	80156b2 <RadioSetRxConfig+0x2c6>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 8015580:	2000      	movs	r0, #0
 8015582:	f001 f9df 	bl	8016944 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126xSetLoRaSymbNumTimeout(symbTimeout);
 8015586:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015588:	b2db      	uxtb	r3, r3
 801558a:	4618      	mov	r0, r3
 801558c:	f001 f9e9 	bl	8016962 <SX126xSetLoRaSymbNumTimeout>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015590:	4b4c      	ldr	r3, [pc, #304]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015592:	2201      	movs	r2, #1
 8015594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
					(RadioLoRaSpreadingFactors_t) datarate;
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	b2da      	uxtb	r2, r3
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
 801559c:	4b49      	ldr	r3, [pc, #292]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 801559e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
					Bandwidths[bandwidth];
 80155a2:	4a4f      	ldr	r2, [pc, #316]	@ (80156e0 <RadioSetRxConfig+0x2f4>)
 80155a4:	68bb      	ldr	r3, [r7, #8]
 80155a6:	4413      	add	r3, r2
 80155a8:	781a      	ldrb	r2, [r3, #0]
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
 80155aa:	4b46      	ldr	r3, [pc, #280]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 80155ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			SX126x.ModulationParams.Params.LoRa.CodingRate =
 80155b0:	4a44      	ldr	r2, [pc, #272]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 80155b2:	7bbb      	ldrb	r3, [r7, #14]
 80155b4:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12)))
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d105      	bne.n	80155ca <RadioSetRxConfig+0x1de>
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2b0b      	cmp	r3, #11
 80155c2:	d008      	beq.n	80155d6 <RadioSetRxConfig+0x1ea>
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	2b0c      	cmp	r3, #12
 80155c8:	d005      	beq.n	80155d6 <RadioSetRxConfig+0x1ea>
					|| ((bandwidth == 1) && (datarate == 12))) {
 80155ca:	68bb      	ldr	r3, [r7, #8]
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	d107      	bne.n	80155e0 <RadioSetRxConfig+0x1f4>
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2b0c      	cmp	r3, #12
 80155d4:	d104      	bne.n	80155e0 <RadioSetRxConfig+0x1f4>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80155d6:	4b3b      	ldr	r3, [pc, #236]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 80155d8:	2201      	movs	r2, #1
 80155da:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80155de:	e003      	b.n	80155e8 <RadioSetRxConfig+0x1fc>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80155e0:	4b38      	ldr	r3, [pc, #224]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 80155e2:	2200      	movs	r2, #0
 80155e4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 80155e8:	4b36      	ldr	r3, [pc, #216]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 80155ea:	2201      	movs	r2, #1
 80155ec:	761a      	strb	r2, [r3, #24]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5)
 80155ee:	4b35      	ldr	r3, [pc, #212]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 80155f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80155f4:	2b05      	cmp	r3, #5
 80155f6:	d004      	beq.n	8015602 <RadioSetRxConfig+0x216>
					|| (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 80155f8:	4b32      	ldr	r3, [pc, #200]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 80155fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80155fe:	2b06      	cmp	r3, #6
 8015600:	d10a      	bne.n	8015618 <RadioSetRxConfig+0x22c>
				if (preambleLen < 12) {
 8015602:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015604:	2b0b      	cmp	r3, #11
 8015606:	d803      	bhi.n	8015610 <RadioSetRxConfig+0x224>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8015608:	4b2e      	ldr	r3, [pc, #184]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 801560a:	220c      	movs	r2, #12
 801560c:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12) {
 801560e:	e006      	b.n	801561e <RadioSetRxConfig+0x232>
					SX126x.PacketParams.Params.LoRa.PreambleLength =
 8015610:	4a2c      	ldr	r2, [pc, #176]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015612:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015614:	8493      	strh	r3, [r2, #36]	@ 0x24
				if (preambleLen < 12) {
 8015616:	e002      	b.n	801561e <RadioSetRxConfig+0x232>
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015618:	4a2a      	ldr	r2, [pc, #168]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 801561a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801561c:	8493      	strh	r3, [r2, #36]	@ 0x24
					(RadioLoRaPacketLengthsMode_t) fixLen;
 801561e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
			SX126x.PacketParams.Params.LoRa.HeaderType =
 8015622:	4b28      	ldr	r3, [pc, #160]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015624:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8015628:	4b25      	ldr	r3, [pc, #148]	@ (80156c0 <RadioSetRxConfig+0x2d4>)
 801562a:	781a      	ldrb	r2, [r3, #0]
 801562c:	4b25      	ldr	r3, [pc, #148]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 801562e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
					(RadioLoRaCrcModes_t) crcOn;
 8015632:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
			SX126x.PacketParams.Params.LoRa.CrcMode =
 8015636:	4b23      	ldr	r3, [pc, #140]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015638:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					(RadioLoRaIQModes_t) iqInverted;
 801563c:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
			SX126x.PacketParams.Params.LoRa.InvertIQ =
 8015640:	4b20      	ldr	r3, [pc, #128]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015642:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 8015646:	4b1f      	ldr	r3, [pc, #124]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 8015648:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 801564c:	2b00      	cmp	r3, #0
 801564e:	bf14      	ite	ne
 8015650:	2301      	movne	r3, #1
 8015652:	2300      	moveq	r3, #0
 8015654:	b2db      	uxtb	r3, r3
 8015656:	4618      	mov	r0, r3
 8015658:	f7ff fe24 	bl	80152a4 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 801565c:	481a      	ldr	r0, [pc, #104]	@ (80156c8 <RadioSetRxConfig+0x2dc>)
 801565e:	f001 fb37 	bl	8016cd0 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 8015662:	481a      	ldr	r0, [pc, #104]	@ (80156cc <RadioSetRxConfig+0x2e0>)
 8015664:	f001 fbd2 	bl	8016e0c <SX126xSetPacketParams>
			if (SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED) {
 8015668:	4b16      	ldr	r3, [pc, #88]	@ (80156c4 <RadioSetRxConfig+0x2d8>)
 801566a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801566e:	2b01      	cmp	r3, #1
 8015670:	d10d      	bne.n	801568e <RadioSetRxConfig+0x2a2>
						SX126xReadRegister(0x0736) & ~(1 << 2));
 8015672:	f240 7036 	movw	r0, #1846	@ 0x736
 8015676:	f001 fea9 	bl	80173cc <SX126xReadRegister>
 801567a:	4603      	mov	r3, r0
				SX126xWriteRegister(0x0736,
 801567c:	f023 0304 	bic.w	r3, r3, #4
 8015680:	b2db      	uxtb	r3, r3
 8015682:	4619      	mov	r1, r3
 8015684:	f240 7036 	movw	r0, #1846	@ 0x736
 8015688:	f001 fe54 	bl	8017334 <SX126xWriteRegister>
 801568c:	e00c      	b.n	80156a8 <RadioSetRxConfig+0x2bc>
						SX126xReadRegister(0x0736) | (1 << 2));
 801568e:	f240 7036 	movw	r0, #1846	@ 0x736
 8015692:	f001 fe9b 	bl	80173cc <SX126xReadRegister>
 8015696:	4603      	mov	r3, r0
				SX126xWriteRegister(0x0736,
 8015698:	f043 0304 	orr.w	r3, r3, #4
 801569c:	b2db      	uxtb	r3, r3
 801569e:	4619      	mov	r1, r3
 80156a0:	f240 7036 	movw	r0, #1846	@ 0x736
 80156a4:	f001 fe46 	bl	8017334 <SX126xWriteRegister>
			RxTimeout = RXTIMEOUT_LORA_MAX;
 80156a8:	4b0c      	ldr	r3, [pc, #48]	@ (80156dc <RadioSetRxConfig+0x2f0>)
 80156aa:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80156ae:	601a      	str	r2, [r3, #0]
		break;
 80156b0:	bf00      	nop
}
 80156b2:	bf00      	nop
 80156b4:	3718      	adds	r7, #24
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bdb0      	pop	{r4, r5, r7, pc}
 80156ba:	bf00      	nop
 80156bc:	20001e90 	.word	0x20001e90
 80156c0:	200003f8 	.word	0x200003f8
 80156c4:	20001fb4 	.word	0x20001fb4
 80156c8:	20001ff4 	.word	0x20001ff4
 80156cc:	20001fcc 	.word	0x20001fcc
 80156d0:	3ff00000 	.word	0x3ff00000
 80156d4:	40200000 	.word	0x40200000
 80156d8:	408f4000 	.word	0x408f4000
 80156dc:	20001e8c 	.word	0x20001e8c
 80156e0:	08021268 	.word	0x08021268

080156e4 <RadioSetTxConfig>:

void RadioSetTxConfig(RadioModems_t modem, int8_t power, uint32_t fdev,
		uint32_t bandwidth, uint32_t datarate, uint8_t coderate,
		uint16_t preambleLen,
		bool fixLen, bool crcOn, bool freqHopOn, uint8_t hopPeriod,
		bool iqInverted, uint32_t timeout) {
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b086      	sub	sp, #24
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	60ba      	str	r2, [r7, #8]
 80156ec:	607b      	str	r3, [r7, #4]
 80156ee:	4603      	mov	r3, r0
 80156f0:	73fb      	strb	r3, [r7, #15]
 80156f2:	460b      	mov	r3, r1
 80156f4:	73bb      	strb	r3, [r7, #14]

	switch (modem) {
 80156f6:	7bfb      	ldrb	r3, [r7, #15]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d002      	beq.n	8015702 <RadioSetTxConfig+0x1e>
 80156fc:	2b01      	cmp	r3, #1
 80156fe:	d06d      	beq.n	80157dc <RadioSetTxConfig+0xf8>
 8015700:	e0dc      	b.n	80158bc <RadioSetTxConfig+0x1d8>
		case MODEM_FSK:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015702:	4b86      	ldr	r3, [pc, #536]	@ (801591c <RadioSetTxConfig+0x238>)
 8015704:	2200      	movs	r2, #0
 8015706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			SX126x.ModulationParams.Params.Gfsk.BitRate = 0x0C;
 801570a:	4b84      	ldr	r3, [pc, #528]	@ (801591c <RadioSetTxConfig+0x238>)
 801570c:	220c      	movs	r2, #12
 801570e:	645a      	str	r2, [r3, #68]	@ 0x44

			SX126x.ModulationParams.Params.Gfsk.ModulationShaping =
 8015710:	4b82      	ldr	r3, [pc, #520]	@ (801591c <RadioSetTxConfig+0x238>)
 8015712:	220b      	movs	r2, #11
 8015714:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
					MOD_SHAPING_G_BT_1;
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
					RadioGetFskBandwidthRegValue(bandwidth);
 8015718:	6878      	ldr	r0, [r7, #4]
 801571a:	f7ff fcf7 	bl	801510c <RadioGetFskBandwidthRegValue>
 801571e:	4603      	mov	r3, r0
 8015720:	461a      	mov	r2, r3
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
 8015722:	4b7e      	ldr	r3, [pc, #504]	@ (801591c <RadioSetTxConfig+0x238>)
 8015724:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 8015728:	4a7c      	ldr	r2, [pc, #496]	@ (801591c <RadioSetTxConfig+0x238>)
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	6493      	str	r3, [r2, #72]	@ 0x48

			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801572e:	4b7b      	ldr	r3, [pc, #492]	@ (801591c <RadioSetTxConfig+0x238>)
 8015730:	2200      	movs	r2, #0
 8015732:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 8015734:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015736:	00db      	lsls	r3, r3, #3
 8015738:	b29a      	uxth	r2, r3
 801573a:	4b78      	ldr	r3, [pc, #480]	@ (801591c <RadioSetTxConfig+0x238>)
 801573c:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect =
 801573e:	4b77      	ldr	r3, [pc, #476]	@ (801591c <RadioSetTxConfig+0x238>)
 8015740:	2204      	movs	r2, #4
 8015742:	771a      	strb	r2, [r3, #28]
					RADIO_PREAMBLE_DETECTOR_08_BITS;
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8015744:	4b75      	ldr	r3, [pc, #468]	@ (801591c <RadioSetTxConfig+0x238>)
 8015746:	2218      	movs	r2, #24
 8015748:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp =
 801574a:	4b74      	ldr	r3, [pc, #464]	@ (801591c <RadioSetTxConfig+0x238>)
 801574c:	2200      	movs	r2, #0
 801574e:	779a      	strb	r2, [r3, #30]
					RADIO_ADDRESSCOMP_FILT_OFF;
			SX126x.PacketParams.Params.Gfsk.HeaderType =
					(fixLen == true) ?
							RADIO_PACKET_FIXED_LENGTH :
 8015750:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8015754:	f083 0301 	eor.w	r3, r3, #1
 8015758:	b2db      	uxtb	r3, r3
 801575a:	461a      	mov	r2, r3
			SX126x.PacketParams.Params.Gfsk.HeaderType =
 801575c:	4b6f      	ldr	r3, [pc, #444]	@ (801591c <RadioSetTxConfig+0x238>)
 801575e:	77da      	strb	r2, [r3, #31]
							RADIO_PACKET_VARIABLE_LENGTH;

			if (crcOn == true) {
 8015760:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8015764:	2b00      	cmp	r3, #0
 8015766:	d004      	beq.n	8015772 <RadioSetTxConfig+0x8e>
				SX126x.PacketParams.Params.Gfsk.CrcLength =
 8015768:	4b6c      	ldr	r3, [pc, #432]	@ (801591c <RadioSetTxConfig+0x238>)
 801576a:	22f2      	movs	r2, #242	@ 0xf2
 801576c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8015770:	e003      	b.n	801577a <RadioSetTxConfig+0x96>
						RADIO_CRC_2_BYTES_CCIT;
			}
			else {
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015772:	4b6a      	ldr	r3, [pc, #424]	@ (801591c <RadioSetTxConfig+0x238>)
 8015774:	2201      	movs	r2, #1
 8015776:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			}
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801577a:	4b68      	ldr	r3, [pc, #416]	@ (801591c <RadioSetTxConfig+0x238>)
 801577c:	2201      	movs	r2, #1
 801577e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			RadioStandby();
 8015782:	f000 faf3 	bl	8015d6c <RadioStandby>
			RadioSetModem(
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 8015786:	4b65      	ldr	r3, [pc, #404]	@ (801591c <RadioSetTxConfig+0x238>)
 8015788:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 801578c:	2b00      	cmp	r3, #0
 801578e:	bf14      	ite	ne
 8015790:	2301      	movne	r3, #1
 8015792:	2300      	moveq	r3, #0
 8015794:	b2db      	uxtb	r3, r3
 8015796:	4618      	mov	r0, r3
 8015798:	f7ff fd84 	bl	80152a4 <RadioSetModem>
							MODEM_FSK : MODEM_LORA);
			SX126xSetModulationParams(&SX126x.ModulationParams);
 801579c:	4860      	ldr	r0, [pc, #384]	@ (8015920 <RadioSetTxConfig+0x23c>)
 801579e:	f001 fa97 	bl	8016cd0 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 80157a2:	4860      	ldr	r0, [pc, #384]	@ (8015924 <RadioSetTxConfig+0x240>)
 80157a4:	f001 fb32 	bl	8016e0c <SX126xSetPacketParams>
			uint8_t syncWord[8];
			syncWord[0] = 0xC1;
 80157a8:	23c1      	movs	r3, #193	@ 0xc1
 80157aa:	743b      	strb	r3, [r7, #16]
			syncWord[1] = 0x94;
 80157ac:	2394      	movs	r3, #148	@ 0x94
 80157ae:	747b      	strb	r3, [r7, #17]
			syncWord[2] = 0xC1;
 80157b0:	23c1      	movs	r3, #193	@ 0xc1
 80157b2:	74bb      	strb	r3, [r7, #18]
			syncWord[3] = 0x00;
 80157b4:	2300      	movs	r3, #0
 80157b6:	74fb      	strb	r3, [r7, #19]
			syncWord[4] = 0x00;
 80157b8:	2300      	movs	r3, #0
 80157ba:	753b      	strb	r3, [r7, #20]
			syncWord[5] = 0x00;
 80157bc:	2300      	movs	r3, #0
 80157be:	757b      	strb	r3, [r7, #21]
			syncWord[6] = 0x00;
 80157c0:	2300      	movs	r3, #0
 80157c2:	75bb      	strb	r3, [r7, #22]
			syncWord[7] = 0x00;
 80157c4:	2300      	movs	r3, #0
 80157c6:	75fb      	strb	r3, [r7, #23]
			SX126xSetSyncWord(syncWord);
 80157c8:	f107 0310 	add.w	r3, r7, #16
 80157cc:	4618      	mov	r0, r3
 80157ce:	f000 ff50 	bl	8016672 <SX126xSetSyncWord>
			// SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
			SX126xSetWhiteningSeed(0x01FF);
 80157d2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80157d6:	f000 ff9b 	bl	8016710 <SX126xSetWhiteningSeed>
		break;
 80157da:	e06f      	b.n	80158bc <RadioSetTxConfig+0x1d8>

		case MODEM_LORA:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80157dc:	4b4f      	ldr	r3, [pc, #316]	@ (801591c <RadioSetTxConfig+0x238>)
 80157de:	2201      	movs	r2, #1
 80157e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
					(RadioLoRaSpreadingFactors_t) datarate;
 80157e4:	6a3b      	ldr	r3, [r7, #32]
 80157e6:	b2da      	uxtb	r2, r3
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
 80157e8:	4b4c      	ldr	r3, [pc, #304]	@ (801591c <RadioSetTxConfig+0x238>)
 80157ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
					Bandwidths[bandwidth];
 80157ee:	4a4e      	ldr	r2, [pc, #312]	@ (8015928 <RadioSetTxConfig+0x244>)
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	4413      	add	r3, r2
 80157f4:	781a      	ldrb	r2, [r3, #0]
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
 80157f6:	4b49      	ldr	r3, [pc, #292]	@ (801591c <RadioSetTxConfig+0x238>)
 80157f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			SX126x.ModulationParams.Params.LoRa.CodingRate =
 80157fc:	4a47      	ldr	r2, [pc, #284]	@ (801591c <RadioSetTxConfig+0x238>)
 80157fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015802:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
					(RadioLoRaCodingRates_t) coderate;

			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12)))
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d105      	bne.n	8015818 <RadioSetTxConfig+0x134>
 801580c:	6a3b      	ldr	r3, [r7, #32]
 801580e:	2b0b      	cmp	r3, #11
 8015810:	d008      	beq.n	8015824 <RadioSetTxConfig+0x140>
 8015812:	6a3b      	ldr	r3, [r7, #32]
 8015814:	2b0c      	cmp	r3, #12
 8015816:	d005      	beq.n	8015824 <RadioSetTxConfig+0x140>
					|| ((bandwidth == 1) && (datarate == 12))) {
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2b01      	cmp	r3, #1
 801581c:	d107      	bne.n	801582e <RadioSetTxConfig+0x14a>
 801581e:	6a3b      	ldr	r3, [r7, #32]
 8015820:	2b0c      	cmp	r3, #12
 8015822:	d104      	bne.n	801582e <RadioSetTxConfig+0x14a>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8015824:	4b3d      	ldr	r3, [pc, #244]	@ (801591c <RadioSetTxConfig+0x238>)
 8015826:	2201      	movs	r2, #1
 8015828:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801582c:	e003      	b.n	8015836 <RadioSetTxConfig+0x152>
			}
			else {
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801582e:	4b3b      	ldr	r3, [pc, #236]	@ (801591c <RadioSetTxConfig+0x238>)
 8015830:	2200      	movs	r2, #0
 8015832:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
			}

			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8015836:	4b39      	ldr	r3, [pc, #228]	@ (801591c <RadioSetTxConfig+0x238>)
 8015838:	2201      	movs	r2, #1
 801583a:	761a      	strb	r2, [r3, #24]

			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5)
 801583c:	4b37      	ldr	r3, [pc, #220]	@ (801591c <RadioSetTxConfig+0x238>)
 801583e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8015842:	2b05      	cmp	r3, #5
 8015844:	d004      	beq.n	8015850 <RadioSetTxConfig+0x16c>
					|| (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 8015846:	4b35      	ldr	r3, [pc, #212]	@ (801591c <RadioSetTxConfig+0x238>)
 8015848:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801584c:	2b06      	cmp	r3, #6
 801584e:	d10a      	bne.n	8015866 <RadioSetTxConfig+0x182>
							== LORA_SF6)) {
				if (preambleLen < 12) {
 8015850:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015852:	2b0b      	cmp	r3, #11
 8015854:	d803      	bhi.n	801585e <RadioSetTxConfig+0x17a>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8015856:	4b31      	ldr	r3, [pc, #196]	@ (801591c <RadioSetTxConfig+0x238>)
 8015858:	220c      	movs	r2, #12
 801585a:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12) {
 801585c:	e006      	b.n	801586c <RadioSetTxConfig+0x188>
				}
				else {
					SX126x.PacketParams.Params.LoRa.PreambleLength =
 801585e:	4a2f      	ldr	r2, [pc, #188]	@ (801591c <RadioSetTxConfig+0x238>)
 8015860:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015862:	8493      	strh	r3, [r2, #36]	@ 0x24
				if (preambleLen < 12) {
 8015864:	e002      	b.n	801586c <RadioSetTxConfig+0x188>
							preambleLen;
				}
			}
			else {
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015866:	4a2d      	ldr	r2, [pc, #180]	@ (801591c <RadioSetTxConfig+0x238>)
 8015868:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801586a:	8493      	strh	r3, [r2, #36]	@ 0x24
			}

			SX126x.PacketParams.Params.LoRa.HeaderType =
					(RadioLoRaPacketLengthsMode_t) fixLen;
 801586c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
			SX126x.PacketParams.Params.LoRa.HeaderType =
 8015870:	4b2a      	ldr	r3, [pc, #168]	@ (801591c <RadioSetTxConfig+0x238>)
 8015872:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8015876:	4b2d      	ldr	r3, [pc, #180]	@ (801592c <RadioSetTxConfig+0x248>)
 8015878:	781a      	ldrb	r2, [r3, #0]
 801587a:	4b28      	ldr	r3, [pc, #160]	@ (801591c <RadioSetTxConfig+0x238>)
 801587c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			SX126x.PacketParams.Params.LoRa.CrcMode =
					(RadioLoRaCrcModes_t) crcOn;
 8015880:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
			SX126x.PacketParams.Params.LoRa.CrcMode =
 8015884:	4b25      	ldr	r3, [pc, #148]	@ (801591c <RadioSetTxConfig+0x238>)
 8015886:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			SX126x.PacketParams.Params.LoRa.InvertIQ =
					(RadioLoRaIQModes_t) iqInverted;
 801588a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
			SX126x.PacketParams.Params.LoRa.InvertIQ =
 801588e:	4b23      	ldr	r3, [pc, #140]	@ (801591c <RadioSetTxConfig+0x238>)
 8015890:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

			RadioStandby();
 8015894:	f000 fa6a 	bl	8015d6c <RadioStandby>
			RadioSetModem(
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 8015898:	4b20      	ldr	r3, [pc, #128]	@ (801591c <RadioSetTxConfig+0x238>)
 801589a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 801589e:	2b00      	cmp	r3, #0
 80158a0:	bf14      	ite	ne
 80158a2:	2301      	movne	r3, #1
 80158a4:	2300      	moveq	r3, #0
 80158a6:	b2db      	uxtb	r3, r3
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7ff fcfb 	bl	80152a4 <RadioSetModem>
							MODEM_FSK : MODEM_LORA);
			SX126xSetModulationParams(&SX126x.ModulationParams);
 80158ae:	481c      	ldr	r0, [pc, #112]	@ (8015920 <RadioSetTxConfig+0x23c>)
 80158b0:	f001 fa0e 	bl	8016cd0 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 80158b4:	481b      	ldr	r0, [pc, #108]	@ (8015924 <RadioSetTxConfig+0x240>)
 80158b6:	f001 faa9 	bl	8016e0c <SX126xSetPacketParams>
		break;
 80158ba:	bf00      	nop
	}

	// WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see DS_SX1261-2_V1.2 datasheet chapter 15.1
	if ((modem == MODEM_LORA)
 80158bc:	7bfb      	ldrb	r3, [r7, #15]
 80158be:	2b01      	cmp	r3, #1
 80158c0:	d112      	bne.n	80158e8 <RadioSetTxConfig+0x204>
			&& (SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500)) {
 80158c2:	4b16      	ldr	r3, [pc, #88]	@ (801591c <RadioSetTxConfig+0x238>)
 80158c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80158c8:	2b06      	cmp	r3, #6
 80158ca:	d10d      	bne.n	80158e8 <RadioSetTxConfig+0x204>
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) & ~(1 << 2));
 80158cc:	f640 0089 	movw	r0, #2185	@ 0x889
 80158d0:	f001 fd7c 	bl	80173cc <SX126xReadRegister>
 80158d4:	4603      	mov	r3, r0
 80158d6:	f023 0304 	bic.w	r3, r3, #4
 80158da:	b2db      	uxtb	r3, r3
 80158dc:	4619      	mov	r1, r3
 80158de:	f640 0089 	movw	r0, #2185	@ 0x889
 80158e2:	f001 fd27 	bl	8017334 <SX126xWriteRegister>
 80158e6:	e00c      	b.n	8015902 <RadioSetTxConfig+0x21e>
	}
	else {
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) | (1 << 2));
 80158e8:	f640 0089 	movw	r0, #2185	@ 0x889
 80158ec:	f001 fd6e 	bl	80173cc <SX126xReadRegister>
 80158f0:	4603      	mov	r3, r0
 80158f2:	f043 0304 	orr.w	r3, r3, #4
 80158f6:	b2db      	uxtb	r3, r3
 80158f8:	4619      	mov	r1, r3
 80158fa:	f640 0089 	movw	r0, #2185	@ 0x889
 80158fe:	f001 fd19 	bl	8017334 <SX126xWriteRegister>
	}
	// WORKAROUND END

	SX126xSetRfTxPower(power);
 8015902:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015906:	4618      	mov	r0, r3
 8015908:	f001 fde2 	bl	80174d0 <SX126xSetRfTxPower>
	TxTimeout = timeout;
 801590c:	4a08      	ldr	r2, [pc, #32]	@ (8015930 <RadioSetTxConfig+0x24c>)
 801590e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015910:	6013      	str	r3, [r2, #0]
}
 8015912:	bf00      	nop
 8015914:	3718      	adds	r7, #24
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}
 801591a:	bf00      	nop
 801591c:	20001fb4 	.word	0x20001fb4
 8015920:	20001ff4 	.word	0x20001ff4
 8015924:	20001fcc 	.word	0x20001fcc
 8015928:	08021268 	.word	0x08021268
 801592c:	200003f8 	.word	0x200003f8
 8015930:	20001e88 	.word	0x20001e88

08015934 <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency(uint32_t frequency) {
 8015934:	b480      	push	{r7}
 8015936:	b083      	sub	sp, #12
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
	return true;
 801593c:	2301      	movs	r3, #1
}
 801593e:	4618      	mov	r0, r3
 8015940:	370c      	adds	r7, #12
 8015942:	46bd      	mov	sp, r7
 8015944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015948:	4770      	bx	lr
 801594a:	0000      	movs	r0, r0
 801594c:	0000      	movs	r0, r0
	...

08015950 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir(RadioModems_t modem, uint8_t pktLen) {
 8015950:	b5b0      	push	{r4, r5, r7, lr}
 8015952:	b090      	sub	sp, #64	@ 0x40
 8015954:	af00      	add	r7, sp, #0
 8015956:	4603      	mov	r3, r0
 8015958:	460a      	mov	r2, r1
 801595a:	71fb      	strb	r3, [r7, #7]
 801595c:	4613      	mov	r3, r2
 801595e:	71bb      	strb	r3, [r7, #6]
	uint32_t airTime = 0;
 8015960:	2300      	movs	r3, #0
 8015962:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch (modem) {
 8015964:	79fb      	ldrb	r3, [r7, #7]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d003      	beq.n	8015972 <RadioTimeOnAir+0x22>
 801596a:	2b01      	cmp	r3, #1
 801596c:	f000 8095 	beq.w	8015a9a <RadioTimeOnAir+0x14a>
 8015970:	e156      	b.n	8015c20 <RadioTimeOnAir+0x2d0>
		case MODEM_FSK: {
			// CRC Length calculation, catering for each type of CRC Calc offered in libary
			uint8_t crcLength =
 8015972:	4bb1      	ldr	r3, [pc, #708]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 8015974:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8015978:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					(uint8_t) (SX126x.PacketParams.Params.Gfsk.CrcLength);
			if ((crcLength == RADIO_CRC_2_BYTES)
 801597c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8015980:	2b02      	cmp	r3, #2
 8015982:	d00b      	beq.n	801599c <RadioTimeOnAir+0x4c>
					|| (crcLength == RADIO_CRC_2_BYTES_INV)
 8015984:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8015988:	2b06      	cmp	r3, #6
 801598a:	d007      	beq.n	801599c <RadioTimeOnAir+0x4c>
					|| (crcLength == RADIO_CRC_2_BYTES_IBM)
 801598c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8015990:	2bf1      	cmp	r3, #241	@ 0xf1
 8015992:	d003      	beq.n	801599c <RadioTimeOnAir+0x4c>
					|| (crcLength == RADIO_CRC_2_BYTES_CCIT)) {
 8015994:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8015998:	2bf2      	cmp	r3, #242	@ 0xf2
 801599a:	d103      	bne.n	80159a4 <RadioTimeOnAir+0x54>
				crcLength = 2;
 801599c:	2302      	movs	r3, #2
 801599e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80159a2:	e00e      	b.n	80159c2 <RadioTimeOnAir+0x72>
			}
			else if ((crcLength == RADIO_CRC_1_BYTES)
 80159a4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d003      	beq.n	80159b4 <RadioTimeOnAir+0x64>
					|| (crcLength == RADIO_CRC_1_BYTES_INV)) {
 80159ac:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80159b0:	2b04      	cmp	r3, #4
 80159b2:	d103      	bne.n	80159bc <RadioTimeOnAir+0x6c>
				crcLength = 1;
 80159b4:	2301      	movs	r3, #1
 80159b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80159ba:	e002      	b.n	80159c2 <RadioTimeOnAir+0x72>
			}
			else {
				crcLength = 0;
 80159bc:	2300      	movs	r3, #0
 80159be:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			}
			airTime =
					rint(
							(8
									* (SX126x.PacketParams.Params.Gfsk.PreambleLength
 80159c2:	4b9d      	ldr	r3, [pc, #628]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 80159c4:	8b5b      	ldrh	r3, [r3, #26]
 80159c6:	461a      	mov	r2, r3
											+ (SX126x.PacketParams.Params.Gfsk.SyncWordLength
 80159c8:	4b9b      	ldr	r3, [pc, #620]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 80159ca:	7f5b      	ldrb	r3, [r3, #29]
													>> 3)
 80159cc:	08db      	lsrs	r3, r3, #3
 80159ce:	b2db      	uxtb	r3, r3
											+ (SX126x.PacketParams.Params.Gfsk.SyncWordLength
 80159d0:	4413      	add	r3, r2
											+ ((SX126x.PacketParams.Params.Gfsk.HeaderType
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7ea fdb6 	bl	8000544 <__aeabi_i2d>
 80159d8:	4602      	mov	r2, r0
 80159da:	460b      	mov	r3, r1
 80159dc:	4996      	ldr	r1, [pc, #600]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 80159de:	7fc9      	ldrb	r1, [r1, #31]
													== RADIO_PACKET_FIXED_LENGTH) ?
													0.0 : 1.0) + pktLen
 80159e0:	2900      	cmp	r1, #0
 80159e2:	d104      	bne.n	80159ee <RadioTimeOnAir+0x9e>
 80159e4:	f04f 0000 	mov.w	r0, #0
 80159e8:	f04f 0100 	mov.w	r1, #0
 80159ec:	e002      	b.n	80159f4 <RadioTimeOnAir+0xa4>
 80159ee:	f04f 0000 	mov.w	r0, #0
 80159f2:	4992      	ldr	r1, [pc, #584]	@ (8015c3c <RadioTimeOnAir+0x2ec>)
											+ ((SX126x.PacketParams.Params.Gfsk.HeaderType
 80159f4:	f7ea fc5a 	bl	80002ac <__adddf3>
 80159f8:	4602      	mov	r2, r0
 80159fa:	460b      	mov	r3, r1
 80159fc:	4614      	mov	r4, r2
 80159fe:	461d      	mov	r5, r3
													0.0 : 1.0) + pktLen
 8015a00:	79bb      	ldrb	r3, [r7, #6]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7ea fd9e 	bl	8000544 <__aeabi_i2d>
 8015a08:	4602      	mov	r2, r0
 8015a0a:	460b      	mov	r3, r1
 8015a0c:	4620      	mov	r0, r4
 8015a0e:	4629      	mov	r1, r5
 8015a10:	f7ea fc4c 	bl	80002ac <__adddf3>
 8015a14:	4602      	mov	r2, r0
 8015a16:	460b      	mov	r3, r1
 8015a18:	4614      	mov	r4, r2
 8015a1a:	461d      	mov	r5, r3
											+ (crcLength))
 8015a1c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7ea fd8f 	bl	8000544 <__aeabi_i2d>
 8015a26:	4602      	mov	r2, r0
 8015a28:	460b      	mov	r3, r1
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	4629      	mov	r1, r5
 8015a2e:	f7ea fc3d 	bl	80002ac <__adddf3>
 8015a32:	4602      	mov	r2, r0
 8015a34:	460b      	mov	r3, r1
 8015a36:	4610      	mov	r0, r2
 8015a38:	4619      	mov	r1, r3
									* (SX126x.PacketParams.Params.Gfsk.PreambleLength
 8015a3a:	f04f 0200 	mov.w	r2, #0
 8015a3e:	4b80      	ldr	r3, [pc, #512]	@ (8015c40 <RadioTimeOnAir+0x2f0>)
 8015a40:	f7ea fdea 	bl	8000618 <__aeabi_dmul>
 8015a44:	4602      	mov	r2, r0
 8015a46:	460b      	mov	r3, r1
 8015a48:	4614      	mov	r4, r2
 8015a4a:	461d      	mov	r5, r3
									/ SX126x.ModulationParams.Params.Gfsk.BitRate)
 8015a4c:	4b7a      	ldr	r3, [pc, #488]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 8015a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7ea fd67 	bl	8000524 <__aeabi_ui2d>
 8015a56:	4602      	mov	r2, r0
 8015a58:	460b      	mov	r3, r1
 8015a5a:	4620      	mov	r0, r4
 8015a5c:	4629      	mov	r1, r5
 8015a5e:	f7ea ff05 	bl	800086c <__aeabi_ddiv>
 8015a62:	4602      	mov	r2, r0
 8015a64:	460b      	mov	r3, r1
 8015a66:	4610      	mov	r0, r2
 8015a68:	4619      	mov	r1, r3
					rint(
 8015a6a:	f04f 0200 	mov.w	r2, #0
 8015a6e:	4b75      	ldr	r3, [pc, #468]	@ (8015c44 <RadioTimeOnAir+0x2f4>)
 8015a70:	f7ea fdd2 	bl	8000618 <__aeabi_dmul>
 8015a74:	4602      	mov	r2, r0
 8015a76:	460b      	mov	r3, r1
 8015a78:	ec43 2b17 	vmov	d7, r2, r3
 8015a7c:	eeb0 0a47 	vmov.f32	s0, s14
 8015a80:	eef0 0a67 	vmov.f32	s1, s15
 8015a84:	f00a fee0 	bl	8020848 <rint>
 8015a88:	ec53 2b10 	vmov	r2, r3, d0
			airTime =
 8015a8c:	4610      	mov	r0, r2
 8015a8e:	4619      	mov	r1, r3
 8015a90:	f7eb f89a 	bl	8000bc8 <__aeabi_d2uiz>
 8015a94:	4603      	mov	r3, r0
 8015a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
									* 1e3);
		}
		break;
 8015a98:	e0c2      	b.n	8015c20 <RadioTimeOnAir+0x2d0>
		case MODEM_LORA: {
			double ts =
					RadioLoRaSymbTime[SX126x.ModulationParams.Params.LoRa.Bandwidth
 8015a9a:	4b67      	ldr	r3, [pc, #412]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 8015a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
							- 4][12
 8015aa0:	1f1a      	subs	r2, r3, #4
							- SX126x.ModulationParams.Params.LoRa.SpreadingFactor];
 8015aa2:	4b65      	ldr	r3, [pc, #404]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 8015aa4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8015aa8:	f1c3 010c 	rsb	r1, r3, #12
			double ts =
 8015aac:	4866      	ldr	r0, [pc, #408]	@ (8015c48 <RadioTimeOnAir+0x2f8>)
 8015aae:	4613      	mov	r3, r2
 8015ab0:	005b      	lsls	r3, r3, #1
 8015ab2:	4413      	add	r3, r2
 8015ab4:	005b      	lsls	r3, r3, #1
 8015ab6:	440b      	add	r3, r1
 8015ab8:	00db      	lsls	r3, r3, #3
 8015aba:	4403      	add	r3, r0
 8015abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			// time of preamble
			double tPreamble = (SX126x.PacketParams.Params.LoRa.PreambleLength
 8015ac4:	4b5c      	ldr	r3, [pc, #368]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 8015ac6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
					+ 4.25) * ts;
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f7ea fd3b 	bl	8000544 <__aeabi_i2d>
 8015ace:	f04f 0200 	mov.w	r2, #0
 8015ad2:	4b5e      	ldr	r3, [pc, #376]	@ (8015c4c <RadioTimeOnAir+0x2fc>)
 8015ad4:	f7ea fbea 	bl	80002ac <__adddf3>
 8015ad8:	4602      	mov	r2, r0
 8015ada:	460b      	mov	r3, r1
			double tPreamble = (SX126x.PacketParams.Params.LoRa.PreambleLength
 8015adc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8015ae0:	f7ea fd9a 	bl	8000618 <__aeabi_dmul>
 8015ae4:	4602      	mov	r2, r0
 8015ae6:	460b      	mov	r3, r1
 8015ae8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			// Symbol length of payload and time
			double tmp =
					ceil(
							(8 * pktLen
									- 4
 8015aec:	79bb      	ldrb	r3, [r7, #6]
 8015aee:	005b      	lsls	r3, r3, #1
											* SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 8015af0:	4a51      	ldr	r2, [pc, #324]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 8015af2:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
									- 4
 8015af6:	1a9b      	subs	r3, r3, r2
									+ 28
 8015af8:	1dda      	adds	r2, r3, #7
									+ 16
											* SX126x.PacketParams.Params.LoRa.CrcMode
 8015afa:	4b4f      	ldr	r3, [pc, #316]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 8015afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
									+ 16
 8015b00:	009b      	lsls	r3, r3, #2
 8015b02:	4413      	add	r3, r2
 8015b04:	009a      	lsls	r2, r3, #2
									- ((SX126x.PacketParams.Params.LoRa.HeaderType
 8015b06:	4b4c      	ldr	r3, [pc, #304]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 8015b08:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
											== LORA_PACKET_FIXED_LENGTH) ?
											20 : 0))
 8015b0c:	2b01      	cmp	r3, #1
 8015b0e:	d101      	bne.n	8015b14 <RadioTimeOnAir+0x1c4>
 8015b10:	2314      	movs	r3, #20
 8015b12:	e000      	b.n	8015b16 <RadioTimeOnAir+0x1c6>
 8015b14:	2300      	movs	r3, #0
									- ((SX126x.PacketParams.Params.LoRa.HeaderType
 8015b16:	1ad3      	subs	r3, r2, r3
					ceil(
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f7ea fd13 	bl	8000544 <__aeabi_i2d>
 8015b1e:	4604      	mov	r4, r0
 8015b20:	460d      	mov	r5, r1
									/ (double) (4
											* (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 8015b22:	4b45      	ldr	r3, [pc, #276]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 8015b24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8015b28:	461a      	mov	r2, r3
													- ((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize
 8015b2a:	4b43      	ldr	r3, [pc, #268]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 8015b2c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
															> 0) ? 2 : 0))))
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d001      	beq.n	8015b38 <RadioTimeOnAir+0x1e8>
 8015b34:	2302      	movs	r3, #2
 8015b36:	e000      	b.n	8015b3a <RadioTimeOnAir+0x1ea>
 8015b38:	2300      	movs	r3, #0
													- ((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize
 8015b3a:	1ad3      	subs	r3, r2, r3
											* (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 8015b3c:	009b      	lsls	r3, r3, #2
									/ (double) (4
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7ea fd00 	bl	8000544 <__aeabi_i2d>
 8015b44:	4602      	mov	r2, r0
 8015b46:	460b      	mov	r3, r1
					ceil(
 8015b48:	4620      	mov	r0, r4
 8015b4a:	4629      	mov	r1, r5
 8015b4c:	f7ea fe8e 	bl	800086c <__aeabi_ddiv>
 8015b50:	4602      	mov	r2, r0
 8015b52:	460b      	mov	r3, r1
 8015b54:	ec43 2b17 	vmov	d7, r2, r3
 8015b58:	eeb0 0a47 	vmov.f32	s0, s14
 8015b5c:	eef0 0a67 	vmov.f32	s1, s15
 8015b60:	f00a fd7a 	bl	8020658 <ceil>
 8015b64:	ec55 4b10 	vmov	r4, r5, d0
							* ((SX126x.ModulationParams.Params.LoRa.CodingRate
 8015b68:	4b33      	ldr	r3, [pc, #204]	@ (8015c38 <RadioTimeOnAir+0x2e8>)
 8015b6a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
									% 4) + 4);
 8015b6e:	f003 0303 	and.w	r3, r3, #3
 8015b72:	3304      	adds	r3, #4
							* ((SX126x.ModulationParams.Params.LoRa.CodingRate
 8015b74:	4618      	mov	r0, r3
 8015b76:	f7ea fce5 	bl	8000544 <__aeabi_i2d>
 8015b7a:	4602      	mov	r2, r0
 8015b7c:	460b      	mov	r3, r1
			double tmp =
 8015b7e:	4620      	mov	r0, r4
 8015b80:	4629      	mov	r1, r5
 8015b82:	f7ea fd49 	bl	8000618 <__aeabi_dmul>
 8015b86:	4602      	mov	r2, r0
 8015b88:	460b      	mov	r3, r1
 8015b8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
			double nPayload = 8 + ((tmp > 0) ? tmp : 0);
 8015b8e:	f04f 0200 	mov.w	r2, #0
 8015b92:	f04f 0300 	mov.w	r3, #0
 8015b96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8015b9a:	f7ea ffcd 	bl	8000b38 <__aeabi_dcmpgt>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d002      	beq.n	8015baa <RadioTimeOnAir+0x25a>
 8015ba4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8015ba8:	e003      	b.n	8015bb2 <RadioTimeOnAir+0x262>
 8015baa:	f04f 0000 	mov.w	r0, #0
 8015bae:	f04f 0100 	mov.w	r1, #0
 8015bb2:	f04f 0200 	mov.w	r2, #0
 8015bb6:	4b22      	ldr	r3, [pc, #136]	@ (8015c40 <RadioTimeOnAir+0x2f0>)
 8015bb8:	f7ea fb78 	bl	80002ac <__adddf3>
 8015bbc:	4602      	mov	r2, r0
 8015bbe:	460b      	mov	r3, r1
 8015bc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double tPayload = nPayload * ts;
 8015bc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8015bc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8015bcc:	f7ea fd24 	bl	8000618 <__aeabi_dmul>
 8015bd0:	4602      	mov	r2, r0
 8015bd2:	460b      	mov	r3, r1
 8015bd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
			// Time on air
			double tOnAir = tPreamble + tPayload;
 8015bd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015bdc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8015be0:	f7ea fb64 	bl	80002ac <__adddf3>
 8015be4:	4602      	mov	r2, r0
 8015be6:	460b      	mov	r3, r1
 8015be8:	e9c7 2302 	strd	r2, r3, [r7, #8]
			// return milli seconds
			airTime = floor(tOnAir + 0.999);
 8015bec:	a310      	add	r3, pc, #64	@ (adr r3, 8015c30 <RadioTimeOnAir+0x2e0>)
 8015bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015bf6:	f7ea fb59 	bl	80002ac <__adddf3>
 8015bfa:	4602      	mov	r2, r0
 8015bfc:	460b      	mov	r3, r1
 8015bfe:	ec43 2b17 	vmov	d7, r2, r3
 8015c02:	eeb0 0a47 	vmov.f32	s0, s14
 8015c06:	eef0 0a67 	vmov.f32	s1, s15
 8015c0a:	f00a fda1 	bl	8020750 <floor>
 8015c0e:	ec53 2b10 	vmov	r2, r3, d0
 8015c12:	4610      	mov	r0, r2
 8015c14:	4619      	mov	r1, r3
 8015c16:	f7ea ffd7 	bl	8000bc8 <__aeabi_d2uiz>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		break;
 8015c1e:	bf00      	nop
	}
	return airTime;
 8015c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8015c22:	4618      	mov	r0, r3
 8015c24:	3740      	adds	r7, #64	@ 0x40
 8015c26:	46bd      	mov	sp, r7
 8015c28:	bdb0      	pop	{r4, r5, r7, pc}
 8015c2a:	bf00      	nop
 8015c2c:	f3af 8000 	nop.w
 8015c30:	d916872b 	.word	0xd916872b
 8015c34:	3feff7ce 	.word	0x3feff7ce
 8015c38:	20001fb4 	.word	0x20001fb4
 8015c3c:	3ff00000 	.word	0x3ff00000
 8015c40:	40200000 	.word	0x40200000
 8015c44:	408f4000 	.word	0x408f4000
 8015c48:	20000368 	.word	0x20000368
 8015c4c:	40110000 	.word	0x40110000

08015c50 <RadioSend>:
 *        the radio in transmission
 *
 * \param buffer     Buffer pointer
 * \param size       Buffer size
 */
void RadioSend(uint8_t *buffer, uint8_t size) {
 8015c50:	b5b0      	push	{r4, r5, r7, lr}
 8015c52:	b0c2      	sub	sp, #264	@ 0x108
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8015c5e:	6018      	str	r0, [r3, #0]
 8015c60:	460a      	mov	r2, r1
 8015c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015c66:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8015c6a:	701a      	strb	r2, [r3, #0]
	LOGD(TAG, "SEND");
 8015c6c:	4b31      	ldr	r3, [pc, #196]	@ (8015d34 <RadioSend+0xe4>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	4a31      	ldr	r2, [pc, #196]	@ (8015d38 <RadioSend+0xe8>)
 8015c72:	2100      	movs	r1, #0
 8015c74:	4618      	mov	r0, r3
 8015c76:	f7eb fc3f 	bl	80014f8 <LOG_LEVEL_DEBUG>
	uint8_t x[255] = {0};
 8015c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015c7e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8015c82:	2200      	movs	r2, #0
 8015c84:	601a      	str	r2, [r3, #0]
 8015c86:	3304      	adds	r3, #4
 8015c88:	22fb      	movs	r2, #251	@ 0xfb
 8015c8a:	2100      	movs	r1, #0
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f002 ff95 	bl	8018bbc <memset>
	memcpy(x, buffer, size);
 8015c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015c96:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8015c9a:	781a      	ldrb	r2, [r3, #0]
 8015c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015ca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8015ca4:	f107 0008 	add.w	r0, r7, #8
 8015ca8:	6819      	ldr	r1, [r3, #0]
 8015caa:	f003 fe39 	bl	8019920 <memcpy>
	SX126xTXena();
 8015cae:	f001 fc3e 	bl	801752e <SX126xTXena>
	SX126xSetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	f240 2101 	movw	r1, #513	@ 0x201
 8015cba:	f240 2001 	movw	r0, #513	@ 0x201
 8015cbe:	f000 fed7 	bl	8016a70 <SX126xSetDioIrqParams>
			IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);

	if (SX126xGetPacketType() == PACKET_TYPE_LORA) {
 8015cc2:	f000 ff8f 	bl	8016be4 <SX126xGetPacketType>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	2b01      	cmp	r3, #1
 8015cca:	d108      	bne.n	8015cde <RadioSend+0x8e>
		SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 8015ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8015d3c <RadioSend+0xec>)
 8015cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015cd2:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8015cd6:	781b      	ldrb	r3, [r3, #0]
 8015cd8:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
 8015cdc:	e007      	b.n	8015cee <RadioSend+0x9e>
	}
	else {
		SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8015cde:	4a17      	ldr	r2, [pc, #92]	@ (8015d3c <RadioSend+0xec>)
 8015ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015ce4:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8015ce8:	781b      	ldrb	r3, [r3, #0]
 8015cea:	f882 3020 	strb.w	r3, [r2, #32]
	}
	SX126xSetPacketParams(&SX126x.PacketParams);
 8015cee:	4814      	ldr	r0, [pc, #80]	@ (8015d40 <RadioSend+0xf0>)
 8015cf0:	f001 f88c 	bl	8016e0c <SX126xSetPacketParams>

	SX126xSendPayload(buffer, size, 0);
 8015cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015cf8:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8015cfc:	7819      	ldrb	r1, [r3, #0]
 8015cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8015d06:	2200      	movs	r2, #0
 8015d08:	6818      	ldr	r0, [r3, #0]
 8015d0a:	f000 fc9f 	bl	801664c <SX126xSendPayload>
	TimerSetValue(&TxTimeoutTimer, TxTimeout);
 8015d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8015d44 <RadioSend+0xf4>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	2200      	movs	r2, #0
 8015d14:	461c      	mov	r4, r3
 8015d16:	4615      	mov	r5, r2
 8015d18:	4622      	mov	r2, r4
 8015d1a:	462b      	mov	r3, r5
 8015d1c:	480a      	ldr	r0, [pc, #40]	@ (8015d48 <RadioSend+0xf8>)
 8015d1e:	f001 fe3d 	bl	801799c <UTIL_TIMER_SetPeriod>
	TimerStart(&TxTimeoutTimer);
 8015d22:	4809      	ldr	r0, [pc, #36]	@ (8015d48 <RadioSend+0xf8>)
 8015d24:	f001 fd46 	bl	80177b4 <UTIL_TIMER_Start>
}
 8015d28:	bf00      	nop
 8015d2a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bdb0      	pop	{r4, r5, r7, pc}
 8015d32:	bf00      	nop
 8015d34:	20000360 	.word	0x20000360
 8015d38:	08020cc4 	.word	0x08020cc4
 8015d3c:	20001fb4 	.word	0x20001fb4
 8015d40:	20001fcc 	.word	0x20001fcc
 8015d44:	20001e88 	.word	0x20001e88
 8015d48:	20001e48 	.word	0x20001e48

08015d4c <RadioSleep>:

void RadioSleep(void) {
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b082      	sub	sp, #8
 8015d50:	af00      	add	r7, sp, #0
	SleepParams_t params = { 0 };
 8015d52:	2300      	movs	r3, #0
 8015d54:	713b      	strb	r3, [r7, #4]

	params.Fields.WarmStart = 1;
 8015d56:	793b      	ldrb	r3, [r7, #4]
 8015d58:	f043 0304 	orr.w	r3, r3, #4
 8015d5c:	713b      	strb	r3, [r7, #4]
	SX126xSetSleep(params);
 8015d5e:	7938      	ldrb	r0, [r7, #4]
 8015d60:	f000 fd23 	bl	80167aa <SX126xSetSleep>

//	vTaskDelay(2);
}
 8015d64:	bf00      	nop
 8015d66:	3708      	adds	r7, #8
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}

08015d6c <RadioStandby>:

void RadioStandby(void) {
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	af00      	add	r7, sp, #0
	SX126xSetStandby(STDBY_RC);
 8015d70:	2000      	movs	r0, #0
 8015d72:	f000 fd2d 	bl	80167d0 <SX126xSetStandby>
}
 8015d76:	bf00      	nop
 8015d78:	bd80      	pop	{r7, pc}
	...

08015d7c <RadioRx>:

void RadioRx(uint32_t timeout) {
 8015d7c:	b5b0      	push	{r4, r5, r7, lr}
 8015d7e:	b082      	sub	sp, #8
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
	SX126xRXena();
 8015d84:	f001 fbcc 	bl	8017520 <SX126xRXena>
	SX126xSetDioIrqParams(
 8015d88:	2300      	movs	r3, #0
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	f240 2162 	movw	r1, #610	@ 0x262
 8015d90:	f240 2062 	movw	r0, #610	@ 0x262
 8015d94:	f000 fe6c 	bl	8016a70 <SX126xSetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);

	// Even Continous mode is selected, put a timeout here
	if (timeout != 0) {
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d00b      	beq.n	8015db6 <RadioRx+0x3a>
		TimerSetValue(&RxTimeoutTimer, timeout);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2200      	movs	r2, #0
 8015da2:	461c      	mov	r4, r3
 8015da4:	4615      	mov	r5, r2
 8015da6:	4622      	mov	r2, r4
 8015da8:	462b      	mov	r3, r5
 8015daa:	4810      	ldr	r0, [pc, #64]	@ (8015dec <RadioRx+0x70>)
 8015dac:	f001 fdf6 	bl	801799c <UTIL_TIMER_SetPeriod>
		TimerStart(&RxTimeoutTimer);
 8015db0:	480e      	ldr	r0, [pc, #56]	@ (8015dec <RadioRx+0x70>)
 8015db2:	f001 fcff 	bl	80177b4 <UTIL_TIMER_Start>
	}
	if (RxContinuous == true) {
 8015db6:	4b0e      	ldr	r3, [pc, #56]	@ (8015df0 <RadioRx+0x74>)
 8015db8:	781b      	ldrb	r3, [r3, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d004      	beq.n	8015dc8 <RadioRx+0x4c>
		SX126xSetRx(0xFFFFFF); // Rx Continuous
 8015dbe:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8015dc2:	f000 fd3d 	bl	8016840 <SX126xSetRx>
 8015dc6:	e005      	b.n	8015dd4 <RadioRx+0x58>
	}
	else {
		SX126xSetRx(RxTimeout << 6);
 8015dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8015df4 <RadioRx+0x78>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	019b      	lsls	r3, r3, #6
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f000 fd36 	bl	8016840 <SX126xSetRx>
	}

	LOGI(TAG, "RX MODE, timeout = %lu", timeout);
 8015dd4:	4b08      	ldr	r3, [pc, #32]	@ (8015df8 <RadioRx+0x7c>)
 8015dd6:	6818      	ldr	r0, [r3, #0]
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	4a08      	ldr	r2, [pc, #32]	@ (8015dfc <RadioRx+0x80>)
 8015ddc:	2100      	movs	r1, #0
 8015dde:	f7eb fb6b 	bl	80014b8 <LOG_LEVEL_INFO>
}
 8015de2:	bf00      	nop
 8015de4:	3708      	adds	r7, #8
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bdb0      	pop	{r4, r5, r7, pc}
 8015dea:	bf00      	nop
 8015dec:	20001e68 	.word	0x20001e68
 8015df0:	20001e90 	.word	0x20001e90
 8015df4:	20001e8c 	.word	0x20001e8c
 8015df8:	20000360 	.word	0x20000360
 8015dfc:	08020ccc 	.word	0x08020ccc

08015e00 <RadioRxBoosted>:

void RadioRxBoosted(uint32_t timeout) {
 8015e00:	b5b0      	push	{r4, r5, r7, lr}
 8015e02:	b082      	sub	sp, #8
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
	SX126xSetDioIrqParams(
 8015e08:	2300      	movs	r3, #0
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	f240 2162 	movw	r1, #610	@ 0x262
 8015e10:	f240 2062 	movw	r0, #610	@ 0x262
 8015e14:	f000 fe2c 	bl	8016a70 <SX126xSetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);

	if (RxContinuous == true) {
 8015e18:	4b10      	ldr	r3, [pc, #64]	@ (8015e5c <RadioRxBoosted+0x5c>)
 8015e1a:	781b      	ldrb	r3, [r3, #0]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d013      	beq.n	8015e48 <RadioRxBoosted+0x48>
		// Even Continous mode is selected, put a timeout here
		if (timeout != 0) {
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d00b      	beq.n	8015e3e <RadioRxBoosted+0x3e>
			TimerSetValue(&RxTimeoutTimer, timeout);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	2200      	movs	r2, #0
 8015e2a:	461c      	mov	r4, r3
 8015e2c:	4615      	mov	r5, r2
 8015e2e:	4622      	mov	r2, r4
 8015e30:	462b      	mov	r3, r5
 8015e32:	480b      	ldr	r0, [pc, #44]	@ (8015e60 <RadioRxBoosted+0x60>)
 8015e34:	f001 fdb2 	bl	801799c <UTIL_TIMER_SetPeriod>
			TimerStart(&RxTimeoutTimer);
 8015e38:	4809      	ldr	r0, [pc, #36]	@ (8015e60 <RadioRxBoosted+0x60>)
 8015e3a:	f001 fcbb 	bl	80177b4 <UTIL_TIMER_Start>
		}
		SX126xSetRxBoosted(0xFFFFFF); // Rx Continuous
 8015e3e:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8015e42:	f000 fd1f 	bl	8016884 <SX126xSetRxBoosted>
	}
	else {
		SX126xSetRxBoosted(RxTimeout << 6);
	}
}
 8015e46:	e005      	b.n	8015e54 <RadioRxBoosted+0x54>
		SX126xSetRxBoosted(RxTimeout << 6);
 8015e48:	4b06      	ldr	r3, [pc, #24]	@ (8015e64 <RadioRxBoosted+0x64>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	019b      	lsls	r3, r3, #6
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f000 fd18 	bl	8016884 <SX126xSetRxBoosted>
}
 8015e54:	bf00      	nop
 8015e56:	3708      	adds	r7, #8
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8015e5c:	20001e90 	.word	0x20001e90
 8015e60:	20001e68 	.word	0x20001e68
 8015e64:	20001e8c 	.word	0x20001e8c

08015e68 <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime) {
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	6039      	str	r1, [r7, #0]
	SX126xSetDioIrqParams(IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT,
 8015e72:	2300      	movs	r3, #0
 8015e74:	2200      	movs	r2, #0
 8015e76:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015e7a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8015e7e:	f000 fdf7 	bl	8016a70 <SX126xSetDioIrqParams>
			IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SX126xSetRxDutyCycle(rxTime, sleepTime);
 8015e82:	6839      	ldr	r1, [r7, #0]
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f000 fd1f 	bl	80168c8 <SX126xSetRxDutyCycle>
}
 8015e8a:	bf00      	nop
 8015e8c:	3708      	adds	r7, #8
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	bd80      	pop	{r7, pc}

08015e92 <RadioSetCadParams>:

void RadioSetCadParams(uint8_t cadSymbolNum, uint8_t cadDetPeak,
		uint8_t cadDetMin, uint8_t cadExitMode, uint32_t cadTimeout) {
 8015e92:	b590      	push	{r4, r7, lr}
 8015e94:	b085      	sub	sp, #20
 8015e96:	af02      	add	r7, sp, #8
 8015e98:	4604      	mov	r4, r0
 8015e9a:	4608      	mov	r0, r1
 8015e9c:	4611      	mov	r1, r2
 8015e9e:	461a      	mov	r2, r3
 8015ea0:	4623      	mov	r3, r4
 8015ea2:	71fb      	strb	r3, [r7, #7]
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	71bb      	strb	r3, [r7, #6]
 8015ea8:	460b      	mov	r3, r1
 8015eaa:	717b      	strb	r3, [r7, #5]
 8015eac:	4613      	mov	r3, r2
 8015eae:	713b      	strb	r3, [r7, #4]
	SX126xSetCadParams((RadioLoRaCadSymbols_t) cadSymbolNum, cadDetPeak,
 8015eb0:	793c      	ldrb	r4, [r7, #4]
 8015eb2:	797a      	ldrb	r2, [r7, #5]
 8015eb4:	79b9      	ldrb	r1, [r7, #6]
 8015eb6:	79f8      	ldrb	r0, [r7, #7]
 8015eb8:	69bb      	ldr	r3, [r7, #24]
 8015eba:	9300      	str	r3, [sp, #0]
 8015ebc:	4623      	mov	r3, r4
 8015ebe:	f001 f82d 	bl	8016f1c <SX126xSetCadParams>
			cadDetMin, (RadioCadExitModes_t) cadExitMode, cadTimeout);
}
 8015ec2:	bf00      	nop
 8015ec4:	370c      	adds	r7, #12
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	bd90      	pop	{r4, r7, pc}

08015eca <RadioStartCad>:

void RadioStartCad(void) {
 8015eca:	b580      	push	{r7, lr}
 8015ecc:	af00      	add	r7, sp, #0
	SX126xRXena();
 8015ece:	f001 fb27 	bl	8017520 <SX126xRXena>
	SX126xSetDioIrqParams(IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED,
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8015eda:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8015ede:	f000 fdc7 	bl	8016a70 <SX126xSetDioIrqParams>
			IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);
	SX126xSetCad();
 8015ee2:	f000 fd1a 	bl	801691a <SX126xSetCad>
}
 8015ee6:	bf00      	nop
 8015ee8:	bd80      	pop	{r7, pc}
	...

08015eec <RadioSetTxContinuousWave>:
 *
 * \param freq       Channel RF frequency
 * \param power      Sets the output power [dBm]
 * \param time       Transmission mode timeout [s]
 */
void RadioSetTxContinuousWave(uint32_t freq, int8_t power, uint16_t time) {
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b082      	sub	sp, #8
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	70fb      	strb	r3, [r7, #3]
 8015ef8:	4613      	mov	r3, r2
 8015efa:	803b      	strh	r3, [r7, #0]
	SX126xSetRfFrequency(freq);
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f000 fe17 	bl	8016b30 <SX126xSetRfFrequency>
	SX126xSetRfTxPower(power);
 8015f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015f06:	4618      	mov	r0, r3
 8015f08:	f001 fae2 	bl	80174d0 <SX126xSetRfTxPower>
	SX126xSetTxContinuousWave();
 8015f0c:	f000 fd11 	bl	8016932 <SX126xSetTxContinuousWave>

	TimerSetValue(&TxTimeoutTimer, time * 1e3);
 8015f10:	883b      	ldrh	r3, [r7, #0]
 8015f12:	4618      	mov	r0, r3
 8015f14:	f7ea fb16 	bl	8000544 <__aeabi_i2d>
 8015f18:	f04f 0200 	mov.w	r2, #0
 8015f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8015f48 <RadioSetTxContinuousWave+0x5c>)
 8015f1e:	f7ea fb7b 	bl	8000618 <__aeabi_dmul>
 8015f22:	4602      	mov	r2, r0
 8015f24:	460b      	mov	r3, r1
 8015f26:	4610      	mov	r0, r2
 8015f28:	4619      	mov	r1, r3
 8015f2a:	f7ea fed5 	bl	8000cd8 <__aeabi_d2ulz>
 8015f2e:	4602      	mov	r2, r0
 8015f30:	460b      	mov	r3, r1
 8015f32:	4806      	ldr	r0, [pc, #24]	@ (8015f4c <RadioSetTxContinuousWave+0x60>)
 8015f34:	f001 fd32 	bl	801799c <UTIL_TIMER_SetPeriod>
	TimerStart(&TxTimeoutTimer);
 8015f38:	4804      	ldr	r0, [pc, #16]	@ (8015f4c <RadioSetTxContinuousWave+0x60>)
 8015f3a:	f001 fc3b 	bl	80177b4 <UTIL_TIMER_Start>
}
 8015f3e:	bf00      	nop
 8015f40:	3708      	adds	r7, #8
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}
 8015f46:	bf00      	nop
 8015f48:	408f4000 	.word	0x408f4000
 8015f4c:	20001e48 	.word	0x20001e48

08015f50 <RadioRssi>:

int16_t RadioRssi(RadioModems_t modem) {
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b082      	sub	sp, #8
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	4603      	mov	r3, r0
 8015f58:	71fb      	strb	r3, [r7, #7]
	return SX126xGetRssiInst();
 8015f5a:	f001 f828 	bl	8016fae <SX126xGetRssiInst>
 8015f5e:	4603      	mov	r3, r0
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <RadioWrite>:
 * \brief Writes the radio register at the specified address
 *
 * \param  addr Register address
 * \param  data New register value
 */
void RadioWrite(uint16_t addr, uint8_t data) {
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b082      	sub	sp, #8
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	4603      	mov	r3, r0
 8015f70:	460a      	mov	r2, r1
 8015f72:	80fb      	strh	r3, [r7, #6]
 8015f74:	4613      	mov	r3, r2
 8015f76:	717b      	strb	r3, [r7, #5]
	SX126xWriteRegister(addr, data);
 8015f78:	797a      	ldrb	r2, [r7, #5]
 8015f7a:	88fb      	ldrh	r3, [r7, #6]
 8015f7c:	4611      	mov	r1, r2
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f001 f9d8 	bl	8017334 <SX126xWriteRegister>
}
 8015f84:	bf00      	nop
 8015f86:	3708      	adds	r7, #8
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}

08015f8c <RadioRead>:
/*!
 * \brief Reads the radio register at the specified address
 *
 * \param  addr Register address
 */
uint8_t RadioRead(uint16_t addr) {
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b082      	sub	sp, #8
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	4603      	mov	r3, r0
 8015f94:	80fb      	strh	r3, [r7, #6]
	return SX126xReadRegister(addr);
 8015f96:	88fb      	ldrh	r3, [r7, #6]
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f001 fa17 	bl	80173cc <SX126xReadRegister>
 8015f9e:	4603      	mov	r3, r0
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}

08015fa8 <RadioWriteBuffer>:

void RadioWriteBuffer(uint16_t addr, uint8_t *buffer, uint8_t size) {
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	4603      	mov	r3, r0
 8015fb0:	6039      	str	r1, [r7, #0]
 8015fb2:	80fb      	strh	r3, [r7, #6]
 8015fb4:	4613      	mov	r3, r2
 8015fb6:	717b      	strb	r3, [r7, #5]
	SX126xWriteRegisters(addr, buffer, size);
 8015fb8:	797b      	ldrb	r3, [r7, #5]
 8015fba:	b29a      	uxth	r2, r3
 8015fbc:	88fb      	ldrh	r3, [r7, #6]
 8015fbe:	6839      	ldr	r1, [r7, #0]
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f001 f97f 	bl	80172c4 <SX126xWriteRegisters>
}
 8015fc6:	bf00      	nop
 8015fc8:	3708      	adds	r7, #8
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}

08015fce <RadioReadBuffer>:

void RadioReadBuffer(uint16_t addr, uint8_t *buffer, uint8_t size) {
 8015fce:	b580      	push	{r7, lr}
 8015fd0:	b082      	sub	sp, #8
 8015fd2:	af00      	add	r7, sp, #0
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	6039      	str	r1, [r7, #0]
 8015fd8:	80fb      	strh	r3, [r7, #6]
 8015fda:	4613      	mov	r3, r2
 8015fdc:	717b      	strb	r3, [r7, #5]
	SX126xReadRegisters(addr, buffer, size);
 8015fde:	797b      	ldrb	r3, [r7, #5]
 8015fe0:	b29a      	uxth	r2, r3
 8015fe2:	88fb      	ldrh	r3, [r7, #6]
 8015fe4:	6839      	ldr	r1, [r7, #0]
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f001 f9b6 	bl	8017358 <SX126xReadRegisters>
}
 8015fec:	bf00      	nop
 8015fee:	3708      	adds	r7, #8
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bd80      	pop	{r7, pc}

08015ff4 <RadioSetMaxPayloadLength>:

void RadioReadFifo(uint8_t *buffer, uint8_t size) {
	SX126xReadBuffer(0, buffer, size);
}

void RadioSetMaxPayloadLength(RadioModems_t modem, uint8_t max) {
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b082      	sub	sp, #8
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	460a      	mov	r2, r1
 8015ffe:	71fb      	strb	r3, [r7, #7]
 8016000:	4613      	mov	r3, r2
 8016002:	71bb      	strb	r3, [r7, #6]
	if (modem == MODEM_LORA) {
 8016004:	79fb      	ldrb	r3, [r7, #7]
 8016006:	2b01      	cmp	r3, #1
 8016008:	d10b      	bne.n	8016022 <RadioSetMaxPayloadLength+0x2e>
		SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801600a:	4a0f      	ldr	r2, [pc, #60]	@ (8016048 <RadioSetMaxPayloadLength+0x54>)
 801600c:	79bb      	ldrb	r3, [r7, #6]
 801600e:	7013      	strb	r3, [r2, #0]
 8016010:	4b0d      	ldr	r3, [pc, #52]	@ (8016048 <RadioSetMaxPayloadLength+0x54>)
 8016012:	781a      	ldrb	r2, [r3, #0]
 8016014:	4b0d      	ldr	r3, [pc, #52]	@ (801604c <RadioSetMaxPayloadLength+0x58>)
 8016016:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		SX126xSetPacketParams(&SX126x.PacketParams);
 801601a:	480d      	ldr	r0, [pc, #52]	@ (8016050 <RadioSetMaxPayloadLength+0x5c>)
 801601c:	f000 fef6 	bl	8016e0c <SX126xSetPacketParams>
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength =
					max;
			SX126xSetPacketParams(&SX126x.PacketParams);
		}
	}
}
 8016020:	e00e      	b.n	8016040 <RadioSetMaxPayloadLength+0x4c>
		if (SX126x.PacketParams.Params.Gfsk.HeaderType
 8016022:	4b0a      	ldr	r3, [pc, #40]	@ (801604c <RadioSetMaxPayloadLength+0x58>)
 8016024:	7fdb      	ldrb	r3, [r3, #31]
 8016026:	2b01      	cmp	r3, #1
 8016028:	d10a      	bne.n	8016040 <RadioSetMaxPayloadLength+0x4c>
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength =
 801602a:	4a07      	ldr	r2, [pc, #28]	@ (8016048 <RadioSetMaxPayloadLength+0x54>)
 801602c:	79bb      	ldrb	r3, [r7, #6]
 801602e:	7013      	strb	r3, [r2, #0]
 8016030:	4b05      	ldr	r3, [pc, #20]	@ (8016048 <RadioSetMaxPayloadLength+0x54>)
 8016032:	781a      	ldrb	r2, [r3, #0]
 8016034:	4b05      	ldr	r3, [pc, #20]	@ (801604c <RadioSetMaxPayloadLength+0x58>)
 8016036:	f883 2020 	strb.w	r2, [r3, #32]
			SX126xSetPacketParams(&SX126x.PacketParams);
 801603a:	4805      	ldr	r0, [pc, #20]	@ (8016050 <RadioSetMaxPayloadLength+0x5c>)
 801603c:	f000 fee6 	bl	8016e0c <SX126xSetPacketParams>
}
 8016040:	bf00      	nop
 8016042:	3708      	adds	r7, #8
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}
 8016048:	200003f8 	.word	0x200003f8
 801604c:	20001fb4 	.word	0x20001fb4
 8016050:	20001fcc 	.word	0x20001fcc

08016054 <RadioSetPublicNetwork>:

void RadioSetPublicNetwork(bool enable) {
 8016054:	b580      	push	{r7, lr}
 8016056:	b082      	sub	sp, #8
 8016058:	af00      	add	r7, sp, #0
 801605a:	4603      	mov	r3, r0
 801605c:	71fb      	strb	r3, [r7, #7]
	RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 801605e:	4a13      	ldr	r2, [pc, #76]	@ (80160ac <RadioSetPublicNetwork+0x58>)
 8016060:	79fb      	ldrb	r3, [r7, #7]
 8016062:	7013      	strb	r3, [r2, #0]
 8016064:	4b11      	ldr	r3, [pc, #68]	@ (80160ac <RadioSetPublicNetwork+0x58>)
 8016066:	781a      	ldrb	r2, [r3, #0]
 8016068:	4b10      	ldr	r3, [pc, #64]	@ (80160ac <RadioSetPublicNetwork+0x58>)
 801606a:	705a      	strb	r2, [r3, #1]

	RadioSetModem(MODEM_LORA);
 801606c:	2001      	movs	r0, #1
 801606e:	f7ff f919 	bl	80152a4 <RadioSetModem>
	if (enable == true) {
 8016072:	79fb      	ldrb	r3, [r7, #7]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d00a      	beq.n	801608e <RadioSetPublicNetwork+0x3a>
		// Change LoRa modem SyncWord
		SX126xWriteRegister(REG_LR_SYNCWORD,
 8016078:	2134      	movs	r1, #52	@ 0x34
 801607a:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801607e:	f001 f959 	bl	8017334 <SX126xWriteRegister>
				(LORA_MAC_PUBLIC_SYNCWORD >> 8) & 0xFF);
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
 8016082:	2144      	movs	r1, #68	@ 0x44
 8016084:	f240 7041 	movw	r0, #1857	@ 0x741
 8016088:	f001 f954 	bl	8017334 <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD,
				(LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
				LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
	}
}
 801608c:	e009      	b.n	80160a2 <RadioSetPublicNetwork+0x4e>
		SX126xWriteRegister(REG_LR_SYNCWORD,
 801608e:	2114      	movs	r1, #20
 8016090:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8016094:	f001 f94e 	bl	8017334 <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
 8016098:	2124      	movs	r1, #36	@ 0x24
 801609a:	f240 7041 	movw	r0, #1857	@ 0x741
 801609e:	f001 f949 	bl	8017334 <SX126xWriteRegister>
}
 80160a2:	bf00      	nop
 80160a4:	3708      	adds	r7, #8
 80160a6:	46bd      	mov	sp, r7
 80160a8:	bd80      	pop	{r7, pc}
 80160aa:	bf00      	nop
 80160ac:	20001fac 	.word	0x20001fac

080160b0 <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime(void) {
 80160b0:	b480      	push	{r7}
 80160b2:	af00      	add	r7, sp, #0
	return (RADIO_WAKEUP_TIME);
 80160b4:	2303      	movs	r3, #3
}
 80160b6:	4618      	mov	r0, r3
 80160b8:	46bd      	mov	sp, r7
 80160ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160be:	4770      	bx	lr

080160c0 <RadioOnTxTimeoutIrq>:

void RadioOnTxTimeoutIrq(void *arg) {
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b082      	sub	sp, #8
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
	// if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL))
	// {
	// 	RadioEvents->TxTimeout();
	// }
	BoardDisableIrq();
 80160c8:	f000 fa34 	bl	8016534 <BoardDisableIrq>
	TimerTxTimeout = true;
 80160cc:	4b08      	ldr	r3, [pc, #32]	@ (80160f0 <RadioOnTxTimeoutIrq+0x30>)
 80160ce:	2201      	movs	r2, #1
 80160d0:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 80160d2:	f000 fa38 	bl	8016546 <BoardEnableIrq>
	TimerStop(&TxTimeoutTimer);
 80160d6:	4807      	ldr	r0, [pc, #28]	@ (80160f4 <RadioOnTxTimeoutIrq+0x34>)
 80160d8:	f001 fbf0 	bl	80178bc <UTIL_TIMER_Stop>

	RadioBgIrqProcess();
 80160dc:	f000 f836 	bl	801614c <RadioBgIrqProcess>
	RadioStandby();
 80160e0:	f7ff fe44 	bl	8015d6c <RadioStandby>
	RadioSleep();
 80160e4:	f7ff fe32 	bl	8015d4c <RadioSleep>
}
 80160e8:	bf00      	nop
 80160ea:	3708      	adds	r7, #8
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}
 80160f0:	20001fa9 	.word	0x20001fa9
 80160f4:	20001e48 	.word	0x20001e48

080160f8 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq(void *arg) {
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
	// if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL))
	// {
	// 	RadioEvents->RxTimeout();
	// }
	BoardDisableIrq();
 8016100:	f000 fa18 	bl	8016534 <BoardDisableIrq>
	TimerRxTimeout = true;
 8016104:	4b08      	ldr	r3, [pc, #32]	@ (8016128 <RadioOnRxTimeoutIrq+0x30>)
 8016106:	2201      	movs	r2, #1
 8016108:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 801610a:	f000 fa1c 	bl	8016546 <BoardEnableIrq>
	TimerStop(&RxTimeoutTimer);
 801610e:	4807      	ldr	r0, [pc, #28]	@ (801612c <RadioOnRxTimeoutIrq+0x34>)
 8016110:	f001 fbd4 	bl	80178bc <UTIL_TIMER_Stop>

	RadioBgIrqProcess();
 8016114:	f000 f81a 	bl	801614c <RadioBgIrqProcess>
	RadioStandby();
 8016118:	f7ff fe28 	bl	8015d6c <RadioStandby>
	RadioSleep();
 801611c:	f7ff fe16 	bl	8015d4c <RadioSleep>
}
 8016120:	bf00      	nop
 8016122:	3708      	adds	r7, #8
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}
 8016128:	20001fa8 	.word	0x20001fa8
 801612c:	20001e68 	.word	0x20001e68

08016130 <RadioOnDioIrq>:



//static BaseType_t yeild = pdTRUE;

void RadioOnDioIrq(void){
 8016130:	b580      	push	{r7, lr}
 8016132:	af00      	add	r7, sp, #0
	BoardDisableIrq();
 8016134:	f000 f9fe 	bl	8016534 <BoardDisableIrq>
	IrqFired = true;
 8016138:	4b03      	ldr	r3, [pc, #12]	@ (8016148 <RadioOnDioIrq+0x18>)
 801613a:	2201      	movs	r2, #1
 801613c:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 801613e:	f000 fa02 	bl	8016546 <BoardEnableIrq>
//	xSemaphoreGiveFromISR(_lora_sem, &yeild);
//	if (yeild) portEND_SWITCHING_ISR(yeild);
}
 8016142:	bf00      	nop
 8016144:	bd80      	pop	{r7, pc}
 8016146:	bf00      	nop
 8016148:	20001fa7 	.word	0x20001fa7

0801614c <RadioBgIrqProcess>:

void RadioBgIrqProcess(void) {
 801614c:	b590      	push	{r4, r7, lr}
 801614e:	b083      	sub	sp, #12
 8016150:	af00      	add	r7, sp, #0
	bool rx_timeout_handled = false;
 8016152:	2300      	movs	r3, #0
 8016154:	71fb      	strb	r3, [r7, #7]
	bool tx_timeout_handled = false;
 8016156:	2300      	movs	r3, #0
 8016158:	71bb      	strb	r3, [r7, #6]
	if (IrqFired == true) {
 801615a:	4b7d      	ldr	r3, [pc, #500]	@ (8016350 <RadioBgIrqProcess+0x204>)
 801615c:	781b      	ldrb	r3, [r3, #0]
 801615e:	2b00      	cmp	r3, #0
 8016160:	f000 8169 	beq.w	8016436 <RadioBgIrqProcess+0x2ea>
		BoardDisableIrq();
 8016164:	f000 f9e6 	bl	8016534 <BoardDisableIrq>
		IrqFired = false;
 8016168:	4b79      	ldr	r3, [pc, #484]	@ (8016350 <RadioBgIrqProcess+0x204>)
 801616a:	2200      	movs	r2, #0
 801616c:	701a      	strb	r2, [r3, #0]
		BoardEnableIrq();
 801616e:	f000 f9ea 	bl	8016546 <BoardEnableIrq>

		uint16_t irqRegs = SX126xGetIrqStatus();
 8016172:	f000 fcb7 	bl	8016ae4 <SX126xGetIrqStatus>
 8016176:	4603      	mov	r3, r0
 8016178:	80bb      	strh	r3, [r7, #4]
		SX126xClearIrqStatus(IRQ_RADIO_ALL);
 801617a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801617e:	f000 ffab 	bl	80170d8 <SX126xClearIrqStatus>

		if ((irqRegs & IRQ_TX_DONE) == IRQ_TX_DONE) {
 8016182:	88bb      	ldrh	r3, [r7, #4]
 8016184:	f003 0301 	and.w	r3, r3, #1
 8016188:	2b00      	cmp	r3, #0
 801618a:	d01b      	beq.n	80161c4 <RadioBgIrqProcess+0x78>
			LOGD(TAG, "IRQ TX DONE");
 801618c:	4b71      	ldr	r3, [pc, #452]	@ (8016354 <RadioBgIrqProcess+0x208>)
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	4a71      	ldr	r2, [pc, #452]	@ (8016358 <RadioBgIrqProcess+0x20c>)
 8016192:	2100      	movs	r1, #0
 8016194:	4618      	mov	r0, r3
 8016196:	f7eb f9af 	bl	80014f8 <LOG_LEVEL_DEBUG>
			tx_timeout_handled = true;
 801619a:	2301      	movs	r3, #1
 801619c:	71bb      	strb	r3, [r7, #6]
			TimerStop(&TxTimeoutTimer);
 801619e:	486f      	ldr	r0, [pc, #444]	@ (801635c <RadioBgIrqProcess+0x210>)
 80161a0:	f001 fb8c 	bl	80178bc <UTIL_TIMER_Stop>
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 80161a4:	2001      	movs	r0, #1
 80161a6:	f000 f9fb 	bl	80165a0 <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->TxDone != NULL)) {
 80161aa:	4b6d      	ldr	r3, [pc, #436]	@ (8016360 <RadioBgIrqProcess+0x214>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d008      	beq.n	80161c4 <RadioBgIrqProcess+0x78>
 80161b2:	4b6b      	ldr	r3, [pc, #428]	@ (8016360 <RadioBgIrqProcess+0x214>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d003      	beq.n	80161c4 <RadioBgIrqProcess+0x78>
				RadioEvents->TxDone();
 80161bc:	4b68      	ldr	r3, [pc, #416]	@ (8016360 <RadioBgIrqProcess+0x214>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	4798      	blx	r3
			}
		}

		if ((irqRegs & IRQ_RX_DONE) == IRQ_RX_DONE) {
 80161c4:	88bb      	ldrh	r3, [r7, #4]
 80161c6:	f003 0302 	and.w	r3, r3, #2
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d074      	beq.n	80162b8 <RadioBgIrqProcess+0x16c>
			LOGD(TAG, "IRQ RX DONE");
 80161ce:	4b61      	ldr	r3, [pc, #388]	@ (8016354 <RadioBgIrqProcess+0x208>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	4a64      	ldr	r2, [pc, #400]	@ (8016364 <RadioBgIrqProcess+0x218>)
 80161d4:	2100      	movs	r1, #0
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7eb f98e 	bl	80014f8 <LOG_LEVEL_DEBUG>
			uint8_t size;

			rx_timeout_handled = true;
 80161dc:	2301      	movs	r3, #1
 80161de:	71fb      	strb	r3, [r7, #7]
			TimerStop(&RxTimeoutTimer);
 80161e0:	4861      	ldr	r0, [pc, #388]	@ (8016368 <RadioBgIrqProcess+0x21c>)
 80161e2:	f001 fb6b 	bl	80178bc <UTIL_TIMER_Stop>
			if (RxContinuous == false) {
 80161e6:	4b61      	ldr	r3, [pc, #388]	@ (801636c <RadioBgIrqProcess+0x220>)
 80161e8:	781b      	ldrb	r3, [r3, #0]
 80161ea:	f083 0301 	eor.w	r3, r3, #1
 80161ee:	b2db      	uxtb	r3, r3
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d014      	beq.n	801621e <RadioBgIrqProcess+0xd2>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 80161f4:	2001      	movs	r0, #1
 80161f6:	f000 f9d3 	bl	80165a0 <SX126xSetOperatingMode>

				// WORKAROUND - Implicit Header Mode Timeout Behavior, see DS_SX1261-2_V1.2 datasheet chapter 15.3
				// RegRtcControl = @address 0x0902
				SX126xWriteRegister(0x0902, 0x00);
 80161fa:	2100      	movs	r1, #0
 80161fc:	f640 1002 	movw	r0, #2306	@ 0x902
 8016200:	f001 f898 	bl	8017334 <SX126xWriteRegister>
				// RegEventMask = @address 0x0944
				SX126xWriteRegister(0x0944,
						SX126xReadRegister(0x0944) | (1 << 1));
 8016204:	f640 1044 	movw	r0, #2372	@ 0x944
 8016208:	f001 f8e0 	bl	80173cc <SX126xReadRegister>
 801620c:	4603      	mov	r3, r0
				SX126xWriteRegister(0x0944,
 801620e:	f043 0302 	orr.w	r3, r3, #2
 8016212:	b2db      	uxtb	r3, r3
 8016214:	4619      	mov	r1, r3
 8016216:	f640 1044 	movw	r0, #2372	@ 0x944
 801621a:	f001 f88b 	bl	8017334 <SX126xWriteRegister>
				// WORKAROUND END
			}
			memset(RadioRxPayload, 0, 255);
 801621e:	22ff      	movs	r2, #255	@ 0xff
 8016220:	2100      	movs	r1, #0
 8016222:	4853      	ldr	r0, [pc, #332]	@ (8016370 <RadioBgIrqProcess+0x224>)
 8016224:	f002 fcca 	bl	8018bbc <memset>

			if ((irqRegs & IRQ_CRC_ERROR) == IRQ_CRC_ERROR) {
 8016228:	88bb      	ldrh	r3, [r7, #4]
 801622a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801622e:	2b00      	cmp	r3, #0
 8016230:	d022      	beq.n	8016278 <RadioBgIrqProcess+0x12c>
				LOGE(TAG, "IRQ CRC ERROR");
 8016232:	4b48      	ldr	r3, [pc, #288]	@ (8016354 <RadioBgIrqProcess+0x208>)
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	4a4f      	ldr	r2, [pc, #316]	@ (8016374 <RadioBgIrqProcess+0x228>)
 8016238:	2100      	movs	r1, #0
 801623a:	4618      	mov	r0, r3
 801623c:	f7eb f91c 	bl	8001478 <LOG_LEVEL_ERROR>

				uint8_t size;
				// Discard buffer
				memset(RadioRxPayload, 0, 255);
 8016240:	22ff      	movs	r2, #255	@ 0xff
 8016242:	2100      	movs	r1, #0
 8016244:	484a      	ldr	r0, [pc, #296]	@ (8016370 <RadioBgIrqProcess+0x224>)
 8016246:	f002 fcb9 	bl	8018bbc <memset>
				SX126xGetPayload(RadioRxPayload, &size, 255);
 801624a:	1cbb      	adds	r3, r7, #2
 801624c:	22ff      	movs	r2, #255	@ 0xff
 801624e:	4619      	mov	r1, r3
 8016250:	4847      	ldr	r0, [pc, #284]	@ (8016370 <RadioBgIrqProcess+0x224>)
 8016252:	f000 f9d9 	bl	8016608 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 8016256:	4848      	ldr	r0, [pc, #288]	@ (8016378 <RadioBgIrqProcess+0x22c>)
 8016258:	f000 feec 	bl	8017034 <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxError)) {
 801625c:	4b40      	ldr	r3, [pc, #256]	@ (8016360 <RadioBgIrqProcess+0x214>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d029      	beq.n	80162b8 <RadioBgIrqProcess+0x16c>
 8016264:	4b3e      	ldr	r3, [pc, #248]	@ (8016360 <RadioBgIrqProcess+0x214>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	691b      	ldr	r3, [r3, #16]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d024      	beq.n	80162b8 <RadioBgIrqProcess+0x16c>
					RadioEvents->RxError();
 801626e:	4b3c      	ldr	r3, [pc, #240]	@ (8016360 <RadioBgIrqProcess+0x214>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	691b      	ldr	r3, [r3, #16]
 8016274:	4798      	blx	r3
 8016276:	e01f      	b.n	80162b8 <RadioBgIrqProcess+0x16c>
				}
			}
			else {
				SX126xGetPayload(RadioRxPayload, &size, 255);
 8016278:	1cfb      	adds	r3, r7, #3
 801627a:	22ff      	movs	r2, #255	@ 0xff
 801627c:	4619      	mov	r1, r3
 801627e:	483c      	ldr	r0, [pc, #240]	@ (8016370 <RadioBgIrqProcess+0x224>)
 8016280:	f000 f9c2 	bl	8016608 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 8016284:	483c      	ldr	r0, [pc, #240]	@ (8016378 <RadioBgIrqProcess+0x22c>)
 8016286:	f000 fed5 	bl	8017034 <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxDone != NULL)) {
 801628a:	4b35      	ldr	r3, [pc, #212]	@ (8016360 <RadioBgIrqProcess+0x214>)
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d012      	beq.n	80162b8 <RadioBgIrqProcess+0x16c>
 8016292:	4b33      	ldr	r3, [pc, #204]	@ (8016360 <RadioBgIrqProcess+0x214>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	689b      	ldr	r3, [r3, #8]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d00d      	beq.n	80162b8 <RadioBgIrqProcess+0x16c>
					RadioEvents->RxDone(RadioRxPayload, size,
 801629c:	4b30      	ldr	r3, [pc, #192]	@ (8016360 <RadioBgIrqProcess+0x214>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	689c      	ldr	r4, [r3, #8]
 80162a2:	78fb      	ldrb	r3, [r7, #3]
 80162a4:	4619      	mov	r1, r3
							RadioPktStatus.Params.LoRa.RssiPkt,
 80162a6:	4b34      	ldr	r3, [pc, #208]	@ (8016378 <RadioBgIrqProcess+0x22c>)
 80162a8:	f993 300c 	ldrsb.w	r3, [r3, #12]
					RadioEvents->RxDone(RadioRxPayload, size,
 80162ac:	461a      	mov	r2, r3
 80162ae:	4b32      	ldr	r3, [pc, #200]	@ (8016378 <RadioBgIrqProcess+0x22c>)
 80162b0:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80162b4:	482e      	ldr	r0, [pc, #184]	@ (8016370 <RadioBgIrqProcess+0x224>)
 80162b6:	47a0      	blx	r4
							RadioPktStatus.Params.LoRa.SnrPkt);
				}
			}
		}

		if ((irqRegs & IRQ_CAD_DONE) == IRQ_CAD_DONE) {
 80162b8:	88bb      	ldrh	r3, [r7, #4]
 80162ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d01f      	beq.n	8016302 <RadioBgIrqProcess+0x1b6>
			LOGD(TAG, "IRQ CAD DONE");
 80162c2:	4b24      	ldr	r3, [pc, #144]	@ (8016354 <RadioBgIrqProcess+0x208>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	4a2d      	ldr	r2, [pc, #180]	@ (801637c <RadioBgIrqProcess+0x230>)
 80162c8:	2100      	movs	r1, #0
 80162ca:	4618      	mov	r0, r3
 80162cc:	f7eb f914 	bl	80014f8 <LOG_LEVEL_DEBUG>
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 80162d0:	2001      	movs	r0, #1
 80162d2:	f000 f965 	bl	80165a0 <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->CadDone != NULL)) {
 80162d6:	4b22      	ldr	r3, [pc, #136]	@ (8016360 <RadioBgIrqProcess+0x214>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d011      	beq.n	8016302 <RadioBgIrqProcess+0x1b6>
 80162de:	4b20      	ldr	r3, [pc, #128]	@ (8016360 <RadioBgIrqProcess+0x214>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	69db      	ldr	r3, [r3, #28]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d00c      	beq.n	8016302 <RadioBgIrqProcess+0x1b6>
				RadioEvents->CadDone(
 80162e8:	4b1d      	ldr	r3, [pc, #116]	@ (8016360 <RadioBgIrqProcess+0x214>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	69db      	ldr	r3, [r3, #28]
						((irqRegs & IRQ_CAD_ACTIVITY_DETECTED)
 80162ee:	88ba      	ldrh	r2, [r7, #4]
 80162f0:	f402 7280 	and.w	r2, r2, #256	@ 0x100
				RadioEvents->CadDone(
 80162f4:	2a00      	cmp	r2, #0
 80162f6:	bf14      	ite	ne
 80162f8:	2201      	movne	r2, #1
 80162fa:	2200      	moveq	r2, #0
 80162fc:	b2d2      	uxtb	r2, r2
 80162fe:	4610      	mov	r0, r2
 8016300:	4798      	blx	r3
								== IRQ_CAD_ACTIVITY_DETECTED));
			}
		}

		if ((irqRegs & IRQ_RX_TX_TIMEOUT) == IRQ_RX_TX_TIMEOUT) {
 8016302:	88bb      	ldrh	r3, [r7, #4]
 8016304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016308:	2b00      	cmp	r3, #0
 801630a:	d05c      	beq.n	80163c6 <RadioBgIrqProcess+0x27a>
			if (SX126xGetOperatingMode() == MODE_TX) {
 801630c:	f000 f93c 	bl	8016588 <SX126xGetOperatingMode>
 8016310:	4603      	mov	r3, r0
 8016312:	2b04      	cmp	r3, #4
 8016314:	d136      	bne.n	8016384 <RadioBgIrqProcess+0x238>
				LOGE(TAG, "IRQ TX TIMEOUT");
 8016316:	4b0f      	ldr	r3, [pc, #60]	@ (8016354 <RadioBgIrqProcess+0x208>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	4a19      	ldr	r2, [pc, #100]	@ (8016380 <RadioBgIrqProcess+0x234>)
 801631c:	2100      	movs	r1, #0
 801631e:	4618      	mov	r0, r3
 8016320:	f7eb f8aa 	bl	8001478 <LOG_LEVEL_ERROR>
				tx_timeout_handled = true;
 8016324:	2301      	movs	r3, #1
 8016326:	71bb      	strb	r3, [r7, #6]
				TimerStop(&TxTimeoutTimer);
 8016328:	480c      	ldr	r0, [pc, #48]	@ (801635c <RadioBgIrqProcess+0x210>)
 801632a:	f001 fac7 	bl	80178bc <UTIL_TIMER_Stop>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 801632e:	2001      	movs	r0, #1
 8016330:	f000 f936 	bl	80165a0 <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL)) {
 8016334:	4b0a      	ldr	r3, [pc, #40]	@ (8016360 <RadioBgIrqProcess+0x214>)
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d044      	beq.n	80163c6 <RadioBgIrqProcess+0x27a>
 801633c:	4b08      	ldr	r3, [pc, #32]	@ (8016360 <RadioBgIrqProcess+0x214>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	685b      	ldr	r3, [r3, #4]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d03f      	beq.n	80163c6 <RadioBgIrqProcess+0x27a>
					RadioEvents->TxTimeout();
 8016346:	4b06      	ldr	r3, [pc, #24]	@ (8016360 <RadioBgIrqProcess+0x214>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	685b      	ldr	r3, [r3, #4]
 801634c:	4798      	blx	r3
 801634e:	e03a      	b.n	80163c6 <RadioBgIrqProcess+0x27a>
 8016350:	20001fa7 	.word	0x20001fa7
 8016354:	20000360 	.word	0x20000360
 8016358:	08020cec 	.word	0x08020cec
 801635c:	20001e48 	.word	0x20001e48
 8016360:	20001fb0 	.word	0x20001fb0
 8016364:	08020cf8 	.word	0x08020cf8
 8016368:	20001e68 	.word	0x20001e68
 801636c:	20001e90 	.word	0x20001e90
 8016370:	20001ea8 	.word	0x20001ea8
 8016374:	08020d04 	.word	0x08020d04
 8016378:	20001e94 	.word	0x20001e94
 801637c:	08020d14 	.word	0x08020d14
 8016380:	08020d24 	.word	0x08020d24
				}
			}
			else if (SX126xGetOperatingMode() == MODE_RX) {
 8016384:	f000 f900 	bl	8016588 <SX126xGetOperatingMode>
 8016388:	4603      	mov	r3, r0
 801638a:	2b05      	cmp	r3, #5
 801638c:	d11b      	bne.n	80163c6 <RadioBgIrqProcess+0x27a>
				LOGE(TAG, "IRQ RX TIMEOUT");
 801638e:	4b50      	ldr	r3, [pc, #320]	@ (80164d0 <RadioBgIrqProcess+0x384>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	4a50      	ldr	r2, [pc, #320]	@ (80164d4 <RadioBgIrqProcess+0x388>)
 8016394:	2100      	movs	r1, #0
 8016396:	4618      	mov	r0, r3
 8016398:	f7eb f86e 	bl	8001478 <LOG_LEVEL_ERROR>
				rx_timeout_handled = true;
 801639c:	2301      	movs	r3, #1
 801639e:	71fb      	strb	r3, [r7, #7]
				TimerStop(&RxTimeoutTimer);
 80163a0:	484d      	ldr	r0, [pc, #308]	@ (80164d8 <RadioBgIrqProcess+0x38c>)
 80163a2:	f001 fa8b 	bl	80178bc <UTIL_TIMER_Stop>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 80163a6:	2001      	movs	r0, #1
 80163a8:	f000 f8fa 	bl	80165a0 <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)) {
 80163ac:	4b4b      	ldr	r3, [pc, #300]	@ (80164dc <RadioBgIrqProcess+0x390>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d008      	beq.n	80163c6 <RadioBgIrqProcess+0x27a>
 80163b4:	4b49      	ldr	r3, [pc, #292]	@ (80164dc <RadioBgIrqProcess+0x390>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	68db      	ldr	r3, [r3, #12]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d003      	beq.n	80163c6 <RadioBgIrqProcess+0x27a>
					RadioEvents->RxTimeout();
 80163be:	4b47      	ldr	r3, [pc, #284]	@ (80164dc <RadioBgIrqProcess+0x390>)
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	68db      	ldr	r3, [r3, #12]
 80163c4:	4798      	blx	r3
				}
			}
		}

		if ((irqRegs & IRQ_PREAMBLE_DETECTED) == IRQ_PREAMBLE_DETECTED) {
 80163c6:	88bb      	ldrh	r3, [r7, #4]
 80163c8:	f003 0304 	and.w	r3, r3, #4
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d00c      	beq.n	80163ea <RadioBgIrqProcess+0x29e>
			if ((RadioEvents != NULL) && (RadioEvents->PreAmpDetect != NULL)) {
 80163d0:	4b42      	ldr	r3, [pc, #264]	@ (80164dc <RadioBgIrqProcess+0x390>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d008      	beq.n	80163ea <RadioBgIrqProcess+0x29e>
 80163d8:	4b40      	ldr	r3, [pc, #256]	@ (80164dc <RadioBgIrqProcess+0x390>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	695b      	ldr	r3, [r3, #20]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d003      	beq.n	80163ea <RadioBgIrqProcess+0x29e>
				RadioEvents->PreAmpDetect();
 80163e2:	4b3e      	ldr	r3, [pc, #248]	@ (80164dc <RadioBgIrqProcess+0x390>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	695b      	ldr	r3, [r3, #20]
 80163e8:	4798      	blx	r3

		if ((irqRegs & IRQ_HEADER_VALID) == IRQ_HEADER_VALID) {
			//__NOP( );
		}

		if ((irqRegs & IRQ_HEADER_ERROR) == IRQ_HEADER_ERROR) {
 80163ea:	88bb      	ldrh	r3, [r7, #4]
 80163ec:	f003 0320 	and.w	r3, r3, #32
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d020      	beq.n	8016436 <RadioBgIrqProcess+0x2ea>
			LOGE(TAG, "IRQ HEADER ERROR");
 80163f4:	4b36      	ldr	r3, [pc, #216]	@ (80164d0 <RadioBgIrqProcess+0x384>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	4a39      	ldr	r2, [pc, #228]	@ (80164e0 <RadioBgIrqProcess+0x394>)
 80163fa:	2100      	movs	r1, #0
 80163fc:	4618      	mov	r0, r3
 80163fe:	f7eb f83b 	bl	8001478 <LOG_LEVEL_ERROR>

			TimerStop(&RxTimeoutTimer);
 8016402:	4835      	ldr	r0, [pc, #212]	@ (80164d8 <RadioBgIrqProcess+0x38c>)
 8016404:	f001 fa5a 	bl	80178bc <UTIL_TIMER_Stop>
			if (RxContinuous == false) {
 8016408:	4b36      	ldr	r3, [pc, #216]	@ (80164e4 <RadioBgIrqProcess+0x398>)
 801640a:	781b      	ldrb	r3, [r3, #0]
 801640c:	f083 0301 	eor.w	r3, r3, #1
 8016410:	b2db      	uxtb	r3, r3
 8016412:	2b00      	cmp	r3, #0
 8016414:	d002      	beq.n	801641c <RadioBgIrqProcess+0x2d0>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 8016416:	2001      	movs	r0, #1
 8016418:	f000 f8c2 	bl	80165a0 <SX126xSetOperatingMode>
			}
			if ((RadioEvents != NULL) && (RadioEvents->RxError != NULL)) {
 801641c:	4b2f      	ldr	r3, [pc, #188]	@ (80164dc <RadioBgIrqProcess+0x390>)
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d008      	beq.n	8016436 <RadioBgIrqProcess+0x2ea>
 8016424:	4b2d      	ldr	r3, [pc, #180]	@ (80164dc <RadioBgIrqProcess+0x390>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	691b      	ldr	r3, [r3, #16]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d003      	beq.n	8016436 <RadioBgIrqProcess+0x2ea>
				RadioEvents->RxError();
 801642e:	4b2b      	ldr	r3, [pc, #172]	@ (80164dc <RadioBgIrqProcess+0x390>)
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	691b      	ldr	r3, [r3, #16]
 8016434:	4798      	blx	r3
			}
		}
	}
	if (TimerRxTimeout) {
 8016436:	4b2c      	ldr	r3, [pc, #176]	@ (80164e8 <RadioBgIrqProcess+0x39c>)
 8016438:	781b      	ldrb	r3, [r3, #0]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d01f      	beq.n	801647e <RadioBgIrqProcess+0x332>
		LOGE(TAG, "IRQ TIMER RX TIMEOUT");
 801643e:	4b24      	ldr	r3, [pc, #144]	@ (80164d0 <RadioBgIrqProcess+0x384>)
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	4a2a      	ldr	r2, [pc, #168]	@ (80164ec <RadioBgIrqProcess+0x3a0>)
 8016444:	2100      	movs	r1, #0
 8016446:	4618      	mov	r0, r3
 8016448:	f7eb f816 	bl	8001478 <LOG_LEVEL_ERROR>
		TimerRxTimeout = false;
 801644c:	4b26      	ldr	r3, [pc, #152]	@ (80164e8 <RadioBgIrqProcess+0x39c>)
 801644e:	2200      	movs	r2, #0
 8016450:	701a      	strb	r2, [r3, #0]
		if (!rx_timeout_handled) {
 8016452:	79fb      	ldrb	r3, [r7, #7]
 8016454:	f083 0301 	eor.w	r3, r3, #1
 8016458:	b2db      	uxtb	r3, r3
 801645a:	2b00      	cmp	r3, #0
 801645c:	d00f      	beq.n	801647e <RadioBgIrqProcess+0x332>
			TimerStop(&RxTimeoutTimer);
 801645e:	481e      	ldr	r0, [pc, #120]	@ (80164d8 <RadioBgIrqProcess+0x38c>)
 8016460:	f001 fa2c 	bl	80178bc <UTIL_TIMER_Stop>
			if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)) {
 8016464:	4b1d      	ldr	r3, [pc, #116]	@ (80164dc <RadioBgIrqProcess+0x390>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d008      	beq.n	801647e <RadioBgIrqProcess+0x332>
 801646c:	4b1b      	ldr	r3, [pc, #108]	@ (80164dc <RadioBgIrqProcess+0x390>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	68db      	ldr	r3, [r3, #12]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d003      	beq.n	801647e <RadioBgIrqProcess+0x332>
				RadioEvents->RxTimeout();
 8016476:	4b19      	ldr	r3, [pc, #100]	@ (80164dc <RadioBgIrqProcess+0x390>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	68db      	ldr	r3, [r3, #12]
 801647c:	4798      	blx	r3
			}
		}
	}
	if (TimerTxTimeout) {
 801647e:	4b1c      	ldr	r3, [pc, #112]	@ (80164f0 <RadioBgIrqProcess+0x3a4>)
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d01f      	beq.n	80164c6 <RadioBgIrqProcess+0x37a>
		LOGE(TAG, "IRQ TIMER TX TIMEOUT");
 8016486:	4b12      	ldr	r3, [pc, #72]	@ (80164d0 <RadioBgIrqProcess+0x384>)
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	4a1a      	ldr	r2, [pc, #104]	@ (80164f4 <RadioBgIrqProcess+0x3a8>)
 801648c:	2100      	movs	r1, #0
 801648e:	4618      	mov	r0, r3
 8016490:	f7ea fff2 	bl	8001478 <LOG_LEVEL_ERROR>
		TimerTxTimeout = false;
 8016494:	4b16      	ldr	r3, [pc, #88]	@ (80164f0 <RadioBgIrqProcess+0x3a4>)
 8016496:	2200      	movs	r2, #0
 8016498:	701a      	strb	r2, [r3, #0]
		if (!tx_timeout_handled) {
 801649a:	79bb      	ldrb	r3, [r7, #6]
 801649c:	f083 0301 	eor.w	r3, r3, #1
 80164a0:	b2db      	uxtb	r3, r3
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d00f      	beq.n	80164c6 <RadioBgIrqProcess+0x37a>
			TimerStop(&TxTimeoutTimer);
 80164a6:	4814      	ldr	r0, [pc, #80]	@ (80164f8 <RadioBgIrqProcess+0x3ac>)
 80164a8:	f001 fa08 	bl	80178bc <UTIL_TIMER_Stop>
			if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL)) {
 80164ac:	4b0b      	ldr	r3, [pc, #44]	@ (80164dc <RadioBgIrqProcess+0x390>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d008      	beq.n	80164c6 <RadioBgIrqProcess+0x37a>
 80164b4:	4b09      	ldr	r3, [pc, #36]	@ (80164dc <RadioBgIrqProcess+0x390>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	685b      	ldr	r3, [r3, #4]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d003      	beq.n	80164c6 <RadioBgIrqProcess+0x37a>
				RadioEvents->TxTimeout();
 80164be:	4b07      	ldr	r3, [pc, #28]	@ (80164dc <RadioBgIrqProcess+0x390>)
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	685b      	ldr	r3, [r3, #4]
 80164c4:	4798      	blx	r3
			}
		}
	}
}
 80164c6:	bf00      	nop
 80164c8:	370c      	adds	r7, #12
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd90      	pop	{r4, r7, pc}
 80164ce:	bf00      	nop
 80164d0:	20000360 	.word	0x20000360
 80164d4:	08020d34 	.word	0x08020d34
 80164d8:	20001e68 	.word	0x20001e68
 80164dc:	20001fb0 	.word	0x20001fb0
 80164e0:	08020d44 	.word	0x08020d44
 80164e4:	20001e90 	.word	0x20001e90
 80164e8:	20001fa8 	.word	0x20001fa8
 80164ec:	08020d58 	.word	0x08020d58
 80164f0:	20001fa9 	.word	0x20001fa9
 80164f4:	08020d70 	.word	0x08020d70
 80164f8:	20001e48 	.word	0x20001e48

080164fc <RadioIrqProcess>:

void RadioIrqProcess(void) {
 80164fc:	b580      	push	{r7, lr}
 80164fe:	af00      	add	r7, sp, #0
	RadioBgIrqProcess();
 8016500:	f7ff fe24 	bl	801614c <RadioBgIrqProcess>
}
 8016504:	bf00      	nop
 8016506:	bd80      	pop	{r7, pc}

08016508 <RadioIrqProcessAfterDeepSleep>:

void RadioIrqProcessAfterDeepSleep(void) {
 8016508:	b580      	push	{r7, lr}
 801650a:	af00      	add	r7, sp, #0
	BoardDisableIrq();
 801650c:	f000 f812 	bl	8016534 <BoardDisableIrq>
	IrqFired = true;
 8016510:	4b04      	ldr	r3, [pc, #16]	@ (8016524 <RadioIrqProcessAfterDeepSleep+0x1c>)
 8016512:	2201      	movs	r2, #1
 8016514:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 8016516:	f000 f816 	bl	8016546 <BoardEnableIrq>
	RadioBgIrqProcess();
 801651a:	f7ff fe17 	bl	801614c <RadioBgIrqProcess>
}
 801651e:	bf00      	nop
 8016520:	bd80      	pop	{r7, pc}
 8016522:	bf00      	nop
 8016524:	20001fa7 	.word	0x20001fa7

08016528 <Radio_HardWare_Init>:
//			RadioBgIrqProcess();
//		}
//	}
}

void Radio_HardWare_Init(void){
 8016528:	b580      	push	{r7, lr}
 801652a:	af00      	add	r7, sp, #0
	SX126xIoInit();
 801652c:	f000 fdec 	bl	8017108 <SX126xIoInit>
//
//	_lora_sem = xSemaphoreCreateBinary();
//	xTaskCreate(Radio_task, "Radio_task", 4096, NULL, TASK_PRIO_NORMAL, NULL);
}
 8016530:	bf00      	nop
 8016532:	bd80      	pop	{r7, pc}

08016534 <BoardDisableIrq>:
 * \brief Process the IRQ if handled by the driver
 */
void SX126xProcessIrqs(void);


void BoardDisableIrq(void) {
 8016534:	b480      	push	{r7}
 8016536:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8016538:	b672      	cpsid	i
}
 801653a:	bf00      	nop
	__disable_irq();

}
 801653c:	bf00      	nop
 801653e:	46bd      	mov	sp, r7
 8016540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016544:	4770      	bx	lr

08016546 <BoardEnableIrq>:

void BoardEnableIrq(void) {
 8016546:	b480      	push	{r7}
 8016548:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 801654a:	b662      	cpsie	i
}
 801654c:	bf00      	nop
	__enable_irq();
}
 801654e:	bf00      	nop
 8016550:	46bd      	mov	sp, r7
 8016552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016556:	4770      	bx	lr

08016558 <SX126xInit>:


void SX126xInit(void) {
 8016558:	b580      	push	{r7, lr}
 801655a:	af00      	add	r7, sp, #0
	SX126xReset();
 801655c:	f000 fde0 	bl	8017120 <SX126xReset>

	SX126xWakeup();
 8016560:	f000 fe24 	bl	80171ac <SX126xWakeup>
	SX126xSetStandby(STDBY_RC);
 8016564:	2000      	movs	r0, #0
 8016566:	f000 f933 	bl	80167d0 <SX126xSetStandby>

	SX126xSetDio2AsRfSwitchCtrl(true);
 801656a:	2001      	movs	r0, #1
 801656c:	f000 facf 	bl	8016b0e <SX126xSetDio2AsRfSwitchCtrl>

	SX126xSetOperatingMode(MODE_STDBY_RC);
 8016570:	2001      	movs	r0, #1
 8016572:	f000 f815 	bl	80165a0 <SX126xSetOperatingMode>
}
 8016576:	bf00      	nop
 8016578:	bd80      	pop	{r7, pc}

0801657a <SX126xReInit>:

void SX126xReInit(void) {
 801657a:	b480      	push	{r7}
 801657c:	af00      	add	r7, sp, #0

}
 801657e:	bf00      	nop
 8016580:	46bd      	mov	sp, r7
 8016582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016586:	4770      	bx	lr

08016588 <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode(void) {
 8016588:	b480      	push	{r7}
 801658a:	af00      	add	r7, sp, #0
	return OperatingMode;
 801658c:	4b03      	ldr	r3, [pc, #12]	@ (801659c <SX126xGetOperatingMode+0x14>)
 801658e:	781b      	ldrb	r3, [r3, #0]
}
 8016590:	4618      	mov	r0, r3
 8016592:	46bd      	mov	sp, r7
 8016594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016598:	4770      	bx	lr
 801659a:	bf00      	nop
 801659c:	20002008 	.word	0x20002008

080165a0 <SX126xSetOperatingMode>:

void SX126xSetOperatingMode(RadioOperatingModes_t mode) {
 80165a0:	b480      	push	{r7}
 80165a2:	b083      	sub	sp, #12
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	4603      	mov	r3, r0
 80165a8:	71fb      	strb	r3, [r7, #7]
	OperatingMode = mode;
 80165aa:	4a04      	ldr	r2, [pc, #16]	@ (80165bc <SX126xSetOperatingMode+0x1c>)
 80165ac:	79fb      	ldrb	r3, [r7, #7]
 80165ae:	7013      	strb	r3, [r2, #0]
}
 80165b0:	bf00      	nop
 80165b2:	370c      	adds	r7, #12
 80165b4:	46bd      	mov	sp, r7
 80165b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ba:	4770      	bx	lr
 80165bc:	20002008 	.word	0x20002008

080165c0 <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady(void) {
 80165c0:	b580      	push	{r7, lr}
 80165c2:	af00      	add	r7, sp, #0
	if ((SX126xGetOperatingMode() == MODE_SLEEP)
 80165c4:	f7ff ffe0 	bl	8016588 <SX126xGetOperatingMode>
 80165c8:	4603      	mov	r3, r0
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d004      	beq.n	80165d8 <SX126xCheckDeviceReady+0x18>
			|| (SX126xGetOperatingMode() == MODE_RX_DC)) {
 80165ce:	f7ff ffdb 	bl	8016588 <SX126xGetOperatingMode>
 80165d2:	4603      	mov	r3, r0
 80165d4:	2b06      	cmp	r3, #6
 80165d6:	d103      	bne.n	80165e0 <SX126xCheckDeviceReady+0x20>
		SX126xWakeup();
 80165d8:	f000 fde8 	bl	80171ac <SX126xWakeup>
		// Switch is turned off when device is in sleep mode and turned on is all other modes
		SX126xAntSwOn();
 80165dc:	f000 ff92 	bl	8017504 <SX126xAntSwOn>
	}
	SX126xWaitOnBusy();
 80165e0:	f000 fdbc 	bl	801715c <SX126xWaitOnBusy>
}
 80165e4:	bf00      	nop
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <SX126xSetPayload>:

void SX126xSetPayload(uint8_t *payload, uint8_t size) {
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b082      	sub	sp, #8
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	460b      	mov	r3, r1
 80165f2:	70fb      	strb	r3, [r7, #3]
	SX126xWriteBuffer(0x00, payload, size);
 80165f4:	78fb      	ldrb	r3, [r7, #3]
 80165f6:	461a      	mov	r2, r3
 80165f8:	6879      	ldr	r1, [r7, #4]
 80165fa:	2000      	movs	r0, #0
 80165fc:	f000 fef8 	bl	80173f0 <SX126xWriteBuffer>
}
 8016600:	bf00      	nop
 8016602:	3708      	adds	r7, #8
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}

08016608 <SX126xGetPayload>:

uint8_t SX126xGetPayload(uint8_t *buffer, uint8_t *size, uint8_t maxSize) {
 8016608:	b580      	push	{r7, lr}
 801660a:	b086      	sub	sp, #24
 801660c:	af00      	add	r7, sp, #0
 801660e:	60f8      	str	r0, [r7, #12]
 8016610:	60b9      	str	r1, [r7, #8]
 8016612:	4613      	mov	r3, r2
 8016614:	71fb      	strb	r3, [r7, #7]
	uint8_t offset = 0;
 8016616:	2300      	movs	r3, #0
 8016618:	75fb      	strb	r3, [r7, #23]

	SX126xGetRxBufferStatus(size, &offset);
 801661a:	f107 0317 	add.w	r3, r7, #23
 801661e:	4619      	mov	r1, r3
 8016620:	68b8      	ldr	r0, [r7, #8]
 8016622:	f000 fcd9 	bl	8016fd8 <SX126xGetRxBufferStatus>
	if (*size > maxSize) {
 8016626:	68bb      	ldr	r3, [r7, #8]
 8016628:	781b      	ldrb	r3, [r3, #0]
 801662a:	79fa      	ldrb	r2, [r7, #7]
 801662c:	429a      	cmp	r2, r3
 801662e:	d201      	bcs.n	8016634 <SX126xGetPayload+0x2c>
		return 1;
 8016630:	2301      	movs	r3, #1
 8016632:	e007      	b.n	8016644 <SX126xGetPayload+0x3c>
	}
	SX126xReadBuffer(offset, buffer, *size);
 8016634:	7df8      	ldrb	r0, [r7, #23]
 8016636:	68bb      	ldr	r3, [r7, #8]
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	461a      	mov	r2, r3
 801663c:	68f9      	ldr	r1, [r7, #12]
 801663e:	f000 ff09 	bl	8017454 <SX126xReadBuffer>
	return 0;
 8016642:	2300      	movs	r3, #0
}
 8016644:	4618      	mov	r0, r3
 8016646:	3718      	adds	r7, #24
 8016648:	46bd      	mov	sp, r7
 801664a:	bd80      	pop	{r7, pc}

0801664c <SX126xSendPayload>:

void SX126xSendPayload(uint8_t *payload, uint8_t size, uint32_t timeout) {
 801664c:	b580      	push	{r7, lr}
 801664e:	b084      	sub	sp, #16
 8016650:	af00      	add	r7, sp, #0
 8016652:	60f8      	str	r0, [r7, #12]
 8016654:	460b      	mov	r3, r1
 8016656:	607a      	str	r2, [r7, #4]
 8016658:	72fb      	strb	r3, [r7, #11]
	SX126xSetPayload(payload, size);
 801665a:	7afb      	ldrb	r3, [r7, #11]
 801665c:	4619      	mov	r1, r3
 801665e:	68f8      	ldr	r0, [r7, #12]
 8016660:	f7ff ffc2 	bl	80165e8 <SX126xSetPayload>
	SX126xSetTx(timeout);
 8016664:	6878      	ldr	r0, [r7, #4]
 8016666:	f000 f8ce 	bl	8016806 <SX126xSetTx>
}
 801666a:	bf00      	nop
 801666c:	3710      	adds	r7, #16
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}

08016672 <SX126xSetSyncWord>:

uint8_t SX126xSetSyncWord(uint8_t *syncWord) {
 8016672:	b580      	push	{r7, lr}
 8016674:	b082      	sub	sp, #8
 8016676:	af00      	add	r7, sp, #0
 8016678:	6078      	str	r0, [r7, #4]
	SX126xWriteRegisters(REG_LR_SYNCWORDBASEADDRESS, syncWord, 8);
 801667a:	2208      	movs	r2, #8
 801667c:	6879      	ldr	r1, [r7, #4]
 801667e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8016682:	f000 fe1f 	bl	80172c4 <SX126xWriteRegisters>
	return 0;
 8016686:	2300      	movs	r3, #0
}
 8016688:	4618      	mov	r0, r3
 801668a:	3708      	adds	r7, #8
 801668c:	46bd      	mov	sp, r7
 801668e:	bd80      	pop	{r7, pc}

08016690 <SX126xSetCrcSeed>:

void SX126xSetCrcSeed(uint16_t seed) {
 8016690:	b580      	push	{r7, lr}
 8016692:	b084      	sub	sp, #16
 8016694:	af00      	add	r7, sp, #0
 8016696:	4603      	mov	r3, r0
 8016698:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = (uint8_t) ((seed >> 8) & 0xFF);
 801669a:	88fb      	ldrh	r3, [r7, #6]
 801669c:	0a1b      	lsrs	r3, r3, #8
 801669e:	b29b      	uxth	r3, r3
 80166a0:	b2db      	uxtb	r3, r3
 80166a2:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) (seed & 0xFF);
 80166a4:	88fb      	ldrh	r3, [r7, #6]
 80166a6:	b2db      	uxtb	r3, r3
 80166a8:	737b      	strb	r3, [r7, #13]

	switch (SX126xGetPacketType()) {
 80166aa:	f000 fa9b 	bl	8016be4 <SX126xGetPacketType>
 80166ae:	4603      	mov	r3, r0
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d108      	bne.n	80166c6 <SX126xSetCrcSeed+0x36>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCSEEDBASEADDR, buf, 2);
 80166b4:	f107 030c 	add.w	r3, r7, #12
 80166b8:	2202      	movs	r2, #2
 80166ba:	4619      	mov	r1, r3
 80166bc:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80166c0:	f000 fe00 	bl	80172c4 <SX126xWriteRegisters>
		break;
 80166c4:	e000      	b.n	80166c8 <SX126xSetCrcSeed+0x38>

		default:
		break;
 80166c6:	bf00      	nop
	}
}
 80166c8:	bf00      	nop
 80166ca:	3710      	adds	r7, #16
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd80      	pop	{r7, pc}

080166d0 <SX126xSetCrcPolynomial>:

void SX126xSetCrcPolynomial(uint16_t polynomial) {
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b084      	sub	sp, #16
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	4603      	mov	r3, r0
 80166d8:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = (uint8_t) ((polynomial >> 8) & 0xFF);
 80166da:	88fb      	ldrh	r3, [r7, #6]
 80166dc:	0a1b      	lsrs	r3, r3, #8
 80166de:	b29b      	uxth	r3, r3
 80166e0:	b2db      	uxtb	r3, r3
 80166e2:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) (polynomial & 0xFF);
 80166e4:	88fb      	ldrh	r3, [r7, #6]
 80166e6:	b2db      	uxtb	r3, r3
 80166e8:	737b      	strb	r3, [r7, #13]

	switch (SX126xGetPacketType()) {
 80166ea:	f000 fa7b 	bl	8016be4 <SX126xGetPacketType>
 80166ee:	4603      	mov	r3, r0
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d108      	bne.n	8016706 <SX126xSetCrcPolynomial+0x36>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCPOLYBASEADDR, buf, 2);
 80166f4:	f107 030c 	add.w	r3, r7, #12
 80166f8:	2202      	movs	r2, #2
 80166fa:	4619      	mov	r1, r3
 80166fc:	f240 60be 	movw	r0, #1726	@ 0x6be
 8016700:	f000 fde0 	bl	80172c4 <SX126xWriteRegisters>
		break;
 8016704:	e000      	b.n	8016708 <SX126xSetCrcPolynomial+0x38>

		default:
		break;
 8016706:	bf00      	nop
	}
}
 8016708:	bf00      	nop
 801670a:	3710      	adds	r7, #16
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}

08016710 <SX126xSetWhiteningSeed>:

void SX126xSetWhiteningSeed(uint16_t seed) {
 8016710:	b580      	push	{r7, lr}
 8016712:	b084      	sub	sp, #16
 8016714:	af00      	add	r7, sp, #0
 8016716:	4603      	mov	r3, r0
 8016718:	80fb      	strh	r3, [r7, #6]
	uint8_t regValue = 0;
 801671a:	2300      	movs	r3, #0
 801671c:	73fb      	strb	r3, [r7, #15]

	switch (SX126xGetPacketType()) {
 801671e:	f000 fa61 	bl	8016be4 <SX126xGetPacketType>
 8016722:	4603      	mov	r3, r0
 8016724:	2b00      	cmp	r3, #0
 8016726:	d121      	bne.n	801676c <SX126xSetWhiteningSeed+0x5c>
		case PACKET_TYPE_GFSK:
			regValue = SX126xReadRegister(REG_LR_WHITSEEDBASEADDR_MSB) & 0xFE;
 8016728:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801672c:	f000 fe4e 	bl	80173cc <SX126xReadRegister>
 8016730:	4603      	mov	r3, r0
 8016732:	f023 0301 	bic.w	r3, r3, #1
 8016736:	73fb      	strb	r3, [r7, #15]
			regValue = ((seed >> 8) & 0x01) | regValue;
 8016738:	88fb      	ldrh	r3, [r7, #6]
 801673a:	0a1b      	lsrs	r3, r3, #8
 801673c:	b29b      	uxth	r3, r3
 801673e:	b25b      	sxtb	r3, r3
 8016740:	f003 0301 	and.w	r3, r3, #1
 8016744:	b25a      	sxtb	r2, r3
 8016746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801674a:	4313      	orrs	r3, r2
 801674c:	b25b      	sxtb	r3, r3
 801674e:	73fb      	strb	r3, [r7, #15]
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_MSB, regValue); // only 1 bit.
 8016750:	7bfb      	ldrb	r3, [r7, #15]
 8016752:	4619      	mov	r1, r3
 8016754:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8016758:	f000 fdec 	bl	8017334 <SX126xWriteRegister>
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t) seed);
 801675c:	88fb      	ldrh	r3, [r7, #6]
 801675e:	b2db      	uxtb	r3, r3
 8016760:	4619      	mov	r1, r3
 8016762:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8016766:	f000 fde5 	bl	8017334 <SX126xWriteRegister>
		break;
 801676a:	e000      	b.n	801676e <SX126xSetWhiteningSeed+0x5e>

		default:
		break;
 801676c:	bf00      	nop
	}
}
 801676e:	bf00      	nop
 8016770:	3710      	adds	r7, #16
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}

08016776 <SX126xGetRandom>:

uint32_t SX126xGetRandom(void) {
 8016776:	b580      	push	{r7, lr}
 8016778:	b082      	sub	sp, #8
 801677a:	af00      	add	r7, sp, #0
	uint8_t buf[] = { 0, 0, 0, 0 };
 801677c:	2300      	movs	r3, #0
 801677e:	607b      	str	r3, [r7, #4]

	SX126xReadRegisters(RANDOM_NUMBER_GENERATORBASEADDR, buf, 4);
 8016780:	1d3b      	adds	r3, r7, #4
 8016782:	2204      	movs	r2, #4
 8016784:	4619      	mov	r1, r3
 8016786:	f640 0019 	movw	r0, #2073	@ 0x819
 801678a:	f000 fde5 	bl	8017358 <SX126xReadRegisters>

	return (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 801678e:	793b      	ldrb	r3, [r7, #4]
 8016790:	061a      	lsls	r2, r3, #24
 8016792:	797b      	ldrb	r3, [r7, #5]
 8016794:	041b      	lsls	r3, r3, #16
 8016796:	431a      	orrs	r2, r3
 8016798:	79bb      	ldrb	r3, [r7, #6]
 801679a:	021b      	lsls	r3, r3, #8
 801679c:	4313      	orrs	r3, r2
 801679e:	79fa      	ldrb	r2, [r7, #7]
 80167a0:	4313      	orrs	r3, r2
}
 80167a2:	4618      	mov	r0, r3
 80167a4:	3708      	adds	r7, #8
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bd80      	pop	{r7, pc}

080167aa <SX126xSetSleep>:

void SX126xSetSleep(SleepParams_t sleepConfig) {
 80167aa:	b580      	push	{r7, lr}
 80167ac:	b082      	sub	sp, #8
 80167ae:	af00      	add	r7, sp, #0
 80167b0:	7138      	strb	r0, [r7, #4]
	SX126xAntSwOff();
 80167b2:	f000 feae 	bl	8017512 <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_SLEEP, &sleepConfig.Value, 1);
 80167b6:	1d3b      	adds	r3, r7, #4
 80167b8:	2201      	movs	r2, #1
 80167ba:	4619      	mov	r1, r3
 80167bc:	2084      	movs	r0, #132	@ 0x84
 80167be:	f000 fd1f 	bl	8017200 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_SLEEP);
 80167c2:	2000      	movs	r0, #0
 80167c4:	f7ff feec 	bl	80165a0 <SX126xSetOperatingMode>
}
 80167c8:	bf00      	nop
 80167ca:	3708      	adds	r7, #8
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}

080167d0 <SX126xSetStandby>:

void SX126xSetStandby(RadioStandbyModes_t standbyConfig) {
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	4603      	mov	r3, r0
 80167d8:	71fb      	strb	r3, [r7, #7]
	SX126xAntSwOff();
 80167da:	f000 fe9a 	bl	8017512 <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_STANDBY, (uint8_t*) &standbyConfig, 1);
 80167de:	1dfb      	adds	r3, r7, #7
 80167e0:	2201      	movs	r2, #1
 80167e2:	4619      	mov	r1, r3
 80167e4:	2080      	movs	r0, #128	@ 0x80
 80167e6:	f000 fd0b 	bl	8017200 <SX126xWriteCommand>
	if (standbyConfig == STDBY_RC) {
 80167ea:	79fb      	ldrb	r3, [r7, #7]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d103      	bne.n	80167f8 <SX126xSetStandby+0x28>
		SX126xSetOperatingMode(MODE_STDBY_RC);
 80167f0:	2001      	movs	r0, #1
 80167f2:	f7ff fed5 	bl	80165a0 <SX126xSetOperatingMode>
	}
	else {
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
	}
}
 80167f6:	e002      	b.n	80167fe <SX126xSetStandby+0x2e>
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
 80167f8:	2002      	movs	r0, #2
 80167fa:	f7ff fed1 	bl	80165a0 <SX126xSetOperatingMode>
}
 80167fe:	bf00      	nop
 8016800:	3708      	adds	r7, #8
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}

08016806 <SX126xSetTx>:
void SX126xSetFs(void) {
	SX126xWriteCommand(RADIO_SET_FS, 0, 0);
	SX126xSetOperatingMode(MODE_FS);
}

void SX126xSetTx(uint32_t timeout) {
 8016806:	b580      	push	{r7, lr}
 8016808:	b084      	sub	sp, #16
 801680a:	af00      	add	r7, sp, #0
 801680c:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_TX);
 801680e:	2004      	movs	r0, #4
 8016810:	f7ff fec6 	bl	80165a0 <SX126xSetOperatingMode>

	buf[0] = (uint8_t) ((timeout >> 16) & 0xFF);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	0c1b      	lsrs	r3, r3, #16
 8016818:	b2db      	uxtb	r3, r3
 801681a:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((timeout >> 8) & 0xFF);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	0a1b      	lsrs	r3, r3, #8
 8016820:	b2db      	uxtb	r3, r3
 8016822:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (timeout & 0xFF);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	b2db      	uxtb	r3, r3
 8016828:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_TX, buf, 3);
 801682a:	f107 030c 	add.w	r3, r7, #12
 801682e:	2203      	movs	r2, #3
 8016830:	4619      	mov	r1, r3
 8016832:	2083      	movs	r0, #131	@ 0x83
 8016834:	f000 fce4 	bl	8017200 <SX126xWriteCommand>
}
 8016838:	bf00      	nop
 801683a:	3710      	adds	r7, #16
 801683c:	46bd      	mov	sp, r7
 801683e:	bd80      	pop	{r7, pc}

08016840 <SX126xSetRx>:

void SX126xSetRx(uint32_t timeout) {
 8016840:	b580      	push	{r7, lr}
 8016842:	b084      	sub	sp, #16
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 8016848:	2005      	movs	r0, #5
 801684a:	f7ff fea9 	bl	80165a0 <SX126xSetOperatingMode>

	SX126xWriteRegister( REG_RX_GAIN, 0x94); // default gain
 801684e:	2194      	movs	r1, #148	@ 0x94
 8016850:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8016854:	f000 fd6e 	bl	8017334 <SX126xWriteRegister>

	buf[0] = (uint8_t) ((timeout >> 16) & 0xFF);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	0c1b      	lsrs	r3, r3, #16
 801685c:	b2db      	uxtb	r3, r3
 801685e:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((timeout >> 8) & 0xFF);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	0a1b      	lsrs	r3, r3, #8
 8016864:	b2db      	uxtb	r3, r3
 8016866:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (timeout & 0xFF);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	b2db      	uxtb	r3, r3
 801686c:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 801686e:	f107 030c 	add.w	r3, r7, #12
 8016872:	2203      	movs	r2, #3
 8016874:	4619      	mov	r1, r3
 8016876:	2082      	movs	r0, #130	@ 0x82
 8016878:	f000 fcc2 	bl	8017200 <SX126xWriteCommand>
}
 801687c:	bf00      	nop
 801687e:	3710      	adds	r7, #16
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}

08016884 <SX126xSetRxBoosted>:

void SX126xSetRxBoosted(uint32_t timeout) {
 8016884:	b580      	push	{r7, lr}
 8016886:	b084      	sub	sp, #16
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 801688c:	2005      	movs	r0, #5
 801688e:	f7ff fe87 	bl	80165a0 <SX126xSetOperatingMode>

	SX126xWriteRegister(REG_RX_GAIN, 0x96); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 8016892:	2196      	movs	r1, #150	@ 0x96
 8016894:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8016898:	f000 fd4c 	bl	8017334 <SX126xWriteRegister>

	buf[0] = (uint8_t) ((timeout >> 16) & 0xFF);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	0c1b      	lsrs	r3, r3, #16
 80168a0:	b2db      	uxtb	r3, r3
 80168a2:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((timeout >> 8) & 0xFF);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	0a1b      	lsrs	r3, r3, #8
 80168a8:	b2db      	uxtb	r3, r3
 80168aa:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (timeout & 0xFF);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	b2db      	uxtb	r3, r3
 80168b0:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 80168b2:	f107 030c 	add.w	r3, r7, #12
 80168b6:	2203      	movs	r2, #3
 80168b8:	4619      	mov	r1, r3
 80168ba:	2082      	movs	r0, #130	@ 0x82
 80168bc:	f000 fca0 	bl	8017200 <SX126xWriteCommand>
}
 80168c0:	bf00      	nop
 80168c2:	3710      	adds	r7, #16
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}

080168c8 <SX126xSetRxDutyCycle>:

void SX126xSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime) {
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b084      	sub	sp, #16
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	buf[0] = (uint8_t) ((rxTime >> 16) & 0xFF);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	0c1b      	lsrs	r3, r3, #16
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t) ((rxTime >> 8) & 0xFF);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	0a1b      	lsrs	r3, r3, #8
 80168de:	b2db      	uxtb	r3, r3
 80168e0:	727b      	strb	r3, [r7, #9]
	buf[2] = (uint8_t) (rxTime & 0xFF);
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) ((sleepTime >> 16) & 0xFF);
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	0c1b      	lsrs	r3, r3, #16
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	72fb      	strb	r3, [r7, #11]
	buf[4] = (uint8_t) ((sleepTime >> 8) & 0xFF);
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	0a1b      	lsrs	r3, r3, #8
 80168f4:	b2db      	uxtb	r3, r3
 80168f6:	733b      	strb	r3, [r7, #12]
	buf[5] = (uint8_t) (sleepTime & 0xFF);
 80168f8:	683b      	ldr	r3, [r7, #0]
 80168fa:	b2db      	uxtb	r3, r3
 80168fc:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_SET_RXDUTYCYCLE, buf, 6);
 80168fe:	f107 0308 	add.w	r3, r7, #8
 8016902:	2206      	movs	r2, #6
 8016904:	4619      	mov	r1, r3
 8016906:	2094      	movs	r0, #148	@ 0x94
 8016908:	f000 fc7a 	bl	8017200 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_RX_DC);
 801690c:	2006      	movs	r0, #6
 801690e:	f7ff fe47 	bl	80165a0 <SX126xSetOperatingMode>
}
 8016912:	bf00      	nop
 8016914:	3710      	adds	r7, #16
 8016916:	46bd      	mov	sp, r7
 8016918:	bd80      	pop	{r7, pc}

0801691a <SX126xSetCad>:

void SX126xSetCad(void) {
 801691a:	b580      	push	{r7, lr}
 801691c:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_CAD, 0, 0);
 801691e:	2200      	movs	r2, #0
 8016920:	2100      	movs	r1, #0
 8016922:	20c5      	movs	r0, #197	@ 0xc5
 8016924:	f000 fc6c 	bl	8017200 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_CAD);
 8016928:	2007      	movs	r0, #7
 801692a:	f7ff fe39 	bl	80165a0 <SX126xSetOperatingMode>
}
 801692e:	bf00      	nop
 8016930:	bd80      	pop	{r7, pc}

08016932 <SX126xSetTxContinuousWave>:

void SX126xSetTxContinuousWave(void) {
 8016932:	b580      	push	{r7, lr}
 8016934:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSWAVE, 0, 0);
 8016936:	2200      	movs	r2, #0
 8016938:	2100      	movs	r1, #0
 801693a:	20d1      	movs	r0, #209	@ 0xd1
 801693c:	f000 fc60 	bl	8017200 <SX126xWriteCommand>
}
 8016940:	bf00      	nop
 8016942:	bd80      	pop	{r7, pc}

08016944 <SX126xSetStopRxTimerOnPreambleDetect>:

void SX126xSetTxInfinitePreamble(void) {
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0);
}

void SX126xSetStopRxTimerOnPreambleDetect(bool enable) {
 8016944:	b580      	push	{r7, lr}
 8016946:	b082      	sub	sp, #8
 8016948:	af00      	add	r7, sp, #0
 801694a:	4603      	mov	r3, r0
 801694c:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_STOPRXTIMERONPREAMBLE, (uint8_t*) &enable, 1);
 801694e:	1dfb      	adds	r3, r7, #7
 8016950:	2201      	movs	r2, #1
 8016952:	4619      	mov	r1, r3
 8016954:	209f      	movs	r0, #159	@ 0x9f
 8016956:	f000 fc53 	bl	8017200 <SX126xWriteCommand>
}
 801695a:	bf00      	nop
 801695c:	3708      	adds	r7, #8
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}

08016962 <SX126xSetLoRaSymbNumTimeout>:

void SX126xSetLoRaSymbNumTimeout(uint8_t SymbNum) {
 8016962:	b580      	push	{r7, lr}
 8016964:	b082      	sub	sp, #8
 8016966:	af00      	add	r7, sp, #0
 8016968:	4603      	mov	r3, r0
 801696a:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_LORASYMBTIMEOUT, &SymbNum, 1);
 801696c:	1dfb      	adds	r3, r7, #7
 801696e:	2201      	movs	r2, #1
 8016970:	4619      	mov	r1, r3
 8016972:	20a0      	movs	r0, #160	@ 0xa0
 8016974:	f000 fc44 	bl	8017200 <SX126xWriteCommand>
}
 8016978:	bf00      	nop
 801697a:	3708      	adds	r7, #8
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}

08016980 <SX126xSetRegulatorMode>:

void SX126xSetRegulatorMode(RadioRegulatorMode_t mode) {
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	4603      	mov	r3, r0
 8016988:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_REGULATORMODE, (uint8_t*) &mode, 1);
 801698a:	1dfb      	adds	r3, r7, #7
 801698c:	2201      	movs	r2, #1
 801698e:	4619      	mov	r1, r3
 8016990:	2096      	movs	r0, #150	@ 0x96
 8016992:	f000 fc35 	bl	8017200 <SX126xWriteCommand>
}
 8016996:	bf00      	nop
 8016998:	3708      	adds	r7, #8
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
	...

080169a0 <SX126xCalibrateImage>:

void SX126xCalibrate(CalibrationParams_t calibParam) {
	SX126xWriteCommand(RADIO_CALIBRATE, (uint8_t*) &calibParam, 1);
}

void SX126xCalibrateImage(uint32_t freq) {
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b084      	sub	sp, #16
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
	uint8_t calFreq[2];

	if (freq > 900000000) {
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	4a1b      	ldr	r2, [pc, #108]	@ (8016a18 <SX126xCalibrateImage+0x78>)
 80169ac:	4293      	cmp	r3, r2
 80169ae:	d904      	bls.n	80169ba <SX126xCalibrateImage+0x1a>
		calFreq[0] = 0xE1;
 80169b0:	23e1      	movs	r3, #225	@ 0xe1
 80169b2:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0xE9;
 80169b4:	23e9      	movs	r3, #233	@ 0xe9
 80169b6:	737b      	strb	r3, [r7, #13]
 80169b8:	e022      	b.n	8016a00 <SX126xCalibrateImage+0x60>
	}
	else if (freq > 850000000) {
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	4a17      	ldr	r2, [pc, #92]	@ (8016a1c <SX126xCalibrateImage+0x7c>)
 80169be:	4293      	cmp	r3, r2
 80169c0:	d904      	bls.n	80169cc <SX126xCalibrateImage+0x2c>
		calFreq[0] = 0xD7;
 80169c2:	23d7      	movs	r3, #215	@ 0xd7
 80169c4:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0xDB;
 80169c6:	23db      	movs	r3, #219	@ 0xdb
 80169c8:	737b      	strb	r3, [r7, #13]
 80169ca:	e019      	b.n	8016a00 <SX126xCalibrateImage+0x60>
	}
	else if (freq > 770000000) {
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	4a14      	ldr	r2, [pc, #80]	@ (8016a20 <SX126xCalibrateImage+0x80>)
 80169d0:	4293      	cmp	r3, r2
 80169d2:	d904      	bls.n	80169de <SX126xCalibrateImage+0x3e>
		calFreq[0] = 0xC1;
 80169d4:	23c1      	movs	r3, #193	@ 0xc1
 80169d6:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0xC5;
 80169d8:	23c5      	movs	r3, #197	@ 0xc5
 80169da:	737b      	strb	r3, [r7, #13]
 80169dc:	e010      	b.n	8016a00 <SX126xCalibrateImage+0x60>
	}
	else if (freq > 460000000) {
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	4a10      	ldr	r2, [pc, #64]	@ (8016a24 <SX126xCalibrateImage+0x84>)
 80169e2:	4293      	cmp	r3, r2
 80169e4:	d904      	bls.n	80169f0 <SX126xCalibrateImage+0x50>
		calFreq[0] = 0x75;
 80169e6:	2375      	movs	r3, #117	@ 0x75
 80169e8:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0x81;
 80169ea:	2381      	movs	r3, #129	@ 0x81
 80169ec:	737b      	strb	r3, [r7, #13]
 80169ee:	e007      	b.n	8016a00 <SX126xCalibrateImage+0x60>
	}
	else if (freq > 425000000) {
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	4a0d      	ldr	r2, [pc, #52]	@ (8016a28 <SX126xCalibrateImage+0x88>)
 80169f4:	4293      	cmp	r3, r2
 80169f6:	d903      	bls.n	8016a00 <SX126xCalibrateImage+0x60>
		calFreq[0] = 0x6B;
 80169f8:	236b      	movs	r3, #107	@ 0x6b
 80169fa:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0x6F;
 80169fc:	236f      	movs	r3, #111	@ 0x6f
 80169fe:	737b      	strb	r3, [r7, #13]
	}
	SX126xWriteCommand(RADIO_CALIBRATEIMAGE, calFreq, 2);
 8016a00:	f107 030c 	add.w	r3, r7, #12
 8016a04:	2202      	movs	r2, #2
 8016a06:	4619      	mov	r1, r3
 8016a08:	2098      	movs	r0, #152	@ 0x98
 8016a0a:	f000 fbf9 	bl	8017200 <SX126xWriteCommand>
}
 8016a0e:	bf00      	nop
 8016a10:	3710      	adds	r7, #16
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}
 8016a16:	bf00      	nop
 8016a18:	35a4e900 	.word	0x35a4e900
 8016a1c:	32a9f880 	.word	0x32a9f880
 8016a20:	2de54480 	.word	0x2de54480
 8016a24:	1b6b0b00 	.word	0x1b6b0b00
 8016a28:	1954fc40 	.word	0x1954fc40

08016a2c <SX126xSetPaConfig>:

void SX126xSetPaConfig(uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel,
		uint8_t paLut) {
 8016a2c:	b590      	push	{r4, r7, lr}
 8016a2e:	b085      	sub	sp, #20
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	4604      	mov	r4, r0
 8016a34:	4608      	mov	r0, r1
 8016a36:	4611      	mov	r1, r2
 8016a38:	461a      	mov	r2, r3
 8016a3a:	4623      	mov	r3, r4
 8016a3c:	71fb      	strb	r3, [r7, #7]
 8016a3e:	4603      	mov	r3, r0
 8016a40:	71bb      	strb	r3, [r7, #6]
 8016a42:	460b      	mov	r3, r1
 8016a44:	717b      	strb	r3, [r7, #5]
 8016a46:	4613      	mov	r3, r2
 8016a48:	713b      	strb	r3, [r7, #4]
	uint8_t buf[4];

	buf[0] = paDutyCycle;
 8016a4a:	79fb      	ldrb	r3, [r7, #7]
 8016a4c:	733b      	strb	r3, [r7, #12]
	buf[1] = hpMax;
 8016a4e:	79bb      	ldrb	r3, [r7, #6]
 8016a50:	737b      	strb	r3, [r7, #13]
	buf[2] = deviceSel;
 8016a52:	797b      	ldrb	r3, [r7, #5]
 8016a54:	73bb      	strb	r3, [r7, #14]
	buf[3] = paLut;
 8016a56:	793b      	ldrb	r3, [r7, #4]
 8016a58:	73fb      	strb	r3, [r7, #15]
	SX126xWriteCommand(RADIO_SET_PACONFIG, buf, 4);
 8016a5a:	f107 030c 	add.w	r3, r7, #12
 8016a5e:	2204      	movs	r2, #4
 8016a60:	4619      	mov	r1, r3
 8016a62:	2095      	movs	r0, #149	@ 0x95
 8016a64:	f000 fbcc 	bl	8017200 <SX126xWriteCommand>
}
 8016a68:	bf00      	nop
 8016a6a:	3714      	adds	r7, #20
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd90      	pop	{r4, r7, pc}

08016a70 <SX126xSetDioIrqParams>:
void SX126xSetRxTxFallbackMode(uint8_t fallbackMode) {
	SX126xWriteCommand(RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1);
}

void SX126xSetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask,
		uint16_t dio2Mask, uint16_t dio3Mask) {
 8016a70:	b590      	push	{r4, r7, lr}
 8016a72:	b085      	sub	sp, #20
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	4604      	mov	r4, r0
 8016a78:	4608      	mov	r0, r1
 8016a7a:	4611      	mov	r1, r2
 8016a7c:	461a      	mov	r2, r3
 8016a7e:	4623      	mov	r3, r4
 8016a80:	80fb      	strh	r3, [r7, #6]
 8016a82:	4603      	mov	r3, r0
 8016a84:	80bb      	strh	r3, [r7, #4]
 8016a86:	460b      	mov	r3, r1
 8016a88:	807b      	strh	r3, [r7, #2]
 8016a8a:	4613      	mov	r3, r2
 8016a8c:	803b      	strh	r3, [r7, #0]
	uint8_t buf[8];

	buf[0] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 8016a8e:	88fb      	ldrh	r3, [r7, #6]
 8016a90:	0a1b      	lsrs	r3, r3, #8
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	b2db      	uxtb	r3, r3
 8016a96:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t) (irqMask & 0x00FF);
 8016a98:	88fb      	ldrh	r3, [r7, #6]
 8016a9a:	b2db      	uxtb	r3, r3
 8016a9c:	727b      	strb	r3, [r7, #9]
	buf[2] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 8016a9e:	88bb      	ldrh	r3, [r7, #4]
 8016aa0:	0a1b      	lsrs	r3, r3, #8
 8016aa2:	b29b      	uxth	r3, r3
 8016aa4:	b2db      	uxtb	r3, r3
 8016aa6:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) (dio1Mask & 0x00FF);
 8016aa8:	88bb      	ldrh	r3, [r7, #4]
 8016aaa:	b2db      	uxtb	r3, r3
 8016aac:	72fb      	strb	r3, [r7, #11]
	buf[4] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 8016aae:	887b      	ldrh	r3, [r7, #2]
 8016ab0:	0a1b      	lsrs	r3, r3, #8
 8016ab2:	b29b      	uxth	r3, r3
 8016ab4:	b2db      	uxtb	r3, r3
 8016ab6:	733b      	strb	r3, [r7, #12]
	buf[5] = (uint8_t) (dio2Mask & 0x00FF);
 8016ab8:	887b      	ldrh	r3, [r7, #2]
 8016aba:	b2db      	uxtb	r3, r3
 8016abc:	737b      	strb	r3, [r7, #13]
	buf[6] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 8016abe:	883b      	ldrh	r3, [r7, #0]
 8016ac0:	0a1b      	lsrs	r3, r3, #8
 8016ac2:	b29b      	uxth	r3, r3
 8016ac4:	b2db      	uxtb	r3, r3
 8016ac6:	73bb      	strb	r3, [r7, #14]
	buf[7] = (uint8_t) (dio3Mask & 0x00FF);
 8016ac8:	883b      	ldrh	r3, [r7, #0]
 8016aca:	b2db      	uxtb	r3, r3
 8016acc:	73fb      	strb	r3, [r7, #15]
	SX126xWriteCommand(RADIO_CFG_DIOIRQ, buf, 8);
 8016ace:	f107 0308 	add.w	r3, r7, #8
 8016ad2:	2208      	movs	r2, #8
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	2008      	movs	r0, #8
 8016ad8:	f000 fb92 	bl	8017200 <SX126xWriteCommand>
}
 8016adc:	bf00      	nop
 8016ade:	3714      	adds	r7, #20
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd90      	pop	{r4, r7, pc}

08016ae4 <SX126xGetIrqStatus>:

uint16_t SX126xGetIrqStatus(void) {
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
	uint8_t irqStatus[2];

	SX126xReadCommand(RADIO_GET_IRQSTATUS, irqStatus, 2);
 8016aea:	1d3b      	adds	r3, r7, #4
 8016aec:	2202      	movs	r2, #2
 8016aee:	4619      	mov	r1, r3
 8016af0:	2012      	movs	r0, #18
 8016af2:	f000 fbb5 	bl	8017260 <SX126xReadCommand>
	return (irqStatus[0] << 8) | irqStatus[1];
 8016af6:	793b      	ldrb	r3, [r7, #4]
 8016af8:	021b      	lsls	r3, r3, #8
 8016afa:	b21a      	sxth	r2, r3
 8016afc:	797b      	ldrb	r3, [r7, #5]
 8016afe:	b21b      	sxth	r3, r3
 8016b00:	4313      	orrs	r3, r2
 8016b02:	b21b      	sxth	r3, r3
 8016b04:	b29b      	uxth	r3, r3
}
 8016b06:	4618      	mov	r0, r3
 8016b08:	3708      	adds	r7, #8
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	bd80      	pop	{r7, pc}

08016b0e <SX126xSetDio2AsRfSwitchCtrl>:

void SX126xSetDio2AsRfSwitchCtrl(uint8_t enable) {
 8016b0e:	b580      	push	{r7, lr}
 8016b10:	b082      	sub	sp, #8
 8016b12:	af00      	add	r7, sp, #0
 8016b14:	4603      	mov	r3, r0
 8016b16:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_RFSWITCHMODE, &enable, 1);
 8016b18:	1dfb      	adds	r3, r7, #7
 8016b1a:	2201      	movs	r2, #1
 8016b1c:	4619      	mov	r1, r3
 8016b1e:	209d      	movs	r0, #157	@ 0x9d
 8016b20:	f000 fb6e 	bl	8017200 <SX126xWriteCommand>
}
 8016b24:	bf00      	nop
 8016b26:	3708      	adds	r7, #8
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd80      	pop	{r7, pc}
 8016b2c:	0000      	movs	r0, r0
	...

08016b30 <SX126xSetRfFrequency>:
	buf[3] = (uint8_t) (timeout & 0xFF);

	SX126xWriteCommand(RADIO_SET_TCXOMODE, buf, 4);
}

void SX126xSetRfFrequency(uint32_t frequency) {
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b084      	sub	sp, #16
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
	uint8_t buf[4];
	uint32_t freq = 0;
 8016b38:	2300      	movs	r3, #0
 8016b3a:	60fb      	str	r3, [r7, #12]

	if (ImageCalibrated == false) {
 8016b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8016bb8 <SX126xSetRfFrequency+0x88>)
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	f083 0301 	eor.w	r3, r3, #1
 8016b44:	b2db      	uxtb	r3, r3
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d005      	beq.n	8016b56 <SX126xSetRfFrequency+0x26>
		SX126xCalibrateImage(frequency);
 8016b4a:	6878      	ldr	r0, [r7, #4]
 8016b4c:	f7ff ff28 	bl	80169a0 <SX126xCalibrateImage>
		ImageCalibrated = true;
 8016b50:	4b19      	ldr	r3, [pc, #100]	@ (8016bb8 <SX126xSetRfFrequency+0x88>)
 8016b52:	2201      	movs	r2, #1
 8016b54:	701a      	strb	r2, [r3, #0]
	}

	freq = (uint32_t) ((double) frequency / (double) FREQ_STEP );
 8016b56:	6878      	ldr	r0, [r7, #4]
 8016b58:	f7e9 fce4 	bl	8000524 <__aeabi_ui2d>
 8016b5c:	a314      	add	r3, pc, #80	@ (adr r3, 8016bb0 <SX126xSetRfFrequency+0x80>)
 8016b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b62:	f7e9 fe83 	bl	800086c <__aeabi_ddiv>
 8016b66:	4602      	mov	r2, r0
 8016b68:	460b      	mov	r3, r1
 8016b6a:	4610      	mov	r0, r2
 8016b6c:	4619      	mov	r1, r3
 8016b6e:	f7ea f82b 	bl	8000bc8 <__aeabi_d2uiz>
 8016b72:	4603      	mov	r3, r0
 8016b74:	60fb      	str	r3, [r7, #12]
	buf[0] = (uint8_t) ((freq >> 24) & 0xFF);
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	0e1b      	lsrs	r3, r3, #24
 8016b7a:	b2db      	uxtb	r3, r3
 8016b7c:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t) ((freq >> 16) & 0xFF);
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	0c1b      	lsrs	r3, r3, #16
 8016b82:	b2db      	uxtb	r3, r3
 8016b84:	727b      	strb	r3, [r7, #9]
	buf[2] = (uint8_t) ((freq >> 8) & 0xFF);
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	0a1b      	lsrs	r3, r3, #8
 8016b8a:	b2db      	uxtb	r3, r3
 8016b8c:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) (freq & 0xFF);
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	b2db      	uxtb	r3, r3
 8016b92:	72fb      	strb	r3, [r7, #11]
	SX126xWriteCommand(RADIO_SET_RFFREQUENCY, buf, 4);
 8016b94:	f107 0308 	add.w	r3, r7, #8
 8016b98:	2204      	movs	r2, #4
 8016b9a:	4619      	mov	r1, r3
 8016b9c:	2086      	movs	r0, #134	@ 0x86
 8016b9e:	f000 fb2f 	bl	8017200 <SX126xWriteCommand>
}
 8016ba2:	bf00      	nop
 8016ba4:	3710      	adds	r7, #16
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}
 8016baa:	bf00      	nop
 8016bac:	f3af 8000 	nop.w
 8016bb0:	00000000 	.word	0x00000000
 8016bb4:	3fee8480 	.word	0x3fee8480
 8016bb8:	20002010 	.word	0x20002010

08016bbc <SX126xSetPacketType>:

void SX126xSetPacketType(RadioPacketTypes_t packetType) {
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b082      	sub	sp, #8
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	71fb      	strb	r3, [r7, #7]
	// Save packet type internally to avoid questioning the radio
	PacketType = packetType;
 8016bc6:	79fa      	ldrb	r2, [r7, #7]
 8016bc8:	4b05      	ldr	r3, [pc, #20]	@ (8016be0 <SX126xSetPacketType+0x24>)
 8016bca:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_PACKETTYPE, (uint8_t*) &packetType, 1);
 8016bcc:	1dfb      	adds	r3, r7, #7
 8016bce:	2201      	movs	r2, #1
 8016bd0:	4619      	mov	r1, r3
 8016bd2:	208a      	movs	r0, #138	@ 0x8a
 8016bd4:	f000 fb14 	bl	8017200 <SX126xWriteCommand>
}
 8016bd8:	bf00      	nop
 8016bda:	3708      	adds	r7, #8
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}
 8016be0:	20002009 	.word	0x20002009

08016be4 <SX126xGetPacketType>:

RadioPacketTypes_t SX126xGetPacketType(void) {
 8016be4:	b480      	push	{r7}
 8016be6:	af00      	add	r7, sp, #0
	return PacketType;
 8016be8:	4b03      	ldr	r3, [pc, #12]	@ (8016bf8 <SX126xGetPacketType+0x14>)
 8016bea:	781b      	ldrb	r3, [r3, #0]
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf4:	4770      	bx	lr
 8016bf6:	bf00      	nop
 8016bf8:	20002009 	.word	0x20002009

08016bfc <SX126xSetTxParams>:

void SX126xSetTxParams(int8_t power, RadioRampTimes_t rampTime) {
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b084      	sub	sp, #16
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	4603      	mov	r3, r0
 8016c04:	460a      	mov	r2, r1
 8016c06:	71fb      	strb	r3, [r7, #7]
 8016c08:	4613      	mov	r3, r2
 8016c0a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];

	if (SX126xGetPaSelect(0) == SX1261) {
 8016c0c:	2000      	movs	r0, #0
 8016c0e:	f000 fc6e 	bl	80174ee <SX126xGetPaSelect>
 8016c12:	4603      	mov	r3, r0
 8016c14:	2b01      	cmp	r3, #1
 8016c16:	d124      	bne.n	8016c62 <SX126xSetTxParams+0x66>
		if (power == 15) {
 8016c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c1c:	2b0f      	cmp	r3, #15
 8016c1e:	d106      	bne.n	8016c2e <SX126xSetTxParams+0x32>
			SX126xSetPaConfig(0x06, 0x00, 0x01, 0x01);
 8016c20:	2301      	movs	r3, #1
 8016c22:	2201      	movs	r2, #1
 8016c24:	2100      	movs	r1, #0
 8016c26:	2006      	movs	r0, #6
 8016c28:	f7ff ff00 	bl	8016a2c <SX126xSetPaConfig>
 8016c2c:	e005      	b.n	8016c3a <SX126xSetTxParams+0x3e>
		}
		else {
			SX126xSetPaConfig(0x04, 0x00, 0x01, 0x01);
 8016c2e:	2301      	movs	r3, #1
 8016c30:	2201      	movs	r2, #1
 8016c32:	2100      	movs	r1, #0
 8016c34:	2004      	movs	r0, #4
 8016c36:	f7ff fef9 	bl	8016a2c <SX126xSetPaConfig>
		}
		if (power >= 14) {
 8016c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c3e:	2b0d      	cmp	r3, #13
 8016c40:	dd02      	ble.n	8016c48 <SX126xSetTxParams+0x4c>
			power = 14;
 8016c42:	230e      	movs	r3, #14
 8016c44:	71fb      	strb	r3, [r7, #7]
 8016c46:	e006      	b.n	8016c56 <SX126xSetTxParams+0x5a>
		}
		else if (power < -17) {
 8016c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c4c:	f113 0f11 	cmn.w	r3, #17
 8016c50:	da01      	bge.n	8016c56 <SX126xSetTxParams+0x5a>
			power = -17;
 8016c52:	23ef      	movs	r3, #239	@ 0xef
 8016c54:	71fb      	strb	r3, [r7, #7]
		}
		SX126xWriteRegister(REG_OCP, 0x18); // current max is 80 mA for the whole device
 8016c56:	2118      	movs	r1, #24
 8016c58:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8016c5c:	f000 fb6a 	bl	8017334 <SX126xWriteRegister>
 8016c60:	e025      	b.n	8016cae <SX126xSetTxParams+0xb2>
	}
	else // sx1262
	{
		// WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
		// RegTxClampConfig = @address 0x08D8
		SX126xWriteRegister(0x08D8, SX126xReadRegister(0x08D8) | (0x0F << 1));
 8016c62:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8016c66:	f000 fbb1 	bl	80173cc <SX126xReadRegister>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	f043 031e 	orr.w	r3, r3, #30
 8016c70:	b2db      	uxtb	r3, r3
 8016c72:	4619      	mov	r1, r3
 8016c74:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8016c78:	f000 fb5c 	bl	8017334 <SX126xWriteRegister>
		// WORKAROUND END

		SX126xSetPaConfig(0x04, 0x07, 0x00, 0x01);
 8016c7c:	2301      	movs	r3, #1
 8016c7e:	2200      	movs	r2, #0
 8016c80:	2107      	movs	r1, #7
 8016c82:	2004      	movs	r0, #4
 8016c84:	f7ff fed2 	bl	8016a2c <SX126xSetPaConfig>
		if (power > 22) {
 8016c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c8c:	2b16      	cmp	r3, #22
 8016c8e:	dd02      	ble.n	8016c96 <SX126xSetTxParams+0x9a>
			power = 22;
 8016c90:	2316      	movs	r3, #22
 8016c92:	71fb      	strb	r3, [r7, #7]
 8016c94:	e006      	b.n	8016ca4 <SX126xSetTxParams+0xa8>
		}
		else if (power < -9) {
 8016c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c9a:	f113 0f09 	cmn.w	r3, #9
 8016c9e:	da01      	bge.n	8016ca4 <SX126xSetTxParams+0xa8>
			power = -9;
 8016ca0:	23f7      	movs	r3, #247	@ 0xf7
 8016ca2:	71fb      	strb	r3, [r7, #7]
		}
		SX126xWriteRegister(REG_OCP, 0x38); // current max 160mA for the whole device
 8016ca4:	2138      	movs	r1, #56	@ 0x38
 8016ca6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8016caa:	f000 fb43 	bl	8017334 <SX126xWriteRegister>
	}
	buf[0] = power;
 8016cae:	79fb      	ldrb	r3, [r7, #7]
 8016cb0:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) rampTime;
 8016cb2:	79bb      	ldrb	r3, [r7, #6]
 8016cb4:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8016cb6:	f107 030c 	add.w	r3, r7, #12
 8016cba:	2202      	movs	r2, #2
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	208e      	movs	r0, #142	@ 0x8e
 8016cc0:	f000 fa9e 	bl	8017200 <SX126xWriteCommand>
}
 8016cc4:	bf00      	nop
 8016cc6:	3710      	adds	r7, #16
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}
 8016ccc:	0000      	movs	r0, r0
	...

08016cd0 <SX126xSetModulationParams>:

void SX126xSetModulationParams(ModulationParams_t *modulationParams) {
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b086      	sub	sp, #24
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint32_t tempVal = 0;
 8016cd8:	2300      	movs	r3, #0
 8016cda:	617b      	str	r3, [r7, #20]
	uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8016cdc:	4a48      	ldr	r2, [pc, #288]	@ (8016e00 <SX126xSetModulationParams+0x130>)
 8016cde:	f107 0308 	add.w	r3, r7, #8
 8016ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ce6:	e883 0003 	stmia.w	r3, {r0, r1}

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != modulationParams->PacketType) {
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	781a      	ldrb	r2, [r3, #0]
 8016cee:	4b45      	ldr	r3, [pc, #276]	@ (8016e04 <SX126xSetModulationParams+0x134>)
 8016cf0:	781b      	ldrb	r3, [r3, #0]
 8016cf2:	429a      	cmp	r2, r3
 8016cf4:	d004      	beq.n	8016d00 <SX126xSetModulationParams+0x30>
		SX126xSetPacketType(modulationParams->PacketType);
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	781b      	ldrb	r3, [r3, #0]
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7ff ff5e 	bl	8016bbc <SX126xSetPacketType>
	}

	switch (modulationParams->PacketType) {
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	781b      	ldrb	r3, [r3, #0]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d002      	beq.n	8016d0e <SX126xSetModulationParams+0x3e>
 8016d08:	2b01      	cmp	r3, #1
 8016d0a:	d056      	beq.n	8016dba <SX126xSetModulationParams+0xea>
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);

		break;
		default:
		case PACKET_TYPE_NONE:
			return;
 8016d0c:	e06c      	b.n	8016de8 <SX126xSetModulationParams+0x118>
			n = 8;
 8016d0e:	2308      	movs	r3, #8
 8016d10:	74fb      	strb	r3, [r7, #19]
							/ (double) modulationParams->Params.Gfsk.BitRate));
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	685b      	ldr	r3, [r3, #4]
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7e9 fc04 	bl	8000524 <__aeabi_ui2d>
 8016d1c:	4602      	mov	r2, r0
 8016d1e:	460b      	mov	r3, r1
 8016d20:	a133      	add	r1, pc, #204	@ (adr r1, 8016df0 <SX126xSetModulationParams+0x120>)
 8016d22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d26:	f7e9 fda1 	bl	800086c <__aeabi_ddiv>
 8016d2a:	4602      	mov	r2, r0
 8016d2c:	460b      	mov	r3, r1
 8016d2e:	4610      	mov	r0, r2
 8016d30:	4619      	mov	r1, r3
					* ((double) XTAL_FREQ
 8016d32:	f04f 0200 	mov.w	r2, #0
 8016d36:	4b34      	ldr	r3, [pc, #208]	@ (8016e08 <SX126xSetModulationParams+0x138>)
 8016d38:	f7e9 fc6e 	bl	8000618 <__aeabi_dmul>
 8016d3c:	4602      	mov	r2, r0
 8016d3e:	460b      	mov	r3, r1
			tempVal = (uint32_t) (32
 8016d40:	4610      	mov	r0, r2
 8016d42:	4619      	mov	r1, r3
 8016d44:	f7e9 ff40 	bl	8000bc8 <__aeabi_d2uiz>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	617b      	str	r3, [r7, #20]
			buf[0] = (tempVal >> 16) & 0xFF;
 8016d4c:	697b      	ldr	r3, [r7, #20]
 8016d4e:	0c1b      	lsrs	r3, r3, #16
 8016d50:	b2db      	uxtb	r3, r3
 8016d52:	723b      	strb	r3, [r7, #8]
			buf[1] = (tempVal >> 8) & 0xFF;
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	0a1b      	lsrs	r3, r3, #8
 8016d58:	b2db      	uxtb	r3, r3
 8016d5a:	727b      	strb	r3, [r7, #9]
			buf[2] = tempVal & 0xFF;
 8016d5c:	697b      	ldr	r3, [r7, #20]
 8016d5e:	b2db      	uxtb	r3, r3
 8016d60:	72bb      	strb	r3, [r7, #10]
			buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	7b1b      	ldrb	r3, [r3, #12]
 8016d66:	72fb      	strb	r3, [r7, #11]
			buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	7b5b      	ldrb	r3, [r3, #13]
 8016d6c:	733b      	strb	r3, [r7, #12]
			tempVal = (uint32_t) ((double) modulationParams->Params.Gfsk.Fdev
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	689b      	ldr	r3, [r3, #8]
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7e9 fbd6 	bl	8000524 <__aeabi_ui2d>
					/ (double) FREQ_STEP );
 8016d78:	a31f      	add	r3, pc, #124	@ (adr r3, 8016df8 <SX126xSetModulationParams+0x128>)
 8016d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d7e:	f7e9 fd75 	bl	800086c <__aeabi_ddiv>
 8016d82:	4602      	mov	r2, r0
 8016d84:	460b      	mov	r3, r1
			tempVal = (uint32_t) ((double) modulationParams->Params.Gfsk.Fdev
 8016d86:	4610      	mov	r0, r2
 8016d88:	4619      	mov	r1, r3
 8016d8a:	f7e9 ff1d 	bl	8000bc8 <__aeabi_d2uiz>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	617b      	str	r3, [r7, #20]
			buf[5] = (tempVal >> 16) & 0xFF;
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	0c1b      	lsrs	r3, r3, #16
 8016d96:	b2db      	uxtb	r3, r3
 8016d98:	737b      	strb	r3, [r7, #13]
			buf[6] = (tempVal >> 8) & 0xFF;
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	0a1b      	lsrs	r3, r3, #8
 8016d9e:	b2db      	uxtb	r3, r3
 8016da0:	73bb      	strb	r3, [r7, #14]
			buf[7] = (tempVal & 0xFF);
 8016da2:	697b      	ldr	r3, [r7, #20]
 8016da4:	b2db      	uxtb	r3, r3
 8016da6:	73fb      	strb	r3, [r7, #15]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 8016da8:	7cfb      	ldrb	r3, [r7, #19]
 8016daa:	b29a      	uxth	r2, r3
 8016dac:	f107 0308 	add.w	r3, r7, #8
 8016db0:	4619      	mov	r1, r3
 8016db2:	208b      	movs	r0, #139	@ 0x8b
 8016db4:	f000 fa24 	bl	8017200 <SX126xWriteCommand>
		break;
 8016db8:	e016      	b.n	8016de8 <SX126xSetModulationParams+0x118>
			n = 4;
 8016dba:	2304      	movs	r3, #4
 8016dbc:	74fb      	strb	r3, [r7, #19]
			buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	7c1b      	ldrb	r3, [r3, #16]
 8016dc2:	723b      	strb	r3, [r7, #8]
			buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	7c5b      	ldrb	r3, [r3, #17]
 8016dc8:	727b      	strb	r3, [r7, #9]
			buf[2] = modulationParams->Params.LoRa.CodingRate;
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	7c9b      	ldrb	r3, [r3, #18]
 8016dce:	72bb      	strb	r3, [r7, #10]
			buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	7cdb      	ldrb	r3, [r3, #19]
 8016dd4:	72fb      	strb	r3, [r7, #11]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 8016dd6:	7cfb      	ldrb	r3, [r7, #19]
 8016dd8:	b29a      	uxth	r2, r3
 8016dda:	f107 0308 	add.w	r3, r7, #8
 8016dde:	4619      	mov	r1, r3
 8016de0:	208b      	movs	r0, #139	@ 0x8b
 8016de2:	f000 fa0d 	bl	8017200 <SX126xWriteCommand>
		break;
 8016de6:	bf00      	nop
	}
}
 8016de8:	3718      	adds	r7, #24
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bd80      	pop	{r7, pc}
 8016dee:	bf00      	nop
 8016df0:	00000000 	.word	0x00000000
 8016df4:	417e8480 	.word	0x417e8480
 8016df8:	00000000 	.word	0x00000000
 8016dfc:	3fee8480 	.word	0x3fee8480
 8016e00:	08020d88 	.word	0x08020d88
 8016e04:	20002009 	.word	0x20002009
 8016e08:	40400000 	.word	0x40400000

08016e0c <SX126xSetPacketParams>:

void SX126xSetPacketParams(PacketParams_t *packetParams) {
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b086      	sub	sp, #24
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint8_t crcVal = 0;
 8016e14:	2300      	movs	r3, #0
 8016e16:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8016e18:	4a3e      	ldr	r2, [pc, #248]	@ (8016f14 <SX126xSetPacketParams+0x108>)
 8016e1a:	f107 030c 	add.w	r3, r7, #12
 8016e1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016e20:	c303      	stmia	r3!, {r0, r1}
 8016e22:	701a      	strb	r2, [r3, #0]

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != packetParams->PacketType) {
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	781a      	ldrb	r2, [r3, #0]
 8016e28:	4b3b      	ldr	r3, [pc, #236]	@ (8016f18 <SX126xSetPacketParams+0x10c>)
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	429a      	cmp	r2, r3
 8016e2e:	d004      	beq.n	8016e3a <SX126xSetPacketParams+0x2e>
		SX126xSetPacketType(packetParams->PacketType);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	781b      	ldrb	r3, [r3, #0]
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7ff fec1 	bl	8016bbc <SX126xSetPacketType>
	}

	switch (packetParams->PacketType) {
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	781b      	ldrb	r3, [r3, #0]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d002      	beq.n	8016e48 <SX126xSetPacketParams+0x3c>
 8016e42:	2b01      	cmp	r3, #1
 8016e44:	d042      	beq.n	8016ecc <SX126xSetPacketParams+0xc0>
			buf[4] = packetParams->Params.LoRa.CrcMode;
			buf[5] = packetParams->Params.LoRa.InvertIQ;
		break;
		default:
		case PACKET_TYPE_NONE:
			return;
 8016e46:	e062      	b.n	8016f0e <SX126xSetPacketParams+0x102>
			if (packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM) {
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	7a5b      	ldrb	r3, [r3, #9]
 8016e4c:	2bf1      	cmp	r3, #241	@ 0xf1
 8016e4e:	d10a      	bne.n	8016e66 <SX126xSetPacketParams+0x5a>
				SX126xSetCrcSeed(CRC_IBM_SEED);
 8016e50:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016e54:	f7ff fc1c 	bl	8016690 <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_IBM);
 8016e58:	f248 0005 	movw	r0, #32773	@ 0x8005
 8016e5c:	f7ff fc38 	bl	80166d0 <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES;
 8016e60:	2302      	movs	r3, #2
 8016e62:	75bb      	strb	r3, [r7, #22]
 8016e64:	e011      	b.n	8016e8a <SX126xSetPacketParams+0x7e>
			else if (packetParams->Params.Gfsk.CrcLength
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	7a5b      	ldrb	r3, [r3, #9]
 8016e6a:	2bf2      	cmp	r3, #242	@ 0xf2
 8016e6c:	d10a      	bne.n	8016e84 <SX126xSetPacketParams+0x78>
				SX126xSetCrcSeed(CRC_CCITT_SEED);
 8016e6e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8016e72:	f7ff fc0d 	bl	8016690 <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_CCITT);
 8016e76:	f241 0021 	movw	r0, #4129	@ 0x1021
 8016e7a:	f7ff fc29 	bl	80166d0 <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES_INV;
 8016e7e:	2306      	movs	r3, #6
 8016e80:	75bb      	strb	r3, [r7, #22]
 8016e82:	e002      	b.n	8016e8a <SX126xSetPacketParams+0x7e>
				crcVal = packetParams->Params.Gfsk.CrcLength;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	7a5b      	ldrb	r3, [r3, #9]
 8016e88:	75bb      	strb	r3, [r7, #22]
			n = 9;
 8016e8a:	2309      	movs	r3, #9
 8016e8c:	75fb      	strb	r3, [r7, #23]
			buf[0] = (packetParams->Params.Gfsk.PreambleLength >> 8) & 0xFF;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	885b      	ldrh	r3, [r3, #2]
 8016e92:	0a1b      	lsrs	r3, r3, #8
 8016e94:	b29b      	uxth	r3, r3
 8016e96:	b2db      	uxtb	r3, r3
 8016e98:	733b      	strb	r3, [r7, #12]
			buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	885b      	ldrh	r3, [r3, #2]
 8016e9e:	b2db      	uxtb	r3, r3
 8016ea0:	737b      	strb	r3, [r7, #13]
			buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	791b      	ldrb	r3, [r3, #4]
 8016ea6:	73bb      	strb	r3, [r7, #14]
			buf[3] = (packetParams->Params.Gfsk.SyncWordLength /*<< 3*/); // convert from byte to bit
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	795b      	ldrb	r3, [r3, #5]
 8016eac:	73fb      	strb	r3, [r7, #15]
			buf[4] = packetParams->Params.Gfsk.AddrComp;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	799b      	ldrb	r3, [r3, #6]
 8016eb2:	743b      	strb	r3, [r7, #16]
			buf[5] = packetParams->Params.Gfsk.HeaderType;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	79db      	ldrb	r3, [r3, #7]
 8016eb8:	747b      	strb	r3, [r7, #17]
			buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	7a1b      	ldrb	r3, [r3, #8]
 8016ebe:	74bb      	strb	r3, [r7, #18]
			buf[7] = crcVal;
 8016ec0:	7dbb      	ldrb	r3, [r7, #22]
 8016ec2:	74fb      	strb	r3, [r7, #19]
			buf[8] = packetParams->Params.Gfsk.DcFree;
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	7a9b      	ldrb	r3, [r3, #10]
 8016ec8:	753b      	strb	r3, [r7, #20]
		break;
 8016eca:	e018      	b.n	8016efe <SX126xSetPacketParams+0xf2>
			n = 6;
 8016ecc:	2306      	movs	r3, #6
 8016ece:	75fb      	strb	r3, [r7, #23]
			buf[0] = (packetParams->Params.LoRa.PreambleLength >> 8) & 0xFF;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	899b      	ldrh	r3, [r3, #12]
 8016ed4:	0a1b      	lsrs	r3, r3, #8
 8016ed6:	b29b      	uxth	r3, r3
 8016ed8:	b2db      	uxtb	r3, r3
 8016eda:	733b      	strb	r3, [r7, #12]
			buf[1] = packetParams->Params.LoRa.PreambleLength;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	899b      	ldrh	r3, [r3, #12]
 8016ee0:	b2db      	uxtb	r3, r3
 8016ee2:	737b      	strb	r3, [r7, #13]
			buf[2] = packetParams->Params.LoRa.HeaderType;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	7b9b      	ldrb	r3, [r3, #14]
 8016ee8:	73bb      	strb	r3, [r7, #14]
			buf[3] = packetParams->Params.LoRa.PayloadLength;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	7bdb      	ldrb	r3, [r3, #15]
 8016eee:	73fb      	strb	r3, [r7, #15]
			buf[4] = packetParams->Params.LoRa.CrcMode;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	7c1b      	ldrb	r3, [r3, #16]
 8016ef4:	743b      	strb	r3, [r7, #16]
			buf[5] = packetParams->Params.LoRa.InvertIQ;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	7c5b      	ldrb	r3, [r3, #17]
 8016efa:	747b      	strb	r3, [r7, #17]
		break;
 8016efc:	bf00      	nop
	}
	SX126xWriteCommand(RADIO_SET_PACKETPARAMS, buf, n);
 8016efe:	7dfb      	ldrb	r3, [r7, #23]
 8016f00:	b29a      	uxth	r2, r3
 8016f02:	f107 030c 	add.w	r3, r7, #12
 8016f06:	4619      	mov	r1, r3
 8016f08:	208c      	movs	r0, #140	@ 0x8c
 8016f0a:	f000 f979 	bl	8017200 <SX126xWriteCommand>
}
 8016f0e:	3718      	adds	r7, #24
 8016f10:	46bd      	mov	sp, r7
 8016f12:	bd80      	pop	{r7, pc}
 8016f14:	08020d90 	.word	0x08020d90
 8016f18:	20002009 	.word	0x20002009

08016f1c <SX126xSetCadParams>:

void SX126xSetCadParams(RadioLoRaCadSymbols_t cadSymbolNum, uint8_t cadDetPeak,
		uint8_t cadDetMin, RadioCadExitModes_t cadExitMode, uint32_t cadTimeout) {
 8016f1c:	b590      	push	{r4, r7, lr}
 8016f1e:	b085      	sub	sp, #20
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	4604      	mov	r4, r0
 8016f24:	4608      	mov	r0, r1
 8016f26:	4611      	mov	r1, r2
 8016f28:	461a      	mov	r2, r3
 8016f2a:	4623      	mov	r3, r4
 8016f2c:	71fb      	strb	r3, [r7, #7]
 8016f2e:	4603      	mov	r3, r0
 8016f30:	71bb      	strb	r3, [r7, #6]
 8016f32:	460b      	mov	r3, r1
 8016f34:	717b      	strb	r3, [r7, #5]
 8016f36:	4613      	mov	r3, r2
 8016f38:	713b      	strb	r3, [r7, #4]
	uint8_t buf[7];

	buf[0] = (uint8_t) cadSymbolNum;
 8016f3a:	79fb      	ldrb	r3, [r7, #7]
 8016f3c:	723b      	strb	r3, [r7, #8]
	buf[1] = cadDetPeak;
 8016f3e:	79bb      	ldrb	r3, [r7, #6]
 8016f40:	727b      	strb	r3, [r7, #9]
	buf[2] = cadDetMin;
 8016f42:	797b      	ldrb	r3, [r7, #5]
 8016f44:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) cadExitMode;
 8016f46:	793b      	ldrb	r3, [r7, #4]
 8016f48:	72fb      	strb	r3, [r7, #11]
	buf[4] = (uint8_t) ((cadTimeout >> 16) & 0xFF);
 8016f4a:	6a3b      	ldr	r3, [r7, #32]
 8016f4c:	0c1b      	lsrs	r3, r3, #16
 8016f4e:	b2db      	uxtb	r3, r3
 8016f50:	733b      	strb	r3, [r7, #12]
	buf[5] = (uint8_t) ((cadTimeout >> 8) & 0xFF);
 8016f52:	6a3b      	ldr	r3, [r7, #32]
 8016f54:	0a1b      	lsrs	r3, r3, #8
 8016f56:	b2db      	uxtb	r3, r3
 8016f58:	737b      	strb	r3, [r7, #13]
	buf[6] = (uint8_t) (cadTimeout & 0xFF);
 8016f5a:	6a3b      	ldr	r3, [r7, #32]
 8016f5c:	b2db      	uxtb	r3, r3
 8016f5e:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_CADPARAMS, buf, 7);
 8016f60:	f107 0308 	add.w	r3, r7, #8
 8016f64:	2207      	movs	r2, #7
 8016f66:	4619      	mov	r1, r3
 8016f68:	2088      	movs	r0, #136	@ 0x88
 8016f6a:	f000 f949 	bl	8017200 <SX126xWriteCommand>
	OperatingMode = MODE_CAD;
 8016f6e:	4b03      	ldr	r3, [pc, #12]	@ (8016f7c <SX126xSetCadParams+0x60>)
 8016f70:	2207      	movs	r2, #7
 8016f72:	701a      	strb	r2, [r3, #0]
}
 8016f74:	bf00      	nop
 8016f76:	3714      	adds	r7, #20
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd90      	pop	{r4, r7, pc}
 8016f7c:	20002008 	.word	0x20002008

08016f80 <SX126xSetBufferBaseAddress>:

void SX126xSetBufferBaseAddress(uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b084      	sub	sp, #16
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	4603      	mov	r3, r0
 8016f88:	460a      	mov	r2, r1
 8016f8a:	71fb      	strb	r3, [r7, #7]
 8016f8c:	4613      	mov	r3, r2
 8016f8e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 8016f90:	79fb      	ldrb	r3, [r7, #7]
 8016f92:	733b      	strb	r3, [r7, #12]
	buf[1] = rxBaseAddress;
 8016f94:	79bb      	ldrb	r3, [r7, #6]
 8016f96:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_SET_BUFFERBASEADDRESS, buf, 2);
 8016f98:	f107 030c 	add.w	r3, r7, #12
 8016f9c:	2202      	movs	r2, #2
 8016f9e:	4619      	mov	r1, r3
 8016fa0:	208f      	movs	r0, #143	@ 0x8f
 8016fa2:	f000 f92d 	bl	8017200 <SX126xWriteCommand>
}
 8016fa6:	bf00      	nop
 8016fa8:	3710      	adds	r7, #16
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd80      	pop	{r7, pc}

08016fae <SX126xGetRssiInst>:
	SX126xReadCommand(RADIO_GET_STATUS, (uint8_t*) &stat, 1);
	status.Value = stat;
	return status;
}

int8_t SX126xGetRssiInst(void) {
 8016fae:	b580      	push	{r7, lr}
 8016fb0:	b082      	sub	sp, #8
 8016fb2:	af00      	add	r7, sp, #0
	uint8_t buf[1];
	int8_t rssi = 0;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	71fb      	strb	r3, [r7, #7]

	SX126xReadCommand(RADIO_GET_RSSIINST, buf, 1);
 8016fb8:	1d3b      	adds	r3, r7, #4
 8016fba:	2201      	movs	r2, #1
 8016fbc:	4619      	mov	r1, r3
 8016fbe:	2015      	movs	r0, #21
 8016fc0:	f000 f94e 	bl	8017260 <SX126xReadCommand>
	rssi = -buf[0] >> 1;
 8016fc4:	793b      	ldrb	r3, [r7, #4]
 8016fc6:	425b      	negs	r3, r3
 8016fc8:	105b      	asrs	r3, r3, #1
 8016fca:	71fb      	strb	r3, [r7, #7]
	return rssi;
 8016fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	3708      	adds	r7, #8
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bd80      	pop	{r7, pc}

08016fd8 <SX126xGetRxBufferStatus>:

void SX126xGetRxBufferStatus(uint8_t *payloadLength,
		uint8_t *rxStartBufferPointer) {
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b084      	sub	sp, #16
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
 8016fe0:	6039      	str	r1, [r7, #0]
	uint8_t status[2];

	SX126xReadCommand(RADIO_GET_RXBUFFERSTATUS, status, 2);
 8016fe2:	f107 030c 	add.w	r3, r7, #12
 8016fe6:	2202      	movs	r2, #2
 8016fe8:	4619      	mov	r1, r3
 8016fea:	2013      	movs	r0, #19
 8016fec:	f000 f938 	bl	8017260 <SX126xReadCommand>

	// In case of LORA fixed header, the payloadLength is obtained by reading
	// the register REG_LR_PAYLOADLENGTH
	if ((SX126xGetPacketType() == PACKET_TYPE_LORA)
 8016ff0:	f7ff fdf8 	bl	8016be4 <SX126xGetPacketType>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	2b01      	cmp	r3, #1
 8016ff8:	d111      	bne.n	801701e <SX126xGetRxBufferStatus+0x46>
			&& (SX126xReadRegister(REG_LR_PACKETPARAMS) >> 7 == 1)) {
 8016ffa:	f240 7004 	movw	r0, #1796	@ 0x704
 8016ffe:	f000 f9e5 	bl	80173cc <SX126xReadRegister>
 8017002:	4603      	mov	r3, r0
 8017004:	09db      	lsrs	r3, r3, #7
 8017006:	b2db      	uxtb	r3, r3
 8017008:	2b01      	cmp	r3, #1
 801700a:	d108      	bne.n	801701e <SX126xGetRxBufferStatus+0x46>
		*payloadLength = SX126xReadRegister(REG_LR_PAYLOADLENGTH);
 801700c:	f240 7002 	movw	r0, #1794	@ 0x702
 8017010:	f000 f9dc 	bl	80173cc <SX126xReadRegister>
 8017014:	4603      	mov	r3, r0
 8017016:	461a      	mov	r2, r3
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	701a      	strb	r2, [r3, #0]
 801701c:	e002      	b.n	8017024 <SX126xGetRxBufferStatus+0x4c>
	}
	else {
		*payloadLength = status[0];
 801701e:	7b3a      	ldrb	r2, [r7, #12]
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	701a      	strb	r2, [r3, #0]
	}
	*rxStartBufferPointer = status[1];
 8017024:	7b7a      	ldrb	r2, [r7, #13]
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	701a      	strb	r2, [r3, #0]
}
 801702a:	bf00      	nop
 801702c:	3710      	adds	r7, #16
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}
	...

08017034 <SX126xGetPacketStatus>:

void SX126xGetPacketStatus(PacketStatus_t *pktStatus) {
 8017034:	b580      	push	{r7, lr}
 8017036:	b084      	sub	sp, #16
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
	uint8_t status[3];

	SX126xReadCommand(RADIO_GET_PACKETSTATUS, status, 3);
 801703c:	f107 030c 	add.w	r3, r7, #12
 8017040:	2203      	movs	r2, #3
 8017042:	4619      	mov	r1, r3
 8017044:	2014      	movs	r0, #20
 8017046:	f000 f90b 	bl	8017260 <SX126xReadCommand>

	pktStatus->packetType = SX126xGetPacketType();
 801704a:	f7ff fdcb 	bl	8016be4 <SX126xGetPacketType>
 801704e:	4603      	mov	r3, r0
 8017050:	461a      	mov	r2, r3
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	701a      	strb	r2, [r3, #0]
	switch (pktStatus->packetType) {
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	781b      	ldrb	r3, [r3, #0]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d002      	beq.n	8017064 <SX126xGetPacketStatus+0x30>
 801705e:	2b01      	cmp	r3, #1
 8017060:	d013      	beq.n	801708a <SX126xGetPacketStatus+0x56>
 8017062:	e02a      	b.n	80170ba <SX126xGetPacketStatus+0x86>
		case PACKET_TYPE_GFSK:
			pktStatus->Params.Gfsk.RxStatus = status[0];
 8017064:	7b3a      	ldrb	r2, [r7, #12]
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	711a      	strb	r2, [r3, #4]
			pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801706a:	7b7b      	ldrb	r3, [r7, #13]
 801706c:	425b      	negs	r3, r3
 801706e:	105b      	asrs	r3, r3, #1
 8017070:	b25a      	sxtb	r2, r3
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	719a      	strb	r2, [r3, #6]
			pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8017076:	7bbb      	ldrb	r3, [r7, #14]
 8017078:	425b      	negs	r3, r3
 801707a:	105b      	asrs	r3, r3, #1
 801707c:	b25a      	sxtb	r2, r3
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	715a      	strb	r2, [r3, #5]
			pktStatus->Params.Gfsk.FreqError = 0;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	2200      	movs	r2, #0
 8017086:	609a      	str	r2, [r3, #8]
		break;
 8017088:	e020      	b.n	80170cc <SX126xGetPacketStatus+0x98>

		case PACKET_TYPE_LORA:
			pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801708a:	7b3b      	ldrb	r3, [r7, #12]
 801708c:	425b      	negs	r3, r3
 801708e:	105b      	asrs	r3, r3, #1
 8017090:	b25a      	sxtb	r2, r3
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	731a      	strb	r2, [r3, #12]
			// Returns SNR value [dB] rounded to the nearest integer value
			pktStatus->Params.LoRa.SnrPkt = (((int8_t) status[1]) + 2) >> 2;
 8017096:	7b7b      	ldrb	r3, [r7, #13]
 8017098:	b25b      	sxtb	r3, r3
 801709a:	3302      	adds	r3, #2
 801709c:	109b      	asrs	r3, r3, #2
 801709e:	b25a      	sxtb	r2, r3
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	735a      	strb	r2, [r3, #13]
			pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80170a4:	7bbb      	ldrb	r3, [r7, #14]
 80170a6:	425b      	negs	r3, r3
 80170a8:	105b      	asrs	r3, r3, #1
 80170aa:	b25a      	sxtb	r2, r3
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	739a      	strb	r2, [r3, #14]
			pktStatus->Params.LoRa.FreqError = FrequencyError;
 80170b0:	4b08      	ldr	r3, [pc, #32]	@ (80170d4 <SX126xGetPacketStatus+0xa0>)
 80170b2:	681a      	ldr	r2, [r3, #0]
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	611a      	str	r2, [r3, #16]
		break;
 80170b8:	e008      	b.n	80170cc <SX126xGetPacketStatus+0x98>

		default:
		case PACKET_TYPE_NONE:
			// In that specific case, we set everything in the pktStatus to zeros
			// and reset the packet type accordingly
			memset(pktStatus, 0, sizeof(PacketStatus_t));
 80170ba:	2214      	movs	r2, #20
 80170bc:	2100      	movs	r1, #0
 80170be:	6878      	ldr	r0, [r7, #4]
 80170c0:	f001 fd7c 	bl	8018bbc <memset>
			pktStatus->packetType = PACKET_TYPE_NONE;
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	220f      	movs	r2, #15
 80170c8:	701a      	strb	r2, [r3, #0]
		break;
 80170ca:	bf00      	nop
	}
}
 80170cc:	bf00      	nop
 80170ce:	3710      	adds	r7, #16
 80170d0:	46bd      	mov	sp, r7
 80170d2:	bd80      	pop	{r7, pc}
 80170d4:	2000200c 	.word	0x2000200c

080170d8 <SX126xClearIrqStatus>:
void SX126xClearDeviceErrors(void) {
	uint8_t buf[2] = { 0x00, 0x00 };
	SX126xWriteCommand(RADIO_CLR_ERROR, buf, 2);
}

void SX126xClearIrqStatus(uint16_t irq) {
 80170d8:	b580      	push	{r7, lr}
 80170da:	b084      	sub	sp, #16
 80170dc:	af00      	add	r7, sp, #0
 80170de:	4603      	mov	r3, r0
 80170e0:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = (uint8_t) (((uint16_t) irq >> 8) & 0x00FF);
 80170e2:	88fb      	ldrh	r3, [r7, #6]
 80170e4:	0a1b      	lsrs	r3, r3, #8
 80170e6:	b29b      	uxth	r3, r3
 80170e8:	b2db      	uxtb	r3, r3
 80170ea:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((uint16_t) irq & 0x00FF);
 80170ec:	88fb      	ldrh	r3, [r7, #6]
 80170ee:	b2db      	uxtb	r3, r3
 80170f0:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_CLR_IRQSTATUS, buf, 2);
 80170f2:	f107 030c 	add.w	r3, r7, #12
 80170f6:	2202      	movs	r2, #2
 80170f8:	4619      	mov	r1, r3
 80170fa:	2002      	movs	r0, #2
 80170fc:	f000 f880 	bl	8017200 <SX126xWriteCommand>
}
 8017100:	bf00      	nop
 8017102:	3710      	adds	r7, #16
 8017104:	46bd      	mov	sp, r7
 8017106:	bd80      	pop	{r7, pc}

08017108 <SX126xIoInit>:
#include "main.h"


bool dio3IsOutput = false;

void SX126xIoInit(void){
 8017108:	b580      	push	{r7, lr}
 801710a:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 801710c:	4b03      	ldr	r3, [pc, #12]	@ (801711c <SX126xIoInit+0x14>)
 801710e:	2200      	movs	r2, #0
 8017110:	701a      	strb	r2, [r3, #0]

	SX126xReset();
 8017112:	f000 f805 	bl	8017120 <SX126xReset>
}
 8017116:	bf00      	nop
 8017118:	bd80      	pop	{r7, pc}
 801711a:	bf00      	nop
 801711c:	20002011 	.word	0x20002011

08017120 <SX126xReset>:

void SX126xIoDeInit(void){
	dio3IsOutput = false;
}

void SX126xReset(void){
 8017120:	b580      	push	{r7, lr}
 8017122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 8017124:	2200      	movs	r2, #0
 8017126:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801712a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801712e:	f7ec f9d1 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8017132:	200a      	movs	r0, #10
 8017134:	f7eb f856 	bl	80021e4 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8017138:	2201      	movs	r2, #1
 801713a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801713e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8017142:	f7ec f9c7 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8017146:	2014      	movs	r0, #20
 8017148:	f7eb f84c 	bl	80021e4 <HAL_Delay>
	dio3IsOutput = false;
 801714c:	4b02      	ldr	r3, [pc, #8]	@ (8017158 <SX126xReset+0x38>)
 801714e:	2200      	movs	r2, #0
 8017150:	701a      	strb	r2, [r3, #0]
}
 8017152:	bf00      	nop
 8017154:	bd80      	pop	{r7, pc}
 8017156:	bf00      	nop
 8017158:	20002011 	.word	0x20002011

0801715c <SX126xWaitOnBusy>:

void SX126xWaitOnBusy(void){
 801715c:	b580      	push	{r7, lr}
 801715e:	b082      	sub	sp, #8
 8017160:	af00      	add	r7, sp, #0
	int timeout = 1000;
 8017162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017166:	607b      	str	r3, [r7, #4]
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 8017168:	e011      	b.n	801718e <SX126xWaitOnBusy+0x32>
		for(int i=0; i<12000; i++)__NOP();
 801716a:	2300      	movs	r3, #0
 801716c:	603b      	str	r3, [r7, #0]
 801716e:	e003      	b.n	8017178 <SX126xWaitOnBusy+0x1c>
 8017170:	bf00      	nop
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	3301      	adds	r3, #1
 8017176:	603b      	str	r3, [r7, #0]
 8017178:	683b      	ldr	r3, [r7, #0]
 801717a:	f642 62df 	movw	r2, #11999	@ 0x2edf
 801717e:	4293      	cmp	r3, r2
 8017180:	ddf6      	ble.n	8017170 <SX126xWaitOnBusy+0x14>
		timeout -= 1;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	3b01      	subs	r3, #1
 8017186:	607b      	str	r3, [r7, #4]
		if (timeout < 0){
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2b00      	cmp	r3, #0
 801718c:	db09      	blt.n	80171a2 <SX126xWaitOnBusy+0x46>
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 801718e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017192:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8017196:	f7ec f985 	bl	80034a4 <HAL_GPIO_ReadPin>
 801719a:	4603      	mov	r3, r0
 801719c:	2b01      	cmp	r3, #1
 801719e:	d0e4      	beq.n	801716a <SX126xWaitOnBusy+0xe>
 80171a0:	e000      	b.n	80171a4 <SX126xWaitOnBusy+0x48>
			return;
 80171a2:	bf00      	nop
		}
	}
}
 80171a4:	3708      	adds	r7, #8
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}
	...

080171ac <SX126xWakeup>:

void SX126xWakeup(void){
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b082      	sub	sp, #8
 80171b0:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 80171b2:	4b11      	ldr	r3, [pc, #68]	@ (80171f8 <SX126xWakeup+0x4c>)
 80171b4:	2200      	movs	r2, #0
 80171b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80171b8:	b672      	cpsid	i
}
 80171ba:	bf00      	nop
	__disable_irq();

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 80171bc:	2200      	movs	r2, #0
 80171be:	2110      	movs	r1, #16
 80171c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80171c4:	f7ec f986 	bl	80034d4 <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_GET_STATUS, 0x00};
 80171c8:	23c0      	movs	r3, #192	@ 0xc0
 80171ca:	80bb      	strh	r3, [r7, #4]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 80171cc:	1d39      	adds	r1, r7, #4
 80171ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80171d2:	2202      	movs	r2, #2
 80171d4:	4809      	ldr	r0, [pc, #36]	@ (80171fc <SX126xWakeup+0x50>)
 80171d6:	f7ee f9c1 	bl	800555c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 80171da:	2201      	movs	r2, #1
 80171dc:	2110      	movs	r1, #16
 80171de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80171e2:	f7ec f977 	bl	80034d4 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 80171e6:	f7ff ffb9 	bl	801715c <SX126xWaitOnBusy>
  __ASM volatile ("cpsie i" : : : "memory");
 80171ea:	b662      	cpsie	i
}
 80171ec:	bf00      	nop
	__enable_irq();
}
 80171ee:	bf00      	nop
 80171f0:	3708      	adds	r7, #8
 80171f2:	46bd      	mov	sp, r7
 80171f4:	bd80      	pop	{r7, pc}
 80171f6:	bf00      	nop
 80171f8:	20002011 	.word	0x20002011
 80171fc:	20000da0 	.word	0x20000da0

08017200 <SX126xWriteCommand>:

void SX126xWriteCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
 8017206:	4603      	mov	r3, r0
 8017208:	6039      	str	r1, [r7, #0]
 801720a:	71fb      	strb	r3, [r7, #7]
 801720c:	4613      	mov	r3, r2
 801720e:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 8017210:	f7ff f9d6 	bl	80165c0 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8017214:	2200      	movs	r2, #0
 8017216:	2110      	movs	r1, #16
 8017218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801721c:	f7ec f95a 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, (uint8_t *)&command, 1, 1000);
 8017220:	1df9      	adds	r1, r7, #7
 8017222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017226:	2201      	movs	r2, #1
 8017228:	480c      	ldr	r0, [pc, #48]	@ (801725c <SX126xWriteCommand+0x5c>)
 801722a:	f7ee f997 	bl	800555c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buffer, size, 1000);
 801722e:	88ba      	ldrh	r2, [r7, #4]
 8017230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017234:	6839      	ldr	r1, [r7, #0]
 8017236:	4809      	ldr	r0, [pc, #36]	@ (801725c <SX126xWriteCommand+0x5c>)
 8017238:	f7ee f990 	bl	800555c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 801723c:	2201      	movs	r2, #1
 801723e:	2110      	movs	r1, #16
 8017240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8017244:	f7ec f946 	bl	80034d4 <HAL_GPIO_WritePin>

	if (command != RADIO_SET_SLEEP)
 8017248:	79fb      	ldrb	r3, [r7, #7]
 801724a:	2b84      	cmp	r3, #132	@ 0x84
 801724c:	d001      	beq.n	8017252 <SX126xWriteCommand+0x52>
		SX126xWaitOnBusy();
 801724e:	f7ff ff85 	bl	801715c <SX126xWaitOnBusy>
}
 8017252:	bf00      	nop
 8017254:	3708      	adds	r7, #8
 8017256:	46bd      	mov	sp, r7
 8017258:	bd80      	pop	{r7, pc}
 801725a:	bf00      	nop
 801725c:	20000da0 	.word	0x20000da0

08017260 <SX126xReadCommand>:

void SX126xReadCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 8017260:	b580      	push	{r7, lr}
 8017262:	b084      	sub	sp, #16
 8017264:	af00      	add	r7, sp, #0
 8017266:	4603      	mov	r3, r0
 8017268:	6039      	str	r1, [r7, #0]
 801726a:	71fb      	strb	r3, [r7, #7]
 801726c:	4613      	mov	r3, r2
 801726e:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 8017270:	f7ff f9a6 	bl	80165c0 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8017274:	2200      	movs	r2, #0
 8017276:	2110      	movs	r1, #16
 8017278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801727c:	f7ec f92a 	bl	80034d4 <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)command, 0x00};
 8017280:	79fb      	ldrb	r3, [r7, #7]
 8017282:	733b      	strb	r3, [r7, #12]
 8017284:	2300      	movs	r3, #0
 8017286:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 8017288:	f107 010c 	add.w	r1, r7, #12
 801728c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017290:	2202      	movs	r2, #2
 8017292:	480b      	ldr	r0, [pc, #44]	@ (80172c0 <SX126xReadCommand+0x60>)
 8017294:	f7ee f962 	bl	800555c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&RADIO_PHY_HSPI, buffer, size, 1000);
 8017298:	88ba      	ldrh	r2, [r7, #4]
 801729a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801729e:	6839      	ldr	r1, [r7, #0]
 80172a0:	4807      	ldr	r0, [pc, #28]	@ (80172c0 <SX126xReadCommand+0x60>)
 80172a2:	f7ee fad1 	bl	8005848 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 80172a6:	2201      	movs	r2, #1
 80172a8:	2110      	movs	r1, #16
 80172aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80172ae:	f7ec f911 	bl	80034d4 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 80172b2:	f7ff ff53 	bl	801715c <SX126xWaitOnBusy>
}
 80172b6:	bf00      	nop
 80172b8:	3710      	adds	r7, #16
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}
 80172be:	bf00      	nop
 80172c0:	20000da0 	.word	0x20000da0

080172c4 <SX126xWriteRegisters>:

void SX126xWriteRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b084      	sub	sp, #16
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	4603      	mov	r3, r0
 80172cc:	6039      	str	r1, [r7, #0]
 80172ce:	80fb      	strh	r3, [r7, #6]
 80172d0:	4613      	mov	r3, r2
 80172d2:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 80172d4:	f7ff f974 	bl	80165c0 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 80172d8:	2200      	movs	r2, #0
 80172da:	2110      	movs	r1, #16
 80172dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80172e0:	f7ec f8f8 	bl	80034d4 <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_WRITE_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF)};
 80172e4:	230d      	movs	r3, #13
 80172e6:	733b      	strb	r3, [r7, #12]
 80172e8:	88fb      	ldrh	r3, [r7, #6]
 80172ea:	0a1b      	lsrs	r3, r3, #8
 80172ec:	b29b      	uxth	r3, r3
 80172ee:	b2db      	uxtb	r3, r3
 80172f0:	737b      	strb	r3, [r7, #13]
 80172f2:	88fb      	ldrh	r3, [r7, #6]
 80172f4:	b2db      	uxtb	r3, r3
 80172f6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 3, 1000);
 80172f8:	f107 010c 	add.w	r1, r7, #12
 80172fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017300:	2203      	movs	r2, #3
 8017302:	480b      	ldr	r0, [pc, #44]	@ (8017330 <SX126xWriteRegisters+0x6c>)
 8017304:	f7ee f92a 	bl	800555c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buffer, size, 1000);
 8017308:	88ba      	ldrh	r2, [r7, #4]
 801730a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801730e:	6839      	ldr	r1, [r7, #0]
 8017310:	4807      	ldr	r0, [pc, #28]	@ (8017330 <SX126xWriteRegisters+0x6c>)
 8017312:	f7ee f923 	bl	800555c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8017316:	2201      	movs	r2, #1
 8017318:	2110      	movs	r1, #16
 801731a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801731e:	f7ec f8d9 	bl	80034d4 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8017322:	f7ff ff1b 	bl	801715c <SX126xWaitOnBusy>
}
 8017326:	bf00      	nop
 8017328:	3710      	adds	r7, #16
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}
 801732e:	bf00      	nop
 8017330:	20000da0 	.word	0x20000da0

08017334 <SX126xWriteRegister>:

void SX126xWriteRegister(uint16_t address, uint8_t value){
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	4603      	mov	r3, r0
 801733c:	460a      	mov	r2, r1
 801733e:	80fb      	strh	r3, [r7, #6]
 8017340:	4613      	mov	r3, r2
 8017342:	717b      	strb	r3, [r7, #5]
	SX126xWriteRegisters(address, &value, 1);
 8017344:	1d79      	adds	r1, r7, #5
 8017346:	88fb      	ldrh	r3, [r7, #6]
 8017348:	2201      	movs	r2, #1
 801734a:	4618      	mov	r0, r3
 801734c:	f7ff ffba 	bl	80172c4 <SX126xWriteRegisters>
}
 8017350:	bf00      	nop
 8017352:	3708      	adds	r7, #8
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}

08017358 <SX126xReadRegisters>:

void SX126xReadRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 8017358:	b580      	push	{r7, lr}
 801735a:	b084      	sub	sp, #16
 801735c:	af00      	add	r7, sp, #0
 801735e:	4603      	mov	r3, r0
 8017360:	6039      	str	r1, [r7, #0]
 8017362:	80fb      	strh	r3, [r7, #6]
 8017364:	4613      	mov	r3, r2
 8017366:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 8017368:	f7ff f92a 	bl	80165c0 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 801736c:	2200      	movs	r2, #0
 801736e:	2110      	movs	r1, #16
 8017370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8017374:	f7ec f8ae 	bl	80034d4 <HAL_GPIO_WritePin>
	uint8_t buf[4] = {(uint8_t)RADIO_READ_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF), 0x00};
 8017378:	231d      	movs	r3, #29
 801737a:	733b      	strb	r3, [r7, #12]
 801737c:	88fb      	ldrh	r3, [r7, #6]
 801737e:	0a1b      	lsrs	r3, r3, #8
 8017380:	b29b      	uxth	r3, r3
 8017382:	b2db      	uxtb	r3, r3
 8017384:	737b      	strb	r3, [r7, #13]
 8017386:	88fb      	ldrh	r3, [r7, #6]
 8017388:	b2db      	uxtb	r3, r3
 801738a:	73bb      	strb	r3, [r7, #14]
 801738c:	2300      	movs	r3, #0
 801738e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 4, 1000);
 8017390:	f107 010c 	add.w	r1, r7, #12
 8017394:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017398:	2204      	movs	r2, #4
 801739a:	480b      	ldr	r0, [pc, #44]	@ (80173c8 <SX126xReadRegisters+0x70>)
 801739c:	f7ee f8de 	bl	800555c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&RADIO_PHY_HSPI, buffer, size, 1000);
 80173a0:	88ba      	ldrh	r2, [r7, #4]
 80173a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80173a6:	6839      	ldr	r1, [r7, #0]
 80173a8:	4807      	ldr	r0, [pc, #28]	@ (80173c8 <SX126xReadRegisters+0x70>)
 80173aa:	f7ee fa4d 	bl	8005848 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 80173ae:	2201      	movs	r2, #1
 80173b0:	2110      	movs	r1, #16
 80173b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80173b6:	f7ec f88d 	bl	80034d4 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 80173ba:	f7ff fecf 	bl	801715c <SX126xWaitOnBusy>
}
 80173be:	bf00      	nop
 80173c0:	3710      	adds	r7, #16
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd80      	pop	{r7, pc}
 80173c6:	bf00      	nop
 80173c8:	20000da0 	.word	0x20000da0

080173cc <SX126xReadRegister>:

uint8_t SX126xReadRegister(uint16_t address){
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b084      	sub	sp, #16
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	4603      	mov	r3, r0
 80173d4:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	SX126xReadRegisters(address, &data, 1);
 80173d6:	f107 010f 	add.w	r1, r7, #15
 80173da:	88fb      	ldrh	r3, [r7, #6]
 80173dc:	2201      	movs	r2, #1
 80173de:	4618      	mov	r0, r3
 80173e0:	f7ff ffba 	bl	8017358 <SX126xReadRegisters>
	return data;
 80173e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80173e6:	4618      	mov	r0, r3
 80173e8:	3710      	adds	r7, #16
 80173ea:	46bd      	mov	sp, r7
 80173ec:	bd80      	pop	{r7, pc}
	...

080173f0 <SX126xWriteBuffer>:

void SX126xWriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b084      	sub	sp, #16
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	4603      	mov	r3, r0
 80173f8:	6039      	str	r1, [r7, #0]
 80173fa:	71fb      	strb	r3, [r7, #7]
 80173fc:	4613      	mov	r3, r2
 80173fe:	71bb      	strb	r3, [r7, #6]
	SX126xCheckDeviceReady();
 8017400:	f7ff f8de 	bl	80165c0 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8017404:	2200      	movs	r2, #0
 8017406:	2110      	movs	r1, #16
 8017408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801740c:	f7ec f862 	bl	80034d4 <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_WRITE_BUFFER, offset};
 8017410:	230e      	movs	r3, #14
 8017412:	733b      	strb	r3, [r7, #12]
 8017414:	79fb      	ldrb	r3, [r7, #7]
 8017416:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 8017418:	f107 010c 	add.w	r1, r7, #12
 801741c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017420:	2202      	movs	r2, #2
 8017422:	480b      	ldr	r0, [pc, #44]	@ (8017450 <SX126xWriteBuffer+0x60>)
 8017424:	f7ee f89a 	bl	800555c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buffer, size, 1000);
 8017428:	79bb      	ldrb	r3, [r7, #6]
 801742a:	b29a      	uxth	r2, r3
 801742c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017430:	6839      	ldr	r1, [r7, #0]
 8017432:	4807      	ldr	r0, [pc, #28]	@ (8017450 <SX126xWriteBuffer+0x60>)
 8017434:	f7ee f892 	bl	800555c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8017438:	2201      	movs	r2, #1
 801743a:	2110      	movs	r1, #16
 801743c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8017440:	f7ec f848 	bl	80034d4 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8017444:	f7ff fe8a 	bl	801715c <SX126xWaitOnBusy>
}
 8017448:	bf00      	nop
 801744a:	3710      	adds	r7, #16
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}
 8017450:	20000da0 	.word	0x20000da0

08017454 <SX126xReadBuffer>:

void SX126xReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 8017454:	b580      	push	{r7, lr}
 8017456:	b084      	sub	sp, #16
 8017458:	af00      	add	r7, sp, #0
 801745a:	4603      	mov	r3, r0
 801745c:	6039      	str	r1, [r7, #0]
 801745e:	71fb      	strb	r3, [r7, #7]
 8017460:	4613      	mov	r3, r2
 8017462:	71bb      	strb	r3, [r7, #6]
	SX126xCheckDeviceReady();
 8017464:	f7ff f8ac 	bl	80165c0 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8017468:	2200      	movs	r2, #0
 801746a:	2110      	movs	r1, #16
 801746c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8017470:	f7ec f830 	bl	80034d4 <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_READ_BUFFER, offset, 0x00};
 8017474:	231e      	movs	r3, #30
 8017476:	733b      	strb	r3, [r7, #12]
 8017478:	79fb      	ldrb	r3, [r7, #7]
 801747a:	737b      	strb	r3, [r7, #13]
 801747c:	2300      	movs	r3, #0
 801747e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 8017480:	f107 010c 	add.w	r1, r7, #12
 8017484:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017488:	2202      	movs	r2, #2
 801748a:	4810      	ldr	r0, [pc, #64]	@ (80174cc <SX126xReadBuffer+0x78>)
 801748c:	f7ee f866 	bl	800555c <HAL_SPI_Transmit>
	uint8_t dummy = 0;
 8017490:	2300      	movs	r3, #0
 8017492:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Receive(&RADIO_PHY_HSPI, &dummy, 1, 1000);
 8017494:	f107 010b 	add.w	r1, r7, #11
 8017498:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801749c:	2201      	movs	r2, #1
 801749e:	480b      	ldr	r0, [pc, #44]	@ (80174cc <SX126xReadBuffer+0x78>)
 80174a0:	f7ee f9d2 	bl	8005848 <HAL_SPI_Receive>
	HAL_SPI_Receive(&RADIO_PHY_HSPI, buffer, size, 1000);
 80174a4:	79bb      	ldrb	r3, [r7, #6]
 80174a6:	b29a      	uxth	r2, r3
 80174a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80174ac:	6839      	ldr	r1, [r7, #0]
 80174ae:	4807      	ldr	r0, [pc, #28]	@ (80174cc <SX126xReadBuffer+0x78>)
 80174b0:	f7ee f9ca 	bl	8005848 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 80174b4:	2201      	movs	r2, #1
 80174b6:	2110      	movs	r1, #16
 80174b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80174bc:	f7ec f80a 	bl	80034d4 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 80174c0:	f7ff fe4c 	bl	801715c <SX126xWaitOnBusy>
}
 80174c4:	bf00      	nop
 80174c6:	3710      	adds	r7, #16
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}
 80174cc:	20000da0 	.word	0x20000da0

080174d0 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower(int8_t power){
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b082      	sub	sp, #8
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	4603      	mov	r3, r0
 80174d8:	71fb      	strb	r3, [r7, #7]
	SX126xSetTxParams(power, RADIO_RAMP_40_US);
 80174da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174de:	2102      	movs	r1, #2
 80174e0:	4618      	mov	r0, r3
 80174e2:	f7ff fb8b 	bl	8016bfc <SX126xSetTxParams>
}
 80174e6:	bf00      	nop
 80174e8:	3708      	adds	r7, #8
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd80      	pop	{r7, pc}

080174ee <SX126xGetPaSelect>:

uint8_t SX126xGetPaSelect(uint32_t channel){
 80174ee:	b480      	push	{r7}
 80174f0:	b083      	sub	sp, #12
 80174f2:	af00      	add	r7, sp, #0
 80174f4:	6078      	str	r0, [r7, #4]
	return SX1262;
 80174f6:	2302      	movs	r3, #2
}
 80174f8:	4618      	mov	r0, r3
 80174fa:	370c      	adds	r7, #12
 80174fc:	46bd      	mov	sp, r7
 80174fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017502:	4770      	bx	lr

08017504 <SX126xAntSwOn>:
		SPI_LORA.endTransaction();
		digitalWrite(_hwConfig.PIN_LORA_NSS, HIGH);
	}
}
*/
void SX126xAntSwOn(void){
 8017504:	b480      	push	{r7}
 8017506:	af00      	add	r7, sp, #0
}
 8017508:	bf00      	nop
 801750a:	46bd      	mov	sp, r7
 801750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017510:	4770      	bx	lr

08017512 <SX126xAntSwOff>:

void SX126xAntSwOff(void){
 8017512:	b480      	push	{r7}
 8017514:	af00      	add	r7, sp, #0
}
 8017516:	bf00      	nop
 8017518:	46bd      	mov	sp, r7
 801751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751e:	4770      	bx	lr

08017520 <SX126xRXena>:

void SX126xRXena(void){
 8017520:	b480      	push	{r7}
 8017522:	af00      	add	r7, sp, #0
}
 8017524:	bf00      	nop
 8017526:	46bd      	mov	sp, r7
 8017528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752c:	4770      	bx	lr

0801752e <SX126xTXena>:

void SX126xTXena(void){
 801752e:	b480      	push	{r7}
 8017530:	af00      	add	r7, sp, #0
}
 8017532:	bf00      	nop
 8017534:	46bd      	mov	sp, r7
 8017536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801753a:	4770      	bx	lr

0801753c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801753c:	b082      	sub	sp, #8
 801753e:	b480      	push	{r7}
 8017540:	b087      	sub	sp, #28
 8017542:	af00      	add	r7, sp, #0
 8017544:	60f8      	str	r0, [r7, #12]
 8017546:	1d38      	adds	r0, r7, #4
 8017548:	e880 0006 	stmia.w	r0, {r1, r2}
 801754c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801754e:	2300      	movs	r3, #0
 8017550:	613b      	str	r3, [r7, #16]
 8017552:	2300      	movs	r3, #0
 8017554:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8017556:	687a      	ldr	r2, [r7, #4]
 8017558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801755a:	4413      	add	r3, r2
 801755c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801755e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8017562:	b29a      	uxth	r2, r3
 8017564:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8017568:	b29b      	uxth	r3, r3
 801756a:	4413      	add	r3, r2
 801756c:	b29b      	uxth	r3, r3
 801756e:	b21b      	sxth	r3, r3
 8017570:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8017572:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801757a:	db0a      	blt.n	8017592 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801757c:	693b      	ldr	r3, [r7, #16]
 801757e:	3301      	adds	r3, #1
 8017580:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8017582:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017586:	b29b      	uxth	r3, r3
 8017588:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801758c:	b29b      	uxth	r3, r3
 801758e:	b21b      	sxth	r3, r3
 8017590:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	461a      	mov	r2, r3
 8017596:	f107 0310 	add.w	r3, r7, #16
 801759a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801759e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80175a2:	68f8      	ldr	r0, [r7, #12]
 80175a4:	371c      	adds	r7, #28
 80175a6:	46bd      	mov	sp, r7
 80175a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ac:	b002      	add	sp, #8
 80175ae:	4770      	bx	lr

080175b0 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80175b0:	b082      	sub	sp, #8
 80175b2:	b480      	push	{r7}
 80175b4:	b087      	sub	sp, #28
 80175b6:	af00      	add	r7, sp, #0
 80175b8:	60f8      	str	r0, [r7, #12]
 80175ba:	1d38      	adds	r0, r7, #4
 80175bc:	e880 0006 	stmia.w	r0, {r1, r2}
 80175c0:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80175c2:	2300      	movs	r3, #0
 80175c4:	613b      	str	r3, [r7, #16]
 80175c6:	2300      	movs	r3, #0
 80175c8:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 80175ca:	687a      	ldr	r2, [r7, #4]
 80175cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175ce:	1ad3      	subs	r3, r2, r3
 80175d0:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80175d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80175d6:	b29a      	uxth	r2, r3
 80175d8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80175dc:	b29b      	uxth	r3, r3
 80175de:	1ad3      	subs	r3, r2, r3
 80175e0:	b29b      	uxth	r3, r3
 80175e2:	b21b      	sxth	r3, r3
 80175e4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 80175e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	da0a      	bge.n	8017604 <SysTimeSub+0x54>
  {
    c.Seconds--;
 80175ee:	693b      	ldr	r3, [r7, #16]
 80175f0:	3b01      	subs	r3, #1
 80175f2:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 80175f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80175f8:	b29b      	uxth	r3, r3
 80175fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80175fe:	b29b      	uxth	r3, r3
 8017600:	b21b      	sxth	r3, r3
 8017602:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	461a      	mov	r2, r3
 8017608:	f107 0310 	add.w	r3, r7, #16
 801760c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017610:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8017614:	68f8      	ldr	r0, [r7, #12]
 8017616:	371c      	adds	r7, #28
 8017618:	46bd      	mov	sp, r7
 801761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801761e:	b002      	add	sp, #8
 8017620:	4770      	bx	lr
	...

08017624 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b088      	sub	sp, #32
 8017628:	af02      	add	r7, sp, #8
 801762a:	463b      	mov	r3, r7
 801762c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8017630:	2300      	movs	r3, #0
 8017632:	60bb      	str	r3, [r7, #8]
 8017634:	2300      	movs	r3, #0
 8017636:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8017638:	4b11      	ldr	r3, [pc, #68]	@ (8017680 <SysTimeSet+0x5c>)
 801763a:	691b      	ldr	r3, [r3, #16]
 801763c:	f107 0208 	add.w	r2, r7, #8
 8017640:	3204      	adds	r2, #4
 8017642:	4610      	mov	r0, r2
 8017644:	4798      	blx	r3
 8017646:	4602      	mov	r2, r0
 8017648:	460b      	mov	r3, r1
 801764a:	4613      	mov	r3, r2
 801764c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801764e:	f107 0010 	add.w	r0, r7, #16
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	9300      	str	r3, [sp, #0]
 8017656:	68bb      	ldr	r3, [r7, #8]
 8017658:	463a      	mov	r2, r7
 801765a:	ca06      	ldmia	r2, {r1, r2}
 801765c:	f7ff ffa8 	bl	80175b0 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8017660:	4b07      	ldr	r3, [pc, #28]	@ (8017680 <SysTimeSet+0x5c>)
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	693a      	ldr	r2, [r7, #16]
 8017666:	4610      	mov	r0, r2
 8017668:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801766a:	4b05      	ldr	r3, [pc, #20]	@ (8017680 <SysTimeSet+0x5c>)
 801766c:	689b      	ldr	r3, [r3, #8]
 801766e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017672:	4610      	mov	r0, r2
 8017674:	4798      	blx	r3
}
 8017676:	bf00      	nop
 8017678:	3718      	adds	r7, #24
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}
 801767e:	bf00      	nop
 8017680:	080212a0 	.word	0x080212a0

08017684 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b08a      	sub	sp, #40	@ 0x28
 8017688:	af02      	add	r7, sp, #8
 801768a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801768c:	2300      	movs	r3, #0
 801768e:	61bb      	str	r3, [r7, #24]
 8017690:	2300      	movs	r3, #0
 8017692:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8017694:	2300      	movs	r3, #0
 8017696:	613b      	str	r3, [r7, #16]
 8017698:	2300      	movs	r3, #0
 801769a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801769c:	4b15      	ldr	r3, [pc, #84]	@ (80176f4 <SysTimeGet+0x70>)
 801769e:	691b      	ldr	r3, [r3, #16]
 80176a0:	f107 0218 	add.w	r2, r7, #24
 80176a4:	3204      	adds	r2, #4
 80176a6:	4610      	mov	r0, r2
 80176a8:	4798      	blx	r3
 80176aa:	4602      	mov	r2, r0
 80176ac:	460b      	mov	r3, r1
 80176ae:	4613      	mov	r3, r2
 80176b0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80176b2:	4b10      	ldr	r3, [pc, #64]	@ (80176f4 <SysTimeGet+0x70>)
 80176b4:	68db      	ldr	r3, [r3, #12]
 80176b6:	4798      	blx	r3
 80176b8:	4603      	mov	r3, r0
 80176ba:	b21b      	sxth	r3, r3
 80176bc:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80176be:	4b0d      	ldr	r3, [pc, #52]	@ (80176f4 <SysTimeGet+0x70>)
 80176c0:	685b      	ldr	r3, [r3, #4]
 80176c2:	4798      	blx	r3
 80176c4:	4603      	mov	r3, r0
 80176c6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80176c8:	f107 0010 	add.w	r0, r7, #16
 80176cc:	69fb      	ldr	r3, [r7, #28]
 80176ce:	9300      	str	r3, [sp, #0]
 80176d0:	69bb      	ldr	r3, [r7, #24]
 80176d2:	f107 0208 	add.w	r2, r7, #8
 80176d6:	ca06      	ldmia	r2, {r1, r2}
 80176d8:	f7ff ff30 	bl	801753c <SysTimeAdd>

  return sysTime;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	461a      	mov	r2, r3
 80176e0:	f107 0310 	add.w	r3, r7, #16
 80176e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80176e8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80176ec:	6878      	ldr	r0, [r7, #4]
 80176ee:	3720      	adds	r7, #32
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd80      	pop	{r7, pc}
 80176f4:	080212a0 	.word	0x080212a0

080176f8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b084      	sub	sp, #16
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8017700:	2300      	movs	r3, #0
 8017702:	60bb      	str	r3, [r7, #8]
 8017704:	2300      	movs	r3, #0
 8017706:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8017708:	4b0b      	ldr	r3, [pc, #44]	@ (8017738 <SysTimeGetMcuTime+0x40>)
 801770a:	691b      	ldr	r3, [r3, #16]
 801770c:	f107 0208 	add.w	r2, r7, #8
 8017710:	3204      	adds	r2, #4
 8017712:	4610      	mov	r0, r2
 8017714:	4798      	blx	r3
 8017716:	4602      	mov	r2, r0
 8017718:	460b      	mov	r3, r1
 801771a:	4613      	mov	r3, r2
 801771c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	461a      	mov	r2, r3
 8017722:	f107 0308 	add.w	r3, r7, #8
 8017726:	e893 0003 	ldmia.w	r3, {r0, r1}
 801772a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801772e:	6878      	ldr	r0, [r7, #4]
 8017730:	3710      	adds	r7, #16
 8017732:	46bd      	mov	sp, r7
 8017734:	bd80      	pop	{r7, pc}
 8017736:	bf00      	nop
 8017738:	080212a0 	.word	0x080212a0

0801773c <UTIL_TIMER_Create>:
	return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create(UTIL_TIMER_Object_t *TimerObject,
		uint64_t PeriodValue, UTIL_TIMER_Mode_t Mode, void (*Callback)(void*),
		void *Argument) {
 801773c:	b580      	push	{r7, lr}
 801773e:	b084      	sub	sp, #16
 8017740:	af00      	add	r7, sp, #0
 8017742:	60f8      	str	r0, [r7, #12]
 8017744:	e9c7 2300 	strd	r2, r3, [r7]
	if ((TimerObject != NULL) && (Callback != NULL)) {
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d02a      	beq.n	80177a4 <UTIL_TIMER_Create+0x68>
 801774e:	69fb      	ldr	r3, [r7, #28]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d027      	beq.n	80177a4 <UTIL_TIMER_Create+0x68>
		TimerObject->Timestamp = 0U;
 8017754:	68f9      	ldr	r1, [r7, #12]
 8017756:	f04f 0200 	mov.w	r2, #0
 801775a:	f04f 0300 	mov.w	r3, #0
 801775e:	e9c1 2300 	strd	r2, r3, [r1]
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8017762:	4b13      	ldr	r3, [pc, #76]	@ (80177b0 <UTIL_TIMER_Create+0x74>)
 8017764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017766:	e9d7 0100 	ldrd	r0, r1, [r7]
 801776a:	4798      	blx	r3
 801776c:	4602      	mov	r2, r0
 801776e:	460b      	mov	r3, r1
 8017770:	68f9      	ldr	r1, [r7, #12]
 8017772:	e9c1 2302 	strd	r2, r3, [r1, #8]
		TimerObject->IsPending = 0U;
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	2200      	movs	r2, #0
 801777a:	741a      	strb	r2, [r3, #16]
		TimerObject->IsRunning = 0U;
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	2200      	movs	r2, #0
 8017780:	745a      	strb	r2, [r3, #17]
		TimerObject->IsReloadStopped = 0U;
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	2200      	movs	r2, #0
 8017786:	749a      	strb	r2, [r3, #18]
		TimerObject->Callback = Callback;
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	69fa      	ldr	r2, [r7, #28]
 801778c:	615a      	str	r2, [r3, #20]
		TimerObject->argument = Argument;
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	6a3a      	ldr	r2, [r7, #32]
 8017792:	619a      	str	r2, [r3, #24]
		TimerObject->Mode = Mode;
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	7e3a      	ldrb	r2, [r7, #24]
 8017798:	74da      	strb	r2, [r3, #19]
		TimerObject->Next = NULL;
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	2200      	movs	r2, #0
 801779e:	61da      	str	r2, [r3, #28]
		return UTIL_TIMER_OK;
 80177a0:	2300      	movs	r3, #0
 80177a2:	e000      	b.n	80177a6 <UTIL_TIMER_Create+0x6a>
	}
	else {
		return UTIL_TIMER_INVALID_PARAM;
 80177a4:	2301      	movs	r3, #1
	}
}
 80177a6:	4618      	mov	r0, r3
 80177a8:	3710      	adds	r7, #16
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd80      	pop	{r7, pc}
 80177ae:	bf00      	nop
 80177b0:	08021274 	.word	0x08021274

080177b4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start(UTIL_TIMER_Object_t *TimerObject) {
 80177b4:	b5b0      	push	{r4, r5, r7, lr}
 80177b6:	b08e      	sub	sp, #56	@ 0x38
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80177bc:	2300      	movs	r3, #0
 80177be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint64_t elapsedTime;
	uint64_t minValue;
	uint64_t ticks;

	if ((TimerObject != NULL) && (TimerExists(TimerObject) == false)
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d06b      	beq.n	80178a0 <UTIL_TIMER_Start+0xec>
 80177c8:	6878      	ldr	r0, [r7, #4]
 80177ca:	f000 f9ed 	bl	8017ba8 <TimerExists>
 80177ce:	4603      	mov	r3, r0
 80177d0:	f083 0301 	eor.w	r3, r3, #1
 80177d4:	b2db      	uxtb	r3, r3
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d062      	beq.n	80178a0 <UTIL_TIMER_Start+0xec>
			&& (TimerObject->IsRunning == 0U)) {
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	7c5b      	ldrb	r3, [r3, #17]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d15e      	bne.n	80178a0 <UTIL_TIMER_Start+0xec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80177e2:	f3ef 8310 	mrs	r3, PRIMASK
 80177e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80177e8:	68fb      	ldr	r3, [r7, #12]
		UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80177ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80177ec:	b672      	cpsid	i
}
 80177ee:	bf00      	nop
		ticks = TimerObject->ReloadValue;
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80177f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		minValue = UTIL_TimerDriver.GetMinimumTimeout();
 80177fa:	4b2e      	ldr	r3, [pc, #184]	@ (80178b4 <UTIL_TIMER_Start+0x100>)
 80177fc:	6a1b      	ldr	r3, [r3, #32]
 80177fe:	4798      	blx	r3
 8017800:	e9c7 0106 	strd	r0, r1, [r7, #24]

		if (ticks < minValue) {
 8017804:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8017808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801780c:	4290      	cmp	r0, r2
 801780e:	eb71 0303 	sbcs.w	r3, r1, r3
 8017812:	d203      	bcs.n	801781c <UTIL_TIMER_Start+0x68>
			ticks = minValue;
 8017814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017818:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		TimerObject->Timestamp = ticks;
 801781c:	6879      	ldr	r1, [r7, #4]
 801781e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8017822:	e9c1 2300 	strd	r2, r3, [r1]
		TimerObject->IsPending = 0U;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	2200      	movs	r2, #0
 801782a:	741a      	strb	r2, [r3, #16]
		TimerObject->IsRunning = 1U;
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	2201      	movs	r2, #1
 8017830:	745a      	strb	r2, [r3, #17]
		TimerObject->IsReloadStopped = 0U;
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	2200      	movs	r2, #0
 8017836:	749a      	strb	r2, [r3, #18]
		if (TimerListHead == NULL) {
 8017838:	4b1f      	ldr	r3, [pc, #124]	@ (80178b8 <UTIL_TIMER_Start+0x104>)
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d106      	bne.n	801784e <UTIL_TIMER_Start+0x9a>
			UTIL_TimerDriver.SetTimerContext();
 8017840:	4b1c      	ldr	r3, [pc, #112]	@ (80178b4 <UTIL_TIMER_Start+0x100>)
 8017842:	691b      	ldr	r3, [r3, #16]
 8017844:	4798      	blx	r3
			TimerInsertNewHeadTimer(TimerObject); /* insert a timeout at now+obj->Timestamp */
 8017846:	6878      	ldr	r0, [r7, #4]
 8017848:	f000 fa38 	bl	8017cbc <TimerInsertNewHeadTimer>
 801784c:	e021      	b.n	8017892 <UTIL_TIMER_Start+0xde>
		}
		else {
			elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime();
 801784e:	4b19      	ldr	r3, [pc, #100]	@ (80178b4 <UTIL_TIMER_Start+0x100>)
 8017850:	699b      	ldr	r3, [r3, #24]
 8017852:	4798      	blx	r3
 8017854:	e9c7 0104 	strd	r0, r1, [r7, #16]
			TimerObject->Timestamp += elapsedTime;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801785e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017862:	1884      	adds	r4, r0, r2
 8017864:	eb41 0503 	adc.w	r5, r1, r3
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	e9c3 4500 	strd	r4, r5, [r3]

			if (TimerObject->Timestamp < TimerListHead->Timestamp) {
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017874:	4b10      	ldr	r3, [pc, #64]	@ (80178b8 <UTIL_TIMER_Start+0x104>)
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801787c:	4290      	cmp	r0, r2
 801787e:	eb71 0303 	sbcs.w	r3, r1, r3
 8017882:	d203      	bcs.n	801788c <UTIL_TIMER_Start+0xd8>
				TimerInsertNewHeadTimer(TimerObject);
 8017884:	6878      	ldr	r0, [r7, #4]
 8017886:	f000 fa19 	bl	8017cbc <TimerInsertNewHeadTimer>
 801788a:	e002      	b.n	8017892 <UTIL_TIMER_Start+0xde>
			}
			else {
				TimerInsertTimer(TimerObject);
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f000 f9e1 	bl	8017c54 <TimerInsertTimer>
 8017892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017894:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017896:	68bb      	ldr	r3, [r7, #8]
 8017898:	f383 8810 	msr	PRIMASK, r3
}
 801789c:	bf00      	nop
			&& (TimerObject->IsRunning == 0U)) {
 801789e:	e002      	b.n	80178a6 <UTIL_TIMER_Start+0xf2>
			}
		}
		UTIL_TIMER_EXIT_CRITICAL_SECTION();
	}
	else {
		ret = UTIL_TIMER_INVALID_PARAM;
 80178a0:	2301      	movs	r3, #1
 80178a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	}
	return ret;
 80178a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	3738      	adds	r7, #56	@ 0x38
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bdb0      	pop	{r4, r5, r7, pc}
 80178b2:	bf00      	nop
 80178b4:	08021274 	.word	0x08021274
 80178b8:	20002014 	.word	0x20002014

080178bc <UTIL_TIMER_Stop>:
		ret = UTIL_TIMER_Start(TimerObject);
	}
	return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop(UTIL_TIMER_Object_t *TimerObject) {
 80178bc:	b580      	push	{r7, lr}
 80178be:	b088      	sub	sp, #32
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80178c4:	2300      	movs	r3, #0
 80178c6:	77fb      	strb	r3, [r7, #31]

	if (NULL != TimerObject) {
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d05b      	beq.n	8017986 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178ce:	f3ef 8310 	mrs	r3, PRIMASK
 80178d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80178d4:	68fb      	ldr	r3, [r7, #12]
		UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80178d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80178d8:	b672      	cpsid	i
}
 80178da:	bf00      	nop
		UTIL_TIMER_Object_t *prev = TimerListHead;
 80178dc:	4b2d      	ldr	r3, [pc, #180]	@ (8017994 <UTIL_TIMER_Stop+0xd8>)
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	61bb      	str	r3, [r7, #24]
		UTIL_TIMER_Object_t *cur = TimerListHead;
 80178e2:	4b2c      	ldr	r3, [pc, #176]	@ (8017994 <UTIL_TIMER_Stop+0xd8>)
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	617b      	str	r3, [r7, #20]
		TimerObject->IsReloadStopped = 1U;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	2201      	movs	r2, #1
 80178ec:	749a      	strb	r2, [r3, #18]

		/* List is empty or the Obj to stop does not exist  */
		if (NULL != TimerListHead) {
 80178ee:	4b29      	ldr	r3, [pc, #164]	@ (8017994 <UTIL_TIMER_Stop+0xd8>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d041      	beq.n	801797a <UTIL_TIMER_Stop+0xbe>
			TimerObject->IsRunning = 0U;
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	2200      	movs	r2, #0
 80178fa:	745a      	strb	r2, [r3, #17]

			if (TimerListHead == TimerObject) /* Stop the Head */
 80178fc:	4b25      	ldr	r3, [pc, #148]	@ (8017994 <UTIL_TIMER_Stop+0xd8>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	687a      	ldr	r2, [r7, #4]
 8017902:	429a      	cmp	r2, r3
 8017904:	d134      	bne.n	8017970 <UTIL_TIMER_Stop+0xb4>
			{
				TimerListHead->IsPending = 0;
 8017906:	4b23      	ldr	r3, [pc, #140]	@ (8017994 <UTIL_TIMER_Stop+0xd8>)
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	2200      	movs	r2, #0
 801790c:	741a      	strb	r2, [r3, #16]
				if (TimerListHead->Next != NULL) {
 801790e:	4b21      	ldr	r3, [pc, #132]	@ (8017994 <UTIL_TIMER_Stop+0xd8>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	69db      	ldr	r3, [r3, #28]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d00a      	beq.n	801792e <UTIL_TIMER_Stop+0x72>
					TimerListHead = TimerListHead->Next;
 8017918:	4b1e      	ldr	r3, [pc, #120]	@ (8017994 <UTIL_TIMER_Stop+0xd8>)
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	69db      	ldr	r3, [r3, #28]
 801791e:	4a1d      	ldr	r2, [pc, #116]	@ (8017994 <UTIL_TIMER_Stop+0xd8>)
 8017920:	6013      	str	r3, [r2, #0]
					TimerSetTimeout(TimerListHead);
 8017922:	4b1c      	ldr	r3, [pc, #112]	@ (8017994 <UTIL_TIMER_Stop+0xd8>)
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	4618      	mov	r0, r3
 8017928:	f000 f95c 	bl	8017be4 <TimerSetTimeout>
 801792c:	e023      	b.n	8017976 <UTIL_TIMER_Stop+0xba>
				}
				else {
					UTIL_TimerDriver.StopTimerEvt();
 801792e:	4b1a      	ldr	r3, [pc, #104]	@ (8017998 <UTIL_TIMER_Stop+0xdc>)
 8017930:	68db      	ldr	r3, [r3, #12]
 8017932:	4798      	blx	r3
					TimerListHead = NULL;
 8017934:	4b17      	ldr	r3, [pc, #92]	@ (8017994 <UTIL_TIMER_Stop+0xd8>)
 8017936:	2200      	movs	r2, #0
 8017938:	601a      	str	r2, [r3, #0]
 801793a:	e01c      	b.n	8017976 <UTIL_TIMER_Stop+0xba>
				}
			}
			else /* Stop an object within the list */
			{
				while (cur != NULL) {
					if (cur == TimerObject) {
 801793c:	697a      	ldr	r2, [r7, #20]
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	429a      	cmp	r2, r3
 8017942:	d110      	bne.n	8017966 <UTIL_TIMER_Stop+0xaa>
						if (cur->Next != NULL) {
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	69db      	ldr	r3, [r3, #28]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d006      	beq.n	801795a <UTIL_TIMER_Stop+0x9e>
							cur = cur->Next;
 801794c:	697b      	ldr	r3, [r7, #20]
 801794e:	69db      	ldr	r3, [r3, #28]
 8017950:	617b      	str	r3, [r7, #20]
							prev->Next = cur;
 8017952:	69bb      	ldr	r3, [r7, #24]
 8017954:	697a      	ldr	r2, [r7, #20]
 8017956:	61da      	str	r2, [r3, #28]
						}
						else {
							cur = NULL;
							prev->Next = cur;
						}
						break;
 8017958:	e00d      	b.n	8017976 <UTIL_TIMER_Stop+0xba>
							cur = NULL;
 801795a:	2300      	movs	r3, #0
 801795c:	617b      	str	r3, [r7, #20]
							prev->Next = cur;
 801795e:	69bb      	ldr	r3, [r7, #24]
 8017960:	697a      	ldr	r2, [r7, #20]
 8017962:	61da      	str	r2, [r3, #28]
						break;
 8017964:	e007      	b.n	8017976 <UTIL_TIMER_Stop+0xba>
					}
					else {
						prev = cur;
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	61bb      	str	r3, [r7, #24]
						cur = cur->Next;
 801796a:	697b      	ldr	r3, [r7, #20]
 801796c:	69db      	ldr	r3, [r3, #28]
 801796e:	617b      	str	r3, [r7, #20]
				while (cur != NULL) {
 8017970:	697b      	ldr	r3, [r7, #20]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d1e2      	bne.n	801793c <UTIL_TIMER_Stop+0x80>
					}
				}
			}
			ret = UTIL_TIMER_OK;
 8017976:	2300      	movs	r3, #0
 8017978:	77fb      	strb	r3, [r7, #31]
 801797a:	693b      	ldr	r3, [r7, #16]
 801797c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801797e:	68bb      	ldr	r3, [r7, #8]
 8017980:	f383 8810 	msr	PRIMASK, r3
}
 8017984:	e001      	b.n	801798a <UTIL_TIMER_Stop+0xce>
		}
		UTIL_TIMER_EXIT_CRITICAL_SECTION();
	}
	else {
		ret = UTIL_TIMER_INVALID_PARAM;
 8017986:	2301      	movs	r3, #1
 8017988:	77fb      	strb	r3, [r7, #31]
	}
	return ret;
 801798a:	7ffb      	ldrb	r3, [r7, #31]
}
 801798c:	4618      	mov	r0, r3
 801798e:	3720      	adds	r7, #32
 8017990:	46bd      	mov	sp, r7
 8017992:	bd80      	pop	{r7, pc}
 8017994:	20002014 	.word	0x20002014
 8017998:	08021274 	.word	0x08021274

0801799c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject,
		uint64_t NewPeriodValue) {
 801799c:	b580      	push	{r7, lr}
 801799e:	b086      	sub	sp, #24
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	60f8      	str	r0, [r7, #12]
 80179a4:	e9c7 2300 	strd	r2, r3, [r7]
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80179a8:	2300      	movs	r3, #0
 80179aa:	75fb      	strb	r3, [r7, #23]

	if (NULL == TimerObject) {
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d102      	bne.n	80179b8 <UTIL_TIMER_SetPeriod+0x1c>
		ret = UTIL_TIMER_INVALID_PARAM;
 80179b2:	2301      	movs	r3, #1
 80179b4:	75fb      	strb	r3, [r7, #23]
 80179b6:	e017      	b.n	80179e8 <UTIL_TIMER_SetPeriod+0x4c>
	}
	else {
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80179b8:	4b0e      	ldr	r3, [pc, #56]	@ (80179f4 <UTIL_TIMER_SetPeriod+0x58>)
 80179ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80179c0:	4798      	blx	r3
 80179c2:	4602      	mov	r2, r0
 80179c4:	460b      	mov	r3, r1
 80179c6:	68f9      	ldr	r1, [r7, #12]
 80179c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		if (TimerExists(TimerObject)) {
 80179cc:	68f8      	ldr	r0, [r7, #12]
 80179ce:	f000 f8eb 	bl	8017ba8 <TimerExists>
 80179d2:	4603      	mov	r3, r0
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d007      	beq.n	80179e8 <UTIL_TIMER_SetPeriod+0x4c>
			(void) UTIL_TIMER_Stop(TimerObject);
 80179d8:	68f8      	ldr	r0, [r7, #12]
 80179da:	f7ff ff6f 	bl	80178bc <UTIL_TIMER_Stop>
			ret = UTIL_TIMER_Start(TimerObject);
 80179de:	68f8      	ldr	r0, [r7, #12]
 80179e0:	f7ff fee8 	bl	80177b4 <UTIL_TIMER_Start>
 80179e4:	4603      	mov	r3, r0
 80179e6:	75fb      	strb	r3, [r7, #23]
		}
	}
	return ret;
 80179e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80179ea:	4618      	mov	r0, r3
 80179ec:	3718      	adds	r7, #24
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd80      	pop	{r7, pc}
 80179f2:	bf00      	nop
 80179f4:	08021274 	.word	0x08021274

080179f8 <UTIL_TIMER_IRQ_Handler>:
		(void) UTIL_TIMER_GetRemainingTime(TimerListHead, &NextTimer);
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler(void) {
 80179f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80179fc:	b08a      	sub	sp, #40	@ 0x28
 80179fe:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a00:	f3ef 8310 	mrs	r3, PRIMASK
 8017a04:	607b      	str	r3, [r7, #4]
  return(result);
 8017a06:	687b      	ldr	r3, [r7, #4]
	UTIL_TIMER_Object_t *cur;
	uint64_t old, now, DeltaContext;

	UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8017a08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8017a0a:	b672      	cpsid	i
}
 8017a0c:	bf00      	nop

	old = UTIL_TimerDriver.GetTimerContext();
 8017a0e:	4b46      	ldr	r3, [pc, #280]	@ (8017b28 <UTIL_TIMER_IRQ_Handler+0x130>)
 8017a10:	695b      	ldr	r3, [r3, #20]
 8017a12:	4798      	blx	r3
 8017a14:	e9c7 0106 	strd	r0, r1, [r7, #24]
	now = UTIL_TimerDriver.SetTimerContext();
 8017a18:	4b43      	ldr	r3, [pc, #268]	@ (8017b28 <UTIL_TIMER_IRQ_Handler+0x130>)
 8017a1a:	691b      	ldr	r3, [r3, #16]
 8017a1c:	4798      	blx	r3
 8017a1e:	e9c7 0104 	strd	r0, r1, [r7, #16]

	DeltaContext = now - old; /*intentional wrap around */
 8017a22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017a2a:	ebb0 0802 	subs.w	r8, r0, r2
 8017a2e:	eb61 0903 	sbc.w	r9, r1, r3
 8017a32:	e9c7 8902 	strd	r8, r9, [r7, #8]

	/* update timeStamp based upon new Time Reference*/
	/* because delta context should never exceed 2^32*/
	if (TimerListHead != NULL) {
 8017a36:	4b3d      	ldr	r3, [pc, #244]	@ (8017b2c <UTIL_TIMER_IRQ_Handler+0x134>)
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d044      	beq.n	8017ac8 <UTIL_TIMER_IRQ_Handler+0xd0>
		cur = TimerListHead;
 8017a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8017b2c <UTIL_TIMER_IRQ_Handler+0x134>)
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	627b      	str	r3, [r7, #36]	@ 0x24
		do {
			if (cur->Timestamp > DeltaContext) {
 8017a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017a4e:	4290      	cmp	r0, r2
 8017a50:	eb71 0303 	sbcs.w	r3, r1, r3
 8017a54:	d20b      	bcs.n	8017a6e <UTIL_TIMER_IRQ_Handler+0x76>
				cur->Timestamp -= DeltaContext;
 8017a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017a60:	1a84      	subs	r4, r0, r2
 8017a62:	eb61 0503 	sbc.w	r5, r1, r3
 8017a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a68:	e9c3 4500 	strd	r4, r5, [r3]
 8017a6c:	e006      	b.n	8017a7c <UTIL_TIMER_IRQ_Handler+0x84>
			}
			else {
				cur->Timestamp = 0;
 8017a6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017a70:	f04f 0200 	mov.w	r2, #0
 8017a74:	f04f 0300 	mov.w	r3, #0
 8017a78:	e9c1 2300 	strd	r2, r3, [r1]
			}
			cur = cur->Next;
 8017a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a7e:	69db      	ldr	r3, [r3, #28]
 8017a80:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		while (cur != NULL);
 8017a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d1dd      	bne.n	8017a44 <UTIL_TIMER_IRQ_Handler+0x4c>
	}

	/* Execute expired timer and update the list */
	while ((TimerListHead != NULL)
 8017a88:	e01e      	b.n	8017ac8 <UTIL_TIMER_IRQ_Handler+0xd0>
			&& ((TimerListHead->Timestamp == 0U)
					|| (TimerListHead->Timestamp
							< UTIL_TimerDriver.GetTimerElapsedTime()))) {
		cur = TimerListHead;
 8017a8a:	4b28      	ldr	r3, [pc, #160]	@ (8017b2c <UTIL_TIMER_IRQ_Handler+0x134>)
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	627b      	str	r3, [r7, #36]	@ 0x24
		TimerListHead = TimerListHead->Next;
 8017a90:	4b26      	ldr	r3, [pc, #152]	@ (8017b2c <UTIL_TIMER_IRQ_Handler+0x134>)
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	69db      	ldr	r3, [r3, #28]
 8017a96:	4a25      	ldr	r2, [pc, #148]	@ (8017b2c <UTIL_TIMER_IRQ_Handler+0x134>)
 8017a98:	6013      	str	r3, [r2, #0]
		cur->IsPending = 0;
 8017a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	741a      	strb	r2, [r3, #16]
		cur->IsRunning = 0;
 8017aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	745a      	strb	r2, [r3, #17]
		cur->Callback(cur->argument);
 8017aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017aa8:	695b      	ldr	r3, [r3, #20]
 8017aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017aac:	6992      	ldr	r2, [r2, #24]
 8017aae:	4610      	mov	r0, r2
 8017ab0:	4798      	blx	r3
		if ((cur->Mode == UTIL_TIMER_PERIODIC)
 8017ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ab4:	7cdb      	ldrb	r3, [r3, #19]
 8017ab6:	2b01      	cmp	r3, #1
 8017ab8:	d106      	bne.n	8017ac8 <UTIL_TIMER_IRQ_Handler+0xd0>
				&& (cur->IsReloadStopped == 0U)) {
 8017aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017abc:	7c9b      	ldrb	r3, [r3, #18]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d102      	bne.n	8017ac8 <UTIL_TIMER_IRQ_Handler+0xd0>
			(void) UTIL_TIMER_Start(cur);
 8017ac2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017ac4:	f7ff fe76 	bl	80177b4 <UTIL_TIMER_Start>
	while ((TimerListHead != NULL)
 8017ac8:	4b18      	ldr	r3, [pc, #96]	@ (8017b2c <UTIL_TIMER_IRQ_Handler+0x134>)
 8017aca:	681b      	ldr	r3, [r3, #0]
			&& ((TimerListHead->Timestamp == 0U)
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d012      	beq.n	8017af6 <UTIL_TIMER_IRQ_Handler+0xfe>
 8017ad0:	4b16      	ldr	r3, [pc, #88]	@ (8017b2c <UTIL_TIMER_IRQ_Handler+0x134>)
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ad8:	4313      	orrs	r3, r2
 8017ada:	d0d6      	beq.n	8017a8a <UTIL_TIMER_IRQ_Handler+0x92>
					|| (TimerListHead->Timestamp
 8017adc:	4b13      	ldr	r3, [pc, #76]	@ (8017b2c <UTIL_TIMER_IRQ_Handler+0x134>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	e9d3 4500 	ldrd	r4, r5, [r3]
							< UTIL_TimerDriver.GetTimerElapsedTime()))) {
 8017ae4:	4b10      	ldr	r3, [pc, #64]	@ (8017b28 <UTIL_TIMER_IRQ_Handler+0x130>)
 8017ae6:	699b      	ldr	r3, [r3, #24]
 8017ae8:	4798      	blx	r3
 8017aea:	4602      	mov	r2, r0
 8017aec:	460b      	mov	r3, r1
					|| (TimerListHead->Timestamp
 8017aee:	4294      	cmp	r4, r2
 8017af0:	eb75 0303 	sbcs.w	r3, r5, r3
 8017af4:	d3c9      	bcc.n	8017a8a <UTIL_TIMER_IRQ_Handler+0x92>
		}
	}

	/* start the next TimerListHead if it exists and it is not pending*/
	if ((TimerListHead != NULL) && (TimerListHead->IsPending == 0U)) {
 8017af6:	4b0d      	ldr	r3, [pc, #52]	@ (8017b2c <UTIL_TIMER_IRQ_Handler+0x134>)
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d009      	beq.n	8017b12 <UTIL_TIMER_IRQ_Handler+0x11a>
 8017afe:	4b0b      	ldr	r3, [pc, #44]	@ (8017b2c <UTIL_TIMER_IRQ_Handler+0x134>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	7c1b      	ldrb	r3, [r3, #16]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d104      	bne.n	8017b12 <UTIL_TIMER_IRQ_Handler+0x11a>
		TimerSetTimeout(TimerListHead);
 8017b08:	4b08      	ldr	r3, [pc, #32]	@ (8017b2c <UTIL_TIMER_IRQ_Handler+0x134>)
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f000 f869 	bl	8017be4 <TimerSetTimeout>
 8017b12:	6a3b      	ldr	r3, [r7, #32]
 8017b14:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b16:	683b      	ldr	r3, [r7, #0]
 8017b18:	f383 8810 	msr	PRIMASK, r3
}
 8017b1c:	bf00      	nop
	}
	UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 8017b1e:	bf00      	nop
 8017b20:	3728      	adds	r7, #40	@ 0x28
 8017b22:	46bd      	mov	sp, r7
 8017b24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8017b28:	08021274 	.word	0x08021274
 8017b2c:	20002014 	.word	0x20002014

08017b30 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void) {
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b082      	sub	sp, #8
 8017b34:	af00      	add	r7, sp, #0
	uint64_t now = UTIL_TimerDriver.GetTimerValue();
 8017b36:	4b08      	ldr	r3, [pc, #32]	@ (8017b58 <UTIL_TIMER_GetCurrentTime+0x28>)
 8017b38:	69db      	ldr	r3, [r3, #28]
 8017b3a:	4798      	blx	r3
 8017b3c:	e9c7 0100 	strd	r0, r1, [r7]
	return UTIL_TimerDriver.Tick2ms(now);
 8017b40:	4b05      	ldr	r3, [pc, #20]	@ (8017b58 <UTIL_TIMER_GetCurrentTime+0x28>)
 8017b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017b48:	4798      	blx	r3
 8017b4a:	4602      	mov	r2, r0
 8017b4c:	460b      	mov	r3, r1
}
 8017b4e:	4610      	mov	r0, r2
 8017b50:	4619      	mov	r1, r3
 8017b52:	3708      	adds	r7, #8
 8017b54:	46bd      	mov	sp, r7
 8017b56:	bd80      	pop	{r7, pc}
 8017b58:	08021274 	.word	0x08021274

08017b5c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past) {
 8017b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b5e:	b087      	sub	sp, #28
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 8017b66:	4b0f      	ldr	r3, [pc, #60]	@ (8017ba4 <UTIL_TIMER_GetElapsedTime+0x48>)
 8017b68:	69db      	ldr	r3, [r3, #28]
 8017b6a:	4798      	blx	r3
 8017b6c:	e9c7 0104 	strd	r0, r1, [r7, #16]
	uint64_t pastInTicks = UTIL_TimerDriver.ms2Tick(past);
 8017b70:	4b0c      	ldr	r3, [pc, #48]	@ (8017ba4 <UTIL_TIMER_GetElapsedTime+0x48>)
 8017b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017b78:	4798      	blx	r3
 8017b7a:	e9c7 0102 	strd	r0, r1, [r7, #8]
	/* intentional wrap around. Works Ok if tick duation below 1ms */
	return UTIL_TimerDriver.Tick2ms(nowInTicks - pastInTicks);
 8017b7e:	4b09      	ldr	r3, [pc, #36]	@ (8017ba4 <UTIL_TIMER_GetElapsedTime+0x48>)
 8017b80:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 8017b82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017b86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017b8a:	1a84      	subs	r4, r0, r2
 8017b8c:	eb61 0503 	sbc.w	r5, r1, r3
 8017b90:	4620      	mov	r0, r4
 8017b92:	4629      	mov	r1, r5
 8017b94:	47b0      	blx	r6
 8017b96:	4602      	mov	r2, r0
 8017b98:	460b      	mov	r3, r1
}
 8017b9a:	4610      	mov	r0, r2
 8017b9c:	4619      	mov	r1, r3
 8017b9e:	371c      	adds	r7, #28
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ba4:	08021274 	.word	0x08021274

08017ba8 <TimerExists>:
 * @brief Check if the Object to be added is not already in the list
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists(UTIL_TIMER_Object_t *TimerObject) {
 8017ba8:	b480      	push	{r7}
 8017baa:	b085      	sub	sp, #20
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_Object_t *cur = TimerListHead;
 8017bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8017be0 <TimerExists+0x38>)
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	60fb      	str	r3, [r7, #12]

	while (cur != NULL) {
 8017bb6:	e008      	b.n	8017bca <TimerExists+0x22>
		if (cur == TimerObject) {
 8017bb8:	68fa      	ldr	r2, [r7, #12]
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d101      	bne.n	8017bc4 <TimerExists+0x1c>
			return true;
 8017bc0:	2301      	movs	r3, #1
 8017bc2:	e006      	b.n	8017bd2 <TimerExists+0x2a>
		}
		cur = cur->Next;
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	69db      	ldr	r3, [r3, #28]
 8017bc8:	60fb      	str	r3, [r7, #12]
	while (cur != NULL) {
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d1f3      	bne.n	8017bb8 <TimerExists+0x10>
	}
	return false;
 8017bd0:	2300      	movs	r3, #0
}
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	3714      	adds	r7, #20
 8017bd6:	46bd      	mov	sp, r7
 8017bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bdc:	4770      	bx	lr
 8017bde:	bf00      	nop
 8017be0:	20002014 	.word	0x20002014

08017be4 <TimerSetTimeout>:
/**
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout(UTIL_TIMER_Object_t *TimerObject) {
 8017be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017be8:	b084      	sub	sp, #16
 8017bea:	af00      	add	r7, sp, #0
 8017bec:	6078      	str	r0, [r7, #4]
	uint64_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 8017bee:	4b18      	ldr	r3, [pc, #96]	@ (8017c50 <TimerSetTimeout+0x6c>)
 8017bf0:	6a1b      	ldr	r3, [r3, #32]
 8017bf2:	4798      	blx	r3
 8017bf4:	e9c7 0102 	strd	r0, r1, [r7, #8]
	TimerObject->IsPending = 1;
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	2201      	movs	r2, #1
 8017bfc:	741a      	strb	r2, [r3, #16]

	/* In case deadline too soon */
	if (TimerObject->Timestamp
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	e9d3 ab00 	ldrd	sl, fp, [r3]
			< (UTIL_TimerDriver.GetTimerElapsedTime() + minTicks)) {
 8017c04:	4b12      	ldr	r3, [pc, #72]	@ (8017c50 <TimerSetTimeout+0x6c>)
 8017c06:	699b      	ldr	r3, [r3, #24]
 8017c08:	4798      	blx	r3
 8017c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017c0e:	1884      	adds	r4, r0, r2
 8017c10:	eb41 0503 	adc.w	r5, r1, r3
	if (TimerObject->Timestamp
 8017c14:	45a2      	cmp	sl, r4
 8017c16:	eb7b 0305 	sbcs.w	r3, fp, r5
 8017c1a:	d20b      	bcs.n	8017c34 <TimerSetTimeout+0x50>
		TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime()
 8017c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8017c50 <TimerSetTimeout+0x6c>)
 8017c1e:	699b      	ldr	r3, [r3, #24]
 8017c20:	4798      	blx	r3
				+ minTicks;
 8017c22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017c26:	eb10 0802 	adds.w	r8, r0, r2
 8017c2a:	eb41 0903 	adc.w	r9, r1, r3
		TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime()
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	e9c3 8900 	strd	r8, r9, [r3]
	}
	UTIL_TimerDriver.StartTimerEvt(TimerObject->Timestamp);
 8017c34:	4b06      	ldr	r3, [pc, #24]	@ (8017c50 <TimerSetTimeout+0x6c>)
 8017c36:	689c      	ldr	r4, [r3, #8]
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c3e:	4610      	mov	r0, r2
 8017c40:	4619      	mov	r1, r3
 8017c42:	47a0      	blx	r4
}
 8017c44:	bf00      	nop
 8017c46:	3710      	adds	r7, #16
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017c4e:	bf00      	nop
 8017c50:	08021274 	.word	0x08021274

08017c54 <TimerInsertTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer(UTIL_TIMER_Object_t *TimerObject) {
 8017c54:	b480      	push	{r7}
 8017c56:	b085      	sub	sp, #20
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_Object_t *cur = TimerListHead;
 8017c5c:	4b16      	ldr	r3, [pc, #88]	@ (8017cb8 <TimerInsertTimer+0x64>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	60fb      	str	r3, [r7, #12]
	UTIL_TIMER_Object_t *next = TimerListHead->Next;
 8017c62:	4b15      	ldr	r3, [pc, #84]	@ (8017cb8 <TimerInsertTimer+0x64>)
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	69db      	ldr	r3, [r3, #28]
 8017c68:	60bb      	str	r3, [r7, #8]

	while (cur->Next != NULL) {
 8017c6a:	e016      	b.n	8017c9a <TimerInsertTimer+0x46>
		if (TimerObject->Timestamp > next->Timestamp) {
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c72:	68b9      	ldr	r1, [r7, #8]
 8017c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c78:	4290      	cmp	r0, r2
 8017c7a:	eb71 0303 	sbcs.w	r3, r1, r3
 8017c7e:	d205      	bcs.n	8017c8c <TimerInsertTimer+0x38>
			cur = next;
 8017c80:	68bb      	ldr	r3, [r7, #8]
 8017c82:	60fb      	str	r3, [r7, #12]
			next = next->Next;
 8017c84:	68bb      	ldr	r3, [r7, #8]
 8017c86:	69db      	ldr	r3, [r3, #28]
 8017c88:	60bb      	str	r3, [r7, #8]
 8017c8a:	e006      	b.n	8017c9a <TimerInsertTimer+0x46>
		}
		else {
			cur->Next = TimerObject;
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	687a      	ldr	r2, [r7, #4]
 8017c90:	61da      	str	r2, [r3, #28]
			TimerObject->Next = next;
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	68ba      	ldr	r2, [r7, #8]
 8017c96:	61da      	str	r2, [r3, #28]
			return;
 8017c98:	e009      	b.n	8017cae <TimerInsertTimer+0x5a>
	while (cur->Next != NULL) {
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	69db      	ldr	r3, [r3, #28]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d1e4      	bne.n	8017c6c <TimerInsertTimer+0x18>

		}
	}
	cur->Next = TimerObject;
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	687a      	ldr	r2, [r7, #4]
 8017ca6:	61da      	str	r2, [r3, #28]
	TimerObject->Next = NULL;
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	2200      	movs	r2, #0
 8017cac:	61da      	str	r2, [r3, #28]
}
 8017cae:	3714      	adds	r7, #20
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb6:	4770      	bx	lr
 8017cb8:	20002014 	.word	0x20002014

08017cbc <TimerInsertNewHeadTimer>:
 * @param TimerObject Structure containing the timer object parameters
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer(UTIL_TIMER_Object_t *TimerObject) {
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b084      	sub	sp, #16
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_Object_t *cur = TimerListHead;
 8017cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8017cf4 <TimerInsertNewHeadTimer+0x38>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	60fb      	str	r3, [r7, #12]

	if (cur != NULL) {
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d002      	beq.n	8017cd6 <TimerInsertNewHeadTimer+0x1a>
		cur->IsPending = 0;
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	741a      	strb	r2, [r3, #16]
	}

	TimerObject->Next = cur;
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	68fa      	ldr	r2, [r7, #12]
 8017cda:	61da      	str	r2, [r3, #28]
	TimerListHead = TimerObject;
 8017cdc:	4a05      	ldr	r2, [pc, #20]	@ (8017cf4 <TimerInsertNewHeadTimer+0x38>)
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	6013      	str	r3, [r2, #0]
	TimerSetTimeout(TimerListHead);
 8017ce2:	4b04      	ldr	r3, [pc, #16]	@ (8017cf4 <TimerInsertNewHeadTimer+0x38>)
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	f7ff ff7c 	bl	8017be4 <TimerSetTimeout>
}
 8017cec:	bf00      	nop
 8017cee:	3710      	adds	r7, #16
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	bd80      	pop	{r7, pc}
 8017cf4:	20002014 	.word	0x20002014

08017cf8 <datetime_to_milisec>:





static uint64_t datetime_to_milisec(int year, int month, int day, int hours, int minutes, int seconds, uint32_t subseconds) {
 8017cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017cfc:	b0a0      	sub	sp, #128	@ 0x80
 8017cfe:	af00      	add	r7, sp, #0
 8017d00:	6278      	str	r0, [r7, #36]	@ 0x24
 8017d02:	6239      	str	r1, [r7, #32]
 8017d04:	61fa      	str	r2, [r7, #28]
 8017d06:	61bb      	str	r3, [r7, #24]
    struct tm time_info = {0};
 8017d08:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8017d0c:	2224      	movs	r2, #36	@ 0x24
 8017d0e:	2100      	movs	r1, #0
 8017d10:	4618      	mov	r0, r3
 8017d12:	f000 ff53 	bl	8018bbc <memset>
    time_info.tm_year = year;
 8017d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d18:	663b      	str	r3, [r7, #96]	@ 0x60
    time_info.tm_mon = month - 1;
 8017d1a:	6a3b      	ldr	r3, [r7, #32]
 8017d1c:	3b01      	subs	r3, #1
 8017d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    time_info.tm_mday = day;
 8017d20:	69fb      	ldr	r3, [r7, #28]
 8017d22:	65bb      	str	r3, [r7, #88]	@ 0x58
    time_info.tm_hour = hours;
 8017d24:	69bb      	ldr	r3, [r7, #24]
 8017d26:	657b      	str	r3, [r7, #84]	@ 0x54
    time_info.tm_min = minutes;
 8017d28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017d2c:	653b      	str	r3, [r7, #80]	@ 0x50
    time_info.tm_sec = seconds;
 8017d2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8017d32:	64fb      	str	r3, [r7, #76]	@ 0x4c

    struct tm time_info_ref = {
 8017d34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017d38:	2224      	movs	r2, #36	@ 0x24
 8017d3a:	2100      	movs	r1, #0
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f000 ff3d 	bl	8018bbc <memset>
 8017d42:	2301      	movs	r3, #1
 8017d44:	637b      	str	r3, [r7, #52]	@ 0x34
		.tm_hour = 0,
		.tm_min = 0,
		.tm_sec = 0,
    };

    time_t time_in_seconds = mktime(&time_info) - mktime(&time_info_ref);
 8017d46:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	f001 f8c0 	bl	8018ed0 <mktime>
 8017d50:	4604      	mov	r4, r0
 8017d52:	460d      	mov	r5, r1
 8017d54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017d58:	4618      	mov	r0, r3
 8017d5a:	f001 f8b9 	bl	8018ed0 <mktime>
 8017d5e:	4602      	mov	r2, r0
 8017d60:	460b      	mov	r3, r1
 8017d62:	1aa1      	subs	r1, r4, r2
 8017d64:	60b9      	str	r1, [r7, #8]
 8017d66:	eb65 0303 	sbc.w	r3, r5, r3
 8017d6a:	60fb      	str	r3, [r7, #12]
 8017d6c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8017d70:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    uint64_t time_in_milisec = ((uint64_t)time_in_seconds * 1000) + (1000 - subseconds);
 8017d74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017d78:	4602      	mov	r2, r0
 8017d7a:	460b      	mov	r3, r1
 8017d7c:	f04f 0400 	mov.w	r4, #0
 8017d80:	f04f 0500 	mov.w	r5, #0
 8017d84:	015d      	lsls	r5, r3, #5
 8017d86:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8017d8a:	0154      	lsls	r4, r2, #5
 8017d8c:	4622      	mov	r2, r4
 8017d8e:	462b      	mov	r3, r5
 8017d90:	ebb2 0800 	subs.w	r8, r2, r0
 8017d94:	eb63 0901 	sbc.w	r9, r3, r1
 8017d98:	f04f 0200 	mov.w	r2, #0
 8017d9c:	f04f 0300 	mov.w	r3, #0
 8017da0:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8017da4:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8017da8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8017dac:	4690      	mov	r8, r2
 8017dae:	4699      	mov	r9, r3
 8017db0:	eb18 0a00 	adds.w	sl, r8, r0
 8017db4:	eb49 0b01 	adc.w	fp, r9, r1
 8017db8:	f04f 0200 	mov.w	r2, #0
 8017dbc:	f04f 0300 	mov.w	r3, #0
 8017dc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8017dc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8017dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8017dcc:	4692      	mov	sl, r2
 8017dce:	469b      	mov	fp, r3
 8017dd0:	4652      	mov	r2, sl
 8017dd2:	465b      	mov	r3, fp
 8017dd4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8017dd8:	f5c1 717a 	rsb	r1, r1, #1000	@ 0x3e8
 8017ddc:	2000      	movs	r0, #0
 8017dde:	6139      	str	r1, [r7, #16]
 8017de0:	6178      	str	r0, [r7, #20]
 8017de2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8017de6:	4621      	mov	r1, r4
 8017de8:	1851      	adds	r1, r2, r1
 8017dea:	6039      	str	r1, [r7, #0]
 8017dec:	4629      	mov	r1, r5
 8017dee:	eb43 0101 	adc.w	r1, r3, r1
 8017df2:	6079      	str	r1, [r7, #4]
 8017df4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8017df8:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    return time_in_milisec;
 8017dfc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
}
 8017e00:	4610      	mov	r0, r2
 8017e02:	4619      	mov	r1, r3
 8017e04:	3780      	adds	r7, #128	@ 0x80
 8017e06:	46bd      	mov	sp, r7
 8017e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08017e0c <subseconds_to_datetime>:
    pTime->Minutes = time_info->tm_min;
    pTime->Seconds = time_info->tm_sec;
    pTime->SubSeconds = 1000 - Subseconds;
}

static void subseconds_to_datetime(uint64_t Subseconds, RTC_DateTypeDef *pDate, RTC_TimeTypeDef *pTime) {
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b088      	sub	sp, #32
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8017e16:	607a      	str	r2, [r7, #4]
 8017e18:	603b      	str	r3, [r7, #0]
	uint32_t _sub = Subseconds%1000;
 8017e1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017e1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017e22:	f04f 0300 	mov.w	r3, #0
 8017e26:	f7e8 ff3f 	bl	8000ca8 <__aeabi_uldivmod>
 8017e2a:	4613      	mov	r3, r2
 8017e2c:	61fb      	str	r3, [r7, #28]
	time_t _sec = (time_t)(Subseconds/1000);
 8017e2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017e32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017e36:	f04f 0300 	mov.w	r3, #0
 8017e3a:	f7e8 ff35 	bl	8000ca8 <__aeabi_uldivmod>
 8017e3e:	4602      	mov	r2, r0
 8017e40:	460b      	mov	r3, r1
 8017e42:	e9c7 2304 	strd	r2, r3, [r7, #16]
	struct tm *time_info = gmtime(&_sec);
 8017e46:	f107 0310 	add.w	r3, r7, #16
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f000 febe 	bl	8018bcc <gmtime>
 8017e50:	61b8      	str	r0, [r7, #24]

    pDate->Date = time_info->tm_mday;
 8017e52:	69bb      	ldr	r3, [r7, #24]
 8017e54:	68db      	ldr	r3, [r3, #12]
 8017e56:	b2da      	uxtb	r2, r3
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	709a      	strb	r2, [r3, #2]
    pDate->Month = time_info->tm_mon + 1;
 8017e5c:	69bb      	ldr	r3, [r7, #24]
 8017e5e:	691b      	ldr	r3, [r3, #16]
 8017e60:	b2db      	uxtb	r3, r3
 8017e62:	3301      	adds	r3, #1
 8017e64:	b2da      	uxtb	r2, r3
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	705a      	strb	r2, [r3, #1]
    pDate->Year = time_info->tm_year - 70;
 8017e6a:	69bb      	ldr	r3, [r7, #24]
 8017e6c:	695b      	ldr	r3, [r3, #20]
 8017e6e:	b2db      	uxtb	r3, r3
 8017e70:	3b46      	subs	r3, #70	@ 0x46
 8017e72:	b2da      	uxtb	r2, r3
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	70da      	strb	r2, [r3, #3]
    pTime->Hours = time_info->tm_hour;
 8017e78:	69bb      	ldr	r3, [r7, #24]
 8017e7a:	689b      	ldr	r3, [r3, #8]
 8017e7c:	b2da      	uxtb	r2, r3
 8017e7e:	683b      	ldr	r3, [r7, #0]
 8017e80:	701a      	strb	r2, [r3, #0]
    pTime->Minutes = time_info->tm_min;
 8017e82:	69bb      	ldr	r3, [r7, #24]
 8017e84:	685b      	ldr	r3, [r3, #4]
 8017e86:	b2da      	uxtb	r2, r3
 8017e88:	683b      	ldr	r3, [r7, #0]
 8017e8a:	705a      	strb	r2, [r3, #1]
    pTime->Seconds = time_info->tm_sec;
 8017e8c:	69bb      	ldr	r3, [r7, #24]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	b2da      	uxtb	r2, r3
 8017e92:	683b      	ldr	r3, [r7, #0]
 8017e94:	709a      	strb	r2, [r3, #2]
    pTime->SubSeconds = 1000 - _sub;
 8017e96:	69fb      	ldr	r3, [r7, #28]
 8017e98:	f5c3 727a 	rsb	r2, r3, #1000	@ 0x3e8
 8017e9c:	683b      	ldr	r3, [r7, #0]
 8017e9e:	605a      	str	r2, [r3, #4]
}
 8017ea0:	bf00      	nop
 8017ea2:	3720      	adds	r7, #32
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	bd80      	pop	{r7, pc}

08017ea8 <TIMER_IF_Init>:




/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void) {
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b082      	sub	sp, #8
 8017eac:	af00      	add	r7, sp, #0
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8017eae:	2300      	movs	r3, #0
 8017eb0:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN TIMER_IF_Init */

	/* USER CODE END TIMER_IF_Init */
	if (RTC_Initialized == false) {
 8017eb2:	4b10      	ldr	r3, [pc, #64]	@ (8017ef4 <TIMER_IF_Init+0x4c>)
 8017eb4:	781b      	ldrb	r3, [r3, #0]
 8017eb6:	f083 0301 	eor.w	r3, r3, #1
 8017eba:	b2db      	uxtb	r3, r3
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d013      	beq.n	8017ee8 <TIMER_IF_Init+0x40>
		/*Init RTC*/
		extern void MX_RTC_Init();
		MX_RTC_Init();
 8017ec0:	f7e9 fde6 	bl	8001a90 <MX_RTC_Init>
		/*Stop Timer */
		TIMER_IF_StopTimer();
 8017ec4:	f000 f87a 	bl	8017fbc <TIMER_IF_StopTimer>
		/*DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8017ec8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017ecc:	480a      	ldr	r0, [pc, #40]	@ (8017ef8 <TIMER_IF_Init+0x50>)
 8017ece:	f7ed f889 	bl	8004fe4 <HAL_RTC_DeactivateAlarm>
		/*Enable Direct Read of the calendar registers (not through Shadow) */
		HAL_RTCEx_EnableBypassShadow(&hrtc);
 8017ed2:	4809      	ldr	r0, [pc, #36]	@ (8017ef8 <TIMER_IF_Init+0x50>)
 8017ed4:	f7ed fa30 	bl	8005338 <HAL_RTCEx_EnableBypassShadow>
		/*Initialize MSB ticks*/
		TIMER_IF_BkUp_Write_MSBticks(0);
 8017ed8:	2000      	movs	r0, #0
 8017eda:	f000 f98b 	bl	80181f4 <TIMER_IF_BkUp_Write_MSBticks>
		TIMER_IF_SetTimerContext();
 8017ede:	f000 f887 	bl	8017ff0 <TIMER_IF_SetTimerContext>
		/* Register a task to associate to UTIL_TIMER_Irq() interrupt */
		UTIL_TIMER_IRQ_MAP_INIT();

		RTC_Initialized = true;
 8017ee2:	4b04      	ldr	r3, [pc, #16]	@ (8017ef4 <TIMER_IF_Init+0x4c>)
 8017ee4:	2201      	movs	r2, #1
 8017ee6:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 8017ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8017eea:	4618      	mov	r0, r3
 8017eec:	3708      	adds	r7, #8
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	bd80      	pop	{r7, pc}
 8017ef2:	bf00      	nop
 8017ef4:	20002018 	.word	0x20002018
 8017ef8:	20000d7c 	.word	0x20000d7c

08017efc <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint64_t timeout) {
 8017efc:	b5b0      	push	{r4, r5, r7, lr}
 8017efe:	b094      	sub	sp, #80	@ 0x50
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	e9c7 0100 	strd	r0, r1, [r7]
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8017f06:	2300      	movs	r3, #0
 8017f08:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	RTC_AlarmTypeDef sAlarm = {0};
 8017f0c:	f107 0320 	add.w	r3, r7, #32
 8017f10:	222c      	movs	r2, #44	@ 0x2c
 8017f12:	2100      	movs	r1, #0
 8017f14:	4618      	mov	r0, r3
 8017f16:	f000 fe51 	bl	8018bbc <memset>
	RTC_TimeTypeDef sTime = {0};
 8017f1a:	f107 030c 	add.w	r3, r7, #12
 8017f1e:	2200      	movs	r2, #0
 8017f20:	601a      	str	r2, [r3, #0]
 8017f22:	605a      	str	r2, [r3, #4]
 8017f24:	609a      	str	r2, [r3, #8]
 8017f26:	60da      	str	r2, [r3, #12]
 8017f28:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	60bb      	str	r3, [r7, #8]

	/*Stop timer if one is already started*/
	TIMER_IF_StopTimer();
 8017f2e:	f000 f845 	bl	8017fbc <TIMER_IF_StopTimer>
	timeout += RtcTimerContext;
 8017f32:	4b20      	ldr	r3, [pc, #128]	@ (8017fb4 <TIMER_IF_StartTimer+0xb8>)
 8017f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017f3c:	1884      	adds	r4, r0, r2
 8017f3e:	eb41 0503 	adc.w	r5, r1, r3
 8017f42:	e9c7 4500 	strd	r4, r5, [r7]
	subseconds_to_datetime(timeout, &sDate, &sTime);
 8017f46:	f107 030c 	add.w	r3, r7, #12
 8017f4a:	f107 0208 	add.w	r2, r7, #8
 8017f4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017f52:	f7ff ff5b 	bl	8017e0c <subseconds_to_datetime>

	/* starts timer*/
	sAlarm.AlarmTime.Hours = sTime.Hours;
 8017f56:	7b3b      	ldrb	r3, [r7, #12]
 8017f58:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.AlarmTime.Minutes = sTime.Minutes;
 8017f5c:	7b7b      	ldrb	r3, [r7, #13]
 8017f5e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	sAlarm.AlarmTime.Seconds = sTime.Seconds;
 8017f62:	7bbb      	ldrb	r3, [r7, #14]
 8017f64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	sAlarm.AlarmTime.SubSeconds = sTime.SubSeconds;
 8017f68:	693b      	ldr	r3, [r7, #16]
 8017f6a:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = sDate.Date;
 8017f6c:	7abb      	ldrb	r3, [r7, #10]
 8017f6e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8017f72:	2300      	movs	r3, #0
 8017f74:	637b      	str	r3, [r7, #52]	@ 0x34
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8017f76:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8017f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	643b      	str	r3, [r7, #64]	@ 0x40
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8017f80:	2300      	movs	r3, #0
 8017f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8017f84:	2300      	movs	r3, #0
 8017f86:	633b      	str	r3, [r7, #48]	@ 0x30
	sAlarm.Alarm = RTC_ALARM_A;
 8017f88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8017f8e:	f107 0320 	add.w	r3, r7, #32
 8017f92:	2200      	movs	r2, #0
 8017f94:	4619      	mov	r1, r3
 8017f96:	4808      	ldr	r0, [pc, #32]	@ (8017fb8 <TIMER_IF_StartTimer+0xbc>)
 8017f98:	f7ec fee8 	bl	8004d6c <HAL_RTC_SetAlarm_IT>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d001      	beq.n	8017fa6 <TIMER_IF_StartTimer+0xaa>
		Error_Handler();
 8017fa2:	f7e9 fd6f 	bl	8001a84 <Error_Handler>
	}

	return ret;
 8017fa6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8017faa:	4618      	mov	r0, r3
 8017fac:	3750      	adds	r7, #80	@ 0x50
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8017fb2:	bf00      	nop
 8017fb4:	20002020 	.word	0x20002020
 8017fb8:	20000d7c 	.word	0x20000d7c

08017fbc <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void) {
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b082      	sub	sp, #8
 8017fc0:	af00      	add	r7, sp, #0
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	71fb      	strb	r3, [r7, #7]

	/* Clear RTC Alarm Flag */
	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8017fc6:	4b09      	ldr	r3, [pc, #36]	@ (8017fec <TIMER_IF_StopTimer+0x30>)
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	68db      	ldr	r3, [r3, #12]
 8017fcc:	b2da      	uxtb	r2, r3
 8017fce:	4b07      	ldr	r3, [pc, #28]	@ (8017fec <TIMER_IF_StopTimer+0x30>)
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8017fd6:	60da      	str	r2, [r3, #12]
	/* Disable the Alarm A interrupt */
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8017fd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017fdc:	4803      	ldr	r0, [pc, #12]	@ (8017fec <TIMER_IF_StopTimer+0x30>)
 8017fde:	f7ed f801 	bl	8004fe4 <HAL_RTC_DeactivateAlarm>

	return ret;
 8017fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	3708      	adds	r7, #8
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bd80      	pop	{r7, pc}
 8017fec:	20000d7c 	.word	0x20000d7c

08017ff0 <TIMER_IF_SetTimerContext>:

uint64_t TIMER_IF_SetTimerContext(void) {
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	af00      	add	r7, sp, #0
	/*store time context*/
	RtcTimerContext = GetTimerTicks();
 8017ff4:	f000 f90e 	bl	8018214 <GetTimerTicks>
 8017ff8:	4602      	mov	r2, r0
 8017ffa:	460b      	mov	r3, r1
 8017ffc:	4904      	ldr	r1, [pc, #16]	@ (8018010 <TIMER_IF_SetTimerContext+0x20>)
 8017ffe:	e9c1 2300 	strd	r2, r3, [r1]
	/*return time context*/
	return RtcTimerContext;
 8018002:	4b03      	ldr	r3, [pc, #12]	@ (8018010 <TIMER_IF_SetTimerContext+0x20>)
 8018004:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8018008:	4610      	mov	r0, r2
 801800a:	4619      	mov	r1, r3
 801800c:	bd80      	pop	{r7, pc}
 801800e:	bf00      	nop
 8018010:	20002020 	.word	0x20002020

08018014 <TIMER_IF_GetTimerContext>:

uint64_t TIMER_IF_GetTimerContext(void) {
 8018014:	b480      	push	{r7}
 8018016:	af00      	add	r7, sp, #0
	return RtcTimerContext;
 8018018:	4b04      	ldr	r3, [pc, #16]	@ (801802c <TIMER_IF_GetTimerContext+0x18>)
 801801a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 801801e:	4610      	mov	r0, r2
 8018020:	4619      	mov	r1, r3
 8018022:	46bd      	mov	sp, r7
 8018024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018028:	4770      	bx	lr
 801802a:	bf00      	nop
 801802c:	20002020 	.word	0x20002020

08018030 <TIMER_IF_GetTimerElapsedTime>:

uint64_t TIMER_IF_GetTimerElapsedTime(void) {
 8018030:	b5b0      	push	{r4, r5, r7, lr}
 8018032:	b082      	sub	sp, #8
 8018034:	af00      	add	r7, sp, #0
	uint64_t ret = 0;
 8018036:	f04f 0200 	mov.w	r2, #0
 801803a:	f04f 0300 	mov.w	r3, #0
 801803e:	e9c7 2300 	strd	r2, r3, [r7]
	ret = ((uint64_t) (GetTimerTicks() - RtcTimerContext));
 8018042:	f000 f8e7 	bl	8018214 <GetTimerTicks>
 8018046:	4b07      	ldr	r3, [pc, #28]	@ (8018064 <TIMER_IF_GetTimerElapsedTime+0x34>)
 8018048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801804c:	1a84      	subs	r4, r0, r2
 801804e:	eb61 0503 	sbc.w	r5, r1, r3
 8018052:	e9c7 4500 	strd	r4, r5, [r7]

	return ret;
 8018056:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 801805a:	4610      	mov	r0, r2
 801805c:	4619      	mov	r1, r3
 801805e:	3708      	adds	r7, #8
 8018060:	46bd      	mov	sp, r7
 8018062:	bdb0      	pop	{r4, r5, r7, pc}
 8018064:	20002020 	.word	0x20002020

08018068 <TIMER_IF_GetTimerValue>:

uint64_t TIMER_IF_GetTimerValue(void) {
 8018068:	b580      	push	{r7, lr}
 801806a:	b082      	sub	sp, #8
 801806c:	af00      	add	r7, sp, #0
	uint64_t ret = 0;
 801806e:	f04f 0200 	mov.w	r2, #0
 8018072:	f04f 0300 	mov.w	r3, #0
 8018076:	e9c7 2300 	strd	r2, r3, [r7]

	if (RTC_Initialized == true)
 801807a:	4b07      	ldr	r3, [pc, #28]	@ (8018098 <TIMER_IF_GetTimerValue+0x30>)
 801807c:	781b      	ldrb	r3, [r3, #0]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d003      	beq.n	801808a <TIMER_IF_GetTimerValue+0x22>
		ret = GetTimerTicks();
 8018082:	f000 f8c7 	bl	8018214 <GetTimerTicks>
 8018086:	e9c7 0100 	strd	r0, r1, [r7]

	return ret;
 801808a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 801808e:	4610      	mov	r0, r2
 8018090:	4619      	mov	r1, r3
 8018092:	3708      	adds	r7, #8
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}
 8018098:	20002018 	.word	0x20002018

0801809c <TIMER_IF_GetMinimumTimeout>:

uint64_t TIMER_IF_GetMinimumTimeout(void) {
 801809c:	b480      	push	{r7}
 801809e:	b083      	sub	sp, #12
 80180a0:	af00      	add	r7, sp, #0
	uint64_t ret = 0;
 80180a2:	f04f 0200 	mov.w	r2, #0
 80180a6:	f04f 0300 	mov.w	r3, #0
 80180aa:	e9c7 2300 	strd	r2, r3, [r7]
	ret = (MIN_ALARM_DELAY);
 80180ae:	f04f 0201 	mov.w	r2, #1
 80180b2:	f04f 0300 	mov.w	r3, #0
 80180b6:	e9c7 2300 	strd	r2, r3, [r7]

	return ret;
 80180ba:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80180be:	4610      	mov	r0, r2
 80180c0:	4619      	mov	r1, r3
 80180c2:	370c      	adds	r7, #12
 80180c4:	46bd      	mov	sp, r7
 80180c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ca:	4770      	bx	lr

080180cc <TIMER_IF_Convert_ms2Tick>:

uint64_t TIMER_IF_Convert_ms2Tick(uint64_t timeMilliSec) {
 80180cc:	b480      	push	{r7}
 80180ce:	b083      	sub	sp, #12
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	e9c7 0100 	strd	r0, r1, [r7]
	return timeMilliSec;
 80180d6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80180da:	4610      	mov	r0, r2
 80180dc:	4619      	mov	r1, r3
 80180de:	370c      	adds	r7, #12
 80180e0:	46bd      	mov	sp, r7
 80180e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e6:	4770      	bx	lr

080180e8 <TIMER_IF_Convert_Tick2ms>:

uint64_t TIMER_IF_Convert_Tick2ms(uint64_t tick) {
 80180e8:	b480      	push	{r7}
 80180ea:	b083      	sub	sp, #12
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	e9c7 0100 	strd	r0, r1, [r7]
	return tick;
 80180f2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80180f6:	4610      	mov	r0, r2
 80180f8:	4619      	mov	r1, r3
 80180fa:	370c      	adds	r7, #12
 80180fc:	46bd      	mov	sp, r7
 80180fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018102:	4770      	bx	lr

08018104 <HAL_RTC_AlarmAEventCallback>:
	/* Wait delay ms */
	while (((GetTimerTicks() - timeout)) < delayTicks)
		__NOP();
}

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8018104:	b580      	push	{r7, lr}
 8018106:	b082      	sub	sp, #8
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_IRQ_MAP_PROCESS();
 801810c:	f7ff fc74 	bl	80179f8 <UTIL_TIMER_IRQ_Handler>
}
 8018110:	bf00      	nop
 8018112:	3708      	adds	r7, #8
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}

08018118 <TIMER_IF_GetTime>:
	uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
	TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
}
*/

uint64_t TIMER_IF_GetTime(uint16_t *mSeconds) {
 8018118:	b5b0      	push	{r4, r5, r7, lr}
 801811a:	b086      	sub	sp, #24
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
	uint32_t seconds = 0;
 8018120:	2300      	movs	r3, #0
 8018122:	617b      	str	r3, [r7, #20]

	uint64_t ticks = GetTimerTicks();
 8018124:	f000 f876 	bl	8018214 <GetTimerTicks>
 8018128:	e9c7 0102 	strd	r0, r1, [r7, #8]
	seconds = ticks/1000;
 801812c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018130:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018134:	f04f 0300 	mov.w	r3, #0
 8018138:	f7e8 fdb6 	bl	8000ca8 <__aeabi_uldivmod>
 801813c:	4602      	mov	r2, r0
 801813e:	460b      	mov	r3, r1
 8018140:	4613      	mov	r3, r2
 8018142:	617b      	str	r3, [r7, #20]
	*mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8018144:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018148:	f7ff ffce 	bl	80180e8 <TIMER_IF_Convert_Tick2ms>
 801814c:	4602      	mov	r2, r0
 801814e:	460b      	mov	r3, r1
 8018150:	b292      	uxth	r2, r2
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	801a      	strh	r2, [r3, #0]

	return seconds;
 8018156:	697b      	ldr	r3, [r7, #20]
 8018158:	2200      	movs	r2, #0
 801815a:	461c      	mov	r4, r3
 801815c:	4615      	mov	r5, r2
 801815e:	4622      	mov	r2, r4
 8018160:	462b      	mov	r3, r5
}
 8018162:	4610      	mov	r0, r2
 8018164:	4619      	mov	r1, r3
 8018166:	3718      	adds	r7, #24
 8018168:	46bd      	mov	sp, r7
 801816a:	bdb0      	pop	{r4, r5, r7, pc}

0801816c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds) {
 801816c:	b580      	push	{r7, lr}
 801816e:	b082      	sub	sp, #8
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8018174:	687a      	ldr	r2, [r7, #4]
 8018176:	2100      	movs	r1, #0
 8018178:	4803      	ldr	r0, [pc, #12]	@ (8018188 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 801817a:	f7ed f91d 	bl	80053b8 <HAL_RTCEx_BKUPWrite>
}
 801817e:	bf00      	nop
 8018180:	3708      	adds	r7, #8
 8018182:	46bd      	mov	sp, r7
 8018184:	bd80      	pop	{r7, pc}
 8018186:	bf00      	nop
 8018188:	20000d7c 	.word	0x20000d7c

0801818c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds) {
 801818c:	b580      	push	{r7, lr}
 801818e:	b082      	sub	sp, #8
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8018194:	687a      	ldr	r2, [r7, #4]
 8018196:	2101      	movs	r1, #1
 8018198:	4803      	ldr	r0, [pc, #12]	@ (80181a8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 801819a:	f7ed f90d 	bl	80053b8 <HAL_RTCEx_BKUPWrite>
}
 801819e:	bf00      	nop
 80181a0:	3708      	adds	r7, #8
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}
 80181a6:	bf00      	nop
 80181a8:	20000d7c 	.word	0x20000d7c

080181ac <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void) {
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b082      	sub	sp, #8
 80181b0:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 80181b2:	2300      	movs	r3, #0
 80181b4:	607b      	str	r3, [r7, #4]
	ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80181b6:	2100      	movs	r1, #0
 80181b8:	4804      	ldr	r0, [pc, #16]	@ (80181cc <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80181ba:	f7ed f916 	bl	80053ea <HAL_RTCEx_BKUPRead>
 80181be:	6078      	str	r0, [r7, #4]

	return ret;
 80181c0:	687b      	ldr	r3, [r7, #4]
}
 80181c2:	4618      	mov	r0, r3
 80181c4:	3708      	adds	r7, #8
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bd80      	pop	{r7, pc}
 80181ca:	bf00      	nop
 80181cc:	20000d7c 	.word	0x20000d7c

080181d0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void) {
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b082      	sub	sp, #8
 80181d4:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 80181d6:	2300      	movs	r3, #0
 80181d8:	607b      	str	r3, [r7, #4]

	ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80181da:	2101      	movs	r1, #1
 80181dc:	4804      	ldr	r0, [pc, #16]	@ (80181f0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80181de:	f7ed f904 	bl	80053ea <HAL_RTCEx_BKUPRead>
 80181e2:	6078      	str	r0, [r7, #4]

	return ret;
 80181e4:	687b      	ldr	r3, [r7, #4]
}
 80181e6:	4618      	mov	r0, r3
 80181e8:	3708      	adds	r7, #8
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd80      	pop	{r7, pc}
 80181ee:	bf00      	nop
 80181f0:	20000d7c 	.word	0x20000d7c

080181f4 <TIMER_IF_BkUp_Write_MSBticks>:



/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks) {
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b082      	sub	sp, #8
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80181fc:	687a      	ldr	r2, [r7, #4]
 80181fe:	2102      	movs	r1, #2
 8018200:	4803      	ldr	r0, [pc, #12]	@ (8018210 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8018202:	f7ed f8d9 	bl	80053b8 <HAL_RTCEx_BKUPWrite>
}
 8018206:	bf00      	nop
 8018208:	3708      	adds	r7, #8
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}
 801820e:	bf00      	nop
 8018210:	20000d7c 	.word	0x20000d7c

08018214 <GetTimerTicks>:
	MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);

	return MSBticks;
}

static inline uint64_t GetTimerTicks(void) {
 8018214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018216:	b08b      	sub	sp, #44	@ 0x2c
 8018218:	af04      	add	r7, sp, #16
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 801821a:	463b      	mov	r3, r7
 801821c:	2200      	movs	r2, #0
 801821e:	4619      	mov	r1, r3
 8018220:	4812      	ldr	r0, [pc, #72]	@ (801826c <GetTimerTicks+0x58>)
 8018222:	f7ec fc72 	bl	8004b0a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8018226:	f107 0314 	add.w	r3, r7, #20
 801822a:	2200      	movs	r2, #0
 801822c:	4619      	mov	r1, r3
 801822e:	480f      	ldr	r0, [pc, #60]	@ (801826c <GetTimerTicks+0x58>)
 8018230:	f7ec fd4e 	bl	8004cd0 <HAL_RTC_GetDate>

	return datetime_to_milisec(gDate.Year, gDate.Month, gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds, gTime.SubSeconds);
 8018234:	7dfb      	ldrb	r3, [r7, #23]
 8018236:	4618      	mov	r0, r3
 8018238:	7d7b      	ldrb	r3, [r7, #21]
 801823a:	461c      	mov	r4, r3
 801823c:	7dbb      	ldrb	r3, [r7, #22]
 801823e:	461d      	mov	r5, r3
 8018240:	783b      	ldrb	r3, [r7, #0]
 8018242:	461e      	mov	r6, r3
 8018244:	787b      	ldrb	r3, [r7, #1]
 8018246:	461a      	mov	r2, r3
 8018248:	78bb      	ldrb	r3, [r7, #2]
 801824a:	4619      	mov	r1, r3
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	9302      	str	r3, [sp, #8]
 8018250:	9101      	str	r1, [sp, #4]
 8018252:	9200      	str	r2, [sp, #0]
 8018254:	4633      	mov	r3, r6
 8018256:	462a      	mov	r2, r5
 8018258:	4621      	mov	r1, r4
 801825a:	f7ff fd4d 	bl	8017cf8 <datetime_to_milisec>
 801825e:	4602      	mov	r2, r0
 8018260:	460b      	mov	r3, r1
}
 8018262:	4610      	mov	r0, r2
 8018264:	4619      	mov	r1, r3
 8018266:	371c      	adds	r7, #28
 8018268:	46bd      	mov	sp, r7
 801826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801826c:	20000d7c 	.word	0x20000d7c

08018270 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 8018270:	b480      	push	{r7}
 8018272:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018274:	4b0e      	ldr	r3, [pc, #56]	@ (80182b0 <rand1+0x40>)
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	4a0e      	ldr	r2, [pc, #56]	@ (80182b4 <rand1+0x44>)
 801827a:	fb02 f303 	mul.w	r3, r2, r3
 801827e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018282:	3339      	adds	r3, #57	@ 0x39
 8018284:	4a0a      	ldr	r2, [pc, #40]	@ (80182b0 <rand1+0x40>)
 8018286:	6013      	str	r3, [r2, #0]
 8018288:	4b09      	ldr	r3, [pc, #36]	@ (80182b0 <rand1+0x40>)
 801828a:	681a      	ldr	r2, [r3, #0]
 801828c:	2303      	movs	r3, #3
 801828e:	fba3 1302 	umull	r1, r3, r3, r2
 8018292:	1ad1      	subs	r1, r2, r3
 8018294:	0849      	lsrs	r1, r1, #1
 8018296:	440b      	add	r3, r1
 8018298:	0f99      	lsrs	r1, r3, #30
 801829a:	460b      	mov	r3, r1
 801829c:	07db      	lsls	r3, r3, #31
 801829e:	1a5b      	subs	r3, r3, r1
 80182a0:	1ad1      	subs	r1, r2, r3
 80182a2:	460b      	mov	r3, r1
}
 80182a4:	4618      	mov	r0, r3
 80182a6:	46bd      	mov	sp, r7
 80182a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ac:	4770      	bx	lr
 80182ae:	bf00      	nop
 80182b0:	200003fc 	.word	0x200003fc
 80182b4:	41c64e6d 	.word	0x41c64e6d

080182b8 <srand1>:

void srand1( uint32_t seed )
{
 80182b8:	b480      	push	{r7}
 80182ba:	b083      	sub	sp, #12
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
    next = seed;
 80182c0:	4a04      	ldr	r2, [pc, #16]	@ (80182d4 <srand1+0x1c>)
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	6013      	str	r3, [r2, #0]
}
 80182c6:	bf00      	nop
 80182c8:	370c      	adds	r7, #12
 80182ca:	46bd      	mov	sp, r7
 80182cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d0:	4770      	bx	lr
 80182d2:	bf00      	nop
 80182d4:	200003fc 	.word	0x200003fc

080182d8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	b082      	sub	sp, #8
 80182dc:	af00      	add	r7, sp, #0
 80182de:	6078      	str	r0, [r7, #4]
 80182e0:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80182e2:	f7ff ffc5 	bl	8018270 <rand1>
 80182e6:	4602      	mov	r2, r0
 80182e8:	6839      	ldr	r1, [r7, #0]
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	1acb      	subs	r3, r1, r3
 80182ee:	3301      	adds	r3, #1
 80182f0:	fb92 f1f3 	sdiv	r1, r2, r3
 80182f4:	fb01 f303 	mul.w	r3, r1, r3
 80182f8:	1ad2      	subs	r2, r2, r3
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	4413      	add	r3, r2
}
 80182fe:	4618      	mov	r0, r3
 8018300:	3708      	adds	r7, #8
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}

08018306 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018306:	b480      	push	{r7}
 8018308:	b085      	sub	sp, #20
 801830a:	af00      	add	r7, sp, #0
 801830c:	60f8      	str	r0, [r7, #12]
 801830e:	60b9      	str	r1, [r7, #8]
 8018310:	4613      	mov	r3, r2
 8018312:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018314:	e007      	b.n	8018326 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018316:	68ba      	ldr	r2, [r7, #8]
 8018318:	1c53      	adds	r3, r2, #1
 801831a:	60bb      	str	r3, [r7, #8]
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	1c59      	adds	r1, r3, #1
 8018320:	60f9      	str	r1, [r7, #12]
 8018322:	7812      	ldrb	r2, [r2, #0]
 8018324:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018326:	88fb      	ldrh	r3, [r7, #6]
 8018328:	1e5a      	subs	r2, r3, #1
 801832a:	80fa      	strh	r2, [r7, #6]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d1f2      	bne.n	8018316 <memcpy1+0x10>
    }
}
 8018330:	bf00      	nop
 8018332:	bf00      	nop
 8018334:	3714      	adds	r7, #20
 8018336:	46bd      	mov	sp, r7
 8018338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801833c:	4770      	bx	lr

0801833e <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801833e:	b480      	push	{r7}
 8018340:	b085      	sub	sp, #20
 8018342:	af00      	add	r7, sp, #0
 8018344:	60f8      	str	r0, [r7, #12]
 8018346:	60b9      	str	r1, [r7, #8]
 8018348:	4613      	mov	r3, r2
 801834a:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801834c:	88fb      	ldrh	r3, [r7, #6]
 801834e:	3b01      	subs	r3, #1
 8018350:	68fa      	ldr	r2, [r7, #12]
 8018352:	4413      	add	r3, r2
 8018354:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018356:	e007      	b.n	8018368 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018358:	68ba      	ldr	r2, [r7, #8]
 801835a:	1c53      	adds	r3, r2, #1
 801835c:	60bb      	str	r3, [r7, #8]
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	1e59      	subs	r1, r3, #1
 8018362:	60f9      	str	r1, [r7, #12]
 8018364:	7812      	ldrb	r2, [r2, #0]
 8018366:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018368:	88fb      	ldrh	r3, [r7, #6]
 801836a:	1e5a      	subs	r2, r3, #1
 801836c:	80fa      	strh	r2, [r7, #6]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d1f2      	bne.n	8018358 <memcpyr+0x1a>
    }
}
 8018372:	bf00      	nop
 8018374:	bf00      	nop
 8018376:	3714      	adds	r7, #20
 8018378:	46bd      	mov	sp, r7
 801837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801837e:	4770      	bx	lr

08018380 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018380:	b480      	push	{r7}
 8018382:	b083      	sub	sp, #12
 8018384:	af00      	add	r7, sp, #0
 8018386:	6078      	str	r0, [r7, #4]
 8018388:	460b      	mov	r3, r1
 801838a:	70fb      	strb	r3, [r7, #3]
 801838c:	4613      	mov	r3, r2
 801838e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018390:	e004      	b.n	801839c <memset1+0x1c>
    {
        *dst++ = value;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	1c5a      	adds	r2, r3, #1
 8018396:	607a      	str	r2, [r7, #4]
 8018398:	78fa      	ldrb	r2, [r7, #3]
 801839a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801839c:	883b      	ldrh	r3, [r7, #0]
 801839e:	1e5a      	subs	r2, r3, #1
 80183a0:	803a      	strh	r2, [r7, #0]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d1f5      	bne.n	8018392 <memset1+0x12>
    }
}
 80183a6:	bf00      	nop
 80183a8:	bf00      	nop
 80183aa:	370c      	adds	r7, #12
 80183ac:	46bd      	mov	sp, r7
 80183ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b2:	4770      	bx	lr

080183b4 <malloc>:
 80183b4:	4b02      	ldr	r3, [pc, #8]	@ (80183c0 <malloc+0xc>)
 80183b6:	4601      	mov	r1, r0
 80183b8:	6818      	ldr	r0, [r3, #0]
 80183ba:	f000 b80b 	b.w	80183d4 <_malloc_r>
 80183be:	bf00      	nop
 80183c0:	20000824 	.word	0x20000824

080183c4 <free>:
 80183c4:	4b02      	ldr	r3, [pc, #8]	@ (80183d0 <free+0xc>)
 80183c6:	4601      	mov	r1, r0
 80183c8:	6818      	ldr	r0, [r3, #0]
 80183ca:	f001 bb25 	b.w	8019a18 <_free_r>
 80183ce:	bf00      	nop
 80183d0:	20000824 	.word	0x20000824

080183d4 <_malloc_r>:
 80183d4:	f101 030b 	add.w	r3, r1, #11
 80183d8:	2b16      	cmp	r3, #22
 80183da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183de:	4605      	mov	r5, r0
 80183e0:	d906      	bls.n	80183f0 <_malloc_r+0x1c>
 80183e2:	f033 0707 	bics.w	r7, r3, #7
 80183e6:	d504      	bpl.n	80183f2 <_malloc_r+0x1e>
 80183e8:	230c      	movs	r3, #12
 80183ea:	602b      	str	r3, [r5, #0]
 80183ec:	2400      	movs	r4, #0
 80183ee:	e1a3      	b.n	8018738 <_malloc_r+0x364>
 80183f0:	2710      	movs	r7, #16
 80183f2:	42b9      	cmp	r1, r7
 80183f4:	d8f8      	bhi.n	80183e8 <_malloc_r+0x14>
 80183f6:	4628      	mov	r0, r5
 80183f8:	f000 fa26 	bl	8018848 <__malloc_lock>
 80183fc:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8018400:	4eaf      	ldr	r6, [pc, #700]	@ (80186c0 <_malloc_r+0x2ec>)
 8018402:	d237      	bcs.n	8018474 <_malloc_r+0xa0>
 8018404:	f107 0208 	add.w	r2, r7, #8
 8018408:	4432      	add	r2, r6
 801840a:	f1a2 0108 	sub.w	r1, r2, #8
 801840e:	6854      	ldr	r4, [r2, #4]
 8018410:	428c      	cmp	r4, r1
 8018412:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8018416:	d102      	bne.n	801841e <_malloc_r+0x4a>
 8018418:	68d4      	ldr	r4, [r2, #12]
 801841a:	42a2      	cmp	r2, r4
 801841c:	d010      	beq.n	8018440 <_malloc_r+0x6c>
 801841e:	6863      	ldr	r3, [r4, #4]
 8018420:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8018424:	f023 0303 	bic.w	r3, r3, #3
 8018428:	60ca      	str	r2, [r1, #12]
 801842a:	4423      	add	r3, r4
 801842c:	6091      	str	r1, [r2, #8]
 801842e:	685a      	ldr	r2, [r3, #4]
 8018430:	f042 0201 	orr.w	r2, r2, #1
 8018434:	605a      	str	r2, [r3, #4]
 8018436:	4628      	mov	r0, r5
 8018438:	f000 fa0c 	bl	8018854 <__malloc_unlock>
 801843c:	3408      	adds	r4, #8
 801843e:	e17b      	b.n	8018738 <_malloc_r+0x364>
 8018440:	3302      	adds	r3, #2
 8018442:	6934      	ldr	r4, [r6, #16]
 8018444:	499f      	ldr	r1, [pc, #636]	@ (80186c4 <_malloc_r+0x2f0>)
 8018446:	428c      	cmp	r4, r1
 8018448:	d077      	beq.n	801853a <_malloc_r+0x166>
 801844a:	6862      	ldr	r2, [r4, #4]
 801844c:	f022 0c03 	bic.w	ip, r2, #3
 8018450:	ebac 0007 	sub.w	r0, ip, r7
 8018454:	280f      	cmp	r0, #15
 8018456:	dd48      	ble.n	80184ea <_malloc_r+0x116>
 8018458:	19e2      	adds	r2, r4, r7
 801845a:	f040 0301 	orr.w	r3, r0, #1
 801845e:	f047 0701 	orr.w	r7, r7, #1
 8018462:	6067      	str	r7, [r4, #4]
 8018464:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8018468:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801846c:	6053      	str	r3, [r2, #4]
 801846e:	f844 000c 	str.w	r0, [r4, ip]
 8018472:	e7e0      	b.n	8018436 <_malloc_r+0x62>
 8018474:	0a7b      	lsrs	r3, r7, #9
 8018476:	d02a      	beq.n	80184ce <_malloc_r+0xfa>
 8018478:	2b04      	cmp	r3, #4
 801847a:	d812      	bhi.n	80184a2 <_malloc_r+0xce>
 801847c:	09bb      	lsrs	r3, r7, #6
 801847e:	3338      	adds	r3, #56	@ 0x38
 8018480:	1c5a      	adds	r2, r3, #1
 8018482:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8018486:	f1a2 0c08 	sub.w	ip, r2, #8
 801848a:	6854      	ldr	r4, [r2, #4]
 801848c:	4564      	cmp	r4, ip
 801848e:	d006      	beq.n	801849e <_malloc_r+0xca>
 8018490:	6862      	ldr	r2, [r4, #4]
 8018492:	f022 0203 	bic.w	r2, r2, #3
 8018496:	1bd0      	subs	r0, r2, r7
 8018498:	280f      	cmp	r0, #15
 801849a:	dd1c      	ble.n	80184d6 <_malloc_r+0x102>
 801849c:	3b01      	subs	r3, #1
 801849e:	3301      	adds	r3, #1
 80184a0:	e7cf      	b.n	8018442 <_malloc_r+0x6e>
 80184a2:	2b14      	cmp	r3, #20
 80184a4:	d801      	bhi.n	80184aa <_malloc_r+0xd6>
 80184a6:	335b      	adds	r3, #91	@ 0x5b
 80184a8:	e7ea      	b.n	8018480 <_malloc_r+0xac>
 80184aa:	2b54      	cmp	r3, #84	@ 0x54
 80184ac:	d802      	bhi.n	80184b4 <_malloc_r+0xe0>
 80184ae:	0b3b      	lsrs	r3, r7, #12
 80184b0:	336e      	adds	r3, #110	@ 0x6e
 80184b2:	e7e5      	b.n	8018480 <_malloc_r+0xac>
 80184b4:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 80184b8:	d802      	bhi.n	80184c0 <_malloc_r+0xec>
 80184ba:	0bfb      	lsrs	r3, r7, #15
 80184bc:	3377      	adds	r3, #119	@ 0x77
 80184be:	e7df      	b.n	8018480 <_malloc_r+0xac>
 80184c0:	f240 5254 	movw	r2, #1364	@ 0x554
 80184c4:	4293      	cmp	r3, r2
 80184c6:	d804      	bhi.n	80184d2 <_malloc_r+0xfe>
 80184c8:	0cbb      	lsrs	r3, r7, #18
 80184ca:	337c      	adds	r3, #124	@ 0x7c
 80184cc:	e7d8      	b.n	8018480 <_malloc_r+0xac>
 80184ce:	233f      	movs	r3, #63	@ 0x3f
 80184d0:	e7d6      	b.n	8018480 <_malloc_r+0xac>
 80184d2:	237e      	movs	r3, #126	@ 0x7e
 80184d4:	e7d4      	b.n	8018480 <_malloc_r+0xac>
 80184d6:	2800      	cmp	r0, #0
 80184d8:	68e1      	ldr	r1, [r4, #12]
 80184da:	db04      	blt.n	80184e6 <_malloc_r+0x112>
 80184dc:	68a3      	ldr	r3, [r4, #8]
 80184de:	60d9      	str	r1, [r3, #12]
 80184e0:	608b      	str	r3, [r1, #8]
 80184e2:	18a3      	adds	r3, r4, r2
 80184e4:	e7a3      	b.n	801842e <_malloc_r+0x5a>
 80184e6:	460c      	mov	r4, r1
 80184e8:	e7d0      	b.n	801848c <_malloc_r+0xb8>
 80184ea:	2800      	cmp	r0, #0
 80184ec:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80184f0:	db07      	blt.n	8018502 <_malloc_r+0x12e>
 80184f2:	44a4      	add	ip, r4
 80184f4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80184f8:	f043 0301 	orr.w	r3, r3, #1
 80184fc:	f8cc 3004 	str.w	r3, [ip, #4]
 8018500:	e799      	b.n	8018436 <_malloc_r+0x62>
 8018502:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8018506:	6870      	ldr	r0, [r6, #4]
 8018508:	f080 8095 	bcs.w	8018636 <_malloc_r+0x262>
 801850c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8018510:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8018514:	f04f 0c01 	mov.w	ip, #1
 8018518:	3201      	adds	r2, #1
 801851a:	fa0c fc0e 	lsl.w	ip, ip, lr
 801851e:	ea4c 0000 	orr.w	r0, ip, r0
 8018522:	6070      	str	r0, [r6, #4]
 8018524:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8018528:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801852c:	3808      	subs	r0, #8
 801852e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8018532:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8018536:	f8cc 400c 	str.w	r4, [ip, #12]
 801853a:	1098      	asrs	r0, r3, #2
 801853c:	2201      	movs	r2, #1
 801853e:	4082      	lsls	r2, r0
 8018540:	6870      	ldr	r0, [r6, #4]
 8018542:	4290      	cmp	r0, r2
 8018544:	d326      	bcc.n	8018594 <_malloc_r+0x1c0>
 8018546:	4210      	tst	r0, r2
 8018548:	d106      	bne.n	8018558 <_malloc_r+0x184>
 801854a:	f023 0303 	bic.w	r3, r3, #3
 801854e:	0052      	lsls	r2, r2, #1
 8018550:	4210      	tst	r0, r2
 8018552:	f103 0304 	add.w	r3, r3, #4
 8018556:	d0fa      	beq.n	801854e <_malloc_r+0x17a>
 8018558:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801855c:	46c1      	mov	r9, r8
 801855e:	469e      	mov	lr, r3
 8018560:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8018564:	454c      	cmp	r4, r9
 8018566:	f040 80b9 	bne.w	80186dc <_malloc_r+0x308>
 801856a:	f10e 0e01 	add.w	lr, lr, #1
 801856e:	f01e 0f03 	tst.w	lr, #3
 8018572:	f109 0908 	add.w	r9, r9, #8
 8018576:	d1f3      	bne.n	8018560 <_malloc_r+0x18c>
 8018578:	0798      	lsls	r0, r3, #30
 801857a:	f040 80e3 	bne.w	8018744 <_malloc_r+0x370>
 801857e:	6873      	ldr	r3, [r6, #4]
 8018580:	ea23 0302 	bic.w	r3, r3, r2
 8018584:	6073      	str	r3, [r6, #4]
 8018586:	6870      	ldr	r0, [r6, #4]
 8018588:	0052      	lsls	r2, r2, #1
 801858a:	4290      	cmp	r0, r2
 801858c:	d302      	bcc.n	8018594 <_malloc_r+0x1c0>
 801858e:	2a00      	cmp	r2, #0
 8018590:	f040 80e5 	bne.w	801875e <_malloc_r+0x38a>
 8018594:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8018598:	f8da 3004 	ldr.w	r3, [sl, #4]
 801859c:	f023 0903 	bic.w	r9, r3, #3
 80185a0:	45b9      	cmp	r9, r7
 80185a2:	d304      	bcc.n	80185ae <_malloc_r+0x1da>
 80185a4:	eba9 0207 	sub.w	r2, r9, r7
 80185a8:	2a0f      	cmp	r2, #15
 80185aa:	f300 8141 	bgt.w	8018830 <_malloc_r+0x45c>
 80185ae:	4b46      	ldr	r3, [pc, #280]	@ (80186c8 <_malloc_r+0x2f4>)
 80185b0:	6819      	ldr	r1, [r3, #0]
 80185b2:	3110      	adds	r1, #16
 80185b4:	4439      	add	r1, r7
 80185b6:	2008      	movs	r0, #8
 80185b8:	9101      	str	r1, [sp, #4]
 80185ba:	f001 f99d 	bl	80198f8 <sysconf>
 80185be:	4a43      	ldr	r2, [pc, #268]	@ (80186cc <_malloc_r+0x2f8>)
 80185c0:	9901      	ldr	r1, [sp, #4]
 80185c2:	6813      	ldr	r3, [r2, #0]
 80185c4:	3301      	adds	r3, #1
 80185c6:	bf1f      	itttt	ne
 80185c8:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 80185cc:	1809      	addne	r1, r1, r0
 80185ce:	4243      	negne	r3, r0
 80185d0:	4019      	andne	r1, r3
 80185d2:	4680      	mov	r8, r0
 80185d4:	4628      	mov	r0, r5
 80185d6:	9101      	str	r1, [sp, #4]
 80185d8:	f001 f93c 	bl	8019854 <_sbrk_r>
 80185dc:	1c42      	adds	r2, r0, #1
 80185de:	eb0a 0b09 	add.w	fp, sl, r9
 80185e2:	4604      	mov	r4, r0
 80185e4:	f000 80f7 	beq.w	80187d6 <_malloc_r+0x402>
 80185e8:	4583      	cmp	fp, r0
 80185ea:	9901      	ldr	r1, [sp, #4]
 80185ec:	4a37      	ldr	r2, [pc, #220]	@ (80186cc <_malloc_r+0x2f8>)
 80185ee:	d902      	bls.n	80185f6 <_malloc_r+0x222>
 80185f0:	45b2      	cmp	sl, r6
 80185f2:	f040 80f0 	bne.w	80187d6 <_malloc_r+0x402>
 80185f6:	4b36      	ldr	r3, [pc, #216]	@ (80186d0 <_malloc_r+0x2fc>)
 80185f8:	6818      	ldr	r0, [r3, #0]
 80185fa:	45a3      	cmp	fp, r4
 80185fc:	eb00 0e01 	add.w	lr, r0, r1
 8018600:	f8c3 e000 	str.w	lr, [r3]
 8018604:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8018608:	f040 80ab 	bne.w	8018762 <_malloc_r+0x38e>
 801860c:	ea1b 0f0c 	tst.w	fp, ip
 8018610:	f040 80a7 	bne.w	8018762 <_malloc_r+0x38e>
 8018614:	68b2      	ldr	r2, [r6, #8]
 8018616:	4449      	add	r1, r9
 8018618:	f041 0101 	orr.w	r1, r1, #1
 801861c:	6051      	str	r1, [r2, #4]
 801861e:	4a2d      	ldr	r2, [pc, #180]	@ (80186d4 <_malloc_r+0x300>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	6811      	ldr	r1, [r2, #0]
 8018624:	428b      	cmp	r3, r1
 8018626:	bf88      	it	hi
 8018628:	6013      	strhi	r3, [r2, #0]
 801862a:	4a2b      	ldr	r2, [pc, #172]	@ (80186d8 <_malloc_r+0x304>)
 801862c:	6811      	ldr	r1, [r2, #0]
 801862e:	428b      	cmp	r3, r1
 8018630:	bf88      	it	hi
 8018632:	6013      	strhi	r3, [r2, #0]
 8018634:	e0cf      	b.n	80187d6 <_malloc_r+0x402>
 8018636:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 801863a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801863e:	d218      	bcs.n	8018672 <_malloc_r+0x29e>
 8018640:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8018644:	3238      	adds	r2, #56	@ 0x38
 8018646:	f102 0e01 	add.w	lr, r2, #1
 801864a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801864e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8018652:	45f0      	cmp	r8, lr
 8018654:	d12b      	bne.n	80186ae <_malloc_r+0x2da>
 8018656:	1092      	asrs	r2, r2, #2
 8018658:	f04f 0c01 	mov.w	ip, #1
 801865c:	fa0c f202 	lsl.w	r2, ip, r2
 8018660:	4302      	orrs	r2, r0
 8018662:	6072      	str	r2, [r6, #4]
 8018664:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8018668:	f8c8 4008 	str.w	r4, [r8, #8]
 801866c:	f8ce 400c 	str.w	r4, [lr, #12]
 8018670:	e763      	b.n	801853a <_malloc_r+0x166>
 8018672:	2a14      	cmp	r2, #20
 8018674:	d801      	bhi.n	801867a <_malloc_r+0x2a6>
 8018676:	325b      	adds	r2, #91	@ 0x5b
 8018678:	e7e5      	b.n	8018646 <_malloc_r+0x272>
 801867a:	2a54      	cmp	r2, #84	@ 0x54
 801867c:	d803      	bhi.n	8018686 <_malloc_r+0x2b2>
 801867e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8018682:	326e      	adds	r2, #110	@ 0x6e
 8018684:	e7df      	b.n	8018646 <_malloc_r+0x272>
 8018686:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801868a:	d803      	bhi.n	8018694 <_malloc_r+0x2c0>
 801868c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8018690:	3277      	adds	r2, #119	@ 0x77
 8018692:	e7d8      	b.n	8018646 <_malloc_r+0x272>
 8018694:	f240 5e54 	movw	lr, #1364	@ 0x554
 8018698:	4572      	cmp	r2, lr
 801869a:	bf9a      	itte	ls
 801869c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80186a0:	327c      	addls	r2, #124	@ 0x7c
 80186a2:	227e      	movhi	r2, #126	@ 0x7e
 80186a4:	e7cf      	b.n	8018646 <_malloc_r+0x272>
 80186a6:	f8de e008 	ldr.w	lr, [lr, #8]
 80186aa:	45f0      	cmp	r8, lr
 80186ac:	d005      	beq.n	80186ba <_malloc_r+0x2e6>
 80186ae:	f8de 2004 	ldr.w	r2, [lr, #4]
 80186b2:	f022 0203 	bic.w	r2, r2, #3
 80186b6:	4562      	cmp	r2, ip
 80186b8:	d8f5      	bhi.n	80186a6 <_malloc_r+0x2d2>
 80186ba:	f8de 800c 	ldr.w	r8, [lr, #12]
 80186be:	e7d1      	b.n	8018664 <_malloc_r+0x290>
 80186c0:	20000408 	.word	0x20000408
 80186c4:	20000410 	.word	0x20000410
 80186c8:	20002058 	.word	0x20002058
 80186cc:	20000400 	.word	0x20000400
 80186d0:	20002028 	.word	0x20002028
 80186d4:	20002054 	.word	0x20002054
 80186d8:	20002050 	.word	0x20002050
 80186dc:	6860      	ldr	r0, [r4, #4]
 80186de:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80186e2:	f020 0003 	bic.w	r0, r0, #3
 80186e6:	eba0 0a07 	sub.w	sl, r0, r7
 80186ea:	f1ba 0f0f 	cmp.w	sl, #15
 80186ee:	dd12      	ble.n	8018716 <_malloc_r+0x342>
 80186f0:	68a3      	ldr	r3, [r4, #8]
 80186f2:	19e2      	adds	r2, r4, r7
 80186f4:	f047 0701 	orr.w	r7, r7, #1
 80186f8:	6067      	str	r7, [r4, #4]
 80186fa:	f8c3 c00c 	str.w	ip, [r3, #12]
 80186fe:	f8cc 3008 	str.w	r3, [ip, #8]
 8018702:	f04a 0301 	orr.w	r3, sl, #1
 8018706:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801870a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801870e:	6053      	str	r3, [r2, #4]
 8018710:	f844 a000 	str.w	sl, [r4, r0]
 8018714:	e68f      	b.n	8018436 <_malloc_r+0x62>
 8018716:	f1ba 0f00 	cmp.w	sl, #0
 801871a:	db11      	blt.n	8018740 <_malloc_r+0x36c>
 801871c:	4420      	add	r0, r4
 801871e:	6843      	ldr	r3, [r0, #4]
 8018720:	f043 0301 	orr.w	r3, r3, #1
 8018724:	6043      	str	r3, [r0, #4]
 8018726:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801872a:	4628      	mov	r0, r5
 801872c:	f8c3 c00c 	str.w	ip, [r3, #12]
 8018730:	f8cc 3008 	str.w	r3, [ip, #8]
 8018734:	f000 f88e 	bl	8018854 <__malloc_unlock>
 8018738:	4620      	mov	r0, r4
 801873a:	b003      	add	sp, #12
 801873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018740:	4664      	mov	r4, ip
 8018742:	e70f      	b.n	8018564 <_malloc_r+0x190>
 8018744:	f858 0908 	ldr.w	r0, [r8], #-8
 8018748:	4540      	cmp	r0, r8
 801874a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801874e:	f43f af13 	beq.w	8018578 <_malloc_r+0x1a4>
 8018752:	e718      	b.n	8018586 <_malloc_r+0x1b2>
 8018754:	3304      	adds	r3, #4
 8018756:	0052      	lsls	r2, r2, #1
 8018758:	4210      	tst	r0, r2
 801875a:	d0fb      	beq.n	8018754 <_malloc_r+0x380>
 801875c:	e6fc      	b.n	8018558 <_malloc_r+0x184>
 801875e:	4673      	mov	r3, lr
 8018760:	e7fa      	b.n	8018758 <_malloc_r+0x384>
 8018762:	6810      	ldr	r0, [r2, #0]
 8018764:	3001      	adds	r0, #1
 8018766:	bf1b      	ittet	ne
 8018768:	eba4 0b0b 	subne.w	fp, r4, fp
 801876c:	eb0b 020e 	addne.w	r2, fp, lr
 8018770:	6014      	streq	r4, [r2, #0]
 8018772:	601a      	strne	r2, [r3, #0]
 8018774:	f014 0b07 	ands.w	fp, r4, #7
 8018778:	bf1a      	itte	ne
 801877a:	f1cb 0008 	rsbne	r0, fp, #8
 801877e:	1824      	addne	r4, r4, r0
 8018780:	4658      	moveq	r0, fp
 8018782:	1862      	adds	r2, r4, r1
 8018784:	ea02 010c 	and.w	r1, r2, ip
 8018788:	4480      	add	r8, r0
 801878a:	eba8 0801 	sub.w	r8, r8, r1
 801878e:	ea08 080c 	and.w	r8, r8, ip
 8018792:	4641      	mov	r1, r8
 8018794:	4628      	mov	r0, r5
 8018796:	9201      	str	r2, [sp, #4]
 8018798:	f001 f85c 	bl	8019854 <_sbrk_r>
 801879c:	1c43      	adds	r3, r0, #1
 801879e:	9a01      	ldr	r2, [sp, #4]
 80187a0:	4b28      	ldr	r3, [pc, #160]	@ (8018844 <_malloc_r+0x470>)
 80187a2:	d107      	bne.n	80187b4 <_malloc_r+0x3e0>
 80187a4:	f1bb 0f00 	cmp.w	fp, #0
 80187a8:	d023      	beq.n	80187f2 <_malloc_r+0x41e>
 80187aa:	f1ab 0008 	sub.w	r0, fp, #8
 80187ae:	4410      	add	r0, r2
 80187b0:	f04f 0800 	mov.w	r8, #0
 80187b4:	681a      	ldr	r2, [r3, #0]
 80187b6:	60b4      	str	r4, [r6, #8]
 80187b8:	1b00      	subs	r0, r0, r4
 80187ba:	4440      	add	r0, r8
 80187bc:	4442      	add	r2, r8
 80187be:	f040 0001 	orr.w	r0, r0, #1
 80187c2:	45b2      	cmp	sl, r6
 80187c4:	601a      	str	r2, [r3, #0]
 80187c6:	6060      	str	r0, [r4, #4]
 80187c8:	f43f af29 	beq.w	801861e <_malloc_r+0x24a>
 80187cc:	f1b9 0f0f 	cmp.w	r9, #15
 80187d0:	d812      	bhi.n	80187f8 <_malloc_r+0x424>
 80187d2:	2301      	movs	r3, #1
 80187d4:	6063      	str	r3, [r4, #4]
 80187d6:	68b3      	ldr	r3, [r6, #8]
 80187d8:	685b      	ldr	r3, [r3, #4]
 80187da:	f023 0303 	bic.w	r3, r3, #3
 80187de:	42bb      	cmp	r3, r7
 80187e0:	eba3 0207 	sub.w	r2, r3, r7
 80187e4:	d301      	bcc.n	80187ea <_malloc_r+0x416>
 80187e6:	2a0f      	cmp	r2, #15
 80187e8:	dc22      	bgt.n	8018830 <_malloc_r+0x45c>
 80187ea:	4628      	mov	r0, r5
 80187ec:	f000 f832 	bl	8018854 <__malloc_unlock>
 80187f0:	e5fc      	b.n	80183ec <_malloc_r+0x18>
 80187f2:	4610      	mov	r0, r2
 80187f4:	46d8      	mov	r8, fp
 80187f6:	e7dd      	b.n	80187b4 <_malloc_r+0x3e0>
 80187f8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80187fc:	f1a9 090c 	sub.w	r9, r9, #12
 8018800:	f029 0907 	bic.w	r9, r9, #7
 8018804:	f002 0201 	and.w	r2, r2, #1
 8018808:	ea42 0209 	orr.w	r2, r2, r9
 801880c:	f8ca 2004 	str.w	r2, [sl, #4]
 8018810:	2105      	movs	r1, #5
 8018812:	eb0a 0209 	add.w	r2, sl, r9
 8018816:	f1b9 0f0f 	cmp.w	r9, #15
 801881a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801881e:	f67f aefe 	bls.w	801861e <_malloc_r+0x24a>
 8018822:	f10a 0108 	add.w	r1, sl, #8
 8018826:	4628      	mov	r0, r5
 8018828:	f001 f8f6 	bl	8019a18 <_free_r>
 801882c:	4b05      	ldr	r3, [pc, #20]	@ (8018844 <_malloc_r+0x470>)
 801882e:	e6f6      	b.n	801861e <_malloc_r+0x24a>
 8018830:	68b4      	ldr	r4, [r6, #8]
 8018832:	f047 0301 	orr.w	r3, r7, #1
 8018836:	4427      	add	r7, r4
 8018838:	f042 0201 	orr.w	r2, r2, #1
 801883c:	6063      	str	r3, [r4, #4]
 801883e:	60b7      	str	r7, [r6, #8]
 8018840:	607a      	str	r2, [r7, #4]
 8018842:	e5f8      	b.n	8018436 <_malloc_r+0x62>
 8018844:	20002028 	.word	0x20002028

08018848 <__malloc_lock>:
 8018848:	4801      	ldr	r0, [pc, #4]	@ (8018850 <__malloc_lock+0x8>)
 801884a:	f001 b852 	b.w	80198f2 <__retarget_lock_acquire_recursive>
 801884e:	bf00      	nop
 8018850:	200021c2 	.word	0x200021c2

08018854 <__malloc_unlock>:
 8018854:	4801      	ldr	r0, [pc, #4]	@ (801885c <__malloc_unlock+0x8>)
 8018856:	f001 b84e 	b.w	80198f6 <__retarget_lock_release_recursive>
 801885a:	bf00      	nop
 801885c:	200021c2 	.word	0x200021c2

08018860 <std>:
 8018860:	2300      	movs	r3, #0
 8018862:	b510      	push	{r4, lr}
 8018864:	4604      	mov	r4, r0
 8018866:	e9c0 3300 	strd	r3, r3, [r0]
 801886a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801886e:	6083      	str	r3, [r0, #8]
 8018870:	8181      	strh	r1, [r0, #12]
 8018872:	6643      	str	r3, [r0, #100]	@ 0x64
 8018874:	81c2      	strh	r2, [r0, #14]
 8018876:	6183      	str	r3, [r0, #24]
 8018878:	4619      	mov	r1, r3
 801887a:	2208      	movs	r2, #8
 801887c:	305c      	adds	r0, #92	@ 0x5c
 801887e:	f000 f99d 	bl	8018bbc <memset>
 8018882:	4b0d      	ldr	r3, [pc, #52]	@ (80188b8 <std+0x58>)
 8018884:	6223      	str	r3, [r4, #32]
 8018886:	4b0d      	ldr	r3, [pc, #52]	@ (80188bc <std+0x5c>)
 8018888:	6263      	str	r3, [r4, #36]	@ 0x24
 801888a:	4b0d      	ldr	r3, [pc, #52]	@ (80188c0 <std+0x60>)
 801888c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801888e:	4b0d      	ldr	r3, [pc, #52]	@ (80188c4 <std+0x64>)
 8018890:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018892:	4b0d      	ldr	r3, [pc, #52]	@ (80188c8 <std+0x68>)
 8018894:	61e4      	str	r4, [r4, #28]
 8018896:	429c      	cmp	r4, r3
 8018898:	d006      	beq.n	80188a8 <std+0x48>
 801889a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801889e:	4294      	cmp	r4, r2
 80188a0:	d002      	beq.n	80188a8 <std+0x48>
 80188a2:	33d0      	adds	r3, #208	@ 0xd0
 80188a4:	429c      	cmp	r4, r3
 80188a6:	d105      	bne.n	80188b4 <std+0x54>
 80188a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80188ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188b0:	f001 b81c 	b.w	80198ec <__retarget_lock_init_recursive>
 80188b4:	bd10      	pop	{r4, pc}
 80188b6:	bf00      	nop
 80188b8:	08018aa5 	.word	0x08018aa5
 80188bc:	08018acb 	.word	0x08018acb
 80188c0:	08018b03 	.word	0x08018b03
 80188c4:	08018b27 	.word	0x08018b27
 80188c8:	2000205c 	.word	0x2000205c

080188cc <stdio_exit_handler>:
 80188cc:	4a02      	ldr	r2, [pc, #8]	@ (80188d8 <stdio_exit_handler+0xc>)
 80188ce:	4903      	ldr	r1, [pc, #12]	@ (80188dc <stdio_exit_handler+0x10>)
 80188d0:	4803      	ldr	r0, [pc, #12]	@ (80188e0 <stdio_exit_handler+0x14>)
 80188d2:	f000 b869 	b.w	80189a8 <_fwalk_sglue>
 80188d6:	bf00      	nop
 80188d8:	20000810 	.word	0x20000810
 80188dc:	0801df55 	.word	0x0801df55
 80188e0:	20000828 	.word	0x20000828

080188e4 <cleanup_stdio>:
 80188e4:	6841      	ldr	r1, [r0, #4]
 80188e6:	4b0c      	ldr	r3, [pc, #48]	@ (8018918 <cleanup_stdio+0x34>)
 80188e8:	4299      	cmp	r1, r3
 80188ea:	b510      	push	{r4, lr}
 80188ec:	4604      	mov	r4, r0
 80188ee:	d001      	beq.n	80188f4 <cleanup_stdio+0x10>
 80188f0:	f005 fb30 	bl	801df54 <_fclose_r>
 80188f4:	68a1      	ldr	r1, [r4, #8]
 80188f6:	4b09      	ldr	r3, [pc, #36]	@ (801891c <cleanup_stdio+0x38>)
 80188f8:	4299      	cmp	r1, r3
 80188fa:	d002      	beq.n	8018902 <cleanup_stdio+0x1e>
 80188fc:	4620      	mov	r0, r4
 80188fe:	f005 fb29 	bl	801df54 <_fclose_r>
 8018902:	68e1      	ldr	r1, [r4, #12]
 8018904:	4b06      	ldr	r3, [pc, #24]	@ (8018920 <cleanup_stdio+0x3c>)
 8018906:	4299      	cmp	r1, r3
 8018908:	d004      	beq.n	8018914 <cleanup_stdio+0x30>
 801890a:	4620      	mov	r0, r4
 801890c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018910:	f005 bb20 	b.w	801df54 <_fclose_r>
 8018914:	bd10      	pop	{r4, pc}
 8018916:	bf00      	nop
 8018918:	2000205c 	.word	0x2000205c
 801891c:	200020c4 	.word	0x200020c4
 8018920:	2000212c 	.word	0x2000212c

08018924 <global_stdio_init.part.0>:
 8018924:	b510      	push	{r4, lr}
 8018926:	4b0b      	ldr	r3, [pc, #44]	@ (8018954 <global_stdio_init.part.0+0x30>)
 8018928:	4c0b      	ldr	r4, [pc, #44]	@ (8018958 <global_stdio_init.part.0+0x34>)
 801892a:	4a0c      	ldr	r2, [pc, #48]	@ (801895c <global_stdio_init.part.0+0x38>)
 801892c:	601a      	str	r2, [r3, #0]
 801892e:	4620      	mov	r0, r4
 8018930:	2200      	movs	r2, #0
 8018932:	2104      	movs	r1, #4
 8018934:	f7ff ff94 	bl	8018860 <std>
 8018938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801893c:	2201      	movs	r2, #1
 801893e:	2109      	movs	r1, #9
 8018940:	f7ff ff8e 	bl	8018860 <std>
 8018944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018948:	2202      	movs	r2, #2
 801894a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801894e:	2112      	movs	r1, #18
 8018950:	f7ff bf86 	b.w	8018860 <std>
 8018954:	20002194 	.word	0x20002194
 8018958:	2000205c 	.word	0x2000205c
 801895c:	080188cd 	.word	0x080188cd

08018960 <__sfp_lock_acquire>:
 8018960:	4801      	ldr	r0, [pc, #4]	@ (8018968 <__sfp_lock_acquire+0x8>)
 8018962:	f000 bfc6 	b.w	80198f2 <__retarget_lock_acquire_recursive>
 8018966:	bf00      	nop
 8018968:	200021c4 	.word	0x200021c4

0801896c <__sfp_lock_release>:
 801896c:	4801      	ldr	r0, [pc, #4]	@ (8018974 <__sfp_lock_release+0x8>)
 801896e:	f000 bfc2 	b.w	80198f6 <__retarget_lock_release_recursive>
 8018972:	bf00      	nop
 8018974:	200021c4 	.word	0x200021c4

08018978 <__sinit>:
 8018978:	b510      	push	{r4, lr}
 801897a:	4604      	mov	r4, r0
 801897c:	f7ff fff0 	bl	8018960 <__sfp_lock_acquire>
 8018980:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018982:	b11b      	cbz	r3, 801898c <__sinit+0x14>
 8018984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018988:	f7ff bff0 	b.w	801896c <__sfp_lock_release>
 801898c:	4b04      	ldr	r3, [pc, #16]	@ (80189a0 <__sinit+0x28>)
 801898e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018990:	4b04      	ldr	r3, [pc, #16]	@ (80189a4 <__sinit+0x2c>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d1f5      	bne.n	8018984 <__sinit+0xc>
 8018998:	f7ff ffc4 	bl	8018924 <global_stdio_init.part.0>
 801899c:	e7f2      	b.n	8018984 <__sinit+0xc>
 801899e:	bf00      	nop
 80189a0:	080188e5 	.word	0x080188e5
 80189a4:	20002194 	.word	0x20002194

080189a8 <_fwalk_sglue>:
 80189a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189ac:	4607      	mov	r7, r0
 80189ae:	4688      	mov	r8, r1
 80189b0:	4614      	mov	r4, r2
 80189b2:	2600      	movs	r6, #0
 80189b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80189b8:	f1b9 0901 	subs.w	r9, r9, #1
 80189bc:	d505      	bpl.n	80189ca <_fwalk_sglue+0x22>
 80189be:	6824      	ldr	r4, [r4, #0]
 80189c0:	2c00      	cmp	r4, #0
 80189c2:	d1f7      	bne.n	80189b4 <_fwalk_sglue+0xc>
 80189c4:	4630      	mov	r0, r6
 80189c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189ca:	89ab      	ldrh	r3, [r5, #12]
 80189cc:	2b01      	cmp	r3, #1
 80189ce:	d907      	bls.n	80189e0 <_fwalk_sglue+0x38>
 80189d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80189d4:	3301      	adds	r3, #1
 80189d6:	d003      	beq.n	80189e0 <_fwalk_sglue+0x38>
 80189d8:	4629      	mov	r1, r5
 80189da:	4638      	mov	r0, r7
 80189dc:	47c0      	blx	r8
 80189de:	4306      	orrs	r6, r0
 80189e0:	3568      	adds	r5, #104	@ 0x68
 80189e2:	e7e9      	b.n	80189b8 <_fwalk_sglue+0x10>

080189e4 <printf>:
 80189e4:	b40f      	push	{r0, r1, r2, r3}
 80189e6:	b507      	push	{r0, r1, r2, lr}
 80189e8:	4906      	ldr	r1, [pc, #24]	@ (8018a04 <printf+0x20>)
 80189ea:	ab04      	add	r3, sp, #16
 80189ec:	6808      	ldr	r0, [r1, #0]
 80189ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80189f2:	6881      	ldr	r1, [r0, #8]
 80189f4:	9301      	str	r3, [sp, #4]
 80189f6:	f003 fb47 	bl	801c088 <_vfprintf_r>
 80189fa:	b003      	add	sp, #12
 80189fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a00:	b004      	add	sp, #16
 8018a02:	4770      	bx	lr
 8018a04:	20000824 	.word	0x20000824

08018a08 <_puts_r>:
 8018a08:	b530      	push	{r4, r5, lr}
 8018a0a:	4605      	mov	r5, r0
 8018a0c:	b089      	sub	sp, #36	@ 0x24
 8018a0e:	4608      	mov	r0, r1
 8018a10:	460c      	mov	r4, r1
 8018a12:	f7e7 fbe7 	bl	80001e4 <strlen>
 8018a16:	4b1e      	ldr	r3, [pc, #120]	@ (8018a90 <_puts_r+0x88>)
 8018a18:	9306      	str	r3, [sp, #24]
 8018a1a:	2301      	movs	r3, #1
 8018a1c:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8018a20:	9307      	str	r3, [sp, #28]
 8018a22:	4418      	add	r0, r3
 8018a24:	ab04      	add	r3, sp, #16
 8018a26:	9301      	str	r3, [sp, #4]
 8018a28:	2302      	movs	r3, #2
 8018a2a:	9302      	str	r3, [sp, #8]
 8018a2c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8018a2e:	68ac      	ldr	r4, [r5, #8]
 8018a30:	9003      	str	r0, [sp, #12]
 8018a32:	b913      	cbnz	r3, 8018a3a <_puts_r+0x32>
 8018a34:	4628      	mov	r0, r5
 8018a36:	f7ff ff9f 	bl	8018978 <__sinit>
 8018a3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018a3c:	07db      	lsls	r3, r3, #31
 8018a3e:	d405      	bmi.n	8018a4c <_puts_r+0x44>
 8018a40:	89a3      	ldrh	r3, [r4, #12]
 8018a42:	0598      	lsls	r0, r3, #22
 8018a44:	d402      	bmi.n	8018a4c <_puts_r+0x44>
 8018a46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018a48:	f000 ff53 	bl	80198f2 <__retarget_lock_acquire_recursive>
 8018a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a50:	0499      	lsls	r1, r3, #18
 8018a52:	d406      	bmi.n	8018a62 <_puts_r+0x5a>
 8018a54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018a58:	81a3      	strh	r3, [r4, #12]
 8018a5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018a5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8018a60:	6663      	str	r3, [r4, #100]	@ 0x64
 8018a62:	4628      	mov	r0, r5
 8018a64:	aa01      	add	r2, sp, #4
 8018a66:	4621      	mov	r1, r4
 8018a68:	f005 fb78 	bl	801e15c <__sfvwrite_r>
 8018a6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018a6e:	2800      	cmp	r0, #0
 8018a70:	bf0c      	ite	eq
 8018a72:	250a      	moveq	r5, #10
 8018a74:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8018a78:	07da      	lsls	r2, r3, #31
 8018a7a:	d405      	bmi.n	8018a88 <_puts_r+0x80>
 8018a7c:	89a3      	ldrh	r3, [r4, #12]
 8018a7e:	059b      	lsls	r3, r3, #22
 8018a80:	d402      	bmi.n	8018a88 <_puts_r+0x80>
 8018a82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018a84:	f000 ff37 	bl	80198f6 <__retarget_lock_release_recursive>
 8018a88:	4628      	mov	r0, r5
 8018a8a:	b009      	add	sp, #36	@ 0x24
 8018a8c:	bd30      	pop	{r4, r5, pc}
 8018a8e:	bf00      	nop
 8018a90:	08021792 	.word	0x08021792

08018a94 <puts>:
 8018a94:	4b02      	ldr	r3, [pc, #8]	@ (8018aa0 <puts+0xc>)
 8018a96:	4601      	mov	r1, r0
 8018a98:	6818      	ldr	r0, [r3, #0]
 8018a9a:	f7ff bfb5 	b.w	8018a08 <_puts_r>
 8018a9e:	bf00      	nop
 8018aa0:	20000824 	.word	0x20000824

08018aa4 <__sread>:
 8018aa4:	b510      	push	{r4, lr}
 8018aa6:	460c      	mov	r4, r1
 8018aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018aac:	f000 fec0 	bl	8019830 <_read_r>
 8018ab0:	2800      	cmp	r0, #0
 8018ab2:	bfab      	itete	ge
 8018ab4:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8018ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8018ab8:	181b      	addge	r3, r3, r0
 8018aba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018abe:	bfac      	ite	ge
 8018ac0:	6523      	strge	r3, [r4, #80]	@ 0x50
 8018ac2:	81a3      	strhlt	r3, [r4, #12]
 8018ac4:	bd10      	pop	{r4, pc}

08018ac6 <__seofread>:
 8018ac6:	2000      	movs	r0, #0
 8018ac8:	4770      	bx	lr

08018aca <__swrite>:
 8018aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ace:	461f      	mov	r7, r3
 8018ad0:	898b      	ldrh	r3, [r1, #12]
 8018ad2:	05db      	lsls	r3, r3, #23
 8018ad4:	4605      	mov	r5, r0
 8018ad6:	460c      	mov	r4, r1
 8018ad8:	4616      	mov	r6, r2
 8018ada:	d505      	bpl.n	8018ae8 <__swrite+0x1e>
 8018adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ae0:	2302      	movs	r3, #2
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	f000 fe92 	bl	801980c <_lseek_r>
 8018ae8:	89a3      	ldrh	r3, [r4, #12]
 8018aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018aee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018af2:	81a3      	strh	r3, [r4, #12]
 8018af4:	4632      	mov	r2, r6
 8018af6:	463b      	mov	r3, r7
 8018af8:	4628      	mov	r0, r5
 8018afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018afe:	f000 beb9 	b.w	8019874 <_write_r>

08018b02 <__sseek>:
 8018b02:	b510      	push	{r4, lr}
 8018b04:	460c      	mov	r4, r1
 8018b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b0a:	f000 fe7f 	bl	801980c <_lseek_r>
 8018b0e:	1c43      	adds	r3, r0, #1
 8018b10:	89a3      	ldrh	r3, [r4, #12]
 8018b12:	bf15      	itete	ne
 8018b14:	6520      	strne	r0, [r4, #80]	@ 0x50
 8018b16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018b1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018b1e:	81a3      	strheq	r3, [r4, #12]
 8018b20:	bf18      	it	ne
 8018b22:	81a3      	strhne	r3, [r4, #12]
 8018b24:	bd10      	pop	{r4, pc}

08018b26 <__sclose>:
 8018b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b2a:	f000 be5f 	b.w	80197ec <_close_r>
	...

08018b30 <asprintf>:
 8018b30:	b40e      	push	{r1, r2, r3}
 8018b32:	b530      	push	{r4, r5, lr}
 8018b34:	b09c      	sub	sp, #112	@ 0x70
 8018b36:	ab1f      	add	r3, sp, #124	@ 0x7c
 8018b38:	4605      	mov	r5, r0
 8018b3a:	490d      	ldr	r1, [pc, #52]	@ (8018b70 <asprintf+0x40>)
 8018b3c:	480d      	ldr	r0, [pc, #52]	@ (8018b74 <asprintf+0x44>)
 8018b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b42:	6800      	ldr	r0, [r0, #0]
 8018b44:	9301      	str	r3, [sp, #4]
 8018b46:	2400      	movs	r4, #0
 8018b48:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8018b4c:	a902      	add	r1, sp, #8
 8018b4e:	9402      	str	r4, [sp, #8]
 8018b50:	9404      	str	r4, [sp, #16]
 8018b52:	9407      	str	r4, [sp, #28]
 8018b54:	f002 f8b8 	bl	801acc8 <_svfprintf_r>
 8018b58:	2800      	cmp	r0, #0
 8018b5a:	bfa1      	itttt	ge
 8018b5c:	9b02      	ldrge	r3, [sp, #8]
 8018b5e:	701c      	strbge	r4, [r3, #0]
 8018b60:	9b06      	ldrge	r3, [sp, #24]
 8018b62:	602b      	strge	r3, [r5, #0]
 8018b64:	b01c      	add	sp, #112	@ 0x70
 8018b66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018b6a:	b003      	add	sp, #12
 8018b6c:	4770      	bx	lr
 8018b6e:	bf00      	nop
 8018b70:	ffff0288 	.word	0xffff0288
 8018b74:	20000824 	.word	0x20000824

08018b78 <_vasprintf_r>:
 8018b78:	b530      	push	{r4, r5, lr}
 8018b7a:	460d      	mov	r5, r1
 8018b7c:	4909      	ldr	r1, [pc, #36]	@ (8018ba4 <_vasprintf_r+0x2c>)
 8018b7e:	b09b      	sub	sp, #108	@ 0x6c
 8018b80:	2400      	movs	r4, #0
 8018b82:	e9cd 1403 	strd	r1, r4, [sp, #12]
 8018b86:	4669      	mov	r1, sp
 8018b88:	9400      	str	r4, [sp, #0]
 8018b8a:	9402      	str	r4, [sp, #8]
 8018b8c:	9405      	str	r4, [sp, #20]
 8018b8e:	f002 f89b 	bl	801acc8 <_svfprintf_r>
 8018b92:	2800      	cmp	r0, #0
 8018b94:	bfa1      	itttt	ge
 8018b96:	9b00      	ldrge	r3, [sp, #0]
 8018b98:	701c      	strbge	r4, [r3, #0]
 8018b9a:	9b04      	ldrge	r3, [sp, #16]
 8018b9c:	602b      	strge	r3, [r5, #0]
 8018b9e:	b01b      	add	sp, #108	@ 0x6c
 8018ba0:	bd30      	pop	{r4, r5, pc}
 8018ba2:	bf00      	nop
 8018ba4:	ffff0288 	.word	0xffff0288

08018ba8 <vasprintf>:
 8018ba8:	4613      	mov	r3, r2
 8018baa:	460a      	mov	r2, r1
 8018bac:	4601      	mov	r1, r0
 8018bae:	4802      	ldr	r0, [pc, #8]	@ (8018bb8 <vasprintf+0x10>)
 8018bb0:	6800      	ldr	r0, [r0, #0]
 8018bb2:	f7ff bfe1 	b.w	8018b78 <_vasprintf_r>
 8018bb6:	bf00      	nop
 8018bb8:	20000824 	.word	0x20000824

08018bbc <memset>:
 8018bbc:	4402      	add	r2, r0
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	4293      	cmp	r3, r2
 8018bc2:	d100      	bne.n	8018bc6 <memset+0xa>
 8018bc4:	4770      	bx	lr
 8018bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8018bca:	e7f9      	b.n	8018bc0 <memset+0x4>

08018bcc <gmtime>:
 8018bcc:	4b02      	ldr	r3, [pc, #8]	@ (8018bd8 <gmtime+0xc>)
 8018bce:	6819      	ldr	r1, [r3, #0]
 8018bd0:	3170      	adds	r1, #112	@ 0x70
 8018bd2:	f000 b803 	b.w	8018bdc <gmtime_r>
 8018bd6:	bf00      	nop
 8018bd8:	20000824 	.word	0x20000824

08018bdc <gmtime_r>:
 8018bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018be0:	4a4d      	ldr	r2, [pc, #308]	@ (8018d18 <gmtime_r+0x13c>)
 8018be2:	460c      	mov	r4, r1
 8018be4:	2300      	movs	r3, #0
 8018be6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8018bea:	f7e8 f80d 	bl	8000c08 <__aeabi_ldivmod>
 8018bee:	2a00      	cmp	r2, #0
 8018bf0:	bfbc      	itt	lt
 8018bf2:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8018bf6:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8018bfa:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8018bfe:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8018c02:	fbb2 f3f1 	udiv	r3, r2, r1
 8018c06:	fb01 2213 	mls	r2, r1, r3, r2
 8018c0a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8018c0e:	bfac      	ite	ge
 8018c10:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8018c14:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8018c18:	60a3      	str	r3, [r4, #8]
 8018c1a:	fbb2 f3f1 	udiv	r3, r2, r1
 8018c1e:	fb01 2213 	mls	r2, r1, r3, r2
 8018c22:	6063      	str	r3, [r4, #4]
 8018c24:	6022      	str	r2, [r4, #0]
 8018c26:	1cc3      	adds	r3, r0, #3
 8018c28:	2207      	movs	r2, #7
 8018c2a:	fb93 f2f2 	sdiv	r2, r3, r2
 8018c2e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8018c32:	1a9b      	subs	r3, r3, r2
 8018c34:	bf48      	it	mi
 8018c36:	3307      	addmi	r3, #7
 8018c38:	2800      	cmp	r0, #0
 8018c3a:	61a3      	str	r3, [r4, #24]
 8018c3c:	bfb8      	it	lt
 8018c3e:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8018c42:	4936      	ldr	r1, [pc, #216]	@ (8018d1c <gmtime_r+0x140>)
 8018c44:	bfae      	itee	ge
 8018c46:	fb90 f1f1 	sdivge	r1, r0, r1
 8018c4a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 8018c4e:	fb93 f1f1 	sdivlt	r1, r3, r1
 8018c52:	4b33      	ldr	r3, [pc, #204]	@ (8018d20 <gmtime_r+0x144>)
 8018c54:	fb03 0001 	mla	r0, r3, r1, r0
 8018c58:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8018c5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8018c60:	4403      	add	r3, r0
 8018c62:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8018c66:	fbb0 f2fc 	udiv	r2, r0, ip
 8018c6a:	1a9b      	subs	r3, r3, r2
 8018c6c:	f240 176d 	movw	r7, #365	@ 0x16d
 8018c70:	4a2c      	ldr	r2, [pc, #176]	@ (8018d24 <gmtime_r+0x148>)
 8018c72:	fbb0 f2f2 	udiv	r2, r0, r2
 8018c76:	2664      	movs	r6, #100	@ 0x64
 8018c78:	1a9b      	subs	r3, r3, r2
 8018c7a:	fbb3 f2f7 	udiv	r2, r3, r7
 8018c7e:	fbb3 f3fc 	udiv	r3, r3, ip
 8018c82:	fbb2 f5f6 	udiv	r5, r2, r6
 8018c86:	1aeb      	subs	r3, r5, r3
 8018c88:	4403      	add	r3, r0
 8018c8a:	fb07 3312 	mls	r3, r7, r2, r3
 8018c8e:	2099      	movs	r0, #153	@ 0x99
 8018c90:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8018c94:	3702      	adds	r7, #2
 8018c96:	f103 0e01 	add.w	lr, r3, #1
 8018c9a:	fbb7 fcf0 	udiv	ip, r7, r0
 8018c9e:	fb00 f00c 	mul.w	r0, r0, ip
 8018ca2:	3002      	adds	r0, #2
 8018ca4:	f04f 0805 	mov.w	r8, #5
 8018ca8:	fbb0 f0f8 	udiv	r0, r0, r8
 8018cac:	ebae 0000 	sub.w	r0, lr, r0
 8018cb0:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8018cb4:	4577      	cmp	r7, lr
 8018cb6:	bf8c      	ite	hi
 8018cb8:	f06f 0709 	mvnhi.w	r7, #9
 8018cbc:	2702      	movls	r7, #2
 8018cbe:	4467      	add	r7, ip
 8018cc0:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8018cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8018cc8:	2f01      	cmp	r7, #1
 8018cca:	bf98      	it	ls
 8018ccc:	3101      	addls	r1, #1
 8018cce:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8018cd2:	d30c      	bcc.n	8018cee <gmtime_r+0x112>
 8018cd4:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8018cd8:	61e3      	str	r3, [r4, #28]
 8018cda:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8018cde:	2300      	movs	r3, #0
 8018ce0:	60e0      	str	r0, [r4, #12]
 8018ce2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8018ce6:	6223      	str	r3, [r4, #32]
 8018ce8:	4620      	mov	r0, r4
 8018cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cee:	f012 0f03 	tst.w	r2, #3
 8018cf2:	d102      	bne.n	8018cfa <gmtime_r+0x11e>
 8018cf4:	fb06 2515 	mls	r5, r6, r5, r2
 8018cf8:	b95d      	cbnz	r5, 8018d12 <gmtime_r+0x136>
 8018cfa:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8018cfe:	fbb2 f6f5 	udiv	r6, r2, r5
 8018d02:	fb05 2216 	mls	r2, r5, r6, r2
 8018d06:	fab2 f282 	clz	r2, r2
 8018d0a:	0952      	lsrs	r2, r2, #5
 8018d0c:	333b      	adds	r3, #59	@ 0x3b
 8018d0e:	4413      	add	r3, r2
 8018d10:	e7e2      	b.n	8018cd8 <gmtime_r+0xfc>
 8018d12:	2201      	movs	r2, #1
 8018d14:	e7fa      	b.n	8018d0c <gmtime_r+0x130>
 8018d16:	bf00      	nop
 8018d18:	00015180 	.word	0x00015180
 8018d1c:	00023ab1 	.word	0x00023ab1
 8018d20:	fffdc54f 	.word	0xfffdc54f
 8018d24:	00023ab0 	.word	0x00023ab0

08018d28 <validate_structure>:
 8018d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d2a:	6801      	ldr	r1, [r0, #0]
 8018d2c:	293b      	cmp	r1, #59	@ 0x3b
 8018d2e:	4604      	mov	r4, r0
 8018d30:	d911      	bls.n	8018d56 <validate_structure+0x2e>
 8018d32:	223c      	movs	r2, #60	@ 0x3c
 8018d34:	4668      	mov	r0, sp
 8018d36:	f000 fe11 	bl	801995c <div>
 8018d3a:	9a01      	ldr	r2, [sp, #4]
 8018d3c:	6863      	ldr	r3, [r4, #4]
 8018d3e:	9900      	ldr	r1, [sp, #0]
 8018d40:	2a00      	cmp	r2, #0
 8018d42:	440b      	add	r3, r1
 8018d44:	6063      	str	r3, [r4, #4]
 8018d46:	bfbb      	ittet	lt
 8018d48:	323c      	addlt	r2, #60	@ 0x3c
 8018d4a:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 8018d4e:	6022      	strge	r2, [r4, #0]
 8018d50:	6022      	strlt	r2, [r4, #0]
 8018d52:	bfb8      	it	lt
 8018d54:	6063      	strlt	r3, [r4, #4]
 8018d56:	6861      	ldr	r1, [r4, #4]
 8018d58:	293b      	cmp	r1, #59	@ 0x3b
 8018d5a:	d911      	bls.n	8018d80 <validate_structure+0x58>
 8018d5c:	223c      	movs	r2, #60	@ 0x3c
 8018d5e:	4668      	mov	r0, sp
 8018d60:	f000 fdfc 	bl	801995c <div>
 8018d64:	9a01      	ldr	r2, [sp, #4]
 8018d66:	68a3      	ldr	r3, [r4, #8]
 8018d68:	9900      	ldr	r1, [sp, #0]
 8018d6a:	2a00      	cmp	r2, #0
 8018d6c:	440b      	add	r3, r1
 8018d6e:	60a3      	str	r3, [r4, #8]
 8018d70:	bfbb      	ittet	lt
 8018d72:	323c      	addlt	r2, #60	@ 0x3c
 8018d74:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 8018d78:	6062      	strge	r2, [r4, #4]
 8018d7a:	6062      	strlt	r2, [r4, #4]
 8018d7c:	bfb8      	it	lt
 8018d7e:	60a3      	strlt	r3, [r4, #8]
 8018d80:	68a1      	ldr	r1, [r4, #8]
 8018d82:	2917      	cmp	r1, #23
 8018d84:	d911      	bls.n	8018daa <validate_structure+0x82>
 8018d86:	2218      	movs	r2, #24
 8018d88:	4668      	mov	r0, sp
 8018d8a:	f000 fde7 	bl	801995c <div>
 8018d8e:	9a01      	ldr	r2, [sp, #4]
 8018d90:	68e3      	ldr	r3, [r4, #12]
 8018d92:	9900      	ldr	r1, [sp, #0]
 8018d94:	2a00      	cmp	r2, #0
 8018d96:	440b      	add	r3, r1
 8018d98:	60e3      	str	r3, [r4, #12]
 8018d9a:	bfbb      	ittet	lt
 8018d9c:	3218      	addlt	r2, #24
 8018d9e:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 8018da2:	60a2      	strge	r2, [r4, #8]
 8018da4:	60a2      	strlt	r2, [r4, #8]
 8018da6:	bfb8      	it	lt
 8018da8:	60e3      	strlt	r3, [r4, #12]
 8018daa:	6921      	ldr	r1, [r4, #16]
 8018dac:	290b      	cmp	r1, #11
 8018dae:	d911      	bls.n	8018dd4 <validate_structure+0xac>
 8018db0:	220c      	movs	r2, #12
 8018db2:	4668      	mov	r0, sp
 8018db4:	f000 fdd2 	bl	801995c <div>
 8018db8:	9a01      	ldr	r2, [sp, #4]
 8018dba:	6963      	ldr	r3, [r4, #20]
 8018dbc:	9900      	ldr	r1, [sp, #0]
 8018dbe:	2a00      	cmp	r2, #0
 8018dc0:	440b      	add	r3, r1
 8018dc2:	6163      	str	r3, [r4, #20]
 8018dc4:	bfbb      	ittet	lt
 8018dc6:	320c      	addlt	r2, #12
 8018dc8:	f103 33ff 	addlt.w	r3, r3, #4294967295	@ 0xffffffff
 8018dcc:	6122      	strge	r2, [r4, #16]
 8018dce:	6122      	strlt	r2, [r4, #16]
 8018dd0:	bfb8      	it	lt
 8018dd2:	6163      	strlt	r3, [r4, #20]
 8018dd4:	6963      	ldr	r3, [r4, #20]
 8018dd6:	079a      	lsls	r2, r3, #30
 8018dd8:	d11c      	bne.n	8018e14 <validate_structure+0xec>
 8018dda:	2164      	movs	r1, #100	@ 0x64
 8018ddc:	fb93 f2f1 	sdiv	r2, r3, r1
 8018de0:	fb01 3212 	mls	r2, r1, r2, r3
 8018de4:	b9c2      	cbnz	r2, 8018e18 <validate_structure+0xf0>
 8018de6:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8018dea:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8018dee:	fb93 f1f2 	sdiv	r1, r3, r2
 8018df2:	fb02 3311 	mls	r3, r2, r1, r3
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	bf14      	ite	ne
 8018dfa:	231c      	movne	r3, #28
 8018dfc:	231d      	moveq	r3, #29
 8018dfe:	68e2      	ldr	r2, [r4, #12]
 8018e00:	2a00      	cmp	r2, #0
 8018e02:	dc0b      	bgt.n	8018e1c <validate_structure+0xf4>
 8018e04:	4d31      	ldr	r5, [pc, #196]	@ (8018ecc <validate_structure+0x1a4>)
 8018e06:	200b      	movs	r0, #11
 8018e08:	2164      	movs	r1, #100	@ 0x64
 8018e0a:	68e6      	ldr	r6, [r4, #12]
 8018e0c:	2e00      	cmp	r6, #0
 8018e0e:	dd30      	ble.n	8018e72 <validate_structure+0x14a>
 8018e10:	b003      	add	sp, #12
 8018e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e14:	231c      	movs	r3, #28
 8018e16:	e7f2      	b.n	8018dfe <validate_structure+0xd6>
 8018e18:	231d      	movs	r3, #29
 8018e1a:	e7f0      	b.n	8018dfe <validate_structure+0xd6>
 8018e1c:	4d2b      	ldr	r5, [pc, #172]	@ (8018ecc <validate_structure+0x1a4>)
 8018e1e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8018e22:	2a01      	cmp	r2, #1
 8018e24:	bf14      	ite	ne
 8018e26:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8018e2a:	4618      	moveq	r0, r3
 8018e2c:	4281      	cmp	r1, r0
 8018e2e:	ddef      	ble.n	8018e10 <validate_structure+0xe8>
 8018e30:	3201      	adds	r2, #1
 8018e32:	1a09      	subs	r1, r1, r0
 8018e34:	2a0c      	cmp	r2, #12
 8018e36:	60e1      	str	r1, [r4, #12]
 8018e38:	6122      	str	r2, [r4, #16]
 8018e3a:	d1f0      	bne.n	8018e1e <validate_structure+0xf6>
 8018e3c:	6963      	ldr	r3, [r4, #20]
 8018e3e:	2100      	movs	r1, #0
 8018e40:	1c5a      	adds	r2, r3, #1
 8018e42:	6121      	str	r1, [r4, #16]
 8018e44:	0791      	lsls	r1, r2, #30
 8018e46:	6162      	str	r2, [r4, #20]
 8018e48:	d13c      	bne.n	8018ec4 <validate_structure+0x19c>
 8018e4a:	2164      	movs	r1, #100	@ 0x64
 8018e4c:	fb92 f0f1 	sdiv	r0, r2, r1
 8018e50:	fb01 2210 	mls	r2, r1, r0, r2
 8018e54:	2a00      	cmp	r2, #0
 8018e56:	d137      	bne.n	8018ec8 <validate_structure+0x1a0>
 8018e58:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8018e5c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8018e60:	fb93 f1f2 	sdiv	r1, r3, r2
 8018e64:	fb02 3311 	mls	r3, r2, r1, r3
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	bf14      	ite	ne
 8018e6c:	231c      	movne	r3, #28
 8018e6e:	231d      	moveq	r3, #29
 8018e70:	e7d5      	b.n	8018e1e <validate_structure+0xf6>
 8018e72:	6922      	ldr	r2, [r4, #16]
 8018e74:	3a01      	subs	r2, #1
 8018e76:	6122      	str	r2, [r4, #16]
 8018e78:	3201      	adds	r2, #1
 8018e7a:	d116      	bne.n	8018eaa <validate_structure+0x182>
 8018e7c:	6963      	ldr	r3, [r4, #20]
 8018e7e:	1e5a      	subs	r2, r3, #1
 8018e80:	0797      	lsls	r7, r2, #30
 8018e82:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8018e86:	d119      	bne.n	8018ebc <validate_structure+0x194>
 8018e88:	fb92 f7f1 	sdiv	r7, r2, r1
 8018e8c:	fb01 2217 	mls	r2, r1, r7, r2
 8018e90:	b9b2      	cbnz	r2, 8018ec0 <validate_structure+0x198>
 8018e92:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8018e96:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8018e9a:	fb93 f7f2 	sdiv	r7, r3, r2
 8018e9e:	fb02 3317 	mls	r3, r2, r7, r3
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	bf14      	ite	ne
 8018ea6:	231c      	movne	r3, #28
 8018ea8:	231d      	moveq	r3, #29
 8018eaa:	6922      	ldr	r2, [r4, #16]
 8018eac:	2a01      	cmp	r2, #1
 8018eae:	bf14      	ite	ne
 8018eb0:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8018eb4:	461a      	moveq	r2, r3
 8018eb6:	4432      	add	r2, r6
 8018eb8:	60e2      	str	r2, [r4, #12]
 8018eba:	e7a6      	b.n	8018e0a <validate_structure+0xe2>
 8018ebc:	231c      	movs	r3, #28
 8018ebe:	e7f4      	b.n	8018eaa <validate_structure+0x182>
 8018ec0:	231d      	movs	r3, #29
 8018ec2:	e7f2      	b.n	8018eaa <validate_structure+0x182>
 8018ec4:	231c      	movs	r3, #28
 8018ec6:	e7aa      	b.n	8018e1e <validate_structure+0xf6>
 8018ec8:	231d      	movs	r3, #29
 8018eca:	e7a8      	b.n	8018e1e <validate_structure+0xf6>
 8018ecc:	080212e4 	.word	0x080212e4

08018ed0 <mktime>:
 8018ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ed4:	b085      	sub	sp, #20
 8018ed6:	4607      	mov	r7, r0
 8018ed8:	f005 fc00 	bl	801e6dc <__gettzinfo>
 8018edc:	4681      	mov	r9, r0
 8018ede:	4638      	mov	r0, r7
 8018ee0:	f7ff ff22 	bl	8018d28 <validate_structure>
 8018ee4:	e9d7 4300 	ldrd	r4, r3, [r7]
 8018ee8:	223c      	movs	r2, #60	@ 0x3c
 8018eea:	fb02 4403 	mla	r4, r2, r3, r4
 8018eee:	68bb      	ldr	r3, [r7, #8]
 8018ef0:	697d      	ldr	r5, [r7, #20]
 8018ef2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8018ef6:	fb02 4403 	mla	r4, r2, r3, r4
 8018efa:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8018efe:	4ac1      	ldr	r2, [pc, #772]	@ (8019204 <mktime+0x334>)
 8018f00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018f04:	3e01      	subs	r6, #1
 8018f06:	2b01      	cmp	r3, #1
 8018f08:	4416      	add	r6, r2
 8018f0a:	dd11      	ble.n	8018f30 <mktime+0x60>
 8018f0c:	07a9      	lsls	r1, r5, #30
 8018f0e:	d10f      	bne.n	8018f30 <mktime+0x60>
 8018f10:	2264      	movs	r2, #100	@ 0x64
 8018f12:	fb95 f3f2 	sdiv	r3, r5, r2
 8018f16:	fb02 5313 	mls	r3, r2, r3, r5
 8018f1a:	b943      	cbnz	r3, 8018f2e <mktime+0x5e>
 8018f1c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8018f20:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8018f24:	fb93 f1f2 	sdiv	r1, r3, r2
 8018f28:	fb02 3311 	mls	r3, r2, r1, r3
 8018f2c:	b903      	cbnz	r3, 8018f30 <mktime+0x60>
 8018f2e:	3601      	adds	r6, #1
 8018f30:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8018f34:	3310      	adds	r3, #16
 8018f36:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8018f3a:	4293      	cmp	r3, r2
 8018f3c:	61fe      	str	r6, [r7, #28]
 8018f3e:	f200 8167 	bhi.w	8019210 <mktime+0x340>
 8018f42:	2d46      	cmp	r5, #70	@ 0x46
 8018f44:	f340 808e 	ble.w	8019064 <mktime+0x194>
 8018f48:	2346      	movs	r3, #70	@ 0x46
 8018f4a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8018f4e:	2164      	movs	r1, #100	@ 0x64
 8018f50:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8018f54:	079a      	lsls	r2, r3, #30
 8018f56:	d17f      	bne.n	8019058 <mktime+0x188>
 8018f58:	fb93 f2f1 	sdiv	r2, r3, r1
 8018f5c:	fb01 3212 	mls	r2, r1, r2, r3
 8018f60:	2a00      	cmp	r2, #0
 8018f62:	d17c      	bne.n	801905e <mktime+0x18e>
 8018f64:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8018f68:	fb92 fef0 	sdiv	lr, r2, r0
 8018f6c:	fb00 221e 	mls	r2, r0, lr, r2
 8018f70:	2a00      	cmp	r2, #0
 8018f72:	bf14      	ite	ne
 8018f74:	4662      	movne	r2, ip
 8018f76:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8018f7a:	3301      	adds	r3, #1
 8018f7c:	429d      	cmp	r5, r3
 8018f7e:	4416      	add	r6, r2
 8018f80:	d1e8      	bne.n	8018f54 <mktime+0x84>
 8018f82:	4ba1      	ldr	r3, [pc, #644]	@ (8019208 <mktime+0x338>)
 8018f84:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8018f88:	fbc6 4803 	smlal	r4, r8, r6, r3
 8018f8c:	f000 f9fa 	bl	8019384 <__tz_lock>
 8018f90:	f000 fa04 	bl	801939c <_tzset_unlocked>
 8018f94:	4b9d      	ldr	r3, [pc, #628]	@ (801920c <mktime+0x33c>)
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	f000 8140 	beq.w	801921e <mktime+0x34e>
 8018f9e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8018fa2:	6978      	ldr	r0, [r7, #20]
 8018fa4:	4653      	mov	r3, sl
 8018fa6:	2b01      	cmp	r3, #1
 8018fa8:	bfa8      	it	ge
 8018faa:	2301      	movge	r3, #1
 8018fac:	9301      	str	r3, [sp, #4]
 8018fae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018fb2:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8018fb6:	4283      	cmp	r3, r0
 8018fb8:	f040 8096 	bne.w	80190e8 <mktime+0x218>
 8018fbc:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8018fc0:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8018fc4:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8018fc8:	1a13      	subs	r3, r2, r0
 8018fca:	9303      	str	r3, [sp, #12]
 8018fcc:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8018fd0:	9302      	str	r3, [sp, #8]
 8018fd2:	9a02      	ldr	r2, [sp, #8]
 8018fd4:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8018fd8:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8018fdc:	ebb2 0e03 	subs.w	lr, r2, r3
 8018fe0:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8018fe4:	4574      	cmp	r4, lr
 8018fe6:	eb78 0201 	sbcs.w	r2, r8, r1
 8018fea:	f280 8085 	bge.w	80190f8 <mktime+0x228>
 8018fee:	f8d9 2000 	ldr.w	r2, [r9]
 8018ff2:	2a00      	cmp	r2, #0
 8018ff4:	f000 808d 	beq.w	8019112 <mktime+0x242>
 8018ff8:	9a03      	ldr	r2, [sp, #12]
 8018ffa:	4294      	cmp	r4, r2
 8018ffc:	eb78 020b 	sbcs.w	r2, r8, fp
 8019000:	f2c0 810a 	blt.w	8019218 <mktime+0x348>
 8019004:	4574      	cmp	r4, lr
 8019006:	eb78 0101 	sbcs.w	r1, r8, r1
 801900a:	bfb4      	ite	lt
 801900c:	f04f 0b01 	movlt.w	fp, #1
 8019010:	f04f 0b00 	movge.w	fp, #0
 8019014:	f1ba 0f00 	cmp.w	sl, #0
 8019018:	f280 8087 	bge.w	801912a <mktime+0x25a>
 801901c:	f1bb 0f01 	cmp.w	fp, #1
 8019020:	f040 80ff 	bne.w	8019222 <mktime+0x352>
 8019024:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8019028:	191c      	adds	r4, r3, r4
 801902a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801902e:	f04f 0b01 	mov.w	fp, #1
 8019032:	f000 f9ad 	bl	8019390 <__tz_unlock>
 8019036:	3604      	adds	r6, #4
 8019038:	2307      	movs	r3, #7
 801903a:	fb96 f3f3 	sdiv	r3, r6, r3
 801903e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8019042:	1af6      	subs	r6, r6, r3
 8019044:	f100 80db 	bmi.w	80191fe <mktime+0x32e>
 8019048:	f8c7 b020 	str.w	fp, [r7, #32]
 801904c:	61be      	str	r6, [r7, #24]
 801904e:	4620      	mov	r0, r4
 8019050:	4641      	mov	r1, r8
 8019052:	b005      	add	sp, #20
 8019054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019058:	f240 126d 	movw	r2, #365	@ 0x16d
 801905c:	e78d      	b.n	8018f7a <mktime+0xaa>
 801905e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8019062:	e78a      	b.n	8018f7a <mktime+0xaa>
 8019064:	d08d      	beq.n	8018f82 <mktime+0xb2>
 8019066:	2345      	movs	r3, #69	@ 0x45
 8019068:	f240 1c6d 	movw	ip, #365	@ 0x16d
 801906c:	2164      	movs	r1, #100	@ 0x64
 801906e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8019072:	e012      	b.n	801909a <mktime+0x1ca>
 8019074:	bb62      	cbnz	r2, 80190d0 <mktime+0x200>
 8019076:	fb93 f2f1 	sdiv	r2, r3, r1
 801907a:	fb01 3212 	mls	r2, r1, r2, r3
 801907e:	bb52      	cbnz	r2, 80190d6 <mktime+0x206>
 8019080:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8019084:	fb92 fef0 	sdiv	lr, r2, r0
 8019088:	fb00 221e 	mls	r2, r0, lr, r2
 801908c:	2a00      	cmp	r2, #0
 801908e:	bf14      	ite	ne
 8019090:	4662      	movne	r2, ip
 8019092:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8019096:	1ab6      	subs	r6, r6, r2
 8019098:	3b01      	subs	r3, #1
 801909a:	429d      	cmp	r5, r3
 801909c:	f003 0203 	and.w	r2, r3, #3
 80190a0:	dbe8      	blt.n	8019074 <mktime+0x1a4>
 80190a2:	b9da      	cbnz	r2, 80190dc <mktime+0x20c>
 80190a4:	2264      	movs	r2, #100	@ 0x64
 80190a6:	fb95 f3f2 	sdiv	r3, r5, r2
 80190aa:	fb02 5313 	mls	r3, r2, r3, r5
 80190ae:	b9c3      	cbnz	r3, 80190e2 <mktime+0x212>
 80190b0:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80190b4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80190b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80190bc:	fb02 3311 	mls	r3, r2, r1, r3
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	f240 136d 	movw	r3, #365	@ 0x16d
 80190c6:	bf08      	it	eq
 80190c8:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 80190cc:	1af6      	subs	r6, r6, r3
 80190ce:	e758      	b.n	8018f82 <mktime+0xb2>
 80190d0:	f240 126d 	movw	r2, #365	@ 0x16d
 80190d4:	e7df      	b.n	8019096 <mktime+0x1c6>
 80190d6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80190da:	e7dc      	b.n	8019096 <mktime+0x1c6>
 80190dc:	f240 136d 	movw	r3, #365	@ 0x16d
 80190e0:	e7f4      	b.n	80190cc <mktime+0x1fc>
 80190e2:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80190e6:	e7f1      	b.n	80190cc <mktime+0x1fc>
 80190e8:	f000 f8a2 	bl	8019230 <__tzcalc_limits>
 80190ec:	2800      	cmp	r0, #0
 80190ee:	f47f af65 	bne.w	8018fbc <mktime+0xec>
 80190f2:	f8dd b004 	ldr.w	fp, [sp, #4]
 80190f6:	e791      	b.n	801901c <mktime+0x14c>
 80190f8:	9a02      	ldr	r2, [sp, #8]
 80190fa:	1a12      	subs	r2, r2, r0
 80190fc:	9202      	str	r2, [sp, #8]
 80190fe:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8019102:	eb6c 0c02 	sbc.w	ip, ip, r2
 8019106:	9a02      	ldr	r2, [sp, #8]
 8019108:	4294      	cmp	r4, r2
 801910a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 801910e:	dbf0      	blt.n	80190f2 <mktime+0x222>
 8019110:	e76d      	b.n	8018fee <mktime+0x11e>
 8019112:	9a03      	ldr	r2, [sp, #12]
 8019114:	4294      	cmp	r4, r2
 8019116:	eb78 020b 	sbcs.w	r2, r8, fp
 801911a:	f6ff af73 	blt.w	8019004 <mktime+0x134>
 801911e:	f1ba 0f00 	cmp.w	sl, #0
 8019122:	f6ff af7f 	blt.w	8019024 <mktime+0x154>
 8019126:	f04f 0b01 	mov.w	fp, #1
 801912a:	9a01      	ldr	r2, [sp, #4]
 801912c:	ea82 020b 	eor.w	r2, r2, fp
 8019130:	2a01      	cmp	r2, #1
 8019132:	f47f af73 	bne.w	801901c <mktime+0x14c>
 8019136:	f1bb 0f00 	cmp.w	fp, #0
 801913a:	d035      	beq.n	80191a8 <mktime+0x2d8>
 801913c:	1a1b      	subs	r3, r3, r0
 801913e:	683a      	ldr	r2, [r7, #0]
 8019140:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8019144:	441a      	add	r2, r3
 8019146:	191c      	adds	r4, r3, r4
 8019148:	603a      	str	r2, [r7, #0]
 801914a:	4638      	mov	r0, r7
 801914c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8019150:	f7ff fdea 	bl	8018d28 <validate_structure>
 8019154:	68fa      	ldr	r2, [r7, #12]
 8019156:	ebb2 020a 	subs.w	r2, r2, sl
 801915a:	f43f af5f 	beq.w	801901c <mktime+0x14c>
 801915e:	2a01      	cmp	r2, #1
 8019160:	dc24      	bgt.n	80191ac <mktime+0x2dc>
 8019162:	1c93      	adds	r3, r2, #2
 8019164:	bfd8      	it	le
 8019166:	2201      	movle	r2, #1
 8019168:	69fb      	ldr	r3, [r7, #28]
 801916a:	18d3      	adds	r3, r2, r3
 801916c:	d527      	bpl.n	80191be <mktime+0x2ee>
 801916e:	1e6b      	subs	r3, r5, #1
 8019170:	0798      	lsls	r0, r3, #30
 8019172:	d11e      	bne.n	80191b2 <mktime+0x2e2>
 8019174:	2164      	movs	r1, #100	@ 0x64
 8019176:	fb93 f0f1 	sdiv	r0, r3, r1
 801917a:	fb01 3310 	mls	r3, r1, r0, r3
 801917e:	b9db      	cbnz	r3, 80191b8 <mktime+0x2e8>
 8019180:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8019184:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8019188:	fb95 f1f3 	sdiv	r1, r5, r3
 801918c:	fb03 5511 	mls	r5, r3, r1, r5
 8019190:	2d00      	cmp	r5, #0
 8019192:	f240 136d 	movw	r3, #365	@ 0x16d
 8019196:	bf18      	it	ne
 8019198:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 801919c:	61fb      	str	r3, [r7, #28]
 801919e:	4416      	add	r6, r2
 80191a0:	e73c      	b.n	801901c <mktime+0x14c>
 80191a2:	f04f 0b00 	mov.w	fp, #0
 80191a6:	e7c0      	b.n	801912a <mktime+0x25a>
 80191a8:	1ac3      	subs	r3, r0, r3
 80191aa:	e7c8      	b.n	801913e <mktime+0x26e>
 80191ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80191b0:	e7da      	b.n	8019168 <mktime+0x298>
 80191b2:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80191b6:	e7f1      	b.n	801919c <mktime+0x2cc>
 80191b8:	f240 136d 	movw	r3, #365	@ 0x16d
 80191bc:	e7ee      	b.n	801919c <mktime+0x2cc>
 80191be:	07a9      	lsls	r1, r5, #30
 80191c0:	d117      	bne.n	80191f2 <mktime+0x322>
 80191c2:	2064      	movs	r0, #100	@ 0x64
 80191c4:	fb95 f1f0 	sdiv	r1, r5, r0
 80191c8:	fb00 5111 	mls	r1, r0, r1, r5
 80191cc:	b9a1      	cbnz	r1, 80191f8 <mktime+0x328>
 80191ce:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80191d2:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 80191d6:	fb95 f0f1 	sdiv	r0, r5, r1
 80191da:	fb01 5510 	mls	r5, r1, r0, r5
 80191de:	2d00      	cmp	r5, #0
 80191e0:	f240 116d 	movw	r1, #365	@ 0x16d
 80191e4:	bf08      	it	eq
 80191e6:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 80191ea:	428b      	cmp	r3, r1
 80191ec:	bfa8      	it	ge
 80191ee:	1a5b      	subge	r3, r3, r1
 80191f0:	e7d4      	b.n	801919c <mktime+0x2cc>
 80191f2:	f240 116d 	movw	r1, #365	@ 0x16d
 80191f6:	e7f8      	b.n	80191ea <mktime+0x31a>
 80191f8:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 80191fc:	e7f5      	b.n	80191ea <mktime+0x31a>
 80191fe:	3607      	adds	r6, #7
 8019200:	e722      	b.n	8019048 <mktime+0x178>
 8019202:	bf00      	nop
 8019204:	080212b4 	.word	0x080212b4
 8019208:	00015180 	.word	0x00015180
 801920c:	200021b8 	.word	0x200021b8
 8019210:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8019214:	46a0      	mov	r8, r4
 8019216:	e71a      	b.n	801904e <mktime+0x17e>
 8019218:	f1ba 0f00 	cmp.w	sl, #0
 801921c:	dac1      	bge.n	80191a2 <mktime+0x2d2>
 801921e:	f04f 0b00 	mov.w	fp, #0
 8019222:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8019226:	191c      	adds	r4, r3, r4
 8019228:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801922c:	e701      	b.n	8019032 <mktime+0x162>
 801922e:	bf00      	nop

08019230 <__tzcalc_limits>:
 8019230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019234:	4604      	mov	r4, r0
 8019236:	f005 fa51 	bl	801e6dc <__gettzinfo>
 801923a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 801923e:	429c      	cmp	r4, r3
 8019240:	f340 8099 	ble.w	8019376 <__tzcalc_limits+0x146>
 8019244:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8019248:	19e5      	adds	r5, r4, r7
 801924a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 801924e:	f240 126d 	movw	r2, #365	@ 0x16d
 8019252:	10ad      	asrs	r5, r5, #2
 8019254:	fb02 5503 	mla	r5, r2, r3, r5
 8019258:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 801925c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8019260:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8019264:	4f45      	ldr	r7, [pc, #276]	@ (801937c <__tzcalc_limits+0x14c>)
 8019266:	fb93 f3f2 	sdiv	r3, r3, r2
 801926a:	441d      	add	r5, r3
 801926c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8019270:	eb04 030c 	add.w	r3, r4, ip
 8019274:	6044      	str	r4, [r0, #4]
 8019276:	fbb3 f3f2 	udiv	r3, r3, r2
 801927a:	4601      	mov	r1, r0
 801927c:	441d      	add	r5, r3
 801927e:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8019282:	7a0b      	ldrb	r3, [r1, #8]
 8019284:	694a      	ldr	r2, [r1, #20]
 8019286:	2b4a      	cmp	r3, #74	@ 0x4a
 8019288:	d133      	bne.n	80192f2 <__tzcalc_limits+0xc2>
 801928a:	07a6      	lsls	r6, r4, #30
 801928c:	eb05 0302 	add.w	r3, r5, r2
 8019290:	d106      	bne.n	80192a0 <__tzcalc_limits+0x70>
 8019292:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8019296:	fb94 f6fe 	sdiv	r6, r4, lr
 801929a:	fb0e 4616 	mls	r6, lr, r6, r4
 801929e:	b936      	cbnz	r6, 80192ae <__tzcalc_limits+0x7e>
 80192a0:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 80192a4:	fb94 f6fe 	sdiv	r6, r4, lr
 80192a8:	fb0e 4616 	mls	r6, lr, r6, r4
 80192ac:	b9fe      	cbnz	r6, 80192ee <__tzcalc_limits+0xbe>
 80192ae:	2a3b      	cmp	r2, #59	@ 0x3b
 80192b0:	bfd4      	ite	le
 80192b2:	2200      	movle	r2, #0
 80192b4:	2201      	movgt	r2, #1
 80192b6:	4413      	add	r3, r2
 80192b8:	3b01      	subs	r3, #1
 80192ba:	698a      	ldr	r2, [r1, #24]
 80192bc:	17d6      	asrs	r6, r2, #31
 80192be:	fbc3 2607 	smlal	r2, r6, r3, r7
 80192c2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80192c4:	18d2      	adds	r2, r2, r3
 80192c6:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 80192ca:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80192ce:	3128      	adds	r1, #40	@ 0x28
 80192d0:	458c      	cmp	ip, r1
 80192d2:	d1d6      	bne.n	8019282 <__tzcalc_limits+0x52>
 80192d4:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80192d8:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 80192dc:	428c      	cmp	r4, r1
 80192de:	4193      	sbcs	r3, r2
 80192e0:	bfb4      	ite	lt
 80192e2:	2301      	movlt	r3, #1
 80192e4:	2300      	movge	r3, #0
 80192e6:	6003      	str	r3, [r0, #0]
 80192e8:	2001      	movs	r0, #1
 80192ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192ee:	2200      	movs	r2, #0
 80192f0:	e7e1      	b.n	80192b6 <__tzcalc_limits+0x86>
 80192f2:	2b44      	cmp	r3, #68	@ 0x44
 80192f4:	d101      	bne.n	80192fa <__tzcalc_limits+0xca>
 80192f6:	18ab      	adds	r3, r5, r2
 80192f8:	e7df      	b.n	80192ba <__tzcalc_limits+0x8a>
 80192fa:	07a3      	lsls	r3, r4, #30
 80192fc:	d105      	bne.n	801930a <__tzcalc_limits+0xda>
 80192fe:	2664      	movs	r6, #100	@ 0x64
 8019300:	fb94 f3f6 	sdiv	r3, r4, r6
 8019304:	fb06 4313 	mls	r3, r6, r3, r4
 8019308:	bb7b      	cbnz	r3, 801936a <__tzcalc_limits+0x13a>
 801930a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801930e:	fb94 f6f3 	sdiv	r6, r4, r3
 8019312:	fb03 4616 	mls	r6, r3, r6, r4
 8019316:	fab6 f686 	clz	r6, r6
 801931a:	0976      	lsrs	r6, r6, #5
 801931c:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8019380 <__tzcalc_limits+0x150>
 8019320:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8019324:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8019328:	462b      	mov	r3, r5
 801932a:	f04f 0800 	mov.w	r8, #0
 801932e:	fb0a e606 	mla	r6, sl, r6, lr
 8019332:	f108 0801 	add.w	r8, r8, #1
 8019336:	45c1      	cmp	r9, r8
 8019338:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 801933c:	dc17      	bgt.n	801936e <__tzcalc_limits+0x13e>
 801933e:	f103 0804 	add.w	r8, r3, #4
 8019342:	2607      	movs	r6, #7
 8019344:	fb98 f6f6 	sdiv	r6, r8, r6
 8019348:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 801934c:	eba8 0606 	sub.w	r6, r8, r6
 8019350:	1b92      	subs	r2, r2, r6
 8019352:	690e      	ldr	r6, [r1, #16]
 8019354:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 8019358:	bf48      	it	mi
 801935a:	3207      	addmi	r2, #7
 801935c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8019360:	4432      	add	r2, r6
 8019362:	4572      	cmp	r2, lr
 8019364:	da05      	bge.n	8019372 <__tzcalc_limits+0x142>
 8019366:	4413      	add	r3, r2
 8019368:	e7a7      	b.n	80192ba <__tzcalc_limits+0x8a>
 801936a:	2601      	movs	r6, #1
 801936c:	e7d6      	b.n	801931c <__tzcalc_limits+0xec>
 801936e:	4473      	add	r3, lr
 8019370:	e7df      	b.n	8019332 <__tzcalc_limits+0x102>
 8019372:	3a07      	subs	r2, #7
 8019374:	e7f5      	b.n	8019362 <__tzcalc_limits+0x132>
 8019376:	2000      	movs	r0, #0
 8019378:	e7b7      	b.n	80192ea <__tzcalc_limits+0xba>
 801937a:	bf00      	nop
 801937c:	00015180 	.word	0x00015180
 8019380:	08021518 	.word	0x08021518

08019384 <__tz_lock>:
 8019384:	4801      	ldr	r0, [pc, #4]	@ (801938c <__tz_lock+0x8>)
 8019386:	f000 bab3 	b.w	80198f0 <__retarget_lock_acquire>
 801938a:	bf00      	nop
 801938c:	200021c0 	.word	0x200021c0

08019390 <__tz_unlock>:
 8019390:	4801      	ldr	r0, [pc, #4]	@ (8019398 <__tz_unlock+0x8>)
 8019392:	f000 baaf 	b.w	80198f4 <__retarget_lock_release>
 8019396:	bf00      	nop
 8019398:	200021c0 	.word	0x200021c0

0801939c <_tzset_unlocked>:
 801939c:	4b01      	ldr	r3, [pc, #4]	@ (80193a4 <_tzset_unlocked+0x8>)
 801939e:	6818      	ldr	r0, [r3, #0]
 80193a0:	f000 b802 	b.w	80193a8 <_tzset_unlocked_r>
 80193a4:	20000824 	.word	0x20000824

080193a8 <_tzset_unlocked_r>:
 80193a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193ac:	b08d      	sub	sp, #52	@ 0x34
 80193ae:	4607      	mov	r7, r0
 80193b0:	f005 f994 	bl	801e6dc <__gettzinfo>
 80193b4:	49bc      	ldr	r1, [pc, #752]	@ (80196a8 <_tzset_unlocked_r+0x300>)
 80193b6:	4dbd      	ldr	r5, [pc, #756]	@ (80196ac <_tzset_unlocked_r+0x304>)
 80193b8:	4604      	mov	r4, r0
 80193ba:	4638      	mov	r0, r7
 80193bc:	f000 fc28 	bl	8019c10 <_getenv_r>
 80193c0:	4606      	mov	r6, r0
 80193c2:	bb10      	cbnz	r0, 801940a <_tzset_unlocked_r+0x62>
 80193c4:	4bba      	ldr	r3, [pc, #744]	@ (80196b0 <_tzset_unlocked_r+0x308>)
 80193c6:	4abb      	ldr	r2, [pc, #748]	@ (80196b4 <_tzset_unlocked_r+0x30c>)
 80193c8:	6018      	str	r0, [r3, #0]
 80193ca:	4bbb      	ldr	r3, [pc, #748]	@ (80196b8 <_tzset_unlocked_r+0x310>)
 80193cc:	62a0      	str	r0, [r4, #40]	@ 0x28
 80193ce:	6018      	str	r0, [r3, #0]
 80193d0:	4bba      	ldr	r3, [pc, #744]	@ (80196bc <_tzset_unlocked_r+0x314>)
 80193d2:	6520      	str	r0, [r4, #80]	@ 0x50
 80193d4:	e9c3 2200 	strd	r2, r2, [r3]
 80193d8:	214a      	movs	r1, #74	@ 0x4a
 80193da:	2200      	movs	r2, #0
 80193dc:	2300      	movs	r3, #0
 80193de:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80193e2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80193e6:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 80193ea:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80193ee:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80193f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80193f6:	6828      	ldr	r0, [r5, #0]
 80193f8:	7221      	strb	r1, [r4, #8]
 80193fa:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80193fe:	f7fe ffe1 	bl	80183c4 <free>
 8019402:	602e      	str	r6, [r5, #0]
 8019404:	b00d      	add	sp, #52	@ 0x34
 8019406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801940a:	6829      	ldr	r1, [r5, #0]
 801940c:	2900      	cmp	r1, #0
 801940e:	f040 808e 	bne.w	801952e <_tzset_unlocked_r+0x186>
 8019412:	6828      	ldr	r0, [r5, #0]
 8019414:	f7fe ffd6 	bl	80183c4 <free>
 8019418:	4630      	mov	r0, r6
 801941a:	f7e6 fee3 	bl	80001e4 <strlen>
 801941e:	1c41      	adds	r1, r0, #1
 8019420:	4638      	mov	r0, r7
 8019422:	f7fe ffd7 	bl	80183d4 <_malloc_r>
 8019426:	6028      	str	r0, [r5, #0]
 8019428:	2800      	cmp	r0, #0
 801942a:	f040 8086 	bne.w	801953a <_tzset_unlocked_r+0x192>
 801942e:	4aa2      	ldr	r2, [pc, #648]	@ (80196b8 <_tzset_unlocked_r+0x310>)
 8019430:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 80196bc <_tzset_unlocked_r+0x314>
 8019434:	f8df a278 	ldr.w	sl, [pc, #632]	@ 80196b0 <_tzset_unlocked_r+0x308>
 8019438:	2300      	movs	r3, #0
 801943a:	6013      	str	r3, [r2, #0]
 801943c:	4aa0      	ldr	r2, [pc, #640]	@ (80196c0 <_tzset_unlocked_r+0x318>)
 801943e:	f8ca 3000 	str.w	r3, [sl]
 8019442:	2000      	movs	r0, #0
 8019444:	2100      	movs	r1, #0
 8019446:	e9c8 2200 	strd	r2, r2, [r8]
 801944a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801944e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8019452:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8019456:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 801945a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 801945e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8019462:	224a      	movs	r2, #74	@ 0x4a
 8019464:	7222      	strb	r2, [r4, #8]
 8019466:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019468:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 801946c:	6523      	str	r3, [r4, #80]	@ 0x50
 801946e:	7833      	ldrb	r3, [r6, #0]
 8019470:	2b3a      	cmp	r3, #58	@ 0x3a
 8019472:	bf08      	it	eq
 8019474:	3601      	addeq	r6, #1
 8019476:	7833      	ldrb	r3, [r6, #0]
 8019478:	2b3c      	cmp	r3, #60	@ 0x3c
 801947a:	d162      	bne.n	8019542 <_tzset_unlocked_r+0x19a>
 801947c:	1c75      	adds	r5, r6, #1
 801947e:	4a91      	ldr	r2, [pc, #580]	@ (80196c4 <_tzset_unlocked_r+0x31c>)
 8019480:	4991      	ldr	r1, [pc, #580]	@ (80196c8 <_tzset_unlocked_r+0x320>)
 8019482:	ab0a      	add	r3, sp, #40	@ 0x28
 8019484:	4628      	mov	r0, r5
 8019486:	f000 fc45 	bl	8019d14 <siscanf>
 801948a:	2800      	cmp	r0, #0
 801948c:	ddba      	ble.n	8019404 <_tzset_unlocked_r+0x5c>
 801948e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019490:	1eda      	subs	r2, r3, #3
 8019492:	2a07      	cmp	r2, #7
 8019494:	d8b6      	bhi.n	8019404 <_tzset_unlocked_r+0x5c>
 8019496:	5ceb      	ldrb	r3, [r5, r3]
 8019498:	2b3e      	cmp	r3, #62	@ 0x3e
 801949a:	d1b3      	bne.n	8019404 <_tzset_unlocked_r+0x5c>
 801949c:	3602      	adds	r6, #2
 801949e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80194a0:	18f5      	adds	r5, r6, r3
 80194a2:	5cf3      	ldrb	r3, [r6, r3]
 80194a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80194a6:	d15a      	bne.n	801955e <_tzset_unlocked_r+0x1b6>
 80194a8:	3501      	adds	r5, #1
 80194aa:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 80194ae:	2300      	movs	r3, #0
 80194b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80194b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80194b8:	af08      	add	r7, sp, #32
 80194ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80194bc:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80194c0:	9303      	str	r3, [sp, #12]
 80194c2:	f10d 031e 	add.w	r3, sp, #30
 80194c6:	9300      	str	r3, [sp, #0]
 80194c8:	4980      	ldr	r1, [pc, #512]	@ (80196cc <_tzset_unlocked_r+0x324>)
 80194ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80194cc:	aa07      	add	r2, sp, #28
 80194ce:	4628      	mov	r0, r5
 80194d0:	f000 fc20 	bl	8019d14 <siscanf>
 80194d4:	2800      	cmp	r0, #0
 80194d6:	dd95      	ble.n	8019404 <_tzset_unlocked_r+0x5c>
 80194d8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80194dc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80194e0:	223c      	movs	r2, #60	@ 0x3c
 80194e2:	fb02 6603 	mla	r6, r2, r3, r6
 80194e6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80194ea:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80194ee:	fb02 6603 	mla	r6, r2, r3, r6
 80194f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80194f4:	fb09 f606 	mul.w	r6, r9, r6
 80194f8:	eb05 0903 	add.w	r9, r5, r3
 80194fc:	5ceb      	ldrb	r3, [r5, r3]
 80194fe:	2b3c      	cmp	r3, #60	@ 0x3c
 8019500:	f040 80ee 	bne.w	80196e0 <_tzset_unlocked_r+0x338>
 8019504:	f109 0501 	add.w	r5, r9, #1
 8019508:	4a71      	ldr	r2, [pc, #452]	@ (80196d0 <_tzset_unlocked_r+0x328>)
 801950a:	496f      	ldr	r1, [pc, #444]	@ (80196c8 <_tzset_unlocked_r+0x320>)
 801950c:	ab0a      	add	r3, sp, #40	@ 0x28
 801950e:	4628      	mov	r0, r5
 8019510:	f000 fc00 	bl	8019d14 <siscanf>
 8019514:	2800      	cmp	r0, #0
 8019516:	dc28      	bgt.n	801956a <_tzset_unlocked_r+0x1c2>
 8019518:	f899 3001 	ldrb.w	r3, [r9, #1]
 801951c:	2b3e      	cmp	r3, #62	@ 0x3e
 801951e:	d124      	bne.n	801956a <_tzset_unlocked_r+0x1c2>
 8019520:	4b68      	ldr	r3, [pc, #416]	@ (80196c4 <_tzset_unlocked_r+0x31c>)
 8019522:	62a6      	str	r6, [r4, #40]	@ 0x28
 8019524:	e9c8 3300 	strd	r3, r3, [r8]
 8019528:	f8ca 6000 	str.w	r6, [sl]
 801952c:	e76a      	b.n	8019404 <_tzset_unlocked_r+0x5c>
 801952e:	f7e6 fe4f 	bl	80001d0 <strcmp>
 8019532:	2800      	cmp	r0, #0
 8019534:	f47f af6d 	bne.w	8019412 <_tzset_unlocked_r+0x6a>
 8019538:	e764      	b.n	8019404 <_tzset_unlocked_r+0x5c>
 801953a:	4631      	mov	r1, r6
 801953c:	f000 f9e8 	bl	8019910 <strcpy>
 8019540:	e775      	b.n	801942e <_tzset_unlocked_r+0x86>
 8019542:	4a60      	ldr	r2, [pc, #384]	@ (80196c4 <_tzset_unlocked_r+0x31c>)
 8019544:	4963      	ldr	r1, [pc, #396]	@ (80196d4 <_tzset_unlocked_r+0x32c>)
 8019546:	ab0a      	add	r3, sp, #40	@ 0x28
 8019548:	4630      	mov	r0, r6
 801954a:	f000 fbe3 	bl	8019d14 <siscanf>
 801954e:	2800      	cmp	r0, #0
 8019550:	f77f af58 	ble.w	8019404 <_tzset_unlocked_r+0x5c>
 8019554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019556:	3b03      	subs	r3, #3
 8019558:	2b07      	cmp	r3, #7
 801955a:	d9a0      	bls.n	801949e <_tzset_unlocked_r+0xf6>
 801955c:	e752      	b.n	8019404 <_tzset_unlocked_r+0x5c>
 801955e:	2b2b      	cmp	r3, #43	@ 0x2b
 8019560:	bf08      	it	eq
 8019562:	3501      	addeq	r5, #1
 8019564:	f04f 0901 	mov.w	r9, #1
 8019568:	e7a1      	b.n	80194ae <_tzset_unlocked_r+0x106>
 801956a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801956c:	1eda      	subs	r2, r3, #3
 801956e:	2a07      	cmp	r2, #7
 8019570:	f63f af48 	bhi.w	8019404 <_tzset_unlocked_r+0x5c>
 8019574:	5ceb      	ldrb	r3, [r5, r3]
 8019576:	2b3e      	cmp	r3, #62	@ 0x3e
 8019578:	f47f af44 	bne.w	8019404 <_tzset_unlocked_r+0x5c>
 801957c:	f109 0902 	add.w	r9, r9, #2
 8019580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019582:	eb09 0503 	add.w	r5, r9, r3
 8019586:	f819 3003 	ldrb.w	r3, [r9, r3]
 801958a:	2b2d      	cmp	r3, #45	@ 0x2d
 801958c:	f040 80b7 	bne.w	80196fe <_tzset_unlocked_r+0x356>
 8019590:	3501      	adds	r5, #1
 8019592:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8019596:	2300      	movs	r3, #0
 8019598:	f8ad 301c 	strh.w	r3, [sp, #28]
 801959c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80195a0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80195a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80195a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80195a8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80195ac:	9301      	str	r3, [sp, #4]
 80195ae:	f10d 031e 	add.w	r3, sp, #30
 80195b2:	9300      	str	r3, [sp, #0]
 80195b4:	4945      	ldr	r1, [pc, #276]	@ (80196cc <_tzset_unlocked_r+0x324>)
 80195b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80195b8:	aa07      	add	r2, sp, #28
 80195ba:	4628      	mov	r0, r5
 80195bc:	f000 fbaa 	bl	8019d14 <siscanf>
 80195c0:	2800      	cmp	r0, #0
 80195c2:	f300 80a2 	bgt.w	801970a <_tzset_unlocked_r+0x362>
 80195c6:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 80195ca:	9304      	str	r3, [sp, #16]
 80195cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80195ce:	4627      	mov	r7, r4
 80195d0:	441d      	add	r5, r3
 80195d2:	f04f 0b00 	mov.w	fp, #0
 80195d6:	782b      	ldrb	r3, [r5, #0]
 80195d8:	2b2c      	cmp	r3, #44	@ 0x2c
 80195da:	bf08      	it	eq
 80195dc:	3501      	addeq	r5, #1
 80195de:	f895 9000 	ldrb.w	r9, [r5]
 80195e2:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 80195e6:	f040 80a3 	bne.w	8019730 <_tzset_unlocked_r+0x388>
 80195ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80195ec:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 80195f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80195f4:	aa09      	add	r2, sp, #36	@ 0x24
 80195f6:	9200      	str	r2, [sp, #0]
 80195f8:	4937      	ldr	r1, [pc, #220]	@ (80196d8 <_tzset_unlocked_r+0x330>)
 80195fa:	9303      	str	r3, [sp, #12]
 80195fc:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8019600:	4628      	mov	r0, r5
 8019602:	f000 fb87 	bl	8019d14 <siscanf>
 8019606:	2803      	cmp	r0, #3
 8019608:	f47f aefc 	bne.w	8019404 <_tzset_unlocked_r+0x5c>
 801960c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8019610:	1e4b      	subs	r3, r1, #1
 8019612:	2b0b      	cmp	r3, #11
 8019614:	f63f aef6 	bhi.w	8019404 <_tzset_unlocked_r+0x5c>
 8019618:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801961c:	1e53      	subs	r3, r2, #1
 801961e:	2b04      	cmp	r3, #4
 8019620:	f63f aef0 	bhi.w	8019404 <_tzset_unlocked_r+0x5c>
 8019624:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8019628:	2b06      	cmp	r3, #6
 801962a:	f63f aeeb 	bhi.w	8019404 <_tzset_unlocked_r+0x5c>
 801962e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8019632:	f887 9008 	strb.w	r9, [r7, #8]
 8019636:	617b      	str	r3, [r7, #20]
 8019638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801963a:	eb05 0903 	add.w	r9, r5, r3
 801963e:	2500      	movs	r5, #0
 8019640:	f04f 0302 	mov.w	r3, #2
 8019644:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019648:	f8ad 501e 	strh.w	r5, [sp, #30]
 801964c:	f8ad 5020 	strh.w	r5, [sp, #32]
 8019650:	950a      	str	r5, [sp, #40]	@ 0x28
 8019652:	f899 3000 	ldrb.w	r3, [r9]
 8019656:	2b2f      	cmp	r3, #47	@ 0x2f
 8019658:	f040 8096 	bne.w	8019788 <_tzset_unlocked_r+0x3e0>
 801965c:	ab0a      	add	r3, sp, #40	@ 0x28
 801965e:	aa08      	add	r2, sp, #32
 8019660:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8019664:	f10d 021e 	add.w	r2, sp, #30
 8019668:	9200      	str	r2, [sp, #0]
 801966a:	491c      	ldr	r1, [pc, #112]	@ (80196dc <_tzset_unlocked_r+0x334>)
 801966c:	9303      	str	r3, [sp, #12]
 801966e:	aa07      	add	r2, sp, #28
 8019670:	4648      	mov	r0, r9
 8019672:	f000 fb4f 	bl	8019d14 <siscanf>
 8019676:	42a8      	cmp	r0, r5
 8019678:	f300 8086 	bgt.w	8019788 <_tzset_unlocked_r+0x3e0>
 801967c:	214a      	movs	r1, #74	@ 0x4a
 801967e:	2200      	movs	r2, #0
 8019680:	2300      	movs	r3, #0
 8019682:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8019686:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801968a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801968e:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8019692:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8019696:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801969a:	7221      	strb	r1, [r4, #8]
 801969c:	62a5      	str	r5, [r4, #40]	@ 0x28
 801969e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80196a2:	6525      	str	r5, [r4, #80]	@ 0x50
 80196a4:	e6ae      	b.n	8019404 <_tzset_unlocked_r+0x5c>
 80196a6:	bf00      	nop
 80196a8:	08021314 	.word	0x08021314
 80196ac:	20002198 	.word	0x20002198
 80196b0:	200021b4 	.word	0x200021b4
 80196b4:	08021317 	.word	0x08021317
 80196b8:	200021b8 	.word	0x200021b8
 80196bc:	2000081c 	.word	0x2000081c
 80196c0:	08021793 	.word	0x08021793
 80196c4:	200021a8 	.word	0x200021a8
 80196c8:	0802131b 	.word	0x0802131b
 80196cc:	08021350 	.word	0x08021350
 80196d0:	2000219c 	.word	0x2000219c
 80196d4:	0802132e 	.word	0x0802132e
 80196d8:	0802133c 	.word	0x0802133c
 80196dc:	0802134f 	.word	0x0802134f
 80196e0:	4a3e      	ldr	r2, [pc, #248]	@ (80197dc <_tzset_unlocked_r+0x434>)
 80196e2:	493f      	ldr	r1, [pc, #252]	@ (80197e0 <_tzset_unlocked_r+0x438>)
 80196e4:	ab0a      	add	r3, sp, #40	@ 0x28
 80196e6:	4648      	mov	r0, r9
 80196e8:	f000 fb14 	bl	8019d14 <siscanf>
 80196ec:	2800      	cmp	r0, #0
 80196ee:	f77f af17 	ble.w	8019520 <_tzset_unlocked_r+0x178>
 80196f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80196f4:	3b03      	subs	r3, #3
 80196f6:	2b07      	cmp	r3, #7
 80196f8:	f67f af42 	bls.w	8019580 <_tzset_unlocked_r+0x1d8>
 80196fc:	e682      	b.n	8019404 <_tzset_unlocked_r+0x5c>
 80196fe:	2b2b      	cmp	r3, #43	@ 0x2b
 8019700:	bf08      	it	eq
 8019702:	3501      	addeq	r5, #1
 8019704:	f04f 0901 	mov.w	r9, #1
 8019708:	e745      	b.n	8019596 <_tzset_unlocked_r+0x1ee>
 801970a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801970e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019712:	213c      	movs	r1, #60	@ 0x3c
 8019714:	fb01 3302 	mla	r3, r1, r2, r3
 8019718:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801971c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8019720:	fb01 3302 	mla	r3, r1, r2, r3
 8019724:	fb09 f303 	mul.w	r3, r9, r3
 8019728:	e74f      	b.n	80195ca <_tzset_unlocked_r+0x222>
 801972a:	f04f 0b01 	mov.w	fp, #1
 801972e:	e752      	b.n	80195d6 <_tzset_unlocked_r+0x22e>
 8019730:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8019734:	bf06      	itte	eq
 8019736:	3501      	addeq	r5, #1
 8019738:	464b      	moveq	r3, r9
 801973a:	2344      	movne	r3, #68	@ 0x44
 801973c:	220a      	movs	r2, #10
 801973e:	a90b      	add	r1, sp, #44	@ 0x2c
 8019740:	4628      	mov	r0, r5
 8019742:	9305      	str	r3, [sp, #20]
 8019744:	f000 fadc 	bl	8019d00 <strtoul>
 8019748:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 801974c:	9b05      	ldr	r3, [sp, #20]
 801974e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8019752:	45a9      	cmp	r9, r5
 8019754:	d114      	bne.n	8019780 <_tzset_unlocked_r+0x3d8>
 8019756:	234d      	movs	r3, #77	@ 0x4d
 8019758:	f1bb 0f00 	cmp.w	fp, #0
 801975c:	d107      	bne.n	801976e <_tzset_unlocked_r+0x3c6>
 801975e:	7223      	strb	r3, [r4, #8]
 8019760:	2103      	movs	r1, #3
 8019762:	2302      	movs	r3, #2
 8019764:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8019768:	f8c4 b014 	str.w	fp, [r4, #20]
 801976c:	e767      	b.n	801963e <_tzset_unlocked_r+0x296>
 801976e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8019772:	220b      	movs	r2, #11
 8019774:	2301      	movs	r3, #1
 8019776:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 801977a:	2300      	movs	r3, #0
 801977c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801977e:	e75e      	b.n	801963e <_tzset_unlocked_r+0x296>
 8019780:	b280      	uxth	r0, r0
 8019782:	723b      	strb	r3, [r7, #8]
 8019784:	6178      	str	r0, [r7, #20]
 8019786:	e75a      	b.n	801963e <_tzset_unlocked_r+0x296>
 8019788:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801978c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019790:	213c      	movs	r1, #60	@ 0x3c
 8019792:	fb01 3302 	mla	r3, r1, r2, r3
 8019796:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801979a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801979e:	fb01 3302 	mla	r3, r1, r2, r3
 80197a2:	61bb      	str	r3, [r7, #24]
 80197a4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80197a6:	3728      	adds	r7, #40	@ 0x28
 80197a8:	444d      	add	r5, r9
 80197aa:	f1bb 0f00 	cmp.w	fp, #0
 80197ae:	d0bc      	beq.n	801972a <_tzset_unlocked_r+0x382>
 80197b0:	9b04      	ldr	r3, [sp, #16]
 80197b2:	6523      	str	r3, [r4, #80]	@ 0x50
 80197b4:	4b0b      	ldr	r3, [pc, #44]	@ (80197e4 <_tzset_unlocked_r+0x43c>)
 80197b6:	f8c8 3000 	str.w	r3, [r8]
 80197ba:	6860      	ldr	r0, [r4, #4]
 80197bc:	4b07      	ldr	r3, [pc, #28]	@ (80197dc <_tzset_unlocked_r+0x434>)
 80197be:	62a6      	str	r6, [r4, #40]	@ 0x28
 80197c0:	f8c8 3004 	str.w	r3, [r8, #4]
 80197c4:	f7ff fd34 	bl	8019230 <__tzcalc_limits>
 80197c8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80197ca:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80197cc:	f8ca 2000 	str.w	r2, [sl]
 80197d0:	1a9b      	subs	r3, r3, r2
 80197d2:	4a05      	ldr	r2, [pc, #20]	@ (80197e8 <_tzset_unlocked_r+0x440>)
 80197d4:	bf18      	it	ne
 80197d6:	2301      	movne	r3, #1
 80197d8:	6013      	str	r3, [r2, #0]
 80197da:	e613      	b.n	8019404 <_tzset_unlocked_r+0x5c>
 80197dc:	2000219c 	.word	0x2000219c
 80197e0:	0802132e 	.word	0x0802132e
 80197e4:	200021a8 	.word	0x200021a8
 80197e8:	200021b8 	.word	0x200021b8

080197ec <_close_r>:
 80197ec:	b538      	push	{r3, r4, r5, lr}
 80197ee:	4d06      	ldr	r5, [pc, #24]	@ (8019808 <_close_r+0x1c>)
 80197f0:	2300      	movs	r3, #0
 80197f2:	4604      	mov	r4, r0
 80197f4:	4608      	mov	r0, r1
 80197f6:	602b      	str	r3, [r5, #0]
 80197f8:	f7e8 fb52 	bl	8001ea0 <_close>
 80197fc:	1c43      	adds	r3, r0, #1
 80197fe:	d102      	bne.n	8019806 <_close_r+0x1a>
 8019800:	682b      	ldr	r3, [r5, #0]
 8019802:	b103      	cbz	r3, 8019806 <_close_r+0x1a>
 8019804:	6023      	str	r3, [r4, #0]
 8019806:	bd38      	pop	{r3, r4, r5, pc}
 8019808:	200021bc 	.word	0x200021bc

0801980c <_lseek_r>:
 801980c:	b538      	push	{r3, r4, r5, lr}
 801980e:	4d07      	ldr	r5, [pc, #28]	@ (801982c <_lseek_r+0x20>)
 8019810:	4604      	mov	r4, r0
 8019812:	4608      	mov	r0, r1
 8019814:	4611      	mov	r1, r2
 8019816:	2200      	movs	r2, #0
 8019818:	602a      	str	r2, [r5, #0]
 801981a:	461a      	mov	r2, r3
 801981c:	f7e8 fb67 	bl	8001eee <_lseek>
 8019820:	1c43      	adds	r3, r0, #1
 8019822:	d102      	bne.n	801982a <_lseek_r+0x1e>
 8019824:	682b      	ldr	r3, [r5, #0]
 8019826:	b103      	cbz	r3, 801982a <_lseek_r+0x1e>
 8019828:	6023      	str	r3, [r4, #0]
 801982a:	bd38      	pop	{r3, r4, r5, pc}
 801982c:	200021bc 	.word	0x200021bc

08019830 <_read_r>:
 8019830:	b538      	push	{r3, r4, r5, lr}
 8019832:	4d07      	ldr	r5, [pc, #28]	@ (8019850 <_read_r+0x20>)
 8019834:	4604      	mov	r4, r0
 8019836:	4608      	mov	r0, r1
 8019838:	4611      	mov	r1, r2
 801983a:	2200      	movs	r2, #0
 801983c:	602a      	str	r2, [r5, #0]
 801983e:	461a      	mov	r2, r3
 8019840:	f7e8 faf5 	bl	8001e2e <_read>
 8019844:	1c43      	adds	r3, r0, #1
 8019846:	d102      	bne.n	801984e <_read_r+0x1e>
 8019848:	682b      	ldr	r3, [r5, #0]
 801984a:	b103      	cbz	r3, 801984e <_read_r+0x1e>
 801984c:	6023      	str	r3, [r4, #0]
 801984e:	bd38      	pop	{r3, r4, r5, pc}
 8019850:	200021bc 	.word	0x200021bc

08019854 <_sbrk_r>:
 8019854:	b538      	push	{r3, r4, r5, lr}
 8019856:	4d06      	ldr	r5, [pc, #24]	@ (8019870 <_sbrk_r+0x1c>)
 8019858:	2300      	movs	r3, #0
 801985a:	4604      	mov	r4, r0
 801985c:	4608      	mov	r0, r1
 801985e:	602b      	str	r3, [r5, #0]
 8019860:	f7e8 fb52 	bl	8001f08 <_sbrk>
 8019864:	1c43      	adds	r3, r0, #1
 8019866:	d102      	bne.n	801986e <_sbrk_r+0x1a>
 8019868:	682b      	ldr	r3, [r5, #0]
 801986a:	b103      	cbz	r3, 801986e <_sbrk_r+0x1a>
 801986c:	6023      	str	r3, [r4, #0]
 801986e:	bd38      	pop	{r3, r4, r5, pc}
 8019870:	200021bc 	.word	0x200021bc

08019874 <_write_r>:
 8019874:	b538      	push	{r3, r4, r5, lr}
 8019876:	4d07      	ldr	r5, [pc, #28]	@ (8019894 <_write_r+0x20>)
 8019878:	4604      	mov	r4, r0
 801987a:	4608      	mov	r0, r1
 801987c:	4611      	mov	r1, r2
 801987e:	2200      	movs	r2, #0
 8019880:	602a      	str	r2, [r5, #0]
 8019882:	461a      	mov	r2, r3
 8019884:	f7e8 faf0 	bl	8001e68 <_write>
 8019888:	1c43      	adds	r3, r0, #1
 801988a:	d102      	bne.n	8019892 <_write_r+0x1e>
 801988c:	682b      	ldr	r3, [r5, #0]
 801988e:	b103      	cbz	r3, 8019892 <_write_r+0x1e>
 8019890:	6023      	str	r3, [r4, #0]
 8019892:	bd38      	pop	{r3, r4, r5, pc}
 8019894:	200021bc 	.word	0x200021bc

08019898 <__errno>:
 8019898:	4b01      	ldr	r3, [pc, #4]	@ (80198a0 <__errno+0x8>)
 801989a:	6818      	ldr	r0, [r3, #0]
 801989c:	4770      	bx	lr
 801989e:	bf00      	nop
 80198a0:	20000824 	.word	0x20000824

080198a4 <__libc_init_array>:
 80198a4:	b570      	push	{r4, r5, r6, lr}
 80198a6:	4d0d      	ldr	r5, [pc, #52]	@ (80198dc <__libc_init_array+0x38>)
 80198a8:	4c0d      	ldr	r4, [pc, #52]	@ (80198e0 <__libc_init_array+0x3c>)
 80198aa:	1b64      	subs	r4, r4, r5
 80198ac:	10a4      	asrs	r4, r4, #2
 80198ae:	2600      	movs	r6, #0
 80198b0:	42a6      	cmp	r6, r4
 80198b2:	d109      	bne.n	80198c8 <__libc_init_array+0x24>
 80198b4:	4d0b      	ldr	r5, [pc, #44]	@ (80198e4 <__libc_init_array+0x40>)
 80198b6:	4c0c      	ldr	r4, [pc, #48]	@ (80198e8 <__libc_init_array+0x44>)
 80198b8:	f007 f852 	bl	8020960 <_init>
 80198bc:	1b64      	subs	r4, r4, r5
 80198be:	10a4      	asrs	r4, r4, #2
 80198c0:	2600      	movs	r6, #0
 80198c2:	42a6      	cmp	r6, r4
 80198c4:	d105      	bne.n	80198d2 <__libc_init_array+0x2e>
 80198c6:	bd70      	pop	{r4, r5, r6, pc}
 80198c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80198cc:	4798      	blx	r3
 80198ce:	3601      	adds	r6, #1
 80198d0:	e7ee      	b.n	80198b0 <__libc_init_array+0xc>
 80198d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80198d6:	4798      	blx	r3
 80198d8:	3601      	adds	r6, #1
 80198da:	e7f2      	b.n	80198c2 <__libc_init_array+0x1e>
 80198dc:	080217b0 	.word	0x080217b0
 80198e0:	080217b0 	.word	0x080217b0
 80198e4:	080217b0 	.word	0x080217b0
 80198e8:	080217b8 	.word	0x080217b8

080198ec <__retarget_lock_init_recursive>:
 80198ec:	4770      	bx	lr

080198ee <__retarget_lock_close_recursive>:
 80198ee:	4770      	bx	lr

080198f0 <__retarget_lock_acquire>:
 80198f0:	4770      	bx	lr

080198f2 <__retarget_lock_acquire_recursive>:
 80198f2:	4770      	bx	lr

080198f4 <__retarget_lock_release>:
 80198f4:	4770      	bx	lr

080198f6 <__retarget_lock_release_recursive>:
 80198f6:	4770      	bx	lr

080198f8 <sysconf>:
 80198f8:	2808      	cmp	r0, #8
 80198fa:	b508      	push	{r3, lr}
 80198fc:	d006      	beq.n	801990c <sysconf+0x14>
 80198fe:	f7ff ffcb 	bl	8019898 <__errno>
 8019902:	2316      	movs	r3, #22
 8019904:	6003      	str	r3, [r0, #0]
 8019906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801990a:	bd08      	pop	{r3, pc}
 801990c:	2080      	movs	r0, #128	@ 0x80
 801990e:	e7fc      	b.n	801990a <sysconf+0x12>

08019910 <strcpy>:
 8019910:	4603      	mov	r3, r0
 8019912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019916:	f803 2b01 	strb.w	r2, [r3], #1
 801991a:	2a00      	cmp	r2, #0
 801991c:	d1f9      	bne.n	8019912 <strcpy+0x2>
 801991e:	4770      	bx	lr

08019920 <memcpy>:
 8019920:	440a      	add	r2, r1
 8019922:	4291      	cmp	r1, r2
 8019924:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019928:	d100      	bne.n	801992c <memcpy+0xc>
 801992a:	4770      	bx	lr
 801992c:	b510      	push	{r4, lr}
 801992e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019936:	4291      	cmp	r1, r2
 8019938:	d1f9      	bne.n	801992e <memcpy+0xe>
 801993a:	bd10      	pop	{r4, pc}

0801993c <register_fini>:
 801993c:	4b02      	ldr	r3, [pc, #8]	@ (8019948 <register_fini+0xc>)
 801993e:	b113      	cbz	r3, 8019946 <register_fini+0xa>
 8019940:	4802      	ldr	r0, [pc, #8]	@ (801994c <register_fini+0x10>)
 8019942:	f000 b805 	b.w	8019950 <atexit>
 8019946:	4770      	bx	lr
 8019948:	00000000 	.word	0x00000000
 801994c:	0801e6f9 	.word	0x0801e6f9

08019950 <atexit>:
 8019950:	2300      	movs	r3, #0
 8019952:	4601      	mov	r1, r0
 8019954:	461a      	mov	r2, r3
 8019956:	4618      	mov	r0, r3
 8019958:	f004 bf18 	b.w	801e78c <__register_exitproc>

0801995c <div>:
 801995c:	b510      	push	{r4, lr}
 801995e:	fb91 f4f2 	sdiv	r4, r1, r2
 8019962:	fb02 1114 	mls	r1, r2, r4, r1
 8019966:	6004      	str	r4, [r0, #0]
 8019968:	6041      	str	r1, [r0, #4]
 801996a:	bd10      	pop	{r4, pc}

0801996c <_malloc_trim_r>:
 801996c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019970:	4606      	mov	r6, r0
 8019972:	2008      	movs	r0, #8
 8019974:	4689      	mov	r9, r1
 8019976:	f7ff ffbf 	bl	80198f8 <sysconf>
 801997a:	4f24      	ldr	r7, [pc, #144]	@ (8019a0c <_malloc_trim_r+0xa0>)
 801997c:	4680      	mov	r8, r0
 801997e:	4630      	mov	r0, r6
 8019980:	f7fe ff62 	bl	8018848 <__malloc_lock>
 8019984:	68bb      	ldr	r3, [r7, #8]
 8019986:	685d      	ldr	r5, [r3, #4]
 8019988:	f025 0503 	bic.w	r5, r5, #3
 801998c:	f1a5 0411 	sub.w	r4, r5, #17
 8019990:	eba4 0409 	sub.w	r4, r4, r9
 8019994:	4444      	add	r4, r8
 8019996:	fbb4 f4f8 	udiv	r4, r4, r8
 801999a:	3c01      	subs	r4, #1
 801999c:	fb08 f404 	mul.w	r4, r8, r4
 80199a0:	45a0      	cmp	r8, r4
 80199a2:	dd05      	ble.n	80199b0 <_malloc_trim_r+0x44>
 80199a4:	4630      	mov	r0, r6
 80199a6:	f7fe ff55 	bl	8018854 <__malloc_unlock>
 80199aa:	2000      	movs	r0, #0
 80199ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199b0:	2100      	movs	r1, #0
 80199b2:	4630      	mov	r0, r6
 80199b4:	f7ff ff4e 	bl	8019854 <_sbrk_r>
 80199b8:	68bb      	ldr	r3, [r7, #8]
 80199ba:	442b      	add	r3, r5
 80199bc:	4298      	cmp	r0, r3
 80199be:	d1f1      	bne.n	80199a4 <_malloc_trim_r+0x38>
 80199c0:	4261      	negs	r1, r4
 80199c2:	4630      	mov	r0, r6
 80199c4:	f7ff ff46 	bl	8019854 <_sbrk_r>
 80199c8:	3001      	adds	r0, #1
 80199ca:	d110      	bne.n	80199ee <_malloc_trim_r+0x82>
 80199cc:	2100      	movs	r1, #0
 80199ce:	4630      	mov	r0, r6
 80199d0:	f7ff ff40 	bl	8019854 <_sbrk_r>
 80199d4:	68ba      	ldr	r2, [r7, #8]
 80199d6:	1a83      	subs	r3, r0, r2
 80199d8:	2b0f      	cmp	r3, #15
 80199da:	dde3      	ble.n	80199a4 <_malloc_trim_r+0x38>
 80199dc:	490c      	ldr	r1, [pc, #48]	@ (8019a10 <_malloc_trim_r+0xa4>)
 80199de:	6809      	ldr	r1, [r1, #0]
 80199e0:	1a40      	subs	r0, r0, r1
 80199e2:	490c      	ldr	r1, [pc, #48]	@ (8019a14 <_malloc_trim_r+0xa8>)
 80199e4:	f043 0301 	orr.w	r3, r3, #1
 80199e8:	6008      	str	r0, [r1, #0]
 80199ea:	6053      	str	r3, [r2, #4]
 80199ec:	e7da      	b.n	80199a4 <_malloc_trim_r+0x38>
 80199ee:	68bb      	ldr	r3, [r7, #8]
 80199f0:	4a08      	ldr	r2, [pc, #32]	@ (8019a14 <_malloc_trim_r+0xa8>)
 80199f2:	1b2d      	subs	r5, r5, r4
 80199f4:	f045 0501 	orr.w	r5, r5, #1
 80199f8:	605d      	str	r5, [r3, #4]
 80199fa:	6813      	ldr	r3, [r2, #0]
 80199fc:	4630      	mov	r0, r6
 80199fe:	1b1b      	subs	r3, r3, r4
 8019a00:	6013      	str	r3, [r2, #0]
 8019a02:	f7fe ff27 	bl	8018854 <__malloc_unlock>
 8019a06:	2001      	movs	r0, #1
 8019a08:	e7d0      	b.n	80199ac <_malloc_trim_r+0x40>
 8019a0a:	bf00      	nop
 8019a0c:	20000408 	.word	0x20000408
 8019a10:	20000400 	.word	0x20000400
 8019a14:	20002028 	.word	0x20002028

08019a18 <_free_r>:
 8019a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a1a:	4604      	mov	r4, r0
 8019a1c:	460f      	mov	r7, r1
 8019a1e:	2900      	cmp	r1, #0
 8019a20:	f000 80b1 	beq.w	8019b86 <_free_r+0x16e>
 8019a24:	f7fe ff10 	bl	8018848 <__malloc_lock>
 8019a28:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8019a2c:	4d56      	ldr	r5, [pc, #344]	@ (8019b88 <_free_r+0x170>)
 8019a2e:	f022 0001 	bic.w	r0, r2, #1
 8019a32:	f1a7 0308 	sub.w	r3, r7, #8
 8019a36:	eb03 0c00 	add.w	ip, r3, r0
 8019a3a:	68a9      	ldr	r1, [r5, #8]
 8019a3c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8019a40:	4561      	cmp	r1, ip
 8019a42:	f026 0603 	bic.w	r6, r6, #3
 8019a46:	f002 0201 	and.w	r2, r2, #1
 8019a4a:	d11b      	bne.n	8019a84 <_free_r+0x6c>
 8019a4c:	4406      	add	r6, r0
 8019a4e:	b93a      	cbnz	r2, 8019a60 <_free_r+0x48>
 8019a50:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8019a54:	1a9b      	subs	r3, r3, r2
 8019a56:	4416      	add	r6, r2
 8019a58:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8019a5c:	60ca      	str	r2, [r1, #12]
 8019a5e:	6091      	str	r1, [r2, #8]
 8019a60:	f046 0201 	orr.w	r2, r6, #1
 8019a64:	605a      	str	r2, [r3, #4]
 8019a66:	60ab      	str	r3, [r5, #8]
 8019a68:	4b48      	ldr	r3, [pc, #288]	@ (8019b8c <_free_r+0x174>)
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	42b3      	cmp	r3, r6
 8019a6e:	d804      	bhi.n	8019a7a <_free_r+0x62>
 8019a70:	4b47      	ldr	r3, [pc, #284]	@ (8019b90 <_free_r+0x178>)
 8019a72:	4620      	mov	r0, r4
 8019a74:	6819      	ldr	r1, [r3, #0]
 8019a76:	f7ff ff79 	bl	801996c <_malloc_trim_r>
 8019a7a:	4620      	mov	r0, r4
 8019a7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019a80:	f7fe bee8 	b.w	8018854 <__malloc_unlock>
 8019a84:	f8cc 6004 	str.w	r6, [ip, #4]
 8019a88:	2a00      	cmp	r2, #0
 8019a8a:	d138      	bne.n	8019afe <_free_r+0xe6>
 8019a8c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8019a90:	1a5b      	subs	r3, r3, r1
 8019a92:	4408      	add	r0, r1
 8019a94:	6899      	ldr	r1, [r3, #8]
 8019a96:	f105 0708 	add.w	r7, r5, #8
 8019a9a:	42b9      	cmp	r1, r7
 8019a9c:	d031      	beq.n	8019b02 <_free_r+0xea>
 8019a9e:	68df      	ldr	r7, [r3, #12]
 8019aa0:	60cf      	str	r7, [r1, #12]
 8019aa2:	60b9      	str	r1, [r7, #8]
 8019aa4:	eb0c 0106 	add.w	r1, ip, r6
 8019aa8:	6849      	ldr	r1, [r1, #4]
 8019aaa:	07c9      	lsls	r1, r1, #31
 8019aac:	d40b      	bmi.n	8019ac6 <_free_r+0xae>
 8019aae:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8019ab2:	4430      	add	r0, r6
 8019ab4:	bb3a      	cbnz	r2, 8019b06 <_free_r+0xee>
 8019ab6:	4e37      	ldr	r6, [pc, #220]	@ (8019b94 <_free_r+0x17c>)
 8019ab8:	42b1      	cmp	r1, r6
 8019aba:	d124      	bne.n	8019b06 <_free_r+0xee>
 8019abc:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8019ac0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8019ac4:	2201      	movs	r2, #1
 8019ac6:	f040 0101 	orr.w	r1, r0, #1
 8019aca:	6059      	str	r1, [r3, #4]
 8019acc:	5018      	str	r0, [r3, r0]
 8019ace:	2a00      	cmp	r2, #0
 8019ad0:	d1d3      	bne.n	8019a7a <_free_r+0x62>
 8019ad2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8019ad6:	d21b      	bcs.n	8019b10 <_free_r+0xf8>
 8019ad8:	08c2      	lsrs	r2, r0, #3
 8019ada:	2101      	movs	r1, #1
 8019adc:	0940      	lsrs	r0, r0, #5
 8019ade:	4081      	lsls	r1, r0
 8019ae0:	6868      	ldr	r0, [r5, #4]
 8019ae2:	3201      	adds	r2, #1
 8019ae4:	4301      	orrs	r1, r0
 8019ae6:	6069      	str	r1, [r5, #4]
 8019ae8:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8019aec:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8019af0:	3908      	subs	r1, #8
 8019af2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8019af6:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8019afa:	60c3      	str	r3, [r0, #12]
 8019afc:	e7bd      	b.n	8019a7a <_free_r+0x62>
 8019afe:	2200      	movs	r2, #0
 8019b00:	e7d0      	b.n	8019aa4 <_free_r+0x8c>
 8019b02:	2201      	movs	r2, #1
 8019b04:	e7ce      	b.n	8019aa4 <_free_r+0x8c>
 8019b06:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8019b0a:	60ce      	str	r6, [r1, #12]
 8019b0c:	60b1      	str	r1, [r6, #8]
 8019b0e:	e7da      	b.n	8019ac6 <_free_r+0xae>
 8019b10:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8019b14:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8019b18:	d214      	bcs.n	8019b44 <_free_r+0x12c>
 8019b1a:	0982      	lsrs	r2, r0, #6
 8019b1c:	3238      	adds	r2, #56	@ 0x38
 8019b1e:	1c51      	adds	r1, r2, #1
 8019b20:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8019b24:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8019b28:	428e      	cmp	r6, r1
 8019b2a:	d125      	bne.n	8019b78 <_free_r+0x160>
 8019b2c:	2001      	movs	r0, #1
 8019b2e:	1092      	asrs	r2, r2, #2
 8019b30:	fa00 f202 	lsl.w	r2, r0, r2
 8019b34:	6868      	ldr	r0, [r5, #4]
 8019b36:	4302      	orrs	r2, r0
 8019b38:	606a      	str	r2, [r5, #4]
 8019b3a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8019b3e:	60b3      	str	r3, [r6, #8]
 8019b40:	60cb      	str	r3, [r1, #12]
 8019b42:	e79a      	b.n	8019a7a <_free_r+0x62>
 8019b44:	2a14      	cmp	r2, #20
 8019b46:	d801      	bhi.n	8019b4c <_free_r+0x134>
 8019b48:	325b      	adds	r2, #91	@ 0x5b
 8019b4a:	e7e8      	b.n	8019b1e <_free_r+0x106>
 8019b4c:	2a54      	cmp	r2, #84	@ 0x54
 8019b4e:	d802      	bhi.n	8019b56 <_free_r+0x13e>
 8019b50:	0b02      	lsrs	r2, r0, #12
 8019b52:	326e      	adds	r2, #110	@ 0x6e
 8019b54:	e7e3      	b.n	8019b1e <_free_r+0x106>
 8019b56:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8019b5a:	d802      	bhi.n	8019b62 <_free_r+0x14a>
 8019b5c:	0bc2      	lsrs	r2, r0, #15
 8019b5e:	3277      	adds	r2, #119	@ 0x77
 8019b60:	e7dd      	b.n	8019b1e <_free_r+0x106>
 8019b62:	f240 5154 	movw	r1, #1364	@ 0x554
 8019b66:	428a      	cmp	r2, r1
 8019b68:	bf9a      	itte	ls
 8019b6a:	0c82      	lsrls	r2, r0, #18
 8019b6c:	327c      	addls	r2, #124	@ 0x7c
 8019b6e:	227e      	movhi	r2, #126	@ 0x7e
 8019b70:	e7d5      	b.n	8019b1e <_free_r+0x106>
 8019b72:	6889      	ldr	r1, [r1, #8]
 8019b74:	428e      	cmp	r6, r1
 8019b76:	d004      	beq.n	8019b82 <_free_r+0x16a>
 8019b78:	684a      	ldr	r2, [r1, #4]
 8019b7a:	f022 0203 	bic.w	r2, r2, #3
 8019b7e:	4282      	cmp	r2, r0
 8019b80:	d8f7      	bhi.n	8019b72 <_free_r+0x15a>
 8019b82:	68ce      	ldr	r6, [r1, #12]
 8019b84:	e7d9      	b.n	8019b3a <_free_r+0x122>
 8019b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b88:	20000408 	.word	0x20000408
 8019b8c:	20000404 	.word	0x20000404
 8019b90:	20002058 	.word	0x20002058
 8019b94:	20000410 	.word	0x20000410

08019b98 <_findenv_r>:
 8019b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b9c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019c0c <_findenv_r+0x74>
 8019ba0:	4606      	mov	r6, r0
 8019ba2:	4689      	mov	r9, r1
 8019ba4:	4617      	mov	r7, r2
 8019ba6:	f005 fc67 	bl	801f478 <__env_lock>
 8019baa:	f8da 4000 	ldr.w	r4, [sl]
 8019bae:	b134      	cbz	r4, 8019bbe <_findenv_r+0x26>
 8019bb0:	464b      	mov	r3, r9
 8019bb2:	4698      	mov	r8, r3
 8019bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019bb8:	b13a      	cbz	r2, 8019bca <_findenv_r+0x32>
 8019bba:	2a3d      	cmp	r2, #61	@ 0x3d
 8019bbc:	d1f9      	bne.n	8019bb2 <_findenv_r+0x1a>
 8019bbe:	4630      	mov	r0, r6
 8019bc0:	f005 fc60 	bl	801f484 <__env_unlock>
 8019bc4:	2000      	movs	r0, #0
 8019bc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bca:	eba8 0809 	sub.w	r8, r8, r9
 8019bce:	46a3      	mov	fp, r4
 8019bd0:	f854 0b04 	ldr.w	r0, [r4], #4
 8019bd4:	2800      	cmp	r0, #0
 8019bd6:	d0f2      	beq.n	8019bbe <_findenv_r+0x26>
 8019bd8:	4642      	mov	r2, r8
 8019bda:	4649      	mov	r1, r9
 8019bdc:	f004 fd58 	bl	801e690 <strncmp>
 8019be0:	2800      	cmp	r0, #0
 8019be2:	d1f4      	bne.n	8019bce <_findenv_r+0x36>
 8019be4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019be8:	eb03 0508 	add.w	r5, r3, r8
 8019bec:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019bf0:	2b3d      	cmp	r3, #61	@ 0x3d
 8019bf2:	d1ec      	bne.n	8019bce <_findenv_r+0x36>
 8019bf4:	f8da 3000 	ldr.w	r3, [sl]
 8019bf8:	ebab 0303 	sub.w	r3, fp, r3
 8019bfc:	109b      	asrs	r3, r3, #2
 8019bfe:	4630      	mov	r0, r6
 8019c00:	603b      	str	r3, [r7, #0]
 8019c02:	f005 fc3f 	bl	801f484 <__env_unlock>
 8019c06:	1c68      	adds	r0, r5, #1
 8019c08:	e7dd      	b.n	8019bc6 <_findenv_r+0x2e>
 8019c0a:	bf00      	nop
 8019c0c:	200001d8 	.word	0x200001d8

08019c10 <_getenv_r>:
 8019c10:	b507      	push	{r0, r1, r2, lr}
 8019c12:	aa01      	add	r2, sp, #4
 8019c14:	f7ff ffc0 	bl	8019b98 <_findenv_r>
 8019c18:	b003      	add	sp, #12
 8019c1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08019c20 <_strtoul_l.constprop.0>:
 8019c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019c24:	4e34      	ldr	r6, [pc, #208]	@ (8019cf8 <_strtoul_l.constprop.0+0xd8>)
 8019c26:	4686      	mov	lr, r0
 8019c28:	460d      	mov	r5, r1
 8019c2a:	4628      	mov	r0, r5
 8019c2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c30:	5d37      	ldrb	r7, [r6, r4]
 8019c32:	f017 0708 	ands.w	r7, r7, #8
 8019c36:	d1f8      	bne.n	8019c2a <_strtoul_l.constprop.0+0xa>
 8019c38:	2c2d      	cmp	r4, #45	@ 0x2d
 8019c3a:	d12f      	bne.n	8019c9c <_strtoul_l.constprop.0+0x7c>
 8019c3c:	782c      	ldrb	r4, [r5, #0]
 8019c3e:	2701      	movs	r7, #1
 8019c40:	1c85      	adds	r5, r0, #2
 8019c42:	f033 0010 	bics.w	r0, r3, #16
 8019c46:	d109      	bne.n	8019c5c <_strtoul_l.constprop.0+0x3c>
 8019c48:	2c30      	cmp	r4, #48	@ 0x30
 8019c4a:	d12c      	bne.n	8019ca6 <_strtoul_l.constprop.0+0x86>
 8019c4c:	7828      	ldrb	r0, [r5, #0]
 8019c4e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019c52:	2858      	cmp	r0, #88	@ 0x58
 8019c54:	d127      	bne.n	8019ca6 <_strtoul_l.constprop.0+0x86>
 8019c56:	786c      	ldrb	r4, [r5, #1]
 8019c58:	2310      	movs	r3, #16
 8019c5a:	3502      	adds	r5, #2
 8019c5c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019c60:	2600      	movs	r6, #0
 8019c62:	fbb8 f8f3 	udiv	r8, r8, r3
 8019c66:	fb03 f908 	mul.w	r9, r3, r8
 8019c6a:	ea6f 0909 	mvn.w	r9, r9
 8019c6e:	4630      	mov	r0, r6
 8019c70:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019c74:	f1bc 0f09 	cmp.w	ip, #9
 8019c78:	d81c      	bhi.n	8019cb4 <_strtoul_l.constprop.0+0x94>
 8019c7a:	4664      	mov	r4, ip
 8019c7c:	42a3      	cmp	r3, r4
 8019c7e:	dd2a      	ble.n	8019cd6 <_strtoul_l.constprop.0+0xb6>
 8019c80:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019c84:	d007      	beq.n	8019c96 <_strtoul_l.constprop.0+0x76>
 8019c86:	4580      	cmp	r8, r0
 8019c88:	d322      	bcc.n	8019cd0 <_strtoul_l.constprop.0+0xb0>
 8019c8a:	d101      	bne.n	8019c90 <_strtoul_l.constprop.0+0x70>
 8019c8c:	45a1      	cmp	r9, r4
 8019c8e:	db1f      	blt.n	8019cd0 <_strtoul_l.constprop.0+0xb0>
 8019c90:	fb00 4003 	mla	r0, r0, r3, r4
 8019c94:	2601      	movs	r6, #1
 8019c96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c9a:	e7e9      	b.n	8019c70 <_strtoul_l.constprop.0+0x50>
 8019c9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8019c9e:	bf04      	itt	eq
 8019ca0:	782c      	ldrbeq	r4, [r5, #0]
 8019ca2:	1c85      	addeq	r5, r0, #2
 8019ca4:	e7cd      	b.n	8019c42 <_strtoul_l.constprop.0+0x22>
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d1d8      	bne.n	8019c5c <_strtoul_l.constprop.0+0x3c>
 8019caa:	2c30      	cmp	r4, #48	@ 0x30
 8019cac:	bf0c      	ite	eq
 8019cae:	2308      	moveq	r3, #8
 8019cb0:	230a      	movne	r3, #10
 8019cb2:	e7d3      	b.n	8019c5c <_strtoul_l.constprop.0+0x3c>
 8019cb4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019cb8:	f1bc 0f19 	cmp.w	ip, #25
 8019cbc:	d801      	bhi.n	8019cc2 <_strtoul_l.constprop.0+0xa2>
 8019cbe:	3c37      	subs	r4, #55	@ 0x37
 8019cc0:	e7dc      	b.n	8019c7c <_strtoul_l.constprop.0+0x5c>
 8019cc2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019cc6:	f1bc 0f19 	cmp.w	ip, #25
 8019cca:	d804      	bhi.n	8019cd6 <_strtoul_l.constprop.0+0xb6>
 8019ccc:	3c57      	subs	r4, #87	@ 0x57
 8019cce:	e7d5      	b.n	8019c7c <_strtoul_l.constprop.0+0x5c>
 8019cd0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019cd4:	e7df      	b.n	8019c96 <_strtoul_l.constprop.0+0x76>
 8019cd6:	1c73      	adds	r3, r6, #1
 8019cd8:	d106      	bne.n	8019ce8 <_strtoul_l.constprop.0+0xc8>
 8019cda:	2322      	movs	r3, #34	@ 0x22
 8019cdc:	f8ce 3000 	str.w	r3, [lr]
 8019ce0:	4630      	mov	r0, r6
 8019ce2:	b932      	cbnz	r2, 8019cf2 <_strtoul_l.constprop.0+0xd2>
 8019ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ce8:	b107      	cbz	r7, 8019cec <_strtoul_l.constprop.0+0xcc>
 8019cea:	4240      	negs	r0, r0
 8019cec:	2a00      	cmp	r2, #0
 8019cee:	d0f9      	beq.n	8019ce4 <_strtoul_l.constprop.0+0xc4>
 8019cf0:	b106      	cbz	r6, 8019cf4 <_strtoul_l.constprop.0+0xd4>
 8019cf2:	1e69      	subs	r1, r5, #1
 8019cf4:	6011      	str	r1, [r2, #0]
 8019cf6:	e7f5      	b.n	8019ce4 <_strtoul_l.constprop.0+0xc4>
 8019cf8:	08021363 	.word	0x08021363

08019cfc <_strtoul_r>:
 8019cfc:	f7ff bf90 	b.w	8019c20 <_strtoul_l.constprop.0>

08019d00 <strtoul>:
 8019d00:	4613      	mov	r3, r2
 8019d02:	460a      	mov	r2, r1
 8019d04:	4601      	mov	r1, r0
 8019d06:	4802      	ldr	r0, [pc, #8]	@ (8019d10 <strtoul+0x10>)
 8019d08:	6800      	ldr	r0, [r0, #0]
 8019d0a:	f7ff bf89 	b.w	8019c20 <_strtoul_l.constprop.0>
 8019d0e:	bf00      	nop
 8019d10:	20000824 	.word	0x20000824

08019d14 <siscanf>:
 8019d14:	b40e      	push	{r1, r2, r3}
 8019d16:	b530      	push	{r4, r5, lr}
 8019d18:	b09c      	sub	sp, #112	@ 0x70
 8019d1a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8019d1c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8019d20:	f854 5b04 	ldr.w	r5, [r4], #4
 8019d24:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019d28:	9002      	str	r0, [sp, #8]
 8019d2a:	9006      	str	r0, [sp, #24]
 8019d2c:	f7e6 fa5a 	bl	80001e4 <strlen>
 8019d30:	4b0b      	ldr	r3, [pc, #44]	@ (8019d60 <siscanf+0x4c>)
 8019d32:	9003      	str	r0, [sp, #12]
 8019d34:	9007      	str	r0, [sp, #28]
 8019d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8019d38:	480a      	ldr	r0, [pc, #40]	@ (8019d64 <siscanf+0x50>)
 8019d3a:	9401      	str	r4, [sp, #4]
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8019d40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019d46:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019d4a:	462a      	mov	r2, r5
 8019d4c:	4623      	mov	r3, r4
 8019d4e:	a902      	add	r1, sp, #8
 8019d50:	6800      	ldr	r0, [r0, #0]
 8019d52:	f000 f89b 	bl	8019e8c <__ssvfiscanf_r>
 8019d56:	b01c      	add	sp, #112	@ 0x70
 8019d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019d5c:	b003      	add	sp, #12
 8019d5e:	4770      	bx	lr
 8019d60:	08018ac7 	.word	0x08018ac7
 8019d64:	20000824 	.word	0x20000824

08019d68 <_sungetc_r>:
 8019d68:	b538      	push	{r3, r4, r5, lr}
 8019d6a:	1c4b      	adds	r3, r1, #1
 8019d6c:	4614      	mov	r4, r2
 8019d6e:	d103      	bne.n	8019d78 <_sungetc_r+0x10>
 8019d70:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8019d74:	4628      	mov	r0, r5
 8019d76:	bd38      	pop	{r3, r4, r5, pc}
 8019d78:	8993      	ldrh	r3, [r2, #12]
 8019d7a:	f023 0320 	bic.w	r3, r3, #32
 8019d7e:	8193      	strh	r3, [r2, #12]
 8019d80:	6853      	ldr	r3, [r2, #4]
 8019d82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8019d84:	b2cd      	uxtb	r5, r1
 8019d86:	b18a      	cbz	r2, 8019dac <_sungetc_r+0x44>
 8019d88:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	dd08      	ble.n	8019da0 <_sungetc_r+0x38>
 8019d8e:	6823      	ldr	r3, [r4, #0]
 8019d90:	1e5a      	subs	r2, r3, #1
 8019d92:	6022      	str	r2, [r4, #0]
 8019d94:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019d98:	6863      	ldr	r3, [r4, #4]
 8019d9a:	3301      	adds	r3, #1
 8019d9c:	6063      	str	r3, [r4, #4]
 8019d9e:	e7e9      	b.n	8019d74 <_sungetc_r+0xc>
 8019da0:	4621      	mov	r1, r4
 8019da2:	f004 fb60 	bl	801e466 <__submore>
 8019da6:	2800      	cmp	r0, #0
 8019da8:	d0f1      	beq.n	8019d8e <_sungetc_r+0x26>
 8019daa:	e7e1      	b.n	8019d70 <_sungetc_r+0x8>
 8019dac:	6921      	ldr	r1, [r4, #16]
 8019dae:	6822      	ldr	r2, [r4, #0]
 8019db0:	b141      	cbz	r1, 8019dc4 <_sungetc_r+0x5c>
 8019db2:	4291      	cmp	r1, r2
 8019db4:	d206      	bcs.n	8019dc4 <_sungetc_r+0x5c>
 8019db6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8019dba:	42a9      	cmp	r1, r5
 8019dbc:	d102      	bne.n	8019dc4 <_sungetc_r+0x5c>
 8019dbe:	3a01      	subs	r2, #1
 8019dc0:	6022      	str	r2, [r4, #0]
 8019dc2:	e7ea      	b.n	8019d9a <_sungetc_r+0x32>
 8019dc4:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 8019dc8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8019dcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8019dce:	2303      	movs	r3, #3
 8019dd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8019dd2:	4623      	mov	r3, r4
 8019dd4:	f803 5f42 	strb.w	r5, [r3, #66]!
 8019dd8:	6023      	str	r3, [r4, #0]
 8019dda:	2301      	movs	r3, #1
 8019ddc:	e7de      	b.n	8019d9c <_sungetc_r+0x34>

08019dde <__ssrefill_r>:
 8019dde:	b510      	push	{r4, lr}
 8019de0:	460c      	mov	r4, r1
 8019de2:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8019de4:	b169      	cbz	r1, 8019e02 <__ssrefill_r+0x24>
 8019de6:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8019dea:	4299      	cmp	r1, r3
 8019dec:	d001      	beq.n	8019df2 <__ssrefill_r+0x14>
 8019dee:	f7ff fe13 	bl	8019a18 <_free_r>
 8019df2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8019df4:	6063      	str	r3, [r4, #4]
 8019df6:	2000      	movs	r0, #0
 8019df8:	6320      	str	r0, [r4, #48]	@ 0x30
 8019dfa:	b113      	cbz	r3, 8019e02 <__ssrefill_r+0x24>
 8019dfc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8019dfe:	6023      	str	r3, [r4, #0]
 8019e00:	bd10      	pop	{r4, pc}
 8019e02:	6923      	ldr	r3, [r4, #16]
 8019e04:	6023      	str	r3, [r4, #0]
 8019e06:	2300      	movs	r3, #0
 8019e08:	6063      	str	r3, [r4, #4]
 8019e0a:	89a3      	ldrh	r3, [r4, #12]
 8019e0c:	f043 0320 	orr.w	r3, r3, #32
 8019e10:	81a3      	strh	r3, [r4, #12]
 8019e12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019e16:	e7f3      	b.n	8019e00 <__ssrefill_r+0x22>

08019e18 <_sfread_r>:
 8019e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e1c:	461f      	mov	r7, r3
 8019e1e:	4613      	mov	r3, r2
 8019e20:	437b      	muls	r3, r7
 8019e22:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8019e24:	9000      	str	r0, [sp, #0]
 8019e26:	4688      	mov	r8, r1
 8019e28:	4691      	mov	r9, r2
 8019e2a:	d028      	beq.n	8019e7e <_sfread_r+0x66>
 8019e2c:	461e      	mov	r6, r3
 8019e2e:	f04f 0b00 	mov.w	fp, #0
 8019e32:	e9d4 1500 	ldrd	r1, r5, [r4]
 8019e36:	42b5      	cmp	r5, r6
 8019e38:	d30b      	bcc.n	8019e52 <_sfread_r+0x3a>
 8019e3a:	4632      	mov	r2, r6
 8019e3c:	4640      	mov	r0, r8
 8019e3e:	f7ff fd6f 	bl	8019920 <memcpy>
 8019e42:	6862      	ldr	r2, [r4, #4]
 8019e44:	6821      	ldr	r1, [r4, #0]
 8019e46:	1b92      	subs	r2, r2, r6
 8019e48:	4431      	add	r1, r6
 8019e4a:	6062      	str	r2, [r4, #4]
 8019e4c:	6021      	str	r1, [r4, #0]
 8019e4e:	463b      	mov	r3, r7
 8019e50:	e015      	b.n	8019e7e <_sfread_r+0x66>
 8019e52:	462a      	mov	r2, r5
 8019e54:	4640      	mov	r0, r8
 8019e56:	9301      	str	r3, [sp, #4]
 8019e58:	f7ff fd62 	bl	8019920 <memcpy>
 8019e5c:	6822      	ldr	r2, [r4, #0]
 8019e5e:	9800      	ldr	r0, [sp, #0]
 8019e60:	442a      	add	r2, r5
 8019e62:	e9c4 2b00 	strd	r2, fp, [r4]
 8019e66:	4621      	mov	r1, r4
 8019e68:	f7ff ffb9 	bl	8019dde <__ssrefill_r>
 8019e6c:	44a8      	add	r8, r5
 8019e6e:	9b01      	ldr	r3, [sp, #4]
 8019e70:	eba6 0a05 	sub.w	sl, r6, r5
 8019e74:	b138      	cbz	r0, 8019e86 <_sfread_r+0x6e>
 8019e76:	441d      	add	r5, r3
 8019e78:	1bad      	subs	r5, r5, r6
 8019e7a:	fbb5 f3f9 	udiv	r3, r5, r9
 8019e7e:	4618      	mov	r0, r3
 8019e80:	b003      	add	sp, #12
 8019e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e86:	4656      	mov	r6, sl
 8019e88:	e7d3      	b.n	8019e32 <_sfread_r+0x1a>
	...

08019e8c <__ssvfiscanf_r>:
 8019e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e90:	b0df      	sub	sp, #380	@ 0x17c
 8019e92:	af02      	add	r7, sp, #8
 8019e94:	460c      	mov	r4, r1
 8019e96:	623b      	str	r3, [r7, #32]
 8019e98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8019e9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8019e9e:	049d      	lsls	r5, r3, #18
 8019ea0:	60ba      	str	r2, [r7, #8]
 8019ea2:	d406      	bmi.n	8019eb2 <__ssvfiscanf_r+0x26>
 8019ea4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8019ea8:	818b      	strh	r3, [r1, #12]
 8019eaa:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8019eac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8019eb0:	664b      	str	r3, [r1, #100]	@ 0x64
 8019eb2:	2300      	movs	r3, #0
 8019eb4:	e9c7 3305 	strd	r3, r3, [r7, #20]
 8019eb8:	60fb      	str	r3, [r7, #12]
 8019eba:	469b      	mov	fp, r3
 8019ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ebe:	61fb      	str	r3, [r7, #28]
 8019ec0:	e005      	b.n	8019ece <__ssvfiscanf_r+0x42>
 8019ec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019ec4:	4621      	mov	r1, r4
 8019ec6:	f7ff ff8a 	bl	8019dde <__ssrefill_r>
 8019eca:	b168      	cbz	r0, 8019ee8 <__ssvfiscanf_r+0x5c>
 8019ecc:	60bd      	str	r5, [r7, #8]
 8019ece:	68bd      	ldr	r5, [r7, #8]
 8019ed0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ed6:	b333      	cbz	r3, 8019f26 <__ssvfiscanf_r+0x9a>
 8019ed8:	4a75      	ldr	r2, [pc, #468]	@ (801a0b0 <__ssvfiscanf_r+0x224>)
 8019eda:	5cd6      	ldrb	r6, [r2, r3]
 8019edc:	f016 0608 	ands.w	r6, r6, #8
 8019ee0:	d011      	beq.n	8019f06 <__ssvfiscanf_r+0x7a>
 8019ee2:	6863      	ldr	r3, [r4, #4]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	ddec      	ble.n	8019ec2 <__ssvfiscanf_r+0x36>
 8019ee8:	6823      	ldr	r3, [r4, #0]
 8019eea:	4971      	ldr	r1, [pc, #452]	@ (801a0b0 <__ssvfiscanf_r+0x224>)
 8019eec:	781a      	ldrb	r2, [r3, #0]
 8019eee:	5c8a      	ldrb	r2, [r1, r2]
 8019ef0:	0710      	lsls	r0, r2, #28
 8019ef2:	d5eb      	bpl.n	8019ecc <__ssvfiscanf_r+0x40>
 8019ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019ef6:	3201      	adds	r2, #1
 8019ef8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019efa:	6862      	ldr	r2, [r4, #4]
 8019efc:	3301      	adds	r3, #1
 8019efe:	3a01      	subs	r2, #1
 8019f00:	6062      	str	r2, [r4, #4]
 8019f02:	6023      	str	r3, [r4, #0]
 8019f04:	e7ed      	b.n	8019ee2 <__ssvfiscanf_r+0x56>
 8019f06:	2b25      	cmp	r3, #37	@ 0x25
 8019f08:	d15f      	bne.n	8019fca <__ssvfiscanf_r+0x13e>
 8019f0a:	62be      	str	r6, [r7, #40]	@ 0x28
 8019f0c:	462a      	mov	r2, r5
 8019f0e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8019f12:	60ba      	str	r2, [r7, #8]
 8019f14:	2b7a      	cmp	r3, #122	@ 0x7a
 8019f16:	d806      	bhi.n	8019f26 <__ssvfiscanf_r+0x9a>
 8019f18:	2b42      	cmp	r3, #66	@ 0x42
 8019f1a:	d809      	bhi.n	8019f30 <__ssvfiscanf_r+0xa4>
 8019f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f1e:	d079      	beq.n	801a014 <__ssvfiscanf_r+0x188>
 8019f20:	d844      	bhi.n	8019fac <__ssvfiscanf_r+0x120>
 8019f22:	2b25      	cmp	r3, #37	@ 0x25
 8019f24:	d050      	beq.n	8019fc8 <__ssvfiscanf_r+0x13c>
 8019f26:	f1bb 0f00 	cmp.w	fp, #0
 8019f2a:	f000 810e 	beq.w	801a14a <__ssvfiscanf_r+0x2be>
 8019f2e:	e107      	b.n	801a140 <__ssvfiscanf_r+0x2b4>
 8019f30:	3b43      	subs	r3, #67	@ 0x43
 8019f32:	2b37      	cmp	r3, #55	@ 0x37
 8019f34:	f200 80fd 	bhi.w	801a132 <__ssvfiscanf_r+0x2a6>
 8019f38:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019f3c:	00a40117 	.word	0x00a40117
 8019f40:	00fb00fb 	.word	0x00fb00fb
 8019f44:	00fb00fb 	.word	0x00fb00fb
 8019f48:	00fb00fb 	.word	0x00fb00fb
 8019f4c:	008e00fb 	.word	0x008e00fb
 8019f50:	00fb00fb 	.word	0x00fb00fb
 8019f54:	00fb00a8 	.word	0x00fb00a8
 8019f58:	00fb00fb 	.word	0x00fb00fb
 8019f5c:	00fb00c0 	.word	0x00fb00c0
 8019f60:	00fb00fb 	.word	0x00fb00fb
 8019f64:	00b400fb 	.word	0x00b400fb
 8019f68:	00fb00fb 	.word	0x00fb00fb
 8019f6c:	00fb010d 	.word	0x00fb010d
 8019f70:	00fb00fb 	.word	0x00fb00fb
 8019f74:	00fb00fb 	.word	0x00fb00fb
 8019f78:	00fb00fb 	.word	0x00fb00fb
 8019f7c:	00a60119 	.word	0x00a60119
 8019f80:	00fb00fb 	.word	0x00fb00fb
 8019f84:	008100fb 	.word	0x008100fb
 8019f88:	008e013e 	.word	0x008e013e
 8019f8c:	007300fb 	.word	0x007300fb
 8019f90:	01200095 	.word	0x01200095
 8019f94:	011d00aa 	.word	0x011d00aa
 8019f98:	00fb00fb 	.word	0x00fb00fb
 8019f9c:	009200c2 	.word	0x009200c2
 8019fa0:	00fb00b0 	.word	0x00fb00b0
 8019fa4:	00b400fb 	.word	0x00b400fb
 8019fa8:	009200fb 	.word	0x009200fb
 8019fac:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8019fb0:	2a09      	cmp	r2, #9
 8019fb2:	d8b8      	bhi.n	8019f26 <__ssvfiscanf_r+0x9a>
 8019fb4:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 8019fb8:	d1b5      	bne.n	8019f26 <__ssvfiscanf_r+0x9a>
 8019fba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019fbc:	220a      	movs	r2, #10
 8019fbe:	fb02 3301 	mla	r3, r2, r1, r3
 8019fc2:	3b30      	subs	r3, #48	@ 0x30
 8019fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019fc6:	e02a      	b.n	801a01e <__ssvfiscanf_r+0x192>
 8019fc8:	68bd      	ldr	r5, [r7, #8]
 8019fca:	6863      	ldr	r3, [r4, #4]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	dd0e      	ble.n	8019fee <__ssvfiscanf_r+0x162>
 8019fd0:	6823      	ldr	r3, [r4, #0]
 8019fd2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019fd6:	7819      	ldrb	r1, [r3, #0]
 8019fd8:	4291      	cmp	r1, r2
 8019fda:	d1a4      	bne.n	8019f26 <__ssvfiscanf_r+0x9a>
 8019fdc:	3301      	adds	r3, #1
 8019fde:	6862      	ldr	r2, [r4, #4]
 8019fe0:	6023      	str	r3, [r4, #0]
 8019fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fe4:	3a01      	subs	r2, #1
 8019fe6:	3301      	adds	r3, #1
 8019fe8:	6062      	str	r2, [r4, #4]
 8019fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019fec:	e76e      	b.n	8019ecc <__ssvfiscanf_r+0x40>
 8019fee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019ff0:	4621      	mov	r1, r4
 8019ff2:	f7ff fef4 	bl	8019dde <__ssrefill_r>
 8019ff6:	2800      	cmp	r0, #0
 8019ff8:	d0ea      	beq.n	8019fd0 <__ssvfiscanf_r+0x144>
 8019ffa:	69fb      	ldr	r3, [r7, #28]
 8019ffc:	b113      	cbz	r3, 801a004 <__ssvfiscanf_r+0x178>
 8019ffe:	89a3      	ldrh	r3, [r4, #12]
 801a000:	065b      	lsls	r3, r3, #25
 801a002:	d590      	bpl.n	8019f26 <__ssvfiscanf_r+0x9a>
 801a004:	f1bb 0f00 	cmp.w	fp, #0
 801a008:	f040 8654 	bne.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a00c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a010:	61fb      	str	r3, [r7, #28]
 801a012:	e09a      	b.n	801a14a <__ssvfiscanf_r+0x2be>
 801a014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a016:	4333      	orrs	r3, r6
 801a018:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a01a:	d184      	bne.n	8019f26 <__ssvfiscanf_r+0x9a>
 801a01c:	2610      	movs	r6, #16
 801a01e:	68bd      	ldr	r5, [r7, #8]
 801a020:	e774      	b.n	8019f0c <__ssvfiscanf_r+0x80>
 801a022:	0731      	lsls	r1, r6, #28
 801a024:	f47f af7f 	bne.w	8019f26 <__ssvfiscanf_r+0x9a>
 801a028:	786b      	ldrb	r3, [r5, #1]
 801a02a:	2b6c      	cmp	r3, #108	@ 0x6c
 801a02c:	d104      	bne.n	801a038 <__ssvfiscanf_r+0x1ac>
 801a02e:	1cab      	adds	r3, r5, #2
 801a030:	60bb      	str	r3, [r7, #8]
 801a032:	f046 0602 	orr.w	r6, r6, #2
 801a036:	e7f2      	b.n	801a01e <__ssvfiscanf_r+0x192>
 801a038:	f046 0601 	orr.w	r6, r6, #1
 801a03c:	e7ef      	b.n	801a01e <__ssvfiscanf_r+0x192>
 801a03e:	0732      	lsls	r2, r6, #28
 801a040:	f47f af71 	bne.w	8019f26 <__ssvfiscanf_r+0x9a>
 801a044:	786b      	ldrb	r3, [r5, #1]
 801a046:	2b68      	cmp	r3, #104	@ 0x68
 801a048:	bf03      	ittte	eq
 801a04a:	1cab      	addeq	r3, r5, #2
 801a04c:	60bb      	streq	r3, [r7, #8]
 801a04e:	f046 0608 	orreq.w	r6, r6, #8
 801a052:	f046 0604 	orrne.w	r6, r6, #4
 801a056:	e7e2      	b.n	801a01e <__ssvfiscanf_r+0x192>
 801a058:	0733      	lsls	r3, r6, #28
 801a05a:	f47f af64 	bne.w	8019f26 <__ssvfiscanf_r+0x9a>
 801a05e:	e7e8      	b.n	801a032 <__ssvfiscanf_r+0x1a6>
 801a060:	0735      	lsls	r5, r6, #28
 801a062:	d0dc      	beq.n	801a01e <__ssvfiscanf_r+0x192>
 801a064:	e75f      	b.n	8019f26 <__ssvfiscanf_r+0x9a>
 801a066:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 801a06a:	f47f af5c 	bne.w	8019f26 <__ssvfiscanf_r+0x9a>
 801a06e:	f1bb 0f00 	cmp.w	fp, #0
 801a072:	d104      	bne.n	801a07e <__ssvfiscanf_r+0x1f2>
 801a074:	b082      	sub	sp, #8
 801a076:	f10d 0b08 	add.w	fp, sp, #8
 801a07a:	e9cb 3300 	strd	r3, r3, [fp]
 801a07e:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 801a082:	e7cc      	b.n	801a01e <__ssvfiscanf_r+0x192>
 801a084:	f046 0601 	orr.w	r6, r6, #1
 801a088:	4b0a      	ldr	r3, [pc, #40]	@ (801a0b4 <__ssvfiscanf_r+0x228>)
 801a08a:	e008      	b.n	801a09e <__ssvfiscanf_r+0x212>
 801a08c:	f046 0601 	orr.w	r6, r6, #1
 801a090:	4b09      	ldr	r3, [pc, #36]	@ (801a0b8 <__ssvfiscanf_r+0x22c>)
 801a092:	60fb      	str	r3, [r7, #12]
 801a094:	2308      	movs	r3, #8
 801a096:	617b      	str	r3, [r7, #20]
 801a098:	2503      	movs	r5, #3
 801a09a:	e012      	b.n	801a0c2 <__ssvfiscanf_r+0x236>
 801a09c:	4b06      	ldr	r3, [pc, #24]	@ (801a0b8 <__ssvfiscanf_r+0x22c>)
 801a09e:	60fb      	str	r3, [r7, #12]
 801a0a0:	230a      	movs	r3, #10
 801a0a2:	e7f8      	b.n	801a096 <__ssvfiscanf_r+0x20a>
 801a0a4:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 801a0a8:	4b03      	ldr	r3, [pc, #12]	@ (801a0b8 <__ssvfiscanf_r+0x22c>)
 801a0aa:	60fb      	str	r3, [r7, #12]
 801a0ac:	2310      	movs	r3, #16
 801a0ae:	e7f2      	b.n	801a096 <__ssvfiscanf_r+0x20a>
 801a0b0:	08021363 	.word	0x08021363
 801a0b4:	0801ff71 	.word	0x0801ff71
 801a0b8:	08019cfd 	.word	0x08019cfd
 801a0bc:	f046 0601 	orr.w	r6, r6, #1
 801a0c0:	2502      	movs	r5, #2
 801a0c2:	6863      	ldr	r3, [r4, #4]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	dd7b      	ble.n	801a1c0 <__ssvfiscanf_r+0x334>
 801a0c8:	0671      	lsls	r1, r6, #25
 801a0ca:	d407      	bmi.n	801a0dc <__ssvfiscanf_r+0x250>
 801a0cc:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 801a458 <__ssvfiscanf_r+0x5cc>
 801a0d0:	6823      	ldr	r3, [r4, #0]
 801a0d2:	781a      	ldrb	r2, [r3, #0]
 801a0d4:	f818 2002 	ldrb.w	r2, [r8, r2]
 801a0d8:	0712      	lsls	r2, r2, #28
 801a0da:	d479      	bmi.n	801a1d0 <__ssvfiscanf_r+0x344>
 801a0dc:	2d02      	cmp	r5, #2
 801a0de:	f000 836f 	beq.w	801a7c0 <__ssvfiscanf_r+0x934>
 801a0e2:	2d03      	cmp	r5, #3
 801a0e4:	f000 84f6 	beq.w	801aad4 <__ssvfiscanf_r+0xc48>
 801a0e8:	f006 0310 	and.w	r3, r6, #16
 801a0ec:	2d01      	cmp	r5, #1
 801a0ee:	613b      	str	r3, [r7, #16]
 801a0f0:	f006 0501 	and.w	r5, r6, #1
 801a0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0f6:	f000 81b1 	beq.w	801a45c <__ssvfiscanf_r+0x5d0>
 801a0fa:	2b01      	cmp	r3, #1
 801a0fc:	bf38      	it	cc
 801a0fe:	2301      	movcc	r3, #1
 801a100:	4698      	mov	r8, r3
 801a102:	693b      	ldr	r3, [r7, #16]
 801a104:	2d00      	cmp	r5, #0
 801a106:	f000 813b 	beq.w	801a380 <__ssvfiscanf_r+0x4f4>
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	f040 80d8 	bne.w	801a2c0 <__ssvfiscanf_r+0x434>
 801a110:	6a3b      	ldr	r3, [r7, #32]
 801a112:	0636      	lsls	r6, r6, #24
 801a114:	f853 5b04 	ldr.w	r5, [r3], #4
 801a118:	623b      	str	r3, [r7, #32]
 801a11a:	f140 80d7 	bpl.w	801a2cc <__ssvfiscanf_r+0x440>
 801a11e:	b145      	cbz	r5, 801a132 <__ssvfiscanf_r+0x2a6>
 801a120:	2080      	movs	r0, #128	@ 0x80
 801a122:	f7fe f947 	bl	80183b4 <malloc>
 801a126:	4606      	mov	r6, r0
 801a128:	2800      	cmp	r0, #0
 801a12a:	d164      	bne.n	801a1f6 <__ssvfiscanf_r+0x36a>
 801a12c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a130:	61fb      	str	r3, [r7, #28]
 801a132:	f1bb 0f00 	cmp.w	fp, #0
 801a136:	d008      	beq.n	801a14a <__ssvfiscanf_r+0x2be>
 801a138:	69fb      	ldr	r3, [r7, #28]
 801a13a:	3301      	adds	r3, #1
 801a13c:	f000 85ba 	beq.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a140:	f8db 0000 	ldr.w	r0, [fp]
 801a144:	b108      	cbz	r0, 801a14a <__ssvfiscanf_r+0x2be>
 801a146:	f7fe f93d 	bl	80183c4 <free>
 801a14a:	69f8      	ldr	r0, [r7, #28]
 801a14c:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 801a150:	46bd      	mov	sp, r7
 801a152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a156:	68b9      	ldr	r1, [r7, #8]
 801a158:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 801a15c:	f004 f94a 	bl	801e3f4 <__sccl>
 801a160:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 801a164:	60b8      	str	r0, [r7, #8]
 801a166:	2501      	movs	r5, #1
 801a168:	e7ab      	b.n	801a0c2 <__ssvfiscanf_r+0x236>
 801a16a:	f046 0601 	orr.w	r6, r6, #1
 801a16e:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 801a172:	2500      	movs	r5, #0
 801a174:	e7a5      	b.n	801a0c2 <__ssvfiscanf_r+0x236>
 801a176:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 801a17a:	e795      	b.n	801a0a8 <__ssvfiscanf_r+0x21c>
 801a17c:	06f0      	lsls	r0, r6, #27
 801a17e:	f53f aea6 	bmi.w	8019ece <__ssvfiscanf_r+0x42>
 801a182:	6a3a      	ldr	r2, [r7, #32]
 801a184:	0731      	lsls	r1, r6, #28
 801a186:	f852 3b04 	ldr.w	r3, [r2], #4
 801a18a:	623a      	str	r2, [r7, #32]
 801a18c:	d502      	bpl.n	801a194 <__ssvfiscanf_r+0x308>
 801a18e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a190:	701a      	strb	r2, [r3, #0]
 801a192:	e69c      	b.n	8019ece <__ssvfiscanf_r+0x42>
 801a194:	0772      	lsls	r2, r6, #29
 801a196:	d502      	bpl.n	801a19e <__ssvfiscanf_r+0x312>
 801a198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a19a:	801a      	strh	r2, [r3, #0]
 801a19c:	e697      	b.n	8019ece <__ssvfiscanf_r+0x42>
 801a19e:	07f5      	lsls	r5, r6, #31
 801a1a0:	d502      	bpl.n	801a1a8 <__ssvfiscanf_r+0x31c>
 801a1a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a1a4:	601a      	str	r2, [r3, #0]
 801a1a6:	e692      	b.n	8019ece <__ssvfiscanf_r+0x42>
 801a1a8:	07b0      	lsls	r0, r6, #30
 801a1aa:	d5fa      	bpl.n	801a1a2 <__ssvfiscanf_r+0x316>
 801a1ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a1ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a1b0:	17d2      	asrs	r2, r2, #31
 801a1b2:	e9c3 1200 	strd	r1, r2, [r3]
 801a1b6:	e68a      	b.n	8019ece <__ssvfiscanf_r+0x42>
 801a1b8:	4ba6      	ldr	r3, [pc, #664]	@ (801a454 <__ssvfiscanf_r+0x5c8>)
 801a1ba:	60fb      	str	r3, [r7, #12]
 801a1bc:	2300      	movs	r3, #0
 801a1be:	e76a      	b.n	801a096 <__ssvfiscanf_r+0x20a>
 801a1c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a1c2:	4621      	mov	r1, r4
 801a1c4:	f7ff fe0b 	bl	8019dde <__ssrefill_r>
 801a1c8:	2800      	cmp	r0, #0
 801a1ca:	f43f af7d 	beq.w	801a0c8 <__ssvfiscanf_r+0x23c>
 801a1ce:	e714      	b.n	8019ffa <__ssvfiscanf_r+0x16e>
 801a1d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a1d2:	3201      	adds	r2, #1
 801a1d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a1d6:	6862      	ldr	r2, [r4, #4]
 801a1d8:	3a01      	subs	r2, #1
 801a1da:	2a00      	cmp	r2, #0
 801a1dc:	6062      	str	r2, [r4, #4]
 801a1de:	dd02      	ble.n	801a1e6 <__ssvfiscanf_r+0x35a>
 801a1e0:	3301      	adds	r3, #1
 801a1e2:	6023      	str	r3, [r4, #0]
 801a1e4:	e774      	b.n	801a0d0 <__ssvfiscanf_r+0x244>
 801a1e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a1e8:	4621      	mov	r1, r4
 801a1ea:	f7ff fdf8 	bl	8019dde <__ssrefill_r>
 801a1ee:	2800      	cmp	r0, #0
 801a1f0:	f43f af6e 	beq.w	801a0d0 <__ssvfiscanf_r+0x244>
 801a1f4:	e701      	b.n	8019ffa <__ssvfiscanf_r+0x16e>
 801a1f6:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 801a1fa:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 801a1fe:	6028      	str	r0, [r5, #0]
 801a200:	4599      	cmp	r9, r3
 801a202:	d314      	bcc.n	801a22e <__ssvfiscanf_r+0x3a2>
 801a204:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 801a208:	4293      	cmp	r3, r2
 801a20a:	f200 8553 	bhi.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a20e:	3308      	adds	r3, #8
 801a210:	fa1f fa83 	uxth.w	sl, r3
 801a214:	f8db 0000 	ldr.w	r0, [fp]
 801a218:	ea4f 018a 	mov.w	r1, sl, lsl #2
 801a21c:	f005 fc7e 	bl	801fb1c <realloc>
 801a220:	2800      	cmp	r0, #0
 801a222:	f000 8547 	beq.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a226:	f8cb 0000 	str.w	r0, [fp]
 801a22a:	f8ab a004 	strh.w	sl, [fp, #4]
 801a22e:	f8db 3000 	ldr.w	r3, [fp]
 801a232:	f109 0201 	add.w	r2, r9, #1
 801a236:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 801a23a:	46aa      	mov	sl, r5
 801a23c:	f8ab 2006 	strh.w	r2, [fp, #6]
 801a240:	4635      	mov	r5, r6
 801a242:	f04f 0920 	mov.w	r9, #32
 801a246:	2200      	movs	r2, #0
 801a248:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a24a:	f004 fa4b 	bl	801e6e4 <__locale_mb_cur_max>
 801a24e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a250:	4290      	cmp	r0, r2
 801a252:	f43f aed2 	beq.w	8019ffa <__ssvfiscanf_r+0x16e>
 801a256:	6821      	ldr	r1, [r4, #0]
 801a258:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 801a25c:	f811 0b01 	ldrb.w	r0, [r1], #1
 801a260:	f80c 0002 	strb.w	r0, [ip, r2]
 801a264:	1c53      	adds	r3, r2, #1
 801a266:	6862      	ldr	r2, [r4, #4]
 801a268:	3a01      	subs	r2, #1
 801a26a:	e9c4 1200 	strd	r1, r2, [r4]
 801a26e:	69ba      	ldr	r2, [r7, #24]
 801a270:	2a03      	cmp	r2, #3
 801a272:	d102      	bne.n	801a27a <__ssvfiscanf_r+0x3ee>
 801a274:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a276:	2a04      	cmp	r2, #4
 801a278:	d007      	beq.n	801a28a <__ssvfiscanf_r+0x3fe>
 801a27a:	2208      	movs	r2, #8
 801a27c:	2100      	movs	r1, #0
 801a27e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 801a282:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a284:	f7fe fc9a 	bl	8018bbc <memset>
 801a288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a28a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801a28e:	9200      	str	r2, [sp, #0]
 801a290:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a292:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a294:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801a298:	4629      	mov	r1, r5
 801a29a:	f005 ffa1 	bl	80201e0 <_mbrtowc_r>
 801a29e:	4603      	mov	r3, r0
 801a2a0:	61b8      	str	r0, [r7, #24]
 801a2a2:	1c58      	adds	r0, r3, #1
 801a2a4:	f43f aea9 	beq.w	8019ffa <__ssvfiscanf_r+0x16e>
 801a2a8:	461a      	mov	r2, r3
 801a2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2ac:	b9b2      	cbnz	r2, 801a2dc <__ssvfiscanf_r+0x450>
 801a2ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a2b0:	441a      	add	r2, r3
 801a2b2:	4613      	mov	r3, r2
 801a2b4:	693a      	ldr	r2, [r7, #16]
 801a2b6:	b172      	cbz	r2, 801a2d6 <__ssvfiscanf_r+0x44a>
 801a2b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a2ba:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801a2be:	e019      	b.n	801a2f4 <__ssvfiscanf_r+0x468>
 801a2c0:	f04f 0900 	mov.w	r9, #0
 801a2c4:	464e      	mov	r6, r9
 801a2c6:	46ca      	mov	sl, r9
 801a2c8:	464d      	mov	r5, r9
 801a2ca:	e7bc      	b.n	801a246 <__ssvfiscanf_r+0x3ba>
 801a2cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801a2d0:	464e      	mov	r6, r9
 801a2d2:	46ca      	mov	sl, r9
 801a2d4:	e7b7      	b.n	801a246 <__ssvfiscanf_r+0x3ba>
 801a2d6:	693a      	ldr	r2, [r7, #16]
 801a2d8:	602a      	str	r2, [r5, #0]
 801a2da:	e7ed      	b.n	801a2b8 <__ssvfiscanf_r+0x42c>
 801a2dc:	69ba      	ldr	r2, [r7, #24]
 801a2de:	3202      	adds	r2, #2
 801a2e0:	d024      	beq.n	801a32c <__ssvfiscanf_r+0x4a0>
 801a2e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a2e4:	441a      	add	r2, r3
 801a2e6:	69bb      	ldr	r3, [r7, #24]
 801a2e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a2ea:	2b03      	cmp	r3, #3
 801a2ec:	d1e5      	bne.n	801a2ba <__ssvfiscanf_r+0x42e>
 801a2ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a2f0:	2b04      	cmp	r3, #4
 801a2f2:	d1e2      	bne.n	801a2ba <__ssvfiscanf_r+0x42e>
 801a2f4:	693b      	ldr	r3, [r7, #16]
 801a2f6:	b9bb      	cbnz	r3, 801a328 <__ssvfiscanf_r+0x49c>
 801a2f8:	f1ba 0f00 	cmp.w	sl, #0
 801a2fc:	d013      	beq.n	801a326 <__ssvfiscanf_r+0x49a>
 801a2fe:	1bab      	subs	r3, r5, r6
 801a300:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 801a304:	d80f      	bhi.n	801a326 <__ssvfiscanf_r+0x49a>
 801a306:	4630      	mov	r0, r6
 801a308:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801a30c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a30e:	f005 fc05 	bl	801fb1c <realloc>
 801a312:	4606      	mov	r6, r0
 801a314:	2800      	cmp	r0, #0
 801a316:	f43f af09 	beq.w	801a12c <__ssvfiscanf_r+0x2a0>
 801a31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a31c:	f8ca 0000 	str.w	r0, [sl]
 801a320:	18c5      	adds	r5, r0, r3
 801a322:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a326:	3504      	adds	r5, #4
 801a328:	2200      	movs	r2, #0
 801a32a:	e000      	b.n	801a32e <__ssvfiscanf_r+0x4a2>
 801a32c:	461a      	mov	r2, r3
 801a32e:	6863      	ldr	r3, [r4, #4]
 801a330:	2b00      	cmp	r3, #0
 801a332:	dc13      	bgt.n	801a35c <__ssvfiscanf_r+0x4d0>
 801a334:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a336:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a338:	4621      	mov	r1, r4
 801a33a:	f7ff fd50 	bl	8019dde <__ssrefill_r>
 801a33e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a340:	b160      	cbz	r0, 801a35c <__ssvfiscanf_r+0x4d0>
 801a342:	2a00      	cmp	r2, #0
 801a344:	f47f ae59 	bne.w	8019ffa <__ssvfiscanf_r+0x16e>
 801a348:	f1ba 0f00 	cmp.w	sl, #0
 801a34c:	d10b      	bne.n	801a366 <__ssvfiscanf_r+0x4da>
 801a34e:	693b      	ldr	r3, [r7, #16]
 801a350:	2b00      	cmp	r3, #0
 801a352:	f47f adbc 	bne.w	8019ece <__ssvfiscanf_r+0x42>
 801a356:	69fb      	ldr	r3, [r7, #28]
 801a358:	3301      	adds	r3, #1
 801a35a:	e5b0      	b.n	8019ebe <__ssvfiscanf_r+0x32>
 801a35c:	f1b8 0f00 	cmp.w	r8, #0
 801a360:	f47f af72 	bne.w	801a248 <__ssvfiscanf_r+0x3bc>
 801a364:	e7f0      	b.n	801a348 <__ssvfiscanf_r+0x4bc>
 801a366:	1ba9      	subs	r1, r5, r6
 801a368:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 801a36c:	d9ef      	bls.n	801a34e <__ssvfiscanf_r+0x4c2>
 801a36e:	f8da 0000 	ldr.w	r0, [sl]
 801a372:	f005 fbd3 	bl	801fb1c <realloc>
 801a376:	2800      	cmp	r0, #0
 801a378:	d0e9      	beq.n	801a34e <__ssvfiscanf_r+0x4c2>
 801a37a:	f8ca 0000 	str.w	r0, [sl]
 801a37e:	e7e6      	b.n	801a34e <__ssvfiscanf_r+0x4c2>
 801a380:	b1db      	cbz	r3, 801a3ba <__ssvfiscanf_r+0x52e>
 801a382:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a386:	4598      	cmp	r8, r3
 801a388:	dd10      	ble.n	801a3ac <__ssvfiscanf_r+0x520>
 801a38a:	441a      	add	r2, r3
 801a38c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a38e:	6022      	str	r2, [r4, #0]
 801a390:	4621      	mov	r1, r4
 801a392:	441d      	add	r5, r3
 801a394:	eba8 0803 	sub.w	r8, r8, r3
 801a398:	f7ff fd21 	bl	8019dde <__ssrefill_r>
 801a39c:	2800      	cmp	r0, #0
 801a39e:	d0f0      	beq.n	801a382 <__ssvfiscanf_r+0x4f6>
 801a3a0:	2d00      	cmp	r5, #0
 801a3a2:	f43f ae2a 	beq.w	8019ffa <__ssvfiscanf_r+0x16e>
 801a3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3a8:	442b      	add	r3, r5
 801a3aa:	e201      	b.n	801a7b0 <__ssvfiscanf_r+0x924>
 801a3ac:	eba3 0308 	sub.w	r3, r3, r8
 801a3b0:	4442      	add	r2, r8
 801a3b2:	4445      	add	r5, r8
 801a3b4:	6063      	str	r3, [r4, #4]
 801a3b6:	6022      	str	r2, [r4, #0]
 801a3b8:	e7f5      	b.n	801a3a6 <__ssvfiscanf_r+0x51a>
 801a3ba:	6a3b      	ldr	r3, [r7, #32]
 801a3bc:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 801a3c0:	f853 5b04 	ldr.w	r5, [r3], #4
 801a3c4:	623b      	str	r3, [r7, #32]
 801a3c6:	d02d      	beq.n	801a424 <__ssvfiscanf_r+0x598>
 801a3c8:	2d00      	cmp	r5, #0
 801a3ca:	f43f adac 	beq.w	8019f26 <__ssvfiscanf_r+0x9a>
 801a3ce:	4640      	mov	r0, r8
 801a3d0:	f7fd fff0 	bl	80183b4 <malloc>
 801a3d4:	4681      	mov	r9, r0
 801a3d6:	2800      	cmp	r0, #0
 801a3d8:	f43f ae14 	beq.w	801a004 <__ssvfiscanf_r+0x178>
 801a3dc:	f8bb a006 	ldrh.w	sl, [fp, #6]
 801a3e0:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 801a3e4:	6028      	str	r0, [r5, #0]
 801a3e6:	45b2      	cmp	sl, r6
 801a3e8:	d312      	bcc.n	801a410 <__ssvfiscanf_r+0x584>
 801a3ea:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 801a3ee:	429e      	cmp	r6, r3
 801a3f0:	f200 8460 	bhi.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a3f4:	3608      	adds	r6, #8
 801a3f6:	b2b6      	uxth	r6, r6
 801a3f8:	f8db 0000 	ldr.w	r0, [fp]
 801a3fc:	00b1      	lsls	r1, r6, #2
 801a3fe:	f005 fb8d 	bl	801fb1c <realloc>
 801a402:	2800      	cmp	r0, #0
 801a404:	f000 8456 	beq.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a408:	f8cb 0000 	str.w	r0, [fp]
 801a40c:	f8ab 6004 	strh.w	r6, [fp, #4]
 801a410:	f8db 3000 	ldr.w	r3, [fp]
 801a414:	f10a 0201 	add.w	r2, sl, #1
 801a418:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 801a41c:	462e      	mov	r6, r5
 801a41e:	f8ab 2006 	strh.w	r2, [fp, #6]
 801a422:	464d      	mov	r5, r9
 801a424:	9400      	str	r4, [sp, #0]
 801a426:	4629      	mov	r1, r5
 801a428:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a42a:	4643      	mov	r3, r8
 801a42c:	2201      	movs	r2, #1
 801a42e:	f7ff fcf3 	bl	8019e18 <_sfread_r>
 801a432:	4605      	mov	r5, r0
 801a434:	2800      	cmp	r0, #0
 801a436:	f43f ade0 	beq.w	8019ffa <__ssvfiscanf_r+0x16e>
 801a43a:	b13e      	cbz	r6, 801a44c <__ssvfiscanf_r+0x5c0>
 801a43c:	4580      	cmp	r8, r0
 801a43e:	d905      	bls.n	801a44c <__ssvfiscanf_r+0x5c0>
 801a440:	4601      	mov	r1, r0
 801a442:	6830      	ldr	r0, [r6, #0]
 801a444:	f005 fb6a 	bl	801fb1c <realloc>
 801a448:	b100      	cbz	r0, 801a44c <__ssvfiscanf_r+0x5c0>
 801a44a:	6030      	str	r0, [r6, #0]
 801a44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a44e:	442b      	add	r3, r5
 801a450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a452:	e780      	b.n	801a356 <__ssvfiscanf_r+0x4ca>
 801a454:	0801ff71 	.word	0x0801ff71
 801a458:	08021363 	.word	0x08021363
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	bf08      	it	eq
 801a460:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 801a464:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a466:	693b      	ldr	r3, [r7, #16]
 801a468:	2d00      	cmp	r5, #0
 801a46a:	f000 8100 	beq.w	801a66e <__ssvfiscanf_r+0x7e2>
 801a46e:	2b00      	cmp	r3, #0
 801a470:	f040 80a5 	bne.w	801a5be <__ssvfiscanf_r+0x732>
 801a474:	6a3b      	ldr	r3, [r7, #32]
 801a476:	0631      	lsls	r1, r6, #24
 801a478:	f853 5b04 	ldr.w	r5, [r3], #4
 801a47c:	623b      	str	r3, [r7, #32]
 801a47e:	f140 80a5 	bpl.w	801a5cc <__ssvfiscanf_r+0x740>
 801a482:	2d00      	cmp	r5, #0
 801a484:	f43f ae55 	beq.w	801a132 <__ssvfiscanf_r+0x2a6>
 801a488:	2080      	movs	r0, #128	@ 0x80
 801a48a:	f7fd ff93 	bl	80183b4 <malloc>
 801a48e:	4680      	mov	r8, r0
 801a490:	2800      	cmp	r0, #0
 801a492:	f43f ae4b 	beq.w	801a12c <__ssvfiscanf_r+0x2a0>
 801a496:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 801a49a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 801a49e:	6028      	str	r0, [r5, #0]
 801a4a0:	429e      	cmp	r6, r3
 801a4a2:	d314      	bcc.n	801a4ce <__ssvfiscanf_r+0x642>
 801a4a4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 801a4a8:	4293      	cmp	r3, r2
 801a4aa:	f200 8403 	bhi.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a4ae:	3308      	adds	r3, #8
 801a4b0:	fa1f f983 	uxth.w	r9, r3
 801a4b4:	f8db 0000 	ldr.w	r0, [fp]
 801a4b8:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801a4bc:	f005 fb2e 	bl	801fb1c <realloc>
 801a4c0:	2800      	cmp	r0, #0
 801a4c2:	f000 83f7 	beq.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a4c6:	f8cb 0000 	str.w	r0, [fp]
 801a4ca:	f8ab 9004 	strh.w	r9, [fp, #4]
 801a4ce:	f8db 3000 	ldr.w	r3, [fp]
 801a4d2:	1c72      	adds	r2, r6, #1
 801a4d4:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 801a4d8:	46aa      	mov	sl, r5
 801a4da:	f8ab 2006 	strh.w	r2, [fp, #6]
 801a4de:	4645      	mov	r5, r8
 801a4e0:	f04f 0920 	mov.w	r9, #32
 801a4e4:	2600      	movs	r6, #0
 801a4e6:	f004 f8fd 	bl	801e6e4 <__locale_mb_cur_max>
 801a4ea:	4286      	cmp	r6, r0
 801a4ec:	f43f ad85 	beq.w	8019ffa <__ssvfiscanf_r+0x16e>
 801a4f0:	1c73      	adds	r3, r6, #1
 801a4f2:	607b      	str	r3, [r7, #4]
 801a4f4:	6823      	ldr	r3, [r4, #0]
 801a4f6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801a4fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a4fe:	558a      	strb	r2, [r1, r6]
 801a500:	6862      	ldr	r2, [r4, #4]
 801a502:	3a01      	subs	r2, #1
 801a504:	e9c4 3200 	strd	r3, r2, [r4]
 801a508:	69bb      	ldr	r3, [r7, #24]
 801a50a:	2b03      	cmp	r3, #3
 801a50c:	d102      	bne.n	801a514 <__ssvfiscanf_r+0x688>
 801a50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a510:	2b04      	cmp	r3, #4
 801a512:	d005      	beq.n	801a520 <__ssvfiscanf_r+0x694>
 801a514:	2208      	movs	r2, #8
 801a516:	2100      	movs	r1, #0
 801a518:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 801a51c:	f7fe fb4e 	bl	8018bbc <memset>
 801a520:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801a524:	9300      	str	r3, [sp, #0]
 801a526:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a52e:	4629      	mov	r1, r5
 801a530:	f005 fe56 	bl	80201e0 <_mbrtowc_r>
 801a534:	1c42      	adds	r2, r0, #1
 801a536:	61b8      	str	r0, [r7, #24]
 801a538:	f43f ad5f 	beq.w	8019ffa <__ssvfiscanf_r+0x16e>
 801a53c:	2800      	cmp	r0, #0
 801a53e:	d14a      	bne.n	801a5d6 <__ssvfiscanf_r+0x74a>
 801a540:	6028      	str	r0, [r5, #0]
 801a542:	682e      	ldr	r6, [r5, #0]
 801a544:	1c73      	adds	r3, r6, #1
 801a546:	d056      	beq.n	801a5f6 <__ssvfiscanf_r+0x76a>
 801a548:	2208      	movs	r2, #8
 801a54a:	2100      	movs	r1, #0
 801a54c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 801a550:	f7fe fb34 	bl	8018bbc <memset>
 801a554:	4b99      	ldr	r3, [pc, #612]	@ (801a7bc <__ssvfiscanf_r+0x930>)
 801a556:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a55c:	603b      	str	r3, [r7, #0]
 801a55e:	4632      	mov	r2, r6
 801a560:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801a564:	683e      	ldr	r6, [r7, #0]
 801a566:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a56a:	47b0      	blx	r6
 801a56c:	2801      	cmp	r0, #1
 801a56e:	d144      	bne.n	801a5fa <__ssvfiscanf_r+0x76e>
 801a570:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801a574:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801a578:	5c9b      	ldrb	r3, [r3, r2]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d148      	bne.n	801a610 <__ssvfiscanf_r+0x784>
 801a57e:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d13a      	bne.n	801a5fe <__ssvfiscanf_r+0x772>
 801a588:	693b      	ldr	r3, [r7, #16]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	f47f ac9f 	bne.w	8019ece <__ssvfiscanf_r+0x42>
 801a590:	602b      	str	r3, [r5, #0]
 801a592:	f1ba 0f00 	cmp.w	sl, #0
 801a596:	f43f aede 	beq.w	801a356 <__ssvfiscanf_r+0x4ca>
 801a59a:	eba5 0108 	sub.w	r1, r5, r8
 801a59e:	108b      	asrs	r3, r1, #2
 801a5a0:	3301      	adds	r3, #1
 801a5a2:	4599      	cmp	r9, r3
 801a5a4:	f67f aed7 	bls.w	801a356 <__ssvfiscanf_r+0x4ca>
 801a5a8:	f8da 0000 	ldr.w	r0, [sl]
 801a5ac:	3104      	adds	r1, #4
 801a5ae:	f005 fab5 	bl	801fb1c <realloc>
 801a5b2:	2800      	cmp	r0, #0
 801a5b4:	f43f aecf 	beq.w	801a356 <__ssvfiscanf_r+0x4ca>
 801a5b8:	f8ca 0000 	str.w	r0, [sl]
 801a5bc:	e6cb      	b.n	801a356 <__ssvfiscanf_r+0x4ca>
 801a5be:	f04f 0900 	mov.w	r9, #0
 801a5c2:	46c8      	mov	r8, r9
 801a5c4:	46ca      	mov	sl, r9
 801a5c6:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 801a5ca:	e78b      	b.n	801a4e4 <__ssvfiscanf_r+0x658>
 801a5cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801a5d0:	46c8      	mov	r8, r9
 801a5d2:	46ca      	mov	sl, r9
 801a5d4:	e786      	b.n	801a4e4 <__ssvfiscanf_r+0x658>
 801a5d6:	69bb      	ldr	r3, [r7, #24]
 801a5d8:	3302      	adds	r3, #2
 801a5da:	d1b2      	bne.n	801a542 <__ssvfiscanf_r+0x6b6>
 801a5dc:	687e      	ldr	r6, [r7, #4]
 801a5de:	6863      	ldr	r3, [r4, #4]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	dc3f      	bgt.n	801a664 <__ssvfiscanf_r+0x7d8>
 801a5e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a5e6:	4621      	mov	r1, r4
 801a5e8:	f7ff fbf9 	bl	8019dde <__ssrefill_r>
 801a5ec:	2800      	cmp	r0, #0
 801a5ee:	d039      	beq.n	801a664 <__ssvfiscanf_r+0x7d8>
 801a5f0:	2e00      	cmp	r6, #0
 801a5f2:	d0c9      	beq.n	801a588 <__ssvfiscanf_r+0x6fc>
 801a5f4:	e501      	b.n	8019ffa <__ssvfiscanf_r+0x16e>
 801a5f6:	4632      	mov	r2, r6
 801a5f8:	e7bc      	b.n	801a574 <__ssvfiscanf_r+0x6e8>
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	e7ba      	b.n	801a574 <__ssvfiscanf_r+0x6e8>
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a602:	3b01      	subs	r3, #1
 801a604:	4622      	mov	r2, r4
 801a606:	5cf1      	ldrb	r1, [r6, r3]
 801a608:	607b      	str	r3, [r7, #4]
 801a60a:	f7ff fbad 	bl	8019d68 <_sungetc_r>
 801a60e:	e7b8      	b.n	801a582 <__ssvfiscanf_r+0x6f6>
 801a610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a612:	687a      	ldr	r2, [r7, #4]
 801a614:	4413      	add	r3, r2
 801a616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a618:	69bb      	ldr	r3, [r7, #24]
 801a61a:	2b03      	cmp	r3, #3
 801a61c:	d102      	bne.n	801a624 <__ssvfiscanf_r+0x798>
 801a61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a620:	2b04      	cmp	r3, #4
 801a622:	d002      	beq.n	801a62a <__ssvfiscanf_r+0x79e>
 801a624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a626:	3b01      	subs	r3, #1
 801a628:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a62a:	693b      	ldr	r3, [r7, #16]
 801a62c:	b9c3      	cbnz	r3, 801a660 <__ssvfiscanf_r+0x7d4>
 801a62e:	3504      	adds	r5, #4
 801a630:	f1ba 0f00 	cmp.w	sl, #0
 801a634:	d014      	beq.n	801a660 <__ssvfiscanf_r+0x7d4>
 801a636:	eba5 0608 	sub.w	r6, r5, r8
 801a63a:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 801a63e:	d80d      	bhi.n	801a65c <__ssvfiscanf_r+0x7d0>
 801a640:	4640      	mov	r0, r8
 801a642:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801a646:	f005 fa69 	bl	801fb1c <realloc>
 801a64a:	4680      	mov	r8, r0
 801a64c:	2800      	cmp	r0, #0
 801a64e:	f43f ad6d 	beq.w	801a12c <__ssvfiscanf_r+0x2a0>
 801a652:	1985      	adds	r5, r0, r6
 801a654:	f8ca 0000 	str.w	r0, [sl]
 801a658:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a65c:	693e      	ldr	r6, [r7, #16]
 801a65e:	e7be      	b.n	801a5de <__ssvfiscanf_r+0x752>
 801a660:	2600      	movs	r6, #0
 801a662:	e7bc      	b.n	801a5de <__ssvfiscanf_r+0x752>
 801a664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a666:	2b00      	cmp	r3, #0
 801a668:	f47f af3d 	bne.w	801a4e6 <__ssvfiscanf_r+0x65a>
 801a66c:	e78c      	b.n	801a588 <__ssvfiscanf_r+0x6fc>
 801a66e:	b1e3      	cbz	r3, 801a6aa <__ssvfiscanf_r+0x81e>
 801a670:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 801a674:	6823      	ldr	r3, [r4, #0]
 801a676:	781a      	ldrb	r2, [r3, #0]
 801a678:	5cb2      	ldrb	r2, [r6, r2]
 801a67a:	b91a      	cbnz	r2, 801a684 <__ssvfiscanf_r+0x7f8>
 801a67c:	2d00      	cmp	r5, #0
 801a67e:	f47f ae92 	bne.w	801a3a6 <__ssvfiscanf_r+0x51a>
 801a682:	e450      	b.n	8019f26 <__ssvfiscanf_r+0x9a>
 801a684:	3301      	adds	r3, #1
 801a686:	6862      	ldr	r2, [r4, #4]
 801a688:	6023      	str	r3, [r4, #0]
 801a68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a68c:	3501      	adds	r5, #1
 801a68e:	3a01      	subs	r2, #1
 801a690:	42ab      	cmp	r3, r5
 801a692:	6062      	str	r2, [r4, #4]
 801a694:	f43f ae87 	beq.w	801a3a6 <__ssvfiscanf_r+0x51a>
 801a698:	2a00      	cmp	r2, #0
 801a69a:	dceb      	bgt.n	801a674 <__ssvfiscanf_r+0x7e8>
 801a69c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a69e:	4621      	mov	r1, r4
 801a6a0:	f7ff fb9d 	bl	8019dde <__ssrefill_r>
 801a6a4:	2800      	cmp	r0, #0
 801a6a6:	d0e5      	beq.n	801a674 <__ssvfiscanf_r+0x7e8>
 801a6a8:	e67d      	b.n	801a3a6 <__ssvfiscanf_r+0x51a>
 801a6aa:	6a3b      	ldr	r3, [r7, #32]
 801a6ac:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 801a6b0:	f853 5b04 	ldr.w	r5, [r3], #4
 801a6b4:	623b      	str	r3, [r7, #32]
 801a6b6:	d07e      	beq.n	801a7b6 <__ssvfiscanf_r+0x92a>
 801a6b8:	2d00      	cmp	r5, #0
 801a6ba:	f43f ac34 	beq.w	8019f26 <__ssvfiscanf_r+0x9a>
 801a6be:	2020      	movs	r0, #32
 801a6c0:	f7fd fe78 	bl	80183b4 <malloc>
 801a6c4:	4680      	mov	r8, r0
 801a6c6:	2800      	cmp	r0, #0
 801a6c8:	f43f ac9c 	beq.w	801a004 <__ssvfiscanf_r+0x178>
 801a6cc:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 801a6d0:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 801a6d4:	6028      	str	r0, [r5, #0]
 801a6d6:	45b1      	cmp	r9, r6
 801a6d8:	d312      	bcc.n	801a700 <__ssvfiscanf_r+0x874>
 801a6da:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 801a6de:	429e      	cmp	r6, r3
 801a6e0:	f200 82e8 	bhi.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a6e4:	3608      	adds	r6, #8
 801a6e6:	b2b6      	uxth	r6, r6
 801a6e8:	f8db 0000 	ldr.w	r0, [fp]
 801a6ec:	00b1      	lsls	r1, r6, #2
 801a6ee:	f005 fa15 	bl	801fb1c <realloc>
 801a6f2:	2800      	cmp	r0, #0
 801a6f4:	f000 82de 	beq.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a6f8:	f8cb 0000 	str.w	r0, [fp]
 801a6fc:	f8ab 6004 	strh.w	r6, [fp, #4]
 801a700:	f8db 3000 	ldr.w	r3, [fp]
 801a704:	f109 0201 	add.w	r2, r9, #1
 801a708:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 801a70c:	46aa      	mov	sl, r5
 801a70e:	f8ab 2006 	strh.w	r2, [fp, #6]
 801a712:	4645      	mov	r5, r8
 801a714:	f04f 0920 	mov.w	r9, #32
 801a718:	462e      	mov	r6, r5
 801a71a:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 801a71e:	6823      	ldr	r3, [r4, #0]
 801a720:	781a      	ldrb	r2, [r3, #0]
 801a722:	f818 2002 	ldrb.w	r2, [r8, r2]
 801a726:	b362      	cbz	r2, 801a782 <__ssvfiscanf_r+0x8f6>
 801a728:	6862      	ldr	r2, [r4, #4]
 801a72a:	3a01      	subs	r2, #1
 801a72c:	6062      	str	r2, [r4, #4]
 801a72e:	1c5a      	adds	r2, r3, #1
 801a730:	6022      	str	r2, [r4, #0]
 801a732:	781b      	ldrb	r3, [r3, #0]
 801a734:	f805 3b01 	strb.w	r3, [r5], #1
 801a738:	f1ba 0f00 	cmp.w	sl, #0
 801a73c:	d011      	beq.n	801a762 <__ssvfiscanf_r+0x8d6>
 801a73e:	1bab      	subs	r3, r5, r6
 801a740:	454b      	cmp	r3, r9
 801a742:	d30e      	bcc.n	801a762 <__ssvfiscanf_r+0x8d6>
 801a744:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a748:	4630      	mov	r0, r6
 801a74a:	4649      	mov	r1, r9
 801a74c:	613b      	str	r3, [r7, #16]
 801a74e:	f005 f9e5 	bl	801fb1c <realloc>
 801a752:	4606      	mov	r6, r0
 801a754:	2800      	cmp	r0, #0
 801a756:	f43f ac55 	beq.w	801a004 <__ssvfiscanf_r+0x178>
 801a75a:	693b      	ldr	r3, [r7, #16]
 801a75c:	f8ca 0000 	str.w	r0, [sl]
 801a760:	18c5      	adds	r5, r0, r3
 801a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a764:	3b01      	subs	r3, #1
 801a766:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a768:	d00b      	beq.n	801a782 <__ssvfiscanf_r+0x8f6>
 801a76a:	6863      	ldr	r3, [r4, #4]
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	dcd6      	bgt.n	801a71e <__ssvfiscanf_r+0x892>
 801a770:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a772:	4621      	mov	r1, r4
 801a774:	f7ff fb33 	bl	8019dde <__ssrefill_r>
 801a778:	2800      	cmp	r0, #0
 801a77a:	d0d0      	beq.n	801a71e <__ssvfiscanf_r+0x892>
 801a77c:	42b5      	cmp	r5, r6
 801a77e:	f43f ac3c 	beq.w	8019ffa <__ssvfiscanf_r+0x16e>
 801a782:	1bae      	subs	r6, r5, r6
 801a784:	f43f abcf 	beq.w	8019f26 <__ssvfiscanf_r+0x9a>
 801a788:	2300      	movs	r3, #0
 801a78a:	702b      	strb	r3, [r5, #0]
 801a78c:	f1ba 0f00 	cmp.w	sl, #0
 801a790:	d009      	beq.n	801a7a6 <__ssvfiscanf_r+0x91a>
 801a792:	1c71      	adds	r1, r6, #1
 801a794:	4589      	cmp	r9, r1
 801a796:	d906      	bls.n	801a7a6 <__ssvfiscanf_r+0x91a>
 801a798:	f8da 0000 	ldr.w	r0, [sl]
 801a79c:	f005 f9be 	bl	801fb1c <realloc>
 801a7a0:	b108      	cbz	r0, 801a7a6 <__ssvfiscanf_r+0x91a>
 801a7a2:	f8ca 0000 	str.w	r0, [sl]
 801a7a6:	69fb      	ldr	r3, [r7, #28]
 801a7a8:	3301      	adds	r3, #1
 801a7aa:	61fb      	str	r3, [r7, #28]
 801a7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7ae:	4433      	add	r3, r6
 801a7b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a7b2:	f7ff bb8c 	b.w	8019ece <__ssvfiscanf_r+0x42>
 801a7b6:	46ca      	mov	sl, r9
 801a7b8:	e7ae      	b.n	801a718 <__ssvfiscanf_r+0x88c>
 801a7ba:	bf00      	nop
 801a7bc:	200009a8 	.word	0x200009a8
 801a7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	bf08      	it	eq
 801a7c6:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 801a7ca:	f016 0501 	ands.w	r5, r6, #1
 801a7ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a7d0:	f006 0810 	and.w	r8, r6, #16
 801a7d4:	f000 80e1 	beq.w	801a99a <__ssvfiscanf_r+0xb0e>
 801a7d8:	f1b8 0f00 	cmp.w	r8, #0
 801a7dc:	f040 8089 	bne.w	801a8f2 <__ssvfiscanf_r+0xa66>
 801a7e0:	6a3b      	ldr	r3, [r7, #32]
 801a7e2:	0636      	lsls	r6, r6, #24
 801a7e4:	f853 5b04 	ldr.w	r5, [r3], #4
 801a7e8:	623b      	str	r3, [r7, #32]
 801a7ea:	f140 8089 	bpl.w	801a900 <__ssvfiscanf_r+0xa74>
 801a7ee:	2d00      	cmp	r5, #0
 801a7f0:	f43f ac9f 	beq.w	801a132 <__ssvfiscanf_r+0x2a6>
 801a7f4:	2080      	movs	r0, #128	@ 0x80
 801a7f6:	f7fd fddd 	bl	80183b4 <malloc>
 801a7fa:	4606      	mov	r6, r0
 801a7fc:	2800      	cmp	r0, #0
 801a7fe:	f43f ac95 	beq.w	801a12c <__ssvfiscanf_r+0x2a0>
 801a802:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 801a806:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 801a80a:	6028      	str	r0, [r5, #0]
 801a80c:	4599      	cmp	r9, r3
 801a80e:	d314      	bcc.n	801a83a <__ssvfiscanf_r+0x9ae>
 801a810:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 801a814:	4293      	cmp	r3, r2
 801a816:	f200 824d 	bhi.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a81a:	3308      	adds	r3, #8
 801a81c:	fa1f fa83 	uxth.w	sl, r3
 801a820:	f8db 0000 	ldr.w	r0, [fp]
 801a824:	ea4f 018a 	mov.w	r1, sl, lsl #2
 801a828:	f005 f978 	bl	801fb1c <realloc>
 801a82c:	2800      	cmp	r0, #0
 801a82e:	f000 8241 	beq.w	801acb4 <__ssvfiscanf_r+0xe28>
 801a832:	f8cb 0000 	str.w	r0, [fp]
 801a836:	f8ab a004 	strh.w	sl, [fp, #4]
 801a83a:	f8db 3000 	ldr.w	r3, [fp]
 801a83e:	f109 0201 	add.w	r2, r9, #1
 801a842:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 801a846:	46aa      	mov	sl, r5
 801a848:	f8ab 2006 	strh.w	r2, [fp, #6]
 801a84c:	4635      	mov	r5, r6
 801a84e:	f04f 0920 	mov.w	r9, #32
 801a852:	2300      	movs	r3, #0
 801a854:	6822      	ldr	r2, [r4, #0]
 801a856:	499e      	ldr	r1, [pc, #632]	@ (801aad0 <__ssvfiscanf_r+0xc44>)
 801a858:	7812      	ldrb	r2, [r2, #0]
 801a85a:	5c8a      	ldrb	r2, [r1, r2]
 801a85c:	0711      	lsls	r1, r2, #28
 801a85e:	d43c      	bmi.n	801a8da <__ssvfiscanf_r+0xa4e>
 801a860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a862:	2a00      	cmp	r2, #0
 801a864:	d039      	beq.n	801a8da <__ssvfiscanf_r+0xa4e>
 801a866:	613b      	str	r3, [r7, #16]
 801a868:	f003 ff3c 	bl	801e6e4 <__locale_mb_cur_max>
 801a86c:	693b      	ldr	r3, [r7, #16]
 801a86e:	4298      	cmp	r0, r3
 801a870:	f43f abc3 	beq.w	8019ffa <__ssvfiscanf_r+0x16e>
 801a874:	1c5a      	adds	r2, r3, #1
 801a876:	613a      	str	r2, [r7, #16]
 801a878:	6822      	ldr	r2, [r4, #0]
 801a87a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801a87e:	f812 0b01 	ldrb.w	r0, [r2], #1
 801a882:	54c8      	strb	r0, [r1, r3]
 801a884:	6863      	ldr	r3, [r4, #4]
 801a886:	3b01      	subs	r3, #1
 801a888:	e9c4 2300 	strd	r2, r3, [r4]
 801a88c:	69bb      	ldr	r3, [r7, #24]
 801a88e:	2b03      	cmp	r3, #3
 801a890:	d102      	bne.n	801a898 <__ssvfiscanf_r+0xa0c>
 801a892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a894:	2b04      	cmp	r3, #4
 801a896:	d005      	beq.n	801a8a4 <__ssvfiscanf_r+0xa18>
 801a898:	2208      	movs	r2, #8
 801a89a:	2100      	movs	r1, #0
 801a89c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 801a8a0:	f7fe f98c 	bl	8018bbc <memset>
 801a8a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801a8a8:	9300      	str	r3, [sp, #0]
 801a8aa:	693b      	ldr	r3, [r7, #16]
 801a8ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a8ae:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801a8b2:	4629      	mov	r1, r5
 801a8b4:	f005 fc94 	bl	80201e0 <_mbrtowc_r>
 801a8b8:	4603      	mov	r3, r0
 801a8ba:	61b8      	str	r0, [r7, #24]
 801a8bc:	1c58      	adds	r0, r3, #1
 801a8be:	f43f ab9c 	beq.w	8019ffa <__ssvfiscanf_r+0x16e>
 801a8c2:	bb0b      	cbnz	r3, 801a908 <__ssvfiscanf_r+0xa7c>
 801a8c4:	602b      	str	r3, [r5, #0]
 801a8c6:	6828      	ldr	r0, [r5, #0]
 801a8c8:	f005 fcba 	bl	8020240 <iswspace>
 801a8cc:	4603      	mov	r3, r0
 801a8ce:	2800      	cmp	r0, #0
 801a8d0:	d037      	beq.n	801a942 <__ssvfiscanf_r+0xab6>
 801a8d2:	693a      	ldr	r2, [r7, #16]
 801a8d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a8d8:	bb4a      	cbnz	r2, 801a92e <__ssvfiscanf_r+0xaa2>
 801a8da:	f1b8 0f00 	cmp.w	r8, #0
 801a8de:	f47f aaf6 	bne.w	8019ece <__ssvfiscanf_r+0x42>
 801a8e2:	f8c5 8000 	str.w	r8, [r5]
 801a8e6:	f1ba 0f00 	cmp.w	sl, #0
 801a8ea:	f43f ad34 	beq.w	801a356 <__ssvfiscanf_r+0x4ca>
 801a8ee:	1ba9      	subs	r1, r5, r6
 801a8f0:	e655      	b.n	801a59e <__ssvfiscanf_r+0x712>
 801a8f2:	f04f 0900 	mov.w	r9, #0
 801a8f6:	464e      	mov	r6, r9
 801a8f8:	46ca      	mov	sl, r9
 801a8fa:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 801a8fe:	e7a8      	b.n	801a852 <__ssvfiscanf_r+0x9c6>
 801a900:	46c1      	mov	r9, r8
 801a902:	4646      	mov	r6, r8
 801a904:	46c2      	mov	sl, r8
 801a906:	e7a4      	b.n	801a852 <__ssvfiscanf_r+0x9c6>
 801a908:	69bb      	ldr	r3, [r7, #24]
 801a90a:	3302      	adds	r3, #2
 801a90c:	d1db      	bne.n	801a8c6 <__ssvfiscanf_r+0xa3a>
 801a90e:	693b      	ldr	r3, [r7, #16]
 801a910:	6862      	ldr	r2, [r4, #4]
 801a912:	2a00      	cmp	r2, #0
 801a914:	dc9e      	bgt.n	801a854 <__ssvfiscanf_r+0x9c8>
 801a916:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a918:	613b      	str	r3, [r7, #16]
 801a91a:	4621      	mov	r1, r4
 801a91c:	f7ff fa5f 	bl	8019dde <__ssrefill_r>
 801a920:	693b      	ldr	r3, [r7, #16]
 801a922:	2800      	cmp	r0, #0
 801a924:	d096      	beq.n	801a854 <__ssvfiscanf_r+0x9c8>
 801a926:	2b00      	cmp	r3, #0
 801a928:	f47f ab67 	bne.w	8019ffa <__ssvfiscanf_r+0x16e>
 801a92c:	e7d5      	b.n	801a8da <__ssvfiscanf_r+0xa4e>
 801a92e:	693a      	ldr	r2, [r7, #16]
 801a930:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a932:	3a01      	subs	r2, #1
 801a934:	613a      	str	r2, [r7, #16]
 801a936:	6939      	ldr	r1, [r7, #16]
 801a938:	4622      	mov	r2, r4
 801a93a:	5c59      	ldrb	r1, [r3, r1]
 801a93c:	f7ff fa14 	bl	8019d68 <_sungetc_r>
 801a940:	e7c7      	b.n	801a8d2 <__ssvfiscanf_r+0xa46>
 801a942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a944:	6939      	ldr	r1, [r7, #16]
 801a946:	440a      	add	r2, r1
 801a948:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a94a:	69ba      	ldr	r2, [r7, #24]
 801a94c:	2a03      	cmp	r2, #3
 801a94e:	d102      	bne.n	801a956 <__ssvfiscanf_r+0xaca>
 801a950:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a952:	2a04      	cmp	r2, #4
 801a954:	d002      	beq.n	801a95c <__ssvfiscanf_r+0xad0>
 801a956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a958:	3a01      	subs	r2, #1
 801a95a:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a95c:	f1b8 0f00 	cmp.w	r8, #0
 801a960:	d1d6      	bne.n	801a910 <__ssvfiscanf_r+0xa84>
 801a962:	3504      	adds	r5, #4
 801a964:	f1ba 0f00 	cmp.w	sl, #0
 801a968:	d015      	beq.n	801a996 <__ssvfiscanf_r+0xb0a>
 801a96a:	1bab      	subs	r3, r5, r6
 801a96c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 801a970:	d80f      	bhi.n	801a992 <__ssvfiscanf_r+0xb06>
 801a972:	4630      	mov	r0, r6
 801a974:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801a978:	613b      	str	r3, [r7, #16]
 801a97a:	f005 f8cf 	bl	801fb1c <realloc>
 801a97e:	4606      	mov	r6, r0
 801a980:	2800      	cmp	r0, #0
 801a982:	f43f abd3 	beq.w	801a12c <__ssvfiscanf_r+0x2a0>
 801a986:	693b      	ldr	r3, [r7, #16]
 801a988:	f8ca 0000 	str.w	r0, [sl]
 801a98c:	18c5      	adds	r5, r0, r3
 801a98e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a992:	4643      	mov	r3, r8
 801a994:	e7bc      	b.n	801a910 <__ssvfiscanf_r+0xa84>
 801a996:	4653      	mov	r3, sl
 801a998:	e7ba      	b.n	801a910 <__ssvfiscanf_r+0xa84>
 801a99a:	f1b8 0f00 	cmp.w	r8, #0
 801a99e:	d019      	beq.n	801a9d4 <__ssvfiscanf_r+0xb48>
 801a9a0:	4e4b      	ldr	r6, [pc, #300]	@ (801aad0 <__ssvfiscanf_r+0xc44>)
 801a9a2:	6823      	ldr	r3, [r4, #0]
 801a9a4:	781a      	ldrb	r2, [r3, #0]
 801a9a6:	5cb2      	ldrb	r2, [r6, r2]
 801a9a8:	0712      	lsls	r2, r2, #28
 801a9aa:	f53f acfc 	bmi.w	801a3a6 <__ssvfiscanf_r+0x51a>
 801a9ae:	3301      	adds	r3, #1
 801a9b0:	6862      	ldr	r2, [r4, #4]
 801a9b2:	6023      	str	r3, [r4, #0]
 801a9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a9b6:	3501      	adds	r5, #1
 801a9b8:	3a01      	subs	r2, #1
 801a9ba:	429d      	cmp	r5, r3
 801a9bc:	6062      	str	r2, [r4, #4]
 801a9be:	f43f acf2 	beq.w	801a3a6 <__ssvfiscanf_r+0x51a>
 801a9c2:	2a00      	cmp	r2, #0
 801a9c4:	dced      	bgt.n	801a9a2 <__ssvfiscanf_r+0xb16>
 801a9c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a9c8:	4621      	mov	r1, r4
 801a9ca:	f7ff fa08 	bl	8019dde <__ssrefill_r>
 801a9ce:	2800      	cmp	r0, #0
 801a9d0:	d0e7      	beq.n	801a9a2 <__ssvfiscanf_r+0xb16>
 801a9d2:	e4e8      	b.n	801a3a6 <__ssvfiscanf_r+0x51a>
 801a9d4:	6a3b      	ldr	r3, [r7, #32]
 801a9d6:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 801a9da:	f853 5b04 	ldr.w	r5, [r3], #4
 801a9de:	623b      	str	r3, [r7, #32]
 801a9e0:	d074      	beq.n	801aacc <__ssvfiscanf_r+0xc40>
 801a9e2:	2d00      	cmp	r5, #0
 801a9e4:	f43f aa9f 	beq.w	8019f26 <__ssvfiscanf_r+0x9a>
 801a9e8:	2020      	movs	r0, #32
 801a9ea:	f7fd fce3 	bl	80183b4 <malloc>
 801a9ee:	4680      	mov	r8, r0
 801a9f0:	2800      	cmp	r0, #0
 801a9f2:	f43f ab07 	beq.w	801a004 <__ssvfiscanf_r+0x178>
 801a9f6:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 801a9fa:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 801a9fe:	6028      	str	r0, [r5, #0]
 801aa00:	45b1      	cmp	r9, r6
 801aa02:	d312      	bcc.n	801aa2a <__ssvfiscanf_r+0xb9e>
 801aa04:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 801aa08:	429e      	cmp	r6, r3
 801aa0a:	f200 8153 	bhi.w	801acb4 <__ssvfiscanf_r+0xe28>
 801aa0e:	3608      	adds	r6, #8
 801aa10:	b2b6      	uxth	r6, r6
 801aa12:	f8db 0000 	ldr.w	r0, [fp]
 801aa16:	00b1      	lsls	r1, r6, #2
 801aa18:	f005 f880 	bl	801fb1c <realloc>
 801aa1c:	2800      	cmp	r0, #0
 801aa1e:	f000 8149 	beq.w	801acb4 <__ssvfiscanf_r+0xe28>
 801aa22:	f8cb 0000 	str.w	r0, [fp]
 801aa26:	f8ab 6004 	strh.w	r6, [fp, #4]
 801aa2a:	f8db 3000 	ldr.w	r3, [fp]
 801aa2e:	f109 0201 	add.w	r2, r9, #1
 801aa32:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 801aa36:	46aa      	mov	sl, r5
 801aa38:	f8ab 2006 	strh.w	r2, [fp, #6]
 801aa3c:	4645      	mov	r5, r8
 801aa3e:	2620      	movs	r6, #32
 801aa40:	46a9      	mov	r9, r5
 801aa42:	6823      	ldr	r3, [r4, #0]
 801aa44:	4922      	ldr	r1, [pc, #136]	@ (801aad0 <__ssvfiscanf_r+0xc44>)
 801aa46:	781a      	ldrb	r2, [r3, #0]
 801aa48:	5c8a      	ldrb	r2, [r1, r2]
 801aa4a:	0710      	lsls	r0, r2, #28
 801aa4c:	d428      	bmi.n	801aaa0 <__ssvfiscanf_r+0xc14>
 801aa4e:	6862      	ldr	r2, [r4, #4]
 801aa50:	3a01      	subs	r2, #1
 801aa52:	6062      	str	r2, [r4, #4]
 801aa54:	1c5a      	adds	r2, r3, #1
 801aa56:	6022      	str	r2, [r4, #0]
 801aa58:	781b      	ldrb	r3, [r3, #0]
 801aa5a:	f805 3b01 	strb.w	r3, [r5], #1
 801aa5e:	f1ba 0f00 	cmp.w	sl, #0
 801aa62:	d010      	beq.n	801aa86 <__ssvfiscanf_r+0xbfa>
 801aa64:	eba5 0809 	sub.w	r8, r5, r9
 801aa68:	45b0      	cmp	r8, r6
 801aa6a:	d30c      	bcc.n	801aa86 <__ssvfiscanf_r+0xbfa>
 801aa6c:	0076      	lsls	r6, r6, #1
 801aa6e:	4648      	mov	r0, r9
 801aa70:	4631      	mov	r1, r6
 801aa72:	f005 f853 	bl	801fb1c <realloc>
 801aa76:	4681      	mov	r9, r0
 801aa78:	2800      	cmp	r0, #0
 801aa7a:	f43f aac3 	beq.w	801a004 <__ssvfiscanf_r+0x178>
 801aa7e:	eb00 0508 	add.w	r5, r0, r8
 801aa82:	f8ca 0000 	str.w	r0, [sl]
 801aa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa88:	3b01      	subs	r3, #1
 801aa8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801aa8c:	d008      	beq.n	801aaa0 <__ssvfiscanf_r+0xc14>
 801aa8e:	6863      	ldr	r3, [r4, #4]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	dcd6      	bgt.n	801aa42 <__ssvfiscanf_r+0xbb6>
 801aa94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801aa96:	4621      	mov	r1, r4
 801aa98:	f7ff f9a1 	bl	8019dde <__ssrefill_r>
 801aa9c:	2800      	cmp	r0, #0
 801aa9e:	d0d0      	beq.n	801aa42 <__ssvfiscanf_r+0xbb6>
 801aaa0:	2300      	movs	r3, #0
 801aaa2:	702b      	strb	r3, [r5, #0]
 801aaa4:	eba5 0509 	sub.w	r5, r5, r9
 801aaa8:	f1ba 0f00 	cmp.w	sl, #0
 801aaac:	f43f acce 	beq.w	801a44c <__ssvfiscanf_r+0x5c0>
 801aab0:	1c69      	adds	r1, r5, #1
 801aab2:	428e      	cmp	r6, r1
 801aab4:	f67f acca 	bls.w	801a44c <__ssvfiscanf_r+0x5c0>
 801aab8:	f8da 0000 	ldr.w	r0, [sl]
 801aabc:	f005 f82e 	bl	801fb1c <realloc>
 801aac0:	2800      	cmp	r0, #0
 801aac2:	f43f acc3 	beq.w	801a44c <__ssvfiscanf_r+0x5c0>
 801aac6:	f8ca 0000 	str.w	r0, [sl]
 801aaca:	e4bf      	b.n	801a44c <__ssvfiscanf_r+0x5c0>
 801aacc:	46b2      	mov	sl, r6
 801aace:	e7b7      	b.n	801aa40 <__ssvfiscanf_r+0xbb4>
 801aad0:	08021363 	.word	0x08021363
 801aad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aad6:	3b01      	subs	r3, #1
 801aad8:	2b26      	cmp	r3, #38	@ 0x26
 801aada:	bf81      	itttt	hi
 801aadc:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 801aade:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 801aae2:	2327      	movhi	r3, #39	@ 0x27
 801aae4:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 801aae6:	bf98      	it	ls
 801aae8:	f04f 0800 	movls.w	r8, #0
 801aaec:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 801aaf0:	f04f 0900 	mov.w	r9, #0
 801aaf4:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 801aaf8:	6822      	ldr	r2, [r4, #0]
 801aafa:	7813      	ldrb	r3, [r2, #0]
 801aafc:	2b39      	cmp	r3, #57	@ 0x39
 801aafe:	d80f      	bhi.n	801ab20 <__ssvfiscanf_r+0xc94>
 801ab00:	2b2a      	cmp	r3, #42	@ 0x2a
 801ab02:	d91a      	bls.n	801ab3a <__ssvfiscanf_r+0xcae>
 801ab04:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801ab08:	290e      	cmp	r1, #14
 801ab0a:	d816      	bhi.n	801ab3a <__ssvfiscanf_r+0xcae>
 801ab0c:	e8df f001 	tbb	[pc, r1]
 801ab10:	15771577 	.word	0x15771577
 801ab14:	67673e15 	.word	0x67673e15
 801ab18:	67676767 	.word	0x67676767
 801ab1c:	6f67      	.short	0x6f67
 801ab1e:	6f          	.byte	0x6f
 801ab1f:	00          	.byte	0x00
 801ab20:	2b66      	cmp	r3, #102	@ 0x66
 801ab22:	d831      	bhi.n	801ab88 <__ssvfiscanf_r+0xcfc>
 801ab24:	2b60      	cmp	r3, #96	@ 0x60
 801ab26:	d803      	bhi.n	801ab30 <__ssvfiscanf_r+0xca4>
 801ab28:	2b46      	cmp	r3, #70	@ 0x46
 801ab2a:	d804      	bhi.n	801ab36 <__ssvfiscanf_r+0xcaa>
 801ab2c:	2b40      	cmp	r3, #64	@ 0x40
 801ab2e:	d904      	bls.n	801ab3a <__ssvfiscanf_r+0xcae>
 801ab30:	6979      	ldr	r1, [r7, #20]
 801ab32:	290a      	cmp	r1, #10
 801ab34:	e061      	b.n	801abfa <__ssvfiscanf_r+0xd6e>
 801ab36:	2b58      	cmp	r3, #88	@ 0x58
 801ab38:	d066      	beq.n	801ac08 <__ssvfiscanf_r+0xd7c>
 801ab3a:	05f1      	lsls	r1, r6, #23
 801ab3c:	d511      	bpl.n	801ab62 <__ssvfiscanf_r+0xcd6>
 801ab3e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801ab42:	459a      	cmp	sl, r3
 801ab44:	d908      	bls.n	801ab58 <__ssvfiscanf_r+0xccc>
 801ab46:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 801ab4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ab4c:	4622      	mov	r2, r4
 801ab4e:	f7ff f90b 	bl	8019d68 <_sungetc_r>
 801ab52:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 801ab56:	46c2      	mov	sl, r8
 801ab58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801ab5c:	459a      	cmp	sl, r3
 801ab5e:	f43f a9e2 	beq.w	8019f26 <__ssvfiscanf_r+0x9a>
 801ab62:	f016 0210 	ands.w	r2, r6, #16
 801ab66:	d16b      	bne.n	801ac40 <__ssvfiscanf_r+0xdb4>
 801ab68:	697b      	ldr	r3, [r7, #20]
 801ab6a:	f88a 2000 	strb.w	r2, [sl]
 801ab6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ab70:	68fd      	ldr	r5, [r7, #12]
 801ab72:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801ab76:	47a8      	blx	r5
 801ab78:	6a3b      	ldr	r3, [r7, #32]
 801ab7a:	06b2      	lsls	r2, r6, #26
 801ab7c:	f103 0804 	add.w	r8, r3, #4
 801ab80:	d555      	bpl.n	801ac2e <__ssvfiscanf_r+0xda2>
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	6018      	str	r0, [r3, #0]
 801ab86:	e057      	b.n	801ac38 <__ssvfiscanf_r+0xdac>
 801ab88:	2b78      	cmp	r3, #120	@ 0x78
 801ab8a:	e7d5      	b.n	801ab38 <__ssvfiscanf_r+0xcac>
 801ab8c:	0531      	lsls	r1, r6, #20
 801ab8e:	d509      	bpl.n	801aba4 <__ssvfiscanf_r+0xd18>
 801ab90:	6979      	ldr	r1, [r7, #20]
 801ab92:	b919      	cbnz	r1, 801ab9c <__ssvfiscanf_r+0xd10>
 801ab94:	2108      	movs	r1, #8
 801ab96:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 801ab9a:	6179      	str	r1, [r7, #20]
 801ab9c:	0575      	lsls	r5, r6, #21
 801ab9e:	d506      	bpl.n	801abae <__ssvfiscanf_r+0xd22>
 801aba0:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 801aba4:	4655      	mov	r5, sl
 801aba6:	f805 3b01 	strb.w	r3, [r5], #1
 801abaa:	46aa      	mov	sl, r5
 801abac:	e00b      	b.n	801abc6 <__ssvfiscanf_r+0xd3a>
 801abae:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 801abb2:	f1b8 0f00 	cmp.w	r8, #0
 801abb6:	d004      	beq.n	801abc2 <__ssvfiscanf_r+0xd36>
 801abb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abba:	3301      	adds	r3, #1
 801abbc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801abc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 801abc2:	f109 0901 	add.w	r9, r9, #1
 801abc6:	6863      	ldr	r3, [r4, #4]
 801abc8:	3b01      	subs	r3, #1
 801abca:	2b00      	cmp	r3, #0
 801abcc:	6063      	str	r3, [r4, #4]
 801abce:	dd27      	ble.n	801ac20 <__ssvfiscanf_r+0xd94>
 801abd0:	3201      	adds	r2, #1
 801abd2:	6022      	str	r2, [r4, #0]
 801abd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abd6:	3b01      	subs	r3, #1
 801abd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 801abda:	d18d      	bne.n	801aaf8 <__ssvfiscanf_r+0xc6c>
 801abdc:	e7ad      	b.n	801ab3a <__ssvfiscanf_r+0xcae>
 801abde:	6978      	ldr	r0, [r7, #20]
 801abe0:	4936      	ldr	r1, [pc, #216]	@ (801acbc <__ssvfiscanf_r+0xe30>)
 801abe2:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 801abe6:	6179      	str	r1, [r7, #20]
 801abe8:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 801abec:	e7da      	b.n	801aba4 <__ssvfiscanf_r+0xd18>
 801abee:	6978      	ldr	r0, [r7, #20]
 801abf0:	4932      	ldr	r1, [pc, #200]	@ (801acbc <__ssvfiscanf_r+0xe30>)
 801abf2:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 801abf6:	6179      	str	r1, [r7, #20]
 801abf8:	2908      	cmp	r1, #8
 801abfa:	dcf5      	bgt.n	801abe8 <__ssvfiscanf_r+0xd5c>
 801abfc:	e79d      	b.n	801ab3a <__ssvfiscanf_r+0xcae>
 801abfe:	0630      	lsls	r0, r6, #24
 801ac00:	d59b      	bpl.n	801ab3a <__ssvfiscanf_r+0xcae>
 801ac02:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 801ac06:	e7cd      	b.n	801aba4 <__ssvfiscanf_r+0xd18>
 801ac08:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 801ac0c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801ac10:	d193      	bne.n	801ab3a <__ssvfiscanf_r+0xcae>
 801ac12:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 801ac16:	2110      	movs	r1, #16
 801ac18:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 801ac1c:	6179      	str	r1, [r7, #20]
 801ac1e:	e7c1      	b.n	801aba4 <__ssvfiscanf_r+0xd18>
 801ac20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac22:	4621      	mov	r1, r4
 801ac24:	f7ff f8db 	bl	8019dde <__ssrefill_r>
 801ac28:	2800      	cmp	r0, #0
 801ac2a:	d0d3      	beq.n	801abd4 <__ssvfiscanf_r+0xd48>
 801ac2c:	e785      	b.n	801ab3a <__ssvfiscanf_r+0xcae>
 801ac2e:	0733      	lsls	r3, r6, #28
 801ac30:	d50d      	bpl.n	801ac4e <__ssvfiscanf_r+0xdc2>
 801ac32:	6a3b      	ldr	r3, [r7, #32]
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	7018      	strb	r0, [r3, #0]
 801ac38:	69fb      	ldr	r3, [r7, #28]
 801ac3a:	3301      	adds	r3, #1
 801ac3c:	e9c7 3807 	strd	r3, r8, [r7, #28]
 801ac40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801ac44:	ebaa 0503 	sub.w	r5, sl, r3
 801ac48:	444d      	add	r5, r9
 801ac4a:	f7ff bbac 	b.w	801a3a6 <__ssvfiscanf_r+0x51a>
 801ac4e:	0775      	lsls	r5, r6, #29
 801ac50:	d503      	bpl.n	801ac5a <__ssvfiscanf_r+0xdce>
 801ac52:	6a3b      	ldr	r3, [r7, #32]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	8018      	strh	r0, [r3, #0]
 801ac58:	e7ee      	b.n	801ac38 <__ssvfiscanf_r+0xdac>
 801ac5a:	f016 0201 	ands.w	r2, r6, #1
 801ac5e:	d001      	beq.n	801ac64 <__ssvfiscanf_r+0xdd8>
 801ac60:	6a3b      	ldr	r3, [r7, #32]
 801ac62:	e78e      	b.n	801ab82 <__ssvfiscanf_r+0xcf6>
 801ac64:	07b1      	lsls	r1, r6, #30
 801ac66:	d5fb      	bpl.n	801ac60 <__ssvfiscanf_r+0xdd4>
 801ac68:	4b15      	ldr	r3, [pc, #84]	@ (801acc0 <__ssvfiscanf_r+0xe34>)
 801ac6a:	68f9      	ldr	r1, [r7, #12]
 801ac6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac6e:	4299      	cmp	r1, r3
 801ac70:	697b      	ldr	r3, [r7, #20]
 801ac72:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801ac76:	d106      	bne.n	801ac86 <__ssvfiscanf_r+0xdfa>
 801ac78:	f005 fab0 	bl	80201dc <_strtoull_r>
 801ac7c:	6a3b      	ldr	r3, [r7, #32]
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	e9c3 0100 	strd	r0, r1, [r3]
 801ac84:	e7d8      	b.n	801ac38 <__ssvfiscanf_r+0xdac>
 801ac86:	f005 fa11 	bl	80200ac <_strtoll_r>
 801ac8a:	e7f7      	b.n	801ac7c <__ssvfiscanf_r+0xdf0>
 801ac8c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801ac90:	6818      	ldr	r0, [r3, #0]
 801ac92:	f7fd fb97 	bl	80183c4 <free>
 801ac96:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801ac9a:	3401      	adds	r4, #1
 801ac9c:	601e      	str	r6, [r3, #0]
 801ac9e:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 801aca2:	f8db 5000 	ldr.w	r5, [fp]
 801aca6:	42a3      	cmp	r3, r4
 801aca8:	dcf0      	bgt.n	801ac8c <__ssvfiscanf_r+0xe00>
 801acaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801acae:	61fb      	str	r3, [r7, #28]
 801acb0:	f7ff ba46 	b.w	801a140 <__ssvfiscanf_r+0x2b4>
 801acb4:	2400      	movs	r4, #0
 801acb6:	4626      	mov	r6, r4
 801acb8:	e7f1      	b.n	801ac9e <__ssvfiscanf_r+0xe12>
 801acba:	bf00      	nop
 801acbc:	08021464 	.word	0x08021464
 801acc0:	08019cfd 	.word	0x08019cfd
 801acc4:	00000000 	.word	0x00000000

0801acc8 <_svfprintf_r>:
 801acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801accc:	b0d3      	sub	sp, #332	@ 0x14c
 801acce:	468b      	mov	fp, r1
 801acd0:	4691      	mov	r9, r2
 801acd2:	461e      	mov	r6, r3
 801acd4:	9003      	str	r0, [sp, #12]
 801acd6:	f003 fd0b 	bl	801e6f0 <_localeconv_r>
 801acda:	6803      	ldr	r3, [r0, #0]
 801acdc:	9316      	str	r3, [sp, #88]	@ 0x58
 801acde:	4618      	mov	r0, r3
 801ace0:	f7e5 fa80 	bl	80001e4 <strlen>
 801ace4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801ace8:	900d      	str	r0, [sp, #52]	@ 0x34
 801acea:	061b      	lsls	r3, r3, #24
 801acec:	d515      	bpl.n	801ad1a <_svfprintf_r+0x52>
 801acee:	f8db 3010 	ldr.w	r3, [fp, #16]
 801acf2:	b993      	cbnz	r3, 801ad1a <_svfprintf_r+0x52>
 801acf4:	9803      	ldr	r0, [sp, #12]
 801acf6:	2140      	movs	r1, #64	@ 0x40
 801acf8:	f7fd fb6c 	bl	80183d4 <_malloc_r>
 801acfc:	f8cb 0000 	str.w	r0, [fp]
 801ad00:	f8cb 0010 	str.w	r0, [fp, #16]
 801ad04:	b930      	cbnz	r0, 801ad14 <_svfprintf_r+0x4c>
 801ad06:	9a03      	ldr	r2, [sp, #12]
 801ad08:	230c      	movs	r3, #12
 801ad0a:	6013      	str	r3, [r2, #0]
 801ad0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ad10:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ad12:	e1f7      	b.n	801b104 <_svfprintf_r+0x43c>
 801ad14:	2340      	movs	r3, #64	@ 0x40
 801ad16:	f8cb 3014 	str.w	r3, [fp, #20]
 801ad1a:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 801af68 <_svfprintf_r+0x2a0>
 801ad1e:	2300      	movs	r3, #0
 801ad20:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801ad24:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801ad28:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 801ad2c:	ac29      	add	r4, sp, #164	@ 0xa4
 801ad2e:	9426      	str	r4, [sp, #152]	@ 0x98
 801ad30:	9304      	str	r3, [sp, #16]
 801ad32:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad34:	9312      	str	r3, [sp, #72]	@ 0x48
 801ad36:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ad38:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ad3a:	464b      	mov	r3, r9
 801ad3c:	461d      	mov	r5, r3
 801ad3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad42:	b10a      	cbz	r2, 801ad48 <_svfprintf_r+0x80>
 801ad44:	2a25      	cmp	r2, #37	@ 0x25
 801ad46:	d1f9      	bne.n	801ad3c <_svfprintf_r+0x74>
 801ad48:	ebb5 0709 	subs.w	r7, r5, r9
 801ad4c:	d00d      	beq.n	801ad6a <_svfprintf_r+0xa2>
 801ad4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ad50:	443b      	add	r3, r7
 801ad52:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ad54:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ad56:	3301      	adds	r3, #1
 801ad58:	2b07      	cmp	r3, #7
 801ad5a:	e9c4 9700 	strd	r9, r7, [r4]
 801ad5e:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ad60:	dc75      	bgt.n	801ae4e <_svfprintf_r+0x186>
 801ad62:	3408      	adds	r4, #8
 801ad64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ad66:	443b      	add	r3, r7
 801ad68:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ad6a:	782b      	ldrb	r3, [r5, #0]
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	f001 8148 	beq.w	801c002 <_svfprintf_r+0x133a>
 801ad72:	2200      	movs	r2, #0
 801ad74:	1c6b      	adds	r3, r5, #1
 801ad76:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801ad7a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801ad7e:	920e      	str	r2, [sp, #56]	@ 0x38
 801ad80:	4615      	mov	r5, r2
 801ad82:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad86:	9206      	str	r2, [sp, #24]
 801ad88:	930c      	str	r3, [sp, #48]	@ 0x30
 801ad8a:	9b06      	ldr	r3, [sp, #24]
 801ad8c:	3b20      	subs	r3, #32
 801ad8e:	2b5a      	cmp	r3, #90	@ 0x5a
 801ad90:	f200 85a4 	bhi.w	801b8dc <_svfprintf_r+0xc14>
 801ad94:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ad98:	05a2009d 	.word	0x05a2009d
 801ad9c:	00a505a2 	.word	0x00a505a2
 801ada0:	05a205a2 	.word	0x05a205a2
 801ada4:	008505a2 	.word	0x008505a2
 801ada8:	05a205a2 	.word	0x05a205a2
 801adac:	00b200a8 	.word	0x00b200a8
 801adb0:	00af05a2 	.word	0x00af05a2
 801adb4:	05a200b4 	.word	0x05a200b4
 801adb8:	00d100ce 	.word	0x00d100ce
 801adbc:	00d100d1 	.word	0x00d100d1
 801adc0:	00d100d1 	.word	0x00d100d1
 801adc4:	00d100d1 	.word	0x00d100d1
 801adc8:	00d100d1 	.word	0x00d100d1
 801adcc:	05a205a2 	.word	0x05a205a2
 801add0:	05a205a2 	.word	0x05a205a2
 801add4:	05a205a2 	.word	0x05a205a2
 801add8:	014705a2 	.word	0x014705a2
 801addc:	010805a2 	.word	0x010805a2
 801ade0:	0147011b 	.word	0x0147011b
 801ade4:	01470147 	.word	0x01470147
 801ade8:	05a205a2 	.word	0x05a205a2
 801adec:	05a205a2 	.word	0x05a205a2
 801adf0:	05a200e2 	.word	0x05a200e2
 801adf4:	049d05a2 	.word	0x049d05a2
 801adf8:	05a205a2 	.word	0x05a205a2
 801adfc:	04e705a2 	.word	0x04e705a2
 801ae00:	050805a2 	.word	0x050805a2
 801ae04:	05a205a2 	.word	0x05a205a2
 801ae08:	05a2052a 	.word	0x05a2052a
 801ae0c:	05a205a2 	.word	0x05a205a2
 801ae10:	05a205a2 	.word	0x05a205a2
 801ae14:	05a205a2 	.word	0x05a205a2
 801ae18:	014705a2 	.word	0x014705a2
 801ae1c:	010805a2 	.word	0x010805a2
 801ae20:	0147011d 	.word	0x0147011d
 801ae24:	01470147 	.word	0x01470147
 801ae28:	011d00ee 	.word	0x011d00ee
 801ae2c:	05a20102 	.word	0x05a20102
 801ae30:	05a200fb 	.word	0x05a200fb
 801ae34:	049f047e 	.word	0x049f047e
 801ae38:	010204d6 	.word	0x010204d6
 801ae3c:	04e705a2 	.word	0x04e705a2
 801ae40:	050a009b 	.word	0x050a009b
 801ae44:	05a205a2 	.word	0x05a205a2
 801ae48:	05a20065 	.word	0x05a20065
 801ae4c:	009b      	.short	0x009b
 801ae4e:	9803      	ldr	r0, [sp, #12]
 801ae50:	aa26      	add	r2, sp, #152	@ 0x98
 801ae52:	4659      	mov	r1, fp
 801ae54:	f005 fa02 	bl	802025c <__ssprint_r>
 801ae58:	2800      	cmp	r0, #0
 801ae5a:	f040 814e 	bne.w	801b0fa <_svfprintf_r+0x432>
 801ae5e:	ac29      	add	r4, sp, #164	@ 0xa4
 801ae60:	e780      	b.n	801ad64 <_svfprintf_r+0x9c>
 801ae62:	4b43      	ldr	r3, [pc, #268]	@ (801af70 <_svfprintf_r+0x2a8>)
 801ae64:	9319      	str	r3, [sp, #100]	@ 0x64
 801ae66:	f015 0320 	ands.w	r3, r5, #32
 801ae6a:	f000 84c2 	beq.w	801b7f2 <_svfprintf_r+0xb2a>
 801ae6e:	3607      	adds	r6, #7
 801ae70:	f026 0307 	bic.w	r3, r6, #7
 801ae74:	461a      	mov	r2, r3
 801ae76:	685f      	ldr	r7, [r3, #4]
 801ae78:	f852 6b08 	ldr.w	r6, [r2], #8
 801ae7c:	9207      	str	r2, [sp, #28]
 801ae7e:	07eb      	lsls	r3, r5, #31
 801ae80:	d50a      	bpl.n	801ae98 <_svfprintf_r+0x1d0>
 801ae82:	ea56 0307 	orrs.w	r3, r6, r7
 801ae86:	d007      	beq.n	801ae98 <_svfprintf_r+0x1d0>
 801ae88:	2330      	movs	r3, #48	@ 0x30
 801ae8a:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 801ae8e:	9b06      	ldr	r3, [sp, #24]
 801ae90:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801ae94:	f045 0502 	orr.w	r5, r5, #2
 801ae98:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801ae9c:	2302      	movs	r3, #2
 801ae9e:	f000 bc28 	b.w	801b6f2 <_svfprintf_r+0xa2a>
 801aea2:	9803      	ldr	r0, [sp, #12]
 801aea4:	f003 fc24 	bl	801e6f0 <_localeconv_r>
 801aea8:	6843      	ldr	r3, [r0, #4]
 801aeaa:	9317      	str	r3, [sp, #92]	@ 0x5c
 801aeac:	4618      	mov	r0, r3
 801aeae:	f7e5 f999 	bl	80001e4 <strlen>
 801aeb2:	9012      	str	r0, [sp, #72]	@ 0x48
 801aeb4:	9803      	ldr	r0, [sp, #12]
 801aeb6:	f003 fc1b 	bl	801e6f0 <_localeconv_r>
 801aeba:	6883      	ldr	r3, [r0, #8]
 801aebc:	9309      	str	r3, [sp, #36]	@ 0x24
 801aebe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801aec0:	b12b      	cbz	r3, 801aece <_svfprintf_r+0x206>
 801aec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aec4:	b11b      	cbz	r3, 801aece <_svfprintf_r+0x206>
 801aec6:	781b      	ldrb	r3, [r3, #0]
 801aec8:	b10b      	cbz	r3, 801aece <_svfprintf_r+0x206>
 801aeca:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801aece:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aed0:	e757      	b.n	801ad82 <_svfprintf_r+0xba>
 801aed2:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d1f9      	bne.n	801aece <_svfprintf_r+0x206>
 801aeda:	2320      	movs	r3, #32
 801aedc:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801aee0:	e7f5      	b.n	801aece <_svfprintf_r+0x206>
 801aee2:	f045 0501 	orr.w	r5, r5, #1
 801aee6:	e7f2      	b.n	801aece <_svfprintf_r+0x206>
 801aee8:	f856 3b04 	ldr.w	r3, [r6], #4
 801aeec:	930e      	str	r3, [sp, #56]	@ 0x38
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	daed      	bge.n	801aece <_svfprintf_r+0x206>
 801aef2:	425b      	negs	r3, r3
 801aef4:	930e      	str	r3, [sp, #56]	@ 0x38
 801aef6:	f045 0504 	orr.w	r5, r5, #4
 801aefa:	e7e8      	b.n	801aece <_svfprintf_r+0x206>
 801aefc:	232b      	movs	r3, #43	@ 0x2b
 801aefe:	e7ed      	b.n	801aedc <_svfprintf_r+0x214>
 801af00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801af02:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af06:	9206      	str	r2, [sp, #24]
 801af08:	2a2a      	cmp	r2, #42	@ 0x2a
 801af0a:	d10f      	bne.n	801af2c <_svfprintf_r+0x264>
 801af0c:	f856 2b04 	ldr.w	r2, [r6], #4
 801af10:	930c      	str	r3, [sp, #48]	@ 0x30
 801af12:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 801af16:	e7da      	b.n	801aece <_svfprintf_r+0x206>
 801af18:	fb01 2808 	mla	r8, r1, r8, r2
 801af1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af20:	9206      	str	r2, [sp, #24]
 801af22:	9a06      	ldr	r2, [sp, #24]
 801af24:	3a30      	subs	r2, #48	@ 0x30
 801af26:	2a09      	cmp	r2, #9
 801af28:	d9f6      	bls.n	801af18 <_svfprintf_r+0x250>
 801af2a:	e72d      	b.n	801ad88 <_svfprintf_r+0xc0>
 801af2c:	f04f 0800 	mov.w	r8, #0
 801af30:	210a      	movs	r1, #10
 801af32:	e7f6      	b.n	801af22 <_svfprintf_r+0x25a>
 801af34:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 801af38:	e7c9      	b.n	801aece <_svfprintf_r+0x206>
 801af3a:	2200      	movs	r2, #0
 801af3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801af3e:	920e      	str	r2, [sp, #56]	@ 0x38
 801af40:	210a      	movs	r1, #10
 801af42:	9a06      	ldr	r2, [sp, #24]
 801af44:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801af46:	3a30      	subs	r2, #48	@ 0x30
 801af48:	fb01 2200 	mla	r2, r1, r0, r2
 801af4c:	920e      	str	r2, [sp, #56]	@ 0x38
 801af4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af52:	9206      	str	r2, [sp, #24]
 801af54:	3a30      	subs	r2, #48	@ 0x30
 801af56:	2a09      	cmp	r2, #9
 801af58:	d9f3      	bls.n	801af42 <_svfprintf_r+0x27a>
 801af5a:	e715      	b.n	801ad88 <_svfprintf_r+0xc0>
 801af5c:	f045 0508 	orr.w	r5, r5, #8
 801af60:	e7b5      	b.n	801aece <_svfprintf_r+0x206>
 801af62:	bf00      	nop
 801af64:	f3af 8000 	nop.w
	...
 801af70:	08021496 	.word	0x08021496
 801af74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801af76:	781b      	ldrb	r3, [r3, #0]
 801af78:	2b68      	cmp	r3, #104	@ 0x68
 801af7a:	bf01      	itttt	eq
 801af7c:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 801af7e:	3301      	addeq	r3, #1
 801af80:	930c      	streq	r3, [sp, #48]	@ 0x30
 801af82:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801af86:	bf18      	it	ne
 801af88:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 801af8c:	e79f      	b.n	801aece <_svfprintf_r+0x206>
 801af8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801af90:	781b      	ldrb	r3, [r3, #0]
 801af92:	2b6c      	cmp	r3, #108	@ 0x6c
 801af94:	d105      	bne.n	801afa2 <_svfprintf_r+0x2da>
 801af96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801af98:	3301      	adds	r3, #1
 801af9a:	930c      	str	r3, [sp, #48]	@ 0x30
 801af9c:	f045 0520 	orr.w	r5, r5, #32
 801afa0:	e795      	b.n	801aece <_svfprintf_r+0x206>
 801afa2:	f045 0510 	orr.w	r5, r5, #16
 801afa6:	e792      	b.n	801aece <_svfprintf_r+0x206>
 801afa8:	4632      	mov	r2, r6
 801afaa:	f852 3b04 	ldr.w	r3, [r2], #4
 801afae:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801afb2:	2300      	movs	r3, #0
 801afb4:	9207      	str	r2, [sp, #28]
 801afb6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801afba:	469a      	mov	sl, r3
 801afbc:	f04f 0801 	mov.w	r8, #1
 801afc0:	9310      	str	r3, [sp, #64]	@ 0x40
 801afc2:	461f      	mov	r7, r3
 801afc4:	9308      	str	r3, [sp, #32]
 801afc6:	461e      	mov	r6, r3
 801afc8:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801afcc:	e1d2      	b.n	801b374 <_svfprintf_r+0x6ac>
 801afce:	f045 0510 	orr.w	r5, r5, #16
 801afd2:	06af      	lsls	r7, r5, #26
 801afd4:	d512      	bpl.n	801affc <_svfprintf_r+0x334>
 801afd6:	3607      	adds	r6, #7
 801afd8:	f026 0307 	bic.w	r3, r6, #7
 801afdc:	461a      	mov	r2, r3
 801afde:	685f      	ldr	r7, [r3, #4]
 801afe0:	f852 6b08 	ldr.w	r6, [r2], #8
 801afe4:	9207      	str	r2, [sp, #28]
 801afe6:	2f00      	cmp	r7, #0
 801afe8:	da06      	bge.n	801aff8 <_svfprintf_r+0x330>
 801afea:	4276      	negs	r6, r6
 801afec:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801aff0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801aff4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801aff8:	2301      	movs	r3, #1
 801affa:	e37d      	b.n	801b6f8 <_svfprintf_r+0xa30>
 801affc:	4633      	mov	r3, r6
 801affe:	06ee      	lsls	r6, r5, #27
 801b000:	f853 7b04 	ldr.w	r7, [r3], #4
 801b004:	9307      	str	r3, [sp, #28]
 801b006:	d502      	bpl.n	801b00e <_svfprintf_r+0x346>
 801b008:	463e      	mov	r6, r7
 801b00a:	17ff      	asrs	r7, r7, #31
 801b00c:	e7eb      	b.n	801afe6 <_svfprintf_r+0x31e>
 801b00e:	0668      	lsls	r0, r5, #25
 801b010:	d503      	bpl.n	801b01a <_svfprintf_r+0x352>
 801b012:	b23e      	sxth	r6, r7
 801b014:	f347 37c0 	sbfx	r7, r7, #15, #1
 801b018:	e7e5      	b.n	801afe6 <_svfprintf_r+0x31e>
 801b01a:	05a9      	lsls	r1, r5, #22
 801b01c:	d5f4      	bpl.n	801b008 <_svfprintf_r+0x340>
 801b01e:	b27e      	sxtb	r6, r7
 801b020:	f347 17c0 	sbfx	r7, r7, #7, #1
 801b024:	e7df      	b.n	801afe6 <_svfprintf_r+0x31e>
 801b026:	3607      	adds	r6, #7
 801b028:	f026 0307 	bic.w	r3, r6, #7
 801b02c:	ecb3 7b02 	vldmia	r3!, {d7}
 801b030:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801b034:	9307      	str	r3, [sp, #28]
 801b036:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b038:	931a      	str	r3, [sp, #104]	@ 0x68
 801b03a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b03c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b040:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b042:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801b046:	4b81      	ldr	r3, [pc, #516]	@ (801b24c <_svfprintf_r+0x584>)
 801b048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b04c:	f7e5 fd7e 	bl	8000b4c <__aeabi_dcmpun>
 801b050:	bb10      	cbnz	r0, 801b098 <_svfprintf_r+0x3d0>
 801b052:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801b056:	4b7d      	ldr	r3, [pc, #500]	@ (801b24c <_svfprintf_r+0x584>)
 801b058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b05c:	f7e5 fd58 	bl	8000b10 <__aeabi_dcmple>
 801b060:	b9d0      	cbnz	r0, 801b098 <_svfprintf_r+0x3d0>
 801b062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b066:	2200      	movs	r2, #0
 801b068:	2300      	movs	r3, #0
 801b06a:	f7e5 fd47 	bl	8000afc <__aeabi_dcmplt>
 801b06e:	b110      	cbz	r0, 801b076 <_svfprintf_r+0x3ae>
 801b070:	232d      	movs	r3, #45	@ 0x2d
 801b072:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801b076:	4a76      	ldr	r2, [pc, #472]	@ (801b250 <_svfprintf_r+0x588>)
 801b078:	4b76      	ldr	r3, [pc, #472]	@ (801b254 <_svfprintf_r+0x58c>)
 801b07a:	9906      	ldr	r1, [sp, #24]
 801b07c:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 801b080:	2947      	cmp	r1, #71	@ 0x47
 801b082:	bfd4      	ite	le
 801b084:	4691      	movle	r9, r2
 801b086:	4699      	movgt	r9, r3
 801b088:	f04f 0a00 	mov.w	sl, #0
 801b08c:	f04f 0803 	mov.w	r8, #3
 801b090:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 801b094:	f000 bfec 	b.w	801c070 <_svfprintf_r+0x13a8>
 801b098:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801b09c:	4610      	mov	r0, r2
 801b09e:	4619      	mov	r1, r3
 801b0a0:	f7e5 fd54 	bl	8000b4c <__aeabi_dcmpun>
 801b0a4:	4682      	mov	sl, r0
 801b0a6:	b140      	cbz	r0, 801b0ba <_svfprintf_r+0x3f2>
 801b0a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b0aa:	4a6b      	ldr	r2, [pc, #428]	@ (801b258 <_svfprintf_r+0x590>)
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	bfbc      	itt	lt
 801b0b0:	232d      	movlt	r3, #45	@ 0x2d
 801b0b2:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 801b0b6:	4b69      	ldr	r3, [pc, #420]	@ (801b25c <_svfprintf_r+0x594>)
 801b0b8:	e7df      	b.n	801b07a <_svfprintf_r+0x3b2>
 801b0ba:	9b06      	ldr	r3, [sp, #24]
 801b0bc:	2b61      	cmp	r3, #97	@ 0x61
 801b0be:	d025      	beq.n	801b10c <_svfprintf_r+0x444>
 801b0c0:	2b41      	cmp	r3, #65	@ 0x41
 801b0c2:	d125      	bne.n	801b110 <_svfprintf_r+0x448>
 801b0c4:	2358      	movs	r3, #88	@ 0x58
 801b0c6:	2230      	movs	r2, #48	@ 0x30
 801b0c8:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 801b0cc:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 801b0d0:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801b0d4:	f045 0502 	orr.w	r5, r5, #2
 801b0d8:	f340 80a5 	ble.w	801b226 <_svfprintf_r+0x55e>
 801b0dc:	9803      	ldr	r0, [sp, #12]
 801b0de:	f108 0101 	add.w	r1, r8, #1
 801b0e2:	f7fd f977 	bl	80183d4 <_malloc_r>
 801b0e6:	4681      	mov	r9, r0
 801b0e8:	2800      	cmp	r0, #0
 801b0ea:	f040 80a1 	bne.w	801b230 <_svfprintf_r+0x568>
 801b0ee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801b0f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b0f6:	f8ab 300c 	strh.w	r3, [fp, #12]
 801b0fa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801b0fe:	065b      	lsls	r3, r3, #25
 801b100:	f53f ae04 	bmi.w	801ad0c <_svfprintf_r+0x44>
 801b104:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b106:	b053      	add	sp, #332	@ 0x14c
 801b108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b10c:	2378      	movs	r3, #120	@ 0x78
 801b10e:	e7da      	b.n	801b0c6 <_svfprintf_r+0x3fe>
 801b110:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 801b114:	f000 808e 	beq.w	801b234 <_svfprintf_r+0x56c>
 801b118:	9b06      	ldr	r3, [sp, #24]
 801b11a:	f023 0320 	bic.w	r3, r3, #32
 801b11e:	2b47      	cmp	r3, #71	@ 0x47
 801b120:	d105      	bne.n	801b12e <_svfprintf_r+0x466>
 801b122:	f1b8 0f00 	cmp.w	r8, #0
 801b126:	d102      	bne.n	801b12e <_svfprintf_r+0x466>
 801b128:	46c2      	mov	sl, r8
 801b12a:	f04f 0801 	mov.w	r8, #1
 801b12e:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801b132:	9311      	str	r3, [sp, #68]	@ 0x44
 801b134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b136:	2b00      	cmp	r3, #0
 801b138:	da7f      	bge.n	801b23a <_svfprintf_r+0x572>
 801b13a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b13c:	9314      	str	r3, [sp, #80]	@ 0x50
 801b13e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b140:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801b144:	9315      	str	r3, [sp, #84]	@ 0x54
 801b146:	232d      	movs	r3, #45	@ 0x2d
 801b148:	931c      	str	r3, [sp, #112]	@ 0x70
 801b14a:	9b06      	ldr	r3, [sp, #24]
 801b14c:	f023 0320 	bic.w	r3, r3, #32
 801b150:	2b41      	cmp	r3, #65	@ 0x41
 801b152:	9308      	str	r3, [sp, #32]
 801b154:	f040 81e6 	bne.w	801b524 <_svfprintf_r+0x85c>
 801b158:	a820      	add	r0, sp, #128	@ 0x80
 801b15a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801b15e:	f003 fadf 	bl	801e720 <frexp>
 801b162:	2200      	movs	r2, #0
 801b164:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801b168:	ec51 0b10 	vmov	r0, r1, d0
 801b16c:	f7e5 fa54 	bl	8000618 <__aeabi_dmul>
 801b170:	4602      	mov	r2, r0
 801b172:	460b      	mov	r3, r1
 801b174:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b178:	2200      	movs	r2, #0
 801b17a:	2300      	movs	r3, #0
 801b17c:	f7e5 fcb4 	bl	8000ae8 <__aeabi_dcmpeq>
 801b180:	b108      	cbz	r0, 801b186 <_svfprintf_r+0x4be>
 801b182:	2301      	movs	r3, #1
 801b184:	9320      	str	r3, [sp, #128]	@ 0x80
 801b186:	4a36      	ldr	r2, [pc, #216]	@ (801b260 <_svfprintf_r+0x598>)
 801b188:	4b36      	ldr	r3, [pc, #216]	@ (801b264 <_svfprintf_r+0x59c>)
 801b18a:	9906      	ldr	r1, [sp, #24]
 801b18c:	2961      	cmp	r1, #97	@ 0x61
 801b18e:	bf18      	it	ne
 801b190:	461a      	movne	r2, r3
 801b192:	9210      	str	r2, [sp, #64]	@ 0x40
 801b194:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 801b198:	464e      	mov	r6, r9
 801b19a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b19e:	4b32      	ldr	r3, [pc, #200]	@ (801b268 <_svfprintf_r+0x5a0>)
 801b1a0:	2200      	movs	r2, #0
 801b1a2:	f7e5 fa39 	bl	8000618 <__aeabi_dmul>
 801b1a6:	4602      	mov	r2, r0
 801b1a8:	460b      	mov	r3, r1
 801b1aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b1ae:	f7e5 fce3 	bl	8000b78 <__aeabi_d2iz>
 801b1b2:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b1b4:	f7e5 f9c6 	bl	8000544 <__aeabi_i2d>
 801b1b8:	4602      	mov	r2, r0
 801b1ba:	460b      	mov	r3, r1
 801b1bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b1c0:	f7e5 f872 	bl	80002a8 <__aeabi_dsub>
 801b1c4:	4602      	mov	r2, r0
 801b1c6:	460b      	mov	r3, r1
 801b1c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b1cc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b1ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b1d0:	5c9b      	ldrb	r3, [r3, r2]
 801b1d2:	f806 3b01 	strb.w	r3, [r6], #1
 801b1d6:	1c7a      	adds	r2, r7, #1
 801b1d8:	d006      	beq.n	801b1e8 <_svfprintf_r+0x520>
 801b1da:	1e7b      	subs	r3, r7, #1
 801b1dc:	931d      	str	r3, [sp, #116]	@ 0x74
 801b1de:	2200      	movs	r2, #0
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	f7e5 fc81 	bl	8000ae8 <__aeabi_dcmpeq>
 801b1e6:	b370      	cbz	r0, 801b246 <_svfprintf_r+0x57e>
 801b1e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b1ec:	4b1f      	ldr	r3, [pc, #124]	@ (801b26c <_svfprintf_r+0x5a4>)
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	f7e5 fca2 	bl	8000b38 <__aeabi_dcmpgt>
 801b1f4:	2800      	cmp	r0, #0
 801b1f6:	d13b      	bne.n	801b270 <_svfprintf_r+0x5a8>
 801b1f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b1fc:	4b1b      	ldr	r3, [pc, #108]	@ (801b26c <_svfprintf_r+0x5a4>)
 801b1fe:	2200      	movs	r2, #0
 801b200:	f7e5 fc72 	bl	8000ae8 <__aeabi_dcmpeq>
 801b204:	b110      	cbz	r0, 801b20c <_svfprintf_r+0x544>
 801b206:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b208:	07db      	lsls	r3, r3, #31
 801b20a:	d431      	bmi.n	801b270 <_svfprintf_r+0x5a8>
 801b20c:	4633      	mov	r3, r6
 801b20e:	19f1      	adds	r1, r6, r7
 801b210:	2030      	movs	r0, #48	@ 0x30
 801b212:	1aca      	subs	r2, r1, r3
 801b214:	2a00      	cmp	r2, #0
 801b216:	f280 8182 	bge.w	801b51e <_svfprintf_r+0x856>
 801b21a:	1c7b      	adds	r3, r7, #1
 801b21c:	3701      	adds	r7, #1
 801b21e:	bfb8      	it	lt
 801b220:	2300      	movlt	r3, #0
 801b222:	441e      	add	r6, r3
 801b224:	e038      	b.n	801b298 <_svfprintf_r+0x5d0>
 801b226:	f04f 0a00 	mov.w	sl, #0
 801b22a:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801b22e:	e77e      	b.n	801b12e <_svfprintf_r+0x466>
 801b230:	4682      	mov	sl, r0
 801b232:	e77c      	b.n	801b12e <_svfprintf_r+0x466>
 801b234:	f04f 0806 	mov.w	r8, #6
 801b238:	e779      	b.n	801b12e <_svfprintf_r+0x466>
 801b23a:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 801b23e:	2300      	movs	r3, #0
 801b240:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 801b244:	e780      	b.n	801b148 <_svfprintf_r+0x480>
 801b246:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801b248:	e7a7      	b.n	801b19a <_svfprintf_r+0x4d2>
 801b24a:	bf00      	nop
 801b24c:	7fefffff 	.word	0x7fefffff
 801b250:	08021486 	.word	0x08021486
 801b254:	0802148a 	.word	0x0802148a
 801b258:	0802148e 	.word	0x0802148e
 801b25c:	08021492 	.word	0x08021492
 801b260:	08021496 	.word	0x08021496
 801b264:	080214a7 	.word	0x080214a7
 801b268:	40300000 	.word	0x40300000
 801b26c:	3fe00000 	.word	0x3fe00000
 801b270:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b272:	9624      	str	r6, [sp, #144]	@ 0x90
 801b274:	7bd9      	ldrb	r1, [r3, #15]
 801b276:	2030      	movs	r0, #48	@ 0x30
 801b278:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b27a:	1e53      	subs	r3, r2, #1
 801b27c:	9324      	str	r3, [sp, #144]	@ 0x90
 801b27e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801b282:	428b      	cmp	r3, r1
 801b284:	f000 8148 	beq.w	801b518 <_svfprintf_r+0x850>
 801b288:	2b39      	cmp	r3, #57	@ 0x39
 801b28a:	bf0b      	itete	eq
 801b28c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 801b28e:	3301      	addne	r3, #1
 801b290:	7a9b      	ldrbeq	r3, [r3, #10]
 801b292:	b2db      	uxtbne	r3, r3
 801b294:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b298:	eba6 0309 	sub.w	r3, r6, r9
 801b29c:	9304      	str	r3, [sp, #16]
 801b29e:	9b08      	ldr	r3, [sp, #32]
 801b2a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801b2a2:	2b47      	cmp	r3, #71	@ 0x47
 801b2a4:	f040 8187 	bne.w	801b5b6 <_svfprintf_r+0x8ee>
 801b2a8:	1cf1      	adds	r1, r6, #3
 801b2aa:	db02      	blt.n	801b2b2 <_svfprintf_r+0x5ea>
 801b2ac:	4546      	cmp	r6, r8
 801b2ae:	f340 81a5 	ble.w	801b5fc <_svfprintf_r+0x934>
 801b2b2:	9b06      	ldr	r3, [sp, #24]
 801b2b4:	3b02      	subs	r3, #2
 801b2b6:	9306      	str	r3, [sp, #24]
 801b2b8:	9906      	ldr	r1, [sp, #24]
 801b2ba:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801b2be:	f021 0120 	bic.w	r1, r1, #32
 801b2c2:	2941      	cmp	r1, #65	@ 0x41
 801b2c4:	bf08      	it	eq
 801b2c6:	320f      	addeq	r2, #15
 801b2c8:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 801b2cc:	bf06      	itte	eq
 801b2ce:	b2d2      	uxtbeq	r2, r2
 801b2d0:	2101      	moveq	r1, #1
 801b2d2:	2100      	movne	r1, #0
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	9320      	str	r3, [sp, #128]	@ 0x80
 801b2d8:	bfb8      	it	lt
 801b2da:	f1c6 0301 	rsblt	r3, r6, #1
 801b2de:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 801b2e2:	bfb4      	ite	lt
 801b2e4:	222d      	movlt	r2, #45	@ 0x2d
 801b2e6:	222b      	movge	r2, #43	@ 0x2b
 801b2e8:	2b09      	cmp	r3, #9
 801b2ea:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 801b2ee:	f340 8178 	ble.w	801b5e2 <_svfprintf_r+0x91a>
 801b2f2:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801b2f6:	270a      	movs	r7, #10
 801b2f8:	4602      	mov	r2, r0
 801b2fa:	fbb3 f6f7 	udiv	r6, r3, r7
 801b2fe:	fb07 3116 	mls	r1, r7, r6, r3
 801b302:	3130      	adds	r1, #48	@ 0x30
 801b304:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b308:	4619      	mov	r1, r3
 801b30a:	2963      	cmp	r1, #99	@ 0x63
 801b30c:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 801b310:	4633      	mov	r3, r6
 801b312:	dcf1      	bgt.n	801b2f8 <_svfprintf_r+0x630>
 801b314:	3330      	adds	r3, #48	@ 0x30
 801b316:	1e91      	subs	r1, r2, #2
 801b318:	f800 3c01 	strb.w	r3, [r0, #-1]
 801b31c:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 801b320:	460b      	mov	r3, r1
 801b322:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801b326:	4283      	cmp	r3, r0
 801b328:	f0c0 8156 	bcc.w	801b5d8 <_svfprintf_r+0x910>
 801b32c:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 801b330:	1a9b      	subs	r3, r3, r2
 801b332:	4281      	cmp	r1, r0
 801b334:	bf88      	it	hi
 801b336:	2300      	movhi	r3, #0
 801b338:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801b33c:	441a      	add	r2, r3
 801b33e:	ab22      	add	r3, sp, #136	@ 0x88
 801b340:	1ad3      	subs	r3, r2, r3
 801b342:	9a04      	ldr	r2, [sp, #16]
 801b344:	9318      	str	r3, [sp, #96]	@ 0x60
 801b346:	2a01      	cmp	r2, #1
 801b348:	eb03 0802 	add.w	r8, r3, r2
 801b34c:	dc01      	bgt.n	801b352 <_svfprintf_r+0x68a>
 801b34e:	07ea      	lsls	r2, r5, #31
 801b350:	d501      	bpl.n	801b356 <_svfprintf_r+0x68e>
 801b352:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b354:	4498      	add	r8, r3
 801b356:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801b35a:	2700      	movs	r7, #0
 801b35c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801b360:	9311      	str	r3, [sp, #68]	@ 0x44
 801b362:	9708      	str	r7, [sp, #32]
 801b364:	463e      	mov	r6, r7
 801b366:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b368:	2b00      	cmp	r3, #0
 801b36a:	f040 818f 	bne.w	801b68c <_svfprintf_r+0x9c4>
 801b36e:	2300      	movs	r3, #0
 801b370:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801b372:	9310      	str	r3, [sp, #64]	@ 0x40
 801b374:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b376:	4543      	cmp	r3, r8
 801b378:	bfb8      	it	lt
 801b37a:	4643      	movlt	r3, r8
 801b37c:	9311      	str	r3, [sp, #68]	@ 0x44
 801b37e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801b382:	b113      	cbz	r3, 801b38a <_svfprintf_r+0x6c2>
 801b384:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b386:	3301      	adds	r3, #1
 801b388:	9311      	str	r3, [sp, #68]	@ 0x44
 801b38a:	f015 0302 	ands.w	r3, r5, #2
 801b38e:	931c      	str	r3, [sp, #112]	@ 0x70
 801b390:	bf1e      	ittt	ne
 801b392:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 801b394:	3302      	addne	r3, #2
 801b396:	9311      	strne	r3, [sp, #68]	@ 0x44
 801b398:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 801b39c:	931d      	str	r3, [sp, #116]	@ 0x74
 801b39e:	d122      	bne.n	801b3e6 <_svfprintf_r+0x71e>
 801b3a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b3a2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b3a4:	1a9b      	subs	r3, r3, r2
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b3aa:	dd1c      	ble.n	801b3e6 <_svfprintf_r+0x71e>
 801b3ac:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b3ae:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801b3b2:	2810      	cmp	r0, #16
 801b3b4:	489e      	ldr	r0, [pc, #632]	@ (801b630 <_svfprintf_r+0x968>)
 801b3b6:	6020      	str	r0, [r4, #0]
 801b3b8:	f102 0201 	add.w	r2, r2, #1
 801b3bc:	f104 0108 	add.w	r1, r4, #8
 801b3c0:	f300 8298 	bgt.w	801b8f4 <_svfprintf_r+0xc2c>
 801b3c4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b3c6:	6060      	str	r0, [r4, #4]
 801b3c8:	4403      	add	r3, r0
 801b3ca:	2a07      	cmp	r2, #7
 801b3cc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b3d0:	f340 82a5 	ble.w	801b91e <_svfprintf_r+0xc56>
 801b3d4:	9803      	ldr	r0, [sp, #12]
 801b3d6:	aa26      	add	r2, sp, #152	@ 0x98
 801b3d8:	4659      	mov	r1, fp
 801b3da:	f004 ff3f 	bl	802025c <__ssprint_r>
 801b3de:	2800      	cmp	r0, #0
 801b3e0:	f040 85ed 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801b3e4:	ac29      	add	r4, sp, #164	@ 0xa4
 801b3e6:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 801b3ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b3ec:	b16a      	cbz	r2, 801b40a <_svfprintf_r+0x742>
 801b3ee:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 801b3f2:	6022      	str	r2, [r4, #0]
 801b3f4:	2201      	movs	r2, #1
 801b3f6:	4413      	add	r3, r2
 801b3f8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b3fa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b3fc:	6062      	str	r2, [r4, #4]
 801b3fe:	4413      	add	r3, r2
 801b400:	2b07      	cmp	r3, #7
 801b402:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b404:	f300 828d 	bgt.w	801b922 <_svfprintf_r+0xc5a>
 801b408:	3408      	adds	r4, #8
 801b40a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801b40c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b40e:	b162      	cbz	r2, 801b42a <_svfprintf_r+0x762>
 801b410:	aa1f      	add	r2, sp, #124	@ 0x7c
 801b412:	6022      	str	r2, [r4, #0]
 801b414:	2202      	movs	r2, #2
 801b416:	4413      	add	r3, r2
 801b418:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b41a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b41c:	6062      	str	r2, [r4, #4]
 801b41e:	3301      	adds	r3, #1
 801b420:	2b07      	cmp	r3, #7
 801b422:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b424:	f300 8287 	bgt.w	801b936 <_svfprintf_r+0xc6e>
 801b428:	3408      	adds	r4, #8
 801b42a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b42c:	2b80      	cmp	r3, #128	@ 0x80
 801b42e:	d122      	bne.n	801b476 <_svfprintf_r+0x7ae>
 801b430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b432:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b434:	1a9b      	subs	r3, r3, r2
 801b436:	2b00      	cmp	r3, #0
 801b438:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b43a:	dd1c      	ble.n	801b476 <_svfprintf_r+0x7ae>
 801b43c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b43e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801b442:	2810      	cmp	r0, #16
 801b444:	487b      	ldr	r0, [pc, #492]	@ (801b634 <_svfprintf_r+0x96c>)
 801b446:	6020      	str	r0, [r4, #0]
 801b448:	f102 0201 	add.w	r2, r2, #1
 801b44c:	f104 0108 	add.w	r1, r4, #8
 801b450:	f300 827b 	bgt.w	801b94a <_svfprintf_r+0xc82>
 801b454:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b456:	6060      	str	r0, [r4, #4]
 801b458:	4403      	add	r3, r0
 801b45a:	2a07      	cmp	r2, #7
 801b45c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b460:	f340 8288 	ble.w	801b974 <_svfprintf_r+0xcac>
 801b464:	9803      	ldr	r0, [sp, #12]
 801b466:	aa26      	add	r2, sp, #152	@ 0x98
 801b468:	4659      	mov	r1, fp
 801b46a:	f004 fef7 	bl	802025c <__ssprint_r>
 801b46e:	2800      	cmp	r0, #0
 801b470:	f040 85a5 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801b474:	ac29      	add	r4, sp, #164	@ 0xa4
 801b476:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b478:	eba3 0308 	sub.w	r3, r3, r8
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	9310      	str	r3, [sp, #64]	@ 0x40
 801b480:	dd1c      	ble.n	801b4bc <_svfprintf_r+0x7f4>
 801b482:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b484:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801b488:	2810      	cmp	r0, #16
 801b48a:	486a      	ldr	r0, [pc, #424]	@ (801b634 <_svfprintf_r+0x96c>)
 801b48c:	6020      	str	r0, [r4, #0]
 801b48e:	f102 0201 	add.w	r2, r2, #1
 801b492:	f104 0108 	add.w	r1, r4, #8
 801b496:	f300 826f 	bgt.w	801b978 <_svfprintf_r+0xcb0>
 801b49a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b49c:	6060      	str	r0, [r4, #4]
 801b49e:	4403      	add	r3, r0
 801b4a0:	2a07      	cmp	r2, #7
 801b4a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b4a6:	f340 827c 	ble.w	801b9a2 <_svfprintf_r+0xcda>
 801b4aa:	9803      	ldr	r0, [sp, #12]
 801b4ac:	aa26      	add	r2, sp, #152	@ 0x98
 801b4ae:	4659      	mov	r1, fp
 801b4b0:	f004 fed4 	bl	802025c <__ssprint_r>
 801b4b4:	2800      	cmp	r0, #0
 801b4b6:	f040 8582 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801b4ba:	ac29      	add	r4, sp, #164	@ 0xa4
 801b4bc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b4be:	9310      	str	r3, [sp, #64]	@ 0x40
 801b4c0:	05ea      	lsls	r2, r5, #23
 801b4c2:	f100 8275 	bmi.w	801b9b0 <_svfprintf_r+0xce8>
 801b4c6:	4443      	add	r3, r8
 801b4c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b4ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b4cc:	3301      	adds	r3, #1
 801b4ce:	2b07      	cmp	r3, #7
 801b4d0:	e9c4 9800 	strd	r9, r8, [r4]
 801b4d4:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b4d6:	f300 82b1 	bgt.w	801ba3c <_svfprintf_r+0xd74>
 801b4da:	3408      	adds	r4, #8
 801b4dc:	076a      	lsls	r2, r5, #29
 801b4de:	f100 8550 	bmi.w	801bf82 <_svfprintf_r+0x12ba>
 801b4e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b4e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b4e8:	428a      	cmp	r2, r1
 801b4ea:	bfac      	ite	ge
 801b4ec:	189b      	addge	r3, r3, r2
 801b4ee:	185b      	addlt	r3, r3, r1
 801b4f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b4f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b4f4:	b13b      	cbz	r3, 801b506 <_svfprintf_r+0x83e>
 801b4f6:	9803      	ldr	r0, [sp, #12]
 801b4f8:	aa26      	add	r2, sp, #152	@ 0x98
 801b4fa:	4659      	mov	r1, fp
 801b4fc:	f004 feae 	bl	802025c <__ssprint_r>
 801b500:	2800      	cmp	r0, #0
 801b502:	f040 855c 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801b506:	2300      	movs	r3, #0
 801b508:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b50a:	f1ba 0f00 	cmp.w	sl, #0
 801b50e:	f040 8572 	bne.w	801bff6 <_svfprintf_r+0x132e>
 801b512:	9e07      	ldr	r6, [sp, #28]
 801b514:	ac29      	add	r4, sp, #164	@ 0xa4
 801b516:	e0c6      	b.n	801b6a6 <_svfprintf_r+0x9de>
 801b518:	f802 0c01 	strb.w	r0, [r2, #-1]
 801b51c:	e6ac      	b.n	801b278 <_svfprintf_r+0x5b0>
 801b51e:	f803 0b01 	strb.w	r0, [r3], #1
 801b522:	e676      	b.n	801b212 <_svfprintf_r+0x54a>
 801b524:	9b08      	ldr	r3, [sp, #32]
 801b526:	2b46      	cmp	r3, #70	@ 0x46
 801b528:	d005      	beq.n	801b536 <_svfprintf_r+0x86e>
 801b52a:	2b45      	cmp	r3, #69	@ 0x45
 801b52c:	d11a      	bne.n	801b564 <_svfprintf_r+0x89c>
 801b52e:	f108 0601 	add.w	r6, r8, #1
 801b532:	2102      	movs	r1, #2
 801b534:	e001      	b.n	801b53a <_svfprintf_r+0x872>
 801b536:	4646      	mov	r6, r8
 801b538:	2103      	movs	r1, #3
 801b53a:	ab24      	add	r3, sp, #144	@ 0x90
 801b53c:	9301      	str	r3, [sp, #4]
 801b53e:	ab21      	add	r3, sp, #132	@ 0x84
 801b540:	9300      	str	r3, [sp, #0]
 801b542:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801b546:	ab20      	add	r3, sp, #128	@ 0x80
 801b548:	9803      	ldr	r0, [sp, #12]
 801b54a:	4632      	mov	r2, r6
 801b54c:	f003 f9e8 	bl	801e920 <_dtoa_r>
 801b550:	9b08      	ldr	r3, [sp, #32]
 801b552:	2b47      	cmp	r3, #71	@ 0x47
 801b554:	4681      	mov	r9, r0
 801b556:	d119      	bne.n	801b58c <_svfprintf_r+0x8c4>
 801b558:	07e8      	lsls	r0, r5, #31
 801b55a:	d405      	bmi.n	801b568 <_svfprintf_r+0x8a0>
 801b55c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b55e:	eba3 0309 	sub.w	r3, r3, r9
 801b562:	e69b      	b.n	801b29c <_svfprintf_r+0x5d4>
 801b564:	4646      	mov	r6, r8
 801b566:	e7e4      	b.n	801b532 <_svfprintf_r+0x86a>
 801b568:	eb09 0706 	add.w	r7, r9, r6
 801b56c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801b570:	2200      	movs	r2, #0
 801b572:	2300      	movs	r3, #0
 801b574:	f7e5 fab8 	bl	8000ae8 <__aeabi_dcmpeq>
 801b578:	b100      	cbz	r0, 801b57c <_svfprintf_r+0x8b4>
 801b57a:	9724      	str	r7, [sp, #144]	@ 0x90
 801b57c:	2230      	movs	r2, #48	@ 0x30
 801b57e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b580:	429f      	cmp	r7, r3
 801b582:	d9eb      	bls.n	801b55c <_svfprintf_r+0x894>
 801b584:	1c59      	adds	r1, r3, #1
 801b586:	9124      	str	r1, [sp, #144]	@ 0x90
 801b588:	701a      	strb	r2, [r3, #0]
 801b58a:	e7f8      	b.n	801b57e <_svfprintf_r+0x8b6>
 801b58c:	9b08      	ldr	r3, [sp, #32]
 801b58e:	2b46      	cmp	r3, #70	@ 0x46
 801b590:	eb00 0706 	add.w	r7, r0, r6
 801b594:	d1ea      	bne.n	801b56c <_svfprintf_r+0x8a4>
 801b596:	7803      	ldrb	r3, [r0, #0]
 801b598:	2b30      	cmp	r3, #48	@ 0x30
 801b59a:	d109      	bne.n	801b5b0 <_svfprintf_r+0x8e8>
 801b59c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801b5a0:	2200      	movs	r2, #0
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	f7e5 faa0 	bl	8000ae8 <__aeabi_dcmpeq>
 801b5a8:	b910      	cbnz	r0, 801b5b0 <_svfprintf_r+0x8e8>
 801b5aa:	f1c6 0601 	rsb	r6, r6, #1
 801b5ae:	9620      	str	r6, [sp, #128]	@ 0x80
 801b5b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b5b2:	441f      	add	r7, r3
 801b5b4:	e7da      	b.n	801b56c <_svfprintf_r+0x8a4>
 801b5b6:	9b08      	ldr	r3, [sp, #32]
 801b5b8:	2b46      	cmp	r3, #70	@ 0x46
 801b5ba:	f47f ae7d 	bne.w	801b2b8 <_svfprintf_r+0x5f0>
 801b5be:	f005 0301 	and.w	r3, r5, #1
 801b5c2:	2e00      	cmp	r6, #0
 801b5c4:	ea43 0308 	orr.w	r3, r3, r8
 801b5c8:	dd25      	ble.n	801b616 <_svfprintf_r+0x94e>
 801b5ca:	b37b      	cbz	r3, 801b62c <_svfprintf_r+0x964>
 801b5cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b5ce:	18f3      	adds	r3, r6, r3
 801b5d0:	4498      	add	r8, r3
 801b5d2:	2366      	movs	r3, #102	@ 0x66
 801b5d4:	9306      	str	r3, [sp, #24]
 801b5d6:	e033      	b.n	801b640 <_svfprintf_r+0x978>
 801b5d8:	f813 7b01 	ldrb.w	r7, [r3], #1
 801b5dc:	f806 7f01 	strb.w	r7, [r6, #1]!
 801b5e0:	e6a1      	b.n	801b326 <_svfprintf_r+0x65e>
 801b5e2:	b941      	cbnz	r1, 801b5f6 <_svfprintf_r+0x92e>
 801b5e4:	2230      	movs	r2, #48	@ 0x30
 801b5e6:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 801b5ea:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 801b5ee:	3330      	adds	r3, #48	@ 0x30
 801b5f0:	f802 3b01 	strb.w	r3, [r2], #1
 801b5f4:	e6a3      	b.n	801b33e <_svfprintf_r+0x676>
 801b5f6:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801b5fa:	e7f8      	b.n	801b5ee <_svfprintf_r+0x926>
 801b5fc:	9b04      	ldr	r3, [sp, #16]
 801b5fe:	429e      	cmp	r6, r3
 801b600:	da0d      	bge.n	801b61e <_svfprintf_r+0x956>
 801b602:	9b04      	ldr	r3, [sp, #16]
 801b604:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b606:	2e00      	cmp	r6, #0
 801b608:	eb03 0802 	add.w	r8, r3, r2
 801b60c:	dc0c      	bgt.n	801b628 <_svfprintf_r+0x960>
 801b60e:	f1c6 0301 	rsb	r3, r6, #1
 801b612:	4498      	add	r8, r3
 801b614:	e008      	b.n	801b628 <_svfprintf_r+0x960>
 801b616:	b17b      	cbz	r3, 801b638 <_svfprintf_r+0x970>
 801b618:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b61a:	3301      	adds	r3, #1
 801b61c:	e7d8      	b.n	801b5d0 <_svfprintf_r+0x908>
 801b61e:	07eb      	lsls	r3, r5, #31
 801b620:	d521      	bpl.n	801b666 <_svfprintf_r+0x99e>
 801b622:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b624:	eb06 0803 	add.w	r8, r6, r3
 801b628:	2367      	movs	r3, #103	@ 0x67
 801b62a:	e7d3      	b.n	801b5d4 <_svfprintf_r+0x90c>
 801b62c:	46b0      	mov	r8, r6
 801b62e:	e7d0      	b.n	801b5d2 <_svfprintf_r+0x90a>
 801b630:	080214ca 	.word	0x080214ca
 801b634:	080214ba 	.word	0x080214ba
 801b638:	2366      	movs	r3, #102	@ 0x66
 801b63a:	9306      	str	r3, [sp, #24]
 801b63c:	f04f 0801 	mov.w	r8, #1
 801b640:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 801b644:	9308      	str	r3, [sp, #32]
 801b646:	d01f      	beq.n	801b688 <_svfprintf_r+0x9c0>
 801b648:	2700      	movs	r7, #0
 801b64a:	2e00      	cmp	r6, #0
 801b64c:	9708      	str	r7, [sp, #32]
 801b64e:	f77f ae8a 	ble.w	801b366 <_svfprintf_r+0x69e>
 801b652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b654:	781b      	ldrb	r3, [r3, #0]
 801b656:	2bff      	cmp	r3, #255	@ 0xff
 801b658:	d107      	bne.n	801b66a <_svfprintf_r+0x9a2>
 801b65a:	9b08      	ldr	r3, [sp, #32]
 801b65c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b65e:	443b      	add	r3, r7
 801b660:	fb02 8803 	mla	r8, r2, r3, r8
 801b664:	e67f      	b.n	801b366 <_svfprintf_r+0x69e>
 801b666:	46b0      	mov	r8, r6
 801b668:	e7de      	b.n	801b628 <_svfprintf_r+0x960>
 801b66a:	42b3      	cmp	r3, r6
 801b66c:	daf5      	bge.n	801b65a <_svfprintf_r+0x992>
 801b66e:	1af6      	subs	r6, r6, r3
 801b670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b672:	785b      	ldrb	r3, [r3, #1]
 801b674:	b133      	cbz	r3, 801b684 <_svfprintf_r+0x9bc>
 801b676:	9b08      	ldr	r3, [sp, #32]
 801b678:	3301      	adds	r3, #1
 801b67a:	9308      	str	r3, [sp, #32]
 801b67c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b67e:	3301      	adds	r3, #1
 801b680:	9309      	str	r3, [sp, #36]	@ 0x24
 801b682:	e7e6      	b.n	801b652 <_svfprintf_r+0x98a>
 801b684:	3701      	adds	r7, #1
 801b686:	e7e4      	b.n	801b652 <_svfprintf_r+0x98a>
 801b688:	9f08      	ldr	r7, [sp, #32]
 801b68a:	e66c      	b.n	801b366 <_svfprintf_r+0x69e>
 801b68c:	232d      	movs	r3, #45	@ 0x2d
 801b68e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801b692:	e66c      	b.n	801b36e <_svfprintf_r+0x6a6>
 801b694:	06af      	lsls	r7, r5, #26
 801b696:	d50a      	bpl.n	801b6ae <_svfprintf_r+0x9e6>
 801b698:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b69a:	6833      	ldr	r3, [r6, #0]
 801b69c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b69e:	17d2      	asrs	r2, r2, #31
 801b6a0:	e9c3 1200 	strd	r1, r2, [r3]
 801b6a4:	3604      	adds	r6, #4
 801b6a6:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 801b6aa:	f7ff bb46 	b.w	801ad3a <_svfprintf_r+0x72>
 801b6ae:	06e8      	lsls	r0, r5, #27
 801b6b0:	d503      	bpl.n	801b6ba <_svfprintf_r+0x9f2>
 801b6b2:	6833      	ldr	r3, [r6, #0]
 801b6b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b6b6:	601a      	str	r2, [r3, #0]
 801b6b8:	e7f4      	b.n	801b6a4 <_svfprintf_r+0x9dc>
 801b6ba:	0669      	lsls	r1, r5, #25
 801b6bc:	d503      	bpl.n	801b6c6 <_svfprintf_r+0x9fe>
 801b6be:	6833      	ldr	r3, [r6, #0]
 801b6c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b6c2:	801a      	strh	r2, [r3, #0]
 801b6c4:	e7ee      	b.n	801b6a4 <_svfprintf_r+0x9dc>
 801b6c6:	05aa      	lsls	r2, r5, #22
 801b6c8:	d5f3      	bpl.n	801b6b2 <_svfprintf_r+0x9ea>
 801b6ca:	6833      	ldr	r3, [r6, #0]
 801b6cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b6ce:	701a      	strb	r2, [r3, #0]
 801b6d0:	e7e8      	b.n	801b6a4 <_svfprintf_r+0x9dc>
 801b6d2:	f045 0510 	orr.w	r5, r5, #16
 801b6d6:	f015 0320 	ands.w	r3, r5, #32
 801b6da:	d020      	beq.n	801b71e <_svfprintf_r+0xa56>
 801b6dc:	3607      	adds	r6, #7
 801b6de:	f026 0307 	bic.w	r3, r6, #7
 801b6e2:	461a      	mov	r2, r3
 801b6e4:	685f      	ldr	r7, [r3, #4]
 801b6e6:	f852 6b08 	ldr.w	r6, [r2], #8
 801b6ea:	9207      	str	r2, [sp, #28]
 801b6ec:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801b6f0:	2300      	movs	r3, #0
 801b6f2:	2200      	movs	r2, #0
 801b6f4:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801b6f8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 801b6fc:	f000 848c 	beq.w	801c018 <_svfprintf_r+0x1350>
 801b700:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 801b704:	9208      	str	r2, [sp, #32]
 801b706:	ea56 0207 	orrs.w	r2, r6, r7
 801b70a:	f040 848a 	bne.w	801c022 <_svfprintf_r+0x135a>
 801b70e:	f1b8 0f00 	cmp.w	r8, #0
 801b712:	f000 80db 	beq.w	801b8cc <_svfprintf_r+0xc04>
 801b716:	2b01      	cmp	r3, #1
 801b718:	f040 8486 	bne.w	801c028 <_svfprintf_r+0x1360>
 801b71c:	e083      	b.n	801b826 <_svfprintf_r+0xb5e>
 801b71e:	4632      	mov	r2, r6
 801b720:	f015 0710 	ands.w	r7, r5, #16
 801b724:	f852 6b04 	ldr.w	r6, [r2], #4
 801b728:	9207      	str	r2, [sp, #28]
 801b72a:	d001      	beq.n	801b730 <_svfprintf_r+0xa68>
 801b72c:	461f      	mov	r7, r3
 801b72e:	e7dd      	b.n	801b6ec <_svfprintf_r+0xa24>
 801b730:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801b734:	d001      	beq.n	801b73a <_svfprintf_r+0xa72>
 801b736:	b2b6      	uxth	r6, r6
 801b738:	e7d8      	b.n	801b6ec <_svfprintf_r+0xa24>
 801b73a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801b73e:	d0d5      	beq.n	801b6ec <_svfprintf_r+0xa24>
 801b740:	b2f6      	uxtb	r6, r6
 801b742:	e7f3      	b.n	801b72c <_svfprintf_r+0xa64>
 801b744:	4633      	mov	r3, r6
 801b746:	2278      	movs	r2, #120	@ 0x78
 801b748:	f853 6b04 	ldr.w	r6, [r3], #4
 801b74c:	9307      	str	r3, [sp, #28]
 801b74e:	f647 0330 	movw	r3, #30768	@ 0x7830
 801b752:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 801b756:	4b94      	ldr	r3, [pc, #592]	@ (801b9a8 <_svfprintf_r+0xce0>)
 801b758:	9319      	str	r3, [sp, #100]	@ 0x64
 801b75a:	2700      	movs	r7, #0
 801b75c:	f045 0502 	orr.w	r5, r5, #2
 801b760:	2302      	movs	r3, #2
 801b762:	9206      	str	r2, [sp, #24]
 801b764:	e7c5      	b.n	801b6f2 <_svfprintf_r+0xa2a>
 801b766:	4633      	mov	r3, r6
 801b768:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 801b76c:	f853 9b04 	ldr.w	r9, [r3], #4
 801b770:	9307      	str	r3, [sp, #28]
 801b772:	f04f 0600 	mov.w	r6, #0
 801b776:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 801b77a:	d00f      	beq.n	801b79c <_svfprintf_r+0xad4>
 801b77c:	4642      	mov	r2, r8
 801b77e:	4631      	mov	r1, r6
 801b780:	4648      	mov	r0, r9
 801b782:	f7e4 fd3d 	bl	8000200 <memchr>
 801b786:	4682      	mov	sl, r0
 801b788:	2800      	cmp	r0, #0
 801b78a:	f43f ac81 	beq.w	801b090 <_svfprintf_r+0x3c8>
 801b78e:	eba0 0809 	sub.w	r8, r0, r9
 801b792:	46b2      	mov	sl, r6
 801b794:	9610      	str	r6, [sp, #64]	@ 0x40
 801b796:	4637      	mov	r7, r6
 801b798:	9608      	str	r6, [sp, #32]
 801b79a:	e5eb      	b.n	801b374 <_svfprintf_r+0x6ac>
 801b79c:	4648      	mov	r0, r9
 801b79e:	f7e4 fd21 	bl	80001e4 <strlen>
 801b7a2:	46b2      	mov	sl, r6
 801b7a4:	4680      	mov	r8, r0
 801b7a6:	e473      	b.n	801b090 <_svfprintf_r+0x3c8>
 801b7a8:	f045 0510 	orr.w	r5, r5, #16
 801b7ac:	f015 0320 	ands.w	r3, r5, #32
 801b7b0:	d009      	beq.n	801b7c6 <_svfprintf_r+0xafe>
 801b7b2:	3607      	adds	r6, #7
 801b7b4:	f026 0307 	bic.w	r3, r6, #7
 801b7b8:	461a      	mov	r2, r3
 801b7ba:	685f      	ldr	r7, [r3, #4]
 801b7bc:	f852 6b08 	ldr.w	r6, [r2], #8
 801b7c0:	9207      	str	r2, [sp, #28]
 801b7c2:	2301      	movs	r3, #1
 801b7c4:	e795      	b.n	801b6f2 <_svfprintf_r+0xa2a>
 801b7c6:	4632      	mov	r2, r6
 801b7c8:	f015 0710 	ands.w	r7, r5, #16
 801b7cc:	f852 6b04 	ldr.w	r6, [r2], #4
 801b7d0:	9207      	str	r2, [sp, #28]
 801b7d2:	d001      	beq.n	801b7d8 <_svfprintf_r+0xb10>
 801b7d4:	461f      	mov	r7, r3
 801b7d6:	e7f4      	b.n	801b7c2 <_svfprintf_r+0xafa>
 801b7d8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801b7dc:	d001      	beq.n	801b7e2 <_svfprintf_r+0xb1a>
 801b7de:	b2b6      	uxth	r6, r6
 801b7e0:	e7ef      	b.n	801b7c2 <_svfprintf_r+0xafa>
 801b7e2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801b7e6:	d0ec      	beq.n	801b7c2 <_svfprintf_r+0xafa>
 801b7e8:	b2f6      	uxtb	r6, r6
 801b7ea:	e7f3      	b.n	801b7d4 <_svfprintf_r+0xb0c>
 801b7ec:	4b6f      	ldr	r3, [pc, #444]	@ (801b9ac <_svfprintf_r+0xce4>)
 801b7ee:	f7ff bb39 	b.w	801ae64 <_svfprintf_r+0x19c>
 801b7f2:	4632      	mov	r2, r6
 801b7f4:	f015 0710 	ands.w	r7, r5, #16
 801b7f8:	f852 6b04 	ldr.w	r6, [r2], #4
 801b7fc:	9207      	str	r2, [sp, #28]
 801b7fe:	d002      	beq.n	801b806 <_svfprintf_r+0xb3e>
 801b800:	461f      	mov	r7, r3
 801b802:	f7ff bb3c 	b.w	801ae7e <_svfprintf_r+0x1b6>
 801b806:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801b80a:	d002      	beq.n	801b812 <_svfprintf_r+0xb4a>
 801b80c:	b2b6      	uxth	r6, r6
 801b80e:	f7ff bb36 	b.w	801ae7e <_svfprintf_r+0x1b6>
 801b812:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801b816:	f43f ab32 	beq.w	801ae7e <_svfprintf_r+0x1b6>
 801b81a:	b2f6      	uxtb	r6, r6
 801b81c:	e7f0      	b.n	801b800 <_svfprintf_r+0xb38>
 801b81e:	2e0a      	cmp	r6, #10
 801b820:	f177 0300 	sbcs.w	r3, r7, #0
 801b824:	d207      	bcs.n	801b836 <_svfprintf_r+0xb6e>
 801b826:	3630      	adds	r6, #48	@ 0x30
 801b828:	b2f6      	uxtb	r6, r6
 801b82a:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 801b82e:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 801b832:	f000 bc15 	b.w	801c060 <_svfprintf_r+0x1398>
 801b836:	2300      	movs	r3, #0
 801b838:	9304      	str	r3, [sp, #16]
 801b83a:	9b08      	ldr	r3, [sp, #32]
 801b83c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801b840:	ad52      	add	r5, sp, #328	@ 0x148
 801b842:	9310      	str	r3, [sp, #64]	@ 0x40
 801b844:	220a      	movs	r2, #10
 801b846:	2300      	movs	r3, #0
 801b848:	4630      	mov	r0, r6
 801b84a:	4639      	mov	r1, r7
 801b84c:	f7e5 fa2c 	bl	8000ca8 <__aeabi_uldivmod>
 801b850:	9b04      	ldr	r3, [sp, #16]
 801b852:	9011      	str	r0, [sp, #68]	@ 0x44
 801b854:	3301      	adds	r3, #1
 801b856:	9304      	str	r3, [sp, #16]
 801b858:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b85a:	3230      	adds	r2, #48	@ 0x30
 801b85c:	468a      	mov	sl, r1
 801b85e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 801b862:	f805 2c01 	strb.w	r2, [r5, #-1]
 801b866:	b1d3      	cbz	r3, 801b89e <_svfprintf_r+0xbd6>
 801b868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b86a:	9a04      	ldr	r2, [sp, #16]
 801b86c:	781b      	ldrb	r3, [r3, #0]
 801b86e:	429a      	cmp	r2, r3
 801b870:	d115      	bne.n	801b89e <_svfprintf_r+0xbd6>
 801b872:	2aff      	cmp	r2, #255	@ 0xff
 801b874:	d013      	beq.n	801b89e <_svfprintf_r+0xbd6>
 801b876:	2e0a      	cmp	r6, #10
 801b878:	f177 0300 	sbcs.w	r3, r7, #0
 801b87c:	d30f      	bcc.n	801b89e <_svfprintf_r+0xbd6>
 801b87e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b880:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b882:	eba9 0903 	sub.w	r9, r9, r3
 801b886:	461a      	mov	r2, r3
 801b888:	4648      	mov	r0, r9
 801b88a:	f002 ff13 	bl	801e6b4 <strncpy>
 801b88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b890:	785b      	ldrb	r3, [r3, #1]
 801b892:	b11b      	cbz	r3, 801b89c <_svfprintf_r+0xbd4>
 801b894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b896:	3301      	adds	r3, #1
 801b898:	9309      	str	r3, [sp, #36]	@ 0x24
 801b89a:	2300      	movs	r3, #0
 801b89c:	9304      	str	r3, [sp, #16]
 801b89e:	2e0a      	cmp	r6, #10
 801b8a0:	f177 0700 	sbcs.w	r7, r7, #0
 801b8a4:	f0c0 83dc 	bcc.w	801c060 <_svfprintf_r+0x1398>
 801b8a8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801b8aa:	4657      	mov	r7, sl
 801b8ac:	464d      	mov	r5, r9
 801b8ae:	e7c9      	b.n	801b844 <_svfprintf_r+0xb7c>
 801b8b0:	f006 030f 	and.w	r3, r6, #15
 801b8b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801b8b6:	0936      	lsrs	r6, r6, #4
 801b8b8:	5cd3      	ldrb	r3, [r2, r3]
 801b8ba:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801b8be:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 801b8c2:	093f      	lsrs	r7, r7, #4
 801b8c4:	ea56 0307 	orrs.w	r3, r6, r7
 801b8c8:	d1f2      	bne.n	801b8b0 <_svfprintf_r+0xbe8>
 801b8ca:	e3c9      	b.n	801c060 <_svfprintf_r+0x1398>
 801b8cc:	b91b      	cbnz	r3, 801b8d6 <_svfprintf_r+0xc0e>
 801b8ce:	07e9      	lsls	r1, r5, #31
 801b8d0:	d501      	bpl.n	801b8d6 <_svfprintf_r+0xc0e>
 801b8d2:	2630      	movs	r6, #48	@ 0x30
 801b8d4:	e7a9      	b.n	801b82a <_svfprintf_r+0xb62>
 801b8d6:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801b8da:	e3c1      	b.n	801c060 <_svfprintf_r+0x1398>
 801b8dc:	9b06      	ldr	r3, [sp, #24]
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	f000 838f 	beq.w	801c002 <_svfprintf_r+0x133a>
 801b8e4:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801b8ee:	9607      	str	r6, [sp, #28]
 801b8f0:	f7ff bb63 	b.w	801afba <_svfprintf_r+0x2f2>
 801b8f4:	2010      	movs	r0, #16
 801b8f6:	4403      	add	r3, r0
 801b8f8:	2a07      	cmp	r2, #7
 801b8fa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b8fe:	6060      	str	r0, [r4, #4]
 801b900:	dd08      	ble.n	801b914 <_svfprintf_r+0xc4c>
 801b902:	9803      	ldr	r0, [sp, #12]
 801b904:	aa26      	add	r2, sp, #152	@ 0x98
 801b906:	4659      	mov	r1, fp
 801b908:	f004 fca8 	bl	802025c <__ssprint_r>
 801b90c:	2800      	cmp	r0, #0
 801b90e:	f040 8356 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801b912:	a929      	add	r1, sp, #164	@ 0xa4
 801b914:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b916:	3b10      	subs	r3, #16
 801b918:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b91a:	460c      	mov	r4, r1
 801b91c:	e546      	b.n	801b3ac <_svfprintf_r+0x6e4>
 801b91e:	460c      	mov	r4, r1
 801b920:	e561      	b.n	801b3e6 <_svfprintf_r+0x71e>
 801b922:	9803      	ldr	r0, [sp, #12]
 801b924:	aa26      	add	r2, sp, #152	@ 0x98
 801b926:	4659      	mov	r1, fp
 801b928:	f004 fc98 	bl	802025c <__ssprint_r>
 801b92c:	2800      	cmp	r0, #0
 801b92e:	f040 8346 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801b932:	ac29      	add	r4, sp, #164	@ 0xa4
 801b934:	e569      	b.n	801b40a <_svfprintf_r+0x742>
 801b936:	9803      	ldr	r0, [sp, #12]
 801b938:	aa26      	add	r2, sp, #152	@ 0x98
 801b93a:	4659      	mov	r1, fp
 801b93c:	f004 fc8e 	bl	802025c <__ssprint_r>
 801b940:	2800      	cmp	r0, #0
 801b942:	f040 833c 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801b946:	ac29      	add	r4, sp, #164	@ 0xa4
 801b948:	e56f      	b.n	801b42a <_svfprintf_r+0x762>
 801b94a:	2010      	movs	r0, #16
 801b94c:	4403      	add	r3, r0
 801b94e:	2a07      	cmp	r2, #7
 801b950:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b954:	6060      	str	r0, [r4, #4]
 801b956:	dd08      	ble.n	801b96a <_svfprintf_r+0xca2>
 801b958:	9803      	ldr	r0, [sp, #12]
 801b95a:	aa26      	add	r2, sp, #152	@ 0x98
 801b95c:	4659      	mov	r1, fp
 801b95e:	f004 fc7d 	bl	802025c <__ssprint_r>
 801b962:	2800      	cmp	r0, #0
 801b964:	f040 832b 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801b968:	a929      	add	r1, sp, #164	@ 0xa4
 801b96a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b96c:	3b10      	subs	r3, #16
 801b96e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b970:	460c      	mov	r4, r1
 801b972:	e563      	b.n	801b43c <_svfprintf_r+0x774>
 801b974:	460c      	mov	r4, r1
 801b976:	e57e      	b.n	801b476 <_svfprintf_r+0x7ae>
 801b978:	2010      	movs	r0, #16
 801b97a:	4403      	add	r3, r0
 801b97c:	2a07      	cmp	r2, #7
 801b97e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801b982:	6060      	str	r0, [r4, #4]
 801b984:	dd08      	ble.n	801b998 <_svfprintf_r+0xcd0>
 801b986:	9803      	ldr	r0, [sp, #12]
 801b988:	aa26      	add	r2, sp, #152	@ 0x98
 801b98a:	4659      	mov	r1, fp
 801b98c:	f004 fc66 	bl	802025c <__ssprint_r>
 801b990:	2800      	cmp	r0, #0
 801b992:	f040 8314 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801b996:	a929      	add	r1, sp, #164	@ 0xa4
 801b998:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b99a:	3b10      	subs	r3, #16
 801b99c:	9310      	str	r3, [sp, #64]	@ 0x40
 801b99e:	460c      	mov	r4, r1
 801b9a0:	e56f      	b.n	801b482 <_svfprintf_r+0x7ba>
 801b9a2:	460c      	mov	r4, r1
 801b9a4:	e58a      	b.n	801b4bc <_svfprintf_r+0x7f4>
 801b9a6:	bf00      	nop
 801b9a8:	08021496 	.word	0x08021496
 801b9ac:	080214a7 	.word	0x080214a7
 801b9b0:	9b06      	ldr	r3, [sp, #24]
 801b9b2:	2b65      	cmp	r3, #101	@ 0x65
 801b9b4:	f340 8246 	ble.w	801be44 <_svfprintf_r+0x117c>
 801b9b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b9bc:	2200      	movs	r2, #0
 801b9be:	2300      	movs	r3, #0
 801b9c0:	f7e5 f892 	bl	8000ae8 <__aeabi_dcmpeq>
 801b9c4:	2800      	cmp	r0, #0
 801b9c6:	d06a      	beq.n	801ba9e <_svfprintf_r+0xdd6>
 801b9c8:	4b73      	ldr	r3, [pc, #460]	@ (801bb98 <_svfprintf_r+0xed0>)
 801b9ca:	6023      	str	r3, [r4, #0]
 801b9cc:	2301      	movs	r3, #1
 801b9ce:	6063      	str	r3, [r4, #4]
 801b9d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b9d2:	3301      	adds	r3, #1
 801b9d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b9d6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b9d8:	3301      	adds	r3, #1
 801b9da:	2b07      	cmp	r3, #7
 801b9dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b9de:	dc37      	bgt.n	801ba50 <_svfprintf_r+0xd88>
 801b9e0:	3408      	adds	r4, #8
 801b9e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801b9e4:	9a04      	ldr	r2, [sp, #16]
 801b9e6:	4293      	cmp	r3, r2
 801b9e8:	db02      	blt.n	801b9f0 <_svfprintf_r+0xd28>
 801b9ea:	07ef      	lsls	r7, r5, #31
 801b9ec:	f57f ad76 	bpl.w	801b4dc <_svfprintf_r+0x814>
 801b9f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b9f2:	6023      	str	r3, [r4, #0]
 801b9f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b9f6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b9f8:	6063      	str	r3, [r4, #4]
 801b9fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b9fc:	4413      	add	r3, r2
 801b9fe:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ba00:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ba02:	3301      	adds	r3, #1
 801ba04:	2b07      	cmp	r3, #7
 801ba06:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ba08:	dc2c      	bgt.n	801ba64 <_svfprintf_r+0xd9c>
 801ba0a:	3408      	adds	r4, #8
 801ba0c:	9b04      	ldr	r3, [sp, #16]
 801ba0e:	1e5e      	subs	r6, r3, #1
 801ba10:	2e00      	cmp	r6, #0
 801ba12:	f77f ad63 	ble.w	801b4dc <_svfprintf_r+0x814>
 801ba16:	4f61      	ldr	r7, [pc, #388]	@ (801bb9c <_svfprintf_r+0xed4>)
 801ba18:	f04f 0810 	mov.w	r8, #16
 801ba1c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801ba20:	2e10      	cmp	r6, #16
 801ba22:	f103 0301 	add.w	r3, r3, #1
 801ba26:	f104 0108 	add.w	r1, r4, #8
 801ba2a:	6027      	str	r7, [r4, #0]
 801ba2c:	dc24      	bgt.n	801ba78 <_svfprintf_r+0xdb0>
 801ba2e:	6066      	str	r6, [r4, #4]
 801ba30:	2b07      	cmp	r3, #7
 801ba32:	4416      	add	r6, r2
 801ba34:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801ba38:	f340 82a0 	ble.w	801bf7c <_svfprintf_r+0x12b4>
 801ba3c:	9803      	ldr	r0, [sp, #12]
 801ba3e:	aa26      	add	r2, sp, #152	@ 0x98
 801ba40:	4659      	mov	r1, fp
 801ba42:	f004 fc0b 	bl	802025c <__ssprint_r>
 801ba46:	2800      	cmp	r0, #0
 801ba48:	f040 82b9 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801ba4c:	ac29      	add	r4, sp, #164	@ 0xa4
 801ba4e:	e545      	b.n	801b4dc <_svfprintf_r+0x814>
 801ba50:	9803      	ldr	r0, [sp, #12]
 801ba52:	aa26      	add	r2, sp, #152	@ 0x98
 801ba54:	4659      	mov	r1, fp
 801ba56:	f004 fc01 	bl	802025c <__ssprint_r>
 801ba5a:	2800      	cmp	r0, #0
 801ba5c:	f040 82af 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801ba60:	ac29      	add	r4, sp, #164	@ 0xa4
 801ba62:	e7be      	b.n	801b9e2 <_svfprintf_r+0xd1a>
 801ba64:	9803      	ldr	r0, [sp, #12]
 801ba66:	aa26      	add	r2, sp, #152	@ 0x98
 801ba68:	4659      	mov	r1, fp
 801ba6a:	f004 fbf7 	bl	802025c <__ssprint_r>
 801ba6e:	2800      	cmp	r0, #0
 801ba70:	f040 82a5 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801ba74:	ac29      	add	r4, sp, #164	@ 0xa4
 801ba76:	e7c9      	b.n	801ba0c <_svfprintf_r+0xd44>
 801ba78:	3210      	adds	r2, #16
 801ba7a:	2b07      	cmp	r3, #7
 801ba7c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801ba80:	f8c4 8004 	str.w	r8, [r4, #4]
 801ba84:	dd08      	ble.n	801ba98 <_svfprintf_r+0xdd0>
 801ba86:	9803      	ldr	r0, [sp, #12]
 801ba88:	aa26      	add	r2, sp, #152	@ 0x98
 801ba8a:	4659      	mov	r1, fp
 801ba8c:	f004 fbe6 	bl	802025c <__ssprint_r>
 801ba90:	2800      	cmp	r0, #0
 801ba92:	f040 8294 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801ba96:	a929      	add	r1, sp, #164	@ 0xa4
 801ba98:	3e10      	subs	r6, #16
 801ba9a:	460c      	mov	r4, r1
 801ba9c:	e7be      	b.n	801ba1c <_svfprintf_r+0xd54>
 801ba9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	dc7d      	bgt.n	801bba0 <_svfprintf_r+0xed8>
 801baa4:	4b3c      	ldr	r3, [pc, #240]	@ (801bb98 <_svfprintf_r+0xed0>)
 801baa6:	6023      	str	r3, [r4, #0]
 801baa8:	2301      	movs	r3, #1
 801baaa:	6063      	str	r3, [r4, #4]
 801baac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801baae:	3301      	adds	r3, #1
 801bab0:	9328      	str	r3, [sp, #160]	@ 0xa0
 801bab2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801bab4:	3301      	adds	r3, #1
 801bab6:	2b07      	cmp	r3, #7
 801bab8:	9327      	str	r3, [sp, #156]	@ 0x9c
 801baba:	dc46      	bgt.n	801bb4a <_svfprintf_r+0xe82>
 801babc:	3408      	adds	r4, #8
 801babe:	9904      	ldr	r1, [sp, #16]
 801bac0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801bac2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801bac4:	430b      	orrs	r3, r1
 801bac6:	f005 0101 	and.w	r1, r5, #1
 801baca:	430b      	orrs	r3, r1
 801bacc:	f43f ad06 	beq.w	801b4dc <_svfprintf_r+0x814>
 801bad0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bad2:	6023      	str	r3, [r4, #0]
 801bad4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bad6:	6063      	str	r3, [r4, #4]
 801bad8:	441a      	add	r2, r3
 801bada:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801badc:	9228      	str	r2, [sp, #160]	@ 0xa0
 801bade:	3301      	adds	r3, #1
 801bae0:	2b07      	cmp	r3, #7
 801bae2:	9327      	str	r3, [sp, #156]	@ 0x9c
 801bae4:	dc3b      	bgt.n	801bb5e <_svfprintf_r+0xe96>
 801bae6:	f104 0308 	add.w	r3, r4, #8
 801baea:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801baec:	2e00      	cmp	r6, #0
 801baee:	da1b      	bge.n	801bb28 <_svfprintf_r+0xe60>
 801baf0:	4f2a      	ldr	r7, [pc, #168]	@ (801bb9c <_svfprintf_r+0xed4>)
 801baf2:	4276      	negs	r6, r6
 801baf4:	461a      	mov	r2, r3
 801baf6:	2410      	movs	r4, #16
 801baf8:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 801bafc:	2e10      	cmp	r6, #16
 801bafe:	f101 0101 	add.w	r1, r1, #1
 801bb02:	f103 0308 	add.w	r3, r3, #8
 801bb06:	6017      	str	r7, [r2, #0]
 801bb08:	dc33      	bgt.n	801bb72 <_svfprintf_r+0xeaa>
 801bb0a:	6056      	str	r6, [r2, #4]
 801bb0c:	2907      	cmp	r1, #7
 801bb0e:	4406      	add	r6, r0
 801bb10:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 801bb14:	dd08      	ble.n	801bb28 <_svfprintf_r+0xe60>
 801bb16:	9803      	ldr	r0, [sp, #12]
 801bb18:	aa26      	add	r2, sp, #152	@ 0x98
 801bb1a:	4659      	mov	r1, fp
 801bb1c:	f004 fb9e 	bl	802025c <__ssprint_r>
 801bb20:	2800      	cmp	r0, #0
 801bb22:	f040 824c 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801bb26:	ab29      	add	r3, sp, #164	@ 0xa4
 801bb28:	9a04      	ldr	r2, [sp, #16]
 801bb2a:	9904      	ldr	r1, [sp, #16]
 801bb2c:	605a      	str	r2, [r3, #4]
 801bb2e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801bb30:	f8c3 9000 	str.w	r9, [r3]
 801bb34:	440a      	add	r2, r1
 801bb36:	9228      	str	r2, [sp, #160]	@ 0xa0
 801bb38:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801bb3a:	3201      	adds	r2, #1
 801bb3c:	2a07      	cmp	r2, #7
 801bb3e:	9227      	str	r2, [sp, #156]	@ 0x9c
 801bb40:	f73f af7c 	bgt.w	801ba3c <_svfprintf_r+0xd74>
 801bb44:	f103 0408 	add.w	r4, r3, #8
 801bb48:	e4c8      	b.n	801b4dc <_svfprintf_r+0x814>
 801bb4a:	9803      	ldr	r0, [sp, #12]
 801bb4c:	aa26      	add	r2, sp, #152	@ 0x98
 801bb4e:	4659      	mov	r1, fp
 801bb50:	f004 fb84 	bl	802025c <__ssprint_r>
 801bb54:	2800      	cmp	r0, #0
 801bb56:	f040 8232 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801bb5a:	ac29      	add	r4, sp, #164	@ 0xa4
 801bb5c:	e7af      	b.n	801babe <_svfprintf_r+0xdf6>
 801bb5e:	9803      	ldr	r0, [sp, #12]
 801bb60:	aa26      	add	r2, sp, #152	@ 0x98
 801bb62:	4659      	mov	r1, fp
 801bb64:	f004 fb7a 	bl	802025c <__ssprint_r>
 801bb68:	2800      	cmp	r0, #0
 801bb6a:	f040 8228 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801bb6e:	ab29      	add	r3, sp, #164	@ 0xa4
 801bb70:	e7bb      	b.n	801baea <_svfprintf_r+0xe22>
 801bb72:	3010      	adds	r0, #16
 801bb74:	2907      	cmp	r1, #7
 801bb76:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 801bb7a:	6054      	str	r4, [r2, #4]
 801bb7c:	dd08      	ble.n	801bb90 <_svfprintf_r+0xec8>
 801bb7e:	9803      	ldr	r0, [sp, #12]
 801bb80:	aa26      	add	r2, sp, #152	@ 0x98
 801bb82:	4659      	mov	r1, fp
 801bb84:	f004 fb6a 	bl	802025c <__ssprint_r>
 801bb88:	2800      	cmp	r0, #0
 801bb8a:	f040 8218 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801bb8e:	ab29      	add	r3, sp, #164	@ 0xa4
 801bb90:	3e10      	subs	r6, #16
 801bb92:	461a      	mov	r2, r3
 801bb94:	e7b0      	b.n	801baf8 <_svfprintf_r+0xe30>
 801bb96:	bf00      	nop
 801bb98:	080214b8 	.word	0x080214b8
 801bb9c:	080214ba 	.word	0x080214ba
 801bba0:	9b04      	ldr	r3, [sp, #16]
 801bba2:	444b      	add	r3, r9
 801bba4:	9306      	str	r3, [sp, #24]
 801bba6:	9b04      	ldr	r3, [sp, #16]
 801bba8:	42b3      	cmp	r3, r6
 801bbaa:	bfa8      	it	ge
 801bbac:	4633      	movge	r3, r6
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	4698      	mov	r8, r3
 801bbb2:	dd0b      	ble.n	801bbcc <_svfprintf_r+0xf04>
 801bbb4:	e9c4 9300 	strd	r9, r3, [r4]
 801bbb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bbba:	4443      	add	r3, r8
 801bbbc:	9328      	str	r3, [sp, #160]	@ 0xa0
 801bbbe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801bbc0:	3301      	adds	r3, #1
 801bbc2:	2b07      	cmp	r3, #7
 801bbc4:	9327      	str	r3, [sp, #156]	@ 0x9c
 801bbc6:	f300 8089 	bgt.w	801bcdc <_svfprintf_r+0x1014>
 801bbca:	3408      	adds	r4, #8
 801bbcc:	4643      	mov	r3, r8
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	bfac      	ite	ge
 801bbd2:	eba6 0808 	subge.w	r8, r6, r8
 801bbd6:	46b0      	movlt	r8, r6
 801bbd8:	f1b8 0f00 	cmp.w	r8, #0
 801bbdc:	dd1b      	ble.n	801bc16 <_svfprintf_r+0xf4e>
 801bbde:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801bbe2:	4897      	ldr	r0, [pc, #604]	@ (801be40 <_svfprintf_r+0x1178>)
 801bbe4:	6020      	str	r0, [r4, #0]
 801bbe6:	f1b8 0f10 	cmp.w	r8, #16
 801bbea:	f102 0201 	add.w	r2, r2, #1
 801bbee:	f104 0108 	add.w	r1, r4, #8
 801bbf2:	dc7d      	bgt.n	801bcf0 <_svfprintf_r+0x1028>
 801bbf4:	4443      	add	r3, r8
 801bbf6:	2a07      	cmp	r2, #7
 801bbf8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801bbfc:	f8c4 8004 	str.w	r8, [r4, #4]
 801bc00:	f340 808a 	ble.w	801bd18 <_svfprintf_r+0x1050>
 801bc04:	9803      	ldr	r0, [sp, #12]
 801bc06:	aa26      	add	r2, sp, #152	@ 0x98
 801bc08:	4659      	mov	r1, fp
 801bc0a:	f004 fb27 	bl	802025c <__ssprint_r>
 801bc0e:	2800      	cmp	r0, #0
 801bc10:	f040 81d5 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801bc14:	ac29      	add	r4, sp, #164	@ 0xa4
 801bc16:	eb09 0806 	add.w	r8, r9, r6
 801bc1a:	056e      	lsls	r6, r5, #21
 801bc1c:	d508      	bpl.n	801bc30 <_svfprintf_r+0xf68>
 801bc1e:	9b08      	ldr	r3, [sp, #32]
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	d17b      	bne.n	801bd1c <_svfprintf_r+0x1054>
 801bc24:	2f00      	cmp	r7, #0
 801bc26:	d17b      	bne.n	801bd20 <_svfprintf_r+0x1058>
 801bc28:	9b06      	ldr	r3, [sp, #24]
 801bc2a:	4598      	cmp	r8, r3
 801bc2c:	bf28      	it	cs
 801bc2e:	4698      	movcs	r8, r3
 801bc30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801bc32:	9a04      	ldr	r2, [sp, #16]
 801bc34:	4293      	cmp	r3, r2
 801bc36:	db01      	blt.n	801bc3c <_svfprintf_r+0xf74>
 801bc38:	07e8      	lsls	r0, r5, #31
 801bc3a:	d50e      	bpl.n	801bc5a <_svfprintf_r+0xf92>
 801bc3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bc3e:	6023      	str	r3, [r4, #0]
 801bc40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bc42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bc44:	6063      	str	r3, [r4, #4]
 801bc46:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801bc48:	4413      	add	r3, r2
 801bc4a:	9328      	str	r3, [sp, #160]	@ 0xa0
 801bc4c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801bc4e:	3301      	adds	r3, #1
 801bc50:	2b07      	cmp	r3, #7
 801bc52:	9327      	str	r3, [sp, #156]	@ 0x9c
 801bc54:	f300 80df 	bgt.w	801be16 <_svfprintf_r+0x114e>
 801bc58:	3408      	adds	r4, #8
 801bc5a:	9b04      	ldr	r3, [sp, #16]
 801bc5c:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 801bc5e:	1bdf      	subs	r7, r3, r7
 801bc60:	9b06      	ldr	r3, [sp, #24]
 801bc62:	eba3 0308 	sub.w	r3, r3, r8
 801bc66:	429f      	cmp	r7, r3
 801bc68:	bfa8      	it	ge
 801bc6a:	461f      	movge	r7, r3
 801bc6c:	2f00      	cmp	r7, #0
 801bc6e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801bc70:	dd0a      	ble.n	801bc88 <_svfprintf_r+0xfc0>
 801bc72:	443b      	add	r3, r7
 801bc74:	9328      	str	r3, [sp, #160]	@ 0xa0
 801bc76:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801bc78:	3301      	adds	r3, #1
 801bc7a:	2b07      	cmp	r3, #7
 801bc7c:	e9c4 8700 	strd	r8, r7, [r4]
 801bc80:	9327      	str	r3, [sp, #156]	@ 0x9c
 801bc82:	f300 80d2 	bgt.w	801be2a <_svfprintf_r+0x1162>
 801bc86:	3408      	adds	r4, #8
 801bc88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801bc8a:	9b04      	ldr	r3, [sp, #16]
 801bc8c:	2f00      	cmp	r7, #0
 801bc8e:	eba3 0606 	sub.w	r6, r3, r6
 801bc92:	bfa8      	it	ge
 801bc94:	1bf6      	subge	r6, r6, r7
 801bc96:	2e00      	cmp	r6, #0
 801bc98:	f77f ac20 	ble.w	801b4dc <_svfprintf_r+0x814>
 801bc9c:	4f68      	ldr	r7, [pc, #416]	@ (801be40 <_svfprintf_r+0x1178>)
 801bc9e:	f04f 0810 	mov.w	r8, #16
 801bca2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801bca6:	2e10      	cmp	r6, #16
 801bca8:	f103 0301 	add.w	r3, r3, #1
 801bcac:	f104 0108 	add.w	r1, r4, #8
 801bcb0:	6027      	str	r7, [r4, #0]
 801bcb2:	f77f aebc 	ble.w	801ba2e <_svfprintf_r+0xd66>
 801bcb6:	3210      	adds	r2, #16
 801bcb8:	2b07      	cmp	r3, #7
 801bcba:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801bcbe:	f8c4 8004 	str.w	r8, [r4, #4]
 801bcc2:	dd08      	ble.n	801bcd6 <_svfprintf_r+0x100e>
 801bcc4:	9803      	ldr	r0, [sp, #12]
 801bcc6:	aa26      	add	r2, sp, #152	@ 0x98
 801bcc8:	4659      	mov	r1, fp
 801bcca:	f004 fac7 	bl	802025c <__ssprint_r>
 801bcce:	2800      	cmp	r0, #0
 801bcd0:	f040 8175 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801bcd4:	a929      	add	r1, sp, #164	@ 0xa4
 801bcd6:	3e10      	subs	r6, #16
 801bcd8:	460c      	mov	r4, r1
 801bcda:	e7e2      	b.n	801bca2 <_svfprintf_r+0xfda>
 801bcdc:	9803      	ldr	r0, [sp, #12]
 801bcde:	aa26      	add	r2, sp, #152	@ 0x98
 801bce0:	4659      	mov	r1, fp
 801bce2:	f004 fabb 	bl	802025c <__ssprint_r>
 801bce6:	2800      	cmp	r0, #0
 801bce8:	f040 8169 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801bcec:	ac29      	add	r4, sp, #164	@ 0xa4
 801bcee:	e76d      	b.n	801bbcc <_svfprintf_r+0xf04>
 801bcf0:	2010      	movs	r0, #16
 801bcf2:	4403      	add	r3, r0
 801bcf4:	2a07      	cmp	r2, #7
 801bcf6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801bcfa:	6060      	str	r0, [r4, #4]
 801bcfc:	dd08      	ble.n	801bd10 <_svfprintf_r+0x1048>
 801bcfe:	9803      	ldr	r0, [sp, #12]
 801bd00:	aa26      	add	r2, sp, #152	@ 0x98
 801bd02:	4659      	mov	r1, fp
 801bd04:	f004 faaa 	bl	802025c <__ssprint_r>
 801bd08:	2800      	cmp	r0, #0
 801bd0a:	f040 8158 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801bd0e:	a929      	add	r1, sp, #164	@ 0xa4
 801bd10:	f1a8 0810 	sub.w	r8, r8, #16
 801bd14:	460c      	mov	r4, r1
 801bd16:	e762      	b.n	801bbde <_svfprintf_r+0xf16>
 801bd18:	460c      	mov	r4, r1
 801bd1a:	e77c      	b.n	801bc16 <_svfprintf_r+0xf4e>
 801bd1c:	2f00      	cmp	r7, #0
 801bd1e:	d04a      	beq.n	801bdb6 <_svfprintf_r+0x10ee>
 801bd20:	3f01      	subs	r7, #1
 801bd22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bd24:	6023      	str	r3, [r4, #0]
 801bd26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bd28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bd2a:	6063      	str	r3, [r4, #4]
 801bd2c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801bd2e:	4413      	add	r3, r2
 801bd30:	9328      	str	r3, [sp, #160]	@ 0xa0
 801bd32:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801bd34:	3301      	adds	r3, #1
 801bd36:	2b07      	cmp	r3, #7
 801bd38:	9327      	str	r3, [sp, #156]	@ 0x9c
 801bd3a:	dc43      	bgt.n	801bdc4 <_svfprintf_r+0x10fc>
 801bd3c:	3408      	adds	r4, #8
 801bd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd40:	781a      	ldrb	r2, [r3, #0]
 801bd42:	9b06      	ldr	r3, [sp, #24]
 801bd44:	eba3 0308 	sub.w	r3, r3, r8
 801bd48:	429a      	cmp	r2, r3
 801bd4a:	bfa8      	it	ge
 801bd4c:	461a      	movge	r2, r3
 801bd4e:	2a00      	cmp	r2, #0
 801bd50:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801bd52:	4691      	mov	r9, r2
 801bd54:	dd09      	ble.n	801bd6a <_svfprintf_r+0x10a2>
 801bd56:	4413      	add	r3, r2
 801bd58:	9328      	str	r3, [sp, #160]	@ 0xa0
 801bd5a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801bd5c:	3301      	adds	r3, #1
 801bd5e:	2b07      	cmp	r3, #7
 801bd60:	e9c4 8200 	strd	r8, r2, [r4]
 801bd64:	9327      	str	r3, [sp, #156]	@ 0x9c
 801bd66:	dc37      	bgt.n	801bdd8 <_svfprintf_r+0x1110>
 801bd68:	3408      	adds	r4, #8
 801bd6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd6c:	781e      	ldrb	r6, [r3, #0]
 801bd6e:	f1b9 0f00 	cmp.w	r9, #0
 801bd72:	bfa8      	it	ge
 801bd74:	eba6 0609 	subge.w	r6, r6, r9
 801bd78:	2e00      	cmp	r6, #0
 801bd7a:	dd18      	ble.n	801bdae <_svfprintf_r+0x10e6>
 801bd7c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801bd80:	482f      	ldr	r0, [pc, #188]	@ (801be40 <_svfprintf_r+0x1178>)
 801bd82:	6020      	str	r0, [r4, #0]
 801bd84:	2e10      	cmp	r6, #16
 801bd86:	f103 0301 	add.w	r3, r3, #1
 801bd8a:	f104 0108 	add.w	r1, r4, #8
 801bd8e:	dc2d      	bgt.n	801bdec <_svfprintf_r+0x1124>
 801bd90:	6066      	str	r6, [r4, #4]
 801bd92:	2b07      	cmp	r3, #7
 801bd94:	4416      	add	r6, r2
 801bd96:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801bd9a:	dd3a      	ble.n	801be12 <_svfprintf_r+0x114a>
 801bd9c:	9803      	ldr	r0, [sp, #12]
 801bd9e:	aa26      	add	r2, sp, #152	@ 0x98
 801bda0:	4659      	mov	r1, fp
 801bda2:	f004 fa5b 	bl	802025c <__ssprint_r>
 801bda6:	2800      	cmp	r0, #0
 801bda8:	f040 8109 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801bdac:	ac29      	add	r4, sp, #164	@ 0xa4
 801bdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bdb0:	781b      	ldrb	r3, [r3, #0]
 801bdb2:	4498      	add	r8, r3
 801bdb4:	e733      	b.n	801bc1e <_svfprintf_r+0xf56>
 801bdb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bdb8:	3b01      	subs	r3, #1
 801bdba:	9309      	str	r3, [sp, #36]	@ 0x24
 801bdbc:	9b08      	ldr	r3, [sp, #32]
 801bdbe:	3b01      	subs	r3, #1
 801bdc0:	9308      	str	r3, [sp, #32]
 801bdc2:	e7ae      	b.n	801bd22 <_svfprintf_r+0x105a>
 801bdc4:	9803      	ldr	r0, [sp, #12]
 801bdc6:	aa26      	add	r2, sp, #152	@ 0x98
 801bdc8:	4659      	mov	r1, fp
 801bdca:	f004 fa47 	bl	802025c <__ssprint_r>
 801bdce:	2800      	cmp	r0, #0
 801bdd0:	f040 80f5 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801bdd4:	ac29      	add	r4, sp, #164	@ 0xa4
 801bdd6:	e7b2      	b.n	801bd3e <_svfprintf_r+0x1076>
 801bdd8:	9803      	ldr	r0, [sp, #12]
 801bdda:	aa26      	add	r2, sp, #152	@ 0x98
 801bddc:	4659      	mov	r1, fp
 801bdde:	f004 fa3d 	bl	802025c <__ssprint_r>
 801bde2:	2800      	cmp	r0, #0
 801bde4:	f040 80eb 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801bde8:	ac29      	add	r4, sp, #164	@ 0xa4
 801bdea:	e7be      	b.n	801bd6a <_svfprintf_r+0x10a2>
 801bdec:	2010      	movs	r0, #16
 801bdee:	4402      	add	r2, r0
 801bdf0:	2b07      	cmp	r3, #7
 801bdf2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801bdf6:	6060      	str	r0, [r4, #4]
 801bdf8:	dd08      	ble.n	801be0c <_svfprintf_r+0x1144>
 801bdfa:	9803      	ldr	r0, [sp, #12]
 801bdfc:	aa26      	add	r2, sp, #152	@ 0x98
 801bdfe:	4659      	mov	r1, fp
 801be00:	f004 fa2c 	bl	802025c <__ssprint_r>
 801be04:	2800      	cmp	r0, #0
 801be06:	f040 80da 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801be0a:	a929      	add	r1, sp, #164	@ 0xa4
 801be0c:	3e10      	subs	r6, #16
 801be0e:	460c      	mov	r4, r1
 801be10:	e7b4      	b.n	801bd7c <_svfprintf_r+0x10b4>
 801be12:	460c      	mov	r4, r1
 801be14:	e7cb      	b.n	801bdae <_svfprintf_r+0x10e6>
 801be16:	9803      	ldr	r0, [sp, #12]
 801be18:	aa26      	add	r2, sp, #152	@ 0x98
 801be1a:	4659      	mov	r1, fp
 801be1c:	f004 fa1e 	bl	802025c <__ssprint_r>
 801be20:	2800      	cmp	r0, #0
 801be22:	f040 80cc 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801be26:	ac29      	add	r4, sp, #164	@ 0xa4
 801be28:	e717      	b.n	801bc5a <_svfprintf_r+0xf92>
 801be2a:	9803      	ldr	r0, [sp, #12]
 801be2c:	aa26      	add	r2, sp, #152	@ 0x98
 801be2e:	4659      	mov	r1, fp
 801be30:	f004 fa14 	bl	802025c <__ssprint_r>
 801be34:	2800      	cmp	r0, #0
 801be36:	f040 80c2 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801be3a:	ac29      	add	r4, sp, #164	@ 0xa4
 801be3c:	e724      	b.n	801bc88 <_svfprintf_r+0xfc0>
 801be3e:	bf00      	nop
 801be40:	080214ba 	.word	0x080214ba
 801be44:	9904      	ldr	r1, [sp, #16]
 801be46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801be48:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801be4a:	2901      	cmp	r1, #1
 801be4c:	f103 0301 	add.w	r3, r3, #1
 801be50:	f102 0201 	add.w	r2, r2, #1
 801be54:	f104 0608 	add.w	r6, r4, #8
 801be58:	dc02      	bgt.n	801be60 <_svfprintf_r+0x1198>
 801be5a:	07e9      	lsls	r1, r5, #31
 801be5c:	f140 8083 	bpl.w	801bf66 <_svfprintf_r+0x129e>
 801be60:	2101      	movs	r1, #1
 801be62:	2a07      	cmp	r2, #7
 801be64:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801be68:	f8c4 9000 	str.w	r9, [r4]
 801be6c:	6061      	str	r1, [r4, #4]
 801be6e:	dd08      	ble.n	801be82 <_svfprintf_r+0x11ba>
 801be70:	9803      	ldr	r0, [sp, #12]
 801be72:	aa26      	add	r2, sp, #152	@ 0x98
 801be74:	4659      	mov	r1, fp
 801be76:	f004 f9f1 	bl	802025c <__ssprint_r>
 801be7a:	2800      	cmp	r0, #0
 801be7c:	f040 809f 	bne.w	801bfbe <_svfprintf_r+0x12f6>
 801be80:	ae29      	add	r6, sp, #164	@ 0xa4
 801be82:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801be84:	6033      	str	r3, [r6, #0]
 801be86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801be88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801be8a:	6073      	str	r3, [r6, #4]
 801be8c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801be8e:	4413      	add	r3, r2
 801be90:	9328      	str	r3, [sp, #160]	@ 0xa0
 801be92:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801be94:	3301      	adds	r3, #1
 801be96:	2b07      	cmp	r3, #7
 801be98:	9327      	str	r3, [sp, #156]	@ 0x9c
 801be9a:	dc33      	bgt.n	801bf04 <_svfprintf_r+0x123c>
 801be9c:	3608      	adds	r6, #8
 801be9e:	9b04      	ldr	r3, [sp, #16]
 801bea0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801bea4:	1e5c      	subs	r4, r3, #1
 801bea6:	2200      	movs	r2, #0
 801bea8:	2300      	movs	r3, #0
 801beaa:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 801beae:	f7e4 fe1b 	bl	8000ae8 <__aeabi_dcmpeq>
 801beb2:	2800      	cmp	r0, #0
 801beb4:	d12f      	bne.n	801bf16 <_svfprintf_r+0x124e>
 801beb6:	f109 0201 	add.w	r2, r9, #1
 801beba:	e9c6 2400 	strd	r2, r4, [r6]
 801bebe:	9a04      	ldr	r2, [sp, #16]
 801bec0:	f108 0301 	add.w	r3, r8, #1
 801bec4:	3f01      	subs	r7, #1
 801bec6:	4417      	add	r7, r2
 801bec8:	2b07      	cmp	r3, #7
 801beca:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 801bece:	dd53      	ble.n	801bf78 <_svfprintf_r+0x12b0>
 801bed0:	9803      	ldr	r0, [sp, #12]
 801bed2:	aa26      	add	r2, sp, #152	@ 0x98
 801bed4:	4659      	mov	r1, fp
 801bed6:	f004 f9c1 	bl	802025c <__ssprint_r>
 801beda:	2800      	cmp	r0, #0
 801bedc:	d16f      	bne.n	801bfbe <_svfprintf_r+0x12f6>
 801bede:	ae29      	add	r6, sp, #164	@ 0xa4
 801bee0:	ab22      	add	r3, sp, #136	@ 0x88
 801bee2:	6033      	str	r3, [r6, #0]
 801bee4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bee6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bee8:	6073      	str	r3, [r6, #4]
 801beea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801beec:	4413      	add	r3, r2
 801beee:	9328      	str	r3, [sp, #160]	@ 0xa0
 801bef0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801bef2:	3301      	adds	r3, #1
 801bef4:	2b07      	cmp	r3, #7
 801bef6:	9327      	str	r3, [sp, #156]	@ 0x9c
 801bef8:	f73f ada0 	bgt.w	801ba3c <_svfprintf_r+0xd74>
 801befc:	f106 0408 	add.w	r4, r6, #8
 801bf00:	f7ff baec 	b.w	801b4dc <_svfprintf_r+0x814>
 801bf04:	9803      	ldr	r0, [sp, #12]
 801bf06:	aa26      	add	r2, sp, #152	@ 0x98
 801bf08:	4659      	mov	r1, fp
 801bf0a:	f004 f9a7 	bl	802025c <__ssprint_r>
 801bf0e:	2800      	cmp	r0, #0
 801bf10:	d155      	bne.n	801bfbe <_svfprintf_r+0x12f6>
 801bf12:	ae29      	add	r6, sp, #164	@ 0xa4
 801bf14:	e7c3      	b.n	801be9e <_svfprintf_r+0x11d6>
 801bf16:	9b04      	ldr	r3, [sp, #16]
 801bf18:	2b01      	cmp	r3, #1
 801bf1a:	dde1      	ble.n	801bee0 <_svfprintf_r+0x1218>
 801bf1c:	4f57      	ldr	r7, [pc, #348]	@ (801c07c <_svfprintf_r+0x13b4>)
 801bf1e:	f04f 0810 	mov.w	r8, #16
 801bf22:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801bf26:	2c10      	cmp	r4, #16
 801bf28:	f103 0301 	add.w	r3, r3, #1
 801bf2c:	f106 0108 	add.w	r1, r6, #8
 801bf30:	6037      	str	r7, [r6, #0]
 801bf32:	dc07      	bgt.n	801bf44 <_svfprintf_r+0x127c>
 801bf34:	6074      	str	r4, [r6, #4]
 801bf36:	2b07      	cmp	r3, #7
 801bf38:	4414      	add	r4, r2
 801bf3a:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 801bf3e:	dcc7      	bgt.n	801bed0 <_svfprintf_r+0x1208>
 801bf40:	460e      	mov	r6, r1
 801bf42:	e7cd      	b.n	801bee0 <_svfprintf_r+0x1218>
 801bf44:	3210      	adds	r2, #16
 801bf46:	2b07      	cmp	r3, #7
 801bf48:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801bf4c:	f8c6 8004 	str.w	r8, [r6, #4]
 801bf50:	dd06      	ble.n	801bf60 <_svfprintf_r+0x1298>
 801bf52:	9803      	ldr	r0, [sp, #12]
 801bf54:	aa26      	add	r2, sp, #152	@ 0x98
 801bf56:	4659      	mov	r1, fp
 801bf58:	f004 f980 	bl	802025c <__ssprint_r>
 801bf5c:	bb78      	cbnz	r0, 801bfbe <_svfprintf_r+0x12f6>
 801bf5e:	a929      	add	r1, sp, #164	@ 0xa4
 801bf60:	3c10      	subs	r4, #16
 801bf62:	460e      	mov	r6, r1
 801bf64:	e7dd      	b.n	801bf22 <_svfprintf_r+0x125a>
 801bf66:	2101      	movs	r1, #1
 801bf68:	2a07      	cmp	r2, #7
 801bf6a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801bf6e:	f8c4 9000 	str.w	r9, [r4]
 801bf72:	6061      	str	r1, [r4, #4]
 801bf74:	ddb4      	ble.n	801bee0 <_svfprintf_r+0x1218>
 801bf76:	e7ab      	b.n	801bed0 <_svfprintf_r+0x1208>
 801bf78:	3608      	adds	r6, #8
 801bf7a:	e7b1      	b.n	801bee0 <_svfprintf_r+0x1218>
 801bf7c:	460c      	mov	r4, r1
 801bf7e:	f7ff baad 	b.w	801b4dc <_svfprintf_r+0x814>
 801bf82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf84:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bf86:	1a9d      	subs	r5, r3, r2
 801bf88:	2d00      	cmp	r5, #0
 801bf8a:	f77f aaaa 	ble.w	801b4e2 <_svfprintf_r+0x81a>
 801bf8e:	4e3c      	ldr	r6, [pc, #240]	@ (801c080 <_svfprintf_r+0x13b8>)
 801bf90:	2710      	movs	r7, #16
 801bf92:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801bf96:	2d10      	cmp	r5, #16
 801bf98:	f103 0301 	add.w	r3, r3, #1
 801bf9c:	6026      	str	r6, [r4, #0]
 801bf9e:	dc18      	bgt.n	801bfd2 <_svfprintf_r+0x130a>
 801bfa0:	442a      	add	r2, r5
 801bfa2:	2b07      	cmp	r3, #7
 801bfa4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801bfa8:	6065      	str	r5, [r4, #4]
 801bfaa:	f77f aa9a 	ble.w	801b4e2 <_svfprintf_r+0x81a>
 801bfae:	9803      	ldr	r0, [sp, #12]
 801bfb0:	aa26      	add	r2, sp, #152	@ 0x98
 801bfb2:	4659      	mov	r1, fp
 801bfb4:	f004 f952 	bl	802025c <__ssprint_r>
 801bfb8:	2800      	cmp	r0, #0
 801bfba:	f43f aa92 	beq.w	801b4e2 <_svfprintf_r+0x81a>
 801bfbe:	f1ba 0f00 	cmp.w	sl, #0
 801bfc2:	f43f a89a 	beq.w	801b0fa <_svfprintf_r+0x432>
 801bfc6:	9803      	ldr	r0, [sp, #12]
 801bfc8:	4651      	mov	r1, sl
 801bfca:	f7fd fd25 	bl	8019a18 <_free_r>
 801bfce:	f7ff b894 	b.w	801b0fa <_svfprintf_r+0x432>
 801bfd2:	3210      	adds	r2, #16
 801bfd4:	2b07      	cmp	r3, #7
 801bfd6:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801bfda:	6067      	str	r7, [r4, #4]
 801bfdc:	dc02      	bgt.n	801bfe4 <_svfprintf_r+0x131c>
 801bfde:	3408      	adds	r4, #8
 801bfe0:	3d10      	subs	r5, #16
 801bfe2:	e7d6      	b.n	801bf92 <_svfprintf_r+0x12ca>
 801bfe4:	9803      	ldr	r0, [sp, #12]
 801bfe6:	aa26      	add	r2, sp, #152	@ 0x98
 801bfe8:	4659      	mov	r1, fp
 801bfea:	f004 f937 	bl	802025c <__ssprint_r>
 801bfee:	2800      	cmp	r0, #0
 801bff0:	d1e5      	bne.n	801bfbe <_svfprintf_r+0x12f6>
 801bff2:	ac29      	add	r4, sp, #164	@ 0xa4
 801bff4:	e7f4      	b.n	801bfe0 <_svfprintf_r+0x1318>
 801bff6:	9803      	ldr	r0, [sp, #12]
 801bff8:	4651      	mov	r1, sl
 801bffa:	f7fd fd0d 	bl	8019a18 <_free_r>
 801bffe:	f7ff ba88 	b.w	801b512 <_svfprintf_r+0x84a>
 801c002:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c004:	2b00      	cmp	r3, #0
 801c006:	f43f a878 	beq.w	801b0fa <_svfprintf_r+0x432>
 801c00a:	9803      	ldr	r0, [sp, #12]
 801c00c:	aa26      	add	r2, sp, #152	@ 0x98
 801c00e:	4659      	mov	r1, fp
 801c010:	f004 f924 	bl	802025c <__ssprint_r>
 801c014:	f7ff b871 	b.w	801b0fa <_svfprintf_r+0x432>
 801c018:	ea56 0207 	orrs.w	r2, r6, r7
 801c01c:	9508      	str	r5, [sp, #32]
 801c01e:	f43f ab7a 	beq.w	801b716 <_svfprintf_r+0xa4e>
 801c022:	2b01      	cmp	r3, #1
 801c024:	f43f abfb 	beq.w	801b81e <_svfprintf_r+0xb56>
 801c028:	2b02      	cmp	r3, #2
 801c02a:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801c02e:	f43f ac3f 	beq.w	801b8b0 <_svfprintf_r+0xbe8>
 801c032:	f006 0307 	and.w	r3, r6, #7
 801c036:	08f6      	lsrs	r6, r6, #3
 801c038:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 801c03c:	08ff      	lsrs	r7, r7, #3
 801c03e:	3330      	adds	r3, #48	@ 0x30
 801c040:	ea56 0107 	orrs.w	r1, r6, r7
 801c044:	464a      	mov	r2, r9
 801c046:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801c04a:	d1f2      	bne.n	801c032 <_svfprintf_r+0x136a>
 801c04c:	9908      	ldr	r1, [sp, #32]
 801c04e:	07c8      	lsls	r0, r1, #31
 801c050:	d506      	bpl.n	801c060 <_svfprintf_r+0x1398>
 801c052:	2b30      	cmp	r3, #48	@ 0x30
 801c054:	d004      	beq.n	801c060 <_svfprintf_r+0x1398>
 801c056:	2330      	movs	r3, #48	@ 0x30
 801c058:	f809 3c01 	strb.w	r3, [r9, #-1]
 801c05c:	f1a2 0902 	sub.w	r9, r2, #2
 801c060:	ab52      	add	r3, sp, #328	@ 0x148
 801c062:	9d08      	ldr	r5, [sp, #32]
 801c064:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 801c068:	f04f 0a00 	mov.w	sl, #0
 801c06c:	eba3 0809 	sub.w	r8, r3, r9
 801c070:	4657      	mov	r7, sl
 801c072:	f8cd a020 	str.w	sl, [sp, #32]
 801c076:	4656      	mov	r6, sl
 801c078:	f7ff b97c 	b.w	801b374 <_svfprintf_r+0x6ac>
 801c07c:	080214ba 	.word	0x080214ba
 801c080:	080214ca 	.word	0x080214ca
 801c084:	00000000 	.word	0x00000000

0801c088 <_vfprintf_r>:
 801c088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c08c:	b0d3      	sub	sp, #332	@ 0x14c
 801c08e:	468b      	mov	fp, r1
 801c090:	4690      	mov	r8, r2
 801c092:	461c      	mov	r4, r3
 801c094:	461e      	mov	r6, r3
 801c096:	9003      	str	r0, [sp, #12]
 801c098:	f002 fb2a 	bl	801e6f0 <_localeconv_r>
 801c09c:	6803      	ldr	r3, [r0, #0]
 801c09e:	9316      	str	r3, [sp, #88]	@ 0x58
 801c0a0:	4618      	mov	r0, r3
 801c0a2:	f7e4 f89f 	bl	80001e4 <strlen>
 801c0a6:	9b03      	ldr	r3, [sp, #12]
 801c0a8:	900d      	str	r0, [sp, #52]	@ 0x34
 801c0aa:	b123      	cbz	r3, 801c0b6 <_vfprintf_r+0x2e>
 801c0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c0ae:	b913      	cbnz	r3, 801c0b6 <_vfprintf_r+0x2e>
 801c0b0:	9803      	ldr	r0, [sp, #12]
 801c0b2:	f7fc fc61 	bl	8018978 <__sinit>
 801c0b6:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 801c0ba:	07da      	lsls	r2, r3, #31
 801c0bc:	d407      	bmi.n	801c0ce <_vfprintf_r+0x46>
 801c0be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801c0c2:	059b      	lsls	r3, r3, #22
 801c0c4:	d403      	bmi.n	801c0ce <_vfprintf_r+0x46>
 801c0c6:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801c0ca:	f7fd fc12 	bl	80198f2 <__retarget_lock_acquire_recursive>
 801c0ce:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 801c0d2:	049f      	lsls	r7, r3, #18
 801c0d4:	d409      	bmi.n	801c0ea <_vfprintf_r+0x62>
 801c0d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c0da:	f8ab 300c 	strh.w	r3, [fp, #12]
 801c0de:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 801c0e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801c0e6:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 801c0ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801c0ee:	071d      	lsls	r5, r3, #28
 801c0f0:	d502      	bpl.n	801c0f8 <_vfprintf_r+0x70>
 801c0f2:	f8db 3010 	ldr.w	r3, [fp, #16]
 801c0f6:	b9c3      	cbnz	r3, 801c12a <_vfprintf_r+0xa2>
 801c0f8:	9803      	ldr	r0, [sp, #12]
 801c0fa:	4659      	mov	r1, fp
 801c0fc:	f002 f9ee 	bl	801e4dc <__swsetup_r>
 801c100:	b198      	cbz	r0, 801c12a <_vfprintf_r+0xa2>
 801c102:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 801c106:	07d8      	lsls	r0, r3, #31
 801c108:	d506      	bpl.n	801c118 <_vfprintf_r+0x90>
 801c10a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c10e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c110:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c112:	b053      	add	sp, #332	@ 0x14c
 801c114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c118:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801c11c:	0599      	lsls	r1, r3, #22
 801c11e:	d4f4      	bmi.n	801c10a <_vfprintf_r+0x82>
 801c120:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801c124:	f7fd fbe7 	bl	80198f6 <__retarget_lock_release_recursive>
 801c128:	e7ef      	b.n	801c10a <_vfprintf_r+0x82>
 801c12a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 801c12e:	f003 021a 	and.w	r2, r3, #26
 801c132:	2a0a      	cmp	r2, #10
 801c134:	d116      	bne.n	801c164 <_vfprintf_r+0xdc>
 801c136:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 801c13a:	2a00      	cmp	r2, #0
 801c13c:	db12      	blt.n	801c164 <_vfprintf_r+0xdc>
 801c13e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 801c142:	07d2      	lsls	r2, r2, #31
 801c144:	d405      	bmi.n	801c152 <_vfprintf_r+0xca>
 801c146:	059b      	lsls	r3, r3, #22
 801c148:	d403      	bmi.n	801c152 <_vfprintf_r+0xca>
 801c14a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801c14e:	f7fd fbd2 	bl	80198f6 <__retarget_lock_release_recursive>
 801c152:	9803      	ldr	r0, [sp, #12]
 801c154:	4623      	mov	r3, r4
 801c156:	4642      	mov	r2, r8
 801c158:	4659      	mov	r1, fp
 801c15a:	b053      	add	sp, #332	@ 0x14c
 801c15c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c160:	f001 b9be 	b.w	801d4e0 <__sbprintf>
 801c164:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 801c3b0 <_vfprintf_r+0x328>
 801c168:	2300      	movs	r3, #0
 801c16a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801c16e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801c172:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 801c176:	ac29      	add	r4, sp, #164	@ 0xa4
 801c178:	9426      	str	r4, [sp, #152]	@ 0x98
 801c17a:	9304      	str	r3, [sp, #16]
 801c17c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c17e:	9312      	str	r3, [sp, #72]	@ 0x48
 801c180:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c182:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c184:	4643      	mov	r3, r8
 801c186:	461d      	mov	r5, r3
 801c188:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c18c:	b10a      	cbz	r2, 801c192 <_vfprintf_r+0x10a>
 801c18e:	2a25      	cmp	r2, #37	@ 0x25
 801c190:	d1f9      	bne.n	801c186 <_vfprintf_r+0xfe>
 801c192:	ebb5 0708 	subs.w	r7, r5, r8
 801c196:	d00d      	beq.n	801c1b4 <_vfprintf_r+0x12c>
 801c198:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c19a:	443b      	add	r3, r7
 801c19c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c19e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c1a0:	3301      	adds	r3, #1
 801c1a2:	2b07      	cmp	r3, #7
 801c1a4:	e9c4 8700 	strd	r8, r7, [r4]
 801c1a8:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c1aa:	dc75      	bgt.n	801c298 <_vfprintf_r+0x210>
 801c1ac:	3408      	adds	r4, #8
 801c1ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c1b0:	443b      	add	r3, r7
 801c1b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c1b4:	782b      	ldrb	r3, [r5, #0]
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	f001 814f 	beq.w	801d45a <_vfprintf_r+0x13d2>
 801c1bc:	2200      	movs	r2, #0
 801c1be:	1c6b      	adds	r3, r5, #1
 801c1c0:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801c1c4:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 801c1c8:	920e      	str	r2, [sp, #56]	@ 0x38
 801c1ca:	4615      	mov	r5, r2
 801c1cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c1d0:	9206      	str	r2, [sp, #24]
 801c1d2:	930c      	str	r3, [sp, #48]	@ 0x30
 801c1d4:	9b06      	ldr	r3, [sp, #24]
 801c1d6:	3b20      	subs	r3, #32
 801c1d8:	2b5a      	cmp	r3, #90	@ 0x5a
 801c1da:	f200 85aa 	bhi.w	801cd32 <_vfprintf_r+0xcaa>
 801c1de:	e8df f013 	tbh	[pc, r3, lsl #1]
 801c1e2:	009d      	.short	0x009d
 801c1e4:	05a805a8 	.word	0x05a805a8
 801c1e8:	05a800a5 	.word	0x05a800a5
 801c1ec:	05a805a8 	.word	0x05a805a8
 801c1f0:	05a80085 	.word	0x05a80085
 801c1f4:	00a805a8 	.word	0x00a805a8
 801c1f8:	05a800b2 	.word	0x05a800b2
 801c1fc:	00b400af 	.word	0x00b400af
 801c200:	00ce05a8 	.word	0x00ce05a8
 801c204:	00d100d1 	.word	0x00d100d1
 801c208:	00d100d1 	.word	0x00d100d1
 801c20c:	00d100d1 	.word	0x00d100d1
 801c210:	00d100d1 	.word	0x00d100d1
 801c214:	05a800d1 	.word	0x05a800d1
 801c218:	05a805a8 	.word	0x05a805a8
 801c21c:	05a805a8 	.word	0x05a805a8
 801c220:	05a805a8 	.word	0x05a805a8
 801c224:	05a80146 	.word	0x05a80146
 801c228:	011a0107 	.word	0x011a0107
 801c22c:	01460146 	.word	0x01460146
 801c230:	05a80146 	.word	0x05a80146
 801c234:	05a805a8 	.word	0x05a805a8
 801c238:	00e205a8 	.word	0x00e205a8
 801c23c:	05a805a8 	.word	0x05a805a8
 801c240:	05a804a3 	.word	0x05a804a3
 801c244:	05a805a8 	.word	0x05a805a8
 801c248:	05a804ed 	.word	0x05a804ed
 801c24c:	05a8050e 	.word	0x05a8050e
 801c250:	053005a8 	.word	0x053005a8
 801c254:	05a805a8 	.word	0x05a805a8
 801c258:	05a805a8 	.word	0x05a805a8
 801c25c:	05a805a8 	.word	0x05a805a8
 801c260:	05a805a8 	.word	0x05a805a8
 801c264:	05a80146 	.word	0x05a80146
 801c268:	011c0107 	.word	0x011c0107
 801c26c:	01460146 	.word	0x01460146
 801c270:	00ed0146 	.word	0x00ed0146
 801c274:	0101011c 	.word	0x0101011c
 801c278:	00fa05a8 	.word	0x00fa05a8
 801c27c:	048705a8 	.word	0x048705a8
 801c280:	04dc04a5 	.word	0x04dc04a5
 801c284:	05a80101 	.word	0x05a80101
 801c288:	009b04ed 	.word	0x009b04ed
 801c28c:	05a80510 	.word	0x05a80510
 801c290:	006505a8 	.word	0x006505a8
 801c294:	009b05a8 	.word	0x009b05a8
 801c298:	9803      	ldr	r0, [sp, #12]
 801c29a:	aa26      	add	r2, sp, #152	@ 0x98
 801c29c:	4659      	mov	r1, fp
 801c29e:	f001 f95f 	bl	801d560 <__sprint_r>
 801c2a2:	2800      	cmp	r0, #0
 801c2a4:	f040 814d 	bne.w	801c542 <_vfprintf_r+0x4ba>
 801c2a8:	ac29      	add	r4, sp, #164	@ 0xa4
 801c2aa:	e780      	b.n	801c1ae <_vfprintf_r+0x126>
 801c2ac:	4b42      	ldr	r3, [pc, #264]	@ (801c3b8 <_vfprintf_r+0x330>)
 801c2ae:	9319      	str	r3, [sp, #100]	@ 0x64
 801c2b0:	f015 0320 	ands.w	r3, r5, #32
 801c2b4:	f000 84c8 	beq.w	801cc48 <_vfprintf_r+0xbc0>
 801c2b8:	3607      	adds	r6, #7
 801c2ba:	f026 0307 	bic.w	r3, r6, #7
 801c2be:	461a      	mov	r2, r3
 801c2c0:	685f      	ldr	r7, [r3, #4]
 801c2c2:	f852 6b08 	ldr.w	r6, [r2], #8
 801c2c6:	9207      	str	r2, [sp, #28]
 801c2c8:	07eb      	lsls	r3, r5, #31
 801c2ca:	d50a      	bpl.n	801c2e2 <_vfprintf_r+0x25a>
 801c2cc:	ea56 0307 	orrs.w	r3, r6, r7
 801c2d0:	d007      	beq.n	801c2e2 <_vfprintf_r+0x25a>
 801c2d2:	2330      	movs	r3, #48	@ 0x30
 801c2d4:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 801c2d8:	9b06      	ldr	r3, [sp, #24]
 801c2da:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801c2de:	f045 0502 	orr.w	r5, r5, #2
 801c2e2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801c2e6:	2302      	movs	r3, #2
 801c2e8:	f000 bc2e 	b.w	801cb48 <_vfprintf_r+0xac0>
 801c2ec:	9803      	ldr	r0, [sp, #12]
 801c2ee:	f002 f9ff 	bl	801e6f0 <_localeconv_r>
 801c2f2:	6843      	ldr	r3, [r0, #4]
 801c2f4:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c2f6:	4618      	mov	r0, r3
 801c2f8:	f7e3 ff74 	bl	80001e4 <strlen>
 801c2fc:	9012      	str	r0, [sp, #72]	@ 0x48
 801c2fe:	9803      	ldr	r0, [sp, #12]
 801c300:	f002 f9f6 	bl	801e6f0 <_localeconv_r>
 801c304:	6883      	ldr	r3, [r0, #8]
 801c306:	9309      	str	r3, [sp, #36]	@ 0x24
 801c308:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c30a:	b12b      	cbz	r3, 801c318 <_vfprintf_r+0x290>
 801c30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c30e:	b11b      	cbz	r3, 801c318 <_vfprintf_r+0x290>
 801c310:	781b      	ldrb	r3, [r3, #0]
 801c312:	b10b      	cbz	r3, 801c318 <_vfprintf_r+0x290>
 801c314:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801c318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c31a:	e757      	b.n	801c1cc <_vfprintf_r+0x144>
 801c31c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801c320:	2b00      	cmp	r3, #0
 801c322:	d1f9      	bne.n	801c318 <_vfprintf_r+0x290>
 801c324:	2320      	movs	r3, #32
 801c326:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801c32a:	e7f5      	b.n	801c318 <_vfprintf_r+0x290>
 801c32c:	f045 0501 	orr.w	r5, r5, #1
 801c330:	e7f2      	b.n	801c318 <_vfprintf_r+0x290>
 801c332:	f856 3b04 	ldr.w	r3, [r6], #4
 801c336:	930e      	str	r3, [sp, #56]	@ 0x38
 801c338:	2b00      	cmp	r3, #0
 801c33a:	daed      	bge.n	801c318 <_vfprintf_r+0x290>
 801c33c:	425b      	negs	r3, r3
 801c33e:	930e      	str	r3, [sp, #56]	@ 0x38
 801c340:	f045 0504 	orr.w	r5, r5, #4
 801c344:	e7e8      	b.n	801c318 <_vfprintf_r+0x290>
 801c346:	232b      	movs	r3, #43	@ 0x2b
 801c348:	e7ed      	b.n	801c326 <_vfprintf_r+0x29e>
 801c34a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c34c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c350:	9206      	str	r2, [sp, #24]
 801c352:	2a2a      	cmp	r2, #42	@ 0x2a
 801c354:	d10f      	bne.n	801c376 <_vfprintf_r+0x2ee>
 801c356:	f856 2b04 	ldr.w	r2, [r6], #4
 801c35a:	930c      	str	r3, [sp, #48]	@ 0x30
 801c35c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 801c360:	e7da      	b.n	801c318 <_vfprintf_r+0x290>
 801c362:	fb01 2909 	mla	r9, r1, r9, r2
 801c366:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c36a:	9206      	str	r2, [sp, #24]
 801c36c:	9a06      	ldr	r2, [sp, #24]
 801c36e:	3a30      	subs	r2, #48	@ 0x30
 801c370:	2a09      	cmp	r2, #9
 801c372:	d9f6      	bls.n	801c362 <_vfprintf_r+0x2da>
 801c374:	e72d      	b.n	801c1d2 <_vfprintf_r+0x14a>
 801c376:	f04f 0900 	mov.w	r9, #0
 801c37a:	210a      	movs	r1, #10
 801c37c:	e7f6      	b.n	801c36c <_vfprintf_r+0x2e4>
 801c37e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 801c382:	e7c9      	b.n	801c318 <_vfprintf_r+0x290>
 801c384:	2200      	movs	r2, #0
 801c386:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c388:	920e      	str	r2, [sp, #56]	@ 0x38
 801c38a:	210a      	movs	r1, #10
 801c38c:	9a06      	ldr	r2, [sp, #24]
 801c38e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801c390:	3a30      	subs	r2, #48	@ 0x30
 801c392:	fb01 2200 	mla	r2, r1, r0, r2
 801c396:	920e      	str	r2, [sp, #56]	@ 0x38
 801c398:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c39c:	9206      	str	r2, [sp, #24]
 801c39e:	3a30      	subs	r2, #48	@ 0x30
 801c3a0:	2a09      	cmp	r2, #9
 801c3a2:	d9f3      	bls.n	801c38c <_vfprintf_r+0x304>
 801c3a4:	e715      	b.n	801c1d2 <_vfprintf_r+0x14a>
 801c3a6:	f045 0508 	orr.w	r5, r5, #8
 801c3aa:	e7b5      	b.n	801c318 <_vfprintf_r+0x290>
 801c3ac:	f3af 8000 	nop.w
	...
 801c3b8:	08021496 	.word	0x08021496
 801c3bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c3be:	781b      	ldrb	r3, [r3, #0]
 801c3c0:	2b68      	cmp	r3, #104	@ 0x68
 801c3c2:	bf01      	itttt	eq
 801c3c4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 801c3c6:	3301      	addeq	r3, #1
 801c3c8:	930c      	streq	r3, [sp, #48]	@ 0x30
 801c3ca:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801c3ce:	bf18      	it	ne
 801c3d0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 801c3d4:	e7a0      	b.n	801c318 <_vfprintf_r+0x290>
 801c3d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c3d8:	781b      	ldrb	r3, [r3, #0]
 801c3da:	2b6c      	cmp	r3, #108	@ 0x6c
 801c3dc:	d105      	bne.n	801c3ea <_vfprintf_r+0x362>
 801c3de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c3e0:	3301      	adds	r3, #1
 801c3e2:	930c      	str	r3, [sp, #48]	@ 0x30
 801c3e4:	f045 0520 	orr.w	r5, r5, #32
 801c3e8:	e796      	b.n	801c318 <_vfprintf_r+0x290>
 801c3ea:	f045 0510 	orr.w	r5, r5, #16
 801c3ee:	e793      	b.n	801c318 <_vfprintf_r+0x290>
 801c3f0:	4632      	mov	r2, r6
 801c3f2:	f852 3b04 	ldr.w	r3, [r2], #4
 801c3f6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	9207      	str	r2, [sp, #28]
 801c3fe:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801c402:	469a      	mov	sl, r3
 801c404:	f04f 0901 	mov.w	r9, #1
 801c408:	9310      	str	r3, [sp, #64]	@ 0x40
 801c40a:	461f      	mov	r7, r3
 801c40c:	9308      	str	r3, [sp, #32]
 801c40e:	461e      	mov	r6, r3
 801c410:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 801c414:	e1da      	b.n	801c7cc <_vfprintf_r+0x744>
 801c416:	f045 0510 	orr.w	r5, r5, #16
 801c41a:	06af      	lsls	r7, r5, #26
 801c41c:	d512      	bpl.n	801c444 <_vfprintf_r+0x3bc>
 801c41e:	3607      	adds	r6, #7
 801c420:	f026 0307 	bic.w	r3, r6, #7
 801c424:	461a      	mov	r2, r3
 801c426:	685f      	ldr	r7, [r3, #4]
 801c428:	f852 6b08 	ldr.w	r6, [r2], #8
 801c42c:	9207      	str	r2, [sp, #28]
 801c42e:	2f00      	cmp	r7, #0
 801c430:	da06      	bge.n	801c440 <_vfprintf_r+0x3b8>
 801c432:	4276      	negs	r6, r6
 801c434:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801c438:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801c43c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801c440:	2301      	movs	r3, #1
 801c442:	e384      	b.n	801cb4e <_vfprintf_r+0xac6>
 801c444:	4633      	mov	r3, r6
 801c446:	06ee      	lsls	r6, r5, #27
 801c448:	f853 7b04 	ldr.w	r7, [r3], #4
 801c44c:	9307      	str	r3, [sp, #28]
 801c44e:	d502      	bpl.n	801c456 <_vfprintf_r+0x3ce>
 801c450:	463e      	mov	r6, r7
 801c452:	17ff      	asrs	r7, r7, #31
 801c454:	e7eb      	b.n	801c42e <_vfprintf_r+0x3a6>
 801c456:	0668      	lsls	r0, r5, #25
 801c458:	d503      	bpl.n	801c462 <_vfprintf_r+0x3da>
 801c45a:	b23e      	sxth	r6, r7
 801c45c:	f347 37c0 	sbfx	r7, r7, #15, #1
 801c460:	e7e5      	b.n	801c42e <_vfprintf_r+0x3a6>
 801c462:	05a9      	lsls	r1, r5, #22
 801c464:	d5f4      	bpl.n	801c450 <_vfprintf_r+0x3c8>
 801c466:	b27e      	sxtb	r6, r7
 801c468:	f347 17c0 	sbfx	r7, r7, #7, #1
 801c46c:	e7df      	b.n	801c42e <_vfprintf_r+0x3a6>
 801c46e:	3607      	adds	r6, #7
 801c470:	f026 0307 	bic.w	r3, r6, #7
 801c474:	ecb3 7b02 	vldmia	r3!, {d7}
 801c478:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801c47c:	9307      	str	r3, [sp, #28]
 801c47e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c480:	931a      	str	r3, [sp, #104]	@ 0x68
 801c482:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c484:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c488:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c48a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801c48e:	4b85      	ldr	r3, [pc, #532]	@ (801c6a4 <_vfprintf_r+0x61c>)
 801c490:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c494:	f7e4 fb5a 	bl	8000b4c <__aeabi_dcmpun>
 801c498:	bb10      	cbnz	r0, 801c4e0 <_vfprintf_r+0x458>
 801c49a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801c49e:	4b81      	ldr	r3, [pc, #516]	@ (801c6a4 <_vfprintf_r+0x61c>)
 801c4a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c4a4:	f7e4 fb34 	bl	8000b10 <__aeabi_dcmple>
 801c4a8:	b9d0      	cbnz	r0, 801c4e0 <_vfprintf_r+0x458>
 801c4aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c4ae:	2200      	movs	r2, #0
 801c4b0:	2300      	movs	r3, #0
 801c4b2:	f7e4 fb23 	bl	8000afc <__aeabi_dcmplt>
 801c4b6:	b110      	cbz	r0, 801c4be <_vfprintf_r+0x436>
 801c4b8:	232d      	movs	r3, #45	@ 0x2d
 801c4ba:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801c4be:	4a7a      	ldr	r2, [pc, #488]	@ (801c6a8 <_vfprintf_r+0x620>)
 801c4c0:	4b7a      	ldr	r3, [pc, #488]	@ (801c6ac <_vfprintf_r+0x624>)
 801c4c2:	9906      	ldr	r1, [sp, #24]
 801c4c4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 801c4c8:	2947      	cmp	r1, #71	@ 0x47
 801c4ca:	bfd4      	ite	le
 801c4cc:	4690      	movle	r8, r2
 801c4ce:	4698      	movgt	r8, r3
 801c4d0:	f04f 0a00 	mov.w	sl, #0
 801c4d4:	f04f 0903 	mov.w	r9, #3
 801c4d8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 801c4dc:	f000 bff8 	b.w	801d4d0 <_vfprintf_r+0x1448>
 801c4e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801c4e4:	4610      	mov	r0, r2
 801c4e6:	4619      	mov	r1, r3
 801c4e8:	f7e4 fb30 	bl	8000b4c <__aeabi_dcmpun>
 801c4ec:	4682      	mov	sl, r0
 801c4ee:	b140      	cbz	r0, 801c502 <_vfprintf_r+0x47a>
 801c4f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c4f2:	4a6f      	ldr	r2, [pc, #444]	@ (801c6b0 <_vfprintf_r+0x628>)
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	bfbc      	itt	lt
 801c4f8:	232d      	movlt	r3, #45	@ 0x2d
 801c4fa:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 801c4fe:	4b6d      	ldr	r3, [pc, #436]	@ (801c6b4 <_vfprintf_r+0x62c>)
 801c500:	e7df      	b.n	801c4c2 <_vfprintf_r+0x43a>
 801c502:	9b06      	ldr	r3, [sp, #24]
 801c504:	2b61      	cmp	r3, #97	@ 0x61
 801c506:	d02e      	beq.n	801c566 <_vfprintf_r+0x4de>
 801c508:	2b41      	cmp	r3, #65	@ 0x41
 801c50a:	d12e      	bne.n	801c56a <_vfprintf_r+0x4e2>
 801c50c:	2358      	movs	r3, #88	@ 0x58
 801c50e:	2230      	movs	r2, #48	@ 0x30
 801c510:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801c514:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 801c518:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801c51c:	f045 0502 	orr.w	r5, r5, #2
 801c520:	f340 80ae 	ble.w	801c680 <_vfprintf_r+0x5f8>
 801c524:	9803      	ldr	r0, [sp, #12]
 801c526:	f109 0101 	add.w	r1, r9, #1
 801c52a:	f7fb ff53 	bl	80183d4 <_malloc_r>
 801c52e:	4680      	mov	r8, r0
 801c530:	2800      	cmp	r0, #0
 801c532:	f040 80aa 	bne.w	801c68a <_vfprintf_r+0x602>
 801c536:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801c53a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c53e:	f8ab 300c 	strh.w	r3, [fp, #12]
 801c542:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 801c546:	07d9      	lsls	r1, r3, #31
 801c548:	d407      	bmi.n	801c55a <_vfprintf_r+0x4d2>
 801c54a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801c54e:	059a      	lsls	r2, r3, #22
 801c550:	d403      	bmi.n	801c55a <_vfprintf_r+0x4d2>
 801c552:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801c556:	f7fd f9ce 	bl	80198f6 <__retarget_lock_release_recursive>
 801c55a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801c55e:	065b      	lsls	r3, r3, #25
 801c560:	f57f add6 	bpl.w	801c110 <_vfprintf_r+0x88>
 801c564:	e5d1      	b.n	801c10a <_vfprintf_r+0x82>
 801c566:	2378      	movs	r3, #120	@ 0x78
 801c568:	e7d1      	b.n	801c50e <_vfprintf_r+0x486>
 801c56a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801c56e:	f000 808e 	beq.w	801c68e <_vfprintf_r+0x606>
 801c572:	9b06      	ldr	r3, [sp, #24]
 801c574:	f023 0320 	bic.w	r3, r3, #32
 801c578:	2b47      	cmp	r3, #71	@ 0x47
 801c57a:	d105      	bne.n	801c588 <_vfprintf_r+0x500>
 801c57c:	f1b9 0f00 	cmp.w	r9, #0
 801c580:	d102      	bne.n	801c588 <_vfprintf_r+0x500>
 801c582:	46ca      	mov	sl, r9
 801c584:	f04f 0901 	mov.w	r9, #1
 801c588:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801c58c:	9311      	str	r3, [sp, #68]	@ 0x44
 801c58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c590:	2b00      	cmp	r3, #0
 801c592:	da7f      	bge.n	801c694 <_vfprintf_r+0x60c>
 801c594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c596:	9314      	str	r3, [sp, #80]	@ 0x50
 801c598:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c59a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801c59e:	9315      	str	r3, [sp, #84]	@ 0x54
 801c5a0:	232d      	movs	r3, #45	@ 0x2d
 801c5a2:	931c      	str	r3, [sp, #112]	@ 0x70
 801c5a4:	9b06      	ldr	r3, [sp, #24]
 801c5a6:	f023 0320 	bic.w	r3, r3, #32
 801c5aa:	2b41      	cmp	r3, #65	@ 0x41
 801c5ac:	9308      	str	r3, [sp, #32]
 801c5ae:	f040 81e7 	bne.w	801c980 <_vfprintf_r+0x8f8>
 801c5b2:	a820      	add	r0, sp, #128	@ 0x80
 801c5b4:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801c5b8:	f002 f8b2 	bl	801e720 <frexp>
 801c5bc:	2200      	movs	r2, #0
 801c5be:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801c5c2:	ec51 0b10 	vmov	r0, r1, d0
 801c5c6:	f7e4 f827 	bl	8000618 <__aeabi_dmul>
 801c5ca:	4602      	mov	r2, r0
 801c5cc:	460b      	mov	r3, r1
 801c5ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c5d2:	2200      	movs	r2, #0
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	f7e4 fa87 	bl	8000ae8 <__aeabi_dcmpeq>
 801c5da:	b108      	cbz	r0, 801c5e0 <_vfprintf_r+0x558>
 801c5dc:	2301      	movs	r3, #1
 801c5de:	9320      	str	r3, [sp, #128]	@ 0x80
 801c5e0:	4a35      	ldr	r2, [pc, #212]	@ (801c6b8 <_vfprintf_r+0x630>)
 801c5e2:	4b36      	ldr	r3, [pc, #216]	@ (801c6bc <_vfprintf_r+0x634>)
 801c5e4:	9906      	ldr	r1, [sp, #24]
 801c5e6:	2961      	cmp	r1, #97	@ 0x61
 801c5e8:	bf18      	it	ne
 801c5ea:	461a      	movne	r2, r3
 801c5ec:	9210      	str	r2, [sp, #64]	@ 0x40
 801c5ee:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 801c5f2:	4646      	mov	r6, r8
 801c5f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c5f8:	4b31      	ldr	r3, [pc, #196]	@ (801c6c0 <_vfprintf_r+0x638>)
 801c5fa:	2200      	movs	r2, #0
 801c5fc:	f7e4 f80c 	bl	8000618 <__aeabi_dmul>
 801c600:	4602      	mov	r2, r0
 801c602:	460b      	mov	r3, r1
 801c604:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c608:	f7e4 fab6 	bl	8000b78 <__aeabi_d2iz>
 801c60c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801c60e:	f7e3 ff99 	bl	8000544 <__aeabi_i2d>
 801c612:	4602      	mov	r2, r0
 801c614:	460b      	mov	r3, r1
 801c616:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c61a:	f7e3 fe45 	bl	80002a8 <__aeabi_dsub>
 801c61e:	4602      	mov	r2, r0
 801c620:	460b      	mov	r3, r1
 801c622:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c626:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c628:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c62a:	5c9b      	ldrb	r3, [r3, r2]
 801c62c:	f806 3b01 	strb.w	r3, [r6], #1
 801c630:	1c7a      	adds	r2, r7, #1
 801c632:	d006      	beq.n	801c642 <_vfprintf_r+0x5ba>
 801c634:	1e7b      	subs	r3, r7, #1
 801c636:	931d      	str	r3, [sp, #116]	@ 0x74
 801c638:	2200      	movs	r2, #0
 801c63a:	2300      	movs	r3, #0
 801c63c:	f7e4 fa54 	bl	8000ae8 <__aeabi_dcmpeq>
 801c640:	b370      	cbz	r0, 801c6a0 <_vfprintf_r+0x618>
 801c642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c646:	4b1f      	ldr	r3, [pc, #124]	@ (801c6c4 <_vfprintf_r+0x63c>)
 801c648:	2200      	movs	r2, #0
 801c64a:	f7e4 fa75 	bl	8000b38 <__aeabi_dcmpgt>
 801c64e:	2800      	cmp	r0, #0
 801c650:	d13a      	bne.n	801c6c8 <_vfprintf_r+0x640>
 801c652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c656:	4b1b      	ldr	r3, [pc, #108]	@ (801c6c4 <_vfprintf_r+0x63c>)
 801c658:	2200      	movs	r2, #0
 801c65a:	f7e4 fa45 	bl	8000ae8 <__aeabi_dcmpeq>
 801c65e:	b110      	cbz	r0, 801c666 <_vfprintf_r+0x5de>
 801c660:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c662:	07db      	lsls	r3, r3, #31
 801c664:	d430      	bmi.n	801c6c8 <_vfprintf_r+0x640>
 801c666:	4633      	mov	r3, r6
 801c668:	19f1      	adds	r1, r6, r7
 801c66a:	2030      	movs	r0, #48	@ 0x30
 801c66c:	1aca      	subs	r2, r1, r3
 801c66e:	2a00      	cmp	r2, #0
 801c670:	f280 8183 	bge.w	801c97a <_vfprintf_r+0x8f2>
 801c674:	1c7b      	adds	r3, r7, #1
 801c676:	3701      	adds	r7, #1
 801c678:	bfb8      	it	lt
 801c67a:	2300      	movlt	r3, #0
 801c67c:	441e      	add	r6, r3
 801c67e:	e037      	b.n	801c6f0 <_vfprintf_r+0x668>
 801c680:	f04f 0a00 	mov.w	sl, #0
 801c684:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 801c688:	e77e      	b.n	801c588 <_vfprintf_r+0x500>
 801c68a:	4682      	mov	sl, r0
 801c68c:	e77c      	b.n	801c588 <_vfprintf_r+0x500>
 801c68e:	f04f 0906 	mov.w	r9, #6
 801c692:	e779      	b.n	801c588 <_vfprintf_r+0x500>
 801c694:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 801c698:	2300      	movs	r3, #0
 801c69a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 801c69e:	e780      	b.n	801c5a2 <_vfprintf_r+0x51a>
 801c6a0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801c6a2:	e7a7      	b.n	801c5f4 <_vfprintf_r+0x56c>
 801c6a4:	7fefffff 	.word	0x7fefffff
 801c6a8:	08021486 	.word	0x08021486
 801c6ac:	0802148a 	.word	0x0802148a
 801c6b0:	0802148e 	.word	0x0802148e
 801c6b4:	08021492 	.word	0x08021492
 801c6b8:	08021496 	.word	0x08021496
 801c6bc:	080214a7 	.word	0x080214a7
 801c6c0:	40300000 	.word	0x40300000
 801c6c4:	3fe00000 	.word	0x3fe00000
 801c6c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c6ca:	9624      	str	r6, [sp, #144]	@ 0x90
 801c6cc:	7bd9      	ldrb	r1, [r3, #15]
 801c6ce:	2030      	movs	r0, #48	@ 0x30
 801c6d0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c6d2:	1e53      	subs	r3, r2, #1
 801c6d4:	9324      	str	r3, [sp, #144]	@ 0x90
 801c6d6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801c6da:	428b      	cmp	r3, r1
 801c6dc:	f000 814a 	beq.w	801c974 <_vfprintf_r+0x8ec>
 801c6e0:	2b39      	cmp	r3, #57	@ 0x39
 801c6e2:	bf0b      	itete	eq
 801c6e4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 801c6e6:	3301      	addne	r3, #1
 801c6e8:	7a9b      	ldrbeq	r3, [r3, #10]
 801c6ea:	b2db      	uxtbne	r3, r3
 801c6ec:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c6f0:	eba6 0308 	sub.w	r3, r6, r8
 801c6f4:	9304      	str	r3, [sp, #16]
 801c6f6:	9b08      	ldr	r3, [sp, #32]
 801c6f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801c6fa:	2b47      	cmp	r3, #71	@ 0x47
 801c6fc:	f040 8189 	bne.w	801ca12 <_vfprintf_r+0x98a>
 801c700:	1cf1      	adds	r1, r6, #3
 801c702:	db02      	blt.n	801c70a <_vfprintf_r+0x682>
 801c704:	45b1      	cmp	r9, r6
 801c706:	f280 81a7 	bge.w	801ca58 <_vfprintf_r+0x9d0>
 801c70a:	9b06      	ldr	r3, [sp, #24]
 801c70c:	3b02      	subs	r3, #2
 801c70e:	9306      	str	r3, [sp, #24]
 801c710:	9906      	ldr	r1, [sp, #24]
 801c712:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801c716:	f021 0120 	bic.w	r1, r1, #32
 801c71a:	2941      	cmp	r1, #65	@ 0x41
 801c71c:	bf08      	it	eq
 801c71e:	320f      	addeq	r2, #15
 801c720:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 801c724:	bf06      	itte	eq
 801c726:	b2d2      	uxtbeq	r2, r2
 801c728:	2101      	moveq	r1, #1
 801c72a:	2100      	movne	r1, #0
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	9320      	str	r3, [sp, #128]	@ 0x80
 801c730:	bfb8      	it	lt
 801c732:	f1c6 0301 	rsblt	r3, r6, #1
 801c736:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 801c73a:	bfb4      	ite	lt
 801c73c:	222d      	movlt	r2, #45	@ 0x2d
 801c73e:	222b      	movge	r2, #43	@ 0x2b
 801c740:	2b09      	cmp	r3, #9
 801c742:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 801c746:	f340 817a 	ble.w	801ca3e <_vfprintf_r+0x9b6>
 801c74a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801c74e:	270a      	movs	r7, #10
 801c750:	4602      	mov	r2, r0
 801c752:	fbb3 f6f7 	udiv	r6, r3, r7
 801c756:	fb07 3116 	mls	r1, r7, r6, r3
 801c75a:	3130      	adds	r1, #48	@ 0x30
 801c75c:	f802 1c01 	strb.w	r1, [r2, #-1]
 801c760:	4619      	mov	r1, r3
 801c762:	2963      	cmp	r1, #99	@ 0x63
 801c764:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 801c768:	4633      	mov	r3, r6
 801c76a:	dcf1      	bgt.n	801c750 <_vfprintf_r+0x6c8>
 801c76c:	3330      	adds	r3, #48	@ 0x30
 801c76e:	1e91      	subs	r1, r2, #2
 801c770:	f800 3c01 	strb.w	r3, [r0, #-1]
 801c774:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 801c778:	460b      	mov	r3, r1
 801c77a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801c77e:	4283      	cmp	r3, r0
 801c780:	f0c0 8158 	bcc.w	801ca34 <_vfprintf_r+0x9ac>
 801c784:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 801c788:	1a9b      	subs	r3, r3, r2
 801c78a:	4281      	cmp	r1, r0
 801c78c:	bf88      	it	hi
 801c78e:	2300      	movhi	r3, #0
 801c790:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801c794:	441a      	add	r2, r3
 801c796:	ab22      	add	r3, sp, #136	@ 0x88
 801c798:	1ad3      	subs	r3, r2, r3
 801c79a:	9a04      	ldr	r2, [sp, #16]
 801c79c:	9318      	str	r3, [sp, #96]	@ 0x60
 801c79e:	2a01      	cmp	r2, #1
 801c7a0:	eb03 0902 	add.w	r9, r3, r2
 801c7a4:	dc01      	bgt.n	801c7aa <_vfprintf_r+0x722>
 801c7a6:	07ea      	lsls	r2, r5, #31
 801c7a8:	d501      	bpl.n	801c7ae <_vfprintf_r+0x726>
 801c7aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c7ac:	4499      	add	r9, r3
 801c7ae:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801c7b2:	2700      	movs	r7, #0
 801c7b4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801c7b8:	9311      	str	r3, [sp, #68]	@ 0x44
 801c7ba:	9708      	str	r7, [sp, #32]
 801c7bc:	463e      	mov	r6, r7
 801c7be:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	f040 8191 	bne.w	801cae8 <_vfprintf_r+0xa60>
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c7ca:	9310      	str	r3, [sp, #64]	@ 0x40
 801c7cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c7ce:	454b      	cmp	r3, r9
 801c7d0:	bfb8      	it	lt
 801c7d2:	464b      	movlt	r3, r9
 801c7d4:	9311      	str	r3, [sp, #68]	@ 0x44
 801c7d6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801c7da:	b113      	cbz	r3, 801c7e2 <_vfprintf_r+0x75a>
 801c7dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c7de:	3301      	adds	r3, #1
 801c7e0:	9311      	str	r3, [sp, #68]	@ 0x44
 801c7e2:	f015 0302 	ands.w	r3, r5, #2
 801c7e6:	931c      	str	r3, [sp, #112]	@ 0x70
 801c7e8:	bf1e      	ittt	ne
 801c7ea:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 801c7ec:	3302      	addne	r3, #2
 801c7ee:	9311      	strne	r3, [sp, #68]	@ 0x44
 801c7f0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 801c7f4:	931d      	str	r3, [sp, #116]	@ 0x74
 801c7f6:	d122      	bne.n	801c83e <_vfprintf_r+0x7b6>
 801c7f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c7fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c7fc:	1a9b      	subs	r3, r3, r2
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c802:	dd1c      	ble.n	801c83e <_vfprintf_r+0x7b6>
 801c804:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c806:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801c80a:	2810      	cmp	r0, #16
 801c80c:	489f      	ldr	r0, [pc, #636]	@ (801ca8c <_vfprintf_r+0xa04>)
 801c80e:	6020      	str	r0, [r4, #0]
 801c810:	f102 0201 	add.w	r2, r2, #1
 801c814:	f104 0108 	add.w	r1, r4, #8
 801c818:	f300 8297 	bgt.w	801cd4a <_vfprintf_r+0xcc2>
 801c81c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c81e:	6060      	str	r0, [r4, #4]
 801c820:	4403      	add	r3, r0
 801c822:	2a07      	cmp	r2, #7
 801c824:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c828:	f340 82a4 	ble.w	801cd74 <_vfprintf_r+0xcec>
 801c82c:	9803      	ldr	r0, [sp, #12]
 801c82e:	aa26      	add	r2, sp, #152	@ 0x98
 801c830:	4659      	mov	r1, fp
 801c832:	f000 fe95 	bl	801d560 <__sprint_r>
 801c836:	2800      	cmp	r0, #0
 801c838:	f040 85ed 	bne.w	801d416 <_vfprintf_r+0x138e>
 801c83c:	ac29      	add	r4, sp, #164	@ 0xa4
 801c83e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 801c842:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c844:	b16a      	cbz	r2, 801c862 <_vfprintf_r+0x7da>
 801c846:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 801c84a:	6022      	str	r2, [r4, #0]
 801c84c:	2201      	movs	r2, #1
 801c84e:	4413      	add	r3, r2
 801c850:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c852:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c854:	6062      	str	r2, [r4, #4]
 801c856:	4413      	add	r3, r2
 801c858:	2b07      	cmp	r3, #7
 801c85a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c85c:	f300 828c 	bgt.w	801cd78 <_vfprintf_r+0xcf0>
 801c860:	3408      	adds	r4, #8
 801c862:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801c864:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c866:	b162      	cbz	r2, 801c882 <_vfprintf_r+0x7fa>
 801c868:	aa1f      	add	r2, sp, #124	@ 0x7c
 801c86a:	6022      	str	r2, [r4, #0]
 801c86c:	2202      	movs	r2, #2
 801c86e:	4413      	add	r3, r2
 801c870:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c872:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c874:	6062      	str	r2, [r4, #4]
 801c876:	3301      	adds	r3, #1
 801c878:	2b07      	cmp	r3, #7
 801c87a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c87c:	f300 8286 	bgt.w	801cd8c <_vfprintf_r+0xd04>
 801c880:	3408      	adds	r4, #8
 801c882:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c884:	2b80      	cmp	r3, #128	@ 0x80
 801c886:	d122      	bne.n	801c8ce <_vfprintf_r+0x846>
 801c888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c88a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c88c:	1a9b      	subs	r3, r3, r2
 801c88e:	2b00      	cmp	r3, #0
 801c890:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c892:	dd1c      	ble.n	801c8ce <_vfprintf_r+0x846>
 801c894:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c896:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801c89a:	2810      	cmp	r0, #16
 801c89c:	487c      	ldr	r0, [pc, #496]	@ (801ca90 <_vfprintf_r+0xa08>)
 801c89e:	6020      	str	r0, [r4, #0]
 801c8a0:	f102 0201 	add.w	r2, r2, #1
 801c8a4:	f104 0108 	add.w	r1, r4, #8
 801c8a8:	f300 827a 	bgt.w	801cda0 <_vfprintf_r+0xd18>
 801c8ac:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c8ae:	6060      	str	r0, [r4, #4]
 801c8b0:	4403      	add	r3, r0
 801c8b2:	2a07      	cmp	r2, #7
 801c8b4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c8b8:	f340 8287 	ble.w	801cdca <_vfprintf_r+0xd42>
 801c8bc:	9803      	ldr	r0, [sp, #12]
 801c8be:	aa26      	add	r2, sp, #152	@ 0x98
 801c8c0:	4659      	mov	r1, fp
 801c8c2:	f000 fe4d 	bl	801d560 <__sprint_r>
 801c8c6:	2800      	cmp	r0, #0
 801c8c8:	f040 85a5 	bne.w	801d416 <_vfprintf_r+0x138e>
 801c8cc:	ac29      	add	r4, sp, #164	@ 0xa4
 801c8ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c8d0:	eba3 0309 	sub.w	r3, r3, r9
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	9310      	str	r3, [sp, #64]	@ 0x40
 801c8d8:	dd1c      	ble.n	801c914 <_vfprintf_r+0x88c>
 801c8da:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c8dc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801c8e0:	2810      	cmp	r0, #16
 801c8e2:	486b      	ldr	r0, [pc, #428]	@ (801ca90 <_vfprintf_r+0xa08>)
 801c8e4:	6020      	str	r0, [r4, #0]
 801c8e6:	f102 0201 	add.w	r2, r2, #1
 801c8ea:	f104 0108 	add.w	r1, r4, #8
 801c8ee:	f300 826e 	bgt.w	801cdce <_vfprintf_r+0xd46>
 801c8f2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c8f4:	6060      	str	r0, [r4, #4]
 801c8f6:	4403      	add	r3, r0
 801c8f8:	2a07      	cmp	r2, #7
 801c8fa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801c8fe:	f340 827b 	ble.w	801cdf8 <_vfprintf_r+0xd70>
 801c902:	9803      	ldr	r0, [sp, #12]
 801c904:	aa26      	add	r2, sp, #152	@ 0x98
 801c906:	4659      	mov	r1, fp
 801c908:	f000 fe2a 	bl	801d560 <__sprint_r>
 801c90c:	2800      	cmp	r0, #0
 801c90e:	f040 8582 	bne.w	801d416 <_vfprintf_r+0x138e>
 801c912:	ac29      	add	r4, sp, #164	@ 0xa4
 801c914:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c916:	9310      	str	r3, [sp, #64]	@ 0x40
 801c918:	05e8      	lsls	r0, r5, #23
 801c91a:	f100 8273 	bmi.w	801ce04 <_vfprintf_r+0xd7c>
 801c91e:	444b      	add	r3, r9
 801c920:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c922:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c924:	3301      	adds	r3, #1
 801c926:	2b07      	cmp	r3, #7
 801c928:	e9c4 8900 	strd	r8, r9, [r4]
 801c92c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c92e:	f300 82af 	bgt.w	801ce90 <_vfprintf_r+0xe08>
 801c932:	3408      	adds	r4, #8
 801c934:	0768      	lsls	r0, r5, #29
 801c936:	f100 8550 	bmi.w	801d3da <_vfprintf_r+0x1352>
 801c93a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801c93e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801c940:	428a      	cmp	r2, r1
 801c942:	bfac      	ite	ge
 801c944:	189b      	addge	r3, r3, r2
 801c946:	185b      	addlt	r3, r3, r1
 801c948:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c94a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c94c:	b13b      	cbz	r3, 801c95e <_vfprintf_r+0x8d6>
 801c94e:	9803      	ldr	r0, [sp, #12]
 801c950:	aa26      	add	r2, sp, #152	@ 0x98
 801c952:	4659      	mov	r1, fp
 801c954:	f000 fe04 	bl	801d560 <__sprint_r>
 801c958:	2800      	cmp	r0, #0
 801c95a:	f040 855c 	bne.w	801d416 <_vfprintf_r+0x138e>
 801c95e:	2300      	movs	r3, #0
 801c960:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c962:	f1ba 0f00 	cmp.w	sl, #0
 801c966:	f040 8572 	bne.w	801d44e <_vfprintf_r+0x13c6>
 801c96a:	9e07      	ldr	r6, [sp, #28]
 801c96c:	ac29      	add	r4, sp, #164	@ 0xa4
 801c96e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 801c972:	e407      	b.n	801c184 <_vfprintf_r+0xfc>
 801c974:	f802 0c01 	strb.w	r0, [r2, #-1]
 801c978:	e6aa      	b.n	801c6d0 <_vfprintf_r+0x648>
 801c97a:	f803 0b01 	strb.w	r0, [r3], #1
 801c97e:	e675      	b.n	801c66c <_vfprintf_r+0x5e4>
 801c980:	9b08      	ldr	r3, [sp, #32]
 801c982:	2b46      	cmp	r3, #70	@ 0x46
 801c984:	d005      	beq.n	801c992 <_vfprintf_r+0x90a>
 801c986:	2b45      	cmp	r3, #69	@ 0x45
 801c988:	d11a      	bne.n	801c9c0 <_vfprintf_r+0x938>
 801c98a:	f109 0601 	add.w	r6, r9, #1
 801c98e:	2102      	movs	r1, #2
 801c990:	e001      	b.n	801c996 <_vfprintf_r+0x90e>
 801c992:	464e      	mov	r6, r9
 801c994:	2103      	movs	r1, #3
 801c996:	ab24      	add	r3, sp, #144	@ 0x90
 801c998:	9301      	str	r3, [sp, #4]
 801c99a:	ab21      	add	r3, sp, #132	@ 0x84
 801c99c:	9300      	str	r3, [sp, #0]
 801c99e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801c9a2:	ab20      	add	r3, sp, #128	@ 0x80
 801c9a4:	9803      	ldr	r0, [sp, #12]
 801c9a6:	4632      	mov	r2, r6
 801c9a8:	f001 ffba 	bl	801e920 <_dtoa_r>
 801c9ac:	9b08      	ldr	r3, [sp, #32]
 801c9ae:	2b47      	cmp	r3, #71	@ 0x47
 801c9b0:	4680      	mov	r8, r0
 801c9b2:	d119      	bne.n	801c9e8 <_vfprintf_r+0x960>
 801c9b4:	07e8      	lsls	r0, r5, #31
 801c9b6:	d405      	bmi.n	801c9c4 <_vfprintf_r+0x93c>
 801c9b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c9ba:	eba3 0308 	sub.w	r3, r3, r8
 801c9be:	e699      	b.n	801c6f4 <_vfprintf_r+0x66c>
 801c9c0:	464e      	mov	r6, r9
 801c9c2:	e7e4      	b.n	801c98e <_vfprintf_r+0x906>
 801c9c4:	eb08 0706 	add.w	r7, r8, r6
 801c9c8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801c9cc:	2200      	movs	r2, #0
 801c9ce:	2300      	movs	r3, #0
 801c9d0:	f7e4 f88a 	bl	8000ae8 <__aeabi_dcmpeq>
 801c9d4:	b100      	cbz	r0, 801c9d8 <_vfprintf_r+0x950>
 801c9d6:	9724      	str	r7, [sp, #144]	@ 0x90
 801c9d8:	2230      	movs	r2, #48	@ 0x30
 801c9da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c9dc:	429f      	cmp	r7, r3
 801c9de:	d9eb      	bls.n	801c9b8 <_vfprintf_r+0x930>
 801c9e0:	1c59      	adds	r1, r3, #1
 801c9e2:	9124      	str	r1, [sp, #144]	@ 0x90
 801c9e4:	701a      	strb	r2, [r3, #0]
 801c9e6:	e7f8      	b.n	801c9da <_vfprintf_r+0x952>
 801c9e8:	9b08      	ldr	r3, [sp, #32]
 801c9ea:	2b46      	cmp	r3, #70	@ 0x46
 801c9ec:	eb00 0706 	add.w	r7, r0, r6
 801c9f0:	d1ea      	bne.n	801c9c8 <_vfprintf_r+0x940>
 801c9f2:	7803      	ldrb	r3, [r0, #0]
 801c9f4:	2b30      	cmp	r3, #48	@ 0x30
 801c9f6:	d109      	bne.n	801ca0c <_vfprintf_r+0x984>
 801c9f8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801c9fc:	2200      	movs	r2, #0
 801c9fe:	2300      	movs	r3, #0
 801ca00:	f7e4 f872 	bl	8000ae8 <__aeabi_dcmpeq>
 801ca04:	b910      	cbnz	r0, 801ca0c <_vfprintf_r+0x984>
 801ca06:	f1c6 0601 	rsb	r6, r6, #1
 801ca0a:	9620      	str	r6, [sp, #128]	@ 0x80
 801ca0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ca0e:	441f      	add	r7, r3
 801ca10:	e7da      	b.n	801c9c8 <_vfprintf_r+0x940>
 801ca12:	9b08      	ldr	r3, [sp, #32]
 801ca14:	2b46      	cmp	r3, #70	@ 0x46
 801ca16:	f47f ae7b 	bne.w	801c710 <_vfprintf_r+0x688>
 801ca1a:	f005 0301 	and.w	r3, r5, #1
 801ca1e:	2e00      	cmp	r6, #0
 801ca20:	ea43 0309 	orr.w	r3, r3, r9
 801ca24:	dd25      	ble.n	801ca72 <_vfprintf_r+0x9ea>
 801ca26:	b37b      	cbz	r3, 801ca88 <_vfprintf_r+0xa00>
 801ca28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca2a:	18f3      	adds	r3, r6, r3
 801ca2c:	4499      	add	r9, r3
 801ca2e:	2366      	movs	r3, #102	@ 0x66
 801ca30:	9306      	str	r3, [sp, #24]
 801ca32:	e033      	b.n	801ca9c <_vfprintf_r+0xa14>
 801ca34:	f813 7b01 	ldrb.w	r7, [r3], #1
 801ca38:	f806 7f01 	strb.w	r7, [r6, #1]!
 801ca3c:	e69f      	b.n	801c77e <_vfprintf_r+0x6f6>
 801ca3e:	b941      	cbnz	r1, 801ca52 <_vfprintf_r+0x9ca>
 801ca40:	2230      	movs	r2, #48	@ 0x30
 801ca42:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 801ca46:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 801ca4a:	3330      	adds	r3, #48	@ 0x30
 801ca4c:	f802 3b01 	strb.w	r3, [r2], #1
 801ca50:	e6a1      	b.n	801c796 <_vfprintf_r+0x70e>
 801ca52:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801ca56:	e7f8      	b.n	801ca4a <_vfprintf_r+0x9c2>
 801ca58:	9b04      	ldr	r3, [sp, #16]
 801ca5a:	42b3      	cmp	r3, r6
 801ca5c:	dd0d      	ble.n	801ca7a <_vfprintf_r+0x9f2>
 801ca5e:	9b04      	ldr	r3, [sp, #16]
 801ca60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ca62:	2e00      	cmp	r6, #0
 801ca64:	eb03 0902 	add.w	r9, r3, r2
 801ca68:	dc0c      	bgt.n	801ca84 <_vfprintf_r+0x9fc>
 801ca6a:	f1c6 0301 	rsb	r3, r6, #1
 801ca6e:	4499      	add	r9, r3
 801ca70:	e008      	b.n	801ca84 <_vfprintf_r+0x9fc>
 801ca72:	b17b      	cbz	r3, 801ca94 <_vfprintf_r+0xa0c>
 801ca74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca76:	3301      	adds	r3, #1
 801ca78:	e7d8      	b.n	801ca2c <_vfprintf_r+0x9a4>
 801ca7a:	07eb      	lsls	r3, r5, #31
 801ca7c:	d521      	bpl.n	801cac2 <_vfprintf_r+0xa3a>
 801ca7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca80:	eb06 0903 	add.w	r9, r6, r3
 801ca84:	2367      	movs	r3, #103	@ 0x67
 801ca86:	e7d3      	b.n	801ca30 <_vfprintf_r+0x9a8>
 801ca88:	46b1      	mov	r9, r6
 801ca8a:	e7d0      	b.n	801ca2e <_vfprintf_r+0x9a6>
 801ca8c:	080214ea 	.word	0x080214ea
 801ca90:	080214da 	.word	0x080214da
 801ca94:	2366      	movs	r3, #102	@ 0x66
 801ca96:	9306      	str	r3, [sp, #24]
 801ca98:	f04f 0901 	mov.w	r9, #1
 801ca9c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 801caa0:	9308      	str	r3, [sp, #32]
 801caa2:	d01f      	beq.n	801cae4 <_vfprintf_r+0xa5c>
 801caa4:	2700      	movs	r7, #0
 801caa6:	2e00      	cmp	r6, #0
 801caa8:	9708      	str	r7, [sp, #32]
 801caaa:	f77f ae88 	ble.w	801c7be <_vfprintf_r+0x736>
 801caae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cab0:	781b      	ldrb	r3, [r3, #0]
 801cab2:	2bff      	cmp	r3, #255	@ 0xff
 801cab4:	d107      	bne.n	801cac6 <_vfprintf_r+0xa3e>
 801cab6:	9b08      	ldr	r3, [sp, #32]
 801cab8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801caba:	443b      	add	r3, r7
 801cabc:	fb02 9903 	mla	r9, r2, r3, r9
 801cac0:	e67d      	b.n	801c7be <_vfprintf_r+0x736>
 801cac2:	46b1      	mov	r9, r6
 801cac4:	e7de      	b.n	801ca84 <_vfprintf_r+0x9fc>
 801cac6:	42b3      	cmp	r3, r6
 801cac8:	daf5      	bge.n	801cab6 <_vfprintf_r+0xa2e>
 801caca:	1af6      	subs	r6, r6, r3
 801cacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cace:	785b      	ldrb	r3, [r3, #1]
 801cad0:	b133      	cbz	r3, 801cae0 <_vfprintf_r+0xa58>
 801cad2:	9b08      	ldr	r3, [sp, #32]
 801cad4:	3301      	adds	r3, #1
 801cad6:	9308      	str	r3, [sp, #32]
 801cad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cada:	3301      	adds	r3, #1
 801cadc:	9309      	str	r3, [sp, #36]	@ 0x24
 801cade:	e7e6      	b.n	801caae <_vfprintf_r+0xa26>
 801cae0:	3701      	adds	r7, #1
 801cae2:	e7e4      	b.n	801caae <_vfprintf_r+0xa26>
 801cae4:	9f08      	ldr	r7, [sp, #32]
 801cae6:	e66a      	b.n	801c7be <_vfprintf_r+0x736>
 801cae8:	232d      	movs	r3, #45	@ 0x2d
 801caea:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801caee:	e66a      	b.n	801c7c6 <_vfprintf_r+0x73e>
 801caf0:	06af      	lsls	r7, r5, #26
 801caf2:	d507      	bpl.n	801cb04 <_vfprintf_r+0xa7c>
 801caf4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801caf6:	6833      	ldr	r3, [r6, #0]
 801caf8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801cafa:	17d2      	asrs	r2, r2, #31
 801cafc:	e9c3 1200 	strd	r1, r2, [r3]
 801cb00:	3604      	adds	r6, #4
 801cb02:	e734      	b.n	801c96e <_vfprintf_r+0x8e6>
 801cb04:	06e8      	lsls	r0, r5, #27
 801cb06:	d503      	bpl.n	801cb10 <_vfprintf_r+0xa88>
 801cb08:	6833      	ldr	r3, [r6, #0]
 801cb0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cb0c:	601a      	str	r2, [r3, #0]
 801cb0e:	e7f7      	b.n	801cb00 <_vfprintf_r+0xa78>
 801cb10:	0669      	lsls	r1, r5, #25
 801cb12:	d503      	bpl.n	801cb1c <_vfprintf_r+0xa94>
 801cb14:	6833      	ldr	r3, [r6, #0]
 801cb16:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cb18:	801a      	strh	r2, [r3, #0]
 801cb1a:	e7f1      	b.n	801cb00 <_vfprintf_r+0xa78>
 801cb1c:	05aa      	lsls	r2, r5, #22
 801cb1e:	d5f3      	bpl.n	801cb08 <_vfprintf_r+0xa80>
 801cb20:	6833      	ldr	r3, [r6, #0]
 801cb22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cb24:	701a      	strb	r2, [r3, #0]
 801cb26:	e7eb      	b.n	801cb00 <_vfprintf_r+0xa78>
 801cb28:	f045 0510 	orr.w	r5, r5, #16
 801cb2c:	f015 0320 	ands.w	r3, r5, #32
 801cb30:	d020      	beq.n	801cb74 <_vfprintf_r+0xaec>
 801cb32:	3607      	adds	r6, #7
 801cb34:	f026 0307 	bic.w	r3, r6, #7
 801cb38:	461a      	mov	r2, r3
 801cb3a:	685f      	ldr	r7, [r3, #4]
 801cb3c:	f852 6b08 	ldr.w	r6, [r2], #8
 801cb40:	9207      	str	r2, [sp, #28]
 801cb42:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801cb46:	2300      	movs	r3, #0
 801cb48:	2200      	movs	r2, #0
 801cb4a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801cb4e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801cb52:	f000 8491 	beq.w	801d478 <_vfprintf_r+0x13f0>
 801cb56:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 801cb5a:	9208      	str	r2, [sp, #32]
 801cb5c:	ea56 0207 	orrs.w	r2, r6, r7
 801cb60:	f040 848f 	bne.w	801d482 <_vfprintf_r+0x13fa>
 801cb64:	f1b9 0f00 	cmp.w	r9, #0
 801cb68:	f000 80db 	beq.w	801cd22 <_vfprintf_r+0xc9a>
 801cb6c:	2b01      	cmp	r3, #1
 801cb6e:	f040 848b 	bne.w	801d488 <_vfprintf_r+0x1400>
 801cb72:	e083      	b.n	801cc7c <_vfprintf_r+0xbf4>
 801cb74:	4632      	mov	r2, r6
 801cb76:	f015 0710 	ands.w	r7, r5, #16
 801cb7a:	f852 6b04 	ldr.w	r6, [r2], #4
 801cb7e:	9207      	str	r2, [sp, #28]
 801cb80:	d001      	beq.n	801cb86 <_vfprintf_r+0xafe>
 801cb82:	461f      	mov	r7, r3
 801cb84:	e7dd      	b.n	801cb42 <_vfprintf_r+0xaba>
 801cb86:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801cb8a:	d001      	beq.n	801cb90 <_vfprintf_r+0xb08>
 801cb8c:	b2b6      	uxth	r6, r6
 801cb8e:	e7d8      	b.n	801cb42 <_vfprintf_r+0xaba>
 801cb90:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801cb94:	d0d5      	beq.n	801cb42 <_vfprintf_r+0xaba>
 801cb96:	b2f6      	uxtb	r6, r6
 801cb98:	e7f3      	b.n	801cb82 <_vfprintf_r+0xafa>
 801cb9a:	4633      	mov	r3, r6
 801cb9c:	2278      	movs	r2, #120	@ 0x78
 801cb9e:	f853 6b04 	ldr.w	r6, [r3], #4
 801cba2:	9307      	str	r3, [sp, #28]
 801cba4:	f647 0330 	movw	r3, #30768	@ 0x7830
 801cba8:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 801cbac:	4b93      	ldr	r3, [pc, #588]	@ (801cdfc <_vfprintf_r+0xd74>)
 801cbae:	9319      	str	r3, [sp, #100]	@ 0x64
 801cbb0:	2700      	movs	r7, #0
 801cbb2:	f045 0502 	orr.w	r5, r5, #2
 801cbb6:	2302      	movs	r3, #2
 801cbb8:	9206      	str	r2, [sp, #24]
 801cbba:	e7c5      	b.n	801cb48 <_vfprintf_r+0xac0>
 801cbbc:	4633      	mov	r3, r6
 801cbbe:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801cbc2:	f853 8b04 	ldr.w	r8, [r3], #4
 801cbc6:	9307      	str	r3, [sp, #28]
 801cbc8:	f04f 0600 	mov.w	r6, #0
 801cbcc:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 801cbd0:	d00f      	beq.n	801cbf2 <_vfprintf_r+0xb6a>
 801cbd2:	464a      	mov	r2, r9
 801cbd4:	4631      	mov	r1, r6
 801cbd6:	4640      	mov	r0, r8
 801cbd8:	f7e3 fb12 	bl	8000200 <memchr>
 801cbdc:	4682      	mov	sl, r0
 801cbde:	2800      	cmp	r0, #0
 801cbe0:	f43f ac7a 	beq.w	801c4d8 <_vfprintf_r+0x450>
 801cbe4:	eba0 0908 	sub.w	r9, r0, r8
 801cbe8:	46b2      	mov	sl, r6
 801cbea:	9610      	str	r6, [sp, #64]	@ 0x40
 801cbec:	4637      	mov	r7, r6
 801cbee:	9608      	str	r6, [sp, #32]
 801cbf0:	e5ec      	b.n	801c7cc <_vfprintf_r+0x744>
 801cbf2:	4640      	mov	r0, r8
 801cbf4:	f7e3 faf6 	bl	80001e4 <strlen>
 801cbf8:	46b2      	mov	sl, r6
 801cbfa:	4681      	mov	r9, r0
 801cbfc:	e46c      	b.n	801c4d8 <_vfprintf_r+0x450>
 801cbfe:	f045 0510 	orr.w	r5, r5, #16
 801cc02:	f015 0320 	ands.w	r3, r5, #32
 801cc06:	d009      	beq.n	801cc1c <_vfprintf_r+0xb94>
 801cc08:	3607      	adds	r6, #7
 801cc0a:	f026 0307 	bic.w	r3, r6, #7
 801cc0e:	461a      	mov	r2, r3
 801cc10:	685f      	ldr	r7, [r3, #4]
 801cc12:	f852 6b08 	ldr.w	r6, [r2], #8
 801cc16:	9207      	str	r2, [sp, #28]
 801cc18:	2301      	movs	r3, #1
 801cc1a:	e795      	b.n	801cb48 <_vfprintf_r+0xac0>
 801cc1c:	4632      	mov	r2, r6
 801cc1e:	f015 0710 	ands.w	r7, r5, #16
 801cc22:	f852 6b04 	ldr.w	r6, [r2], #4
 801cc26:	9207      	str	r2, [sp, #28]
 801cc28:	d001      	beq.n	801cc2e <_vfprintf_r+0xba6>
 801cc2a:	461f      	mov	r7, r3
 801cc2c:	e7f4      	b.n	801cc18 <_vfprintf_r+0xb90>
 801cc2e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801cc32:	d001      	beq.n	801cc38 <_vfprintf_r+0xbb0>
 801cc34:	b2b6      	uxth	r6, r6
 801cc36:	e7ef      	b.n	801cc18 <_vfprintf_r+0xb90>
 801cc38:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801cc3c:	d0ec      	beq.n	801cc18 <_vfprintf_r+0xb90>
 801cc3e:	b2f6      	uxtb	r6, r6
 801cc40:	e7f3      	b.n	801cc2a <_vfprintf_r+0xba2>
 801cc42:	4b6f      	ldr	r3, [pc, #444]	@ (801ce00 <_vfprintf_r+0xd78>)
 801cc44:	f7ff bb33 	b.w	801c2ae <_vfprintf_r+0x226>
 801cc48:	4632      	mov	r2, r6
 801cc4a:	f015 0710 	ands.w	r7, r5, #16
 801cc4e:	f852 6b04 	ldr.w	r6, [r2], #4
 801cc52:	9207      	str	r2, [sp, #28]
 801cc54:	d002      	beq.n	801cc5c <_vfprintf_r+0xbd4>
 801cc56:	461f      	mov	r7, r3
 801cc58:	f7ff bb36 	b.w	801c2c8 <_vfprintf_r+0x240>
 801cc5c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801cc60:	d002      	beq.n	801cc68 <_vfprintf_r+0xbe0>
 801cc62:	b2b6      	uxth	r6, r6
 801cc64:	f7ff bb30 	b.w	801c2c8 <_vfprintf_r+0x240>
 801cc68:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801cc6c:	f43f ab2c 	beq.w	801c2c8 <_vfprintf_r+0x240>
 801cc70:	b2f6      	uxtb	r6, r6
 801cc72:	e7f0      	b.n	801cc56 <_vfprintf_r+0xbce>
 801cc74:	2e0a      	cmp	r6, #10
 801cc76:	f177 0300 	sbcs.w	r3, r7, #0
 801cc7a:	d207      	bcs.n	801cc8c <_vfprintf_r+0xc04>
 801cc7c:	3630      	adds	r6, #48	@ 0x30
 801cc7e:	b2f6      	uxtb	r6, r6
 801cc80:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 801cc84:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 801cc88:	f000 bc1a 	b.w	801d4c0 <_vfprintf_r+0x1438>
 801cc8c:	2300      	movs	r3, #0
 801cc8e:	9304      	str	r3, [sp, #16]
 801cc90:	9b08      	ldr	r3, [sp, #32]
 801cc92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801cc96:	ad52      	add	r5, sp, #328	@ 0x148
 801cc98:	9310      	str	r3, [sp, #64]	@ 0x40
 801cc9a:	220a      	movs	r2, #10
 801cc9c:	2300      	movs	r3, #0
 801cc9e:	4630      	mov	r0, r6
 801cca0:	4639      	mov	r1, r7
 801cca2:	f7e4 f801 	bl	8000ca8 <__aeabi_uldivmod>
 801cca6:	9b04      	ldr	r3, [sp, #16]
 801cca8:	9011      	str	r0, [sp, #68]	@ 0x44
 801ccaa:	3301      	adds	r3, #1
 801ccac:	9304      	str	r3, [sp, #16]
 801ccae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ccb0:	3230      	adds	r2, #48	@ 0x30
 801ccb2:	468a      	mov	sl, r1
 801ccb4:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 801ccb8:	f805 2c01 	strb.w	r2, [r5, #-1]
 801ccbc:	b1d3      	cbz	r3, 801ccf4 <_vfprintf_r+0xc6c>
 801ccbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ccc0:	9a04      	ldr	r2, [sp, #16]
 801ccc2:	781b      	ldrb	r3, [r3, #0]
 801ccc4:	429a      	cmp	r2, r3
 801ccc6:	d115      	bne.n	801ccf4 <_vfprintf_r+0xc6c>
 801ccc8:	2aff      	cmp	r2, #255	@ 0xff
 801ccca:	d013      	beq.n	801ccf4 <_vfprintf_r+0xc6c>
 801cccc:	2e0a      	cmp	r6, #10
 801ccce:	f177 0300 	sbcs.w	r3, r7, #0
 801ccd2:	d30f      	bcc.n	801ccf4 <_vfprintf_r+0xc6c>
 801ccd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ccd6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801ccd8:	eba8 0803 	sub.w	r8, r8, r3
 801ccdc:	461a      	mov	r2, r3
 801ccde:	4640      	mov	r0, r8
 801cce0:	f001 fce8 	bl	801e6b4 <strncpy>
 801cce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cce6:	785b      	ldrb	r3, [r3, #1]
 801cce8:	b11b      	cbz	r3, 801ccf2 <_vfprintf_r+0xc6a>
 801ccea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ccec:	3301      	adds	r3, #1
 801ccee:	9309      	str	r3, [sp, #36]	@ 0x24
 801ccf0:	2300      	movs	r3, #0
 801ccf2:	9304      	str	r3, [sp, #16]
 801ccf4:	2e0a      	cmp	r6, #10
 801ccf6:	f177 0700 	sbcs.w	r7, r7, #0
 801ccfa:	f0c0 83e1 	bcc.w	801d4c0 <_vfprintf_r+0x1438>
 801ccfe:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801cd00:	4657      	mov	r7, sl
 801cd02:	4645      	mov	r5, r8
 801cd04:	e7c9      	b.n	801cc9a <_vfprintf_r+0xc12>
 801cd06:	f006 030f 	and.w	r3, r6, #15
 801cd0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801cd0c:	0936      	lsrs	r6, r6, #4
 801cd0e:	5cd3      	ldrb	r3, [r2, r3]
 801cd10:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801cd14:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 801cd18:	093f      	lsrs	r7, r7, #4
 801cd1a:	ea56 0307 	orrs.w	r3, r6, r7
 801cd1e:	d1f2      	bne.n	801cd06 <_vfprintf_r+0xc7e>
 801cd20:	e3ce      	b.n	801d4c0 <_vfprintf_r+0x1438>
 801cd22:	b91b      	cbnz	r3, 801cd2c <_vfprintf_r+0xca4>
 801cd24:	07ed      	lsls	r5, r5, #31
 801cd26:	d501      	bpl.n	801cd2c <_vfprintf_r+0xca4>
 801cd28:	2630      	movs	r6, #48	@ 0x30
 801cd2a:	e7a9      	b.n	801cc80 <_vfprintf_r+0xbf8>
 801cd2c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 801cd30:	e3c6      	b.n	801d4c0 <_vfprintf_r+0x1438>
 801cd32:	9b06      	ldr	r3, [sp, #24]
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	f000 8390 	beq.w	801d45a <_vfprintf_r+0x13d2>
 801cd3a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801cd3e:	2300      	movs	r3, #0
 801cd40:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801cd44:	9607      	str	r6, [sp, #28]
 801cd46:	f7ff bb5c 	b.w	801c402 <_vfprintf_r+0x37a>
 801cd4a:	2010      	movs	r0, #16
 801cd4c:	4403      	add	r3, r0
 801cd4e:	2a07      	cmp	r2, #7
 801cd50:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801cd54:	6060      	str	r0, [r4, #4]
 801cd56:	dd08      	ble.n	801cd6a <_vfprintf_r+0xce2>
 801cd58:	9803      	ldr	r0, [sp, #12]
 801cd5a:	aa26      	add	r2, sp, #152	@ 0x98
 801cd5c:	4659      	mov	r1, fp
 801cd5e:	f000 fbff 	bl	801d560 <__sprint_r>
 801cd62:	2800      	cmp	r0, #0
 801cd64:	f040 8357 	bne.w	801d416 <_vfprintf_r+0x138e>
 801cd68:	a929      	add	r1, sp, #164	@ 0xa4
 801cd6a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cd6c:	3b10      	subs	r3, #16
 801cd6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cd70:	460c      	mov	r4, r1
 801cd72:	e547      	b.n	801c804 <_vfprintf_r+0x77c>
 801cd74:	460c      	mov	r4, r1
 801cd76:	e562      	b.n	801c83e <_vfprintf_r+0x7b6>
 801cd78:	9803      	ldr	r0, [sp, #12]
 801cd7a:	aa26      	add	r2, sp, #152	@ 0x98
 801cd7c:	4659      	mov	r1, fp
 801cd7e:	f000 fbef 	bl	801d560 <__sprint_r>
 801cd82:	2800      	cmp	r0, #0
 801cd84:	f040 8347 	bne.w	801d416 <_vfprintf_r+0x138e>
 801cd88:	ac29      	add	r4, sp, #164	@ 0xa4
 801cd8a:	e56a      	b.n	801c862 <_vfprintf_r+0x7da>
 801cd8c:	9803      	ldr	r0, [sp, #12]
 801cd8e:	aa26      	add	r2, sp, #152	@ 0x98
 801cd90:	4659      	mov	r1, fp
 801cd92:	f000 fbe5 	bl	801d560 <__sprint_r>
 801cd96:	2800      	cmp	r0, #0
 801cd98:	f040 833d 	bne.w	801d416 <_vfprintf_r+0x138e>
 801cd9c:	ac29      	add	r4, sp, #164	@ 0xa4
 801cd9e:	e570      	b.n	801c882 <_vfprintf_r+0x7fa>
 801cda0:	2010      	movs	r0, #16
 801cda2:	4403      	add	r3, r0
 801cda4:	2a07      	cmp	r2, #7
 801cda6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801cdaa:	6060      	str	r0, [r4, #4]
 801cdac:	dd08      	ble.n	801cdc0 <_vfprintf_r+0xd38>
 801cdae:	9803      	ldr	r0, [sp, #12]
 801cdb0:	aa26      	add	r2, sp, #152	@ 0x98
 801cdb2:	4659      	mov	r1, fp
 801cdb4:	f000 fbd4 	bl	801d560 <__sprint_r>
 801cdb8:	2800      	cmp	r0, #0
 801cdba:	f040 832c 	bne.w	801d416 <_vfprintf_r+0x138e>
 801cdbe:	a929      	add	r1, sp, #164	@ 0xa4
 801cdc0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cdc2:	3b10      	subs	r3, #16
 801cdc4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cdc6:	460c      	mov	r4, r1
 801cdc8:	e564      	b.n	801c894 <_vfprintf_r+0x80c>
 801cdca:	460c      	mov	r4, r1
 801cdcc:	e57f      	b.n	801c8ce <_vfprintf_r+0x846>
 801cdce:	2010      	movs	r0, #16
 801cdd0:	4403      	add	r3, r0
 801cdd2:	2a07      	cmp	r2, #7
 801cdd4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801cdd8:	6060      	str	r0, [r4, #4]
 801cdda:	dd08      	ble.n	801cdee <_vfprintf_r+0xd66>
 801cddc:	9803      	ldr	r0, [sp, #12]
 801cdde:	aa26      	add	r2, sp, #152	@ 0x98
 801cde0:	4659      	mov	r1, fp
 801cde2:	f000 fbbd 	bl	801d560 <__sprint_r>
 801cde6:	2800      	cmp	r0, #0
 801cde8:	f040 8315 	bne.w	801d416 <_vfprintf_r+0x138e>
 801cdec:	a929      	add	r1, sp, #164	@ 0xa4
 801cdee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cdf0:	3b10      	subs	r3, #16
 801cdf2:	9310      	str	r3, [sp, #64]	@ 0x40
 801cdf4:	460c      	mov	r4, r1
 801cdf6:	e570      	b.n	801c8da <_vfprintf_r+0x852>
 801cdf8:	460c      	mov	r4, r1
 801cdfa:	e58b      	b.n	801c914 <_vfprintf_r+0x88c>
 801cdfc:	08021496 	.word	0x08021496
 801ce00:	080214a7 	.word	0x080214a7
 801ce04:	9b06      	ldr	r3, [sp, #24]
 801ce06:	2b65      	cmp	r3, #101	@ 0x65
 801ce08:	f340 8245 	ble.w	801d296 <_vfprintf_r+0x120e>
 801ce0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801ce10:	2200      	movs	r2, #0
 801ce12:	2300      	movs	r3, #0
 801ce14:	f7e3 fe68 	bl	8000ae8 <__aeabi_dcmpeq>
 801ce18:	2800      	cmp	r0, #0
 801ce1a:	d06a      	beq.n	801cef2 <_vfprintf_r+0xe6a>
 801ce1c:	4b73      	ldr	r3, [pc, #460]	@ (801cfec <_vfprintf_r+0xf64>)
 801ce1e:	6023      	str	r3, [r4, #0]
 801ce20:	2301      	movs	r3, #1
 801ce22:	6063      	str	r3, [r4, #4]
 801ce24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ce26:	3301      	adds	r3, #1
 801ce28:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ce2a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ce2c:	3301      	adds	r3, #1
 801ce2e:	2b07      	cmp	r3, #7
 801ce30:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ce32:	dc37      	bgt.n	801cea4 <_vfprintf_r+0xe1c>
 801ce34:	3408      	adds	r4, #8
 801ce36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ce38:	9a04      	ldr	r2, [sp, #16]
 801ce3a:	4293      	cmp	r3, r2
 801ce3c:	db02      	blt.n	801ce44 <_vfprintf_r+0xdbc>
 801ce3e:	07e9      	lsls	r1, r5, #31
 801ce40:	f57f ad78 	bpl.w	801c934 <_vfprintf_r+0x8ac>
 801ce44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ce46:	6023      	str	r3, [r4, #0]
 801ce48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ce4c:	6063      	str	r3, [r4, #4]
 801ce4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ce50:	4413      	add	r3, r2
 801ce52:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ce54:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ce56:	3301      	adds	r3, #1
 801ce58:	2b07      	cmp	r3, #7
 801ce5a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ce5c:	dc2c      	bgt.n	801ceb8 <_vfprintf_r+0xe30>
 801ce5e:	3408      	adds	r4, #8
 801ce60:	9b04      	ldr	r3, [sp, #16]
 801ce62:	1e5e      	subs	r6, r3, #1
 801ce64:	2e00      	cmp	r6, #0
 801ce66:	f77f ad65 	ble.w	801c934 <_vfprintf_r+0x8ac>
 801ce6a:	4f61      	ldr	r7, [pc, #388]	@ (801cff0 <_vfprintf_r+0xf68>)
 801ce6c:	f04f 0810 	mov.w	r8, #16
 801ce70:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801ce74:	2e10      	cmp	r6, #16
 801ce76:	f103 0301 	add.w	r3, r3, #1
 801ce7a:	f104 0108 	add.w	r1, r4, #8
 801ce7e:	6027      	str	r7, [r4, #0]
 801ce80:	dc24      	bgt.n	801cecc <_vfprintf_r+0xe44>
 801ce82:	6066      	str	r6, [r4, #4]
 801ce84:	2b07      	cmp	r3, #7
 801ce86:	4416      	add	r6, r2
 801ce88:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801ce8c:	f340 82a2 	ble.w	801d3d4 <_vfprintf_r+0x134c>
 801ce90:	9803      	ldr	r0, [sp, #12]
 801ce92:	aa26      	add	r2, sp, #152	@ 0x98
 801ce94:	4659      	mov	r1, fp
 801ce96:	f000 fb63 	bl	801d560 <__sprint_r>
 801ce9a:	2800      	cmp	r0, #0
 801ce9c:	f040 82bb 	bne.w	801d416 <_vfprintf_r+0x138e>
 801cea0:	ac29      	add	r4, sp, #164	@ 0xa4
 801cea2:	e547      	b.n	801c934 <_vfprintf_r+0x8ac>
 801cea4:	9803      	ldr	r0, [sp, #12]
 801cea6:	aa26      	add	r2, sp, #152	@ 0x98
 801cea8:	4659      	mov	r1, fp
 801ceaa:	f000 fb59 	bl	801d560 <__sprint_r>
 801ceae:	2800      	cmp	r0, #0
 801ceb0:	f040 82b1 	bne.w	801d416 <_vfprintf_r+0x138e>
 801ceb4:	ac29      	add	r4, sp, #164	@ 0xa4
 801ceb6:	e7be      	b.n	801ce36 <_vfprintf_r+0xdae>
 801ceb8:	9803      	ldr	r0, [sp, #12]
 801ceba:	aa26      	add	r2, sp, #152	@ 0x98
 801cebc:	4659      	mov	r1, fp
 801cebe:	f000 fb4f 	bl	801d560 <__sprint_r>
 801cec2:	2800      	cmp	r0, #0
 801cec4:	f040 82a7 	bne.w	801d416 <_vfprintf_r+0x138e>
 801cec8:	ac29      	add	r4, sp, #164	@ 0xa4
 801ceca:	e7c9      	b.n	801ce60 <_vfprintf_r+0xdd8>
 801cecc:	3210      	adds	r2, #16
 801cece:	2b07      	cmp	r3, #7
 801ced0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801ced4:	f8c4 8004 	str.w	r8, [r4, #4]
 801ced8:	dd08      	ble.n	801ceec <_vfprintf_r+0xe64>
 801ceda:	9803      	ldr	r0, [sp, #12]
 801cedc:	aa26      	add	r2, sp, #152	@ 0x98
 801cede:	4659      	mov	r1, fp
 801cee0:	f000 fb3e 	bl	801d560 <__sprint_r>
 801cee4:	2800      	cmp	r0, #0
 801cee6:	f040 8296 	bne.w	801d416 <_vfprintf_r+0x138e>
 801ceea:	a929      	add	r1, sp, #164	@ 0xa4
 801ceec:	3e10      	subs	r6, #16
 801ceee:	460c      	mov	r4, r1
 801cef0:	e7be      	b.n	801ce70 <_vfprintf_r+0xde8>
 801cef2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	dc7d      	bgt.n	801cff4 <_vfprintf_r+0xf6c>
 801cef8:	4b3c      	ldr	r3, [pc, #240]	@ (801cfec <_vfprintf_r+0xf64>)
 801cefa:	6023      	str	r3, [r4, #0]
 801cefc:	2301      	movs	r3, #1
 801cefe:	6063      	str	r3, [r4, #4]
 801cf00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cf02:	3301      	adds	r3, #1
 801cf04:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cf06:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cf08:	3301      	adds	r3, #1
 801cf0a:	2b07      	cmp	r3, #7
 801cf0c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cf0e:	dc46      	bgt.n	801cf9e <_vfprintf_r+0xf16>
 801cf10:	3408      	adds	r4, #8
 801cf12:	9904      	ldr	r1, [sp, #16]
 801cf14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cf16:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801cf18:	430b      	orrs	r3, r1
 801cf1a:	f005 0101 	and.w	r1, r5, #1
 801cf1e:	430b      	orrs	r3, r1
 801cf20:	f43f ad08 	beq.w	801c934 <_vfprintf_r+0x8ac>
 801cf24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cf26:	6023      	str	r3, [r4, #0]
 801cf28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cf2a:	6063      	str	r3, [r4, #4]
 801cf2c:	441a      	add	r2, r3
 801cf2e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cf30:	9228      	str	r2, [sp, #160]	@ 0xa0
 801cf32:	3301      	adds	r3, #1
 801cf34:	2b07      	cmp	r3, #7
 801cf36:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cf38:	dc3b      	bgt.n	801cfb2 <_vfprintf_r+0xf2a>
 801cf3a:	f104 0308 	add.w	r3, r4, #8
 801cf3e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801cf40:	2e00      	cmp	r6, #0
 801cf42:	da1b      	bge.n	801cf7c <_vfprintf_r+0xef4>
 801cf44:	4f2a      	ldr	r7, [pc, #168]	@ (801cff0 <_vfprintf_r+0xf68>)
 801cf46:	4276      	negs	r6, r6
 801cf48:	461a      	mov	r2, r3
 801cf4a:	2410      	movs	r4, #16
 801cf4c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 801cf50:	2e10      	cmp	r6, #16
 801cf52:	f101 0101 	add.w	r1, r1, #1
 801cf56:	f103 0308 	add.w	r3, r3, #8
 801cf5a:	6017      	str	r7, [r2, #0]
 801cf5c:	dc33      	bgt.n	801cfc6 <_vfprintf_r+0xf3e>
 801cf5e:	6056      	str	r6, [r2, #4]
 801cf60:	2907      	cmp	r1, #7
 801cf62:	4406      	add	r6, r0
 801cf64:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 801cf68:	dd08      	ble.n	801cf7c <_vfprintf_r+0xef4>
 801cf6a:	9803      	ldr	r0, [sp, #12]
 801cf6c:	aa26      	add	r2, sp, #152	@ 0x98
 801cf6e:	4659      	mov	r1, fp
 801cf70:	f000 faf6 	bl	801d560 <__sprint_r>
 801cf74:	2800      	cmp	r0, #0
 801cf76:	f040 824e 	bne.w	801d416 <_vfprintf_r+0x138e>
 801cf7a:	ab29      	add	r3, sp, #164	@ 0xa4
 801cf7c:	9a04      	ldr	r2, [sp, #16]
 801cf7e:	9904      	ldr	r1, [sp, #16]
 801cf80:	605a      	str	r2, [r3, #4]
 801cf82:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801cf84:	f8c3 8000 	str.w	r8, [r3]
 801cf88:	440a      	add	r2, r1
 801cf8a:	9228      	str	r2, [sp, #160]	@ 0xa0
 801cf8c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801cf8e:	3201      	adds	r2, #1
 801cf90:	2a07      	cmp	r2, #7
 801cf92:	9227      	str	r2, [sp, #156]	@ 0x9c
 801cf94:	f73f af7c 	bgt.w	801ce90 <_vfprintf_r+0xe08>
 801cf98:	f103 0408 	add.w	r4, r3, #8
 801cf9c:	e4ca      	b.n	801c934 <_vfprintf_r+0x8ac>
 801cf9e:	9803      	ldr	r0, [sp, #12]
 801cfa0:	aa26      	add	r2, sp, #152	@ 0x98
 801cfa2:	4659      	mov	r1, fp
 801cfa4:	f000 fadc 	bl	801d560 <__sprint_r>
 801cfa8:	2800      	cmp	r0, #0
 801cfaa:	f040 8234 	bne.w	801d416 <_vfprintf_r+0x138e>
 801cfae:	ac29      	add	r4, sp, #164	@ 0xa4
 801cfb0:	e7af      	b.n	801cf12 <_vfprintf_r+0xe8a>
 801cfb2:	9803      	ldr	r0, [sp, #12]
 801cfb4:	aa26      	add	r2, sp, #152	@ 0x98
 801cfb6:	4659      	mov	r1, fp
 801cfb8:	f000 fad2 	bl	801d560 <__sprint_r>
 801cfbc:	2800      	cmp	r0, #0
 801cfbe:	f040 822a 	bne.w	801d416 <_vfprintf_r+0x138e>
 801cfc2:	ab29      	add	r3, sp, #164	@ 0xa4
 801cfc4:	e7bb      	b.n	801cf3e <_vfprintf_r+0xeb6>
 801cfc6:	3010      	adds	r0, #16
 801cfc8:	2907      	cmp	r1, #7
 801cfca:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 801cfce:	6054      	str	r4, [r2, #4]
 801cfd0:	dd08      	ble.n	801cfe4 <_vfprintf_r+0xf5c>
 801cfd2:	9803      	ldr	r0, [sp, #12]
 801cfd4:	aa26      	add	r2, sp, #152	@ 0x98
 801cfd6:	4659      	mov	r1, fp
 801cfd8:	f000 fac2 	bl	801d560 <__sprint_r>
 801cfdc:	2800      	cmp	r0, #0
 801cfde:	f040 821a 	bne.w	801d416 <_vfprintf_r+0x138e>
 801cfe2:	ab29      	add	r3, sp, #164	@ 0xa4
 801cfe4:	3e10      	subs	r6, #16
 801cfe6:	461a      	mov	r2, r3
 801cfe8:	e7b0      	b.n	801cf4c <_vfprintf_r+0xec4>
 801cfea:	bf00      	nop
 801cfec:	080214b8 	.word	0x080214b8
 801cff0:	080214da 	.word	0x080214da
 801cff4:	9b04      	ldr	r3, [sp, #16]
 801cff6:	4443      	add	r3, r8
 801cff8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cffa:	9b04      	ldr	r3, [sp, #16]
 801cffc:	42b3      	cmp	r3, r6
 801cffe:	bfa8      	it	ge
 801d000:	4633      	movge	r3, r6
 801d002:	2b00      	cmp	r3, #0
 801d004:	4699      	mov	r9, r3
 801d006:	dd0b      	ble.n	801d020 <_vfprintf_r+0xf98>
 801d008:	e9c4 8300 	strd	r8, r3, [r4]
 801d00c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d00e:	444b      	add	r3, r9
 801d010:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d012:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d014:	3301      	adds	r3, #1
 801d016:	2b07      	cmp	r3, #7
 801d018:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d01a:	f300 8089 	bgt.w	801d130 <_vfprintf_r+0x10a8>
 801d01e:	3408      	adds	r4, #8
 801d020:	f1b9 0f00 	cmp.w	r9, #0
 801d024:	bfac      	ite	ge
 801d026:	eba6 0309 	subge.w	r3, r6, r9
 801d02a:	4633      	movlt	r3, r6
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	9306      	str	r3, [sp, #24]
 801d030:	dd1c      	ble.n	801d06c <_vfprintf_r+0xfe4>
 801d032:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 801d398 <_vfprintf_r+0x1310>
 801d036:	9806      	ldr	r0, [sp, #24]
 801d038:	f8c4 9000 	str.w	r9, [r4]
 801d03c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801d040:	2810      	cmp	r0, #16
 801d042:	f102 0201 	add.w	r2, r2, #1
 801d046:	f104 0108 	add.w	r1, r4, #8
 801d04a:	dc7b      	bgt.n	801d144 <_vfprintf_r+0x10bc>
 801d04c:	4403      	add	r3, r0
 801d04e:	2a07      	cmp	r2, #7
 801d050:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801d054:	6060      	str	r0, [r4, #4]
 801d056:	f340 808a 	ble.w	801d16e <_vfprintf_r+0x10e6>
 801d05a:	9803      	ldr	r0, [sp, #12]
 801d05c:	aa26      	add	r2, sp, #152	@ 0x98
 801d05e:	4659      	mov	r1, fp
 801d060:	f000 fa7e 	bl	801d560 <__sprint_r>
 801d064:	2800      	cmp	r0, #0
 801d066:	f040 81d6 	bne.w	801d416 <_vfprintf_r+0x138e>
 801d06a:	ac29      	add	r4, sp, #164	@ 0xa4
 801d06c:	056a      	lsls	r2, r5, #21
 801d06e:	44b0      	add	r8, r6
 801d070:	d508      	bpl.n	801d084 <_vfprintf_r+0xffc>
 801d072:	9b08      	ldr	r3, [sp, #32]
 801d074:	2b00      	cmp	r3, #0
 801d076:	d17c      	bne.n	801d172 <_vfprintf_r+0x10ea>
 801d078:	2f00      	cmp	r7, #0
 801d07a:	d17c      	bne.n	801d176 <_vfprintf_r+0x10ee>
 801d07c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d07e:	4598      	cmp	r8, r3
 801d080:	bf28      	it	cs
 801d082:	4698      	movcs	r8, r3
 801d084:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d086:	9a04      	ldr	r2, [sp, #16]
 801d088:	4293      	cmp	r3, r2
 801d08a:	db01      	blt.n	801d090 <_vfprintf_r+0x1008>
 801d08c:	07eb      	lsls	r3, r5, #31
 801d08e:	d50e      	bpl.n	801d0ae <_vfprintf_r+0x1026>
 801d090:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d092:	6023      	str	r3, [r4, #0]
 801d094:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d096:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d098:	6063      	str	r3, [r4, #4]
 801d09a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d09c:	4413      	add	r3, r2
 801d09e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d0a0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d0a2:	3301      	adds	r3, #1
 801d0a4:	2b07      	cmp	r3, #7
 801d0a6:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d0a8:	f300 80e1 	bgt.w	801d26e <_vfprintf_r+0x11e6>
 801d0ac:	3408      	adds	r4, #8
 801d0ae:	9b04      	ldr	r3, [sp, #16]
 801d0b0:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 801d0b2:	1bdf      	subs	r7, r3, r7
 801d0b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d0b6:	eba3 0308 	sub.w	r3, r3, r8
 801d0ba:	429f      	cmp	r7, r3
 801d0bc:	bfa8      	it	ge
 801d0be:	461f      	movge	r7, r3
 801d0c0:	2f00      	cmp	r7, #0
 801d0c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d0c4:	dd0a      	ble.n	801d0dc <_vfprintf_r+0x1054>
 801d0c6:	443b      	add	r3, r7
 801d0c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d0ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d0cc:	3301      	adds	r3, #1
 801d0ce:	2b07      	cmp	r3, #7
 801d0d0:	e9c4 8700 	strd	r8, r7, [r4]
 801d0d4:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d0d6:	f300 80d4 	bgt.w	801d282 <_vfprintf_r+0x11fa>
 801d0da:	3408      	adds	r4, #8
 801d0dc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d0de:	9b04      	ldr	r3, [sp, #16]
 801d0e0:	2f00      	cmp	r7, #0
 801d0e2:	eba3 0606 	sub.w	r6, r3, r6
 801d0e6:	bfa8      	it	ge
 801d0e8:	1bf6      	subge	r6, r6, r7
 801d0ea:	2e00      	cmp	r6, #0
 801d0ec:	f77f ac22 	ble.w	801c934 <_vfprintf_r+0x8ac>
 801d0f0:	4fa9      	ldr	r7, [pc, #676]	@ (801d398 <_vfprintf_r+0x1310>)
 801d0f2:	f04f 0810 	mov.w	r8, #16
 801d0f6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801d0fa:	2e10      	cmp	r6, #16
 801d0fc:	f103 0301 	add.w	r3, r3, #1
 801d100:	f104 0108 	add.w	r1, r4, #8
 801d104:	6027      	str	r7, [r4, #0]
 801d106:	f77f aebc 	ble.w	801ce82 <_vfprintf_r+0xdfa>
 801d10a:	3210      	adds	r2, #16
 801d10c:	2b07      	cmp	r3, #7
 801d10e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801d112:	f8c4 8004 	str.w	r8, [r4, #4]
 801d116:	dd08      	ble.n	801d12a <_vfprintf_r+0x10a2>
 801d118:	9803      	ldr	r0, [sp, #12]
 801d11a:	aa26      	add	r2, sp, #152	@ 0x98
 801d11c:	4659      	mov	r1, fp
 801d11e:	f000 fa1f 	bl	801d560 <__sprint_r>
 801d122:	2800      	cmp	r0, #0
 801d124:	f040 8177 	bne.w	801d416 <_vfprintf_r+0x138e>
 801d128:	a929      	add	r1, sp, #164	@ 0xa4
 801d12a:	3e10      	subs	r6, #16
 801d12c:	460c      	mov	r4, r1
 801d12e:	e7e2      	b.n	801d0f6 <_vfprintf_r+0x106e>
 801d130:	9803      	ldr	r0, [sp, #12]
 801d132:	aa26      	add	r2, sp, #152	@ 0x98
 801d134:	4659      	mov	r1, fp
 801d136:	f000 fa13 	bl	801d560 <__sprint_r>
 801d13a:	2800      	cmp	r0, #0
 801d13c:	f040 816b 	bne.w	801d416 <_vfprintf_r+0x138e>
 801d140:	ac29      	add	r4, sp, #164	@ 0xa4
 801d142:	e76d      	b.n	801d020 <_vfprintf_r+0xf98>
 801d144:	2010      	movs	r0, #16
 801d146:	4403      	add	r3, r0
 801d148:	2a07      	cmp	r2, #7
 801d14a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801d14e:	6060      	str	r0, [r4, #4]
 801d150:	dd08      	ble.n	801d164 <_vfprintf_r+0x10dc>
 801d152:	9803      	ldr	r0, [sp, #12]
 801d154:	aa26      	add	r2, sp, #152	@ 0x98
 801d156:	4659      	mov	r1, fp
 801d158:	f000 fa02 	bl	801d560 <__sprint_r>
 801d15c:	2800      	cmp	r0, #0
 801d15e:	f040 815a 	bne.w	801d416 <_vfprintf_r+0x138e>
 801d162:	a929      	add	r1, sp, #164	@ 0xa4
 801d164:	9b06      	ldr	r3, [sp, #24]
 801d166:	3b10      	subs	r3, #16
 801d168:	9306      	str	r3, [sp, #24]
 801d16a:	460c      	mov	r4, r1
 801d16c:	e763      	b.n	801d036 <_vfprintf_r+0xfae>
 801d16e:	460c      	mov	r4, r1
 801d170:	e77c      	b.n	801d06c <_vfprintf_r+0xfe4>
 801d172:	2f00      	cmp	r7, #0
 801d174:	d04b      	beq.n	801d20e <_vfprintf_r+0x1186>
 801d176:	3f01      	subs	r7, #1
 801d178:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d17a:	6023      	str	r3, [r4, #0]
 801d17c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d17e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d180:	6063      	str	r3, [r4, #4]
 801d182:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d184:	4413      	add	r3, r2
 801d186:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d188:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d18a:	3301      	adds	r3, #1
 801d18c:	2b07      	cmp	r3, #7
 801d18e:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d190:	dc44      	bgt.n	801d21c <_vfprintf_r+0x1194>
 801d192:	3408      	adds	r4, #8
 801d194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d196:	f893 9000 	ldrb.w	r9, [r3]
 801d19a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d19c:	eba3 0308 	sub.w	r3, r3, r8
 801d1a0:	4599      	cmp	r9, r3
 801d1a2:	bfa8      	it	ge
 801d1a4:	4699      	movge	r9, r3
 801d1a6:	f1b9 0f00 	cmp.w	r9, #0
 801d1aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d1ac:	dd09      	ble.n	801d1c2 <_vfprintf_r+0x113a>
 801d1ae:	444b      	add	r3, r9
 801d1b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d1b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d1b4:	3301      	adds	r3, #1
 801d1b6:	2b07      	cmp	r3, #7
 801d1b8:	e9c4 8900 	strd	r8, r9, [r4]
 801d1bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d1be:	dc37      	bgt.n	801d230 <_vfprintf_r+0x11a8>
 801d1c0:	3408      	adds	r4, #8
 801d1c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1c4:	781e      	ldrb	r6, [r3, #0]
 801d1c6:	f1b9 0f00 	cmp.w	r9, #0
 801d1ca:	bfa8      	it	ge
 801d1cc:	eba6 0609 	subge.w	r6, r6, r9
 801d1d0:	2e00      	cmp	r6, #0
 801d1d2:	dd18      	ble.n	801d206 <_vfprintf_r+0x117e>
 801d1d4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801d1d8:	486f      	ldr	r0, [pc, #444]	@ (801d398 <_vfprintf_r+0x1310>)
 801d1da:	6020      	str	r0, [r4, #0]
 801d1dc:	2e10      	cmp	r6, #16
 801d1de:	f103 0301 	add.w	r3, r3, #1
 801d1e2:	f104 0108 	add.w	r1, r4, #8
 801d1e6:	dc2d      	bgt.n	801d244 <_vfprintf_r+0x11bc>
 801d1e8:	6066      	str	r6, [r4, #4]
 801d1ea:	2b07      	cmp	r3, #7
 801d1ec:	4416      	add	r6, r2
 801d1ee:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801d1f2:	dd3a      	ble.n	801d26a <_vfprintf_r+0x11e2>
 801d1f4:	9803      	ldr	r0, [sp, #12]
 801d1f6:	aa26      	add	r2, sp, #152	@ 0x98
 801d1f8:	4659      	mov	r1, fp
 801d1fa:	f000 f9b1 	bl	801d560 <__sprint_r>
 801d1fe:	2800      	cmp	r0, #0
 801d200:	f040 8109 	bne.w	801d416 <_vfprintf_r+0x138e>
 801d204:	ac29      	add	r4, sp, #164	@ 0xa4
 801d206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d208:	781b      	ldrb	r3, [r3, #0]
 801d20a:	4498      	add	r8, r3
 801d20c:	e731      	b.n	801d072 <_vfprintf_r+0xfea>
 801d20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d210:	3b01      	subs	r3, #1
 801d212:	9309      	str	r3, [sp, #36]	@ 0x24
 801d214:	9b08      	ldr	r3, [sp, #32]
 801d216:	3b01      	subs	r3, #1
 801d218:	9308      	str	r3, [sp, #32]
 801d21a:	e7ad      	b.n	801d178 <_vfprintf_r+0x10f0>
 801d21c:	9803      	ldr	r0, [sp, #12]
 801d21e:	aa26      	add	r2, sp, #152	@ 0x98
 801d220:	4659      	mov	r1, fp
 801d222:	f000 f99d 	bl	801d560 <__sprint_r>
 801d226:	2800      	cmp	r0, #0
 801d228:	f040 80f5 	bne.w	801d416 <_vfprintf_r+0x138e>
 801d22c:	ac29      	add	r4, sp, #164	@ 0xa4
 801d22e:	e7b1      	b.n	801d194 <_vfprintf_r+0x110c>
 801d230:	9803      	ldr	r0, [sp, #12]
 801d232:	aa26      	add	r2, sp, #152	@ 0x98
 801d234:	4659      	mov	r1, fp
 801d236:	f000 f993 	bl	801d560 <__sprint_r>
 801d23a:	2800      	cmp	r0, #0
 801d23c:	f040 80eb 	bne.w	801d416 <_vfprintf_r+0x138e>
 801d240:	ac29      	add	r4, sp, #164	@ 0xa4
 801d242:	e7be      	b.n	801d1c2 <_vfprintf_r+0x113a>
 801d244:	2010      	movs	r0, #16
 801d246:	4402      	add	r2, r0
 801d248:	2b07      	cmp	r3, #7
 801d24a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801d24e:	6060      	str	r0, [r4, #4]
 801d250:	dd08      	ble.n	801d264 <_vfprintf_r+0x11dc>
 801d252:	9803      	ldr	r0, [sp, #12]
 801d254:	aa26      	add	r2, sp, #152	@ 0x98
 801d256:	4659      	mov	r1, fp
 801d258:	f000 f982 	bl	801d560 <__sprint_r>
 801d25c:	2800      	cmp	r0, #0
 801d25e:	f040 80da 	bne.w	801d416 <_vfprintf_r+0x138e>
 801d262:	a929      	add	r1, sp, #164	@ 0xa4
 801d264:	3e10      	subs	r6, #16
 801d266:	460c      	mov	r4, r1
 801d268:	e7b4      	b.n	801d1d4 <_vfprintf_r+0x114c>
 801d26a:	460c      	mov	r4, r1
 801d26c:	e7cb      	b.n	801d206 <_vfprintf_r+0x117e>
 801d26e:	9803      	ldr	r0, [sp, #12]
 801d270:	aa26      	add	r2, sp, #152	@ 0x98
 801d272:	4659      	mov	r1, fp
 801d274:	f000 f974 	bl	801d560 <__sprint_r>
 801d278:	2800      	cmp	r0, #0
 801d27a:	f040 80cc 	bne.w	801d416 <_vfprintf_r+0x138e>
 801d27e:	ac29      	add	r4, sp, #164	@ 0xa4
 801d280:	e715      	b.n	801d0ae <_vfprintf_r+0x1026>
 801d282:	9803      	ldr	r0, [sp, #12]
 801d284:	aa26      	add	r2, sp, #152	@ 0x98
 801d286:	4659      	mov	r1, fp
 801d288:	f000 f96a 	bl	801d560 <__sprint_r>
 801d28c:	2800      	cmp	r0, #0
 801d28e:	f040 80c2 	bne.w	801d416 <_vfprintf_r+0x138e>
 801d292:	ac29      	add	r4, sp, #164	@ 0xa4
 801d294:	e722      	b.n	801d0dc <_vfprintf_r+0x1054>
 801d296:	9904      	ldr	r1, [sp, #16]
 801d298:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d29a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801d29c:	2901      	cmp	r1, #1
 801d29e:	f103 0301 	add.w	r3, r3, #1
 801d2a2:	f102 0201 	add.w	r2, r2, #1
 801d2a6:	f104 0608 	add.w	r6, r4, #8
 801d2aa:	dc02      	bgt.n	801d2b2 <_vfprintf_r+0x122a>
 801d2ac:	07ef      	lsls	r7, r5, #31
 801d2ae:	f140 8086 	bpl.w	801d3be <_vfprintf_r+0x1336>
 801d2b2:	2101      	movs	r1, #1
 801d2b4:	2a07      	cmp	r2, #7
 801d2b6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801d2ba:	f8c4 8000 	str.w	r8, [r4]
 801d2be:	6061      	str	r1, [r4, #4]
 801d2c0:	dd08      	ble.n	801d2d4 <_vfprintf_r+0x124c>
 801d2c2:	9803      	ldr	r0, [sp, #12]
 801d2c4:	aa26      	add	r2, sp, #152	@ 0x98
 801d2c6:	4659      	mov	r1, fp
 801d2c8:	f000 f94a 	bl	801d560 <__sprint_r>
 801d2cc:	2800      	cmp	r0, #0
 801d2ce:	f040 80a2 	bne.w	801d416 <_vfprintf_r+0x138e>
 801d2d2:	ae29      	add	r6, sp, #164	@ 0xa4
 801d2d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d2d6:	6033      	str	r3, [r6, #0]
 801d2d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d2da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d2dc:	6073      	str	r3, [r6, #4]
 801d2de:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d2e0:	4413      	add	r3, r2
 801d2e2:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d2e4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d2e6:	3301      	adds	r3, #1
 801d2e8:	2b07      	cmp	r3, #7
 801d2ea:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d2ec:	dc33      	bgt.n	801d356 <_vfprintf_r+0x12ce>
 801d2ee:	3608      	adds	r6, #8
 801d2f0:	9b04      	ldr	r3, [sp, #16]
 801d2f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d2f6:	1e5c      	subs	r4, r3, #1
 801d2f8:	2200      	movs	r2, #0
 801d2fa:	2300      	movs	r3, #0
 801d2fc:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 801d300:	f7e3 fbf2 	bl	8000ae8 <__aeabi_dcmpeq>
 801d304:	2800      	cmp	r0, #0
 801d306:	d12f      	bne.n	801d368 <_vfprintf_r+0x12e0>
 801d308:	f108 0201 	add.w	r2, r8, #1
 801d30c:	e9c6 2400 	strd	r2, r4, [r6]
 801d310:	9a04      	ldr	r2, [sp, #16]
 801d312:	f109 0301 	add.w	r3, r9, #1
 801d316:	3f01      	subs	r7, #1
 801d318:	4417      	add	r7, r2
 801d31a:	2b07      	cmp	r3, #7
 801d31c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 801d320:	dd56      	ble.n	801d3d0 <_vfprintf_r+0x1348>
 801d322:	9803      	ldr	r0, [sp, #12]
 801d324:	aa26      	add	r2, sp, #152	@ 0x98
 801d326:	4659      	mov	r1, fp
 801d328:	f000 f91a 	bl	801d560 <__sprint_r>
 801d32c:	2800      	cmp	r0, #0
 801d32e:	d172      	bne.n	801d416 <_vfprintf_r+0x138e>
 801d330:	ae29      	add	r6, sp, #164	@ 0xa4
 801d332:	ab22      	add	r3, sp, #136	@ 0x88
 801d334:	6033      	str	r3, [r6, #0]
 801d336:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d338:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d33a:	6073      	str	r3, [r6, #4]
 801d33c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d33e:	4413      	add	r3, r2
 801d340:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d342:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d344:	3301      	adds	r3, #1
 801d346:	2b07      	cmp	r3, #7
 801d348:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d34a:	f73f ada1 	bgt.w	801ce90 <_vfprintf_r+0xe08>
 801d34e:	f106 0408 	add.w	r4, r6, #8
 801d352:	f7ff baef 	b.w	801c934 <_vfprintf_r+0x8ac>
 801d356:	9803      	ldr	r0, [sp, #12]
 801d358:	aa26      	add	r2, sp, #152	@ 0x98
 801d35a:	4659      	mov	r1, fp
 801d35c:	f000 f900 	bl	801d560 <__sprint_r>
 801d360:	2800      	cmp	r0, #0
 801d362:	d158      	bne.n	801d416 <_vfprintf_r+0x138e>
 801d364:	ae29      	add	r6, sp, #164	@ 0xa4
 801d366:	e7c3      	b.n	801d2f0 <_vfprintf_r+0x1268>
 801d368:	9b04      	ldr	r3, [sp, #16]
 801d36a:	2b01      	cmp	r3, #1
 801d36c:	dde1      	ble.n	801d332 <_vfprintf_r+0x12aa>
 801d36e:	4f0a      	ldr	r7, [pc, #40]	@ (801d398 <_vfprintf_r+0x1310>)
 801d370:	f04f 0810 	mov.w	r8, #16
 801d374:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801d378:	2c10      	cmp	r4, #16
 801d37a:	f103 0301 	add.w	r3, r3, #1
 801d37e:	f106 0108 	add.w	r1, r6, #8
 801d382:	6037      	str	r7, [r6, #0]
 801d384:	dc0a      	bgt.n	801d39c <_vfprintf_r+0x1314>
 801d386:	6074      	str	r4, [r6, #4]
 801d388:	2b07      	cmp	r3, #7
 801d38a:	4414      	add	r4, r2
 801d38c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 801d390:	dcc7      	bgt.n	801d322 <_vfprintf_r+0x129a>
 801d392:	460e      	mov	r6, r1
 801d394:	e7cd      	b.n	801d332 <_vfprintf_r+0x12aa>
 801d396:	bf00      	nop
 801d398:	080214da 	.word	0x080214da
 801d39c:	3210      	adds	r2, #16
 801d39e:	2b07      	cmp	r3, #7
 801d3a0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801d3a4:	f8c6 8004 	str.w	r8, [r6, #4]
 801d3a8:	dd06      	ble.n	801d3b8 <_vfprintf_r+0x1330>
 801d3aa:	9803      	ldr	r0, [sp, #12]
 801d3ac:	aa26      	add	r2, sp, #152	@ 0x98
 801d3ae:	4659      	mov	r1, fp
 801d3b0:	f000 f8d6 	bl	801d560 <__sprint_r>
 801d3b4:	bb78      	cbnz	r0, 801d416 <_vfprintf_r+0x138e>
 801d3b6:	a929      	add	r1, sp, #164	@ 0xa4
 801d3b8:	3c10      	subs	r4, #16
 801d3ba:	460e      	mov	r6, r1
 801d3bc:	e7da      	b.n	801d374 <_vfprintf_r+0x12ec>
 801d3be:	2101      	movs	r1, #1
 801d3c0:	2a07      	cmp	r2, #7
 801d3c2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801d3c6:	f8c4 8000 	str.w	r8, [r4]
 801d3ca:	6061      	str	r1, [r4, #4]
 801d3cc:	ddb1      	ble.n	801d332 <_vfprintf_r+0x12aa>
 801d3ce:	e7a8      	b.n	801d322 <_vfprintf_r+0x129a>
 801d3d0:	3608      	adds	r6, #8
 801d3d2:	e7ae      	b.n	801d332 <_vfprintf_r+0x12aa>
 801d3d4:	460c      	mov	r4, r1
 801d3d6:	f7ff baad 	b.w	801c934 <_vfprintf_r+0x8ac>
 801d3da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d3dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d3de:	1a9d      	subs	r5, r3, r2
 801d3e0:	2d00      	cmp	r5, #0
 801d3e2:	f77f aaaa 	ble.w	801c93a <_vfprintf_r+0x8b2>
 801d3e6:	4e3d      	ldr	r6, [pc, #244]	@ (801d4dc <_vfprintf_r+0x1454>)
 801d3e8:	2710      	movs	r7, #16
 801d3ea:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801d3ee:	2d10      	cmp	r5, #16
 801d3f0:	f103 0301 	add.w	r3, r3, #1
 801d3f4:	6026      	str	r6, [r4, #0]
 801d3f6:	dc18      	bgt.n	801d42a <_vfprintf_r+0x13a2>
 801d3f8:	6065      	str	r5, [r4, #4]
 801d3fa:	2b07      	cmp	r3, #7
 801d3fc:	4415      	add	r5, r2
 801d3fe:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 801d402:	f77f aa9a 	ble.w	801c93a <_vfprintf_r+0x8b2>
 801d406:	9803      	ldr	r0, [sp, #12]
 801d408:	aa26      	add	r2, sp, #152	@ 0x98
 801d40a:	4659      	mov	r1, fp
 801d40c:	f000 f8a8 	bl	801d560 <__sprint_r>
 801d410:	2800      	cmp	r0, #0
 801d412:	f43f aa92 	beq.w	801c93a <_vfprintf_r+0x8b2>
 801d416:	f1ba 0f00 	cmp.w	sl, #0
 801d41a:	f43f a892 	beq.w	801c542 <_vfprintf_r+0x4ba>
 801d41e:	9803      	ldr	r0, [sp, #12]
 801d420:	4651      	mov	r1, sl
 801d422:	f7fc faf9 	bl	8019a18 <_free_r>
 801d426:	f7ff b88c 	b.w	801c542 <_vfprintf_r+0x4ba>
 801d42a:	3210      	adds	r2, #16
 801d42c:	2b07      	cmp	r3, #7
 801d42e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801d432:	6067      	str	r7, [r4, #4]
 801d434:	dc02      	bgt.n	801d43c <_vfprintf_r+0x13b4>
 801d436:	3408      	adds	r4, #8
 801d438:	3d10      	subs	r5, #16
 801d43a:	e7d6      	b.n	801d3ea <_vfprintf_r+0x1362>
 801d43c:	9803      	ldr	r0, [sp, #12]
 801d43e:	aa26      	add	r2, sp, #152	@ 0x98
 801d440:	4659      	mov	r1, fp
 801d442:	f000 f88d 	bl	801d560 <__sprint_r>
 801d446:	2800      	cmp	r0, #0
 801d448:	d1e5      	bne.n	801d416 <_vfprintf_r+0x138e>
 801d44a:	ac29      	add	r4, sp, #164	@ 0xa4
 801d44c:	e7f4      	b.n	801d438 <_vfprintf_r+0x13b0>
 801d44e:	9803      	ldr	r0, [sp, #12]
 801d450:	4651      	mov	r1, sl
 801d452:	f7fc fae1 	bl	8019a18 <_free_r>
 801d456:	f7ff ba88 	b.w	801c96a <_vfprintf_r+0x8e2>
 801d45a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d45c:	b91b      	cbnz	r3, 801d466 <_vfprintf_r+0x13de>
 801d45e:	2300      	movs	r3, #0
 801d460:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d462:	f7ff b86e 	b.w	801c542 <_vfprintf_r+0x4ba>
 801d466:	9803      	ldr	r0, [sp, #12]
 801d468:	aa26      	add	r2, sp, #152	@ 0x98
 801d46a:	4659      	mov	r1, fp
 801d46c:	f000 f878 	bl	801d560 <__sprint_r>
 801d470:	2800      	cmp	r0, #0
 801d472:	d0f4      	beq.n	801d45e <_vfprintf_r+0x13d6>
 801d474:	f7ff b865 	b.w	801c542 <_vfprintf_r+0x4ba>
 801d478:	ea56 0207 	orrs.w	r2, r6, r7
 801d47c:	9508      	str	r5, [sp, #32]
 801d47e:	f43f ab75 	beq.w	801cb6c <_vfprintf_r+0xae4>
 801d482:	2b01      	cmp	r3, #1
 801d484:	f43f abf6 	beq.w	801cc74 <_vfprintf_r+0xbec>
 801d488:	2b02      	cmp	r3, #2
 801d48a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 801d48e:	f43f ac3a 	beq.w	801cd06 <_vfprintf_r+0xc7e>
 801d492:	f006 0307 	and.w	r3, r6, #7
 801d496:	08f6      	lsrs	r6, r6, #3
 801d498:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 801d49c:	08ff      	lsrs	r7, r7, #3
 801d49e:	3330      	adds	r3, #48	@ 0x30
 801d4a0:	ea56 0107 	orrs.w	r1, r6, r7
 801d4a4:	4642      	mov	r2, r8
 801d4a6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801d4aa:	d1f2      	bne.n	801d492 <_vfprintf_r+0x140a>
 801d4ac:	9908      	ldr	r1, [sp, #32]
 801d4ae:	07ce      	lsls	r6, r1, #31
 801d4b0:	d506      	bpl.n	801d4c0 <_vfprintf_r+0x1438>
 801d4b2:	2b30      	cmp	r3, #48	@ 0x30
 801d4b4:	d004      	beq.n	801d4c0 <_vfprintf_r+0x1438>
 801d4b6:	2330      	movs	r3, #48	@ 0x30
 801d4b8:	f808 3c01 	strb.w	r3, [r8, #-1]
 801d4bc:	f1a2 0802 	sub.w	r8, r2, #2
 801d4c0:	ab52      	add	r3, sp, #328	@ 0x148
 801d4c2:	9d08      	ldr	r5, [sp, #32]
 801d4c4:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801d4c8:	f04f 0a00 	mov.w	sl, #0
 801d4cc:	eba3 0908 	sub.w	r9, r3, r8
 801d4d0:	4657      	mov	r7, sl
 801d4d2:	f8cd a020 	str.w	sl, [sp, #32]
 801d4d6:	4656      	mov	r6, sl
 801d4d8:	f7ff b978 	b.w	801c7cc <_vfprintf_r+0x744>
 801d4dc:	080214ea 	.word	0x080214ea

0801d4e0 <__sbprintf>:
 801d4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4e2:	461f      	mov	r7, r3
 801d4e4:	898b      	ldrh	r3, [r1, #12]
 801d4e6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 801d4ea:	f023 0302 	bic.w	r3, r3, #2
 801d4ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d4f2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801d4f4:	9319      	str	r3, [sp, #100]	@ 0x64
 801d4f6:	89cb      	ldrh	r3, [r1, #14]
 801d4f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d4fc:	69cb      	ldr	r3, [r1, #28]
 801d4fe:	9307      	str	r3, [sp, #28]
 801d500:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 801d502:	9309      	str	r3, [sp, #36]	@ 0x24
 801d504:	ab1a      	add	r3, sp, #104	@ 0x68
 801d506:	9300      	str	r3, [sp, #0]
 801d508:	9304      	str	r3, [sp, #16]
 801d50a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d50e:	4615      	mov	r5, r2
 801d510:	4606      	mov	r6, r0
 801d512:	9302      	str	r3, [sp, #8]
 801d514:	9305      	str	r3, [sp, #20]
 801d516:	a816      	add	r0, sp, #88	@ 0x58
 801d518:	2300      	movs	r3, #0
 801d51a:	460c      	mov	r4, r1
 801d51c:	9306      	str	r3, [sp, #24]
 801d51e:	f7fc f9e5 	bl	80198ec <__retarget_lock_init_recursive>
 801d522:	462a      	mov	r2, r5
 801d524:	463b      	mov	r3, r7
 801d526:	4669      	mov	r1, sp
 801d528:	4630      	mov	r0, r6
 801d52a:	f7fe fdad 	bl	801c088 <_vfprintf_r>
 801d52e:	1e05      	subs	r5, r0, #0
 801d530:	db07      	blt.n	801d542 <__sbprintf+0x62>
 801d532:	4669      	mov	r1, sp
 801d534:	4630      	mov	r0, r6
 801d536:	f000 fdeb 	bl	801e110 <_fflush_r>
 801d53a:	2800      	cmp	r0, #0
 801d53c:	bf18      	it	ne
 801d53e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 801d542:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d546:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801d548:	065b      	lsls	r3, r3, #25
 801d54a:	bf42      	ittt	mi
 801d54c:	89a3      	ldrhmi	r3, [r4, #12]
 801d54e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 801d552:	81a3      	strhmi	r3, [r4, #12]
 801d554:	f7fc f9cb 	bl	80198ee <__retarget_lock_close_recursive>
 801d558:	4628      	mov	r0, r5
 801d55a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 801d55e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d560 <__sprint_r>:
 801d560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d564:	6893      	ldr	r3, [r2, #8]
 801d566:	4680      	mov	r8, r0
 801d568:	460e      	mov	r6, r1
 801d56a:	4614      	mov	r4, r2
 801d56c:	b343      	cbz	r3, 801d5c0 <__sprint_r+0x60>
 801d56e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801d570:	049d      	lsls	r5, r3, #18
 801d572:	d522      	bpl.n	801d5ba <__sprint_r+0x5a>
 801d574:	6815      	ldr	r5, [r2, #0]
 801d576:	68a0      	ldr	r0, [r4, #8]
 801d578:	3508      	adds	r5, #8
 801d57a:	b928      	cbnz	r0, 801d588 <__sprint_r+0x28>
 801d57c:	2300      	movs	r3, #0
 801d57e:	60a3      	str	r3, [r4, #8]
 801d580:	2300      	movs	r3, #0
 801d582:	6063      	str	r3, [r4, #4]
 801d584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d588:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 801d58c:	f04f 0900 	mov.w	r9, #0
 801d590:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 801d594:	45ca      	cmp	sl, r9
 801d596:	dc05      	bgt.n	801d5a4 <__sprint_r+0x44>
 801d598:	68a3      	ldr	r3, [r4, #8]
 801d59a:	f027 0703 	bic.w	r7, r7, #3
 801d59e:	1bdb      	subs	r3, r3, r7
 801d5a0:	60a3      	str	r3, [r4, #8]
 801d5a2:	e7e8      	b.n	801d576 <__sprint_r+0x16>
 801d5a4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801d5a8:	4632      	mov	r2, r6
 801d5aa:	4640      	mov	r0, r8
 801d5ac:	f001 f82d 	bl	801e60a <_fputwc_r>
 801d5b0:	1c43      	adds	r3, r0, #1
 801d5b2:	d0e3      	beq.n	801d57c <__sprint_r+0x1c>
 801d5b4:	f109 0901 	add.w	r9, r9, #1
 801d5b8:	e7ec      	b.n	801d594 <__sprint_r+0x34>
 801d5ba:	f000 fdcf 	bl	801e15c <__sfvwrite_r>
 801d5be:	e7dd      	b.n	801d57c <__sprint_r+0x1c>
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	e7dd      	b.n	801d580 <__sprint_r+0x20>

0801d5c4 <_vfiprintf_r>:
 801d5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5c8:	b0bb      	sub	sp, #236	@ 0xec
 801d5ca:	460f      	mov	r7, r1
 801d5cc:	4693      	mov	fp, r2
 801d5ce:	461c      	mov	r4, r3
 801d5d0:	461d      	mov	r5, r3
 801d5d2:	9000      	str	r0, [sp, #0]
 801d5d4:	b118      	cbz	r0, 801d5de <_vfiprintf_r+0x1a>
 801d5d6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801d5d8:	b90b      	cbnz	r3, 801d5de <_vfiprintf_r+0x1a>
 801d5da:	f7fb f9cd 	bl	8018978 <__sinit>
 801d5de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d5e0:	07db      	lsls	r3, r3, #31
 801d5e2:	d405      	bmi.n	801d5f0 <_vfiprintf_r+0x2c>
 801d5e4:	89bb      	ldrh	r3, [r7, #12]
 801d5e6:	059e      	lsls	r6, r3, #22
 801d5e8:	d402      	bmi.n	801d5f0 <_vfiprintf_r+0x2c>
 801d5ea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801d5ec:	f7fc f981 	bl	80198f2 <__retarget_lock_acquire_recursive>
 801d5f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d5f4:	0498      	lsls	r0, r3, #18
 801d5f6:	d406      	bmi.n	801d606 <_vfiprintf_r+0x42>
 801d5f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801d5fc:	81bb      	strh	r3, [r7, #12]
 801d5fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d600:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801d604:	667b      	str	r3, [r7, #100]	@ 0x64
 801d606:	89bb      	ldrh	r3, [r7, #12]
 801d608:	0719      	lsls	r1, r3, #28
 801d60a:	d501      	bpl.n	801d610 <_vfiprintf_r+0x4c>
 801d60c:	693b      	ldr	r3, [r7, #16]
 801d60e:	b9ab      	cbnz	r3, 801d63c <_vfiprintf_r+0x78>
 801d610:	9800      	ldr	r0, [sp, #0]
 801d612:	4639      	mov	r1, r7
 801d614:	f000 ff62 	bl	801e4dc <__swsetup_r>
 801d618:	b180      	cbz	r0, 801d63c <_vfiprintf_r+0x78>
 801d61a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d61c:	07da      	lsls	r2, r3, #31
 801d61e:	d506      	bpl.n	801d62e <_vfiprintf_r+0x6a>
 801d620:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d624:	9303      	str	r3, [sp, #12]
 801d626:	9803      	ldr	r0, [sp, #12]
 801d628:	b03b      	add	sp, #236	@ 0xec
 801d62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d62e:	89bb      	ldrh	r3, [r7, #12]
 801d630:	059b      	lsls	r3, r3, #22
 801d632:	d4f5      	bmi.n	801d620 <_vfiprintf_r+0x5c>
 801d634:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801d636:	f7fc f95e 	bl	80198f6 <__retarget_lock_release_recursive>
 801d63a:	e7f1      	b.n	801d620 <_vfiprintf_r+0x5c>
 801d63c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d640:	f003 021a 	and.w	r2, r3, #26
 801d644:	2a0a      	cmp	r2, #10
 801d646:	d114      	bne.n	801d672 <_vfiprintf_r+0xae>
 801d648:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801d64c:	2a00      	cmp	r2, #0
 801d64e:	db10      	blt.n	801d672 <_vfiprintf_r+0xae>
 801d650:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801d652:	07d6      	lsls	r6, r2, #31
 801d654:	d404      	bmi.n	801d660 <_vfiprintf_r+0x9c>
 801d656:	059d      	lsls	r5, r3, #22
 801d658:	d402      	bmi.n	801d660 <_vfiprintf_r+0x9c>
 801d65a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801d65c:	f7fc f94b 	bl	80198f6 <__retarget_lock_release_recursive>
 801d660:	9800      	ldr	r0, [sp, #0]
 801d662:	4623      	mov	r3, r4
 801d664:	465a      	mov	r2, fp
 801d666:	4639      	mov	r1, r7
 801d668:	b03b      	add	sp, #236	@ 0xec
 801d66a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d66e:	f000 bc31 	b.w	801ded4 <__sbprintf>
 801d672:	2300      	movs	r3, #0
 801d674:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 801d678:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801d67c:	ae11      	add	r6, sp, #68	@ 0x44
 801d67e:	960e      	str	r6, [sp, #56]	@ 0x38
 801d680:	9307      	str	r3, [sp, #28]
 801d682:	9309      	str	r3, [sp, #36]	@ 0x24
 801d684:	9303      	str	r3, [sp, #12]
 801d686:	465b      	mov	r3, fp
 801d688:	461c      	mov	r4, r3
 801d68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d68e:	b10a      	cbz	r2, 801d694 <_vfiprintf_r+0xd0>
 801d690:	2a25      	cmp	r2, #37	@ 0x25
 801d692:	d1f9      	bne.n	801d688 <_vfiprintf_r+0xc4>
 801d694:	ebb4 080b 	subs.w	r8, r4, fp
 801d698:	d00d      	beq.n	801d6b6 <_vfiprintf_r+0xf2>
 801d69a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d69c:	4443      	add	r3, r8
 801d69e:	9310      	str	r3, [sp, #64]	@ 0x40
 801d6a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d6a2:	3301      	adds	r3, #1
 801d6a4:	2b07      	cmp	r3, #7
 801d6a6:	e9c6 b800 	strd	fp, r8, [r6]
 801d6aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d6ac:	dc75      	bgt.n	801d79a <_vfiprintf_r+0x1d6>
 801d6ae:	3608      	adds	r6, #8
 801d6b0:	9b03      	ldr	r3, [sp, #12]
 801d6b2:	4443      	add	r3, r8
 801d6b4:	9303      	str	r3, [sp, #12]
 801d6b6:	7823      	ldrb	r3, [r4, #0]
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	f000 83cd 	beq.w	801de58 <_vfiprintf_r+0x894>
 801d6be:	2300      	movs	r3, #0
 801d6c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d6c4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801d6c8:	3401      	adds	r4, #1
 801d6ca:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801d6ce:	469a      	mov	sl, r3
 801d6d0:	46a3      	mov	fp, r4
 801d6d2:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801d6d6:	f1a3 0220 	sub.w	r2, r3, #32
 801d6da:	2a5a      	cmp	r2, #90	@ 0x5a
 801d6dc:	f200 8316 	bhi.w	801dd0c <_vfiprintf_r+0x748>
 801d6e0:	e8df f012 	tbh	[pc, r2, lsl #1]
 801d6e4:	0314009a 	.word	0x0314009a
 801d6e8:	00a20314 	.word	0x00a20314
 801d6ec:	03140314 	.word	0x03140314
 801d6f0:	00820314 	.word	0x00820314
 801d6f4:	03140314 	.word	0x03140314
 801d6f8:	00af00a5 	.word	0x00af00a5
 801d6fc:	00ac0314 	.word	0x00ac0314
 801d700:	031400b1 	.word	0x031400b1
 801d704:	00d000cd 	.word	0x00d000cd
 801d708:	00d000d0 	.word	0x00d000d0
 801d70c:	00d000d0 	.word	0x00d000d0
 801d710:	00d000d0 	.word	0x00d000d0
 801d714:	00d000d0 	.word	0x00d000d0
 801d718:	03140314 	.word	0x03140314
 801d71c:	03140314 	.word	0x03140314
 801d720:	03140314 	.word	0x03140314
 801d724:	03140314 	.word	0x03140314
 801d728:	00f70314 	.word	0x00f70314
 801d72c:	03140104 	.word	0x03140104
 801d730:	03140314 	.word	0x03140314
 801d734:	03140314 	.word	0x03140314
 801d738:	03140314 	.word	0x03140314
 801d73c:	03140314 	.word	0x03140314
 801d740:	01520314 	.word	0x01520314
 801d744:	03140314 	.word	0x03140314
 801d748:	019a0314 	.word	0x019a0314
 801d74c:	027a0314 	.word	0x027a0314
 801d750:	03140314 	.word	0x03140314
 801d754:	0314029a 	.word	0x0314029a
 801d758:	03140314 	.word	0x03140314
 801d75c:	03140314 	.word	0x03140314
 801d760:	03140314 	.word	0x03140314
 801d764:	03140314 	.word	0x03140314
 801d768:	00f70314 	.word	0x00f70314
 801d76c:	03140106 	.word	0x03140106
 801d770:	03140314 	.word	0x03140314
 801d774:	010600e0 	.word	0x010600e0
 801d778:	031400f1 	.word	0x031400f1
 801d77c:	031400eb 	.word	0x031400eb
 801d780:	01540132 	.word	0x01540132
 801d784:	00f10189 	.word	0x00f10189
 801d788:	019a0314 	.word	0x019a0314
 801d78c:	027c0098 	.word	0x027c0098
 801d790:	03140314 	.word	0x03140314
 801d794:	03140065 	.word	0x03140065
 801d798:	0098      	.short	0x0098
 801d79a:	9800      	ldr	r0, [sp, #0]
 801d79c:	aa0e      	add	r2, sp, #56	@ 0x38
 801d79e:	4639      	mov	r1, r7
 801d7a0:	f7ff fede 	bl	801d560 <__sprint_r>
 801d7a4:	2800      	cmp	r0, #0
 801d7a6:	f040 8336 	bne.w	801de16 <_vfiprintf_r+0x852>
 801d7aa:	ae11      	add	r6, sp, #68	@ 0x44
 801d7ac:	e780      	b.n	801d6b0 <_vfiprintf_r+0xec>
 801d7ae:	4a99      	ldr	r2, [pc, #612]	@ (801da14 <_vfiprintf_r+0x450>)
 801d7b0:	9205      	str	r2, [sp, #20]
 801d7b2:	f01a 0220 	ands.w	r2, sl, #32
 801d7b6:	f000 8231 	beq.w	801dc1c <_vfiprintf_r+0x658>
 801d7ba:	3507      	adds	r5, #7
 801d7bc:	f025 0507 	bic.w	r5, r5, #7
 801d7c0:	46a8      	mov	r8, r5
 801d7c2:	686d      	ldr	r5, [r5, #4]
 801d7c4:	f858 4b08 	ldr.w	r4, [r8], #8
 801d7c8:	f01a 0f01 	tst.w	sl, #1
 801d7cc:	d009      	beq.n	801d7e2 <_vfiprintf_r+0x21e>
 801d7ce:	ea54 0205 	orrs.w	r2, r4, r5
 801d7d2:	bf1f      	itttt	ne
 801d7d4:	2230      	movne	r2, #48	@ 0x30
 801d7d6:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 801d7da:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 801d7de:	f04a 0a02 	orrne.w	sl, sl, #2
 801d7e2:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801d7e6:	e112      	b.n	801da0e <_vfiprintf_r+0x44a>
 801d7e8:	9800      	ldr	r0, [sp, #0]
 801d7ea:	f000 ff81 	bl	801e6f0 <_localeconv_r>
 801d7ee:	6843      	ldr	r3, [r0, #4]
 801d7f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d7f2:	4618      	mov	r0, r3
 801d7f4:	f7e2 fcf6 	bl	80001e4 <strlen>
 801d7f8:	9007      	str	r0, [sp, #28]
 801d7fa:	9800      	ldr	r0, [sp, #0]
 801d7fc:	f000 ff78 	bl	801e6f0 <_localeconv_r>
 801d800:	6883      	ldr	r3, [r0, #8]
 801d802:	9306      	str	r3, [sp, #24]
 801d804:	9b07      	ldr	r3, [sp, #28]
 801d806:	b12b      	cbz	r3, 801d814 <_vfiprintf_r+0x250>
 801d808:	9b06      	ldr	r3, [sp, #24]
 801d80a:	b11b      	cbz	r3, 801d814 <_vfiprintf_r+0x250>
 801d80c:	781b      	ldrb	r3, [r3, #0]
 801d80e:	b10b      	cbz	r3, 801d814 <_vfiprintf_r+0x250>
 801d810:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 801d814:	465c      	mov	r4, fp
 801d816:	e75b      	b.n	801d6d0 <_vfiprintf_r+0x10c>
 801d818:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d1f9      	bne.n	801d814 <_vfiprintf_r+0x250>
 801d820:	2320      	movs	r3, #32
 801d822:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801d826:	e7f5      	b.n	801d814 <_vfiprintf_r+0x250>
 801d828:	f04a 0a01 	orr.w	sl, sl, #1
 801d82c:	e7f2      	b.n	801d814 <_vfiprintf_r+0x250>
 801d82e:	f855 3b04 	ldr.w	r3, [r5], #4
 801d832:	9302      	str	r3, [sp, #8]
 801d834:	2b00      	cmp	r3, #0
 801d836:	daed      	bge.n	801d814 <_vfiprintf_r+0x250>
 801d838:	425b      	negs	r3, r3
 801d83a:	9302      	str	r3, [sp, #8]
 801d83c:	f04a 0a04 	orr.w	sl, sl, #4
 801d840:	e7e8      	b.n	801d814 <_vfiprintf_r+0x250>
 801d842:	232b      	movs	r3, #43	@ 0x2b
 801d844:	e7ed      	b.n	801d822 <_vfiprintf_r+0x25e>
 801d846:	465a      	mov	r2, fp
 801d848:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d84c:	2b2a      	cmp	r3, #42	@ 0x2a
 801d84e:	d112      	bne.n	801d876 <_vfiprintf_r+0x2b2>
 801d850:	f855 3b04 	ldr.w	r3, [r5], #4
 801d854:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d858:	9301      	str	r3, [sp, #4]
 801d85a:	4693      	mov	fp, r2
 801d85c:	e7da      	b.n	801d814 <_vfiprintf_r+0x250>
 801d85e:	9b01      	ldr	r3, [sp, #4]
 801d860:	fb00 1303 	mla	r3, r0, r3, r1
 801d864:	9301      	str	r3, [sp, #4]
 801d866:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d86a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 801d86e:	2909      	cmp	r1, #9
 801d870:	d9f5      	bls.n	801d85e <_vfiprintf_r+0x29a>
 801d872:	4693      	mov	fp, r2
 801d874:	e72f      	b.n	801d6d6 <_vfiprintf_r+0x112>
 801d876:	2100      	movs	r1, #0
 801d878:	9101      	str	r1, [sp, #4]
 801d87a:	200a      	movs	r0, #10
 801d87c:	e7f5      	b.n	801d86a <_vfiprintf_r+0x2a6>
 801d87e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 801d882:	e7c7      	b.n	801d814 <_vfiprintf_r+0x250>
 801d884:	2100      	movs	r1, #0
 801d886:	465a      	mov	r2, fp
 801d888:	9102      	str	r1, [sp, #8]
 801d88a:	200a      	movs	r0, #10
 801d88c:	9902      	ldr	r1, [sp, #8]
 801d88e:	3b30      	subs	r3, #48	@ 0x30
 801d890:	fb00 3301 	mla	r3, r0, r1, r3
 801d894:	9302      	str	r3, [sp, #8]
 801d896:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d89a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 801d89e:	2909      	cmp	r1, #9
 801d8a0:	d9f4      	bls.n	801d88c <_vfiprintf_r+0x2c8>
 801d8a2:	e7e6      	b.n	801d872 <_vfiprintf_r+0x2ae>
 801d8a4:	f89b 3000 	ldrb.w	r3, [fp]
 801d8a8:	2b68      	cmp	r3, #104	@ 0x68
 801d8aa:	bf06      	itte	eq
 801d8ac:	f10b 0b01 	addeq.w	fp, fp, #1
 801d8b0:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 801d8b4:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 801d8b8:	e7ac      	b.n	801d814 <_vfiprintf_r+0x250>
 801d8ba:	f89b 3000 	ldrb.w	r3, [fp]
 801d8be:	2b6c      	cmp	r3, #108	@ 0x6c
 801d8c0:	d104      	bne.n	801d8cc <_vfiprintf_r+0x308>
 801d8c2:	f10b 0b01 	add.w	fp, fp, #1
 801d8c6:	f04a 0a20 	orr.w	sl, sl, #32
 801d8ca:	e7a3      	b.n	801d814 <_vfiprintf_r+0x250>
 801d8cc:	f04a 0a10 	orr.w	sl, sl, #16
 801d8d0:	e7a0      	b.n	801d814 <_vfiprintf_r+0x250>
 801d8d2:	46a8      	mov	r8, r5
 801d8d4:	2400      	movs	r4, #0
 801d8d6:	f858 3b04 	ldr.w	r3, [r8], #4
 801d8da:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 801d8de:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801d8e2:	2301      	movs	r3, #1
 801d8e4:	9301      	str	r3, [sp, #4]
 801d8e6:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 801d8ea:	e0ab      	b.n	801da44 <_vfiprintf_r+0x480>
 801d8ec:	f04a 0a10 	orr.w	sl, sl, #16
 801d8f0:	f01a 0f20 	tst.w	sl, #32
 801d8f4:	d011      	beq.n	801d91a <_vfiprintf_r+0x356>
 801d8f6:	3507      	adds	r5, #7
 801d8f8:	f025 0507 	bic.w	r5, r5, #7
 801d8fc:	46a8      	mov	r8, r5
 801d8fe:	686d      	ldr	r5, [r5, #4]
 801d900:	f858 4b08 	ldr.w	r4, [r8], #8
 801d904:	2d00      	cmp	r5, #0
 801d906:	da06      	bge.n	801d916 <_vfiprintf_r+0x352>
 801d908:	4264      	negs	r4, r4
 801d90a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801d90e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801d912:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801d916:	2301      	movs	r3, #1
 801d918:	e048      	b.n	801d9ac <_vfiprintf_r+0x3e8>
 801d91a:	46a8      	mov	r8, r5
 801d91c:	f01a 0f10 	tst.w	sl, #16
 801d920:	f858 5b04 	ldr.w	r5, [r8], #4
 801d924:	d002      	beq.n	801d92c <_vfiprintf_r+0x368>
 801d926:	462c      	mov	r4, r5
 801d928:	17ed      	asrs	r5, r5, #31
 801d92a:	e7eb      	b.n	801d904 <_vfiprintf_r+0x340>
 801d92c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 801d930:	d003      	beq.n	801d93a <_vfiprintf_r+0x376>
 801d932:	b22c      	sxth	r4, r5
 801d934:	f345 35c0 	sbfx	r5, r5, #15, #1
 801d938:	e7e4      	b.n	801d904 <_vfiprintf_r+0x340>
 801d93a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 801d93e:	d0f2      	beq.n	801d926 <_vfiprintf_r+0x362>
 801d940:	b26c      	sxtb	r4, r5
 801d942:	f345 15c0 	sbfx	r5, r5, #7, #1
 801d946:	e7dd      	b.n	801d904 <_vfiprintf_r+0x340>
 801d948:	f01a 0f20 	tst.w	sl, #32
 801d94c:	d007      	beq.n	801d95e <_vfiprintf_r+0x39a>
 801d94e:	9a03      	ldr	r2, [sp, #12]
 801d950:	682b      	ldr	r3, [r5, #0]
 801d952:	9903      	ldr	r1, [sp, #12]
 801d954:	17d2      	asrs	r2, r2, #31
 801d956:	e9c3 1200 	strd	r1, r2, [r3]
 801d95a:	3504      	adds	r5, #4
 801d95c:	e693      	b.n	801d686 <_vfiprintf_r+0xc2>
 801d95e:	f01a 0f10 	tst.w	sl, #16
 801d962:	d003      	beq.n	801d96c <_vfiprintf_r+0x3a8>
 801d964:	682b      	ldr	r3, [r5, #0]
 801d966:	9a03      	ldr	r2, [sp, #12]
 801d968:	601a      	str	r2, [r3, #0]
 801d96a:	e7f6      	b.n	801d95a <_vfiprintf_r+0x396>
 801d96c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 801d970:	d003      	beq.n	801d97a <_vfiprintf_r+0x3b6>
 801d972:	682b      	ldr	r3, [r5, #0]
 801d974:	9a03      	ldr	r2, [sp, #12]
 801d976:	801a      	strh	r2, [r3, #0]
 801d978:	e7ef      	b.n	801d95a <_vfiprintf_r+0x396>
 801d97a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 801d97e:	d0f1      	beq.n	801d964 <_vfiprintf_r+0x3a0>
 801d980:	682b      	ldr	r3, [r5, #0]
 801d982:	9a03      	ldr	r2, [sp, #12]
 801d984:	701a      	strb	r2, [r3, #0]
 801d986:	e7e8      	b.n	801d95a <_vfiprintf_r+0x396>
 801d988:	f04a 0a10 	orr.w	sl, sl, #16
 801d98c:	f01a 0320 	ands.w	r3, sl, #32
 801d990:	d01f      	beq.n	801d9d2 <_vfiprintf_r+0x40e>
 801d992:	3507      	adds	r5, #7
 801d994:	f025 0507 	bic.w	r5, r5, #7
 801d998:	46a8      	mov	r8, r5
 801d99a:	686d      	ldr	r5, [r5, #4]
 801d99c:	f858 4b08 	ldr.w	r4, [r8], #8
 801d9a0:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801d9a4:	2300      	movs	r3, #0
 801d9a6:	2200      	movs	r2, #0
 801d9a8:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 801d9ac:	9a01      	ldr	r2, [sp, #4]
 801d9ae:	3201      	adds	r2, #1
 801d9b0:	f000 825f 	beq.w	801de72 <_vfiprintf_r+0x8ae>
 801d9b4:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 801d9b8:	9204      	str	r2, [sp, #16]
 801d9ba:	ea54 0205 	orrs.w	r2, r4, r5
 801d9be:	f040 825e 	bne.w	801de7e <_vfiprintf_r+0x8ba>
 801d9c2:	9a01      	ldr	r2, [sp, #4]
 801d9c4:	2a00      	cmp	r2, #0
 801d9c6:	f000 8198 	beq.w	801dcfa <_vfiprintf_r+0x736>
 801d9ca:	2b01      	cmp	r3, #1
 801d9cc:	f040 825a 	bne.w	801de84 <_vfiprintf_r+0x8c0>
 801d9d0:	e13b      	b.n	801dc4a <_vfiprintf_r+0x686>
 801d9d2:	46a8      	mov	r8, r5
 801d9d4:	f01a 0510 	ands.w	r5, sl, #16
 801d9d8:	f858 4b04 	ldr.w	r4, [r8], #4
 801d9dc:	d001      	beq.n	801d9e2 <_vfiprintf_r+0x41e>
 801d9de:	461d      	mov	r5, r3
 801d9e0:	e7de      	b.n	801d9a0 <_vfiprintf_r+0x3dc>
 801d9e2:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 801d9e6:	d001      	beq.n	801d9ec <_vfiprintf_r+0x428>
 801d9e8:	b2a4      	uxth	r4, r4
 801d9ea:	e7d9      	b.n	801d9a0 <_vfiprintf_r+0x3dc>
 801d9ec:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801d9f0:	d0d6      	beq.n	801d9a0 <_vfiprintf_r+0x3dc>
 801d9f2:	b2e4      	uxtb	r4, r4
 801d9f4:	e7f3      	b.n	801d9de <_vfiprintf_r+0x41a>
 801d9f6:	46a8      	mov	r8, r5
 801d9f8:	f647 0330 	movw	r3, #30768	@ 0x7830
 801d9fc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801da00:	f858 4b04 	ldr.w	r4, [r8], #4
 801da04:	4b03      	ldr	r3, [pc, #12]	@ (801da14 <_vfiprintf_r+0x450>)
 801da06:	9305      	str	r3, [sp, #20]
 801da08:	2500      	movs	r5, #0
 801da0a:	f04a 0a02 	orr.w	sl, sl, #2
 801da0e:	2302      	movs	r3, #2
 801da10:	e7c9      	b.n	801d9a6 <_vfiprintf_r+0x3e2>
 801da12:	bf00      	nop
 801da14:	08021496 	.word	0x08021496
 801da18:	9b01      	ldr	r3, [sp, #4]
 801da1a:	46a8      	mov	r8, r5
 801da1c:	1c5c      	adds	r4, r3, #1
 801da1e:	f04f 0500 	mov.w	r5, #0
 801da22:	f858 9b04 	ldr.w	r9, [r8], #4
 801da26:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 801da2a:	f000 80d0 	beq.w	801dbce <_vfiprintf_r+0x60a>
 801da2e:	461a      	mov	r2, r3
 801da30:	4629      	mov	r1, r5
 801da32:	4648      	mov	r0, r9
 801da34:	f7e2 fbe4 	bl	8000200 <memchr>
 801da38:	4604      	mov	r4, r0
 801da3a:	b118      	cbz	r0, 801da44 <_vfiprintf_r+0x480>
 801da3c:	eba0 0309 	sub.w	r3, r0, r9
 801da40:	9301      	str	r3, [sp, #4]
 801da42:	462c      	mov	r4, r5
 801da44:	9b01      	ldr	r3, [sp, #4]
 801da46:	42a3      	cmp	r3, r4
 801da48:	bfb8      	it	lt
 801da4a:	4623      	movlt	r3, r4
 801da4c:	9304      	str	r3, [sp, #16]
 801da4e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801da52:	b113      	cbz	r3, 801da5a <_vfiprintf_r+0x496>
 801da54:	9b04      	ldr	r3, [sp, #16]
 801da56:	3301      	adds	r3, #1
 801da58:	9304      	str	r3, [sp, #16]
 801da5a:	f01a 0302 	ands.w	r3, sl, #2
 801da5e:	9308      	str	r3, [sp, #32]
 801da60:	bf1e      	ittt	ne
 801da62:	9b04      	ldrne	r3, [sp, #16]
 801da64:	3302      	addne	r3, #2
 801da66:	9304      	strne	r3, [sp, #16]
 801da68:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 801da6c:	930a      	str	r3, [sp, #40]	@ 0x28
 801da6e:	d11f      	bne.n	801dab0 <_vfiprintf_r+0x4ec>
 801da70:	9b02      	ldr	r3, [sp, #8]
 801da72:	9a04      	ldr	r2, [sp, #16]
 801da74:	1a9d      	subs	r5, r3, r2
 801da76:	2d00      	cmp	r5, #0
 801da78:	dd1a      	ble.n	801dab0 <_vfiprintf_r+0x4ec>
 801da7a:	4ba9      	ldr	r3, [pc, #676]	@ (801dd20 <_vfiprintf_r+0x75c>)
 801da7c:	6033      	str	r3, [r6, #0]
 801da7e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 801da82:	2d10      	cmp	r5, #16
 801da84:	f102 0201 	add.w	r2, r2, #1
 801da88:	f106 0008 	add.w	r0, r6, #8
 801da8c:	f300 814e 	bgt.w	801dd2c <_vfiprintf_r+0x768>
 801da90:	6075      	str	r5, [r6, #4]
 801da92:	2a07      	cmp	r2, #7
 801da94:	4465      	add	r5, ip
 801da96:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 801da9a:	f340 815a 	ble.w	801dd52 <_vfiprintf_r+0x78e>
 801da9e:	9800      	ldr	r0, [sp, #0]
 801daa0:	aa0e      	add	r2, sp, #56	@ 0x38
 801daa2:	4639      	mov	r1, r7
 801daa4:	f7ff fd5c 	bl	801d560 <__sprint_r>
 801daa8:	2800      	cmp	r0, #0
 801daaa:	f040 81b4 	bne.w	801de16 <_vfiprintf_r+0x852>
 801daae:	ae11      	add	r6, sp, #68	@ 0x44
 801dab0:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 801dab4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801dab8:	b161      	cbz	r1, 801dad4 <_vfiprintf_r+0x510>
 801daba:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 801dabe:	3301      	adds	r3, #1
 801dac0:	6031      	str	r1, [r6, #0]
 801dac2:	2101      	movs	r1, #1
 801dac4:	440a      	add	r2, r1
 801dac6:	2b07      	cmp	r3, #7
 801dac8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801dacc:	6071      	str	r1, [r6, #4]
 801dace:	f300 8142 	bgt.w	801dd56 <_vfiprintf_r+0x792>
 801dad2:	3608      	adds	r6, #8
 801dad4:	9908      	ldr	r1, [sp, #32]
 801dad6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801dada:	b159      	cbz	r1, 801daf4 <_vfiprintf_r+0x530>
 801dadc:	a90d      	add	r1, sp, #52	@ 0x34
 801dade:	3301      	adds	r3, #1
 801dae0:	6031      	str	r1, [r6, #0]
 801dae2:	2102      	movs	r1, #2
 801dae4:	440a      	add	r2, r1
 801dae6:	2b07      	cmp	r3, #7
 801dae8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801daec:	6071      	str	r1, [r6, #4]
 801daee:	f300 813b 	bgt.w	801dd68 <_vfiprintf_r+0x7a4>
 801daf2:	3608      	adds	r6, #8
 801daf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801daf6:	2b80      	cmp	r3, #128	@ 0x80
 801daf8:	d11f      	bne.n	801db3a <_vfiprintf_r+0x576>
 801dafa:	9b02      	ldr	r3, [sp, #8]
 801dafc:	9a04      	ldr	r2, [sp, #16]
 801dafe:	1a9d      	subs	r5, r3, r2
 801db00:	2d00      	cmp	r5, #0
 801db02:	dd1a      	ble.n	801db3a <_vfiprintf_r+0x576>
 801db04:	4b87      	ldr	r3, [pc, #540]	@ (801dd24 <_vfiprintf_r+0x760>)
 801db06:	6033      	str	r3, [r6, #0]
 801db08:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 801db0c:	2d10      	cmp	r5, #16
 801db0e:	f102 0201 	add.w	r2, r2, #1
 801db12:	f106 0008 	add.w	r0, r6, #8
 801db16:	f300 8130 	bgt.w	801dd7a <_vfiprintf_r+0x7b6>
 801db1a:	6075      	str	r5, [r6, #4]
 801db1c:	2a07      	cmp	r2, #7
 801db1e:	4465      	add	r5, ip
 801db20:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 801db24:	f340 813c 	ble.w	801dda0 <_vfiprintf_r+0x7dc>
 801db28:	9800      	ldr	r0, [sp, #0]
 801db2a:	aa0e      	add	r2, sp, #56	@ 0x38
 801db2c:	4639      	mov	r1, r7
 801db2e:	f7ff fd17 	bl	801d560 <__sprint_r>
 801db32:	2800      	cmp	r0, #0
 801db34:	f040 816f 	bne.w	801de16 <_vfiprintf_r+0x852>
 801db38:	ae11      	add	r6, sp, #68	@ 0x44
 801db3a:	9b01      	ldr	r3, [sp, #4]
 801db3c:	1ae4      	subs	r4, r4, r3
 801db3e:	2c00      	cmp	r4, #0
 801db40:	dd1a      	ble.n	801db78 <_vfiprintf_r+0x5b4>
 801db42:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801db46:	4877      	ldr	r0, [pc, #476]	@ (801dd24 <_vfiprintf_r+0x760>)
 801db48:	6030      	str	r0, [r6, #0]
 801db4a:	2c10      	cmp	r4, #16
 801db4c:	f103 0301 	add.w	r3, r3, #1
 801db50:	f106 0108 	add.w	r1, r6, #8
 801db54:	f300 8126 	bgt.w	801dda4 <_vfiprintf_r+0x7e0>
 801db58:	6074      	str	r4, [r6, #4]
 801db5a:	2b07      	cmp	r3, #7
 801db5c:	4414      	add	r4, r2
 801db5e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 801db62:	f340 8130 	ble.w	801ddc6 <_vfiprintf_r+0x802>
 801db66:	9800      	ldr	r0, [sp, #0]
 801db68:	aa0e      	add	r2, sp, #56	@ 0x38
 801db6a:	4639      	mov	r1, r7
 801db6c:	f7ff fcf8 	bl	801d560 <__sprint_r>
 801db70:	2800      	cmp	r0, #0
 801db72:	f040 8150 	bne.w	801de16 <_vfiprintf_r+0x852>
 801db76:	ae11      	add	r6, sp, #68	@ 0x44
 801db78:	9b01      	ldr	r3, [sp, #4]
 801db7a:	9a01      	ldr	r2, [sp, #4]
 801db7c:	6073      	str	r3, [r6, #4]
 801db7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801db80:	f8c6 9000 	str.w	r9, [r6]
 801db84:	4413      	add	r3, r2
 801db86:	9310      	str	r3, [sp, #64]	@ 0x40
 801db88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db8a:	3301      	adds	r3, #1
 801db8c:	2b07      	cmp	r3, #7
 801db8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801db90:	f300 811b 	bgt.w	801ddca <_vfiprintf_r+0x806>
 801db94:	f106 0308 	add.w	r3, r6, #8
 801db98:	f01a 0f04 	tst.w	sl, #4
 801db9c:	f040 811d 	bne.w	801ddda <_vfiprintf_r+0x816>
 801dba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dba4:	9904      	ldr	r1, [sp, #16]
 801dba6:	428a      	cmp	r2, r1
 801dba8:	bfac      	ite	ge
 801dbaa:	189b      	addge	r3, r3, r2
 801dbac:	185b      	addlt	r3, r3, r1
 801dbae:	9303      	str	r3, [sp, #12]
 801dbb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dbb2:	b13b      	cbz	r3, 801dbc4 <_vfiprintf_r+0x600>
 801dbb4:	9800      	ldr	r0, [sp, #0]
 801dbb6:	aa0e      	add	r2, sp, #56	@ 0x38
 801dbb8:	4639      	mov	r1, r7
 801dbba:	f7ff fcd1 	bl	801d560 <__sprint_r>
 801dbbe:	2800      	cmp	r0, #0
 801dbc0:	f040 8129 	bne.w	801de16 <_vfiprintf_r+0x852>
 801dbc4:	2300      	movs	r3, #0
 801dbc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dbc8:	4645      	mov	r5, r8
 801dbca:	ae11      	add	r6, sp, #68	@ 0x44
 801dbcc:	e55b      	b.n	801d686 <_vfiprintf_r+0xc2>
 801dbce:	4648      	mov	r0, r9
 801dbd0:	f7e2 fb08 	bl	80001e4 <strlen>
 801dbd4:	9001      	str	r0, [sp, #4]
 801dbd6:	e734      	b.n	801da42 <_vfiprintf_r+0x47e>
 801dbd8:	f04a 0a10 	orr.w	sl, sl, #16
 801dbdc:	f01a 0320 	ands.w	r3, sl, #32
 801dbe0:	d008      	beq.n	801dbf4 <_vfiprintf_r+0x630>
 801dbe2:	3507      	adds	r5, #7
 801dbe4:	f025 0507 	bic.w	r5, r5, #7
 801dbe8:	46a8      	mov	r8, r5
 801dbea:	686d      	ldr	r5, [r5, #4]
 801dbec:	f858 4b08 	ldr.w	r4, [r8], #8
 801dbf0:	2301      	movs	r3, #1
 801dbf2:	e6d8      	b.n	801d9a6 <_vfiprintf_r+0x3e2>
 801dbf4:	46a8      	mov	r8, r5
 801dbf6:	f01a 0510 	ands.w	r5, sl, #16
 801dbfa:	f858 4b04 	ldr.w	r4, [r8], #4
 801dbfe:	d001      	beq.n	801dc04 <_vfiprintf_r+0x640>
 801dc00:	461d      	mov	r5, r3
 801dc02:	e7f5      	b.n	801dbf0 <_vfiprintf_r+0x62c>
 801dc04:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 801dc08:	d001      	beq.n	801dc0e <_vfiprintf_r+0x64a>
 801dc0a:	b2a4      	uxth	r4, r4
 801dc0c:	e7f0      	b.n	801dbf0 <_vfiprintf_r+0x62c>
 801dc0e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801dc12:	d0ed      	beq.n	801dbf0 <_vfiprintf_r+0x62c>
 801dc14:	b2e4      	uxtb	r4, r4
 801dc16:	e7f3      	b.n	801dc00 <_vfiprintf_r+0x63c>
 801dc18:	4a43      	ldr	r2, [pc, #268]	@ (801dd28 <_vfiprintf_r+0x764>)
 801dc1a:	e5c9      	b.n	801d7b0 <_vfiprintf_r+0x1ec>
 801dc1c:	46a8      	mov	r8, r5
 801dc1e:	f01a 0510 	ands.w	r5, sl, #16
 801dc22:	f858 4b04 	ldr.w	r4, [r8], #4
 801dc26:	d001      	beq.n	801dc2c <_vfiprintf_r+0x668>
 801dc28:	4615      	mov	r5, r2
 801dc2a:	e5cd      	b.n	801d7c8 <_vfiprintf_r+0x204>
 801dc2c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 801dc30:	d001      	beq.n	801dc36 <_vfiprintf_r+0x672>
 801dc32:	b2a4      	uxth	r4, r4
 801dc34:	e5c8      	b.n	801d7c8 <_vfiprintf_r+0x204>
 801dc36:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801dc3a:	f43f adc5 	beq.w	801d7c8 <_vfiprintf_r+0x204>
 801dc3e:	b2e4      	uxtb	r4, r4
 801dc40:	e7f2      	b.n	801dc28 <_vfiprintf_r+0x664>
 801dc42:	2c0a      	cmp	r4, #10
 801dc44:	f175 0300 	sbcs.w	r3, r5, #0
 801dc48:	d206      	bcs.n	801dc58 <_vfiprintf_r+0x694>
 801dc4a:	3430      	adds	r4, #48	@ 0x30
 801dc4c:	b2e4      	uxtb	r4, r4
 801dc4e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 801dc52:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 801dc56:	e131      	b.n	801debc <_vfiprintf_r+0x8f8>
 801dc58:	ab3a      	add	r3, sp, #232	@ 0xe8
 801dc5a:	9308      	str	r3, [sp, #32]
 801dc5c:	9b04      	ldr	r3, [sp, #16]
 801dc5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801dc62:	f04f 0a00 	mov.w	sl, #0
 801dc66:	930a      	str	r3, [sp, #40]	@ 0x28
 801dc68:	220a      	movs	r2, #10
 801dc6a:	2300      	movs	r3, #0
 801dc6c:	4620      	mov	r0, r4
 801dc6e:	4629      	mov	r1, r5
 801dc70:	f7e3 f81a 	bl	8000ca8 <__aeabi_uldivmod>
 801dc74:	460b      	mov	r3, r1
 801dc76:	9908      	ldr	r1, [sp, #32]
 801dc78:	900b      	str	r0, [sp, #44]	@ 0x2c
 801dc7a:	3230      	adds	r2, #48	@ 0x30
 801dc7c:	f801 2c01 	strb.w	r2, [r1, #-1]
 801dc80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dc82:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 801dc86:	f10a 0a01 	add.w	sl, sl, #1
 801dc8a:	b1e2      	cbz	r2, 801dcc6 <_vfiprintf_r+0x702>
 801dc8c:	9a06      	ldr	r2, [sp, #24]
 801dc8e:	7812      	ldrb	r2, [r2, #0]
 801dc90:	4552      	cmp	r2, sl
 801dc92:	d118      	bne.n	801dcc6 <_vfiprintf_r+0x702>
 801dc94:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801dc98:	d015      	beq.n	801dcc6 <_vfiprintf_r+0x702>
 801dc9a:	2c0a      	cmp	r4, #10
 801dc9c:	f175 0200 	sbcs.w	r2, r5, #0
 801dca0:	d311      	bcc.n	801dcc6 <_vfiprintf_r+0x702>
 801dca2:	9308      	str	r3, [sp, #32]
 801dca4:	9b07      	ldr	r3, [sp, #28]
 801dca6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dca8:	eba9 0903 	sub.w	r9, r9, r3
 801dcac:	461a      	mov	r2, r3
 801dcae:	4648      	mov	r0, r9
 801dcb0:	f000 fd00 	bl	801e6b4 <strncpy>
 801dcb4:	9b06      	ldr	r3, [sp, #24]
 801dcb6:	785a      	ldrb	r2, [r3, #1]
 801dcb8:	9b08      	ldr	r3, [sp, #32]
 801dcba:	b172      	cbz	r2, 801dcda <_vfiprintf_r+0x716>
 801dcbc:	9a06      	ldr	r2, [sp, #24]
 801dcbe:	3201      	adds	r2, #1
 801dcc0:	9206      	str	r2, [sp, #24]
 801dcc2:	f04f 0a00 	mov.w	sl, #0
 801dcc6:	2c0a      	cmp	r4, #10
 801dcc8:	f175 0500 	sbcs.w	r5, r5, #0
 801dccc:	f0c0 80f6 	bcc.w	801debc <_vfiprintf_r+0x8f8>
 801dcd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dcd2:	f8cd 9020 	str.w	r9, [sp, #32]
 801dcd6:	461d      	mov	r5, r3
 801dcd8:	e7c6      	b.n	801dc68 <_vfiprintf_r+0x6a4>
 801dcda:	4692      	mov	sl, r2
 801dcdc:	e7f3      	b.n	801dcc6 <_vfiprintf_r+0x702>
 801dcde:	f004 030f 	and.w	r3, r4, #15
 801dce2:	9a05      	ldr	r2, [sp, #20]
 801dce4:	0924      	lsrs	r4, r4, #4
 801dce6:	5cd3      	ldrb	r3, [r2, r3]
 801dce8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801dcec:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801dcf0:	092d      	lsrs	r5, r5, #4
 801dcf2:	ea54 0305 	orrs.w	r3, r4, r5
 801dcf6:	d1f2      	bne.n	801dcde <_vfiprintf_r+0x71a>
 801dcf8:	e0e0      	b.n	801debc <_vfiprintf_r+0x8f8>
 801dcfa:	b923      	cbnz	r3, 801dd06 <_vfiprintf_r+0x742>
 801dcfc:	f01a 0f01 	tst.w	sl, #1
 801dd00:	d001      	beq.n	801dd06 <_vfiprintf_r+0x742>
 801dd02:	2430      	movs	r4, #48	@ 0x30
 801dd04:	e7a3      	b.n	801dc4e <_vfiprintf_r+0x68a>
 801dd06:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801dd0a:	e0d7      	b.n	801debc <_vfiprintf_r+0x8f8>
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	f000 80a3 	beq.w	801de58 <_vfiprintf_r+0x894>
 801dd12:	2400      	movs	r4, #0
 801dd14:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 801dd18:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801dd1c:	46a8      	mov	r8, r5
 801dd1e:	e5e0      	b.n	801d8e2 <_vfiprintf_r+0x31e>
 801dd20:	0802150a 	.word	0x0802150a
 801dd24:	080214fa 	.word	0x080214fa
 801dd28:	080214a7 	.word	0x080214a7
 801dd2c:	2110      	movs	r1, #16
 801dd2e:	6071      	str	r1, [r6, #4]
 801dd30:	2a07      	cmp	r2, #7
 801dd32:	4461      	add	r1, ip
 801dd34:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801dd38:	dd08      	ble.n	801dd4c <_vfiprintf_r+0x788>
 801dd3a:	9800      	ldr	r0, [sp, #0]
 801dd3c:	aa0e      	add	r2, sp, #56	@ 0x38
 801dd3e:	4639      	mov	r1, r7
 801dd40:	f7ff fc0e 	bl	801d560 <__sprint_r>
 801dd44:	2800      	cmp	r0, #0
 801dd46:	d166      	bne.n	801de16 <_vfiprintf_r+0x852>
 801dd48:	4b60      	ldr	r3, [pc, #384]	@ (801decc <_vfiprintf_r+0x908>)
 801dd4a:	a811      	add	r0, sp, #68	@ 0x44
 801dd4c:	3d10      	subs	r5, #16
 801dd4e:	4606      	mov	r6, r0
 801dd50:	e694      	b.n	801da7c <_vfiprintf_r+0x4b8>
 801dd52:	4606      	mov	r6, r0
 801dd54:	e6ac      	b.n	801dab0 <_vfiprintf_r+0x4ec>
 801dd56:	9800      	ldr	r0, [sp, #0]
 801dd58:	aa0e      	add	r2, sp, #56	@ 0x38
 801dd5a:	4639      	mov	r1, r7
 801dd5c:	f7ff fc00 	bl	801d560 <__sprint_r>
 801dd60:	2800      	cmp	r0, #0
 801dd62:	d158      	bne.n	801de16 <_vfiprintf_r+0x852>
 801dd64:	ae11      	add	r6, sp, #68	@ 0x44
 801dd66:	e6b5      	b.n	801dad4 <_vfiprintf_r+0x510>
 801dd68:	9800      	ldr	r0, [sp, #0]
 801dd6a:	aa0e      	add	r2, sp, #56	@ 0x38
 801dd6c:	4639      	mov	r1, r7
 801dd6e:	f7ff fbf7 	bl	801d560 <__sprint_r>
 801dd72:	2800      	cmp	r0, #0
 801dd74:	d14f      	bne.n	801de16 <_vfiprintf_r+0x852>
 801dd76:	ae11      	add	r6, sp, #68	@ 0x44
 801dd78:	e6bc      	b.n	801daf4 <_vfiprintf_r+0x530>
 801dd7a:	2110      	movs	r1, #16
 801dd7c:	6071      	str	r1, [r6, #4]
 801dd7e:	2a07      	cmp	r2, #7
 801dd80:	4461      	add	r1, ip
 801dd82:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801dd86:	dd08      	ble.n	801dd9a <_vfiprintf_r+0x7d6>
 801dd88:	9800      	ldr	r0, [sp, #0]
 801dd8a:	aa0e      	add	r2, sp, #56	@ 0x38
 801dd8c:	4639      	mov	r1, r7
 801dd8e:	f7ff fbe7 	bl	801d560 <__sprint_r>
 801dd92:	2800      	cmp	r0, #0
 801dd94:	d13f      	bne.n	801de16 <_vfiprintf_r+0x852>
 801dd96:	4b4e      	ldr	r3, [pc, #312]	@ (801ded0 <_vfiprintf_r+0x90c>)
 801dd98:	a811      	add	r0, sp, #68	@ 0x44
 801dd9a:	3d10      	subs	r5, #16
 801dd9c:	4606      	mov	r6, r0
 801dd9e:	e6b2      	b.n	801db06 <_vfiprintf_r+0x542>
 801dda0:	4606      	mov	r6, r0
 801dda2:	e6ca      	b.n	801db3a <_vfiprintf_r+0x576>
 801dda4:	2010      	movs	r0, #16
 801dda6:	4402      	add	r2, r0
 801dda8:	2b07      	cmp	r3, #7
 801ddaa:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801ddae:	6070      	str	r0, [r6, #4]
 801ddb0:	dd06      	ble.n	801ddc0 <_vfiprintf_r+0x7fc>
 801ddb2:	9800      	ldr	r0, [sp, #0]
 801ddb4:	aa0e      	add	r2, sp, #56	@ 0x38
 801ddb6:	4639      	mov	r1, r7
 801ddb8:	f7ff fbd2 	bl	801d560 <__sprint_r>
 801ddbc:	bb58      	cbnz	r0, 801de16 <_vfiprintf_r+0x852>
 801ddbe:	a911      	add	r1, sp, #68	@ 0x44
 801ddc0:	3c10      	subs	r4, #16
 801ddc2:	460e      	mov	r6, r1
 801ddc4:	e6bd      	b.n	801db42 <_vfiprintf_r+0x57e>
 801ddc6:	460e      	mov	r6, r1
 801ddc8:	e6d6      	b.n	801db78 <_vfiprintf_r+0x5b4>
 801ddca:	9800      	ldr	r0, [sp, #0]
 801ddcc:	aa0e      	add	r2, sp, #56	@ 0x38
 801ddce:	4639      	mov	r1, r7
 801ddd0:	f7ff fbc6 	bl	801d560 <__sprint_r>
 801ddd4:	b9f8      	cbnz	r0, 801de16 <_vfiprintf_r+0x852>
 801ddd6:	ab11      	add	r3, sp, #68	@ 0x44
 801ddd8:	e6de      	b.n	801db98 <_vfiprintf_r+0x5d4>
 801ddda:	9a02      	ldr	r2, [sp, #8]
 801dddc:	9904      	ldr	r1, [sp, #16]
 801ddde:	1a54      	subs	r4, r2, r1
 801dde0:	2c00      	cmp	r4, #0
 801dde2:	f77f aedd 	ble.w	801dba0 <_vfiprintf_r+0x5dc>
 801dde6:	4d39      	ldr	r5, [pc, #228]	@ (801decc <_vfiprintf_r+0x908>)
 801dde8:	2610      	movs	r6, #16
 801ddea:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 801ddee:	2c10      	cmp	r4, #16
 801ddf0:	f102 0201 	add.w	r2, r2, #1
 801ddf4:	601d      	str	r5, [r3, #0]
 801ddf6:	dc1d      	bgt.n	801de34 <_vfiprintf_r+0x870>
 801ddf8:	605c      	str	r4, [r3, #4]
 801ddfa:	2a07      	cmp	r2, #7
 801ddfc:	440c      	add	r4, r1
 801ddfe:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 801de02:	f77f aecd 	ble.w	801dba0 <_vfiprintf_r+0x5dc>
 801de06:	9800      	ldr	r0, [sp, #0]
 801de08:	aa0e      	add	r2, sp, #56	@ 0x38
 801de0a:	4639      	mov	r1, r7
 801de0c:	f7ff fba8 	bl	801d560 <__sprint_r>
 801de10:	2800      	cmp	r0, #0
 801de12:	f43f aec5 	beq.w	801dba0 <_vfiprintf_r+0x5dc>
 801de16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801de18:	07d9      	lsls	r1, r3, #31
 801de1a:	d405      	bmi.n	801de28 <_vfiprintf_r+0x864>
 801de1c:	89bb      	ldrh	r3, [r7, #12]
 801de1e:	059a      	lsls	r2, r3, #22
 801de20:	d402      	bmi.n	801de28 <_vfiprintf_r+0x864>
 801de22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801de24:	f7fb fd67 	bl	80198f6 <__retarget_lock_release_recursive>
 801de28:	89bb      	ldrh	r3, [r7, #12]
 801de2a:	065b      	lsls	r3, r3, #25
 801de2c:	f57f abfb 	bpl.w	801d626 <_vfiprintf_r+0x62>
 801de30:	f7ff bbf6 	b.w	801d620 <_vfiprintf_r+0x5c>
 801de34:	3110      	adds	r1, #16
 801de36:	2a07      	cmp	r2, #7
 801de38:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801de3c:	605e      	str	r6, [r3, #4]
 801de3e:	dc02      	bgt.n	801de46 <_vfiprintf_r+0x882>
 801de40:	3308      	adds	r3, #8
 801de42:	3c10      	subs	r4, #16
 801de44:	e7d1      	b.n	801ddea <_vfiprintf_r+0x826>
 801de46:	9800      	ldr	r0, [sp, #0]
 801de48:	aa0e      	add	r2, sp, #56	@ 0x38
 801de4a:	4639      	mov	r1, r7
 801de4c:	f7ff fb88 	bl	801d560 <__sprint_r>
 801de50:	2800      	cmp	r0, #0
 801de52:	d1e0      	bne.n	801de16 <_vfiprintf_r+0x852>
 801de54:	ab11      	add	r3, sp, #68	@ 0x44
 801de56:	e7f4      	b.n	801de42 <_vfiprintf_r+0x87e>
 801de58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801de5a:	b913      	cbnz	r3, 801de62 <_vfiprintf_r+0x89e>
 801de5c:	2300      	movs	r3, #0
 801de5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801de60:	e7d9      	b.n	801de16 <_vfiprintf_r+0x852>
 801de62:	9800      	ldr	r0, [sp, #0]
 801de64:	aa0e      	add	r2, sp, #56	@ 0x38
 801de66:	4639      	mov	r1, r7
 801de68:	f7ff fb7a 	bl	801d560 <__sprint_r>
 801de6c:	2800      	cmp	r0, #0
 801de6e:	d0f5      	beq.n	801de5c <_vfiprintf_r+0x898>
 801de70:	e7d1      	b.n	801de16 <_vfiprintf_r+0x852>
 801de72:	ea54 0205 	orrs.w	r2, r4, r5
 801de76:	f8cd a010 	str.w	sl, [sp, #16]
 801de7a:	f43f ada6 	beq.w	801d9ca <_vfiprintf_r+0x406>
 801de7e:	2b01      	cmp	r3, #1
 801de80:	f43f aedf 	beq.w	801dc42 <_vfiprintf_r+0x67e>
 801de84:	2b02      	cmp	r3, #2
 801de86:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801de8a:	f43f af28 	beq.w	801dcde <_vfiprintf_r+0x71a>
 801de8e:	f004 0307 	and.w	r3, r4, #7
 801de92:	08e4      	lsrs	r4, r4, #3
 801de94:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801de98:	08ed      	lsrs	r5, r5, #3
 801de9a:	3330      	adds	r3, #48	@ 0x30
 801de9c:	ea54 0105 	orrs.w	r1, r4, r5
 801dea0:	464a      	mov	r2, r9
 801dea2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801dea6:	d1f2      	bne.n	801de8e <_vfiprintf_r+0x8ca>
 801dea8:	9904      	ldr	r1, [sp, #16]
 801deaa:	07c8      	lsls	r0, r1, #31
 801deac:	d506      	bpl.n	801debc <_vfiprintf_r+0x8f8>
 801deae:	2b30      	cmp	r3, #48	@ 0x30
 801deb0:	d004      	beq.n	801debc <_vfiprintf_r+0x8f8>
 801deb2:	2330      	movs	r3, #48	@ 0x30
 801deb4:	f809 3c01 	strb.w	r3, [r9, #-1]
 801deb8:	f1a2 0902 	sub.w	r9, r2, #2
 801debc:	ab3a      	add	r3, sp, #232	@ 0xe8
 801debe:	eba3 0309 	sub.w	r3, r3, r9
 801dec2:	9c01      	ldr	r4, [sp, #4]
 801dec4:	f8dd a010 	ldr.w	sl, [sp, #16]
 801dec8:	9301      	str	r3, [sp, #4]
 801deca:	e5bb      	b.n	801da44 <_vfiprintf_r+0x480>
 801decc:	0802150a 	.word	0x0802150a
 801ded0:	080214fa 	.word	0x080214fa

0801ded4 <__sbprintf>:
 801ded4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ded6:	461f      	mov	r7, r3
 801ded8:	898b      	ldrh	r3, [r1, #12]
 801deda:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 801dede:	f023 0302 	bic.w	r3, r3, #2
 801dee2:	f8ad 300c 	strh.w	r3, [sp, #12]
 801dee6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801dee8:	9319      	str	r3, [sp, #100]	@ 0x64
 801deea:	89cb      	ldrh	r3, [r1, #14]
 801deec:	f8ad 300e 	strh.w	r3, [sp, #14]
 801def0:	69cb      	ldr	r3, [r1, #28]
 801def2:	9307      	str	r3, [sp, #28]
 801def4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 801def6:	9309      	str	r3, [sp, #36]	@ 0x24
 801def8:	ab1a      	add	r3, sp, #104	@ 0x68
 801defa:	9300      	str	r3, [sp, #0]
 801defc:	9304      	str	r3, [sp, #16]
 801defe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801df02:	4615      	mov	r5, r2
 801df04:	4606      	mov	r6, r0
 801df06:	9302      	str	r3, [sp, #8]
 801df08:	9305      	str	r3, [sp, #20]
 801df0a:	a816      	add	r0, sp, #88	@ 0x58
 801df0c:	2300      	movs	r3, #0
 801df0e:	460c      	mov	r4, r1
 801df10:	9306      	str	r3, [sp, #24]
 801df12:	f7fb fceb 	bl	80198ec <__retarget_lock_init_recursive>
 801df16:	462a      	mov	r2, r5
 801df18:	463b      	mov	r3, r7
 801df1a:	4669      	mov	r1, sp
 801df1c:	4630      	mov	r0, r6
 801df1e:	f7ff fb51 	bl	801d5c4 <_vfiprintf_r>
 801df22:	1e05      	subs	r5, r0, #0
 801df24:	db07      	blt.n	801df36 <__sbprintf+0x62>
 801df26:	4669      	mov	r1, sp
 801df28:	4630      	mov	r0, r6
 801df2a:	f000 f8f1 	bl	801e110 <_fflush_r>
 801df2e:	2800      	cmp	r0, #0
 801df30:	bf18      	it	ne
 801df32:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 801df36:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801df3a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801df3c:	065b      	lsls	r3, r3, #25
 801df3e:	bf42      	ittt	mi
 801df40:	89a3      	ldrhmi	r3, [r4, #12]
 801df42:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 801df46:	81a3      	strhmi	r3, [r4, #12]
 801df48:	f7fb fcd1 	bl	80198ee <__retarget_lock_close_recursive>
 801df4c:	4628      	mov	r0, r5
 801df4e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 801df52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801df54 <_fclose_r>:
 801df54:	b570      	push	{r4, r5, r6, lr}
 801df56:	4605      	mov	r5, r0
 801df58:	460c      	mov	r4, r1
 801df5a:	b1b1      	cbz	r1, 801df8a <_fclose_r+0x36>
 801df5c:	b118      	cbz	r0, 801df66 <_fclose_r+0x12>
 801df5e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801df60:	b90b      	cbnz	r3, 801df66 <_fclose_r+0x12>
 801df62:	f7fa fd09 	bl	8018978 <__sinit>
 801df66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801df68:	07de      	lsls	r6, r3, #31
 801df6a:	d405      	bmi.n	801df78 <_fclose_r+0x24>
 801df6c:	89a3      	ldrh	r3, [r4, #12]
 801df6e:	0598      	lsls	r0, r3, #22
 801df70:	d402      	bmi.n	801df78 <_fclose_r+0x24>
 801df72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801df74:	f7fb fcbd 	bl	80198f2 <__retarget_lock_acquire_recursive>
 801df78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df7c:	b943      	cbnz	r3, 801df90 <_fclose_r+0x3c>
 801df7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801df80:	07d9      	lsls	r1, r3, #31
 801df82:	d402      	bmi.n	801df8a <_fclose_r+0x36>
 801df84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801df86:	f7fb fcb6 	bl	80198f6 <__retarget_lock_release_recursive>
 801df8a:	2600      	movs	r6, #0
 801df8c:	4630      	mov	r0, r6
 801df8e:	bd70      	pop	{r4, r5, r6, pc}
 801df90:	4621      	mov	r1, r4
 801df92:	4628      	mov	r0, r5
 801df94:	f000 f834 	bl	801e000 <__sflush_r>
 801df98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801df9a:	4606      	mov	r6, r0
 801df9c:	b133      	cbz	r3, 801dfac <_fclose_r+0x58>
 801df9e:	69e1      	ldr	r1, [r4, #28]
 801dfa0:	4628      	mov	r0, r5
 801dfa2:	4798      	blx	r3
 801dfa4:	2800      	cmp	r0, #0
 801dfa6:	bfb8      	it	lt
 801dfa8:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 801dfac:	89a3      	ldrh	r3, [r4, #12]
 801dfae:	061a      	lsls	r2, r3, #24
 801dfb0:	d503      	bpl.n	801dfba <_fclose_r+0x66>
 801dfb2:	6921      	ldr	r1, [r4, #16]
 801dfb4:	4628      	mov	r0, r5
 801dfb6:	f7fb fd2f 	bl	8019a18 <_free_r>
 801dfba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801dfbc:	b141      	cbz	r1, 801dfd0 <_fclose_r+0x7c>
 801dfbe:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801dfc2:	4299      	cmp	r1, r3
 801dfc4:	d002      	beq.n	801dfcc <_fclose_r+0x78>
 801dfc6:	4628      	mov	r0, r5
 801dfc8:	f7fb fd26 	bl	8019a18 <_free_r>
 801dfcc:	2300      	movs	r3, #0
 801dfce:	6323      	str	r3, [r4, #48]	@ 0x30
 801dfd0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801dfd2:	b121      	cbz	r1, 801dfde <_fclose_r+0x8a>
 801dfd4:	4628      	mov	r0, r5
 801dfd6:	f7fb fd1f 	bl	8019a18 <_free_r>
 801dfda:	2300      	movs	r3, #0
 801dfdc:	6463      	str	r3, [r4, #68]	@ 0x44
 801dfde:	f7fa fcbf 	bl	8018960 <__sfp_lock_acquire>
 801dfe2:	2300      	movs	r3, #0
 801dfe4:	81a3      	strh	r3, [r4, #12]
 801dfe6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dfe8:	07db      	lsls	r3, r3, #31
 801dfea:	d402      	bmi.n	801dff2 <_fclose_r+0x9e>
 801dfec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dfee:	f7fb fc82 	bl	80198f6 <__retarget_lock_release_recursive>
 801dff2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dff4:	f7fb fc7b 	bl	80198ee <__retarget_lock_close_recursive>
 801dff8:	f7fa fcb8 	bl	801896c <__sfp_lock_release>
 801dffc:	e7c6      	b.n	801df8c <_fclose_r+0x38>
	...

0801e000 <__sflush_r>:
 801e000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e004:	4605      	mov	r5, r0
 801e006:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801e00a:	0706      	lsls	r6, r0, #28
 801e00c:	460c      	mov	r4, r1
 801e00e:	d457      	bmi.n	801e0c0 <__sflush_r+0xc0>
 801e010:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 801e014:	818b      	strh	r3, [r1, #12]
 801e016:	684b      	ldr	r3, [r1, #4]
 801e018:	2b00      	cmp	r3, #0
 801e01a:	dc02      	bgt.n	801e022 <__sflush_r+0x22>
 801e01c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801e01e:	2b00      	cmp	r3, #0
 801e020:	dd4c      	ble.n	801e0bc <__sflush_r+0xbc>
 801e022:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e024:	2e00      	cmp	r6, #0
 801e026:	d049      	beq.n	801e0bc <__sflush_r+0xbc>
 801e028:	2300      	movs	r3, #0
 801e02a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 801e02e:	682f      	ldr	r7, [r5, #0]
 801e030:	69e1      	ldr	r1, [r4, #28]
 801e032:	602b      	str	r3, [r5, #0]
 801e034:	d034      	beq.n	801e0a0 <__sflush_r+0xa0>
 801e036:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801e038:	89a3      	ldrh	r3, [r4, #12]
 801e03a:	0759      	lsls	r1, r3, #29
 801e03c:	d505      	bpl.n	801e04a <__sflush_r+0x4a>
 801e03e:	6863      	ldr	r3, [r4, #4]
 801e040:	1ad2      	subs	r2, r2, r3
 801e042:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e044:	b10b      	cbz	r3, 801e04a <__sflush_r+0x4a>
 801e046:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801e048:	1ad2      	subs	r2, r2, r3
 801e04a:	2300      	movs	r3, #0
 801e04c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e04e:	69e1      	ldr	r1, [r4, #28]
 801e050:	4628      	mov	r0, r5
 801e052:	47b0      	blx	r6
 801e054:	1c43      	adds	r3, r0, #1
 801e056:	d106      	bne.n	801e066 <__sflush_r+0x66>
 801e058:	682a      	ldr	r2, [r5, #0]
 801e05a:	2a1d      	cmp	r2, #29
 801e05c:	d848      	bhi.n	801e0f0 <__sflush_r+0xf0>
 801e05e:	4b2b      	ldr	r3, [pc, #172]	@ (801e10c <__sflush_r+0x10c>)
 801e060:	4113      	asrs	r3, r2
 801e062:	07de      	lsls	r6, r3, #31
 801e064:	d444      	bmi.n	801e0f0 <__sflush_r+0xf0>
 801e066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e06a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801e06e:	81a2      	strh	r2, [r4, #12]
 801e070:	2200      	movs	r2, #0
 801e072:	6062      	str	r2, [r4, #4]
 801e074:	04d9      	lsls	r1, r3, #19
 801e076:	6922      	ldr	r2, [r4, #16]
 801e078:	6022      	str	r2, [r4, #0]
 801e07a:	d504      	bpl.n	801e086 <__sflush_r+0x86>
 801e07c:	1c42      	adds	r2, r0, #1
 801e07e:	d101      	bne.n	801e084 <__sflush_r+0x84>
 801e080:	682b      	ldr	r3, [r5, #0]
 801e082:	b903      	cbnz	r3, 801e086 <__sflush_r+0x86>
 801e084:	6520      	str	r0, [r4, #80]	@ 0x50
 801e086:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e088:	602f      	str	r7, [r5, #0]
 801e08a:	b1b9      	cbz	r1, 801e0bc <__sflush_r+0xbc>
 801e08c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801e090:	4299      	cmp	r1, r3
 801e092:	d002      	beq.n	801e09a <__sflush_r+0x9a>
 801e094:	4628      	mov	r0, r5
 801e096:	f7fb fcbf 	bl	8019a18 <_free_r>
 801e09a:	2300      	movs	r3, #0
 801e09c:	6323      	str	r3, [r4, #48]	@ 0x30
 801e09e:	e00d      	b.n	801e0bc <__sflush_r+0xbc>
 801e0a0:	2301      	movs	r3, #1
 801e0a2:	4628      	mov	r0, r5
 801e0a4:	47b0      	blx	r6
 801e0a6:	4602      	mov	r2, r0
 801e0a8:	1c50      	adds	r0, r2, #1
 801e0aa:	d1c5      	bne.n	801e038 <__sflush_r+0x38>
 801e0ac:	682b      	ldr	r3, [r5, #0]
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	d0c2      	beq.n	801e038 <__sflush_r+0x38>
 801e0b2:	2b1d      	cmp	r3, #29
 801e0b4:	d001      	beq.n	801e0ba <__sflush_r+0xba>
 801e0b6:	2b16      	cmp	r3, #22
 801e0b8:	d11a      	bne.n	801e0f0 <__sflush_r+0xf0>
 801e0ba:	602f      	str	r7, [r5, #0]
 801e0bc:	2000      	movs	r0, #0
 801e0be:	e01e      	b.n	801e0fe <__sflush_r+0xfe>
 801e0c0:	690f      	ldr	r7, [r1, #16]
 801e0c2:	2f00      	cmp	r7, #0
 801e0c4:	d0fa      	beq.n	801e0bc <__sflush_r+0xbc>
 801e0c6:	0783      	lsls	r3, r0, #30
 801e0c8:	680e      	ldr	r6, [r1, #0]
 801e0ca:	bf08      	it	eq
 801e0cc:	694b      	ldreq	r3, [r1, #20]
 801e0ce:	600f      	str	r7, [r1, #0]
 801e0d0:	bf18      	it	ne
 801e0d2:	2300      	movne	r3, #0
 801e0d4:	eba6 0807 	sub.w	r8, r6, r7
 801e0d8:	608b      	str	r3, [r1, #8]
 801e0da:	f1b8 0f00 	cmp.w	r8, #0
 801e0de:	dded      	ble.n	801e0bc <__sflush_r+0xbc>
 801e0e0:	69e1      	ldr	r1, [r4, #28]
 801e0e2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801e0e4:	4643      	mov	r3, r8
 801e0e6:	463a      	mov	r2, r7
 801e0e8:	4628      	mov	r0, r5
 801e0ea:	47b0      	blx	r6
 801e0ec:	2800      	cmp	r0, #0
 801e0ee:	dc08      	bgt.n	801e102 <__sflush_r+0x102>
 801e0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e0f8:	81a3      	strh	r3, [r4, #12]
 801e0fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e102:	4407      	add	r7, r0
 801e104:	eba8 0800 	sub.w	r8, r8, r0
 801e108:	e7e7      	b.n	801e0da <__sflush_r+0xda>
 801e10a:	bf00      	nop
 801e10c:	dfbffffe 	.word	0xdfbffffe

0801e110 <_fflush_r>:
 801e110:	b538      	push	{r3, r4, r5, lr}
 801e112:	460c      	mov	r4, r1
 801e114:	4605      	mov	r5, r0
 801e116:	b118      	cbz	r0, 801e120 <_fflush_r+0x10>
 801e118:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e11a:	b90b      	cbnz	r3, 801e120 <_fflush_r+0x10>
 801e11c:	f7fa fc2c 	bl	8018978 <__sinit>
 801e120:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801e124:	b1b8      	cbz	r0, 801e156 <_fflush_r+0x46>
 801e126:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e128:	07db      	lsls	r3, r3, #31
 801e12a:	d404      	bmi.n	801e136 <_fflush_r+0x26>
 801e12c:	0581      	lsls	r1, r0, #22
 801e12e:	d402      	bmi.n	801e136 <_fflush_r+0x26>
 801e130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e132:	f7fb fbde 	bl	80198f2 <__retarget_lock_acquire_recursive>
 801e136:	4628      	mov	r0, r5
 801e138:	4621      	mov	r1, r4
 801e13a:	f7ff ff61 	bl	801e000 <__sflush_r>
 801e13e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e140:	07da      	lsls	r2, r3, #31
 801e142:	4605      	mov	r5, r0
 801e144:	d405      	bmi.n	801e152 <_fflush_r+0x42>
 801e146:	89a3      	ldrh	r3, [r4, #12]
 801e148:	059b      	lsls	r3, r3, #22
 801e14a:	d402      	bmi.n	801e152 <_fflush_r+0x42>
 801e14c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e14e:	f7fb fbd2 	bl	80198f6 <__retarget_lock_release_recursive>
 801e152:	4628      	mov	r0, r5
 801e154:	bd38      	pop	{r3, r4, r5, pc}
 801e156:	4605      	mov	r5, r0
 801e158:	e7fb      	b.n	801e152 <_fflush_r+0x42>
	...

0801e15c <__sfvwrite_r>:
 801e15c:	6893      	ldr	r3, [r2, #8]
 801e15e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e162:	4606      	mov	r6, r0
 801e164:	460c      	mov	r4, r1
 801e166:	4691      	mov	r9, r2
 801e168:	b91b      	cbnz	r3, 801e172 <__sfvwrite_r+0x16>
 801e16a:	2000      	movs	r0, #0
 801e16c:	b003      	add	sp, #12
 801e16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e172:	898b      	ldrh	r3, [r1, #12]
 801e174:	0718      	lsls	r0, r3, #28
 801e176:	d550      	bpl.n	801e21a <__sfvwrite_r+0xbe>
 801e178:	690b      	ldr	r3, [r1, #16]
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	d04d      	beq.n	801e21a <__sfvwrite_r+0xbe>
 801e17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e182:	f8d9 8000 	ldr.w	r8, [r9]
 801e186:	f013 0702 	ands.w	r7, r3, #2
 801e18a:	d16b      	bne.n	801e264 <__sfvwrite_r+0x108>
 801e18c:	f013 0301 	ands.w	r3, r3, #1
 801e190:	f000 809c 	beq.w	801e2cc <__sfvwrite_r+0x170>
 801e194:	4638      	mov	r0, r7
 801e196:	46ba      	mov	sl, r7
 801e198:	46bb      	mov	fp, r7
 801e19a:	f1bb 0f00 	cmp.w	fp, #0
 801e19e:	f000 8103 	beq.w	801e3a8 <__sfvwrite_r+0x24c>
 801e1a2:	b950      	cbnz	r0, 801e1ba <__sfvwrite_r+0x5e>
 801e1a4:	465a      	mov	r2, fp
 801e1a6:	210a      	movs	r1, #10
 801e1a8:	4650      	mov	r0, sl
 801e1aa:	f7e2 f829 	bl	8000200 <memchr>
 801e1ae:	2800      	cmp	r0, #0
 801e1b0:	f000 8100 	beq.w	801e3b4 <__sfvwrite_r+0x258>
 801e1b4:	3001      	adds	r0, #1
 801e1b6:	eba0 070a 	sub.w	r7, r0, sl
 801e1ba:	6820      	ldr	r0, [r4, #0]
 801e1bc:	6921      	ldr	r1, [r4, #16]
 801e1be:	68a5      	ldr	r5, [r4, #8]
 801e1c0:	6963      	ldr	r3, [r4, #20]
 801e1c2:	455f      	cmp	r7, fp
 801e1c4:	463a      	mov	r2, r7
 801e1c6:	bf28      	it	cs
 801e1c8:	465a      	movcs	r2, fp
 801e1ca:	4288      	cmp	r0, r1
 801e1cc:	f240 80f5 	bls.w	801e3ba <__sfvwrite_r+0x25e>
 801e1d0:	441d      	add	r5, r3
 801e1d2:	42aa      	cmp	r2, r5
 801e1d4:	f340 80f1 	ble.w	801e3ba <__sfvwrite_r+0x25e>
 801e1d8:	4651      	mov	r1, sl
 801e1da:	462a      	mov	r2, r5
 801e1dc:	f000 fa3e 	bl	801e65c <memmove>
 801e1e0:	6823      	ldr	r3, [r4, #0]
 801e1e2:	442b      	add	r3, r5
 801e1e4:	6023      	str	r3, [r4, #0]
 801e1e6:	4621      	mov	r1, r4
 801e1e8:	4630      	mov	r0, r6
 801e1ea:	f7ff ff91 	bl	801e110 <_fflush_r>
 801e1ee:	2800      	cmp	r0, #0
 801e1f0:	d167      	bne.n	801e2c2 <__sfvwrite_r+0x166>
 801e1f2:	1b7f      	subs	r7, r7, r5
 801e1f4:	f040 80f9 	bne.w	801e3ea <__sfvwrite_r+0x28e>
 801e1f8:	4621      	mov	r1, r4
 801e1fa:	4630      	mov	r0, r6
 801e1fc:	f7ff ff88 	bl	801e110 <_fflush_r>
 801e200:	2800      	cmp	r0, #0
 801e202:	d15e      	bne.n	801e2c2 <__sfvwrite_r+0x166>
 801e204:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801e208:	1b5b      	subs	r3, r3, r5
 801e20a:	44aa      	add	sl, r5
 801e20c:	ebab 0b05 	sub.w	fp, fp, r5
 801e210:	f8c9 3008 	str.w	r3, [r9, #8]
 801e214:	2b00      	cmp	r3, #0
 801e216:	d1c0      	bne.n	801e19a <__sfvwrite_r+0x3e>
 801e218:	e7a7      	b.n	801e16a <__sfvwrite_r+0xe>
 801e21a:	4621      	mov	r1, r4
 801e21c:	4630      	mov	r0, r6
 801e21e:	f000 f95d 	bl	801e4dc <__swsetup_r>
 801e222:	2800      	cmp	r0, #0
 801e224:	d0ab      	beq.n	801e17e <__sfvwrite_r+0x22>
 801e226:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e22a:	e79f      	b.n	801e16c <__sfvwrite_r+0x10>
 801e22c:	e9d8 a500 	ldrd	sl, r5, [r8]
 801e230:	f108 0808 	add.w	r8, r8, #8
 801e234:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801e238:	69e1      	ldr	r1, [r4, #28]
 801e23a:	2d00      	cmp	r5, #0
 801e23c:	d0f6      	beq.n	801e22c <__sfvwrite_r+0xd0>
 801e23e:	42bd      	cmp	r5, r7
 801e240:	462b      	mov	r3, r5
 801e242:	4652      	mov	r2, sl
 801e244:	bf28      	it	cs
 801e246:	463b      	movcs	r3, r7
 801e248:	4630      	mov	r0, r6
 801e24a:	47d8      	blx	fp
 801e24c:	2800      	cmp	r0, #0
 801e24e:	dd38      	ble.n	801e2c2 <__sfvwrite_r+0x166>
 801e250:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801e254:	1a1b      	subs	r3, r3, r0
 801e256:	4482      	add	sl, r0
 801e258:	1a2d      	subs	r5, r5, r0
 801e25a:	f8c9 3008 	str.w	r3, [r9, #8]
 801e25e:	2b00      	cmp	r3, #0
 801e260:	d1e8      	bne.n	801e234 <__sfvwrite_r+0xd8>
 801e262:	e782      	b.n	801e16a <__sfvwrite_r+0xe>
 801e264:	f04f 0a00 	mov.w	sl, #0
 801e268:	4f61      	ldr	r7, [pc, #388]	@ (801e3f0 <__sfvwrite_r+0x294>)
 801e26a:	4655      	mov	r5, sl
 801e26c:	e7e2      	b.n	801e234 <__sfvwrite_r+0xd8>
 801e26e:	e9d8 7a00 	ldrd	r7, sl, [r8]
 801e272:	f108 0808 	add.w	r8, r8, #8
 801e276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e27a:	6820      	ldr	r0, [r4, #0]
 801e27c:	68a2      	ldr	r2, [r4, #8]
 801e27e:	f1ba 0f00 	cmp.w	sl, #0
 801e282:	d0f4      	beq.n	801e26e <__sfvwrite_r+0x112>
 801e284:	0599      	lsls	r1, r3, #22
 801e286:	d563      	bpl.n	801e350 <__sfvwrite_r+0x1f4>
 801e288:	4552      	cmp	r2, sl
 801e28a:	d836      	bhi.n	801e2fa <__sfvwrite_r+0x19e>
 801e28c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 801e290:	d033      	beq.n	801e2fa <__sfvwrite_r+0x19e>
 801e292:	6921      	ldr	r1, [r4, #16]
 801e294:	6965      	ldr	r5, [r4, #20]
 801e296:	eba0 0b01 	sub.w	fp, r0, r1
 801e29a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e29e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e2a2:	f10b 0201 	add.w	r2, fp, #1
 801e2a6:	106d      	asrs	r5, r5, #1
 801e2a8:	4452      	add	r2, sl
 801e2aa:	4295      	cmp	r5, r2
 801e2ac:	bf38      	it	cc
 801e2ae:	4615      	movcc	r5, r2
 801e2b0:	055b      	lsls	r3, r3, #21
 801e2b2:	d53d      	bpl.n	801e330 <__sfvwrite_r+0x1d4>
 801e2b4:	4629      	mov	r1, r5
 801e2b6:	4630      	mov	r0, r6
 801e2b8:	f7fa f88c 	bl	80183d4 <_malloc_r>
 801e2bc:	b948      	cbnz	r0, 801e2d2 <__sfvwrite_r+0x176>
 801e2be:	230c      	movs	r3, #12
 801e2c0:	6033      	str	r3, [r6, #0]
 801e2c2:	89a3      	ldrh	r3, [r4, #12]
 801e2c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e2c8:	81a3      	strh	r3, [r4, #12]
 801e2ca:	e7ac      	b.n	801e226 <__sfvwrite_r+0xca>
 801e2cc:	461f      	mov	r7, r3
 801e2ce:	469a      	mov	sl, r3
 801e2d0:	e7d1      	b.n	801e276 <__sfvwrite_r+0x11a>
 801e2d2:	465a      	mov	r2, fp
 801e2d4:	6921      	ldr	r1, [r4, #16]
 801e2d6:	9001      	str	r0, [sp, #4]
 801e2d8:	f7fb fb22 	bl	8019920 <memcpy>
 801e2dc:	89a2      	ldrh	r2, [r4, #12]
 801e2de:	9b01      	ldr	r3, [sp, #4]
 801e2e0:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 801e2e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801e2e8:	81a2      	strh	r2, [r4, #12]
 801e2ea:	6123      	str	r3, [r4, #16]
 801e2ec:	6165      	str	r5, [r4, #20]
 801e2ee:	445b      	add	r3, fp
 801e2f0:	eba5 050b 	sub.w	r5, r5, fp
 801e2f4:	6023      	str	r3, [r4, #0]
 801e2f6:	4652      	mov	r2, sl
 801e2f8:	60a5      	str	r5, [r4, #8]
 801e2fa:	4552      	cmp	r2, sl
 801e2fc:	bf28      	it	cs
 801e2fe:	4652      	movcs	r2, sl
 801e300:	6820      	ldr	r0, [r4, #0]
 801e302:	9201      	str	r2, [sp, #4]
 801e304:	4639      	mov	r1, r7
 801e306:	f000 f9a9 	bl	801e65c <memmove>
 801e30a:	68a3      	ldr	r3, [r4, #8]
 801e30c:	9a01      	ldr	r2, [sp, #4]
 801e30e:	1a9b      	subs	r3, r3, r2
 801e310:	60a3      	str	r3, [r4, #8]
 801e312:	6823      	ldr	r3, [r4, #0]
 801e314:	4413      	add	r3, r2
 801e316:	4655      	mov	r5, sl
 801e318:	6023      	str	r3, [r4, #0]
 801e31a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801e31e:	1b5b      	subs	r3, r3, r5
 801e320:	442f      	add	r7, r5
 801e322:	ebaa 0a05 	sub.w	sl, sl, r5
 801e326:	f8c9 3008 	str.w	r3, [r9, #8]
 801e32a:	2b00      	cmp	r3, #0
 801e32c:	d1a3      	bne.n	801e276 <__sfvwrite_r+0x11a>
 801e32e:	e71c      	b.n	801e16a <__sfvwrite_r+0xe>
 801e330:	462a      	mov	r2, r5
 801e332:	4630      	mov	r0, r6
 801e334:	f001 fbfa 	bl	801fb2c <_realloc_r>
 801e338:	4603      	mov	r3, r0
 801e33a:	2800      	cmp	r0, #0
 801e33c:	d1d5      	bne.n	801e2ea <__sfvwrite_r+0x18e>
 801e33e:	6921      	ldr	r1, [r4, #16]
 801e340:	4630      	mov	r0, r6
 801e342:	f7fb fb69 	bl	8019a18 <_free_r>
 801e346:	89a3      	ldrh	r3, [r4, #12]
 801e348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801e34c:	81a3      	strh	r3, [r4, #12]
 801e34e:	e7b6      	b.n	801e2be <__sfvwrite_r+0x162>
 801e350:	6923      	ldr	r3, [r4, #16]
 801e352:	4283      	cmp	r3, r0
 801e354:	d302      	bcc.n	801e35c <__sfvwrite_r+0x200>
 801e356:	6961      	ldr	r1, [r4, #20]
 801e358:	4551      	cmp	r1, sl
 801e35a:	d915      	bls.n	801e388 <__sfvwrite_r+0x22c>
 801e35c:	4552      	cmp	r2, sl
 801e35e:	bf28      	it	cs
 801e360:	4652      	movcs	r2, sl
 801e362:	4639      	mov	r1, r7
 801e364:	4615      	mov	r5, r2
 801e366:	f000 f979 	bl	801e65c <memmove>
 801e36a:	68a3      	ldr	r3, [r4, #8]
 801e36c:	6822      	ldr	r2, [r4, #0]
 801e36e:	1b5b      	subs	r3, r3, r5
 801e370:	442a      	add	r2, r5
 801e372:	60a3      	str	r3, [r4, #8]
 801e374:	6022      	str	r2, [r4, #0]
 801e376:	2b00      	cmp	r3, #0
 801e378:	d1cf      	bne.n	801e31a <__sfvwrite_r+0x1be>
 801e37a:	4621      	mov	r1, r4
 801e37c:	4630      	mov	r0, r6
 801e37e:	f7ff fec7 	bl	801e110 <_fflush_r>
 801e382:	2800      	cmp	r0, #0
 801e384:	d0c9      	beq.n	801e31a <__sfvwrite_r+0x1be>
 801e386:	e79c      	b.n	801e2c2 <__sfvwrite_r+0x166>
 801e388:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e38c:	4553      	cmp	r3, sl
 801e38e:	bf28      	it	cs
 801e390:	4653      	movcs	r3, sl
 801e392:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801e394:	fb93 f3f1 	sdiv	r3, r3, r1
 801e398:	463a      	mov	r2, r7
 801e39a:	434b      	muls	r3, r1
 801e39c:	4630      	mov	r0, r6
 801e39e:	69e1      	ldr	r1, [r4, #28]
 801e3a0:	47a8      	blx	r5
 801e3a2:	1e05      	subs	r5, r0, #0
 801e3a4:	dcb9      	bgt.n	801e31a <__sfvwrite_r+0x1be>
 801e3a6:	e78c      	b.n	801e2c2 <__sfvwrite_r+0x166>
 801e3a8:	e9d8 ab00 	ldrd	sl, fp, [r8]
 801e3ac:	2000      	movs	r0, #0
 801e3ae:	f108 0808 	add.w	r8, r8, #8
 801e3b2:	e6f2      	b.n	801e19a <__sfvwrite_r+0x3e>
 801e3b4:	f10b 0701 	add.w	r7, fp, #1
 801e3b8:	e6ff      	b.n	801e1ba <__sfvwrite_r+0x5e>
 801e3ba:	4293      	cmp	r3, r2
 801e3bc:	dc08      	bgt.n	801e3d0 <__sfvwrite_r+0x274>
 801e3be:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801e3c0:	69e1      	ldr	r1, [r4, #28]
 801e3c2:	4652      	mov	r2, sl
 801e3c4:	4630      	mov	r0, r6
 801e3c6:	47a8      	blx	r5
 801e3c8:	1e05      	subs	r5, r0, #0
 801e3ca:	f73f af12 	bgt.w	801e1f2 <__sfvwrite_r+0x96>
 801e3ce:	e778      	b.n	801e2c2 <__sfvwrite_r+0x166>
 801e3d0:	4651      	mov	r1, sl
 801e3d2:	9201      	str	r2, [sp, #4]
 801e3d4:	f000 f942 	bl	801e65c <memmove>
 801e3d8:	9a01      	ldr	r2, [sp, #4]
 801e3da:	68a3      	ldr	r3, [r4, #8]
 801e3dc:	1a9b      	subs	r3, r3, r2
 801e3de:	60a3      	str	r3, [r4, #8]
 801e3e0:	6823      	ldr	r3, [r4, #0]
 801e3e2:	4413      	add	r3, r2
 801e3e4:	6023      	str	r3, [r4, #0]
 801e3e6:	4615      	mov	r5, r2
 801e3e8:	e703      	b.n	801e1f2 <__sfvwrite_r+0x96>
 801e3ea:	2001      	movs	r0, #1
 801e3ec:	e70a      	b.n	801e204 <__sfvwrite_r+0xa8>
 801e3ee:	bf00      	nop
 801e3f0:	7ffffc00 	.word	0x7ffffc00

0801e3f4 <__sccl>:
 801e3f4:	b570      	push	{r4, r5, r6, lr}
 801e3f6:	780b      	ldrb	r3, [r1, #0]
 801e3f8:	4604      	mov	r4, r0
 801e3fa:	2b5e      	cmp	r3, #94	@ 0x5e
 801e3fc:	bf0b      	itete	eq
 801e3fe:	784b      	ldrbeq	r3, [r1, #1]
 801e400:	1c4a      	addne	r2, r1, #1
 801e402:	1c8a      	addeq	r2, r1, #2
 801e404:	2100      	movne	r1, #0
 801e406:	bf08      	it	eq
 801e408:	2101      	moveq	r1, #1
 801e40a:	3801      	subs	r0, #1
 801e40c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801e410:	f800 1f01 	strb.w	r1, [r0, #1]!
 801e414:	42a8      	cmp	r0, r5
 801e416:	d1fb      	bne.n	801e410 <__sccl+0x1c>
 801e418:	b90b      	cbnz	r3, 801e41e <__sccl+0x2a>
 801e41a:	1e50      	subs	r0, r2, #1
 801e41c:	bd70      	pop	{r4, r5, r6, pc}
 801e41e:	f081 0101 	eor.w	r1, r1, #1
 801e422:	54e1      	strb	r1, [r4, r3]
 801e424:	4610      	mov	r0, r2
 801e426:	4602      	mov	r2, r0
 801e428:	f812 5b01 	ldrb.w	r5, [r2], #1
 801e42c:	2d2d      	cmp	r5, #45	@ 0x2d
 801e42e:	d005      	beq.n	801e43c <__sccl+0x48>
 801e430:	2d5d      	cmp	r5, #93	@ 0x5d
 801e432:	d016      	beq.n	801e462 <__sccl+0x6e>
 801e434:	2d00      	cmp	r5, #0
 801e436:	d0f1      	beq.n	801e41c <__sccl+0x28>
 801e438:	462b      	mov	r3, r5
 801e43a:	e7f2      	b.n	801e422 <__sccl+0x2e>
 801e43c:	7846      	ldrb	r6, [r0, #1]
 801e43e:	2e5d      	cmp	r6, #93	@ 0x5d
 801e440:	d0fa      	beq.n	801e438 <__sccl+0x44>
 801e442:	42b3      	cmp	r3, r6
 801e444:	dcf8      	bgt.n	801e438 <__sccl+0x44>
 801e446:	3002      	adds	r0, #2
 801e448:	461a      	mov	r2, r3
 801e44a:	3201      	adds	r2, #1
 801e44c:	4296      	cmp	r6, r2
 801e44e:	54a1      	strb	r1, [r4, r2]
 801e450:	dcfb      	bgt.n	801e44a <__sccl+0x56>
 801e452:	1af2      	subs	r2, r6, r3
 801e454:	3a01      	subs	r2, #1
 801e456:	1c5d      	adds	r5, r3, #1
 801e458:	42b3      	cmp	r3, r6
 801e45a:	bfa8      	it	ge
 801e45c:	2200      	movge	r2, #0
 801e45e:	18ab      	adds	r3, r5, r2
 801e460:	e7e1      	b.n	801e426 <__sccl+0x32>
 801e462:	4610      	mov	r0, r2
 801e464:	e7da      	b.n	801e41c <__sccl+0x28>

0801e466 <__submore>:
 801e466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e46a:	460c      	mov	r4, r1
 801e46c:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801e46e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801e472:	4299      	cmp	r1, r3
 801e474:	d11d      	bne.n	801e4b2 <__submore+0x4c>
 801e476:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801e47a:	f7f9 ffab 	bl	80183d4 <_malloc_r>
 801e47e:	b918      	cbnz	r0, 801e488 <__submore+0x22>
 801e480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e488:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e48c:	6363      	str	r3, [r4, #52]	@ 0x34
 801e48e:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 801e492:	6320      	str	r0, [r4, #48]	@ 0x30
 801e494:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801e498:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 801e49c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801e4a0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801e4a4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801e4a8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801e4ac:	6020      	str	r0, [r4, #0]
 801e4ae:	2000      	movs	r0, #0
 801e4b0:	e7e8      	b.n	801e484 <__submore+0x1e>
 801e4b2:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801e4b4:	0077      	lsls	r7, r6, #1
 801e4b6:	463a      	mov	r2, r7
 801e4b8:	f001 fb38 	bl	801fb2c <_realloc_r>
 801e4bc:	4605      	mov	r5, r0
 801e4be:	2800      	cmp	r0, #0
 801e4c0:	d0de      	beq.n	801e480 <__submore+0x1a>
 801e4c2:	eb00 0806 	add.w	r8, r0, r6
 801e4c6:	4601      	mov	r1, r0
 801e4c8:	4632      	mov	r2, r6
 801e4ca:	4640      	mov	r0, r8
 801e4cc:	f7fb fa28 	bl	8019920 <memcpy>
 801e4d0:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 801e4d4:	f8c4 8000 	str.w	r8, [r4]
 801e4d8:	e7e9      	b.n	801e4ae <__submore+0x48>
	...

0801e4dc <__swsetup_r>:
 801e4dc:	b538      	push	{r3, r4, r5, lr}
 801e4de:	4b29      	ldr	r3, [pc, #164]	@ (801e584 <__swsetup_r+0xa8>)
 801e4e0:	4605      	mov	r5, r0
 801e4e2:	6818      	ldr	r0, [r3, #0]
 801e4e4:	460c      	mov	r4, r1
 801e4e6:	b118      	cbz	r0, 801e4f0 <__swsetup_r+0x14>
 801e4e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e4ea:	b90b      	cbnz	r3, 801e4f0 <__swsetup_r+0x14>
 801e4ec:	f7fa fa44 	bl	8018978 <__sinit>
 801e4f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e4f4:	0719      	lsls	r1, r3, #28
 801e4f6:	d422      	bmi.n	801e53e <__swsetup_r+0x62>
 801e4f8:	06da      	lsls	r2, r3, #27
 801e4fa:	d407      	bmi.n	801e50c <__swsetup_r+0x30>
 801e4fc:	2209      	movs	r2, #9
 801e4fe:	602a      	str	r2, [r5, #0]
 801e500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e504:	81a3      	strh	r3, [r4, #12]
 801e506:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e50a:	e033      	b.n	801e574 <__swsetup_r+0x98>
 801e50c:	0758      	lsls	r0, r3, #29
 801e50e:	d512      	bpl.n	801e536 <__swsetup_r+0x5a>
 801e510:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e512:	b141      	cbz	r1, 801e526 <__swsetup_r+0x4a>
 801e514:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801e518:	4299      	cmp	r1, r3
 801e51a:	d002      	beq.n	801e522 <__swsetup_r+0x46>
 801e51c:	4628      	mov	r0, r5
 801e51e:	f7fb fa7b 	bl	8019a18 <_free_r>
 801e522:	2300      	movs	r3, #0
 801e524:	6323      	str	r3, [r4, #48]	@ 0x30
 801e526:	89a3      	ldrh	r3, [r4, #12]
 801e528:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e52c:	81a3      	strh	r3, [r4, #12]
 801e52e:	2300      	movs	r3, #0
 801e530:	6063      	str	r3, [r4, #4]
 801e532:	6923      	ldr	r3, [r4, #16]
 801e534:	6023      	str	r3, [r4, #0]
 801e536:	89a3      	ldrh	r3, [r4, #12]
 801e538:	f043 0308 	orr.w	r3, r3, #8
 801e53c:	81a3      	strh	r3, [r4, #12]
 801e53e:	6923      	ldr	r3, [r4, #16]
 801e540:	b94b      	cbnz	r3, 801e556 <__swsetup_r+0x7a>
 801e542:	89a3      	ldrh	r3, [r4, #12]
 801e544:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e54c:	d003      	beq.n	801e556 <__swsetup_r+0x7a>
 801e54e:	4621      	mov	r1, r4
 801e550:	4628      	mov	r0, r5
 801e552:	f001 ff28 	bl	80203a6 <__smakebuf_r>
 801e556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e55a:	f013 0201 	ands.w	r2, r3, #1
 801e55e:	d00a      	beq.n	801e576 <__swsetup_r+0x9a>
 801e560:	2200      	movs	r2, #0
 801e562:	60a2      	str	r2, [r4, #8]
 801e564:	6962      	ldr	r2, [r4, #20]
 801e566:	4252      	negs	r2, r2
 801e568:	61a2      	str	r2, [r4, #24]
 801e56a:	6922      	ldr	r2, [r4, #16]
 801e56c:	b942      	cbnz	r2, 801e580 <__swsetup_r+0xa4>
 801e56e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e572:	d1c5      	bne.n	801e500 <__swsetup_r+0x24>
 801e574:	bd38      	pop	{r3, r4, r5, pc}
 801e576:	0799      	lsls	r1, r3, #30
 801e578:	bf58      	it	pl
 801e57a:	6962      	ldrpl	r2, [r4, #20]
 801e57c:	60a2      	str	r2, [r4, #8]
 801e57e:	e7f4      	b.n	801e56a <__swsetup_r+0x8e>
 801e580:	2000      	movs	r0, #0
 801e582:	e7f7      	b.n	801e574 <__swsetup_r+0x98>
 801e584:	20000824 	.word	0x20000824

0801e588 <__fputwc>:
 801e588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e58c:	4680      	mov	r8, r0
 801e58e:	460f      	mov	r7, r1
 801e590:	4614      	mov	r4, r2
 801e592:	f000 f8a7 	bl	801e6e4 <__locale_mb_cur_max>
 801e596:	2801      	cmp	r0, #1
 801e598:	4605      	mov	r5, r0
 801e59a:	d11b      	bne.n	801e5d4 <__fputwc+0x4c>
 801e59c:	1e7b      	subs	r3, r7, #1
 801e59e:	2bfe      	cmp	r3, #254	@ 0xfe
 801e5a0:	d818      	bhi.n	801e5d4 <__fputwc+0x4c>
 801e5a2:	f88d 7004 	strb.w	r7, [sp, #4]
 801e5a6:	2600      	movs	r6, #0
 801e5a8:	f10d 0904 	add.w	r9, sp, #4
 801e5ac:	42ae      	cmp	r6, r5
 801e5ae:	d021      	beq.n	801e5f4 <__fputwc+0x6c>
 801e5b0:	68a3      	ldr	r3, [r4, #8]
 801e5b2:	f816 1009 	ldrb.w	r1, [r6, r9]
 801e5b6:	3b01      	subs	r3, #1
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	60a3      	str	r3, [r4, #8]
 801e5bc:	da04      	bge.n	801e5c8 <__fputwc+0x40>
 801e5be:	69a2      	ldr	r2, [r4, #24]
 801e5c0:	4293      	cmp	r3, r2
 801e5c2:	db1b      	blt.n	801e5fc <__fputwc+0x74>
 801e5c4:	290a      	cmp	r1, #10
 801e5c6:	d019      	beq.n	801e5fc <__fputwc+0x74>
 801e5c8:	6823      	ldr	r3, [r4, #0]
 801e5ca:	1c5a      	adds	r2, r3, #1
 801e5cc:	6022      	str	r2, [r4, #0]
 801e5ce:	7019      	strb	r1, [r3, #0]
 801e5d0:	3601      	adds	r6, #1
 801e5d2:	e7eb      	b.n	801e5ac <__fputwc+0x24>
 801e5d4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 801e5d8:	463a      	mov	r2, r7
 801e5da:	a901      	add	r1, sp, #4
 801e5dc:	4640      	mov	r0, r8
 801e5de:	f001 fe19 	bl	8020214 <_wcrtomb_r>
 801e5e2:	1c43      	adds	r3, r0, #1
 801e5e4:	4605      	mov	r5, r0
 801e5e6:	d1de      	bne.n	801e5a6 <__fputwc+0x1e>
 801e5e8:	89a3      	ldrh	r3, [r4, #12]
 801e5ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e5ee:	81a3      	strh	r3, [r4, #12]
 801e5f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801e5f4:	4638      	mov	r0, r7
 801e5f6:	b003      	add	sp, #12
 801e5f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e5fc:	4622      	mov	r2, r4
 801e5fe:	4640      	mov	r0, r8
 801e600:	f001 ff0d 	bl	802041e <__swbuf_r>
 801e604:	3001      	adds	r0, #1
 801e606:	d1e3      	bne.n	801e5d0 <__fputwc+0x48>
 801e608:	e7f2      	b.n	801e5f0 <__fputwc+0x68>

0801e60a <_fputwc_r>:
 801e60a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 801e60c:	07db      	lsls	r3, r3, #31
 801e60e:	b570      	push	{r4, r5, r6, lr}
 801e610:	4605      	mov	r5, r0
 801e612:	460e      	mov	r6, r1
 801e614:	4614      	mov	r4, r2
 801e616:	d405      	bmi.n	801e624 <_fputwc_r+0x1a>
 801e618:	8993      	ldrh	r3, [r2, #12]
 801e61a:	0598      	lsls	r0, r3, #22
 801e61c:	d402      	bmi.n	801e624 <_fputwc_r+0x1a>
 801e61e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 801e620:	f7fb f967 	bl	80198f2 <__retarget_lock_acquire_recursive>
 801e624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e628:	0499      	lsls	r1, r3, #18
 801e62a:	d406      	bmi.n	801e63a <_fputwc_r+0x30>
 801e62c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801e630:	81a3      	strh	r3, [r4, #12]
 801e632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e634:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801e638:	6663      	str	r3, [r4, #100]	@ 0x64
 801e63a:	4622      	mov	r2, r4
 801e63c:	4628      	mov	r0, r5
 801e63e:	4631      	mov	r1, r6
 801e640:	f7ff ffa2 	bl	801e588 <__fputwc>
 801e644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e646:	07da      	lsls	r2, r3, #31
 801e648:	4605      	mov	r5, r0
 801e64a:	d405      	bmi.n	801e658 <_fputwc_r+0x4e>
 801e64c:	89a3      	ldrh	r3, [r4, #12]
 801e64e:	059b      	lsls	r3, r3, #22
 801e650:	d402      	bmi.n	801e658 <_fputwc_r+0x4e>
 801e652:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e654:	f7fb f94f 	bl	80198f6 <__retarget_lock_release_recursive>
 801e658:	4628      	mov	r0, r5
 801e65a:	bd70      	pop	{r4, r5, r6, pc}

0801e65c <memmove>:
 801e65c:	4288      	cmp	r0, r1
 801e65e:	b510      	push	{r4, lr}
 801e660:	eb01 0402 	add.w	r4, r1, r2
 801e664:	d902      	bls.n	801e66c <memmove+0x10>
 801e666:	4284      	cmp	r4, r0
 801e668:	4623      	mov	r3, r4
 801e66a:	d807      	bhi.n	801e67c <memmove+0x20>
 801e66c:	1e43      	subs	r3, r0, #1
 801e66e:	42a1      	cmp	r1, r4
 801e670:	d008      	beq.n	801e684 <memmove+0x28>
 801e672:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e676:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e67a:	e7f8      	b.n	801e66e <memmove+0x12>
 801e67c:	4402      	add	r2, r0
 801e67e:	4601      	mov	r1, r0
 801e680:	428a      	cmp	r2, r1
 801e682:	d100      	bne.n	801e686 <memmove+0x2a>
 801e684:	bd10      	pop	{r4, pc}
 801e686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e68a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e68e:	e7f7      	b.n	801e680 <memmove+0x24>

0801e690 <strncmp>:
 801e690:	b510      	push	{r4, lr}
 801e692:	b16a      	cbz	r2, 801e6b0 <strncmp+0x20>
 801e694:	3901      	subs	r1, #1
 801e696:	1884      	adds	r4, r0, r2
 801e698:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e69c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e6a0:	429a      	cmp	r2, r3
 801e6a2:	d103      	bne.n	801e6ac <strncmp+0x1c>
 801e6a4:	42a0      	cmp	r0, r4
 801e6a6:	d001      	beq.n	801e6ac <strncmp+0x1c>
 801e6a8:	2a00      	cmp	r2, #0
 801e6aa:	d1f5      	bne.n	801e698 <strncmp+0x8>
 801e6ac:	1ad0      	subs	r0, r2, r3
 801e6ae:	bd10      	pop	{r4, pc}
 801e6b0:	4610      	mov	r0, r2
 801e6b2:	e7fc      	b.n	801e6ae <strncmp+0x1e>

0801e6b4 <strncpy>:
 801e6b4:	b510      	push	{r4, lr}
 801e6b6:	3901      	subs	r1, #1
 801e6b8:	4603      	mov	r3, r0
 801e6ba:	b132      	cbz	r2, 801e6ca <strncpy+0x16>
 801e6bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e6c0:	f803 4b01 	strb.w	r4, [r3], #1
 801e6c4:	3a01      	subs	r2, #1
 801e6c6:	2c00      	cmp	r4, #0
 801e6c8:	d1f7      	bne.n	801e6ba <strncpy+0x6>
 801e6ca:	441a      	add	r2, r3
 801e6cc:	2100      	movs	r1, #0
 801e6ce:	4293      	cmp	r3, r2
 801e6d0:	d100      	bne.n	801e6d4 <strncpy+0x20>
 801e6d2:	bd10      	pop	{r4, pc}
 801e6d4:	f803 1b01 	strb.w	r1, [r3], #1
 801e6d8:	e7f9      	b.n	801e6ce <strncpy+0x1a>
	...

0801e6dc <__gettzinfo>:
 801e6dc:	4800      	ldr	r0, [pc, #0]	@ (801e6e0 <__gettzinfo+0x4>)
 801e6de:	4770      	bx	lr
 801e6e0:	20000950 	.word	0x20000950

0801e6e4 <__locale_mb_cur_max>:
 801e6e4:	4b01      	ldr	r3, [pc, #4]	@ (801e6ec <__locale_mb_cur_max+0x8>)
 801e6e6:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 801e6ea:	4770      	bx	lr
 801e6ec:	200009a8 	.word	0x200009a8

0801e6f0 <_localeconv_r>:
 801e6f0:	4800      	ldr	r0, [pc, #0]	@ (801e6f4 <_localeconv_r+0x4>)
 801e6f2:	4770      	bx	lr
 801e6f4:	20000a98 	.word	0x20000a98

0801e6f8 <__libc_fini_array>:
 801e6f8:	b538      	push	{r3, r4, r5, lr}
 801e6fa:	4d07      	ldr	r5, [pc, #28]	@ (801e718 <__libc_fini_array+0x20>)
 801e6fc:	4c07      	ldr	r4, [pc, #28]	@ (801e71c <__libc_fini_array+0x24>)
 801e6fe:	1b64      	subs	r4, r4, r5
 801e700:	10a4      	asrs	r4, r4, #2
 801e702:	b91c      	cbnz	r4, 801e70c <__libc_fini_array+0x14>
 801e704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e708:	f002 b930 	b.w	802096c <_fini>
 801e70c:	3c01      	subs	r4, #1
 801e70e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801e712:	4798      	blx	r3
 801e714:	e7f5      	b.n	801e702 <__libc_fini_array+0xa>
 801e716:	bf00      	nop
 801e718:	080217b8 	.word	0x080217b8
 801e71c:	080217bc 	.word	0x080217bc

0801e720 <frexp>:
 801e720:	b570      	push	{r4, r5, r6, lr}
 801e722:	2100      	movs	r1, #0
 801e724:	ec55 4b10 	vmov	r4, r5, d0
 801e728:	6001      	str	r1, [r0, #0]
 801e72a:	4915      	ldr	r1, [pc, #84]	@ (801e780 <frexp+0x60>)
 801e72c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e730:	428a      	cmp	r2, r1
 801e732:	4606      	mov	r6, r0
 801e734:	462b      	mov	r3, r5
 801e736:	d820      	bhi.n	801e77a <frexp+0x5a>
 801e738:	4621      	mov	r1, r4
 801e73a:	4311      	orrs	r1, r2
 801e73c:	d01d      	beq.n	801e77a <frexp+0x5a>
 801e73e:	4911      	ldr	r1, [pc, #68]	@ (801e784 <frexp+0x64>)
 801e740:	4029      	ands	r1, r5
 801e742:	b961      	cbnz	r1, 801e75e <frexp+0x3e>
 801e744:	4b10      	ldr	r3, [pc, #64]	@ (801e788 <frexp+0x68>)
 801e746:	2200      	movs	r2, #0
 801e748:	4620      	mov	r0, r4
 801e74a:	4629      	mov	r1, r5
 801e74c:	f7e1 ff64 	bl	8000618 <__aeabi_dmul>
 801e750:	460b      	mov	r3, r1
 801e752:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801e756:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 801e75a:	4604      	mov	r4, r0
 801e75c:	6031      	str	r1, [r6, #0]
 801e75e:	6831      	ldr	r1, [r6, #0]
 801e760:	1512      	asrs	r2, r2, #20
 801e762:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801e766:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 801e76a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801e76e:	4411      	add	r1, r2
 801e770:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801e774:	6031      	str	r1, [r6, #0]
 801e776:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801e77a:	ec45 4b10 	vmov	d0, r4, r5
 801e77e:	bd70      	pop	{r4, r5, r6, pc}
 801e780:	7fefffff 	.word	0x7fefffff
 801e784:	7ff00000 	.word	0x7ff00000
 801e788:	43500000 	.word	0x43500000

0801e78c <__register_exitproc>:
 801e78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e790:	f8df a074 	ldr.w	sl, [pc, #116]	@ 801e808 <__register_exitproc+0x7c>
 801e794:	4606      	mov	r6, r0
 801e796:	f8da 0000 	ldr.w	r0, [sl]
 801e79a:	4698      	mov	r8, r3
 801e79c:	460f      	mov	r7, r1
 801e79e:	4691      	mov	r9, r2
 801e7a0:	f7fb f8a7 	bl	80198f2 <__retarget_lock_acquire_recursive>
 801e7a4:	4b16      	ldr	r3, [pc, #88]	@ (801e800 <__register_exitproc+0x74>)
 801e7a6:	681c      	ldr	r4, [r3, #0]
 801e7a8:	b90c      	cbnz	r4, 801e7ae <__register_exitproc+0x22>
 801e7aa:	4c16      	ldr	r4, [pc, #88]	@ (801e804 <__register_exitproc+0x78>)
 801e7ac:	601c      	str	r4, [r3, #0]
 801e7ae:	6865      	ldr	r5, [r4, #4]
 801e7b0:	f8da 0000 	ldr.w	r0, [sl]
 801e7b4:	2d1f      	cmp	r5, #31
 801e7b6:	dd05      	ble.n	801e7c4 <__register_exitproc+0x38>
 801e7b8:	f7fb f89d 	bl	80198f6 <__retarget_lock_release_recursive>
 801e7bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7c4:	b19e      	cbz	r6, 801e7ee <__register_exitproc+0x62>
 801e7c6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801e7ca:	2201      	movs	r2, #1
 801e7cc:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 801e7d0:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 801e7d4:	40aa      	lsls	r2, r5
 801e7d6:	4313      	orrs	r3, r2
 801e7d8:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 801e7dc:	2e02      	cmp	r6, #2
 801e7de:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 801e7e2:	bf02      	ittt	eq
 801e7e4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 801e7e8:	4313      	orreq	r3, r2
 801e7ea:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 801e7ee:	1c6b      	adds	r3, r5, #1
 801e7f0:	3502      	adds	r5, #2
 801e7f2:	6063      	str	r3, [r4, #4]
 801e7f4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801e7f8:	f7fb f87d 	bl	80198f6 <__retarget_lock_release_recursive>
 801e7fc:	2000      	movs	r0, #0
 801e7fe:	e7df      	b.n	801e7c0 <__register_exitproc+0x34>
 801e800:	200021c8 	.word	0x200021c8
 801e804:	200021cc 	.word	0x200021cc
 801e808:	20000948 	.word	0x20000948

0801e80c <quorem>:
 801e80c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e810:	6903      	ldr	r3, [r0, #16]
 801e812:	690c      	ldr	r4, [r1, #16]
 801e814:	42a3      	cmp	r3, r4
 801e816:	4607      	mov	r7, r0
 801e818:	db7e      	blt.n	801e918 <quorem+0x10c>
 801e81a:	3c01      	subs	r4, #1
 801e81c:	f101 0814 	add.w	r8, r1, #20
 801e820:	00a3      	lsls	r3, r4, #2
 801e822:	f100 0514 	add.w	r5, r0, #20
 801e826:	9300      	str	r3, [sp, #0]
 801e828:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e82c:	9301      	str	r3, [sp, #4]
 801e82e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e832:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e836:	3301      	adds	r3, #1
 801e838:	429a      	cmp	r2, r3
 801e83a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e83e:	fbb2 f6f3 	udiv	r6, r2, r3
 801e842:	d32e      	bcc.n	801e8a2 <quorem+0x96>
 801e844:	f04f 0a00 	mov.w	sl, #0
 801e848:	46c4      	mov	ip, r8
 801e84a:	46ae      	mov	lr, r5
 801e84c:	46d3      	mov	fp, sl
 801e84e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e852:	b298      	uxth	r0, r3
 801e854:	fb06 a000 	mla	r0, r6, r0, sl
 801e858:	0c02      	lsrs	r2, r0, #16
 801e85a:	0c1b      	lsrs	r3, r3, #16
 801e85c:	fb06 2303 	mla	r3, r6, r3, r2
 801e860:	f8de 2000 	ldr.w	r2, [lr]
 801e864:	b280      	uxth	r0, r0
 801e866:	b292      	uxth	r2, r2
 801e868:	1a12      	subs	r2, r2, r0
 801e86a:	445a      	add	r2, fp
 801e86c:	f8de 0000 	ldr.w	r0, [lr]
 801e870:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e874:	b29b      	uxth	r3, r3
 801e876:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801e87a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801e87e:	b292      	uxth	r2, r2
 801e880:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801e884:	45e1      	cmp	r9, ip
 801e886:	f84e 2b04 	str.w	r2, [lr], #4
 801e88a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801e88e:	d2de      	bcs.n	801e84e <quorem+0x42>
 801e890:	9b00      	ldr	r3, [sp, #0]
 801e892:	58eb      	ldr	r3, [r5, r3]
 801e894:	b92b      	cbnz	r3, 801e8a2 <quorem+0x96>
 801e896:	9b01      	ldr	r3, [sp, #4]
 801e898:	3b04      	subs	r3, #4
 801e89a:	429d      	cmp	r5, r3
 801e89c:	461a      	mov	r2, r3
 801e89e:	d32f      	bcc.n	801e900 <quorem+0xf4>
 801e8a0:	613c      	str	r4, [r7, #16]
 801e8a2:	4638      	mov	r0, r7
 801e8a4:	f001 f832 	bl	801f90c <__mcmp>
 801e8a8:	2800      	cmp	r0, #0
 801e8aa:	db25      	blt.n	801e8f8 <quorem+0xec>
 801e8ac:	4629      	mov	r1, r5
 801e8ae:	2000      	movs	r0, #0
 801e8b0:	f858 2b04 	ldr.w	r2, [r8], #4
 801e8b4:	f8d1 c000 	ldr.w	ip, [r1]
 801e8b8:	fa1f fe82 	uxth.w	lr, r2
 801e8bc:	fa1f f38c 	uxth.w	r3, ip
 801e8c0:	eba3 030e 	sub.w	r3, r3, lr
 801e8c4:	4403      	add	r3, r0
 801e8c6:	0c12      	lsrs	r2, r2, #16
 801e8c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801e8cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801e8d0:	b29b      	uxth	r3, r3
 801e8d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e8d6:	45c1      	cmp	r9, r8
 801e8d8:	f841 3b04 	str.w	r3, [r1], #4
 801e8dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e8e0:	d2e6      	bcs.n	801e8b0 <quorem+0xa4>
 801e8e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e8e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e8ea:	b922      	cbnz	r2, 801e8f6 <quorem+0xea>
 801e8ec:	3b04      	subs	r3, #4
 801e8ee:	429d      	cmp	r5, r3
 801e8f0:	461a      	mov	r2, r3
 801e8f2:	d30b      	bcc.n	801e90c <quorem+0x100>
 801e8f4:	613c      	str	r4, [r7, #16]
 801e8f6:	3601      	adds	r6, #1
 801e8f8:	4630      	mov	r0, r6
 801e8fa:	b003      	add	sp, #12
 801e8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e900:	6812      	ldr	r2, [r2, #0]
 801e902:	3b04      	subs	r3, #4
 801e904:	2a00      	cmp	r2, #0
 801e906:	d1cb      	bne.n	801e8a0 <quorem+0x94>
 801e908:	3c01      	subs	r4, #1
 801e90a:	e7c6      	b.n	801e89a <quorem+0x8e>
 801e90c:	6812      	ldr	r2, [r2, #0]
 801e90e:	3b04      	subs	r3, #4
 801e910:	2a00      	cmp	r2, #0
 801e912:	d1ef      	bne.n	801e8f4 <quorem+0xe8>
 801e914:	3c01      	subs	r4, #1
 801e916:	e7ea      	b.n	801e8ee <quorem+0xe2>
 801e918:	2000      	movs	r0, #0
 801e91a:	e7ee      	b.n	801e8fa <quorem+0xee>
 801e91c:	0000      	movs	r0, r0
	...

0801e920 <_dtoa_r>:
 801e920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e924:	b099      	sub	sp, #100	@ 0x64
 801e926:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e92a:	9109      	str	r1, [sp, #36]	@ 0x24
 801e92c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801e92e:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801e930:	920e      	str	r2, [sp, #56]	@ 0x38
 801e932:	ec55 4b10 	vmov	r4, r5, d0
 801e936:	4683      	mov	fp, r0
 801e938:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e93a:	b149      	cbz	r1, 801e950 <_dtoa_r+0x30>
 801e93c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e93e:	604a      	str	r2, [r1, #4]
 801e940:	2301      	movs	r3, #1
 801e942:	4093      	lsls	r3, r2
 801e944:	608b      	str	r3, [r1, #8]
 801e946:	f000 fdda 	bl	801f4fe <_Bfree>
 801e94a:	2300      	movs	r3, #0
 801e94c:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 801e950:	1e2b      	subs	r3, r5, #0
 801e952:	bfb9      	ittee	lt
 801e954:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801e958:	9303      	strlt	r3, [sp, #12]
 801e95a:	2300      	movge	r3, #0
 801e95c:	6033      	strge	r3, [r6, #0]
 801e95e:	9f03      	ldr	r7, [sp, #12]
 801e960:	4b97      	ldr	r3, [pc, #604]	@ (801ebc0 <_dtoa_r+0x2a0>)
 801e962:	bfbc      	itt	lt
 801e964:	2201      	movlt	r2, #1
 801e966:	6032      	strlt	r2, [r6, #0]
 801e968:	43bb      	bics	r3, r7
 801e96a:	d114      	bne.n	801e996 <_dtoa_r+0x76>
 801e96c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e96e:	f242 730f 	movw	r3, #9999	@ 0x270f
 801e972:	6013      	str	r3, [r2, #0]
 801e974:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e978:	4323      	orrs	r3, r4
 801e97a:	f000 854c 	beq.w	801f416 <_dtoa_r+0xaf6>
 801e97e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e980:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801ebd8 <_dtoa_r+0x2b8>
 801e984:	b11b      	cbz	r3, 801e98e <_dtoa_r+0x6e>
 801e986:	f10a 0303 	add.w	r3, sl, #3
 801e98a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e98c:	6013      	str	r3, [r2, #0]
 801e98e:	4650      	mov	r0, sl
 801e990:	b019      	add	sp, #100	@ 0x64
 801e992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e996:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e99a:	2200      	movs	r2, #0
 801e99c:	ec51 0b17 	vmov	r0, r1, d7
 801e9a0:	2300      	movs	r3, #0
 801e9a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801e9a6:	f7e2 f89f 	bl	8000ae8 <__aeabi_dcmpeq>
 801e9aa:	4680      	mov	r8, r0
 801e9ac:	b150      	cbz	r0, 801e9c4 <_dtoa_r+0xa4>
 801e9ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e9b0:	2301      	movs	r3, #1
 801e9b2:	6013      	str	r3, [r2, #0]
 801e9b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e9b6:	b113      	cbz	r3, 801e9be <_dtoa_r+0x9e>
 801e9b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e9ba:	4b82      	ldr	r3, [pc, #520]	@ (801ebc4 <_dtoa_r+0x2a4>)
 801e9bc:	6013      	str	r3, [r2, #0]
 801e9be:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801ebdc <_dtoa_r+0x2bc>
 801e9c2:	e7e4      	b.n	801e98e <_dtoa_r+0x6e>
 801e9c4:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e9c8:	aa16      	add	r2, sp, #88	@ 0x58
 801e9ca:	a917      	add	r1, sp, #92	@ 0x5c
 801e9cc:	4658      	mov	r0, fp
 801e9ce:	f001 f84d 	bl	801fa6c <__d2b>
 801e9d2:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801e9d6:	4681      	mov	r9, r0
 801e9d8:	2e00      	cmp	r6, #0
 801e9da:	d077      	beq.n	801eacc <_dtoa_r+0x1ac>
 801e9dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e9de:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801e9e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e9e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e9ea:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801e9ee:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801e9f2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801e9f6:	4619      	mov	r1, r3
 801e9f8:	2200      	movs	r2, #0
 801e9fa:	4b73      	ldr	r3, [pc, #460]	@ (801ebc8 <_dtoa_r+0x2a8>)
 801e9fc:	f7e1 fc54 	bl	80002a8 <__aeabi_dsub>
 801ea00:	a369      	add	r3, pc, #420	@ (adr r3, 801eba8 <_dtoa_r+0x288>)
 801ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea06:	f7e1 fe07 	bl	8000618 <__aeabi_dmul>
 801ea0a:	a369      	add	r3, pc, #420	@ (adr r3, 801ebb0 <_dtoa_r+0x290>)
 801ea0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea10:	f7e1 fc4c 	bl	80002ac <__adddf3>
 801ea14:	4604      	mov	r4, r0
 801ea16:	4630      	mov	r0, r6
 801ea18:	460d      	mov	r5, r1
 801ea1a:	f7e1 fd93 	bl	8000544 <__aeabi_i2d>
 801ea1e:	a366      	add	r3, pc, #408	@ (adr r3, 801ebb8 <_dtoa_r+0x298>)
 801ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea24:	f7e1 fdf8 	bl	8000618 <__aeabi_dmul>
 801ea28:	4602      	mov	r2, r0
 801ea2a:	460b      	mov	r3, r1
 801ea2c:	4620      	mov	r0, r4
 801ea2e:	4629      	mov	r1, r5
 801ea30:	f7e1 fc3c 	bl	80002ac <__adddf3>
 801ea34:	4604      	mov	r4, r0
 801ea36:	460d      	mov	r5, r1
 801ea38:	f7e2 f89e 	bl	8000b78 <__aeabi_d2iz>
 801ea3c:	2200      	movs	r2, #0
 801ea3e:	4607      	mov	r7, r0
 801ea40:	2300      	movs	r3, #0
 801ea42:	4620      	mov	r0, r4
 801ea44:	4629      	mov	r1, r5
 801ea46:	f7e2 f859 	bl	8000afc <__aeabi_dcmplt>
 801ea4a:	b140      	cbz	r0, 801ea5e <_dtoa_r+0x13e>
 801ea4c:	4638      	mov	r0, r7
 801ea4e:	f7e1 fd79 	bl	8000544 <__aeabi_i2d>
 801ea52:	4622      	mov	r2, r4
 801ea54:	462b      	mov	r3, r5
 801ea56:	f7e2 f847 	bl	8000ae8 <__aeabi_dcmpeq>
 801ea5a:	b900      	cbnz	r0, 801ea5e <_dtoa_r+0x13e>
 801ea5c:	3f01      	subs	r7, #1
 801ea5e:	2f16      	cmp	r7, #22
 801ea60:	d851      	bhi.n	801eb06 <_dtoa_r+0x1e6>
 801ea62:	4b5a      	ldr	r3, [pc, #360]	@ (801ebcc <_dtoa_r+0x2ac>)
 801ea64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ea70:	f7e2 f844 	bl	8000afc <__aeabi_dcmplt>
 801ea74:	2800      	cmp	r0, #0
 801ea76:	d048      	beq.n	801eb0a <_dtoa_r+0x1ea>
 801ea78:	3f01      	subs	r7, #1
 801ea7a:	2300      	movs	r3, #0
 801ea7c:	9312      	str	r3, [sp, #72]	@ 0x48
 801ea7e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ea80:	1b9b      	subs	r3, r3, r6
 801ea82:	1e5a      	subs	r2, r3, #1
 801ea84:	bf44      	itt	mi
 801ea86:	f1c3 0801 	rsbmi	r8, r3, #1
 801ea8a:	2300      	movmi	r3, #0
 801ea8c:	9208      	str	r2, [sp, #32]
 801ea8e:	bf54      	ite	pl
 801ea90:	f04f 0800 	movpl.w	r8, #0
 801ea94:	9308      	strmi	r3, [sp, #32]
 801ea96:	2f00      	cmp	r7, #0
 801ea98:	db39      	blt.n	801eb0e <_dtoa_r+0x1ee>
 801ea9a:	9b08      	ldr	r3, [sp, #32]
 801ea9c:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ea9e:	443b      	add	r3, r7
 801eaa0:	9308      	str	r3, [sp, #32]
 801eaa2:	2300      	movs	r3, #0
 801eaa4:	930a      	str	r3, [sp, #40]	@ 0x28
 801eaa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eaa8:	2b09      	cmp	r3, #9
 801eaaa:	d865      	bhi.n	801eb78 <_dtoa_r+0x258>
 801eaac:	2b05      	cmp	r3, #5
 801eaae:	bfc4      	itt	gt
 801eab0:	3b04      	subgt	r3, #4
 801eab2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801eab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eab6:	f1a3 0302 	sub.w	r3, r3, #2
 801eaba:	bfcc      	ite	gt
 801eabc:	2400      	movgt	r4, #0
 801eabe:	2401      	movle	r4, #1
 801eac0:	2b03      	cmp	r3, #3
 801eac2:	d864      	bhi.n	801eb8e <_dtoa_r+0x26e>
 801eac4:	e8df f003 	tbb	[pc, r3]
 801eac8:	5635372a 	.word	0x5635372a
 801eacc:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801ead0:	441e      	add	r6, r3
 801ead2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801ead6:	2b20      	cmp	r3, #32
 801ead8:	bfc1      	itttt	gt
 801eada:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801eade:	409f      	lslgt	r7, r3
 801eae0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801eae4:	fa24 f303 	lsrgt.w	r3, r4, r3
 801eae8:	bfd6      	itet	le
 801eaea:	f1c3 0320 	rsble	r3, r3, #32
 801eaee:	ea47 0003 	orrgt.w	r0, r7, r3
 801eaf2:	fa04 f003 	lslle.w	r0, r4, r3
 801eaf6:	f7e1 fd15 	bl	8000524 <__aeabi_ui2d>
 801eafa:	2201      	movs	r2, #1
 801eafc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801eb00:	3e01      	subs	r6, #1
 801eb02:	9214      	str	r2, [sp, #80]	@ 0x50
 801eb04:	e777      	b.n	801e9f6 <_dtoa_r+0xd6>
 801eb06:	2301      	movs	r3, #1
 801eb08:	e7b8      	b.n	801ea7c <_dtoa_r+0x15c>
 801eb0a:	9012      	str	r0, [sp, #72]	@ 0x48
 801eb0c:	e7b7      	b.n	801ea7e <_dtoa_r+0x15e>
 801eb0e:	427b      	negs	r3, r7
 801eb10:	930a      	str	r3, [sp, #40]	@ 0x28
 801eb12:	2300      	movs	r3, #0
 801eb14:	eba8 0807 	sub.w	r8, r8, r7
 801eb18:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eb1a:	e7c4      	b.n	801eaa6 <_dtoa_r+0x186>
 801eb1c:	2300      	movs	r3, #0
 801eb1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eb20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	dc36      	bgt.n	801eb94 <_dtoa_r+0x274>
 801eb26:	2301      	movs	r3, #1
 801eb28:	9300      	str	r3, [sp, #0]
 801eb2a:	9307      	str	r3, [sp, #28]
 801eb2c:	461a      	mov	r2, r3
 801eb2e:	920e      	str	r2, [sp, #56]	@ 0x38
 801eb30:	e00b      	b.n	801eb4a <_dtoa_r+0x22a>
 801eb32:	2301      	movs	r3, #1
 801eb34:	e7f3      	b.n	801eb1e <_dtoa_r+0x1fe>
 801eb36:	2300      	movs	r3, #0
 801eb38:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eb3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eb3c:	18fb      	adds	r3, r7, r3
 801eb3e:	9300      	str	r3, [sp, #0]
 801eb40:	3301      	adds	r3, #1
 801eb42:	2b01      	cmp	r3, #1
 801eb44:	9307      	str	r3, [sp, #28]
 801eb46:	bfb8      	it	lt
 801eb48:	2301      	movlt	r3, #1
 801eb4a:	2100      	movs	r1, #0
 801eb4c:	2204      	movs	r2, #4
 801eb4e:	f102 0014 	add.w	r0, r2, #20
 801eb52:	4298      	cmp	r0, r3
 801eb54:	d922      	bls.n	801eb9c <_dtoa_r+0x27c>
 801eb56:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 801eb5a:	4658      	mov	r0, fp
 801eb5c:	f000 fcaa 	bl	801f4b4 <_Balloc>
 801eb60:	4682      	mov	sl, r0
 801eb62:	2800      	cmp	r0, #0
 801eb64:	d13c      	bne.n	801ebe0 <_dtoa_r+0x2c0>
 801eb66:	4b1a      	ldr	r3, [pc, #104]	@ (801ebd0 <_dtoa_r+0x2b0>)
 801eb68:	4602      	mov	r2, r0
 801eb6a:	f240 11af 	movw	r1, #431	@ 0x1af
 801eb6e:	4819      	ldr	r0, [pc, #100]	@ (801ebd4 <_dtoa_r+0x2b4>)
 801eb70:	f001 fcc0 	bl	80204f4 <__assert_func>
 801eb74:	2301      	movs	r3, #1
 801eb76:	e7df      	b.n	801eb38 <_dtoa_r+0x218>
 801eb78:	2401      	movs	r4, #1
 801eb7a:	2300      	movs	r3, #0
 801eb7c:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801eb80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eb84:	9300      	str	r3, [sp, #0]
 801eb86:	9307      	str	r3, [sp, #28]
 801eb88:	2200      	movs	r2, #0
 801eb8a:	2312      	movs	r3, #18
 801eb8c:	e7cf      	b.n	801eb2e <_dtoa_r+0x20e>
 801eb8e:	2301      	movs	r3, #1
 801eb90:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eb92:	e7f5      	b.n	801eb80 <_dtoa_r+0x260>
 801eb94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eb96:	9300      	str	r3, [sp, #0]
 801eb98:	9307      	str	r3, [sp, #28]
 801eb9a:	e7d6      	b.n	801eb4a <_dtoa_r+0x22a>
 801eb9c:	3101      	adds	r1, #1
 801eb9e:	0052      	lsls	r2, r2, #1
 801eba0:	e7d5      	b.n	801eb4e <_dtoa_r+0x22e>
 801eba2:	bf00      	nop
 801eba4:	f3af 8000 	nop.w
 801eba8:	636f4361 	.word	0x636f4361
 801ebac:	3fd287a7 	.word	0x3fd287a7
 801ebb0:	8b60c8b3 	.word	0x8b60c8b3
 801ebb4:	3fc68a28 	.word	0x3fc68a28
 801ebb8:	509f79fb 	.word	0x509f79fb
 801ebbc:	3fd34413 	.word	0x3fd34413
 801ebc0:	7ff00000 	.word	0x7ff00000
 801ebc4:	080214b9 	.word	0x080214b9
 801ebc8:	3ff80000 	.word	0x3ff80000
 801ebcc:	08021690 	.word	0x08021690
 801ebd0:	08021593 	.word	0x08021593
 801ebd4:	080215a4 	.word	0x080215a4
 801ebd8:	0802158f 	.word	0x0802158f
 801ebdc:	080214b8 	.word	0x080214b8
 801ebe0:	9b07      	ldr	r3, [sp, #28]
 801ebe2:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 801ebe6:	2b0e      	cmp	r3, #14
 801ebe8:	f200 80a4 	bhi.w	801ed34 <_dtoa_r+0x414>
 801ebec:	2c00      	cmp	r4, #0
 801ebee:	f000 80a1 	beq.w	801ed34 <_dtoa_r+0x414>
 801ebf2:	2f00      	cmp	r7, #0
 801ebf4:	dd33      	ble.n	801ec5e <_dtoa_r+0x33e>
 801ebf6:	4bae      	ldr	r3, [pc, #696]	@ (801eeb0 <_dtoa_r+0x590>)
 801ebf8:	f007 020f 	and.w	r2, r7, #15
 801ebfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ec00:	ed93 7b00 	vldr	d7, [r3]
 801ec04:	05f8      	lsls	r0, r7, #23
 801ec06:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ec0a:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ec0e:	d516      	bpl.n	801ec3e <_dtoa_r+0x31e>
 801ec10:	4ba8      	ldr	r3, [pc, #672]	@ (801eeb4 <_dtoa_r+0x594>)
 801ec12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ec16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ec1a:	f7e1 fe27 	bl	800086c <__aeabi_ddiv>
 801ec1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec22:	f004 040f 	and.w	r4, r4, #15
 801ec26:	2603      	movs	r6, #3
 801ec28:	4da2      	ldr	r5, [pc, #648]	@ (801eeb4 <_dtoa_r+0x594>)
 801ec2a:	b954      	cbnz	r4, 801ec42 <_dtoa_r+0x322>
 801ec2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ec30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec34:	f7e1 fe1a 	bl	800086c <__aeabi_ddiv>
 801ec38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec3c:	e028      	b.n	801ec90 <_dtoa_r+0x370>
 801ec3e:	2602      	movs	r6, #2
 801ec40:	e7f2      	b.n	801ec28 <_dtoa_r+0x308>
 801ec42:	07e1      	lsls	r1, r4, #31
 801ec44:	d508      	bpl.n	801ec58 <_dtoa_r+0x338>
 801ec46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ec4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ec4e:	f7e1 fce3 	bl	8000618 <__aeabi_dmul>
 801ec52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ec56:	3601      	adds	r6, #1
 801ec58:	1064      	asrs	r4, r4, #1
 801ec5a:	3508      	adds	r5, #8
 801ec5c:	e7e5      	b.n	801ec2a <_dtoa_r+0x30a>
 801ec5e:	f000 80d2 	beq.w	801ee06 <_dtoa_r+0x4e6>
 801ec62:	427c      	negs	r4, r7
 801ec64:	4b92      	ldr	r3, [pc, #584]	@ (801eeb0 <_dtoa_r+0x590>)
 801ec66:	4d93      	ldr	r5, [pc, #588]	@ (801eeb4 <_dtoa_r+0x594>)
 801ec68:	f004 020f 	and.w	r2, r4, #15
 801ec6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ec70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ec78:	f7e1 fcce 	bl	8000618 <__aeabi_dmul>
 801ec7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec80:	1124      	asrs	r4, r4, #4
 801ec82:	2300      	movs	r3, #0
 801ec84:	2602      	movs	r6, #2
 801ec86:	2c00      	cmp	r4, #0
 801ec88:	f040 80b2 	bne.w	801edf0 <_dtoa_r+0x4d0>
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d1d3      	bne.n	801ec38 <_dtoa_r+0x318>
 801ec90:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ec92:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	f000 80b7 	beq.w	801ee0a <_dtoa_r+0x4ea>
 801ec9c:	4b86      	ldr	r3, [pc, #536]	@ (801eeb8 <_dtoa_r+0x598>)
 801ec9e:	2200      	movs	r2, #0
 801eca0:	4620      	mov	r0, r4
 801eca2:	4629      	mov	r1, r5
 801eca4:	f7e1 ff2a 	bl	8000afc <__aeabi_dcmplt>
 801eca8:	2800      	cmp	r0, #0
 801ecaa:	f000 80ae 	beq.w	801ee0a <_dtoa_r+0x4ea>
 801ecae:	9b07      	ldr	r3, [sp, #28]
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	f000 80aa 	beq.w	801ee0a <_dtoa_r+0x4ea>
 801ecb6:	9b00      	ldr	r3, [sp, #0]
 801ecb8:	2b00      	cmp	r3, #0
 801ecba:	dd37      	ble.n	801ed2c <_dtoa_r+0x40c>
 801ecbc:	1e7b      	subs	r3, r7, #1
 801ecbe:	9304      	str	r3, [sp, #16]
 801ecc0:	4620      	mov	r0, r4
 801ecc2:	4b7e      	ldr	r3, [pc, #504]	@ (801eebc <_dtoa_r+0x59c>)
 801ecc4:	2200      	movs	r2, #0
 801ecc6:	4629      	mov	r1, r5
 801ecc8:	f7e1 fca6 	bl	8000618 <__aeabi_dmul>
 801eccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ecd0:	9c00      	ldr	r4, [sp, #0]
 801ecd2:	3601      	adds	r6, #1
 801ecd4:	4630      	mov	r0, r6
 801ecd6:	f7e1 fc35 	bl	8000544 <__aeabi_i2d>
 801ecda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ecde:	f7e1 fc9b 	bl	8000618 <__aeabi_dmul>
 801ece2:	4b77      	ldr	r3, [pc, #476]	@ (801eec0 <_dtoa_r+0x5a0>)
 801ece4:	2200      	movs	r2, #0
 801ece6:	f7e1 fae1 	bl	80002ac <__adddf3>
 801ecea:	4605      	mov	r5, r0
 801ecec:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801ecf0:	2c00      	cmp	r4, #0
 801ecf2:	f040 808d 	bne.w	801ee10 <_dtoa_r+0x4f0>
 801ecf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ecfa:	4b72      	ldr	r3, [pc, #456]	@ (801eec4 <_dtoa_r+0x5a4>)
 801ecfc:	2200      	movs	r2, #0
 801ecfe:	f7e1 fad3 	bl	80002a8 <__aeabi_dsub>
 801ed02:	4602      	mov	r2, r0
 801ed04:	460b      	mov	r3, r1
 801ed06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ed0a:	462a      	mov	r2, r5
 801ed0c:	4633      	mov	r3, r6
 801ed0e:	f7e1 ff13 	bl	8000b38 <__aeabi_dcmpgt>
 801ed12:	2800      	cmp	r0, #0
 801ed14:	f040 828c 	bne.w	801f230 <_dtoa_r+0x910>
 801ed18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ed1c:	462a      	mov	r2, r5
 801ed1e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801ed22:	f7e1 feeb 	bl	8000afc <__aeabi_dcmplt>
 801ed26:	2800      	cmp	r0, #0
 801ed28:	f040 8129 	bne.w	801ef7e <_dtoa_r+0x65e>
 801ed2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801ed30:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ed34:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	f2c0 815b 	blt.w	801eff2 <_dtoa_r+0x6d2>
 801ed3c:	2f0e      	cmp	r7, #14
 801ed3e:	f300 8158 	bgt.w	801eff2 <_dtoa_r+0x6d2>
 801ed42:	4b5b      	ldr	r3, [pc, #364]	@ (801eeb0 <_dtoa_r+0x590>)
 801ed44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ed48:	ed93 7b00 	vldr	d7, [r3]
 801ed4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	ed8d 7b00 	vstr	d7, [sp]
 801ed54:	da03      	bge.n	801ed5e <_dtoa_r+0x43e>
 801ed56:	9b07      	ldr	r3, [sp, #28]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	f340 8102 	ble.w	801ef62 <_dtoa_r+0x642>
 801ed5e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ed62:	4656      	mov	r6, sl
 801ed64:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ed68:	4620      	mov	r0, r4
 801ed6a:	4629      	mov	r1, r5
 801ed6c:	f7e1 fd7e 	bl	800086c <__aeabi_ddiv>
 801ed70:	f7e1 ff02 	bl	8000b78 <__aeabi_d2iz>
 801ed74:	4680      	mov	r8, r0
 801ed76:	f7e1 fbe5 	bl	8000544 <__aeabi_i2d>
 801ed7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ed7e:	f7e1 fc4b 	bl	8000618 <__aeabi_dmul>
 801ed82:	4602      	mov	r2, r0
 801ed84:	460b      	mov	r3, r1
 801ed86:	4620      	mov	r0, r4
 801ed88:	4629      	mov	r1, r5
 801ed8a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801ed8e:	f7e1 fa8b 	bl	80002a8 <__aeabi_dsub>
 801ed92:	f806 4b01 	strb.w	r4, [r6], #1
 801ed96:	9d07      	ldr	r5, [sp, #28]
 801ed98:	eba6 040a 	sub.w	r4, r6, sl
 801ed9c:	42a5      	cmp	r5, r4
 801ed9e:	4602      	mov	r2, r0
 801eda0:	460b      	mov	r3, r1
 801eda2:	f040 8118 	bne.w	801efd6 <_dtoa_r+0x6b6>
 801eda6:	f7e1 fa81 	bl	80002ac <__adddf3>
 801edaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 801edae:	4604      	mov	r4, r0
 801edb0:	460d      	mov	r5, r1
 801edb2:	f7e1 fec1 	bl	8000b38 <__aeabi_dcmpgt>
 801edb6:	2800      	cmp	r0, #0
 801edb8:	f040 80fa 	bne.w	801efb0 <_dtoa_r+0x690>
 801edbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801edc0:	4620      	mov	r0, r4
 801edc2:	4629      	mov	r1, r5
 801edc4:	f7e1 fe90 	bl	8000ae8 <__aeabi_dcmpeq>
 801edc8:	b118      	cbz	r0, 801edd2 <_dtoa_r+0x4b2>
 801edca:	f018 0f01 	tst.w	r8, #1
 801edce:	f040 80ef 	bne.w	801efb0 <_dtoa_r+0x690>
 801edd2:	4649      	mov	r1, r9
 801edd4:	4658      	mov	r0, fp
 801edd6:	f000 fb92 	bl	801f4fe <_Bfree>
 801edda:	2300      	movs	r3, #0
 801eddc:	7033      	strb	r3, [r6, #0]
 801edde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ede0:	3701      	adds	r7, #1
 801ede2:	601f      	str	r7, [r3, #0]
 801ede4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	f43f add1 	beq.w	801e98e <_dtoa_r+0x6e>
 801edec:	601e      	str	r6, [r3, #0]
 801edee:	e5ce      	b.n	801e98e <_dtoa_r+0x6e>
 801edf0:	07e2      	lsls	r2, r4, #31
 801edf2:	d505      	bpl.n	801ee00 <_dtoa_r+0x4e0>
 801edf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801edf8:	f7e1 fc0e 	bl	8000618 <__aeabi_dmul>
 801edfc:	3601      	adds	r6, #1
 801edfe:	2301      	movs	r3, #1
 801ee00:	1064      	asrs	r4, r4, #1
 801ee02:	3508      	adds	r5, #8
 801ee04:	e73f      	b.n	801ec86 <_dtoa_r+0x366>
 801ee06:	2602      	movs	r6, #2
 801ee08:	e742      	b.n	801ec90 <_dtoa_r+0x370>
 801ee0a:	9c07      	ldr	r4, [sp, #28]
 801ee0c:	9704      	str	r7, [sp, #16]
 801ee0e:	e761      	b.n	801ecd4 <_dtoa_r+0x3b4>
 801ee10:	4b27      	ldr	r3, [pc, #156]	@ (801eeb0 <_dtoa_r+0x590>)
 801ee12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ee14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ee18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ee1c:	4454      	add	r4, sl
 801ee1e:	2900      	cmp	r1, #0
 801ee20:	d054      	beq.n	801eecc <_dtoa_r+0x5ac>
 801ee22:	4929      	ldr	r1, [pc, #164]	@ (801eec8 <_dtoa_r+0x5a8>)
 801ee24:	2000      	movs	r0, #0
 801ee26:	f7e1 fd21 	bl	800086c <__aeabi_ddiv>
 801ee2a:	4633      	mov	r3, r6
 801ee2c:	462a      	mov	r2, r5
 801ee2e:	f7e1 fa3b 	bl	80002a8 <__aeabi_dsub>
 801ee32:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ee36:	4656      	mov	r6, sl
 801ee38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee3c:	f7e1 fe9c 	bl	8000b78 <__aeabi_d2iz>
 801ee40:	4605      	mov	r5, r0
 801ee42:	f7e1 fb7f 	bl	8000544 <__aeabi_i2d>
 801ee46:	4602      	mov	r2, r0
 801ee48:	460b      	mov	r3, r1
 801ee4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee4e:	f7e1 fa2b 	bl	80002a8 <__aeabi_dsub>
 801ee52:	3530      	adds	r5, #48	@ 0x30
 801ee54:	4602      	mov	r2, r0
 801ee56:	460b      	mov	r3, r1
 801ee58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ee5c:	f806 5b01 	strb.w	r5, [r6], #1
 801ee60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ee64:	f7e1 fe4a 	bl	8000afc <__aeabi_dcmplt>
 801ee68:	2800      	cmp	r0, #0
 801ee6a:	d172      	bne.n	801ef52 <_dtoa_r+0x632>
 801ee6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ee70:	4911      	ldr	r1, [pc, #68]	@ (801eeb8 <_dtoa_r+0x598>)
 801ee72:	2000      	movs	r0, #0
 801ee74:	f7e1 fa18 	bl	80002a8 <__aeabi_dsub>
 801ee78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ee7c:	f7e1 fe3e 	bl	8000afc <__aeabi_dcmplt>
 801ee80:	2800      	cmp	r0, #0
 801ee82:	f040 8096 	bne.w	801efb2 <_dtoa_r+0x692>
 801ee86:	42a6      	cmp	r6, r4
 801ee88:	f43f af50 	beq.w	801ed2c <_dtoa_r+0x40c>
 801ee8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ee90:	4b0a      	ldr	r3, [pc, #40]	@ (801eebc <_dtoa_r+0x59c>)
 801ee92:	2200      	movs	r2, #0
 801ee94:	f7e1 fbc0 	bl	8000618 <__aeabi_dmul>
 801ee98:	4b08      	ldr	r3, [pc, #32]	@ (801eebc <_dtoa_r+0x59c>)
 801ee9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ee9e:	2200      	movs	r2, #0
 801eea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eea4:	f7e1 fbb8 	bl	8000618 <__aeabi_dmul>
 801eea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eeac:	e7c4      	b.n	801ee38 <_dtoa_r+0x518>
 801eeae:	bf00      	nop
 801eeb0:	08021690 	.word	0x08021690
 801eeb4:	08021668 	.word	0x08021668
 801eeb8:	3ff00000 	.word	0x3ff00000
 801eebc:	40240000 	.word	0x40240000
 801eec0:	401c0000 	.word	0x401c0000
 801eec4:	40140000 	.word	0x40140000
 801eec8:	3fe00000 	.word	0x3fe00000
 801eecc:	4631      	mov	r1, r6
 801eece:	4628      	mov	r0, r5
 801eed0:	f7e1 fba2 	bl	8000618 <__aeabi_dmul>
 801eed4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801eed8:	9415      	str	r4, [sp, #84]	@ 0x54
 801eeda:	4656      	mov	r6, sl
 801eedc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eee0:	f7e1 fe4a 	bl	8000b78 <__aeabi_d2iz>
 801eee4:	4605      	mov	r5, r0
 801eee6:	f7e1 fb2d 	bl	8000544 <__aeabi_i2d>
 801eeea:	4602      	mov	r2, r0
 801eeec:	460b      	mov	r3, r1
 801eeee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eef2:	f7e1 f9d9 	bl	80002a8 <__aeabi_dsub>
 801eef6:	3530      	adds	r5, #48	@ 0x30
 801eef8:	f806 5b01 	strb.w	r5, [r6], #1
 801eefc:	4602      	mov	r2, r0
 801eefe:	460b      	mov	r3, r1
 801ef00:	42a6      	cmp	r6, r4
 801ef02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ef06:	f04f 0200 	mov.w	r2, #0
 801ef0a:	d124      	bne.n	801ef56 <_dtoa_r+0x636>
 801ef0c:	4bac      	ldr	r3, [pc, #688]	@ (801f1c0 <_dtoa_r+0x8a0>)
 801ef0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ef12:	f7e1 f9cb 	bl	80002ac <__adddf3>
 801ef16:	4602      	mov	r2, r0
 801ef18:	460b      	mov	r3, r1
 801ef1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef1e:	f7e1 fe0b 	bl	8000b38 <__aeabi_dcmpgt>
 801ef22:	2800      	cmp	r0, #0
 801ef24:	d145      	bne.n	801efb2 <_dtoa_r+0x692>
 801ef26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ef2a:	49a5      	ldr	r1, [pc, #660]	@ (801f1c0 <_dtoa_r+0x8a0>)
 801ef2c:	2000      	movs	r0, #0
 801ef2e:	f7e1 f9bb 	bl	80002a8 <__aeabi_dsub>
 801ef32:	4602      	mov	r2, r0
 801ef34:	460b      	mov	r3, r1
 801ef36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef3a:	f7e1 fddf 	bl	8000afc <__aeabi_dcmplt>
 801ef3e:	2800      	cmp	r0, #0
 801ef40:	f43f aef4 	beq.w	801ed2c <_dtoa_r+0x40c>
 801ef44:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801ef46:	1e73      	subs	r3, r6, #1
 801ef48:	9315      	str	r3, [sp, #84]	@ 0x54
 801ef4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ef4e:	2b30      	cmp	r3, #48	@ 0x30
 801ef50:	d0f8      	beq.n	801ef44 <_dtoa_r+0x624>
 801ef52:	9f04      	ldr	r7, [sp, #16]
 801ef54:	e73d      	b.n	801edd2 <_dtoa_r+0x4b2>
 801ef56:	4b9b      	ldr	r3, [pc, #620]	@ (801f1c4 <_dtoa_r+0x8a4>)
 801ef58:	f7e1 fb5e 	bl	8000618 <__aeabi_dmul>
 801ef5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef60:	e7bc      	b.n	801eedc <_dtoa_r+0x5bc>
 801ef62:	d10c      	bne.n	801ef7e <_dtoa_r+0x65e>
 801ef64:	4b98      	ldr	r3, [pc, #608]	@ (801f1c8 <_dtoa_r+0x8a8>)
 801ef66:	2200      	movs	r2, #0
 801ef68:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ef6c:	f7e1 fb54 	bl	8000618 <__aeabi_dmul>
 801ef70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ef74:	f7e1 fdd6 	bl	8000b24 <__aeabi_dcmpge>
 801ef78:	2800      	cmp	r0, #0
 801ef7a:	f000 8157 	beq.w	801f22c <_dtoa_r+0x90c>
 801ef7e:	2400      	movs	r4, #0
 801ef80:	4625      	mov	r5, r4
 801ef82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef84:	43db      	mvns	r3, r3
 801ef86:	9304      	str	r3, [sp, #16]
 801ef88:	4656      	mov	r6, sl
 801ef8a:	2700      	movs	r7, #0
 801ef8c:	4621      	mov	r1, r4
 801ef8e:	4658      	mov	r0, fp
 801ef90:	f000 fab5 	bl	801f4fe <_Bfree>
 801ef94:	2d00      	cmp	r5, #0
 801ef96:	d0dc      	beq.n	801ef52 <_dtoa_r+0x632>
 801ef98:	b12f      	cbz	r7, 801efa6 <_dtoa_r+0x686>
 801ef9a:	42af      	cmp	r7, r5
 801ef9c:	d003      	beq.n	801efa6 <_dtoa_r+0x686>
 801ef9e:	4639      	mov	r1, r7
 801efa0:	4658      	mov	r0, fp
 801efa2:	f000 faac 	bl	801f4fe <_Bfree>
 801efa6:	4629      	mov	r1, r5
 801efa8:	4658      	mov	r0, fp
 801efaa:	f000 faa8 	bl	801f4fe <_Bfree>
 801efae:	e7d0      	b.n	801ef52 <_dtoa_r+0x632>
 801efb0:	9704      	str	r7, [sp, #16]
 801efb2:	4633      	mov	r3, r6
 801efb4:	461e      	mov	r6, r3
 801efb6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801efba:	2a39      	cmp	r2, #57	@ 0x39
 801efbc:	d107      	bne.n	801efce <_dtoa_r+0x6ae>
 801efbe:	459a      	cmp	sl, r3
 801efc0:	d1f8      	bne.n	801efb4 <_dtoa_r+0x694>
 801efc2:	9a04      	ldr	r2, [sp, #16]
 801efc4:	3201      	adds	r2, #1
 801efc6:	9204      	str	r2, [sp, #16]
 801efc8:	2230      	movs	r2, #48	@ 0x30
 801efca:	f88a 2000 	strb.w	r2, [sl]
 801efce:	781a      	ldrb	r2, [r3, #0]
 801efd0:	3201      	adds	r2, #1
 801efd2:	701a      	strb	r2, [r3, #0]
 801efd4:	e7bd      	b.n	801ef52 <_dtoa_r+0x632>
 801efd6:	4b7b      	ldr	r3, [pc, #492]	@ (801f1c4 <_dtoa_r+0x8a4>)
 801efd8:	2200      	movs	r2, #0
 801efda:	f7e1 fb1d 	bl	8000618 <__aeabi_dmul>
 801efde:	2200      	movs	r2, #0
 801efe0:	2300      	movs	r3, #0
 801efe2:	4604      	mov	r4, r0
 801efe4:	460d      	mov	r5, r1
 801efe6:	f7e1 fd7f 	bl	8000ae8 <__aeabi_dcmpeq>
 801efea:	2800      	cmp	r0, #0
 801efec:	f43f aeba 	beq.w	801ed64 <_dtoa_r+0x444>
 801eff0:	e6ef      	b.n	801edd2 <_dtoa_r+0x4b2>
 801eff2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801eff4:	2a00      	cmp	r2, #0
 801eff6:	f000 80db 	beq.w	801f1b0 <_dtoa_r+0x890>
 801effa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801effc:	2a01      	cmp	r2, #1
 801effe:	f300 80bf 	bgt.w	801f180 <_dtoa_r+0x860>
 801f002:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f004:	2a00      	cmp	r2, #0
 801f006:	f000 80b7 	beq.w	801f178 <_dtoa_r+0x858>
 801f00a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f00e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f010:	4646      	mov	r6, r8
 801f012:	9a08      	ldr	r2, [sp, #32]
 801f014:	2101      	movs	r1, #1
 801f016:	441a      	add	r2, r3
 801f018:	4658      	mov	r0, fp
 801f01a:	4498      	add	r8, r3
 801f01c:	9208      	str	r2, [sp, #32]
 801f01e:	f000 fb09 	bl	801f634 <__i2b>
 801f022:	4605      	mov	r5, r0
 801f024:	b15e      	cbz	r6, 801f03e <_dtoa_r+0x71e>
 801f026:	9b08      	ldr	r3, [sp, #32]
 801f028:	2b00      	cmp	r3, #0
 801f02a:	dd08      	ble.n	801f03e <_dtoa_r+0x71e>
 801f02c:	42b3      	cmp	r3, r6
 801f02e:	9a08      	ldr	r2, [sp, #32]
 801f030:	bfa8      	it	ge
 801f032:	4633      	movge	r3, r6
 801f034:	eba8 0803 	sub.w	r8, r8, r3
 801f038:	1af6      	subs	r6, r6, r3
 801f03a:	1ad3      	subs	r3, r2, r3
 801f03c:	9308      	str	r3, [sp, #32]
 801f03e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f040:	b1f3      	cbz	r3, 801f080 <_dtoa_r+0x760>
 801f042:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f044:	2b00      	cmp	r3, #0
 801f046:	f000 80b7 	beq.w	801f1b8 <_dtoa_r+0x898>
 801f04a:	b18c      	cbz	r4, 801f070 <_dtoa_r+0x750>
 801f04c:	4629      	mov	r1, r5
 801f04e:	4622      	mov	r2, r4
 801f050:	4658      	mov	r0, fp
 801f052:	f000 fbaf 	bl	801f7b4 <__pow5mult>
 801f056:	464a      	mov	r2, r9
 801f058:	4601      	mov	r1, r0
 801f05a:	4605      	mov	r5, r0
 801f05c:	4658      	mov	r0, fp
 801f05e:	f000 faff 	bl	801f660 <__multiply>
 801f062:	4649      	mov	r1, r9
 801f064:	9004      	str	r0, [sp, #16]
 801f066:	4658      	mov	r0, fp
 801f068:	f000 fa49 	bl	801f4fe <_Bfree>
 801f06c:	9b04      	ldr	r3, [sp, #16]
 801f06e:	4699      	mov	r9, r3
 801f070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f072:	1b1a      	subs	r2, r3, r4
 801f074:	d004      	beq.n	801f080 <_dtoa_r+0x760>
 801f076:	4649      	mov	r1, r9
 801f078:	4658      	mov	r0, fp
 801f07a:	f000 fb9b 	bl	801f7b4 <__pow5mult>
 801f07e:	4681      	mov	r9, r0
 801f080:	2101      	movs	r1, #1
 801f082:	4658      	mov	r0, fp
 801f084:	f000 fad6 	bl	801f634 <__i2b>
 801f088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f08a:	4604      	mov	r4, r0
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	f000 81cc 	beq.w	801f42a <_dtoa_r+0xb0a>
 801f092:	461a      	mov	r2, r3
 801f094:	4601      	mov	r1, r0
 801f096:	4658      	mov	r0, fp
 801f098:	f000 fb8c 	bl	801f7b4 <__pow5mult>
 801f09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f09e:	2b01      	cmp	r3, #1
 801f0a0:	4604      	mov	r4, r0
 801f0a2:	f300 8095 	bgt.w	801f1d0 <_dtoa_r+0x8b0>
 801f0a6:	9b02      	ldr	r3, [sp, #8]
 801f0a8:	2b00      	cmp	r3, #0
 801f0aa:	f040 8087 	bne.w	801f1bc <_dtoa_r+0x89c>
 801f0ae:	9b03      	ldr	r3, [sp, #12]
 801f0b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f0b4:	2b00      	cmp	r3, #0
 801f0b6:	f040 8089 	bne.w	801f1cc <_dtoa_r+0x8ac>
 801f0ba:	9b03      	ldr	r3, [sp, #12]
 801f0bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f0c0:	0d1b      	lsrs	r3, r3, #20
 801f0c2:	051b      	lsls	r3, r3, #20
 801f0c4:	b12b      	cbz	r3, 801f0d2 <_dtoa_r+0x7b2>
 801f0c6:	9b08      	ldr	r3, [sp, #32]
 801f0c8:	3301      	adds	r3, #1
 801f0ca:	9308      	str	r3, [sp, #32]
 801f0cc:	f108 0801 	add.w	r8, r8, #1
 801f0d0:	2301      	movs	r3, #1
 801f0d2:	930a      	str	r3, [sp, #40]	@ 0x28
 801f0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f0d6:	2b00      	cmp	r3, #0
 801f0d8:	f000 81ad 	beq.w	801f436 <_dtoa_r+0xb16>
 801f0dc:	6923      	ldr	r3, [r4, #16]
 801f0de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f0e2:	6918      	ldr	r0, [r3, #16]
 801f0e4:	f000 fa5a 	bl	801f59c <__hi0bits>
 801f0e8:	f1c0 0020 	rsb	r0, r0, #32
 801f0ec:	9b08      	ldr	r3, [sp, #32]
 801f0ee:	4418      	add	r0, r3
 801f0f0:	f010 001f 	ands.w	r0, r0, #31
 801f0f4:	d077      	beq.n	801f1e6 <_dtoa_r+0x8c6>
 801f0f6:	f1c0 0320 	rsb	r3, r0, #32
 801f0fa:	2b04      	cmp	r3, #4
 801f0fc:	dd6b      	ble.n	801f1d6 <_dtoa_r+0x8b6>
 801f0fe:	9b08      	ldr	r3, [sp, #32]
 801f100:	f1c0 001c 	rsb	r0, r0, #28
 801f104:	4403      	add	r3, r0
 801f106:	4480      	add	r8, r0
 801f108:	4406      	add	r6, r0
 801f10a:	9308      	str	r3, [sp, #32]
 801f10c:	f1b8 0f00 	cmp.w	r8, #0
 801f110:	dd05      	ble.n	801f11e <_dtoa_r+0x7fe>
 801f112:	4649      	mov	r1, r9
 801f114:	4642      	mov	r2, r8
 801f116:	4658      	mov	r0, fp
 801f118:	f000 fb8c 	bl	801f834 <__lshift>
 801f11c:	4681      	mov	r9, r0
 801f11e:	9b08      	ldr	r3, [sp, #32]
 801f120:	2b00      	cmp	r3, #0
 801f122:	dd05      	ble.n	801f130 <_dtoa_r+0x810>
 801f124:	4621      	mov	r1, r4
 801f126:	461a      	mov	r2, r3
 801f128:	4658      	mov	r0, fp
 801f12a:	f000 fb83 	bl	801f834 <__lshift>
 801f12e:	4604      	mov	r4, r0
 801f130:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f132:	2b00      	cmp	r3, #0
 801f134:	d059      	beq.n	801f1ea <_dtoa_r+0x8ca>
 801f136:	4621      	mov	r1, r4
 801f138:	4648      	mov	r0, r9
 801f13a:	f000 fbe7 	bl	801f90c <__mcmp>
 801f13e:	2800      	cmp	r0, #0
 801f140:	da53      	bge.n	801f1ea <_dtoa_r+0x8ca>
 801f142:	1e7b      	subs	r3, r7, #1
 801f144:	9304      	str	r3, [sp, #16]
 801f146:	4649      	mov	r1, r9
 801f148:	2300      	movs	r3, #0
 801f14a:	220a      	movs	r2, #10
 801f14c:	4658      	mov	r0, fp
 801f14e:	f000 f9df 	bl	801f510 <__multadd>
 801f152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f154:	4681      	mov	r9, r0
 801f156:	2b00      	cmp	r3, #0
 801f158:	f000 816f 	beq.w	801f43a <_dtoa_r+0xb1a>
 801f15c:	2300      	movs	r3, #0
 801f15e:	4629      	mov	r1, r5
 801f160:	220a      	movs	r2, #10
 801f162:	4658      	mov	r0, fp
 801f164:	f000 f9d4 	bl	801f510 <__multadd>
 801f168:	9b00      	ldr	r3, [sp, #0]
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	4605      	mov	r5, r0
 801f16e:	dc67      	bgt.n	801f240 <_dtoa_r+0x920>
 801f170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f172:	2b02      	cmp	r3, #2
 801f174:	dc41      	bgt.n	801f1fa <_dtoa_r+0x8da>
 801f176:	e063      	b.n	801f240 <_dtoa_r+0x920>
 801f178:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f17a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f17e:	e746      	b.n	801f00e <_dtoa_r+0x6ee>
 801f180:	9b07      	ldr	r3, [sp, #28]
 801f182:	1e5c      	subs	r4, r3, #1
 801f184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f186:	42a3      	cmp	r3, r4
 801f188:	bfbf      	itttt	lt
 801f18a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f18c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f18e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f190:	1ae3      	sublt	r3, r4, r3
 801f192:	bfb4      	ite	lt
 801f194:	18d2      	addlt	r2, r2, r3
 801f196:	1b1c      	subge	r4, r3, r4
 801f198:	9b07      	ldr	r3, [sp, #28]
 801f19a:	bfbc      	itt	lt
 801f19c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801f19e:	2400      	movlt	r4, #0
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	bfb5      	itete	lt
 801f1a4:	eba8 0603 	sublt.w	r6, r8, r3
 801f1a8:	9b07      	ldrge	r3, [sp, #28]
 801f1aa:	2300      	movlt	r3, #0
 801f1ac:	4646      	movge	r6, r8
 801f1ae:	e730      	b.n	801f012 <_dtoa_r+0x6f2>
 801f1b0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f1b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f1b4:	4646      	mov	r6, r8
 801f1b6:	e735      	b.n	801f024 <_dtoa_r+0x704>
 801f1b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f1ba:	e75c      	b.n	801f076 <_dtoa_r+0x756>
 801f1bc:	2300      	movs	r3, #0
 801f1be:	e788      	b.n	801f0d2 <_dtoa_r+0x7b2>
 801f1c0:	3fe00000 	.word	0x3fe00000
 801f1c4:	40240000 	.word	0x40240000
 801f1c8:	40140000 	.word	0x40140000
 801f1cc:	9b02      	ldr	r3, [sp, #8]
 801f1ce:	e780      	b.n	801f0d2 <_dtoa_r+0x7b2>
 801f1d0:	2300      	movs	r3, #0
 801f1d2:	930a      	str	r3, [sp, #40]	@ 0x28
 801f1d4:	e782      	b.n	801f0dc <_dtoa_r+0x7bc>
 801f1d6:	d099      	beq.n	801f10c <_dtoa_r+0x7ec>
 801f1d8:	9a08      	ldr	r2, [sp, #32]
 801f1da:	331c      	adds	r3, #28
 801f1dc:	441a      	add	r2, r3
 801f1de:	4498      	add	r8, r3
 801f1e0:	441e      	add	r6, r3
 801f1e2:	9208      	str	r2, [sp, #32]
 801f1e4:	e792      	b.n	801f10c <_dtoa_r+0x7ec>
 801f1e6:	4603      	mov	r3, r0
 801f1e8:	e7f6      	b.n	801f1d8 <_dtoa_r+0x8b8>
 801f1ea:	9b07      	ldr	r3, [sp, #28]
 801f1ec:	9704      	str	r7, [sp, #16]
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	dc20      	bgt.n	801f234 <_dtoa_r+0x914>
 801f1f2:	9300      	str	r3, [sp, #0]
 801f1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1f6:	2b02      	cmp	r3, #2
 801f1f8:	dd1e      	ble.n	801f238 <_dtoa_r+0x918>
 801f1fa:	9b00      	ldr	r3, [sp, #0]
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	f47f aec0 	bne.w	801ef82 <_dtoa_r+0x662>
 801f202:	4621      	mov	r1, r4
 801f204:	2205      	movs	r2, #5
 801f206:	4658      	mov	r0, fp
 801f208:	f000 f982 	bl	801f510 <__multadd>
 801f20c:	4601      	mov	r1, r0
 801f20e:	4604      	mov	r4, r0
 801f210:	4648      	mov	r0, r9
 801f212:	f000 fb7b 	bl	801f90c <__mcmp>
 801f216:	2800      	cmp	r0, #0
 801f218:	f77f aeb3 	ble.w	801ef82 <_dtoa_r+0x662>
 801f21c:	4656      	mov	r6, sl
 801f21e:	2331      	movs	r3, #49	@ 0x31
 801f220:	f806 3b01 	strb.w	r3, [r6], #1
 801f224:	9b04      	ldr	r3, [sp, #16]
 801f226:	3301      	adds	r3, #1
 801f228:	9304      	str	r3, [sp, #16]
 801f22a:	e6ae      	b.n	801ef8a <_dtoa_r+0x66a>
 801f22c:	9c07      	ldr	r4, [sp, #28]
 801f22e:	9704      	str	r7, [sp, #16]
 801f230:	4625      	mov	r5, r4
 801f232:	e7f3      	b.n	801f21c <_dtoa_r+0x8fc>
 801f234:	9b07      	ldr	r3, [sp, #28]
 801f236:	9300      	str	r3, [sp, #0]
 801f238:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f23a:	2b00      	cmp	r3, #0
 801f23c:	f000 8101 	beq.w	801f442 <_dtoa_r+0xb22>
 801f240:	2e00      	cmp	r6, #0
 801f242:	dd05      	ble.n	801f250 <_dtoa_r+0x930>
 801f244:	4629      	mov	r1, r5
 801f246:	4632      	mov	r2, r6
 801f248:	4658      	mov	r0, fp
 801f24a:	f000 faf3 	bl	801f834 <__lshift>
 801f24e:	4605      	mov	r5, r0
 801f250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f252:	2b00      	cmp	r3, #0
 801f254:	d059      	beq.n	801f30a <_dtoa_r+0x9ea>
 801f256:	6869      	ldr	r1, [r5, #4]
 801f258:	4658      	mov	r0, fp
 801f25a:	f000 f92b 	bl	801f4b4 <_Balloc>
 801f25e:	4606      	mov	r6, r0
 801f260:	b920      	cbnz	r0, 801f26c <_dtoa_r+0x94c>
 801f262:	4b83      	ldr	r3, [pc, #524]	@ (801f470 <_dtoa_r+0xb50>)
 801f264:	4602      	mov	r2, r0
 801f266:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801f26a:	e480      	b.n	801eb6e <_dtoa_r+0x24e>
 801f26c:	692a      	ldr	r2, [r5, #16]
 801f26e:	3202      	adds	r2, #2
 801f270:	0092      	lsls	r2, r2, #2
 801f272:	f105 010c 	add.w	r1, r5, #12
 801f276:	300c      	adds	r0, #12
 801f278:	f7fa fb52 	bl	8019920 <memcpy>
 801f27c:	2201      	movs	r2, #1
 801f27e:	4631      	mov	r1, r6
 801f280:	4658      	mov	r0, fp
 801f282:	f000 fad7 	bl	801f834 <__lshift>
 801f286:	f10a 0301 	add.w	r3, sl, #1
 801f28a:	9307      	str	r3, [sp, #28]
 801f28c:	9b00      	ldr	r3, [sp, #0]
 801f28e:	4453      	add	r3, sl
 801f290:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f292:	9b02      	ldr	r3, [sp, #8]
 801f294:	f003 0301 	and.w	r3, r3, #1
 801f298:	462f      	mov	r7, r5
 801f29a:	930a      	str	r3, [sp, #40]	@ 0x28
 801f29c:	4605      	mov	r5, r0
 801f29e:	9b07      	ldr	r3, [sp, #28]
 801f2a0:	4621      	mov	r1, r4
 801f2a2:	3b01      	subs	r3, #1
 801f2a4:	4648      	mov	r0, r9
 801f2a6:	9300      	str	r3, [sp, #0]
 801f2a8:	f7ff fab0 	bl	801e80c <quorem>
 801f2ac:	4639      	mov	r1, r7
 801f2ae:	9002      	str	r0, [sp, #8]
 801f2b0:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f2b4:	4648      	mov	r0, r9
 801f2b6:	f000 fb29 	bl	801f90c <__mcmp>
 801f2ba:	462a      	mov	r2, r5
 801f2bc:	9008      	str	r0, [sp, #32]
 801f2be:	4621      	mov	r1, r4
 801f2c0:	4658      	mov	r0, fp
 801f2c2:	f000 fb3f 	bl	801f944 <__mdiff>
 801f2c6:	68c2      	ldr	r2, [r0, #12]
 801f2c8:	4606      	mov	r6, r0
 801f2ca:	bb02      	cbnz	r2, 801f30e <_dtoa_r+0x9ee>
 801f2cc:	4601      	mov	r1, r0
 801f2ce:	4648      	mov	r0, r9
 801f2d0:	f000 fb1c 	bl	801f90c <__mcmp>
 801f2d4:	4602      	mov	r2, r0
 801f2d6:	4631      	mov	r1, r6
 801f2d8:	4658      	mov	r0, fp
 801f2da:	920e      	str	r2, [sp, #56]	@ 0x38
 801f2dc:	f000 f90f 	bl	801f4fe <_Bfree>
 801f2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f2e4:	9e07      	ldr	r6, [sp, #28]
 801f2e6:	ea43 0102 	orr.w	r1, r3, r2
 801f2ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f2ec:	4319      	orrs	r1, r3
 801f2ee:	d110      	bne.n	801f312 <_dtoa_r+0x9f2>
 801f2f0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f2f4:	d029      	beq.n	801f34a <_dtoa_r+0xa2a>
 801f2f6:	9b08      	ldr	r3, [sp, #32]
 801f2f8:	2b00      	cmp	r3, #0
 801f2fa:	dd02      	ble.n	801f302 <_dtoa_r+0x9e2>
 801f2fc:	9b02      	ldr	r3, [sp, #8]
 801f2fe:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801f302:	9b00      	ldr	r3, [sp, #0]
 801f304:	f883 8000 	strb.w	r8, [r3]
 801f308:	e640      	b.n	801ef8c <_dtoa_r+0x66c>
 801f30a:	4628      	mov	r0, r5
 801f30c:	e7bb      	b.n	801f286 <_dtoa_r+0x966>
 801f30e:	2201      	movs	r2, #1
 801f310:	e7e1      	b.n	801f2d6 <_dtoa_r+0x9b6>
 801f312:	9b08      	ldr	r3, [sp, #32]
 801f314:	2b00      	cmp	r3, #0
 801f316:	db04      	blt.n	801f322 <_dtoa_r+0xa02>
 801f318:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f31a:	430b      	orrs	r3, r1
 801f31c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f31e:	430b      	orrs	r3, r1
 801f320:	d120      	bne.n	801f364 <_dtoa_r+0xa44>
 801f322:	2a00      	cmp	r2, #0
 801f324:	dded      	ble.n	801f302 <_dtoa_r+0x9e2>
 801f326:	4649      	mov	r1, r9
 801f328:	2201      	movs	r2, #1
 801f32a:	4658      	mov	r0, fp
 801f32c:	f000 fa82 	bl	801f834 <__lshift>
 801f330:	4621      	mov	r1, r4
 801f332:	4681      	mov	r9, r0
 801f334:	f000 faea 	bl	801f90c <__mcmp>
 801f338:	2800      	cmp	r0, #0
 801f33a:	dc03      	bgt.n	801f344 <_dtoa_r+0xa24>
 801f33c:	d1e1      	bne.n	801f302 <_dtoa_r+0x9e2>
 801f33e:	f018 0f01 	tst.w	r8, #1
 801f342:	d0de      	beq.n	801f302 <_dtoa_r+0x9e2>
 801f344:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f348:	d1d8      	bne.n	801f2fc <_dtoa_r+0x9dc>
 801f34a:	9a00      	ldr	r2, [sp, #0]
 801f34c:	2339      	movs	r3, #57	@ 0x39
 801f34e:	7013      	strb	r3, [r2, #0]
 801f350:	4633      	mov	r3, r6
 801f352:	461e      	mov	r6, r3
 801f354:	3b01      	subs	r3, #1
 801f356:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801f35a:	2a39      	cmp	r2, #57	@ 0x39
 801f35c:	d052      	beq.n	801f404 <_dtoa_r+0xae4>
 801f35e:	3201      	adds	r2, #1
 801f360:	701a      	strb	r2, [r3, #0]
 801f362:	e613      	b.n	801ef8c <_dtoa_r+0x66c>
 801f364:	2a00      	cmp	r2, #0
 801f366:	dd07      	ble.n	801f378 <_dtoa_r+0xa58>
 801f368:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f36c:	d0ed      	beq.n	801f34a <_dtoa_r+0xa2a>
 801f36e:	9a00      	ldr	r2, [sp, #0]
 801f370:	f108 0301 	add.w	r3, r8, #1
 801f374:	7013      	strb	r3, [r2, #0]
 801f376:	e609      	b.n	801ef8c <_dtoa_r+0x66c>
 801f378:	9b07      	ldr	r3, [sp, #28]
 801f37a:	9a07      	ldr	r2, [sp, #28]
 801f37c:	f803 8c01 	strb.w	r8, [r3, #-1]
 801f380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f382:	4293      	cmp	r3, r2
 801f384:	d028      	beq.n	801f3d8 <_dtoa_r+0xab8>
 801f386:	4649      	mov	r1, r9
 801f388:	2300      	movs	r3, #0
 801f38a:	220a      	movs	r2, #10
 801f38c:	4658      	mov	r0, fp
 801f38e:	f000 f8bf 	bl	801f510 <__multadd>
 801f392:	42af      	cmp	r7, r5
 801f394:	4681      	mov	r9, r0
 801f396:	f04f 0300 	mov.w	r3, #0
 801f39a:	f04f 020a 	mov.w	r2, #10
 801f39e:	4639      	mov	r1, r7
 801f3a0:	4658      	mov	r0, fp
 801f3a2:	d107      	bne.n	801f3b4 <_dtoa_r+0xa94>
 801f3a4:	f000 f8b4 	bl	801f510 <__multadd>
 801f3a8:	4607      	mov	r7, r0
 801f3aa:	4605      	mov	r5, r0
 801f3ac:	9b07      	ldr	r3, [sp, #28]
 801f3ae:	3301      	adds	r3, #1
 801f3b0:	9307      	str	r3, [sp, #28]
 801f3b2:	e774      	b.n	801f29e <_dtoa_r+0x97e>
 801f3b4:	f000 f8ac 	bl	801f510 <__multadd>
 801f3b8:	4629      	mov	r1, r5
 801f3ba:	4607      	mov	r7, r0
 801f3bc:	2300      	movs	r3, #0
 801f3be:	220a      	movs	r2, #10
 801f3c0:	4658      	mov	r0, fp
 801f3c2:	f000 f8a5 	bl	801f510 <__multadd>
 801f3c6:	4605      	mov	r5, r0
 801f3c8:	e7f0      	b.n	801f3ac <_dtoa_r+0xa8c>
 801f3ca:	9b00      	ldr	r3, [sp, #0]
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	bfcc      	ite	gt
 801f3d0:	461e      	movgt	r6, r3
 801f3d2:	2601      	movle	r6, #1
 801f3d4:	4456      	add	r6, sl
 801f3d6:	2700      	movs	r7, #0
 801f3d8:	4649      	mov	r1, r9
 801f3da:	2201      	movs	r2, #1
 801f3dc:	4658      	mov	r0, fp
 801f3de:	f000 fa29 	bl	801f834 <__lshift>
 801f3e2:	4621      	mov	r1, r4
 801f3e4:	4681      	mov	r9, r0
 801f3e6:	f000 fa91 	bl	801f90c <__mcmp>
 801f3ea:	2800      	cmp	r0, #0
 801f3ec:	dcb0      	bgt.n	801f350 <_dtoa_r+0xa30>
 801f3ee:	d102      	bne.n	801f3f6 <_dtoa_r+0xad6>
 801f3f0:	f018 0f01 	tst.w	r8, #1
 801f3f4:	d1ac      	bne.n	801f350 <_dtoa_r+0xa30>
 801f3f6:	4633      	mov	r3, r6
 801f3f8:	461e      	mov	r6, r3
 801f3fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f3fe:	2a30      	cmp	r2, #48	@ 0x30
 801f400:	d0fa      	beq.n	801f3f8 <_dtoa_r+0xad8>
 801f402:	e5c3      	b.n	801ef8c <_dtoa_r+0x66c>
 801f404:	459a      	cmp	sl, r3
 801f406:	d1a4      	bne.n	801f352 <_dtoa_r+0xa32>
 801f408:	9b04      	ldr	r3, [sp, #16]
 801f40a:	3301      	adds	r3, #1
 801f40c:	9304      	str	r3, [sp, #16]
 801f40e:	2331      	movs	r3, #49	@ 0x31
 801f410:	f88a 3000 	strb.w	r3, [sl]
 801f414:	e5ba      	b.n	801ef8c <_dtoa_r+0x66c>
 801f416:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f418:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801f474 <_dtoa_r+0xb54>
 801f41c:	2b00      	cmp	r3, #0
 801f41e:	f43f aab6 	beq.w	801e98e <_dtoa_r+0x6e>
 801f422:	f10a 0308 	add.w	r3, sl, #8
 801f426:	f7ff bab0 	b.w	801e98a <_dtoa_r+0x6a>
 801f42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f42c:	2b01      	cmp	r3, #1
 801f42e:	f77f ae3a 	ble.w	801f0a6 <_dtoa_r+0x786>
 801f432:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f434:	930a      	str	r3, [sp, #40]	@ 0x28
 801f436:	2001      	movs	r0, #1
 801f438:	e658      	b.n	801f0ec <_dtoa_r+0x7cc>
 801f43a:	9b00      	ldr	r3, [sp, #0]
 801f43c:	2b00      	cmp	r3, #0
 801f43e:	f77f aed9 	ble.w	801f1f4 <_dtoa_r+0x8d4>
 801f442:	4656      	mov	r6, sl
 801f444:	4621      	mov	r1, r4
 801f446:	4648      	mov	r0, r9
 801f448:	f7ff f9e0 	bl	801e80c <quorem>
 801f44c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f450:	f806 8b01 	strb.w	r8, [r6], #1
 801f454:	9b00      	ldr	r3, [sp, #0]
 801f456:	eba6 020a 	sub.w	r2, r6, sl
 801f45a:	4293      	cmp	r3, r2
 801f45c:	ddb5      	ble.n	801f3ca <_dtoa_r+0xaaa>
 801f45e:	4649      	mov	r1, r9
 801f460:	2300      	movs	r3, #0
 801f462:	220a      	movs	r2, #10
 801f464:	4658      	mov	r0, fp
 801f466:	f000 f853 	bl	801f510 <__multadd>
 801f46a:	4681      	mov	r9, r0
 801f46c:	e7ea      	b.n	801f444 <_dtoa_r+0xb24>
 801f46e:	bf00      	nop
 801f470:	08021593 	.word	0x08021593
 801f474:	08021586 	.word	0x08021586

0801f478 <__env_lock>:
 801f478:	4801      	ldr	r0, [pc, #4]	@ (801f480 <__env_lock+0x8>)
 801f47a:	f7fa ba3a 	b.w	80198f2 <__retarget_lock_acquire_recursive>
 801f47e:	bf00      	nop
 801f480:	200021c1 	.word	0x200021c1

0801f484 <__env_unlock>:
 801f484:	4801      	ldr	r0, [pc, #4]	@ (801f48c <__env_unlock+0x8>)
 801f486:	f7fa ba36 	b.w	80198f6 <__retarget_lock_release_recursive>
 801f48a:	bf00      	nop
 801f48c:	200021c1 	.word	0x200021c1

0801f490 <__ascii_mbtowc>:
 801f490:	b082      	sub	sp, #8
 801f492:	b901      	cbnz	r1, 801f496 <__ascii_mbtowc+0x6>
 801f494:	a901      	add	r1, sp, #4
 801f496:	b142      	cbz	r2, 801f4aa <__ascii_mbtowc+0x1a>
 801f498:	b14b      	cbz	r3, 801f4ae <__ascii_mbtowc+0x1e>
 801f49a:	7813      	ldrb	r3, [r2, #0]
 801f49c:	600b      	str	r3, [r1, #0]
 801f49e:	7812      	ldrb	r2, [r2, #0]
 801f4a0:	1e10      	subs	r0, r2, #0
 801f4a2:	bf18      	it	ne
 801f4a4:	2001      	movne	r0, #1
 801f4a6:	b002      	add	sp, #8
 801f4a8:	4770      	bx	lr
 801f4aa:	4610      	mov	r0, r2
 801f4ac:	e7fb      	b.n	801f4a6 <__ascii_mbtowc+0x16>
 801f4ae:	f06f 0001 	mvn.w	r0, #1
 801f4b2:	e7f8      	b.n	801f4a6 <__ascii_mbtowc+0x16>

0801f4b4 <_Balloc>:
 801f4b4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801f4b6:	b570      	push	{r4, r5, r6, lr}
 801f4b8:	4605      	mov	r5, r0
 801f4ba:	460c      	mov	r4, r1
 801f4bc:	b17b      	cbz	r3, 801f4de <_Balloc+0x2a>
 801f4be:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801f4c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f4c4:	b9a0      	cbnz	r0, 801f4f0 <_Balloc+0x3c>
 801f4c6:	2101      	movs	r1, #1
 801f4c8:	fa01 f604 	lsl.w	r6, r1, r4
 801f4cc:	1d72      	adds	r2, r6, #5
 801f4ce:	0092      	lsls	r2, r2, #2
 801f4d0:	4628      	mov	r0, r5
 801f4d2:	f001 f82d 	bl	8020530 <_calloc_r>
 801f4d6:	b148      	cbz	r0, 801f4ec <_Balloc+0x38>
 801f4d8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801f4dc:	e00b      	b.n	801f4f6 <_Balloc+0x42>
 801f4de:	2221      	movs	r2, #33	@ 0x21
 801f4e0:	2104      	movs	r1, #4
 801f4e2:	f001 f825 	bl	8020530 <_calloc_r>
 801f4e6:	6468      	str	r0, [r5, #68]	@ 0x44
 801f4e8:	2800      	cmp	r0, #0
 801f4ea:	d1e8      	bne.n	801f4be <_Balloc+0xa>
 801f4ec:	2000      	movs	r0, #0
 801f4ee:	bd70      	pop	{r4, r5, r6, pc}
 801f4f0:	6802      	ldr	r2, [r0, #0]
 801f4f2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801f4f6:	2300      	movs	r3, #0
 801f4f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f4fc:	e7f7      	b.n	801f4ee <_Balloc+0x3a>

0801f4fe <_Bfree>:
 801f4fe:	b131      	cbz	r1, 801f50e <_Bfree+0x10>
 801f500:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801f502:	684a      	ldr	r2, [r1, #4]
 801f504:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f508:	6008      	str	r0, [r1, #0]
 801f50a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801f50e:	4770      	bx	lr

0801f510 <__multadd>:
 801f510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f514:	690d      	ldr	r5, [r1, #16]
 801f516:	4607      	mov	r7, r0
 801f518:	460c      	mov	r4, r1
 801f51a:	461e      	mov	r6, r3
 801f51c:	f101 0c14 	add.w	ip, r1, #20
 801f520:	2000      	movs	r0, #0
 801f522:	f8dc 3000 	ldr.w	r3, [ip]
 801f526:	b299      	uxth	r1, r3
 801f528:	fb02 6101 	mla	r1, r2, r1, r6
 801f52c:	0c1e      	lsrs	r6, r3, #16
 801f52e:	0c0b      	lsrs	r3, r1, #16
 801f530:	fb02 3306 	mla	r3, r2, r6, r3
 801f534:	b289      	uxth	r1, r1
 801f536:	3001      	adds	r0, #1
 801f538:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f53c:	4285      	cmp	r5, r0
 801f53e:	f84c 1b04 	str.w	r1, [ip], #4
 801f542:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f546:	dcec      	bgt.n	801f522 <__multadd+0x12>
 801f548:	b30e      	cbz	r6, 801f58e <__multadd+0x7e>
 801f54a:	68a3      	ldr	r3, [r4, #8]
 801f54c:	42ab      	cmp	r3, r5
 801f54e:	dc19      	bgt.n	801f584 <__multadd+0x74>
 801f550:	6861      	ldr	r1, [r4, #4]
 801f552:	4638      	mov	r0, r7
 801f554:	3101      	adds	r1, #1
 801f556:	f7ff ffad 	bl	801f4b4 <_Balloc>
 801f55a:	4680      	mov	r8, r0
 801f55c:	b928      	cbnz	r0, 801f56a <__multadd+0x5a>
 801f55e:	4602      	mov	r2, r0
 801f560:	4b0c      	ldr	r3, [pc, #48]	@ (801f594 <__multadd+0x84>)
 801f562:	480d      	ldr	r0, [pc, #52]	@ (801f598 <__multadd+0x88>)
 801f564:	21ba      	movs	r1, #186	@ 0xba
 801f566:	f000 ffc5 	bl	80204f4 <__assert_func>
 801f56a:	6922      	ldr	r2, [r4, #16]
 801f56c:	3202      	adds	r2, #2
 801f56e:	f104 010c 	add.w	r1, r4, #12
 801f572:	0092      	lsls	r2, r2, #2
 801f574:	300c      	adds	r0, #12
 801f576:	f7fa f9d3 	bl	8019920 <memcpy>
 801f57a:	4621      	mov	r1, r4
 801f57c:	4638      	mov	r0, r7
 801f57e:	f7ff ffbe 	bl	801f4fe <_Bfree>
 801f582:	4644      	mov	r4, r8
 801f584:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f588:	3501      	adds	r5, #1
 801f58a:	615e      	str	r6, [r3, #20]
 801f58c:	6125      	str	r5, [r4, #16]
 801f58e:	4620      	mov	r0, r4
 801f590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f594:	08021593 	.word	0x08021593
 801f598:	080215fc 	.word	0x080215fc

0801f59c <__hi0bits>:
 801f59c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f5a0:	4603      	mov	r3, r0
 801f5a2:	bf36      	itet	cc
 801f5a4:	0403      	lslcc	r3, r0, #16
 801f5a6:	2000      	movcs	r0, #0
 801f5a8:	2010      	movcc	r0, #16
 801f5aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f5ae:	bf3c      	itt	cc
 801f5b0:	021b      	lslcc	r3, r3, #8
 801f5b2:	3008      	addcc	r0, #8
 801f5b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f5b8:	bf3c      	itt	cc
 801f5ba:	011b      	lslcc	r3, r3, #4
 801f5bc:	3004      	addcc	r0, #4
 801f5be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f5c2:	bf3c      	itt	cc
 801f5c4:	009b      	lslcc	r3, r3, #2
 801f5c6:	3002      	addcc	r0, #2
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	db05      	blt.n	801f5d8 <__hi0bits+0x3c>
 801f5cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801f5d0:	f100 0001 	add.w	r0, r0, #1
 801f5d4:	bf08      	it	eq
 801f5d6:	2020      	moveq	r0, #32
 801f5d8:	4770      	bx	lr

0801f5da <__lo0bits>:
 801f5da:	6803      	ldr	r3, [r0, #0]
 801f5dc:	4602      	mov	r2, r0
 801f5de:	f013 0007 	ands.w	r0, r3, #7
 801f5e2:	d00b      	beq.n	801f5fc <__lo0bits+0x22>
 801f5e4:	07d9      	lsls	r1, r3, #31
 801f5e6:	d421      	bmi.n	801f62c <__lo0bits+0x52>
 801f5e8:	0798      	lsls	r0, r3, #30
 801f5ea:	bf49      	itett	mi
 801f5ec:	085b      	lsrmi	r3, r3, #1
 801f5ee:	089b      	lsrpl	r3, r3, #2
 801f5f0:	2001      	movmi	r0, #1
 801f5f2:	6013      	strmi	r3, [r2, #0]
 801f5f4:	bf5c      	itt	pl
 801f5f6:	6013      	strpl	r3, [r2, #0]
 801f5f8:	2002      	movpl	r0, #2
 801f5fa:	4770      	bx	lr
 801f5fc:	b299      	uxth	r1, r3
 801f5fe:	b909      	cbnz	r1, 801f604 <__lo0bits+0x2a>
 801f600:	0c1b      	lsrs	r3, r3, #16
 801f602:	2010      	movs	r0, #16
 801f604:	b2d9      	uxtb	r1, r3
 801f606:	b909      	cbnz	r1, 801f60c <__lo0bits+0x32>
 801f608:	3008      	adds	r0, #8
 801f60a:	0a1b      	lsrs	r3, r3, #8
 801f60c:	0719      	lsls	r1, r3, #28
 801f60e:	bf04      	itt	eq
 801f610:	091b      	lsreq	r3, r3, #4
 801f612:	3004      	addeq	r0, #4
 801f614:	0799      	lsls	r1, r3, #30
 801f616:	bf04      	itt	eq
 801f618:	089b      	lsreq	r3, r3, #2
 801f61a:	3002      	addeq	r0, #2
 801f61c:	07d9      	lsls	r1, r3, #31
 801f61e:	d403      	bmi.n	801f628 <__lo0bits+0x4e>
 801f620:	085b      	lsrs	r3, r3, #1
 801f622:	f100 0001 	add.w	r0, r0, #1
 801f626:	d003      	beq.n	801f630 <__lo0bits+0x56>
 801f628:	6013      	str	r3, [r2, #0]
 801f62a:	4770      	bx	lr
 801f62c:	2000      	movs	r0, #0
 801f62e:	4770      	bx	lr
 801f630:	2020      	movs	r0, #32
 801f632:	4770      	bx	lr

0801f634 <__i2b>:
 801f634:	b510      	push	{r4, lr}
 801f636:	460c      	mov	r4, r1
 801f638:	2101      	movs	r1, #1
 801f63a:	f7ff ff3b 	bl	801f4b4 <_Balloc>
 801f63e:	4602      	mov	r2, r0
 801f640:	b928      	cbnz	r0, 801f64e <__i2b+0x1a>
 801f642:	4b05      	ldr	r3, [pc, #20]	@ (801f658 <__i2b+0x24>)
 801f644:	4805      	ldr	r0, [pc, #20]	@ (801f65c <__i2b+0x28>)
 801f646:	f240 1145 	movw	r1, #325	@ 0x145
 801f64a:	f000 ff53 	bl	80204f4 <__assert_func>
 801f64e:	2301      	movs	r3, #1
 801f650:	6144      	str	r4, [r0, #20]
 801f652:	6103      	str	r3, [r0, #16]
 801f654:	bd10      	pop	{r4, pc}
 801f656:	bf00      	nop
 801f658:	08021593 	.word	0x08021593
 801f65c:	080215fc 	.word	0x080215fc

0801f660 <__multiply>:
 801f660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f664:	4614      	mov	r4, r2
 801f666:	690a      	ldr	r2, [r1, #16]
 801f668:	6923      	ldr	r3, [r4, #16]
 801f66a:	429a      	cmp	r2, r3
 801f66c:	bfa8      	it	ge
 801f66e:	4623      	movge	r3, r4
 801f670:	460f      	mov	r7, r1
 801f672:	bfa4      	itt	ge
 801f674:	460c      	movge	r4, r1
 801f676:	461f      	movge	r7, r3
 801f678:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f67c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801f680:	68a3      	ldr	r3, [r4, #8]
 801f682:	6861      	ldr	r1, [r4, #4]
 801f684:	eb0a 0609 	add.w	r6, sl, r9
 801f688:	42b3      	cmp	r3, r6
 801f68a:	b085      	sub	sp, #20
 801f68c:	bfb8      	it	lt
 801f68e:	3101      	addlt	r1, #1
 801f690:	f7ff ff10 	bl	801f4b4 <_Balloc>
 801f694:	b930      	cbnz	r0, 801f6a4 <__multiply+0x44>
 801f696:	4602      	mov	r2, r0
 801f698:	4b44      	ldr	r3, [pc, #272]	@ (801f7ac <__multiply+0x14c>)
 801f69a:	4845      	ldr	r0, [pc, #276]	@ (801f7b0 <__multiply+0x150>)
 801f69c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801f6a0:	f000 ff28 	bl	80204f4 <__assert_func>
 801f6a4:	f100 0514 	add.w	r5, r0, #20
 801f6a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f6ac:	462b      	mov	r3, r5
 801f6ae:	2200      	movs	r2, #0
 801f6b0:	4543      	cmp	r3, r8
 801f6b2:	d321      	bcc.n	801f6f8 <__multiply+0x98>
 801f6b4:	f107 0114 	add.w	r1, r7, #20
 801f6b8:	f104 0214 	add.w	r2, r4, #20
 801f6bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801f6c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801f6c4:	9302      	str	r3, [sp, #8]
 801f6c6:	1b13      	subs	r3, r2, r4
 801f6c8:	3b15      	subs	r3, #21
 801f6ca:	f023 0303 	bic.w	r3, r3, #3
 801f6ce:	3304      	adds	r3, #4
 801f6d0:	f104 0715 	add.w	r7, r4, #21
 801f6d4:	42ba      	cmp	r2, r7
 801f6d6:	bf38      	it	cc
 801f6d8:	2304      	movcc	r3, #4
 801f6da:	9301      	str	r3, [sp, #4]
 801f6dc:	9b02      	ldr	r3, [sp, #8]
 801f6de:	9103      	str	r1, [sp, #12]
 801f6e0:	428b      	cmp	r3, r1
 801f6e2:	d80c      	bhi.n	801f6fe <__multiply+0x9e>
 801f6e4:	2e00      	cmp	r6, #0
 801f6e6:	dd03      	ble.n	801f6f0 <__multiply+0x90>
 801f6e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f6ec:	2b00      	cmp	r3, #0
 801f6ee:	d05b      	beq.n	801f7a8 <__multiply+0x148>
 801f6f0:	6106      	str	r6, [r0, #16]
 801f6f2:	b005      	add	sp, #20
 801f6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6f8:	f843 2b04 	str.w	r2, [r3], #4
 801f6fc:	e7d8      	b.n	801f6b0 <__multiply+0x50>
 801f6fe:	f8b1 a000 	ldrh.w	sl, [r1]
 801f702:	f1ba 0f00 	cmp.w	sl, #0
 801f706:	d024      	beq.n	801f752 <__multiply+0xf2>
 801f708:	f104 0e14 	add.w	lr, r4, #20
 801f70c:	46a9      	mov	r9, r5
 801f70e:	f04f 0c00 	mov.w	ip, #0
 801f712:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f716:	f8d9 3000 	ldr.w	r3, [r9]
 801f71a:	fa1f fb87 	uxth.w	fp, r7
 801f71e:	b29b      	uxth	r3, r3
 801f720:	fb0a 330b 	mla	r3, sl, fp, r3
 801f724:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801f728:	f8d9 7000 	ldr.w	r7, [r9]
 801f72c:	4463      	add	r3, ip
 801f72e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f732:	fb0a c70b 	mla	r7, sl, fp, ip
 801f736:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801f73a:	b29b      	uxth	r3, r3
 801f73c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f740:	4572      	cmp	r2, lr
 801f742:	f849 3b04 	str.w	r3, [r9], #4
 801f746:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f74a:	d8e2      	bhi.n	801f712 <__multiply+0xb2>
 801f74c:	9b01      	ldr	r3, [sp, #4]
 801f74e:	f845 c003 	str.w	ip, [r5, r3]
 801f752:	9b03      	ldr	r3, [sp, #12]
 801f754:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801f758:	3104      	adds	r1, #4
 801f75a:	f1b9 0f00 	cmp.w	r9, #0
 801f75e:	d021      	beq.n	801f7a4 <__multiply+0x144>
 801f760:	682b      	ldr	r3, [r5, #0]
 801f762:	f104 0c14 	add.w	ip, r4, #20
 801f766:	46ae      	mov	lr, r5
 801f768:	f04f 0a00 	mov.w	sl, #0
 801f76c:	f8bc b000 	ldrh.w	fp, [ip]
 801f770:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801f774:	fb09 770b 	mla	r7, r9, fp, r7
 801f778:	4457      	add	r7, sl
 801f77a:	b29b      	uxth	r3, r3
 801f77c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f780:	f84e 3b04 	str.w	r3, [lr], #4
 801f784:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f788:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f78c:	f8be 3000 	ldrh.w	r3, [lr]
 801f790:	fb09 330a 	mla	r3, r9, sl, r3
 801f794:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801f798:	4562      	cmp	r2, ip
 801f79a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f79e:	d8e5      	bhi.n	801f76c <__multiply+0x10c>
 801f7a0:	9f01      	ldr	r7, [sp, #4]
 801f7a2:	51eb      	str	r3, [r5, r7]
 801f7a4:	3504      	adds	r5, #4
 801f7a6:	e799      	b.n	801f6dc <__multiply+0x7c>
 801f7a8:	3e01      	subs	r6, #1
 801f7aa:	e79b      	b.n	801f6e4 <__multiply+0x84>
 801f7ac:	08021593 	.word	0x08021593
 801f7b0:	080215fc 	.word	0x080215fc

0801f7b4 <__pow5mult>:
 801f7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f7b8:	4615      	mov	r5, r2
 801f7ba:	f012 0203 	ands.w	r2, r2, #3
 801f7be:	4607      	mov	r7, r0
 801f7c0:	460e      	mov	r6, r1
 801f7c2:	d007      	beq.n	801f7d4 <__pow5mult+0x20>
 801f7c4:	4c1a      	ldr	r4, [pc, #104]	@ (801f830 <__pow5mult+0x7c>)
 801f7c6:	3a01      	subs	r2, #1
 801f7c8:	2300      	movs	r3, #0
 801f7ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f7ce:	f7ff fe9f 	bl	801f510 <__multadd>
 801f7d2:	4606      	mov	r6, r0
 801f7d4:	10ad      	asrs	r5, r5, #2
 801f7d6:	d027      	beq.n	801f828 <__pow5mult+0x74>
 801f7d8:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 801f7da:	b944      	cbnz	r4, 801f7ee <__pow5mult+0x3a>
 801f7dc:	f240 2171 	movw	r1, #625	@ 0x271
 801f7e0:	4638      	mov	r0, r7
 801f7e2:	f7ff ff27 	bl	801f634 <__i2b>
 801f7e6:	2300      	movs	r3, #0
 801f7e8:	6438      	str	r0, [r7, #64]	@ 0x40
 801f7ea:	4604      	mov	r4, r0
 801f7ec:	6003      	str	r3, [r0, #0]
 801f7ee:	f04f 0900 	mov.w	r9, #0
 801f7f2:	07eb      	lsls	r3, r5, #31
 801f7f4:	d50a      	bpl.n	801f80c <__pow5mult+0x58>
 801f7f6:	4631      	mov	r1, r6
 801f7f8:	4622      	mov	r2, r4
 801f7fa:	4638      	mov	r0, r7
 801f7fc:	f7ff ff30 	bl	801f660 <__multiply>
 801f800:	4631      	mov	r1, r6
 801f802:	4680      	mov	r8, r0
 801f804:	4638      	mov	r0, r7
 801f806:	f7ff fe7a 	bl	801f4fe <_Bfree>
 801f80a:	4646      	mov	r6, r8
 801f80c:	106d      	asrs	r5, r5, #1
 801f80e:	d00b      	beq.n	801f828 <__pow5mult+0x74>
 801f810:	6820      	ldr	r0, [r4, #0]
 801f812:	b938      	cbnz	r0, 801f824 <__pow5mult+0x70>
 801f814:	4622      	mov	r2, r4
 801f816:	4621      	mov	r1, r4
 801f818:	4638      	mov	r0, r7
 801f81a:	f7ff ff21 	bl	801f660 <__multiply>
 801f81e:	6020      	str	r0, [r4, #0]
 801f820:	f8c0 9000 	str.w	r9, [r0]
 801f824:	4604      	mov	r4, r0
 801f826:	e7e4      	b.n	801f7f2 <__pow5mult+0x3e>
 801f828:	4630      	mov	r0, r6
 801f82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f82e:	bf00      	nop
 801f830:	08021658 	.word	0x08021658

0801f834 <__lshift>:
 801f834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f838:	460c      	mov	r4, r1
 801f83a:	6849      	ldr	r1, [r1, #4]
 801f83c:	6923      	ldr	r3, [r4, #16]
 801f83e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f842:	68a3      	ldr	r3, [r4, #8]
 801f844:	4607      	mov	r7, r0
 801f846:	4691      	mov	r9, r2
 801f848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f84c:	f108 0601 	add.w	r6, r8, #1
 801f850:	42b3      	cmp	r3, r6
 801f852:	db0b      	blt.n	801f86c <__lshift+0x38>
 801f854:	4638      	mov	r0, r7
 801f856:	f7ff fe2d 	bl	801f4b4 <_Balloc>
 801f85a:	4605      	mov	r5, r0
 801f85c:	b948      	cbnz	r0, 801f872 <__lshift+0x3e>
 801f85e:	4602      	mov	r2, r0
 801f860:	4b28      	ldr	r3, [pc, #160]	@ (801f904 <__lshift+0xd0>)
 801f862:	4829      	ldr	r0, [pc, #164]	@ (801f908 <__lshift+0xd4>)
 801f864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801f868:	f000 fe44 	bl	80204f4 <__assert_func>
 801f86c:	3101      	adds	r1, #1
 801f86e:	005b      	lsls	r3, r3, #1
 801f870:	e7ee      	b.n	801f850 <__lshift+0x1c>
 801f872:	2300      	movs	r3, #0
 801f874:	f100 0114 	add.w	r1, r0, #20
 801f878:	f100 0210 	add.w	r2, r0, #16
 801f87c:	4618      	mov	r0, r3
 801f87e:	4553      	cmp	r3, sl
 801f880:	db33      	blt.n	801f8ea <__lshift+0xb6>
 801f882:	6920      	ldr	r0, [r4, #16]
 801f884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f888:	f104 0314 	add.w	r3, r4, #20
 801f88c:	f019 091f 	ands.w	r9, r9, #31
 801f890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f898:	d02b      	beq.n	801f8f2 <__lshift+0xbe>
 801f89a:	f1c9 0e20 	rsb	lr, r9, #32
 801f89e:	468a      	mov	sl, r1
 801f8a0:	2200      	movs	r2, #0
 801f8a2:	6818      	ldr	r0, [r3, #0]
 801f8a4:	fa00 f009 	lsl.w	r0, r0, r9
 801f8a8:	4310      	orrs	r0, r2
 801f8aa:	f84a 0b04 	str.w	r0, [sl], #4
 801f8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801f8b2:	459c      	cmp	ip, r3
 801f8b4:	fa22 f20e 	lsr.w	r2, r2, lr
 801f8b8:	d8f3      	bhi.n	801f8a2 <__lshift+0x6e>
 801f8ba:	ebac 0304 	sub.w	r3, ip, r4
 801f8be:	3b15      	subs	r3, #21
 801f8c0:	f023 0303 	bic.w	r3, r3, #3
 801f8c4:	3304      	adds	r3, #4
 801f8c6:	f104 0015 	add.w	r0, r4, #21
 801f8ca:	4584      	cmp	ip, r0
 801f8cc:	bf38      	it	cc
 801f8ce:	2304      	movcc	r3, #4
 801f8d0:	50ca      	str	r2, [r1, r3]
 801f8d2:	b10a      	cbz	r2, 801f8d8 <__lshift+0xa4>
 801f8d4:	f108 0602 	add.w	r6, r8, #2
 801f8d8:	3e01      	subs	r6, #1
 801f8da:	4638      	mov	r0, r7
 801f8dc:	612e      	str	r6, [r5, #16]
 801f8de:	4621      	mov	r1, r4
 801f8e0:	f7ff fe0d 	bl	801f4fe <_Bfree>
 801f8e4:	4628      	mov	r0, r5
 801f8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f8ea:	f842 0f04 	str.w	r0, [r2, #4]!
 801f8ee:	3301      	adds	r3, #1
 801f8f0:	e7c5      	b.n	801f87e <__lshift+0x4a>
 801f8f2:	3904      	subs	r1, #4
 801f8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801f8f8:	f841 2f04 	str.w	r2, [r1, #4]!
 801f8fc:	459c      	cmp	ip, r3
 801f8fe:	d8f9      	bhi.n	801f8f4 <__lshift+0xc0>
 801f900:	e7ea      	b.n	801f8d8 <__lshift+0xa4>
 801f902:	bf00      	nop
 801f904:	08021593 	.word	0x08021593
 801f908:	080215fc 	.word	0x080215fc

0801f90c <__mcmp>:
 801f90c:	690a      	ldr	r2, [r1, #16]
 801f90e:	4603      	mov	r3, r0
 801f910:	6900      	ldr	r0, [r0, #16]
 801f912:	1a80      	subs	r0, r0, r2
 801f914:	b530      	push	{r4, r5, lr}
 801f916:	d10e      	bne.n	801f936 <__mcmp+0x2a>
 801f918:	3314      	adds	r3, #20
 801f91a:	3114      	adds	r1, #20
 801f91c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f92c:	4295      	cmp	r5, r2
 801f92e:	d003      	beq.n	801f938 <__mcmp+0x2c>
 801f930:	d205      	bcs.n	801f93e <__mcmp+0x32>
 801f932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f936:	bd30      	pop	{r4, r5, pc}
 801f938:	42a3      	cmp	r3, r4
 801f93a:	d3f3      	bcc.n	801f924 <__mcmp+0x18>
 801f93c:	e7fb      	b.n	801f936 <__mcmp+0x2a>
 801f93e:	2001      	movs	r0, #1
 801f940:	e7f9      	b.n	801f936 <__mcmp+0x2a>
	...

0801f944 <__mdiff>:
 801f944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f948:	4689      	mov	r9, r1
 801f94a:	4606      	mov	r6, r0
 801f94c:	4611      	mov	r1, r2
 801f94e:	4648      	mov	r0, r9
 801f950:	4614      	mov	r4, r2
 801f952:	f7ff ffdb 	bl	801f90c <__mcmp>
 801f956:	1e05      	subs	r5, r0, #0
 801f958:	d112      	bne.n	801f980 <__mdiff+0x3c>
 801f95a:	4629      	mov	r1, r5
 801f95c:	4630      	mov	r0, r6
 801f95e:	f7ff fda9 	bl	801f4b4 <_Balloc>
 801f962:	4602      	mov	r2, r0
 801f964:	b928      	cbnz	r0, 801f972 <__mdiff+0x2e>
 801f966:	4b3f      	ldr	r3, [pc, #252]	@ (801fa64 <__mdiff+0x120>)
 801f968:	f240 2137 	movw	r1, #567	@ 0x237
 801f96c:	483e      	ldr	r0, [pc, #248]	@ (801fa68 <__mdiff+0x124>)
 801f96e:	f000 fdc1 	bl	80204f4 <__assert_func>
 801f972:	2301      	movs	r3, #1
 801f974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f978:	4610      	mov	r0, r2
 801f97a:	b003      	add	sp, #12
 801f97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f980:	bfbc      	itt	lt
 801f982:	464b      	movlt	r3, r9
 801f984:	46a1      	movlt	r9, r4
 801f986:	4630      	mov	r0, r6
 801f988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f98c:	bfba      	itte	lt
 801f98e:	461c      	movlt	r4, r3
 801f990:	2501      	movlt	r5, #1
 801f992:	2500      	movge	r5, #0
 801f994:	f7ff fd8e 	bl	801f4b4 <_Balloc>
 801f998:	4602      	mov	r2, r0
 801f99a:	b918      	cbnz	r0, 801f9a4 <__mdiff+0x60>
 801f99c:	4b31      	ldr	r3, [pc, #196]	@ (801fa64 <__mdiff+0x120>)
 801f99e:	f240 2145 	movw	r1, #581	@ 0x245
 801f9a2:	e7e3      	b.n	801f96c <__mdiff+0x28>
 801f9a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f9a8:	6926      	ldr	r6, [r4, #16]
 801f9aa:	60c5      	str	r5, [r0, #12]
 801f9ac:	f109 0310 	add.w	r3, r9, #16
 801f9b0:	f109 0514 	add.w	r5, r9, #20
 801f9b4:	f104 0e14 	add.w	lr, r4, #20
 801f9b8:	f100 0b14 	add.w	fp, r0, #20
 801f9bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f9c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f9c4:	9301      	str	r3, [sp, #4]
 801f9c6:	46d9      	mov	r9, fp
 801f9c8:	f04f 0c00 	mov.w	ip, #0
 801f9cc:	9b01      	ldr	r3, [sp, #4]
 801f9ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f9d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f9d6:	9301      	str	r3, [sp, #4]
 801f9d8:	fa1f f38a 	uxth.w	r3, sl
 801f9dc:	4619      	mov	r1, r3
 801f9de:	b283      	uxth	r3, r0
 801f9e0:	1acb      	subs	r3, r1, r3
 801f9e2:	0c00      	lsrs	r0, r0, #16
 801f9e4:	4463      	add	r3, ip
 801f9e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f9ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f9ee:	b29b      	uxth	r3, r3
 801f9f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f9f4:	4576      	cmp	r6, lr
 801f9f6:	f849 3b04 	str.w	r3, [r9], #4
 801f9fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f9fe:	d8e5      	bhi.n	801f9cc <__mdiff+0x88>
 801fa00:	1b33      	subs	r3, r6, r4
 801fa02:	3b15      	subs	r3, #21
 801fa04:	f023 0303 	bic.w	r3, r3, #3
 801fa08:	3415      	adds	r4, #21
 801fa0a:	3304      	adds	r3, #4
 801fa0c:	42a6      	cmp	r6, r4
 801fa0e:	bf38      	it	cc
 801fa10:	2304      	movcc	r3, #4
 801fa12:	441d      	add	r5, r3
 801fa14:	445b      	add	r3, fp
 801fa16:	461e      	mov	r6, r3
 801fa18:	462c      	mov	r4, r5
 801fa1a:	4544      	cmp	r4, r8
 801fa1c:	d30e      	bcc.n	801fa3c <__mdiff+0xf8>
 801fa1e:	f108 0103 	add.w	r1, r8, #3
 801fa22:	1b49      	subs	r1, r1, r5
 801fa24:	f021 0103 	bic.w	r1, r1, #3
 801fa28:	3d03      	subs	r5, #3
 801fa2a:	45a8      	cmp	r8, r5
 801fa2c:	bf38      	it	cc
 801fa2e:	2100      	movcc	r1, #0
 801fa30:	440b      	add	r3, r1
 801fa32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fa36:	b191      	cbz	r1, 801fa5e <__mdiff+0x11a>
 801fa38:	6117      	str	r7, [r2, #16]
 801fa3a:	e79d      	b.n	801f978 <__mdiff+0x34>
 801fa3c:	f854 1b04 	ldr.w	r1, [r4], #4
 801fa40:	46e6      	mov	lr, ip
 801fa42:	0c08      	lsrs	r0, r1, #16
 801fa44:	fa1c fc81 	uxtah	ip, ip, r1
 801fa48:	4471      	add	r1, lr
 801fa4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801fa4e:	b289      	uxth	r1, r1
 801fa50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801fa54:	f846 1b04 	str.w	r1, [r6], #4
 801fa58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801fa5c:	e7dd      	b.n	801fa1a <__mdiff+0xd6>
 801fa5e:	3f01      	subs	r7, #1
 801fa60:	e7e7      	b.n	801fa32 <__mdiff+0xee>
 801fa62:	bf00      	nop
 801fa64:	08021593 	.word	0x08021593
 801fa68:	080215fc 	.word	0x080215fc

0801fa6c <__d2b>:
 801fa6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fa70:	460f      	mov	r7, r1
 801fa72:	2101      	movs	r1, #1
 801fa74:	ec59 8b10 	vmov	r8, r9, d0
 801fa78:	4616      	mov	r6, r2
 801fa7a:	f7ff fd1b 	bl	801f4b4 <_Balloc>
 801fa7e:	4604      	mov	r4, r0
 801fa80:	b930      	cbnz	r0, 801fa90 <__d2b+0x24>
 801fa82:	4602      	mov	r2, r0
 801fa84:	4b23      	ldr	r3, [pc, #140]	@ (801fb14 <__d2b+0xa8>)
 801fa86:	4824      	ldr	r0, [pc, #144]	@ (801fb18 <__d2b+0xac>)
 801fa88:	f240 310f 	movw	r1, #783	@ 0x30f
 801fa8c:	f000 fd32 	bl	80204f4 <__assert_func>
 801fa90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801fa94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fa98:	b10d      	cbz	r5, 801fa9e <__d2b+0x32>
 801fa9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fa9e:	9301      	str	r3, [sp, #4]
 801faa0:	f1b8 0300 	subs.w	r3, r8, #0
 801faa4:	d023      	beq.n	801faee <__d2b+0x82>
 801faa6:	4668      	mov	r0, sp
 801faa8:	9300      	str	r3, [sp, #0]
 801faaa:	f7ff fd96 	bl	801f5da <__lo0bits>
 801faae:	e9dd 1200 	ldrd	r1, r2, [sp]
 801fab2:	b1d0      	cbz	r0, 801faea <__d2b+0x7e>
 801fab4:	f1c0 0320 	rsb	r3, r0, #32
 801fab8:	fa02 f303 	lsl.w	r3, r2, r3
 801fabc:	430b      	orrs	r3, r1
 801fabe:	40c2      	lsrs	r2, r0
 801fac0:	6163      	str	r3, [r4, #20]
 801fac2:	9201      	str	r2, [sp, #4]
 801fac4:	9b01      	ldr	r3, [sp, #4]
 801fac6:	61a3      	str	r3, [r4, #24]
 801fac8:	2b00      	cmp	r3, #0
 801faca:	bf0c      	ite	eq
 801facc:	2201      	moveq	r2, #1
 801face:	2202      	movne	r2, #2
 801fad0:	6122      	str	r2, [r4, #16]
 801fad2:	b1a5      	cbz	r5, 801fafe <__d2b+0x92>
 801fad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801fad8:	4405      	add	r5, r0
 801fada:	603d      	str	r5, [r7, #0]
 801fadc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801fae0:	6030      	str	r0, [r6, #0]
 801fae2:	4620      	mov	r0, r4
 801fae4:	b003      	add	sp, #12
 801fae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801faea:	6161      	str	r1, [r4, #20]
 801faec:	e7ea      	b.n	801fac4 <__d2b+0x58>
 801faee:	a801      	add	r0, sp, #4
 801faf0:	f7ff fd73 	bl	801f5da <__lo0bits>
 801faf4:	9b01      	ldr	r3, [sp, #4]
 801faf6:	6163      	str	r3, [r4, #20]
 801faf8:	3020      	adds	r0, #32
 801fafa:	2201      	movs	r2, #1
 801fafc:	e7e8      	b.n	801fad0 <__d2b+0x64>
 801fafe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fb02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801fb06:	6038      	str	r0, [r7, #0]
 801fb08:	6918      	ldr	r0, [r3, #16]
 801fb0a:	f7ff fd47 	bl	801f59c <__hi0bits>
 801fb0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801fb12:	e7e5      	b.n	801fae0 <__d2b+0x74>
 801fb14:	08021593 	.word	0x08021593
 801fb18:	080215fc 	.word	0x080215fc

0801fb1c <realloc>:
 801fb1c:	4b02      	ldr	r3, [pc, #8]	@ (801fb28 <realloc+0xc>)
 801fb1e:	460a      	mov	r2, r1
 801fb20:	4601      	mov	r1, r0
 801fb22:	6818      	ldr	r0, [r3, #0]
 801fb24:	f000 b802 	b.w	801fb2c <_realloc_r>
 801fb28:	20000824 	.word	0x20000824

0801fb2c <_realloc_r>:
 801fb2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb30:	4682      	mov	sl, r0
 801fb32:	4693      	mov	fp, r2
 801fb34:	460c      	mov	r4, r1
 801fb36:	b929      	cbnz	r1, 801fb44 <_realloc_r+0x18>
 801fb38:	4611      	mov	r1, r2
 801fb3a:	b003      	add	sp, #12
 801fb3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb40:	f7f8 bc48 	b.w	80183d4 <_malloc_r>
 801fb44:	f7f8 fe80 	bl	8018848 <__malloc_lock>
 801fb48:	f10b 080b 	add.w	r8, fp, #11
 801fb4c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801fb50:	f1b8 0f16 	cmp.w	r8, #22
 801fb54:	f1a4 0908 	sub.w	r9, r4, #8
 801fb58:	f025 0603 	bic.w	r6, r5, #3
 801fb5c:	d908      	bls.n	801fb70 <_realloc_r+0x44>
 801fb5e:	f038 0807 	bics.w	r8, r8, #7
 801fb62:	d507      	bpl.n	801fb74 <_realloc_r+0x48>
 801fb64:	230c      	movs	r3, #12
 801fb66:	f8ca 3000 	str.w	r3, [sl]
 801fb6a:	f04f 0b00 	mov.w	fp, #0
 801fb6e:	e032      	b.n	801fbd6 <_realloc_r+0xaa>
 801fb70:	f04f 0810 	mov.w	r8, #16
 801fb74:	45c3      	cmp	fp, r8
 801fb76:	d8f5      	bhi.n	801fb64 <_realloc_r+0x38>
 801fb78:	4546      	cmp	r6, r8
 801fb7a:	f280 8174 	bge.w	801fe66 <_realloc_r+0x33a>
 801fb7e:	4b9e      	ldr	r3, [pc, #632]	@ (801fdf8 <_realloc_r+0x2cc>)
 801fb80:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801fb84:	eb09 0106 	add.w	r1, r9, r6
 801fb88:	458c      	cmp	ip, r1
 801fb8a:	6848      	ldr	r0, [r1, #4]
 801fb8c:	d005      	beq.n	801fb9a <_realloc_r+0x6e>
 801fb8e:	f020 0201 	bic.w	r2, r0, #1
 801fb92:	440a      	add	r2, r1
 801fb94:	6852      	ldr	r2, [r2, #4]
 801fb96:	07d7      	lsls	r7, r2, #31
 801fb98:	d449      	bmi.n	801fc2e <_realloc_r+0x102>
 801fb9a:	f020 0003 	bic.w	r0, r0, #3
 801fb9e:	458c      	cmp	ip, r1
 801fba0:	eb06 0700 	add.w	r7, r6, r0
 801fba4:	d11b      	bne.n	801fbde <_realloc_r+0xb2>
 801fba6:	f108 0210 	add.w	r2, r8, #16
 801fbaa:	42ba      	cmp	r2, r7
 801fbac:	dc41      	bgt.n	801fc32 <_realloc_r+0x106>
 801fbae:	eb09 0208 	add.w	r2, r9, r8
 801fbb2:	eba7 0708 	sub.w	r7, r7, r8
 801fbb6:	f047 0701 	orr.w	r7, r7, #1
 801fbba:	609a      	str	r2, [r3, #8]
 801fbbc:	6057      	str	r7, [r2, #4]
 801fbbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801fbc2:	f003 0301 	and.w	r3, r3, #1
 801fbc6:	ea43 0308 	orr.w	r3, r3, r8
 801fbca:	f844 3c04 	str.w	r3, [r4, #-4]
 801fbce:	4650      	mov	r0, sl
 801fbd0:	f7f8 fe40 	bl	8018854 <__malloc_unlock>
 801fbd4:	46a3      	mov	fp, r4
 801fbd6:	4658      	mov	r0, fp
 801fbd8:	b003      	add	sp, #12
 801fbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbde:	45b8      	cmp	r8, r7
 801fbe0:	dc27      	bgt.n	801fc32 <_realloc_r+0x106>
 801fbe2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801fbe6:	60d3      	str	r3, [r2, #12]
 801fbe8:	609a      	str	r2, [r3, #8]
 801fbea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801fbee:	eba7 0008 	sub.w	r0, r7, r8
 801fbf2:	280f      	cmp	r0, #15
 801fbf4:	f003 0301 	and.w	r3, r3, #1
 801fbf8:	eb09 0207 	add.w	r2, r9, r7
 801fbfc:	f240 8135 	bls.w	801fe6a <_realloc_r+0x33e>
 801fc00:	eb09 0108 	add.w	r1, r9, r8
 801fc04:	ea48 0303 	orr.w	r3, r8, r3
 801fc08:	f040 0001 	orr.w	r0, r0, #1
 801fc0c:	f8c9 3004 	str.w	r3, [r9, #4]
 801fc10:	6048      	str	r0, [r1, #4]
 801fc12:	6853      	ldr	r3, [r2, #4]
 801fc14:	f043 0301 	orr.w	r3, r3, #1
 801fc18:	6053      	str	r3, [r2, #4]
 801fc1a:	3108      	adds	r1, #8
 801fc1c:	4650      	mov	r0, sl
 801fc1e:	f7f9 fefb 	bl	8019a18 <_free_r>
 801fc22:	4650      	mov	r0, sl
 801fc24:	f7f8 fe16 	bl	8018854 <__malloc_unlock>
 801fc28:	f109 0b08 	add.w	fp, r9, #8
 801fc2c:	e7d3      	b.n	801fbd6 <_realloc_r+0xaa>
 801fc2e:	2000      	movs	r0, #0
 801fc30:	4601      	mov	r1, r0
 801fc32:	07ea      	lsls	r2, r5, #31
 801fc34:	f100 80c7 	bmi.w	801fdc6 <_realloc_r+0x29a>
 801fc38:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801fc3c:	eba9 0505 	sub.w	r5, r9, r5
 801fc40:	686a      	ldr	r2, [r5, #4]
 801fc42:	f022 0203 	bic.w	r2, r2, #3
 801fc46:	4432      	add	r2, r6
 801fc48:	9201      	str	r2, [sp, #4]
 801fc4a:	2900      	cmp	r1, #0
 801fc4c:	f000 8086 	beq.w	801fd5c <_realloc_r+0x230>
 801fc50:	458c      	cmp	ip, r1
 801fc52:	eb00 0702 	add.w	r7, r0, r2
 801fc56:	d149      	bne.n	801fcec <_realloc_r+0x1c0>
 801fc58:	f108 0210 	add.w	r2, r8, #16
 801fc5c:	42ba      	cmp	r2, r7
 801fc5e:	dc7d      	bgt.n	801fd5c <_realloc_r+0x230>
 801fc60:	46ab      	mov	fp, r5
 801fc62:	68ea      	ldr	r2, [r5, #12]
 801fc64:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 801fc68:	60ca      	str	r2, [r1, #12]
 801fc6a:	6091      	str	r1, [r2, #8]
 801fc6c:	1f32      	subs	r2, r6, #4
 801fc6e:	2a24      	cmp	r2, #36	@ 0x24
 801fc70:	d836      	bhi.n	801fce0 <_realloc_r+0x1b4>
 801fc72:	2a13      	cmp	r2, #19
 801fc74:	d932      	bls.n	801fcdc <_realloc_r+0x1b0>
 801fc76:	6821      	ldr	r1, [r4, #0]
 801fc78:	60a9      	str	r1, [r5, #8]
 801fc7a:	6861      	ldr	r1, [r4, #4]
 801fc7c:	60e9      	str	r1, [r5, #12]
 801fc7e:	2a1b      	cmp	r2, #27
 801fc80:	d81a      	bhi.n	801fcb8 <_realloc_r+0x18c>
 801fc82:	3408      	adds	r4, #8
 801fc84:	f105 0210 	add.w	r2, r5, #16
 801fc88:	6821      	ldr	r1, [r4, #0]
 801fc8a:	6011      	str	r1, [r2, #0]
 801fc8c:	6861      	ldr	r1, [r4, #4]
 801fc8e:	6051      	str	r1, [r2, #4]
 801fc90:	68a1      	ldr	r1, [r4, #8]
 801fc92:	6091      	str	r1, [r2, #8]
 801fc94:	eb05 0208 	add.w	r2, r5, r8
 801fc98:	eba7 0708 	sub.w	r7, r7, r8
 801fc9c:	f047 0701 	orr.w	r7, r7, #1
 801fca0:	609a      	str	r2, [r3, #8]
 801fca2:	6057      	str	r7, [r2, #4]
 801fca4:	686b      	ldr	r3, [r5, #4]
 801fca6:	f003 0301 	and.w	r3, r3, #1
 801fcaa:	ea43 0308 	orr.w	r3, r3, r8
 801fcae:	606b      	str	r3, [r5, #4]
 801fcb0:	4650      	mov	r0, sl
 801fcb2:	f7f8 fdcf 	bl	8018854 <__malloc_unlock>
 801fcb6:	e78e      	b.n	801fbd6 <_realloc_r+0xaa>
 801fcb8:	68a1      	ldr	r1, [r4, #8]
 801fcba:	6129      	str	r1, [r5, #16]
 801fcbc:	68e1      	ldr	r1, [r4, #12]
 801fcbe:	6169      	str	r1, [r5, #20]
 801fcc0:	2a24      	cmp	r2, #36	@ 0x24
 801fcc2:	bf01      	itttt	eq
 801fcc4:	6922      	ldreq	r2, [r4, #16]
 801fcc6:	61aa      	streq	r2, [r5, #24]
 801fcc8:	6961      	ldreq	r1, [r4, #20]
 801fcca:	61e9      	streq	r1, [r5, #28]
 801fccc:	bf19      	ittee	ne
 801fcce:	3410      	addne	r4, #16
 801fcd0:	f105 0218 	addne.w	r2, r5, #24
 801fcd4:	f105 0220 	addeq.w	r2, r5, #32
 801fcd8:	3418      	addeq	r4, #24
 801fcda:	e7d5      	b.n	801fc88 <_realloc_r+0x15c>
 801fcdc:	465a      	mov	r2, fp
 801fcde:	e7d3      	b.n	801fc88 <_realloc_r+0x15c>
 801fce0:	4621      	mov	r1, r4
 801fce2:	4658      	mov	r0, fp
 801fce4:	f7fe fcba 	bl	801e65c <memmove>
 801fce8:	4b43      	ldr	r3, [pc, #268]	@ (801fdf8 <_realloc_r+0x2cc>)
 801fcea:	e7d3      	b.n	801fc94 <_realloc_r+0x168>
 801fcec:	45b8      	cmp	r8, r7
 801fcee:	dc35      	bgt.n	801fd5c <_realloc_r+0x230>
 801fcf0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801fcf4:	4628      	mov	r0, r5
 801fcf6:	60d3      	str	r3, [r2, #12]
 801fcf8:	609a      	str	r2, [r3, #8]
 801fcfa:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801fcfe:	68eb      	ldr	r3, [r5, #12]
 801fd00:	60d3      	str	r3, [r2, #12]
 801fd02:	609a      	str	r2, [r3, #8]
 801fd04:	1f32      	subs	r2, r6, #4
 801fd06:	2a24      	cmp	r2, #36	@ 0x24
 801fd08:	d824      	bhi.n	801fd54 <_realloc_r+0x228>
 801fd0a:	2a13      	cmp	r2, #19
 801fd0c:	d908      	bls.n	801fd20 <_realloc_r+0x1f4>
 801fd0e:	6823      	ldr	r3, [r4, #0]
 801fd10:	60ab      	str	r3, [r5, #8]
 801fd12:	6863      	ldr	r3, [r4, #4]
 801fd14:	60eb      	str	r3, [r5, #12]
 801fd16:	2a1b      	cmp	r2, #27
 801fd18:	d80a      	bhi.n	801fd30 <_realloc_r+0x204>
 801fd1a:	3408      	adds	r4, #8
 801fd1c:	f105 0010 	add.w	r0, r5, #16
 801fd20:	6823      	ldr	r3, [r4, #0]
 801fd22:	6003      	str	r3, [r0, #0]
 801fd24:	6863      	ldr	r3, [r4, #4]
 801fd26:	6043      	str	r3, [r0, #4]
 801fd28:	68a3      	ldr	r3, [r4, #8]
 801fd2a:	6083      	str	r3, [r0, #8]
 801fd2c:	46a9      	mov	r9, r5
 801fd2e:	e75c      	b.n	801fbea <_realloc_r+0xbe>
 801fd30:	68a3      	ldr	r3, [r4, #8]
 801fd32:	612b      	str	r3, [r5, #16]
 801fd34:	68e3      	ldr	r3, [r4, #12]
 801fd36:	616b      	str	r3, [r5, #20]
 801fd38:	2a24      	cmp	r2, #36	@ 0x24
 801fd3a:	bf01      	itttt	eq
 801fd3c:	6923      	ldreq	r3, [r4, #16]
 801fd3e:	61ab      	streq	r3, [r5, #24]
 801fd40:	6963      	ldreq	r3, [r4, #20]
 801fd42:	61eb      	streq	r3, [r5, #28]
 801fd44:	bf19      	ittee	ne
 801fd46:	3410      	addne	r4, #16
 801fd48:	f105 0018 	addne.w	r0, r5, #24
 801fd4c:	f105 0020 	addeq.w	r0, r5, #32
 801fd50:	3418      	addeq	r4, #24
 801fd52:	e7e5      	b.n	801fd20 <_realloc_r+0x1f4>
 801fd54:	4621      	mov	r1, r4
 801fd56:	f7fe fc81 	bl	801e65c <memmove>
 801fd5a:	e7e7      	b.n	801fd2c <_realloc_r+0x200>
 801fd5c:	9b01      	ldr	r3, [sp, #4]
 801fd5e:	4598      	cmp	r8, r3
 801fd60:	dc31      	bgt.n	801fdc6 <_realloc_r+0x29a>
 801fd62:	4628      	mov	r0, r5
 801fd64:	68eb      	ldr	r3, [r5, #12]
 801fd66:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801fd6a:	60d3      	str	r3, [r2, #12]
 801fd6c:	609a      	str	r2, [r3, #8]
 801fd6e:	1f32      	subs	r2, r6, #4
 801fd70:	2a24      	cmp	r2, #36	@ 0x24
 801fd72:	d824      	bhi.n	801fdbe <_realloc_r+0x292>
 801fd74:	2a13      	cmp	r2, #19
 801fd76:	d908      	bls.n	801fd8a <_realloc_r+0x25e>
 801fd78:	6823      	ldr	r3, [r4, #0]
 801fd7a:	60ab      	str	r3, [r5, #8]
 801fd7c:	6863      	ldr	r3, [r4, #4]
 801fd7e:	60eb      	str	r3, [r5, #12]
 801fd80:	2a1b      	cmp	r2, #27
 801fd82:	d80a      	bhi.n	801fd9a <_realloc_r+0x26e>
 801fd84:	3408      	adds	r4, #8
 801fd86:	f105 0010 	add.w	r0, r5, #16
 801fd8a:	6823      	ldr	r3, [r4, #0]
 801fd8c:	6003      	str	r3, [r0, #0]
 801fd8e:	6863      	ldr	r3, [r4, #4]
 801fd90:	6043      	str	r3, [r0, #4]
 801fd92:	68a3      	ldr	r3, [r4, #8]
 801fd94:	6083      	str	r3, [r0, #8]
 801fd96:	9f01      	ldr	r7, [sp, #4]
 801fd98:	e7c8      	b.n	801fd2c <_realloc_r+0x200>
 801fd9a:	68a3      	ldr	r3, [r4, #8]
 801fd9c:	612b      	str	r3, [r5, #16]
 801fd9e:	68e3      	ldr	r3, [r4, #12]
 801fda0:	616b      	str	r3, [r5, #20]
 801fda2:	2a24      	cmp	r2, #36	@ 0x24
 801fda4:	bf01      	itttt	eq
 801fda6:	6923      	ldreq	r3, [r4, #16]
 801fda8:	61ab      	streq	r3, [r5, #24]
 801fdaa:	6963      	ldreq	r3, [r4, #20]
 801fdac:	61eb      	streq	r3, [r5, #28]
 801fdae:	bf19      	ittee	ne
 801fdb0:	3410      	addne	r4, #16
 801fdb2:	f105 0018 	addne.w	r0, r5, #24
 801fdb6:	f105 0020 	addeq.w	r0, r5, #32
 801fdba:	3418      	addeq	r4, #24
 801fdbc:	e7e5      	b.n	801fd8a <_realloc_r+0x25e>
 801fdbe:	4621      	mov	r1, r4
 801fdc0:	f7fe fc4c 	bl	801e65c <memmove>
 801fdc4:	e7e7      	b.n	801fd96 <_realloc_r+0x26a>
 801fdc6:	4659      	mov	r1, fp
 801fdc8:	4650      	mov	r0, sl
 801fdca:	f7f8 fb03 	bl	80183d4 <_malloc_r>
 801fdce:	4683      	mov	fp, r0
 801fdd0:	b918      	cbnz	r0, 801fdda <_realloc_r+0x2ae>
 801fdd2:	4650      	mov	r0, sl
 801fdd4:	f7f8 fd3e 	bl	8018854 <__malloc_unlock>
 801fdd8:	e6c7      	b.n	801fb6a <_realloc_r+0x3e>
 801fdda:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801fdde:	f023 0301 	bic.w	r3, r3, #1
 801fde2:	444b      	add	r3, r9
 801fde4:	f1a0 0208 	sub.w	r2, r0, #8
 801fde8:	4293      	cmp	r3, r2
 801fdea:	d107      	bne.n	801fdfc <_realloc_r+0x2d0>
 801fdec:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801fdf0:	f027 0703 	bic.w	r7, r7, #3
 801fdf4:	4437      	add	r7, r6
 801fdf6:	e6f8      	b.n	801fbea <_realloc_r+0xbe>
 801fdf8:	20000408 	.word	0x20000408
 801fdfc:	1f32      	subs	r2, r6, #4
 801fdfe:	2a24      	cmp	r2, #36	@ 0x24
 801fe00:	d82d      	bhi.n	801fe5e <_realloc_r+0x332>
 801fe02:	2a13      	cmp	r2, #19
 801fe04:	d928      	bls.n	801fe58 <_realloc_r+0x32c>
 801fe06:	6823      	ldr	r3, [r4, #0]
 801fe08:	6003      	str	r3, [r0, #0]
 801fe0a:	6863      	ldr	r3, [r4, #4]
 801fe0c:	6043      	str	r3, [r0, #4]
 801fe0e:	2a1b      	cmp	r2, #27
 801fe10:	d80e      	bhi.n	801fe30 <_realloc_r+0x304>
 801fe12:	f104 0208 	add.w	r2, r4, #8
 801fe16:	f100 0308 	add.w	r3, r0, #8
 801fe1a:	6811      	ldr	r1, [r2, #0]
 801fe1c:	6019      	str	r1, [r3, #0]
 801fe1e:	6851      	ldr	r1, [r2, #4]
 801fe20:	6059      	str	r1, [r3, #4]
 801fe22:	6892      	ldr	r2, [r2, #8]
 801fe24:	609a      	str	r2, [r3, #8]
 801fe26:	4621      	mov	r1, r4
 801fe28:	4650      	mov	r0, sl
 801fe2a:	f7f9 fdf5 	bl	8019a18 <_free_r>
 801fe2e:	e73f      	b.n	801fcb0 <_realloc_r+0x184>
 801fe30:	68a3      	ldr	r3, [r4, #8]
 801fe32:	6083      	str	r3, [r0, #8]
 801fe34:	68e3      	ldr	r3, [r4, #12]
 801fe36:	60c3      	str	r3, [r0, #12]
 801fe38:	2a24      	cmp	r2, #36	@ 0x24
 801fe3a:	bf01      	itttt	eq
 801fe3c:	6923      	ldreq	r3, [r4, #16]
 801fe3e:	6103      	streq	r3, [r0, #16]
 801fe40:	6961      	ldreq	r1, [r4, #20]
 801fe42:	6141      	streq	r1, [r0, #20]
 801fe44:	bf19      	ittee	ne
 801fe46:	f104 0210 	addne.w	r2, r4, #16
 801fe4a:	f100 0310 	addne.w	r3, r0, #16
 801fe4e:	f104 0218 	addeq.w	r2, r4, #24
 801fe52:	f100 0318 	addeq.w	r3, r0, #24
 801fe56:	e7e0      	b.n	801fe1a <_realloc_r+0x2ee>
 801fe58:	4603      	mov	r3, r0
 801fe5a:	4622      	mov	r2, r4
 801fe5c:	e7dd      	b.n	801fe1a <_realloc_r+0x2ee>
 801fe5e:	4621      	mov	r1, r4
 801fe60:	f7fe fbfc 	bl	801e65c <memmove>
 801fe64:	e7df      	b.n	801fe26 <_realloc_r+0x2fa>
 801fe66:	4637      	mov	r7, r6
 801fe68:	e6bf      	b.n	801fbea <_realloc_r+0xbe>
 801fe6a:	431f      	orrs	r7, r3
 801fe6c:	f8c9 7004 	str.w	r7, [r9, #4]
 801fe70:	6853      	ldr	r3, [r2, #4]
 801fe72:	f043 0301 	orr.w	r3, r3, #1
 801fe76:	6053      	str	r3, [r2, #4]
 801fe78:	e6d3      	b.n	801fc22 <_realloc_r+0xf6>
 801fe7a:	bf00      	nop

0801fe7c <_strtol_l.constprop.0>:
 801fe7c:	2b24      	cmp	r3, #36	@ 0x24
 801fe7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe82:	4686      	mov	lr, r0
 801fe84:	4690      	mov	r8, r2
 801fe86:	d801      	bhi.n	801fe8c <_strtol_l.constprop.0+0x10>
 801fe88:	2b01      	cmp	r3, #1
 801fe8a:	d106      	bne.n	801fe9a <_strtol_l.constprop.0+0x1e>
 801fe8c:	f7f9 fd04 	bl	8019898 <__errno>
 801fe90:	2316      	movs	r3, #22
 801fe92:	6003      	str	r3, [r0, #0]
 801fe94:	2000      	movs	r0, #0
 801fe96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe9a:	4834      	ldr	r0, [pc, #208]	@ (801ff6c <_strtol_l.constprop.0+0xf0>)
 801fe9c:	460d      	mov	r5, r1
 801fe9e:	462a      	mov	r2, r5
 801fea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fea4:	5d06      	ldrb	r6, [r0, r4]
 801fea6:	f016 0608 	ands.w	r6, r6, #8
 801feaa:	d1f8      	bne.n	801fe9e <_strtol_l.constprop.0+0x22>
 801feac:	2c2d      	cmp	r4, #45	@ 0x2d
 801feae:	d12d      	bne.n	801ff0c <_strtol_l.constprop.0+0x90>
 801feb0:	782c      	ldrb	r4, [r5, #0]
 801feb2:	2601      	movs	r6, #1
 801feb4:	1c95      	adds	r5, r2, #2
 801feb6:	f033 0210 	bics.w	r2, r3, #16
 801feba:	d109      	bne.n	801fed0 <_strtol_l.constprop.0+0x54>
 801febc:	2c30      	cmp	r4, #48	@ 0x30
 801febe:	d12a      	bne.n	801ff16 <_strtol_l.constprop.0+0x9a>
 801fec0:	782a      	ldrb	r2, [r5, #0]
 801fec2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801fec6:	2a58      	cmp	r2, #88	@ 0x58
 801fec8:	d125      	bne.n	801ff16 <_strtol_l.constprop.0+0x9a>
 801feca:	786c      	ldrb	r4, [r5, #1]
 801fecc:	2310      	movs	r3, #16
 801fece:	3502      	adds	r5, #2
 801fed0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801fed4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801fed8:	2200      	movs	r2, #0
 801feda:	fbbc f9f3 	udiv	r9, ip, r3
 801fede:	4610      	mov	r0, r2
 801fee0:	fb03 ca19 	mls	sl, r3, r9, ip
 801fee4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801fee8:	2f09      	cmp	r7, #9
 801feea:	d81b      	bhi.n	801ff24 <_strtol_l.constprop.0+0xa8>
 801feec:	463c      	mov	r4, r7
 801feee:	42a3      	cmp	r3, r4
 801fef0:	dd27      	ble.n	801ff42 <_strtol_l.constprop.0+0xc6>
 801fef2:	1c57      	adds	r7, r2, #1
 801fef4:	d007      	beq.n	801ff06 <_strtol_l.constprop.0+0x8a>
 801fef6:	4581      	cmp	r9, r0
 801fef8:	d320      	bcc.n	801ff3c <_strtol_l.constprop.0+0xc0>
 801fefa:	d101      	bne.n	801ff00 <_strtol_l.constprop.0+0x84>
 801fefc:	45a2      	cmp	sl, r4
 801fefe:	db1d      	blt.n	801ff3c <_strtol_l.constprop.0+0xc0>
 801ff00:	fb00 4003 	mla	r0, r0, r3, r4
 801ff04:	2201      	movs	r2, #1
 801ff06:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ff0a:	e7eb      	b.n	801fee4 <_strtol_l.constprop.0+0x68>
 801ff0c:	2c2b      	cmp	r4, #43	@ 0x2b
 801ff0e:	bf04      	itt	eq
 801ff10:	782c      	ldrbeq	r4, [r5, #0]
 801ff12:	1c95      	addeq	r5, r2, #2
 801ff14:	e7cf      	b.n	801feb6 <_strtol_l.constprop.0+0x3a>
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	d1da      	bne.n	801fed0 <_strtol_l.constprop.0+0x54>
 801ff1a:	2c30      	cmp	r4, #48	@ 0x30
 801ff1c:	bf0c      	ite	eq
 801ff1e:	2308      	moveq	r3, #8
 801ff20:	230a      	movne	r3, #10
 801ff22:	e7d5      	b.n	801fed0 <_strtol_l.constprop.0+0x54>
 801ff24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801ff28:	2f19      	cmp	r7, #25
 801ff2a:	d801      	bhi.n	801ff30 <_strtol_l.constprop.0+0xb4>
 801ff2c:	3c37      	subs	r4, #55	@ 0x37
 801ff2e:	e7de      	b.n	801feee <_strtol_l.constprop.0+0x72>
 801ff30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801ff34:	2f19      	cmp	r7, #25
 801ff36:	d804      	bhi.n	801ff42 <_strtol_l.constprop.0+0xc6>
 801ff38:	3c57      	subs	r4, #87	@ 0x57
 801ff3a:	e7d8      	b.n	801feee <_strtol_l.constprop.0+0x72>
 801ff3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ff40:	e7e1      	b.n	801ff06 <_strtol_l.constprop.0+0x8a>
 801ff42:	1c53      	adds	r3, r2, #1
 801ff44:	d108      	bne.n	801ff58 <_strtol_l.constprop.0+0xdc>
 801ff46:	2322      	movs	r3, #34	@ 0x22
 801ff48:	f8ce 3000 	str.w	r3, [lr]
 801ff4c:	4660      	mov	r0, ip
 801ff4e:	f1b8 0f00 	cmp.w	r8, #0
 801ff52:	d0a0      	beq.n	801fe96 <_strtol_l.constprop.0+0x1a>
 801ff54:	1e69      	subs	r1, r5, #1
 801ff56:	e006      	b.n	801ff66 <_strtol_l.constprop.0+0xea>
 801ff58:	b106      	cbz	r6, 801ff5c <_strtol_l.constprop.0+0xe0>
 801ff5a:	4240      	negs	r0, r0
 801ff5c:	f1b8 0f00 	cmp.w	r8, #0
 801ff60:	d099      	beq.n	801fe96 <_strtol_l.constprop.0+0x1a>
 801ff62:	2a00      	cmp	r2, #0
 801ff64:	d1f6      	bne.n	801ff54 <_strtol_l.constprop.0+0xd8>
 801ff66:	f8c8 1000 	str.w	r1, [r8]
 801ff6a:	e794      	b.n	801fe96 <_strtol_l.constprop.0+0x1a>
 801ff6c:	08021363 	.word	0x08021363

0801ff70 <_strtol_r>:
 801ff70:	f7ff bf84 	b.w	801fe7c <_strtol_l.constprop.0>

0801ff74 <__ascii_wctomb>:
 801ff74:	4603      	mov	r3, r0
 801ff76:	4608      	mov	r0, r1
 801ff78:	b141      	cbz	r1, 801ff8c <__ascii_wctomb+0x18>
 801ff7a:	2aff      	cmp	r2, #255	@ 0xff
 801ff7c:	d904      	bls.n	801ff88 <__ascii_wctomb+0x14>
 801ff7e:	228a      	movs	r2, #138	@ 0x8a
 801ff80:	601a      	str	r2, [r3, #0]
 801ff82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ff86:	4770      	bx	lr
 801ff88:	700a      	strb	r2, [r1, #0]
 801ff8a:	2001      	movs	r0, #1
 801ff8c:	4770      	bx	lr
	...

0801ff90 <_strtoll_l.constprop.0>:
 801ff90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff94:	b085      	sub	sp, #20
 801ff96:	4690      	mov	r8, r2
 801ff98:	4a43      	ldr	r2, [pc, #268]	@ (80200a8 <_strtoll_l.constprop.0+0x118>)
 801ff9a:	9002      	str	r0, [sp, #8]
 801ff9c:	4689      	mov	r9, r1
 801ff9e:	461e      	mov	r6, r3
 801ffa0:	460d      	mov	r5, r1
 801ffa2:	462b      	mov	r3, r5
 801ffa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ffa8:	5d17      	ldrb	r7, [r2, r4]
 801ffaa:	f017 0708 	ands.w	r7, r7, #8
 801ffae:	d1f8      	bne.n	801ffa2 <_strtoll_l.constprop.0+0x12>
 801ffb0:	2c2d      	cmp	r4, #45	@ 0x2d
 801ffb2:	d149      	bne.n	8020048 <_strtoll_l.constprop.0+0xb8>
 801ffb4:	782c      	ldrb	r4, [r5, #0]
 801ffb6:	2701      	movs	r7, #1
 801ffb8:	1c9d      	adds	r5, r3, #2
 801ffba:	f036 0310 	bics.w	r3, r6, #16
 801ffbe:	d109      	bne.n	801ffd4 <_strtoll_l.constprop.0+0x44>
 801ffc0:	2c30      	cmp	r4, #48	@ 0x30
 801ffc2:	d146      	bne.n	8020052 <_strtoll_l.constprop.0+0xc2>
 801ffc4:	782b      	ldrb	r3, [r5, #0]
 801ffc6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801ffca:	2b58      	cmp	r3, #88	@ 0x58
 801ffcc:	d141      	bne.n	8020052 <_strtoll_l.constprop.0+0xc2>
 801ffce:	786c      	ldrb	r4, [r5, #1]
 801ffd0:	2610      	movs	r6, #16
 801ffd2:	3502      	adds	r5, #2
 801ffd4:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 801ffd8:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 801ffdc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801ffe0:	17f3      	asrs	r3, r6, #31
 801ffe2:	4632      	mov	r2, r6
 801ffe4:	4658      	mov	r0, fp
 801ffe6:	4651      	mov	r1, sl
 801ffe8:	9303      	str	r3, [sp, #12]
 801ffea:	f7e0 fe5d 	bl	8000ca8 <__aeabi_uldivmod>
 801ffee:	9201      	str	r2, [sp, #4]
 801fff0:	2200      	movs	r2, #0
 801fff2:	468e      	mov	lr, r1
 801fff4:	4684      	mov	ip, r0
 801fff6:	4611      	mov	r1, r2
 801fff8:	4610      	mov	r0, r2
 801fffa:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801fffe:	2b09      	cmp	r3, #9
 8020000:	d905      	bls.n	802000e <_strtoll_l.constprop.0+0x7e>
 8020002:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8020006:	2b19      	cmp	r3, #25
 8020008:	d82a      	bhi.n	8020060 <_strtoll_l.constprop.0+0xd0>
 802000a:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 802000e:	429e      	cmp	r6, r3
 8020010:	dd30      	ble.n	8020074 <_strtoll_l.constprop.0+0xe4>
 8020012:	1c54      	adds	r4, r2, #1
 8020014:	d015      	beq.n	8020042 <_strtoll_l.constprop.0+0xb2>
 8020016:	4584      	cmp	ip, r0
 8020018:	eb7e 0201 	sbcs.w	r2, lr, r1
 802001c:	d327      	bcc.n	802006e <_strtoll_l.constprop.0+0xde>
 802001e:	458e      	cmp	lr, r1
 8020020:	bf08      	it	eq
 8020022:	4584      	cmpeq	ip, r0
 8020024:	d102      	bne.n	802002c <_strtoll_l.constprop.0+0x9c>
 8020026:	9a01      	ldr	r2, [sp, #4]
 8020028:	429a      	cmp	r2, r3
 802002a:	db20      	blt.n	802006e <_strtoll_l.constprop.0+0xde>
 802002c:	9a03      	ldr	r2, [sp, #12]
 802002e:	4371      	muls	r1, r6
 8020030:	fb00 1102 	mla	r1, r0, r2, r1
 8020034:	fba6 0200 	umull	r0, r2, r6, r0
 8020038:	440a      	add	r2, r1
 802003a:	1818      	adds	r0, r3, r0
 802003c:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 8020040:	2201      	movs	r2, #1
 8020042:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020046:	e7d8      	b.n	801fffa <_strtoll_l.constprop.0+0x6a>
 8020048:	2c2b      	cmp	r4, #43	@ 0x2b
 802004a:	bf04      	itt	eq
 802004c:	782c      	ldrbeq	r4, [r5, #0]
 802004e:	1c9d      	addeq	r5, r3, #2
 8020050:	e7b3      	b.n	801ffba <_strtoll_l.constprop.0+0x2a>
 8020052:	2e00      	cmp	r6, #0
 8020054:	d1be      	bne.n	801ffd4 <_strtoll_l.constprop.0+0x44>
 8020056:	2c30      	cmp	r4, #48	@ 0x30
 8020058:	bf0c      	ite	eq
 802005a:	2608      	moveq	r6, #8
 802005c:	260a      	movne	r6, #10
 802005e:	e7b9      	b.n	801ffd4 <_strtoll_l.constprop.0+0x44>
 8020060:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8020064:	2b19      	cmp	r3, #25
 8020066:	d805      	bhi.n	8020074 <_strtoll_l.constprop.0+0xe4>
 8020068:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 802006c:	e7cf      	b.n	802000e <_strtoll_l.constprop.0+0x7e>
 802006e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020072:	e7e6      	b.n	8020042 <_strtoll_l.constprop.0+0xb2>
 8020074:	1c53      	adds	r3, r2, #1
 8020076:	d10a      	bne.n	802008e <_strtoll_l.constprop.0+0xfe>
 8020078:	9a02      	ldr	r2, [sp, #8]
 802007a:	2322      	movs	r3, #34	@ 0x22
 802007c:	6013      	str	r3, [r2, #0]
 802007e:	4658      	mov	r0, fp
 8020080:	4651      	mov	r1, sl
 8020082:	f1b8 0f00 	cmp.w	r8, #0
 8020086:	d10a      	bne.n	802009e <_strtoll_l.constprop.0+0x10e>
 8020088:	b005      	add	sp, #20
 802008a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802008e:	b117      	cbz	r7, 8020096 <_strtoll_l.constprop.0+0x106>
 8020090:	4240      	negs	r0, r0
 8020092:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020096:	f1b8 0f00 	cmp.w	r8, #0
 802009a:	d0f5      	beq.n	8020088 <_strtoll_l.constprop.0+0xf8>
 802009c:	b10a      	cbz	r2, 80200a2 <_strtoll_l.constprop.0+0x112>
 802009e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80200a2:	f8c8 9000 	str.w	r9, [r8]
 80200a6:	e7ef      	b.n	8020088 <_strtoll_l.constprop.0+0xf8>
 80200a8:	08021363 	.word	0x08021363

080200ac <_strtoll_r>:
 80200ac:	f7ff bf70 	b.w	801ff90 <_strtoll_l.constprop.0>

080200b0 <_strtoull_l.constprop.0>:
 80200b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200b4:	4691      	mov	r9, r2
 80200b6:	4a48      	ldr	r2, [pc, #288]	@ (80201d8 <_strtoull_l.constprop.0+0x128>)
 80200b8:	9001      	str	r0, [sp, #4]
 80200ba:	468a      	mov	sl, r1
 80200bc:	461e      	mov	r6, r3
 80200be:	460d      	mov	r5, r1
 80200c0:	462b      	mov	r3, r5
 80200c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80200c6:	5d17      	ldrb	r7, [r2, r4]
 80200c8:	f017 0708 	ands.w	r7, r7, #8
 80200cc:	d1f8      	bne.n	80200c0 <_strtoull_l.constprop.0+0x10>
 80200ce:	2c2d      	cmp	r4, #45	@ 0x2d
 80200d0:	d14a      	bne.n	8020168 <_strtoull_l.constprop.0+0xb8>
 80200d2:	782c      	ldrb	r4, [r5, #0]
 80200d4:	2701      	movs	r7, #1
 80200d6:	1c9d      	adds	r5, r3, #2
 80200d8:	f036 0310 	bics.w	r3, r6, #16
 80200dc:	d109      	bne.n	80200f2 <_strtoull_l.constprop.0+0x42>
 80200de:	2c30      	cmp	r4, #48	@ 0x30
 80200e0:	d147      	bne.n	8020172 <_strtoull_l.constprop.0+0xc2>
 80200e2:	782b      	ldrb	r3, [r5, #0]
 80200e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80200e8:	2b58      	cmp	r3, #88	@ 0x58
 80200ea:	d142      	bne.n	8020172 <_strtoull_l.constprop.0+0xc2>
 80200ec:	786c      	ldrb	r4, [r5, #1]
 80200ee:	2610      	movs	r6, #16
 80200f0:	3502      	adds	r5, #2
 80200f2:	ea4f 7be6 	mov.w	fp, r6, asr #31
 80200f6:	4632      	mov	r2, r6
 80200f8:	465b      	mov	r3, fp
 80200fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80200fe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8020102:	f7e0 fdd1 	bl	8000ca8 <__aeabi_uldivmod>
 8020106:	4632      	mov	r2, r6
 8020108:	9000      	str	r0, [sp, #0]
 802010a:	4688      	mov	r8, r1
 802010c:	465b      	mov	r3, fp
 802010e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020112:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8020116:	f7e0 fdc7 	bl	8000ca8 <__aeabi_uldivmod>
 802011a:	2300      	movs	r3, #0
 802011c:	4618      	mov	r0, r3
 802011e:	4619      	mov	r1, r3
 8020120:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8020124:	f1bc 0f09 	cmp.w	ip, #9
 8020128:	d82a      	bhi.n	8020180 <_strtoull_l.constprop.0+0xd0>
 802012a:	4664      	mov	r4, ip
 802012c:	42a6      	cmp	r6, r4
 802012e:	dd38      	ble.n	80201a2 <_strtoull_l.constprop.0+0xf2>
 8020130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8020134:	d015      	beq.n	8020162 <_strtoull_l.constprop.0+0xb2>
 8020136:	9b00      	ldr	r3, [sp, #0]
 8020138:	4283      	cmp	r3, r0
 802013a:	eb78 0301 	sbcs.w	r3, r8, r1
 802013e:	d32d      	bcc.n	802019c <_strtoull_l.constprop.0+0xec>
 8020140:	9b00      	ldr	r3, [sp, #0]
 8020142:	4588      	cmp	r8, r1
 8020144:	bf08      	it	eq
 8020146:	4283      	cmpeq	r3, r0
 8020148:	d101      	bne.n	802014e <_strtoull_l.constprop.0+0x9e>
 802014a:	42a2      	cmp	r2, r4
 802014c:	db26      	blt.n	802019c <_strtoull_l.constprop.0+0xec>
 802014e:	4371      	muls	r1, r6
 8020150:	fb00 110b 	mla	r1, r0, fp, r1
 8020154:	fba6 0300 	umull	r0, r3, r6, r0
 8020158:	4419      	add	r1, r3
 802015a:	1820      	adds	r0, r4, r0
 802015c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8020160:	2301      	movs	r3, #1
 8020162:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020166:	e7db      	b.n	8020120 <_strtoull_l.constprop.0+0x70>
 8020168:	2c2b      	cmp	r4, #43	@ 0x2b
 802016a:	bf04      	itt	eq
 802016c:	782c      	ldrbeq	r4, [r5, #0]
 802016e:	1c9d      	addeq	r5, r3, #2
 8020170:	e7b2      	b.n	80200d8 <_strtoull_l.constprop.0+0x28>
 8020172:	2e00      	cmp	r6, #0
 8020174:	d1bd      	bne.n	80200f2 <_strtoull_l.constprop.0+0x42>
 8020176:	2c30      	cmp	r4, #48	@ 0x30
 8020178:	bf0c      	ite	eq
 802017a:	2608      	moveq	r6, #8
 802017c:	260a      	movne	r6, #10
 802017e:	e7b8      	b.n	80200f2 <_strtoull_l.constprop.0+0x42>
 8020180:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8020184:	f1bc 0f19 	cmp.w	ip, #25
 8020188:	d801      	bhi.n	802018e <_strtoull_l.constprop.0+0xde>
 802018a:	3c37      	subs	r4, #55	@ 0x37
 802018c:	e7ce      	b.n	802012c <_strtoull_l.constprop.0+0x7c>
 802018e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8020192:	f1bc 0f19 	cmp.w	ip, #25
 8020196:	d804      	bhi.n	80201a2 <_strtoull_l.constprop.0+0xf2>
 8020198:	3c57      	subs	r4, #87	@ 0x57
 802019a:	e7c7      	b.n	802012c <_strtoull_l.constprop.0+0x7c>
 802019c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80201a0:	e7df      	b.n	8020162 <_strtoull_l.constprop.0+0xb2>
 80201a2:	1c5a      	adds	r2, r3, #1
 80201a4:	d10a      	bne.n	80201bc <_strtoull_l.constprop.0+0x10c>
 80201a6:	9901      	ldr	r1, [sp, #4]
 80201a8:	2222      	movs	r2, #34	@ 0x22
 80201aa:	600a      	str	r2, [r1, #0]
 80201ac:	4618      	mov	r0, r3
 80201ae:	4619      	mov	r1, r3
 80201b0:	f1b9 0f00 	cmp.w	r9, #0
 80201b4:	d10a      	bne.n	80201cc <_strtoull_l.constprop.0+0x11c>
 80201b6:	b003      	add	sp, #12
 80201b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201bc:	b117      	cbz	r7, 80201c4 <_strtoull_l.constprop.0+0x114>
 80201be:	4240      	negs	r0, r0
 80201c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80201c4:	f1b9 0f00 	cmp.w	r9, #0
 80201c8:	d0f5      	beq.n	80201b6 <_strtoull_l.constprop.0+0x106>
 80201ca:	b10b      	cbz	r3, 80201d0 <_strtoull_l.constprop.0+0x120>
 80201cc:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80201d0:	f8c9 a000 	str.w	sl, [r9]
 80201d4:	e7ef      	b.n	80201b6 <_strtoull_l.constprop.0+0x106>
 80201d6:	bf00      	nop
 80201d8:	08021363 	.word	0x08021363

080201dc <_strtoull_r>:
 80201dc:	f7ff bf68 	b.w	80200b0 <_strtoull_l.constprop.0>

080201e0 <_mbrtowc_r>:
 80201e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80201e2:	4c0a      	ldr	r4, [pc, #40]	@ (802020c <_mbrtowc_r+0x2c>)
 80201e4:	9e08      	ldr	r6, [sp, #32]
 80201e6:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 80201ea:	9600      	str	r6, [sp, #0]
 80201ec:	4605      	mov	r5, r0
 80201ee:	4614      	mov	r4, r2
 80201f0:	b912      	cbnz	r2, 80201f8 <_mbrtowc_r+0x18>
 80201f2:	4a07      	ldr	r2, [pc, #28]	@ (8020210 <_mbrtowc_r+0x30>)
 80201f4:	2301      	movs	r3, #1
 80201f6:	4621      	mov	r1, r4
 80201f8:	47b8      	blx	r7
 80201fa:	1c43      	adds	r3, r0, #1
 80201fc:	bf01      	itttt	eq
 80201fe:	2300      	moveq	r3, #0
 8020200:	6033      	streq	r3, [r6, #0]
 8020202:	238a      	moveq	r3, #138	@ 0x8a
 8020204:	602b      	streq	r3, [r5, #0]
 8020206:	b003      	add	sp, #12
 8020208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802020a:	bf00      	nop
 802020c:	200009a8 	.word	0x200009a8
 8020210:	08021793 	.word	0x08021793

08020214 <_wcrtomb_r>:
 8020214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020216:	4c09      	ldr	r4, [pc, #36]	@ (802023c <_wcrtomb_r+0x28>)
 8020218:	b085      	sub	sp, #20
 802021a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802021e:	4605      	mov	r5, r0
 8020220:	461e      	mov	r6, r3
 8020222:	b909      	cbnz	r1, 8020228 <_wcrtomb_r+0x14>
 8020224:	460a      	mov	r2, r1
 8020226:	a901      	add	r1, sp, #4
 8020228:	47b8      	blx	r7
 802022a:	1c43      	adds	r3, r0, #1
 802022c:	bf01      	itttt	eq
 802022e:	2300      	moveq	r3, #0
 8020230:	6033      	streq	r3, [r6, #0]
 8020232:	238a      	moveq	r3, #138	@ 0x8a
 8020234:	602b      	streq	r3, [r5, #0]
 8020236:	b005      	add	sp, #20
 8020238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802023a:	bf00      	nop
 802023c:	200009a8 	.word	0x200009a8

08020240 <iswspace>:
 8020240:	2100      	movs	r1, #0
 8020242:	f000 b801 	b.w	8020248 <iswspace_l>
	...

08020248 <iswspace_l>:
 8020248:	28ff      	cmp	r0, #255	@ 0xff
 802024a:	bf9d      	ittte	ls
 802024c:	4b02      	ldrls	r3, [pc, #8]	@ (8020258 <iswspace_l+0x10>)
 802024e:	5c18      	ldrbls	r0, [r3, r0]
 8020250:	f000 0008 	andls.w	r0, r0, #8
 8020254:	2000      	movhi	r0, #0
 8020256:	4770      	bx	lr
 8020258:	08021363 	.word	0x08021363

0802025c <__ssprint_r>:
 802025c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020260:	6893      	ldr	r3, [r2, #8]
 8020262:	f8d2 b000 	ldr.w	fp, [r2]
 8020266:	9001      	str	r0, [sp, #4]
 8020268:	460c      	mov	r4, r1
 802026a:	4617      	mov	r7, r2
 802026c:	2b00      	cmp	r3, #0
 802026e:	d157      	bne.n	8020320 <__ssprint_r+0xc4>
 8020270:	2000      	movs	r0, #0
 8020272:	2300      	movs	r3, #0
 8020274:	607b      	str	r3, [r7, #4]
 8020276:	b003      	add	sp, #12
 8020278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802027c:	e9db a800 	ldrd	sl, r8, [fp]
 8020280:	f10b 0b08 	add.w	fp, fp, #8
 8020284:	68a6      	ldr	r6, [r4, #8]
 8020286:	6820      	ldr	r0, [r4, #0]
 8020288:	f1b8 0f00 	cmp.w	r8, #0
 802028c:	d0f6      	beq.n	802027c <__ssprint_r+0x20>
 802028e:	45b0      	cmp	r8, r6
 8020290:	d32e      	bcc.n	80202f0 <__ssprint_r+0x94>
 8020292:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020296:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802029a:	d029      	beq.n	80202f0 <__ssprint_r+0x94>
 802029c:	6921      	ldr	r1, [r4, #16]
 802029e:	6965      	ldr	r5, [r4, #20]
 80202a0:	eba0 0901 	sub.w	r9, r0, r1
 80202a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80202a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80202ac:	f109 0001 	add.w	r0, r9, #1
 80202b0:	106d      	asrs	r5, r5, #1
 80202b2:	4440      	add	r0, r8
 80202b4:	4285      	cmp	r5, r0
 80202b6:	bf38      	it	cc
 80202b8:	4605      	movcc	r5, r0
 80202ba:	0553      	lsls	r3, r2, #21
 80202bc:	d534      	bpl.n	8020328 <__ssprint_r+0xcc>
 80202be:	9801      	ldr	r0, [sp, #4]
 80202c0:	4629      	mov	r1, r5
 80202c2:	f7f8 f887 	bl	80183d4 <_malloc_r>
 80202c6:	4606      	mov	r6, r0
 80202c8:	2800      	cmp	r0, #0
 80202ca:	d038      	beq.n	802033e <__ssprint_r+0xe2>
 80202cc:	464a      	mov	r2, r9
 80202ce:	6921      	ldr	r1, [r4, #16]
 80202d0:	f7f9 fb26 	bl	8019920 <memcpy>
 80202d4:	89a2      	ldrh	r2, [r4, #12]
 80202d6:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80202da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80202de:	81a2      	strh	r2, [r4, #12]
 80202e0:	6126      	str	r6, [r4, #16]
 80202e2:	6165      	str	r5, [r4, #20]
 80202e4:	444e      	add	r6, r9
 80202e6:	eba5 0509 	sub.w	r5, r5, r9
 80202ea:	6026      	str	r6, [r4, #0]
 80202ec:	60a5      	str	r5, [r4, #8]
 80202ee:	4646      	mov	r6, r8
 80202f0:	4546      	cmp	r6, r8
 80202f2:	bf28      	it	cs
 80202f4:	4646      	movcs	r6, r8
 80202f6:	4632      	mov	r2, r6
 80202f8:	4651      	mov	r1, sl
 80202fa:	6820      	ldr	r0, [r4, #0]
 80202fc:	f7fe f9ae 	bl	801e65c <memmove>
 8020300:	68a2      	ldr	r2, [r4, #8]
 8020302:	1b92      	subs	r2, r2, r6
 8020304:	60a2      	str	r2, [r4, #8]
 8020306:	6822      	ldr	r2, [r4, #0]
 8020308:	4432      	add	r2, r6
 802030a:	6022      	str	r2, [r4, #0]
 802030c:	68ba      	ldr	r2, [r7, #8]
 802030e:	eba2 0308 	sub.w	r3, r2, r8
 8020312:	44c2      	add	sl, r8
 8020314:	60bb      	str	r3, [r7, #8]
 8020316:	2b00      	cmp	r3, #0
 8020318:	d0aa      	beq.n	8020270 <__ssprint_r+0x14>
 802031a:	f04f 0800 	mov.w	r8, #0
 802031e:	e7b1      	b.n	8020284 <__ssprint_r+0x28>
 8020320:	f04f 0a00 	mov.w	sl, #0
 8020324:	46d0      	mov	r8, sl
 8020326:	e7ad      	b.n	8020284 <__ssprint_r+0x28>
 8020328:	9801      	ldr	r0, [sp, #4]
 802032a:	462a      	mov	r2, r5
 802032c:	f7ff fbfe 	bl	801fb2c <_realloc_r>
 8020330:	4606      	mov	r6, r0
 8020332:	2800      	cmp	r0, #0
 8020334:	d1d4      	bne.n	80202e0 <__ssprint_r+0x84>
 8020336:	6921      	ldr	r1, [r4, #16]
 8020338:	9801      	ldr	r0, [sp, #4]
 802033a:	f7f9 fb6d 	bl	8019a18 <_free_r>
 802033e:	9a01      	ldr	r2, [sp, #4]
 8020340:	230c      	movs	r3, #12
 8020342:	6013      	str	r3, [r2, #0]
 8020344:	89a3      	ldrh	r3, [r4, #12]
 8020346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802034a:	81a3      	strh	r3, [r4, #12]
 802034c:	2300      	movs	r3, #0
 802034e:	60bb      	str	r3, [r7, #8]
 8020350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020354:	e78d      	b.n	8020272 <__ssprint_r+0x16>

08020356 <__swhatbuf_r>:
 8020356:	b570      	push	{r4, r5, r6, lr}
 8020358:	460c      	mov	r4, r1
 802035a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802035e:	2900      	cmp	r1, #0
 8020360:	b096      	sub	sp, #88	@ 0x58
 8020362:	4615      	mov	r5, r2
 8020364:	461e      	mov	r6, r3
 8020366:	da07      	bge.n	8020378 <__swhatbuf_r+0x22>
 8020368:	89a1      	ldrh	r1, [r4, #12]
 802036a:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 802036e:	d117      	bne.n	80203a0 <__swhatbuf_r+0x4a>
 8020370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020374:	4608      	mov	r0, r1
 8020376:	e00f      	b.n	8020398 <__swhatbuf_r+0x42>
 8020378:	466a      	mov	r2, sp
 802037a:	f000 f899 	bl	80204b0 <_fstat_r>
 802037e:	2800      	cmp	r0, #0
 8020380:	dbf2      	blt.n	8020368 <__swhatbuf_r+0x12>
 8020382:	9901      	ldr	r1, [sp, #4]
 8020384:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020388:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802038c:	4259      	negs	r1, r3
 802038e:	4159      	adcs	r1, r3
 8020390:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8020394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020398:	6031      	str	r1, [r6, #0]
 802039a:	602b      	str	r3, [r5, #0]
 802039c:	b016      	add	sp, #88	@ 0x58
 802039e:	bd70      	pop	{r4, r5, r6, pc}
 80203a0:	2100      	movs	r1, #0
 80203a2:	2340      	movs	r3, #64	@ 0x40
 80203a4:	e7e6      	b.n	8020374 <__swhatbuf_r+0x1e>

080203a6 <__smakebuf_r>:
 80203a6:	898b      	ldrh	r3, [r1, #12]
 80203a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80203aa:	079d      	lsls	r5, r3, #30
 80203ac:	4606      	mov	r6, r0
 80203ae:	460c      	mov	r4, r1
 80203b0:	d507      	bpl.n	80203c2 <__smakebuf_r+0x1c>
 80203b2:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80203b6:	6023      	str	r3, [r4, #0]
 80203b8:	6123      	str	r3, [r4, #16]
 80203ba:	2301      	movs	r3, #1
 80203bc:	6163      	str	r3, [r4, #20]
 80203be:	b003      	add	sp, #12
 80203c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80203c2:	ab01      	add	r3, sp, #4
 80203c4:	466a      	mov	r2, sp
 80203c6:	f7ff ffc6 	bl	8020356 <__swhatbuf_r>
 80203ca:	9f00      	ldr	r7, [sp, #0]
 80203cc:	4605      	mov	r5, r0
 80203ce:	4639      	mov	r1, r7
 80203d0:	4630      	mov	r0, r6
 80203d2:	f7f7 ffff 	bl	80183d4 <_malloc_r>
 80203d6:	b948      	cbnz	r0, 80203ec <__smakebuf_r+0x46>
 80203d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80203dc:	059a      	lsls	r2, r3, #22
 80203de:	d4ee      	bmi.n	80203be <__smakebuf_r+0x18>
 80203e0:	f023 0303 	bic.w	r3, r3, #3
 80203e4:	f043 0302 	orr.w	r3, r3, #2
 80203e8:	81a3      	strh	r3, [r4, #12]
 80203ea:	e7e2      	b.n	80203b2 <__smakebuf_r+0xc>
 80203ec:	89a3      	ldrh	r3, [r4, #12]
 80203ee:	6020      	str	r0, [r4, #0]
 80203f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80203f4:	81a3      	strh	r3, [r4, #12]
 80203f6:	9b01      	ldr	r3, [sp, #4]
 80203f8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80203fc:	b15b      	cbz	r3, 8020416 <__smakebuf_r+0x70>
 80203fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020402:	4630      	mov	r0, r6
 8020404:	f000 f866 	bl	80204d4 <_isatty_r>
 8020408:	b128      	cbz	r0, 8020416 <__smakebuf_r+0x70>
 802040a:	89a3      	ldrh	r3, [r4, #12]
 802040c:	f023 0303 	bic.w	r3, r3, #3
 8020410:	f043 0301 	orr.w	r3, r3, #1
 8020414:	81a3      	strh	r3, [r4, #12]
 8020416:	89a3      	ldrh	r3, [r4, #12]
 8020418:	431d      	orrs	r5, r3
 802041a:	81a5      	strh	r5, [r4, #12]
 802041c:	e7cf      	b.n	80203be <__smakebuf_r+0x18>

0802041e <__swbuf_r>:
 802041e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020420:	460e      	mov	r6, r1
 8020422:	4614      	mov	r4, r2
 8020424:	4605      	mov	r5, r0
 8020426:	b118      	cbz	r0, 8020430 <__swbuf_r+0x12>
 8020428:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802042a:	b90b      	cbnz	r3, 8020430 <__swbuf_r+0x12>
 802042c:	f7f8 faa4 	bl	8018978 <__sinit>
 8020430:	69a3      	ldr	r3, [r4, #24]
 8020432:	60a3      	str	r3, [r4, #8]
 8020434:	89a3      	ldrh	r3, [r4, #12]
 8020436:	0719      	lsls	r1, r3, #28
 8020438:	d501      	bpl.n	802043e <__swbuf_r+0x20>
 802043a:	6923      	ldr	r3, [r4, #16]
 802043c:	b943      	cbnz	r3, 8020450 <__swbuf_r+0x32>
 802043e:	4621      	mov	r1, r4
 8020440:	4628      	mov	r0, r5
 8020442:	f7fe f84b 	bl	801e4dc <__swsetup_r>
 8020446:	b118      	cbz	r0, 8020450 <__swbuf_r+0x32>
 8020448:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802044c:	4638      	mov	r0, r7
 802044e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020454:	b2f6      	uxtb	r6, r6
 8020456:	049a      	lsls	r2, r3, #18
 8020458:	4637      	mov	r7, r6
 802045a:	d406      	bmi.n	802046a <__swbuf_r+0x4c>
 802045c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8020460:	81a3      	strh	r3, [r4, #12]
 8020462:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020464:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020468:	6663      	str	r3, [r4, #100]	@ 0x64
 802046a:	6823      	ldr	r3, [r4, #0]
 802046c:	6922      	ldr	r2, [r4, #16]
 802046e:	1a98      	subs	r0, r3, r2
 8020470:	6963      	ldr	r3, [r4, #20]
 8020472:	4283      	cmp	r3, r0
 8020474:	dc05      	bgt.n	8020482 <__swbuf_r+0x64>
 8020476:	4621      	mov	r1, r4
 8020478:	4628      	mov	r0, r5
 802047a:	f7fd fe49 	bl	801e110 <_fflush_r>
 802047e:	2800      	cmp	r0, #0
 8020480:	d1e2      	bne.n	8020448 <__swbuf_r+0x2a>
 8020482:	68a3      	ldr	r3, [r4, #8]
 8020484:	3b01      	subs	r3, #1
 8020486:	60a3      	str	r3, [r4, #8]
 8020488:	6823      	ldr	r3, [r4, #0]
 802048a:	1c5a      	adds	r2, r3, #1
 802048c:	6022      	str	r2, [r4, #0]
 802048e:	701e      	strb	r6, [r3, #0]
 8020490:	6962      	ldr	r2, [r4, #20]
 8020492:	1c43      	adds	r3, r0, #1
 8020494:	429a      	cmp	r2, r3
 8020496:	d004      	beq.n	80204a2 <__swbuf_r+0x84>
 8020498:	89a3      	ldrh	r3, [r4, #12]
 802049a:	07db      	lsls	r3, r3, #31
 802049c:	d5d6      	bpl.n	802044c <__swbuf_r+0x2e>
 802049e:	2e0a      	cmp	r6, #10
 80204a0:	d1d4      	bne.n	802044c <__swbuf_r+0x2e>
 80204a2:	4621      	mov	r1, r4
 80204a4:	4628      	mov	r0, r5
 80204a6:	f7fd fe33 	bl	801e110 <_fflush_r>
 80204aa:	2800      	cmp	r0, #0
 80204ac:	d0ce      	beq.n	802044c <__swbuf_r+0x2e>
 80204ae:	e7cb      	b.n	8020448 <__swbuf_r+0x2a>

080204b0 <_fstat_r>:
 80204b0:	b538      	push	{r3, r4, r5, lr}
 80204b2:	4d07      	ldr	r5, [pc, #28]	@ (80204d0 <_fstat_r+0x20>)
 80204b4:	2300      	movs	r3, #0
 80204b6:	4604      	mov	r4, r0
 80204b8:	4608      	mov	r0, r1
 80204ba:	4611      	mov	r1, r2
 80204bc:	602b      	str	r3, [r5, #0]
 80204be:	f7e1 fcfb 	bl	8001eb8 <_fstat>
 80204c2:	1c43      	adds	r3, r0, #1
 80204c4:	d102      	bne.n	80204cc <_fstat_r+0x1c>
 80204c6:	682b      	ldr	r3, [r5, #0]
 80204c8:	b103      	cbz	r3, 80204cc <_fstat_r+0x1c>
 80204ca:	6023      	str	r3, [r4, #0]
 80204cc:	bd38      	pop	{r3, r4, r5, pc}
 80204ce:	bf00      	nop
 80204d0:	200021bc 	.word	0x200021bc

080204d4 <_isatty_r>:
 80204d4:	b538      	push	{r3, r4, r5, lr}
 80204d6:	4d06      	ldr	r5, [pc, #24]	@ (80204f0 <_isatty_r+0x1c>)
 80204d8:	2300      	movs	r3, #0
 80204da:	4604      	mov	r4, r0
 80204dc:	4608      	mov	r0, r1
 80204de:	602b      	str	r3, [r5, #0]
 80204e0:	f7e1 fcfa 	bl	8001ed8 <_isatty>
 80204e4:	1c43      	adds	r3, r0, #1
 80204e6:	d102      	bne.n	80204ee <_isatty_r+0x1a>
 80204e8:	682b      	ldr	r3, [r5, #0]
 80204ea:	b103      	cbz	r3, 80204ee <_isatty_r+0x1a>
 80204ec:	6023      	str	r3, [r4, #0]
 80204ee:	bd38      	pop	{r3, r4, r5, pc}
 80204f0:	200021bc 	.word	0x200021bc

080204f4 <__assert_func>:
 80204f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80204f6:	4614      	mov	r4, r2
 80204f8:	461a      	mov	r2, r3
 80204fa:	4b09      	ldr	r3, [pc, #36]	@ (8020520 <__assert_func+0x2c>)
 80204fc:	681b      	ldr	r3, [r3, #0]
 80204fe:	4605      	mov	r5, r0
 8020500:	68d8      	ldr	r0, [r3, #12]
 8020502:	b954      	cbnz	r4, 802051a <__assert_func+0x26>
 8020504:	4b07      	ldr	r3, [pc, #28]	@ (8020524 <__assert_func+0x30>)
 8020506:	461c      	mov	r4, r3
 8020508:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802050c:	9100      	str	r1, [sp, #0]
 802050e:	462b      	mov	r3, r5
 8020510:	4905      	ldr	r1, [pc, #20]	@ (8020528 <__assert_func+0x34>)
 8020512:	f000 f843 	bl	802059c <fiprintf>
 8020516:	f000 f853 	bl	80205c0 <abort>
 802051a:	4b04      	ldr	r3, [pc, #16]	@ (802052c <__assert_func+0x38>)
 802051c:	e7f4      	b.n	8020508 <__assert_func+0x14>
 802051e:	bf00      	nop
 8020520:	20000824 	.word	0x20000824
 8020524:	08021793 	.word	0x08021793
 8020528:	08021765 	.word	0x08021765
 802052c:	08021758 	.word	0x08021758

08020530 <_calloc_r>:
 8020530:	b538      	push	{r3, r4, r5, lr}
 8020532:	fba1 1502 	umull	r1, r5, r1, r2
 8020536:	b935      	cbnz	r5, 8020546 <_calloc_r+0x16>
 8020538:	f7f7 ff4c 	bl	80183d4 <_malloc_r>
 802053c:	4604      	mov	r4, r0
 802053e:	b938      	cbnz	r0, 8020550 <_calloc_r+0x20>
 8020540:	2400      	movs	r4, #0
 8020542:	4620      	mov	r0, r4
 8020544:	bd38      	pop	{r3, r4, r5, pc}
 8020546:	f7f9 f9a7 	bl	8019898 <__errno>
 802054a:	230c      	movs	r3, #12
 802054c:	6003      	str	r3, [r0, #0]
 802054e:	e7f7      	b.n	8020540 <_calloc_r+0x10>
 8020550:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8020554:	f022 0203 	bic.w	r2, r2, #3
 8020558:	3a04      	subs	r2, #4
 802055a:	2a24      	cmp	r2, #36	@ 0x24
 802055c:	d819      	bhi.n	8020592 <_calloc_r+0x62>
 802055e:	2a13      	cmp	r2, #19
 8020560:	d915      	bls.n	802058e <_calloc_r+0x5e>
 8020562:	2a1b      	cmp	r2, #27
 8020564:	e9c0 5500 	strd	r5, r5, [r0]
 8020568:	d806      	bhi.n	8020578 <_calloc_r+0x48>
 802056a:	f100 0308 	add.w	r3, r0, #8
 802056e:	2200      	movs	r2, #0
 8020570:	e9c3 2200 	strd	r2, r2, [r3]
 8020574:	609a      	str	r2, [r3, #8]
 8020576:	e7e4      	b.n	8020542 <_calloc_r+0x12>
 8020578:	2a24      	cmp	r2, #36	@ 0x24
 802057a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802057e:	bf11      	iteee	ne
 8020580:	f100 0310 	addne.w	r3, r0, #16
 8020584:	6105      	streq	r5, [r0, #16]
 8020586:	f100 0318 	addeq.w	r3, r0, #24
 802058a:	6145      	streq	r5, [r0, #20]
 802058c:	e7ef      	b.n	802056e <_calloc_r+0x3e>
 802058e:	4603      	mov	r3, r0
 8020590:	e7ed      	b.n	802056e <_calloc_r+0x3e>
 8020592:	4629      	mov	r1, r5
 8020594:	f7f8 fb12 	bl	8018bbc <memset>
 8020598:	e7d3      	b.n	8020542 <_calloc_r+0x12>
	...

0802059c <fiprintf>:
 802059c:	b40e      	push	{r1, r2, r3}
 802059e:	b503      	push	{r0, r1, lr}
 80205a0:	4601      	mov	r1, r0
 80205a2:	ab03      	add	r3, sp, #12
 80205a4:	4805      	ldr	r0, [pc, #20]	@ (80205bc <fiprintf+0x20>)
 80205a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80205aa:	6800      	ldr	r0, [r0, #0]
 80205ac:	9301      	str	r3, [sp, #4]
 80205ae:	f7fd f809 	bl	801d5c4 <_vfiprintf_r>
 80205b2:	b002      	add	sp, #8
 80205b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80205b8:	b003      	add	sp, #12
 80205ba:	4770      	bx	lr
 80205bc:	20000824 	.word	0x20000824

080205c0 <abort>:
 80205c0:	b508      	push	{r3, lr}
 80205c2:	2006      	movs	r0, #6
 80205c4:	f000 f82c 	bl	8020620 <raise>
 80205c8:	2001      	movs	r0, #1
 80205ca:	f7e1 fc25 	bl	8001e18 <_exit>

080205ce <_raise_r>:
 80205ce:	291f      	cmp	r1, #31
 80205d0:	b538      	push	{r3, r4, r5, lr}
 80205d2:	4605      	mov	r5, r0
 80205d4:	460c      	mov	r4, r1
 80205d6:	d904      	bls.n	80205e2 <_raise_r+0x14>
 80205d8:	2316      	movs	r3, #22
 80205da:	6003      	str	r3, [r0, #0]
 80205dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80205e0:	bd38      	pop	{r3, r4, r5, pc}
 80205e2:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80205e6:	b112      	cbz	r2, 80205ee <_raise_r+0x20>
 80205e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80205ec:	b94b      	cbnz	r3, 8020602 <_raise_r+0x34>
 80205ee:	4628      	mov	r0, r5
 80205f0:	f000 f830 	bl	8020654 <_getpid_r>
 80205f4:	4622      	mov	r2, r4
 80205f6:	4601      	mov	r1, r0
 80205f8:	4628      	mov	r0, r5
 80205fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80205fe:	f000 b817 	b.w	8020630 <_kill_r>
 8020602:	2b01      	cmp	r3, #1
 8020604:	d00a      	beq.n	802061c <_raise_r+0x4e>
 8020606:	1c59      	adds	r1, r3, #1
 8020608:	d103      	bne.n	8020612 <_raise_r+0x44>
 802060a:	2316      	movs	r3, #22
 802060c:	6003      	str	r3, [r0, #0]
 802060e:	2001      	movs	r0, #1
 8020610:	e7e6      	b.n	80205e0 <_raise_r+0x12>
 8020612:	2100      	movs	r1, #0
 8020614:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020618:	4620      	mov	r0, r4
 802061a:	4798      	blx	r3
 802061c:	2000      	movs	r0, #0
 802061e:	e7df      	b.n	80205e0 <_raise_r+0x12>

08020620 <raise>:
 8020620:	4b02      	ldr	r3, [pc, #8]	@ (802062c <raise+0xc>)
 8020622:	4601      	mov	r1, r0
 8020624:	6818      	ldr	r0, [r3, #0]
 8020626:	f7ff bfd2 	b.w	80205ce <_raise_r>
 802062a:	bf00      	nop
 802062c:	20000824 	.word	0x20000824

08020630 <_kill_r>:
 8020630:	b538      	push	{r3, r4, r5, lr}
 8020632:	4d07      	ldr	r5, [pc, #28]	@ (8020650 <_kill_r+0x20>)
 8020634:	2300      	movs	r3, #0
 8020636:	4604      	mov	r4, r0
 8020638:	4608      	mov	r0, r1
 802063a:	4611      	mov	r1, r2
 802063c:	602b      	str	r3, [r5, #0]
 802063e:	f7e1 fbdb 	bl	8001df8 <_kill>
 8020642:	1c43      	adds	r3, r0, #1
 8020644:	d102      	bne.n	802064c <_kill_r+0x1c>
 8020646:	682b      	ldr	r3, [r5, #0]
 8020648:	b103      	cbz	r3, 802064c <_kill_r+0x1c>
 802064a:	6023      	str	r3, [r4, #0]
 802064c:	bd38      	pop	{r3, r4, r5, pc}
 802064e:	bf00      	nop
 8020650:	200021bc 	.word	0x200021bc

08020654 <_getpid_r>:
 8020654:	f7e1 bbc8 	b.w	8001de8 <_getpid>

08020658 <ceil>:
 8020658:	ec51 0b10 	vmov	r0, r1, d0
 802065c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8020660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020664:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8020668:	2e13      	cmp	r6, #19
 802066a:	460c      	mov	r4, r1
 802066c:	4605      	mov	r5, r0
 802066e:	4680      	mov	r8, r0
 8020670:	dc2e      	bgt.n	80206d0 <ceil+0x78>
 8020672:	2e00      	cmp	r6, #0
 8020674:	da11      	bge.n	802069a <ceil+0x42>
 8020676:	a332      	add	r3, pc, #200	@ (adr r3, 8020740 <ceil+0xe8>)
 8020678:	e9d3 2300 	ldrd	r2, r3, [r3]
 802067c:	f7df fe16 	bl	80002ac <__adddf3>
 8020680:	2200      	movs	r2, #0
 8020682:	2300      	movs	r3, #0
 8020684:	f7e0 fa58 	bl	8000b38 <__aeabi_dcmpgt>
 8020688:	b120      	cbz	r0, 8020694 <ceil+0x3c>
 802068a:	2c00      	cmp	r4, #0
 802068c:	db4f      	blt.n	802072e <ceil+0xd6>
 802068e:	4325      	orrs	r5, r4
 8020690:	d151      	bne.n	8020736 <ceil+0xde>
 8020692:	462c      	mov	r4, r5
 8020694:	4621      	mov	r1, r4
 8020696:	4628      	mov	r0, r5
 8020698:	e023      	b.n	80206e2 <ceil+0x8a>
 802069a:	4f2b      	ldr	r7, [pc, #172]	@ (8020748 <ceil+0xf0>)
 802069c:	4137      	asrs	r7, r6
 802069e:	ea01 0307 	and.w	r3, r1, r7
 80206a2:	4303      	orrs	r3, r0
 80206a4:	d01d      	beq.n	80206e2 <ceil+0x8a>
 80206a6:	a326      	add	r3, pc, #152	@ (adr r3, 8020740 <ceil+0xe8>)
 80206a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206ac:	f7df fdfe 	bl	80002ac <__adddf3>
 80206b0:	2200      	movs	r2, #0
 80206b2:	2300      	movs	r3, #0
 80206b4:	f7e0 fa40 	bl	8000b38 <__aeabi_dcmpgt>
 80206b8:	2800      	cmp	r0, #0
 80206ba:	d0eb      	beq.n	8020694 <ceil+0x3c>
 80206bc:	2c00      	cmp	r4, #0
 80206be:	bfc2      	ittt	gt
 80206c0:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80206c4:	4133      	asrgt	r3, r6
 80206c6:	18e4      	addgt	r4, r4, r3
 80206c8:	ea24 0407 	bic.w	r4, r4, r7
 80206cc:	2500      	movs	r5, #0
 80206ce:	e7e1      	b.n	8020694 <ceil+0x3c>
 80206d0:	2e33      	cmp	r6, #51	@ 0x33
 80206d2:	dd0a      	ble.n	80206ea <ceil+0x92>
 80206d4:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80206d8:	d103      	bne.n	80206e2 <ceil+0x8a>
 80206da:	4602      	mov	r2, r0
 80206dc:	460b      	mov	r3, r1
 80206de:	f7df fde5 	bl	80002ac <__adddf3>
 80206e2:	ec41 0b10 	vmov	d0, r0, r1
 80206e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80206ea:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80206ee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80206f2:	40df      	lsrs	r7, r3
 80206f4:	4238      	tst	r0, r7
 80206f6:	d0f4      	beq.n	80206e2 <ceil+0x8a>
 80206f8:	a311      	add	r3, pc, #68	@ (adr r3, 8020740 <ceil+0xe8>)
 80206fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206fe:	f7df fdd5 	bl	80002ac <__adddf3>
 8020702:	2200      	movs	r2, #0
 8020704:	2300      	movs	r3, #0
 8020706:	f7e0 fa17 	bl	8000b38 <__aeabi_dcmpgt>
 802070a:	2800      	cmp	r0, #0
 802070c:	d0c2      	beq.n	8020694 <ceil+0x3c>
 802070e:	2c00      	cmp	r4, #0
 8020710:	dd0a      	ble.n	8020728 <ceil+0xd0>
 8020712:	2e14      	cmp	r6, #20
 8020714:	d101      	bne.n	802071a <ceil+0xc2>
 8020716:	3401      	adds	r4, #1
 8020718:	e006      	b.n	8020728 <ceil+0xd0>
 802071a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 802071e:	2301      	movs	r3, #1
 8020720:	40b3      	lsls	r3, r6
 8020722:	441d      	add	r5, r3
 8020724:	45a8      	cmp	r8, r5
 8020726:	d8f6      	bhi.n	8020716 <ceil+0xbe>
 8020728:	ea25 0507 	bic.w	r5, r5, r7
 802072c:	e7b2      	b.n	8020694 <ceil+0x3c>
 802072e:	2500      	movs	r5, #0
 8020730:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8020734:	e7ae      	b.n	8020694 <ceil+0x3c>
 8020736:	4c05      	ldr	r4, [pc, #20]	@ (802074c <ceil+0xf4>)
 8020738:	2500      	movs	r5, #0
 802073a:	e7ab      	b.n	8020694 <ceil+0x3c>
 802073c:	f3af 8000 	nop.w
 8020740:	8800759c 	.word	0x8800759c
 8020744:	7e37e43c 	.word	0x7e37e43c
 8020748:	000fffff 	.word	0x000fffff
 802074c:	3ff00000 	.word	0x3ff00000

08020750 <floor>:
 8020750:	ec51 0b10 	vmov	r0, r1, d0
 8020754:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8020758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802075c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8020760:	2e13      	cmp	r6, #19
 8020762:	460c      	mov	r4, r1
 8020764:	4605      	mov	r5, r0
 8020766:	4680      	mov	r8, r0
 8020768:	dc34      	bgt.n	80207d4 <floor+0x84>
 802076a:	2e00      	cmp	r6, #0
 802076c:	da17      	bge.n	802079e <floor+0x4e>
 802076e:	a332      	add	r3, pc, #200	@ (adr r3, 8020838 <floor+0xe8>)
 8020770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020774:	f7df fd9a 	bl	80002ac <__adddf3>
 8020778:	2200      	movs	r2, #0
 802077a:	2300      	movs	r3, #0
 802077c:	f7e0 f9dc 	bl	8000b38 <__aeabi_dcmpgt>
 8020780:	b150      	cbz	r0, 8020798 <floor+0x48>
 8020782:	2c00      	cmp	r4, #0
 8020784:	da55      	bge.n	8020832 <floor+0xe2>
 8020786:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 802078a:	432c      	orrs	r4, r5
 802078c:	2500      	movs	r5, #0
 802078e:	42ac      	cmp	r4, r5
 8020790:	4c2b      	ldr	r4, [pc, #172]	@ (8020840 <floor+0xf0>)
 8020792:	bf08      	it	eq
 8020794:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8020798:	4621      	mov	r1, r4
 802079a:	4628      	mov	r0, r5
 802079c:	e023      	b.n	80207e6 <floor+0x96>
 802079e:	4f29      	ldr	r7, [pc, #164]	@ (8020844 <floor+0xf4>)
 80207a0:	4137      	asrs	r7, r6
 80207a2:	ea01 0307 	and.w	r3, r1, r7
 80207a6:	4303      	orrs	r3, r0
 80207a8:	d01d      	beq.n	80207e6 <floor+0x96>
 80207aa:	a323      	add	r3, pc, #140	@ (adr r3, 8020838 <floor+0xe8>)
 80207ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207b0:	f7df fd7c 	bl	80002ac <__adddf3>
 80207b4:	2200      	movs	r2, #0
 80207b6:	2300      	movs	r3, #0
 80207b8:	f7e0 f9be 	bl	8000b38 <__aeabi_dcmpgt>
 80207bc:	2800      	cmp	r0, #0
 80207be:	d0eb      	beq.n	8020798 <floor+0x48>
 80207c0:	2c00      	cmp	r4, #0
 80207c2:	bfbe      	ittt	lt
 80207c4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80207c8:	4133      	asrlt	r3, r6
 80207ca:	18e4      	addlt	r4, r4, r3
 80207cc:	ea24 0407 	bic.w	r4, r4, r7
 80207d0:	2500      	movs	r5, #0
 80207d2:	e7e1      	b.n	8020798 <floor+0x48>
 80207d4:	2e33      	cmp	r6, #51	@ 0x33
 80207d6:	dd0a      	ble.n	80207ee <floor+0x9e>
 80207d8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80207dc:	d103      	bne.n	80207e6 <floor+0x96>
 80207de:	4602      	mov	r2, r0
 80207e0:	460b      	mov	r3, r1
 80207e2:	f7df fd63 	bl	80002ac <__adddf3>
 80207e6:	ec41 0b10 	vmov	d0, r0, r1
 80207ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80207ee:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80207f2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80207f6:	40df      	lsrs	r7, r3
 80207f8:	4207      	tst	r7, r0
 80207fa:	d0f4      	beq.n	80207e6 <floor+0x96>
 80207fc:	a30e      	add	r3, pc, #56	@ (adr r3, 8020838 <floor+0xe8>)
 80207fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020802:	f7df fd53 	bl	80002ac <__adddf3>
 8020806:	2200      	movs	r2, #0
 8020808:	2300      	movs	r3, #0
 802080a:	f7e0 f995 	bl	8000b38 <__aeabi_dcmpgt>
 802080e:	2800      	cmp	r0, #0
 8020810:	d0c2      	beq.n	8020798 <floor+0x48>
 8020812:	2c00      	cmp	r4, #0
 8020814:	da0a      	bge.n	802082c <floor+0xdc>
 8020816:	2e14      	cmp	r6, #20
 8020818:	d101      	bne.n	802081e <floor+0xce>
 802081a:	3401      	adds	r4, #1
 802081c:	e006      	b.n	802082c <floor+0xdc>
 802081e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8020822:	2301      	movs	r3, #1
 8020824:	40b3      	lsls	r3, r6
 8020826:	441d      	add	r5, r3
 8020828:	4545      	cmp	r5, r8
 802082a:	d3f6      	bcc.n	802081a <floor+0xca>
 802082c:	ea25 0507 	bic.w	r5, r5, r7
 8020830:	e7b2      	b.n	8020798 <floor+0x48>
 8020832:	2500      	movs	r5, #0
 8020834:	462c      	mov	r4, r5
 8020836:	e7af      	b.n	8020798 <floor+0x48>
 8020838:	8800759c 	.word	0x8800759c
 802083c:	7e37e43c 	.word	0x7e37e43c
 8020840:	bff00000 	.word	0xbff00000
 8020844:	000fffff 	.word	0x000fffff

08020848 <rint>:
 8020848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802084a:	ec53 2b10 	vmov	r2, r3, d0
 802084e:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8020852:	f2a0 35ff 	subw	r5, r0, #1023	@ 0x3ff
 8020856:	2d13      	cmp	r5, #19
 8020858:	461c      	mov	r4, r3
 802085a:	4611      	mov	r1, r2
 802085c:	ea4f 76d3 	mov.w	r6, r3, lsr #31
 8020860:	dc5b      	bgt.n	802091a <rint+0xd2>
 8020862:	2d00      	cmp	r5, #0
 8020864:	da2f      	bge.n	80208c6 <rint+0x7e>
 8020866:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 802086a:	4310      	orrs	r0, r2
 802086c:	d027      	beq.n	80208be <rint+0x76>
 802086e:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8020872:	4315      	orrs	r5, r2
 8020874:	426b      	negs	r3, r5
 8020876:	432b      	orrs	r3, r5
 8020878:	4610      	mov	r0, r2
 802087a:	0b1b      	lsrs	r3, r3, #12
 802087c:	0c62      	lsrs	r2, r4, #17
 802087e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8020882:	0452      	lsls	r2, r2, #17
 8020884:	ea43 0102 	orr.w	r1, r3, r2
 8020888:	460b      	mov	r3, r1
 802088a:	4933      	ldr	r1, [pc, #204]	@ (8020958 <rint+0x110>)
 802088c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8020890:	e9d1 6700 	ldrd	r6, r7, [r1]
 8020894:	4602      	mov	r2, r0
 8020896:	4639      	mov	r1, r7
 8020898:	4630      	mov	r0, r6
 802089a:	f7df fd07 	bl	80002ac <__adddf3>
 802089e:	e9cd 0100 	strd	r0, r1, [sp]
 80208a2:	463b      	mov	r3, r7
 80208a4:	4632      	mov	r2, r6
 80208a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80208aa:	f7df fcfd 	bl	80002a8 <__aeabi_dsub>
 80208ae:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 80208b2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80208b6:	ea44 0703 	orr.w	r7, r4, r3
 80208ba:	4602      	mov	r2, r0
 80208bc:	463b      	mov	r3, r7
 80208be:	ec43 2b10 	vmov	d0, r2, r3
 80208c2:	b003      	add	sp, #12
 80208c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208c6:	4825      	ldr	r0, [pc, #148]	@ (802095c <rint+0x114>)
 80208c8:	4128      	asrs	r0, r5
 80208ca:	ea00 0703 	and.w	r7, r0, r3
 80208ce:	4317      	orrs	r7, r2
 80208d0:	d0f5      	beq.n	80208be <rint+0x76>
 80208d2:	0843      	lsrs	r3, r0, #1
 80208d4:	ea04 0050 	and.w	r0, r4, r0, lsr #1
 80208d8:	4301      	orrs	r1, r0
 80208da:	d00a      	beq.n	80208f2 <rint+0xaa>
 80208dc:	f1a5 0213 	sub.w	r2, r5, #19
 80208e0:	ea24 0303 	bic.w	r3, r4, r3
 80208e4:	4251      	negs	r1, r2
 80208e6:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 80208ea:	4151      	adcs	r1, r2
 80208ec:	412c      	asrs	r4, r5
 80208ee:	07c9      	lsls	r1, r1, #31
 80208f0:	431c      	orrs	r4, r3
 80208f2:	460a      	mov	r2, r1
 80208f4:	4918      	ldr	r1, [pc, #96]	@ (8020958 <rint+0x110>)
 80208f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80208fa:	4623      	mov	r3, r4
 80208fc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020900:	4620      	mov	r0, r4
 8020902:	4629      	mov	r1, r5
 8020904:	f7df fcd2 	bl	80002ac <__adddf3>
 8020908:	e9cd 0100 	strd	r0, r1, [sp]
 802090c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020910:	4622      	mov	r2, r4
 8020912:	462b      	mov	r3, r5
 8020914:	f7df fcc8 	bl	80002a8 <__aeabi_dsub>
 8020918:	e008      	b.n	802092c <rint+0xe4>
 802091a:	2d33      	cmp	r5, #51	@ 0x33
 802091c:	dd09      	ble.n	8020932 <rint+0xea>
 802091e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8020922:	d1cc      	bne.n	80208be <rint+0x76>
 8020924:	4610      	mov	r0, r2
 8020926:	4619      	mov	r1, r3
 8020928:	f7df fcc0 	bl	80002ac <__adddf3>
 802092c:	4602      	mov	r2, r0
 802092e:	460b      	mov	r3, r1
 8020930:	e7c5      	b.n	80208be <rint+0x76>
 8020932:	f2a0 4513 	subw	r5, r0, #1043	@ 0x413
 8020936:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802093a:	40e8      	lsrs	r0, r5
 802093c:	4202      	tst	r2, r0
 802093e:	d0be      	beq.n	80208be <rint+0x76>
 8020940:	0843      	lsrs	r3, r0, #1
 8020942:	ea11 0050 	ands.w	r0, r1, r0, lsr #1
 8020946:	bf1f      	itttt	ne
 8020948:	ea21 0303 	bicne.w	r3, r1, r3
 802094c:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 8020950:	4129      	asrne	r1, r5
 8020952:	4319      	orrne	r1, r3
 8020954:	e7cd      	b.n	80208f2 <rint+0xaa>
 8020956:	bf00      	nop
 8020958:	08021798 	.word	0x08021798
 802095c:	000fffff 	.word	0x000fffff

08020960 <_init>:
 8020960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020962:	bf00      	nop
 8020964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020966:	bc08      	pop	{r3}
 8020968:	469e      	mov	lr, r3
 802096a:	4770      	bx	lr

0802096c <_fini>:
 802096c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802096e:	bf00      	nop
 8020970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020972:	bc08      	pop	{r3}
 8020974:	469e      	mov	lr, r3
 8020976:	4770      	bx	lr
