
Demo_SoundLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baf8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800bbb8  0800bbb8  0000cbb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c058  0800c058  0000e0b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c058  0800c058  0000e0b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c058  0800c058  0000e0b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c058  0800c058  0000d058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c05c  0800c05c  0000d05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  0800c060  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200000b4  0800c114  0000e0b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800c114  0000e418  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e0b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013363  00000000  00000000  0000e0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346b  00000000  00000000  0002143f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  000248b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dae  00000000  00000000  00025aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b82b  00000000  00000000  00026856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ba6  00000000  00000000  00042081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8b0a  00000000  00000000  00057c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100731  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004378  00000000  00000000  00100774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00104aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b4 	.word	0x200000b4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bba0 	.word	0x0800bba0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b8 	.word	0x200000b8
 8000104:	0800bba0 	.word	0x0800bba0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fa91 	bl	8001758 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f9d1 	bl	80015e8 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fa83 	bl	8001758 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fa79 	bl	8001758 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f9fb 	bl	8001670 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f9f1 	bl	8001670 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__clzsi2>:
 800029c:	211c      	movs	r1, #28
 800029e:	2301      	movs	r3, #1
 80002a0:	041b      	lsls	r3, r3, #16
 80002a2:	4298      	cmp	r0, r3
 80002a4:	d301      	bcc.n	80002aa <__clzsi2+0xe>
 80002a6:	0c00      	lsrs	r0, r0, #16
 80002a8:	3910      	subs	r1, #16
 80002aa:	0a1b      	lsrs	r3, r3, #8
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d301      	bcc.n	80002b4 <__clzsi2+0x18>
 80002b0:	0a00      	lsrs	r0, r0, #8
 80002b2:	3908      	subs	r1, #8
 80002b4:	091b      	lsrs	r3, r3, #4
 80002b6:	4298      	cmp	r0, r3
 80002b8:	d301      	bcc.n	80002be <__clzsi2+0x22>
 80002ba:	0900      	lsrs	r0, r0, #4
 80002bc:	3904      	subs	r1, #4
 80002be:	a202      	add	r2, pc, #8	@ (adr r2, 80002c8 <__clzsi2+0x2c>)
 80002c0:	5c10      	ldrb	r0, [r2, r0]
 80002c2:	1840      	adds	r0, r0, r1
 80002c4:	4770      	bx	lr
 80002c6:	46c0      	nop			@ (mov r8, r8)
 80002c8:	02020304 	.word	0x02020304
 80002cc:	01010101 	.word	0x01010101
	...

080002d8 <__aeabi_d2uiz>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	2200      	movs	r2, #0
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <__aeabi_d2uiz+0x38>)
 80002de:	0004      	movs	r4, r0
 80002e0:	000d      	movs	r5, r1
 80002e2:	f7ff ffd1 	bl	8000288 <__aeabi_dcmpge>
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d104      	bne.n	80002f4 <__aeabi_d2uiz+0x1c>
 80002ea:	0020      	movs	r0, r4
 80002ec:	0029      	movs	r1, r5
 80002ee:	f002 f909 	bl	8002504 <__aeabi_d2iz>
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <__aeabi_d2uiz+0x38>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	0020      	movs	r0, r4
 80002fa:	0029      	movs	r1, r5
 80002fc:	f001 fd66 	bl	8001dcc <__aeabi_dsub>
 8000300:	f002 f900 	bl	8002504 <__aeabi_d2iz>
 8000304:	2380      	movs	r3, #128	@ 0x80
 8000306:	061b      	lsls	r3, r3, #24
 8000308:	469c      	mov	ip, r3
 800030a:	4460      	add	r0, ip
 800030c:	e7f1      	b.n	80002f2 <__aeabi_d2uiz+0x1a>
 800030e:	46c0      	nop			@ (mov r8, r8)
 8000310:	41e00000 	.word	0x41e00000

08000314 <__aeabi_fdiv>:
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	464f      	mov	r7, r9
 8000318:	4646      	mov	r6, r8
 800031a:	46d6      	mov	lr, sl
 800031c:	0244      	lsls	r4, r0, #9
 800031e:	b5c0      	push	{r6, r7, lr}
 8000320:	0047      	lsls	r7, r0, #1
 8000322:	1c0e      	adds	r6, r1, #0
 8000324:	0a64      	lsrs	r4, r4, #9
 8000326:	0e3f      	lsrs	r7, r7, #24
 8000328:	0fc5      	lsrs	r5, r0, #31
 800032a:	2f00      	cmp	r7, #0
 800032c:	d03c      	beq.n	80003a8 <__aeabi_fdiv+0x94>
 800032e:	2fff      	cmp	r7, #255	@ 0xff
 8000330:	d042      	beq.n	80003b8 <__aeabi_fdiv+0xa4>
 8000332:	2300      	movs	r3, #0
 8000334:	2280      	movs	r2, #128	@ 0x80
 8000336:	4699      	mov	r9, r3
 8000338:	469a      	mov	sl, r3
 800033a:	00e4      	lsls	r4, r4, #3
 800033c:	04d2      	lsls	r2, r2, #19
 800033e:	4314      	orrs	r4, r2
 8000340:	3f7f      	subs	r7, #127	@ 0x7f
 8000342:	0273      	lsls	r3, r6, #9
 8000344:	0a5b      	lsrs	r3, r3, #9
 8000346:	4698      	mov	r8, r3
 8000348:	0073      	lsls	r3, r6, #1
 800034a:	0e1b      	lsrs	r3, r3, #24
 800034c:	0ff6      	lsrs	r6, r6, #31
 800034e:	2b00      	cmp	r3, #0
 8000350:	d01b      	beq.n	800038a <__aeabi_fdiv+0x76>
 8000352:	2bff      	cmp	r3, #255	@ 0xff
 8000354:	d013      	beq.n	800037e <__aeabi_fdiv+0x6a>
 8000356:	4642      	mov	r2, r8
 8000358:	2180      	movs	r1, #128	@ 0x80
 800035a:	00d2      	lsls	r2, r2, #3
 800035c:	04c9      	lsls	r1, r1, #19
 800035e:	4311      	orrs	r1, r2
 8000360:	4688      	mov	r8, r1
 8000362:	2000      	movs	r0, #0
 8000364:	3b7f      	subs	r3, #127	@ 0x7f
 8000366:	0029      	movs	r1, r5
 8000368:	1aff      	subs	r7, r7, r3
 800036a:	464b      	mov	r3, r9
 800036c:	4071      	eors	r1, r6
 800036e:	b2c9      	uxtb	r1, r1
 8000370:	2b0f      	cmp	r3, #15
 8000372:	d900      	bls.n	8000376 <__aeabi_fdiv+0x62>
 8000374:	e0b5      	b.n	80004e2 <__aeabi_fdiv+0x1ce>
 8000376:	4a74      	ldr	r2, [pc, #464]	@ (8000548 <__aeabi_fdiv+0x234>)
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	58d3      	ldr	r3, [r2, r3]
 800037c:	469f      	mov	pc, r3
 800037e:	4643      	mov	r3, r8
 8000380:	2b00      	cmp	r3, #0
 8000382:	d13f      	bne.n	8000404 <__aeabi_fdiv+0xf0>
 8000384:	3fff      	subs	r7, #255	@ 0xff
 8000386:	3302      	adds	r3, #2
 8000388:	e003      	b.n	8000392 <__aeabi_fdiv+0x7e>
 800038a:	4643      	mov	r3, r8
 800038c:	2b00      	cmp	r3, #0
 800038e:	d12d      	bne.n	80003ec <__aeabi_fdiv+0xd8>
 8000390:	2301      	movs	r3, #1
 8000392:	0029      	movs	r1, r5
 8000394:	464a      	mov	r2, r9
 8000396:	4071      	eors	r1, r6
 8000398:	b2c9      	uxtb	r1, r1
 800039a:	431a      	orrs	r2, r3
 800039c:	2a0e      	cmp	r2, #14
 800039e:	d838      	bhi.n	8000412 <__aeabi_fdiv+0xfe>
 80003a0:	486a      	ldr	r0, [pc, #424]	@ (800054c <__aeabi_fdiv+0x238>)
 80003a2:	0092      	lsls	r2, r2, #2
 80003a4:	5882      	ldr	r2, [r0, r2]
 80003a6:	4697      	mov	pc, r2
 80003a8:	2c00      	cmp	r4, #0
 80003aa:	d113      	bne.n	80003d4 <__aeabi_fdiv+0xc0>
 80003ac:	2304      	movs	r3, #4
 80003ae:	4699      	mov	r9, r3
 80003b0:	3b03      	subs	r3, #3
 80003b2:	2700      	movs	r7, #0
 80003b4:	469a      	mov	sl, r3
 80003b6:	e7c4      	b.n	8000342 <__aeabi_fdiv+0x2e>
 80003b8:	2c00      	cmp	r4, #0
 80003ba:	d105      	bne.n	80003c8 <__aeabi_fdiv+0xb4>
 80003bc:	2308      	movs	r3, #8
 80003be:	4699      	mov	r9, r3
 80003c0:	3b06      	subs	r3, #6
 80003c2:	27ff      	movs	r7, #255	@ 0xff
 80003c4:	469a      	mov	sl, r3
 80003c6:	e7bc      	b.n	8000342 <__aeabi_fdiv+0x2e>
 80003c8:	230c      	movs	r3, #12
 80003ca:	4699      	mov	r9, r3
 80003cc:	3b09      	subs	r3, #9
 80003ce:	27ff      	movs	r7, #255	@ 0xff
 80003d0:	469a      	mov	sl, r3
 80003d2:	e7b6      	b.n	8000342 <__aeabi_fdiv+0x2e>
 80003d4:	0020      	movs	r0, r4
 80003d6:	f7ff ff61 	bl	800029c <__clzsi2>
 80003da:	2776      	movs	r7, #118	@ 0x76
 80003dc:	1f43      	subs	r3, r0, #5
 80003de:	409c      	lsls	r4, r3
 80003e0:	2300      	movs	r3, #0
 80003e2:	427f      	negs	r7, r7
 80003e4:	4699      	mov	r9, r3
 80003e6:	469a      	mov	sl, r3
 80003e8:	1a3f      	subs	r7, r7, r0
 80003ea:	e7aa      	b.n	8000342 <__aeabi_fdiv+0x2e>
 80003ec:	4640      	mov	r0, r8
 80003ee:	f7ff ff55 	bl	800029c <__clzsi2>
 80003f2:	4642      	mov	r2, r8
 80003f4:	1f43      	subs	r3, r0, #5
 80003f6:	409a      	lsls	r2, r3
 80003f8:	2376      	movs	r3, #118	@ 0x76
 80003fa:	425b      	negs	r3, r3
 80003fc:	1a1b      	subs	r3, r3, r0
 80003fe:	4690      	mov	r8, r2
 8000400:	2000      	movs	r0, #0
 8000402:	e7b0      	b.n	8000366 <__aeabi_fdiv+0x52>
 8000404:	2303      	movs	r3, #3
 8000406:	464a      	mov	r2, r9
 8000408:	431a      	orrs	r2, r3
 800040a:	4691      	mov	r9, r2
 800040c:	2003      	movs	r0, #3
 800040e:	33fc      	adds	r3, #252	@ 0xfc
 8000410:	e7a9      	b.n	8000366 <__aeabi_fdiv+0x52>
 8000412:	000d      	movs	r5, r1
 8000414:	20ff      	movs	r0, #255	@ 0xff
 8000416:	2200      	movs	r2, #0
 8000418:	05c0      	lsls	r0, r0, #23
 800041a:	07ed      	lsls	r5, r5, #31
 800041c:	4310      	orrs	r0, r2
 800041e:	4328      	orrs	r0, r5
 8000420:	bce0      	pop	{r5, r6, r7}
 8000422:	46ba      	mov	sl, r7
 8000424:	46b1      	mov	r9, r6
 8000426:	46a8      	mov	r8, r5
 8000428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800042a:	000d      	movs	r5, r1
 800042c:	2000      	movs	r0, #0
 800042e:	2200      	movs	r2, #0
 8000430:	e7f2      	b.n	8000418 <__aeabi_fdiv+0x104>
 8000432:	4653      	mov	r3, sl
 8000434:	2b02      	cmp	r3, #2
 8000436:	d0ed      	beq.n	8000414 <__aeabi_fdiv+0x100>
 8000438:	2b03      	cmp	r3, #3
 800043a:	d033      	beq.n	80004a4 <__aeabi_fdiv+0x190>
 800043c:	46a0      	mov	r8, r4
 800043e:	2b01      	cmp	r3, #1
 8000440:	d105      	bne.n	800044e <__aeabi_fdiv+0x13a>
 8000442:	2000      	movs	r0, #0
 8000444:	2200      	movs	r2, #0
 8000446:	e7e7      	b.n	8000418 <__aeabi_fdiv+0x104>
 8000448:	0035      	movs	r5, r6
 800044a:	2803      	cmp	r0, #3
 800044c:	d07a      	beq.n	8000544 <__aeabi_fdiv+0x230>
 800044e:	003b      	movs	r3, r7
 8000450:	337f      	adds	r3, #127	@ 0x7f
 8000452:	2b00      	cmp	r3, #0
 8000454:	dd2d      	ble.n	80004b2 <__aeabi_fdiv+0x19e>
 8000456:	4642      	mov	r2, r8
 8000458:	0752      	lsls	r2, r2, #29
 800045a:	d007      	beq.n	800046c <__aeabi_fdiv+0x158>
 800045c:	220f      	movs	r2, #15
 800045e:	4641      	mov	r1, r8
 8000460:	400a      	ands	r2, r1
 8000462:	2a04      	cmp	r2, #4
 8000464:	d002      	beq.n	800046c <__aeabi_fdiv+0x158>
 8000466:	2204      	movs	r2, #4
 8000468:	4694      	mov	ip, r2
 800046a:	44e0      	add	r8, ip
 800046c:	4642      	mov	r2, r8
 800046e:	0112      	lsls	r2, r2, #4
 8000470:	d505      	bpl.n	800047e <__aeabi_fdiv+0x16a>
 8000472:	4642      	mov	r2, r8
 8000474:	4b36      	ldr	r3, [pc, #216]	@ (8000550 <__aeabi_fdiv+0x23c>)
 8000476:	401a      	ands	r2, r3
 8000478:	003b      	movs	r3, r7
 800047a:	4690      	mov	r8, r2
 800047c:	3380      	adds	r3, #128	@ 0x80
 800047e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000480:	dcc8      	bgt.n	8000414 <__aeabi_fdiv+0x100>
 8000482:	4642      	mov	r2, r8
 8000484:	0192      	lsls	r2, r2, #6
 8000486:	0a52      	lsrs	r2, r2, #9
 8000488:	b2d8      	uxtb	r0, r3
 800048a:	e7c5      	b.n	8000418 <__aeabi_fdiv+0x104>
 800048c:	2280      	movs	r2, #128	@ 0x80
 800048e:	2500      	movs	r5, #0
 8000490:	20ff      	movs	r0, #255	@ 0xff
 8000492:	03d2      	lsls	r2, r2, #15
 8000494:	e7c0      	b.n	8000418 <__aeabi_fdiv+0x104>
 8000496:	2280      	movs	r2, #128	@ 0x80
 8000498:	03d2      	lsls	r2, r2, #15
 800049a:	4214      	tst	r4, r2
 800049c:	d002      	beq.n	80004a4 <__aeabi_fdiv+0x190>
 800049e:	4643      	mov	r3, r8
 80004a0:	4213      	tst	r3, r2
 80004a2:	d049      	beq.n	8000538 <__aeabi_fdiv+0x224>
 80004a4:	2280      	movs	r2, #128	@ 0x80
 80004a6:	03d2      	lsls	r2, r2, #15
 80004a8:	4322      	orrs	r2, r4
 80004aa:	0252      	lsls	r2, r2, #9
 80004ac:	20ff      	movs	r0, #255	@ 0xff
 80004ae:	0a52      	lsrs	r2, r2, #9
 80004b0:	e7b2      	b.n	8000418 <__aeabi_fdiv+0x104>
 80004b2:	2201      	movs	r2, #1
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	2b1b      	cmp	r3, #27
 80004b8:	dcc3      	bgt.n	8000442 <__aeabi_fdiv+0x12e>
 80004ba:	4642      	mov	r2, r8
 80004bc:	40da      	lsrs	r2, r3
 80004be:	4643      	mov	r3, r8
 80004c0:	379e      	adds	r7, #158	@ 0x9e
 80004c2:	40bb      	lsls	r3, r7
 80004c4:	1e59      	subs	r1, r3, #1
 80004c6:	418b      	sbcs	r3, r1
 80004c8:	431a      	orrs	r2, r3
 80004ca:	0753      	lsls	r3, r2, #29
 80004cc:	d004      	beq.n	80004d8 <__aeabi_fdiv+0x1c4>
 80004ce:	230f      	movs	r3, #15
 80004d0:	4013      	ands	r3, r2
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d000      	beq.n	80004d8 <__aeabi_fdiv+0x1c4>
 80004d6:	3204      	adds	r2, #4
 80004d8:	0153      	lsls	r3, r2, #5
 80004da:	d529      	bpl.n	8000530 <__aeabi_fdiv+0x21c>
 80004dc:	2001      	movs	r0, #1
 80004de:	2200      	movs	r2, #0
 80004e0:	e79a      	b.n	8000418 <__aeabi_fdiv+0x104>
 80004e2:	4642      	mov	r2, r8
 80004e4:	0163      	lsls	r3, r4, #5
 80004e6:	0155      	lsls	r5, r2, #5
 80004e8:	42ab      	cmp	r3, r5
 80004ea:	d215      	bcs.n	8000518 <__aeabi_fdiv+0x204>
 80004ec:	201b      	movs	r0, #27
 80004ee:	2200      	movs	r2, #0
 80004f0:	3f01      	subs	r7, #1
 80004f2:	2601      	movs	r6, #1
 80004f4:	001c      	movs	r4, r3
 80004f6:	0052      	lsls	r2, r2, #1
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	2c00      	cmp	r4, #0
 80004fc:	db01      	blt.n	8000502 <__aeabi_fdiv+0x1ee>
 80004fe:	429d      	cmp	r5, r3
 8000500:	d801      	bhi.n	8000506 <__aeabi_fdiv+0x1f2>
 8000502:	1b5b      	subs	r3, r3, r5
 8000504:	4332      	orrs	r2, r6
 8000506:	3801      	subs	r0, #1
 8000508:	2800      	cmp	r0, #0
 800050a:	d1f3      	bne.n	80004f4 <__aeabi_fdiv+0x1e0>
 800050c:	1e58      	subs	r0, r3, #1
 800050e:	4183      	sbcs	r3, r0
 8000510:	4313      	orrs	r3, r2
 8000512:	4698      	mov	r8, r3
 8000514:	000d      	movs	r5, r1
 8000516:	e79a      	b.n	800044e <__aeabi_fdiv+0x13a>
 8000518:	201a      	movs	r0, #26
 800051a:	2201      	movs	r2, #1
 800051c:	1b5b      	subs	r3, r3, r5
 800051e:	e7e8      	b.n	80004f2 <__aeabi_fdiv+0x1de>
 8000520:	3b02      	subs	r3, #2
 8000522:	425a      	negs	r2, r3
 8000524:	4153      	adcs	r3, r2
 8000526:	425b      	negs	r3, r3
 8000528:	0035      	movs	r5, r6
 800052a:	2200      	movs	r2, #0
 800052c:	b2d8      	uxtb	r0, r3
 800052e:	e773      	b.n	8000418 <__aeabi_fdiv+0x104>
 8000530:	0192      	lsls	r2, r2, #6
 8000532:	2000      	movs	r0, #0
 8000534:	0a52      	lsrs	r2, r2, #9
 8000536:	e76f      	b.n	8000418 <__aeabi_fdiv+0x104>
 8000538:	431a      	orrs	r2, r3
 800053a:	0252      	lsls	r2, r2, #9
 800053c:	0035      	movs	r5, r6
 800053e:	20ff      	movs	r0, #255	@ 0xff
 8000540:	0a52      	lsrs	r2, r2, #9
 8000542:	e769      	b.n	8000418 <__aeabi_fdiv+0x104>
 8000544:	4644      	mov	r4, r8
 8000546:	e7ad      	b.n	80004a4 <__aeabi_fdiv+0x190>
 8000548:	0800be14 	.word	0x0800be14
 800054c:	0800be54 	.word	0x0800be54
 8000550:	f7ffffff 	.word	0xf7ffffff

08000554 <__aeabi_fmul>:
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000556:	464f      	mov	r7, r9
 8000558:	4646      	mov	r6, r8
 800055a:	46d6      	mov	lr, sl
 800055c:	0243      	lsls	r3, r0, #9
 800055e:	0a5b      	lsrs	r3, r3, #9
 8000560:	0045      	lsls	r5, r0, #1
 8000562:	b5c0      	push	{r6, r7, lr}
 8000564:	4699      	mov	r9, r3
 8000566:	1c0f      	adds	r7, r1, #0
 8000568:	0e2d      	lsrs	r5, r5, #24
 800056a:	0fc6      	lsrs	r6, r0, #31
 800056c:	2d00      	cmp	r5, #0
 800056e:	d100      	bne.n	8000572 <__aeabi_fmul+0x1e>
 8000570:	e088      	b.n	8000684 <__aeabi_fmul+0x130>
 8000572:	2dff      	cmp	r5, #255	@ 0xff
 8000574:	d100      	bne.n	8000578 <__aeabi_fmul+0x24>
 8000576:	e08d      	b.n	8000694 <__aeabi_fmul+0x140>
 8000578:	2280      	movs	r2, #128	@ 0x80
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	04d2      	lsls	r2, r2, #19
 800057e:	431a      	orrs	r2, r3
 8000580:	2300      	movs	r3, #0
 8000582:	4691      	mov	r9, r2
 8000584:	4698      	mov	r8, r3
 8000586:	469a      	mov	sl, r3
 8000588:	3d7f      	subs	r5, #127	@ 0x7f
 800058a:	027c      	lsls	r4, r7, #9
 800058c:	007b      	lsls	r3, r7, #1
 800058e:	0a64      	lsrs	r4, r4, #9
 8000590:	0e1b      	lsrs	r3, r3, #24
 8000592:	0fff      	lsrs	r7, r7, #31
 8000594:	2b00      	cmp	r3, #0
 8000596:	d068      	beq.n	800066a <__aeabi_fmul+0x116>
 8000598:	2bff      	cmp	r3, #255	@ 0xff
 800059a:	d021      	beq.n	80005e0 <__aeabi_fmul+0x8c>
 800059c:	2280      	movs	r2, #128	@ 0x80
 800059e:	00e4      	lsls	r4, r4, #3
 80005a0:	04d2      	lsls	r2, r2, #19
 80005a2:	4314      	orrs	r4, r2
 80005a4:	4642      	mov	r2, r8
 80005a6:	3b7f      	subs	r3, #127	@ 0x7f
 80005a8:	195b      	adds	r3, r3, r5
 80005aa:	2100      	movs	r1, #0
 80005ac:	1c5d      	adds	r5, r3, #1
 80005ae:	2a0a      	cmp	r2, #10
 80005b0:	dc2e      	bgt.n	8000610 <__aeabi_fmul+0xbc>
 80005b2:	407e      	eors	r6, r7
 80005b4:	4642      	mov	r2, r8
 80005b6:	2a02      	cmp	r2, #2
 80005b8:	dc23      	bgt.n	8000602 <__aeabi_fmul+0xae>
 80005ba:	3a01      	subs	r2, #1
 80005bc:	2a01      	cmp	r2, #1
 80005be:	d900      	bls.n	80005c2 <__aeabi_fmul+0x6e>
 80005c0:	e0bd      	b.n	800073e <__aeabi_fmul+0x1ea>
 80005c2:	2902      	cmp	r1, #2
 80005c4:	d06e      	beq.n	80006a4 <__aeabi_fmul+0x150>
 80005c6:	2901      	cmp	r1, #1
 80005c8:	d12c      	bne.n	8000624 <__aeabi_fmul+0xd0>
 80005ca:	2000      	movs	r0, #0
 80005cc:	2200      	movs	r2, #0
 80005ce:	05c0      	lsls	r0, r0, #23
 80005d0:	07f6      	lsls	r6, r6, #31
 80005d2:	4310      	orrs	r0, r2
 80005d4:	4330      	orrs	r0, r6
 80005d6:	bce0      	pop	{r5, r6, r7}
 80005d8:	46ba      	mov	sl, r7
 80005da:	46b1      	mov	r9, r6
 80005dc:	46a8      	mov	r8, r5
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e0:	002b      	movs	r3, r5
 80005e2:	33ff      	adds	r3, #255	@ 0xff
 80005e4:	2c00      	cmp	r4, #0
 80005e6:	d065      	beq.n	80006b4 <__aeabi_fmul+0x160>
 80005e8:	2203      	movs	r2, #3
 80005ea:	4641      	mov	r1, r8
 80005ec:	4311      	orrs	r1, r2
 80005ee:	0032      	movs	r2, r6
 80005f0:	3501      	adds	r5, #1
 80005f2:	4688      	mov	r8, r1
 80005f4:	407a      	eors	r2, r7
 80005f6:	35ff      	adds	r5, #255	@ 0xff
 80005f8:	290a      	cmp	r1, #10
 80005fa:	dd00      	ble.n	80005fe <__aeabi_fmul+0xaa>
 80005fc:	e0d8      	b.n	80007b0 <__aeabi_fmul+0x25c>
 80005fe:	0016      	movs	r6, r2
 8000600:	2103      	movs	r1, #3
 8000602:	4640      	mov	r0, r8
 8000604:	2201      	movs	r2, #1
 8000606:	4082      	lsls	r2, r0
 8000608:	20a6      	movs	r0, #166	@ 0xa6
 800060a:	00c0      	lsls	r0, r0, #3
 800060c:	4202      	tst	r2, r0
 800060e:	d020      	beq.n	8000652 <__aeabi_fmul+0xfe>
 8000610:	4653      	mov	r3, sl
 8000612:	2b02      	cmp	r3, #2
 8000614:	d046      	beq.n	80006a4 <__aeabi_fmul+0x150>
 8000616:	2b03      	cmp	r3, #3
 8000618:	d100      	bne.n	800061c <__aeabi_fmul+0xc8>
 800061a:	e0bb      	b.n	8000794 <__aeabi_fmul+0x240>
 800061c:	4651      	mov	r1, sl
 800061e:	464c      	mov	r4, r9
 8000620:	2901      	cmp	r1, #1
 8000622:	d0d2      	beq.n	80005ca <__aeabi_fmul+0x76>
 8000624:	002b      	movs	r3, r5
 8000626:	337f      	adds	r3, #127	@ 0x7f
 8000628:	2b00      	cmp	r3, #0
 800062a:	dd70      	ble.n	800070e <__aeabi_fmul+0x1ba>
 800062c:	0762      	lsls	r2, r4, #29
 800062e:	d004      	beq.n	800063a <__aeabi_fmul+0xe6>
 8000630:	220f      	movs	r2, #15
 8000632:	4022      	ands	r2, r4
 8000634:	2a04      	cmp	r2, #4
 8000636:	d000      	beq.n	800063a <__aeabi_fmul+0xe6>
 8000638:	3404      	adds	r4, #4
 800063a:	0122      	lsls	r2, r4, #4
 800063c:	d503      	bpl.n	8000646 <__aeabi_fmul+0xf2>
 800063e:	4b63      	ldr	r3, [pc, #396]	@ (80007cc <__aeabi_fmul+0x278>)
 8000640:	401c      	ands	r4, r3
 8000642:	002b      	movs	r3, r5
 8000644:	3380      	adds	r3, #128	@ 0x80
 8000646:	2bfe      	cmp	r3, #254	@ 0xfe
 8000648:	dc2c      	bgt.n	80006a4 <__aeabi_fmul+0x150>
 800064a:	01a2      	lsls	r2, r4, #6
 800064c:	0a52      	lsrs	r2, r2, #9
 800064e:	b2d8      	uxtb	r0, r3
 8000650:	e7bd      	b.n	80005ce <__aeabi_fmul+0x7a>
 8000652:	2090      	movs	r0, #144	@ 0x90
 8000654:	0080      	lsls	r0, r0, #2
 8000656:	4202      	tst	r2, r0
 8000658:	d127      	bne.n	80006aa <__aeabi_fmul+0x156>
 800065a:	38b9      	subs	r0, #185	@ 0xb9
 800065c:	38ff      	subs	r0, #255	@ 0xff
 800065e:	4210      	tst	r0, r2
 8000660:	d06d      	beq.n	800073e <__aeabi_fmul+0x1ea>
 8000662:	003e      	movs	r6, r7
 8000664:	46a1      	mov	r9, r4
 8000666:	468a      	mov	sl, r1
 8000668:	e7d2      	b.n	8000610 <__aeabi_fmul+0xbc>
 800066a:	2c00      	cmp	r4, #0
 800066c:	d141      	bne.n	80006f2 <__aeabi_fmul+0x19e>
 800066e:	2301      	movs	r3, #1
 8000670:	4642      	mov	r2, r8
 8000672:	431a      	orrs	r2, r3
 8000674:	4690      	mov	r8, r2
 8000676:	002b      	movs	r3, r5
 8000678:	4642      	mov	r2, r8
 800067a:	2101      	movs	r1, #1
 800067c:	1c5d      	adds	r5, r3, #1
 800067e:	2a0a      	cmp	r2, #10
 8000680:	dd97      	ble.n	80005b2 <__aeabi_fmul+0x5e>
 8000682:	e7c5      	b.n	8000610 <__aeabi_fmul+0xbc>
 8000684:	2b00      	cmp	r3, #0
 8000686:	d126      	bne.n	80006d6 <__aeabi_fmul+0x182>
 8000688:	2304      	movs	r3, #4
 800068a:	4698      	mov	r8, r3
 800068c:	3b03      	subs	r3, #3
 800068e:	2500      	movs	r5, #0
 8000690:	469a      	mov	sl, r3
 8000692:	e77a      	b.n	800058a <__aeabi_fmul+0x36>
 8000694:	2b00      	cmp	r3, #0
 8000696:	d118      	bne.n	80006ca <__aeabi_fmul+0x176>
 8000698:	2308      	movs	r3, #8
 800069a:	4698      	mov	r8, r3
 800069c:	3b06      	subs	r3, #6
 800069e:	25ff      	movs	r5, #255	@ 0xff
 80006a0:	469a      	mov	sl, r3
 80006a2:	e772      	b.n	800058a <__aeabi_fmul+0x36>
 80006a4:	20ff      	movs	r0, #255	@ 0xff
 80006a6:	2200      	movs	r2, #0
 80006a8:	e791      	b.n	80005ce <__aeabi_fmul+0x7a>
 80006aa:	2280      	movs	r2, #128	@ 0x80
 80006ac:	2600      	movs	r6, #0
 80006ae:	20ff      	movs	r0, #255	@ 0xff
 80006b0:	03d2      	lsls	r2, r2, #15
 80006b2:	e78c      	b.n	80005ce <__aeabi_fmul+0x7a>
 80006b4:	4641      	mov	r1, r8
 80006b6:	2202      	movs	r2, #2
 80006b8:	3501      	adds	r5, #1
 80006ba:	4311      	orrs	r1, r2
 80006bc:	4688      	mov	r8, r1
 80006be:	35ff      	adds	r5, #255	@ 0xff
 80006c0:	290a      	cmp	r1, #10
 80006c2:	dca5      	bgt.n	8000610 <__aeabi_fmul+0xbc>
 80006c4:	2102      	movs	r1, #2
 80006c6:	407e      	eors	r6, r7
 80006c8:	e774      	b.n	80005b4 <__aeabi_fmul+0x60>
 80006ca:	230c      	movs	r3, #12
 80006cc:	4698      	mov	r8, r3
 80006ce:	3b09      	subs	r3, #9
 80006d0:	25ff      	movs	r5, #255	@ 0xff
 80006d2:	469a      	mov	sl, r3
 80006d4:	e759      	b.n	800058a <__aeabi_fmul+0x36>
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff fde0 	bl	800029c <__clzsi2>
 80006dc:	464a      	mov	r2, r9
 80006de:	1f43      	subs	r3, r0, #5
 80006e0:	2576      	movs	r5, #118	@ 0x76
 80006e2:	409a      	lsls	r2, r3
 80006e4:	2300      	movs	r3, #0
 80006e6:	426d      	negs	r5, r5
 80006e8:	4691      	mov	r9, r2
 80006ea:	4698      	mov	r8, r3
 80006ec:	469a      	mov	sl, r3
 80006ee:	1a2d      	subs	r5, r5, r0
 80006f0:	e74b      	b.n	800058a <__aeabi_fmul+0x36>
 80006f2:	0020      	movs	r0, r4
 80006f4:	f7ff fdd2 	bl	800029c <__clzsi2>
 80006f8:	4642      	mov	r2, r8
 80006fa:	1f43      	subs	r3, r0, #5
 80006fc:	409c      	lsls	r4, r3
 80006fe:	1a2b      	subs	r3, r5, r0
 8000700:	3b76      	subs	r3, #118	@ 0x76
 8000702:	2100      	movs	r1, #0
 8000704:	1c5d      	adds	r5, r3, #1
 8000706:	2a0a      	cmp	r2, #10
 8000708:	dc00      	bgt.n	800070c <__aeabi_fmul+0x1b8>
 800070a:	e752      	b.n	80005b2 <__aeabi_fmul+0x5e>
 800070c:	e780      	b.n	8000610 <__aeabi_fmul+0xbc>
 800070e:	2201      	movs	r2, #1
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	2b1b      	cmp	r3, #27
 8000714:	dd00      	ble.n	8000718 <__aeabi_fmul+0x1c4>
 8000716:	e758      	b.n	80005ca <__aeabi_fmul+0x76>
 8000718:	359e      	adds	r5, #158	@ 0x9e
 800071a:	0022      	movs	r2, r4
 800071c:	40ac      	lsls	r4, r5
 800071e:	40da      	lsrs	r2, r3
 8000720:	1e63      	subs	r3, r4, #1
 8000722:	419c      	sbcs	r4, r3
 8000724:	4322      	orrs	r2, r4
 8000726:	0753      	lsls	r3, r2, #29
 8000728:	d004      	beq.n	8000734 <__aeabi_fmul+0x1e0>
 800072a:	230f      	movs	r3, #15
 800072c:	4013      	ands	r3, r2
 800072e:	2b04      	cmp	r3, #4
 8000730:	d000      	beq.n	8000734 <__aeabi_fmul+0x1e0>
 8000732:	3204      	adds	r2, #4
 8000734:	0153      	lsls	r3, r2, #5
 8000736:	d537      	bpl.n	80007a8 <__aeabi_fmul+0x254>
 8000738:	2001      	movs	r0, #1
 800073a:	2200      	movs	r2, #0
 800073c:	e747      	b.n	80005ce <__aeabi_fmul+0x7a>
 800073e:	0c21      	lsrs	r1, r4, #16
 8000740:	464a      	mov	r2, r9
 8000742:	0424      	lsls	r4, r4, #16
 8000744:	0c24      	lsrs	r4, r4, #16
 8000746:	0027      	movs	r7, r4
 8000748:	0c10      	lsrs	r0, r2, #16
 800074a:	0412      	lsls	r2, r2, #16
 800074c:	0c12      	lsrs	r2, r2, #16
 800074e:	4344      	muls	r4, r0
 8000750:	4357      	muls	r7, r2
 8000752:	4348      	muls	r0, r1
 8000754:	4351      	muls	r1, r2
 8000756:	0c3a      	lsrs	r2, r7, #16
 8000758:	1909      	adds	r1, r1, r4
 800075a:	1852      	adds	r2, r2, r1
 800075c:	4294      	cmp	r4, r2
 800075e:	d903      	bls.n	8000768 <__aeabi_fmul+0x214>
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	0249      	lsls	r1, r1, #9
 8000764:	468c      	mov	ip, r1
 8000766:	4460      	add	r0, ip
 8000768:	043f      	lsls	r7, r7, #16
 800076a:	0411      	lsls	r1, r2, #16
 800076c:	0c3f      	lsrs	r7, r7, #16
 800076e:	19c9      	adds	r1, r1, r7
 8000770:	018c      	lsls	r4, r1, #6
 8000772:	1e67      	subs	r7, r4, #1
 8000774:	41bc      	sbcs	r4, r7
 8000776:	0c12      	lsrs	r2, r2, #16
 8000778:	0e89      	lsrs	r1, r1, #26
 800077a:	1812      	adds	r2, r2, r0
 800077c:	430c      	orrs	r4, r1
 800077e:	0192      	lsls	r2, r2, #6
 8000780:	4314      	orrs	r4, r2
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	d50e      	bpl.n	80007a4 <__aeabi_fmul+0x250>
 8000786:	2301      	movs	r3, #1
 8000788:	0862      	lsrs	r2, r4, #1
 800078a:	401c      	ands	r4, r3
 800078c:	4314      	orrs	r4, r2
 800078e:	e749      	b.n	8000624 <__aeabi_fmul+0xd0>
 8000790:	003e      	movs	r6, r7
 8000792:	46a1      	mov	r9, r4
 8000794:	2280      	movs	r2, #128	@ 0x80
 8000796:	464b      	mov	r3, r9
 8000798:	03d2      	lsls	r2, r2, #15
 800079a:	431a      	orrs	r2, r3
 800079c:	0252      	lsls	r2, r2, #9
 800079e:	20ff      	movs	r0, #255	@ 0xff
 80007a0:	0a52      	lsrs	r2, r2, #9
 80007a2:	e714      	b.n	80005ce <__aeabi_fmul+0x7a>
 80007a4:	001d      	movs	r5, r3
 80007a6:	e73d      	b.n	8000624 <__aeabi_fmul+0xd0>
 80007a8:	0192      	lsls	r2, r2, #6
 80007aa:	2000      	movs	r0, #0
 80007ac:	0a52      	lsrs	r2, r2, #9
 80007ae:	e70e      	b.n	80005ce <__aeabi_fmul+0x7a>
 80007b0:	290f      	cmp	r1, #15
 80007b2:	d1ed      	bne.n	8000790 <__aeabi_fmul+0x23c>
 80007b4:	2280      	movs	r2, #128	@ 0x80
 80007b6:	464b      	mov	r3, r9
 80007b8:	03d2      	lsls	r2, r2, #15
 80007ba:	4213      	tst	r3, r2
 80007bc:	d0ea      	beq.n	8000794 <__aeabi_fmul+0x240>
 80007be:	4214      	tst	r4, r2
 80007c0:	d1e8      	bne.n	8000794 <__aeabi_fmul+0x240>
 80007c2:	003e      	movs	r6, r7
 80007c4:	20ff      	movs	r0, #255	@ 0xff
 80007c6:	4322      	orrs	r2, r4
 80007c8:	e701      	b.n	80005ce <__aeabi_fmul+0x7a>
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	f7ffffff 	.word	0xf7ffffff

080007d0 <__aeabi_i2f>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d013      	beq.n	80007fe <__aeabi_i2f+0x2e>
 80007d6:	17c3      	asrs	r3, r0, #31
 80007d8:	18c5      	adds	r5, r0, r3
 80007da:	405d      	eors	r5, r3
 80007dc:	0fc4      	lsrs	r4, r0, #31
 80007de:	0028      	movs	r0, r5
 80007e0:	f7ff fd5c 	bl	800029c <__clzsi2>
 80007e4:	239e      	movs	r3, #158	@ 0x9e
 80007e6:	0001      	movs	r1, r0
 80007e8:	1a1b      	subs	r3, r3, r0
 80007ea:	2b96      	cmp	r3, #150	@ 0x96
 80007ec:	dc0f      	bgt.n	800080e <__aeabi_i2f+0x3e>
 80007ee:	2808      	cmp	r0, #8
 80007f0:	d034      	beq.n	800085c <__aeabi_i2f+0x8c>
 80007f2:	3908      	subs	r1, #8
 80007f4:	408d      	lsls	r5, r1
 80007f6:	026d      	lsls	r5, r5, #9
 80007f8:	0a6d      	lsrs	r5, r5, #9
 80007fa:	b2d8      	uxtb	r0, r3
 80007fc:	e002      	b.n	8000804 <__aeabi_i2f+0x34>
 80007fe:	2400      	movs	r4, #0
 8000800:	2000      	movs	r0, #0
 8000802:	2500      	movs	r5, #0
 8000804:	05c0      	lsls	r0, r0, #23
 8000806:	4328      	orrs	r0, r5
 8000808:	07e4      	lsls	r4, r4, #31
 800080a:	4320      	orrs	r0, r4
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	2b99      	cmp	r3, #153	@ 0x99
 8000810:	dc16      	bgt.n	8000840 <__aeabi_i2f+0x70>
 8000812:	1f42      	subs	r2, r0, #5
 8000814:	2805      	cmp	r0, #5
 8000816:	d000      	beq.n	800081a <__aeabi_i2f+0x4a>
 8000818:	4095      	lsls	r5, r2
 800081a:	002a      	movs	r2, r5
 800081c:	4811      	ldr	r0, [pc, #68]	@ (8000864 <__aeabi_i2f+0x94>)
 800081e:	4002      	ands	r2, r0
 8000820:	076e      	lsls	r6, r5, #29
 8000822:	d009      	beq.n	8000838 <__aeabi_i2f+0x68>
 8000824:	260f      	movs	r6, #15
 8000826:	4035      	ands	r5, r6
 8000828:	2d04      	cmp	r5, #4
 800082a:	d005      	beq.n	8000838 <__aeabi_i2f+0x68>
 800082c:	3204      	adds	r2, #4
 800082e:	0155      	lsls	r5, r2, #5
 8000830:	d502      	bpl.n	8000838 <__aeabi_i2f+0x68>
 8000832:	239f      	movs	r3, #159	@ 0x9f
 8000834:	4002      	ands	r2, r0
 8000836:	1a5b      	subs	r3, r3, r1
 8000838:	0192      	lsls	r2, r2, #6
 800083a:	0a55      	lsrs	r5, r2, #9
 800083c:	b2d8      	uxtb	r0, r3
 800083e:	e7e1      	b.n	8000804 <__aeabi_i2f+0x34>
 8000840:	2205      	movs	r2, #5
 8000842:	1a12      	subs	r2, r2, r0
 8000844:	0028      	movs	r0, r5
 8000846:	40d0      	lsrs	r0, r2
 8000848:	0002      	movs	r2, r0
 800084a:	0008      	movs	r0, r1
 800084c:	301b      	adds	r0, #27
 800084e:	4085      	lsls	r5, r0
 8000850:	0028      	movs	r0, r5
 8000852:	1e45      	subs	r5, r0, #1
 8000854:	41a8      	sbcs	r0, r5
 8000856:	4302      	orrs	r2, r0
 8000858:	0015      	movs	r5, r2
 800085a:	e7de      	b.n	800081a <__aeabi_i2f+0x4a>
 800085c:	026d      	lsls	r5, r5, #9
 800085e:	2096      	movs	r0, #150	@ 0x96
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	e7cf      	b.n	8000804 <__aeabi_i2f+0x34>
 8000864:	fbffffff 	.word	0xfbffffff

08000868 <__aeabi_ui2f>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	1e04      	subs	r4, r0, #0
 800086c:	d00e      	beq.n	800088c <__aeabi_ui2f+0x24>
 800086e:	f7ff fd15 	bl	800029c <__clzsi2>
 8000872:	239e      	movs	r3, #158	@ 0x9e
 8000874:	0001      	movs	r1, r0
 8000876:	1a1b      	subs	r3, r3, r0
 8000878:	2b96      	cmp	r3, #150	@ 0x96
 800087a:	dc0c      	bgt.n	8000896 <__aeabi_ui2f+0x2e>
 800087c:	2808      	cmp	r0, #8
 800087e:	d02f      	beq.n	80008e0 <__aeabi_ui2f+0x78>
 8000880:	3908      	subs	r1, #8
 8000882:	408c      	lsls	r4, r1
 8000884:	0264      	lsls	r4, r4, #9
 8000886:	0a64      	lsrs	r4, r4, #9
 8000888:	b2d8      	uxtb	r0, r3
 800088a:	e001      	b.n	8000890 <__aeabi_ui2f+0x28>
 800088c:	2000      	movs	r0, #0
 800088e:	2400      	movs	r4, #0
 8000890:	05c0      	lsls	r0, r0, #23
 8000892:	4320      	orrs	r0, r4
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	2b99      	cmp	r3, #153	@ 0x99
 8000898:	dc16      	bgt.n	80008c8 <__aeabi_ui2f+0x60>
 800089a:	1f42      	subs	r2, r0, #5
 800089c:	2805      	cmp	r0, #5
 800089e:	d000      	beq.n	80008a2 <__aeabi_ui2f+0x3a>
 80008a0:	4094      	lsls	r4, r2
 80008a2:	0022      	movs	r2, r4
 80008a4:	4810      	ldr	r0, [pc, #64]	@ (80008e8 <__aeabi_ui2f+0x80>)
 80008a6:	4002      	ands	r2, r0
 80008a8:	0765      	lsls	r5, r4, #29
 80008aa:	d009      	beq.n	80008c0 <__aeabi_ui2f+0x58>
 80008ac:	250f      	movs	r5, #15
 80008ae:	402c      	ands	r4, r5
 80008b0:	2c04      	cmp	r4, #4
 80008b2:	d005      	beq.n	80008c0 <__aeabi_ui2f+0x58>
 80008b4:	3204      	adds	r2, #4
 80008b6:	0154      	lsls	r4, r2, #5
 80008b8:	d502      	bpl.n	80008c0 <__aeabi_ui2f+0x58>
 80008ba:	239f      	movs	r3, #159	@ 0x9f
 80008bc:	4002      	ands	r2, r0
 80008be:	1a5b      	subs	r3, r3, r1
 80008c0:	0192      	lsls	r2, r2, #6
 80008c2:	0a54      	lsrs	r4, r2, #9
 80008c4:	b2d8      	uxtb	r0, r3
 80008c6:	e7e3      	b.n	8000890 <__aeabi_ui2f+0x28>
 80008c8:	0002      	movs	r2, r0
 80008ca:	0020      	movs	r0, r4
 80008cc:	321b      	adds	r2, #27
 80008ce:	4090      	lsls	r0, r2
 80008d0:	0002      	movs	r2, r0
 80008d2:	1e50      	subs	r0, r2, #1
 80008d4:	4182      	sbcs	r2, r0
 80008d6:	2005      	movs	r0, #5
 80008d8:	1a40      	subs	r0, r0, r1
 80008da:	40c4      	lsrs	r4, r0
 80008dc:	4314      	orrs	r4, r2
 80008de:	e7e0      	b.n	80008a2 <__aeabi_ui2f+0x3a>
 80008e0:	0264      	lsls	r4, r4, #9
 80008e2:	2096      	movs	r0, #150	@ 0x96
 80008e4:	0a64      	lsrs	r4, r4, #9
 80008e6:	e7d3      	b.n	8000890 <__aeabi_ui2f+0x28>
 80008e8:	fbffffff 	.word	0xfbffffff

080008ec <__aeabi_dadd>:
 80008ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ee:	4657      	mov	r7, sl
 80008f0:	464e      	mov	r6, r9
 80008f2:	4645      	mov	r5, r8
 80008f4:	46de      	mov	lr, fp
 80008f6:	b5e0      	push	{r5, r6, r7, lr}
 80008f8:	b083      	sub	sp, #12
 80008fa:	9000      	str	r0, [sp, #0]
 80008fc:	9101      	str	r1, [sp, #4]
 80008fe:	030c      	lsls	r4, r1, #12
 8000900:	004f      	lsls	r7, r1, #1
 8000902:	0fce      	lsrs	r6, r1, #31
 8000904:	0a61      	lsrs	r1, r4, #9
 8000906:	9c00      	ldr	r4, [sp, #0]
 8000908:	031d      	lsls	r5, r3, #12
 800090a:	0f64      	lsrs	r4, r4, #29
 800090c:	430c      	orrs	r4, r1
 800090e:	9900      	ldr	r1, [sp, #0]
 8000910:	9200      	str	r2, [sp, #0]
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	00c8      	lsls	r0, r1, #3
 8000916:	0059      	lsls	r1, r3, #1
 8000918:	0d4b      	lsrs	r3, r1, #21
 800091a:	4699      	mov	r9, r3
 800091c:	9a00      	ldr	r2, [sp, #0]
 800091e:	9b01      	ldr	r3, [sp, #4]
 8000920:	0a6d      	lsrs	r5, r5, #9
 8000922:	0fd9      	lsrs	r1, r3, #31
 8000924:	0f53      	lsrs	r3, r2, #29
 8000926:	432b      	orrs	r3, r5
 8000928:	469a      	mov	sl, r3
 800092a:	9b00      	ldr	r3, [sp, #0]
 800092c:	0d7f      	lsrs	r7, r7, #21
 800092e:	00da      	lsls	r2, r3, #3
 8000930:	4694      	mov	ip, r2
 8000932:	464a      	mov	r2, r9
 8000934:	46b0      	mov	r8, r6
 8000936:	1aba      	subs	r2, r7, r2
 8000938:	428e      	cmp	r6, r1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x52>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x1b4>
 800093e:	2a00      	cmp	r2, #0
 8000940:	dc00      	bgt.n	8000944 <__aeabi_dadd+0x58>
 8000942:	e078      	b.n	8000a36 <__aeabi_dadd+0x14a>
 8000944:	4649      	mov	r1, r9
 8000946:	2900      	cmp	r1, #0
 8000948:	d100      	bne.n	800094c <__aeabi_dadd+0x60>
 800094a:	e0e9      	b.n	8000b20 <__aeabi_dadd+0x234>
 800094c:	49c9      	ldr	r1, [pc, #804]	@ (8000c74 <__aeabi_dadd+0x388>)
 800094e:	428f      	cmp	r7, r1
 8000950:	d100      	bne.n	8000954 <__aeabi_dadd+0x68>
 8000952:	e195      	b.n	8000c80 <__aeabi_dadd+0x394>
 8000954:	2501      	movs	r5, #1
 8000956:	2a38      	cmp	r2, #56	@ 0x38
 8000958:	dc16      	bgt.n	8000988 <__aeabi_dadd+0x9c>
 800095a:	2180      	movs	r1, #128	@ 0x80
 800095c:	4653      	mov	r3, sl
 800095e:	0409      	lsls	r1, r1, #16
 8000960:	430b      	orrs	r3, r1
 8000962:	469a      	mov	sl, r3
 8000964:	2a1f      	cmp	r2, #31
 8000966:	dd00      	ble.n	800096a <__aeabi_dadd+0x7e>
 8000968:	e1e7      	b.n	8000d3a <__aeabi_dadd+0x44e>
 800096a:	2120      	movs	r1, #32
 800096c:	4655      	mov	r5, sl
 800096e:	1a8b      	subs	r3, r1, r2
 8000970:	4661      	mov	r1, ip
 8000972:	409d      	lsls	r5, r3
 8000974:	40d1      	lsrs	r1, r2
 8000976:	430d      	orrs	r5, r1
 8000978:	4661      	mov	r1, ip
 800097a:	4099      	lsls	r1, r3
 800097c:	1e4b      	subs	r3, r1, #1
 800097e:	4199      	sbcs	r1, r3
 8000980:	4653      	mov	r3, sl
 8000982:	40d3      	lsrs	r3, r2
 8000984:	430d      	orrs	r5, r1
 8000986:	1ae4      	subs	r4, r4, r3
 8000988:	1b45      	subs	r5, r0, r5
 800098a:	42a8      	cmp	r0, r5
 800098c:	4180      	sbcs	r0, r0
 800098e:	4240      	negs	r0, r0
 8000990:	1a24      	subs	r4, r4, r0
 8000992:	0223      	lsls	r3, r4, #8
 8000994:	d400      	bmi.n	8000998 <__aeabi_dadd+0xac>
 8000996:	e10f      	b.n	8000bb8 <__aeabi_dadd+0x2cc>
 8000998:	0264      	lsls	r4, r4, #9
 800099a:	0a64      	lsrs	r4, r4, #9
 800099c:	2c00      	cmp	r4, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0xb6>
 80009a0:	e139      	b.n	8000c16 <__aeabi_dadd+0x32a>
 80009a2:	0020      	movs	r0, r4
 80009a4:	f7ff fc7a 	bl	800029c <__clzsi2>
 80009a8:	0003      	movs	r3, r0
 80009aa:	3b08      	subs	r3, #8
 80009ac:	2120      	movs	r1, #32
 80009ae:	0028      	movs	r0, r5
 80009b0:	1aca      	subs	r2, r1, r3
 80009b2:	40d0      	lsrs	r0, r2
 80009b4:	409c      	lsls	r4, r3
 80009b6:	0002      	movs	r2, r0
 80009b8:	409d      	lsls	r5, r3
 80009ba:	4322      	orrs	r2, r4
 80009bc:	429f      	cmp	r7, r3
 80009be:	dd00      	ble.n	80009c2 <__aeabi_dadd+0xd6>
 80009c0:	e173      	b.n	8000caa <__aeabi_dadd+0x3be>
 80009c2:	1bd8      	subs	r0, r3, r7
 80009c4:	3001      	adds	r0, #1
 80009c6:	1a09      	subs	r1, r1, r0
 80009c8:	002c      	movs	r4, r5
 80009ca:	408d      	lsls	r5, r1
 80009cc:	40c4      	lsrs	r4, r0
 80009ce:	1e6b      	subs	r3, r5, #1
 80009d0:	419d      	sbcs	r5, r3
 80009d2:	0013      	movs	r3, r2
 80009d4:	40c2      	lsrs	r2, r0
 80009d6:	408b      	lsls	r3, r1
 80009d8:	4325      	orrs	r5, r4
 80009da:	2700      	movs	r7, #0
 80009dc:	0014      	movs	r4, r2
 80009de:	431d      	orrs	r5, r3
 80009e0:	076b      	lsls	r3, r5, #29
 80009e2:	d009      	beq.n	80009f8 <__aeabi_dadd+0x10c>
 80009e4:	230f      	movs	r3, #15
 80009e6:	402b      	ands	r3, r5
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d005      	beq.n	80009f8 <__aeabi_dadd+0x10c>
 80009ec:	1d2b      	adds	r3, r5, #4
 80009ee:	42ab      	cmp	r3, r5
 80009f0:	41ad      	sbcs	r5, r5
 80009f2:	426d      	negs	r5, r5
 80009f4:	1964      	adds	r4, r4, r5
 80009f6:	001d      	movs	r5, r3
 80009f8:	0223      	lsls	r3, r4, #8
 80009fa:	d400      	bmi.n	80009fe <__aeabi_dadd+0x112>
 80009fc:	e12d      	b.n	8000c5a <__aeabi_dadd+0x36e>
 80009fe:	4a9d      	ldr	r2, [pc, #628]	@ (8000c74 <__aeabi_dadd+0x388>)
 8000a00:	3701      	adds	r7, #1
 8000a02:	4297      	cmp	r7, r2
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x11c>
 8000a06:	e0d3      	b.n	8000bb0 <__aeabi_dadd+0x2c4>
 8000a08:	4646      	mov	r6, r8
 8000a0a:	499b      	ldr	r1, [pc, #620]	@ (8000c78 <__aeabi_dadd+0x38c>)
 8000a0c:	08ed      	lsrs	r5, r5, #3
 8000a0e:	4021      	ands	r1, r4
 8000a10:	074a      	lsls	r2, r1, #29
 8000a12:	432a      	orrs	r2, r5
 8000a14:	057c      	lsls	r4, r7, #21
 8000a16:	024d      	lsls	r5, r1, #9
 8000a18:	0b2d      	lsrs	r5, r5, #12
 8000a1a:	0d64      	lsrs	r4, r4, #21
 8000a1c:	0524      	lsls	r4, r4, #20
 8000a1e:	432c      	orrs	r4, r5
 8000a20:	07f6      	lsls	r6, r6, #31
 8000a22:	4334      	orrs	r4, r6
 8000a24:	0010      	movs	r0, r2
 8000a26:	0021      	movs	r1, r4
 8000a28:	b003      	add	sp, #12
 8000a2a:	bcf0      	pop	{r4, r5, r6, r7}
 8000a2c:	46bb      	mov	fp, r7
 8000a2e:	46b2      	mov	sl, r6
 8000a30:	46a9      	mov	r9, r5
 8000a32:	46a0      	mov	r8, r4
 8000a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a36:	2a00      	cmp	r2, #0
 8000a38:	d100      	bne.n	8000a3c <__aeabi_dadd+0x150>
 8000a3a:	e084      	b.n	8000b46 <__aeabi_dadd+0x25a>
 8000a3c:	464a      	mov	r2, r9
 8000a3e:	1bd2      	subs	r2, r2, r7
 8000a40:	2f00      	cmp	r7, #0
 8000a42:	d000      	beq.n	8000a46 <__aeabi_dadd+0x15a>
 8000a44:	e16d      	b.n	8000d22 <__aeabi_dadd+0x436>
 8000a46:	0025      	movs	r5, r4
 8000a48:	4305      	orrs	r5, r0
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_dadd+0x162>
 8000a4c:	e127      	b.n	8000c9e <__aeabi_dadd+0x3b2>
 8000a4e:	1e56      	subs	r6, r2, #1
 8000a50:	2a01      	cmp	r2, #1
 8000a52:	d100      	bne.n	8000a56 <__aeabi_dadd+0x16a>
 8000a54:	e23b      	b.n	8000ece <__aeabi_dadd+0x5e2>
 8000a56:	4d87      	ldr	r5, [pc, #540]	@ (8000c74 <__aeabi_dadd+0x388>)
 8000a58:	42aa      	cmp	r2, r5
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dadd+0x172>
 8000a5c:	e26a      	b.n	8000f34 <__aeabi_dadd+0x648>
 8000a5e:	2501      	movs	r5, #1
 8000a60:	2e38      	cmp	r6, #56	@ 0x38
 8000a62:	dc12      	bgt.n	8000a8a <__aeabi_dadd+0x19e>
 8000a64:	0032      	movs	r2, r6
 8000a66:	2a1f      	cmp	r2, #31
 8000a68:	dd00      	ble.n	8000a6c <__aeabi_dadd+0x180>
 8000a6a:	e1f8      	b.n	8000e5e <__aeabi_dadd+0x572>
 8000a6c:	2620      	movs	r6, #32
 8000a6e:	0025      	movs	r5, r4
 8000a70:	1ab6      	subs	r6, r6, r2
 8000a72:	0007      	movs	r7, r0
 8000a74:	4653      	mov	r3, sl
 8000a76:	40b0      	lsls	r0, r6
 8000a78:	40d4      	lsrs	r4, r2
 8000a7a:	40b5      	lsls	r5, r6
 8000a7c:	40d7      	lsrs	r7, r2
 8000a7e:	1e46      	subs	r6, r0, #1
 8000a80:	41b0      	sbcs	r0, r6
 8000a82:	1b1b      	subs	r3, r3, r4
 8000a84:	469a      	mov	sl, r3
 8000a86:	433d      	orrs	r5, r7
 8000a88:	4305      	orrs	r5, r0
 8000a8a:	4662      	mov	r2, ip
 8000a8c:	1b55      	subs	r5, r2, r5
 8000a8e:	45ac      	cmp	ip, r5
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	4252      	negs	r2, r2
 8000a96:	000e      	movs	r6, r1
 8000a98:	464f      	mov	r7, r9
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	1a9c      	subs	r4, r3, r2
 8000a9e:	e778      	b.n	8000992 <__aeabi_dadd+0xa6>
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	dc00      	bgt.n	8000aa6 <__aeabi_dadd+0x1ba>
 8000aa4:	e08e      	b.n	8000bc4 <__aeabi_dadd+0x2d8>
 8000aa6:	4649      	mov	r1, r9
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d175      	bne.n	8000b98 <__aeabi_dadd+0x2ac>
 8000aac:	4661      	mov	r1, ip
 8000aae:	4653      	mov	r3, sl
 8000ab0:	4319      	orrs	r1, r3
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_dadd+0x1ca>
 8000ab4:	e0f6      	b.n	8000ca4 <__aeabi_dadd+0x3b8>
 8000ab6:	1e51      	subs	r1, r2, #1
 8000ab8:	2a01      	cmp	r2, #1
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x1d2>
 8000abc:	e191      	b.n	8000de2 <__aeabi_dadd+0x4f6>
 8000abe:	4d6d      	ldr	r5, [pc, #436]	@ (8000c74 <__aeabi_dadd+0x388>)
 8000ac0:	42aa      	cmp	r2, r5
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x1da>
 8000ac4:	e0dc      	b.n	8000c80 <__aeabi_dadd+0x394>
 8000ac6:	2501      	movs	r5, #1
 8000ac8:	2938      	cmp	r1, #56	@ 0x38
 8000aca:	dc14      	bgt.n	8000af6 <__aeabi_dadd+0x20a>
 8000acc:	000a      	movs	r2, r1
 8000ace:	2a1f      	cmp	r2, #31
 8000ad0:	dd00      	ble.n	8000ad4 <__aeabi_dadd+0x1e8>
 8000ad2:	e1a2      	b.n	8000e1a <__aeabi_dadd+0x52e>
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	1a89      	subs	r1, r1, r2
 8000ada:	408b      	lsls	r3, r1
 8000adc:	001d      	movs	r5, r3
 8000ade:	4663      	mov	r3, ip
 8000ae0:	40d3      	lsrs	r3, r2
 8000ae2:	431d      	orrs	r5, r3
 8000ae4:	4663      	mov	r3, ip
 8000ae6:	408b      	lsls	r3, r1
 8000ae8:	0019      	movs	r1, r3
 8000aea:	1e4b      	subs	r3, r1, #1
 8000aec:	4199      	sbcs	r1, r3
 8000aee:	4653      	mov	r3, sl
 8000af0:	40d3      	lsrs	r3, r2
 8000af2:	430d      	orrs	r5, r1
 8000af4:	18e4      	adds	r4, r4, r3
 8000af6:	182d      	adds	r5, r5, r0
 8000af8:	4285      	cmp	r5, r0
 8000afa:	4180      	sbcs	r0, r0
 8000afc:	4240      	negs	r0, r0
 8000afe:	1824      	adds	r4, r4, r0
 8000b00:	0223      	lsls	r3, r4, #8
 8000b02:	d559      	bpl.n	8000bb8 <__aeabi_dadd+0x2cc>
 8000b04:	4b5b      	ldr	r3, [pc, #364]	@ (8000c74 <__aeabi_dadd+0x388>)
 8000b06:	3701      	adds	r7, #1
 8000b08:	429f      	cmp	r7, r3
 8000b0a:	d051      	beq.n	8000bb0 <__aeabi_dadd+0x2c4>
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8000c78 <__aeabi_dadd+0x38c>)
 8000b10:	086a      	lsrs	r2, r5, #1
 8000b12:	401c      	ands	r4, r3
 8000b14:	4029      	ands	r1, r5
 8000b16:	430a      	orrs	r2, r1
 8000b18:	07e5      	lsls	r5, r4, #31
 8000b1a:	4315      	orrs	r5, r2
 8000b1c:	0864      	lsrs	r4, r4, #1
 8000b1e:	e75f      	b.n	80009e0 <__aeabi_dadd+0xf4>
 8000b20:	4661      	mov	r1, ip
 8000b22:	4653      	mov	r3, sl
 8000b24:	4319      	orrs	r1, r3
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x23e>
 8000b28:	e0bc      	b.n	8000ca4 <__aeabi_dadd+0x3b8>
 8000b2a:	1e51      	subs	r1, r2, #1
 8000b2c:	2a01      	cmp	r2, #1
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x246>
 8000b30:	e164      	b.n	8000dfc <__aeabi_dadd+0x510>
 8000b32:	4d50      	ldr	r5, [pc, #320]	@ (8000c74 <__aeabi_dadd+0x388>)
 8000b34:	42aa      	cmp	r2, r5
 8000b36:	d100      	bne.n	8000b3a <__aeabi_dadd+0x24e>
 8000b38:	e16a      	b.n	8000e10 <__aeabi_dadd+0x524>
 8000b3a:	2501      	movs	r5, #1
 8000b3c:	2938      	cmp	r1, #56	@ 0x38
 8000b3e:	dd00      	ble.n	8000b42 <__aeabi_dadd+0x256>
 8000b40:	e722      	b.n	8000988 <__aeabi_dadd+0x9c>
 8000b42:	000a      	movs	r2, r1
 8000b44:	e70e      	b.n	8000964 <__aeabi_dadd+0x78>
 8000b46:	4a4d      	ldr	r2, [pc, #308]	@ (8000c7c <__aeabi_dadd+0x390>)
 8000b48:	1c7d      	adds	r5, r7, #1
 8000b4a:	4215      	tst	r5, r2
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x264>
 8000b4e:	e0d0      	b.n	8000cf2 <__aeabi_dadd+0x406>
 8000b50:	0025      	movs	r5, r4
 8000b52:	4662      	mov	r2, ip
 8000b54:	4653      	mov	r3, sl
 8000b56:	4305      	orrs	r5, r0
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	2f00      	cmp	r7, #0
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_dadd+0x274>
 8000b5e:	e137      	b.n	8000dd0 <__aeabi_dadd+0x4e4>
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dadd+0x27a>
 8000b64:	e1a8      	b.n	8000eb8 <__aeabi_dadd+0x5cc>
 8000b66:	2a00      	cmp	r2, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x280>
 8000b6a:	e16a      	b.n	8000e42 <__aeabi_dadd+0x556>
 8000b6c:	4663      	mov	r3, ip
 8000b6e:	1ac5      	subs	r5, r0, r3
 8000b70:	4653      	mov	r3, sl
 8000b72:	1ae2      	subs	r2, r4, r3
 8000b74:	42a8      	cmp	r0, r5
 8000b76:	419b      	sbcs	r3, r3
 8000b78:	425b      	negs	r3, r3
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	021a      	lsls	r2, r3, #8
 8000b7e:	d400      	bmi.n	8000b82 <__aeabi_dadd+0x296>
 8000b80:	e203      	b.n	8000f8a <__aeabi_dadd+0x69e>
 8000b82:	4663      	mov	r3, ip
 8000b84:	1a1d      	subs	r5, r3, r0
 8000b86:	45ac      	cmp	ip, r5
 8000b88:	4192      	sbcs	r2, r2
 8000b8a:	4653      	mov	r3, sl
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	1b1c      	subs	r4, r3, r4
 8000b90:	000e      	movs	r6, r1
 8000b92:	4688      	mov	r8, r1
 8000b94:	1aa4      	subs	r4, r4, r2
 8000b96:	e723      	b.n	80009e0 <__aeabi_dadd+0xf4>
 8000b98:	4936      	ldr	r1, [pc, #216]	@ (8000c74 <__aeabi_dadd+0x388>)
 8000b9a:	428f      	cmp	r7, r1
 8000b9c:	d070      	beq.n	8000c80 <__aeabi_dadd+0x394>
 8000b9e:	2501      	movs	r5, #1
 8000ba0:	2a38      	cmp	r2, #56	@ 0x38
 8000ba2:	dca8      	bgt.n	8000af6 <__aeabi_dadd+0x20a>
 8000ba4:	2180      	movs	r1, #128	@ 0x80
 8000ba6:	4653      	mov	r3, sl
 8000ba8:	0409      	lsls	r1, r1, #16
 8000baa:	430b      	orrs	r3, r1
 8000bac:	469a      	mov	sl, r3
 8000bae:	e78e      	b.n	8000ace <__aeabi_dadd+0x1e2>
 8000bb0:	003c      	movs	r4, r7
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	e731      	b.n	8000a1c <__aeabi_dadd+0x130>
 8000bb8:	2307      	movs	r3, #7
 8000bba:	402b      	ands	r3, r5
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_dadd+0x2d6>
 8000bc0:	e710      	b.n	80009e4 <__aeabi_dadd+0xf8>
 8000bc2:	e093      	b.n	8000cec <__aeabi_dadd+0x400>
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	d074      	beq.n	8000cb2 <__aeabi_dadd+0x3c6>
 8000bc8:	464a      	mov	r2, r9
 8000bca:	1bd2      	subs	r2, r2, r7
 8000bcc:	2f00      	cmp	r7, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dadd+0x2e6>
 8000bd0:	e0c7      	b.n	8000d62 <__aeabi_dadd+0x476>
 8000bd2:	4928      	ldr	r1, [pc, #160]	@ (8000c74 <__aeabi_dadd+0x388>)
 8000bd4:	4589      	cmp	r9, r1
 8000bd6:	d100      	bne.n	8000bda <__aeabi_dadd+0x2ee>
 8000bd8:	e185      	b.n	8000ee6 <__aeabi_dadd+0x5fa>
 8000bda:	2501      	movs	r5, #1
 8000bdc:	2a38      	cmp	r2, #56	@ 0x38
 8000bde:	dc12      	bgt.n	8000c06 <__aeabi_dadd+0x31a>
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	0409      	lsls	r1, r1, #16
 8000be4:	430c      	orrs	r4, r1
 8000be6:	2a1f      	cmp	r2, #31
 8000be8:	dd00      	ble.n	8000bec <__aeabi_dadd+0x300>
 8000bea:	e1ab      	b.n	8000f44 <__aeabi_dadd+0x658>
 8000bec:	2120      	movs	r1, #32
 8000bee:	0025      	movs	r5, r4
 8000bf0:	1a89      	subs	r1, r1, r2
 8000bf2:	0007      	movs	r7, r0
 8000bf4:	4088      	lsls	r0, r1
 8000bf6:	408d      	lsls	r5, r1
 8000bf8:	40d7      	lsrs	r7, r2
 8000bfa:	1e41      	subs	r1, r0, #1
 8000bfc:	4188      	sbcs	r0, r1
 8000bfe:	40d4      	lsrs	r4, r2
 8000c00:	433d      	orrs	r5, r7
 8000c02:	4305      	orrs	r5, r0
 8000c04:	44a2      	add	sl, r4
 8000c06:	4465      	add	r5, ip
 8000c08:	4565      	cmp	r5, ip
 8000c0a:	4192      	sbcs	r2, r2
 8000c0c:	4252      	negs	r2, r2
 8000c0e:	4452      	add	r2, sl
 8000c10:	0014      	movs	r4, r2
 8000c12:	464f      	mov	r7, r9
 8000c14:	e774      	b.n	8000b00 <__aeabi_dadd+0x214>
 8000c16:	0028      	movs	r0, r5
 8000c18:	f7ff fb40 	bl	800029c <__clzsi2>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	3318      	adds	r3, #24
 8000c20:	2b1f      	cmp	r3, #31
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_dadd+0x33a>
 8000c24:	e6c2      	b.n	80009ac <__aeabi_dadd+0xc0>
 8000c26:	002a      	movs	r2, r5
 8000c28:	3808      	subs	r0, #8
 8000c2a:	4082      	lsls	r2, r0
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	dd00      	ble.n	8000c32 <__aeabi_dadd+0x346>
 8000c30:	e0a9      	b.n	8000d86 <__aeabi_dadd+0x49a>
 8000c32:	1bdb      	subs	r3, r3, r7
 8000c34:	1c58      	adds	r0, r3, #1
 8000c36:	281f      	cmp	r0, #31
 8000c38:	dc00      	bgt.n	8000c3c <__aeabi_dadd+0x350>
 8000c3a:	e1ac      	b.n	8000f96 <__aeabi_dadd+0x6aa>
 8000c3c:	0015      	movs	r5, r2
 8000c3e:	3b1f      	subs	r3, #31
 8000c40:	40dd      	lsrs	r5, r3
 8000c42:	2820      	cmp	r0, #32
 8000c44:	d005      	beq.n	8000c52 <__aeabi_dadd+0x366>
 8000c46:	2340      	movs	r3, #64	@ 0x40
 8000c48:	1a1b      	subs	r3, r3, r0
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	1e53      	subs	r3, r2, #1
 8000c4e:	419a      	sbcs	r2, r3
 8000c50:	4315      	orrs	r5, r2
 8000c52:	2307      	movs	r3, #7
 8000c54:	2700      	movs	r7, #0
 8000c56:	402b      	ands	r3, r5
 8000c58:	e7b0      	b.n	8000bbc <__aeabi_dadd+0x2d0>
 8000c5a:	08ed      	lsrs	r5, r5, #3
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <__aeabi_dadd+0x388>)
 8000c5e:	0762      	lsls	r2, r4, #29
 8000c60:	432a      	orrs	r2, r5
 8000c62:	08e4      	lsrs	r4, r4, #3
 8000c64:	429f      	cmp	r7, r3
 8000c66:	d00f      	beq.n	8000c88 <__aeabi_dadd+0x39c>
 8000c68:	0324      	lsls	r4, r4, #12
 8000c6a:	0b25      	lsrs	r5, r4, #12
 8000c6c:	057c      	lsls	r4, r7, #21
 8000c6e:	0d64      	lsrs	r4, r4, #21
 8000c70:	e6d4      	b.n	8000a1c <__aeabi_dadd+0x130>
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	000007ff 	.word	0x000007ff
 8000c78:	ff7fffff 	.word	0xff7fffff
 8000c7c:	000007fe 	.word	0x000007fe
 8000c80:	08c0      	lsrs	r0, r0, #3
 8000c82:	0762      	lsls	r2, r4, #29
 8000c84:	4302      	orrs	r2, r0
 8000c86:	08e4      	lsrs	r4, r4, #3
 8000c88:	0013      	movs	r3, r2
 8000c8a:	4323      	orrs	r3, r4
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x3a4>
 8000c8e:	e186      	b.n	8000f9e <__aeabi_dadd+0x6b2>
 8000c90:	2580      	movs	r5, #128	@ 0x80
 8000c92:	032d      	lsls	r5, r5, #12
 8000c94:	4325      	orrs	r5, r4
 8000c96:	032d      	lsls	r5, r5, #12
 8000c98:	4cc3      	ldr	r4, [pc, #780]	@ (8000fa8 <__aeabi_dadd+0x6bc>)
 8000c9a:	0b2d      	lsrs	r5, r5, #12
 8000c9c:	e6be      	b.n	8000a1c <__aeabi_dadd+0x130>
 8000c9e:	4660      	mov	r0, ip
 8000ca0:	4654      	mov	r4, sl
 8000ca2:	000e      	movs	r6, r1
 8000ca4:	0017      	movs	r7, r2
 8000ca6:	08c5      	lsrs	r5, r0, #3
 8000ca8:	e7d8      	b.n	8000c5c <__aeabi_dadd+0x370>
 8000caa:	4cc0      	ldr	r4, [pc, #768]	@ (8000fac <__aeabi_dadd+0x6c0>)
 8000cac:	1aff      	subs	r7, r7, r3
 8000cae:	4014      	ands	r4, r2
 8000cb0:	e696      	b.n	80009e0 <__aeabi_dadd+0xf4>
 8000cb2:	4abf      	ldr	r2, [pc, #764]	@ (8000fb0 <__aeabi_dadd+0x6c4>)
 8000cb4:	1c79      	adds	r1, r7, #1
 8000cb6:	4211      	tst	r1, r2
 8000cb8:	d16b      	bne.n	8000d92 <__aeabi_dadd+0x4a6>
 8000cba:	0022      	movs	r2, r4
 8000cbc:	4302      	orrs	r2, r0
 8000cbe:	2f00      	cmp	r7, #0
 8000cc0:	d000      	beq.n	8000cc4 <__aeabi_dadd+0x3d8>
 8000cc2:	e0db      	b.n	8000e7c <__aeabi_dadd+0x590>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x3de>
 8000cc8:	e12d      	b.n	8000f26 <__aeabi_dadd+0x63a>
 8000cca:	4662      	mov	r2, ip
 8000ccc:	4653      	mov	r3, sl
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dadd+0x3e8>
 8000cd2:	e0b6      	b.n	8000e42 <__aeabi_dadd+0x556>
 8000cd4:	4663      	mov	r3, ip
 8000cd6:	18c5      	adds	r5, r0, r3
 8000cd8:	4285      	cmp	r5, r0
 8000cda:	4180      	sbcs	r0, r0
 8000cdc:	4454      	add	r4, sl
 8000cde:	4240      	negs	r0, r0
 8000ce0:	1824      	adds	r4, r4, r0
 8000ce2:	0223      	lsls	r3, r4, #8
 8000ce4:	d502      	bpl.n	8000cec <__aeabi_dadd+0x400>
 8000ce6:	000f      	movs	r7, r1
 8000ce8:	4bb0      	ldr	r3, [pc, #704]	@ (8000fac <__aeabi_dadd+0x6c0>)
 8000cea:	401c      	ands	r4, r3
 8000cec:	003a      	movs	r2, r7
 8000cee:	0028      	movs	r0, r5
 8000cf0:	e7d8      	b.n	8000ca4 <__aeabi_dadd+0x3b8>
 8000cf2:	4662      	mov	r2, ip
 8000cf4:	1a85      	subs	r5, r0, r2
 8000cf6:	42a8      	cmp	r0, r5
 8000cf8:	4192      	sbcs	r2, r2
 8000cfa:	4653      	mov	r3, sl
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	4691      	mov	r9, r2
 8000d00:	1ae3      	subs	r3, r4, r3
 8000d02:	001a      	movs	r2, r3
 8000d04:	464b      	mov	r3, r9
 8000d06:	1ad2      	subs	r2, r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	4691      	mov	r9, r2
 8000d0c:	021a      	lsls	r2, r3, #8
 8000d0e:	d454      	bmi.n	8000dba <__aeabi_dadd+0x4ce>
 8000d10:	464a      	mov	r2, r9
 8000d12:	464c      	mov	r4, r9
 8000d14:	432a      	orrs	r2, r5
 8000d16:	d000      	beq.n	8000d1a <__aeabi_dadd+0x42e>
 8000d18:	e640      	b.n	800099c <__aeabi_dadd+0xb0>
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	2400      	movs	r4, #0
 8000d1e:	2500      	movs	r5, #0
 8000d20:	e67c      	b.n	8000a1c <__aeabi_dadd+0x130>
 8000d22:	4da1      	ldr	r5, [pc, #644]	@ (8000fa8 <__aeabi_dadd+0x6bc>)
 8000d24:	45a9      	cmp	r9, r5
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dadd+0x43e>
 8000d28:	e090      	b.n	8000e4c <__aeabi_dadd+0x560>
 8000d2a:	2501      	movs	r5, #1
 8000d2c:	2a38      	cmp	r2, #56	@ 0x38
 8000d2e:	dd00      	ble.n	8000d32 <__aeabi_dadd+0x446>
 8000d30:	e6ab      	b.n	8000a8a <__aeabi_dadd+0x19e>
 8000d32:	2580      	movs	r5, #128	@ 0x80
 8000d34:	042d      	lsls	r5, r5, #16
 8000d36:	432c      	orrs	r4, r5
 8000d38:	e695      	b.n	8000a66 <__aeabi_dadd+0x17a>
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	4655      	mov	r5, sl
 8000d3e:	3920      	subs	r1, #32
 8000d40:	40cd      	lsrs	r5, r1
 8000d42:	46a9      	mov	r9, r5
 8000d44:	2a20      	cmp	r2, #32
 8000d46:	d006      	beq.n	8000d56 <__aeabi_dadd+0x46a>
 8000d48:	2140      	movs	r1, #64	@ 0x40
 8000d4a:	4653      	mov	r3, sl
 8000d4c:	1a8a      	subs	r2, r1, r2
 8000d4e:	4093      	lsls	r3, r2
 8000d50:	4662      	mov	r2, ip
 8000d52:	431a      	orrs	r2, r3
 8000d54:	4694      	mov	ip, r2
 8000d56:	4665      	mov	r5, ip
 8000d58:	1e6b      	subs	r3, r5, #1
 8000d5a:	419d      	sbcs	r5, r3
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	431d      	orrs	r5, r3
 8000d60:	e612      	b.n	8000988 <__aeabi_dadd+0x9c>
 8000d62:	0021      	movs	r1, r4
 8000d64:	4301      	orrs	r1, r0
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dadd+0x47e>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_dadd+0x608>
 8000d6a:	1e51      	subs	r1, r2, #1
 8000d6c:	2a01      	cmp	r2, #1
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dadd+0x486>
 8000d70:	e0fb      	b.n	8000f6a <__aeabi_dadd+0x67e>
 8000d72:	4d8d      	ldr	r5, [pc, #564]	@ (8000fa8 <__aeabi_dadd+0x6bc>)
 8000d74:	42aa      	cmp	r2, r5
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dadd+0x48e>
 8000d78:	e0b5      	b.n	8000ee6 <__aeabi_dadd+0x5fa>
 8000d7a:	2501      	movs	r5, #1
 8000d7c:	2938      	cmp	r1, #56	@ 0x38
 8000d7e:	dd00      	ble.n	8000d82 <__aeabi_dadd+0x496>
 8000d80:	e741      	b.n	8000c06 <__aeabi_dadd+0x31a>
 8000d82:	000a      	movs	r2, r1
 8000d84:	e72f      	b.n	8000be6 <__aeabi_dadd+0x2fa>
 8000d86:	4c89      	ldr	r4, [pc, #548]	@ (8000fac <__aeabi_dadd+0x6c0>)
 8000d88:	1aff      	subs	r7, r7, r3
 8000d8a:	4014      	ands	r4, r2
 8000d8c:	0762      	lsls	r2, r4, #29
 8000d8e:	08e4      	lsrs	r4, r4, #3
 8000d90:	e76a      	b.n	8000c68 <__aeabi_dadd+0x37c>
 8000d92:	4a85      	ldr	r2, [pc, #532]	@ (8000fa8 <__aeabi_dadd+0x6bc>)
 8000d94:	4291      	cmp	r1, r2
 8000d96:	d100      	bne.n	8000d9a <__aeabi_dadd+0x4ae>
 8000d98:	e0e3      	b.n	8000f62 <__aeabi_dadd+0x676>
 8000d9a:	4663      	mov	r3, ip
 8000d9c:	18c2      	adds	r2, r0, r3
 8000d9e:	4282      	cmp	r2, r0
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	0023      	movs	r3, r4
 8000da4:	4240      	negs	r0, r0
 8000da6:	4453      	add	r3, sl
 8000da8:	181b      	adds	r3, r3, r0
 8000daa:	07dd      	lsls	r5, r3, #31
 8000dac:	085c      	lsrs	r4, r3, #1
 8000dae:	2307      	movs	r3, #7
 8000db0:	0852      	lsrs	r2, r2, #1
 8000db2:	4315      	orrs	r5, r2
 8000db4:	000f      	movs	r7, r1
 8000db6:	402b      	ands	r3, r5
 8000db8:	e700      	b.n	8000bbc <__aeabi_dadd+0x2d0>
 8000dba:	4663      	mov	r3, ip
 8000dbc:	1a1d      	subs	r5, r3, r0
 8000dbe:	45ac      	cmp	ip, r5
 8000dc0:	4192      	sbcs	r2, r2
 8000dc2:	4653      	mov	r3, sl
 8000dc4:	4252      	negs	r2, r2
 8000dc6:	1b1c      	subs	r4, r3, r4
 8000dc8:	000e      	movs	r6, r1
 8000dca:	4688      	mov	r8, r1
 8000dcc:	1aa4      	subs	r4, r4, r2
 8000dce:	e5e5      	b.n	800099c <__aeabi_dadd+0xb0>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dadd+0x4ea>
 8000dd4:	e091      	b.n	8000efa <__aeabi_dadd+0x60e>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d138      	bne.n	8000e4c <__aeabi_dadd+0x560>
 8000dda:	2480      	movs	r4, #128	@ 0x80
 8000ddc:	2600      	movs	r6, #0
 8000dde:	0324      	lsls	r4, r4, #12
 8000de0:	e756      	b.n	8000c90 <__aeabi_dadd+0x3a4>
 8000de2:	4663      	mov	r3, ip
 8000de4:	18c5      	adds	r5, r0, r3
 8000de6:	4285      	cmp	r5, r0
 8000de8:	4180      	sbcs	r0, r0
 8000dea:	4454      	add	r4, sl
 8000dec:	4240      	negs	r0, r0
 8000dee:	1824      	adds	r4, r4, r0
 8000df0:	2701      	movs	r7, #1
 8000df2:	0223      	lsls	r3, r4, #8
 8000df4:	d400      	bmi.n	8000df8 <__aeabi_dadd+0x50c>
 8000df6:	e6df      	b.n	8000bb8 <__aeabi_dadd+0x2cc>
 8000df8:	2702      	movs	r7, #2
 8000dfa:	e687      	b.n	8000b0c <__aeabi_dadd+0x220>
 8000dfc:	4663      	mov	r3, ip
 8000dfe:	1ac5      	subs	r5, r0, r3
 8000e00:	42a8      	cmp	r0, r5
 8000e02:	4180      	sbcs	r0, r0
 8000e04:	4653      	mov	r3, sl
 8000e06:	4240      	negs	r0, r0
 8000e08:	1ae4      	subs	r4, r4, r3
 8000e0a:	2701      	movs	r7, #1
 8000e0c:	1a24      	subs	r4, r4, r0
 8000e0e:	e5c0      	b.n	8000992 <__aeabi_dadd+0xa6>
 8000e10:	0762      	lsls	r2, r4, #29
 8000e12:	08c0      	lsrs	r0, r0, #3
 8000e14:	4302      	orrs	r2, r0
 8000e16:	08e4      	lsrs	r4, r4, #3
 8000e18:	e736      	b.n	8000c88 <__aeabi_dadd+0x39c>
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	4653      	mov	r3, sl
 8000e1e:	3920      	subs	r1, #32
 8000e20:	40cb      	lsrs	r3, r1
 8000e22:	4699      	mov	r9, r3
 8000e24:	2a20      	cmp	r2, #32
 8000e26:	d006      	beq.n	8000e36 <__aeabi_dadd+0x54a>
 8000e28:	2140      	movs	r1, #64	@ 0x40
 8000e2a:	4653      	mov	r3, sl
 8000e2c:	1a8a      	subs	r2, r1, r2
 8000e2e:	4093      	lsls	r3, r2
 8000e30:	4662      	mov	r2, ip
 8000e32:	431a      	orrs	r2, r3
 8000e34:	4694      	mov	ip, r2
 8000e36:	4665      	mov	r5, ip
 8000e38:	1e6b      	subs	r3, r5, #1
 8000e3a:	419d      	sbcs	r5, r3
 8000e3c:	464b      	mov	r3, r9
 8000e3e:	431d      	orrs	r5, r3
 8000e40:	e659      	b.n	8000af6 <__aeabi_dadd+0x20a>
 8000e42:	0762      	lsls	r2, r4, #29
 8000e44:	08c0      	lsrs	r0, r0, #3
 8000e46:	4302      	orrs	r2, r0
 8000e48:	08e4      	lsrs	r4, r4, #3
 8000e4a:	e70d      	b.n	8000c68 <__aeabi_dadd+0x37c>
 8000e4c:	4653      	mov	r3, sl
 8000e4e:	075a      	lsls	r2, r3, #29
 8000e50:	4663      	mov	r3, ip
 8000e52:	08d8      	lsrs	r0, r3, #3
 8000e54:	4653      	mov	r3, sl
 8000e56:	000e      	movs	r6, r1
 8000e58:	4302      	orrs	r2, r0
 8000e5a:	08dc      	lsrs	r4, r3, #3
 8000e5c:	e714      	b.n	8000c88 <__aeabi_dadd+0x39c>
 8000e5e:	0015      	movs	r5, r2
 8000e60:	0026      	movs	r6, r4
 8000e62:	3d20      	subs	r5, #32
 8000e64:	40ee      	lsrs	r6, r5
 8000e66:	2a20      	cmp	r2, #32
 8000e68:	d003      	beq.n	8000e72 <__aeabi_dadd+0x586>
 8000e6a:	2540      	movs	r5, #64	@ 0x40
 8000e6c:	1aaa      	subs	r2, r5, r2
 8000e6e:	4094      	lsls	r4, r2
 8000e70:	4320      	orrs	r0, r4
 8000e72:	1e42      	subs	r2, r0, #1
 8000e74:	4190      	sbcs	r0, r2
 8000e76:	0005      	movs	r5, r0
 8000e78:	4335      	orrs	r5, r6
 8000e7a:	e606      	b.n	8000a8a <__aeabi_dadd+0x19e>
 8000e7c:	2a00      	cmp	r2, #0
 8000e7e:	d07c      	beq.n	8000f7a <__aeabi_dadd+0x68e>
 8000e80:	4662      	mov	r2, ip
 8000e82:	4653      	mov	r3, sl
 8000e84:	08c0      	lsrs	r0, r0, #3
 8000e86:	431a      	orrs	r2, r3
 8000e88:	d100      	bne.n	8000e8c <__aeabi_dadd+0x5a0>
 8000e8a:	e6fa      	b.n	8000c82 <__aeabi_dadd+0x396>
 8000e8c:	0762      	lsls	r2, r4, #29
 8000e8e:	4310      	orrs	r0, r2
 8000e90:	2280      	movs	r2, #128	@ 0x80
 8000e92:	08e4      	lsrs	r4, r4, #3
 8000e94:	0312      	lsls	r2, r2, #12
 8000e96:	4214      	tst	r4, r2
 8000e98:	d008      	beq.n	8000eac <__aeabi_dadd+0x5c0>
 8000e9a:	08d9      	lsrs	r1, r3, #3
 8000e9c:	4211      	tst	r1, r2
 8000e9e:	d105      	bne.n	8000eac <__aeabi_dadd+0x5c0>
 8000ea0:	4663      	mov	r3, ip
 8000ea2:	08d8      	lsrs	r0, r3, #3
 8000ea4:	4653      	mov	r3, sl
 8000ea6:	000c      	movs	r4, r1
 8000ea8:	075b      	lsls	r3, r3, #29
 8000eaa:	4318      	orrs	r0, r3
 8000eac:	0f42      	lsrs	r2, r0, #29
 8000eae:	00c0      	lsls	r0, r0, #3
 8000eb0:	08c0      	lsrs	r0, r0, #3
 8000eb2:	0752      	lsls	r2, r2, #29
 8000eb4:	4302      	orrs	r2, r0
 8000eb6:	e6e7      	b.n	8000c88 <__aeabi_dadd+0x39c>
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dadd+0x5d2>
 8000ebc:	e72d      	b.n	8000d1a <__aeabi_dadd+0x42e>
 8000ebe:	4663      	mov	r3, ip
 8000ec0:	08d8      	lsrs	r0, r3, #3
 8000ec2:	4653      	mov	r3, sl
 8000ec4:	075a      	lsls	r2, r3, #29
 8000ec6:	000e      	movs	r6, r1
 8000ec8:	4302      	orrs	r2, r0
 8000eca:	08dc      	lsrs	r4, r3, #3
 8000ecc:	e6cc      	b.n	8000c68 <__aeabi_dadd+0x37c>
 8000ece:	4663      	mov	r3, ip
 8000ed0:	1a1d      	subs	r5, r3, r0
 8000ed2:	45ac      	cmp	ip, r5
 8000ed4:	4192      	sbcs	r2, r2
 8000ed6:	4653      	mov	r3, sl
 8000ed8:	4252      	negs	r2, r2
 8000eda:	1b1c      	subs	r4, r3, r4
 8000edc:	000e      	movs	r6, r1
 8000ede:	4688      	mov	r8, r1
 8000ee0:	1aa4      	subs	r4, r4, r2
 8000ee2:	3701      	adds	r7, #1
 8000ee4:	e555      	b.n	8000992 <__aeabi_dadd+0xa6>
 8000ee6:	4663      	mov	r3, ip
 8000ee8:	08d9      	lsrs	r1, r3, #3
 8000eea:	4653      	mov	r3, sl
 8000eec:	075a      	lsls	r2, r3, #29
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	08dc      	lsrs	r4, r3, #3
 8000ef2:	e6c9      	b.n	8000c88 <__aeabi_dadd+0x39c>
 8000ef4:	4660      	mov	r0, ip
 8000ef6:	4654      	mov	r4, sl
 8000ef8:	e6d4      	b.n	8000ca4 <__aeabi_dadd+0x3b8>
 8000efa:	08c0      	lsrs	r0, r0, #3
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dadd+0x616>
 8000f00:	e6bf      	b.n	8000c82 <__aeabi_dadd+0x396>
 8000f02:	0762      	lsls	r2, r4, #29
 8000f04:	4310      	orrs	r0, r2
 8000f06:	2280      	movs	r2, #128	@ 0x80
 8000f08:	08e4      	lsrs	r4, r4, #3
 8000f0a:	0312      	lsls	r2, r2, #12
 8000f0c:	4214      	tst	r4, r2
 8000f0e:	d0cd      	beq.n	8000eac <__aeabi_dadd+0x5c0>
 8000f10:	08dd      	lsrs	r5, r3, #3
 8000f12:	4215      	tst	r5, r2
 8000f14:	d1ca      	bne.n	8000eac <__aeabi_dadd+0x5c0>
 8000f16:	4663      	mov	r3, ip
 8000f18:	08d8      	lsrs	r0, r3, #3
 8000f1a:	4653      	mov	r3, sl
 8000f1c:	075b      	lsls	r3, r3, #29
 8000f1e:	000e      	movs	r6, r1
 8000f20:	002c      	movs	r4, r5
 8000f22:	4318      	orrs	r0, r3
 8000f24:	e7c2      	b.n	8000eac <__aeabi_dadd+0x5c0>
 8000f26:	4663      	mov	r3, ip
 8000f28:	08d9      	lsrs	r1, r3, #3
 8000f2a:	4653      	mov	r3, sl
 8000f2c:	075a      	lsls	r2, r3, #29
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	08dc      	lsrs	r4, r3, #3
 8000f32:	e699      	b.n	8000c68 <__aeabi_dadd+0x37c>
 8000f34:	4663      	mov	r3, ip
 8000f36:	08d8      	lsrs	r0, r3, #3
 8000f38:	4653      	mov	r3, sl
 8000f3a:	075a      	lsls	r2, r3, #29
 8000f3c:	000e      	movs	r6, r1
 8000f3e:	4302      	orrs	r2, r0
 8000f40:	08dc      	lsrs	r4, r3, #3
 8000f42:	e6a1      	b.n	8000c88 <__aeabi_dadd+0x39c>
 8000f44:	0011      	movs	r1, r2
 8000f46:	0027      	movs	r7, r4
 8000f48:	3920      	subs	r1, #32
 8000f4a:	40cf      	lsrs	r7, r1
 8000f4c:	2a20      	cmp	r2, #32
 8000f4e:	d003      	beq.n	8000f58 <__aeabi_dadd+0x66c>
 8000f50:	2140      	movs	r1, #64	@ 0x40
 8000f52:	1a8a      	subs	r2, r1, r2
 8000f54:	4094      	lsls	r4, r2
 8000f56:	4320      	orrs	r0, r4
 8000f58:	1e42      	subs	r2, r0, #1
 8000f5a:	4190      	sbcs	r0, r2
 8000f5c:	0005      	movs	r5, r0
 8000f5e:	433d      	orrs	r5, r7
 8000f60:	e651      	b.n	8000c06 <__aeabi_dadd+0x31a>
 8000f62:	000c      	movs	r4, r1
 8000f64:	2500      	movs	r5, #0
 8000f66:	2200      	movs	r2, #0
 8000f68:	e558      	b.n	8000a1c <__aeabi_dadd+0x130>
 8000f6a:	4460      	add	r0, ip
 8000f6c:	4560      	cmp	r0, ip
 8000f6e:	4192      	sbcs	r2, r2
 8000f70:	4454      	add	r4, sl
 8000f72:	4252      	negs	r2, r2
 8000f74:	0005      	movs	r5, r0
 8000f76:	18a4      	adds	r4, r4, r2
 8000f78:	e73a      	b.n	8000df0 <__aeabi_dadd+0x504>
 8000f7a:	4653      	mov	r3, sl
 8000f7c:	075a      	lsls	r2, r3, #29
 8000f7e:	4663      	mov	r3, ip
 8000f80:	08d9      	lsrs	r1, r3, #3
 8000f82:	4653      	mov	r3, sl
 8000f84:	430a      	orrs	r2, r1
 8000f86:	08dc      	lsrs	r4, r3, #3
 8000f88:	e67e      	b.n	8000c88 <__aeabi_dadd+0x39c>
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	001c      	movs	r4, r3
 8000f8e:	432a      	orrs	r2, r5
 8000f90:	d000      	beq.n	8000f94 <__aeabi_dadd+0x6a8>
 8000f92:	e6ab      	b.n	8000cec <__aeabi_dadd+0x400>
 8000f94:	e6c1      	b.n	8000d1a <__aeabi_dadd+0x42e>
 8000f96:	2120      	movs	r1, #32
 8000f98:	2500      	movs	r5, #0
 8000f9a:	1a09      	subs	r1, r1, r0
 8000f9c:	e519      	b.n	80009d2 <__aeabi_dadd+0xe6>
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2500      	movs	r5, #0
 8000fa2:	4c01      	ldr	r4, [pc, #4]	@ (8000fa8 <__aeabi_dadd+0x6bc>)
 8000fa4:	e53a      	b.n	8000a1c <__aeabi_dadd+0x130>
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	000007ff 	.word	0x000007ff
 8000fac:	ff7fffff 	.word	0xff7fffff
 8000fb0:	000007fe 	.word	0x000007fe

08000fb4 <__aeabi_ddiv>:
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb6:	46de      	mov	lr, fp
 8000fb8:	4645      	mov	r5, r8
 8000fba:	4657      	mov	r7, sl
 8000fbc:	464e      	mov	r6, r9
 8000fbe:	b5e0      	push	{r5, r6, r7, lr}
 8000fc0:	b087      	sub	sp, #28
 8000fc2:	9200      	str	r2, [sp, #0]
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	030b      	lsls	r3, r1, #12
 8000fc8:	0b1b      	lsrs	r3, r3, #12
 8000fca:	469b      	mov	fp, r3
 8000fcc:	0fca      	lsrs	r2, r1, #31
 8000fce:	004b      	lsls	r3, r1, #1
 8000fd0:	0004      	movs	r4, r0
 8000fd2:	4680      	mov	r8, r0
 8000fd4:	0d5b      	lsrs	r3, r3, #21
 8000fd6:	9202      	str	r2, [sp, #8]
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x28>
 8000fda:	e16a      	b.n	80012b2 <__aeabi_ddiv+0x2fe>
 8000fdc:	4ad4      	ldr	r2, [pc, #848]	@ (8001330 <__aeabi_ddiv+0x37c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_ddiv+0x30>
 8000fe2:	e18c      	b.n	80012fe <__aeabi_ddiv+0x34a>
 8000fe4:	4659      	mov	r1, fp
 8000fe6:	0f42      	lsrs	r2, r0, #29
 8000fe8:	00c9      	lsls	r1, r1, #3
 8000fea:	430a      	orrs	r2, r1
 8000fec:	2180      	movs	r1, #128	@ 0x80
 8000fee:	0409      	lsls	r1, r1, #16
 8000ff0:	4311      	orrs	r1, r2
 8000ff2:	00c2      	lsls	r2, r0, #3
 8000ff4:	4690      	mov	r8, r2
 8000ff6:	4acf      	ldr	r2, [pc, #828]	@ (8001334 <__aeabi_ddiv+0x380>)
 8000ff8:	4689      	mov	r9, r1
 8000ffa:	4692      	mov	sl, r2
 8000ffc:	449a      	add	sl, r3
 8000ffe:	2300      	movs	r3, #0
 8001000:	2400      	movs	r4, #0
 8001002:	9303      	str	r3, [sp, #12]
 8001004:	9e00      	ldr	r6, [sp, #0]
 8001006:	9f01      	ldr	r7, [sp, #4]
 8001008:	033b      	lsls	r3, r7, #12
 800100a:	0b1b      	lsrs	r3, r3, #12
 800100c:	469b      	mov	fp, r3
 800100e:	007b      	lsls	r3, r7, #1
 8001010:	0030      	movs	r0, r6
 8001012:	0d5b      	lsrs	r3, r3, #21
 8001014:	0ffd      	lsrs	r5, r7, #31
 8001016:	2b00      	cmp	r3, #0
 8001018:	d100      	bne.n	800101c <__aeabi_ddiv+0x68>
 800101a:	e128      	b.n	800126e <__aeabi_ddiv+0x2ba>
 800101c:	4ac4      	ldr	r2, [pc, #784]	@ (8001330 <__aeabi_ddiv+0x37c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d100      	bne.n	8001024 <__aeabi_ddiv+0x70>
 8001022:	e177      	b.n	8001314 <__aeabi_ddiv+0x360>
 8001024:	4659      	mov	r1, fp
 8001026:	0f72      	lsrs	r2, r6, #29
 8001028:	00c9      	lsls	r1, r1, #3
 800102a:	430a      	orrs	r2, r1
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	0409      	lsls	r1, r1, #16
 8001030:	4311      	orrs	r1, r2
 8001032:	468b      	mov	fp, r1
 8001034:	49bf      	ldr	r1, [pc, #764]	@ (8001334 <__aeabi_ddiv+0x380>)
 8001036:	00f2      	lsls	r2, r6, #3
 8001038:	468c      	mov	ip, r1
 800103a:	4651      	mov	r1, sl
 800103c:	4463      	add	r3, ip
 800103e:	1acb      	subs	r3, r1, r3
 8001040:	469a      	mov	sl, r3
 8001042:	2300      	movs	r3, #0
 8001044:	9e02      	ldr	r6, [sp, #8]
 8001046:	406e      	eors	r6, r5
 8001048:	2c0f      	cmp	r4, #15
 800104a:	d827      	bhi.n	800109c <__aeabi_ddiv+0xe8>
 800104c:	49ba      	ldr	r1, [pc, #744]	@ (8001338 <__aeabi_ddiv+0x384>)
 800104e:	00a4      	lsls	r4, r4, #2
 8001050:	5909      	ldr	r1, [r1, r4]
 8001052:	468f      	mov	pc, r1
 8001054:	46cb      	mov	fp, r9
 8001056:	4642      	mov	r2, r8
 8001058:	9e02      	ldr	r6, [sp, #8]
 800105a:	9b03      	ldr	r3, [sp, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d016      	beq.n	800108e <__aeabi_ddiv+0xda>
 8001060:	2b03      	cmp	r3, #3
 8001062:	d100      	bne.n	8001066 <__aeabi_ddiv+0xb2>
 8001064:	e2a6      	b.n	80015b4 <__aeabi_ddiv+0x600>
 8001066:	2b01      	cmp	r3, #1
 8001068:	d000      	beq.n	800106c <__aeabi_ddiv+0xb8>
 800106a:	e0df      	b.n	800122c <__aeabi_ddiv+0x278>
 800106c:	2200      	movs	r2, #0
 800106e:	2300      	movs	r3, #0
 8001070:	2400      	movs	r4, #0
 8001072:	4690      	mov	r8, r2
 8001074:	051b      	lsls	r3, r3, #20
 8001076:	4323      	orrs	r3, r4
 8001078:	07f6      	lsls	r6, r6, #31
 800107a:	4333      	orrs	r3, r6
 800107c:	4640      	mov	r0, r8
 800107e:	0019      	movs	r1, r3
 8001080:	b007      	add	sp, #28
 8001082:	bcf0      	pop	{r4, r5, r6, r7}
 8001084:	46bb      	mov	fp, r7
 8001086:	46b2      	mov	sl, r6
 8001088:	46a9      	mov	r9, r5
 800108a:	46a0      	mov	r8, r4
 800108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108e:	2200      	movs	r2, #0
 8001090:	2400      	movs	r4, #0
 8001092:	4690      	mov	r8, r2
 8001094:	4ba6      	ldr	r3, [pc, #664]	@ (8001330 <__aeabi_ddiv+0x37c>)
 8001096:	e7ed      	b.n	8001074 <__aeabi_ddiv+0xc0>
 8001098:	002e      	movs	r6, r5
 800109a:	e7df      	b.n	800105c <__aeabi_ddiv+0xa8>
 800109c:	45cb      	cmp	fp, r9
 800109e:	d200      	bcs.n	80010a2 <__aeabi_ddiv+0xee>
 80010a0:	e1d4      	b.n	800144c <__aeabi_ddiv+0x498>
 80010a2:	d100      	bne.n	80010a6 <__aeabi_ddiv+0xf2>
 80010a4:	e1cf      	b.n	8001446 <__aeabi_ddiv+0x492>
 80010a6:	2301      	movs	r3, #1
 80010a8:	425b      	negs	r3, r3
 80010aa:	469c      	mov	ip, r3
 80010ac:	4644      	mov	r4, r8
 80010ae:	4648      	mov	r0, r9
 80010b0:	2700      	movs	r7, #0
 80010b2:	44e2      	add	sl, ip
 80010b4:	465b      	mov	r3, fp
 80010b6:	0e15      	lsrs	r5, r2, #24
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	431d      	orrs	r5, r3
 80010bc:	0c19      	lsrs	r1, r3, #16
 80010be:	042b      	lsls	r3, r5, #16
 80010c0:	0212      	lsls	r2, r2, #8
 80010c2:	9500      	str	r5, [sp, #0]
 80010c4:	0c1d      	lsrs	r5, r3, #16
 80010c6:	4691      	mov	r9, r2
 80010c8:	9102      	str	r1, [sp, #8]
 80010ca:	9503      	str	r5, [sp, #12]
 80010cc:	f7ff f8a2 	bl	8000214 <__aeabi_uidivmod>
 80010d0:	0002      	movs	r2, r0
 80010d2:	436a      	muls	r2, r5
 80010d4:	040b      	lsls	r3, r1, #16
 80010d6:	0c21      	lsrs	r1, r4, #16
 80010d8:	4680      	mov	r8, r0
 80010da:	4319      	orrs	r1, r3
 80010dc:	428a      	cmp	r2, r1
 80010de:	d909      	bls.n	80010f4 <__aeabi_ddiv+0x140>
 80010e0:	9d00      	ldr	r5, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	46ac      	mov	ip, r5
 80010e6:	425b      	negs	r3, r3
 80010e8:	4461      	add	r1, ip
 80010ea:	469c      	mov	ip, r3
 80010ec:	44e0      	add	r8, ip
 80010ee:	428d      	cmp	r5, r1
 80010f0:	d800      	bhi.n	80010f4 <__aeabi_ddiv+0x140>
 80010f2:	e1fb      	b.n	80014ec <__aeabi_ddiv+0x538>
 80010f4:	1a88      	subs	r0, r1, r2
 80010f6:	9902      	ldr	r1, [sp, #8]
 80010f8:	f7ff f88c 	bl	8000214 <__aeabi_uidivmod>
 80010fc:	9a03      	ldr	r2, [sp, #12]
 80010fe:	0424      	lsls	r4, r4, #16
 8001100:	4342      	muls	r2, r0
 8001102:	0409      	lsls	r1, r1, #16
 8001104:	0c24      	lsrs	r4, r4, #16
 8001106:	0003      	movs	r3, r0
 8001108:	430c      	orrs	r4, r1
 800110a:	42a2      	cmp	r2, r4
 800110c:	d906      	bls.n	800111c <__aeabi_ddiv+0x168>
 800110e:	9900      	ldr	r1, [sp, #0]
 8001110:	3b01      	subs	r3, #1
 8001112:	468c      	mov	ip, r1
 8001114:	4464      	add	r4, ip
 8001116:	42a1      	cmp	r1, r4
 8001118:	d800      	bhi.n	800111c <__aeabi_ddiv+0x168>
 800111a:	e1e1      	b.n	80014e0 <__aeabi_ddiv+0x52c>
 800111c:	1aa0      	subs	r0, r4, r2
 800111e:	4642      	mov	r2, r8
 8001120:	0412      	lsls	r2, r2, #16
 8001122:	431a      	orrs	r2, r3
 8001124:	4693      	mov	fp, r2
 8001126:	464b      	mov	r3, r9
 8001128:	4659      	mov	r1, fp
 800112a:	0c1b      	lsrs	r3, r3, #16
 800112c:	001d      	movs	r5, r3
 800112e:	9304      	str	r3, [sp, #16]
 8001130:	040b      	lsls	r3, r1, #16
 8001132:	4649      	mov	r1, r9
 8001134:	0409      	lsls	r1, r1, #16
 8001136:	0c09      	lsrs	r1, r1, #16
 8001138:	000c      	movs	r4, r1
 800113a:	0c1b      	lsrs	r3, r3, #16
 800113c:	435c      	muls	r4, r3
 800113e:	0c12      	lsrs	r2, r2, #16
 8001140:	436b      	muls	r3, r5
 8001142:	4688      	mov	r8, r1
 8001144:	4351      	muls	r1, r2
 8001146:	436a      	muls	r2, r5
 8001148:	0c25      	lsrs	r5, r4, #16
 800114a:	46ac      	mov	ip, r5
 800114c:	185b      	adds	r3, r3, r1
 800114e:	4463      	add	r3, ip
 8001150:	4299      	cmp	r1, r3
 8001152:	d903      	bls.n	800115c <__aeabi_ddiv+0x1a8>
 8001154:	2180      	movs	r1, #128	@ 0x80
 8001156:	0249      	lsls	r1, r1, #9
 8001158:	468c      	mov	ip, r1
 800115a:	4462      	add	r2, ip
 800115c:	0c19      	lsrs	r1, r3, #16
 800115e:	0424      	lsls	r4, r4, #16
 8001160:	041b      	lsls	r3, r3, #16
 8001162:	0c24      	lsrs	r4, r4, #16
 8001164:	188a      	adds	r2, r1, r2
 8001166:	191c      	adds	r4, r3, r4
 8001168:	4290      	cmp	r0, r2
 800116a:	d302      	bcc.n	8001172 <__aeabi_ddiv+0x1be>
 800116c:	d116      	bne.n	800119c <__aeabi_ddiv+0x1e8>
 800116e:	42a7      	cmp	r7, r4
 8001170:	d214      	bcs.n	800119c <__aeabi_ddiv+0x1e8>
 8001172:	465b      	mov	r3, fp
 8001174:	9d00      	ldr	r5, [sp, #0]
 8001176:	3b01      	subs	r3, #1
 8001178:	444f      	add	r7, r9
 800117a:	9305      	str	r3, [sp, #20]
 800117c:	454f      	cmp	r7, r9
 800117e:	419b      	sbcs	r3, r3
 8001180:	46ac      	mov	ip, r5
 8001182:	425b      	negs	r3, r3
 8001184:	4463      	add	r3, ip
 8001186:	18c0      	adds	r0, r0, r3
 8001188:	4285      	cmp	r5, r0
 800118a:	d300      	bcc.n	800118e <__aeabi_ddiv+0x1da>
 800118c:	e1a1      	b.n	80014d2 <__aeabi_ddiv+0x51e>
 800118e:	4282      	cmp	r2, r0
 8001190:	d900      	bls.n	8001194 <__aeabi_ddiv+0x1e0>
 8001192:	e1f6      	b.n	8001582 <__aeabi_ddiv+0x5ce>
 8001194:	d100      	bne.n	8001198 <__aeabi_ddiv+0x1e4>
 8001196:	e1f1      	b.n	800157c <__aeabi_ddiv+0x5c8>
 8001198:	9b05      	ldr	r3, [sp, #20]
 800119a:	469b      	mov	fp, r3
 800119c:	1b3c      	subs	r4, r7, r4
 800119e:	42a7      	cmp	r7, r4
 80011a0:	41bf      	sbcs	r7, r7
 80011a2:	9d00      	ldr	r5, [sp, #0]
 80011a4:	1a80      	subs	r0, r0, r2
 80011a6:	427f      	negs	r7, r7
 80011a8:	1bc0      	subs	r0, r0, r7
 80011aa:	4285      	cmp	r5, r0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_ddiv+0x1fc>
 80011ae:	e1d0      	b.n	8001552 <__aeabi_ddiv+0x59e>
 80011b0:	9902      	ldr	r1, [sp, #8]
 80011b2:	f7ff f82f 	bl	8000214 <__aeabi_uidivmod>
 80011b6:	9a03      	ldr	r2, [sp, #12]
 80011b8:	040b      	lsls	r3, r1, #16
 80011ba:	4342      	muls	r2, r0
 80011bc:	0c21      	lsrs	r1, r4, #16
 80011be:	0007      	movs	r7, r0
 80011c0:	4319      	orrs	r1, r3
 80011c2:	428a      	cmp	r2, r1
 80011c4:	d900      	bls.n	80011c8 <__aeabi_ddiv+0x214>
 80011c6:	e178      	b.n	80014ba <__aeabi_ddiv+0x506>
 80011c8:	1a88      	subs	r0, r1, r2
 80011ca:	9902      	ldr	r1, [sp, #8]
 80011cc:	f7ff f822 	bl	8000214 <__aeabi_uidivmod>
 80011d0:	9a03      	ldr	r2, [sp, #12]
 80011d2:	0424      	lsls	r4, r4, #16
 80011d4:	4342      	muls	r2, r0
 80011d6:	0409      	lsls	r1, r1, #16
 80011d8:	0c24      	lsrs	r4, r4, #16
 80011da:	0003      	movs	r3, r0
 80011dc:	430c      	orrs	r4, r1
 80011de:	42a2      	cmp	r2, r4
 80011e0:	d900      	bls.n	80011e4 <__aeabi_ddiv+0x230>
 80011e2:	e15d      	b.n	80014a0 <__aeabi_ddiv+0x4ec>
 80011e4:	4641      	mov	r1, r8
 80011e6:	1aa4      	subs	r4, r4, r2
 80011e8:	043a      	lsls	r2, r7, #16
 80011ea:	431a      	orrs	r2, r3
 80011ec:	9d04      	ldr	r5, [sp, #16]
 80011ee:	0413      	lsls	r3, r2, #16
 80011f0:	0c1b      	lsrs	r3, r3, #16
 80011f2:	4359      	muls	r1, r3
 80011f4:	4647      	mov	r7, r8
 80011f6:	436b      	muls	r3, r5
 80011f8:	469c      	mov	ip, r3
 80011fa:	0c10      	lsrs	r0, r2, #16
 80011fc:	4347      	muls	r7, r0
 80011fe:	0c0b      	lsrs	r3, r1, #16
 8001200:	44bc      	add	ip, r7
 8001202:	4463      	add	r3, ip
 8001204:	4368      	muls	r0, r5
 8001206:	429f      	cmp	r7, r3
 8001208:	d903      	bls.n	8001212 <__aeabi_ddiv+0x25e>
 800120a:	2580      	movs	r5, #128	@ 0x80
 800120c:	026d      	lsls	r5, r5, #9
 800120e:	46ac      	mov	ip, r5
 8001210:	4460      	add	r0, ip
 8001212:	0c1f      	lsrs	r7, r3, #16
 8001214:	0409      	lsls	r1, r1, #16
 8001216:	041b      	lsls	r3, r3, #16
 8001218:	0c09      	lsrs	r1, r1, #16
 800121a:	183f      	adds	r7, r7, r0
 800121c:	185b      	adds	r3, r3, r1
 800121e:	42bc      	cmp	r4, r7
 8001220:	d200      	bcs.n	8001224 <__aeabi_ddiv+0x270>
 8001222:	e102      	b.n	800142a <__aeabi_ddiv+0x476>
 8001224:	d100      	bne.n	8001228 <__aeabi_ddiv+0x274>
 8001226:	e0fd      	b.n	8001424 <__aeabi_ddiv+0x470>
 8001228:	2301      	movs	r3, #1
 800122a:	431a      	orrs	r2, r3
 800122c:	4b43      	ldr	r3, [pc, #268]	@ (800133c <__aeabi_ddiv+0x388>)
 800122e:	4453      	add	r3, sl
 8001230:	2b00      	cmp	r3, #0
 8001232:	dc00      	bgt.n	8001236 <__aeabi_ddiv+0x282>
 8001234:	e0ae      	b.n	8001394 <__aeabi_ddiv+0x3e0>
 8001236:	0751      	lsls	r1, r2, #29
 8001238:	d000      	beq.n	800123c <__aeabi_ddiv+0x288>
 800123a:	e198      	b.n	800156e <__aeabi_ddiv+0x5ba>
 800123c:	4659      	mov	r1, fp
 800123e:	01c9      	lsls	r1, r1, #7
 8001240:	d506      	bpl.n	8001250 <__aeabi_ddiv+0x29c>
 8001242:	4659      	mov	r1, fp
 8001244:	4b3e      	ldr	r3, [pc, #248]	@ (8001340 <__aeabi_ddiv+0x38c>)
 8001246:	4019      	ands	r1, r3
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	468b      	mov	fp, r1
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4453      	add	r3, sl
 8001250:	493c      	ldr	r1, [pc, #240]	@ (8001344 <__aeabi_ddiv+0x390>)
 8001252:	428b      	cmp	r3, r1
 8001254:	dd00      	ble.n	8001258 <__aeabi_ddiv+0x2a4>
 8001256:	e71a      	b.n	800108e <__aeabi_ddiv+0xda>
 8001258:	4659      	mov	r1, fp
 800125a:	08d2      	lsrs	r2, r2, #3
 800125c:	0749      	lsls	r1, r1, #29
 800125e:	4311      	orrs	r1, r2
 8001260:	465a      	mov	r2, fp
 8001262:	055b      	lsls	r3, r3, #21
 8001264:	0254      	lsls	r4, r2, #9
 8001266:	4688      	mov	r8, r1
 8001268:	0b24      	lsrs	r4, r4, #12
 800126a:	0d5b      	lsrs	r3, r3, #21
 800126c:	e702      	b.n	8001074 <__aeabi_ddiv+0xc0>
 800126e:	465a      	mov	r2, fp
 8001270:	9b00      	ldr	r3, [sp, #0]
 8001272:	431a      	orrs	r2, r3
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x2c4>
 8001276:	e07e      	b.n	8001376 <__aeabi_ddiv+0x3c2>
 8001278:	465b      	mov	r3, fp
 800127a:	2b00      	cmp	r3, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_ddiv+0x2cc>
 800127e:	e100      	b.n	8001482 <__aeabi_ddiv+0x4ce>
 8001280:	4658      	mov	r0, fp
 8001282:	f7ff f80b 	bl	800029c <__clzsi2>
 8001286:	0002      	movs	r2, r0
 8001288:	0003      	movs	r3, r0
 800128a:	3a0b      	subs	r2, #11
 800128c:	271d      	movs	r7, #29
 800128e:	9e00      	ldr	r6, [sp, #0]
 8001290:	1aba      	subs	r2, r7, r2
 8001292:	0019      	movs	r1, r3
 8001294:	4658      	mov	r0, fp
 8001296:	40d6      	lsrs	r6, r2
 8001298:	3908      	subs	r1, #8
 800129a:	4088      	lsls	r0, r1
 800129c:	0032      	movs	r2, r6
 800129e:	4302      	orrs	r2, r0
 80012a0:	4693      	mov	fp, r2
 80012a2:	9a00      	ldr	r2, [sp, #0]
 80012a4:	408a      	lsls	r2, r1
 80012a6:	4928      	ldr	r1, [pc, #160]	@ (8001348 <__aeabi_ddiv+0x394>)
 80012a8:	4453      	add	r3, sl
 80012aa:	468a      	mov	sl, r1
 80012ac:	449a      	add	sl, r3
 80012ae:	2300      	movs	r3, #0
 80012b0:	e6c8      	b.n	8001044 <__aeabi_ddiv+0x90>
 80012b2:	465b      	mov	r3, fp
 80012b4:	4303      	orrs	r3, r0
 80012b6:	4699      	mov	r9, r3
 80012b8:	d056      	beq.n	8001368 <__aeabi_ddiv+0x3b4>
 80012ba:	465b      	mov	r3, fp
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x30e>
 80012c0:	e0cd      	b.n	800145e <__aeabi_ddiv+0x4aa>
 80012c2:	4658      	mov	r0, fp
 80012c4:	f7fe ffea 	bl	800029c <__clzsi2>
 80012c8:	230b      	movs	r3, #11
 80012ca:	425b      	negs	r3, r3
 80012cc:	469c      	mov	ip, r3
 80012ce:	0002      	movs	r2, r0
 80012d0:	4484      	add	ip, r0
 80012d2:	4666      	mov	r6, ip
 80012d4:	231d      	movs	r3, #29
 80012d6:	1b9b      	subs	r3, r3, r6
 80012d8:	0026      	movs	r6, r4
 80012da:	0011      	movs	r1, r2
 80012dc:	4658      	mov	r0, fp
 80012de:	40de      	lsrs	r6, r3
 80012e0:	3908      	subs	r1, #8
 80012e2:	4088      	lsls	r0, r1
 80012e4:	0033      	movs	r3, r6
 80012e6:	4303      	orrs	r3, r0
 80012e8:	4699      	mov	r9, r3
 80012ea:	0023      	movs	r3, r4
 80012ec:	408b      	lsls	r3, r1
 80012ee:	4698      	mov	r8, r3
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <__aeabi_ddiv+0x398>)
 80012f2:	2400      	movs	r4, #0
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	469a      	mov	sl, r3
 80012f8:	2300      	movs	r3, #0
 80012fa:	9303      	str	r3, [sp, #12]
 80012fc:	e682      	b.n	8001004 <__aeabi_ddiv+0x50>
 80012fe:	465a      	mov	r2, fp
 8001300:	4302      	orrs	r2, r0
 8001302:	4691      	mov	r9, r2
 8001304:	d12a      	bne.n	800135c <__aeabi_ddiv+0x3a8>
 8001306:	2200      	movs	r2, #0
 8001308:	469a      	mov	sl, r3
 800130a:	2302      	movs	r3, #2
 800130c:	4690      	mov	r8, r2
 800130e:	2408      	movs	r4, #8
 8001310:	9303      	str	r3, [sp, #12]
 8001312:	e677      	b.n	8001004 <__aeabi_ddiv+0x50>
 8001314:	465a      	mov	r2, fp
 8001316:	9b00      	ldr	r3, [sp, #0]
 8001318:	431a      	orrs	r2, r3
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <__aeabi_ddiv+0x39c>)
 800131c:	469c      	mov	ip, r3
 800131e:	44e2      	add	sl, ip
 8001320:	2a00      	cmp	r2, #0
 8001322:	d117      	bne.n	8001354 <__aeabi_ddiv+0x3a0>
 8001324:	2302      	movs	r3, #2
 8001326:	431c      	orrs	r4, r3
 8001328:	2300      	movs	r3, #0
 800132a:	469b      	mov	fp, r3
 800132c:	3302      	adds	r3, #2
 800132e:	e689      	b.n	8001044 <__aeabi_ddiv+0x90>
 8001330:	000007ff 	.word	0x000007ff
 8001334:	fffffc01 	.word	0xfffffc01
 8001338:	0800be90 	.word	0x0800be90
 800133c:	000003ff 	.word	0x000003ff
 8001340:	feffffff 	.word	0xfeffffff
 8001344:	000007fe 	.word	0x000007fe
 8001348:	000003f3 	.word	0x000003f3
 800134c:	fffffc0d 	.word	0xfffffc0d
 8001350:	fffff801 	.word	0xfffff801
 8001354:	2303      	movs	r3, #3
 8001356:	0032      	movs	r2, r6
 8001358:	431c      	orrs	r4, r3
 800135a:	e673      	b.n	8001044 <__aeabi_ddiv+0x90>
 800135c:	469a      	mov	sl, r3
 800135e:	2303      	movs	r3, #3
 8001360:	46d9      	mov	r9, fp
 8001362:	240c      	movs	r4, #12
 8001364:	9303      	str	r3, [sp, #12]
 8001366:	e64d      	b.n	8001004 <__aeabi_ddiv+0x50>
 8001368:	2300      	movs	r3, #0
 800136a:	4698      	mov	r8, r3
 800136c:	469a      	mov	sl, r3
 800136e:	3301      	adds	r3, #1
 8001370:	2404      	movs	r4, #4
 8001372:	9303      	str	r3, [sp, #12]
 8001374:	e646      	b.n	8001004 <__aeabi_ddiv+0x50>
 8001376:	2301      	movs	r3, #1
 8001378:	431c      	orrs	r4, r3
 800137a:	2300      	movs	r3, #0
 800137c:	469b      	mov	fp, r3
 800137e:	3301      	adds	r3, #1
 8001380:	e660      	b.n	8001044 <__aeabi_ddiv+0x90>
 8001382:	2300      	movs	r3, #0
 8001384:	2480      	movs	r4, #128	@ 0x80
 8001386:	4698      	mov	r8, r3
 8001388:	2600      	movs	r6, #0
 800138a:	4b92      	ldr	r3, [pc, #584]	@ (80015d4 <__aeabi_ddiv+0x620>)
 800138c:	0324      	lsls	r4, r4, #12
 800138e:	e671      	b.n	8001074 <__aeabi_ddiv+0xc0>
 8001390:	2201      	movs	r2, #1
 8001392:	4252      	negs	r2, r2
 8001394:	2101      	movs	r1, #1
 8001396:	1ac9      	subs	r1, r1, r3
 8001398:	2938      	cmp	r1, #56	@ 0x38
 800139a:	dd00      	ble.n	800139e <__aeabi_ddiv+0x3ea>
 800139c:	e666      	b.n	800106c <__aeabi_ddiv+0xb8>
 800139e:	291f      	cmp	r1, #31
 80013a0:	dc00      	bgt.n	80013a4 <__aeabi_ddiv+0x3f0>
 80013a2:	e0ab      	b.n	80014fc <__aeabi_ddiv+0x548>
 80013a4:	201f      	movs	r0, #31
 80013a6:	4240      	negs	r0, r0
 80013a8:	1ac3      	subs	r3, r0, r3
 80013aa:	4658      	mov	r0, fp
 80013ac:	40d8      	lsrs	r0, r3
 80013ae:	0003      	movs	r3, r0
 80013b0:	2920      	cmp	r1, #32
 80013b2:	d004      	beq.n	80013be <__aeabi_ddiv+0x40a>
 80013b4:	4658      	mov	r0, fp
 80013b6:	4988      	ldr	r1, [pc, #544]	@ (80015d8 <__aeabi_ddiv+0x624>)
 80013b8:	4451      	add	r1, sl
 80013ba:	4088      	lsls	r0, r1
 80013bc:	4302      	orrs	r2, r0
 80013be:	1e51      	subs	r1, r2, #1
 80013c0:	418a      	sbcs	r2, r1
 80013c2:	431a      	orrs	r2, r3
 80013c4:	2307      	movs	r3, #7
 80013c6:	0019      	movs	r1, r3
 80013c8:	2400      	movs	r4, #0
 80013ca:	4011      	ands	r1, r2
 80013cc:	4213      	tst	r3, r2
 80013ce:	d00c      	beq.n	80013ea <__aeabi_ddiv+0x436>
 80013d0:	230f      	movs	r3, #15
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d100      	bne.n	80013da <__aeabi_ddiv+0x426>
 80013d8:	e0f9      	b.n	80015ce <__aeabi_ddiv+0x61a>
 80013da:	1d11      	adds	r1, r2, #4
 80013dc:	4291      	cmp	r1, r2
 80013de:	419b      	sbcs	r3, r3
 80013e0:	000a      	movs	r2, r1
 80013e2:	425b      	negs	r3, r3
 80013e4:	0759      	lsls	r1, r3, #29
 80013e6:	025b      	lsls	r3, r3, #9
 80013e8:	0b1c      	lsrs	r4, r3, #12
 80013ea:	08d2      	lsrs	r2, r2, #3
 80013ec:	430a      	orrs	r2, r1
 80013ee:	4690      	mov	r8, r2
 80013f0:	2300      	movs	r3, #0
 80013f2:	e63f      	b.n	8001074 <__aeabi_ddiv+0xc0>
 80013f4:	2480      	movs	r4, #128	@ 0x80
 80013f6:	464b      	mov	r3, r9
 80013f8:	0324      	lsls	r4, r4, #12
 80013fa:	4223      	tst	r3, r4
 80013fc:	d009      	beq.n	8001412 <__aeabi_ddiv+0x45e>
 80013fe:	465b      	mov	r3, fp
 8001400:	4223      	tst	r3, r4
 8001402:	d106      	bne.n	8001412 <__aeabi_ddiv+0x45e>
 8001404:	431c      	orrs	r4, r3
 8001406:	0324      	lsls	r4, r4, #12
 8001408:	002e      	movs	r6, r5
 800140a:	4690      	mov	r8, r2
 800140c:	4b71      	ldr	r3, [pc, #452]	@ (80015d4 <__aeabi_ddiv+0x620>)
 800140e:	0b24      	lsrs	r4, r4, #12
 8001410:	e630      	b.n	8001074 <__aeabi_ddiv+0xc0>
 8001412:	2480      	movs	r4, #128	@ 0x80
 8001414:	464b      	mov	r3, r9
 8001416:	0324      	lsls	r4, r4, #12
 8001418:	431c      	orrs	r4, r3
 800141a:	0324      	lsls	r4, r4, #12
 800141c:	9e02      	ldr	r6, [sp, #8]
 800141e:	4b6d      	ldr	r3, [pc, #436]	@ (80015d4 <__aeabi_ddiv+0x620>)
 8001420:	0b24      	lsrs	r4, r4, #12
 8001422:	e627      	b.n	8001074 <__aeabi_ddiv+0xc0>
 8001424:	2b00      	cmp	r3, #0
 8001426:	d100      	bne.n	800142a <__aeabi_ddiv+0x476>
 8001428:	e700      	b.n	800122c <__aeabi_ddiv+0x278>
 800142a:	9800      	ldr	r0, [sp, #0]
 800142c:	1e51      	subs	r1, r2, #1
 800142e:	4684      	mov	ip, r0
 8001430:	4464      	add	r4, ip
 8001432:	4284      	cmp	r4, r0
 8001434:	d200      	bcs.n	8001438 <__aeabi_ddiv+0x484>
 8001436:	e084      	b.n	8001542 <__aeabi_ddiv+0x58e>
 8001438:	42bc      	cmp	r4, r7
 800143a:	d200      	bcs.n	800143e <__aeabi_ddiv+0x48a>
 800143c:	e0ae      	b.n	800159c <__aeabi_ddiv+0x5e8>
 800143e:	d100      	bne.n	8001442 <__aeabi_ddiv+0x48e>
 8001440:	e0c1      	b.n	80015c6 <__aeabi_ddiv+0x612>
 8001442:	000a      	movs	r2, r1
 8001444:	e6f0      	b.n	8001228 <__aeabi_ddiv+0x274>
 8001446:	4542      	cmp	r2, r8
 8001448:	d900      	bls.n	800144c <__aeabi_ddiv+0x498>
 800144a:	e62c      	b.n	80010a6 <__aeabi_ddiv+0xf2>
 800144c:	464b      	mov	r3, r9
 800144e:	07dc      	lsls	r4, r3, #31
 8001450:	0858      	lsrs	r0, r3, #1
 8001452:	4643      	mov	r3, r8
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	431c      	orrs	r4, r3
 8001458:	4643      	mov	r3, r8
 800145a:	07df      	lsls	r7, r3, #31
 800145c:	e62a      	b.n	80010b4 <__aeabi_ddiv+0x100>
 800145e:	f7fe ff1d 	bl	800029c <__clzsi2>
 8001462:	2315      	movs	r3, #21
 8001464:	469c      	mov	ip, r3
 8001466:	4484      	add	ip, r0
 8001468:	0002      	movs	r2, r0
 800146a:	4663      	mov	r3, ip
 800146c:	3220      	adds	r2, #32
 800146e:	2b1c      	cmp	r3, #28
 8001470:	dc00      	bgt.n	8001474 <__aeabi_ddiv+0x4c0>
 8001472:	e72e      	b.n	80012d2 <__aeabi_ddiv+0x31e>
 8001474:	0023      	movs	r3, r4
 8001476:	3808      	subs	r0, #8
 8001478:	4083      	lsls	r3, r0
 800147a:	4699      	mov	r9, r3
 800147c:	2300      	movs	r3, #0
 800147e:	4698      	mov	r8, r3
 8001480:	e736      	b.n	80012f0 <__aeabi_ddiv+0x33c>
 8001482:	f7fe ff0b 	bl	800029c <__clzsi2>
 8001486:	0002      	movs	r2, r0
 8001488:	0003      	movs	r3, r0
 800148a:	3215      	adds	r2, #21
 800148c:	3320      	adds	r3, #32
 800148e:	2a1c      	cmp	r2, #28
 8001490:	dc00      	bgt.n	8001494 <__aeabi_ddiv+0x4e0>
 8001492:	e6fb      	b.n	800128c <__aeabi_ddiv+0x2d8>
 8001494:	9900      	ldr	r1, [sp, #0]
 8001496:	3808      	subs	r0, #8
 8001498:	4081      	lsls	r1, r0
 800149a:	2200      	movs	r2, #0
 800149c:	468b      	mov	fp, r1
 800149e:	e702      	b.n	80012a6 <__aeabi_ddiv+0x2f2>
 80014a0:	9900      	ldr	r1, [sp, #0]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	468c      	mov	ip, r1
 80014a6:	4464      	add	r4, ip
 80014a8:	42a1      	cmp	r1, r4
 80014aa:	d900      	bls.n	80014ae <__aeabi_ddiv+0x4fa>
 80014ac:	e69a      	b.n	80011e4 <__aeabi_ddiv+0x230>
 80014ae:	42a2      	cmp	r2, r4
 80014b0:	d800      	bhi.n	80014b4 <__aeabi_ddiv+0x500>
 80014b2:	e697      	b.n	80011e4 <__aeabi_ddiv+0x230>
 80014b4:	1e83      	subs	r3, r0, #2
 80014b6:	4464      	add	r4, ip
 80014b8:	e694      	b.n	80011e4 <__aeabi_ddiv+0x230>
 80014ba:	46ac      	mov	ip, r5
 80014bc:	4461      	add	r1, ip
 80014be:	3f01      	subs	r7, #1
 80014c0:	428d      	cmp	r5, r1
 80014c2:	d900      	bls.n	80014c6 <__aeabi_ddiv+0x512>
 80014c4:	e680      	b.n	80011c8 <__aeabi_ddiv+0x214>
 80014c6:	428a      	cmp	r2, r1
 80014c8:	d800      	bhi.n	80014cc <__aeabi_ddiv+0x518>
 80014ca:	e67d      	b.n	80011c8 <__aeabi_ddiv+0x214>
 80014cc:	1e87      	subs	r7, r0, #2
 80014ce:	4461      	add	r1, ip
 80014d0:	e67a      	b.n	80011c8 <__aeabi_ddiv+0x214>
 80014d2:	4285      	cmp	r5, r0
 80014d4:	d000      	beq.n	80014d8 <__aeabi_ddiv+0x524>
 80014d6:	e65f      	b.n	8001198 <__aeabi_ddiv+0x1e4>
 80014d8:	45b9      	cmp	r9, r7
 80014da:	d900      	bls.n	80014de <__aeabi_ddiv+0x52a>
 80014dc:	e65c      	b.n	8001198 <__aeabi_ddiv+0x1e4>
 80014de:	e656      	b.n	800118e <__aeabi_ddiv+0x1da>
 80014e0:	42a2      	cmp	r2, r4
 80014e2:	d800      	bhi.n	80014e6 <__aeabi_ddiv+0x532>
 80014e4:	e61a      	b.n	800111c <__aeabi_ddiv+0x168>
 80014e6:	1e83      	subs	r3, r0, #2
 80014e8:	4464      	add	r4, ip
 80014ea:	e617      	b.n	800111c <__aeabi_ddiv+0x168>
 80014ec:	428a      	cmp	r2, r1
 80014ee:	d800      	bhi.n	80014f2 <__aeabi_ddiv+0x53e>
 80014f0:	e600      	b.n	80010f4 <__aeabi_ddiv+0x140>
 80014f2:	46ac      	mov	ip, r5
 80014f4:	1e83      	subs	r3, r0, #2
 80014f6:	4698      	mov	r8, r3
 80014f8:	4461      	add	r1, ip
 80014fa:	e5fb      	b.n	80010f4 <__aeabi_ddiv+0x140>
 80014fc:	4837      	ldr	r0, [pc, #220]	@ (80015dc <__aeabi_ddiv+0x628>)
 80014fe:	0014      	movs	r4, r2
 8001500:	4450      	add	r0, sl
 8001502:	4082      	lsls	r2, r0
 8001504:	465b      	mov	r3, fp
 8001506:	0017      	movs	r7, r2
 8001508:	4083      	lsls	r3, r0
 800150a:	40cc      	lsrs	r4, r1
 800150c:	1e7a      	subs	r2, r7, #1
 800150e:	4197      	sbcs	r7, r2
 8001510:	4323      	orrs	r3, r4
 8001512:	433b      	orrs	r3, r7
 8001514:	001a      	movs	r2, r3
 8001516:	465b      	mov	r3, fp
 8001518:	40cb      	lsrs	r3, r1
 800151a:	0751      	lsls	r1, r2, #29
 800151c:	d009      	beq.n	8001532 <__aeabi_ddiv+0x57e>
 800151e:	210f      	movs	r1, #15
 8001520:	4011      	ands	r1, r2
 8001522:	2904      	cmp	r1, #4
 8001524:	d005      	beq.n	8001532 <__aeabi_ddiv+0x57e>
 8001526:	1d11      	adds	r1, r2, #4
 8001528:	4291      	cmp	r1, r2
 800152a:	4192      	sbcs	r2, r2
 800152c:	4252      	negs	r2, r2
 800152e:	189b      	adds	r3, r3, r2
 8001530:	000a      	movs	r2, r1
 8001532:	0219      	lsls	r1, r3, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_ddiv+0x584>
 8001536:	e755      	b.n	80013e4 <__aeabi_ddiv+0x430>
 8001538:	2200      	movs	r2, #0
 800153a:	2301      	movs	r3, #1
 800153c:	2400      	movs	r4, #0
 800153e:	4690      	mov	r8, r2
 8001540:	e598      	b.n	8001074 <__aeabi_ddiv+0xc0>
 8001542:	000a      	movs	r2, r1
 8001544:	42bc      	cmp	r4, r7
 8001546:	d000      	beq.n	800154a <__aeabi_ddiv+0x596>
 8001548:	e66e      	b.n	8001228 <__aeabi_ddiv+0x274>
 800154a:	454b      	cmp	r3, r9
 800154c:	d000      	beq.n	8001550 <__aeabi_ddiv+0x59c>
 800154e:	e66b      	b.n	8001228 <__aeabi_ddiv+0x274>
 8001550:	e66c      	b.n	800122c <__aeabi_ddiv+0x278>
 8001552:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <__aeabi_ddiv+0x62c>)
 8001554:	4a23      	ldr	r2, [pc, #140]	@ (80015e4 <__aeabi_ddiv+0x630>)
 8001556:	4453      	add	r3, sl
 8001558:	4592      	cmp	sl, r2
 800155a:	da00      	bge.n	800155e <__aeabi_ddiv+0x5aa>
 800155c:	e718      	b.n	8001390 <__aeabi_ddiv+0x3dc>
 800155e:	2101      	movs	r1, #1
 8001560:	4249      	negs	r1, r1
 8001562:	1d0a      	adds	r2, r1, #4
 8001564:	428a      	cmp	r2, r1
 8001566:	4189      	sbcs	r1, r1
 8001568:	4249      	negs	r1, r1
 800156a:	448b      	add	fp, r1
 800156c:	e666      	b.n	800123c <__aeabi_ddiv+0x288>
 800156e:	210f      	movs	r1, #15
 8001570:	4011      	ands	r1, r2
 8001572:	2904      	cmp	r1, #4
 8001574:	d100      	bne.n	8001578 <__aeabi_ddiv+0x5c4>
 8001576:	e661      	b.n	800123c <__aeabi_ddiv+0x288>
 8001578:	0011      	movs	r1, r2
 800157a:	e7f2      	b.n	8001562 <__aeabi_ddiv+0x5ae>
 800157c:	42bc      	cmp	r4, r7
 800157e:	d800      	bhi.n	8001582 <__aeabi_ddiv+0x5ce>
 8001580:	e60a      	b.n	8001198 <__aeabi_ddiv+0x1e4>
 8001582:	2302      	movs	r3, #2
 8001584:	425b      	negs	r3, r3
 8001586:	469c      	mov	ip, r3
 8001588:	9900      	ldr	r1, [sp, #0]
 800158a:	444f      	add	r7, r9
 800158c:	454f      	cmp	r7, r9
 800158e:	419b      	sbcs	r3, r3
 8001590:	44e3      	add	fp, ip
 8001592:	468c      	mov	ip, r1
 8001594:	425b      	negs	r3, r3
 8001596:	4463      	add	r3, ip
 8001598:	18c0      	adds	r0, r0, r3
 800159a:	e5ff      	b.n	800119c <__aeabi_ddiv+0x1e8>
 800159c:	4649      	mov	r1, r9
 800159e:	9d00      	ldr	r5, [sp, #0]
 80015a0:	0048      	lsls	r0, r1, #1
 80015a2:	4548      	cmp	r0, r9
 80015a4:	4189      	sbcs	r1, r1
 80015a6:	46ac      	mov	ip, r5
 80015a8:	4249      	negs	r1, r1
 80015aa:	4461      	add	r1, ip
 80015ac:	4681      	mov	r9, r0
 80015ae:	3a02      	subs	r2, #2
 80015b0:	1864      	adds	r4, r4, r1
 80015b2:	e7c7      	b.n	8001544 <__aeabi_ddiv+0x590>
 80015b4:	2480      	movs	r4, #128	@ 0x80
 80015b6:	465b      	mov	r3, fp
 80015b8:	0324      	lsls	r4, r4, #12
 80015ba:	431c      	orrs	r4, r3
 80015bc:	0324      	lsls	r4, r4, #12
 80015be:	4690      	mov	r8, r2
 80015c0:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <__aeabi_ddiv+0x620>)
 80015c2:	0b24      	lsrs	r4, r4, #12
 80015c4:	e556      	b.n	8001074 <__aeabi_ddiv+0xc0>
 80015c6:	4599      	cmp	r9, r3
 80015c8:	d3e8      	bcc.n	800159c <__aeabi_ddiv+0x5e8>
 80015ca:	000a      	movs	r2, r1
 80015cc:	e7bd      	b.n	800154a <__aeabi_ddiv+0x596>
 80015ce:	2300      	movs	r3, #0
 80015d0:	e708      	b.n	80013e4 <__aeabi_ddiv+0x430>
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	000007ff 	.word	0x000007ff
 80015d8:	0000043e 	.word	0x0000043e
 80015dc:	0000041e 	.word	0x0000041e
 80015e0:	000003ff 	.word	0x000003ff
 80015e4:	fffffc02 	.word	0xfffffc02

080015e8 <__eqdf2>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	46de      	mov	lr, fp
 80015ee:	464e      	mov	r6, r9
 80015f0:	4645      	mov	r5, r8
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	000d      	movs	r5, r1
 80015f6:	0004      	movs	r4, r0
 80015f8:	0fe8      	lsrs	r0, r5, #31
 80015fa:	4683      	mov	fp, r0
 80015fc:	0309      	lsls	r1, r1, #12
 80015fe:	0fd8      	lsrs	r0, r3, #31
 8001600:	0b09      	lsrs	r1, r1, #12
 8001602:	4682      	mov	sl, r0
 8001604:	4819      	ldr	r0, [pc, #100]	@ (800166c <__eqdf2+0x84>)
 8001606:	468c      	mov	ip, r1
 8001608:	031f      	lsls	r7, r3, #12
 800160a:	0069      	lsls	r1, r5, #1
 800160c:	005e      	lsls	r6, r3, #1
 800160e:	0d49      	lsrs	r1, r1, #21
 8001610:	0b3f      	lsrs	r7, r7, #12
 8001612:	0d76      	lsrs	r6, r6, #21
 8001614:	4281      	cmp	r1, r0
 8001616:	d018      	beq.n	800164a <__eqdf2+0x62>
 8001618:	4286      	cmp	r6, r0
 800161a:	d00f      	beq.n	800163c <__eqdf2+0x54>
 800161c:	2001      	movs	r0, #1
 800161e:	42b1      	cmp	r1, r6
 8001620:	d10d      	bne.n	800163e <__eqdf2+0x56>
 8001622:	45bc      	cmp	ip, r7
 8001624:	d10b      	bne.n	800163e <__eqdf2+0x56>
 8001626:	4294      	cmp	r4, r2
 8001628:	d109      	bne.n	800163e <__eqdf2+0x56>
 800162a:	45d3      	cmp	fp, sl
 800162c:	d01c      	beq.n	8001668 <__eqdf2+0x80>
 800162e:	2900      	cmp	r1, #0
 8001630:	d105      	bne.n	800163e <__eqdf2+0x56>
 8001632:	4660      	mov	r0, ip
 8001634:	4320      	orrs	r0, r4
 8001636:	1e43      	subs	r3, r0, #1
 8001638:	4198      	sbcs	r0, r3
 800163a:	e000      	b.n	800163e <__eqdf2+0x56>
 800163c:	2001      	movs	r0, #1
 800163e:	bcf0      	pop	{r4, r5, r6, r7}
 8001640:	46bb      	mov	fp, r7
 8001642:	46b2      	mov	sl, r6
 8001644:	46a9      	mov	r9, r5
 8001646:	46a0      	mov	r8, r4
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800164a:	2001      	movs	r0, #1
 800164c:	428e      	cmp	r6, r1
 800164e:	d1f6      	bne.n	800163e <__eqdf2+0x56>
 8001650:	4661      	mov	r1, ip
 8001652:	4339      	orrs	r1, r7
 8001654:	000f      	movs	r7, r1
 8001656:	4317      	orrs	r7, r2
 8001658:	4327      	orrs	r7, r4
 800165a:	d1f0      	bne.n	800163e <__eqdf2+0x56>
 800165c:	465b      	mov	r3, fp
 800165e:	4652      	mov	r2, sl
 8001660:	1a98      	subs	r0, r3, r2
 8001662:	1e43      	subs	r3, r0, #1
 8001664:	4198      	sbcs	r0, r3
 8001666:	e7ea      	b.n	800163e <__eqdf2+0x56>
 8001668:	2000      	movs	r0, #0
 800166a:	e7e8      	b.n	800163e <__eqdf2+0x56>
 800166c:	000007ff 	.word	0x000007ff

08001670 <__gedf2>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	4645      	mov	r5, r8
 8001678:	46de      	mov	lr, fp
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	000d      	movs	r5, r1
 800167e:	030f      	lsls	r7, r1, #12
 8001680:	0b39      	lsrs	r1, r7, #12
 8001682:	b083      	sub	sp, #12
 8001684:	0004      	movs	r4, r0
 8001686:	4680      	mov	r8, r0
 8001688:	9101      	str	r1, [sp, #4]
 800168a:	0058      	lsls	r0, r3, #1
 800168c:	0fe9      	lsrs	r1, r5, #31
 800168e:	4f31      	ldr	r7, [pc, #196]	@ (8001754 <__gedf2+0xe4>)
 8001690:	0d40      	lsrs	r0, r0, #21
 8001692:	468c      	mov	ip, r1
 8001694:	006e      	lsls	r6, r5, #1
 8001696:	0319      	lsls	r1, r3, #12
 8001698:	4682      	mov	sl, r0
 800169a:	4691      	mov	r9, r2
 800169c:	0d76      	lsrs	r6, r6, #21
 800169e:	0b09      	lsrs	r1, r1, #12
 80016a0:	0fd8      	lsrs	r0, r3, #31
 80016a2:	42be      	cmp	r6, r7
 80016a4:	d01f      	beq.n	80016e6 <__gedf2+0x76>
 80016a6:	45ba      	cmp	sl, r7
 80016a8:	d00f      	beq.n	80016ca <__gedf2+0x5a>
 80016aa:	2e00      	cmp	r6, #0
 80016ac:	d12f      	bne.n	800170e <__gedf2+0x9e>
 80016ae:	4655      	mov	r5, sl
 80016b0:	9e01      	ldr	r6, [sp, #4]
 80016b2:	4334      	orrs	r4, r6
 80016b4:	2d00      	cmp	r5, #0
 80016b6:	d127      	bne.n	8001708 <__gedf2+0x98>
 80016b8:	430a      	orrs	r2, r1
 80016ba:	d03a      	beq.n	8001732 <__gedf2+0xc2>
 80016bc:	2c00      	cmp	r4, #0
 80016be:	d145      	bne.n	800174c <__gedf2+0xdc>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d11a      	bne.n	80016fa <__gedf2+0x8a>
 80016c4:	2001      	movs	r0, #1
 80016c6:	4240      	negs	r0, r0
 80016c8:	e017      	b.n	80016fa <__gedf2+0x8a>
 80016ca:	4311      	orrs	r1, r2
 80016cc:	d13b      	bne.n	8001746 <__gedf2+0xd6>
 80016ce:	2e00      	cmp	r6, #0
 80016d0:	d102      	bne.n	80016d8 <__gedf2+0x68>
 80016d2:	9f01      	ldr	r7, [sp, #4]
 80016d4:	4327      	orrs	r7, r4
 80016d6:	d0f3      	beq.n	80016c0 <__gedf2+0x50>
 80016d8:	4584      	cmp	ip, r0
 80016da:	d109      	bne.n	80016f0 <__gedf2+0x80>
 80016dc:	4663      	mov	r3, ip
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <__gedf2+0x54>
 80016e2:	4660      	mov	r0, ip
 80016e4:	e009      	b.n	80016fa <__gedf2+0x8a>
 80016e6:	9f01      	ldr	r7, [sp, #4]
 80016e8:	4327      	orrs	r7, r4
 80016ea:	d12c      	bne.n	8001746 <__gedf2+0xd6>
 80016ec:	45b2      	cmp	sl, r6
 80016ee:	d024      	beq.n	800173a <__gedf2+0xca>
 80016f0:	4663      	mov	r3, ip
 80016f2:	2002      	movs	r0, #2
 80016f4:	3b01      	subs	r3, #1
 80016f6:	4018      	ands	r0, r3
 80016f8:	3801      	subs	r0, #1
 80016fa:	b003      	add	sp, #12
 80016fc:	bcf0      	pop	{r4, r5, r6, r7}
 80016fe:	46bb      	mov	fp, r7
 8001700:	46b2      	mov	sl, r6
 8001702:	46a9      	mov	r9, r5
 8001704:	46a0      	mov	r8, r4
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001708:	2c00      	cmp	r4, #0
 800170a:	d0d9      	beq.n	80016c0 <__gedf2+0x50>
 800170c:	e7e4      	b.n	80016d8 <__gedf2+0x68>
 800170e:	4654      	mov	r4, sl
 8001710:	2c00      	cmp	r4, #0
 8001712:	d0ed      	beq.n	80016f0 <__gedf2+0x80>
 8001714:	4584      	cmp	ip, r0
 8001716:	d1eb      	bne.n	80016f0 <__gedf2+0x80>
 8001718:	4556      	cmp	r6, sl
 800171a:	dce9      	bgt.n	80016f0 <__gedf2+0x80>
 800171c:	dbde      	blt.n	80016dc <__gedf2+0x6c>
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	428b      	cmp	r3, r1
 8001722:	d8e5      	bhi.n	80016f0 <__gedf2+0x80>
 8001724:	d1da      	bne.n	80016dc <__gedf2+0x6c>
 8001726:	45c8      	cmp	r8, r9
 8001728:	d8e2      	bhi.n	80016f0 <__gedf2+0x80>
 800172a:	2000      	movs	r0, #0
 800172c:	45c8      	cmp	r8, r9
 800172e:	d2e4      	bcs.n	80016fa <__gedf2+0x8a>
 8001730:	e7d4      	b.n	80016dc <__gedf2+0x6c>
 8001732:	2000      	movs	r0, #0
 8001734:	2c00      	cmp	r4, #0
 8001736:	d0e0      	beq.n	80016fa <__gedf2+0x8a>
 8001738:	e7da      	b.n	80016f0 <__gedf2+0x80>
 800173a:	4311      	orrs	r1, r2
 800173c:	d103      	bne.n	8001746 <__gedf2+0xd6>
 800173e:	4584      	cmp	ip, r0
 8001740:	d1d6      	bne.n	80016f0 <__gedf2+0x80>
 8001742:	2000      	movs	r0, #0
 8001744:	e7d9      	b.n	80016fa <__gedf2+0x8a>
 8001746:	2002      	movs	r0, #2
 8001748:	4240      	negs	r0, r0
 800174a:	e7d6      	b.n	80016fa <__gedf2+0x8a>
 800174c:	4584      	cmp	ip, r0
 800174e:	d0e6      	beq.n	800171e <__gedf2+0xae>
 8001750:	e7ce      	b.n	80016f0 <__gedf2+0x80>
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	000007ff 	.word	0x000007ff

08001758 <__ledf2>:
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	4657      	mov	r7, sl
 800175c:	464e      	mov	r6, r9
 800175e:	4645      	mov	r5, r8
 8001760:	46de      	mov	lr, fp
 8001762:	b5e0      	push	{r5, r6, r7, lr}
 8001764:	000d      	movs	r5, r1
 8001766:	030f      	lsls	r7, r1, #12
 8001768:	0004      	movs	r4, r0
 800176a:	4680      	mov	r8, r0
 800176c:	0fe8      	lsrs	r0, r5, #31
 800176e:	0b39      	lsrs	r1, r7, #12
 8001770:	4684      	mov	ip, r0
 8001772:	b083      	sub	sp, #12
 8001774:	0058      	lsls	r0, r3, #1
 8001776:	4f30      	ldr	r7, [pc, #192]	@ (8001838 <__ledf2+0xe0>)
 8001778:	0d40      	lsrs	r0, r0, #21
 800177a:	9101      	str	r1, [sp, #4]
 800177c:	031e      	lsls	r6, r3, #12
 800177e:	0069      	lsls	r1, r5, #1
 8001780:	4682      	mov	sl, r0
 8001782:	4691      	mov	r9, r2
 8001784:	0d49      	lsrs	r1, r1, #21
 8001786:	0b36      	lsrs	r6, r6, #12
 8001788:	0fd8      	lsrs	r0, r3, #31
 800178a:	42b9      	cmp	r1, r7
 800178c:	d020      	beq.n	80017d0 <__ledf2+0x78>
 800178e:	45ba      	cmp	sl, r7
 8001790:	d00f      	beq.n	80017b2 <__ledf2+0x5a>
 8001792:	2900      	cmp	r1, #0
 8001794:	d12b      	bne.n	80017ee <__ledf2+0x96>
 8001796:	9901      	ldr	r1, [sp, #4]
 8001798:	430c      	orrs	r4, r1
 800179a:	4651      	mov	r1, sl
 800179c:	2900      	cmp	r1, #0
 800179e:	d137      	bne.n	8001810 <__ledf2+0xb8>
 80017a0:	4332      	orrs	r2, r6
 80017a2:	d038      	beq.n	8001816 <__ledf2+0xbe>
 80017a4:	2c00      	cmp	r4, #0
 80017a6:	d144      	bne.n	8001832 <__ledf2+0xda>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d119      	bne.n	80017e0 <__ledf2+0x88>
 80017ac:	2001      	movs	r0, #1
 80017ae:	4240      	negs	r0, r0
 80017b0:	e016      	b.n	80017e0 <__ledf2+0x88>
 80017b2:	4316      	orrs	r6, r2
 80017b4:	d113      	bne.n	80017de <__ledf2+0x86>
 80017b6:	2900      	cmp	r1, #0
 80017b8:	d102      	bne.n	80017c0 <__ledf2+0x68>
 80017ba:	9f01      	ldr	r7, [sp, #4]
 80017bc:	4327      	orrs	r7, r4
 80017be:	d0f3      	beq.n	80017a8 <__ledf2+0x50>
 80017c0:	4584      	cmp	ip, r0
 80017c2:	d020      	beq.n	8001806 <__ledf2+0xae>
 80017c4:	4663      	mov	r3, ip
 80017c6:	2002      	movs	r0, #2
 80017c8:	3b01      	subs	r3, #1
 80017ca:	4018      	ands	r0, r3
 80017cc:	3801      	subs	r0, #1
 80017ce:	e007      	b.n	80017e0 <__ledf2+0x88>
 80017d0:	9f01      	ldr	r7, [sp, #4]
 80017d2:	4327      	orrs	r7, r4
 80017d4:	d103      	bne.n	80017de <__ledf2+0x86>
 80017d6:	458a      	cmp	sl, r1
 80017d8:	d1f4      	bne.n	80017c4 <__ledf2+0x6c>
 80017da:	4316      	orrs	r6, r2
 80017dc:	d01f      	beq.n	800181e <__ledf2+0xc6>
 80017de:	2002      	movs	r0, #2
 80017e0:	b003      	add	sp, #12
 80017e2:	bcf0      	pop	{r4, r5, r6, r7}
 80017e4:	46bb      	mov	fp, r7
 80017e6:	46b2      	mov	sl, r6
 80017e8:	46a9      	mov	r9, r5
 80017ea:	46a0      	mov	r8, r4
 80017ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ee:	4654      	mov	r4, sl
 80017f0:	2c00      	cmp	r4, #0
 80017f2:	d0e7      	beq.n	80017c4 <__ledf2+0x6c>
 80017f4:	4584      	cmp	ip, r0
 80017f6:	d1e5      	bne.n	80017c4 <__ledf2+0x6c>
 80017f8:	4551      	cmp	r1, sl
 80017fa:	dce3      	bgt.n	80017c4 <__ledf2+0x6c>
 80017fc:	db03      	blt.n	8001806 <__ledf2+0xae>
 80017fe:	9b01      	ldr	r3, [sp, #4]
 8001800:	42b3      	cmp	r3, r6
 8001802:	d8df      	bhi.n	80017c4 <__ledf2+0x6c>
 8001804:	d00f      	beq.n	8001826 <__ledf2+0xce>
 8001806:	4663      	mov	r3, ip
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0cf      	beq.n	80017ac <__ledf2+0x54>
 800180c:	4660      	mov	r0, ip
 800180e:	e7e7      	b.n	80017e0 <__ledf2+0x88>
 8001810:	2c00      	cmp	r4, #0
 8001812:	d0c9      	beq.n	80017a8 <__ledf2+0x50>
 8001814:	e7d4      	b.n	80017c0 <__ledf2+0x68>
 8001816:	2000      	movs	r0, #0
 8001818:	2c00      	cmp	r4, #0
 800181a:	d0e1      	beq.n	80017e0 <__ledf2+0x88>
 800181c:	e7d2      	b.n	80017c4 <__ledf2+0x6c>
 800181e:	4584      	cmp	ip, r0
 8001820:	d1d0      	bne.n	80017c4 <__ledf2+0x6c>
 8001822:	2000      	movs	r0, #0
 8001824:	e7dc      	b.n	80017e0 <__ledf2+0x88>
 8001826:	45c8      	cmp	r8, r9
 8001828:	d8cc      	bhi.n	80017c4 <__ledf2+0x6c>
 800182a:	2000      	movs	r0, #0
 800182c:	45c8      	cmp	r8, r9
 800182e:	d2d7      	bcs.n	80017e0 <__ledf2+0x88>
 8001830:	e7e9      	b.n	8001806 <__ledf2+0xae>
 8001832:	4584      	cmp	ip, r0
 8001834:	d0e3      	beq.n	80017fe <__ledf2+0xa6>
 8001836:	e7c5      	b.n	80017c4 <__ledf2+0x6c>
 8001838:	000007ff 	.word	0x000007ff

0800183c <__aeabi_dmul>:
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	4657      	mov	r7, sl
 8001840:	46de      	mov	lr, fp
 8001842:	464e      	mov	r6, r9
 8001844:	4645      	mov	r5, r8
 8001846:	b5e0      	push	{r5, r6, r7, lr}
 8001848:	001f      	movs	r7, r3
 800184a:	030b      	lsls	r3, r1, #12
 800184c:	0b1b      	lsrs	r3, r3, #12
 800184e:	0016      	movs	r6, r2
 8001850:	469a      	mov	sl, r3
 8001852:	0fca      	lsrs	r2, r1, #31
 8001854:	004b      	lsls	r3, r1, #1
 8001856:	0004      	movs	r4, r0
 8001858:	4693      	mov	fp, r2
 800185a:	b087      	sub	sp, #28
 800185c:	0d5b      	lsrs	r3, r3, #21
 800185e:	d100      	bne.n	8001862 <__aeabi_dmul+0x26>
 8001860:	e0d5      	b.n	8001a0e <__aeabi_dmul+0x1d2>
 8001862:	4abb      	ldr	r2, [pc, #748]	@ (8001b50 <__aeabi_dmul+0x314>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d100      	bne.n	800186a <__aeabi_dmul+0x2e>
 8001868:	e0f8      	b.n	8001a5c <__aeabi_dmul+0x220>
 800186a:	4651      	mov	r1, sl
 800186c:	0f42      	lsrs	r2, r0, #29
 800186e:	00c9      	lsls	r1, r1, #3
 8001870:	430a      	orrs	r2, r1
 8001872:	2180      	movs	r1, #128	@ 0x80
 8001874:	0409      	lsls	r1, r1, #16
 8001876:	4311      	orrs	r1, r2
 8001878:	00c2      	lsls	r2, r0, #3
 800187a:	4691      	mov	r9, r2
 800187c:	4ab5      	ldr	r2, [pc, #724]	@ (8001b54 <__aeabi_dmul+0x318>)
 800187e:	468a      	mov	sl, r1
 8001880:	189d      	adds	r5, r3, r2
 8001882:	2300      	movs	r3, #0
 8001884:	4698      	mov	r8, r3
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	033c      	lsls	r4, r7, #12
 800188a:	007b      	lsls	r3, r7, #1
 800188c:	0ffa      	lsrs	r2, r7, #31
 800188e:	0030      	movs	r0, r6
 8001890:	0b24      	lsrs	r4, r4, #12
 8001892:	0d5b      	lsrs	r3, r3, #21
 8001894:	9200      	str	r2, [sp, #0]
 8001896:	d100      	bne.n	800189a <__aeabi_dmul+0x5e>
 8001898:	e096      	b.n	80019c8 <__aeabi_dmul+0x18c>
 800189a:	4aad      	ldr	r2, [pc, #692]	@ (8001b50 <__aeabi_dmul+0x314>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d031      	beq.n	8001904 <__aeabi_dmul+0xc8>
 80018a0:	0f72      	lsrs	r2, r6, #29
 80018a2:	00e4      	lsls	r4, r4, #3
 80018a4:	4322      	orrs	r2, r4
 80018a6:	2480      	movs	r4, #128	@ 0x80
 80018a8:	0424      	lsls	r4, r4, #16
 80018aa:	4314      	orrs	r4, r2
 80018ac:	4aa9      	ldr	r2, [pc, #676]	@ (8001b54 <__aeabi_dmul+0x318>)
 80018ae:	00f0      	lsls	r0, r6, #3
 80018b0:	4694      	mov	ip, r2
 80018b2:	4463      	add	r3, ip
 80018b4:	195b      	adds	r3, r3, r5
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	9201      	str	r2, [sp, #4]
 80018ba:	4642      	mov	r2, r8
 80018bc:	2600      	movs	r6, #0
 80018be:	2a0a      	cmp	r2, #10
 80018c0:	dc42      	bgt.n	8001948 <__aeabi_dmul+0x10c>
 80018c2:	465a      	mov	r2, fp
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	404a      	eors	r2, r1
 80018c8:	4693      	mov	fp, r2
 80018ca:	4642      	mov	r2, r8
 80018cc:	2a02      	cmp	r2, #2
 80018ce:	dc32      	bgt.n	8001936 <__aeabi_dmul+0xfa>
 80018d0:	3a01      	subs	r2, #1
 80018d2:	2a01      	cmp	r2, #1
 80018d4:	d900      	bls.n	80018d8 <__aeabi_dmul+0x9c>
 80018d6:	e149      	b.n	8001b6c <__aeabi_dmul+0x330>
 80018d8:	2e02      	cmp	r6, #2
 80018da:	d100      	bne.n	80018de <__aeabi_dmul+0xa2>
 80018dc:	e0ca      	b.n	8001a74 <__aeabi_dmul+0x238>
 80018de:	2e01      	cmp	r6, #1
 80018e0:	d13d      	bne.n	800195e <__aeabi_dmul+0x122>
 80018e2:	2300      	movs	r3, #0
 80018e4:	2400      	movs	r4, #0
 80018e6:	2200      	movs	r2, #0
 80018e8:	0010      	movs	r0, r2
 80018ea:	465a      	mov	r2, fp
 80018ec:	051b      	lsls	r3, r3, #20
 80018ee:	4323      	orrs	r3, r4
 80018f0:	07d2      	lsls	r2, r2, #31
 80018f2:	4313      	orrs	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	b007      	add	sp, #28
 80018f8:	bcf0      	pop	{r4, r5, r6, r7}
 80018fa:	46bb      	mov	fp, r7
 80018fc:	46b2      	mov	sl, r6
 80018fe:	46a9      	mov	r9, r5
 8001900:	46a0      	mov	r8, r4
 8001902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001904:	4b92      	ldr	r3, [pc, #584]	@ (8001b50 <__aeabi_dmul+0x314>)
 8001906:	4326      	orrs	r6, r4
 8001908:	18eb      	adds	r3, r5, r3
 800190a:	2e00      	cmp	r6, #0
 800190c:	d100      	bne.n	8001910 <__aeabi_dmul+0xd4>
 800190e:	e0bb      	b.n	8001a88 <__aeabi_dmul+0x24c>
 8001910:	2203      	movs	r2, #3
 8001912:	4641      	mov	r1, r8
 8001914:	4311      	orrs	r1, r2
 8001916:	465a      	mov	r2, fp
 8001918:	4688      	mov	r8, r1
 800191a:	9900      	ldr	r1, [sp, #0]
 800191c:	404a      	eors	r2, r1
 800191e:	2180      	movs	r1, #128	@ 0x80
 8001920:	0109      	lsls	r1, r1, #4
 8001922:	468c      	mov	ip, r1
 8001924:	0029      	movs	r1, r5
 8001926:	4461      	add	r1, ip
 8001928:	9101      	str	r1, [sp, #4]
 800192a:	4641      	mov	r1, r8
 800192c:	290a      	cmp	r1, #10
 800192e:	dd00      	ble.n	8001932 <__aeabi_dmul+0xf6>
 8001930:	e233      	b.n	8001d9a <__aeabi_dmul+0x55e>
 8001932:	4693      	mov	fp, r2
 8001934:	2603      	movs	r6, #3
 8001936:	4642      	mov	r2, r8
 8001938:	2701      	movs	r7, #1
 800193a:	4097      	lsls	r7, r2
 800193c:	21a6      	movs	r1, #166	@ 0xa6
 800193e:	003a      	movs	r2, r7
 8001940:	00c9      	lsls	r1, r1, #3
 8001942:	400a      	ands	r2, r1
 8001944:	420f      	tst	r7, r1
 8001946:	d031      	beq.n	80019ac <__aeabi_dmul+0x170>
 8001948:	9e02      	ldr	r6, [sp, #8]
 800194a:	2e02      	cmp	r6, #2
 800194c:	d100      	bne.n	8001950 <__aeabi_dmul+0x114>
 800194e:	e235      	b.n	8001dbc <__aeabi_dmul+0x580>
 8001950:	2e03      	cmp	r6, #3
 8001952:	d100      	bne.n	8001956 <__aeabi_dmul+0x11a>
 8001954:	e1d2      	b.n	8001cfc <__aeabi_dmul+0x4c0>
 8001956:	4654      	mov	r4, sl
 8001958:	4648      	mov	r0, r9
 800195a:	2e01      	cmp	r6, #1
 800195c:	d0c1      	beq.n	80018e2 <__aeabi_dmul+0xa6>
 800195e:	9a01      	ldr	r2, [sp, #4]
 8001960:	4b7d      	ldr	r3, [pc, #500]	@ (8001b58 <__aeabi_dmul+0x31c>)
 8001962:	4694      	mov	ip, r2
 8001964:	4463      	add	r3, ip
 8001966:	2b00      	cmp	r3, #0
 8001968:	dc00      	bgt.n	800196c <__aeabi_dmul+0x130>
 800196a:	e0c0      	b.n	8001aee <__aeabi_dmul+0x2b2>
 800196c:	0742      	lsls	r2, r0, #29
 800196e:	d009      	beq.n	8001984 <__aeabi_dmul+0x148>
 8001970:	220f      	movs	r2, #15
 8001972:	4002      	ands	r2, r0
 8001974:	2a04      	cmp	r2, #4
 8001976:	d005      	beq.n	8001984 <__aeabi_dmul+0x148>
 8001978:	1d02      	adds	r2, r0, #4
 800197a:	4282      	cmp	r2, r0
 800197c:	4180      	sbcs	r0, r0
 800197e:	4240      	negs	r0, r0
 8001980:	1824      	adds	r4, r4, r0
 8001982:	0010      	movs	r0, r2
 8001984:	01e2      	lsls	r2, r4, #7
 8001986:	d506      	bpl.n	8001996 <__aeabi_dmul+0x15a>
 8001988:	4b74      	ldr	r3, [pc, #464]	@ (8001b5c <__aeabi_dmul+0x320>)
 800198a:	9a01      	ldr	r2, [sp, #4]
 800198c:	401c      	ands	r4, r3
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	4694      	mov	ip, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4463      	add	r3, ip
 8001996:	4a72      	ldr	r2, [pc, #456]	@ (8001b60 <__aeabi_dmul+0x324>)
 8001998:	4293      	cmp	r3, r2
 800199a:	dc6b      	bgt.n	8001a74 <__aeabi_dmul+0x238>
 800199c:	0762      	lsls	r2, r4, #29
 800199e:	08c0      	lsrs	r0, r0, #3
 80019a0:	0264      	lsls	r4, r4, #9
 80019a2:	055b      	lsls	r3, r3, #21
 80019a4:	4302      	orrs	r2, r0
 80019a6:	0b24      	lsrs	r4, r4, #12
 80019a8:	0d5b      	lsrs	r3, r3, #21
 80019aa:	e79d      	b.n	80018e8 <__aeabi_dmul+0xac>
 80019ac:	2190      	movs	r1, #144	@ 0x90
 80019ae:	0089      	lsls	r1, r1, #2
 80019b0:	420f      	tst	r7, r1
 80019b2:	d163      	bne.n	8001a7c <__aeabi_dmul+0x240>
 80019b4:	2288      	movs	r2, #136	@ 0x88
 80019b6:	423a      	tst	r2, r7
 80019b8:	d100      	bne.n	80019bc <__aeabi_dmul+0x180>
 80019ba:	e0d7      	b.n	8001b6c <__aeabi_dmul+0x330>
 80019bc:	9b00      	ldr	r3, [sp, #0]
 80019be:	46a2      	mov	sl, r4
 80019c0:	469b      	mov	fp, r3
 80019c2:	4681      	mov	r9, r0
 80019c4:	9602      	str	r6, [sp, #8]
 80019c6:	e7bf      	b.n	8001948 <__aeabi_dmul+0x10c>
 80019c8:	0023      	movs	r3, r4
 80019ca:	4333      	orrs	r3, r6
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dmul+0x194>
 80019ce:	e07f      	b.n	8001ad0 <__aeabi_dmul+0x294>
 80019d0:	2c00      	cmp	r4, #0
 80019d2:	d100      	bne.n	80019d6 <__aeabi_dmul+0x19a>
 80019d4:	e1ad      	b.n	8001d32 <__aeabi_dmul+0x4f6>
 80019d6:	0020      	movs	r0, r4
 80019d8:	f7fe fc60 	bl	800029c <__clzsi2>
 80019dc:	0002      	movs	r2, r0
 80019de:	0003      	movs	r3, r0
 80019e0:	3a0b      	subs	r2, #11
 80019e2:	201d      	movs	r0, #29
 80019e4:	0019      	movs	r1, r3
 80019e6:	1a82      	subs	r2, r0, r2
 80019e8:	0030      	movs	r0, r6
 80019ea:	3908      	subs	r1, #8
 80019ec:	40d0      	lsrs	r0, r2
 80019ee:	408c      	lsls	r4, r1
 80019f0:	4304      	orrs	r4, r0
 80019f2:	0030      	movs	r0, r6
 80019f4:	4088      	lsls	r0, r1
 80019f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001b64 <__aeabi_dmul+0x328>)
 80019f8:	1aeb      	subs	r3, r5, r3
 80019fa:	4694      	mov	ip, r2
 80019fc:	4463      	add	r3, ip
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	9201      	str	r2, [sp, #4]
 8001a02:	4642      	mov	r2, r8
 8001a04:	2600      	movs	r6, #0
 8001a06:	2a0a      	cmp	r2, #10
 8001a08:	dc00      	bgt.n	8001a0c <__aeabi_dmul+0x1d0>
 8001a0a:	e75a      	b.n	80018c2 <__aeabi_dmul+0x86>
 8001a0c:	e79c      	b.n	8001948 <__aeabi_dmul+0x10c>
 8001a0e:	4653      	mov	r3, sl
 8001a10:	4303      	orrs	r3, r0
 8001a12:	4699      	mov	r9, r3
 8001a14:	d054      	beq.n	8001ac0 <__aeabi_dmul+0x284>
 8001a16:	4653      	mov	r3, sl
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dmul+0x1e2>
 8001a1c:	e177      	b.n	8001d0e <__aeabi_dmul+0x4d2>
 8001a1e:	4650      	mov	r0, sl
 8001a20:	f7fe fc3c 	bl	800029c <__clzsi2>
 8001a24:	230b      	movs	r3, #11
 8001a26:	425b      	negs	r3, r3
 8001a28:	469c      	mov	ip, r3
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	4484      	add	ip, r0
 8001a2e:	0011      	movs	r1, r2
 8001a30:	4650      	mov	r0, sl
 8001a32:	3908      	subs	r1, #8
 8001a34:	4088      	lsls	r0, r1
 8001a36:	231d      	movs	r3, #29
 8001a38:	4680      	mov	r8, r0
 8001a3a:	4660      	mov	r0, ip
 8001a3c:	1a1b      	subs	r3, r3, r0
 8001a3e:	0020      	movs	r0, r4
 8001a40:	40d8      	lsrs	r0, r3
 8001a42:	0003      	movs	r3, r0
 8001a44:	4640      	mov	r0, r8
 8001a46:	4303      	orrs	r3, r0
 8001a48:	469a      	mov	sl, r3
 8001a4a:	0023      	movs	r3, r4
 8001a4c:	408b      	lsls	r3, r1
 8001a4e:	4699      	mov	r9, r3
 8001a50:	2300      	movs	r3, #0
 8001a52:	4d44      	ldr	r5, [pc, #272]	@ (8001b64 <__aeabi_dmul+0x328>)
 8001a54:	4698      	mov	r8, r3
 8001a56:	1aad      	subs	r5, r5, r2
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	e715      	b.n	8001888 <__aeabi_dmul+0x4c>
 8001a5c:	4652      	mov	r2, sl
 8001a5e:	4302      	orrs	r2, r0
 8001a60:	4691      	mov	r9, r2
 8001a62:	d126      	bne.n	8001ab2 <__aeabi_dmul+0x276>
 8001a64:	2200      	movs	r2, #0
 8001a66:	001d      	movs	r5, r3
 8001a68:	2302      	movs	r3, #2
 8001a6a:	4692      	mov	sl, r2
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	4690      	mov	r8, r2
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	e709      	b.n	8001888 <__aeabi_dmul+0x4c>
 8001a74:	2400      	movs	r4, #0
 8001a76:	2200      	movs	r2, #0
 8001a78:	4b35      	ldr	r3, [pc, #212]	@ (8001b50 <__aeabi_dmul+0x314>)
 8001a7a:	e735      	b.n	80018e8 <__aeabi_dmul+0xac>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2480      	movs	r4, #128	@ 0x80
 8001a80:	469b      	mov	fp, r3
 8001a82:	0324      	lsls	r4, r4, #12
 8001a84:	4b32      	ldr	r3, [pc, #200]	@ (8001b50 <__aeabi_dmul+0x314>)
 8001a86:	e72f      	b.n	80018e8 <__aeabi_dmul+0xac>
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	4311      	orrs	r1, r2
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	4694      	mov	ip, r2
 8001a94:	002a      	movs	r2, r5
 8001a96:	4462      	add	r2, ip
 8001a98:	4688      	mov	r8, r1
 8001a9a:	9201      	str	r2, [sp, #4]
 8001a9c:	290a      	cmp	r1, #10
 8001a9e:	dd00      	ble.n	8001aa2 <__aeabi_dmul+0x266>
 8001aa0:	e752      	b.n	8001948 <__aeabi_dmul+0x10c>
 8001aa2:	465a      	mov	r2, fp
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	9900      	ldr	r1, [sp, #0]
 8001aa8:	0004      	movs	r4, r0
 8001aaa:	404a      	eors	r2, r1
 8001aac:	4693      	mov	fp, r2
 8001aae:	2602      	movs	r6, #2
 8001ab0:	e70b      	b.n	80018ca <__aeabi_dmul+0x8e>
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	001d      	movs	r5, r3
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	4681      	mov	r9, r0
 8001aba:	4690      	mov	r8, r2
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	e6e3      	b.n	8001888 <__aeabi_dmul+0x4c>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	469a      	mov	sl, r3
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	4698      	mov	r8, r3
 8001ac8:	3b03      	subs	r3, #3
 8001aca:	2500      	movs	r5, #0
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	e6db      	b.n	8001888 <__aeabi_dmul+0x4c>
 8001ad0:	4642      	mov	r2, r8
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	4690      	mov	r8, r2
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	9201      	str	r2, [sp, #4]
 8001ade:	4642      	mov	r2, r8
 8001ae0:	2400      	movs	r4, #0
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	2601      	movs	r6, #1
 8001ae6:	2a0a      	cmp	r2, #10
 8001ae8:	dc00      	bgt.n	8001aec <__aeabi_dmul+0x2b0>
 8001aea:	e6ea      	b.n	80018c2 <__aeabi_dmul+0x86>
 8001aec:	e72c      	b.n	8001948 <__aeabi_dmul+0x10c>
 8001aee:	2201      	movs	r2, #1
 8001af0:	1ad2      	subs	r2, r2, r3
 8001af2:	2a38      	cmp	r2, #56	@ 0x38
 8001af4:	dd00      	ble.n	8001af8 <__aeabi_dmul+0x2bc>
 8001af6:	e6f4      	b.n	80018e2 <__aeabi_dmul+0xa6>
 8001af8:	2a1f      	cmp	r2, #31
 8001afa:	dc00      	bgt.n	8001afe <__aeabi_dmul+0x2c2>
 8001afc:	e12a      	b.n	8001d54 <__aeabi_dmul+0x518>
 8001afe:	211f      	movs	r1, #31
 8001b00:	4249      	negs	r1, r1
 8001b02:	1acb      	subs	r3, r1, r3
 8001b04:	0021      	movs	r1, r4
 8001b06:	40d9      	lsrs	r1, r3
 8001b08:	000b      	movs	r3, r1
 8001b0a:	2a20      	cmp	r2, #32
 8001b0c:	d005      	beq.n	8001b1a <__aeabi_dmul+0x2de>
 8001b0e:	4a16      	ldr	r2, [pc, #88]	@ (8001b68 <__aeabi_dmul+0x32c>)
 8001b10:	9d01      	ldr	r5, [sp, #4]
 8001b12:	4694      	mov	ip, r2
 8001b14:	4465      	add	r5, ip
 8001b16:	40ac      	lsls	r4, r5
 8001b18:	4320      	orrs	r0, r4
 8001b1a:	1e42      	subs	r2, r0, #1
 8001b1c:	4190      	sbcs	r0, r2
 8001b1e:	4318      	orrs	r0, r3
 8001b20:	2307      	movs	r3, #7
 8001b22:	0019      	movs	r1, r3
 8001b24:	2400      	movs	r4, #0
 8001b26:	4001      	ands	r1, r0
 8001b28:	4203      	tst	r3, r0
 8001b2a:	d00c      	beq.n	8001b46 <__aeabi_dmul+0x30a>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4003      	ands	r3, r0
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_dmul+0x2fa>
 8001b34:	e140      	b.n	8001db8 <__aeabi_dmul+0x57c>
 8001b36:	1d03      	adds	r3, r0, #4
 8001b38:	4283      	cmp	r3, r0
 8001b3a:	41a4      	sbcs	r4, r4
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	4264      	negs	r4, r4
 8001b40:	0761      	lsls	r1, r4, #29
 8001b42:	0264      	lsls	r4, r4, #9
 8001b44:	0b24      	lsrs	r4, r4, #12
 8001b46:	08c2      	lsrs	r2, r0, #3
 8001b48:	2300      	movs	r3, #0
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	e6cc      	b.n	80018e8 <__aeabi_dmul+0xac>
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	000007ff 	.word	0x000007ff
 8001b54:	fffffc01 	.word	0xfffffc01
 8001b58:	000003ff 	.word	0x000003ff
 8001b5c:	feffffff 	.word	0xfeffffff
 8001b60:	000007fe 	.word	0x000007fe
 8001b64:	fffffc0d 	.word	0xfffffc0d
 8001b68:	0000043e 	.word	0x0000043e
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	464a      	mov	r2, r9
 8001b70:	0409      	lsls	r1, r1, #16
 8001b72:	0c09      	lsrs	r1, r1, #16
 8001b74:	000d      	movs	r5, r1
 8001b76:	0c16      	lsrs	r6, r2, #16
 8001b78:	0c02      	lsrs	r2, r0, #16
 8001b7a:	0400      	lsls	r0, r0, #16
 8001b7c:	0c00      	lsrs	r0, r0, #16
 8001b7e:	4345      	muls	r5, r0
 8001b80:	46ac      	mov	ip, r5
 8001b82:	0005      	movs	r5, r0
 8001b84:	4375      	muls	r5, r6
 8001b86:	46a8      	mov	r8, r5
 8001b88:	0015      	movs	r5, r2
 8001b8a:	000f      	movs	r7, r1
 8001b8c:	4375      	muls	r5, r6
 8001b8e:	9200      	str	r2, [sp, #0]
 8001b90:	9502      	str	r5, [sp, #8]
 8001b92:	002a      	movs	r2, r5
 8001b94:	9d00      	ldr	r5, [sp, #0]
 8001b96:	436f      	muls	r7, r5
 8001b98:	4665      	mov	r5, ip
 8001b9a:	0c2d      	lsrs	r5, r5, #16
 8001b9c:	46a9      	mov	r9, r5
 8001b9e:	4447      	add	r7, r8
 8001ba0:	444f      	add	r7, r9
 8001ba2:	45b8      	cmp	r8, r7
 8001ba4:	d905      	bls.n	8001bb2 <__aeabi_dmul+0x376>
 8001ba6:	0015      	movs	r5, r2
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	0252      	lsls	r2, r2, #9
 8001bac:	4690      	mov	r8, r2
 8001bae:	4445      	add	r5, r8
 8001bb0:	9502      	str	r5, [sp, #8]
 8001bb2:	0c3d      	lsrs	r5, r7, #16
 8001bb4:	9503      	str	r5, [sp, #12]
 8001bb6:	4665      	mov	r5, ip
 8001bb8:	042d      	lsls	r5, r5, #16
 8001bba:	043f      	lsls	r7, r7, #16
 8001bbc:	0c2d      	lsrs	r5, r5, #16
 8001bbe:	46ac      	mov	ip, r5
 8001bc0:	003d      	movs	r5, r7
 8001bc2:	4465      	add	r5, ip
 8001bc4:	9504      	str	r5, [sp, #16]
 8001bc6:	0c25      	lsrs	r5, r4, #16
 8001bc8:	0424      	lsls	r4, r4, #16
 8001bca:	0c24      	lsrs	r4, r4, #16
 8001bcc:	46ac      	mov	ip, r5
 8001bce:	0025      	movs	r5, r4
 8001bd0:	4375      	muls	r5, r6
 8001bd2:	46a8      	mov	r8, r5
 8001bd4:	4665      	mov	r5, ip
 8001bd6:	000f      	movs	r7, r1
 8001bd8:	4369      	muls	r1, r5
 8001bda:	4441      	add	r1, r8
 8001bdc:	4689      	mov	r9, r1
 8001bde:	4367      	muls	r7, r4
 8001be0:	0c39      	lsrs	r1, r7, #16
 8001be2:	4449      	add	r1, r9
 8001be4:	436e      	muls	r6, r5
 8001be6:	4588      	cmp	r8, r1
 8001be8:	d903      	bls.n	8001bf2 <__aeabi_dmul+0x3b6>
 8001bea:	2280      	movs	r2, #128	@ 0x80
 8001bec:	0252      	lsls	r2, r2, #9
 8001bee:	4690      	mov	r8, r2
 8001bf0:	4446      	add	r6, r8
 8001bf2:	0c0d      	lsrs	r5, r1, #16
 8001bf4:	46a8      	mov	r8, r5
 8001bf6:	0035      	movs	r5, r6
 8001bf8:	4445      	add	r5, r8
 8001bfa:	9505      	str	r5, [sp, #20]
 8001bfc:	9d03      	ldr	r5, [sp, #12]
 8001bfe:	043f      	lsls	r7, r7, #16
 8001c00:	46a8      	mov	r8, r5
 8001c02:	0c3f      	lsrs	r7, r7, #16
 8001c04:	0409      	lsls	r1, r1, #16
 8001c06:	19c9      	adds	r1, r1, r7
 8001c08:	4488      	add	r8, r1
 8001c0a:	4645      	mov	r5, r8
 8001c0c:	9503      	str	r5, [sp, #12]
 8001c0e:	4655      	mov	r5, sl
 8001c10:	042e      	lsls	r6, r5, #16
 8001c12:	0c36      	lsrs	r6, r6, #16
 8001c14:	0c2f      	lsrs	r7, r5, #16
 8001c16:	0035      	movs	r5, r6
 8001c18:	4345      	muls	r5, r0
 8001c1a:	4378      	muls	r0, r7
 8001c1c:	4681      	mov	r9, r0
 8001c1e:	0038      	movs	r0, r7
 8001c20:	46a8      	mov	r8, r5
 8001c22:	0c2d      	lsrs	r5, r5, #16
 8001c24:	46aa      	mov	sl, r5
 8001c26:	9a00      	ldr	r2, [sp, #0]
 8001c28:	4350      	muls	r0, r2
 8001c2a:	4372      	muls	r2, r6
 8001c2c:	444a      	add	r2, r9
 8001c2e:	4452      	add	r2, sl
 8001c30:	4591      	cmp	r9, r2
 8001c32:	d903      	bls.n	8001c3c <__aeabi_dmul+0x400>
 8001c34:	2580      	movs	r5, #128	@ 0x80
 8001c36:	026d      	lsls	r5, r5, #9
 8001c38:	46a9      	mov	r9, r5
 8001c3a:	4448      	add	r0, r9
 8001c3c:	0c15      	lsrs	r5, r2, #16
 8001c3e:	46a9      	mov	r9, r5
 8001c40:	4645      	mov	r5, r8
 8001c42:	042d      	lsls	r5, r5, #16
 8001c44:	0c2d      	lsrs	r5, r5, #16
 8001c46:	46a8      	mov	r8, r5
 8001c48:	4665      	mov	r5, ip
 8001c4a:	437d      	muls	r5, r7
 8001c4c:	0412      	lsls	r2, r2, #16
 8001c4e:	4448      	add	r0, r9
 8001c50:	4490      	add	r8, r2
 8001c52:	46a9      	mov	r9, r5
 8001c54:	0032      	movs	r2, r6
 8001c56:	4665      	mov	r5, ip
 8001c58:	4362      	muls	r2, r4
 8001c5a:	436e      	muls	r6, r5
 8001c5c:	437c      	muls	r4, r7
 8001c5e:	0c17      	lsrs	r7, r2, #16
 8001c60:	1936      	adds	r6, r6, r4
 8001c62:	19bf      	adds	r7, r7, r6
 8001c64:	42bc      	cmp	r4, r7
 8001c66:	d903      	bls.n	8001c70 <__aeabi_dmul+0x434>
 8001c68:	2480      	movs	r4, #128	@ 0x80
 8001c6a:	0264      	lsls	r4, r4, #9
 8001c6c:	46a4      	mov	ip, r4
 8001c6e:	44e1      	add	r9, ip
 8001c70:	9c02      	ldr	r4, [sp, #8]
 8001c72:	9e03      	ldr	r6, [sp, #12]
 8001c74:	46a4      	mov	ip, r4
 8001c76:	9d05      	ldr	r5, [sp, #20]
 8001c78:	4466      	add	r6, ip
 8001c7a:	428e      	cmp	r6, r1
 8001c7c:	4189      	sbcs	r1, r1
 8001c7e:	46ac      	mov	ip, r5
 8001c80:	0412      	lsls	r2, r2, #16
 8001c82:	043c      	lsls	r4, r7, #16
 8001c84:	0c12      	lsrs	r2, r2, #16
 8001c86:	18a2      	adds	r2, r4, r2
 8001c88:	4462      	add	r2, ip
 8001c8a:	4249      	negs	r1, r1
 8001c8c:	1854      	adds	r4, r2, r1
 8001c8e:	4446      	add	r6, r8
 8001c90:	46a4      	mov	ip, r4
 8001c92:	4546      	cmp	r6, r8
 8001c94:	41a4      	sbcs	r4, r4
 8001c96:	4682      	mov	sl, r0
 8001c98:	4264      	negs	r4, r4
 8001c9a:	46a0      	mov	r8, r4
 8001c9c:	42aa      	cmp	r2, r5
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	458c      	cmp	ip, r1
 8001ca2:	4189      	sbcs	r1, r1
 8001ca4:	44e2      	add	sl, ip
 8001ca6:	44d0      	add	r8, sl
 8001ca8:	4249      	negs	r1, r1
 8001caa:	4252      	negs	r2, r2
 8001cac:	430a      	orrs	r2, r1
 8001cae:	45a0      	cmp	r8, r4
 8001cb0:	41a4      	sbcs	r4, r4
 8001cb2:	4582      	cmp	sl, r0
 8001cb4:	4189      	sbcs	r1, r1
 8001cb6:	4264      	negs	r4, r4
 8001cb8:	4249      	negs	r1, r1
 8001cba:	430c      	orrs	r4, r1
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	0c3f      	lsrs	r7, r7, #16
 8001cc0:	19d2      	adds	r2, r2, r7
 8001cc2:	1912      	adds	r2, r2, r4
 8001cc4:	0dcc      	lsrs	r4, r1, #23
 8001cc6:	9904      	ldr	r1, [sp, #16]
 8001cc8:	0270      	lsls	r0, r6, #9
 8001cca:	4308      	orrs	r0, r1
 8001ccc:	1e41      	subs	r1, r0, #1
 8001cce:	4188      	sbcs	r0, r1
 8001cd0:	4641      	mov	r1, r8
 8001cd2:	444a      	add	r2, r9
 8001cd4:	0df6      	lsrs	r6, r6, #23
 8001cd6:	0252      	lsls	r2, r2, #9
 8001cd8:	4330      	orrs	r0, r6
 8001cda:	0249      	lsls	r1, r1, #9
 8001cdc:	4314      	orrs	r4, r2
 8001cde:	4308      	orrs	r0, r1
 8001ce0:	01d2      	lsls	r2, r2, #7
 8001ce2:	d535      	bpl.n	8001d50 <__aeabi_dmul+0x514>
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	0843      	lsrs	r3, r0, #1
 8001ce8:	4002      	ands	r2, r0
 8001cea:	4313      	orrs	r3, r2
 8001cec:	07e0      	lsls	r0, r4, #31
 8001cee:	4318      	orrs	r0, r3
 8001cf0:	0864      	lsrs	r4, r4, #1
 8001cf2:	e634      	b.n	800195e <__aeabi_dmul+0x122>
 8001cf4:	9b00      	ldr	r3, [sp, #0]
 8001cf6:	46a2      	mov	sl, r4
 8001cf8:	469b      	mov	fp, r3
 8001cfa:	4681      	mov	r9, r0
 8001cfc:	2480      	movs	r4, #128	@ 0x80
 8001cfe:	4653      	mov	r3, sl
 8001d00:	0324      	lsls	r4, r4, #12
 8001d02:	431c      	orrs	r4, r3
 8001d04:	0324      	lsls	r4, r4, #12
 8001d06:	464a      	mov	r2, r9
 8001d08:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc4 <__aeabi_dmul+0x588>)
 8001d0a:	0b24      	lsrs	r4, r4, #12
 8001d0c:	e5ec      	b.n	80018e8 <__aeabi_dmul+0xac>
 8001d0e:	f7fe fac5 	bl	800029c <__clzsi2>
 8001d12:	2315      	movs	r3, #21
 8001d14:	469c      	mov	ip, r3
 8001d16:	4484      	add	ip, r0
 8001d18:	0002      	movs	r2, r0
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	3220      	adds	r2, #32
 8001d1e:	2b1c      	cmp	r3, #28
 8001d20:	dc00      	bgt.n	8001d24 <__aeabi_dmul+0x4e8>
 8001d22:	e684      	b.n	8001a2e <__aeabi_dmul+0x1f2>
 8001d24:	2300      	movs	r3, #0
 8001d26:	4699      	mov	r9, r3
 8001d28:	0023      	movs	r3, r4
 8001d2a:	3808      	subs	r0, #8
 8001d2c:	4083      	lsls	r3, r0
 8001d2e:	469a      	mov	sl, r3
 8001d30:	e68e      	b.n	8001a50 <__aeabi_dmul+0x214>
 8001d32:	f7fe fab3 	bl	800029c <__clzsi2>
 8001d36:	0002      	movs	r2, r0
 8001d38:	0003      	movs	r3, r0
 8001d3a:	3215      	adds	r2, #21
 8001d3c:	3320      	adds	r3, #32
 8001d3e:	2a1c      	cmp	r2, #28
 8001d40:	dc00      	bgt.n	8001d44 <__aeabi_dmul+0x508>
 8001d42:	e64e      	b.n	80019e2 <__aeabi_dmul+0x1a6>
 8001d44:	0002      	movs	r2, r0
 8001d46:	0034      	movs	r4, r6
 8001d48:	3a08      	subs	r2, #8
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	4094      	lsls	r4, r2
 8001d4e:	e652      	b.n	80019f6 <__aeabi_dmul+0x1ba>
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	e604      	b.n	800195e <__aeabi_dmul+0x122>
 8001d54:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <__aeabi_dmul+0x58c>)
 8001d56:	0021      	movs	r1, r4
 8001d58:	469c      	mov	ip, r3
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	9d01      	ldr	r5, [sp, #4]
 8001d5e:	40d3      	lsrs	r3, r2
 8001d60:	4465      	add	r5, ip
 8001d62:	40a9      	lsls	r1, r5
 8001d64:	4319      	orrs	r1, r3
 8001d66:	0003      	movs	r3, r0
 8001d68:	40ab      	lsls	r3, r5
 8001d6a:	1e58      	subs	r0, r3, #1
 8001d6c:	4183      	sbcs	r3, r0
 8001d6e:	4319      	orrs	r1, r3
 8001d70:	0008      	movs	r0, r1
 8001d72:	40d4      	lsrs	r4, r2
 8001d74:	074b      	lsls	r3, r1, #29
 8001d76:	d009      	beq.n	8001d8c <__aeabi_dmul+0x550>
 8001d78:	230f      	movs	r3, #15
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d005      	beq.n	8001d8c <__aeabi_dmul+0x550>
 8001d80:	1d0b      	adds	r3, r1, #4
 8001d82:	428b      	cmp	r3, r1
 8001d84:	4180      	sbcs	r0, r0
 8001d86:	4240      	negs	r0, r0
 8001d88:	1824      	adds	r4, r4, r0
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	0223      	lsls	r3, r4, #8
 8001d8e:	d400      	bmi.n	8001d92 <__aeabi_dmul+0x556>
 8001d90:	e6d6      	b.n	8001b40 <__aeabi_dmul+0x304>
 8001d92:	2301      	movs	r3, #1
 8001d94:	2400      	movs	r4, #0
 8001d96:	2200      	movs	r2, #0
 8001d98:	e5a6      	b.n	80018e8 <__aeabi_dmul+0xac>
 8001d9a:	290f      	cmp	r1, #15
 8001d9c:	d1aa      	bne.n	8001cf4 <__aeabi_dmul+0x4b8>
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	4652      	mov	r2, sl
 8001da2:	031b      	lsls	r3, r3, #12
 8001da4:	421a      	tst	r2, r3
 8001da6:	d0a9      	beq.n	8001cfc <__aeabi_dmul+0x4c0>
 8001da8:	421c      	tst	r4, r3
 8001daa:	d1a7      	bne.n	8001cfc <__aeabi_dmul+0x4c0>
 8001dac:	431c      	orrs	r4, r3
 8001dae:	9b00      	ldr	r3, [sp, #0]
 8001db0:	0002      	movs	r2, r0
 8001db2:	469b      	mov	fp, r3
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <__aeabi_dmul+0x588>)
 8001db6:	e597      	b.n	80018e8 <__aeabi_dmul+0xac>
 8001db8:	2400      	movs	r4, #0
 8001dba:	e6c1      	b.n	8001b40 <__aeabi_dmul+0x304>
 8001dbc:	2400      	movs	r4, #0
 8001dbe:	4b01      	ldr	r3, [pc, #4]	@ (8001dc4 <__aeabi_dmul+0x588>)
 8001dc0:	0022      	movs	r2, r4
 8001dc2:	e591      	b.n	80018e8 <__aeabi_dmul+0xac>
 8001dc4:	000007ff 	.word	0x000007ff
 8001dc8:	0000041e 	.word	0x0000041e

08001dcc <__aeabi_dsub>:
 8001dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dce:	464e      	mov	r6, r9
 8001dd0:	4645      	mov	r5, r8
 8001dd2:	46de      	mov	lr, fp
 8001dd4:	4657      	mov	r7, sl
 8001dd6:	b5e0      	push	{r5, r6, r7, lr}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	9000      	str	r0, [sp, #0]
 8001ddc:	9101      	str	r1, [sp, #4]
 8001dde:	030c      	lsls	r4, r1, #12
 8001de0:	004f      	lsls	r7, r1, #1
 8001de2:	0fce      	lsrs	r6, r1, #31
 8001de4:	0a61      	lsrs	r1, r4, #9
 8001de6:	9c00      	ldr	r4, [sp, #0]
 8001de8:	46b0      	mov	r8, r6
 8001dea:	0f64      	lsrs	r4, r4, #29
 8001dec:	430c      	orrs	r4, r1
 8001dee:	9900      	ldr	r1, [sp, #0]
 8001df0:	0d7f      	lsrs	r7, r7, #21
 8001df2:	00c8      	lsls	r0, r1, #3
 8001df4:	0011      	movs	r1, r2
 8001df6:	001a      	movs	r2, r3
 8001df8:	031b      	lsls	r3, r3, #12
 8001dfa:	469c      	mov	ip, r3
 8001dfc:	9100      	str	r1, [sp, #0]
 8001dfe:	9201      	str	r2, [sp, #4]
 8001e00:	0051      	lsls	r1, r2, #1
 8001e02:	0d4b      	lsrs	r3, r1, #21
 8001e04:	4699      	mov	r9, r3
 8001e06:	9b01      	ldr	r3, [sp, #4]
 8001e08:	9d00      	ldr	r5, [sp, #0]
 8001e0a:	0fd9      	lsrs	r1, r3, #31
 8001e0c:	4663      	mov	r3, ip
 8001e0e:	0f6a      	lsrs	r2, r5, #29
 8001e10:	0a5b      	lsrs	r3, r3, #9
 8001e12:	4313      	orrs	r3, r2
 8001e14:	00ea      	lsls	r2, r5, #3
 8001e16:	4694      	mov	ip, r2
 8001e18:	4693      	mov	fp, r2
 8001e1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002120 <__aeabi_dsub+0x354>)
 8001e1c:	9003      	str	r0, [sp, #12]
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	4591      	cmp	r9, r2
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x5a>
 8001e24:	e0cd      	b.n	8001fc2 <__aeabi_dsub+0x1f6>
 8001e26:	2501      	movs	r5, #1
 8001e28:	4069      	eors	r1, r5
 8001e2a:	464d      	mov	r5, r9
 8001e2c:	1b7d      	subs	r5, r7, r5
 8001e2e:	46aa      	mov	sl, r5
 8001e30:	428e      	cmp	r6, r1
 8001e32:	d100      	bne.n	8001e36 <__aeabi_dsub+0x6a>
 8001e34:	e080      	b.n	8001f38 <__aeabi_dsub+0x16c>
 8001e36:	2d00      	cmp	r5, #0
 8001e38:	dc00      	bgt.n	8001e3c <__aeabi_dsub+0x70>
 8001e3a:	e335      	b.n	80024a8 <__aeabi_dsub+0x6dc>
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	2900      	cmp	r1, #0
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x78>
 8001e42:	e0df      	b.n	8002004 <__aeabi_dsub+0x238>
 8001e44:	4297      	cmp	r7, r2
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x7e>
 8001e48:	e194      	b.n	8002174 <__aeabi_dsub+0x3a8>
 8001e4a:	4652      	mov	r2, sl
 8001e4c:	2501      	movs	r5, #1
 8001e4e:	2a38      	cmp	r2, #56	@ 0x38
 8001e50:	dc19      	bgt.n	8001e86 <__aeabi_dsub+0xba>
 8001e52:	2280      	movs	r2, #128	@ 0x80
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	0412      	lsls	r2, r2, #16
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	4652      	mov	r2, sl
 8001e5e:	2a1f      	cmp	r2, #31
 8001e60:	dd00      	ble.n	8001e64 <__aeabi_dsub+0x98>
 8001e62:	e1e3      	b.n	800222c <__aeabi_dsub+0x460>
 8001e64:	4653      	mov	r3, sl
 8001e66:	2220      	movs	r2, #32
 8001e68:	4661      	mov	r1, ip
 8001e6a:	9d02      	ldr	r5, [sp, #8]
 8001e6c:	1ad2      	subs	r2, r2, r3
 8001e6e:	4095      	lsls	r5, r2
 8001e70:	40d9      	lsrs	r1, r3
 8001e72:	430d      	orrs	r5, r1
 8001e74:	4661      	mov	r1, ip
 8001e76:	4091      	lsls	r1, r2
 8001e78:	000a      	movs	r2, r1
 8001e7a:	1e51      	subs	r1, r2, #1
 8001e7c:	418a      	sbcs	r2, r1
 8001e7e:	4315      	orrs	r5, r2
 8001e80:	9a02      	ldr	r2, [sp, #8]
 8001e82:	40da      	lsrs	r2, r3
 8001e84:	1aa4      	subs	r4, r4, r2
 8001e86:	1b45      	subs	r5, r0, r5
 8001e88:	42a8      	cmp	r0, r5
 8001e8a:	4180      	sbcs	r0, r0
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a24      	subs	r4, r4, r0
 8001e90:	0223      	lsls	r3, r4, #8
 8001e92:	d400      	bmi.n	8001e96 <__aeabi_dsub+0xca>
 8001e94:	e13d      	b.n	8002112 <__aeabi_dsub+0x346>
 8001e96:	0264      	lsls	r4, r4, #9
 8001e98:	0a64      	lsrs	r4, r4, #9
 8001e9a:	2c00      	cmp	r4, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0xd4>
 8001e9e:	e147      	b.n	8002130 <__aeabi_dsub+0x364>
 8001ea0:	0020      	movs	r0, r4
 8001ea2:	f7fe f9fb 	bl	800029c <__clzsi2>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	3b08      	subs	r3, #8
 8001eaa:	2120      	movs	r1, #32
 8001eac:	0028      	movs	r0, r5
 8001eae:	1aca      	subs	r2, r1, r3
 8001eb0:	40d0      	lsrs	r0, r2
 8001eb2:	409c      	lsls	r4, r3
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	409d      	lsls	r5, r3
 8001eb8:	4322      	orrs	r2, r4
 8001eba:	429f      	cmp	r7, r3
 8001ebc:	dd00      	ble.n	8001ec0 <__aeabi_dsub+0xf4>
 8001ebe:	e177      	b.n	80021b0 <__aeabi_dsub+0x3e4>
 8001ec0:	1bd8      	subs	r0, r3, r7
 8001ec2:	3001      	adds	r0, #1
 8001ec4:	1a09      	subs	r1, r1, r0
 8001ec6:	002c      	movs	r4, r5
 8001ec8:	408d      	lsls	r5, r1
 8001eca:	40c4      	lsrs	r4, r0
 8001ecc:	1e6b      	subs	r3, r5, #1
 8001ece:	419d      	sbcs	r5, r3
 8001ed0:	0013      	movs	r3, r2
 8001ed2:	40c2      	lsrs	r2, r0
 8001ed4:	408b      	lsls	r3, r1
 8001ed6:	4325      	orrs	r5, r4
 8001ed8:	2700      	movs	r7, #0
 8001eda:	0014      	movs	r4, r2
 8001edc:	431d      	orrs	r5, r3
 8001ede:	076b      	lsls	r3, r5, #29
 8001ee0:	d009      	beq.n	8001ef6 <__aeabi_dsub+0x12a>
 8001ee2:	230f      	movs	r3, #15
 8001ee4:	402b      	ands	r3, r5
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d005      	beq.n	8001ef6 <__aeabi_dsub+0x12a>
 8001eea:	1d2b      	adds	r3, r5, #4
 8001eec:	42ab      	cmp	r3, r5
 8001eee:	41ad      	sbcs	r5, r5
 8001ef0:	426d      	negs	r5, r5
 8001ef2:	1964      	adds	r4, r4, r5
 8001ef4:	001d      	movs	r5, r3
 8001ef6:	0223      	lsls	r3, r4, #8
 8001ef8:	d400      	bmi.n	8001efc <__aeabi_dsub+0x130>
 8001efa:	e140      	b.n	800217e <__aeabi_dsub+0x3b2>
 8001efc:	4a88      	ldr	r2, [pc, #544]	@ (8002120 <__aeabi_dsub+0x354>)
 8001efe:	3701      	adds	r7, #1
 8001f00:	4297      	cmp	r7, r2
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x13a>
 8001f04:	e101      	b.n	800210a <__aeabi_dsub+0x33e>
 8001f06:	2601      	movs	r6, #1
 8001f08:	4643      	mov	r3, r8
 8001f0a:	4986      	ldr	r1, [pc, #536]	@ (8002124 <__aeabi_dsub+0x358>)
 8001f0c:	08ed      	lsrs	r5, r5, #3
 8001f0e:	4021      	ands	r1, r4
 8001f10:	074a      	lsls	r2, r1, #29
 8001f12:	432a      	orrs	r2, r5
 8001f14:	057c      	lsls	r4, r7, #21
 8001f16:	024d      	lsls	r5, r1, #9
 8001f18:	0b2d      	lsrs	r5, r5, #12
 8001f1a:	0d64      	lsrs	r4, r4, #21
 8001f1c:	401e      	ands	r6, r3
 8001f1e:	0524      	lsls	r4, r4, #20
 8001f20:	432c      	orrs	r4, r5
 8001f22:	07f6      	lsls	r6, r6, #31
 8001f24:	4334      	orrs	r4, r6
 8001f26:	0010      	movs	r0, r2
 8001f28:	0021      	movs	r1, r4
 8001f2a:	b005      	add	sp, #20
 8001f2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f2e:	46bb      	mov	fp, r7
 8001f30:	46b2      	mov	sl, r6
 8001f32:	46a9      	mov	r9, r5
 8001f34:	46a0      	mov	r8, r4
 8001f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f38:	2d00      	cmp	r5, #0
 8001f3a:	dc00      	bgt.n	8001f3e <__aeabi_dsub+0x172>
 8001f3c:	e2d0      	b.n	80024e0 <__aeabi_dsub+0x714>
 8001f3e:	4649      	mov	r1, r9
 8001f40:	2900      	cmp	r1, #0
 8001f42:	d000      	beq.n	8001f46 <__aeabi_dsub+0x17a>
 8001f44:	e0d4      	b.n	80020f0 <__aeabi_dsub+0x324>
 8001f46:	4661      	mov	r1, ip
 8001f48:	9b02      	ldr	r3, [sp, #8]
 8001f4a:	4319      	orrs	r1, r3
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x184>
 8001f4e:	e12b      	b.n	80021a8 <__aeabi_dsub+0x3dc>
 8001f50:	1e69      	subs	r1, r5, #1
 8001f52:	2d01      	cmp	r5, #1
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x18c>
 8001f56:	e1d9      	b.n	800230c <__aeabi_dsub+0x540>
 8001f58:	4295      	cmp	r5, r2
 8001f5a:	d100      	bne.n	8001f5e <__aeabi_dsub+0x192>
 8001f5c:	e10a      	b.n	8002174 <__aeabi_dsub+0x3a8>
 8001f5e:	2501      	movs	r5, #1
 8001f60:	2938      	cmp	r1, #56	@ 0x38
 8001f62:	dc17      	bgt.n	8001f94 <__aeabi_dsub+0x1c8>
 8001f64:	468a      	mov	sl, r1
 8001f66:	4653      	mov	r3, sl
 8001f68:	2b1f      	cmp	r3, #31
 8001f6a:	dd00      	ble.n	8001f6e <__aeabi_dsub+0x1a2>
 8001f6c:	e1e7      	b.n	800233e <__aeabi_dsub+0x572>
 8001f6e:	2220      	movs	r2, #32
 8001f70:	1ad2      	subs	r2, r2, r3
 8001f72:	9b02      	ldr	r3, [sp, #8]
 8001f74:	4661      	mov	r1, ip
 8001f76:	4093      	lsls	r3, r2
 8001f78:	001d      	movs	r5, r3
 8001f7a:	4653      	mov	r3, sl
 8001f7c:	40d9      	lsrs	r1, r3
 8001f7e:	4663      	mov	r3, ip
 8001f80:	4093      	lsls	r3, r2
 8001f82:	001a      	movs	r2, r3
 8001f84:	430d      	orrs	r5, r1
 8001f86:	1e51      	subs	r1, r2, #1
 8001f88:	418a      	sbcs	r2, r1
 8001f8a:	4653      	mov	r3, sl
 8001f8c:	4315      	orrs	r5, r2
 8001f8e:	9a02      	ldr	r2, [sp, #8]
 8001f90:	40da      	lsrs	r2, r3
 8001f92:	18a4      	adds	r4, r4, r2
 8001f94:	182d      	adds	r5, r5, r0
 8001f96:	4285      	cmp	r5, r0
 8001f98:	4180      	sbcs	r0, r0
 8001f9a:	4240      	negs	r0, r0
 8001f9c:	1824      	adds	r4, r4, r0
 8001f9e:	0223      	lsls	r3, r4, #8
 8001fa0:	d400      	bmi.n	8001fa4 <__aeabi_dsub+0x1d8>
 8001fa2:	e0b6      	b.n	8002112 <__aeabi_dsub+0x346>
 8001fa4:	4b5e      	ldr	r3, [pc, #376]	@ (8002120 <__aeabi_dsub+0x354>)
 8001fa6:	3701      	adds	r7, #1
 8001fa8:	429f      	cmp	r7, r3
 8001faa:	d100      	bne.n	8001fae <__aeabi_dsub+0x1e2>
 8001fac:	e0ad      	b.n	800210a <__aeabi_dsub+0x33e>
 8001fae:	2101      	movs	r1, #1
 8001fb0:	4b5c      	ldr	r3, [pc, #368]	@ (8002124 <__aeabi_dsub+0x358>)
 8001fb2:	086a      	lsrs	r2, r5, #1
 8001fb4:	401c      	ands	r4, r3
 8001fb6:	4029      	ands	r1, r5
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	07e5      	lsls	r5, r4, #31
 8001fbc:	4315      	orrs	r5, r2
 8001fbe:	0864      	lsrs	r4, r4, #1
 8001fc0:	e78d      	b.n	8001ede <__aeabi_dsub+0x112>
 8001fc2:	4a59      	ldr	r2, [pc, #356]	@ (8002128 <__aeabi_dsub+0x35c>)
 8001fc4:	9b02      	ldr	r3, [sp, #8]
 8001fc6:	4692      	mov	sl, r2
 8001fc8:	4662      	mov	r2, ip
 8001fca:	44ba      	add	sl, r7
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	d02c      	beq.n	800202a <__aeabi_dsub+0x25e>
 8001fd0:	428e      	cmp	r6, r1
 8001fd2:	d02e      	beq.n	8002032 <__aeabi_dsub+0x266>
 8001fd4:	4652      	mov	r2, sl
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d060      	beq.n	800209c <__aeabi_dsub+0x2d0>
 8001fda:	2f00      	cmp	r7, #0
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dsub+0x214>
 8001fde:	e0db      	b.n	8002198 <__aeabi_dsub+0x3cc>
 8001fe0:	4663      	mov	r3, ip
 8001fe2:	000e      	movs	r6, r1
 8001fe4:	9c02      	ldr	r4, [sp, #8]
 8001fe6:	08d8      	lsrs	r0, r3, #3
 8001fe8:	0762      	lsls	r2, r4, #29
 8001fea:	4302      	orrs	r2, r0
 8001fec:	08e4      	lsrs	r4, r4, #3
 8001fee:	0013      	movs	r3, r2
 8001ff0:	4323      	orrs	r3, r4
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dsub+0x22a>
 8001ff4:	e254      	b.n	80024a0 <__aeabi_dsub+0x6d4>
 8001ff6:	2580      	movs	r5, #128	@ 0x80
 8001ff8:	032d      	lsls	r5, r5, #12
 8001ffa:	4325      	orrs	r5, r4
 8001ffc:	032d      	lsls	r5, r5, #12
 8001ffe:	4c48      	ldr	r4, [pc, #288]	@ (8002120 <__aeabi_dsub+0x354>)
 8002000:	0b2d      	lsrs	r5, r5, #12
 8002002:	e78c      	b.n	8001f1e <__aeabi_dsub+0x152>
 8002004:	4661      	mov	r1, ip
 8002006:	9b02      	ldr	r3, [sp, #8]
 8002008:	4319      	orrs	r1, r3
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x242>
 800200c:	e0cc      	b.n	80021a8 <__aeabi_dsub+0x3dc>
 800200e:	0029      	movs	r1, r5
 8002010:	3901      	subs	r1, #1
 8002012:	2d01      	cmp	r5, #1
 8002014:	d100      	bne.n	8002018 <__aeabi_dsub+0x24c>
 8002016:	e188      	b.n	800232a <__aeabi_dsub+0x55e>
 8002018:	4295      	cmp	r5, r2
 800201a:	d100      	bne.n	800201e <__aeabi_dsub+0x252>
 800201c:	e0aa      	b.n	8002174 <__aeabi_dsub+0x3a8>
 800201e:	2501      	movs	r5, #1
 8002020:	2938      	cmp	r1, #56	@ 0x38
 8002022:	dd00      	ble.n	8002026 <__aeabi_dsub+0x25a>
 8002024:	e72f      	b.n	8001e86 <__aeabi_dsub+0xba>
 8002026:	468a      	mov	sl, r1
 8002028:	e718      	b.n	8001e5c <__aeabi_dsub+0x90>
 800202a:	2201      	movs	r2, #1
 800202c:	4051      	eors	r1, r2
 800202e:	428e      	cmp	r6, r1
 8002030:	d1d0      	bne.n	8001fd4 <__aeabi_dsub+0x208>
 8002032:	4653      	mov	r3, sl
 8002034:	2b00      	cmp	r3, #0
 8002036:	d100      	bne.n	800203a <__aeabi_dsub+0x26e>
 8002038:	e0be      	b.n	80021b8 <__aeabi_dsub+0x3ec>
 800203a:	2f00      	cmp	r7, #0
 800203c:	d000      	beq.n	8002040 <__aeabi_dsub+0x274>
 800203e:	e138      	b.n	80022b2 <__aeabi_dsub+0x4e6>
 8002040:	46ca      	mov	sl, r9
 8002042:	0022      	movs	r2, r4
 8002044:	4302      	orrs	r2, r0
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x27e>
 8002048:	e1e2      	b.n	8002410 <__aeabi_dsub+0x644>
 800204a:	4653      	mov	r3, sl
 800204c:	1e59      	subs	r1, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x288>
 8002052:	e20d      	b.n	8002470 <__aeabi_dsub+0x6a4>
 8002054:	4a32      	ldr	r2, [pc, #200]	@ (8002120 <__aeabi_dsub+0x354>)
 8002056:	4592      	cmp	sl, r2
 8002058:	d100      	bne.n	800205c <__aeabi_dsub+0x290>
 800205a:	e1d2      	b.n	8002402 <__aeabi_dsub+0x636>
 800205c:	2701      	movs	r7, #1
 800205e:	2938      	cmp	r1, #56	@ 0x38
 8002060:	dc13      	bgt.n	800208a <__aeabi_dsub+0x2be>
 8002062:	291f      	cmp	r1, #31
 8002064:	dd00      	ble.n	8002068 <__aeabi_dsub+0x29c>
 8002066:	e1ee      	b.n	8002446 <__aeabi_dsub+0x67a>
 8002068:	2220      	movs	r2, #32
 800206a:	9b02      	ldr	r3, [sp, #8]
 800206c:	1a52      	subs	r2, r2, r1
 800206e:	0025      	movs	r5, r4
 8002070:	0007      	movs	r7, r0
 8002072:	469a      	mov	sl, r3
 8002074:	40cc      	lsrs	r4, r1
 8002076:	4090      	lsls	r0, r2
 8002078:	4095      	lsls	r5, r2
 800207a:	40cf      	lsrs	r7, r1
 800207c:	44a2      	add	sl, r4
 800207e:	1e42      	subs	r2, r0, #1
 8002080:	4190      	sbcs	r0, r2
 8002082:	4653      	mov	r3, sl
 8002084:	432f      	orrs	r7, r5
 8002086:	4307      	orrs	r7, r0
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	003d      	movs	r5, r7
 800208c:	4465      	add	r5, ip
 800208e:	4565      	cmp	r5, ip
 8002090:	4192      	sbcs	r2, r2
 8002092:	9b02      	ldr	r3, [sp, #8]
 8002094:	4252      	negs	r2, r2
 8002096:	464f      	mov	r7, r9
 8002098:	18d4      	adds	r4, r2, r3
 800209a:	e780      	b.n	8001f9e <__aeabi_dsub+0x1d2>
 800209c:	4a23      	ldr	r2, [pc, #140]	@ (800212c <__aeabi_dsub+0x360>)
 800209e:	1c7d      	adds	r5, r7, #1
 80020a0:	4215      	tst	r5, r2
 80020a2:	d000      	beq.n	80020a6 <__aeabi_dsub+0x2da>
 80020a4:	e0aa      	b.n	80021fc <__aeabi_dsub+0x430>
 80020a6:	4662      	mov	r2, ip
 80020a8:	0025      	movs	r5, r4
 80020aa:	9b02      	ldr	r3, [sp, #8]
 80020ac:	4305      	orrs	r5, r0
 80020ae:	431a      	orrs	r2, r3
 80020b0:	2f00      	cmp	r7, #0
 80020b2:	d000      	beq.n	80020b6 <__aeabi_dsub+0x2ea>
 80020b4:	e0f5      	b.n	80022a2 <__aeabi_dsub+0x4d6>
 80020b6:	2d00      	cmp	r5, #0
 80020b8:	d100      	bne.n	80020bc <__aeabi_dsub+0x2f0>
 80020ba:	e16b      	b.n	8002394 <__aeabi_dsub+0x5c8>
 80020bc:	2a00      	cmp	r2, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_dsub+0x2f6>
 80020c0:	e152      	b.n	8002368 <__aeabi_dsub+0x59c>
 80020c2:	4663      	mov	r3, ip
 80020c4:	1ac5      	subs	r5, r0, r3
 80020c6:	9b02      	ldr	r3, [sp, #8]
 80020c8:	1ae2      	subs	r2, r4, r3
 80020ca:	42a8      	cmp	r0, r5
 80020cc:	419b      	sbcs	r3, r3
 80020ce:	425b      	negs	r3, r3
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	021a      	lsls	r2, r3, #8
 80020d4:	d400      	bmi.n	80020d8 <__aeabi_dsub+0x30c>
 80020d6:	e1d5      	b.n	8002484 <__aeabi_dsub+0x6b8>
 80020d8:	4663      	mov	r3, ip
 80020da:	1a1d      	subs	r5, r3, r0
 80020dc:	45ac      	cmp	ip, r5
 80020de:	4192      	sbcs	r2, r2
 80020e0:	2601      	movs	r6, #1
 80020e2:	9b02      	ldr	r3, [sp, #8]
 80020e4:	4252      	negs	r2, r2
 80020e6:	1b1c      	subs	r4, r3, r4
 80020e8:	4688      	mov	r8, r1
 80020ea:	1aa4      	subs	r4, r4, r2
 80020ec:	400e      	ands	r6, r1
 80020ee:	e6f6      	b.n	8001ede <__aeabi_dsub+0x112>
 80020f0:	4297      	cmp	r7, r2
 80020f2:	d03f      	beq.n	8002174 <__aeabi_dsub+0x3a8>
 80020f4:	4652      	mov	r2, sl
 80020f6:	2501      	movs	r5, #1
 80020f8:	2a38      	cmp	r2, #56	@ 0x38
 80020fa:	dd00      	ble.n	80020fe <__aeabi_dsub+0x332>
 80020fc:	e74a      	b.n	8001f94 <__aeabi_dsub+0x1c8>
 80020fe:	2280      	movs	r2, #128	@ 0x80
 8002100:	9b02      	ldr	r3, [sp, #8]
 8002102:	0412      	lsls	r2, r2, #16
 8002104:	4313      	orrs	r3, r2
 8002106:	9302      	str	r3, [sp, #8]
 8002108:	e72d      	b.n	8001f66 <__aeabi_dsub+0x19a>
 800210a:	003c      	movs	r4, r7
 800210c:	2500      	movs	r5, #0
 800210e:	2200      	movs	r2, #0
 8002110:	e705      	b.n	8001f1e <__aeabi_dsub+0x152>
 8002112:	2307      	movs	r3, #7
 8002114:	402b      	ands	r3, r5
 8002116:	2b00      	cmp	r3, #0
 8002118:	d000      	beq.n	800211c <__aeabi_dsub+0x350>
 800211a:	e6e2      	b.n	8001ee2 <__aeabi_dsub+0x116>
 800211c:	e06b      	b.n	80021f6 <__aeabi_dsub+0x42a>
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	000007ff 	.word	0x000007ff
 8002124:	ff7fffff 	.word	0xff7fffff
 8002128:	fffff801 	.word	0xfffff801
 800212c:	000007fe 	.word	0x000007fe
 8002130:	0028      	movs	r0, r5
 8002132:	f7fe f8b3 	bl	800029c <__clzsi2>
 8002136:	0003      	movs	r3, r0
 8002138:	3318      	adds	r3, #24
 800213a:	2b1f      	cmp	r3, #31
 800213c:	dc00      	bgt.n	8002140 <__aeabi_dsub+0x374>
 800213e:	e6b4      	b.n	8001eaa <__aeabi_dsub+0xde>
 8002140:	002a      	movs	r2, r5
 8002142:	3808      	subs	r0, #8
 8002144:	4082      	lsls	r2, r0
 8002146:	429f      	cmp	r7, r3
 8002148:	dd00      	ble.n	800214c <__aeabi_dsub+0x380>
 800214a:	e0b9      	b.n	80022c0 <__aeabi_dsub+0x4f4>
 800214c:	1bdb      	subs	r3, r3, r7
 800214e:	1c58      	adds	r0, r3, #1
 8002150:	281f      	cmp	r0, #31
 8002152:	dc00      	bgt.n	8002156 <__aeabi_dsub+0x38a>
 8002154:	e1a0      	b.n	8002498 <__aeabi_dsub+0x6cc>
 8002156:	0015      	movs	r5, r2
 8002158:	3b1f      	subs	r3, #31
 800215a:	40dd      	lsrs	r5, r3
 800215c:	2820      	cmp	r0, #32
 800215e:	d005      	beq.n	800216c <__aeabi_dsub+0x3a0>
 8002160:	2340      	movs	r3, #64	@ 0x40
 8002162:	1a1b      	subs	r3, r3, r0
 8002164:	409a      	lsls	r2, r3
 8002166:	1e53      	subs	r3, r2, #1
 8002168:	419a      	sbcs	r2, r3
 800216a:	4315      	orrs	r5, r2
 800216c:	2307      	movs	r3, #7
 800216e:	2700      	movs	r7, #0
 8002170:	402b      	ands	r3, r5
 8002172:	e7d0      	b.n	8002116 <__aeabi_dsub+0x34a>
 8002174:	08c0      	lsrs	r0, r0, #3
 8002176:	0762      	lsls	r2, r4, #29
 8002178:	4302      	orrs	r2, r0
 800217a:	08e4      	lsrs	r4, r4, #3
 800217c:	e737      	b.n	8001fee <__aeabi_dsub+0x222>
 800217e:	08ea      	lsrs	r2, r5, #3
 8002180:	0763      	lsls	r3, r4, #29
 8002182:	431a      	orrs	r2, r3
 8002184:	4bd3      	ldr	r3, [pc, #844]	@ (80024d4 <__aeabi_dsub+0x708>)
 8002186:	08e4      	lsrs	r4, r4, #3
 8002188:	429f      	cmp	r7, r3
 800218a:	d100      	bne.n	800218e <__aeabi_dsub+0x3c2>
 800218c:	e72f      	b.n	8001fee <__aeabi_dsub+0x222>
 800218e:	0324      	lsls	r4, r4, #12
 8002190:	0b25      	lsrs	r5, r4, #12
 8002192:	057c      	lsls	r4, r7, #21
 8002194:	0d64      	lsrs	r4, r4, #21
 8002196:	e6c2      	b.n	8001f1e <__aeabi_dsub+0x152>
 8002198:	46ca      	mov	sl, r9
 800219a:	0022      	movs	r2, r4
 800219c:	4302      	orrs	r2, r0
 800219e:	d158      	bne.n	8002252 <__aeabi_dsub+0x486>
 80021a0:	4663      	mov	r3, ip
 80021a2:	000e      	movs	r6, r1
 80021a4:	9c02      	ldr	r4, [sp, #8]
 80021a6:	9303      	str	r3, [sp, #12]
 80021a8:	9b03      	ldr	r3, [sp, #12]
 80021aa:	4657      	mov	r7, sl
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	e7e7      	b.n	8002180 <__aeabi_dsub+0x3b4>
 80021b0:	4cc9      	ldr	r4, [pc, #804]	@ (80024d8 <__aeabi_dsub+0x70c>)
 80021b2:	1aff      	subs	r7, r7, r3
 80021b4:	4014      	ands	r4, r2
 80021b6:	e692      	b.n	8001ede <__aeabi_dsub+0x112>
 80021b8:	4dc8      	ldr	r5, [pc, #800]	@ (80024dc <__aeabi_dsub+0x710>)
 80021ba:	1c7a      	adds	r2, r7, #1
 80021bc:	422a      	tst	r2, r5
 80021be:	d000      	beq.n	80021c2 <__aeabi_dsub+0x3f6>
 80021c0:	e084      	b.n	80022cc <__aeabi_dsub+0x500>
 80021c2:	0022      	movs	r2, r4
 80021c4:	4302      	orrs	r2, r0
 80021c6:	2f00      	cmp	r7, #0
 80021c8:	d000      	beq.n	80021cc <__aeabi_dsub+0x400>
 80021ca:	e0ef      	b.n	80023ac <__aeabi_dsub+0x5e0>
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d100      	bne.n	80021d2 <__aeabi_dsub+0x406>
 80021d0:	e0e5      	b.n	800239e <__aeabi_dsub+0x5d2>
 80021d2:	4662      	mov	r2, ip
 80021d4:	9902      	ldr	r1, [sp, #8]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	d100      	bne.n	80021dc <__aeabi_dsub+0x410>
 80021da:	e0c5      	b.n	8002368 <__aeabi_dsub+0x59c>
 80021dc:	4663      	mov	r3, ip
 80021de:	18c5      	adds	r5, r0, r3
 80021e0:	468c      	mov	ip, r1
 80021e2:	4285      	cmp	r5, r0
 80021e4:	4180      	sbcs	r0, r0
 80021e6:	4464      	add	r4, ip
 80021e8:	4240      	negs	r0, r0
 80021ea:	1824      	adds	r4, r4, r0
 80021ec:	0223      	lsls	r3, r4, #8
 80021ee:	d502      	bpl.n	80021f6 <__aeabi_dsub+0x42a>
 80021f0:	4bb9      	ldr	r3, [pc, #740]	@ (80024d8 <__aeabi_dsub+0x70c>)
 80021f2:	3701      	adds	r7, #1
 80021f4:	401c      	ands	r4, r3
 80021f6:	46ba      	mov	sl, r7
 80021f8:	9503      	str	r5, [sp, #12]
 80021fa:	e7d5      	b.n	80021a8 <__aeabi_dsub+0x3dc>
 80021fc:	4662      	mov	r2, ip
 80021fe:	1a85      	subs	r5, r0, r2
 8002200:	42a8      	cmp	r0, r5
 8002202:	4192      	sbcs	r2, r2
 8002204:	4252      	negs	r2, r2
 8002206:	4691      	mov	r9, r2
 8002208:	9b02      	ldr	r3, [sp, #8]
 800220a:	1ae3      	subs	r3, r4, r3
 800220c:	001a      	movs	r2, r3
 800220e:	464b      	mov	r3, r9
 8002210:	1ad2      	subs	r2, r2, r3
 8002212:	0013      	movs	r3, r2
 8002214:	4691      	mov	r9, r2
 8002216:	021a      	lsls	r2, r3, #8
 8002218:	d46c      	bmi.n	80022f4 <__aeabi_dsub+0x528>
 800221a:	464a      	mov	r2, r9
 800221c:	464c      	mov	r4, r9
 800221e:	432a      	orrs	r2, r5
 8002220:	d000      	beq.n	8002224 <__aeabi_dsub+0x458>
 8002222:	e63a      	b.n	8001e9a <__aeabi_dsub+0xce>
 8002224:	2600      	movs	r6, #0
 8002226:	2400      	movs	r4, #0
 8002228:	2500      	movs	r5, #0
 800222a:	e678      	b.n	8001f1e <__aeabi_dsub+0x152>
 800222c:	9902      	ldr	r1, [sp, #8]
 800222e:	4653      	mov	r3, sl
 8002230:	000d      	movs	r5, r1
 8002232:	3a20      	subs	r2, #32
 8002234:	40d5      	lsrs	r5, r2
 8002236:	2b20      	cmp	r3, #32
 8002238:	d006      	beq.n	8002248 <__aeabi_dsub+0x47c>
 800223a:	2240      	movs	r2, #64	@ 0x40
 800223c:	1ad2      	subs	r2, r2, r3
 800223e:	000b      	movs	r3, r1
 8002240:	4093      	lsls	r3, r2
 8002242:	4662      	mov	r2, ip
 8002244:	431a      	orrs	r2, r3
 8002246:	4693      	mov	fp, r2
 8002248:	465b      	mov	r3, fp
 800224a:	1e5a      	subs	r2, r3, #1
 800224c:	4193      	sbcs	r3, r2
 800224e:	431d      	orrs	r5, r3
 8002250:	e619      	b.n	8001e86 <__aeabi_dsub+0xba>
 8002252:	4653      	mov	r3, sl
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d100      	bne.n	800225c <__aeabi_dsub+0x490>
 800225a:	e0c6      	b.n	80023ea <__aeabi_dsub+0x61e>
 800225c:	4e9d      	ldr	r6, [pc, #628]	@ (80024d4 <__aeabi_dsub+0x708>)
 800225e:	45b2      	cmp	sl, r6
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x498>
 8002262:	e6bd      	b.n	8001fe0 <__aeabi_dsub+0x214>
 8002264:	4688      	mov	r8, r1
 8002266:	000e      	movs	r6, r1
 8002268:	2501      	movs	r5, #1
 800226a:	2a38      	cmp	r2, #56	@ 0x38
 800226c:	dc10      	bgt.n	8002290 <__aeabi_dsub+0x4c4>
 800226e:	2a1f      	cmp	r2, #31
 8002270:	dc7f      	bgt.n	8002372 <__aeabi_dsub+0x5a6>
 8002272:	2120      	movs	r1, #32
 8002274:	0025      	movs	r5, r4
 8002276:	1a89      	subs	r1, r1, r2
 8002278:	0007      	movs	r7, r0
 800227a:	4088      	lsls	r0, r1
 800227c:	408d      	lsls	r5, r1
 800227e:	40d7      	lsrs	r7, r2
 8002280:	40d4      	lsrs	r4, r2
 8002282:	1e41      	subs	r1, r0, #1
 8002284:	4188      	sbcs	r0, r1
 8002286:	9b02      	ldr	r3, [sp, #8]
 8002288:	433d      	orrs	r5, r7
 800228a:	1b1b      	subs	r3, r3, r4
 800228c:	4305      	orrs	r5, r0
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	4662      	mov	r2, ip
 8002292:	1b55      	subs	r5, r2, r5
 8002294:	45ac      	cmp	ip, r5
 8002296:	4192      	sbcs	r2, r2
 8002298:	9b02      	ldr	r3, [sp, #8]
 800229a:	4252      	negs	r2, r2
 800229c:	464f      	mov	r7, r9
 800229e:	1a9c      	subs	r4, r3, r2
 80022a0:	e5f6      	b.n	8001e90 <__aeabi_dsub+0xc4>
 80022a2:	2d00      	cmp	r5, #0
 80022a4:	d000      	beq.n	80022a8 <__aeabi_dsub+0x4dc>
 80022a6:	e0b7      	b.n	8002418 <__aeabi_dsub+0x64c>
 80022a8:	2a00      	cmp	r2, #0
 80022aa:	d100      	bne.n	80022ae <__aeabi_dsub+0x4e2>
 80022ac:	e0f0      	b.n	8002490 <__aeabi_dsub+0x6c4>
 80022ae:	2601      	movs	r6, #1
 80022b0:	400e      	ands	r6, r1
 80022b2:	4663      	mov	r3, ip
 80022b4:	9802      	ldr	r0, [sp, #8]
 80022b6:	08d9      	lsrs	r1, r3, #3
 80022b8:	0742      	lsls	r2, r0, #29
 80022ba:	430a      	orrs	r2, r1
 80022bc:	08c4      	lsrs	r4, r0, #3
 80022be:	e696      	b.n	8001fee <__aeabi_dsub+0x222>
 80022c0:	4c85      	ldr	r4, [pc, #532]	@ (80024d8 <__aeabi_dsub+0x70c>)
 80022c2:	1aff      	subs	r7, r7, r3
 80022c4:	4014      	ands	r4, r2
 80022c6:	0762      	lsls	r2, r4, #29
 80022c8:	08e4      	lsrs	r4, r4, #3
 80022ca:	e760      	b.n	800218e <__aeabi_dsub+0x3c2>
 80022cc:	4981      	ldr	r1, [pc, #516]	@ (80024d4 <__aeabi_dsub+0x708>)
 80022ce:	428a      	cmp	r2, r1
 80022d0:	d100      	bne.n	80022d4 <__aeabi_dsub+0x508>
 80022d2:	e0c9      	b.n	8002468 <__aeabi_dsub+0x69c>
 80022d4:	4663      	mov	r3, ip
 80022d6:	18c1      	adds	r1, r0, r3
 80022d8:	4281      	cmp	r1, r0
 80022da:	4180      	sbcs	r0, r0
 80022dc:	9b02      	ldr	r3, [sp, #8]
 80022de:	4240      	negs	r0, r0
 80022e0:	18e3      	adds	r3, r4, r3
 80022e2:	181b      	adds	r3, r3, r0
 80022e4:	07dd      	lsls	r5, r3, #31
 80022e6:	085c      	lsrs	r4, r3, #1
 80022e8:	2307      	movs	r3, #7
 80022ea:	0849      	lsrs	r1, r1, #1
 80022ec:	430d      	orrs	r5, r1
 80022ee:	0017      	movs	r7, r2
 80022f0:	402b      	ands	r3, r5
 80022f2:	e710      	b.n	8002116 <__aeabi_dsub+0x34a>
 80022f4:	4663      	mov	r3, ip
 80022f6:	1a1d      	subs	r5, r3, r0
 80022f8:	45ac      	cmp	ip, r5
 80022fa:	4192      	sbcs	r2, r2
 80022fc:	2601      	movs	r6, #1
 80022fe:	9b02      	ldr	r3, [sp, #8]
 8002300:	4252      	negs	r2, r2
 8002302:	1b1c      	subs	r4, r3, r4
 8002304:	4688      	mov	r8, r1
 8002306:	1aa4      	subs	r4, r4, r2
 8002308:	400e      	ands	r6, r1
 800230a:	e5c6      	b.n	8001e9a <__aeabi_dsub+0xce>
 800230c:	4663      	mov	r3, ip
 800230e:	18c5      	adds	r5, r0, r3
 8002310:	9b02      	ldr	r3, [sp, #8]
 8002312:	4285      	cmp	r5, r0
 8002314:	4180      	sbcs	r0, r0
 8002316:	469c      	mov	ip, r3
 8002318:	4240      	negs	r0, r0
 800231a:	4464      	add	r4, ip
 800231c:	1824      	adds	r4, r4, r0
 800231e:	2701      	movs	r7, #1
 8002320:	0223      	lsls	r3, r4, #8
 8002322:	d400      	bmi.n	8002326 <__aeabi_dsub+0x55a>
 8002324:	e6f5      	b.n	8002112 <__aeabi_dsub+0x346>
 8002326:	2702      	movs	r7, #2
 8002328:	e641      	b.n	8001fae <__aeabi_dsub+0x1e2>
 800232a:	4663      	mov	r3, ip
 800232c:	1ac5      	subs	r5, r0, r3
 800232e:	42a8      	cmp	r0, r5
 8002330:	4180      	sbcs	r0, r0
 8002332:	9b02      	ldr	r3, [sp, #8]
 8002334:	4240      	negs	r0, r0
 8002336:	1ae4      	subs	r4, r4, r3
 8002338:	2701      	movs	r7, #1
 800233a:	1a24      	subs	r4, r4, r0
 800233c:	e5a8      	b.n	8001e90 <__aeabi_dsub+0xc4>
 800233e:	9d02      	ldr	r5, [sp, #8]
 8002340:	4652      	mov	r2, sl
 8002342:	002b      	movs	r3, r5
 8002344:	3a20      	subs	r2, #32
 8002346:	40d3      	lsrs	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	4653      	mov	r3, sl
 800234c:	2b20      	cmp	r3, #32
 800234e:	d006      	beq.n	800235e <__aeabi_dsub+0x592>
 8002350:	2240      	movs	r2, #64	@ 0x40
 8002352:	1ad2      	subs	r2, r2, r3
 8002354:	002b      	movs	r3, r5
 8002356:	4093      	lsls	r3, r2
 8002358:	4662      	mov	r2, ip
 800235a:	431a      	orrs	r2, r3
 800235c:	4693      	mov	fp, r2
 800235e:	465d      	mov	r5, fp
 8002360:	1e6b      	subs	r3, r5, #1
 8002362:	419d      	sbcs	r5, r3
 8002364:	430d      	orrs	r5, r1
 8002366:	e615      	b.n	8001f94 <__aeabi_dsub+0x1c8>
 8002368:	0762      	lsls	r2, r4, #29
 800236a:	08c0      	lsrs	r0, r0, #3
 800236c:	4302      	orrs	r2, r0
 800236e:	08e4      	lsrs	r4, r4, #3
 8002370:	e70d      	b.n	800218e <__aeabi_dsub+0x3c2>
 8002372:	0011      	movs	r1, r2
 8002374:	0027      	movs	r7, r4
 8002376:	3920      	subs	r1, #32
 8002378:	40cf      	lsrs	r7, r1
 800237a:	2a20      	cmp	r2, #32
 800237c:	d005      	beq.n	800238a <__aeabi_dsub+0x5be>
 800237e:	2140      	movs	r1, #64	@ 0x40
 8002380:	1a8a      	subs	r2, r1, r2
 8002382:	4094      	lsls	r4, r2
 8002384:	0025      	movs	r5, r4
 8002386:	4305      	orrs	r5, r0
 8002388:	9503      	str	r5, [sp, #12]
 800238a:	9d03      	ldr	r5, [sp, #12]
 800238c:	1e6a      	subs	r2, r5, #1
 800238e:	4195      	sbcs	r5, r2
 8002390:	433d      	orrs	r5, r7
 8002392:	e77d      	b.n	8002290 <__aeabi_dsub+0x4c4>
 8002394:	2a00      	cmp	r2, #0
 8002396:	d100      	bne.n	800239a <__aeabi_dsub+0x5ce>
 8002398:	e744      	b.n	8002224 <__aeabi_dsub+0x458>
 800239a:	2601      	movs	r6, #1
 800239c:	400e      	ands	r6, r1
 800239e:	4663      	mov	r3, ip
 80023a0:	08d9      	lsrs	r1, r3, #3
 80023a2:	9b02      	ldr	r3, [sp, #8]
 80023a4:	075a      	lsls	r2, r3, #29
 80023a6:	430a      	orrs	r2, r1
 80023a8:	08dc      	lsrs	r4, r3, #3
 80023aa:	e6f0      	b.n	800218e <__aeabi_dsub+0x3c2>
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	d028      	beq.n	8002402 <__aeabi_dsub+0x636>
 80023b0:	4662      	mov	r2, ip
 80023b2:	9f02      	ldr	r7, [sp, #8]
 80023b4:	08c0      	lsrs	r0, r0, #3
 80023b6:	433a      	orrs	r2, r7
 80023b8:	d100      	bne.n	80023bc <__aeabi_dsub+0x5f0>
 80023ba:	e6dc      	b.n	8002176 <__aeabi_dsub+0x3aa>
 80023bc:	0762      	lsls	r2, r4, #29
 80023be:	4310      	orrs	r0, r2
 80023c0:	2280      	movs	r2, #128	@ 0x80
 80023c2:	08e4      	lsrs	r4, r4, #3
 80023c4:	0312      	lsls	r2, r2, #12
 80023c6:	4214      	tst	r4, r2
 80023c8:	d009      	beq.n	80023de <__aeabi_dsub+0x612>
 80023ca:	08fd      	lsrs	r5, r7, #3
 80023cc:	4215      	tst	r5, r2
 80023ce:	d106      	bne.n	80023de <__aeabi_dsub+0x612>
 80023d0:	4663      	mov	r3, ip
 80023d2:	2601      	movs	r6, #1
 80023d4:	002c      	movs	r4, r5
 80023d6:	08d8      	lsrs	r0, r3, #3
 80023d8:	077b      	lsls	r3, r7, #29
 80023da:	4318      	orrs	r0, r3
 80023dc:	400e      	ands	r6, r1
 80023de:	0f42      	lsrs	r2, r0, #29
 80023e0:	00c0      	lsls	r0, r0, #3
 80023e2:	08c0      	lsrs	r0, r0, #3
 80023e4:	0752      	lsls	r2, r2, #29
 80023e6:	4302      	orrs	r2, r0
 80023e8:	e601      	b.n	8001fee <__aeabi_dsub+0x222>
 80023ea:	4663      	mov	r3, ip
 80023ec:	1a1d      	subs	r5, r3, r0
 80023ee:	45ac      	cmp	ip, r5
 80023f0:	4192      	sbcs	r2, r2
 80023f2:	9b02      	ldr	r3, [sp, #8]
 80023f4:	4252      	negs	r2, r2
 80023f6:	1b1c      	subs	r4, r3, r4
 80023f8:	000e      	movs	r6, r1
 80023fa:	4688      	mov	r8, r1
 80023fc:	2701      	movs	r7, #1
 80023fe:	1aa4      	subs	r4, r4, r2
 8002400:	e546      	b.n	8001e90 <__aeabi_dsub+0xc4>
 8002402:	4663      	mov	r3, ip
 8002404:	08d9      	lsrs	r1, r3, #3
 8002406:	9b02      	ldr	r3, [sp, #8]
 8002408:	075a      	lsls	r2, r3, #29
 800240a:	430a      	orrs	r2, r1
 800240c:	08dc      	lsrs	r4, r3, #3
 800240e:	e5ee      	b.n	8001fee <__aeabi_dsub+0x222>
 8002410:	4663      	mov	r3, ip
 8002412:	9c02      	ldr	r4, [sp, #8]
 8002414:	9303      	str	r3, [sp, #12]
 8002416:	e6c7      	b.n	80021a8 <__aeabi_dsub+0x3dc>
 8002418:	08c0      	lsrs	r0, r0, #3
 800241a:	2a00      	cmp	r2, #0
 800241c:	d100      	bne.n	8002420 <__aeabi_dsub+0x654>
 800241e:	e6aa      	b.n	8002176 <__aeabi_dsub+0x3aa>
 8002420:	0762      	lsls	r2, r4, #29
 8002422:	4310      	orrs	r0, r2
 8002424:	2280      	movs	r2, #128	@ 0x80
 8002426:	08e4      	lsrs	r4, r4, #3
 8002428:	0312      	lsls	r2, r2, #12
 800242a:	4214      	tst	r4, r2
 800242c:	d0d7      	beq.n	80023de <__aeabi_dsub+0x612>
 800242e:	9f02      	ldr	r7, [sp, #8]
 8002430:	08fd      	lsrs	r5, r7, #3
 8002432:	4215      	tst	r5, r2
 8002434:	d1d3      	bne.n	80023de <__aeabi_dsub+0x612>
 8002436:	4663      	mov	r3, ip
 8002438:	2601      	movs	r6, #1
 800243a:	08d8      	lsrs	r0, r3, #3
 800243c:	077b      	lsls	r3, r7, #29
 800243e:	002c      	movs	r4, r5
 8002440:	4318      	orrs	r0, r3
 8002442:	400e      	ands	r6, r1
 8002444:	e7cb      	b.n	80023de <__aeabi_dsub+0x612>
 8002446:	000a      	movs	r2, r1
 8002448:	0027      	movs	r7, r4
 800244a:	3a20      	subs	r2, #32
 800244c:	40d7      	lsrs	r7, r2
 800244e:	2920      	cmp	r1, #32
 8002450:	d005      	beq.n	800245e <__aeabi_dsub+0x692>
 8002452:	2240      	movs	r2, #64	@ 0x40
 8002454:	1a52      	subs	r2, r2, r1
 8002456:	4094      	lsls	r4, r2
 8002458:	0025      	movs	r5, r4
 800245a:	4305      	orrs	r5, r0
 800245c:	9503      	str	r5, [sp, #12]
 800245e:	9d03      	ldr	r5, [sp, #12]
 8002460:	1e6a      	subs	r2, r5, #1
 8002462:	4195      	sbcs	r5, r2
 8002464:	432f      	orrs	r7, r5
 8002466:	e610      	b.n	800208a <__aeabi_dsub+0x2be>
 8002468:	0014      	movs	r4, r2
 800246a:	2500      	movs	r5, #0
 800246c:	2200      	movs	r2, #0
 800246e:	e556      	b.n	8001f1e <__aeabi_dsub+0x152>
 8002470:	9b02      	ldr	r3, [sp, #8]
 8002472:	4460      	add	r0, ip
 8002474:	4699      	mov	r9, r3
 8002476:	4560      	cmp	r0, ip
 8002478:	4192      	sbcs	r2, r2
 800247a:	444c      	add	r4, r9
 800247c:	4252      	negs	r2, r2
 800247e:	0005      	movs	r5, r0
 8002480:	18a4      	adds	r4, r4, r2
 8002482:	e74c      	b.n	800231e <__aeabi_dsub+0x552>
 8002484:	001a      	movs	r2, r3
 8002486:	001c      	movs	r4, r3
 8002488:	432a      	orrs	r2, r5
 800248a:	d000      	beq.n	800248e <__aeabi_dsub+0x6c2>
 800248c:	e6b3      	b.n	80021f6 <__aeabi_dsub+0x42a>
 800248e:	e6c9      	b.n	8002224 <__aeabi_dsub+0x458>
 8002490:	2480      	movs	r4, #128	@ 0x80
 8002492:	2600      	movs	r6, #0
 8002494:	0324      	lsls	r4, r4, #12
 8002496:	e5ae      	b.n	8001ff6 <__aeabi_dsub+0x22a>
 8002498:	2120      	movs	r1, #32
 800249a:	2500      	movs	r5, #0
 800249c:	1a09      	subs	r1, r1, r0
 800249e:	e517      	b.n	8001ed0 <__aeabi_dsub+0x104>
 80024a0:	2200      	movs	r2, #0
 80024a2:	2500      	movs	r5, #0
 80024a4:	4c0b      	ldr	r4, [pc, #44]	@ (80024d4 <__aeabi_dsub+0x708>)
 80024a6:	e53a      	b.n	8001f1e <__aeabi_dsub+0x152>
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0x6e2>
 80024ac:	e5f6      	b.n	800209c <__aeabi_dsub+0x2d0>
 80024ae:	464b      	mov	r3, r9
 80024b0:	1bda      	subs	r2, r3, r7
 80024b2:	4692      	mov	sl, r2
 80024b4:	2f00      	cmp	r7, #0
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x6ee>
 80024b8:	e66f      	b.n	800219a <__aeabi_dsub+0x3ce>
 80024ba:	2a38      	cmp	r2, #56	@ 0x38
 80024bc:	dc05      	bgt.n	80024ca <__aeabi_dsub+0x6fe>
 80024be:	2680      	movs	r6, #128	@ 0x80
 80024c0:	0436      	lsls	r6, r6, #16
 80024c2:	4334      	orrs	r4, r6
 80024c4:	4688      	mov	r8, r1
 80024c6:	000e      	movs	r6, r1
 80024c8:	e6d1      	b.n	800226e <__aeabi_dsub+0x4a2>
 80024ca:	4688      	mov	r8, r1
 80024cc:	000e      	movs	r6, r1
 80024ce:	2501      	movs	r5, #1
 80024d0:	e6de      	b.n	8002290 <__aeabi_dsub+0x4c4>
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	000007ff 	.word	0x000007ff
 80024d8:	ff7fffff 	.word	0xff7fffff
 80024dc:	000007fe 	.word	0x000007fe
 80024e0:	2d00      	cmp	r5, #0
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x71a>
 80024e4:	e668      	b.n	80021b8 <__aeabi_dsub+0x3ec>
 80024e6:	464b      	mov	r3, r9
 80024e8:	1bd9      	subs	r1, r3, r7
 80024ea:	2f00      	cmp	r7, #0
 80024ec:	d101      	bne.n	80024f2 <__aeabi_dsub+0x726>
 80024ee:	468a      	mov	sl, r1
 80024f0:	e5a7      	b.n	8002042 <__aeabi_dsub+0x276>
 80024f2:	2701      	movs	r7, #1
 80024f4:	2938      	cmp	r1, #56	@ 0x38
 80024f6:	dd00      	ble.n	80024fa <__aeabi_dsub+0x72e>
 80024f8:	e5c7      	b.n	800208a <__aeabi_dsub+0x2be>
 80024fa:	2280      	movs	r2, #128	@ 0x80
 80024fc:	0412      	lsls	r2, r2, #16
 80024fe:	4314      	orrs	r4, r2
 8002500:	e5af      	b.n	8002062 <__aeabi_dsub+0x296>
 8002502:	46c0      	nop			@ (mov r8, r8)

08002504 <__aeabi_d2iz>:
 8002504:	000b      	movs	r3, r1
 8002506:	0002      	movs	r2, r0
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	4d16      	ldr	r5, [pc, #88]	@ (8002564 <__aeabi_d2iz+0x60>)
 800250c:	030c      	lsls	r4, r1, #12
 800250e:	b082      	sub	sp, #8
 8002510:	0049      	lsls	r1, r1, #1
 8002512:	2000      	movs	r0, #0
 8002514:	9200      	str	r2, [sp, #0]
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	0b24      	lsrs	r4, r4, #12
 800251a:	0d49      	lsrs	r1, r1, #21
 800251c:	0fde      	lsrs	r6, r3, #31
 800251e:	42a9      	cmp	r1, r5
 8002520:	dd04      	ble.n	800252c <__aeabi_d2iz+0x28>
 8002522:	4811      	ldr	r0, [pc, #68]	@ (8002568 <__aeabi_d2iz+0x64>)
 8002524:	4281      	cmp	r1, r0
 8002526:	dd03      	ble.n	8002530 <__aeabi_d2iz+0x2c>
 8002528:	4b10      	ldr	r3, [pc, #64]	@ (800256c <__aeabi_d2iz+0x68>)
 800252a:	18f0      	adds	r0, r6, r3
 800252c:	b002      	add	sp, #8
 800252e:	bd70      	pop	{r4, r5, r6, pc}
 8002530:	2080      	movs	r0, #128	@ 0x80
 8002532:	0340      	lsls	r0, r0, #13
 8002534:	4320      	orrs	r0, r4
 8002536:	4c0e      	ldr	r4, [pc, #56]	@ (8002570 <__aeabi_d2iz+0x6c>)
 8002538:	1a64      	subs	r4, r4, r1
 800253a:	2c1f      	cmp	r4, #31
 800253c:	dd08      	ble.n	8002550 <__aeabi_d2iz+0x4c>
 800253e:	4b0d      	ldr	r3, [pc, #52]	@ (8002574 <__aeabi_d2iz+0x70>)
 8002540:	1a5b      	subs	r3, r3, r1
 8002542:	40d8      	lsrs	r0, r3
 8002544:	0003      	movs	r3, r0
 8002546:	4258      	negs	r0, r3
 8002548:	2e00      	cmp	r6, #0
 800254a:	d1ef      	bne.n	800252c <__aeabi_d2iz+0x28>
 800254c:	0018      	movs	r0, r3
 800254e:	e7ed      	b.n	800252c <__aeabi_d2iz+0x28>
 8002550:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <__aeabi_d2iz+0x74>)
 8002552:	9a00      	ldr	r2, [sp, #0]
 8002554:	469c      	mov	ip, r3
 8002556:	0003      	movs	r3, r0
 8002558:	4461      	add	r1, ip
 800255a:	408b      	lsls	r3, r1
 800255c:	40e2      	lsrs	r2, r4
 800255e:	4313      	orrs	r3, r2
 8002560:	e7f1      	b.n	8002546 <__aeabi_d2iz+0x42>
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	000003fe 	.word	0x000003fe
 8002568:	0000041d 	.word	0x0000041d
 800256c:	7fffffff 	.word	0x7fffffff
 8002570:	00000433 	.word	0x00000433
 8002574:	00000413 	.word	0x00000413
 8002578:	fffffbed 	.word	0xfffffbed

0800257c <__aeabi_i2d>:
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	2800      	cmp	r0, #0
 8002580:	d016      	beq.n	80025b0 <__aeabi_i2d+0x34>
 8002582:	17c3      	asrs	r3, r0, #31
 8002584:	18c5      	adds	r5, r0, r3
 8002586:	405d      	eors	r5, r3
 8002588:	0fc4      	lsrs	r4, r0, #31
 800258a:	0028      	movs	r0, r5
 800258c:	f7fd fe86 	bl	800029c <__clzsi2>
 8002590:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <__aeabi_i2d+0x58>)
 8002592:	1a1b      	subs	r3, r3, r0
 8002594:	055b      	lsls	r3, r3, #21
 8002596:	0d5b      	lsrs	r3, r3, #21
 8002598:	280a      	cmp	r0, #10
 800259a:	dc14      	bgt.n	80025c6 <__aeabi_i2d+0x4a>
 800259c:	0002      	movs	r2, r0
 800259e:	002e      	movs	r6, r5
 80025a0:	3215      	adds	r2, #21
 80025a2:	4096      	lsls	r6, r2
 80025a4:	220b      	movs	r2, #11
 80025a6:	1a12      	subs	r2, r2, r0
 80025a8:	40d5      	lsrs	r5, r2
 80025aa:	032d      	lsls	r5, r5, #12
 80025ac:	0b2d      	lsrs	r5, r5, #12
 80025ae:	e003      	b.n	80025b8 <__aeabi_i2d+0x3c>
 80025b0:	2400      	movs	r4, #0
 80025b2:	2300      	movs	r3, #0
 80025b4:	2500      	movs	r5, #0
 80025b6:	2600      	movs	r6, #0
 80025b8:	051b      	lsls	r3, r3, #20
 80025ba:	432b      	orrs	r3, r5
 80025bc:	07e4      	lsls	r4, r4, #31
 80025be:	4323      	orrs	r3, r4
 80025c0:	0030      	movs	r0, r6
 80025c2:	0019      	movs	r1, r3
 80025c4:	bd70      	pop	{r4, r5, r6, pc}
 80025c6:	380b      	subs	r0, #11
 80025c8:	4085      	lsls	r5, r0
 80025ca:	032d      	lsls	r5, r5, #12
 80025cc:	2600      	movs	r6, #0
 80025ce:	0b2d      	lsrs	r5, r5, #12
 80025d0:	e7f2      	b.n	80025b8 <__aeabi_i2d+0x3c>
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	0000041e 	.word	0x0000041e

080025d8 <__aeabi_ui2d>:
 80025d8:	b510      	push	{r4, lr}
 80025da:	1e04      	subs	r4, r0, #0
 80025dc:	d010      	beq.n	8002600 <__aeabi_ui2d+0x28>
 80025de:	f7fd fe5d 	bl	800029c <__clzsi2>
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <__aeabi_ui2d+0x44>)
 80025e4:	1a1b      	subs	r3, r3, r0
 80025e6:	055b      	lsls	r3, r3, #21
 80025e8:	0d5b      	lsrs	r3, r3, #21
 80025ea:	280a      	cmp	r0, #10
 80025ec:	dc0f      	bgt.n	800260e <__aeabi_ui2d+0x36>
 80025ee:	220b      	movs	r2, #11
 80025f0:	0021      	movs	r1, r4
 80025f2:	1a12      	subs	r2, r2, r0
 80025f4:	40d1      	lsrs	r1, r2
 80025f6:	3015      	adds	r0, #21
 80025f8:	030a      	lsls	r2, r1, #12
 80025fa:	4084      	lsls	r4, r0
 80025fc:	0b12      	lsrs	r2, r2, #12
 80025fe:	e001      	b.n	8002604 <__aeabi_ui2d+0x2c>
 8002600:	2300      	movs	r3, #0
 8002602:	2200      	movs	r2, #0
 8002604:	051b      	lsls	r3, r3, #20
 8002606:	4313      	orrs	r3, r2
 8002608:	0020      	movs	r0, r4
 800260a:	0019      	movs	r1, r3
 800260c:	bd10      	pop	{r4, pc}
 800260e:	0022      	movs	r2, r4
 8002610:	380b      	subs	r0, #11
 8002612:	4082      	lsls	r2, r0
 8002614:	0312      	lsls	r2, r2, #12
 8002616:	2400      	movs	r4, #0
 8002618:	0b12      	lsrs	r2, r2, #12
 800261a:	e7f3      	b.n	8002604 <__aeabi_ui2d+0x2c>
 800261c:	0000041e 	.word	0x0000041e

08002620 <__aeabi_f2d>:
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	0242      	lsls	r2, r0, #9
 8002624:	0043      	lsls	r3, r0, #1
 8002626:	0fc4      	lsrs	r4, r0, #31
 8002628:	20fe      	movs	r0, #254	@ 0xfe
 800262a:	0e1b      	lsrs	r3, r3, #24
 800262c:	1c59      	adds	r1, r3, #1
 800262e:	0a55      	lsrs	r5, r2, #9
 8002630:	4208      	tst	r0, r1
 8002632:	d00c      	beq.n	800264e <__aeabi_f2d+0x2e>
 8002634:	21e0      	movs	r1, #224	@ 0xe0
 8002636:	0089      	lsls	r1, r1, #2
 8002638:	468c      	mov	ip, r1
 800263a:	076d      	lsls	r5, r5, #29
 800263c:	0b12      	lsrs	r2, r2, #12
 800263e:	4463      	add	r3, ip
 8002640:	051b      	lsls	r3, r3, #20
 8002642:	4313      	orrs	r3, r2
 8002644:	07e4      	lsls	r4, r4, #31
 8002646:	4323      	orrs	r3, r4
 8002648:	0028      	movs	r0, r5
 800264a:	0019      	movs	r1, r3
 800264c:	bd70      	pop	{r4, r5, r6, pc}
 800264e:	2b00      	cmp	r3, #0
 8002650:	d114      	bne.n	800267c <__aeabi_f2d+0x5c>
 8002652:	2d00      	cmp	r5, #0
 8002654:	d01b      	beq.n	800268e <__aeabi_f2d+0x6e>
 8002656:	0028      	movs	r0, r5
 8002658:	f7fd fe20 	bl	800029c <__clzsi2>
 800265c:	280a      	cmp	r0, #10
 800265e:	dc1c      	bgt.n	800269a <__aeabi_f2d+0x7a>
 8002660:	230b      	movs	r3, #11
 8002662:	002a      	movs	r2, r5
 8002664:	1a1b      	subs	r3, r3, r0
 8002666:	40da      	lsrs	r2, r3
 8002668:	0003      	movs	r3, r0
 800266a:	3315      	adds	r3, #21
 800266c:	409d      	lsls	r5, r3
 800266e:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <__aeabi_f2d+0x88>)
 8002670:	0312      	lsls	r2, r2, #12
 8002672:	1a1b      	subs	r3, r3, r0
 8002674:	055b      	lsls	r3, r3, #21
 8002676:	0b12      	lsrs	r2, r2, #12
 8002678:	0d5b      	lsrs	r3, r3, #21
 800267a:	e7e1      	b.n	8002640 <__aeabi_f2d+0x20>
 800267c:	2d00      	cmp	r5, #0
 800267e:	d009      	beq.n	8002694 <__aeabi_f2d+0x74>
 8002680:	0b13      	lsrs	r3, r2, #12
 8002682:	2280      	movs	r2, #128	@ 0x80
 8002684:	0312      	lsls	r2, r2, #12
 8002686:	431a      	orrs	r2, r3
 8002688:	076d      	lsls	r5, r5, #29
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <__aeabi_f2d+0x8c>)
 800268c:	e7d8      	b.n	8002640 <__aeabi_f2d+0x20>
 800268e:	2300      	movs	r3, #0
 8002690:	2200      	movs	r2, #0
 8002692:	e7d5      	b.n	8002640 <__aeabi_f2d+0x20>
 8002694:	2200      	movs	r2, #0
 8002696:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <__aeabi_f2d+0x8c>)
 8002698:	e7d2      	b.n	8002640 <__aeabi_f2d+0x20>
 800269a:	0003      	movs	r3, r0
 800269c:	002a      	movs	r2, r5
 800269e:	3b0b      	subs	r3, #11
 80026a0:	409a      	lsls	r2, r3
 80026a2:	2500      	movs	r5, #0
 80026a4:	e7e3      	b.n	800266e <__aeabi_f2d+0x4e>
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	00000389 	.word	0x00000389
 80026ac:	000007ff 	.word	0x000007ff

080026b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	0018      	movs	r0, r3
 80026ba:	230c      	movs	r3, #12
 80026bc:	001a      	movs	r2, r3
 80026be:	2100      	movs	r1, #0
 80026c0:	f009 f8ba 	bl	800b838 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026c4:	4b2d      	ldr	r3, [pc, #180]	@ (800277c <MX_ADC1_Init+0xcc>)
 80026c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002780 <MX_ADC1_Init+0xd0>)
 80026c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80026ca:	4b2c      	ldr	r3, [pc, #176]	@ (800277c <MX_ADC1_Init+0xcc>)
 80026cc:	22c0      	movs	r2, #192	@ 0xc0
 80026ce:	0612      	lsls	r2, r2, #24
 80026d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026d2:	4b2a      	ldr	r3, [pc, #168]	@ (800277c <MX_ADC1_Init+0xcc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026d8:	4b28      	ldr	r3, [pc, #160]	@ (800277c <MX_ADC1_Init+0xcc>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026de:	4b27      	ldr	r3, [pc, #156]	@ (800277c <MX_ADC1_Init+0xcc>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026e4:	4b25      	ldr	r3, [pc, #148]	@ (800277c <MX_ADC1_Init+0xcc>)
 80026e6:	2204      	movs	r2, #4
 80026e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026ea:	4b24      	ldr	r3, [pc, #144]	@ (800277c <MX_ADC1_Init+0xcc>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80026f0:	4b22      	ldr	r3, [pc, #136]	@ (800277c <MX_ADC1_Init+0xcc>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026f6:	4b21      	ldr	r3, [pc, #132]	@ (800277c <MX_ADC1_Init+0xcc>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80026fc:	4b1f      	ldr	r3, [pc, #124]	@ (800277c <MX_ADC1_Init+0xcc>)
 80026fe:	2201      	movs	r2, #1
 8002700:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002702:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <MX_ADC1_Init+0xcc>)
 8002704:	2220      	movs	r2, #32
 8002706:	2100      	movs	r1, #0
 8002708:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800270a:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <MX_ADC1_Init+0xcc>)
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002710:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <MX_ADC1_Init+0xcc>)
 8002712:	2200      	movs	r2, #0
 8002714:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002716:	4b19      	ldr	r3, [pc, #100]	@ (800277c <MX_ADC1_Init+0xcc>)
 8002718:	222c      	movs	r2, #44	@ 0x2c
 800271a:	2100      	movs	r1, #0
 800271c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800271e:	4b17      	ldr	r3, [pc, #92]	@ (800277c <MX_ADC1_Init+0xcc>)
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002724:	4b15      	ldr	r3, [pc, #84]	@ (800277c <MX_ADC1_Init+0xcc>)
 8002726:	2200      	movs	r2, #0
 8002728:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800272a:	4b14      	ldr	r3, [pc, #80]	@ (800277c <MX_ADC1_Init+0xcc>)
 800272c:	2200      	movs	r2, #0
 800272e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002730:	4b12      	ldr	r3, [pc, #72]	@ (800277c <MX_ADC1_Init+0xcc>)
 8002732:	223c      	movs	r2, #60	@ 0x3c
 8002734:	2100      	movs	r1, #0
 8002736:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002738:	4b10      	ldr	r3, [pc, #64]	@ (800277c <MX_ADC1_Init+0xcc>)
 800273a:	2200      	movs	r2, #0
 800273c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800273e:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <MX_ADC1_Init+0xcc>)
 8002740:	0018      	movs	r0, r3
 8002742:	f001 f885 	bl	8003850 <HAL_ADC_Init>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800274a:	f000 fd2f 	bl	80031ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	4a0c      	ldr	r2, [pc, #48]	@ (8002784 <MX_ADC1_Init+0xd4>)
 8002752:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002760:	1d3a      	adds	r2, r7, #4
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <MX_ADC1_Init+0xcc>)
 8002764:	0011      	movs	r1, r2
 8002766:	0018      	movs	r0, r3
 8002768:	f001 febc 	bl	80044e4 <HAL_ADC_ConfigChannel>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d001      	beq.n	8002774 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002770:	f000 fd1c 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002774:	46c0      	nop			@ (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b004      	add	sp, #16
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200000d0 	.word	0x200000d0
 8002780:	40012400 	.word	0x40012400
 8002784:	18000040 	.word	0x18000040

08002788 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b099      	sub	sp, #100	@ 0x64
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	234c      	movs	r3, #76	@ 0x4c
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	0018      	movs	r0, r3
 8002796:	2314      	movs	r3, #20
 8002798:	001a      	movs	r2, r3
 800279a:	2100      	movs	r1, #0
 800279c:	f009 f84c 	bl	800b838 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a0:	2414      	movs	r4, #20
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	0018      	movs	r0, r3
 80027a6:	2338      	movs	r3, #56	@ 0x38
 80027a8:	001a      	movs	r2, r3
 80027aa:	2100      	movs	r1, #0
 80027ac:	f009 f844 	bl	800b838 <memset>
  if(adcHandle->Instance==ADC1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a20      	ldr	r2, [pc, #128]	@ (8002838 <HAL_ADC_MspInit+0xb0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d139      	bne.n	800282e <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80027ba:	193b      	adds	r3, r7, r4
 80027bc:	2280      	movs	r2, #128	@ 0x80
 80027be:	01d2      	lsls	r2, r2, #7
 80027c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80027c2:	193b      	adds	r3, r7, r4
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027c8:	193b      	adds	r3, r7, r4
 80027ca:	0018      	movs	r0, r3
 80027cc:	f005 f8ce 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 80027d0:	1e03      	subs	r3, r0, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80027d4:	f000 fcea 	bl	80031ac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80027d8:	4b18      	ldr	r3, [pc, #96]	@ (800283c <HAL_ADC_MspInit+0xb4>)
 80027da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027dc:	4b17      	ldr	r3, [pc, #92]	@ (800283c <HAL_ADC_MspInit+0xb4>)
 80027de:	2180      	movs	r1, #128	@ 0x80
 80027e0:	0349      	lsls	r1, r1, #13
 80027e2:	430a      	orrs	r2, r1
 80027e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <HAL_ADC_MspInit+0xb4>)
 80027e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027ea:	2380      	movs	r3, #128	@ 0x80
 80027ec:	035b      	lsls	r3, r3, #13
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f4:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_ADC_MspInit+0xb4>)
 80027f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80027f8:	4b10      	ldr	r3, [pc, #64]	@ (800283c <HAL_ADC_MspInit+0xb4>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	430a      	orrs	r2, r1
 80027fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002800:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <HAL_ADC_MspInit+0xb4>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002804:	2201      	movs	r2, #1
 8002806:	4013      	ands	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN5
    PA2     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BATT_Pin|SOUND_Pin;
 800280c:	214c      	movs	r1, #76	@ 0x4c
 800280e:	187b      	adds	r3, r7, r1
 8002810:	2206      	movs	r2, #6
 8002812:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002814:	187b      	adds	r3, r7, r1
 8002816:	2203      	movs	r2, #3
 8002818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	187b      	adds	r3, r7, r1
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002820:	187a      	adds	r2, r7, r1
 8002822:	23a0      	movs	r3, #160	@ 0xa0
 8002824:	05db      	lsls	r3, r3, #23
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f002 fcc3 	bl	80051b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	b019      	add	sp, #100	@ 0x64
 8002834:	bd90      	pop	{r4, r7, pc}
 8002836:	46c0      	nop			@ (mov r8, r8)
 8002838:	40012400 	.word	0x40012400
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a09      	ldr	r2, [pc, #36]	@ (8002874 <HAL_ADC_MspDeInit+0x34>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10b      	bne.n	800286a <HAL_ADC_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_ADC_MspDeInit+0x38>)
 8002854:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002856:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <HAL_ADC_MspDeInit+0x38>)
 8002858:	4908      	ldr	r1, [pc, #32]	@ (800287c <HAL_ADC_MspDeInit+0x3c>)
 800285a:	400a      	ands	r2, r1
 800285c:	661a      	str	r2, [r3, #96]	@ 0x60

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN5
    PA2     ------> ADC1_IN6
    */
    HAL_GPIO_DeInit(GPIOA, BATT_Pin|SOUND_Pin);
 800285e:	23a0      	movs	r3, #160	@ 0xa0
 8002860:	05db      	lsls	r3, r3, #23
 8002862:	2106      	movs	r1, #6
 8002864:	0018      	movs	r0, r3
 8002866:	f002 fed7 	bl	8005618 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	40012400 	.word	0x40012400
 8002878:	40021000 	.word	0x40021000
 800287c:	ffefffff 	.word	0xffefffff

08002880 <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b08b      	sub	sp, #44	@ 0x2c
 8002884:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002886:	2414      	movs	r4, #20
 8002888:	193b      	adds	r3, r7, r4
 800288a:	0018      	movs	r0, r3
 800288c:	2314      	movs	r3, #20
 800288e:	001a      	movs	r2, r3
 8002890:	2100      	movs	r1, #0
 8002892:	f008 ffd1 	bl	800b838 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002896:	4b78      	ldr	r3, [pc, #480]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 8002898:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800289a:	4b77      	ldr	r3, [pc, #476]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 800289c:	2104      	movs	r1, #4
 800289e:	430a      	orrs	r2, r1
 80028a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80028a2:	4b75      	ldr	r3, [pc, #468]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ae:	4b72      	ldr	r3, [pc, #456]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 80028b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028b2:	4b71      	ldr	r3, [pc, #452]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 80028b4:	2120      	movs	r1, #32
 80028b6:	430a      	orrs	r2, r1
 80028b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80028ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 80028bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028be:	2220      	movs	r2, #32
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 80028c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028ca:	4b6b      	ldr	r3, [pc, #428]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80028d2:	4b69      	ldr	r3, [pc, #420]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	2201      	movs	r2, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028de:	4b66      	ldr	r3, [pc, #408]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 80028e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028e2:	4b65      	ldr	r3, [pc, #404]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 80028e4:	2102      	movs	r1, #2
 80028e6:	430a      	orrs	r2, r1
 80028e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80028ea:	4b63      	ldr	r3, [pc, #396]	@ (8002a78 <MX_GPIO_Init+0x1f8>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	2202      	movs	r2, #2
 80028f0:	4013      	ands	r3, r2
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_CS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 80028f6:	2388      	movs	r3, #136	@ 0x88
 80028f8:	0059      	lsls	r1, r3, #1
 80028fa:	23a0      	movs	r3, #160	@ 0xa0
 80028fc:	05db      	lsls	r3, r3, #23
 80028fe:	2201      	movs	r2, #1
 8002900:	0018      	movs	r0, r3
 8002902:	f002 ffbd 	bl	8005880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_SOUND_GPIO_Port, EN_SOUND_Pin, GPIO_PIN_RESET);
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	485c      	ldr	r0, [pc, #368]	@ (8002a7c <MX_GPIO_Init+0x1fc>)
 800290c:	2200      	movs	r2, #0
 800290e:	0019      	movs	r1, r3
 8002910:	f002 ffb6 	bl	8005880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002914:	193b      	adds	r3, r7, r4
 8002916:	22e0      	movs	r2, #224	@ 0xe0
 8002918:	0212      	lsls	r2, r2, #8
 800291a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800291c:	193b      	adds	r3, r7, r4
 800291e:	2203      	movs	r2, #3
 8002920:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	193b      	adds	r3, r7, r4
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002928:	193b      	adds	r3, r7, r4
 800292a:	4a55      	ldr	r2, [pc, #340]	@ (8002a80 <MX_GPIO_Init+0x200>)
 800292c:	0019      	movs	r1, r3
 800292e:	0010      	movs	r0, r2
 8002930:	f002 fc40 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002934:	193b      	adds	r3, r7, r4
 8002936:	220f      	movs	r2, #15
 8002938:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2203      	movs	r2, #3
 800293e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	193b      	adds	r3, r7, r4
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002946:	193b      	adds	r3, r7, r4
 8002948:	4a4e      	ldr	r2, [pc, #312]	@ (8002a84 <MX_GPIO_Init+0x204>)
 800294a:	0019      	movs	r1, r3
 800294c:	0010      	movs	r0, r2
 800294e:	f002 fc31 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8002952:	193b      	adds	r3, r7, r4
 8002954:	4a4c      	ldr	r2, [pc, #304]	@ (8002a88 <MX_GPIO_Init+0x208>)
 8002956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002958:	193b      	adds	r3, r7, r4
 800295a:	2203      	movs	r2, #3
 800295c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	193b      	adds	r3, r7, r4
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002964:	193a      	adds	r2, r7, r4
 8002966:	23a0      	movs	r3, #160	@ 0xa0
 8002968:	05db      	lsls	r3, r3, #23
 800296a:	0011      	movs	r1, r2
 800296c:	0018      	movs	r0, r3
 800296e:	f002 fc21 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_INT_Pin;
 8002972:	193b      	adds	r3, r7, r4
 8002974:	2208      	movs	r2, #8
 8002976:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002978:	193b      	adds	r3, r7, r4
 800297a:	2288      	movs	r2, #136	@ 0x88
 800297c:	0352      	lsls	r2, r2, #13
 800297e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	193b      	adds	r3, r7, r4
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LORA_INT_GPIO_Port, &GPIO_InitStruct);
 8002986:	193a      	adds	r2, r7, r4
 8002988:	23a0      	movs	r3, #160	@ 0xa0
 800298a:	05db      	lsls	r3, r3, #23
 800298c:	0011      	movs	r1, r2
 800298e:	0018      	movs	r0, r3
 8002990:	f002 fc10 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LORA_CS_Pin|LORA_RST_Pin;
 8002994:	0021      	movs	r1, r4
 8002996:	187b      	adds	r3, r7, r1
 8002998:	2288      	movs	r2, #136	@ 0x88
 800299a:	0052      	lsls	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299e:	000c      	movs	r4, r1
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	2201      	movs	r2, #1
 80029a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	193b      	adds	r3, r7, r4
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	193a      	adds	r2, r7, r4
 80029b4:	23a0      	movs	r3, #160	@ 0xa0
 80029b6:	05db      	lsls	r3, r3, #23
 80029b8:	0011      	movs	r1, r2
 80029ba:	0018      	movs	r0, r3
 80029bc:	f002 fbfa 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 80029c0:	193b      	adds	r3, r7, r4
 80029c2:	4a32      	ldr	r2, [pc, #200]	@ (8002a8c <MX_GPIO_Init+0x20c>)
 80029c4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	2203      	movs	r2, #3
 80029ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	193b      	adds	r3, r7, r4
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d2:	193b      	adds	r3, r7, r4
 80029d4:	4a29      	ldr	r2, [pc, #164]	@ (8002a7c <MX_GPIO_Init+0x1fc>)
 80029d6:	0019      	movs	r1, r3
 80029d8:	0010      	movs	r0, r2
 80029da:	f002 fbeb 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_SOUND_Pin;
 80029de:	0021      	movs	r1, r4
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2280      	movs	r2, #128	@ 0x80
 80029e4:	00d2      	lsls	r2, r2, #3
 80029e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	000c      	movs	r4, r1
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	2201      	movs	r2, #1
 80029ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	2200      	movs	r2, #0
 80029fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_SOUND_GPIO_Port, &GPIO_InitStruct);
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	4a1f      	ldr	r2, [pc, #124]	@ (8002a7c <MX_GPIO_Init+0x1fc>)
 8002a00:	0019      	movs	r1, r3
 8002a02:	0010      	movs	r0, r2
 8002a04:	f002 fbd6 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	2280      	movs	r2, #128	@ 0x80
 8002a0c:	0092      	lsls	r2, r2, #2
 8002a0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	2200      	movs	r2, #0
 8002a14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	193b      	adds	r3, r7, r4
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002a1c:	193a      	adds	r2, r7, r4
 8002a1e:	23a0      	movs	r3, #160	@ 0xa0
 8002a20:	05db      	lsls	r3, r3, #23
 8002a22:	0011      	movs	r1, r2
 8002a24:	0018      	movs	r0, r3
 8002a26:	f002 fbc5 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_WAKE_Pin;
 8002a2a:	0021      	movs	r1, r4
 8002a2c:	187b      	adds	r3, r7, r1
 8002a2e:	2280      	movs	r2, #128	@ 0x80
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	2284      	movs	r2, #132	@ 0x84
 8002a38:	0392      	lsls	r2, r2, #14
 8002a3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_WAKE_GPIO_Port, &GPIO_InitStruct);
 8002a42:	187a      	adds	r2, r7, r1
 8002a44:	23a0      	movs	r3, #160	@ 0xa0
 8002a46:	05db      	lsls	r3, r3, #23
 8002a48:	0011      	movs	r1, r2
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f002 fbb2 	bl	80051b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	2006      	movs	r0, #6
 8002a56:	f002 fb63 	bl	8005120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002a5a:	2006      	movs	r0, #6
 8002a5c:	f002 fb80 	bl	8005160 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2100      	movs	r1, #0
 8002a64:	2007      	movs	r0, #7
 8002a66:	f002 fb5b 	bl	8005120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002a6a:	2007      	movs	r0, #7
 8002a6c:	f002 fb78 	bl	8005160 <HAL_NVIC_EnableIRQ>

}
 8002a70:	46c0      	nop			@ (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b00b      	add	sp, #44	@ 0x2c
 8002a76:	bd90      	pop	{r4, r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	50000400 	.word	0x50000400
 8002a80:	50000800 	.word	0x50000800
 8002a84:	50001400 	.word	0x50001400
 8002a88:	00009401 	.word	0x00009401
 8002a8c:	0000fb3f 	.word	0x0000fb3f

08002a90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002a96:	4a1c      	ldr	r2, [pc, #112]	@ (8002b08 <MX_I2C1_Init+0x78>)
 8002a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b0c <MX_I2C1_Init+0x7c>)
 8002a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002aa0:	4b18      	ldr	r3, [pc, #96]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aa6:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aac:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ab2:	4b14      	ldr	r3, [pc, #80]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ab8:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002abe:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002acc:	0018      	movs	r0, r3
 8002ace:	f002 ff45 	bl	800595c <HAL_I2C_Init>
 8002ad2:	1e03      	subs	r3, r0, #0
 8002ad4:	d001      	beq.n	8002ada <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ad6:	f000 fb69 	bl	80031ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ada:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002adc:	2100      	movs	r1, #0
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f003 fdbc 	bl	800665c <HAL_I2CEx_ConfigAnalogFilter>
 8002ae4:	1e03      	subs	r3, r0, #0
 8002ae6:	d001      	beq.n	8002aec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ae8:	f000 fb60 	bl	80031ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <MX_I2C1_Init+0x74>)
 8002aee:	2100      	movs	r1, #0
 8002af0:	0018      	movs	r0, r3
 8002af2:	f003 fe27 	bl	8006744 <HAL_I2CEx_ConfigDigitalFilter>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d001      	beq.n	8002afe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002afa:	f000 fb57 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000134 	.word	0x20000134
 8002b08:	40005400 	.word	0x40005400
 8002b0c:	20303e5d 	.word	0x20303e5d

08002b10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b099      	sub	sp, #100	@ 0x64
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	234c      	movs	r3, #76	@ 0x4c
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	2314      	movs	r3, #20
 8002b20:	001a      	movs	r2, r3
 8002b22:	2100      	movs	r1, #0
 8002b24:	f008 fe88 	bl	800b838 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b28:	2414      	movs	r4, #20
 8002b2a:	193b      	adds	r3, r7, r4
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	2338      	movs	r3, #56	@ 0x38
 8002b30:	001a      	movs	r2, r3
 8002b32:	2100      	movs	r1, #0
 8002b34:	f008 fe80 	bl	800b838 <memset>
  if(i2cHandle->Instance==I2C1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a22      	ldr	r2, [pc, #136]	@ (8002bc8 <HAL_I2C_MspInit+0xb8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d13d      	bne.n	8002bbe <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	2220      	movs	r2, #32
 8002b46:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b48:	193b      	adds	r3, r7, r4
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b4e:	193b      	adds	r3, r7, r4
 8002b50:	0018      	movs	r0, r3
 8002b52:	f004 ff0b 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 8002b56:	1e03      	subs	r3, r0, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002b5a:	f000 fb27 	bl	80031ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <HAL_I2C_MspInit+0xbc>)
 8002b60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b62:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <HAL_I2C_MspInit+0xbc>)
 8002b64:	2102      	movs	r1, #2
 8002b66:	430a      	orrs	r2, r1
 8002b68:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002b6a:	4b18      	ldr	r3, [pc, #96]	@ (8002bcc <HAL_I2C_MspInit+0xbc>)
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	2202      	movs	r2, #2
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b76:	214c      	movs	r1, #76	@ 0x4c
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	22c0      	movs	r2, #192	@ 0xc0
 8002b7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	2212      	movs	r2, #18
 8002b82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	2204      	movs	r2, #4
 8002b94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd0 <HAL_I2C_MspInit+0xc0>)
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	0010      	movs	r0, r2
 8002b9e:	f002 fb09 	bl	80051b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <HAL_I2C_MspInit+0xbc>)
 8002ba4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ba6:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <HAL_I2C_MspInit+0xbc>)
 8002ba8:	2180      	movs	r1, #128	@ 0x80
 8002baa:	0389      	lsls	r1, r1, #14
 8002bac:	430a      	orrs	r2, r1
 8002bae:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_I2C_MspInit+0xbc>)
 8002bb2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	039b      	lsls	r3, r3, #14
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b019      	add	sp, #100	@ 0x64
 8002bc4:	bd90      	pop	{r4, r7, pc}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	40005400 	.word	0x40005400
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	50000400 	.word	0x50000400

08002bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b08d      	sub	sp, #52	@ 0x34
 8002bd8:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bda:	f000 fc22 	bl	8003422 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bde:	f000 f973 	bl	8002ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002be2:	f7ff fe4d 	bl	8002880 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002be6:	f000 faf1 	bl	80031cc <MX_SPI1_Init>
//  MX_ADC1_Init();
  MX_I2C1_Init();
 8002bea:	f7ff ff51 	bl	8002a90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BH1750_Init(&hi2c1);
 8002bee:	4ba2      	ldr	r3, [pc, #648]	@ (8002e78 <main+0x2a4>)
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f006 faa9 	bl	8009148 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8002bf6:	2011      	movs	r0, #17
 8002bf8:	f006 fada 	bl	80091b0 <BH1750_SetMode>

	SX126xIoInit();
 8002bfc:	f008 fbca 	bl	800b394 <SX126xIoInit>
	uint16_t readSyncWord = 0;
 8002c00:	1dbb      	adds	r3, r7, #6
 8002c02:	2200      	movs	r2, #0
 8002c04:	801a      	strh	r2, [r3, #0]
	SX126xReadRegisters(REG_LR_SYNCWORD, (uint8_t *)&readSyncWord, 2);
 8002c06:	1db9      	adds	r1, r7, #6
 8002c08:	23e8      	movs	r3, #232	@ 0xe8
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f008 fd0e 	bl	800b630 <SX126xReadRegisters>


	RadioEvents.TxDone = OnTxDone;
 8002c14:	4b99      	ldr	r3, [pc, #612]	@ (8002e7c <main+0x2a8>)
 8002c16:	4a9a      	ldr	r2, [pc, #616]	@ (8002e80 <main+0x2ac>)
 8002c18:	601a      	str	r2, [r3, #0]
	RadioEvents.RxDone = OnRxDone;
 8002c1a:	4b98      	ldr	r3, [pc, #608]	@ (8002e7c <main+0x2a8>)
 8002c1c:	4a99      	ldr	r2, [pc, #612]	@ (8002e84 <main+0x2b0>)
 8002c1e:	609a      	str	r2, [r3, #8]
	Radio.Init(&RadioEvents);
 8002c20:	4b99      	ldr	r3, [pc, #612]	@ (8002e88 <main+0x2b4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a95      	ldr	r2, [pc, #596]	@ (8002e7c <main+0x2a8>)
 8002c26:	0010      	movs	r0, r2
 8002c28:	4798      	blx	r3
	Radio.SetChannel(RF_FREQUENCY);
 8002c2a:	4b97      	ldr	r3, [pc, #604]	@ (8002e88 <main+0x2b4>)
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	4a97      	ldr	r2, [pc, #604]	@ (8002e8c <main+0x2b8>)
 8002c30:	0010      	movs	r0, r2
 8002c32:	4798      	blx	r3
	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8002c34:	4b94      	ldr	r3, [pc, #592]	@ (8002e88 <main+0x2b4>)
 8002c36:	6a1c      	ldr	r4, [r3, #32]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	9308      	str	r3, [sp, #32]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9307      	str	r3, [sp, #28]
 8002c40:	2300      	movs	r3, #0
 8002c42:	9306      	str	r3, [sp, #24]
 8002c44:	2300      	movs	r3, #0
 8002c46:	9305      	str	r3, [sp, #20]
 8002c48:	2301      	movs	r3, #1
 8002c4a:	9304      	str	r3, [sp, #16]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9303      	str	r3, [sp, #12]
 8002c50:	2308      	movs	r3, #8
 8002c52:	9302      	str	r3, [sp, #8]
 8002c54:	2301      	movs	r3, #1
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	2307      	movs	r3, #7
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2116      	movs	r1, #22
 8002c62:	2001      	movs	r0, #1
 8002c64:	47a0      	blx	r4
					  LORA_SPREADING_FACTOR, LORA_CODINGRATE,
					  LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
					  true, 0, 0, LORA_IQ_INVERSION_ON, 0);
	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8002c66:	4b88      	ldr	r3, [pc, #544]	@ (8002e88 <main+0x2b4>)
 8002c68:	69dc      	ldr	r4, [r3, #28]
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9308      	str	r3, [sp, #32]
 8002c72:	2300      	movs	r3, #0
 8002c74:	9307      	str	r3, [sp, #28]
 8002c76:	2300      	movs	r3, #0
 8002c78:	9306      	str	r3, [sp, #24]
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	9305      	str	r3, [sp, #20]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9304      	str	r3, [sp, #16]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9303      	str	r3, [sp, #12]
 8002c86:	2300      	movs	r3, #0
 8002c88:	9302      	str	r3, [sp, #8]
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	2301      	movs	r3, #1
 8002c94:	2207      	movs	r2, #7
 8002c96:	2100      	movs	r1, #0
 8002c98:	2001      	movs	r0, #1
 8002c9a:	47a0      	blx	r4
					  LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
					  LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
					  0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

	Radio.Rx(0);
 8002c9c:	4b7a      	ldr	r3, [pc, #488]	@ (8002e88 <main+0x2b4>)
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	4798      	blx	r3
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Radio.BgIrqProcess();
 8002ca4:	4b78      	ldr	r3, [pc, #480]	@ (8002e88 <main+0x2b4>)
 8002ca6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ca8:	4798      	blx	r3

	  if(start_process == 1){
 8002caa:	4b79      	ldr	r3, [pc, #484]	@ (8002e90 <main+0x2bc>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d111      	bne.n	8002cd8 <main+0x104>
		  if(HAL_GetTick() - tick > standby_time){
 8002cb4:	f000 fc26 	bl	8003504 <HAL_GetTick>
 8002cb8:	0002      	movs	r2, r0
 8002cba:	4b76      	ldr	r3, [pc, #472]	@ (8002e94 <main+0x2c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	1ad2      	subs	r2, r2, r3
 8002cc0:	4b75      	ldr	r3, [pc, #468]	@ (8002e98 <main+0x2c4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d907      	bls.n	8002cd8 <main+0x104>
			  tick = HAL_GetTick();
 8002cc8:	f000 fc1c 	bl	8003504 <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	4b71      	ldr	r3, [pc, #452]	@ (8002e94 <main+0x2c0>)
 8002cd0:	601a      	str	r2, [r3, #0]
			  start_measure = 1;
 8002cd2:	4b72      	ldr	r3, [pc, #456]	@ (8002e9c <main+0x2c8>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(start_measure == 1 && start_process == 1){
 8002cd8:	4b70      	ldr	r3, [pc, #448]	@ (8002e9c <main+0x2c8>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d150      	bne.n	8002d82 <main+0x1ae>
 8002ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8002e90 <main+0x2bc>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d14b      	bne.n	8002d82 <main+0x1ae>
		  if(HAL_GetTick() - tick > 1000){
 8002cea:	f000 fc0b 	bl	8003504 <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	4b68      	ldr	r3, [pc, #416]	@ (8002e94 <main+0x2c0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	1ad2      	subs	r2, r2, r3
 8002cf6:	23fa      	movs	r3, #250	@ 0xfa
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d941      	bls.n	8002d82 <main+0x1ae>
			  tick = HAL_GetTick();
 8002cfe:	f000 fc01 	bl	8003504 <HAL_GetTick>
 8002d02:	0002      	movs	r2, r0
 8002d04:	4b63      	ldr	r3, [pc, #396]	@ (8002e94 <main+0x2c0>)
 8002d06:	601a      	str	r2, [r3, #0]

			  BH1750_ReadLight(&light_lux);
 8002d08:	4b65      	ldr	r3, [pc, #404]	@ (8002ea0 <main+0x2cc>)
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f006 fae2 	bl	80092d4 <BH1750_ReadLight>
			  sound_decibel = adc_get_value(ADC_CHANNEL_6);
 8002d10:	4b64      	ldr	r3, [pc, #400]	@ (8002ea4 <main+0x2d0>)
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 f930 	bl	8002f78 <adc_get_value>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	4b63      	ldr	r3, [pc, #396]	@ (8002ea8 <main+0x2d4>)
 8002d1c:	601a      	str	r2, [r3, #0]
			  batt_volt = adc_get_value(ADC_CHANNEL_5);
 8002d1e:	4b63      	ldr	r3, [pc, #396]	@ (8002eac <main+0x2d8>)
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 f929 	bl	8002f78 <adc_get_value>
 8002d26:	0002      	movs	r2, r0
 8002d28:	4b61      	ldr	r3, [pc, #388]	@ (8002eb0 <main+0x2dc>)
 8002d2a:	601a      	str	r2, [r3, #0]

			  txpkt.deveui = SENSOR_DEVEUI;
 8002d2c:	4b61      	ldr	r3, [pc, #388]	@ (8002eb4 <main+0x2e0>)
 8002d2e:	2274      	movs	r2, #116	@ 0x74
 8002d30:	701a      	strb	r2, [r3, #0]
			  txpkt.cmd = CMD_STATUS;
 8002d32:	4b60      	ldr	r3, [pc, #384]	@ (8002eb4 <main+0x2e0>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	705a      	strb	r2, [r3, #1]
			  txpkt.value_len = 3;
 8002d38:	4b5e      	ldr	r3, [pc, #376]	@ (8002eb4 <main+0x2e0>)
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	709a      	strb	r2, [r3, #2]
			  txpkt.value[0] = batt_volt;
 8002d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002eb0 <main+0x2dc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	4b5b      	ldr	r3, [pc, #364]	@ (8002eb4 <main+0x2e0>)
 8002d46:	70da      	strb	r2, [r3, #3]
			  txpkt.value[1] = sound_decibel;
 8002d48:	4b57      	ldr	r3, [pc, #348]	@ (8002ea8 <main+0x2d4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b59      	ldr	r3, [pc, #356]	@ (8002eb4 <main+0x2e0>)
 8002d50:	711a      	strb	r2, [r3, #4]
			  txpkt.value[2] = (uint8_t)(light_lux*10.0);
 8002d52:	4b53      	ldr	r3, [pc, #332]	@ (8002ea0 <main+0x2cc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	1c18      	adds	r0, r3, #0
 8002d58:	f7ff fc62 	bl	8002620 <__aeabi_f2d>
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4b56      	ldr	r3, [pc, #344]	@ (8002eb8 <main+0x2e4>)
 8002d60:	f7fe fd6c 	bl	800183c <__aeabi_dmul>
 8002d64:	0002      	movs	r2, r0
 8002d66:	000b      	movs	r3, r1
 8002d68:	0010      	movs	r0, r2
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	f7fd fab4 	bl	80002d8 <__aeabi_d2uiz>
 8002d70:	0003      	movs	r3, r0
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b4f      	ldr	r3, [pc, #316]	@ (8002eb4 <main+0x2e0>)
 8002d76:	715a      	strb	r2, [r3, #5]
			  txpkt.req_ack = 0;
 8002d78:	4b4e      	ldr	r3, [pc, #312]	@ (8002eb4 <main+0x2e0>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	72da      	strb	r2, [r3, #11]
			  send_packet();
 8002d7e:	f000 f94b 	bl	8003018 <send_packet>
		  }
	  }

	  /// Check ACK timeout
	  if(txpkt.req_ack == 1 && txpkt.resp_ack == 0){
 8002d82:	4b4c      	ldr	r3, [pc, #304]	@ (8002eb4 <main+0x2e0>)
 8002d84:	7adb      	ldrb	r3, [r3, #11]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d10f      	bne.n	8002daa <main+0x1d6>
 8002d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002eb4 <main+0x2e0>)
 8002d8c:	7b1b      	ldrb	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10b      	bne.n	8002daa <main+0x1d6>
		  if(HAL_GetTick() - ack_timeout > 5000){
 8002d92:	f000 fbb7 	bl	8003504 <HAL_GetTick>
 8002d96:	0002      	movs	r2, r0
 8002d98:	4b48      	ldr	r3, [pc, #288]	@ (8002ebc <main+0x2e8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	4a48      	ldr	r2, [pc, #288]	@ (8002ec0 <main+0x2ec>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d902      	bls.n	8002daa <main+0x1d6>
			  txpkt.req_ack = 0;
 8002da4:	4b43      	ldr	r3, [pc, #268]	@ (8002eb4 <main+0x2e0>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	72da      	strb	r2, [r3, #11]
		  }
	  }

	  if(rxpkt.recv == 1){
 8002daa:	4b46      	ldr	r3, [pc, #280]	@ (8002ec4 <main+0x2f0>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d000      	beq.n	8002db4 <main+0x1e0>
 8002db2:	e777      	b.n	8002ca4 <main+0xd0>
		  if(rxpkt.deveui == SENSOR_DEVEUI || rxpkt.deveui == ALL_DEVEUI){
 8002db4:	4b43      	ldr	r3, [pc, #268]	@ (8002ec4 <main+0x2f0>)
 8002db6:	2246      	movs	r2, #70	@ 0x46
 8002db8:	5c9b      	ldrb	r3, [r3, r2]
 8002dba:	2b74      	cmp	r3, #116	@ 0x74
 8002dbc:	d004      	beq.n	8002dc8 <main+0x1f4>
 8002dbe:	4b41      	ldr	r3, [pc, #260]	@ (8002ec4 <main+0x2f0>)
 8002dc0:	2246      	movs	r2, #70	@ 0x46
 8002dc2:	5c9b      	ldrb	r3, [r3, r2]
 8002dc4:	2bff      	cmp	r3, #255	@ 0xff
 8002dc6:	d143      	bne.n	8002e50 <main+0x27c>
			  switch(rxpkt.cmd){
 8002dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ec4 <main+0x2f0>)
 8002dca:	2247      	movs	r2, #71	@ 0x47
 8002dcc:	5c9b      	ldrb	r3, [r3, r2]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d021      	beq.n	8002e16 <main+0x242>
 8002dd2:	dc27      	bgt.n	8002e24 <main+0x250>
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d008      	beq.n	8002dea <main+0x216>
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d123      	bne.n	8002e24 <main+0x250>
				  case CMD_ACK:
			  		  txpkt.req_ack = 0;
 8002ddc:	4b35      	ldr	r3, [pc, #212]	@ (8002eb4 <main+0x2e0>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	72da      	strb	r2, [r3, #11]
			  		  txpkt.resp_ack = 1;
 8002de2:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <main+0x2e0>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	731a      	strb	r2, [r3, #12]
				  break;
 8002de8:	e01d      	b.n	8002e26 <main+0x252>
				  case CMD_SET_STANDBY_TIME:
					  standby_time = rxpkt.value[0]*1000;
 8002dea:	4b36      	ldr	r3, [pc, #216]	@ (8002ec4 <main+0x2f0>)
 8002dec:	2249      	movs	r2, #73	@ 0x49
 8002dee:	5c9b      	ldrb	r3, [r3, r2]
 8002df0:	001a      	movs	r2, r3
 8002df2:	0013      	movs	r3, r2
 8002df4:	015b      	lsls	r3, r3, #5
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	001a      	movs	r2, r3
 8002e00:	4b25      	ldr	r3, [pc, #148]	@ (8002e98 <main+0x2c4>)
 8002e02:	601a      	str	r2, [r3, #0]
					  start_process = 1;
 8002e04:	4b22      	ldr	r3, [pc, #136]	@ (8002e90 <main+0x2bc>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
					  tick = HAL_GetTick();
 8002e0a:	f000 fb7b 	bl	8003504 <HAL_GetTick>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <main+0x2c0>)
 8002e12:	601a      	str	r2, [r3, #0]
				  break;
 8002e14:	e007      	b.n	8002e26 <main+0x252>
				  case CMD_STOP_SENSOR:
					  start_process = 0;
 8002e16:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <main+0x2bc>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
					  start_measure = 0;
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e9c <main+0x2c8>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
				  break;
 8002e22:	e000      	b.n	8002e26 <main+0x252>
				  default:
				  break;
 8002e24:	46c0      	nop			@ (mov r8, r8)
			  }

			  /// Packet require ACK
			  if(rxpkt.req_ack == 1){
 8002e26:	4b27      	ldr	r3, [pc, #156]	@ (8002ec4 <main+0x2f0>)
 8002e28:	2251      	movs	r2, #81	@ 0x51
 8002e2a:	5c9b      	ldrb	r3, [r3, r2]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d10f      	bne.n	8002e50 <main+0x27c>
				  txpkt.deveui = rxpkt.deveui;
 8002e30:	4b24      	ldr	r3, [pc, #144]	@ (8002ec4 <main+0x2f0>)
 8002e32:	2246      	movs	r2, #70	@ 0x46
 8002e34:	5c9a      	ldrb	r2, [r3, r2]
 8002e36:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb4 <main+0x2e0>)
 8002e38:	701a      	strb	r2, [r3, #0]
				  txpkt.cmd = CMD_ACK;
 8002e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb4 <main+0x2e0>)
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	705a      	strb	r2, [r3, #1]
				  txpkt.value_len = 0;
 8002e40:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb4 <main+0x2e0>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	709a      	strb	r2, [r3, #2]
				  txpkt.req_ack = 0;
 8002e46:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <main+0x2e0>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	72da      	strb	r2, [r3, #11]
				  send_packet();
 8002e4c:	f000 f8e4 	bl	8003018 <send_packet>
			  }
		  }

		  rxpkt.recv = 0;
 8002e50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec4 <main+0x2f0>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
		  rxpkt.recvlen = 0;
 8002e56:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <main+0x2f0>)
 8002e58:	2245      	movs	r2, #69	@ 0x45
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	5499      	strb	r1, [r3, r2]
		  rxpkt.deveui = 0;
 8002e5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ec4 <main+0x2f0>)
 8002e60:	2246      	movs	r2, #70	@ 0x46
 8002e62:	2100      	movs	r1, #0
 8002e64:	5499      	strb	r1, [r3, r2]
		  rxpkt.cmd = CMD_UNKNOWN;
 8002e66:	4b17      	ldr	r3, [pc, #92]	@ (8002ec4 <main+0x2f0>)
 8002e68:	2247      	movs	r2, #71	@ 0x47
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	5499      	strb	r1, [r3, r2]
		  rxpkt.value_len = 0;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ec4 <main+0x2f0>)
 8002e70:	2248      	movs	r2, #72	@ 0x48
 8002e72:	2100      	movs	r1, #0
 8002e74:	5499      	strb	r1, [r3, r2]
	  Radio.BgIrqProcess();
 8002e76:	e715      	b.n	8002ca4 <main+0xd0>
 8002e78:	20000134 	.word	0x20000134
 8002e7c:	20000188 	.word	0x20000188
 8002e80:	080030b5 	.word	0x080030b5
 8002e84:	080030cd 	.word	0x080030cd
 8002e88:	0800bf10 	.word	0x0800bf10
 8002e8c:	3703dcc0 	.word	0x3703dcc0
 8002e90:	200001a8 	.word	0x200001a8
 8002e94:	20000208 	.word	0x20000208
 8002e98:	20000204 	.word	0x20000204
 8002e9c:	2000020c 	.word	0x2000020c
 8002ea0:	20000210 	.word	0x20000210
 8002ea4:	18000040 	.word	0x18000040
 8002ea8:	20000214 	.word	0x20000214
 8002eac:	14000020 	.word	0x14000020
 8002eb0:	20000218 	.word	0x20000218
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	40240000 	.word	0x40240000
 8002ebc:	20000200 	.word	0x20000200
 8002ec0:	00001388 	.word	0x00001388
 8002ec4:	200001ac 	.word	0x200001ac

08002ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b097      	sub	sp, #92	@ 0x5c
 8002ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ece:	2410      	movs	r4, #16
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	2348      	movs	r3, #72	@ 0x48
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f008 fcad 	bl	800b838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ede:	003b      	movs	r3, r7
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f008 fca6 	bl	800b838 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f003 fc97 	bl	8006824 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002ef6:	0021      	movs	r1, r4
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	2210      	movs	r2, #16
 8002efc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	2201      	movs	r2, #1
 8002f02:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	2200      	movs	r2, #0
 8002f08:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	22b0      	movs	r2, #176	@ 0xb0
 8002f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2200      	movs	r2, #0
 8002f14:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f003 fd01 	bl	8006920 <HAL_RCC_OscConfig>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d001      	beq.n	8002f26 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002f22:	f000 f943 	bl	80031ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f26:	003b      	movs	r3, r7
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002f2c:	003b      	movs	r3, r7
 8002f2e:	2200      	movs	r2, #0
 8002f30:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f32:	003b      	movs	r3, r7
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f38:	003b      	movs	r3, r7
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f3e:	003b      	movs	r3, r7
 8002f40:	2101      	movs	r1, #1
 8002f42:	0018      	movs	r0, r3
 8002f44:	f004 fa70 	bl	8007428 <HAL_RCC_ClockConfig>
 8002f48:	1e03      	subs	r3, r0, #0
 8002f4a:	d001      	beq.n	8002f50 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002f4c:	f000 f92e 	bl	80031ac <Error_Handler>
  }
}
 8002f50:	46c0      	nop			@ (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b017      	add	sp, #92	@ 0x5c
 8002f56:	bd90      	pop	{r4, r7, pc}

08002f58 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	0002      	movs	r2, r0
 8002f60:	1dbb      	adds	r3, r7, #6
 8002f62:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == LORA_INT_Pin){
 8002f64:	1dbb      	adds	r3, r7, #6
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d101      	bne.n	8002f70 <HAL_GPIO_EXTI_Rising_Callback+0x18>
		extern void RadioOnDioIrq(void);
		RadioOnDioIrq();
 8002f6c:	f007 f9ae 	bl	800a2cc <RadioOnDioIrq>
	}
}
 8002f70:	46c0      	nop			@ (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <adc_get_value>:

uint32_t adc_get_value(uint32_t channel){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	uint32_t ADCxConvertedValues = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002f84:	2308      	movs	r3, #8
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	0018      	movs	r0, r3
 8002f8a:	230c      	movs	r3, #12
 8002f8c:	001a      	movs	r2, r3
 8002f8e:	2100      	movs	r1, #0
 8002f90:	f008 fc52 	bl	800b838 <memset>

	MX_ADC1_Init();
 8002f94:	f7ff fb8c 	bl	80026b0 <MX_ADC1_Init>
	if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8002f98:	4b1e      	ldr	r3, [pc, #120]	@ (8003014 <adc_get_value+0x9c>)
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f001 ff0c 	bl	8004db8 <HAL_ADCEx_Calibration_Start>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d001      	beq.n	8002fa8 <adc_get_value+0x30>
		Error_Handler();
 8002fa4:	f000 f902 	bl	80031ac <Error_Handler>

	sConfig.Channel = channel;
 8002fa8:	2108      	movs	r1, #8
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fbc:	187a      	adds	r2, r7, r1
 8002fbe:	4b15      	ldr	r3, [pc, #84]	@ (8003014 <adc_get_value+0x9c>)
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f001 fa8e 	bl	80044e4 <HAL_ADC_ConfigChannel>
 8002fc8:	1e03      	subs	r3, r0, #0
 8002fca:	d001      	beq.n	8002fd0 <adc_get_value+0x58>
		Error_Handler();
 8002fcc:	f000 f8ee 	bl	80031ac <Error_Handler>

	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8002fd0:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <adc_get_value+0x9c>)
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f001 f91a 	bl	800420c <HAL_ADC_Start>
 8002fd8:	1e03      	subs	r3, r0, #0
 8002fda:	d001      	beq.n	8002fe0 <adc_get_value+0x68>
		Error_Handler();
 8002fdc:	f000 f8e6 	bl	80031ac <Error_Handler>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	425a      	negs	r2, r3
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <adc_get_value+0x9c>)
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f001 f9bb 	bl	8004364 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(&hadc1);
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <adc_get_value+0x9c>)
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f001 f96b 	bl	80042cc <HAL_ADC_Stop>
	ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8002ff6:	4b07      	ldr	r3, [pc, #28]	@ (8003014 <adc_get_value+0x9c>)
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f001 fa57 	bl	80044ac <HAL_ADC_GetValue>
 8002ffe:	0003      	movs	r3, r0
 8003000:	617b      	str	r3, [r7, #20]

	HAL_ADC_DeInit(&hadc1);
 8003002:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <adc_get_value+0x9c>)
 8003004:	0018      	movs	r0, r3
 8003006:	f001 f855 	bl	80040b4 <HAL_ADC_DeInit>

	return ADCxConvertedValues;
 800300a:	697b      	ldr	r3, [r7, #20]
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b006      	add	sp, #24
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200000d0 	.word	0x200000d0

08003018 <send_packet>:





void send_packet(void){
 8003018:	b580      	push	{r7, lr}
 800301a:	b092      	sub	sp, #72	@ 0x48
 800301c:	af00      	add	r7, sp, #0
	uint8_t txbuffer[BUFFER_SIZE];

	txpkt.resp_ack = 0;
 800301e:	4b22      	ldr	r3, [pc, #136]	@ (80030a8 <send_packet+0x90>)
 8003020:	2200      	movs	r2, #0
 8003022:	731a      	strb	r2, [r3, #12]
	txbuffer[0] = txpkt.deveui;
 8003024:	4b20      	ldr	r3, [pc, #128]	@ (80030a8 <send_packet+0x90>)
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	701a      	strb	r2, [r3, #0]
	txbuffer[1] = (uint8_t)txpkt.cmd;
 800302c:	4b1e      	ldr	r3, [pc, #120]	@ (80030a8 <send_packet+0x90>)
 800302e:	785a      	ldrb	r2, [r3, #1]
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	705a      	strb	r2, [r3, #1]
	txbuffer[2] = txpkt.req_ack;
 8003034:	4b1c      	ldr	r3, [pc, #112]	@ (80030a8 <send_packet+0x90>)
 8003036:	7ada      	ldrb	r2, [r3, #11]
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	709a      	strb	r2, [r3, #2]
	txbuffer[3] = txpkt.value_len;
 800303c:	4b1a      	ldr	r3, [pc, #104]	@ (80030a8 <send_packet+0x90>)
 800303e:	789a      	ldrb	r2, [r3, #2]
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	70da      	strb	r2, [r3, #3]
	for(uint8_t i=0; i<txpkt.value_len; i++)
 8003044:	2347      	movs	r3, #71	@ 0x47
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	e00f      	b.n	800306e <send_packet+0x56>
		txbuffer[4+i] = txpkt.value[i];
 800304e:	2047      	movs	r0, #71	@ 0x47
 8003050:	183b      	adds	r3, r7, r0
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	183b      	adds	r3, r7, r0
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	3304      	adds	r3, #4
 800305a:	4913      	ldr	r1, [pc, #76]	@ (80030a8 <send_packet+0x90>)
 800305c:	188a      	adds	r2, r1, r2
 800305e:	78d1      	ldrb	r1, [r2, #3]
 8003060:	1d3a      	adds	r2, r7, #4
 8003062:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<txpkt.value_len; i++)
 8003064:	183b      	adds	r3, r7, r0
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	183b      	adds	r3, r7, r0
 800306a:	3201      	adds	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	4b0e      	ldr	r3, [pc, #56]	@ (80030a8 <send_packet+0x90>)
 8003070:	789b      	ldrb	r3, [r3, #2]
 8003072:	2247      	movs	r2, #71	@ 0x47
 8003074:	18ba      	adds	r2, r7, r2
 8003076:	7812      	ldrb	r2, [r2, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d3e8      	bcc.n	800304e <send_packet+0x36>

	if(txpkt.req_ack == 1) ack_timeout = HAL_GetTick();
 800307c:	4b0a      	ldr	r3, [pc, #40]	@ (80030a8 <send_packet+0x90>)
 800307e:	7adb      	ldrb	r3, [r3, #11]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d104      	bne.n	800308e <send_packet+0x76>
 8003084:	f000 fa3e 	bl	8003504 <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <send_packet+0x94>)
 800308c:	601a      	str	r2, [r3, #0]

	Radio.Send(txbuffer, 4+txpkt.value_len);
 800308e:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <send_packet+0x98>)
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	4a05      	ldr	r2, [pc, #20]	@ (80030a8 <send_packet+0x90>)
 8003094:	7892      	ldrb	r2, [r2, #2]
 8003096:	3204      	adds	r2, #4
 8003098:	b2d1      	uxtb	r1, r2
 800309a:	1d3a      	adds	r2, r7, #4
 800309c:	0010      	movs	r0, r2
 800309e:	4798      	blx	r3
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b012      	add	sp, #72	@ 0x48
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000000 	.word	0x20000000
 80030ac:	20000200 	.word	0x20000200
 80030b0:	0800bf10 	.word	0x0800bf10

080030b4 <OnTxDone>:

void OnTxDone(void){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
	Radio.Rx(0);
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <OnTxDone+0x14>)
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	2000      	movs	r0, #0
 80030be:	4798      	blx	r3
}
 80030c0:	46c0      	nop			@ (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	0800bf10 	.word	0x0800bf10

080030cc <OnRxDone>:

/**@brief Function to be executed on Radio Rx Done event
 */
void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr){
 80030cc:	b5b0      	push	{r4, r5, r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	000c      	movs	r4, r1
 80030d6:	0010      	movs	r0, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	250a      	movs	r5, #10
 80030dc:	197b      	adds	r3, r7, r5
 80030de:	1c22      	adds	r2, r4, #0
 80030e0:	801a      	strh	r2, [r3, #0]
 80030e2:	2408      	movs	r4, #8
 80030e4:	193b      	adds	r3, r7, r4
 80030e6:	1c02      	adds	r2, r0, #0
 80030e8:	801a      	strh	r2, [r3, #0]
 80030ea:	1dfb      	adds	r3, r7, #7
 80030ec:	1c0a      	adds	r2, r1, #0
 80030ee:	701a      	strb	r2, [r3, #0]
	rxpkt.recv = 1;
 80030f0:	4b2c      	ldr	r3, [pc, #176]	@ (80031a4 <OnRxDone+0xd8>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]

	rxpkt.rssi = rssi;
 80030f6:	4b2b      	ldr	r3, [pc, #172]	@ (80031a4 <OnRxDone+0xd8>)
 80030f8:	193a      	adds	r2, r7, r4
 80030fa:	8812      	ldrh	r2, [r2, #0]
 80030fc:	805a      	strh	r2, [r3, #2]
	rxpkt.snr = snr;
 80030fe:	4b29      	ldr	r3, [pc, #164]	@ (80031a4 <OnRxDone+0xd8>)
 8003100:	1dfa      	adds	r2, r7, #7
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	711a      	strb	r2, [r3, #4]

	rxpkt.recvlen = size;
 8003106:	197b      	adds	r3, r7, r5
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b2d9      	uxtb	r1, r3
 800310c:	4b25      	ldr	r3, [pc, #148]	@ (80031a4 <OnRxDone+0xd8>)
 800310e:	2245      	movs	r2, #69	@ 0x45
 8003110:	5499      	strb	r1, [r3, r2]
	memset(rxpkt.recvbuffer, 0, BUFFER_SIZE);
 8003112:	4b25      	ldr	r3, [pc, #148]	@ (80031a8 <OnRxDone+0xdc>)
 8003114:	2240      	movs	r2, #64	@ 0x40
 8003116:	2100      	movs	r1, #0
 8003118:	0018      	movs	r0, r3
 800311a:	f008 fb8d 	bl	800b838 <memset>
	memcpy(rxpkt.recvbuffer, payload, rxpkt.recvlen);
 800311e:	4b21      	ldr	r3, [pc, #132]	@ (80031a4 <OnRxDone+0xd8>)
 8003120:	2245      	movs	r2, #69	@ 0x45
 8003122:	5c9b      	ldrb	r3, [r3, r2]
 8003124:	001a      	movs	r2, r3
 8003126:	68f9      	ldr	r1, [r7, #12]
 8003128:	4b1f      	ldr	r3, [pc, #124]	@ (80031a8 <OnRxDone+0xdc>)
 800312a:	0018      	movs	r0, r3
 800312c:	f008 fbb0 	bl	800b890 <memcpy>

	rxpkt.deveui = rxpkt.recvbuffer[0];
 8003130:	4b1c      	ldr	r3, [pc, #112]	@ (80031a4 <OnRxDone+0xd8>)
 8003132:	7959      	ldrb	r1, [r3, #5]
 8003134:	4b1b      	ldr	r3, [pc, #108]	@ (80031a4 <OnRxDone+0xd8>)
 8003136:	2246      	movs	r2, #70	@ 0x46
 8003138:	5499      	strb	r1, [r3, r2]
	rxpkt.cmd = (lora_pktcmd_t)rxpkt.recvbuffer[1];
 800313a:	4b1a      	ldr	r3, [pc, #104]	@ (80031a4 <OnRxDone+0xd8>)
 800313c:	7999      	ldrb	r1, [r3, #6]
 800313e:	4b19      	ldr	r3, [pc, #100]	@ (80031a4 <OnRxDone+0xd8>)
 8003140:	2247      	movs	r2, #71	@ 0x47
 8003142:	5499      	strb	r1, [r3, r2]
	rxpkt.req_ack = rxpkt.recvbuffer[2];
 8003144:	4b17      	ldr	r3, [pc, #92]	@ (80031a4 <OnRxDone+0xd8>)
 8003146:	79d9      	ldrb	r1, [r3, #7]
 8003148:	4b16      	ldr	r3, [pc, #88]	@ (80031a4 <OnRxDone+0xd8>)
 800314a:	2251      	movs	r2, #81	@ 0x51
 800314c:	5499      	strb	r1, [r3, r2]
	rxpkt.value_len = rxpkt.recvbuffer[3];
 800314e:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <OnRxDone+0xd8>)
 8003150:	7a19      	ldrb	r1, [r3, #8]
 8003152:	4b14      	ldr	r3, [pc, #80]	@ (80031a4 <OnRxDone+0xd8>)
 8003154:	2248      	movs	r2, #72	@ 0x48
 8003156:	5499      	strb	r1, [r3, r2]
	for(uint8_t i=0; i<rxpkt.value_len; i++)
 8003158:	2317      	movs	r3, #23
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e013      	b.n	800318a <OnRxDone+0xbe>
		rxpkt.value[i] = rxpkt.recvbuffer[i+4];
 8003162:	2417      	movs	r4, #23
 8003164:	193b      	adds	r3, r7, r4
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	1d1a      	adds	r2, r3, #4
 800316a:	193b      	adds	r3, r7, r4
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	490d      	ldr	r1, [pc, #52]	@ (80031a4 <OnRxDone+0xd8>)
 8003170:	188a      	adds	r2, r1, r2
 8003172:	7950      	ldrb	r0, [r2, #5]
 8003174:	4a0b      	ldr	r2, [pc, #44]	@ (80031a4 <OnRxDone+0xd8>)
 8003176:	2149      	movs	r1, #73	@ 0x49
 8003178:	18d3      	adds	r3, r2, r3
 800317a:	185b      	adds	r3, r3, r1
 800317c:	1c02      	adds	r2, r0, #0
 800317e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<rxpkt.value_len; i++)
 8003180:	193b      	adds	r3, r7, r4
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	193b      	adds	r3, r7, r4
 8003186:	3201      	adds	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <OnRxDone+0xd8>)
 800318c:	2248      	movs	r2, #72	@ 0x48
 800318e:	5c9b      	ldrb	r3, [r3, r2]
 8003190:	2217      	movs	r2, #23
 8003192:	18ba      	adds	r2, r7, r2
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d3e3      	bcc.n	8003162 <OnRxDone+0x96>
}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b006      	add	sp, #24
 80031a2:	bdb0      	pop	{r4, r5, r7, pc}
 80031a4:	200001ac 	.word	0x200001ac
 80031a8:	200001b1 	.word	0x200001b1

080031ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031b0:	b672      	cpsid	i
}
 80031b2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031b4:	46c0      	nop			@ (mov r8, r8)
 80031b6:	e7fd      	b.n	80031b4 <Error_Handler+0x8>

080031b8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b002      	add	sp, #8
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <MX_SPI1_Init+0x74>)
 80031d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003244 <MX_SPI1_Init+0x78>)
 80031d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003240 <MX_SPI1_Init+0x74>)
 80031d8:	2282      	movs	r2, #130	@ 0x82
 80031da:	0052      	lsls	r2, r2, #1
 80031dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031de:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <MX_SPI1_Init+0x74>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031e4:	4b16      	ldr	r3, [pc, #88]	@ (8003240 <MX_SPI1_Init+0x74>)
 80031e6:	22e0      	movs	r2, #224	@ 0xe0
 80031e8:	00d2      	lsls	r2, r2, #3
 80031ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ec:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <MX_SPI1_Init+0x74>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031f2:	4b13      	ldr	r3, [pc, #76]	@ (8003240 <MX_SPI1_Init+0x74>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <MX_SPI1_Init+0x74>)
 80031fa:	2280      	movs	r2, #128	@ 0x80
 80031fc:	0092      	lsls	r2, r2, #2
 80031fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003200:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <MX_SPI1_Init+0x74>)
 8003202:	2208      	movs	r2, #8
 8003204:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003206:	4b0e      	ldr	r3, [pc, #56]	@ (8003240 <MX_SPI1_Init+0x74>)
 8003208:	2200      	movs	r2, #0
 800320a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <MX_SPI1_Init+0x74>)
 800320e:	2200      	movs	r2, #0
 8003210:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003212:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <MX_SPI1_Init+0x74>)
 8003214:	2200      	movs	r2, #0
 8003216:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003218:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <MX_SPI1_Init+0x74>)
 800321a:	2207      	movs	r2, #7
 800321c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800321e:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <MX_SPI1_Init+0x74>)
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003224:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <MX_SPI1_Init+0x74>)
 8003226:	2208      	movs	r2, #8
 8003228:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800322a:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <MX_SPI1_Init+0x74>)
 800322c:	0018      	movs	r0, r3
 800322e:	f004 fedd 	bl	8007fec <HAL_SPI_Init>
 8003232:	1e03      	subs	r3, r0, #0
 8003234:	d001      	beq.n	800323a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003236:	f7ff ffb9 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	2000021c 	.word	0x2000021c
 8003244:	40013000 	.word	0x40013000

08003248 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b08b      	sub	sp, #44	@ 0x2c
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	2414      	movs	r4, #20
 8003252:	193b      	adds	r3, r7, r4
 8003254:	0018      	movs	r0, r3
 8003256:	2314      	movs	r3, #20
 8003258:	001a      	movs	r2, r3
 800325a:	2100      	movs	r1, #0
 800325c:	f008 faec 	bl	800b838 <memset>
  if(spiHandle->Instance==SPI1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1b      	ldr	r2, [pc, #108]	@ (80032d4 <HAL_SPI_MspInit+0x8c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d130      	bne.n	80032cc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800326a:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <HAL_SPI_MspInit+0x90>)
 800326c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800326e:	4b1a      	ldr	r3, [pc, #104]	@ (80032d8 <HAL_SPI_MspInit+0x90>)
 8003270:	2180      	movs	r1, #128	@ 0x80
 8003272:	0149      	lsls	r1, r1, #5
 8003274:	430a      	orrs	r2, r1
 8003276:	661a      	str	r2, [r3, #96]	@ 0x60
 8003278:	4b17      	ldr	r3, [pc, #92]	@ (80032d8 <HAL_SPI_MspInit+0x90>)
 800327a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	015b      	lsls	r3, r3, #5
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003286:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <HAL_SPI_MspInit+0x90>)
 8003288:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <HAL_SPI_MspInit+0x90>)
 800328c:	2101      	movs	r1, #1
 800328e:	430a      	orrs	r2, r1
 8003290:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003292:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <HAL_SPI_MspInit+0x90>)
 8003294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003296:	2201      	movs	r2, #1
 8003298:	4013      	ands	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800329e:	0021      	movs	r1, r4
 80032a0:	187b      	adds	r3, r7, r1
 80032a2:	22e0      	movs	r2, #224	@ 0xe0
 80032a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	2202      	movs	r2, #2
 80032aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	2200      	movs	r2, #0
 80032b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	2205      	movs	r2, #5
 80032bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	187a      	adds	r2, r7, r1
 80032c0:	23a0      	movs	r3, #160	@ 0xa0
 80032c2:	05db      	lsls	r3, r3, #23
 80032c4:	0011      	movs	r1, r2
 80032c6:	0018      	movs	r0, r3
 80032c8:	f001 ff74 	bl	80051b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b00b      	add	sp, #44	@ 0x2c
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	40013000 	.word	0x40013000
 80032d8:	40021000 	.word	0x40021000

080032dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <HAL_MspInit+0x44>)
 80032e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003320 <HAL_MspInit+0x44>)
 80032e8:	2180      	movs	r1, #128	@ 0x80
 80032ea:	0549      	lsls	r1, r1, #21
 80032ec:	430a      	orrs	r2, r1
 80032ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80032f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <HAL_MspInit+0x44>)
 80032f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032f4:	2380      	movs	r3, #128	@ 0x80
 80032f6:	055b      	lsls	r3, r3, #21
 80032f8:	4013      	ands	r3, r2
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fe:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <HAL_MspInit+0x44>)
 8003300:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003302:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <HAL_MspInit+0x44>)
 8003304:	2101      	movs	r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	661a      	str	r2, [r3, #96]	@ 0x60
 800330a:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_MspInit+0x44>)
 800330c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330e:	2201      	movs	r2, #1
 8003310:	4013      	ands	r3, r2
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b002      	add	sp, #8
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	40021000 	.word	0x40021000

08003324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003328:	46c0      	nop			@ (mov r8, r8)
 800332a:	e7fd      	b.n	8003328 <NMI_Handler+0x4>

0800332c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003330:	46c0      	nop			@ (mov r8, r8)
 8003332:	e7fd      	b.n	8003330 <HardFault_Handler+0x4>

08003334 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003338:	46c0      	nop			@ (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800334c:	f000 f8ca 	bl	80034e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003350:	46c0      	nop			@ (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_INT_Pin);
 800335a:	2008      	movs	r0, #8
 800335c:	f002 faca 	bl	80058f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003360:	46c0      	nop			@ (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_WAKE_Pin);
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	0018      	movs	r0, r3
 8003370:	f002 fac0 	bl	80058f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003374:	46c0      	nop			@ (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003380:	4b11      	ldr	r3, [pc, #68]	@ (80033c8 <SystemInit+0x4c>)
 8003382:	2280      	movs	r2, #128	@ 0x80
 8003384:	0512      	lsls	r2, r2, #20
 8003386:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8003388:	4a10      	ldr	r2, [pc, #64]	@ (80033cc <SystemInit+0x50>)
 800338a:	2380      	movs	r3, #128	@ 0x80
 800338c:	58d2      	ldr	r2, [r2, r3]
 800338e:	2380      	movs	r3, #128	@ 0x80
 8003390:	025b      	lsls	r3, r3, #9
 8003392:	401a      	ands	r2, r3
 8003394:	2380      	movs	r3, #128	@ 0x80
 8003396:	025b      	lsls	r3, r3, #9
 8003398:	429a      	cmp	r2, r3
 800339a:	d112      	bne.n	80033c2 <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <SystemInit+0x50>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	22ff      	movs	r2, #255	@ 0xff
 80033a2:	4013      	ands	r3, r2
 80033a4:	2bcc      	cmp	r3, #204	@ 0xcc
 80033a6:	d00c      	beq.n	80033c2 <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 80033a8:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <SystemInit+0x50>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	22ff      	movs	r2, #255	@ 0xff
 80033ae:	4013      	ands	r3, r2
 80033b0:	2baa      	cmp	r3, #170	@ 0xaa
 80033b2:	d006      	beq.n	80033c2 <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 80033b4:	4b05      	ldr	r3, [pc, #20]	@ (80033cc <SystemInit+0x50>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b04      	ldr	r3, [pc, #16]	@ (80033cc <SystemInit+0x50>)
 80033ba:	2180      	movs	r1, #128	@ 0x80
 80033bc:	02c9      	lsls	r1, r1, #11
 80033be:	430a      	orrs	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	e000ed00 	.word	0xe000ed00
 80033cc:	40022000 	.word	0x40022000

080033d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033d0:	480d      	ldr	r0, [pc, #52]	@ (8003408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033d4:	f7ff ffd2 	bl	800337c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033d8:	480c      	ldr	r0, [pc, #48]	@ (800340c <LoopForever+0x6>)
  ldr r1, =_edata
 80033da:	490d      	ldr	r1, [pc, #52]	@ (8003410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003414 <LoopForever+0xe>)
  movs r3, #0
 80033de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e0:	e002      	b.n	80033e8 <LoopCopyDataInit>

080033e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e6:	3304      	adds	r3, #4

080033e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033ec:	d3f9      	bcc.n	80033e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033f0:	4c0a      	ldr	r4, [pc, #40]	@ (800341c <LoopForever+0x16>)
  movs r3, #0
 80033f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f4:	e001      	b.n	80033fa <LoopFillZerobss>

080033f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f8:	3204      	adds	r2, #4

080033fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033fc:	d3fb      	bcc.n	80033f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033fe:	f008 fa23 	bl	800b848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003402:	f7ff fbe7 	bl	8002bd4 <main>

08003406 <LoopForever>:

LoopForever:
  b LoopForever
 8003406:	e7fe      	b.n	8003406 <LoopForever>
  ldr   r0, =_estack
 8003408:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800340c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003410:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8003414:	0800c060 	.word	0x0800c060
  ldr r2, =_sbss
 8003418:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800341c:	20000418 	.word	0x20000418

08003420 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003420:	e7fe      	b.n	8003420 <ADC_COMP1_IRQHandler>

08003422 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800342e:	2003      	movs	r0, #3
 8003430:	f000 f80e 	bl	8003450 <HAL_InitTick>
 8003434:	1e03      	subs	r3, r0, #0
 8003436:	d003      	beq.n	8003440 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003438:	1dfb      	adds	r3, r7, #7
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	e001      	b.n	8003444 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003440:	f7ff ff4c 	bl	80032dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	781b      	ldrb	r3, [r3, #0]
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003458:	230f      	movs	r3, #15
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8003460:	4b1d      	ldr	r3, [pc, #116]	@ (80034d8 <HAL_InitTick+0x88>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02b      	beq.n	80034c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003468:	4b1c      	ldr	r3, [pc, #112]	@ (80034dc <HAL_InitTick+0x8c>)
 800346a:	681c      	ldr	r4, [r3, #0]
 800346c:	4b1a      	ldr	r3, [pc, #104]	@ (80034d8 <HAL_InitTick+0x88>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0019      	movs	r1, r3
 8003472:	23fa      	movs	r3, #250	@ 0xfa
 8003474:	0098      	lsls	r0, r3, #2
 8003476:	f7fc fe47 	bl	8000108 <__udivsi3>
 800347a:	0003      	movs	r3, r0
 800347c:	0019      	movs	r1, r3
 800347e:	0020      	movs	r0, r4
 8003480:	f7fc fe42 	bl	8000108 <__udivsi3>
 8003484:	0003      	movs	r3, r0
 8003486:	0018      	movs	r0, r3
 8003488:	f001 fe86 	bl	8005198 <HAL_SYSTICK_Config>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d112      	bne.n	80034b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d80a      	bhi.n	80034ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	2301      	movs	r3, #1
 800349a:	425b      	negs	r3, r3
 800349c:	2200      	movs	r2, #0
 800349e:	0018      	movs	r0, r3
 80034a0:	f001 fe3e 	bl	8005120 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034a4:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <HAL_InitTick+0x90>)
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e00d      	b.n	80034c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80034ac:	230f      	movs	r3, #15
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e008      	b.n	80034c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034b6:	230f      	movs	r3, #15
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e003      	b.n	80034c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034c0:	230f      	movs	r3, #15
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034c8:	230f      	movs	r3, #15
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	781b      	ldrb	r3, [r3, #0]
}
 80034ce:	0018      	movs	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b005      	add	sp, #20
 80034d4:	bd90      	pop	{r4, r7, pc}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	20000018 	.word	0x20000018
 80034dc:	20000010 	.word	0x20000010
 80034e0:	20000014 	.word	0x20000014

080034e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e8:	4b04      	ldr	r3, [pc, #16]	@ (80034fc <HAL_IncTick+0x18>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <HAL_IncTick+0x1c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	18d2      	adds	r2, r2, r3
 80034f2:	4b02      	ldr	r3, [pc, #8]	@ (80034fc <HAL_IncTick+0x18>)
 80034f4:	601a      	str	r2, [r3, #0]
}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20000280 	.word	0x20000280
 8003500:	20000018 	.word	0x20000018

08003504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  return uwTick;
 8003508:	4b02      	ldr	r3, [pc, #8]	@ (8003514 <HAL_GetTick+0x10>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	20000280 	.word	0x20000280

08003518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7ff fff0 	bl	8003504 <HAL_GetTick>
 8003524:	0003      	movs	r3, r0
 8003526:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3301      	adds	r3, #1
 8003530:	d004      	beq.n	800353c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003532:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <HAL_Delay+0x40>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	18d3      	adds	r3, r2, r3
 800353a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800353c:	46c0      	nop			@ (mov r8, r8)
 800353e:	f7ff ffe1 	bl	8003504 <HAL_GetTick>
 8003542:	0002      	movs	r2, r0
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	429a      	cmp	r2, r3
 800354c:	d8f7      	bhi.n	800353e <HAL_Delay+0x26>
  {
  }
}
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	46c0      	nop			@ (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	b004      	add	sp, #16
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000018 	.word	0x20000018

0800355c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a05      	ldr	r2, [pc, #20]	@ (8003580 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800356c:	401a      	ands	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	601a      	str	r2, [r3, #0]
}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	b002      	add	sp, #8
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	fe3fffff 	.word	0xfe3fffff

08003584 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	23e0      	movs	r3, #224	@ 0xe0
 8003592:	045b      	lsls	r3, r3, #17
 8003594:	4013      	ands	r3, r2
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b002      	add	sp, #8
 800359c:	bd80      	pop	{r7, pc}

0800359e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	2104      	movs	r1, #4
 80035b2:	400a      	ands	r2, r1
 80035b4:	2107      	movs	r1, #7
 80035b6:	4091      	lsls	r1, r2
 80035b8:	000a      	movs	r2, r1
 80035ba:	43d2      	mvns	r2, r2
 80035bc:	401a      	ands	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2104      	movs	r1, #4
 80035c2:	400b      	ands	r3, r1
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4099      	lsls	r1, r3
 80035c8:	000b      	movs	r3, r1
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80035d0:	46c0      	nop			@ (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b004      	add	sp, #16
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	2104      	movs	r1, #4
 80035ea:	400a      	ands	r2, r1
 80035ec:	2107      	movs	r1, #7
 80035ee:	4091      	lsls	r1, r2
 80035f0:	000a      	movs	r2, r1
 80035f2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2104      	movs	r1, #4
 80035f8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80035fa:	40da      	lsrs	r2, r3
 80035fc:	0013      	movs	r3, r2
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}

08003606 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	23c0      	movs	r3, #192	@ 0xc0
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	4013      	ands	r3, r2
 8003618:	d101      	bne.n	800361e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800361e:	2300      	movs	r3, #0
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}

08003628 <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	211f      	movs	r1, #31
 800363c:	400a      	ands	r2, r1
 800363e:	210f      	movs	r1, #15
 8003640:	4091      	lsls	r1, r2
 8003642:	000a      	movs	r2, r1
 8003644:	43d2      	mvns	r2, r2
 8003646:	401a      	ands	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0e9b      	lsrs	r3, r3, #26
 800364c:	210f      	movs	r1, #15
 800364e:	4019      	ands	r1, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	201f      	movs	r0, #31
 8003654:	4003      	ands	r3, r0
 8003656:	4099      	lsls	r1, r3
 8003658:	000b      	movs	r3, r1
 800365a:	431a      	orrs	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003660:	46c0      	nop			@ (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b004      	add	sp, #16
 8003666:	bd80      	pop	{r7, pc}

08003668 <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	025b      	lsls	r3, r3, #9
 800367a:	0a5b      	lsrs	r3, r3, #9
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	b002      	add	sp, #8
 8003688:	bd80      	pop	{r7, pc}

0800368a <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	0252      	lsls	r2, r2, #9
 800369c:	0a52      	lsrs	r2, r2, #9
 800369e:	43d2      	mvns	r2, r2
 80036a0:	401a      	ands	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b002      	add	sp, #8
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	0212      	lsls	r2, r2, #8
 80036c4:	43d2      	mvns	r2, r2
 80036c6:	401a      	ands	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	400b      	ands	r3, r1
 80036d0:	4904      	ldr	r1, [pc, #16]	@ (80036e4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80036d2:	400b      	ands	r3, r1
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b004      	add	sp, #16
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	7fffff00 	.word	0x7fffff00

080036e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a05      	ldr	r2, [pc, #20]	@ (800370c <LL_ADC_EnableInternalRegulator+0x24>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	2280      	movs	r2, #128	@ 0x80
 80036fa:	0552      	lsls	r2, r2, #21
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b002      	add	sp, #8
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	6fffffe8 	.word	0x6fffffe8

08003710 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a03      	ldr	r2, [pc, #12]	@ (800372c <LL_ADC_DisableInternalRegulator+0x1c>)
 800371e:	401a      	ands	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	609a      	str	r2, [r3, #8]
}
 8003724:	46c0      	nop			@ (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b002      	add	sp, #8
 800372a:	bd80      	pop	{r7, pc}
 800372c:	6fffffe8 	.word	0x6fffffe8

08003730 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	055b      	lsls	r3, r3, #21
 8003740:	401a      	ands	r2, r3
 8003742:	2380      	movs	r3, #128	@ 0x80
 8003744:	055b      	lsls	r3, r3, #21
 8003746:	429a      	cmp	r2, r3
 8003748:	d101      	bne.n	800374e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800374e:	2300      	movs	r3, #0
}
 8003750:	0018      	movs	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}

08003758 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a04      	ldr	r2, [pc, #16]	@ (8003778 <LL_ADC_Enable+0x20>)
 8003766:	4013      	ands	r3, r2
 8003768:	2201      	movs	r2, #1
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}
 8003778:	7fffffe8 	.word	0x7fffffe8

0800377c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a04      	ldr	r2, [pc, #16]	@ (800379c <LL_ADC_Disable+0x20>)
 800378a:	4013      	ands	r3, r2
 800378c:	2202      	movs	r2, #2
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003794:	46c0      	nop			@ (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}
 800379c:	7fffffe8 	.word	0x7fffffe8

080037a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2201      	movs	r2, #1
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <LL_ADC_IsEnabled+0x18>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <LL_ADC_IsEnabled+0x1a>
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b002      	add	sp, #8
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2202      	movs	r2, #2
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d101      	bne.n	80037da <LL_ADC_IsDisableOngoing+0x18>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <LL_ADC_IsDisableOngoing+0x1a>
 80037da:	2300      	movs	r3, #0
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a04      	ldr	r2, [pc, #16]	@ (8003804 <LL_ADC_REG_StartConversion+0x20>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	2204      	movs	r2, #4
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037fc:	46c0      	nop			@ (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}
 8003804:	7fffffe8 	.word	0x7fffffe8

08003808 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a04      	ldr	r2, [pc, #16]	@ (8003828 <LL_ADC_REG_StopConversion+0x20>)
 8003816:	4013      	ands	r3, r2
 8003818:	2210      	movs	r2, #16
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003820:	46c0      	nop			@ (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}
 8003828:	7fffffe8 	.word	0x7fffffe8

0800382c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2204      	movs	r2, #4
 800383a:	4013      	ands	r3, r2
 800383c:	2b04      	cmp	r3, #4
 800383e:	d101      	bne.n	8003844 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003844:	2300      	movs	r3, #0
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b002      	add	sp, #8
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003858:	231f      	movs	r3, #31
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <HAL_ADC_Init+0x28>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f000 fc0f 	bl	8004096 <HAL_ADC_Init+0x846>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4ac3      	ldr	r2, [pc, #780]	@ (8003b8c <HAL_ADC_Init+0x33c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <HAL_ADC_Init+0x42>
 8003882:	238c      	movs	r3, #140	@ 0x8c
 8003884:	33ff      	adds	r3, #255	@ 0xff
 8003886:	001a      	movs	r2, r3
 8003888:	4bc1      	ldr	r3, [pc, #772]	@ (8003b90 <HAL_ADC_Init+0x340>)
 800388a:	0011      	movs	r1, r2
 800388c:	0018      	movs	r0, r3
 800388e:	f7ff fc93 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	23c0      	movs	r3, #192	@ 0xc0
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	429a      	cmp	r2, r3
 800389c:	d058      	beq.n	8003950 <HAL_ADC_Init+0x100>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	2380      	movs	r3, #128	@ 0x80
 80038a4:	05db      	lsls	r3, r3, #23
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d052      	beq.n	8003950 <HAL_ADC_Init+0x100>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	2380      	movs	r3, #128	@ 0x80
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d04c      	beq.n	8003950 <HAL_ADC_Init+0x100>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d048      	beq.n	8003950 <HAL_ADC_Init+0x100>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	2380      	movs	r3, #128	@ 0x80
 80038c4:	02db      	lsls	r3, r3, #11
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d042      	beq.n	8003950 <HAL_ADC_Init+0x100>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	2380      	movs	r3, #128	@ 0x80
 80038d0:	031b      	lsls	r3, r3, #12
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d03c      	beq.n	8003950 <HAL_ADC_Init+0x100>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	23c0      	movs	r3, #192	@ 0xc0
 80038dc:	031b      	lsls	r3, r3, #12
 80038de:	429a      	cmp	r2, r3
 80038e0:	d036      	beq.n	8003950 <HAL_ADC_Init+0x100>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	2380      	movs	r3, #128	@ 0x80
 80038e8:	035b      	lsls	r3, r3, #13
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d030      	beq.n	8003950 <HAL_ADC_Init+0x100>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	23a0      	movs	r3, #160	@ 0xa0
 80038f4:	035b      	lsls	r3, r3, #13
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d02a      	beq.n	8003950 <HAL_ADC_Init+0x100>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	23c0      	movs	r3, #192	@ 0xc0
 8003900:	035b      	lsls	r3, r3, #13
 8003902:	429a      	cmp	r2, r3
 8003904:	d024      	beq.n	8003950 <HAL_ADC_Init+0x100>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	23e0      	movs	r3, #224	@ 0xe0
 800390c:	035b      	lsls	r3, r3, #13
 800390e:	429a      	cmp	r2, r3
 8003910:	d01e      	beq.n	8003950 <HAL_ADC_Init+0x100>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	2380      	movs	r3, #128	@ 0x80
 8003918:	039b      	lsls	r3, r3, #14
 800391a:	429a      	cmp	r2, r3
 800391c:	d018      	beq.n	8003950 <HAL_ADC_Init+0x100>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	2390      	movs	r3, #144	@ 0x90
 8003924:	039b      	lsls	r3, r3, #14
 8003926:	429a      	cmp	r2, r3
 8003928:	d012      	beq.n	8003950 <HAL_ADC_Init+0x100>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	23a0      	movs	r3, #160	@ 0xa0
 8003930:	039b      	lsls	r3, r3, #14
 8003932:	429a      	cmp	r2, r3
 8003934:	d00c      	beq.n	8003950 <HAL_ADC_Init+0x100>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	23b0      	movs	r3, #176	@ 0xb0
 800393c:	039b      	lsls	r3, r3, #14
 800393e:	429a      	cmp	r2, r3
 8003940:	d006      	beq.n	8003950 <HAL_ADC_Init+0x100>
 8003942:	23c6      	movs	r3, #198	@ 0xc6
 8003944:	005a      	lsls	r2, r3, #1
 8003946:	4b92      	ldr	r3, [pc, #584]	@ (8003b90 <HAL_ADC_Init+0x340>)
 8003948:	0011      	movs	r1, r2
 800394a:	0018      	movs	r0, r3
 800394c:	f7ff fc34 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_ADC_Init+0x130>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d00f      	beq.n	8003980 <HAL_ADC_Init+0x130>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b10      	cmp	r3, #16
 8003966:	d00b      	beq.n	8003980 <HAL_ADC_Init+0x130>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b18      	cmp	r3, #24
 800396e:	d007      	beq.n	8003980 <HAL_ADC_Init+0x130>
 8003970:	238e      	movs	r3, #142	@ 0x8e
 8003972:	33ff      	adds	r3, #255	@ 0xff
 8003974:	001a      	movs	r2, r3
 8003976:	4b86      	ldr	r3, [pc, #536]	@ (8003b90 <HAL_ADC_Init+0x340>)
 8003978:	0011      	movs	r1, r2
 800397a:	0018      	movs	r0, r3
 800397c:	f7ff fc1c 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_ADC_Init+0x14e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b20      	cmp	r3, #32
 800398e:	d006      	beq.n	800399e <HAL_ADC_Init+0x14e>
 8003990:	23c7      	movs	r3, #199	@ 0xc7
 8003992:	005a      	lsls	r2, r3, #1
 8003994:	4b7e      	ldr	r3, [pc, #504]	@ (8003b90 <HAL_ADC_Init+0x340>)
 8003996:	0011      	movs	r1, r2
 8003998:	0018      	movs	r0, r3
 800399a:	f7ff fc0d 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d018      	beq.n	80039d8 <HAL_ADC_Init+0x188>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	2380      	movs	r3, #128	@ 0x80
 80039ac:	039b      	lsls	r3, r3, #14
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d012      	beq.n	80039d8 <HAL_ADC_Init+0x188>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d00c      	beq.n	80039d8 <HAL_ADC_Init+0x188>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	4a74      	ldr	r2, [pc, #464]	@ (8003b94 <HAL_ADC_Init+0x344>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d007      	beq.n	80039d8 <HAL_ADC_Init+0x188>
 80039c8:	2390      	movs	r3, #144	@ 0x90
 80039ca:	33ff      	adds	r3, #255	@ 0xff
 80039cc:	001a      	movs	r2, r3
 80039ce:	4b70      	ldr	r3, [pc, #448]	@ (8003b90 <HAL_ADC_Init+0x340>)
 80039d0:	0011      	movs	r1, r2
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7ff fbf0 	bl	80031b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7e9b      	ldrb	r3, [r3, #26]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_ADC_Init+0x1a6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7e9b      	ldrb	r3, [r3, #26]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d006      	beq.n	80039f6 <HAL_ADC_Init+0x1a6>
 80039e8:	23c8      	movs	r3, #200	@ 0xc8
 80039ea:	005a      	lsls	r2, r3, #1
 80039ec:	4b68      	ldr	r3, [pc, #416]	@ (8003b90 <HAL_ADC_Init+0x340>)
 80039ee:	0011      	movs	r1, r2
 80039f0:	0018      	movs	r0, r3
 80039f2:	f7ff fbe1 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d019      	beq.n	8003a32 <HAL_ADC_Init+0x1e2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d013      	beq.n	8003a32 <HAL_ADC_Init+0x1e2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a0e:	2380      	movs	r3, #128	@ 0x80
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d00d      	beq.n	8003a32 <HAL_ADC_Init+0x1e2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a1a:	23c0      	movs	r3, #192	@ 0xc0
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d007      	beq.n	8003a32 <HAL_ADC_Init+0x1e2>
 8003a22:	2392      	movs	r3, #146	@ 0x92
 8003a24:	33ff      	adds	r3, #255	@ 0xff
 8003a26:	001a      	movs	r2, r3
 8003a28:	4b59      	ldr	r3, [pc, #356]	@ (8003b90 <HAL_ADC_Init+0x340>)
 8003a2a:	0011      	movs	r1, r2
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7ff fbc3 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a36:	2380      	movs	r3, #128	@ 0x80
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d02e      	beq.n	8003a9c <HAL_ADC_Init+0x24c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a42:	2388      	movs	r3, #136	@ 0x88
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d028      	beq.n	8003a9c <HAL_ADC_Init+0x24c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a4e:	2390      	movs	r3, #144	@ 0x90
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d022      	beq.n	8003a9c <HAL_ADC_Init+0x24c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a5a:	2398      	movs	r3, #152	@ 0x98
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d01c      	beq.n	8003a9c <HAL_ADC_Init+0x24c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a66:	23a0      	movs	r3, #160	@ 0xa0
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d016      	beq.n	8003a9c <HAL_ADC_Init+0x24c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a72:	23a8      	movs	r3, #168	@ 0xa8
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d010      	beq.n	8003a9c <HAL_ADC_Init+0x24c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a7e:	23b8      	movs	r3, #184	@ 0xb8
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d00a      	beq.n	8003a9c <HAL_ADC_Init+0x24c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <HAL_ADC_Init+0x24c>
 8003a8e:	23c9      	movs	r3, #201	@ 0xc9
 8003a90:	005a      	lsls	r2, r3, #1
 8003a92:	4b3f      	ldr	r3, [pc, #252]	@ (8003b90 <HAL_ADC_Init+0x340>)
 8003a94:	0011      	movs	r1, r2
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7ff fb8e 	bl	80031b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	222c      	movs	r2, #44	@ 0x2c
 8003aa0:	5c9b      	ldrb	r3, [r3, r2]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00c      	beq.n	8003ac0 <HAL_ADC_Init+0x270>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	222c      	movs	r2, #44	@ 0x2c
 8003aaa:	5c9b      	ldrb	r3, [r3, r2]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d007      	beq.n	8003ac0 <HAL_ADC_Init+0x270>
 8003ab0:	2394      	movs	r3, #148	@ 0x94
 8003ab2:	33ff      	adds	r3, #255	@ 0xff
 8003ab4:	001a      	movs	r2, r3
 8003ab6:	4b36      	ldr	r3, [pc, #216]	@ (8003b90 <HAL_ADC_Init+0x340>)
 8003ab8:	0011      	movs	r1, r2
 8003aba:	0018      	movs	r0, r3
 8003abc:	f7ff fb7c 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d00a      	beq.n	8003ade <HAL_ADC_Init+0x28e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d006      	beq.n	8003ade <HAL_ADC_Init+0x28e>
 8003ad0:	23ca      	movs	r3, #202	@ 0xca
 8003ad2:	005a      	lsls	r2, r3, #1
 8003ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b90 <HAL_ADC_Init+0x340>)
 8003ad6:	0011      	movs	r1, r2
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7ff fb6d 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <HAL_ADC_Init+0x2b2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aea:	2380      	movs	r3, #128	@ 0x80
 8003aec:	015b      	lsls	r3, r3, #5
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d007      	beq.n	8003b02 <HAL_ADC_Init+0x2b2>
 8003af2:	2396      	movs	r3, #150	@ 0x96
 8003af4:	33ff      	adds	r3, #255	@ 0xff
 8003af6:	001a      	movs	r2, r3
 8003af8:	4b25      	ldr	r3, [pc, #148]	@ (8003b90 <HAL_ADC_Init+0x340>)
 8003afa:	0011      	movs	r1, r2
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7ff fb5b 	bl	80031b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7e1b      	ldrb	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_ADC_Init+0x2d0>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7e1b      	ldrb	r3, [r3, #24]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d006      	beq.n	8003b20 <HAL_ADC_Init+0x2d0>
 8003b12:	23cb      	movs	r3, #203	@ 0xcb
 8003b14:	005a      	lsls	r2, r3, #1
 8003b16:	4b1e      	ldr	r3, [pc, #120]	@ (8003b90 <HAL_ADC_Init+0x340>)
 8003b18:	0011      	movs	r1, r2
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7ff fb4c 	bl	80031b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7e5b      	ldrb	r3, [r3, #25]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00b      	beq.n	8003b40 <HAL_ADC_Init+0x2f0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7e5b      	ldrb	r3, [r3, #25]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d007      	beq.n	8003b40 <HAL_ADC_Init+0x2f0>
 8003b30:	2398      	movs	r3, #152	@ 0x98
 8003b32:	33ff      	adds	r3, #255	@ 0xff
 8003b34:	001a      	movs	r2, r3
 8003b36:	4b16      	ldr	r3, [pc, #88]	@ (8003b90 <HAL_ADC_Init+0x340>)
 8003b38:	0011      	movs	r1, r2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7ff fb3c 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d029      	beq.n	8003b9c <HAL_ADC_Init+0x34c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d025      	beq.n	8003b9c <HAL_ADC_Init+0x34c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d021      	beq.n	8003b9c <HAL_ADC_Init+0x34c>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d01d      	beq.n	8003b9c <HAL_ADC_Init+0x34c>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d019      	beq.n	8003b9c <HAL_ADC_Init+0x34c>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d015      	beq.n	8003b9c <HAL_ADC_Init+0x34c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b74:	2b06      	cmp	r3, #6
 8003b76:	d011      	beq.n	8003b9c <HAL_ADC_Init+0x34c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7c:	2b07      	cmp	r3, #7
 8003b7e:	d00d      	beq.n	8003b9c <HAL_ADC_Init+0x34c>
 8003b80:	23cc      	movs	r3, #204	@ 0xcc
 8003b82:	005a      	lsls	r2, r3, #1
 8003b84:	4b02      	ldr	r3, [pc, #8]	@ (8003b90 <HAL_ADC_Init+0x340>)
 8003b86:	0011      	movs	r1, r2
 8003b88:	0018      	movs	r0, r3
 8003b8a:	e005      	b.n	8003b98 <HAL_ADC_Init+0x348>
 8003b8c:	40012400 	.word	0x40012400
 8003b90:	0800bbb8 	.word	0x0800bbb8
 8003b94:	80000004 	.word	0x80000004
 8003b98:	f7ff fb0e 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d023      	beq.n	8003bec <HAL_ADC_Init+0x39c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d01f      	beq.n	8003bec <HAL_ADC_Init+0x39c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d01b      	beq.n	8003bec <HAL_ADC_Init+0x39c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d017      	beq.n	8003bec <HAL_ADC_Init+0x39c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d013      	beq.n	8003bec <HAL_ADC_Init+0x39c>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d00f      	beq.n	8003bec <HAL_ADC_Init+0x39c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd0:	2b06      	cmp	r3, #6
 8003bd2:	d00b      	beq.n	8003bec <HAL_ADC_Init+0x39c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	2b07      	cmp	r3, #7
 8003bda:	d007      	beq.n	8003bec <HAL_ADC_Init+0x39c>
 8003bdc:	239a      	movs	r3, #154	@ 0x9a
 8003bde:	33ff      	adds	r3, #255	@ 0xff
 8003be0:	001a      	movs	r2, r3
 8003be2:	4bb9      	ldr	r3, [pc, #740]	@ (8003ec8 <HAL_ADC_Init+0x678>)
 8003be4:	0011      	movs	r1, r2
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7ff fae6 	bl	80031b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	223c      	movs	r2, #60	@ 0x3c
 8003bf0:	5c9b      	ldrb	r3, [r3, r2]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_ADC_Init+0x3be>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	223c      	movs	r2, #60	@ 0x3c
 8003bfa:	5c9b      	ldrb	r3, [r3, r2]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d006      	beq.n	8003c0e <HAL_ADC_Init+0x3be>
 8003c00:	23cd      	movs	r3, #205	@ 0xcd
 8003c02:	005a      	lsls	r2, r3, #1
 8003c04:	4bb0      	ldr	r3, [pc, #704]	@ (8003ec8 <HAL_ADC_Init+0x678>)
 8003c06:	0011      	movs	r1, r2
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7ff fad5 	bl	80031b8 <assert_failed>
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	223c      	movs	r2, #60	@ 0x3c
 8003c12:	5c9b      	ldrb	r3, [r3, r2]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d000      	beq.n	8003c1a <HAL_ADC_Init+0x3ca>
 8003c18:	e066      	b.n	8003ce8 <HAL_ADC_Init+0x498>
  {
    assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d023      	beq.n	8003c6a <HAL_ADC_Init+0x41a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d01f      	beq.n	8003c6a <HAL_ADC_Init+0x41a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d01b      	beq.n	8003c6a <HAL_ADC_Init+0x41a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	d017      	beq.n	8003c6a <HAL_ADC_Init+0x41a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	d013      	beq.n	8003c6a <HAL_ADC_Init+0x41a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	2b14      	cmp	r3, #20
 8003c48:	d00f      	beq.n	8003c6a <HAL_ADC_Init+0x41a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	2b18      	cmp	r3, #24
 8003c50:	d00b      	beq.n	8003c6a <HAL_ADC_Init+0x41a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	2b1c      	cmp	r3, #28
 8003c58:	d007      	beq.n	8003c6a <HAL_ADC_Init+0x41a>
 8003c5a:	239e      	movs	r3, #158	@ 0x9e
 8003c5c:	33ff      	adds	r3, #255	@ 0xff
 8003c5e:	001a      	movs	r2, r3
 8003c60:	4b99      	ldr	r3, [pc, #612]	@ (8003ec8 <HAL_ADC_Init+0x678>)
 8003c62:	0011      	movs	r1, r2
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7ff faa7 	bl	80031b8 <assert_failed>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d028      	beq.n	8003cc4 <HAL_ADC_Init+0x474>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d024      	beq.n	8003cc4 <HAL_ADC_Init+0x474>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	2b40      	cmp	r3, #64	@ 0x40
 8003c80:	d020      	beq.n	8003cc4 <HAL_ADC_Init+0x474>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	2b60      	cmp	r3, #96	@ 0x60
 8003c88:	d01c      	beq.n	8003cc4 <HAL_ADC_Init+0x474>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8e:	2b80      	cmp	r3, #128	@ 0x80
 8003c90:	d018      	beq.n	8003cc4 <HAL_ADC_Init+0x474>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c98:	d014      	beq.n	8003cc4 <HAL_ADC_Init+0x474>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ca0:	d010      	beq.n	8003cc4 <HAL_ADC_Init+0x474>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	2be0      	cmp	r3, #224	@ 0xe0
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_ADC_Init+0x474>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cae:	2380      	movs	r3, #128	@ 0x80
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d006      	beq.n	8003cc4 <HAL_ADC_Init+0x474>
 8003cb6:	23cf      	movs	r3, #207	@ 0xcf
 8003cb8:	005a      	lsls	r2, r3, #1
 8003cba:	4b83      	ldr	r3, [pc, #524]	@ (8003ec8 <HAL_ADC_Init+0x678>)
 8003cbc:	0011      	movs	r1, r2
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f7ff fa7a 	bl	80031b8 <assert_failed>
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <HAL_ADC_Init+0x498>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d007      	beq.n	8003ce8 <HAL_ADC_Init+0x498>
 8003cd8:	23a0      	movs	r3, #160	@ 0xa0
 8003cda:	33ff      	adds	r3, #255	@ 0xff
 8003cdc:	001a      	movs	r2, r3
 8003cde:	4b7a      	ldr	r3, [pc, #488]	@ (8003ec8 <HAL_ADC_Init+0x678>)
 8003ce0:	0011      	movs	r1, r2
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7ff fa68 	bl	80031b8 <assert_failed>
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00d      	beq.n	8003d0c <HAL_ADC_Init+0x4bc>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cf4:	2380      	movs	r3, #128	@ 0x80
 8003cf6:	059b      	lsls	r3, r3, #22
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d007      	beq.n	8003d0c <HAL_ADC_Init+0x4bc>
 8003cfc:	23a2      	movs	r3, #162	@ 0xa2
 8003cfe:	33ff      	adds	r3, #255	@ 0xff
 8003d00:	001a      	movs	r2, r3
 8003d02:	4b71      	ldr	r3, [pc, #452]	@ (8003ec8 <HAL_ADC_Init+0x678>)
 8003d04:	0011      	movs	r1, r2
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7ff fa56 	bl	80031b8 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d027      	beq.n	8003d64 <HAL_ADC_Init+0x514>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	5c9b      	ldrb	r3, [r3, r2]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00c      	beq.n	8003d38 <HAL_ADC_Init+0x4e8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	5c9b      	ldrb	r3, [r3, r2]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d007      	beq.n	8003d38 <HAL_ADC_Init+0x4e8>
 8003d28:	23a6      	movs	r3, #166	@ 0xa6
 8003d2a:	33ff      	adds	r3, #255	@ 0xff
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	4b66      	ldr	r3, [pc, #408]	@ (8003ec8 <HAL_ADC_Init+0x678>)
 8003d30:	0011      	movs	r1, r2
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7ff fa40 	bl	80031b8 <assert_failed>

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	2380      	movs	r3, #128	@ 0x80
 8003d3e:	039b      	lsls	r3, r3, #14
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d10f      	bne.n	8003d64 <HAL_ADC_Init+0x514>
    {
      assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_ADC_Init+0x504>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d907      	bls.n	8003d64 <HAL_ADC_Init+0x514>
 8003d54:	23aa      	movs	r3, #170	@ 0xaa
 8003d56:	33ff      	adds	r3, #255	@ 0xff
 8003d58:	001a      	movs	r2, r3
 8003d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec8 <HAL_ADC_Init+0x678>)
 8003d5c:	0011      	movs	r1, r2
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7ff fa2a 	bl	80031b8 <assert_failed>
    }
  }

  /* ADC group regular discontinuous mode can be enabled only if              */
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	5c9b      	ldrb	r3, [r3, r2]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10b      	bne.n	8003d86 <HAL_ADC_Init+0x536>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7e9b      	ldrb	r3, [r3, #26]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d107      	bne.n	8003d86 <HAL_ADC_Init+0x536>
 8003d76:	23b0      	movs	r3, #176	@ 0xb0
 8003d78:	33ff      	adds	r3, #255	@ 0xff
 8003d7a:	001a      	movs	r2, r3
 8003d7c:	4b52      	ldr	r3, [pc, #328]	@ (8003ec8 <HAL_ADC_Init+0x678>)
 8003d7e:	0011      	movs	r1, r2
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7ff fa19 	bl	80031b8 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <HAL_ADC_Init+0x554>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7fe fcf9 	bl	8002788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2254      	movs	r2, #84	@ 0x54
 8003da0:	2100      	movs	r1, #0
 8003da2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff fcc1 	bl	8003730 <LL_ADC_IsInternalRegulatorEnabled>
 8003dae:	1e03      	subs	r3, r0, #0
 8003db0:	d115      	bne.n	8003dde <HAL_ADC_Init+0x58e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f7ff fc96 	bl	80036e8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dbc:	4b43      	ldr	r3, [pc, #268]	@ (8003ecc <HAL_ADC_Init+0x67c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4943      	ldr	r1, [pc, #268]	@ (8003ed0 <HAL_ADC_Init+0x680>)
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7fc f9a0 	bl	8000108 <__udivsi3>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dd0:	e002      	b.n	8003dd8 <HAL_ADC_Init+0x588>
    {
      wait_loop_index--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f9      	bne.n	8003dd2 <HAL_ADC_Init+0x582>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7ff fca4 	bl	8003730 <LL_ADC_IsInternalRegulatorEnabled>
 8003de8:	1e03      	subs	r3, r0, #0
 8003dea:	d10f      	bne.n	8003e0c <HAL_ADC_Init+0x5bc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df0:	2210      	movs	r2, #16
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e04:	231f      	movs	r3, #31
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7ff fd0b 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8003e16:	0003      	movs	r3, r0
 8003e18:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	2210      	movs	r2, #16
 8003e20:	4013      	ands	r3, r2
 8003e22:	d000      	beq.n	8003e26 <HAL_ADC_Init+0x5d6>
 8003e24:	e12a      	b.n	800407c <HAL_ADC_Init+0x82c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d000      	beq.n	8003e2e <HAL_ADC_Init+0x5de>
 8003e2c:	e126      	b.n	800407c <HAL_ADC_Init+0x82c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e32:	4a28      	ldr	r2, [pc, #160]	@ (8003ed4 <HAL_ADC_Init+0x684>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	2202      	movs	r2, #2
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7ff fcac 	bl	80037a0 <LL_ADC_IsEnabled>
 8003e48:	1e03      	subs	r3, r0, #0
 8003e4a:	d000      	beq.n	8003e4e <HAL_ADC_Init+0x5fe>
 8003e4c:	e0b5      	b.n	8003fba <HAL_ADC_Init+0x76a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	7e1b      	ldrb	r3, [r3, #24]
 8003e56:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003e58:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7e5b      	ldrb	r3, [r3, #25]
 8003e5e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e60:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	7e9b      	ldrb	r3, [r3, #26]
 8003e66:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e68:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_ADC_Init+0x628>
 8003e72:	2380      	movs	r3, #128	@ 0x80
 8003e74:	015b      	lsls	r3, r3, #5
 8003e76:	e000      	b.n	8003e7a <HAL_ADC_Init+0x62a>
 8003e78:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e7a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e80:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da04      	bge.n	8003e94 <HAL_ADC_Init+0x644>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	e001      	b.n	8003e98 <HAL_ADC_Init+0x648>
 8003e94:	2380      	movs	r3, #128	@ 0x80
 8003e96:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8003e98:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	212c      	movs	r1, #44	@ 0x2c
 8003e9e:	5c5b      	ldrb	r3, [r3, r1]
 8003ea0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ea2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	5c9b      	ldrb	r3, [r3, r2]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d11d      	bne.n	8003ef0 <HAL_ADC_Init+0x6a0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7e9b      	ldrb	r3, [r3, #26]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10d      	bne.n	8003ed8 <HAL_ADC_Init+0x688>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2280      	movs	r2, #128	@ 0x80
 8003ec0:	0252      	lsls	r2, r2, #9
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	e013      	b.n	8003ef0 <HAL_ADC_Init+0x6a0>
 8003ec8:	0800bbb8 	.word	0x0800bbb8
 8003ecc:	20000010 	.word	0x20000010
 8003ed0:	00030d40 	.word	0x00030d40
 8003ed4:	fffffefd 	.word	0xfffffefd
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003edc:	2220      	movs	r2, #32
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	2201      	movs	r2, #1
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_ADC_Init+0x6be>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003efc:	23e0      	movs	r3, #224	@ 0xe0
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f06:	4313      	orrs	r3, r2
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a62      	ldr	r2, [pc, #392]	@ (80040a0 <HAL_ADC_Init+0x850>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	0019      	movs	r1, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	0f9b      	lsrs	r3, r3, #30
 8003f2a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f30:	4313      	orrs	r3, r2
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	223c      	movs	r2, #60	@ 0x3c
 8003f3c:	5c9b      	ldrb	r3, [r3, r2]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d111      	bne.n	8003f66 <HAL_ADC_Init+0x716>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	0f9b      	lsrs	r3, r3, #30
 8003f48:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f4e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8003f54:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8003f5a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	2201      	movs	r2, #1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	4a4d      	ldr	r2, [pc, #308]	@ (80040a4 <HAL_ADC_Init+0x854>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	23c0      	movs	r3, #192	@ 0xc0
 8003f82:	061b      	lsls	r3, r3, #24
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d018      	beq.n	8003fba <HAL_ADC_Init+0x76a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	05db      	lsls	r3, r3, #23
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d012      	beq.n	8003fba <HAL_ADC_Init+0x76a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f98:	2380      	movs	r3, #128	@ 0x80
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d00c      	beq.n	8003fba <HAL_ADC_Init+0x76a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003fa0:	4b41      	ldr	r3, [pc, #260]	@ (80040a8 <HAL_ADC_Init+0x858>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a41      	ldr	r2, [pc, #260]	@ (80040ac <HAL_ADC_Init+0x85c>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	23f0      	movs	r3, #240	@ 0xf0
 8003fb0:	039b      	lsls	r3, r3, #14
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	4b3c      	ldr	r3, [pc, #240]	@ (80040a8 <HAL_ADC_Init+0x858>)
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc2:	001a      	movs	r2, r3
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	f7ff faea 	bl	800359e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd2:	4937      	ldr	r1, [pc, #220]	@ (80040b0 <HAL_ADC_Init+0x860>)
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	f7ff fae2 	bl	800359e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <HAL_ADC_Init+0x7a6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2110      	movs	r1, #16
 8003fee:	4249      	negs	r1, r1
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ff4:	e018      	b.n	8004028 <HAL_ADC_Init+0x7d8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	2380      	movs	r3, #128	@ 0x80
 8003ffc:	039b      	lsls	r3, r3, #14
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d112      	bne.n	8004028 <HAL_ADC_Init+0x7d8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	3b01      	subs	r3, #1
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	221c      	movs	r2, #28
 8004012:	4013      	ands	r3, r2
 8004014:	2210      	movs	r2, #16
 8004016:	4252      	negs	r2, r2
 8004018:	409a      	lsls	r2, r3
 800401a:	0011      	movs	r1, r2
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2100      	movs	r1, #0
 800402e:	0018      	movs	r0, r3
 8004030:	f7ff fad2 	bl	80035d8 <LL_ADC_GetSamplingTimeCommonChannels>
 8004034:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800403a:	429a      	cmp	r2, r3
 800403c:	d10b      	bne.n	8004056 <HAL_ADC_Init+0x806>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004048:	2203      	movs	r2, #3
 800404a:	4393      	bics	r3, r2
 800404c:	2201      	movs	r2, #1
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004054:	e01c      	b.n	8004090 <HAL_ADC_Init+0x840>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405a:	2212      	movs	r2, #18
 800405c:	4393      	bics	r3, r2
 800405e:	2210      	movs	r2, #16
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406a:	2201      	movs	r2, #1
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004072:	231f      	movs	r3, #31
 8004074:	18fb      	adds	r3, r7, r3
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800407a:	e009      	b.n	8004090 <HAL_ADC_Init+0x840>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	2210      	movs	r2, #16
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004088:	231f      	movs	r3, #31
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004090:	231f      	movs	r3, #31
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	781b      	ldrb	r3, [r3, #0]
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b008      	add	sp, #32
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	ffde0201 	.word	0xffde0201
 80040a4:	1ffffc02 	.word	0x1ffffc02
 80040a8:	40012708 	.word	0x40012708
 80040ac:	ffc3ffff 	.word	0xffc3ffff
 80040b0:	7fffff04 	.word	0x7fffff04

080040b4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80040b4:	b5b0      	push	{r4, r5, r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e08d      	b.n	80041e2 <HAL_ADC_DeInit+0x12e>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a48      	ldr	r2, [pc, #288]	@ (80041ec <HAL_ADC_DeInit+0x138>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d006      	beq.n	80040de <HAL_ADC_DeInit+0x2a>
 80040d0:	23bb      	movs	r3, #187	@ 0xbb
 80040d2:	009a      	lsls	r2, r3, #2
 80040d4:	4b46      	ldr	r3, [pc, #280]	@ (80041f0 <HAL_ADC_DeInit+0x13c>)
 80040d6:	0011      	movs	r1, r2
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff f86d 	bl	80031b8 <assert_failed>

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e2:	2202      	movs	r2, #2
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80040ea:	250f      	movs	r5, #15
 80040ec:	197c      	adds	r4, r7, r5
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 fc91 	bl	8004a18 <ADC_ConversionStop>
 80040f6:	0003      	movs	r3, r0
 80040f8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80040fa:	197b      	adds	r3, r7, r5
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d112      	bne.n	8004128 <HAL_ADC_DeInit+0x74>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004102:	197c      	adds	r4, r7, r5
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	0018      	movs	r0, r3
 8004108:	f000 fd60 	bl	8004bcc <ADC_Disable>
 800410c:	0003      	movs	r3, r0
 800410e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004110:	197b      	adds	r3, r7, r5
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <HAL_ADC_DeInit+0x6a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	0018      	movs	r0, r3
 8004124:	f7ff faf4 	bl	8003710 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4930      	ldr	r1, [pc, #192]	@ (80041f4 <HAL_ADC_DeInit+0x140>)
 8004134:	400a      	ands	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOCAL | ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a2e      	ldr	r2, [pc, #184]	@ (80041f8 <HAL_ADC_DeInit+0x144>)
 800413e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	492c      	ldr	r1, [pc, #176]	@ (80041fc <HAL_ADC_DeInit+0x148>)
 800414c:	400a      	ands	r2, r1
 800414e:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_WAIT | ADC_CFGR1_CONT | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2107      	movs	r1, #7
 800415c:	438a      	bics	r2, r1
 800415e:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2200      	movs	r2, #0
 800416c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a1a      	ldr	r2, [r3, #32]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4921      	ldr	r1, [pc, #132]	@ (8004200 <HAL_ADC_DeInit+0x14c>)
 800417a:	400a      	ands	r2, r1
 800417c:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	491d      	ldr	r1, [pc, #116]	@ (8004200 <HAL_ADC_DeInit+0x14c>)
 800418a:	400a      	ands	r2, r1
 800418c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4919      	ldr	r1, [pc, #100]	@ (8004200 <HAL_ADC_DeInit+0x14c>)
 800419a:	400a      	ands	r2, r1
 800419c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0092      	lsls	r2, r2, #2
 80041aa:	0892      	lsrs	r2, r2, #2
 80041ac:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80041ae:	4b15      	ldr	r3, [pc, #84]	@ (8004204 <HAL_ADC_DeInit+0x150>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b14      	ldr	r3, [pc, #80]	@ (8004204 <HAL_ADC_DeInit+0x150>)
 80041b4:	4914      	ldr	r1, [pc, #80]	@ (8004208 <HAL_ADC_DeInit+0x154>)
 80041b6:	400a      	ands	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	0018      	movs	r0, r3
 80041be:	f7fe fb3f 	bl	8002840 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2254      	movs	r2, #84	@ 0x54
 80041d8:	2100      	movs	r1, #0
 80041da:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80041dc:	230f      	movs	r3, #15
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	781b      	ldrb	r3, [r3, #0]
}
 80041e2:	0018      	movs	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b004      	add	sp, #16
 80041e8:	bdb0      	pop	{r4, r5, r7, pc}
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	40012400 	.word	0x40012400
 80041f0:	0800bbb8 	.word	0x0800bbb8
 80041f4:	fffff460 	.word	0xfffff460
 80041f8:	00000b9f 	.word	0x00000b9f
 80041fc:	831e0200 	.word	0x831e0200
 8004200:	f000f000 	.word	0xf000f000
 8004204:	40012708 	.word	0x40012708
 8004208:	fe03ffff 	.word	0xfe03ffff

0800420c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800420c:	b5b0      	push	{r4, r5, r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a28      	ldr	r2, [pc, #160]	@ (80042bc <HAL_ADC_Start+0xb0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d005      	beq.n	800422a <HAL_ADC_Start+0x1e>
 800421e:	4a28      	ldr	r2, [pc, #160]	@ (80042c0 <HAL_ADC_Start+0xb4>)
 8004220:	4b28      	ldr	r3, [pc, #160]	@ (80042c4 <HAL_ADC_Start+0xb8>)
 8004222:	0011      	movs	r1, r2
 8004224:	0018      	movs	r0, r3
 8004226:	f7fe ffc7 	bl	80031b8 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	0018      	movs	r0, r3
 8004230:	f7ff fafc 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8004234:	1e03      	subs	r3, r0, #0
 8004236:	d135      	bne.n	80042a4 <HAL_ADC_Start+0x98>
  {
    __HAL_LOCK(hadc);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2254      	movs	r2, #84	@ 0x54
 800423c:	5c9b      	ldrb	r3, [r3, r2]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_ADC_Start+0x3a>
 8004242:	2302      	movs	r3, #2
 8004244:	e035      	b.n	80042b2 <HAL_ADC_Start+0xa6>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2254      	movs	r2, #84	@ 0x54
 800424a:	2101      	movs	r1, #1
 800424c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800424e:	250f      	movs	r5, #15
 8004250:	197c      	adds	r4, r7, r5
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	0018      	movs	r0, r3
 8004256:	f000 fc33 	bl	8004ac0 <ADC_Enable>
 800425a:	0003      	movs	r3, r0
 800425c:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800425e:	197b      	adds	r3, r7, r5
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d119      	bne.n	800429a <HAL_ADC_Start+0x8e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426a:	4a17      	ldr	r2, [pc, #92]	@ (80042c8 <HAL_ADC_Start+0xbc>)
 800426c:	4013      	ands	r3, r2
 800426e:	2280      	movs	r2, #128	@ 0x80
 8004270:	0052      	lsls	r2, r2, #1
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	221c      	movs	r2, #28
 8004284:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2254      	movs	r2, #84	@ 0x54
 800428a:	2100      	movs	r1, #0
 800428c:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	0018      	movs	r0, r3
 8004294:	f7ff faa6 	bl	80037e4 <LL_ADC_REG_StartConversion>
 8004298:	e008      	b.n	80042ac <HAL_ADC_Start+0xa0>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2254      	movs	r2, #84	@ 0x54
 800429e:	2100      	movs	r1, #0
 80042a0:	5499      	strb	r1, [r3, r2]
 80042a2:	e003      	b.n	80042ac <HAL_ADC_Start+0xa0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042a4:	230f      	movs	r3, #15
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	2202      	movs	r2, #2
 80042aa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80042ac:	230f      	movs	r3, #15
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	781b      	ldrb	r3, [r3, #0]
}
 80042b2:	0018      	movs	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b004      	add	sp, #16
 80042b8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	40012400 	.word	0x40012400
 80042c0:	0000049f 	.word	0x0000049f
 80042c4:	0800bbb8 	.word	0x0800bbb8
 80042c8:	fffff0fe 	.word	0xfffff0fe

080042cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80042cc:	b5b0      	push	{r4, r5, r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004354 <HAL_ADC_Stop+0x88>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d005      	beq.n	80042ea <HAL_ADC_Stop+0x1e>
 80042de:	4a1e      	ldr	r2, [pc, #120]	@ (8004358 <HAL_ADC_Stop+0x8c>)
 80042e0:	4b1e      	ldr	r3, [pc, #120]	@ (800435c <HAL_ADC_Stop+0x90>)
 80042e2:	0011      	movs	r1, r2
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7fe ff67 	bl	80031b8 <assert_failed>

  __HAL_LOCK(hadc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2254      	movs	r2, #84	@ 0x54
 80042ee:	5c9b      	ldrb	r3, [r3, r2]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_Stop+0x2c>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e029      	b.n	800434c <HAL_ADC_Stop+0x80>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2254      	movs	r2, #84	@ 0x54
 80042fc:	2101      	movs	r1, #1
 80042fe:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004300:	250f      	movs	r5, #15
 8004302:	197c      	adds	r4, r7, r5
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	0018      	movs	r0, r3
 8004308:	f000 fb86 	bl	8004a18 <ADC_ConversionStop>
 800430c:	0003      	movs	r3, r0
 800430e:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004310:	197b      	adds	r3, r7, r5
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d112      	bne.n	800433e <HAL_ADC_Stop+0x72>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004318:	197c      	adds	r4, r7, r5
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0018      	movs	r0, r3
 800431e:	f000 fc55 	bl	8004bcc <ADC_Disable>
 8004322:	0003      	movs	r3, r0
 8004324:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004326:	197b      	adds	r3, r7, r5
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d107      	bne.n	800433e <HAL_ADC_Stop+0x72>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004332:	4a0b      	ldr	r2, [pc, #44]	@ (8004360 <HAL_ADC_Stop+0x94>)
 8004334:	4013      	ands	r3, r2
 8004336:	2201      	movs	r2, #1
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2254      	movs	r2, #84	@ 0x54
 8004342:	2100      	movs	r1, #0
 8004344:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004346:	230f      	movs	r3, #15
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	781b      	ldrb	r3, [r3, #0]
}
 800434c:	0018      	movs	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	b004      	add	sp, #16
 8004352:	bdb0      	pop	{r4, r5, r7, pc}
 8004354:	40012400 	.word	0x40012400
 8004358:	000004e2 	.word	0x000004e2
 800435c:	0800bbb8 	.word	0x0800bbb8
 8004360:	fffffefe 	.word	0xfffffefe

08004364 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_flag_end;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a4a      	ldr	r2, [pc, #296]	@ (800449c <HAL_ADC_PollForConversion+0x138>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d005      	beq.n	8004384 <HAL_ADC_PollForConversion+0x20>
 8004378:	4a49      	ldr	r2, [pc, #292]	@ (80044a0 <HAL_ADC_PollForConversion+0x13c>)
 800437a:	4b4a      	ldr	r3, [pc, #296]	@ (80044a4 <HAL_ADC_PollForConversion+0x140>)
 800437c:	0011      	movs	r1, r2
 800437e:	0018      	movs	r0, r3
 8004380:	f7fe ff1a 	bl	80031b8 <assert_failed>

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d102      	bne.n	8004392 <HAL_ADC_PollForConversion+0x2e>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800438c:	2308      	movs	r3, #8
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e00f      	b.n	80043b2 <HAL_ADC_PollForConversion+0x4e>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	4013      	ands	r3, r2
 800439c:	d007      	beq.n	80043ae <HAL_ADC_PollForConversion+0x4a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	2220      	movs	r2, #32
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e072      	b.n	8004494 <HAL_ADC_PollForConversion+0x130>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80043ae:	2304      	movs	r3, #4
 80043b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80043b2:	f7ff f8a7 	bl	8003504 <HAL_GetTick>
 80043b6:	0003      	movs	r3, r0
 80043b8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043ba:	e01f      	b.n	80043fc <HAL_ADC_PollForConversion+0x98>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	3301      	adds	r3, #1
 80043c0:	d01c      	beq.n	80043fc <HAL_ADC_PollForConversion+0x98>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80043c2:	f7ff f89f 	bl	8003504 <HAL_GetTick>
 80043c6:	0002      	movs	r2, r0
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <HAL_ADC_PollForConversion+0x74>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d111      	bne.n	80043fc <HAL_ADC_PollForConversion+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4013      	ands	r3, r2
 80043e2:	d10b      	bne.n	80043fc <HAL_ADC_PollForConversion+0x98>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e8:	2204      	movs	r2, #4
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2254      	movs	r2, #84	@ 0x54
 80043f4:	2100      	movs	r1, #0
 80043f6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e04b      	b.n	8004494 <HAL_ADC_PollForConversion+0x130>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4013      	ands	r3, r2
 8004406:	d0d9      	beq.n	80043bc <HAL_ADC_PollForConversion+0x58>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440c:	2280      	movs	r2, #128	@ 0x80
 800440e:	0092      	lsls	r2, r2, #2
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	0018      	movs	r0, r3
 800441c:	f7ff f8f3 	bl	8003606 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004420:	1e03      	subs	r3, r0, #0
 8004422:	d02e      	beq.n	8004482 <HAL_ADC_PollForConversion+0x11e>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	7e9b      	ldrb	r3, [r3, #26]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d12a      	bne.n	8004482 <HAL_ADC_PollForConversion+0x11e>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2208      	movs	r2, #8
 8004434:	4013      	ands	r3, r2
 8004436:	2b08      	cmp	r3, #8
 8004438:	d123      	bne.n	8004482 <HAL_ADC_PollForConversion+0x11e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	0018      	movs	r0, r3
 8004440:	f7ff f9f4 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8004444:	1e03      	subs	r3, r0, #0
 8004446:	d110      	bne.n	800446a <HAL_ADC_PollForConversion+0x106>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	210c      	movs	r1, #12
 8004454:	438a      	bics	r2, r1
 8004456:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445c:	4a12      	ldr	r2, [pc, #72]	@ (80044a8 <HAL_ADC_PollForConversion+0x144>)
 800445e:	4013      	ands	r3, r2
 8004460:	2201      	movs	r2, #1
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	659a      	str	r2, [r3, #88]	@ 0x58
 8004468:	e00b      	b.n	8004482 <HAL_ADC_PollForConversion+0x11e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446e:	2220      	movs	r2, #32
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447a:	2201      	movs	r2, #1
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	7e1b      	ldrb	r3, [r3, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <HAL_ADC_PollForConversion+0x12e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	220c      	movs	r2, #12
 8004490:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	0018      	movs	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	b004      	add	sp, #16
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40012400 	.word	0x40012400
 80044a0:	00000516 	.word	0x00000516
 80044a4:	0800bbb8 	.word	0x0800bbb8
 80044a8:	fffffefe 	.word	0xfffffefe

080044ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a07      	ldr	r2, [pc, #28]	@ (80044d8 <HAL_ADC_GetValue+0x2c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d005      	beq.n	80044ca <HAL_ADC_GetValue+0x1e>
 80044be:	4a07      	ldr	r2, [pc, #28]	@ (80044dc <HAL_ADC_GetValue+0x30>)
 80044c0:	4b07      	ldr	r3, [pc, #28]	@ (80044e0 <HAL_ADC_GetValue+0x34>)
 80044c2:	0011      	movs	r1, r2
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7fe fe77 	bl	80031b8 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40012400 	.word	0x40012400
 80044dc:	00000755 	.word	0x00000755
 80044e0:	0800bbb8 	.word	0x0800bbb8

080044e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b08b      	sub	sp, #44	@ 0x2c
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044ee:	2327      	movs	r3, #39	@ 0x27
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4aaa      	ldr	r2, [pc, #680]	@ (80047a8 <HAL_ADC_ConfigChannel+0x2c4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d005      	beq.n	8004510 <HAL_ADC_ConfigChannel+0x2c>
 8004504:	4aa9      	ldr	r2, [pc, #676]	@ (80047ac <HAL_ADC_ConfigChannel+0x2c8>)
 8004506:	4baa      	ldr	r3, [pc, #680]	@ (80047b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004508:	0011      	movs	r1, r2
 800450a:	0018      	movs	r0, r3
 800450c:	f7fe fe54 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d100      	bne.n	800451a <HAL_ADC_ConfigChannel+0x36>
 8004518:	e07d      	b.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4aa5      	ldr	r2, [pc, #660]	@ (80047b4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d100      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x42>
 8004524:	e077      	b.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4aa3      	ldr	r2, [pc, #652]	@ (80047b8 <HAL_ADC_ConfigChannel+0x2d4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d100      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x4e>
 8004530:	e071      	b.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4aa1      	ldr	r2, [pc, #644]	@ (80047bc <HAL_ADC_ConfigChannel+0x2d8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d100      	bne.n	800453e <HAL_ADC_ConfigChannel+0x5a>
 800453c:	e06b      	b.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a9f      	ldr	r2, [pc, #636]	@ (80047c0 <HAL_ADC_ConfigChannel+0x2dc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d100      	bne.n	800454a <HAL_ADC_ConfigChannel+0x66>
 8004548:	e065      	b.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a9d      	ldr	r2, [pc, #628]	@ (80047c4 <HAL_ADC_ConfigChannel+0x2e0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d100      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x72>
 8004554:	e05f      	b.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a9b      	ldr	r2, [pc, #620]	@ (80047c8 <HAL_ADC_ConfigChannel+0x2e4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d05a      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a99      	ldr	r2, [pc, #612]	@ (80047cc <HAL_ADC_ConfigChannel+0x2e8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d055      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a98      	ldr	r2, [pc, #608]	@ (80047d0 <HAL_ADC_ConfigChannel+0x2ec>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d050      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a96      	ldr	r2, [pc, #600]	@ (80047d4 <HAL_ADC_ConfigChannel+0x2f0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d04b      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a95      	ldr	r2, [pc, #596]	@ (80047d8 <HAL_ADC_ConfigChannel+0x2f4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d046      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a93      	ldr	r2, [pc, #588]	@ (80047dc <HAL_ADC_ConfigChannel+0x2f8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d041      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a92      	ldr	r2, [pc, #584]	@ (80047e0 <HAL_ADC_ConfigChannel+0x2fc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d03c      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a90      	ldr	r2, [pc, #576]	@ (80047e4 <HAL_ADC_ConfigChannel+0x300>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d037      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a8f      	ldr	r2, [pc, #572]	@ (80047e8 <HAL_ADC_ConfigChannel+0x304>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d032      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a8d      	ldr	r2, [pc, #564]	@ (80047ec <HAL_ADC_ConfigChannel+0x308>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d02d      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a8c      	ldr	r2, [pc, #560]	@ (80047f0 <HAL_ADC_ConfigChannel+0x30c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d028      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a8a      	ldr	r2, [pc, #552]	@ (80047f4 <HAL_ADC_ConfigChannel+0x310>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d023      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a89      	ldr	r2, [pc, #548]	@ (80047f8 <HAL_ADC_ConfigChannel+0x314>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d01e      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a87      	ldr	r2, [pc, #540]	@ (80047fc <HAL_ADC_ConfigChannel+0x318>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d019      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a86      	ldr	r2, [pc, #536]	@ (8004800 <HAL_ADC_ConfigChannel+0x31c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d014      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a84      	ldr	r2, [pc, #528]	@ (8004804 <HAL_ADC_ConfigChannel+0x320>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00f      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a83      	ldr	r2, [pc, #524]	@ (8004808 <HAL_ADC_ConfigChannel+0x324>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00a      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a81      	ldr	r2, [pc, #516]	@ (800480c <HAL_ADC_ConfigChannel+0x328>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d005      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x132>
 800460a:	4a81      	ldr	r2, [pc, #516]	@ (8004810 <HAL_ADC_ConfigChannel+0x32c>)
 800460c:	4b68      	ldr	r3, [pc, #416]	@ (80047b0 <HAL_ADC_ConfigChannel+0x2cc>)
 800460e:	0011      	movs	r1, r2
 8004610:	0018      	movs	r0, r3
 8004612:	f7fe fdd1 	bl	80031b8 <assert_failed>
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_ADC_ConfigChannel+0x150>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	4a7c      	ldr	r2, [pc, #496]	@ (8004814 <HAL_ADC_ConfigChannel+0x330>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d005      	beq.n	8004634 <HAL_ADC_ConfigChannel+0x150>
 8004628:	4a7b      	ldr	r2, [pc, #492]	@ (8004818 <HAL_ADC_ConfigChannel+0x334>)
 800462a:	4b61      	ldr	r3, [pc, #388]	@ (80047b0 <HAL_ADC_ConfigChannel+0x2cc>)
 800462c:	0011      	movs	r1, r2
 800462e:	0018      	movs	r0, r3
 8004630:	f7fe fdc2 	bl	80031b8 <assert_failed>

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	2380      	movs	r3, #128	@ 0x80
 800463a:	061b      	lsls	r3, r3, #24
 800463c:	429a      	cmp	r2, r3
 800463e:	d004      	beq.n	800464a <HAL_ADC_ConfigChannel+0x166>
      (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004644:	4a75      	ldr	r2, [pc, #468]	@ (800481c <HAL_ADC_ConfigChannel+0x338>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d10e      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x184>
  {
    assert_param(IS_ADC_REGULAR_RANK_SEQ_FIXED(pConfig->Rank));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d03e      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x1ec>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d03a      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x1ec>
 800465a:	4a71      	ldr	r2, [pc, #452]	@ (8004820 <HAL_ADC_ConfigChannel+0x33c>)
 800465c:	4b54      	ldr	r3, [pc, #336]	@ (80047b0 <HAL_ADC_ConfigChannel+0x2cc>)
 800465e:	0011      	movs	r1, r2
 8004660:	0018      	movs	r0, r3
 8004662:	f7fe fda9 	bl	80031b8 <assert_failed>
 8004666:	e033      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x1ec>
  }
  else
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_ADC_ConfigChannel+0x194>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	2b08      	cmp	r3, #8
 8004676:	d905      	bls.n	8004684 <HAL_ADC_ConfigChannel+0x1a0>
 8004678:	4a6a      	ldr	r2, [pc, #424]	@ (8004824 <HAL_ADC_ConfigChannel+0x340>)
 800467a:	4b4d      	ldr	r3, [pc, #308]	@ (80047b0 <HAL_ADC_ConfigChannel+0x2cc>)
 800467c:	0011      	movs	r1, r2
 800467e:	0018      	movs	r0, r3
 8004680:	f7fe fd9a 	bl	80031b8 <assert_failed>

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d021      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x1ec>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b04      	cmp	r3, #4
 8004692:	d01d      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x1ec>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b08      	cmp	r3, #8
 800469a:	d019      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x1ec>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d015      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x1ec>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d011      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x1ec>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b14      	cmp	r3, #20
 80046b2:	d00d      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x1ec>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b18      	cmp	r3, #24
 80046ba:	d009      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x1ec>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b1c      	cmp	r3, #28
 80046c2:	d005      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x1ec>
 80046c4:	4a58      	ldr	r2, [pc, #352]	@ (8004828 <HAL_ADC_ConfigChannel+0x344>)
 80046c6:	4b3a      	ldr	r3, [pc, #232]	@ (80047b0 <HAL_ADC_ConfigChannel+0x2cc>)
 80046c8:	0011      	movs	r1, r2
 80046ca:	0018      	movs	r0, r3
 80046cc:	f7fe fd74 	bl	80031b8 <assert_failed>
  }

  __HAL_LOCK(hadc);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2254      	movs	r2, #84	@ 0x54
 80046d4:	5c9b      	ldrb	r3, [r3, r2]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_ADC_ConfigChannel+0x1fa>
 80046da:	2302      	movs	r3, #2
 80046dc:	e183      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x502>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2254      	movs	r2, #84	@ 0x54
 80046e2:	2101      	movs	r1, #1
 80046e4:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7ff f89e 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d000      	beq.n	80046f6 <HAL_ADC_ConfigChannel+0x212>
 80046f4:	e166      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x4e0>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d100      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x21c>
 80046fe:	e11a      	b.n	8004936 <HAL_ADC_ConfigChannel+0x452>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	2380      	movs	r3, #128	@ 0x80
 8004706:	061b      	lsls	r3, r3, #24
 8004708:	429a      	cmp	r2, r3
 800470a:	d004      	beq.n	8004716 <HAL_ADC_ConfigChannel+0x232>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004710:	4a42      	ldr	r2, [pc, #264]	@ (800481c <HAL_ADC_ConfigChannel+0x338>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d108      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x244>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	0019      	movs	r1, r3
 8004720:	0010      	movs	r0, r2
 8004722:	f7fe ffa1 	bl	8003668 <LL_ADC_REG_SetSequencerChAdd>
 8004726:	e0a2      	b.n	800486e <HAL_ADC_ConfigChannel+0x38a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	211f      	movs	r1, #31
 8004732:	400b      	ands	r3, r1
 8004734:	210f      	movs	r1, #15
 8004736:	4099      	lsls	r1, r3
 8004738:	000b      	movs	r3, r1
 800473a:	43db      	mvns	r3, r3
 800473c:	4013      	ands	r3, r2
 800473e:	001c      	movs	r4, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	025b      	lsls	r3, r3, #9
 8004746:	0a5b      	lsrs	r3, r3, #9
 8004748:	d105      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x272>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	0e9b      	lsrs	r3, r3, #26
 8004750:	221f      	movs	r2, #31
 8004752:	401a      	ands	r2, r3
 8004754:	e070      	b.n	8004838 <HAL_ADC_ConfigChannel+0x354>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800475c:	231f      	movs	r3, #31
 800475e:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	e00e      	b.n	800478a <HAL_ADC_ConfigChannel+0x2a6>
    result <<= 1U;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2201      	movs	r2, #1
 8004776:	4013      	ands	r3, r2
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
    s--;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	3b01      	subs	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1ed      	bne.n	800476c <HAL_ADC_ConfigChannel+0x288>
  result <<= s;                        /* shift when v's highest bits are zero */
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	409a      	lsls	r2, r3
 8004796:	0013      	movs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
  return result;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d143      	bne.n	800482c <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 80047a4:	2320      	movs	r3, #32
 80047a6:	e046      	b.n	8004836 <HAL_ADC_ConfigChannel+0x352>
 80047a8:	40012400 	.word	0x40012400
 80047ac:	000008e4 	.word	0x000008e4
 80047b0:	0800bbb8 	.word	0x0800bbb8
 80047b4:	04000002 	.word	0x04000002
 80047b8:	08000004 	.word	0x08000004
 80047bc:	0c000008 	.word	0x0c000008
 80047c0:	10000010 	.word	0x10000010
 80047c4:	14000020 	.word	0x14000020
 80047c8:	18000040 	.word	0x18000040
 80047cc:	1c000080 	.word	0x1c000080
 80047d0:	20000100 	.word	0x20000100
 80047d4:	24000200 	.word	0x24000200
 80047d8:	28000400 	.word	0x28000400
 80047dc:	2c000800 	.word	0x2c000800
 80047e0:	30001000 	.word	0x30001000
 80047e4:	34002000 	.word	0x34002000
 80047e8:	38004000 	.word	0x38004000
 80047ec:	3c008000 	.word	0x3c008000
 80047f0:	40010000 	.word	0x40010000
 80047f4:	44020000 	.word	0x44020000
 80047f8:	48040000 	.word	0x48040000
 80047fc:	4c080000 	.word	0x4c080000
 8004800:	ac000800 	.word	0xac000800
 8004804:	b0001000 	.word	0xb0001000
 8004808:	b4002000 	.word	0xb4002000
 800480c:	cc080000 	.word	0xcc080000
 8004810:	000008e5 	.word	0x000008e5
 8004814:	7fffff04 	.word	0x7fffff04
 8004818:	000008e6 	.word	0x000008e6
 800481c:	80000004 	.word	0x80000004
 8004820:	000008eb 	.word	0x000008eb
 8004824:	000008ef 	.word	0x000008ef
 8004828:	000008f1 	.word	0x000008f1
  return __builtin_clz(value);
 800482c:	69f8      	ldr	r0, [r7, #28]
 800482e:	f7fb fd35 	bl	800029c <__clzsi2>
 8004832:	0003      	movs	r3, r0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	001a      	movs	r2, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	211f      	movs	r1, #31
 800483e:	400b      	ands	r3, r1
 8004840:	409a      	lsls	r2, r3
 8004842:	0013      	movs	r3, r2
 8004844:	0022      	movs	r2, r4
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	089b      	lsrs	r3, r3, #2
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	429a      	cmp	r2, r3
 800485a:	d808      	bhi.n	800486e <HAL_ADC_ConfigChannel+0x38a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	001a      	movs	r2, r3
 800486a:	f7fe fedd 	bl	8003628 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6819      	ldr	r1, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	001a      	movs	r2, r3
 800487c:	f7fe ff18 	bl	80036b0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	db00      	blt.n	800488a <HAL_ADC_ConfigChannel+0x3a6>
 8004888:	e0a6      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x4f4>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800488a:	4b59      	ldr	r3, [pc, #356]	@ (80049f0 <HAL_ADC_ConfigChannel+0x50c>)
 800488c:	0018      	movs	r0, r3
 800488e:	f7fe fe79 	bl	8003584 <LL_ADC_GetCommonPathInternalCh>
 8004892:	0003      	movs	r3, r0
 8004894:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a56      	ldr	r2, [pc, #344]	@ (80049f4 <HAL_ADC_ConfigChannel+0x510>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d122      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x402>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	2380      	movs	r3, #128	@ 0x80
 80048a4:	041b      	lsls	r3, r3, #16
 80048a6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80048a8:	d11d      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x402>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	2280      	movs	r2, #128	@ 0x80
 80048ae:	0412      	lsls	r2, r2, #16
 80048b0:	4313      	orrs	r3, r2
 80048b2:	4a4f      	ldr	r2, [pc, #316]	@ (80049f0 <HAL_ADC_ConfigChannel+0x50c>)
 80048b4:	0019      	movs	r1, r3
 80048b6:	0010      	movs	r0, r2
 80048b8:	f7fe fe50 	bl	800355c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048bc:	4b4e      	ldr	r3, [pc, #312]	@ (80049f8 <HAL_ADC_ConfigChannel+0x514>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	494e      	ldr	r1, [pc, #312]	@ (80049fc <HAL_ADC_ConfigChannel+0x518>)
 80048c2:	0018      	movs	r0, r3
 80048c4:	f7fb fc20 	bl	8000108 <__udivsi3>
 80048c8:	0003      	movs	r3, r0
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	0013      	movs	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	189b      	adds	r3, r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048d6:	e002      	b.n	80048de <HAL_ADC_ConfigChannel+0x3fa>
          {
            wait_loop_index--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3b01      	subs	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f9      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x3f4>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80048e4:	e078      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x4f4>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a45      	ldr	r2, [pc, #276]	@ (8004a00 <HAL_ADC_ConfigChannel+0x51c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10e      	bne.n	800490e <HAL_ADC_ConfigChannel+0x42a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048f0:	6a3a      	ldr	r2, [r7, #32]
 80048f2:	2380      	movs	r3, #128	@ 0x80
 80048f4:	045b      	lsls	r3, r3, #17
 80048f6:	4013      	ands	r3, r2
 80048f8:	d109      	bne.n	800490e <HAL_ADC_ConfigChannel+0x42a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	2280      	movs	r2, #128	@ 0x80
 80048fe:	0452      	lsls	r2, r2, #17
 8004900:	4313      	orrs	r3, r2
 8004902:	4a3b      	ldr	r2, [pc, #236]	@ (80049f0 <HAL_ADC_ConfigChannel+0x50c>)
 8004904:	0019      	movs	r1, r3
 8004906:	0010      	movs	r0, r2
 8004908:	f7fe fe28 	bl	800355c <LL_ADC_SetCommonPathInternalCh>
 800490c:	e064      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x4f4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3c      	ldr	r2, [pc, #240]	@ (8004a04 <HAL_ADC_ConfigChannel+0x520>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d15f      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x4f4>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004918:	6a3a      	ldr	r2, [r7, #32]
 800491a:	2380      	movs	r3, #128	@ 0x80
 800491c:	03db      	lsls	r3, r3, #15
 800491e:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004920:	d15a      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x4f4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	2280      	movs	r2, #128	@ 0x80
 8004926:	03d2      	lsls	r2, r2, #15
 8004928:	4313      	orrs	r3, r2
 800492a:	4a31      	ldr	r2, [pc, #196]	@ (80049f0 <HAL_ADC_ConfigChannel+0x50c>)
 800492c:	0019      	movs	r1, r3
 800492e:	0010      	movs	r0, r2
 8004930:	f7fe fe14 	bl	800355c <LL_ADC_SetCommonPathInternalCh>
 8004934:	e050      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x4f4>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	2380      	movs	r3, #128	@ 0x80
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	429a      	cmp	r2, r3
 8004940:	d004      	beq.n	800494c <HAL_ADC_ConfigChannel+0x468>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004946:	4a30      	ldr	r2, [pc, #192]	@ (8004a08 <HAL_ADC_ConfigChannel+0x524>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d107      	bne.n	800495c <HAL_ADC_ConfigChannel+0x478>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0019      	movs	r1, r3
 8004956:	0010      	movs	r0, r2
 8004958:	f7fe fe97 	bl	800368a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	da39      	bge.n	80049d8 <HAL_ADC_ConfigChannel+0x4f4>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004964:	4b22      	ldr	r3, [pc, #136]	@ (80049f0 <HAL_ADC_ConfigChannel+0x50c>)
 8004966:	0018      	movs	r0, r3
 8004968:	f7fe fe0c 	bl	8003584 <LL_ADC_GetCommonPathInternalCh>
 800496c:	0003      	movs	r3, r0
 800496e:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1f      	ldr	r2, [pc, #124]	@ (80049f4 <HAL_ADC_ConfigChannel+0x510>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d108      	bne.n	800498c <HAL_ADC_ConfigChannel+0x4a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	4a23      	ldr	r2, [pc, #140]	@ (8004a0c <HAL_ADC_ConfigChannel+0x528>)
 800497e:	4013      	ands	r3, r2
 8004980:	4a1b      	ldr	r2, [pc, #108]	@ (80049f0 <HAL_ADC_ConfigChannel+0x50c>)
 8004982:	0019      	movs	r1, r3
 8004984:	0010      	movs	r0, r2
 8004986:	f7fe fde9 	bl	800355c <LL_ADC_SetCommonPathInternalCh>
 800498a:	e025      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x4f4>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1b      	ldr	r2, [pc, #108]	@ (8004a00 <HAL_ADC_ConfigChannel+0x51c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d108      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x4c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <HAL_ADC_ConfigChannel+0x52c>)
 800499a:	4013      	ands	r3, r2
 800499c:	4a14      	ldr	r2, [pc, #80]	@ (80049f0 <HAL_ADC_ConfigChannel+0x50c>)
 800499e:	0019      	movs	r1, r3
 80049a0:	0010      	movs	r0, r2
 80049a2:	f7fe fddb 	bl	800355c <LL_ADC_SetCommonPathInternalCh>
 80049a6:	e017      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x4f4>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a15      	ldr	r2, [pc, #84]	@ (8004a04 <HAL_ADC_ConfigChannel+0x520>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d112      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x4f4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	4a17      	ldr	r2, [pc, #92]	@ (8004a14 <HAL_ADC_ConfigChannel+0x530>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	4a0d      	ldr	r2, [pc, #52]	@ (80049f0 <HAL_ADC_ConfigChannel+0x50c>)
 80049ba:	0019      	movs	r1, r3
 80049bc:	0010      	movs	r0, r2
 80049be:	f7fe fdcd 	bl	800355c <LL_ADC_SetCommonPathInternalCh>
 80049c2:	e009      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x4f4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c8:	2220      	movs	r2, #32
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80049d0:	2327      	movs	r3, #39	@ 0x27
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2254      	movs	r2, #84	@ 0x54
 80049dc:	2100      	movs	r1, #0
 80049de:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80049e0:	2327      	movs	r3, #39	@ 0x27
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	781b      	ldrb	r3, [r3, #0]
}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b00b      	add	sp, #44	@ 0x2c
 80049ec:	bd90      	pop	{r4, r7, pc}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	40012708 	.word	0x40012708
 80049f4:	ac000800 	.word	0xac000800
 80049f8:	20000010 	.word	0x20000010
 80049fc:	00030d40 	.word	0x00030d40
 8004a00:	b4002000 	.word	0xb4002000
 8004a04:	b0001000 	.word	0xb0001000
 8004a08:	80000004 	.word	0x80000004
 8004a0c:	ff7fffff 	.word	0xff7fffff
 8004a10:	feffffff 	.word	0xfeffffff
 8004a14:	ffbfffff 	.word	0xffbfffff

08004a18 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a23      	ldr	r2, [pc, #140]	@ (8004ab4 <ADC_ConversionStop+0x9c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d005      	beq.n	8004a36 <ADC_ConversionStop+0x1e>
 8004a2a:	4a23      	ldr	r2, [pc, #140]	@ (8004ab8 <ADC_ConversionStop+0xa0>)
 8004a2c:	4b23      	ldr	r3, [pc, #140]	@ (8004abc <ADC_ConversionStop+0xa4>)
 8004a2e:	0011      	movs	r1, r2
 8004a30:	0018      	movs	r0, r3
 8004a32:	f7fe fbc1 	bl	80031b8 <assert_failed>

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f7fe fef6 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8004a40:	1e03      	subs	r3, r0, #0
 8004a42:	d031      	beq.n	8004aa8 <ADC_ConversionStop+0x90>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7fe feba 	bl	80037c2 <LL_ADC_IsDisableOngoing>
 8004a4e:	1e03      	subs	r3, r0, #0
 8004a50:	d104      	bne.n	8004a5c <ADC_ConversionStop+0x44>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7fe fed6 	bl	8003808 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a5c:	f7fe fd52 	bl	8003504 <HAL_GetTick>
 8004a60:	0003      	movs	r3, r0
 8004a62:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004a64:	e01a      	b.n	8004a9c <ADC_ConversionStop+0x84>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004a66:	f7fe fd4d 	bl	8003504 <HAL_GetTick>
 8004a6a:	0002      	movs	r2, r0
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d913      	bls.n	8004a9c <ADC_ConversionStop+0x84>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d00d      	beq.n	8004a9c <ADC_ConversionStop+0x84>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a84:	2210      	movs	r2, #16
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a90:	2201      	movs	r2, #1
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e006      	b.n	8004aaa <ADC_ConversionStop+0x92>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d1de      	bne.n	8004a66 <ADC_ConversionStop+0x4e>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b004      	add	sp, #16
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	40012400 	.word	0x40012400
 8004ab8:	00000ac7 	.word	0x00000ac7
 8004abc:	0800bbb8 	.word	0x0800bbb8

08004ac0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f7fe fe65 	bl	80037a0 <LL_ADC_IsEnabled>
 8004ad6:	1e03      	subs	r3, r0, #0
 8004ad8:	d000      	beq.n	8004adc <ADC_Enable+0x1c>
 8004ada:	e069      	b.n	8004bb0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	4a36      	ldr	r2, [pc, #216]	@ (8004bbc <ADC_Enable+0xfc>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d00d      	beq.n	8004b04 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aec:	2210      	movs	r2, #16
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af8:	2201      	movs	r2, #1
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e056      	b.n	8004bb2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fe fe25 	bl	8003758 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8004b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc0 <ADC_Enable+0x100>)
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7fe fd37 	bl	8003584 <LL_ADC_GetCommonPathInternalCh>
 8004b16:	0002      	movs	r2, r0
 8004b18:	2380      	movs	r3, #128	@ 0x80
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d00f      	beq.n	8004b40 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b20:	4b28      	ldr	r3, [pc, #160]	@ (8004bc4 <ADC_Enable+0x104>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4928      	ldr	r1, [pc, #160]	@ (8004bc8 <ADC_Enable+0x108>)
 8004b26:	0018      	movs	r0, r3
 8004b28:	f7fb faee 	bl	8000108 <__udivsi3>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8004b30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b32:	e002      	b.n	8004b3a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f9      	bne.n	8004b34 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	7e5b      	ldrb	r3, [r3, #25]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d033      	beq.n	8004bb0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004b48:	f7fe fcdc 	bl	8003504 <HAL_GetTick>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b50:	e027      	b.n	8004ba2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f7fe fe22 	bl	80037a0 <LL_ADC_IsEnabled>
 8004b5c:	1e03      	subs	r3, r0, #0
 8004b5e:	d104      	bne.n	8004b6a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7fe fdf7 	bl	8003758 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b6a:	f7fe fccb 	bl	8003504 <HAL_GetTick>
 8004b6e:	0002      	movs	r2, r0
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d914      	bls.n	8004ba2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d00d      	beq.n	8004ba2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8a:	2210      	movs	r2, #16
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b96:	2201      	movs	r2, #1
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e007      	b.n	8004bb2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d1d0      	bne.n	8004b52 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b004      	add	sp, #16
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	46c0      	nop			@ (mov r8, r8)
 8004bbc:	80000017 	.word	0x80000017
 8004bc0:	40012708 	.word	0x40012708
 8004bc4:	20000010 	.word	0x20000010
 8004bc8:	00030d40 	.word	0x00030d40

08004bcc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7fe fdf2 	bl	80037c2 <LL_ADC_IsDisableOngoing>
 8004bde:	0003      	movs	r3, r0
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	0018      	movs	r0, r3
 8004be8:	f7fe fdda 	bl	80037a0 <LL_ADC_IsEnabled>
 8004bec:	1e03      	subs	r3, r0, #0
 8004bee:	d046      	beq.n	8004c7e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d143      	bne.n	8004c7e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2205      	movs	r2, #5
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d10d      	bne.n	8004c20 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7fe fdb7 	bl	800377c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2203      	movs	r2, #3
 8004c14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c16:	f7fe fc75 	bl	8003504 <HAL_GetTick>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c1e:	e028      	b.n	8004c72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c24:	2210      	movs	r2, #16
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c30:	2201      	movs	r2, #1
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e021      	b.n	8004c80 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c3c:	f7fe fc62 	bl	8003504 <HAL_GetTick>
 8004c40:	0002      	movs	r2, r0
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d913      	bls.n	8004c72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2201      	movs	r2, #1
 8004c52:	4013      	ands	r3, r2
 8004c54:	d00d      	beq.n	8004c72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c66:	2201      	movs	r2, #1
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e006      	b.n	8004c80 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d1de      	bne.n	8004c3c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b004      	add	sp, #16
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <LL_ADC_GetCommonClock>:
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	23f0      	movs	r3, #240	@ 0xf0
 8004c96:	039b      	lsls	r3, r3, #14
 8004c98:	4013      	ands	r3, r2
}
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b002      	add	sp, #8
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <LL_ADC_GetClock>:
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	0f9b      	lsrs	r3, r3, #30
 8004cb0:	079b      	lsls	r3, r3, #30
}
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b002      	add	sp, #8
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <LL_ADC_SetCalibrationFactor>:
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	22b4      	movs	r2, #180	@ 0xb4
 8004cc8:	589b      	ldr	r3, [r3, r2]
 8004cca:	227f      	movs	r2, #127	@ 0x7f
 8004ccc:	4393      	bics	r3, r2
 8004cce:	001a      	movs	r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	21b4      	movs	r1, #180	@ 0xb4
 8004cd8:	505a      	str	r2, [r3, r1]
}
 8004cda:	46c0      	nop			@ (mov r8, r8)
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	b002      	add	sp, #8
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <LL_ADC_GetCalibrationFactor>:
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	22b4      	movs	r2, #180	@ 0xb4
 8004cee:	589b      	ldr	r3, [r3, r2]
 8004cf0:	227f      	movs	r2, #127	@ 0x7f
 8004cf2:	4013      	ands	r3, r2
}
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b002      	add	sp, #8
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <LL_ADC_Enable>:
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a04      	ldr	r2, [pc, #16]	@ (8004d1c <LL_ADC_Enable+0x20>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	46c0      	nop			@ (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	7fffffe8 	.word	0x7fffffe8

08004d20 <LL_ADC_Disable>:
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4a04      	ldr	r2, [pc, #16]	@ (8004d40 <LL_ADC_Disable+0x20>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2202      	movs	r2, #2
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	609a      	str	r2, [r3, #8]
}
 8004d38:	46c0      	nop			@ (mov r8, r8)
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b002      	add	sp, #8
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	7fffffe8 	.word	0x7fffffe8

08004d44 <LL_ADC_IsEnabled>:
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2201      	movs	r2, #1
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <LL_ADC_IsEnabled+0x18>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <LL_ADC_IsEnabled+0x1a>
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	0018      	movs	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b002      	add	sp, #8
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <LL_ADC_StartCalibration>:
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4a05      	ldr	r2, [pc, #20]	@ (8004d8c <LL_ADC_StartCalibration+0x24>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	2280      	movs	r2, #128	@ 0x80
 8004d7a:	0612      	lsls	r2, r2, #24
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	609a      	str	r2, [r3, #8]
}
 8004d82:	46c0      	nop			@ (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b002      	add	sp, #8
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	7fffffe8 	.word	0x7fffffe8

08004d90 <LL_ADC_IsCalibrationOnGoing>:
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	0fdb      	lsrs	r3, r3, #31
 8004d9e:	07da      	lsls	r2, r3, #31
 8004da0:	2380      	movs	r3, #128	@ 0x80
 8004da2:	061b      	lsls	r3, r3, #24
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d101      	bne.n	8004dac <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b002      	add	sp, #8
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b08b      	sub	sp, #44	@ 0x2c
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart;
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a78      	ldr	r2, [pc, #480]	@ (8004fb0 <HAL_ADCEx_Calibration_Start+0x1f8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <HAL_ADCEx_Calibration_Start+0x24>
 8004dd2:	4b78      	ldr	r3, [pc, #480]	@ (8004fb4 <HAL_ADCEx_Calibration_Start+0x1fc>)
 8004dd4:	2172      	movs	r1, #114	@ 0x72
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f7fe f9ee 	bl	80031b8 <assert_failed>

  __HAL_LOCK(hadc);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2254      	movs	r2, #84	@ 0x54
 8004de0:	5c9b      	ldrb	r3, [r3, r2]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_ADCEx_Calibration_Start+0x32>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e0de      	b.n	8004fa8 <HAL_ADCEx_Calibration_Start+0x1f0>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2254      	movs	r2, #84	@ 0x54
 8004dee:	2101      	movs	r1, #1
 8004df0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004df2:	231f      	movs	r3, #31
 8004df4:	18fc      	adds	r4, r7, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7ff fee7 	bl	8004bcc <ADC_Disable>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	0018      	movs	r0, r3
 8004e08:	f7ff ff9c 	bl	8004d44 <LL_ADC_IsEnabled>
 8004e0c:	1e03      	subs	r3, r0, #0
 8004e0e:	d000      	beq.n	8004e12 <HAL_ADCEx_Calibration_Start+0x5a>
 8004e10:	e0bd      	b.n	8004f8e <HAL_ADCEx_Calibration_Start+0x1d6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e16:	4a68      	ldr	r2, [pc, #416]	@ (8004fb8 <HAL_ADCEx_Calibration_Start+0x200>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4a64      	ldr	r2, [pc, #400]	@ (8004fbc <HAL_ADCEx_Calibration_Start+0x204>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4961      	ldr	r1, [pc, #388]	@ (8004fc0 <HAL_ADCEx_Calibration_Start+0x208>)
 8004e3a:	400a      	ands	r2, r1
 8004e3c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004e3e:	2300      	movs	r3, #0
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e42:	e02e      	b.n	8004ea2 <HAL_ADCEx_Calibration_Start+0xea>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f7ff ff8d 	bl	8004d68 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e4e:	e015      	b.n	8004e7c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        wait_loop_index++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	23ae      	movs	r3, #174	@ 0xae
 8004e5a:	029b      	lsls	r3, r3, #10
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d30d      	bcc.n	8004e7c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e64:	2212      	movs	r2, #18
 8004e66:	4393      	bics	r3, r2
 8004e68:	2210      	movs	r2, #16
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2254      	movs	r2, #84	@ 0x54
 8004e74:	2100      	movs	r1, #0
 8004e76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e095      	b.n	8004fa8 <HAL_ADCEx_Calibration_Start+0x1f0>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	0018      	movs	r0, r3
 8004e82:	f7ff ff85 	bl	8004d90 <LL_ADC_IsCalibrationOnGoing>
 8004e86:	1e03      	subs	r3, r0, #0
 8004e88:	d1e2      	bne.n	8004e50 <HAL_ADCEx_Calibration_Start+0x98>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f7ff ff27 	bl	8004ce2 <LL_ADC_GetCalibrationFactor>
 8004e94:	0002      	movs	r2, r0
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	189b      	adds	r3, r3, r2
 8004e9a:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	2b07      	cmp	r3, #7
 8004ea6:	d9cd      	bls.n	8004e44 <HAL_ADCEx_Calibration_Start+0x8c>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004ea8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004eaa:	6a38      	ldr	r0, [r7, #32]
 8004eac:	f7fb f92c 	bl	8000108 <__udivsi3>
 8004eb0:	0003      	movs	r3, r0
 8004eb2:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f7ff ff1f 	bl	8004cfc <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f7ff feed 	bl	8004ca2 <LL_ADC_GetClock>
 8004ec8:	1e03      	subs	r3, r0, #0
 8004eca:	d11b      	bne.n	8004f04 <HAL_ADCEx_Calibration_Start+0x14c>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc4 <HAL_ADCEx_Calibration_Start+0x20c>)
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f7ff feda 	bl	8004c88 <LL_ADC_GetCommonClock>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	23e0      	movs	r3, #224	@ 0xe0
 8004edc:	035b      	lsls	r3, r3, #13
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d310      	bcc.n	8004f04 <HAL_ADCEx_Calibration_Start+0x14c>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	0c9b      	lsrs	r3, r3, #18
 8004ee6:	3b03      	subs	r3, #3
 8004ee8:	2201      	movs	r2, #1
 8004eea:	409a      	lsls	r2, r3
 8004eec:	0013      	movs	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8004ef6:	e002      	b.n	8004efe <HAL_ADCEx_Calibration_Start+0x146>
        {
          delay_cpu_cycles--;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f9      	bne.n	8004ef8 <HAL_ADCEx_Calibration_Start+0x140>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6a3a      	ldr	r2, [r7, #32]
 8004f0a:	0011      	movs	r1, r2
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f7ff fed4 	bl	8004cba <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f7ff ff02 	bl	8004d20 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f1c:	f7fe faf2 	bl	8003504 <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f24:	e01b      	b.n	8004f5e <HAL_ADCEx_Calibration_Start+0x1a6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f26:	f7fe faed 	bl	8003504 <HAL_GetTick>
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d914      	bls.n	8004f5e <HAL_ADCEx_Calibration_Start+0x1a6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7ff ff03 	bl	8004d44 <LL_ADC_IsEnabled>
 8004f3e:	1e03      	subs	r3, r0, #0
 8004f40:	d00d      	beq.n	8004f5e <HAL_ADCEx_Calibration_Start+0x1a6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f46:	2210      	movs	r2, #16
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f52:	2201      	movs	r2, #1
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e024      	b.n	8004fa8 <HAL_ADCEx_Calibration_Start+0x1f0>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	0018      	movs	r0, r3
 8004f64:	f7ff feee 	bl	8004d44 <LL_ADC_IsEnabled>
 8004f68:	1e03      	subs	r3, r0, #0
 8004f6a:	d1dc      	bne.n	8004f26 <HAL_ADCEx_Calibration_Start+0x16e>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68d9      	ldr	r1, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f80:	2203      	movs	r2, #3
 8004f82:	4393      	bics	r3, r2
 8004f84:	2201      	movs	r2, #1
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f8c:	e005      	b.n	8004f9a <HAL_ADCEx_Calibration_Start+0x1e2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f92:	2210      	movs	r2, #16
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2254      	movs	r2, #84	@ 0x54
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004fa2:	231f      	movs	r3, #31
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	781b      	ldrb	r3, [r3, #0]
}
 8004fa8:	0018      	movs	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b00b      	add	sp, #44	@ 0x2c
 8004fae:	bd90      	pop	{r4, r7, pc}
 8004fb0:	40012400 	.word	0x40012400
 8004fb4:	0800bbf0 	.word	0x0800bbf0
 8004fb8:	fffffefd 	.word	0xfffffefd
 8004fbc:	00008003 	.word	0x00008003
 8004fc0:	ffff7ffc 	.word	0xffff7ffc
 8004fc4:	40012708 	.word	0x40012708

08004fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	0002      	movs	r2, r0
 8004fd0:	1dfb      	adds	r3, r7, #7
 8004fd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fd4:	1dfb      	adds	r3, r7, #7
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fda:	d809      	bhi.n	8004ff0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fdc:	1dfb      	adds	r3, r7, #7
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	001a      	movs	r2, r3
 8004fe2:	231f      	movs	r3, #31
 8004fe4:	401a      	ands	r2, r3
 8004fe6:	4b04      	ldr	r3, [pc, #16]	@ (8004ff8 <__NVIC_EnableIRQ+0x30>)
 8004fe8:	2101      	movs	r1, #1
 8004fea:	4091      	lsls	r1, r2
 8004fec:	000a      	movs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004ff0:	46c0      	nop			@ (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b002      	add	sp, #8
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	e000e100 	.word	0xe000e100

08004ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	0002      	movs	r2, r0
 8005004:	6039      	str	r1, [r7, #0]
 8005006:	1dfb      	adds	r3, r7, #7
 8005008:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800500a:	1dfb      	adds	r3, r7, #7
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005010:	d828      	bhi.n	8005064 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005012:	4a2f      	ldr	r2, [pc, #188]	@ (80050d0 <__NVIC_SetPriority+0xd4>)
 8005014:	1dfb      	adds	r3, r7, #7
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	b25b      	sxtb	r3, r3
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	33c0      	adds	r3, #192	@ 0xc0
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	589b      	ldr	r3, [r3, r2]
 8005022:	1dfa      	adds	r2, r7, #7
 8005024:	7812      	ldrb	r2, [r2, #0]
 8005026:	0011      	movs	r1, r2
 8005028:	2203      	movs	r2, #3
 800502a:	400a      	ands	r2, r1
 800502c:	00d2      	lsls	r2, r2, #3
 800502e:	21ff      	movs	r1, #255	@ 0xff
 8005030:	4091      	lsls	r1, r2
 8005032:	000a      	movs	r2, r1
 8005034:	43d2      	mvns	r2, r2
 8005036:	401a      	ands	r2, r3
 8005038:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	019b      	lsls	r3, r3, #6
 800503e:	22ff      	movs	r2, #255	@ 0xff
 8005040:	401a      	ands	r2, r3
 8005042:	1dfb      	adds	r3, r7, #7
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	0018      	movs	r0, r3
 8005048:	2303      	movs	r3, #3
 800504a:	4003      	ands	r3, r0
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005050:	481f      	ldr	r0, [pc, #124]	@ (80050d0 <__NVIC_SetPriority+0xd4>)
 8005052:	1dfb      	adds	r3, r7, #7
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	b25b      	sxtb	r3, r3
 8005058:	089b      	lsrs	r3, r3, #2
 800505a:	430a      	orrs	r2, r1
 800505c:	33c0      	adds	r3, #192	@ 0xc0
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005062:	e031      	b.n	80050c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005064:	4a1b      	ldr	r2, [pc, #108]	@ (80050d4 <__NVIC_SetPriority+0xd8>)
 8005066:	1dfb      	adds	r3, r7, #7
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	0019      	movs	r1, r3
 800506c:	230f      	movs	r3, #15
 800506e:	400b      	ands	r3, r1
 8005070:	3b08      	subs	r3, #8
 8005072:	089b      	lsrs	r3, r3, #2
 8005074:	3306      	adds	r3, #6
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	18d3      	adds	r3, r2, r3
 800507a:	3304      	adds	r3, #4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	1dfa      	adds	r2, r7, #7
 8005080:	7812      	ldrb	r2, [r2, #0]
 8005082:	0011      	movs	r1, r2
 8005084:	2203      	movs	r2, #3
 8005086:	400a      	ands	r2, r1
 8005088:	00d2      	lsls	r2, r2, #3
 800508a:	21ff      	movs	r1, #255	@ 0xff
 800508c:	4091      	lsls	r1, r2
 800508e:	000a      	movs	r2, r1
 8005090:	43d2      	mvns	r2, r2
 8005092:	401a      	ands	r2, r3
 8005094:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	019b      	lsls	r3, r3, #6
 800509a:	22ff      	movs	r2, #255	@ 0xff
 800509c:	401a      	ands	r2, r3
 800509e:	1dfb      	adds	r3, r7, #7
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	0018      	movs	r0, r3
 80050a4:	2303      	movs	r3, #3
 80050a6:	4003      	ands	r3, r0
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050ac:	4809      	ldr	r0, [pc, #36]	@ (80050d4 <__NVIC_SetPriority+0xd8>)
 80050ae:	1dfb      	adds	r3, r7, #7
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	001c      	movs	r4, r3
 80050b4:	230f      	movs	r3, #15
 80050b6:	4023      	ands	r3, r4
 80050b8:	3b08      	subs	r3, #8
 80050ba:	089b      	lsrs	r3, r3, #2
 80050bc:	430a      	orrs	r2, r1
 80050be:	3306      	adds	r3, #6
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	18c3      	adds	r3, r0, r3
 80050c4:	3304      	adds	r3, #4
 80050c6:	601a      	str	r2, [r3, #0]
}
 80050c8:	46c0      	nop			@ (mov r8, r8)
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b003      	add	sp, #12
 80050ce:	bd90      	pop	{r4, r7, pc}
 80050d0:	e000e100 	.word	0xe000e100
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	1e5a      	subs	r2, r3, #1
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	045b      	lsls	r3, r3, #17
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d301      	bcc.n	80050f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050ec:	2301      	movs	r3, #1
 80050ee:	e010      	b.n	8005112 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050f0:	4b0a      	ldr	r3, [pc, #40]	@ (800511c <SysTick_Config+0x44>)
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	3a01      	subs	r2, #1
 80050f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050f8:	2301      	movs	r3, #1
 80050fa:	425b      	negs	r3, r3
 80050fc:	2103      	movs	r1, #3
 80050fe:	0018      	movs	r0, r3
 8005100:	f7ff ff7c 	bl	8004ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005104:	4b05      	ldr	r3, [pc, #20]	@ (800511c <SysTick_Config+0x44>)
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800510a:	4b04      	ldr	r3, [pc, #16]	@ (800511c <SysTick_Config+0x44>)
 800510c:	2207      	movs	r2, #7
 800510e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005110:	2300      	movs	r3, #0
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	b002      	add	sp, #8
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	e000e010 	.word	0xe000e010

08005120 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	230f      	movs	r3, #15
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	1c02      	adds	r2, r0, #0
 8005130:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d904      	bls.n	8005142 <HAL_NVIC_SetPriority+0x22>
 8005138:	4b08      	ldr	r3, [pc, #32]	@ (800515c <HAL_NVIC_SetPriority+0x3c>)
 800513a:	2187      	movs	r1, #135	@ 0x87
 800513c:	0018      	movs	r0, r3
 800513e:	f7fe f83b 	bl	80031b8 <assert_failed>
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	230f      	movs	r3, #15
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	b25b      	sxtb	r3, r3
 800514c:	0011      	movs	r1, r2
 800514e:	0018      	movs	r0, r3
 8005150:	f7ff ff54 	bl	8004ffc <__NVIC_SetPriority>
}
 8005154:	46c0      	nop			@ (mov r8, r8)
 8005156:	46bd      	mov	sp, r7
 8005158:	b004      	add	sp, #16
 800515a:	bd80      	pop	{r7, pc}
 800515c:	0800bc2c 	.word	0x0800bc2c

08005160 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	0002      	movs	r2, r0
 8005168:	1dfb      	adds	r3, r7, #7
 800516a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800516c:	1dfb      	adds	r3, r7, #7
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b7f      	cmp	r3, #127	@ 0x7f
 8005172:	d904      	bls.n	800517e <HAL_NVIC_EnableIRQ+0x1e>
 8005174:	4b07      	ldr	r3, [pc, #28]	@ (8005194 <HAL_NVIC_EnableIRQ+0x34>)
 8005176:	2196      	movs	r1, #150	@ 0x96
 8005178:	0018      	movs	r0, r3
 800517a:	f7fe f81d 	bl	80031b8 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800517e:	1dfb      	adds	r3, r7, #7
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	b25b      	sxtb	r3, r3
 8005184:	0018      	movs	r0, r3
 8005186:	f7ff ff1f 	bl	8004fc8 <__NVIC_EnableIRQ>
}
 800518a:	46c0      	nop			@ (mov r8, r8)
 800518c:	46bd      	mov	sp, r7
 800518e:	b002      	add	sp, #8
 8005190:	bd80      	pop	{r7, pc}
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	0800bc2c 	.word	0x0800bc2c

08005198 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7ff ff98 	bl	80050d8 <SysTick_Config>
 80051a8:	0003      	movs	r3, r0
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b002      	add	sp, #8
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	23a0      	movs	r3, #160	@ 0xa0
 80051c6:	05db      	lsls	r3, r3, #23
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d014      	beq.n	80051f6 <HAL_GPIO_Init+0x42>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4acf      	ldr	r2, [pc, #828]	@ (800550c <HAL_GPIO_Init+0x358>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d010      	beq.n	80051f6 <HAL_GPIO_Init+0x42>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4ace      	ldr	r2, [pc, #824]	@ (8005510 <HAL_GPIO_Init+0x35c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00c      	beq.n	80051f6 <HAL_GPIO_Init+0x42>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4acd      	ldr	r2, [pc, #820]	@ (8005514 <HAL_GPIO_Init+0x360>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d008      	beq.n	80051f6 <HAL_GPIO_Init+0x42>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4acc      	ldr	r2, [pc, #816]	@ (8005518 <HAL_GPIO_Init+0x364>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_GPIO_Init+0x42>
 80051ec:	4bcb      	ldr	r3, [pc, #812]	@ (800551c <HAL_GPIO_Init+0x368>)
 80051ee:	21a3      	movs	r1, #163	@ 0xa3
 80051f0:	0018      	movs	r0, r3
 80051f2:	f7fd ffe1 	bl	80031b8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	d005      	beq.n	800520c <HAL_GPIO_Init+0x58>
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	2380      	movs	r3, #128	@ 0x80
 8005206:	025b      	lsls	r3, r3, #9
 8005208:	429a      	cmp	r2, r3
 800520a:	d304      	bcc.n	8005216 <HAL_GPIO_Init+0x62>
 800520c:	4bc3      	ldr	r3, [pc, #780]	@ (800551c <HAL_GPIO_Init+0x368>)
 800520e:	21a4      	movs	r1, #164	@ 0xa4
 8005210:	0018      	movs	r0, r3
 8005212:	f7fd ffd1 	bl	80031b8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d100      	bne.n	8005220 <HAL_GPIO_Init+0x6c>
 800521e:	e1ec      	b.n	80055fa <HAL_GPIO_Init+0x446>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d100      	bne.n	800522a <HAL_GPIO_Init+0x76>
 8005228:	e1e7      	b.n	80055fa <HAL_GPIO_Init+0x446>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b11      	cmp	r3, #17
 8005230:	d100      	bne.n	8005234 <HAL_GPIO_Init+0x80>
 8005232:	e1e2      	b.n	80055fa <HAL_GPIO_Init+0x446>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d100      	bne.n	800523e <HAL_GPIO_Init+0x8a>
 800523c:	e1dd      	b.n	80055fa <HAL_GPIO_Init+0x446>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b12      	cmp	r3, #18
 8005244:	d100      	bne.n	8005248 <HAL_GPIO_Init+0x94>
 8005246:	e1d8      	b.n	80055fa <HAL_GPIO_Init+0x446>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	2388      	movs	r3, #136	@ 0x88
 800524e:	035b      	lsls	r3, r3, #13
 8005250:	429a      	cmp	r2, r3
 8005252:	d100      	bne.n	8005256 <HAL_GPIO_Init+0xa2>
 8005254:	e1d1      	b.n	80055fa <HAL_GPIO_Init+0x446>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	2384      	movs	r3, #132	@ 0x84
 800525c:	039b      	lsls	r3, r3, #14
 800525e:	429a      	cmp	r2, r3
 8005260:	d100      	bne.n	8005264 <HAL_GPIO_Init+0xb0>
 8005262:	e1ca      	b.n	80055fa <HAL_GPIO_Init+0x446>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	23c4      	movs	r3, #196	@ 0xc4
 800526a:	039b      	lsls	r3, r3, #14
 800526c:	429a      	cmp	r2, r3
 800526e:	d100      	bne.n	8005272 <HAL_GPIO_Init+0xbe>
 8005270:	e1c3      	b.n	80055fa <HAL_GPIO_Init+0x446>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	2390      	movs	r3, #144	@ 0x90
 8005278:	035b      	lsls	r3, r3, #13
 800527a:	429a      	cmp	r2, r3
 800527c:	d100      	bne.n	8005280 <HAL_GPIO_Init+0xcc>
 800527e:	e1bc      	b.n	80055fa <HAL_GPIO_Init+0x446>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	2388      	movs	r3, #136	@ 0x88
 8005286:	039b      	lsls	r3, r3, #14
 8005288:	429a      	cmp	r2, r3
 800528a:	d100      	bne.n	800528e <HAL_GPIO_Init+0xda>
 800528c:	e1b5      	b.n	80055fa <HAL_GPIO_Init+0x446>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	23c8      	movs	r3, #200	@ 0xc8
 8005294:	039b      	lsls	r3, r3, #14
 8005296:	429a      	cmp	r2, r3
 8005298:	d100      	bne.n	800529c <HAL_GPIO_Init+0xe8>
 800529a:	e1ae      	b.n	80055fa <HAL_GPIO_Init+0x446>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d100      	bne.n	80052a6 <HAL_GPIO_Init+0xf2>
 80052a4:	e1a9      	b.n	80055fa <HAL_GPIO_Init+0x446>
 80052a6:	4b9d      	ldr	r3, [pc, #628]	@ (800551c <HAL_GPIO_Init+0x368>)
 80052a8:	21a5      	movs	r1, #165	@ 0xa5
 80052aa:	0018      	movs	r0, r3
 80052ac:	f7fd ff84 	bl	80031b8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052b0:	e1a3      	b.n	80055fa <HAL_GPIO_Init+0x446>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2101      	movs	r1, #1
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4091      	lsls	r1, r2
 80052bc:	000a      	movs	r2, r1
 80052be:	4013      	ands	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d100      	bne.n	80052ca <HAL_GPIO_Init+0x116>
 80052c8:	e194      	b.n	80055f4 <HAL_GPIO_Init+0x440>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2203      	movs	r2, #3
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d005      	beq.n	80052e2 <HAL_GPIO_Init+0x12e>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2203      	movs	r2, #3
 80052dc:	4013      	ands	r3, r2
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d145      	bne.n	800536e <HAL_GPIO_Init+0x1ba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d010      	beq.n	800530c <HAL_GPIO_Init+0x158>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d00c      	beq.n	800530c <HAL_GPIO_Init+0x158>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d008      	beq.n	800530c <HAL_GPIO_Init+0x158>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d004      	beq.n	800530c <HAL_GPIO_Init+0x158>
 8005302:	4b86      	ldr	r3, [pc, #536]	@ (800551c <HAL_GPIO_Init+0x368>)
 8005304:	21b4      	movs	r1, #180	@ 0xb4
 8005306:	0018      	movs	r0, r3
 8005308:	f7fd ff56 	bl	80031b8 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	2203      	movs	r2, #3
 8005318:	409a      	lsls	r2, r3
 800531a:	0013      	movs	r3, r2
 800531c:	43da      	mvns	r2, r3
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4013      	ands	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	409a      	lsls	r2, r3
 800532e:	0013      	movs	r3, r2
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005342:	2201      	movs	r2, #1
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	409a      	lsls	r2, r3
 8005348:	0013      	movs	r3, r2
 800534a:	43da      	mvns	r2, r3
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4013      	ands	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	091b      	lsrs	r3, r3, #4
 8005358:	2201      	movs	r2, #1
 800535a:	401a      	ands	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	409a      	lsls	r2, r3
 8005360:	0013      	movs	r3, r2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2203      	movs	r2, #3
 8005374:	4013      	ands	r3, r2
 8005376:	2b03      	cmp	r3, #3
 8005378:	d028      	beq.n	80053cc <HAL_GPIO_Init+0x218>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_GPIO_Init+0x1e8>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d008      	beq.n	800539c <HAL_GPIO_Init+0x1e8>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d004      	beq.n	800539c <HAL_GPIO_Init+0x1e8>
 8005392:	4b62      	ldr	r3, [pc, #392]	@ (800551c <HAL_GPIO_Init+0x368>)
 8005394:	21c6      	movs	r1, #198	@ 0xc6
 8005396:	0018      	movs	r0, r3
 8005398:	f7fd ff0e 	bl	80031b8 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	2203      	movs	r2, #3
 80053a8:	409a      	lsls	r2, r3
 80053aa:	0013      	movs	r3, r2
 80053ac:	43da      	mvns	r2, r3
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4013      	ands	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	409a      	lsls	r2, r3
 80053be:	0013      	movs	r3, r2
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2203      	movs	r2, #3
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d146      	bne.n	8005466 <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	23a0      	movs	r3, #160	@ 0xa0
 80053dc:	05db      	lsls	r3, r3, #23
 80053de:	429a      	cmp	r2, r3
 80053e0:	d014      	beq.n	800540c <HAL_GPIO_Init+0x258>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a49      	ldr	r2, [pc, #292]	@ (800550c <HAL_GPIO_Init+0x358>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d010      	beq.n	800540c <HAL_GPIO_Init+0x258>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a48      	ldr	r2, [pc, #288]	@ (8005510 <HAL_GPIO_Init+0x35c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00c      	beq.n	800540c <HAL_GPIO_Init+0x258>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a47      	ldr	r2, [pc, #284]	@ (8005514 <HAL_GPIO_Init+0x360>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d008      	beq.n	800540c <HAL_GPIO_Init+0x258>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a46      	ldr	r2, [pc, #280]	@ (8005518 <HAL_GPIO_Init+0x364>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_GPIO_Init+0x258>
 8005402:	4b46      	ldr	r3, [pc, #280]	@ (800551c <HAL_GPIO_Init+0x368>)
 8005404:	21d3      	movs	r1, #211	@ 0xd3
 8005406:	0018      	movs	r0, r3
 8005408:	f7fd fed6 	bl	80031b8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b0f      	cmp	r3, #15
 8005412:	d904      	bls.n	800541e <HAL_GPIO_Init+0x26a>
 8005414:	4b41      	ldr	r3, [pc, #260]	@ (800551c <HAL_GPIO_Init+0x368>)
 8005416:	21d4      	movs	r1, #212	@ 0xd4
 8005418:	0018      	movs	r0, r3
 800541a:	f7fd fecd 	bl	80031b8 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	08da      	lsrs	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3208      	adds	r2, #8
 8005426:	0092      	lsls	r2, r2, #2
 8005428:	58d3      	ldr	r3, [r2, r3]
 800542a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2207      	movs	r2, #7
 8005430:	4013      	ands	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	220f      	movs	r2, #15
 8005436:	409a      	lsls	r2, r3
 8005438:	0013      	movs	r3, r2
 800543a:	43da      	mvns	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4013      	ands	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2107      	movs	r1, #7
 800544a:	400b      	ands	r3, r1
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	409a      	lsls	r2, r3
 8005450:	0013      	movs	r3, r2
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	08da      	lsrs	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3208      	adds	r2, #8
 8005460:	0092      	lsls	r2, r2, #2
 8005462:	6939      	ldr	r1, [r7, #16]
 8005464:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	2203      	movs	r2, #3
 8005472:	409a      	lsls	r2, r3
 8005474:	0013      	movs	r3, r2
 8005476:	43da      	mvns	r2, r3
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4013      	ands	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2203      	movs	r2, #3
 8005484:	401a      	ands	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	409a      	lsls	r2, r3
 800548c:	0013      	movs	r3, r2
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	23c0      	movs	r3, #192	@ 0xc0
 80054a0:	029b      	lsls	r3, r3, #10
 80054a2:	4013      	ands	r3, r2
 80054a4:	d100      	bne.n	80054a8 <HAL_GPIO_Init+0x2f4>
 80054a6:	e0a5      	b.n	80055f4 <HAL_GPIO_Init+0x440>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80054a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005520 <HAL_GPIO_Init+0x36c>)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	089b      	lsrs	r3, r3, #2
 80054ae:	3318      	adds	r3, #24
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	589b      	ldr	r3, [r3, r2]
 80054b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2203      	movs	r2, #3
 80054ba:	4013      	ands	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	220f      	movs	r2, #15
 80054c0:	409a      	lsls	r2, r3
 80054c2:	0013      	movs	r3, r2
 80054c4:	43da      	mvns	r2, r3
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	4013      	ands	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	23a0      	movs	r3, #160	@ 0xa0
 80054d0:	05db      	lsls	r3, r3, #23
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d026      	beq.n	8005524 <HAL_GPIO_Init+0x370>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a0c      	ldr	r2, [pc, #48]	@ (800550c <HAL_GPIO_Init+0x358>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <HAL_GPIO_Init+0x352>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005510 <HAL_GPIO_Init+0x35c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00d      	beq.n	8005502 <HAL_GPIO_Init+0x34e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005514 <HAL_GPIO_Init+0x360>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d007      	beq.n	80054fe <HAL_GPIO_Init+0x34a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a09      	ldr	r2, [pc, #36]	@ (8005518 <HAL_GPIO_Init+0x364>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d101      	bne.n	80054fa <HAL_GPIO_Init+0x346>
 80054f6:	2305      	movs	r3, #5
 80054f8:	e015      	b.n	8005526 <HAL_GPIO_Init+0x372>
 80054fa:	2306      	movs	r3, #6
 80054fc:	e013      	b.n	8005526 <HAL_GPIO_Init+0x372>
 80054fe:	2303      	movs	r3, #3
 8005500:	e011      	b.n	8005526 <HAL_GPIO_Init+0x372>
 8005502:	2302      	movs	r3, #2
 8005504:	e00f      	b.n	8005526 <HAL_GPIO_Init+0x372>
 8005506:	2301      	movs	r3, #1
 8005508:	e00d      	b.n	8005526 <HAL_GPIO_Init+0x372>
 800550a:	46c0      	nop			@ (mov r8, r8)
 800550c:	50000400 	.word	0x50000400
 8005510:	50000800 	.word	0x50000800
 8005514:	50000c00 	.word	0x50000c00
 8005518:	50001400 	.word	0x50001400
 800551c:	0800bc68 	.word	0x0800bc68
 8005520:	40021800 	.word	0x40021800
 8005524:	2300      	movs	r3, #0
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	2103      	movs	r1, #3
 800552a:	400a      	ands	r2, r1
 800552c:	00d2      	lsls	r2, r2, #3
 800552e:	4093      	lsls	r3, r2
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005536:	4937      	ldr	r1, [pc, #220]	@ (8005614 <HAL_GPIO_Init+0x460>)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	3318      	adds	r3, #24
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005544:	4b33      	ldr	r3, [pc, #204]	@ (8005614 <HAL_GPIO_Init+0x460>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	43da      	mvns	r2, r3
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4013      	ands	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	2380      	movs	r3, #128	@ 0x80
 800555a:	035b      	lsls	r3, r3, #13
 800555c:	4013      	ands	r3, r2
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x3b4>
        {
          temp |= iocurrent;
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005568:	4b2a      	ldr	r3, [pc, #168]	@ (8005614 <HAL_GPIO_Init+0x460>)
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800556e:	4b29      	ldr	r3, [pc, #164]	@ (8005614 <HAL_GPIO_Init+0x460>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	43da      	mvns	r2, r3
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4013      	ands	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	2380      	movs	r3, #128	@ 0x80
 8005584:	039b      	lsls	r3, r3, #14
 8005586:	4013      	ands	r3, r2
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x3de>
        {
          temp |= iocurrent;
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005592:	4b20      	ldr	r3, [pc, #128]	@ (8005614 <HAL_GPIO_Init+0x460>)
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005598:	4a1e      	ldr	r2, [pc, #120]	@ (8005614 <HAL_GPIO_Init+0x460>)
 800559a:	2384      	movs	r3, #132	@ 0x84
 800559c:	58d3      	ldr	r3, [r2, r3]
 800559e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	43da      	mvns	r2, r3
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4013      	ands	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	2380      	movs	r3, #128	@ 0x80
 80055b0:	029b      	lsls	r3, r3, #10
 80055b2:	4013      	ands	r3, r2
 80055b4:	d003      	beq.n	80055be <HAL_GPIO_Init+0x40a>
        {
          temp |= iocurrent;
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80055be:	4915      	ldr	r1, [pc, #84]	@ (8005614 <HAL_GPIO_Init+0x460>)
 80055c0:	2284      	movs	r2, #132	@ 0x84
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80055c6:	4a13      	ldr	r2, [pc, #76]	@ (8005614 <HAL_GPIO_Init+0x460>)
 80055c8:	2380      	movs	r3, #128	@ 0x80
 80055ca:	58d3      	ldr	r3, [r2, r3]
 80055cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	43da      	mvns	r2, r3
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4013      	ands	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	2380      	movs	r3, #128	@ 0x80
 80055de:	025b      	lsls	r3, r3, #9
 80055e0:	4013      	ands	r3, r2
 80055e2:	d003      	beq.n	80055ec <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055ec:	4909      	ldr	r1, [pc, #36]	@ (8005614 <HAL_GPIO_Init+0x460>)
 80055ee:	2280      	movs	r2, #128	@ 0x80
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	3301      	adds	r3, #1
 80055f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	40da      	lsrs	r2, r3
 8005602:	1e13      	subs	r3, r2, #0
 8005604:	d000      	beq.n	8005608 <HAL_GPIO_Init+0x454>
 8005606:	e654      	b.n	80052b2 <HAL_GPIO_Init+0xfe>
  }
}
 8005608:	46c0      	nop			@ (mov r8, r8)
 800560a:	46c0      	nop			@ (mov r8, r8)
 800560c:	46bd      	mov	sp, r7
 800560e:	b006      	add	sp, #24
 8005610:	bd80      	pop	{r7, pc}
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	40021800 	.word	0x40021800

08005618 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	23a0      	movs	r3, #160	@ 0xa0
 800562a:	05db      	lsls	r3, r3, #23
 800562c:	429a      	cmp	r2, r3
 800562e:	d016      	beq.n	800565e <HAL_GPIO_DeInit+0x46>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a77      	ldr	r2, [pc, #476]	@ (8005810 <HAL_GPIO_DeInit+0x1f8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d012      	beq.n	800565e <HAL_GPIO_DeInit+0x46>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a76      	ldr	r2, [pc, #472]	@ (8005814 <HAL_GPIO_DeInit+0x1fc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00e      	beq.n	800565e <HAL_GPIO_DeInit+0x46>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a75      	ldr	r2, [pc, #468]	@ (8005818 <HAL_GPIO_DeInit+0x200>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00a      	beq.n	800565e <HAL_GPIO_DeInit+0x46>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a74      	ldr	r2, [pc, #464]	@ (800581c <HAL_GPIO_DeInit+0x204>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d006      	beq.n	800565e <HAL_GPIO_DeInit+0x46>
 8005650:	2391      	movs	r3, #145	@ 0x91
 8005652:	005a      	lsls	r2, r3, #1
 8005654:	4b72      	ldr	r3, [pc, #456]	@ (8005820 <HAL_GPIO_DeInit+0x208>)
 8005656:	0011      	movs	r1, r2
 8005658:	0018      	movs	r0, r3
 800565a:	f7fd fdad 	bl	80031b8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	0c1b      	lsrs	r3, r3, #16
 8005664:	d005      	beq.n	8005672 <HAL_GPIO_DeInit+0x5a>
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	2380      	movs	r3, #128	@ 0x80
 800566a:	025b      	lsls	r3, r3, #9
 800566c:	429a      	cmp	r2, r3
 800566e:	d200      	bcs.n	8005672 <HAL_GPIO_DeInit+0x5a>
 8005670:	e0c3      	b.n	80057fa <HAL_GPIO_DeInit+0x1e2>
 8005672:	2324      	movs	r3, #36	@ 0x24
 8005674:	33ff      	adds	r3, #255	@ 0xff
 8005676:	001a      	movs	r2, r3
 8005678:	4b69      	ldr	r3, [pc, #420]	@ (8005820 <HAL_GPIO_DeInit+0x208>)
 800567a:	0011      	movs	r1, r2
 800567c:	0018      	movs	r0, r3
 800567e:	f7fd fd9b 	bl	80031b8 <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005682:	e0ba      	b.n	80057fa <HAL_GPIO_DeInit+0x1e2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005684:	2201      	movs	r2, #1
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	409a      	lsls	r2, r3
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d100      	bne.n	8005698 <HAL_GPIO_DeInit+0x80>
 8005696:	e0ad      	b.n	80057f4 <HAL_GPIO_DeInit+0x1dc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8005698:	4a62      	ldr	r2, [pc, #392]	@ (8005824 <HAL_GPIO_DeInit+0x20c>)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	089b      	lsrs	r3, r3, #2
 800569e:	3318      	adds	r3, #24
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	589b      	ldr	r3, [r3, r2]
 80056a4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2203      	movs	r2, #3
 80056aa:	4013      	ands	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	220f      	movs	r2, #15
 80056b0:	409a      	lsls	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4013      	ands	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	23a0      	movs	r3, #160	@ 0xa0
 80056bc:	05db      	lsls	r3, r3, #23
 80056be:	429a      	cmp	r2, r3
 80056c0:	d019      	beq.n	80056f6 <HAL_GPIO_DeInit+0xde>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a52      	ldr	r2, [pc, #328]	@ (8005810 <HAL_GPIO_DeInit+0x1f8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <HAL_GPIO_DeInit+0xda>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a51      	ldr	r2, [pc, #324]	@ (8005814 <HAL_GPIO_DeInit+0x1fc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00d      	beq.n	80056ee <HAL_GPIO_DeInit+0xd6>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a50      	ldr	r2, [pc, #320]	@ (8005818 <HAL_GPIO_DeInit+0x200>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d007      	beq.n	80056ea <HAL_GPIO_DeInit+0xd2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a4f      	ldr	r2, [pc, #316]	@ (800581c <HAL_GPIO_DeInit+0x204>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d101      	bne.n	80056e6 <HAL_GPIO_DeInit+0xce>
 80056e2:	2305      	movs	r3, #5
 80056e4:	e008      	b.n	80056f8 <HAL_GPIO_DeInit+0xe0>
 80056e6:	2306      	movs	r3, #6
 80056e8:	e006      	b.n	80056f8 <HAL_GPIO_DeInit+0xe0>
 80056ea:	2303      	movs	r3, #3
 80056ec:	e004      	b.n	80056f8 <HAL_GPIO_DeInit+0xe0>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e002      	b.n	80056f8 <HAL_GPIO_DeInit+0xe0>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <HAL_GPIO_DeInit+0xe0>
 80056f6:	2300      	movs	r3, #0
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	2103      	movs	r1, #3
 80056fc:	400a      	ands	r2, r1
 80056fe:	00d2      	lsls	r2, r2, #3
 8005700:	4093      	lsls	r3, r2
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	429a      	cmp	r2, r3
 8005706:	d136      	bne.n	8005776 <HAL_GPIO_DeInit+0x15e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005708:	4a46      	ldr	r2, [pc, #280]	@ (8005824 <HAL_GPIO_DeInit+0x20c>)
 800570a:	2380      	movs	r3, #128	@ 0x80
 800570c:	58d3      	ldr	r3, [r2, r3]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	43d2      	mvns	r2, r2
 8005712:	4944      	ldr	r1, [pc, #272]	@ (8005824 <HAL_GPIO_DeInit+0x20c>)
 8005714:	4013      	ands	r3, r2
 8005716:	2280      	movs	r2, #128	@ 0x80
 8005718:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800571a:	4a42      	ldr	r2, [pc, #264]	@ (8005824 <HAL_GPIO_DeInit+0x20c>)
 800571c:	2384      	movs	r3, #132	@ 0x84
 800571e:	58d3      	ldr	r3, [r2, r3]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	43d2      	mvns	r2, r2
 8005724:	493f      	ldr	r1, [pc, #252]	@ (8005824 <HAL_GPIO_DeInit+0x20c>)
 8005726:	4013      	ands	r3, r2
 8005728:	2284      	movs	r2, #132	@ 0x84
 800572a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800572c:	4b3d      	ldr	r3, [pc, #244]	@ (8005824 <HAL_GPIO_DeInit+0x20c>)
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	43d9      	mvns	r1, r3
 8005734:	4b3b      	ldr	r3, [pc, #236]	@ (8005824 <HAL_GPIO_DeInit+0x20c>)
 8005736:	400a      	ands	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800573a:	4b3a      	ldr	r3, [pc, #232]	@ (8005824 <HAL_GPIO_DeInit+0x20c>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	43d9      	mvns	r1, r3
 8005742:	4b38      	ldr	r3, [pc, #224]	@ (8005824 <HAL_GPIO_DeInit+0x20c>)
 8005744:	400a      	ands	r2, r1
 8005746:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2203      	movs	r2, #3
 800574c:	4013      	ands	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	220f      	movs	r2, #15
 8005752:	409a      	lsls	r2, r3
 8005754:	0013      	movs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8005758:	4a32      	ldr	r2, [pc, #200]	@ (8005824 <HAL_GPIO_DeInit+0x20c>)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	089b      	lsrs	r3, r3, #2
 800575e:	3318      	adds	r3, #24
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	589a      	ldr	r2, [r3, r2]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	43d9      	mvns	r1, r3
 8005768:	482e      	ldr	r0, [pc, #184]	@ (8005824 <HAL_GPIO_DeInit+0x20c>)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	089b      	lsrs	r3, r3, #2
 800576e:	400a      	ands	r2, r1
 8005770:	3318      	adds	r3, #24
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	2103      	movs	r1, #3
 8005780:	4099      	lsls	r1, r3
 8005782:	000b      	movs	r3, r1
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	08da      	lsrs	r2, r3, #3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3208      	adds	r2, #8
 8005792:	0092      	lsls	r2, r2, #2
 8005794:	58d3      	ldr	r3, [r2, r3]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	2107      	movs	r1, #7
 800579a:	400a      	ands	r2, r1
 800579c:	0092      	lsls	r2, r2, #2
 800579e:	210f      	movs	r1, #15
 80057a0:	4091      	lsls	r1, r2
 80057a2:	000a      	movs	r2, r1
 80057a4:	43d1      	mvns	r1, r2
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	08d2      	lsrs	r2, r2, #3
 80057aa:	4019      	ands	r1, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3208      	adds	r2, #8
 80057b0:	0092      	lsls	r2, r2, #2
 80057b2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	0052      	lsls	r2, r2, #1
 80057bc:	2103      	movs	r1, #3
 80057be:	4091      	lsls	r1, r2
 80057c0:	000a      	movs	r2, r1
 80057c2:	43d2      	mvns	r2, r2
 80057c4:	401a      	ands	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2101      	movs	r1, #1
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4091      	lsls	r1, r2
 80057d4:	000a      	movs	r2, r1
 80057d6:	43d2      	mvns	r2, r2
 80057d8:	401a      	ands	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	0052      	lsls	r2, r2, #1
 80057e6:	2103      	movs	r1, #3
 80057e8:	4091      	lsls	r1, r2
 80057ea:	000a      	movs	r2, r1
 80057ec:	43d2      	mvns	r2, r2
 80057ee:	401a      	ands	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	3301      	adds	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	40da      	lsrs	r2, r3
 8005800:	1e13      	subs	r3, r2, #0
 8005802:	d000      	beq.n	8005806 <HAL_GPIO_DeInit+0x1ee>
 8005804:	e73e      	b.n	8005684 <HAL_GPIO_DeInit+0x6c>
  }
}
 8005806:	46c0      	nop			@ (mov r8, r8)
 8005808:	46c0      	nop			@ (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	b006      	add	sp, #24
 800580e:	bd80      	pop	{r7, pc}
 8005810:	50000400 	.word	0x50000400
 8005814:	50000800 	.word	0x50000800
 8005818:	50000c00 	.word	0x50000c00
 800581c:	50001400 	.word	0x50001400
 8005820:	0800bc68 	.word	0x0800bc68
 8005824:	40021800 	.word	0x40021800

08005828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	000a      	movs	r2, r1
 8005832:	1cbb      	adds	r3, r7, #2
 8005834:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005836:	1cbb      	adds	r3, r7, #2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d107      	bne.n	800584e <HAL_GPIO_ReadPin+0x26>
 800583e:	2372      	movs	r3, #114	@ 0x72
 8005840:	33ff      	adds	r3, #255	@ 0xff
 8005842:	001a      	movs	r2, r3
 8005844:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <HAL_GPIO_ReadPin+0x54>)
 8005846:	0011      	movs	r1, r2
 8005848:	0018      	movs	r0, r3
 800584a:	f7fd fcb5 	bl	80031b8 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	1cba      	adds	r2, r7, #2
 8005854:	8812      	ldrh	r2, [r2, #0]
 8005856:	4013      	ands	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_GPIO_ReadPin+0x3c>
  {
    bitstatus = GPIO_PIN_SET;
 800585a:	230f      	movs	r3, #15
 800585c:	18fb      	adds	r3, r7, r3
 800585e:	2201      	movs	r2, #1
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e003      	b.n	800586c <HAL_GPIO_ReadPin+0x44>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005864:	230f      	movs	r3, #15
 8005866:	18fb      	adds	r3, r7, r3
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800586c:	230f      	movs	r3, #15
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	781b      	ldrb	r3, [r3, #0]
}
 8005872:	0018      	movs	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	b004      	add	sp, #16
 8005878:	bd80      	pop	{r7, pc}
 800587a:	46c0      	nop			@ (mov r8, r8)
 800587c:	0800bc68 	.word	0x0800bc68

08005880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	0008      	movs	r0, r1
 800588a:	0011      	movs	r1, r2
 800588c:	1cbb      	adds	r3, r7, #2
 800588e:	1c02      	adds	r2, r0, #0
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	1c7b      	adds	r3, r7, #1
 8005894:	1c0a      	adds	r2, r1, #0
 8005896:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005898:	1cbb      	adds	r3, r7, #2
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d107      	bne.n	80058b0 <HAL_GPIO_WritePin+0x30>
 80058a0:	2392      	movs	r3, #146	@ 0x92
 80058a2:	33ff      	adds	r3, #255	@ 0xff
 80058a4:	001a      	movs	r2, r3
 80058a6:	4b12      	ldr	r3, [pc, #72]	@ (80058f0 <HAL_GPIO_WritePin+0x70>)
 80058a8:	0011      	movs	r1, r2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fd fc84 	bl	80031b8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80058b0:	1c7b      	adds	r3, r7, #1
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_GPIO_WritePin+0x4e>
 80058b8:	1c7b      	adds	r3, r7, #1
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d006      	beq.n	80058ce <HAL_GPIO_WritePin+0x4e>
 80058c0:	23c9      	movs	r3, #201	@ 0xc9
 80058c2:	005a      	lsls	r2, r3, #1
 80058c4:	4b0a      	ldr	r3, [pc, #40]	@ (80058f0 <HAL_GPIO_WritePin+0x70>)
 80058c6:	0011      	movs	r1, r2
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7fd fc75 	bl	80031b8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80058ce:	1c7b      	adds	r3, r7, #1
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <HAL_GPIO_WritePin+0x60>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058d6:	1cbb      	adds	r3, r7, #2
 80058d8:	881a      	ldrh	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058de:	e003      	b.n	80058e8 <HAL_GPIO_WritePin+0x68>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058e0:	1cbb      	adds	r3, r7, #2
 80058e2:	881a      	ldrh	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058e8:	46c0      	nop			@ (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b002      	add	sp, #8
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	0800bc68 	.word	0x0800bc68

080058f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	0002      	movs	r2, r0
 80058fc:	1dbb      	adds	r3, r7, #6
 80058fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005900:	4b10      	ldr	r3, [pc, #64]	@ (8005944 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	1dba      	adds	r2, r7, #6
 8005906:	8812      	ldrh	r2, [r2, #0]
 8005908:	4013      	ands	r3, r2
 800590a:	d008      	beq.n	800591e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800590c:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800590e:	1dba      	adds	r2, r7, #6
 8005910:	8812      	ldrh	r2, [r2, #0]
 8005912:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005914:	1dbb      	adds	r3, r7, #6
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	0018      	movs	r0, r3
 800591a:	f7fd fb1d 	bl	8002f58 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800591e:	4b09      	ldr	r3, [pc, #36]	@ (8005944 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	1dba      	adds	r2, r7, #6
 8005924:	8812      	ldrh	r2, [r2, #0]
 8005926:	4013      	ands	r3, r2
 8005928:	d008      	beq.n	800593c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800592a:	4b06      	ldr	r3, [pc, #24]	@ (8005944 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800592c:	1dba      	adds	r2, r7, #6
 800592e:	8812      	ldrh	r2, [r2, #0]
 8005930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005932:	1dbb      	adds	r3, r7, #6
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	0018      	movs	r0, r3
 8005938:	f000 f806 	bl	8005948 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800593c:	46c0      	nop			@ (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	b002      	add	sp, #8
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40021800 	.word	0x40021800

08005948 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	0002      	movs	r2, r0
 8005950:	1dbb      	adds	r3, r7, #6
 8005952:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005954:	46c0      	nop			@ (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b002      	add	sp, #8
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e120      	b.n	8005bb0 <HAL_I2C_Init+0x254>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a91      	ldr	r2, [pc, #580]	@ (8005bb8 <HAL_I2C_Init+0x25c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <HAL_I2C_Init+0x3c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a8f      	ldr	r2, [pc, #572]	@ (8005bbc <HAL_I2C_Init+0x260>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00a      	beq.n	8005998 <HAL_I2C_Init+0x3c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a8e      	ldr	r2, [pc, #568]	@ (8005bc0 <HAL_I2C_Init+0x264>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d005      	beq.n	8005998 <HAL_I2C_Init+0x3c>
 800598c:	4a8d      	ldr	r2, [pc, #564]	@ (8005bc4 <HAL_I2C_Init+0x268>)
 800598e:	4b8e      	ldr	r3, [pc, #568]	@ (8005bc8 <HAL_I2C_Init+0x26c>)
 8005990:	0011      	movs	r1, r2
 8005992:	0018      	movs	r0, r3
 8005994:	f7fd fc10 	bl	80031b8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	2380      	movs	r3, #128	@ 0x80
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d305      	bcc.n	80059b0 <HAL_I2C_Init+0x54>
 80059a4:	4a89      	ldr	r2, [pc, #548]	@ (8005bcc <HAL_I2C_Init+0x270>)
 80059a6:	4b88      	ldr	r3, [pc, #544]	@ (8005bc8 <HAL_I2C_Init+0x26c>)
 80059a8:	0011      	movs	r1, r2
 80059aa:	0018      	movs	r0, r3
 80059ac:	f7fd fc04 	bl	80031b8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d00a      	beq.n	80059ce <HAL_I2C_Init+0x72>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d006      	beq.n	80059ce <HAL_I2C_Init+0x72>
 80059c0:	238a      	movs	r3, #138	@ 0x8a
 80059c2:	009a      	lsls	r2, r3, #2
 80059c4:	4b80      	ldr	r3, [pc, #512]	@ (8005bc8 <HAL_I2C_Init+0x26c>)
 80059c6:	0011      	movs	r1, r2
 80059c8:	0018      	movs	r0, r3
 80059ca:	f7fd fbf5 	bl	80031b8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <HAL_I2C_Init+0x92>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	2380      	movs	r3, #128	@ 0x80
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	429a      	cmp	r2, r3
 80059e0:	d005      	beq.n	80059ee <HAL_I2C_Init+0x92>
 80059e2:	4a7b      	ldr	r2, [pc, #492]	@ (8005bd0 <HAL_I2C_Init+0x274>)
 80059e4:	4b78      	ldr	r3, [pc, #480]	@ (8005bc8 <HAL_I2C_Init+0x26c>)
 80059e6:	0011      	movs	r1, r2
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7fd fbe5 	bl	80031b8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	2bff      	cmp	r3, #255	@ 0xff
 80059f4:	d905      	bls.n	8005a02 <HAL_I2C_Init+0xa6>
 80059f6:	4a77      	ldr	r2, [pc, #476]	@ (8005bd4 <HAL_I2C_Init+0x278>)
 80059f8:	4b73      	ldr	r3, [pc, #460]	@ (8005bc8 <HAL_I2C_Init+0x26c>)
 80059fa:	0011      	movs	r1, r2
 80059fc:	0018      	movs	r0, r3
 80059fe:	f7fd fbdb 	bl	80031b8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d021      	beq.n	8005a4e <HAL_I2C_Init+0xf2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d01d      	beq.n	8005a4e <HAL_I2C_Init+0xf2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d019      	beq.n	8005a4e <HAL_I2C_Init+0xf2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d015      	beq.n	8005a4e <HAL_I2C_Init+0xf2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d011      	beq.n	8005a4e <HAL_I2C_Init+0xf2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	d00d      	beq.n	8005a4e <HAL_I2C_Init+0xf2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	2b06      	cmp	r3, #6
 8005a38:	d009      	beq.n	8005a4e <HAL_I2C_Init+0xf2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	2b07      	cmp	r3, #7
 8005a40:	d005      	beq.n	8005a4e <HAL_I2C_Init+0xf2>
 8005a42:	4a65      	ldr	r2, [pc, #404]	@ (8005bd8 <HAL_I2C_Init+0x27c>)
 8005a44:	4b60      	ldr	r3, [pc, #384]	@ (8005bc8 <HAL_I2C_Init+0x26c>)
 8005a46:	0011      	movs	r1, r2
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f7fd fbb5 	bl	80031b8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <HAL_I2C_Init+0x114>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69da      	ldr	r2, [r3, #28]
 8005a5a:	2380      	movs	r3, #128	@ 0x80
 8005a5c:	031b      	lsls	r3, r3, #12
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d006      	beq.n	8005a70 <HAL_I2C_Init+0x114>
 8005a62:	238b      	movs	r3, #139	@ 0x8b
 8005a64:	009a      	lsls	r2, r3, #2
 8005a66:	4b58      	ldr	r3, [pc, #352]	@ (8005bc8 <HAL_I2C_Init+0x26c>)
 8005a68:	0011      	movs	r1, r2
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f7fd fba4 	bl	80031b8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <HAL_I2C_Init+0x134>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1a      	ldr	r2, [r3, #32]
 8005a7c:	2380      	movs	r3, #128	@ 0x80
 8005a7e:	029b      	lsls	r3, r3, #10
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d005      	beq.n	8005a90 <HAL_I2C_Init+0x134>
 8005a84:	4a55      	ldr	r2, [pc, #340]	@ (8005bdc <HAL_I2C_Init+0x280>)
 8005a86:	4b50      	ldr	r3, [pc, #320]	@ (8005bc8 <HAL_I2C_Init+0x26c>)
 8005a88:	0011      	movs	r1, r2
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f7fd fb94 	bl	80031b8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2241      	movs	r2, #65	@ 0x41
 8005a94:	5c9b      	ldrb	r3, [r3, r2]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d107      	bne.n	8005aac <HAL_I2C_Init+0x150>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2240      	movs	r2, #64	@ 0x40
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f7fd f832 	bl	8002b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2241      	movs	r2, #65	@ 0x41
 8005ab0:	2124      	movs	r1, #36	@ 0x24
 8005ab2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2101      	movs	r1, #1
 8005ac0:	438a      	bics	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4944      	ldr	r1, [pc, #272]	@ (8005be0 <HAL_I2C_Init+0x284>)
 8005ace:	400a      	ands	r2, r1
 8005ad0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4941      	ldr	r1, [pc, #260]	@ (8005be4 <HAL_I2C_Init+0x288>)
 8005ade:	400a      	ands	r2, r1
 8005ae0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d108      	bne.n	8005afc <HAL_I2C_Init+0x1a0>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2180      	movs	r1, #128	@ 0x80
 8005af4:	0209      	lsls	r1, r1, #8
 8005af6:	430a      	orrs	r2, r1
 8005af8:	609a      	str	r2, [r3, #8]
 8005afa:	e007      	b.n	8005b0c <HAL_I2C_Init+0x1b0>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2184      	movs	r1, #132	@ 0x84
 8005b06:	0209      	lsls	r1, r1, #8
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d109      	bne.n	8005b28 <HAL_I2C_Init+0x1cc>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2180      	movs	r1, #128	@ 0x80
 8005b20:	0109      	lsls	r1, r1, #4
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	e007      	b.n	8005b38 <HAL_I2C_Init+0x1dc>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	492d      	ldr	r1, [pc, #180]	@ (8005be8 <HAL_I2C_Init+0x28c>)
 8005b34:	400a      	ands	r2, r1
 8005b36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	492a      	ldr	r1, [pc, #168]	@ (8005bec <HAL_I2C_Init+0x290>)
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4924      	ldr	r1, [pc, #144]	@ (8005be4 <HAL_I2C_Init+0x288>)
 8005b54:	400a      	ands	r2, r1
 8005b56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	431a      	orrs	r2, r3
 8005b62:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69d9      	ldr	r1, [r3, #28]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2241      	movs	r2, #65	@ 0x41
 8005b9c:	2120      	movs	r1, #32
 8005b9e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2242      	movs	r2, #66	@ 0x42
 8005baa:	2100      	movs	r1, #0
 8005bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b002      	add	sp, #8
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40005400 	.word	0x40005400
 8005bbc:	40005800 	.word	0x40005800
 8005bc0:	40008800 	.word	0x40008800
 8005bc4:	00000226 	.word	0x00000226
 8005bc8:	0800bca4 	.word	0x0800bca4
 8005bcc:	00000227 	.word	0x00000227
 8005bd0:	00000229 	.word	0x00000229
 8005bd4:	0000022a 	.word	0x0000022a
 8005bd8:	0000022b 	.word	0x0000022b
 8005bdc:	0000022d 	.word	0x0000022d
 8005be0:	f0ffffff 	.word	0xf0ffffff
 8005be4:	ffff7fff 	.word	0xffff7fff
 8005be8:	fffff7ff 	.word	0xfffff7ff
 8005bec:	02008000 	.word	0x02008000

08005bf0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005bf0:	b590      	push	{r4, r7, lr}
 8005bf2:	b089      	sub	sp, #36	@ 0x24
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	0008      	movs	r0, r1
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	0019      	movs	r1, r3
 8005bfe:	230a      	movs	r3, #10
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	1c02      	adds	r2, r0, #0
 8005c04:	801a      	strh	r2, [r3, #0]
 8005c06:	2308      	movs	r3, #8
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	1c0a      	adds	r2, r1, #0
 8005c0c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2241      	movs	r2, #65	@ 0x41
 8005c12:	5c9b      	ldrb	r3, [r3, r2]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d000      	beq.n	8005c1c <HAL_I2C_Master_Transmit+0x2c>
 8005c1a:	e0e7      	b.n	8005dec <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2240      	movs	r2, #64	@ 0x40
 8005c20:	5c9b      	ldrb	r3, [r3, r2]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_I2C_Master_Transmit+0x3a>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e0e1      	b.n	8005dee <HAL_I2C_Master_Transmit+0x1fe>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2240      	movs	r2, #64	@ 0x40
 8005c2e:	2101      	movs	r1, #1
 8005c30:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c32:	f7fd fc67 	bl	8003504 <HAL_GetTick>
 8005c36:	0003      	movs	r3, r0
 8005c38:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c3a:	2380      	movs	r3, #128	@ 0x80
 8005c3c:	0219      	lsls	r1, r3, #8
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	2319      	movs	r3, #25
 8005c46:	2201      	movs	r2, #1
 8005c48:	f000 fa04 	bl	8006054 <I2C_WaitOnFlagUntilTimeout>
 8005c4c:	1e03      	subs	r3, r0, #0
 8005c4e:	d001      	beq.n	8005c54 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0cc      	b.n	8005dee <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2241      	movs	r2, #65	@ 0x41
 8005c58:	2121      	movs	r1, #33	@ 0x21
 8005c5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2242      	movs	r2, #66	@ 0x42
 8005c60:	2110      	movs	r1, #16
 8005c62:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2208      	movs	r2, #8
 8005c74:	18ba      	adds	r2, r7, r2
 8005c76:	8812      	ldrh	r2, [r2, #0]
 8005c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2bff      	cmp	r3, #255	@ 0xff
 8005c88:	d911      	bls.n	8005cae <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	22ff      	movs	r2, #255	@ 0xff
 8005c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	2380      	movs	r3, #128	@ 0x80
 8005c98:	045c      	lsls	r4, r3, #17
 8005c9a:	230a      	movs	r3, #10
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	8819      	ldrh	r1, [r3, #0]
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	4b55      	ldr	r3, [pc, #340]	@ (8005df8 <HAL_I2C_Master_Transmit+0x208>)
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	0023      	movs	r3, r4
 8005ca8:	f000 fc4c 	bl	8006544 <I2C_TransferConfig>
 8005cac:	e075      	b.n	8005d9a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	2380      	movs	r3, #128	@ 0x80
 8005cc0:	049c      	lsls	r4, r3, #18
 8005cc2:	230a      	movs	r3, #10
 8005cc4:	18fb      	adds	r3, r7, r3
 8005cc6:	8819      	ldrh	r1, [r3, #0]
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	4b4b      	ldr	r3, [pc, #300]	@ (8005df8 <HAL_I2C_Master_Transmit+0x208>)
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	0023      	movs	r3, r4
 8005cd0:	f000 fc38 	bl	8006544 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005cd4:	e061      	b.n	8005d9a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f000 fa11 	bl	8006104 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ce2:	1e03      	subs	r3, r0, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e081      	b.n	8005dee <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	781a      	ldrb	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d03a      	beq.n	8005d9a <HAL_I2C_Master_Transmit+0x1aa>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d136      	bne.n	8005d9a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	0013      	movs	r3, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	2180      	movs	r1, #128	@ 0x80
 8005d3a:	f000 f98b 	bl	8006054 <I2C_WaitOnFlagUntilTimeout>
 8005d3e:	1e03      	subs	r3, r0, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e053      	b.n	8005dee <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2bff      	cmp	r3, #255	@ 0xff
 8005d4e:	d911      	bls.n	8005d74 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	22ff      	movs	r2, #255	@ 0xff
 8005d54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	2380      	movs	r3, #128	@ 0x80
 8005d5e:	045c      	lsls	r4, r3, #17
 8005d60:	230a      	movs	r3, #10
 8005d62:	18fb      	adds	r3, r7, r3
 8005d64:	8819      	ldrh	r1, [r3, #0]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	0023      	movs	r3, r4
 8005d6e:	f000 fbe9 	bl	8006544 <I2C_TransferConfig>
 8005d72:	e012      	b.n	8005d9a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	2380      	movs	r3, #128	@ 0x80
 8005d86:	049c      	lsls	r4, r3, #18
 8005d88:	230a      	movs	r3, #10
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	8819      	ldrh	r1, [r3, #0]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	2300      	movs	r3, #0
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	0023      	movs	r3, r4
 8005d96:	f000 fbd5 	bl	8006544 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d198      	bne.n	8005cd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 f9f0 	bl	8006190 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005db0:	1e03      	subs	r3, r0, #0
 8005db2:	d001      	beq.n	8005db8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e01a      	b.n	8005dee <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	490c      	ldr	r1, [pc, #48]	@ (8005dfc <HAL_I2C_Master_Transmit+0x20c>)
 8005dcc:	400a      	ands	r2, r1
 8005dce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2241      	movs	r2, #65	@ 0x41
 8005dd4:	2120      	movs	r1, #32
 8005dd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2242      	movs	r2, #66	@ 0x42
 8005ddc:	2100      	movs	r1, #0
 8005dde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2240      	movs	r2, #64	@ 0x40
 8005de4:	2100      	movs	r1, #0
 8005de6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e000      	b.n	8005dee <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005dec:	2302      	movs	r3, #2
  }
}
 8005dee:	0018      	movs	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	b007      	add	sp, #28
 8005df4:	bd90      	pop	{r4, r7, pc}
 8005df6:	46c0      	nop			@ (mov r8, r8)
 8005df8:	80002000 	.word	0x80002000
 8005dfc:	fe00e800 	.word	0xfe00e800

08005e00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005e00:	b590      	push	{r4, r7, lr}
 8005e02:	b089      	sub	sp, #36	@ 0x24
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	0008      	movs	r0, r1
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	230a      	movs	r3, #10
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	1c02      	adds	r2, r0, #0
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	2308      	movs	r3, #8
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	1c0a      	adds	r2, r1, #0
 8005e1c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2241      	movs	r2, #65	@ 0x41
 8005e22:	5c9b      	ldrb	r3, [r3, r2]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	d000      	beq.n	8005e2c <HAL_I2C_Master_Receive+0x2c>
 8005e2a:	e0e8      	b.n	8005ffe <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2240      	movs	r2, #64	@ 0x40
 8005e30:	5c9b      	ldrb	r3, [r3, r2]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_I2C_Master_Receive+0x3a>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e0e2      	b.n	8006000 <HAL_I2C_Master_Receive+0x200>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2240      	movs	r2, #64	@ 0x40
 8005e3e:	2101      	movs	r1, #1
 8005e40:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e42:	f7fd fb5f 	bl	8003504 <HAL_GetTick>
 8005e46:	0003      	movs	r3, r0
 8005e48:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e4a:	2380      	movs	r3, #128	@ 0x80
 8005e4c:	0219      	lsls	r1, r3, #8
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	2319      	movs	r3, #25
 8005e56:	2201      	movs	r2, #1
 8005e58:	f000 f8fc 	bl	8006054 <I2C_WaitOnFlagUntilTimeout>
 8005e5c:	1e03      	subs	r3, r0, #0
 8005e5e:	d001      	beq.n	8005e64 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0cd      	b.n	8006000 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2241      	movs	r2, #65	@ 0x41
 8005e68:	2122      	movs	r1, #34	@ 0x22
 8005e6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2242      	movs	r2, #66	@ 0x42
 8005e70:	2110      	movs	r1, #16
 8005e72:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2208      	movs	r2, #8
 8005e84:	18ba      	adds	r2, r7, r2
 8005e86:	8812      	ldrh	r2, [r2, #0]
 8005e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2bff      	cmp	r3, #255	@ 0xff
 8005e98:	d911      	bls.n	8005ebe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	22ff      	movs	r2, #255	@ 0xff
 8005e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	2380      	movs	r3, #128	@ 0x80
 8005ea8:	045c      	lsls	r4, r3, #17
 8005eaa:	230a      	movs	r3, #10
 8005eac:	18fb      	adds	r3, r7, r3
 8005eae:	8819      	ldrh	r1, [r3, #0]
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	4b55      	ldr	r3, [pc, #340]	@ (8006008 <HAL_I2C_Master_Receive+0x208>)
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	0023      	movs	r3, r4
 8005eb8:	f000 fb44 	bl	8006544 <I2C_TransferConfig>
 8005ebc:	e076      	b.n	8005fac <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	2380      	movs	r3, #128	@ 0x80
 8005ed0:	049c      	lsls	r4, r3, #18
 8005ed2:	230a      	movs	r3, #10
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	8819      	ldrh	r1, [r3, #0]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	4b4b      	ldr	r3, [pc, #300]	@ (8006008 <HAL_I2C_Master_Receive+0x208>)
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	0023      	movs	r3, r4
 8005ee0:	f000 fb30 	bl	8006544 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005ee4:	e062      	b.n	8005fac <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	0018      	movs	r0, r3
 8005eee:	f000 f993 	bl	8006218 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ef2:	1e03      	subs	r3, r0, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e082      	b.n	8006000 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d03a      	beq.n	8005fac <HAL_I2C_Master_Receive+0x1ac>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d136      	bne.n	8005fac <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	0013      	movs	r3, r2
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2180      	movs	r1, #128	@ 0x80
 8005f4c:	f000 f882 	bl	8006054 <I2C_WaitOnFlagUntilTimeout>
 8005f50:	1e03      	subs	r3, r0, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e053      	b.n	8006000 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2bff      	cmp	r3, #255	@ 0xff
 8005f60:	d911      	bls.n	8005f86 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	22ff      	movs	r2, #255	@ 0xff
 8005f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	2380      	movs	r3, #128	@ 0x80
 8005f70:	045c      	lsls	r4, r3, #17
 8005f72:	230a      	movs	r3, #10
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	8819      	ldrh	r1, [r3, #0]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	0023      	movs	r3, r4
 8005f80:	f000 fae0 	bl	8006544 <I2C_TransferConfig>
 8005f84:	e012      	b.n	8005fac <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	2380      	movs	r3, #128	@ 0x80
 8005f98:	049c      	lsls	r4, r3, #18
 8005f9a:	230a      	movs	r3, #10
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	8819      	ldrh	r1, [r3, #0]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	0023      	movs	r3, r4
 8005fa8:	f000 facc 	bl	8006544 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d197      	bne.n	8005ee6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f000 f8e7 	bl	8006190 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fc2:	1e03      	subs	r3, r0, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e01a      	b.n	8006000 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	490b      	ldr	r1, [pc, #44]	@ (800600c <HAL_I2C_Master_Receive+0x20c>)
 8005fde:	400a      	ands	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2241      	movs	r2, #65	@ 0x41
 8005fe6:	2120      	movs	r1, #32
 8005fe8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2242      	movs	r2, #66	@ 0x42
 8005fee:	2100      	movs	r1, #0
 8005ff0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2240      	movs	r2, #64	@ 0x40
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e000      	b.n	8006000 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005ffe:	2302      	movs	r3, #2
  }
}
 8006000:	0018      	movs	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	b007      	add	sp, #28
 8006006:	bd90      	pop	{r4, r7, pc}
 8006008:	80002400 	.word	0x80002400
 800600c:	fe00e800 	.word	0xfe00e800

08006010 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	2202      	movs	r2, #2
 8006020:	4013      	ands	r3, r2
 8006022:	2b02      	cmp	r3, #2
 8006024:	d103      	bne.n	800602e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2200      	movs	r2, #0
 800602c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	2201      	movs	r2, #1
 8006036:	4013      	ands	r3, r2
 8006038:	2b01      	cmp	r3, #1
 800603a:	d007      	beq.n	800604c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2101      	movs	r1, #1
 8006048:	430a      	orrs	r2, r1
 800604a:	619a      	str	r2, [r3, #24]
  }
}
 800604c:	46c0      	nop			@ (mov r8, r8)
 800604e:	46bd      	mov	sp, r7
 8006050:	b002      	add	sp, #8
 8006052:	bd80      	pop	{r7, pc}

08006054 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	1dfb      	adds	r3, r7, #7
 8006062:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006064:	e03a      	b.n	80060dc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	0018      	movs	r0, r3
 800606e:	f000 f971 	bl	8006354 <I2C_IsErrorOccurred>
 8006072:	1e03      	subs	r3, r0, #0
 8006074:	d001      	beq.n	800607a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e040      	b.n	80060fc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	3301      	adds	r3, #1
 800607e:	d02d      	beq.n	80060dc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006080:	f7fd fa40 	bl	8003504 <HAL_GetTick>
 8006084:	0002      	movs	r2, r0
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d302      	bcc.n	8006096 <I2C_WaitOnFlagUntilTimeout+0x42>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d122      	bne.n	80060dc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	4013      	ands	r3, r2
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	425a      	negs	r2, r3
 80060a6:	4153      	adcs	r3, r2
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	001a      	movs	r2, r3
 80060ac:	1dfb      	adds	r3, r7, #7
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d113      	bne.n	80060dc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b8:	2220      	movs	r2, #32
 80060ba:	431a      	orrs	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2241      	movs	r2, #65	@ 0x41
 80060c4:	2120      	movs	r1, #32
 80060c6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2242      	movs	r2, #66	@ 0x42
 80060cc:	2100      	movs	r1, #0
 80060ce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2240      	movs	r2, #64	@ 0x40
 80060d4:	2100      	movs	r1, #0
 80060d6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e00f      	b.n	80060fc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	4013      	ands	r3, r2
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	425a      	negs	r2, r3
 80060ec:	4153      	adcs	r3, r2
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	001a      	movs	r2, r3
 80060f2:	1dfb      	adds	r3, r7, #7
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d0b5      	beq.n	8006066 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	b004      	add	sp, #16
 8006102:	bd80      	pop	{r7, pc}

08006104 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006110:	e032      	b.n	8006178 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	0018      	movs	r0, r3
 800611a:	f000 f91b 	bl	8006354 <I2C_IsErrorOccurred>
 800611e:	1e03      	subs	r3, r0, #0
 8006120:	d001      	beq.n	8006126 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e030      	b.n	8006188 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	3301      	adds	r3, #1
 800612a:	d025      	beq.n	8006178 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612c:	f7fd f9ea 	bl	8003504 <HAL_GetTick>
 8006130:	0002      	movs	r2, r0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	429a      	cmp	r2, r3
 800613a:	d302      	bcc.n	8006142 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d11a      	bne.n	8006178 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	2202      	movs	r2, #2
 800614a:	4013      	ands	r3, r2
 800614c:	2b02      	cmp	r3, #2
 800614e:	d013      	beq.n	8006178 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006154:	2220      	movs	r2, #32
 8006156:	431a      	orrs	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2241      	movs	r2, #65	@ 0x41
 8006160:	2120      	movs	r1, #32
 8006162:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2242      	movs	r2, #66	@ 0x42
 8006168:	2100      	movs	r1, #0
 800616a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2240      	movs	r2, #64	@ 0x40
 8006170:	2100      	movs	r1, #0
 8006172:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e007      	b.n	8006188 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	2202      	movs	r2, #2
 8006180:	4013      	ands	r3, r2
 8006182:	2b02      	cmp	r3, #2
 8006184:	d1c5      	bne.n	8006112 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	0018      	movs	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	b004      	add	sp, #16
 800618e:	bd80      	pop	{r7, pc}

08006190 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800619c:	e02f      	b.n	80061fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	0018      	movs	r0, r3
 80061a6:	f000 f8d5 	bl	8006354 <I2C_IsErrorOccurred>
 80061aa:	1e03      	subs	r3, r0, #0
 80061ac:	d001      	beq.n	80061b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e02d      	b.n	800620e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b2:	f7fd f9a7 	bl	8003504 <HAL_GetTick>
 80061b6:	0002      	movs	r2, r0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d302      	bcc.n	80061c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11a      	bne.n	80061fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	2220      	movs	r2, #32
 80061d0:	4013      	ands	r3, r2
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d013      	beq.n	80061fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	2220      	movs	r2, #32
 80061dc:	431a      	orrs	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2241      	movs	r2, #65	@ 0x41
 80061e6:	2120      	movs	r1, #32
 80061e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2242      	movs	r2, #66	@ 0x42
 80061ee:	2100      	movs	r1, #0
 80061f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2240      	movs	r2, #64	@ 0x40
 80061f6:	2100      	movs	r1, #0
 80061f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e007      	b.n	800620e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	2220      	movs	r2, #32
 8006206:	4013      	ands	r3, r2
 8006208:	2b20      	cmp	r3, #32
 800620a:	d1c8      	bne.n	800619e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	0018      	movs	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	b004      	add	sp, #16
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006224:	2317      	movs	r3, #23
 8006226:	18fb      	adds	r3, r7, r3
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800622c:	e07b      	b.n	8006326 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	0018      	movs	r0, r3
 8006236:	f000 f88d 	bl	8006354 <I2C_IsErrorOccurred>
 800623a:	1e03      	subs	r3, r0, #0
 800623c:	d003      	beq.n	8006246 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800623e:	2317      	movs	r3, #23
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	2201      	movs	r2, #1
 8006244:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	2220      	movs	r2, #32
 800624e:	4013      	ands	r3, r2
 8006250:	2b20      	cmp	r3, #32
 8006252:	d140      	bne.n	80062d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8006254:	2117      	movs	r1, #23
 8006256:	187b      	adds	r3, r7, r1
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d13b      	bne.n	80062d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	2204      	movs	r2, #4
 8006266:	4013      	ands	r3, r2
 8006268:	2b04      	cmp	r3, #4
 800626a:	d106      	bne.n	800627a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006274:	187b      	adds	r3, r7, r1
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	2210      	movs	r2, #16
 8006282:	4013      	ands	r3, r2
 8006284:	2b10      	cmp	r3, #16
 8006286:	d123      	bne.n	80062d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2210      	movs	r2, #16
 800628e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2204      	movs	r2, #4
 8006294:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2220      	movs	r2, #32
 800629c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4929      	ldr	r1, [pc, #164]	@ (8006350 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80062aa:	400a      	ands	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2241      	movs	r2, #65	@ 0x41
 80062b2:	2120      	movs	r1, #32
 80062b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2242      	movs	r2, #66	@ 0x42
 80062ba:	2100      	movs	r1, #0
 80062bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2240      	movs	r2, #64	@ 0x40
 80062c2:	2100      	movs	r1, #0
 80062c4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80062c6:	2317      	movs	r3, #23
 80062c8:	18fb      	adds	r3, r7, r3
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	e002      	b.n	80062d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80062d6:	f7fd f915 	bl	8003504 <HAL_GetTick>
 80062da:	0002      	movs	r2, r0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d302      	bcc.n	80062ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11c      	bne.n	8006326 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80062ec:	2017      	movs	r0, #23
 80062ee:	183b      	adds	r3, r7, r0
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d117      	bne.n	8006326 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2204      	movs	r2, #4
 80062fe:	4013      	ands	r3, r2
 8006300:	2b04      	cmp	r3, #4
 8006302:	d010      	beq.n	8006326 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006308:	2220      	movs	r2, #32
 800630a:	431a      	orrs	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2241      	movs	r2, #65	@ 0x41
 8006314:	2120      	movs	r1, #32
 8006316:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2240      	movs	r2, #64	@ 0x40
 800631c:	2100      	movs	r1, #0
 800631e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8006320:	183b      	adds	r3, r7, r0
 8006322:	2201      	movs	r2, #1
 8006324:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	2204      	movs	r2, #4
 800632e:	4013      	ands	r3, r2
 8006330:	2b04      	cmp	r3, #4
 8006332:	d005      	beq.n	8006340 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8006334:	2317      	movs	r3, #23
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d100      	bne.n	8006340 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800633e:	e776      	b.n	800622e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8006340:	2317      	movs	r3, #23
 8006342:	18fb      	adds	r3, r7, r3
 8006344:	781b      	ldrb	r3, [r3, #0]
}
 8006346:	0018      	movs	r0, r3
 8006348:	46bd      	mov	sp, r7
 800634a:	b006      	add	sp, #24
 800634c:	bd80      	pop	{r7, pc}
 800634e:	46c0      	nop			@ (mov r8, r8)
 8006350:	fe00e800 	.word	0xfe00e800

08006354 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08a      	sub	sp, #40	@ 0x28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006360:	2327      	movs	r3, #39	@ 0x27
 8006362:	18fb      	adds	r3, r7, r3
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006370:	2300      	movs	r3, #0
 8006372:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2210      	movs	r2, #16
 800637c:	4013      	ands	r3, r2
 800637e:	d100      	bne.n	8006382 <I2C_IsErrorOccurred+0x2e>
 8006380:	e079      	b.n	8006476 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2210      	movs	r2, #16
 8006388:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800638a:	e057      	b.n	800643c <I2C_IsErrorOccurred+0xe8>
 800638c:	2227      	movs	r2, #39	@ 0x27
 800638e:	18bb      	adds	r3, r7, r2
 8006390:	18ba      	adds	r2, r7, r2
 8006392:	7812      	ldrb	r2, [r2, #0]
 8006394:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	3301      	adds	r3, #1
 800639a:	d04f      	beq.n	800643c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800639c:	f7fd f8b2 	bl	8003504 <HAL_GetTick>
 80063a0:	0002      	movs	r2, r0
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d302      	bcc.n	80063b2 <I2C_IsErrorOccurred+0x5e>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d144      	bne.n	800643c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	2380      	movs	r3, #128	@ 0x80
 80063ba:	01db      	lsls	r3, r3, #7
 80063bc:	4013      	ands	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063c0:	2013      	movs	r0, #19
 80063c2:	183b      	adds	r3, r7, r0
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	2142      	movs	r1, #66	@ 0x42
 80063c8:	5c52      	ldrb	r2, [r2, r1]
 80063ca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	2380      	movs	r3, #128	@ 0x80
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	401a      	ands	r2, r3
 80063d8:	2380      	movs	r3, #128	@ 0x80
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	429a      	cmp	r2, r3
 80063de:	d126      	bne.n	800642e <I2C_IsErrorOccurred+0xda>
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	2380      	movs	r3, #128	@ 0x80
 80063e4:	01db      	lsls	r3, r3, #7
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d021      	beq.n	800642e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80063ea:	183b      	adds	r3, r7, r0
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d01d      	beq.n	800642e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2180      	movs	r1, #128	@ 0x80
 80063fe:	01c9      	lsls	r1, r1, #7
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006404:	f7fd f87e 	bl	8003504 <HAL_GetTick>
 8006408:	0003      	movs	r3, r0
 800640a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800640c:	e00f      	b.n	800642e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800640e:	f7fd f879 	bl	8003504 <HAL_GetTick>
 8006412:	0002      	movs	r2, r0
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b19      	cmp	r3, #25
 800641a:	d908      	bls.n	800642e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	2220      	movs	r2, #32
 8006420:	4313      	orrs	r3, r2
 8006422:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006424:	2327      	movs	r3, #39	@ 0x27
 8006426:	18fb      	adds	r3, r7, r3
 8006428:	2201      	movs	r2, #1
 800642a:	701a      	strb	r2, [r3, #0]

              break;
 800642c:	e006      	b.n	800643c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	2220      	movs	r2, #32
 8006436:	4013      	ands	r3, r2
 8006438:	2b20      	cmp	r3, #32
 800643a:	d1e8      	bne.n	800640e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	2220      	movs	r2, #32
 8006444:	4013      	ands	r3, r2
 8006446:	2b20      	cmp	r3, #32
 8006448:	d004      	beq.n	8006454 <I2C_IsErrorOccurred+0x100>
 800644a:	2327      	movs	r3, #39	@ 0x27
 800644c:	18fb      	adds	r3, r7, r3
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d09b      	beq.n	800638c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006454:	2327      	movs	r3, #39	@ 0x27
 8006456:	18fb      	adds	r3, r7, r3
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2220      	movs	r2, #32
 8006464:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	2204      	movs	r2, #4
 800646a:	4313      	orrs	r3, r2
 800646c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800646e:	2327      	movs	r3, #39	@ 0x27
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	2201      	movs	r2, #1
 8006474:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	2380      	movs	r3, #128	@ 0x80
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	4013      	ands	r3, r2
 8006486:	d00c      	beq.n	80064a2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	2201      	movs	r2, #1
 800648c:	4313      	orrs	r3, r2
 800648e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2280      	movs	r2, #128	@ 0x80
 8006496:	0052      	lsls	r2, r2, #1
 8006498:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800649a:	2327      	movs	r3, #39	@ 0x27
 800649c:	18fb      	adds	r3, r7, r3
 800649e:	2201      	movs	r2, #1
 80064a0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	2380      	movs	r3, #128	@ 0x80
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4013      	ands	r3, r2
 80064aa:	d00c      	beq.n	80064c6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	2208      	movs	r2, #8
 80064b0:	4313      	orrs	r3, r2
 80064b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2280      	movs	r2, #128	@ 0x80
 80064ba:	00d2      	lsls	r2, r2, #3
 80064bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064be:	2327      	movs	r3, #39	@ 0x27
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	2201      	movs	r2, #1
 80064c4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	2380      	movs	r3, #128	@ 0x80
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4013      	ands	r3, r2
 80064ce:	d00c      	beq.n	80064ea <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	2202      	movs	r2, #2
 80064d4:	4313      	orrs	r3, r2
 80064d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2280      	movs	r2, #128	@ 0x80
 80064de:	0092      	lsls	r2, r2, #2
 80064e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064e2:	2327      	movs	r3, #39	@ 0x27
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	2201      	movs	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80064ea:	2327      	movs	r3, #39	@ 0x27
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01d      	beq.n	8006530 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	0018      	movs	r0, r3
 80064f8:	f7ff fd8a 	bl	8006010 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	490e      	ldr	r1, [pc, #56]	@ (8006540 <I2C_IsErrorOccurred+0x1ec>)
 8006508:	400a      	ands	r2, r1
 800650a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	431a      	orrs	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2241      	movs	r2, #65	@ 0x41
 800651c:	2120      	movs	r1, #32
 800651e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2242      	movs	r2, #66	@ 0x42
 8006524:	2100      	movs	r1, #0
 8006526:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2240      	movs	r2, #64	@ 0x40
 800652c:	2100      	movs	r1, #0
 800652e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006530:	2327      	movs	r3, #39	@ 0x27
 8006532:	18fb      	adds	r3, r7, r3
 8006534:	781b      	ldrb	r3, [r3, #0]
}
 8006536:	0018      	movs	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	b00a      	add	sp, #40	@ 0x28
 800653c:	bd80      	pop	{r7, pc}
 800653e:	46c0      	nop			@ (mov r8, r8)
 8006540:	fe00e800 	.word	0xfe00e800

08006544 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	0008      	movs	r0, r1
 800654e:	0011      	movs	r1, r2
 8006550:	607b      	str	r3, [r7, #4]
 8006552:	230a      	movs	r3, #10
 8006554:	18fb      	adds	r3, r7, r3
 8006556:	1c02      	adds	r2, r0, #0
 8006558:	801a      	strh	r2, [r3, #0]
 800655a:	2309      	movs	r3, #9
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	1c0a      	adds	r2, r1, #0
 8006560:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a32      	ldr	r2, [pc, #200]	@ (8006630 <I2C_TransferConfig+0xec>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00f      	beq.n	800658c <I2C_TransferConfig+0x48>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a30      	ldr	r2, [pc, #192]	@ (8006634 <I2C_TransferConfig+0xf0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00a      	beq.n	800658c <I2C_TransferConfig+0x48>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a2f      	ldr	r2, [pc, #188]	@ (8006638 <I2C_TransferConfig+0xf4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d005      	beq.n	800658c <I2C_TransferConfig+0x48>
 8006580:	4a2e      	ldr	r2, [pc, #184]	@ (800663c <I2C_TransferConfig+0xf8>)
 8006582:	4b2f      	ldr	r3, [pc, #188]	@ (8006640 <I2C_TransferConfig+0xfc>)
 8006584:	0011      	movs	r1, r2
 8006586:	0018      	movs	r0, r3
 8006588:	f7fc fe16 	bl	80031b8 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	2380      	movs	r3, #128	@ 0x80
 8006590:	045b      	lsls	r3, r3, #17
 8006592:	429a      	cmp	r2, r3
 8006594:	d00d      	beq.n	80065b2 <I2C_TransferConfig+0x6e>
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	2380      	movs	r3, #128	@ 0x80
 800659a:	049b      	lsls	r3, r3, #18
 800659c:	429a      	cmp	r2, r3
 800659e:	d008      	beq.n	80065b2 <I2C_TransferConfig+0x6e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <I2C_TransferConfig+0x6e>
 80065a6:	4a27      	ldr	r2, [pc, #156]	@ (8006644 <I2C_TransferConfig+0x100>)
 80065a8:	4b25      	ldr	r3, [pc, #148]	@ (8006640 <I2C_TransferConfig+0xfc>)
 80065aa:	0011      	movs	r1, r2
 80065ac:	0018      	movs	r0, r3
 80065ae:	f7fc fe03 	bl	80031b8 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	4a24      	ldr	r2, [pc, #144]	@ (8006648 <I2C_TransferConfig+0x104>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d010      	beq.n	80065dc <I2C_TransferConfig+0x98>
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	4a23      	ldr	r2, [pc, #140]	@ (800664c <I2C_TransferConfig+0x108>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00c      	beq.n	80065dc <I2C_TransferConfig+0x98>
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	4a22      	ldr	r2, [pc, #136]	@ (8006650 <I2C_TransferConfig+0x10c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d008      	beq.n	80065dc <I2C_TransferConfig+0x98>
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <I2C_TransferConfig+0x98>
 80065d0:	4a20      	ldr	r2, [pc, #128]	@ (8006654 <I2C_TransferConfig+0x110>)
 80065d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006640 <I2C_TransferConfig+0xfc>)
 80065d4:	0011      	movs	r1, r2
 80065d6:	0018      	movs	r0, r3
 80065d8:	f7fc fdee 	bl	80031b8 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065dc:	230a      	movs	r3, #10
 80065de:	18fb      	adds	r3, r7, r3
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	059b      	lsls	r3, r3, #22
 80065e4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065e6:	2309      	movs	r3, #9
 80065e8:	18fb      	adds	r3, r7, r3
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	0419      	lsls	r1, r3, #16
 80065ee:	23ff      	movs	r3, #255	@ 0xff
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	6a3a      	ldr	r2, [r7, #32]
 800660c:	0d51      	lsrs	r1, r2, #21
 800660e:	2280      	movs	r2, #128	@ 0x80
 8006610:	00d2      	lsls	r2, r2, #3
 8006612:	400a      	ands	r2, r1
 8006614:	4910      	ldr	r1, [pc, #64]	@ (8006658 <I2C_TransferConfig+0x114>)
 8006616:	430a      	orrs	r2, r1
 8006618:	43d2      	mvns	r2, r2
 800661a:	401a      	ands	r2, r3
 800661c:	0011      	movs	r1, r2
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006628:	46c0      	nop			@ (mov r8, r8)
 800662a:	46bd      	mov	sp, r7
 800662c:	b006      	add	sp, #24
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40005400 	.word	0x40005400
 8006634:	40005800 	.word	0x40005800
 8006638:	40008800 	.word	0x40008800
 800663c:	00001c21 	.word	0x00001c21
 8006640:	0800bca4 	.word	0x0800bca4
 8006644:	00001c22 	.word	0x00001c22
 8006648:	80004000 	.word	0x80004000
 800664c:	80002400 	.word	0x80002400
 8006650:	80002000 	.word	0x80002000
 8006654:	00001c23 	.word	0x00001c23
 8006658:	03ff63ff 	.word	0x03ff63ff

0800665c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a31      	ldr	r2, [pc, #196]	@ (8006730 <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <HAL_I2CEx_ConfigAnalogFilter+0x32>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a2f      	ldr	r2, [pc, #188]	@ (8006734 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <HAL_I2CEx_ConfigAnalogFilter+0x32>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2e      	ldr	r2, [pc, #184]	@ (8006738 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <HAL_I2CEx_ConfigAnalogFilter+0x32>
 8006684:	4b2d      	ldr	r3, [pc, #180]	@ (800673c <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8006686:	2162      	movs	r1, #98	@ 0x62
 8006688:	0018      	movs	r0, r3
 800668a:	f7fc fd95 	bl	80031b8 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d009      	beq.n	80066a8 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	2380      	movs	r3, #128	@ 0x80
 8006698:	015b      	lsls	r3, r3, #5
 800669a:	429a      	cmp	r2, r3
 800669c:	d004      	beq.n	80066a8 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
 800669e:	4b27      	ldr	r3, [pc, #156]	@ (800673c <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80066a0:	2163      	movs	r1, #99	@ 0x63
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7fc fd88 	bl	80031b8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2241      	movs	r2, #65	@ 0x41
 80066ac:	5c9b      	ldrb	r3, [r3, r2]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d138      	bne.n	8006726 <HAL_I2CEx_ConfigAnalogFilter+0xca>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2240      	movs	r2, #64	@ 0x40
 80066b8:	5c9b      	ldrb	r3, [r3, r2]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_I2CEx_ConfigAnalogFilter+0x66>
 80066be:	2302      	movs	r3, #2
 80066c0:	e032      	b.n	8006728 <HAL_I2CEx_ConfigAnalogFilter+0xcc>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2240      	movs	r2, #64	@ 0x40
 80066c6:	2101      	movs	r1, #1
 80066c8:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2241      	movs	r2, #65	@ 0x41
 80066ce:	2124      	movs	r1, #36	@ 0x24
 80066d0:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2101      	movs	r1, #1
 80066de:	438a      	bics	r2, r1
 80066e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4914      	ldr	r1, [pc, #80]	@ (8006740 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80066ee:	400a      	ands	r2, r1
 80066f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6819      	ldr	r1, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2101      	movs	r1, #1
 800670e:	430a      	orrs	r2, r1
 8006710:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2241      	movs	r2, #65	@ 0x41
 8006716:	2120      	movs	r1, #32
 8006718:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2240      	movs	r2, #64	@ 0x40
 800671e:	2100      	movs	r1, #0
 8006720:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e000      	b.n	8006728 <HAL_I2CEx_ConfigAnalogFilter+0xcc>
  }
  else
  {
    return HAL_BUSY;
 8006726:	2302      	movs	r3, #2
  }
}
 8006728:	0018      	movs	r0, r3
 800672a:	46bd      	mov	sp, r7
 800672c:	b002      	add	sp, #8
 800672e:	bd80      	pop	{r7, pc}
 8006730:	40005400 	.word	0x40005400
 8006734:	40005800 	.word	0x40005800
 8006738:	40008800 	.word	0x40008800
 800673c:	0800bcdc 	.word	0x0800bcdc
 8006740:	ffffefff 	.word	0xffffefff

08006744 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a2f      	ldr	r2, [pc, #188]	@ (8006810 <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00e      	beq.n	8006776 <HAL_I2CEx_ConfigDigitalFilter+0x32>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a2d      	ldr	r2, [pc, #180]	@ (8006814 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d009      	beq.n	8006776 <HAL_I2CEx_ConfigDigitalFilter+0x32>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a2c      	ldr	r2, [pc, #176]	@ (8006818 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d004      	beq.n	8006776 <HAL_I2CEx_ConfigDigitalFilter+0x32>
 800676c:	4b2b      	ldr	r3, [pc, #172]	@ (800681c <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800676e:	2190      	movs	r1, #144	@ 0x90
 8006770:	0018      	movs	r0, r3
 8006772:	f7fc fd21 	bl	80031b8 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b0f      	cmp	r3, #15
 800677a:	d904      	bls.n	8006786 <HAL_I2CEx_ConfigDigitalFilter+0x42>
 800677c:	4b27      	ldr	r3, [pc, #156]	@ (800681c <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800677e:	2191      	movs	r1, #145	@ 0x91
 8006780:	0018      	movs	r0, r3
 8006782:	f7fc fd19 	bl	80031b8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2241      	movs	r2, #65	@ 0x41
 800678a:	5c9b      	ldrb	r3, [r3, r2]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b20      	cmp	r3, #32
 8006790:	d139      	bne.n	8006806 <HAL_I2CEx_ConfigDigitalFilter+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2240      	movs	r2, #64	@ 0x40
 8006796:	5c9b      	ldrb	r3, [r3, r2]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d101      	bne.n	80067a0 <HAL_I2CEx_ConfigDigitalFilter+0x5c>
 800679c:	2302      	movs	r3, #2
 800679e:	e033      	b.n	8006808 <HAL_I2CEx_ConfigDigitalFilter+0xc4>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2240      	movs	r2, #64	@ 0x40
 80067a4:	2101      	movs	r1, #1
 80067a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2241      	movs	r2, #65	@ 0x41
 80067ac:	2124      	movs	r1, #36	@ 0x24
 80067ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2101      	movs	r1, #1
 80067bc:	438a      	bics	r2, r1
 80067be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4a15      	ldr	r2, [pc, #84]	@ (8006820 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	021b      	lsls	r3, r3, #8
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2101      	movs	r1, #1
 80067ee:	430a      	orrs	r2, r1
 80067f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2241      	movs	r2, #65	@ 0x41
 80067f6:	2120      	movs	r1, #32
 80067f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2240      	movs	r2, #64	@ 0x40
 80067fe:	2100      	movs	r1, #0
 8006800:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	e000      	b.n	8006808 <HAL_I2CEx_ConfigDigitalFilter+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006806:	2302      	movs	r3, #2
  }
}
 8006808:	0018      	movs	r0, r3
 800680a:	46bd      	mov	sp, r7
 800680c:	b004      	add	sp, #16
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40005400 	.word	0x40005400
 8006814:	40005800 	.word	0x40005800
 8006818:	40008800 	.word	0x40008800
 800681c:	0800bcdc 	.word	0x0800bcdc
 8006820:	fffff0ff 	.word	0xfffff0ff

08006824 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	2380      	movs	r3, #128	@ 0x80
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	429a      	cmp	r2, r3
 8006834:	d009      	beq.n	800684a <HAL_PWREx_ControlVoltageScaling+0x26>
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	2380      	movs	r3, #128	@ 0x80
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	429a      	cmp	r2, r3
 800683e:	d004      	beq.n	800684a <HAL_PWREx_ControlVoltageScaling+0x26>
 8006840:	4b2c      	ldr	r3, [pc, #176]	@ (80068f4 <HAL_PWREx_ControlVoltageScaling+0xd0>)
 8006842:	21c3      	movs	r1, #195	@ 0xc3
 8006844:	0018      	movs	r0, r3
 8006846:	f7fc fcb7 	bl	80031b8 <assert_failed>

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	2380      	movs	r3, #128	@ 0x80
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	429a      	cmp	r2, r3
 8006852:	d137      	bne.n	80068c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006854:	4b28      	ldr	r3, [pc, #160]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	23c0      	movs	r3, #192	@ 0xc0
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	401a      	ands	r2, r3
 800685e:	2380      	movs	r3, #128	@ 0x80
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	429a      	cmp	r2, r3
 8006864:	d040      	beq.n	80068e8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006866:	4b24      	ldr	r3, [pc, #144]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a24      	ldr	r2, [pc, #144]	@ (80068fc <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800686c:	401a      	ands	r2, r3
 800686e:	4b22      	ldr	r3, [pc, #136]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8006870:	2180      	movs	r1, #128	@ 0x80
 8006872:	0089      	lsls	r1, r1, #2
 8006874:	430a      	orrs	r2, r1
 8006876:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006878:	4b21      	ldr	r3, [pc, #132]	@ (8006900 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2232      	movs	r2, #50	@ 0x32
 800687e:	4353      	muls	r3, r2
 8006880:	4920      	ldr	r1, [pc, #128]	@ (8006904 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8006882:	0018      	movs	r0, r3
 8006884:	f7f9 fc40 	bl	8000108 <__udivsi3>
 8006888:	0003      	movs	r3, r0
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800688e:	e002      	b.n	8006896 <HAL_PWREx_ControlVoltageScaling+0x72>
      {
        wait_loop_index--;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3b01      	subs	r3, #1
 8006894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006896:	4b18      	ldr	r3, [pc, #96]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	2380      	movs	r3, #128	@ 0x80
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	401a      	ands	r2, r3
 80068a0:	2380      	movs	r3, #128	@ 0x80
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d102      	bne.n	80068ae <HAL_PWREx_ControlVoltageScaling+0x8a>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_PWREx_ControlVoltageScaling+0x6c>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068ae:	4b12      	ldr	r3, [pc, #72]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 80068b0:	695a      	ldr	r2, [r3, #20]
 80068b2:	2380      	movs	r3, #128	@ 0x80
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	401a      	ands	r2, r3
 80068b8:	2380      	movs	r3, #128	@ 0x80
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	429a      	cmp	r2, r3
 80068be:	d113      	bne.n	80068e8 <HAL_PWREx_ControlVoltageScaling+0xc4>
      {
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e012      	b.n	80068ea <HAL_PWREx_ControlVoltageScaling+0xc6>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80068c4:	4b0c      	ldr	r3, [pc, #48]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	23c0      	movs	r3, #192	@ 0xc0
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	401a      	ands	r2, r3
 80068ce:	2380      	movs	r3, #128	@ 0x80
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d008      	beq.n	80068e8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80068d6:	4b08      	ldr	r3, [pc, #32]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a08      	ldr	r2, [pc, #32]	@ (80068fc <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80068dc:	401a      	ands	r2, r3
 80068de:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 80068e0:	2180      	movs	r1, #128	@ 0x80
 80068e2:	00c9      	lsls	r1, r1, #3
 80068e4:	430a      	orrs	r2, r1
 80068e6:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	0018      	movs	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b004      	add	sp, #16
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	0800bd18 	.word	0x0800bd18
 80068f8:	40007000 	.word	0x40007000
 80068fc:	fffff9ff 	.word	0xfffff9ff
 8006900:	20000010 	.word	0x20000010
 8006904:	000f4240 	.word	0x000f4240

08006908 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800690c:	4b03      	ldr	r3, [pc, #12]	@ (800691c <HAL_PWREx_GetVoltageRange+0x14>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	23c0      	movs	r3, #192	@ 0xc0
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4013      	ands	r3, r2
}
 8006916:	0018      	movs	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40007000 	.word	0x40007000

08006920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006920:	b5b0      	push	{r4, r5, r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d107      	bne.n	800693e <HAL_RCC_OscConfig+0x1e>
 800692e:	234e      	movs	r3, #78	@ 0x4e
 8006930:	33ff      	adds	r3, #255	@ 0xff
 8006932:	001a      	movs	r2, r3
 8006934:	4bbd      	ldr	r3, [pc, #756]	@ (8006c2c <HAL_RCC_OscConfig+0x30c>)
 8006936:	0011      	movs	r1, r2
 8006938:	0018      	movs	r0, r3
 800693a:	f7fc fc3d 	bl	80031b8 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01f      	beq.n	8006986 <HAL_RCC_OscConfig+0x66>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2201      	movs	r2, #1
 800694c:	4013      	ands	r3, r2
 800694e:	d11a      	bne.n	8006986 <HAL_RCC_OscConfig+0x66>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2202      	movs	r2, #2
 8006956:	4013      	ands	r3, r2
 8006958:	d115      	bne.n	8006986 <HAL_RCC_OscConfig+0x66>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2210      	movs	r2, #16
 8006960:	4013      	ands	r3, r2
 8006962:	d110      	bne.n	8006986 <HAL_RCC_OscConfig+0x66>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2208      	movs	r2, #8
 800696a:	4013      	ands	r3, r2
 800696c:	d10b      	bne.n	8006986 <HAL_RCC_OscConfig+0x66>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2204      	movs	r2, #4
 8006974:	4013      	ands	r3, r2
 8006976:	d106      	bne.n	8006986 <HAL_RCC_OscConfig+0x66>
 8006978:	23a7      	movs	r3, #167	@ 0xa7
 800697a:	005a      	lsls	r2, r3, #1
 800697c:	4bab      	ldr	r3, [pc, #684]	@ (8006c2c <HAL_RCC_OscConfig+0x30c>)
 800697e:	0011      	movs	r1, r2
 8006980:	0018      	movs	r0, r3
 8006982:	f7fc fc19 	bl	80031b8 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006986:	4baa      	ldr	r3, [pc, #680]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	2238      	movs	r2, #56	@ 0x38
 800698c:	4013      	ands	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006990:	4ba7      	ldr	r3, [pc, #668]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2203      	movs	r2, #3
 8006996:	4013      	ands	r3, r2
 8006998:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2210      	movs	r2, #16
 80069a0:	4013      	ands	r3, r2
 80069a2:	d100      	bne.n	80069a6 <HAL_RCC_OscConfig+0x86>
 80069a4:	e14f      	b.n	8006c46 <HAL_RCC_OscConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <HAL_RCC_OscConfig+0xa6>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d007      	beq.n	80069c6 <HAL_RCC_OscConfig+0xa6>
 80069b6:	2358      	movs	r3, #88	@ 0x58
 80069b8:	33ff      	adds	r3, #255	@ 0xff
 80069ba:	001a      	movs	r2, r3
 80069bc:	4b9b      	ldr	r3, [pc, #620]	@ (8006c2c <HAL_RCC_OscConfig+0x30c>)
 80069be:	0011      	movs	r1, r2
 80069c0:	0018      	movs	r0, r3
 80069c2:	f7fc fbf9 	bl	80031b8 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	2bff      	cmp	r3, #255	@ 0xff
 80069cc:	d906      	bls.n	80069dc <HAL_RCC_OscConfig+0xbc>
 80069ce:	23ac      	movs	r3, #172	@ 0xac
 80069d0:	005a      	lsls	r2, r3, #1
 80069d2:	4b96      	ldr	r3, [pc, #600]	@ (8006c2c <HAL_RCC_OscConfig+0x30c>)
 80069d4:	0011      	movs	r1, r2
 80069d6:	0018      	movs	r0, r3
 80069d8:	f7fc fbee 	bl	80031b8 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d033      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	2b10      	cmp	r3, #16
 80069ea:	d02f      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	2b20      	cmp	r3, #32
 80069f2:	d02b      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f8:	2b30      	cmp	r3, #48	@ 0x30
 80069fa:	d027      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	2b40      	cmp	r3, #64	@ 0x40
 8006a02:	d023      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	2b50      	cmp	r3, #80	@ 0x50
 8006a0a:	d01f      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	2b60      	cmp	r3, #96	@ 0x60
 8006a12:	d01b      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a18:	2b70      	cmp	r3, #112	@ 0x70
 8006a1a:	d017      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	2b80      	cmp	r3, #128	@ 0x80
 8006a22:	d013      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a28:	2b90      	cmp	r3, #144	@ 0x90
 8006a2a:	d00f      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a30:	2ba0      	cmp	r3, #160	@ 0xa0
 8006a32:	d00b      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	2bb0      	cmp	r3, #176	@ 0xb0
 8006a3a:	d007      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 8006a3c:	235a      	movs	r3, #90	@ 0x5a
 8006a3e:	33ff      	adds	r3, #255	@ 0xff
 8006a40:	001a      	movs	r2, r3
 8006a42:	4b7a      	ldr	r3, [pc, #488]	@ (8006c2c <HAL_RCC_OscConfig+0x30c>)
 8006a44:	0011      	movs	r1, r2
 8006a46:	0018      	movs	r0, r3
 8006a48:	f7fc fbb6 	bl	80031b8 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <HAL_RCC_OscConfig+0x142>
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b18      	cmp	r3, #24
 8006a56:	d000      	beq.n	8006a5a <HAL_RCC_OscConfig+0x13a>
 8006a58:	e093      	b.n	8006b82 <HAL_RCC_OscConfig+0x262>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d000      	beq.n	8006a62 <HAL_RCC_OscConfig+0x142>
 8006a60:	e08f      	b.n	8006b82 <HAL_RCC_OscConfig+0x262>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a62:	4b73      	ldr	r3, [pc, #460]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2202      	movs	r2, #2
 8006a68:	4013      	ands	r3, r2
 8006a6a:	d006      	beq.n	8006a7a <HAL_RCC_OscConfig+0x15a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <HAL_RCC_OscConfig+0x15a>
      {
        return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f000 fcbf 	bl	80073f8 <HAL_RCC_OscConfig+0xad8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a7e:	4b6c      	ldr	r3, [pc, #432]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2108      	movs	r1, #8
 8006a84:	400b      	ands	r3, r1
 8006a86:	d004      	beq.n	8006a92 <HAL_RCC_OscConfig+0x172>
 8006a88:	4b69      	ldr	r3, [pc, #420]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	21f0      	movs	r1, #240	@ 0xf0
 8006a8e:	400b      	ands	r3, r1
 8006a90:	e005      	b.n	8006a9e <HAL_RCC_OscConfig+0x17e>
 8006a92:	4967      	ldr	r1, [pc, #412]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006a94:	2394      	movs	r3, #148	@ 0x94
 8006a96:	58cb      	ldr	r3, [r1, r3]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	21f0      	movs	r1, #240	@ 0xf0
 8006a9c:	400b      	ands	r3, r1
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d225      	bcs.n	8006aee <HAL_RCC_OscConfig+0x1ce>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f000 fef4 	bl	8007894 <RCC_SetFlashLatencyFromMSIRange>
 8006aac:	1e03      	subs	r3, r0, #0
 8006aae:	d002      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x196>
          {
            return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	f000 fca1 	bl	80073f8 <HAL_RCC_OscConfig+0xad8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ab6:	4b5e      	ldr	r3, [pc, #376]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b5d      	ldr	r3, [pc, #372]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006abc:	2108      	movs	r1, #8
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	22f0      	movs	r2, #240	@ 0xf0
 8006ac8:	4393      	bics	r3, r2
 8006aca:	0019      	movs	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ad0:	4b57      	ldr	r3, [pc, #348]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ad6:	4b56      	ldr	r3, [pc, #344]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	4a56      	ldr	r2, [pc, #344]	@ (8006c34 <HAL_RCC_OscConfig+0x314>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	0019      	movs	r1, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	021a      	lsls	r2, r3, #8
 8006ae6:	4b52      	ldr	r3, [pc, #328]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
 8006aec:	e027      	b.n	8006b3e <HAL_RCC_OscConfig+0x21e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006aee:	4b50      	ldr	r3, [pc, #320]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	4b4f      	ldr	r3, [pc, #316]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006af4:	2108      	movs	r1, #8
 8006af6:	430a      	orrs	r2, r1
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	4b4d      	ldr	r3, [pc, #308]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	22f0      	movs	r2, #240	@ 0xf0
 8006b00:	4393      	bics	r3, r2
 8006b02:	0019      	movs	r1, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b08:	4b49      	ldr	r3, [pc, #292]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b0e:	4b48      	ldr	r3, [pc, #288]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	4a48      	ldr	r2, [pc, #288]	@ (8006c34 <HAL_RCC_OscConfig+0x314>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	0019      	movs	r1, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	021a      	lsls	r2, r3, #8
 8006b1e:	4b44      	ldr	r3, [pc, #272]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006b20:	430a      	orrs	r2, r1
 8006b22:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <HAL_RCC_OscConfig+0x21e>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f000 feb0 	bl	8007894 <RCC_SetFlashLatencyFromMSIRange>
 8006b34:	1e03      	subs	r3, r0, #0
 8006b36:	d002      	beq.n	8006b3e <HAL_RCC_OscConfig+0x21e>
            {
              return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f000 fc5d 	bl	80073f8 <HAL_RCC_OscConfig+0xad8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006b3e:	f000 fe0d 	bl	800775c <HAL_RCC_GetSysClockFreq>
 8006b42:	0001      	movs	r1, r0
 8006b44:	4b3a      	ldr	r3, [pc, #232]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006b46:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b48:	0a1b      	lsrs	r3, r3, #8
 8006b4a:	220f      	movs	r2, #15
 8006b4c:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006b4e:	4a3a      	ldr	r2, [pc, #232]	@ (8006c38 <HAL_RCC_OscConfig+0x318>)
 8006b50:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b52:	001a      	movs	r2, r3
 8006b54:	231f      	movs	r3, #31
 8006b56:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006b58:	000a      	movs	r2, r1
 8006b5a:	40da      	lsrs	r2, r3
 8006b5c:	4b37      	ldr	r3, [pc, #220]	@ (8006c3c <HAL_RCC_OscConfig+0x31c>)
 8006b5e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006b60:	4b37      	ldr	r3, [pc, #220]	@ (8006c40 <HAL_RCC_OscConfig+0x320>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	250f      	movs	r5, #15
 8006b66:	197c      	adds	r4, r7, r5
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7fc fc71 	bl	8003450 <HAL_InitTick>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8006b72:	197b      	adds	r3, r7, r5
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d064      	beq.n	8006c44 <HAL_RCC_OscConfig+0x324>
        {
          return status;
 8006b7a:	197b      	adds	r3, r7, r5
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	f000 fc3b 	bl	80073f8 <HAL_RCC_OscConfig+0xad8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d035      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x2d6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006b8a:	4b29      	ldr	r3, [pc, #164]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b28      	ldr	r3, [pc, #160]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006b90:	2101      	movs	r1, #1
 8006b92:	430a      	orrs	r2, r1
 8006b94:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b96:	f7fc fcb5 	bl	8003504 <HAL_GetTick>
 8006b9a:	0003      	movs	r3, r0
 8006b9c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b9e:	e009      	b.n	8006bb4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006ba0:	f7fc fcb0 	bl	8003504 <HAL_GetTick>
 8006ba4:	0002      	movs	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d902      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	f000 fc22 	bl	80073f8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	4013      	ands	r3, r2
 8006bbc:	d0f0      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x280>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006bc4:	2108      	movs	r1, #8
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	4b19      	ldr	r3, [pc, #100]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	22f0      	movs	r2, #240	@ 0xf0
 8006bd0:	4393      	bics	r3, r2
 8006bd2:	0019      	movs	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bd8:	4b15      	ldr	r3, [pc, #84]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bde:	4b14      	ldr	r3, [pc, #80]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4a14      	ldr	r2, [pc, #80]	@ (8006c34 <HAL_RCC_OscConfig+0x314>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	0019      	movs	r1, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	021a      	lsls	r2, r3, #8
 8006bee:	4b10      	ldr	r3, [pc, #64]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	605a      	str	r2, [r3, #4]
 8006bf4:	e027      	b.n	8006c46 <HAL_RCC_OscConfig+0x326>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	438a      	bics	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c02:	f7fc fc7f 	bl	8003504 <HAL_GetTick>
 8006c06:	0003      	movs	r3, r0
 8006c08:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c0a:	e009      	b.n	8006c20 <HAL_RCC_OscConfig+0x300>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006c0c:	f7fc fc7a 	bl	8003504 <HAL_GetTick>
 8006c10:	0002      	movs	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d902      	bls.n	8006c20 <HAL_RCC_OscConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	f000 fbec 	bl	80073f8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c20:	4b03      	ldr	r3, [pc, #12]	@ (8006c30 <HAL_RCC_OscConfig+0x310>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2202      	movs	r2, #2
 8006c26:	4013      	ands	r3, r2
 8006c28:	d1f0      	bne.n	8006c0c <HAL_RCC_OscConfig+0x2ec>
 8006c2a:	e00c      	b.n	8006c46 <HAL_RCC_OscConfig+0x326>
 8006c2c:	0800bd54 	.word	0x0800bd54
 8006c30:	40021000 	.word	0x40021000
 8006c34:	ffff00ff 	.word	0xffff00ff
 8006c38:	0800bed0 	.word	0x0800bed0
 8006c3c:	20000010 	.word	0x20000010
 8006c40:	20000014 	.word	0x20000014
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c44:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d100      	bne.n	8006c52 <HAL_RCC_OscConfig+0x332>
 8006c50:	e07f      	b.n	8006d52 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d012      	beq.n	8006c80 <HAL_RCC_OscConfig+0x360>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	2380      	movs	r3, #128	@ 0x80
 8006c60:	025b      	lsls	r3, r3, #9
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d00c      	beq.n	8006c80 <HAL_RCC_OscConfig+0x360>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	23a0      	movs	r3, #160	@ 0xa0
 8006c6c:	02db      	lsls	r3, r3, #11
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d006      	beq.n	8006c80 <HAL_RCC_OscConfig+0x360>
 8006c72:	23e3      	movs	r3, #227	@ 0xe3
 8006c74:	005a      	lsls	r2, r3, #1
 8006c76:	4bb2      	ldr	r3, [pc, #712]	@ (8006f40 <HAL_RCC_OscConfig+0x620>)
 8006c78:	0011      	movs	r1, r2
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f7fc fa9c 	bl	80031b8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b10      	cmp	r3, #16
 8006c84:	d005      	beq.n	8006c92 <HAL_RCC_OscConfig+0x372>
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b18      	cmp	r3, #24
 8006c8a:	d10f      	bne.n	8006cac <HAL_RCC_OscConfig+0x38c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d10c      	bne.n	8006cac <HAL_RCC_OscConfig+0x38c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c92:	4bac      	ldr	r3, [pc, #688]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	2380      	movs	r3, #128	@ 0x80
 8006c98:	029b      	lsls	r3, r3, #10
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d058      	beq.n	8006d50 <HAL_RCC_OscConfig+0x430>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d154      	bne.n	8006d50 <HAL_RCC_OscConfig+0x430>
      {
        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	f000 fba6 	bl	80073f8 <HAL_RCC_OscConfig+0xad8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	2380      	movs	r3, #128	@ 0x80
 8006cb2:	025b      	lsls	r3, r3, #9
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x3a8>
 8006cb8:	4ba2      	ldr	r3, [pc, #648]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006cbe:	2180      	movs	r1, #128	@ 0x80
 8006cc0:	0249      	lsls	r1, r1, #9
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	e013      	b.n	8006cf0 <HAL_RCC_OscConfig+0x3d0>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	23a0      	movs	r3, #160	@ 0xa0
 8006cce:	02db      	lsls	r3, r3, #11
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d107      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x3c4>
 8006cd4:	4b9b      	ldr	r3, [pc, #620]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b9a      	ldr	r3, [pc, #616]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006cda:	21a0      	movs	r1, #160	@ 0xa0
 8006cdc:	02c9      	lsls	r1, r1, #11
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e005      	b.n	8006cf0 <HAL_RCC_OscConfig+0x3d0>
 8006ce4:	4b97      	ldr	r3, [pc, #604]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	4b96      	ldr	r3, [pc, #600]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006cea:	4997      	ldr	r1, [pc, #604]	@ (8006f48 <HAL_RCC_OscConfig+0x628>)
 8006cec:	400a      	ands	r2, r1
 8006cee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <HAL_RCC_OscConfig+0x404>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf8:	f7fc fc04 	bl	8003504 <HAL_GetTick>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d00:	e009      	b.n	8006d16 <HAL_RCC_OscConfig+0x3f6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006d02:	f7fc fbff 	bl	8003504 <HAL_GetTick>
 8006d06:	0002      	movs	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b64      	cmp	r3, #100	@ 0x64
 8006d0e:	d902      	bls.n	8006d16 <HAL_RCC_OscConfig+0x3f6>
          {
            return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	f000 fb71 	bl	80073f8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d16:	4b8b      	ldr	r3, [pc, #556]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	2380      	movs	r3, #128	@ 0x80
 8006d1c:	029b      	lsls	r3, r3, #10
 8006d1e:	4013      	ands	r3, r2
 8006d20:	d0ef      	beq.n	8006d02 <HAL_RCC_OscConfig+0x3e2>
 8006d22:	e016      	b.n	8006d52 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d24:	f7fc fbee 	bl	8003504 <HAL_GetTick>
 8006d28:	0003      	movs	r3, r0
 8006d2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d2c:	e009      	b.n	8006d42 <HAL_RCC_OscConfig+0x422>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006d2e:	f7fc fbe9 	bl	8003504 <HAL_GetTick>
 8006d32:	0002      	movs	r2, r0
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b64      	cmp	r3, #100	@ 0x64
 8006d3a:	d902      	bls.n	8006d42 <HAL_RCC_OscConfig+0x422>
          {
            return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	f000 fb5b 	bl	80073f8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d42:	4b80      	ldr	r3, [pc, #512]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	2380      	movs	r3, #128	@ 0x80
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d1ef      	bne.n	8006d2e <HAL_RCC_OscConfig+0x40e>
 8006d4e:	e000      	b.n	8006d52 <HAL_RCC_OscConfig+0x432>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d50:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2202      	movs	r2, #2
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d100      	bne.n	8006d5e <HAL_RCC_OscConfig+0x43e>
 8006d5c:	e082      	b.n	8006e64 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00c      	beq.n	8006d80 <HAL_RCC_OscConfig+0x460>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	2380      	movs	r3, #128	@ 0x80
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d006      	beq.n	8006d80 <HAL_RCC_OscConfig+0x460>
 8006d72:	23fc      	movs	r3, #252	@ 0xfc
 8006d74:	005a      	lsls	r2, r3, #1
 8006d76:	4b72      	ldr	r3, [pc, #456]	@ (8006f40 <HAL_RCC_OscConfig+0x620>)
 8006d78:	0011      	movs	r1, r2
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	f7fc fa1c 	bl	80031b8 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d86:	d907      	bls.n	8006d98 <HAL_RCC_OscConfig+0x478>
 8006d88:	23fa      	movs	r3, #250	@ 0xfa
 8006d8a:	33ff      	adds	r3, #255	@ 0xff
 8006d8c:	001a      	movs	r2, r3
 8006d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8006f40 <HAL_RCC_OscConfig+0x620>)
 8006d90:	0011      	movs	r1, r2
 8006d92:	0018      	movs	r0, r3
 8006d94:	f7fc fa10 	bl	80031b8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d005      	beq.n	8006daa <HAL_RCC_OscConfig+0x48a>
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b18      	cmp	r3, #24
 8006da2:	d11a      	bne.n	8006dda <HAL_RCC_OscConfig+0x4ba>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d117      	bne.n	8006dda <HAL_RCC_OscConfig+0x4ba>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006daa:	4b66      	ldr	r3, [pc, #408]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	2380      	movs	r3, #128	@ 0x80
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	4013      	ands	r3, r2
 8006db4:	d005      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x4a2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x4a2>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e31a      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dc2:	4b60      	ldr	r3, [pc, #384]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	4a61      	ldr	r2, [pc, #388]	@ (8006f4c <HAL_RCC_OscConfig+0x62c>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	0019      	movs	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	061a      	lsls	r2, r3, #24
 8006dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dd8:	e044      	b.n	8006e64 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d026      	beq.n	8006e30 <HAL_RCC_OscConfig+0x510>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006de2:	4b58      	ldr	r3, [pc, #352]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	4b57      	ldr	r3, [pc, #348]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006de8:	2180      	movs	r1, #128	@ 0x80
 8006dea:	0049      	lsls	r1, r1, #1
 8006dec:	430a      	orrs	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df0:	f7fc fb88 	bl	8003504 <HAL_GetTick>
 8006df4:	0003      	movs	r3, r0
 8006df6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006df8:	e008      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006dfa:	f7fc fb83 	bl	8003504 <HAL_GetTick>
 8006dfe:	0002      	movs	r2, r0
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
          {
            return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e2f5      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	2380      	movs	r3, #128	@ 0x80
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4013      	ands	r3, r2
 8006e16:	d0f0      	beq.n	8006dfa <HAL_RCC_OscConfig+0x4da>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e18:	4b4a      	ldr	r3, [pc, #296]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8006f4c <HAL_RCC_OscConfig+0x62c>)
 8006e1e:	4013      	ands	r3, r2
 8006e20:	0019      	movs	r1, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	061a      	lsls	r2, r3, #24
 8006e28:	4b46      	ldr	r3, [pc, #280]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
 8006e2e:	e019      	b.n	8006e64 <HAL_RCC_OscConfig+0x544>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e30:	4b44      	ldr	r3, [pc, #272]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	4b43      	ldr	r3, [pc, #268]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006e36:	4946      	ldr	r1, [pc, #280]	@ (8006f50 <HAL_RCC_OscConfig+0x630>)
 8006e38:	400a      	ands	r2, r1
 8006e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3c:	f7fc fb62 	bl	8003504 <HAL_GetTick>
 8006e40:	0003      	movs	r3, r0
 8006e42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006e46:	f7fc fb5d 	bl	8003504 <HAL_GetTick>
 8006e4a:	0002      	movs	r2, r0
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e2cf      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e58:	4b3a      	ldr	r3, [pc, #232]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	2380      	movs	r3, #128	@ 0x80
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4013      	ands	r3, r2
 8006e62:	d1f0      	bne.n	8006e46 <HAL_RCC_OscConfig+0x526>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2208      	movs	r2, #8
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	d100      	bne.n	8006e70 <HAL_RCC_OscConfig+0x550>
 8006e6e:	e07b      	b.n	8006f68 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <HAL_RCC_OscConfig+0x56c>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d005      	beq.n	8006e8c <HAL_RCC_OscConfig+0x56c>
 8006e80:	4a34      	ldr	r2, [pc, #208]	@ (8006f54 <HAL_RCC_OscConfig+0x634>)
 8006e82:	4b2f      	ldr	r3, [pc, #188]	@ (8006f40 <HAL_RCC_OscConfig+0x620>)
 8006e84:	0011      	movs	r1, r2
 8006e86:	0018      	movs	r0, r3
 8006e88:	f7fc f996 	bl	80031b8 <assert_failed>
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d009      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x588>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d005      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x588>
 8006e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8006f58 <HAL_RCC_OscConfig+0x638>)
 8006e9e:	4b28      	ldr	r3, [pc, #160]	@ (8006f40 <HAL_RCC_OscConfig+0x620>)
 8006ea0:	0011      	movs	r1, r2
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f7fc f988 	bl	80031b8 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d031      	beq.n	8006f14 <HAL_RCC_OscConfig+0x5f4>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d108      	bne.n	8006eca <HAL_RCC_OscConfig+0x5aa>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8006eb8:	4a22      	ldr	r2, [pc, #136]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006eba:	2394      	movs	r3, #148	@ 0x94
 8006ebc:	58d3      	ldr	r3, [r2, r3]
 8006ebe:	4921      	ldr	r1, [pc, #132]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006ec0:	2204      	movs	r2, #4
 8006ec2:	4393      	bics	r3, r2
 8006ec4:	2294      	movs	r2, #148	@ 0x94
 8006ec6:	508b      	str	r3, [r1, r2]
 8006ec8:	e007      	b.n	8006eda <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8006eca:	4a1e      	ldr	r2, [pc, #120]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006ecc:	2394      	movs	r3, #148	@ 0x94
 8006ece:	58d3      	ldr	r3, [r2, r3]
 8006ed0:	491c      	ldr	r1, [pc, #112]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006ed2:	2204      	movs	r2, #4
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	2294      	movs	r2, #148	@ 0x94
 8006ed8:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eda:	4a1a      	ldr	r2, [pc, #104]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006edc:	2394      	movs	r3, #148	@ 0x94
 8006ede:	58d3      	ldr	r3, [r2, r3]
 8006ee0:	4918      	ldr	r1, [pc, #96]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	2294      	movs	r2, #148	@ 0x94
 8006ee8:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eea:	f7fc fb0b 	bl	8003504 <HAL_GetTick>
 8006eee:	0003      	movs	r3, r0
 8006ef0:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x5e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ef4:	f7fc fb06 	bl	8003504 <HAL_GetTick>
 8006ef8:	0002      	movs	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b11      	cmp	r3, #17
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x5e6>
        {
          return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e278      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f06:	4a0f      	ldr	r2, [pc, #60]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006f08:	2394      	movs	r3, #148	@ 0x94
 8006f0a:	58d3      	ldr	r3, [r2, r3]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d0f0      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x5d4>
 8006f12:	e029      	b.n	8006f68 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f14:	4a0b      	ldr	r2, [pc, #44]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006f16:	2394      	movs	r3, #148	@ 0x94
 8006f18:	58d3      	ldr	r3, [r2, r3]
 8006f1a:	490a      	ldr	r1, [pc, #40]	@ (8006f44 <HAL_RCC_OscConfig+0x624>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	4393      	bics	r3, r2
 8006f20:	2294      	movs	r2, #148	@ 0x94
 8006f22:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f24:	f7fc faee 	bl	8003504 <HAL_GetTick>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f2c:	e016      	b.n	8006f5c <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f2e:	f7fc fae9 	bl	8003504 <HAL_GetTick>
 8006f32:	0002      	movs	r2, r0
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b11      	cmp	r3, #17
 8006f3a:	d90f      	bls.n	8006f5c <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e25b      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
 8006f40:	0800bd54 	.word	0x0800bd54
 8006f44:	40021000 	.word	0x40021000
 8006f48:	fffaffff 	.word	0xfffaffff
 8006f4c:	80ffffff 	.word	0x80ffffff
 8006f50:	fffffeff 	.word	0xfffffeff
 8006f54:	00000239 	.word	0x00000239
 8006f58:	0000023a 	.word	0x0000023a
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f5c:	4a8c      	ldr	r2, [pc, #560]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8006f5e:	2394      	movs	r3, #148	@ 0x94
 8006f60:	58d3      	ldr	r3, [r2, r3]
 8006f62:	2202      	movs	r2, #2
 8006f64:	4013      	ands	r3, r2
 8006f66:	d1e2      	bne.n	8006f2e <HAL_RCC_OscConfig+0x60e>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	4013      	ands	r3, r2
 8006f70:	d100      	bne.n	8006f74 <HAL_RCC_OscConfig+0x654>
 8006f72:	e127      	b.n	80071c4 <HAL_RCC_OscConfig+0x8a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f74:	231f      	movs	r3, #31
 8006f76:	18fb      	adds	r3, r7, r3
 8006f78:	2200      	movs	r2, #0
 8006f7a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d016      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x692>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	2b81      	cmp	r3, #129	@ 0x81
 8006f8a:	d012      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x692>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d00e      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x692>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	2b05      	cmp	r3, #5
 8006f9a:	d00a      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x692>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b85      	cmp	r3, #133	@ 0x85
 8006fa2:	d006      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x692>
 8006fa4:	239c      	movs	r3, #156	@ 0x9c
 8006fa6:	009a      	lsls	r2, r3, #2
 8006fa8:	4b7a      	ldr	r3, [pc, #488]	@ (8007194 <HAL_RCC_OscConfig+0x874>)
 8006faa:	0011      	movs	r1, r2
 8006fac:	0018      	movs	r0, r3
 8006fae:	f7fc f903 	bl	80031b8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8006fb2:	4b77      	ldr	r3, [pc, #476]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8006fb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006fb6:	2380      	movs	r3, #128	@ 0x80
 8006fb8:	055b      	lsls	r3, r3, #21
 8006fba:	4013      	ands	r3, r2
 8006fbc:	d111      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x6c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fbe:	4b74      	ldr	r3, [pc, #464]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8006fc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006fc2:	4b73      	ldr	r3, [pc, #460]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8006fc4:	2180      	movs	r1, #128	@ 0x80
 8006fc6:	0549      	lsls	r1, r1, #21
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	659a      	str	r2, [r3, #88]	@ 0x58
 8006fcc:	4b70      	ldr	r3, [pc, #448]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8006fce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006fd0:	2380      	movs	r3, #128	@ 0x80
 8006fd2:	055b      	lsls	r3, r3, #21
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fda:	231f      	movs	r3, #31
 8006fdc:	18fb      	adds	r3, r7, r3
 8006fde:	2201      	movs	r2, #1
 8006fe0:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8007198 <HAL_RCC_OscConfig+0x878>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	2380      	movs	r3, #128	@ 0x80
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	4013      	ands	r3, r2
 8006fec:	d11a      	bne.n	8007024 <HAL_RCC_OscConfig+0x704>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fee:	4b6a      	ldr	r3, [pc, #424]	@ (8007198 <HAL_RCC_OscConfig+0x878>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b69      	ldr	r3, [pc, #420]	@ (8007198 <HAL_RCC_OscConfig+0x878>)
 8006ff4:	2180      	movs	r1, #128	@ 0x80
 8006ff6:	0049      	lsls	r1, r1, #1
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ffc:	f7fc fa82 	bl	8003504 <HAL_GetTick>
 8007000:	0003      	movs	r3, r0
 8007002:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x6f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007006:	f7fc fa7d 	bl	8003504 <HAL_GetTick>
 800700a:	0002      	movs	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e1ef      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007018:	4b5f      	ldr	r3, [pc, #380]	@ (8007198 <HAL_RCC_OscConfig+0x878>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	2380      	movs	r3, #128	@ 0x80
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	4013      	ands	r3, r2
 8007022:	d0f0      	beq.n	8007006 <HAL_RCC_OscConfig+0x6e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2201      	movs	r2, #1
 800702a:	4013      	ands	r3, r2
 800702c:	d01e      	beq.n	800706c <HAL_RCC_OscConfig+0x74c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2204      	movs	r2, #4
 8007034:	4013      	ands	r3, r2
 8007036:	d010      	beq.n	800705a <HAL_RCC_OscConfig+0x73a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007038:	4a55      	ldr	r2, [pc, #340]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 800703a:	2390      	movs	r3, #144	@ 0x90
 800703c:	58d3      	ldr	r3, [r2, r3]
 800703e:	4954      	ldr	r1, [pc, #336]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8007040:	2204      	movs	r2, #4
 8007042:	4313      	orrs	r3, r2
 8007044:	2290      	movs	r2, #144	@ 0x90
 8007046:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007048:	4a51      	ldr	r2, [pc, #324]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 800704a:	2390      	movs	r3, #144	@ 0x90
 800704c:	58d3      	ldr	r3, [r2, r3]
 800704e:	4950      	ldr	r1, [pc, #320]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8007050:	2201      	movs	r2, #1
 8007052:	4313      	orrs	r3, r2
 8007054:	2290      	movs	r2, #144	@ 0x90
 8007056:	508b      	str	r3, [r1, r2]
 8007058:	e018      	b.n	800708c <HAL_RCC_OscConfig+0x76c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800705a:	4a4d      	ldr	r2, [pc, #308]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 800705c:	2390      	movs	r3, #144	@ 0x90
 800705e:	58d3      	ldr	r3, [r2, r3]
 8007060:	494b      	ldr	r1, [pc, #300]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8007062:	2201      	movs	r2, #1
 8007064:	4313      	orrs	r3, r2
 8007066:	2290      	movs	r2, #144	@ 0x90
 8007068:	508b      	str	r3, [r1, r2]
 800706a:	e00f      	b.n	800708c <HAL_RCC_OscConfig+0x76c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800706c:	4a48      	ldr	r2, [pc, #288]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 800706e:	2390      	movs	r3, #144	@ 0x90
 8007070:	58d3      	ldr	r3, [r2, r3]
 8007072:	4947      	ldr	r1, [pc, #284]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8007074:	2201      	movs	r2, #1
 8007076:	4393      	bics	r3, r2
 8007078:	2290      	movs	r2, #144	@ 0x90
 800707a:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800707c:	4a44      	ldr	r2, [pc, #272]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 800707e:	2390      	movs	r3, #144	@ 0x90
 8007080:	58d3      	ldr	r3, [r2, r3]
 8007082:	4943      	ldr	r1, [pc, #268]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8007084:	2204      	movs	r2, #4
 8007086:	4393      	bics	r3, r2
 8007088:	2290      	movs	r2, #144	@ 0x90
 800708a:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d04f      	beq.n	8007134 <HAL_RCC_OscConfig+0x814>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007094:	f7fc fa36 	bl	8003504 <HAL_GetTick>
 8007098:	0003      	movs	r3, r0
 800709a:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800709c:	e009      	b.n	80070b2 <HAL_RCC_OscConfig+0x792>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800709e:	f7fc fa31 	bl	8003504 <HAL_GetTick>
 80070a2:	0002      	movs	r2, r0
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	4a3c      	ldr	r2, [pc, #240]	@ (800719c <HAL_RCC_OscConfig+0x87c>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0x792>
        {
          return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e1a2      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070b2:	4a37      	ldr	r2, [pc, #220]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 80070b4:	2390      	movs	r3, #144	@ 0x90
 80070b6:	58d3      	ldr	r3, [r2, r3]
 80070b8:	2202      	movs	r2, #2
 80070ba:	4013      	ands	r3, r2
 80070bc:	d0ef      	beq.n	800709e <HAL_RCC_OscConfig+0x77e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2280      	movs	r2, #128	@ 0x80
 80070c4:	4013      	ands	r3, r2
 80070c6:	d01a      	beq.n	80070fe <HAL_RCC_OscConfig+0x7de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80070c8:	4a31      	ldr	r2, [pc, #196]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 80070ca:	2390      	movs	r3, #144	@ 0x90
 80070cc:	58d3      	ldr	r3, [r2, r3]
 80070ce:	4930      	ldr	r1, [pc, #192]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 80070d0:	2280      	movs	r2, #128	@ 0x80
 80070d2:	4313      	orrs	r3, r2
 80070d4:	2290      	movs	r2, #144	@ 0x90
 80070d6:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80070d8:	e009      	b.n	80070ee <HAL_RCC_OscConfig+0x7ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070da:	f7fc fa13 	bl	8003504 <HAL_GetTick>
 80070de:	0002      	movs	r2, r0
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	4a2d      	ldr	r2, [pc, #180]	@ (800719c <HAL_RCC_OscConfig+0x87c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_OscConfig+0x7ce>
          {
            return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e184      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80070ee:	4a28      	ldr	r2, [pc, #160]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 80070f0:	2390      	movs	r3, #144	@ 0x90
 80070f2:	58d2      	ldr	r2, [r2, r3]
 80070f4:	2380      	movs	r3, #128	@ 0x80
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	4013      	ands	r3, r2
 80070fa:	d0ee      	beq.n	80070da <HAL_RCC_OscConfig+0x7ba>
 80070fc:	e057      	b.n	80071ae <HAL_RCC_OscConfig+0x88e>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80070fe:	4a24      	ldr	r2, [pc, #144]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8007100:	2390      	movs	r3, #144	@ 0x90
 8007102:	58d3      	ldr	r3, [r2, r3]
 8007104:	4922      	ldr	r1, [pc, #136]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8007106:	2280      	movs	r2, #128	@ 0x80
 8007108:	4393      	bics	r3, r2
 800710a:	2290      	movs	r2, #144	@ 0x90
 800710c:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800710e:	e009      	b.n	8007124 <HAL_RCC_OscConfig+0x804>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007110:	f7fc f9f8 	bl	8003504 <HAL_GetTick>
 8007114:	0002      	movs	r2, r0
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	4a20      	ldr	r2, [pc, #128]	@ (800719c <HAL_RCC_OscConfig+0x87c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e169      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007124:	4a1a      	ldr	r2, [pc, #104]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8007126:	2390      	movs	r3, #144	@ 0x90
 8007128:	58d2      	ldr	r2, [r2, r3]
 800712a:	2380      	movs	r3, #128	@ 0x80
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	4013      	ands	r3, r2
 8007130:	d1ee      	bne.n	8007110 <HAL_RCC_OscConfig+0x7f0>
 8007132:	e03c      	b.n	80071ae <HAL_RCC_OscConfig+0x88e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007134:	f7fc f9e6 	bl	8003504 <HAL_GetTick>
 8007138:	0003      	movs	r3, r0
 800713a:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800713c:	e009      	b.n	8007152 <HAL_RCC_OscConfig+0x832>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800713e:	f7fc f9e1 	bl	8003504 <HAL_GetTick>
 8007142:	0002      	movs	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	4a14      	ldr	r2, [pc, #80]	@ (800719c <HAL_RCC_OscConfig+0x87c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x832>
        {
          return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e152      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007152:	4a0f      	ldr	r2, [pc, #60]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8007154:	2390      	movs	r3, #144	@ 0x90
 8007156:	58d3      	ldr	r3, [r2, r3]
 8007158:	2202      	movs	r2, #2
 800715a:	4013      	ands	r3, r2
 800715c:	d1ef      	bne.n	800713e <HAL_RCC_OscConfig+0x81e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800715e:	4a0c      	ldr	r2, [pc, #48]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8007160:	2390      	movs	r3, #144	@ 0x90
 8007162:	58d3      	ldr	r3, [r2, r3]
 8007164:	2280      	movs	r2, #128	@ 0x80
 8007166:	4013      	ands	r3, r2
 8007168:	d021      	beq.n	80071ae <HAL_RCC_OscConfig+0x88e>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800716a:	4a09      	ldr	r2, [pc, #36]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 800716c:	2390      	movs	r3, #144	@ 0x90
 800716e:	58d3      	ldr	r3, [r2, r3]
 8007170:	4907      	ldr	r1, [pc, #28]	@ (8007190 <HAL_RCC_OscConfig+0x870>)
 8007172:	2280      	movs	r2, #128	@ 0x80
 8007174:	4393      	bics	r3, r2
 8007176:	2290      	movs	r2, #144	@ 0x90
 8007178:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800717a:	e011      	b.n	80071a0 <HAL_RCC_OscConfig+0x880>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800717c:	f7fc f9c2 	bl	8003504 <HAL_GetTick>
 8007180:	0002      	movs	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	4a05      	ldr	r2, [pc, #20]	@ (800719c <HAL_RCC_OscConfig+0x87c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d909      	bls.n	80071a0 <HAL_RCC_OscConfig+0x880>
          {
            return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e133      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
 8007190:	40021000 	.word	0x40021000
 8007194:	0800bd54 	.word	0x0800bd54
 8007198:	40007000 	.word	0x40007000
 800719c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80071a0:	4a97      	ldr	r2, [pc, #604]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 80071a2:	2390      	movs	r3, #144	@ 0x90
 80071a4:	58d2      	ldr	r2, [r2, r3]
 80071a6:	2380      	movs	r3, #128	@ 0x80
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	4013      	ands	r3, r2
 80071ac:	d1e6      	bne.n	800717c <HAL_RCC_OscConfig+0x85c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071ae:	231f      	movs	r3, #31
 80071b0:	18fb      	adds	r3, r7, r3
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d105      	bne.n	80071c4 <HAL_RCC_OscConfig+0x8a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071b8:	4b91      	ldr	r3, [pc, #580]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 80071ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80071bc:	4b90      	ldr	r3, [pc, #576]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 80071be:	4991      	ldr	r1, [pc, #580]	@ (8007404 <HAL_RCC_OscConfig+0xae4>)
 80071c0:	400a      	ands	r2, r1
 80071c2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00d      	beq.n	80071e8 <HAL_RCC_OscConfig+0x8c8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d009      	beq.n	80071e8 <HAL_RCC_OscConfig+0x8c8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d005      	beq.n	80071e8 <HAL_RCC_OscConfig+0x8c8>
 80071dc:	4a8a      	ldr	r2, [pc, #552]	@ (8007408 <HAL_RCC_OscConfig+0xae8>)
 80071de:	4b8b      	ldr	r3, [pc, #556]	@ (800740c <HAL_RCC_OscConfig+0xaec>)
 80071e0:	0011      	movs	r1, r2
 80071e2:	0018      	movs	r0, r3
 80071e4:	f7fb ffe8 	bl	80031b8 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d100      	bne.n	80071f2 <HAL_RCC_OscConfig+0x8d2>
 80071f0:	e101      	b.n	80073f6 <HAL_RCC_OscConfig+0xad6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071f2:	4b83      	ldr	r3, [pc, #524]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2238      	movs	r2, #56	@ 0x38
 80071f8:	4013      	ands	r3, r2
 80071fa:	2b18      	cmp	r3, #24
 80071fc:	d100      	bne.n	8007200 <HAL_RCC_OscConfig+0x8e0>
 80071fe:	e0f8      	b.n	80073f2 <HAL_RCC_OscConfig+0xad2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007204:	2b02      	cmp	r3, #2
 8007206:	d000      	beq.n	800720a <HAL_RCC_OscConfig+0x8ea>
 8007208:	e0d8      	b.n	80073bc <HAL_RCC_OscConfig+0xa9c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	2b01      	cmp	r3, #1
 8007210:	d012      	beq.n	8007238 <HAL_RCC_OscConfig+0x918>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007216:	2b02      	cmp	r3, #2
 8007218:	d00e      	beq.n	8007238 <HAL_RCC_OscConfig+0x918>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <HAL_RCC_OscConfig+0x918>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007226:	2b03      	cmp	r3, #3
 8007228:	d006      	beq.n	8007238 <HAL_RCC_OscConfig+0x918>
 800722a:	23ca      	movs	r3, #202	@ 0xca
 800722c:	009a      	lsls	r2, r3, #2
 800722e:	4b77      	ldr	r3, [pc, #476]	@ (800740c <HAL_RCC_OscConfig+0xaec>)
 8007230:	0011      	movs	r1, r2
 8007232:	0018      	movs	r0, r3
 8007234:	f7fb ffc0 	bl	80031b8 <assert_failed>
        assert_param(IS_RCC_PLL_DIVM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723c:	2b00      	cmp	r3, #0
 800723e:	d021      	beq.n	8007284 <HAL_RCC_OscConfig+0x964>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007244:	2b10      	cmp	r3, #16
 8007246:	d01d      	beq.n	8007284 <HAL_RCC_OscConfig+0x964>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724c:	2b20      	cmp	r3, #32
 800724e:	d019      	beq.n	8007284 <HAL_RCC_OscConfig+0x964>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007254:	2b30      	cmp	r3, #48	@ 0x30
 8007256:	d015      	beq.n	8007284 <HAL_RCC_OscConfig+0x964>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725c:	2b40      	cmp	r3, #64	@ 0x40
 800725e:	d011      	beq.n	8007284 <HAL_RCC_OscConfig+0x964>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007264:	2b50      	cmp	r3, #80	@ 0x50
 8007266:	d00d      	beq.n	8007284 <HAL_RCC_OscConfig+0x964>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726c:	2b60      	cmp	r3, #96	@ 0x60
 800726e:	d009      	beq.n	8007284 <HAL_RCC_OscConfig+0x964>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007274:	2b70      	cmp	r3, #112	@ 0x70
 8007276:	d005      	beq.n	8007284 <HAL_RCC_OscConfig+0x964>
 8007278:	4a65      	ldr	r2, [pc, #404]	@ (8007410 <HAL_RCC_OscConfig+0xaf0>)
 800727a:	4b64      	ldr	r3, [pc, #400]	@ (800740c <HAL_RCC_OscConfig+0xaec>)
 800727c:	0011      	movs	r1, r2
 800727e:	0018      	movs	r0, r3
 8007280:	f7fb ff9a 	bl	80031b8 <assert_failed>
        assert_param(IS_RCC_PLL_MULN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007288:	2b03      	cmp	r3, #3
 800728a:	d903      	bls.n	8007294 <HAL_RCC_OscConfig+0x974>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007290:	2b7f      	cmp	r3, #127	@ 0x7f
 8007292:	d905      	bls.n	80072a0 <HAL_RCC_OscConfig+0x980>
 8007294:	4a5f      	ldr	r2, [pc, #380]	@ (8007414 <HAL_RCC_OscConfig+0xaf4>)
 8007296:	4b5d      	ldr	r3, [pc, #372]	@ (800740c <HAL_RCC_OscConfig+0xaec>)
 8007298:	0011      	movs	r1, r2
 800729a:	0018      	movs	r0, r3
 800729c:	f7fb ff8c 	bl	80031b8 <assert_failed>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072a4:	2380      	movs	r3, #128	@ 0x80
 80072a6:	029b      	lsls	r3, r3, #10
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d305      	bcc.n	80072b8 <HAL_RCC_OscConfig+0x998>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072b0:	23f8      	movs	r3, #248	@ 0xf8
 80072b2:	039b      	lsls	r3, r3, #14
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d905      	bls.n	80072c4 <HAL_RCC_OscConfig+0x9a4>
 80072b8:	4a57      	ldr	r2, [pc, #348]	@ (8007418 <HAL_RCC_OscConfig+0xaf8>)
 80072ba:	4b54      	ldr	r3, [pc, #336]	@ (800740c <HAL_RCC_OscConfig+0xaec>)
 80072bc:	0011      	movs	r1, r2
 80072be:	0018      	movs	r0, r3
 80072c0:	f7fb ff7a 	bl	80031b8 <assert_failed>
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072c8:	2380      	movs	r3, #128	@ 0x80
 80072ca:	049b      	lsls	r3, r3, #18
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d305      	bcc.n	80072dc <HAL_RCC_OscConfig+0x9bc>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072d4:	23e0      	movs	r3, #224	@ 0xe0
 80072d6:	051b      	lsls	r3, r3, #20
 80072d8:	429a      	cmp	r2, r3
 80072da:	d906      	bls.n	80072ea <HAL_RCC_OscConfig+0x9ca>
 80072dc:	23cb      	movs	r3, #203	@ 0xcb
 80072de:	009a      	lsls	r2, r3, #2
 80072e0:	4b4a      	ldr	r3, [pc, #296]	@ (800740c <HAL_RCC_OscConfig+0xaec>)
 80072e2:	0011      	movs	r1, r2
 80072e4:	0018      	movs	r0, r3
 80072e6:	f7fb ff67 	bl	80031b8 <assert_failed>
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072ee:	2380      	movs	r3, #128	@ 0x80
 80072f0:	059b      	lsls	r3, r3, #22
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d305      	bcc.n	8007302 <HAL_RCC_OscConfig+0x9e2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072fa:	23e0      	movs	r3, #224	@ 0xe0
 80072fc:	061b      	lsls	r3, r3, #24
 80072fe:	429a      	cmp	r2, r3
 8007300:	d905      	bls.n	800730e <HAL_RCC_OscConfig+0x9ee>
 8007302:	4a46      	ldr	r2, [pc, #280]	@ (800741c <HAL_RCC_OscConfig+0xafc>)
 8007304:	4b41      	ldr	r3, [pc, #260]	@ (800740c <HAL_RCC_OscConfig+0xaec>)
 8007306:	0011      	movs	r1, r2
 8007308:	0018      	movs	r0, r3
 800730a:	f7fb ff55 	bl	80031b8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800730e:	4b3c      	ldr	r3, [pc, #240]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b3b      	ldr	r3, [pc, #236]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 8007314:	4942      	ldr	r1, [pc, #264]	@ (8007420 <HAL_RCC_OscConfig+0xb00>)
 8007316:	400a      	ands	r2, r1
 8007318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731a:	f7fc f8f3 	bl	8003504 <HAL_GetTick>
 800731e:	0003      	movs	r3, r0
 8007320:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0xa16>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007324:	f7fc f8ee 	bl	8003504 <HAL_GetTick>
 8007328:	0002      	movs	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0xa16>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e060      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007336:	4b32      	ldr	r3, [pc, #200]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	2380      	movs	r3, #128	@ 0x80
 800733c:	049b      	lsls	r3, r3, #18
 800733e:	4013      	ands	r3, r2
 8007340:	d1f0      	bne.n	8007324 <HAL_RCC_OscConfig+0xa04>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007342:	4b2f      	ldr	r3, [pc, #188]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	4a37      	ldr	r2, [pc, #220]	@ (8007424 <HAL_RCC_OscConfig+0xb04>)
 8007348:	4013      	ands	r3, r2
 800734a:	0019      	movs	r1, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736e:	431a      	orrs	r2, r3
 8007370:	4b23      	ldr	r3, [pc, #140]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 8007372:	430a      	orrs	r2, r1
 8007374:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8007376:	4b22      	ldr	r3, [pc, #136]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	4b21      	ldr	r3, [pc, #132]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 800737c:	2180      	movs	r1, #128	@ 0x80
 800737e:	0549      	lsls	r1, r1, #21
 8007380:	430a      	orrs	r2, r1
 8007382:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007384:	4b1e      	ldr	r3, [pc, #120]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	4b1d      	ldr	r3, [pc, #116]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 800738a:	2180      	movs	r1, #128	@ 0x80
 800738c:	0449      	lsls	r1, r1, #17
 800738e:	430a      	orrs	r2, r1
 8007390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007392:	f7fc f8b7 	bl	8003504 <HAL_GetTick>
 8007396:	0003      	movs	r3, r0
 8007398:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800739a:	e008      	b.n	80073ae <HAL_RCC_OscConfig+0xa8e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800739c:	f7fc f8b2 	bl	8003504 <HAL_GetTick>
 80073a0:	0002      	movs	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_OscConfig+0xa8e>
          {
            return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e024      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073ae:	4b14      	ldr	r3, [pc, #80]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	2380      	movs	r3, #128	@ 0x80
 80073b4:	049b      	lsls	r3, r3, #18
 80073b6:	4013      	ands	r3, r2
 80073b8:	d0f0      	beq.n	800739c <HAL_RCC_OscConfig+0xa7c>
 80073ba:	e01c      	b.n	80073f6 <HAL_RCC_OscConfig+0xad6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073bc:	4b10      	ldr	r3, [pc, #64]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 80073c2:	4917      	ldr	r1, [pc, #92]	@ (8007420 <HAL_RCC_OscConfig+0xb00>)
 80073c4:	400a      	ands	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c8:	f7fc f89c 	bl	8003504 <HAL_GetTick>
 80073cc:	0003      	movs	r3, r0
 80073ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073d0:	e008      	b.n	80073e4 <HAL_RCC_OscConfig+0xac4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d2:	f7fc f897 	bl	8003504 <HAL_GetTick>
 80073d6:	0002      	movs	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0xac4>
          {
            return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e009      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073e4:	4b06      	ldr	r3, [pc, #24]	@ (8007400 <HAL_RCC_OscConfig+0xae0>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	2380      	movs	r3, #128	@ 0x80
 80073ea:	049b      	lsls	r3, r3, #18
 80073ec:	4013      	ands	r3, r2
 80073ee:	d1f0      	bne.n	80073d2 <HAL_RCC_OscConfig+0xab2>
 80073f0:	e001      	b.n	80073f6 <HAL_RCC_OscConfig+0xad6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <HAL_RCC_OscConfig+0xad8>
    }
  }
  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	0018      	movs	r0, r3
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b008      	add	sp, #32
 80073fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007400:	40021000 	.word	0x40021000
 8007404:	efffffff 	.word	0xefffffff
 8007408:	0000031e 	.word	0x0000031e
 800740c:	0800bd54 	.word	0x0800bd54
 8007410:	00000329 	.word	0x00000329
 8007414:	0000032a 	.word	0x0000032a
 8007418:	0000032b 	.word	0x0000032b
 800741c:	0000032d 	.word	0x0000032d
 8007420:	feffffff 	.word	0xfeffffff
 8007424:	11c1808c 	.word	0x11c1808c

08007428 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8007428:	b5b0      	push	{r4, r5, r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d106      	bne.n	8007446 <HAL_RCC_ClockConfig+0x1e>
 8007438:	23de      	movs	r3, #222	@ 0xde
 800743a:	009a      	lsls	r2, r3, #2
 800743c:	4bbb      	ldr	r3, [pc, #748]	@ (800772c <HAL_RCC_ClockConfig+0x304>)
 800743e:	0011      	movs	r1, r2
 8007440:	0018      	movs	r0, r3
 8007442:	f7fb feb9 	bl	80031b8 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE((uint8_t)RCC_ClkInitStruct->ClockType));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <HAL_RCC_ClockConfig+0x32>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b1f      	cmp	r3, #31
 8007458:	d905      	bls.n	8007466 <HAL_RCC_ClockConfig+0x3e>
 800745a:	4ab5      	ldr	r2, [pc, #724]	@ (8007730 <HAL_RCC_ClockConfig+0x308>)
 800745c:	4bb3      	ldr	r3, [pc, #716]	@ (800772c <HAL_RCC_ClockConfig+0x304>)
 800745e:	0011      	movs	r1, r2
 8007460:	0018      	movs	r0, r3
 8007462:	f7fb fea9 	bl	80031b8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <HAL_RCC_ClockConfig+0x5c>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d008      	beq.n	8007484 <HAL_RCC_ClockConfig+0x5c>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d005      	beq.n	8007484 <HAL_RCC_ClockConfig+0x5c>
 8007478:	4aae      	ldr	r2, [pc, #696]	@ (8007734 <HAL_RCC_ClockConfig+0x30c>)
 800747a:	4bac      	ldr	r3, [pc, #688]	@ (800772c <HAL_RCC_ClockConfig+0x304>)
 800747c:	0011      	movs	r1, r2
 800747e:	0018      	movs	r0, r3
 8007480:	f7fb fe9a 	bl	80031b8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007484:	4bac      	ldr	r3, [pc, #688]	@ (8007738 <HAL_RCC_ClockConfig+0x310>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2207      	movs	r2, #7
 800748a:	4013      	ands	r3, r2
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d911      	bls.n	80074b6 <HAL_RCC_ClockConfig+0x8e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007492:	4ba9      	ldr	r3, [pc, #676]	@ (8007738 <HAL_RCC_ClockConfig+0x310>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2207      	movs	r2, #7
 8007498:	4393      	bics	r3, r2
 800749a:	0019      	movs	r1, r3
 800749c:	4ba6      	ldr	r3, [pc, #664]	@ (8007738 <HAL_RCC_ClockConfig+0x310>)
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074a4:	4ba4      	ldr	r3, [pc, #656]	@ (8007738 <HAL_RCC_ClockConfig+0x310>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2207      	movs	r2, #7
 80074aa:	4013      	ands	r3, r2
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d001      	beq.n	80074b6 <HAL_RCC_ClockConfig+0x8e>
    {
      return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e136      	b.n	8007724 <HAL_RCC_ClockConfig+0x2fc>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2201      	movs	r2, #1
 80074bc:	4013      	ands	r3, r2
 80074be:	d100      	bne.n	80074c2 <HAL_RCC_ClockConfig+0x9a>
 80074c0:	e082      	b.n	80075c8 <HAL_RCC_ClockConfig+0x1a0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d019      	beq.n	80074fe <HAL_RCC_ClockConfig+0xd6>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d015      	beq.n	80074fe <HAL_RCC_ClockConfig+0xd6>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d011      	beq.n	80074fe <HAL_RCC_ClockConfig+0xd6>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d00d      	beq.n	80074fe <HAL_RCC_ClockConfig+0xd6>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d009      	beq.n	80074fe <HAL_RCC_ClockConfig+0xd6>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	d005      	beq.n	80074fe <HAL_RCC_ClockConfig+0xd6>
 80074f2:	4a92      	ldr	r2, [pc, #584]	@ (800773c <HAL_RCC_ClockConfig+0x314>)
 80074f4:	4b8d      	ldr	r3, [pc, #564]	@ (800772c <HAL_RCC_ClockConfig+0x304>)
 80074f6:	0011      	movs	r1, r2
 80074f8:	0018      	movs	r0, r3
 80074fa:	f7fb fe5d 	bl	80031b8 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2b03      	cmp	r3, #3
 8007504:	d107      	bne.n	8007516 <HAL_RCC_ClockConfig+0xee>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007506:	4b8e      	ldr	r3, [pc, #568]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	2380      	movs	r3, #128	@ 0x80
 800750c:	049b      	lsls	r3, r3, #18
 800750e:	4013      	ands	r3, r2
 8007510:	d138      	bne.n	8007584 <HAL_RCC_ClockConfig+0x15c>
      {
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e106      	b.n	8007724 <HAL_RCC_ClockConfig+0x2fc>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d107      	bne.n	800752e <HAL_RCC_ClockConfig+0x106>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800751e:	4b88      	ldr	r3, [pc, #544]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	2380      	movs	r3, #128	@ 0x80
 8007524:	029b      	lsls	r3, r3, #10
 8007526:	4013      	ands	r3, r2
 8007528:	d12c      	bne.n	8007584 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e0fa      	b.n	8007724 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <HAL_RCC_ClockConfig+0x11c>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007536:	4b82      	ldr	r3, [pc, #520]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2202      	movs	r2, #2
 800753c:	4013      	ands	r3, r2
 800753e:	d121      	bne.n	8007584 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e0ef      	b.n	8007724 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d107      	bne.n	800755c <HAL_RCC_ClockConfig+0x134>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800754c:	4b7c      	ldr	r3, [pc, #496]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	2380      	movs	r3, #128	@ 0x80
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	4013      	ands	r3, r2
 8007556:	d115      	bne.n	8007584 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e0e3      	b.n	8007724 <HAL_RCC_ClockConfig+0x2fc>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b04      	cmp	r3, #4
 8007562:	d107      	bne.n	8007574 <HAL_RCC_ClockConfig+0x14c>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007564:	4a76      	ldr	r2, [pc, #472]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 8007566:	2394      	movs	r3, #148	@ 0x94
 8007568:	58d3      	ldr	r3, [r2, r3]
 800756a:	2202      	movs	r2, #2
 800756c:	4013      	ands	r3, r2
 800756e:	d109      	bne.n	8007584 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e0d7      	b.n	8007724 <HAL_RCC_ClockConfig+0x2fc>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007574:	4a72      	ldr	r2, [pc, #456]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 8007576:	2390      	movs	r3, #144	@ 0x90
 8007578:	58d3      	ldr	r3, [r2, r3]
 800757a:	2202      	movs	r2, #2
 800757c:	4013      	ands	r3, r2
 800757e:	d101      	bne.n	8007584 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e0cf      	b.n	8007724 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007584:	4b6e      	ldr	r3, [pc, #440]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2207      	movs	r2, #7
 800758a:	4393      	bics	r3, r2
 800758c:	0019      	movs	r1, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	4b6b      	ldr	r3, [pc, #428]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 8007594:	430a      	orrs	r2, r1
 8007596:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007598:	f7fb ffb4 	bl	8003504 <HAL_GetTick>
 800759c:	0003      	movs	r3, r0
 800759e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075a0:	e009      	b.n	80075b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075a2:	f7fb ffaf 	bl	8003504 <HAL_GetTick>
 80075a6:	0002      	movs	r2, r0
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	4a65      	ldr	r2, [pc, #404]	@ (8007744 <HAL_RCC_ClockConfig+0x31c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e0b6      	b.n	8007724 <HAL_RCC_ClockConfig+0x2fc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075b6:	4b62      	ldr	r3, [pc, #392]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2238      	movs	r2, #56	@ 0x38
 80075bc:	401a      	ands	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d1ec      	bne.n	80075a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2202      	movs	r2, #2
 80075ce:	4013      	ands	r3, r2
 80075d0:	d044      	beq.n	800765c <HAL_RCC_ClockConfig+0x234>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d036      	beq.n	8007648 <HAL_RCC_ClockConfig+0x220>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	2380      	movs	r3, #128	@ 0x80
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d030      	beq.n	8007648 <HAL_RCC_ClockConfig+0x220>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	2390      	movs	r3, #144	@ 0x90
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d02a      	beq.n	8007648 <HAL_RCC_ClockConfig+0x220>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	23a0      	movs	r3, #160	@ 0xa0
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d024      	beq.n	8007648 <HAL_RCC_ClockConfig+0x220>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689a      	ldr	r2, [r3, #8]
 8007602:	23b0      	movs	r3, #176	@ 0xb0
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	429a      	cmp	r2, r3
 8007608:	d01e      	beq.n	8007648 <HAL_RCC_ClockConfig+0x220>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	23c0      	movs	r3, #192	@ 0xc0
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	429a      	cmp	r2, r3
 8007614:	d018      	beq.n	8007648 <HAL_RCC_ClockConfig+0x220>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689a      	ldr	r2, [r3, #8]
 800761a:	23d0      	movs	r3, #208	@ 0xd0
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	429a      	cmp	r2, r3
 8007620:	d012      	beq.n	8007648 <HAL_RCC_ClockConfig+0x220>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	23e0      	movs	r3, #224	@ 0xe0
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	429a      	cmp	r2, r3
 800762c:	d00c      	beq.n	8007648 <HAL_RCC_ClockConfig+0x220>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	23f0      	movs	r3, #240	@ 0xf0
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	429a      	cmp	r2, r3
 8007638:	d006      	beq.n	8007648 <HAL_RCC_ClockConfig+0x220>
 800763a:	23f8      	movs	r3, #248	@ 0xf8
 800763c:	009a      	lsls	r2, r3, #2
 800763e:	4b3b      	ldr	r3, [pc, #236]	@ (800772c <HAL_RCC_ClockConfig+0x304>)
 8007640:	0011      	movs	r1, r2
 8007642:	0018      	movs	r0, r3
 8007644:	f7fb fdb8 	bl	80031b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007648:	4b3d      	ldr	r3, [pc, #244]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	4a3e      	ldr	r2, [pc, #248]	@ (8007748 <HAL_RCC_ClockConfig+0x320>)
 800764e:	4013      	ands	r3, r2
 8007650:	0019      	movs	r1, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	4b3a      	ldr	r3, [pc, #232]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 8007658:	430a      	orrs	r2, r1
 800765a:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800765c:	4b36      	ldr	r3, [pc, #216]	@ (8007738 <HAL_RCC_ClockConfig+0x310>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2207      	movs	r2, #7
 8007662:	4013      	ands	r3, r2
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d211      	bcs.n	800768e <HAL_RCC_ClockConfig+0x266>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766a:	4b33      	ldr	r3, [pc, #204]	@ (8007738 <HAL_RCC_ClockConfig+0x310>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2207      	movs	r2, #7
 8007670:	4393      	bics	r3, r2
 8007672:	0019      	movs	r1, r3
 8007674:	4b30      	ldr	r3, [pc, #192]	@ (8007738 <HAL_RCC_ClockConfig+0x310>)
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800767c:	4b2e      	ldr	r3, [pc, #184]	@ (8007738 <HAL_RCC_ClockConfig+0x310>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2207      	movs	r2, #7
 8007682:	4013      	ands	r3, r2
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d001      	beq.n	800768e <HAL_RCC_ClockConfig+0x266>
    {
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e04a      	b.n	8007724 <HAL_RCC_ClockConfig+0x2fc>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2204      	movs	r2, #4
 8007694:	4013      	ands	r3, r2
 8007696:	d02b      	beq.n	80076f0 <HAL_RCC_ClockConfig+0x2c8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d01d      	beq.n	80076dc <HAL_RCC_ClockConfig+0x2b4>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	2380      	movs	r3, #128	@ 0x80
 80076a6:	01db      	lsls	r3, r3, #7
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d017      	beq.n	80076dc <HAL_RCC_ClockConfig+0x2b4>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	23a0      	movs	r3, #160	@ 0xa0
 80076b2:	01db      	lsls	r3, r3, #7
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d011      	beq.n	80076dc <HAL_RCC_ClockConfig+0x2b4>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	23c0      	movs	r3, #192	@ 0xc0
 80076be:	01db      	lsls	r3, r3, #7
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d00b      	beq.n	80076dc <HAL_RCC_ClockConfig+0x2b4>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	23e0      	movs	r3, #224	@ 0xe0
 80076ca:	01db      	lsls	r3, r3, #7
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d005      	beq.n	80076dc <HAL_RCC_ClockConfig+0x2b4>
 80076d0:	4a1e      	ldr	r2, [pc, #120]	@ (800774c <HAL_RCC_ClockConfig+0x324>)
 80076d2:	4b16      	ldr	r3, [pc, #88]	@ (800772c <HAL_RCC_ClockConfig+0x304>)
 80076d4:	0011      	movs	r1, r2
 80076d6:	0018      	movs	r0, r3
 80076d8:	f7fb fd6e 	bl	80031b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80076dc:	4b18      	ldr	r3, [pc, #96]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007750 <HAL_RCC_ClockConfig+0x328>)
 80076e2:	4013      	ands	r3, r2
 80076e4:	0019      	movs	r1, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	4b15      	ldr	r3, [pc, #84]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 80076ec:	430a      	orrs	r2, r1
 80076ee:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80076f0:	f000 f834 	bl	800775c <HAL_RCC_GetSysClockFreq>
 80076f4:	0001      	movs	r1, r0
 80076f6:	4b12      	ldr	r3, [pc, #72]	@ (8007740 <HAL_RCC_ClockConfig+0x318>)
 80076f8:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80076fa:	0a1b      	lsrs	r3, r3, #8
 80076fc:	220f      	movs	r2, #15
 80076fe:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007700:	4a14      	ldr	r2, [pc, #80]	@ (8007754 <HAL_RCC_ClockConfig+0x32c>)
 8007702:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007704:	001a      	movs	r2, r3
 8007706:	231f      	movs	r3, #31
 8007708:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800770a:	000a      	movs	r2, r1
 800770c:	40da      	lsrs	r2, r3
 800770e:	4b12      	ldr	r3, [pc, #72]	@ (8007758 <HAL_RCC_ClockConfig+0x330>)
 8007710:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8007712:	250b      	movs	r5, #11
 8007714:	197c      	adds	r4, r7, r5
 8007716:	2003      	movs	r0, #3
 8007718:	f7fb fe9a 	bl	8003450 <HAL_InitTick>
 800771c:	0003      	movs	r3, r0
 800771e:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8007720:	197b      	adds	r3, r7, r5
 8007722:	781b      	ldrb	r3, [r3, #0]
}
 8007724:	0018      	movs	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	b004      	add	sp, #16
 800772a:	bdb0      	pop	{r4, r5, r7, pc}
 800772c:	0800bd54 	.word	0x0800bd54
 8007730:	00000379 	.word	0x00000379
 8007734:	0000037a 	.word	0x0000037a
 8007738:	40022000 	.word	0x40022000
 800773c:	00000391 	.word	0x00000391
 8007740:	40021000 	.word	0x40021000
 8007744:	00001388 	.word	0x00001388
 8007748:	fffff0ff 	.word	0xfffff0ff
 800774c:	000003f5 	.word	0x000003f5
 8007750:	ffff8fff 	.word	0xffff8fff
 8007754:	0800bed0 	.word	0x0800bed0
 8007758:	20000010 	.word	0x20000010

0800775c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08a      	sub	sp, #40	@ 0x28
 8007760:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800776a:	4b46      	ldr	r3, [pc, #280]	@ (8007884 <HAL_RCC_GetSysClockFreq+0x128>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2238      	movs	r2, #56	@ 0x38
 8007770:	4013      	ands	r3, r2
 8007772:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007774:	4b43      	ldr	r3, [pc, #268]	@ (8007884 <HAL_RCC_GetSysClockFreq+0x128>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	2203      	movs	r2, #3
 800777a:	4013      	ands	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <HAL_RCC_GetSysClockFreq+0x34>
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	2b18      	cmp	r3, #24
 8007788:	d125      	bne.n	80077d6 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d122      	bne.n	80077d6 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007790:	4b3c      	ldr	r3, [pc, #240]	@ (8007884 <HAL_RCC_GetSysClockFreq+0x128>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2208      	movs	r2, #8
 8007796:	4013      	ands	r3, r2
 8007798:	d107      	bne.n	80077aa <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 800779a:	4a3a      	ldr	r2, [pc, #232]	@ (8007884 <HAL_RCC_GetSysClockFreq+0x128>)
 800779c:	2394      	movs	r3, #148	@ 0x94
 800779e:	58d3      	ldr	r3, [r2, r3]
 80077a0:	0a1b      	lsrs	r3, r3, #8
 80077a2:	220f      	movs	r2, #15
 80077a4:	4013      	ands	r3, r2
 80077a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80077a8:	e005      	b.n	80077b6 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80077aa:	4b36      	ldr	r3, [pc, #216]	@ (8007884 <HAL_RCC_GetSysClockFreq+0x128>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	091b      	lsrs	r3, r3, #4
 80077b0:	220f      	movs	r2, #15
 80077b2:	4013      	ands	r3, r2
 80077b4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b8:	2b0b      	cmp	r3, #11
 80077ba:	d901      	bls.n	80077c0 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 80077c0:	4b31      	ldr	r3, [pc, #196]	@ (8007888 <HAL_RCC_GetSysClockFreq+0x12c>)
 80077c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c4:	0092      	lsls	r2, r2, #2
 80077c6:	58d3      	ldr	r3, [r2, r3]
 80077c8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d11b      	bne.n	8007808 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80077d4:	e018      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d102      	bne.n	80077e2 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077dc:	4b2b      	ldr	r3, [pc, #172]	@ (800788c <HAL_RCC_GetSysClockFreq+0x130>)
 80077de:	623b      	str	r3, [r7, #32]
 80077e0:	e012      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2b10      	cmp	r3, #16
 80077e6:	d102      	bne.n	80077ee <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80077e8:	4b29      	ldr	r3, [pc, #164]	@ (8007890 <HAL_RCC_GetSysClockFreq+0x134>)
 80077ea:	623b      	str	r3, [r7, #32]
 80077ec:	e00c      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d103      	bne.n	80077fc <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80077f4:	23fa      	movs	r3, #250	@ 0xfa
 80077f6:	01db      	lsls	r3, r3, #7
 80077f8:	623b      	str	r3, [r7, #32]
 80077fa:	e005      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	2b28      	cmp	r3, #40	@ 0x28
 8007800:	d102      	bne.n	8007808 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007802:	2380      	movs	r3, #128	@ 0x80
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	2b18      	cmp	r3, #24
 800780c:	d135      	bne.n	800787a <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800780e:	4b1d      	ldr	r3, [pc, #116]	@ (8007884 <HAL_RCC_GetSysClockFreq+0x128>)
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	2203      	movs	r2, #3
 8007814:	4013      	ands	r3, r2
 8007816:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007818:	4b1a      	ldr	r3, [pc, #104]	@ (8007884 <HAL_RCC_GetSysClockFreq+0x128>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	091b      	lsrs	r3, r3, #4
 800781e:	2207      	movs	r2, #7
 8007820:	4013      	ands	r3, r2
 8007822:	3301      	adds	r3, #1
 8007824:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	2b02      	cmp	r3, #2
 800782a:	d003      	beq.n	8007834 <HAL_RCC_GetSysClockFreq+0xd8>
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	2b03      	cmp	r3, #3
 8007830:	d003      	beq.n	800783a <HAL_RCC_GetSysClockFreq+0xde>
 8007832:	e005      	b.n	8007840 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8007834:	4b15      	ldr	r3, [pc, #84]	@ (800788c <HAL_RCC_GetSysClockFreq+0x130>)
 8007836:	61fb      	str	r3, [r7, #28]
        break;
 8007838:	e005      	b.n	8007846 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 800783a:	4b15      	ldr	r3, [pc, #84]	@ (8007890 <HAL_RCC_GetSysClockFreq+0x134>)
 800783c:	61fb      	str	r3, [r7, #28]
        break;
 800783e:	e002      	b.n	8007846 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	61fb      	str	r3, [r7, #28]
        break;
 8007844:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8007846:	4b0f      	ldr	r3, [pc, #60]	@ (8007884 <HAL_RCC_GetSysClockFreq+0x128>)
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	0a1b      	lsrs	r3, r3, #8
 800784c:	227f      	movs	r2, #127	@ 0x7f
 800784e:	4013      	ands	r3, r2
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	4353      	muls	r3, r2
 8007854:	68f9      	ldr	r1, [r7, #12]
 8007856:	0018      	movs	r0, r3
 8007858:	f7f8 fc56 	bl	8000108 <__udivsi3>
 800785c:	0003      	movs	r3, r0
 800785e:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007860:	4b08      	ldr	r3, [pc, #32]	@ (8007884 <HAL_RCC_GetSysClockFreq+0x128>)
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	0f5b      	lsrs	r3, r3, #29
 8007866:	2207      	movs	r2, #7
 8007868:	4013      	ands	r3, r2
 800786a:	3301      	adds	r3, #1
 800786c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	68b8      	ldr	r0, [r7, #8]
 8007872:	f7f8 fc49 	bl	8000108 <__udivsi3>
 8007876:	0003      	movs	r3, r0
 8007878:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800787a:	6a3b      	ldr	r3, [r7, #32]
}
 800787c:	0018      	movs	r0, r3
 800787e:	46bd      	mov	sp, r7
 8007880:	b00a      	add	sp, #40	@ 0x28
 8007882:	bd80      	pop	{r7, pc}
 8007884:	40021000 	.word	0x40021000
 8007888:	0800bee0 	.word	0x0800bee0
 800788c:	00f42400 	.word	0x00f42400
 8007890:	007a1200 	.word	0x007a1200

08007894 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800789c:	2300      	movs	r3, #0
 800789e:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80078a0:	4b2f      	ldr	r3, [pc, #188]	@ (8007960 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80078a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80078a4:	2380      	movs	r3, #128	@ 0x80
 80078a6:	055b      	lsls	r3, r3, #21
 80078a8:	4013      	ands	r3, r2
 80078aa:	d004      	beq.n	80078b6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80078ac:	f7ff f82c 	bl	8006908 <HAL_PWREx_GetVoltageRange>
 80078b0:	0003      	movs	r3, r0
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	e017      	b.n	80078e6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80078b6:	4b2a      	ldr	r3, [pc, #168]	@ (8007960 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80078b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80078ba:	4b29      	ldr	r3, [pc, #164]	@ (8007960 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80078bc:	2180      	movs	r1, #128	@ 0x80
 80078be:	0549      	lsls	r1, r1, #21
 80078c0:	430a      	orrs	r2, r1
 80078c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80078c4:	4b26      	ldr	r3, [pc, #152]	@ (8007960 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80078c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80078c8:	2380      	movs	r3, #128	@ 0x80
 80078ca:	055b      	lsls	r3, r3, #21
 80078cc:	4013      	ands	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80078d2:	f7ff f819 	bl	8006908 <HAL_PWREx_GetVoltageRange>
 80078d6:	0003      	movs	r3, r0
 80078d8:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80078da:	4b21      	ldr	r3, [pc, #132]	@ (8007960 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80078dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80078de:	4b20      	ldr	r3, [pc, #128]	@ (8007960 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80078e0:	4920      	ldr	r1, [pc, #128]	@ (8007964 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80078e2:	400a      	ands	r2, r1
 80078e4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	2380      	movs	r3, #128	@ 0x80
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d111      	bne.n	8007914 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b80      	cmp	r3, #128	@ 0x80
 80078f4:	d91c      	bls.n	8007930 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2bb0      	cmp	r3, #176	@ 0xb0
 80078fa:	d902      	bls.n	8007902 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80078fc:	2302      	movs	r3, #2
 80078fe:	613b      	str	r3, [r7, #16]
 8007900:	e016      	b.n	8007930 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b90      	cmp	r3, #144	@ 0x90
 8007906:	d902      	bls.n	800790e <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007908:	2301      	movs	r3, #1
 800790a:	613b      	str	r3, [r7, #16]
 800790c:	e010      	b.n	8007930 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 800790e:	2300      	movs	r3, #0
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	e00d      	b.n	8007930 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b7f      	cmp	r3, #127	@ 0x7f
 8007918:	d902      	bls.n	8007920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 800791a:	2302      	movs	r3, #2
 800791c:	613b      	str	r3, [r7, #16]
 800791e:	e007      	b.n	8007930 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b70      	cmp	r3, #112	@ 0x70
 8007924:	d102      	bne.n	800792c <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007926:	2301      	movs	r3, #1
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	e001      	b.n	8007930 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800792c:	2300      	movs	r3, #0
 800792e:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007930:	4b0d      	ldr	r3, [pc, #52]	@ (8007968 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2207      	movs	r2, #7
 8007936:	4393      	bics	r3, r2
 8007938:	0019      	movs	r1, r3
 800793a:	4b0b      	ldr	r3, [pc, #44]	@ (8007968 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	430a      	orrs	r2, r1
 8007940:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007942:	4b09      	ldr	r3, [pc, #36]	@ (8007968 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2207      	movs	r2, #7
 8007948:	4013      	ands	r3, r2
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	429a      	cmp	r2, r3
 800794e:	d001      	beq.n	8007954 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e000      	b.n	8007956 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	0018      	movs	r0, r3
 8007958:	46bd      	mov	sp, r7
 800795a:	b006      	add	sp, #24
 800795c:	bd80      	pop	{r7, pc}
 800795e:	46c0      	nop			@ (mov r8, r8)
 8007960:	40021000 	.word	0x40021000
 8007964:	efffffff 	.word	0xefffffff
 8007968:	40022000 	.word	0x40022000

0800796c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007974:	2313      	movs	r3, #19
 8007976:	18fb      	adds	r3, r7, r3
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800797c:	2312      	movs	r3, #18
 800797e:	18fb      	adds	r3, r7, r3
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a66      	ldr	r2, [pc, #408]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800798a:	4013      	ands	r3, r2
 800798c:	d004      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a65      	ldr	r2, [pc, #404]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007994:	4013      	ands	r3, r2
 8007996:	d004      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8007998:	4b64      	ldr	r3, [pc, #400]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800799a:	217a      	movs	r1, #122	@ 0x7a
 800799c:	0018      	movs	r0, r3
 800799e:	f7fb fc0b 	bl	80031b8 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	2380      	movs	r3, #128	@ 0x80
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	4013      	ands	r3, r2
 80079ac:	d100      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80079ae:	e0da      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079b0:	2311      	movs	r3, #17
 80079b2:	18fb      	adds	r3, r7, r3
 80079b4:	2200      	movs	r2, #0
 80079b6:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d016      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x82>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079c4:	2380      	movs	r3, #128	@ 0x80
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d010      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x82>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079d0:	2380      	movs	r3, #128	@ 0x80
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d00a      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x82>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079dc:	23c0      	movs	r3, #192	@ 0xc0
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d004      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x82>
 80079e4:	4b51      	ldr	r3, [pc, #324]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80079e6:	2182      	movs	r1, #130	@ 0x82
 80079e8:	0018      	movs	r0, r3
 80079ea:	f7fb fbe5 	bl	80031b8 <assert_failed>

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ee:	4b50      	ldr	r3, [pc, #320]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80079f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80079f2:	2380      	movs	r3, #128	@ 0x80
 80079f4:	055b      	lsls	r3, r3, #21
 80079f6:	4013      	ands	r3, r2
 80079f8:	d111      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079fa:	4b4d      	ldr	r3, [pc, #308]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80079fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80079fe:	4b4c      	ldr	r3, [pc, #304]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007a00:	2180      	movs	r1, #128	@ 0x80
 8007a02:	0549      	lsls	r1, r1, #21
 8007a04:	430a      	orrs	r2, r1
 8007a06:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a08:	4b49      	ldr	r3, [pc, #292]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007a0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a0c:	2380      	movs	r3, #128	@ 0x80
 8007a0e:	055b      	lsls	r3, r3, #21
 8007a10:	4013      	ands	r3, r2
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a16:	2311      	movs	r3, #17
 8007a18:	18fb      	adds	r3, r7, r3
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a1e:	4b45      	ldr	r3, [pc, #276]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4b44      	ldr	r3, [pc, #272]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007a24:	2180      	movs	r1, #128	@ 0x80
 8007a26:	0049      	lsls	r1, r1, #1
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a2c:	f7fb fd6a 	bl	8003504 <HAL_GetTick>
 8007a30:	0003      	movs	r3, r0
 8007a32:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a34:	e00b      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a36:	f7fb fd65 	bl	8003504 <HAL_GetTick>
 8007a3a:	0002      	movs	r2, r0
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d904      	bls.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
      {
        ret = HAL_TIMEOUT;
 8007a44:	2313      	movs	r3, #19
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	2203      	movs	r2, #3
 8007a4a:	701a      	strb	r2, [r3, #0]
        break;
 8007a4c:	e005      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xee>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a4e:	4b39      	ldr	r3, [pc, #228]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	2380      	movs	r3, #128	@ 0x80
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	4013      	ands	r3, r2
 8007a58:	d0ed      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xca>
      }
    }

    if (ret == HAL_OK)
 8007a5a:	2313      	movs	r3, #19
 8007a5c:	18fb      	adds	r3, r7, r3
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d000      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007a64:	e06e      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a66:	4a32      	ldr	r2, [pc, #200]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007a68:	2390      	movs	r3, #144	@ 0x90
 8007a6a:	58d2      	ldr	r2, [r2, r3]
 8007a6c:	23c0      	movs	r3, #192	@ 0xc0
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4013      	ands	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01f      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d01a      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a84:	4a2a      	ldr	r2, [pc, #168]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007a86:	2390      	movs	r3, #144	@ 0x90
 8007a88:	58d3      	ldr	r3, [r2, r3]
 8007a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a90:	4a27      	ldr	r2, [pc, #156]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007a92:	2390      	movs	r3, #144	@ 0x90
 8007a94:	58d3      	ldr	r3, [r2, r3]
 8007a96:	4926      	ldr	r1, [pc, #152]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007a98:	2280      	movs	r2, #128	@ 0x80
 8007a9a:	0252      	lsls	r2, r2, #9
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	2290      	movs	r2, #144	@ 0x90
 8007aa0:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007aa2:	4a23      	ldr	r2, [pc, #140]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007aa4:	2390      	movs	r3, #144	@ 0x90
 8007aa6:	58d3      	ldr	r3, [r2, r3]
 8007aa8:	4921      	ldr	r1, [pc, #132]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007aaa:	4a24      	ldr	r2, [pc, #144]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	2290      	movs	r2, #144	@ 0x90
 8007ab0:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ab2:	491f      	ldr	r1, [pc, #124]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007ab4:	2290      	movs	r2, #144	@ 0x90
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2201      	movs	r2, #1
 8007abe:	4013      	ands	r3, r2
 8007ac0:	d017      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac2:	f7fb fd1f 	bl	8003504 <HAL_GetTick>
 8007ac6:	0003      	movs	r3, r0
 8007ac8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007aca:	e00c      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007acc:	f7fb fd1a 	bl	8003504 <HAL_GetTick>
 8007ad0:	0002      	movs	r2, r0
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d904      	bls.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            ret = HAL_TIMEOUT;
 8007adc:	2313      	movs	r3, #19
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	701a      	strb	r2, [r3, #0]
            break;
 8007ae4:	e005      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ae6:	4a12      	ldr	r2, [pc, #72]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007ae8:	2390      	movs	r3, #144	@ 0x90
 8007aea:	58d3      	ldr	r3, [r2, r3]
 8007aec:	2202      	movs	r2, #2
 8007aee:	4013      	ands	r3, r2
 8007af0:	d0ec      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if (ret == HAL_OK)
 8007af2:	2313      	movs	r3, #19
 8007af4:	18fb      	adds	r3, r7, r3
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10b      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007afc:	4a0c      	ldr	r2, [pc, #48]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007afe:	2390      	movs	r3, #144	@ 0x90
 8007b00:	58d3      	ldr	r3, [r2, r3]
 8007b02:	4a0d      	ldr	r2, [pc, #52]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b04:	401a      	ands	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b0a:	4909      	ldr	r1, [pc, #36]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	2290      	movs	r2, #144	@ 0x90
 8007b10:	508b      	str	r3, [r1, r2]
 8007b12:	e01d      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b14:	2312      	movs	r3, #18
 8007b16:	18fb      	adds	r3, r7, r3
 8007b18:	2213      	movs	r2, #19
 8007b1a:	18ba      	adds	r2, r7, r2
 8007b1c:	7812      	ldrb	r2, [r2, #0]
 8007b1e:	701a      	strb	r2, [r3, #0]
 8007b20:	e016      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	0003edfb 	.word	0x0003edfb
 8007b28:	fffc1204 	.word	0xfffc1204
 8007b2c:	0800bd8c 	.word	0x0800bd8c
 8007b30:	40021000 	.word	0x40021000
 8007b34:	40007000 	.word	0x40007000
 8007b38:	fffffcff 	.word	0xfffffcff
 8007b3c:	fffeffff 	.word	0xfffeffff
 8007b40:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b44:	2312      	movs	r3, #18
 8007b46:	18fb      	adds	r3, r7, r3
 8007b48:	2213      	movs	r2, #19
 8007b4a:	18ba      	adds	r2, r7, r2
 8007b4c:	7812      	ldrb	r2, [r2, #0]
 8007b4e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b50:	2311      	movs	r3, #17
 8007b52:	18fb      	adds	r3, r7, r3
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d105      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b5a:	4bc5      	ldr	r3, [pc, #788]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b5e:	4bc4      	ldr	r3, [pc, #784]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b60:	49c4      	ldr	r1, [pc, #784]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8007b62:	400a      	ands	r2, r1
 8007b64:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	d020      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d010      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d00c      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d008      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d004      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8007b90:	4bb9      	ldr	r3, [pc, #740]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007b92:	21d7      	movs	r1, #215	@ 0xd7
 8007b94:	0018      	movs	r0, r3
 8007b96:	f7fb fb0f 	bl	80031b8 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b9a:	4ab5      	ldr	r2, [pc, #724]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b9c:	2388      	movs	r3, #136	@ 0x88
 8007b9e:	58d3      	ldr	r3, [r2, r3]
 8007ba0:	2203      	movs	r2, #3
 8007ba2:	4393      	bics	r3, r2
 8007ba4:	001a      	movs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	49b1      	ldr	r1, [pc, #708]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	2288      	movs	r2, #136	@ 0x88
 8007bb0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	4013      	ands	r3, r2
 8007bba:	d020      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d010      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d00c      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d008      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b0c      	cmp	r3, #12
 8007bda:	d004      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8007bdc:	4ba6      	ldr	r3, [pc, #664]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007bde:	21e1      	movs	r1, #225	@ 0xe1
 8007be0:	0018      	movs	r0, r3
 8007be2:	f7fb fae9 	bl	80031b8 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007be6:	4aa2      	ldr	r2, [pc, #648]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007be8:	2388      	movs	r3, #136	@ 0x88
 8007bea:	58d3      	ldr	r3, [r2, r3]
 8007bec:	220c      	movs	r2, #12
 8007bee:	4393      	bics	r3, r2
 8007bf0:	001a      	movs	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	499e      	ldr	r1, [pc, #632]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	2288      	movs	r2, #136	@ 0x88
 8007bfc:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2210      	movs	r2, #16
 8007c04:	4013      	ands	r3, r2
 8007c06:	d025      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d016      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	2380      	movs	r3, #128	@ 0x80
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d010      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	2380      	movs	r3, #128	@ 0x80
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d00a      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691a      	ldr	r2, [r3, #16]
 8007c2c:	23c0      	movs	r3, #192	@ 0xc0
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d004      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007c34:	4b90      	ldr	r3, [pc, #576]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007c36:	21eb      	movs	r1, #235	@ 0xeb
 8007c38:	0018      	movs	r0, r3
 8007c3a:	f7fb fabd 	bl	80031b8 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c3e:	4a8c      	ldr	r2, [pc, #560]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007c40:	2388      	movs	r3, #136	@ 0x88
 8007c42:	58d3      	ldr	r3, [r2, r3]
 8007c44:	4a8d      	ldr	r2, [pc, #564]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8007c46:	401a      	ands	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	4988      	ldr	r1, [pc, #544]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	2288      	movs	r2, #136	@ 0x88
 8007c52:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2208      	movs	r2, #8
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	d025      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d016      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	2380      	movs	r3, #128	@ 0x80
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d010      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	2380      	movs	r3, #128	@ 0x80
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d00a      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	23c0      	movs	r3, #192	@ 0xc0
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d004      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007c8c:	21f5      	movs	r1, #245	@ 0xf5
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f7fb fa92 	bl	80031b8 <assert_failed>

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8007c94:	4a76      	ldr	r2, [pc, #472]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007c96:	2388      	movs	r3, #136	@ 0x88
 8007c98:	58d3      	ldr	r3, [r2, r3]
 8007c9a:	4a79      	ldr	r2, [pc, #484]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c9c:	401a      	ands	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	4973      	ldr	r1, [pc, #460]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	2288      	movs	r2, #136	@ 0x88
 8007ca8:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	d022      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d013      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	695a      	ldr	r2, [r3, #20]
 8007cc0:	2380      	movs	r3, #128	@ 0x80
 8007cc2:	015b      	lsls	r3, r3, #5
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d00d      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	695a      	ldr	r2, [r3, #20]
 8007ccc:	2380      	movs	r3, #128	@ 0x80
 8007cce:	019b      	lsls	r3, r3, #6
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d007      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007cd4:	230a      	movs	r3, #10
 8007cd6:	33ff      	adds	r3, #255	@ 0xff
 8007cd8:	001a      	movs	r2, r3
 8007cda:	4b67      	ldr	r3, [pc, #412]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007cdc:	0011      	movs	r1, r2
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f7fb fa6a 	bl	80031b8 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ce4:	4a62      	ldr	r2, [pc, #392]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ce6:	2388      	movs	r3, #136	@ 0x88
 8007ce8:	58d3      	ldr	r3, [r2, r3]
 8007cea:	4a66      	ldr	r2, [pc, #408]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8007cec:	401a      	ands	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	495f      	ldr	r1, [pc, #380]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	2288      	movs	r2, #136	@ 0x88
 8007cf8:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2240      	movs	r2, #64	@ 0x40
 8007d00:	4013      	ands	r3, r2
 8007d02:	d022      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x3de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d013      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699a      	ldr	r2, [r3, #24]
 8007d10:	2380      	movs	r3, #128	@ 0x80
 8007d12:	025b      	lsls	r3, r3, #9
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d00d      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	699a      	ldr	r2, [r3, #24]
 8007d1c:	2380      	movs	r3, #128	@ 0x80
 8007d1e:	029b      	lsls	r3, r3, #10
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d007      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007d24:	2314      	movs	r3, #20
 8007d26:	33ff      	adds	r3, #255	@ 0xff
 8007d28:	001a      	movs	r2, r3
 8007d2a:	4b53      	ldr	r3, [pc, #332]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d2c:	0011      	movs	r1, r2
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f7fb fa42 	bl	80031b8 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d34:	4a4e      	ldr	r2, [pc, #312]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d36:	2388      	movs	r3, #136	@ 0x88
 8007d38:	58d3      	ldr	r3, [r2, r3]
 8007d3a:	4a53      	ldr	r2, [pc, #332]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8007d3c:	401a      	ands	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	494b      	ldr	r1, [pc, #300]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	2288      	movs	r2, #136	@ 0x88
 8007d48:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2280      	movs	r2, #128	@ 0x80
 8007d50:	4013      	ands	r3, r2
 8007d52:	d027      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d018      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x422>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	69da      	ldr	r2, [r3, #28]
 8007d60:	2380      	movs	r3, #128	@ 0x80
 8007d62:	031b      	lsls	r3, r3, #12
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d012      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x422>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	2380      	movs	r3, #128	@ 0x80
 8007d6e:	02db      	lsls	r3, r3, #11
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d00c      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x422>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	69da      	ldr	r2, [r3, #28]
 8007d78:	23c0      	movs	r3, #192	@ 0xc0
 8007d7a:	031b      	lsls	r3, r3, #12
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d006      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x422>
 8007d80:	238e      	movs	r3, #142	@ 0x8e
 8007d82:	005a      	lsls	r2, r3, #1
 8007d84:	4b3c      	ldr	r3, [pc, #240]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d86:	0011      	movs	r1, r2
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f7fb fa15 	bl	80031b8 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d8e:	4a38      	ldr	r2, [pc, #224]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d90:	2388      	movs	r3, #136	@ 0x88
 8007d92:	58d3      	ldr	r3, [r2, r3]
 8007d94:	4a3d      	ldr	r2, [pc, #244]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8007d96:	401a      	ands	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	4934      	ldr	r1, [pc, #208]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	2288      	movs	r2, #136	@ 0x88
 8007da2:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	2380      	movs	r3, #128	@ 0x80
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	4013      	ands	r3, r2
 8007dae:	d028      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x496>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d019      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a1a      	ldr	r2, [r3, #32]
 8007dbc:	2380      	movs	r3, #128	@ 0x80
 8007dbe:	039b      	lsls	r3, r3, #14
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d013      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a1a      	ldr	r2, [r3, #32]
 8007dc8:	2380      	movs	r3, #128	@ 0x80
 8007dca:	035b      	lsls	r3, r3, #13
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d00d      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a1a      	ldr	r2, [r3, #32]
 8007dd4:	23c0      	movs	r3, #192	@ 0xc0
 8007dd6:	039b      	lsls	r3, r3, #14
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d007      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007ddc:	2324      	movs	r3, #36	@ 0x24
 8007dde:	33ff      	adds	r3, #255	@ 0xff
 8007de0:	001a      	movs	r2, r3
 8007de2:	4b25      	ldr	r3, [pc, #148]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007de4:	0011      	movs	r1, r2
 8007de6:	0018      	movs	r0, r3
 8007de8:	f7fb f9e6 	bl	80031b8 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dec:	4a20      	ldr	r2, [pc, #128]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007dee:	2388      	movs	r3, #136	@ 0x88
 8007df0:	58d3      	ldr	r3, [r2, r3]
 8007df2:	4a27      	ldr	r2, [pc, #156]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8007df4:	401a      	ands	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	491d      	ldr	r1, [pc, #116]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	2288      	movs	r2, #136	@ 0x88
 8007e00:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	2380      	movs	r3, #128	@ 0x80
 8007e08:	01db      	lsls	r3, r3, #7
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d044      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d012      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e1a:	2380      	movs	r3, #128	@ 0x80
 8007e1c:	055b      	lsls	r3, r3, #21
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d00c      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e26:	2380      	movs	r3, #128	@ 0x80
 8007e28:	059b      	lsls	r3, r3, #22
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d006      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007e2e:	2399      	movs	r3, #153	@ 0x99
 8007e30:	005a      	lsls	r2, r3, #1
 8007e32:	4b11      	ldr	r3, [pc, #68]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e34:	0011      	movs	r1, r2
 8007e36:	0018      	movs	r0, r3
 8007e38:	f7fb f9be 	bl	80031b8 <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e40:	2380      	movs	r3, #128	@ 0x80
 8007e42:	055b      	lsls	r3, r3, #21
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d106      	bne.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8007e48:	4b09      	ldr	r3, [pc, #36]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	4b08      	ldr	r3, [pc, #32]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e4e:	2180      	movs	r1, #128	@ 0x80
 8007e50:	0249      	lsls	r1, r1, #9
 8007e52:	430a      	orrs	r2, r1
 8007e54:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e56:	4a06      	ldr	r2, [pc, #24]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e58:	2388      	movs	r3, #136	@ 0x88
 8007e5a:	58d3      	ldr	r3, [r2, r3]
 8007e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8007e5e:	401a      	ands	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e64:	4902      	ldr	r1, [pc, #8]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	2288      	movs	r2, #136	@ 0x88
 8007e6a:	508b      	str	r3, [r1, r2]
 8007e6c:	e014      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007e6e:	46c0      	nop			@ (mov r8, r8)
 8007e70:	40021000 	.word	0x40021000
 8007e74:	efffffff 	.word	0xefffffff
 8007e78:	0800bd8c 	.word	0x0800bd8c
 8007e7c:	fffff3ff 	.word	0xfffff3ff
 8007e80:	fffffcff 	.word	0xfffffcff
 8007e84:	ffffcfff 	.word	0xffffcfff
 8007e88:	fffcffff 	.word	0xfffcffff
 8007e8c:	fff3ffff 	.word	0xfff3ffff
 8007e90:	ffcfffff 	.word	0xffcfffff
 8007e94:	cfffffff 	.word	0xcfffffff
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	2380      	movs	r3, #128	@ 0x80
 8007e9e:	019b      	lsls	r3, r3, #6
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	d035      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d019      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb0:	2380      	movs	r3, #128	@ 0x80
 8007eb2:	04db      	lsls	r3, r3, #19
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d013      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ebc:	2380      	movs	r3, #128	@ 0x80
 8007ebe:	051b      	lsls	r3, r3, #20
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d00d      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec8:	23c0      	movs	r3, #192	@ 0xc0
 8007eca:	051b      	lsls	r3, r3, #20
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d007      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8007ed0:	234e      	movs	r3, #78	@ 0x4e
 8007ed2:	33ff      	adds	r3, #255	@ 0xff
 8007ed4:	001a      	movs	r2, r3
 8007ed6:	4b41      	ldr	r3, [pc, #260]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x670>)
 8007ed8:	0011      	movs	r1, r2
 8007eda:	0018      	movs	r0, r3
 8007edc:	f7fb f96c 	bl	80031b8 <assert_failed>
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee4:	2380      	movs	r3, #128	@ 0x80
 8007ee6:	051b      	lsls	r3, r3, #20
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d106      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x58e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007eec:	4b3c      	ldr	r3, [pc, #240]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007ef2:	2180      	movs	r1, #128	@ 0x80
 8007ef4:	0449      	lsls	r1, r1, #17
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007efa:	4a39      	ldr	r2, [pc, #228]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007efc:	2388      	movs	r3, #136	@ 0x88
 8007efe:	58d3      	ldr	r3, [r2, r3]
 8007f00:	4a38      	ldr	r2, [pc, #224]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8007f02:	401a      	ands	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f08:	4935      	ldr	r1, [pc, #212]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	2288      	movs	r2, #136	@ 0x88
 8007f0e:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	2380      	movs	r3, #128	@ 0x80
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	4013      	ands	r3, r2
 8007f1a:	d029      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00d      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f28:	2380      	movs	r3, #128	@ 0x80
 8007f2a:	045b      	lsls	r3, r3, #17
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d007      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007f30:	235c      	movs	r3, #92	@ 0x5c
 8007f32:	33ff      	adds	r3, #255	@ 0xff
 8007f34:	001a      	movs	r2, r3
 8007f36:	4b29      	ldr	r3, [pc, #164]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x670>)
 8007f38:	0011      	movs	r1, r2
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f7fb f93c 	bl	80031b8 <assert_failed>
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f44:	2380      	movs	r3, #128	@ 0x80
 8007f46:	045b      	lsls	r3, r3, #17
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d106      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007f4c:	4b24      	ldr	r3, [pc, #144]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007f4e:	68da      	ldr	r2, [r3, #12]
 8007f50:	4b23      	ldr	r3, [pc, #140]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007f52:	2180      	movs	r1, #128	@ 0x80
 8007f54:	0449      	lsls	r1, r1, #17
 8007f56:	430a      	orrs	r2, r1
 8007f58:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007f5a:	4a21      	ldr	r2, [pc, #132]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007f5c:	2388      	movs	r3, #136	@ 0x88
 8007f5e:	58d3      	ldr	r3, [r2, r3]
 8007f60:	4a21      	ldr	r2, [pc, #132]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8007f62:	401a      	ands	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	491d      	ldr	r1, [pc, #116]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	2288      	movs	r2, #136	@ 0x88
 8007f6e:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	2380      	movs	r3, #128	@ 0x80
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	4013      	ands	r3, r2
 8007f7a:	d028      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x662>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00c      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f88:	2380      	movs	r3, #128	@ 0x80
 8007f8a:	049b      	lsls	r3, r3, #18
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d006      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8007f90:	23b4      	movs	r3, #180	@ 0xb4
 8007f92:	005a      	lsls	r2, r3, #1
 8007f94:	4b11      	ldr	r3, [pc, #68]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x670>)
 8007f96:	0011      	movs	r1, r2
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f7fb f90d 	bl	80031b8 <assert_failed>
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007fa2:	2380      	movs	r3, #128	@ 0x80
 8007fa4:	049b      	lsls	r3, r3, #18
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d106      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007faa:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007fac:	68da      	ldr	r2, [r3, #12]
 8007fae:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007fb0:	2180      	movs	r1, #128	@ 0x80
 8007fb2:	0449      	lsls	r1, r1, #17
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007fb8:	4a09      	ldr	r2, [pc, #36]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007fba:	2388      	movs	r3, #136	@ 0x88
 8007fbc:	58d3      	ldr	r3, [r2, r3]
 8007fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8007fc0:	401a      	ands	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc6:	4906      	ldr	r1, [pc, #24]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	2288      	movs	r2, #136	@ 0x88
 8007fcc:	508b      	str	r3, [r1, r2]

  }

  return status;
 8007fce:	2312      	movs	r3, #18
 8007fd0:	18fb      	adds	r3, r7, r3
 8007fd2:	781b      	ldrb	r3, [r3, #0]
}
 8007fd4:	0018      	movs	r0, r3
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	b006      	add	sp, #24
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	0800bd8c 	.word	0x0800bd8c
 8007fe0:	40021000 	.word	0x40021000
 8007fe4:	f3ffffff 	.word	0xf3ffffff
 8007fe8:	feffffff 	.word	0xfeffffff

08007fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e215      	b.n	800842a <HAL_SPI_Init+0x43e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4aa9      	ldr	r2, [pc, #676]	@ (80082a8 <HAL_SPI_Init+0x2bc>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00c      	beq.n	8008022 <HAL_SPI_Init+0x36>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4aa7      	ldr	r2, [pc, #668]	@ (80082ac <HAL_SPI_Init+0x2c0>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d007      	beq.n	8008022 <HAL_SPI_Init+0x36>
 8008012:	2346      	movs	r3, #70	@ 0x46
 8008014:	33ff      	adds	r3, #255	@ 0xff
 8008016:	001a      	movs	r2, r3
 8008018:	4ba5      	ldr	r3, [pc, #660]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 800801a:	0011      	movs	r1, r2
 800801c:	0018      	movs	r0, r3
 800801e:	f7fb f8cb 	bl	80031b8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00c      	beq.n	8008044 <HAL_SPI_Init+0x58>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	2382      	movs	r3, #130	@ 0x82
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	429a      	cmp	r2, r3
 8008034:	d006      	beq.n	8008044 <HAL_SPI_Init+0x58>
 8008036:	23a3      	movs	r3, #163	@ 0xa3
 8008038:	005a      	lsls	r2, r3, #1
 800803a:	4b9d      	ldr	r3, [pc, #628]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 800803c:	0011      	movs	r1, r2
 800803e:	0018      	movs	r0, r3
 8008040:	f7fb f8ba 	bl	80031b8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d013      	beq.n	8008074 <HAL_SPI_Init+0x88>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	2380      	movs	r3, #128	@ 0x80
 8008052:	00db      	lsls	r3, r3, #3
 8008054:	429a      	cmp	r2, r3
 8008056:	d00d      	beq.n	8008074 <HAL_SPI_Init+0x88>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689a      	ldr	r2, [r3, #8]
 800805c:	2380      	movs	r3, #128	@ 0x80
 800805e:	021b      	lsls	r3, r3, #8
 8008060:	429a      	cmp	r2, r3
 8008062:	d007      	beq.n	8008074 <HAL_SPI_Init+0x88>
 8008064:	2348      	movs	r3, #72	@ 0x48
 8008066:	33ff      	adds	r3, #255	@ 0xff
 8008068:	001a      	movs	r2, r3
 800806a:	4b91      	ldr	r3, [pc, #580]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 800806c:	0011      	movs	r1, r2
 800806e:	0018      	movs	r0, r3
 8008070:	f7fb f8a2 	bl	80031b8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	23f0      	movs	r3, #240	@ 0xf0
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	429a      	cmp	r2, r3
 800807e:	d04e      	beq.n	800811e <HAL_SPI_Init+0x132>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	23e0      	movs	r3, #224	@ 0xe0
 8008086:	011b      	lsls	r3, r3, #4
 8008088:	429a      	cmp	r2, r3
 800808a:	d048      	beq.n	800811e <HAL_SPI_Init+0x132>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68da      	ldr	r2, [r3, #12]
 8008090:	23d0      	movs	r3, #208	@ 0xd0
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	429a      	cmp	r2, r3
 8008096:	d042      	beq.n	800811e <HAL_SPI_Init+0x132>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	23c0      	movs	r3, #192	@ 0xc0
 800809e:	011b      	lsls	r3, r3, #4
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d03c      	beq.n	800811e <HAL_SPI_Init+0x132>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	23b0      	movs	r3, #176	@ 0xb0
 80080aa:	011b      	lsls	r3, r3, #4
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d036      	beq.n	800811e <HAL_SPI_Init+0x132>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68da      	ldr	r2, [r3, #12]
 80080b4:	23a0      	movs	r3, #160	@ 0xa0
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d030      	beq.n	800811e <HAL_SPI_Init+0x132>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	2390      	movs	r3, #144	@ 0x90
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d02a      	beq.n	800811e <HAL_SPI_Init+0x132>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	2380      	movs	r3, #128	@ 0x80
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d024      	beq.n	800811e <HAL_SPI_Init+0x132>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68da      	ldr	r2, [r3, #12]
 80080d8:	23e0      	movs	r3, #224	@ 0xe0
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	429a      	cmp	r2, r3
 80080de:	d01e      	beq.n	800811e <HAL_SPI_Init+0x132>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	23c0      	movs	r3, #192	@ 0xc0
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d018      	beq.n	800811e <HAL_SPI_Init+0x132>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	23a0      	movs	r3, #160	@ 0xa0
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d012      	beq.n	800811e <HAL_SPI_Init+0x132>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	2380      	movs	r3, #128	@ 0x80
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	429a      	cmp	r2, r3
 8008102:	d00c      	beq.n	800811e <HAL_SPI_Init+0x132>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	23c0      	movs	r3, #192	@ 0xc0
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	429a      	cmp	r2, r3
 800810e:	d006      	beq.n	800811e <HAL_SPI_Init+0x132>
 8008110:	23a4      	movs	r3, #164	@ 0xa4
 8008112:	005a      	lsls	r2, r3, #1
 8008114:	4b66      	ldr	r3, [pc, #408]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 8008116:	0011      	movs	r1, r2
 8008118:	0018      	movs	r0, r3
 800811a:	f7fb f84d 	bl	80031b8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699a      	ldr	r2, [r3, #24]
 8008122:	2380      	movs	r3, #128	@ 0x80
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	429a      	cmp	r2, r3
 8008128:	d011      	beq.n	800814e <HAL_SPI_Init+0x162>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00d      	beq.n	800814e <HAL_SPI_Init+0x162>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	699a      	ldr	r2, [r3, #24]
 8008136:	2380      	movs	r3, #128	@ 0x80
 8008138:	02db      	lsls	r3, r3, #11
 800813a:	429a      	cmp	r2, r3
 800813c:	d007      	beq.n	800814e <HAL_SPI_Init+0x162>
 800813e:	234a      	movs	r3, #74	@ 0x4a
 8008140:	33ff      	adds	r3, #255	@ 0xff
 8008142:	001a      	movs	r2, r3
 8008144:	4b5a      	ldr	r3, [pc, #360]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 8008146:	0011      	movs	r1, r2
 8008148:	0018      	movs	r0, r3
 800814a:	f7fb f835 	bl	80031b8 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008152:	2b08      	cmp	r3, #8
 8008154:	d00a      	beq.n	800816c <HAL_SPI_Init+0x180>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800815a:	2b00      	cmp	r3, #0
 800815c:	d006      	beq.n	800816c <HAL_SPI_Init+0x180>
 800815e:	23a5      	movs	r3, #165	@ 0xa5
 8008160:	005a      	lsls	r2, r3, #1
 8008162:	4b53      	ldr	r3, [pc, #332]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 8008164:	0011      	movs	r1, r2
 8008166:	0018      	movs	r0, r3
 8008168:	f7fb f826 	bl	80031b8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d023      	beq.n	80081bc <HAL_SPI_Init+0x1d0>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	2b08      	cmp	r3, #8
 800817a:	d01f      	beq.n	80081bc <HAL_SPI_Init+0x1d0>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	2b10      	cmp	r3, #16
 8008182:	d01b      	beq.n	80081bc <HAL_SPI_Init+0x1d0>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	2b18      	cmp	r3, #24
 800818a:	d017      	beq.n	80081bc <HAL_SPI_Init+0x1d0>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	2b20      	cmp	r3, #32
 8008192:	d013      	beq.n	80081bc <HAL_SPI_Init+0x1d0>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	2b28      	cmp	r3, #40	@ 0x28
 800819a:	d00f      	beq.n	80081bc <HAL_SPI_Init+0x1d0>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	2b30      	cmp	r3, #48	@ 0x30
 80081a2:	d00b      	beq.n	80081bc <HAL_SPI_Init+0x1d0>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	2b38      	cmp	r3, #56	@ 0x38
 80081aa:	d007      	beq.n	80081bc <HAL_SPI_Init+0x1d0>
 80081ac:	234c      	movs	r3, #76	@ 0x4c
 80081ae:	33ff      	adds	r3, #255	@ 0xff
 80081b0:	001a      	movs	r2, r3
 80081b2:	4b3f      	ldr	r3, [pc, #252]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 80081b4:	0011      	movs	r1, r2
 80081b6:	0018      	movs	r0, r3
 80081b8:	f7fa fffe 	bl	80031b8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <HAL_SPI_Init+0x1ee>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	2b80      	cmp	r3, #128	@ 0x80
 80081ca:	d006      	beq.n	80081da <HAL_SPI_Init+0x1ee>
 80081cc:	23a6      	movs	r3, #166	@ 0xa6
 80081ce:	005a      	lsls	r2, r3, #1
 80081d0:	4b37      	ldr	r3, [pc, #220]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 80081d2:	0011      	movs	r1, r2
 80081d4:	0018      	movs	r0, r3
 80081d6:	f7fa ffef 	bl	80031b8 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00b      	beq.n	80081fa <HAL_SPI_Init+0x20e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e6:	2b10      	cmp	r3, #16
 80081e8:	d007      	beq.n	80081fa <HAL_SPI_Init+0x20e>
 80081ea:	234e      	movs	r3, #78	@ 0x4e
 80081ec:	33ff      	adds	r3, #255	@ 0xff
 80081ee:	001a      	movs	r2, r3
 80081f0:	4b2f      	ldr	r3, [pc, #188]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 80081f2:	0011      	movs	r1, r2
 80081f4:	0018      	movs	r0, r3
 80081f6:	f7fa ffdf 	bl	80031b8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d158      	bne.n	80082b4 <HAL_SPI_Init+0x2c8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <HAL_SPI_Init+0x234>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d006      	beq.n	8008220 <HAL_SPI_Init+0x234>
 8008212:	23a8      	movs	r3, #168	@ 0xa8
 8008214:	005a      	lsls	r2, r3, #1
 8008216:	4b26      	ldr	r3, [pc, #152]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 8008218:	0011      	movs	r1, r2
 800821a:	0018      	movs	r0, r3
 800821c:	f7fa ffcc 	bl	80031b8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <HAL_SPI_Init+0x254>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d007      	beq.n	8008240 <HAL_SPI_Init+0x254>
 8008230:	2352      	movs	r3, #82	@ 0x52
 8008232:	33ff      	adds	r3, #255	@ 0xff
 8008234:	001a      	movs	r2, r3
 8008236:	4b1e      	ldr	r3, [pc, #120]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 8008238:	0011      	movs	r1, r2
 800823a:	0018      	movs	r0, r3
 800823c:	f7fa ffbc 	bl	80031b8 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	2382      	movs	r3, #130	@ 0x82
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	429a      	cmp	r2, r3
 800824a:	d129      	bne.n	80082a0 <HAL_SPI_Init+0x2b4>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d100      	bne.n	8008256 <HAL_SPI_Init+0x26a>
 8008254:	e05c      	b.n	8008310 <HAL_SPI_Init+0x324>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	2b08      	cmp	r3, #8
 800825c:	d058      	beq.n	8008310 <HAL_SPI_Init+0x324>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	2b10      	cmp	r3, #16
 8008264:	d054      	beq.n	8008310 <HAL_SPI_Init+0x324>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	2b18      	cmp	r3, #24
 800826c:	d050      	beq.n	8008310 <HAL_SPI_Init+0x324>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	2b20      	cmp	r3, #32
 8008274:	d04c      	beq.n	8008310 <HAL_SPI_Init+0x324>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	2b28      	cmp	r3, #40	@ 0x28
 800827c:	d048      	beq.n	8008310 <HAL_SPI_Init+0x324>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	2b30      	cmp	r3, #48	@ 0x30
 8008284:	d044      	beq.n	8008310 <HAL_SPI_Init+0x324>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	2b38      	cmp	r3, #56	@ 0x38
 800828c:	d040      	beq.n	8008310 <HAL_SPI_Init+0x324>
 800828e:	2356      	movs	r3, #86	@ 0x56
 8008290:	33ff      	adds	r3, #255	@ 0xff
 8008292:	001a      	movs	r2, r3
 8008294:	4b06      	ldr	r3, [pc, #24]	@ (80082b0 <HAL_SPI_Init+0x2c4>)
 8008296:	0011      	movs	r1, r2
 8008298:	0018      	movs	r0, r3
 800829a:	f7fa ff8d 	bl	80031b8 <assert_failed>
 800829e:	e037      	b.n	8008310 <HAL_SPI_Init+0x324>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	61da      	str	r2, [r3, #28]
 80082a6:	e033      	b.n	8008310 <HAL_SPI_Init+0x324>
 80082a8:	40013000 	.word	0x40013000
 80082ac:	40003800 	.word	0x40003800
 80082b0:	0800bdc8 	.word	0x0800bdc8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d023      	beq.n	8008304 <HAL_SPI_Init+0x318>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d01f      	beq.n	8008304 <HAL_SPI_Init+0x318>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	2b10      	cmp	r3, #16
 80082ca:	d01b      	beq.n	8008304 <HAL_SPI_Init+0x318>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	2b18      	cmp	r3, #24
 80082d2:	d017      	beq.n	8008304 <HAL_SPI_Init+0x318>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	2b20      	cmp	r3, #32
 80082da:	d013      	beq.n	8008304 <HAL_SPI_Init+0x318>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	2b28      	cmp	r3, #40	@ 0x28
 80082e2:	d00f      	beq.n	8008304 <HAL_SPI_Init+0x318>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	2b30      	cmp	r3, #48	@ 0x30
 80082ea:	d00b      	beq.n	8008304 <HAL_SPI_Init+0x318>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	2b38      	cmp	r3, #56	@ 0x38
 80082f2:	d007      	beq.n	8008304 <HAL_SPI_Init+0x318>
 80082f4:	2360      	movs	r3, #96	@ 0x60
 80082f6:	33ff      	adds	r3, #255	@ 0xff
 80082f8:	001a      	movs	r2, r3
 80082fa:	4b4e      	ldr	r3, [pc, #312]	@ (8008434 <HAL_SPI_Init+0x448>)
 80082fc:	0011      	movs	r1, r2
 80082fe:	0018      	movs	r0, r3
 8008300:	f7fa ff5a 	bl	80031b8 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	225d      	movs	r2, #93	@ 0x5d
 800831a:	5c9b      	ldrb	r3, [r3, r2]
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d107      	bne.n	8008332 <HAL_SPI_Init+0x346>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	225c      	movs	r2, #92	@ 0x5c
 8008326:	2100      	movs	r1, #0
 8008328:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	0018      	movs	r0, r3
 800832e:	f7fa ff8b 	bl	8003248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	225d      	movs	r2, #93	@ 0x5d
 8008336:	2102      	movs	r1, #2
 8008338:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2140      	movs	r1, #64	@ 0x40
 8008346:	438a      	bics	r2, r1
 8008348:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	23e0      	movs	r3, #224	@ 0xe0
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	429a      	cmp	r2, r3
 8008354:	d902      	bls.n	800835c <HAL_SPI_Init+0x370>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	e002      	b.n	8008362 <HAL_SPI_Init+0x376>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800835c:	2380      	movs	r3, #128	@ 0x80
 800835e:	015b      	lsls	r3, r3, #5
 8008360:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	23f0      	movs	r3, #240	@ 0xf0
 8008368:	011b      	lsls	r3, r3, #4
 800836a:	429a      	cmp	r2, r3
 800836c:	d008      	beq.n	8008380 <HAL_SPI_Init+0x394>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	23e0      	movs	r3, #224	@ 0xe0
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	429a      	cmp	r2, r3
 8008378:	d002      	beq.n	8008380 <HAL_SPI_Init+0x394>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	2382      	movs	r3, #130	@ 0x82
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	401a      	ands	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6899      	ldr	r1, [r3, #8]
 800838e:	2384      	movs	r3, #132	@ 0x84
 8008390:	021b      	lsls	r3, r3, #8
 8008392:	400b      	ands	r3, r1
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2102      	movs	r1, #2
 800839c:	400b      	ands	r3, r1
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	2101      	movs	r1, #1
 80083a6:	400b      	ands	r3, r1
 80083a8:	431a      	orrs	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6999      	ldr	r1, [r3, #24]
 80083ae:	2380      	movs	r3, #128	@ 0x80
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	400b      	ands	r3, r1
 80083b4:	431a      	orrs	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	2138      	movs	r1, #56	@ 0x38
 80083bc:	400b      	ands	r3, r1
 80083be:	431a      	orrs	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	2180      	movs	r1, #128	@ 0x80
 80083c6:	400b      	ands	r3, r1
 80083c8:	431a      	orrs	r2, r3
 80083ca:	0011      	movs	r1, r2
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083d0:	2380      	movs	r3, #128	@ 0x80
 80083d2:	019b      	lsls	r3, r3, #6
 80083d4:	401a      	ands	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	0c1b      	lsrs	r3, r3, #16
 80083e4:	2204      	movs	r2, #4
 80083e6:	401a      	ands	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ec:	2110      	movs	r1, #16
 80083ee:	400b      	ands	r3, r1
 80083f0:	431a      	orrs	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f6:	2108      	movs	r1, #8
 80083f8:	400b      	ands	r3, r1
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68d9      	ldr	r1, [r3, #12]
 8008400:	23f0      	movs	r3, #240	@ 0xf0
 8008402:	011b      	lsls	r3, r3, #4
 8008404:	400b      	ands	r3, r1
 8008406:	431a      	orrs	r2, r3
 8008408:	0011      	movs	r1, r2
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	2380      	movs	r3, #128	@ 0x80
 800840e:	015b      	lsls	r3, r3, #5
 8008410:	401a      	ands	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	225d      	movs	r2, #93	@ 0x5d
 8008424:	2101      	movs	r1, #1
 8008426:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	0018      	movs	r0, r3
 800842c:	46bd      	mov	sp, r7
 800842e:	b004      	add	sp, #16
 8008430:	bd80      	pop	{r7, pc}
 8008432:	46c0      	nop			@ (mov r8, r8)
 8008434:	0800bdc8 	.word	0x0800bdc8

08008438 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	1dbb      	adds	r3, r7, #6
 8008446:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008448:	231f      	movs	r3, #31
 800844a:	18fb      	adds	r3, r7, r3
 800844c:	2200      	movs	r2, #0
 800844e:	701a      	strb	r2, [r3, #0]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00c      	beq.n	8008472 <HAL_SPI_Transmit+0x3a>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	2380      	movs	r3, #128	@ 0x80
 800845e:	021b      	lsls	r3, r3, #8
 8008460:	429a      	cmp	r2, r3
 8008462:	d006      	beq.n	8008472 <HAL_SPI_Transmit+0x3a>
 8008464:	23cf      	movs	r3, #207	@ 0xcf
 8008466:	009a      	lsls	r2, r3, #2
 8008468:	4bab      	ldr	r3, [pc, #684]	@ (8008718 <HAL_SPI_Transmit+0x2e0>)
 800846a:	0011      	movs	r1, r2
 800846c:	0018      	movs	r0, r3
 800846e:	f7fa fea3 	bl	80031b8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	225c      	movs	r2, #92	@ 0x5c
 8008476:	5c9b      	ldrb	r3, [r3, r2]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d101      	bne.n	8008480 <HAL_SPI_Transmit+0x48>
 800847c:	2302      	movs	r3, #2
 800847e:	e147      	b.n	8008710 <HAL_SPI_Transmit+0x2d8>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	225c      	movs	r2, #92	@ 0x5c
 8008484:	2101      	movs	r1, #1
 8008486:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008488:	f7fb f83c 	bl	8003504 <HAL_GetTick>
 800848c:	0003      	movs	r3, r0
 800848e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008490:	2316      	movs	r3, #22
 8008492:	18fb      	adds	r3, r7, r3
 8008494:	1dba      	adds	r2, r7, #6
 8008496:	8812      	ldrh	r2, [r2, #0]
 8008498:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	225d      	movs	r2, #93	@ 0x5d
 800849e:	5c9b      	ldrb	r3, [r3, r2]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d004      	beq.n	80084b0 <HAL_SPI_Transmit+0x78>
  {
    errorcode = HAL_BUSY;
 80084a6:	231f      	movs	r3, #31
 80084a8:	18fb      	adds	r3, r7, r3
 80084aa:	2202      	movs	r2, #2
 80084ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80084ae:	e128      	b.n	8008702 <HAL_SPI_Transmit+0x2ca>
  }

  if ((pData == NULL) || (Size == 0U))
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_SPI_Transmit+0x86>
 80084b6:	1dbb      	adds	r3, r7, #6
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d104      	bne.n	80084c8 <HAL_SPI_Transmit+0x90>
  {
    errorcode = HAL_ERROR;
 80084be:	231f      	movs	r3, #31
 80084c0:	18fb      	adds	r3, r7, r3
 80084c2:	2201      	movs	r2, #1
 80084c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80084c6:	e11c      	b.n	8008702 <HAL_SPI_Transmit+0x2ca>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	225d      	movs	r2, #93	@ 0x5d
 80084cc:	2103      	movs	r1, #3
 80084ce:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	1dba      	adds	r2, r7, #6
 80084e0:	8812      	ldrh	r2, [r2, #0]
 80084e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	1dba      	adds	r2, r7, #6
 80084e8:	8812      	ldrh	r2, [r2, #0]
 80084ea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2244      	movs	r2, #68	@ 0x44
 80084f6:	2100      	movs	r1, #0
 80084f8:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2246      	movs	r2, #70	@ 0x46
 80084fe:	2100      	movs	r1, #0
 8008500:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	2380      	movs	r3, #128	@ 0x80
 8008514:	021b      	lsls	r3, r3, #8
 8008516:	429a      	cmp	r2, r3
 8008518:	d110      	bne.n	800853c <HAL_SPI_Transmit+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2140      	movs	r1, #64	@ 0x40
 8008526:	438a      	bics	r2, r1
 8008528:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2180      	movs	r1, #128	@ 0x80
 8008536:	01c9      	lsls	r1, r1, #7
 8008538:	430a      	orrs	r2, r1
 800853a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2240      	movs	r2, #64	@ 0x40
 8008544:	4013      	ands	r3, r2
 8008546:	2b40      	cmp	r3, #64	@ 0x40
 8008548:	d007      	beq.n	800855a <HAL_SPI_Transmit+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2140      	movs	r1, #64	@ 0x40
 8008556:	430a      	orrs	r2, r1
 8008558:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	23e0      	movs	r3, #224	@ 0xe0
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	429a      	cmp	r2, r3
 8008564:	d952      	bls.n	800860c <HAL_SPI_Transmit+0x1d4>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d004      	beq.n	8008578 <HAL_SPI_Transmit+0x140>
 800856e:	2316      	movs	r3, #22
 8008570:	18fb      	adds	r3, r7, r3
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d143      	bne.n	8008600 <HAL_SPI_Transmit+0x1c8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800857c:	881a      	ldrh	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008588:	1c9a      	adds	r2, r3, #2
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008592:	b29b      	uxth	r3, r3
 8008594:	3b01      	subs	r3, #1
 8008596:	b29a      	uxth	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800859c:	e030      	b.n	8008600 <HAL_SPI_Transmit+0x1c8>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	2202      	movs	r2, #2
 80085a6:	4013      	ands	r3, r2
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d112      	bne.n	80085d2 <HAL_SPI_Transmit+0x19a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b0:	881a      	ldrh	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085bc:	1c9a      	adds	r2, r3, #2
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80085d0:	e016      	b.n	8008600 <HAL_SPI_Transmit+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085d2:	f7fa ff97 	bl	8003504 <HAL_GetTick>
 80085d6:	0002      	movs	r2, r0
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d802      	bhi.n	80085e8 <HAL_SPI_Transmit+0x1b0>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	3301      	adds	r3, #1
 80085e6:	d102      	bne.n	80085ee <HAL_SPI_Transmit+0x1b6>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d108      	bne.n	8008600 <HAL_SPI_Transmit+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80085ee:	231f      	movs	r3, #31
 80085f0:	18fb      	adds	r3, r7, r3
 80085f2:	2203      	movs	r2, #3
 80085f4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	225d      	movs	r2, #93	@ 0x5d
 80085fa:	2101      	movs	r1, #1
 80085fc:	5499      	strb	r1, [r3, r2]
          goto error;
 80085fe:	e080      	b.n	8008702 <HAL_SPI_Transmit+0x2ca>
    while (hspi->TxXferCount > 0U)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008604:	b29b      	uxth	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1c9      	bne.n	800859e <HAL_SPI_Transmit+0x166>
 800860a:	e053      	b.n	80086b4 <HAL_SPI_Transmit+0x27c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <HAL_SPI_Transmit+0x1e6>
 8008614:	2316      	movs	r3, #22
 8008616:	18fb      	adds	r3, r7, r3
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d145      	bne.n	80086aa <HAL_SPI_Transmit+0x272>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	330c      	adds	r3, #12
 8008628:	7812      	ldrb	r2, [r2, #0]
 800862a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800863a:	b29b      	uxth	r3, r3
 800863c:	3b01      	subs	r3, #1
 800863e:	b29a      	uxth	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8008644:	e031      	b.n	80086aa <HAL_SPI_Transmit+0x272>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	2202      	movs	r2, #2
 800864e:	4013      	ands	r3, r2
 8008650:	2b02      	cmp	r3, #2
 8008652:	d113      	bne.n	800867c <HAL_SPI_Transmit+0x244>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	330c      	adds	r3, #12
 800865e:	7812      	ldrb	r2, [r2, #0]
 8008660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008666:	1c5a      	adds	r2, r3, #1
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	b29a      	uxth	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800867a:	e016      	b.n	80086aa <HAL_SPI_Transmit+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800867c:	f7fa ff42 	bl	8003504 <HAL_GetTick>
 8008680:	0002      	movs	r2, r0
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d802      	bhi.n	8008692 <HAL_SPI_Transmit+0x25a>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	3301      	adds	r3, #1
 8008690:	d102      	bne.n	8008698 <HAL_SPI_Transmit+0x260>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d108      	bne.n	80086aa <HAL_SPI_Transmit+0x272>
        {
          errorcode = HAL_TIMEOUT;
 8008698:	231f      	movs	r3, #31
 800869a:	18fb      	adds	r3, r7, r3
 800869c:	2203      	movs	r2, #3
 800869e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	225d      	movs	r2, #93	@ 0x5d
 80086a4:	2101      	movs	r1, #1
 80086a6:	5499      	strb	r1, [r3, r2]
          goto error;
 80086a8:	e02b      	b.n	8008702 <HAL_SPI_Transmit+0x2ca>
    while (hspi->TxXferCount > 0U)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1c8      	bne.n	8008646 <HAL_SPI_Transmit+0x20e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	0018      	movs	r0, r3
 80086bc:	f000 fcfe 	bl	80090bc <SPI_EndRxTxTransaction>
 80086c0:	1e03      	subs	r3, r0, #0
 80086c2:	d002      	beq.n	80086ca <HAL_SPI_Transmit+0x292>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <HAL_SPI_Transmit+0x2b0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086d2:	2300      	movs	r3, #0
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	613b      	str	r3, [r7, #16]
 80086e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d004      	beq.n	80086fa <HAL_SPI_Transmit+0x2c2>
  {
    errorcode = HAL_ERROR;
 80086f0:	231f      	movs	r3, #31
 80086f2:	18fb      	adds	r3, r7, r3
 80086f4:	2201      	movs	r2, #1
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	e003      	b.n	8008702 <HAL_SPI_Transmit+0x2ca>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	225d      	movs	r2, #93	@ 0x5d
 80086fe:	2101      	movs	r1, #1
 8008700:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	225c      	movs	r2, #92	@ 0x5c
 8008706:	2100      	movs	r1, #0
 8008708:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800870a:	231f      	movs	r3, #31
 800870c:	18fb      	adds	r3, r7, r3
 800870e:	781b      	ldrb	r3, [r3, #0]
}
 8008710:	0018      	movs	r0, r3
 8008712:	46bd      	mov	sp, r7
 8008714:	b008      	add	sp, #32
 8008716:	bd80      	pop	{r7, pc}
 8008718:	0800bdc8 	.word	0x0800bdc8

0800871c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800871c:	b590      	push	{r4, r7, lr}
 800871e:	b089      	sub	sp, #36	@ 0x24
 8008720:	af02      	add	r7, sp, #8
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	1dbb      	adds	r3, r7, #6
 800872a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800872c:	2117      	movs	r1, #23
 800872e:	187b      	adds	r3, r7, r1
 8008730:	2200      	movs	r2, #0
 8008732:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	225d      	movs	r2, #93	@ 0x5d
 8008738:	5c9b      	ldrb	r3, [r3, r2]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b01      	cmp	r3, #1
 800873e:	d003      	beq.n	8008748 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8008740:	187b      	adds	r3, r7, r1
 8008742:	2202      	movs	r2, #2
 8008744:	701a      	strb	r2, [r3, #0]
    goto error;
 8008746:	e12b      	b.n	80089a0 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	2382      	movs	r3, #130	@ 0x82
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	429a      	cmp	r2, r3
 8008752:	d113      	bne.n	800877c <HAL_SPI_Receive+0x60>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10f      	bne.n	800877c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	225d      	movs	r2, #93	@ 0x5d
 8008760:	2104      	movs	r1, #4
 8008762:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008764:	1dbb      	adds	r3, r7, #6
 8008766:	881c      	ldrh	r4, [r3, #0]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	68b9      	ldr	r1, [r7, #8]
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	0023      	movs	r3, r4
 8008774:	f000 f924 	bl	80089c0 <HAL_SPI_TransmitReceive>
 8008778:	0003      	movs	r3, r0
 800877a:	e118      	b.n	80089ae <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	225c      	movs	r2, #92	@ 0x5c
 8008780:	5c9b      	ldrb	r3, [r3, r2]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <HAL_SPI_Receive+0x6e>
 8008786:	2302      	movs	r3, #2
 8008788:	e111      	b.n	80089ae <HAL_SPI_Receive+0x292>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	225c      	movs	r2, #92	@ 0x5c
 800878e:	2101      	movs	r1, #1
 8008790:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008792:	f7fa feb7 	bl	8003504 <HAL_GetTick>
 8008796:	0003      	movs	r3, r0
 8008798:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <HAL_SPI_Receive+0x8c>
 80087a0:	1dbb      	adds	r3, r7, #6
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d104      	bne.n	80087b2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80087a8:	2317      	movs	r3, #23
 80087aa:	18fb      	adds	r3, r7, r3
 80087ac:	2201      	movs	r2, #1
 80087ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80087b0:	e0f6      	b.n	80089a0 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	225d      	movs	r2, #93	@ 0x5d
 80087b6:	2104      	movs	r1, #4
 80087b8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	1dba      	adds	r2, r7, #6
 80087ca:	2144      	movs	r1, #68	@ 0x44
 80087cc:	8812      	ldrh	r2, [r2, #0]
 80087ce:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	1dba      	adds	r2, r7, #6
 80087d4:	2146      	movs	r1, #70	@ 0x46
 80087d6:	8812      	ldrh	r2, [r2, #0]
 80087d8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68da      	ldr	r2, [r3, #12]
 80087fc:	23e0      	movs	r3, #224	@ 0xe0
 80087fe:	00db      	lsls	r3, r3, #3
 8008800:	429a      	cmp	r2, r3
 8008802:	d908      	bls.n	8008816 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	496a      	ldr	r1, [pc, #424]	@ (80089b8 <HAL_SPI_Receive+0x29c>)
 8008810:	400a      	ands	r2, r1
 8008812:	605a      	str	r2, [r3, #4]
 8008814:	e008      	b.n	8008828 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2180      	movs	r1, #128	@ 0x80
 8008822:	0149      	lsls	r1, r1, #5
 8008824:	430a      	orrs	r2, r1
 8008826:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	2380      	movs	r3, #128	@ 0x80
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	429a      	cmp	r2, r3
 8008832:	d10f      	bne.n	8008854 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2140      	movs	r1, #64	@ 0x40
 8008840:	438a      	bics	r2, r1
 8008842:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	495b      	ldr	r1, [pc, #364]	@ (80089bc <HAL_SPI_Receive+0x2a0>)
 8008850:	400a      	ands	r2, r1
 8008852:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2240      	movs	r2, #64	@ 0x40
 800885c:	4013      	ands	r3, r2
 800885e:	2b40      	cmp	r3, #64	@ 0x40
 8008860:	d007      	beq.n	8008872 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2140      	movs	r1, #64	@ 0x40
 800886e:	430a      	orrs	r2, r1
 8008870:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	23e0      	movs	r3, #224	@ 0xe0
 8008878:	00db      	lsls	r3, r3, #3
 800887a:	429a      	cmp	r2, r3
 800887c:	d900      	bls.n	8008880 <HAL_SPI_Receive+0x164>
 800887e:	e071      	b.n	8008964 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008880:	e035      	b.n	80088ee <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2201      	movs	r2, #1
 800888a:	4013      	ands	r3, r2
 800888c:	2b01      	cmp	r3, #1
 800888e:	d117      	bne.n	80088c0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	330c      	adds	r3, #12
 8008896:	001a      	movs	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889c:	7812      	ldrb	r2, [r2, #0]
 800889e:	b2d2      	uxtb	r2, r2
 80088a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2246      	movs	r2, #70	@ 0x46
 80088b0:	5a9b      	ldrh	r3, [r3, r2]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	b299      	uxth	r1, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2246      	movs	r2, #70	@ 0x46
 80088bc:	5299      	strh	r1, [r3, r2]
 80088be:	e016      	b.n	80088ee <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088c0:	f7fa fe20 	bl	8003504 <HAL_GetTick>
 80088c4:	0002      	movs	r2, r0
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d802      	bhi.n	80088d6 <HAL_SPI_Receive+0x1ba>
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	3301      	adds	r3, #1
 80088d4:	d102      	bne.n	80088dc <HAL_SPI_Receive+0x1c0>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d108      	bne.n	80088ee <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80088dc:	2317      	movs	r3, #23
 80088de:	18fb      	adds	r3, r7, r3
 80088e0:	2203      	movs	r2, #3
 80088e2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	225d      	movs	r2, #93	@ 0x5d
 80088e8:	2101      	movs	r1, #1
 80088ea:	5499      	strb	r1, [r3, r2]
          goto error;
 80088ec:	e058      	b.n	80089a0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2246      	movs	r2, #70	@ 0x46
 80088f2:	5a9b      	ldrh	r3, [r3, r2]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1c3      	bne.n	8008882 <HAL_SPI_Receive+0x166>
 80088fa:	e039      	b.n	8008970 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	2201      	movs	r2, #1
 8008904:	4013      	ands	r3, r2
 8008906:	2b01      	cmp	r3, #1
 8008908:	d115      	bne.n	8008936 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008914:	b292      	uxth	r2, r2
 8008916:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800891c:	1c9a      	adds	r2, r3, #2
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2246      	movs	r2, #70	@ 0x46
 8008926:	5a9b      	ldrh	r3, [r3, r2]
 8008928:	b29b      	uxth	r3, r3
 800892a:	3b01      	subs	r3, #1
 800892c:	b299      	uxth	r1, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2246      	movs	r2, #70	@ 0x46
 8008932:	5299      	strh	r1, [r3, r2]
 8008934:	e016      	b.n	8008964 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008936:	f7fa fde5 	bl	8003504 <HAL_GetTick>
 800893a:	0002      	movs	r2, r0
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	683a      	ldr	r2, [r7, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d802      	bhi.n	800894c <HAL_SPI_Receive+0x230>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	3301      	adds	r3, #1
 800894a:	d102      	bne.n	8008952 <HAL_SPI_Receive+0x236>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d108      	bne.n	8008964 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8008952:	2317      	movs	r3, #23
 8008954:	18fb      	adds	r3, r7, r3
 8008956:	2203      	movs	r2, #3
 8008958:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	225d      	movs	r2, #93	@ 0x5d
 800895e:	2101      	movs	r1, #1
 8008960:	5499      	strb	r1, [r3, r2]
          goto error;
 8008962:	e01d      	b.n	80089a0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2246      	movs	r2, #70	@ 0x46
 8008968:	5a9b      	ldrh	r3, [r3, r2]
 800896a:	b29b      	uxth	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1c5      	bne.n	80088fc <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	0018      	movs	r0, r3
 8008978:	f000 fb42 	bl	8009000 <SPI_EndRxTransaction>
 800897c:	1e03      	subs	r3, r0, #0
 800897e:	d002      	beq.n	8008986 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2220      	movs	r2, #32
 8008984:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800898a:	2b00      	cmp	r3, #0
 800898c:	d004      	beq.n	8008998 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800898e:	2317      	movs	r3, #23
 8008990:	18fb      	adds	r3, r7, r3
 8008992:	2201      	movs	r2, #1
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e003      	b.n	80089a0 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	225d      	movs	r2, #93	@ 0x5d
 800899c:	2101      	movs	r1, #1
 800899e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	225c      	movs	r2, #92	@ 0x5c
 80089a4:	2100      	movs	r1, #0
 80089a6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80089a8:	2317      	movs	r3, #23
 80089aa:	18fb      	adds	r3, r7, r3
 80089ac:	781b      	ldrb	r3, [r3, #0]
}
 80089ae:	0018      	movs	r0, r3
 80089b0:	46bd      	mov	sp, r7
 80089b2:	b007      	add	sp, #28
 80089b4:	bd90      	pop	{r4, r7, pc}
 80089b6:	46c0      	nop			@ (mov r8, r8)
 80089b8:	ffffefff 	.word	0xffffefff
 80089bc:	ffffbfff 	.word	0xffffbfff

080089c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08a      	sub	sp, #40	@ 0x28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
 80089cc:	001a      	movs	r2, r3
 80089ce:	1cbb      	adds	r3, r7, #2
 80089d0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80089d2:	2301      	movs	r3, #1
 80089d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80089d6:	2323      	movs	r3, #35	@ 0x23
 80089d8:	18fb      	adds	r3, r7, r3
 80089da:	2200      	movs	r2, #0
 80089dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d006      	beq.n	80089f4 <HAL_SPI_TransmitReceive+0x34>
 80089e6:	239d      	movs	r3, #157	@ 0x9d
 80089e8:	00da      	lsls	r2, r3, #3
 80089ea:	4ba1      	ldr	r3, [pc, #644]	@ (8008c70 <HAL_SPI_TransmitReceive+0x2b0>)
 80089ec:	0011      	movs	r1, r2
 80089ee:	0018      	movs	r0, r3
 80089f0:	f7fa fbe2 	bl	80031b8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	225c      	movs	r2, #92	@ 0x5c
 80089f8:	5c9b      	ldrb	r3, [r3, r2]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d101      	bne.n	8008a02 <HAL_SPI_TransmitReceive+0x42>
 80089fe:	2302      	movs	r3, #2
 8008a00:	e1c9      	b.n	8008d96 <HAL_SPI_TransmitReceive+0x3d6>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	225c      	movs	r2, #92	@ 0x5c
 8008a06:	2101      	movs	r1, #1
 8008a08:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a0a:	f7fa fd7b 	bl	8003504 <HAL_GetTick>
 8008a0e:	0003      	movs	r3, r0
 8008a10:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a12:	201b      	movs	r0, #27
 8008a14:	183b      	adds	r3, r7, r0
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	215d      	movs	r1, #93	@ 0x5d
 8008a1a:	5c52      	ldrb	r2, [r2, r1]
 8008a1c:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008a24:	2312      	movs	r3, #18
 8008a26:	18fb      	adds	r3, r7, r3
 8008a28:	1cba      	adds	r2, r7, #2
 8008a2a:	8812      	ldrh	r2, [r2, #0]
 8008a2c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a2e:	183b      	adds	r3, r7, r0
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d011      	beq.n	8008a5a <HAL_SPI_TransmitReceive+0x9a>
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	2382      	movs	r3, #130	@ 0x82
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d107      	bne.n	8008a50 <HAL_SPI_TransmitReceive+0x90>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d103      	bne.n	8008a50 <HAL_SPI_TransmitReceive+0x90>
 8008a48:	183b      	adds	r3, r7, r0
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d004      	beq.n	8008a5a <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_BUSY;
 8008a50:	2323      	movs	r3, #35	@ 0x23
 8008a52:	18fb      	adds	r3, r7, r3
 8008a54:	2202      	movs	r2, #2
 8008a56:	701a      	strb	r2, [r3, #0]
    goto error;
 8008a58:	e196      	b.n	8008d88 <HAL_SPI_TransmitReceive+0x3c8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d006      	beq.n	8008a6e <HAL_SPI_TransmitReceive+0xae>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_SPI_TransmitReceive+0xae>
 8008a66:	1cbb      	adds	r3, r7, #2
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d104      	bne.n	8008a78 <HAL_SPI_TransmitReceive+0xb8>
  {
    errorcode = HAL_ERROR;
 8008a6e:	2323      	movs	r3, #35	@ 0x23
 8008a70:	18fb      	adds	r3, r7, r3
 8008a72:	2201      	movs	r2, #1
 8008a74:	701a      	strb	r2, [r3, #0]
    goto error;
 8008a76:	e187      	b.n	8008d88 <HAL_SPI_TransmitReceive+0x3c8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	225d      	movs	r2, #93	@ 0x5d
 8008a7c:	5c9b      	ldrb	r3, [r3, r2]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d003      	beq.n	8008a8c <HAL_SPI_TransmitReceive+0xcc>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	225d      	movs	r2, #93	@ 0x5d
 8008a88:	2105      	movs	r1, #5
 8008a8a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	1cba      	adds	r2, r7, #2
 8008a9c:	2146      	movs	r1, #70	@ 0x46
 8008a9e:	8812      	ldrh	r2, [r2, #0]
 8008aa0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	1cba      	adds	r2, r7, #2
 8008aa6:	2144      	movs	r1, #68	@ 0x44
 8008aa8:	8812      	ldrh	r2, [r2, #0]
 8008aaa:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	1cba      	adds	r2, r7, #2
 8008ab6:	8812      	ldrh	r2, [r2, #0]
 8008ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	1cba      	adds	r2, r7, #2
 8008abe:	8812      	ldrh	r2, [r2, #0]
 8008ac0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	23e0      	movs	r3, #224	@ 0xe0
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d908      	bls.n	8008aec <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4963      	ldr	r1, [pc, #396]	@ (8008c74 <HAL_SPI_TransmitReceive+0x2b4>)
 8008ae6:	400a      	ands	r2, r1
 8008ae8:	605a      	str	r2, [r3, #4]
 8008aea:	e008      	b.n	8008afe <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2180      	movs	r1, #128	@ 0x80
 8008af8:	0149      	lsls	r1, r1, #5
 8008afa:	430a      	orrs	r2, r1
 8008afc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2240      	movs	r2, #64	@ 0x40
 8008b06:	4013      	ands	r3, r2
 8008b08:	2b40      	cmp	r3, #64	@ 0x40
 8008b0a:	d007      	beq.n	8008b1c <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2140      	movs	r1, #64	@ 0x40
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	68da      	ldr	r2, [r3, #12]
 8008b20:	23e0      	movs	r3, #224	@ 0xe0
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d800      	bhi.n	8008b2a <HAL_SPI_TransmitReceive+0x16a>
 8008b28:	e083      	b.n	8008c32 <HAL_SPI_TransmitReceive+0x272>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d005      	beq.n	8008b3e <HAL_SPI_TransmitReceive+0x17e>
 8008b32:	2312      	movs	r3, #18
 8008b34:	18fb      	adds	r3, r7, r3
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d000      	beq.n	8008b3e <HAL_SPI_TransmitReceive+0x17e>
 8008b3c:	e06d      	b.n	8008c1a <HAL_SPI_TransmitReceive+0x25a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b42:	881a      	ldrh	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4e:	1c9a      	adds	r2, r3, #2
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b62:	e05a      	b.n	8008c1a <HAL_SPI_TransmitReceive+0x25a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d11b      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x1ea>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d016      	beq.n	8008baa <HAL_SPI_TransmitReceive+0x1ea>
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d113      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b86:	881a      	ldrh	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b92:	1c9a      	adds	r2, r3, #2
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d11c      	bne.n	8008bf2 <HAL_SPI_TransmitReceive+0x232>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2246      	movs	r2, #70	@ 0x46
 8008bbc:	5a9b      	ldrh	r3, [r3, r2]
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d016      	beq.n	8008bf2 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bce:	b292      	uxth	r2, r2
 8008bd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd6:	1c9a      	adds	r2, r3, #2
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2246      	movs	r2, #70	@ 0x46
 8008be0:	5a9b      	ldrh	r3, [r3, r2]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	3b01      	subs	r3, #1
 8008be6:	b299      	uxth	r1, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2246      	movs	r2, #70	@ 0x46
 8008bec:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008bf2:	f7fa fc87 	bl	8003504 <HAL_GetTick>
 8008bf6:	0002      	movs	r2, r0
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d80b      	bhi.n	8008c1a <HAL_SPI_TransmitReceive+0x25a>
 8008c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c04:	3301      	adds	r3, #1
 8008c06:	d008      	beq.n	8008c1a <HAL_SPI_TransmitReceive+0x25a>
      {
        errorcode = HAL_TIMEOUT;
 8008c08:	2323      	movs	r3, #35	@ 0x23
 8008c0a:	18fb      	adds	r3, r7, r3
 8008c0c:	2203      	movs	r2, #3
 8008c0e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	225d      	movs	r2, #93	@ 0x5d
 8008c14:	2101      	movs	r1, #1
 8008c16:	5499      	strb	r1, [r3, r2]
        goto error;
 8008c18:	e0b6      	b.n	8008d88 <HAL_SPI_TransmitReceive+0x3c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d19f      	bne.n	8008b64 <HAL_SPI_TransmitReceive+0x1a4>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2246      	movs	r2, #70	@ 0x46
 8008c28:	5a9b      	ldrh	r3, [r3, r2]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d199      	bne.n	8008b64 <HAL_SPI_TransmitReceive+0x1a4>
 8008c30:	e08e      	b.n	8008d50 <HAL_SPI_TransmitReceive+0x390>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d005      	beq.n	8008c46 <HAL_SPI_TransmitReceive+0x286>
 8008c3a:	2312      	movs	r3, #18
 8008c3c:	18fb      	adds	r3, r7, r3
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d000      	beq.n	8008c46 <HAL_SPI_TransmitReceive+0x286>
 8008c44:	e079      	b.n	8008d3a <HAL_SPI_TransmitReceive+0x37a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	330c      	adds	r3, #12
 8008c50:	7812      	ldrb	r2, [r2, #0]
 8008c52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c6c:	e065      	b.n	8008d3a <HAL_SPI_TransmitReceive+0x37a>
 8008c6e:	46c0      	nop			@ (mov r8, r8)
 8008c70:	0800bdc8 	.word	0x0800bdc8
 8008c74:	ffffefff 	.word	0xffffefff
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	4013      	ands	r3, r2
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d11c      	bne.n	8008cc0 <HAL_SPI_TransmitReceive+0x300>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d017      	beq.n	8008cc0 <HAL_SPI_TransmitReceive+0x300>
 8008c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d114      	bne.n	8008cc0 <HAL_SPI_TransmitReceive+0x300>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	330c      	adds	r3, #12
 8008ca0:	7812      	ldrb	r2, [r2, #0]
 8008ca2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	4013      	ands	r3, r2
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d11e      	bne.n	8008d0c <HAL_SPI_TransmitReceive+0x34c>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2246      	movs	r2, #70	@ 0x46
 8008cd2:	5a9b      	ldrh	r3, [r3, r2]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d018      	beq.n	8008d0c <HAL_SPI_TransmitReceive+0x34c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	330c      	adds	r3, #12
 8008ce0:	001a      	movs	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce6:	7812      	ldrb	r2, [r2, #0]
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2246      	movs	r2, #70	@ 0x46
 8008cfa:	5a9b      	ldrh	r3, [r3, r2]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b299      	uxth	r1, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2246      	movs	r2, #70	@ 0x46
 8008d06:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d0c:	f7fa fbfa 	bl	8003504 <HAL_GetTick>
 8008d10:	0002      	movs	r2, r0
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d802      	bhi.n	8008d22 <HAL_SPI_TransmitReceive+0x362>
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1e:	3301      	adds	r3, #1
 8008d20:	d102      	bne.n	8008d28 <HAL_SPI_TransmitReceive+0x368>
 8008d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d108      	bne.n	8008d3a <HAL_SPI_TransmitReceive+0x37a>
      {
        errorcode = HAL_TIMEOUT;
 8008d28:	2323      	movs	r3, #35	@ 0x23
 8008d2a:	18fb      	adds	r3, r7, r3
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	225d      	movs	r2, #93	@ 0x5d
 8008d34:	2101      	movs	r1, #1
 8008d36:	5499      	strb	r1, [r3, r2]
        goto error;
 8008d38:	e026      	b.n	8008d88 <HAL_SPI_TransmitReceive+0x3c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d199      	bne.n	8008c78 <HAL_SPI_TransmitReceive+0x2b8>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2246      	movs	r2, #70	@ 0x46
 8008d48:	5a9b      	ldrh	r3, [r3, r2]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d193      	bne.n	8008c78 <HAL_SPI_TransmitReceive+0x2b8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d50:	69fa      	ldr	r2, [r7, #28]
 8008d52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	0018      	movs	r0, r3
 8008d58:	f000 f9b0 	bl	80090bc <SPI_EndRxTxTransaction>
 8008d5c:	1e03      	subs	r3, r0, #0
 8008d5e:	d006      	beq.n	8008d6e <HAL_SPI_TransmitReceive+0x3ae>
  {
    errorcode = HAL_ERROR;
 8008d60:	2323      	movs	r3, #35	@ 0x23
 8008d62:	18fb      	adds	r3, r7, r3
 8008d64:	2201      	movs	r2, #1
 8008d66:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d004      	beq.n	8008d80 <HAL_SPI_TransmitReceive+0x3c0>
  {
    errorcode = HAL_ERROR;
 8008d76:	2323      	movs	r3, #35	@ 0x23
 8008d78:	18fb      	adds	r3, r7, r3
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	e003      	b.n	8008d88 <HAL_SPI_TransmitReceive+0x3c8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	225d      	movs	r2, #93	@ 0x5d
 8008d84:	2101      	movs	r1, #1
 8008d86:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	225c      	movs	r2, #92	@ 0x5c
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008d90:	2323      	movs	r3, #35	@ 0x23
 8008d92:	18fb      	adds	r3, r7, r3
 8008d94:	781b      	ldrb	r3, [r3, #0]
}
 8008d96:	0018      	movs	r0, r3
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	b00a      	add	sp, #40	@ 0x28
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	46c0      	nop			@ (mov r8, r8)

08008da0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	1dfb      	adds	r3, r7, #7
 8008dae:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008db0:	f7fa fba8 	bl	8003504 <HAL_GetTick>
 8008db4:	0002      	movs	r2, r0
 8008db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db8:	1a9b      	subs	r3, r3, r2
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	18d3      	adds	r3, r2, r3
 8008dbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008dc0:	f7fa fba0 	bl	8003504 <HAL_GetTick>
 8008dc4:	0003      	movs	r3, r0
 8008dc6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8008eb4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	015b      	lsls	r3, r3, #5
 8008dce:	0d1b      	lsrs	r3, r3, #20
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	4353      	muls	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dd6:	e058      	b.n	8008e8a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	d055      	beq.n	8008e8a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008dde:	f7fa fb91 	bl	8003504 <HAL_GetTick>
 8008de2:	0002      	movs	r2, r0
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d902      	bls.n	8008df4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d142      	bne.n	8008e7a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	21e0      	movs	r1, #224	@ 0xe0
 8008e00:	438a      	bics	r2, r1
 8008e02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	2382      	movs	r3, #130	@ 0x82
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d113      	bne.n	8008e38 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	689a      	ldr	r2, [r3, #8]
 8008e14:	2380      	movs	r3, #128	@ 0x80
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d005      	beq.n	8008e28 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	2380      	movs	r3, #128	@ 0x80
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d107      	bne.n	8008e38 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2140      	movs	r1, #64	@ 0x40
 8008e34:	438a      	bics	r2, r1
 8008e36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e3c:	2380      	movs	r3, #128	@ 0x80
 8008e3e:	019b      	lsls	r3, r3, #6
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d110      	bne.n	8008e66 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	491a      	ldr	r1, [pc, #104]	@ (8008eb8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008e50:	400a      	ands	r2, r1
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2180      	movs	r1, #128	@ 0x80
 8008e60:	0189      	lsls	r1, r1, #6
 8008e62:	430a      	orrs	r2, r1
 8008e64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	225d      	movs	r2, #93	@ 0x5d
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	225c      	movs	r2, #92	@ 0x5c
 8008e72:	2100      	movs	r1, #0
 8008e74:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e017      	b.n	8008eaa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	4013      	ands	r3, r2
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	425a      	negs	r2, r3
 8008e9a:	4153      	adcs	r3, r2
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	001a      	movs	r2, r3
 8008ea0:	1dfb      	adds	r3, r7, #7
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d197      	bne.n	8008dd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	0018      	movs	r0, r3
 8008eac:	46bd      	mov	sp, r7
 8008eae:	b008      	add	sp, #32
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	46c0      	nop			@ (mov r8, r8)
 8008eb4:	20000010 	.word	0x20000010
 8008eb8:	ffffdfff 	.word	0xffffdfff

08008ebc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08a      	sub	sp, #40	@ 0x28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008eca:	2317      	movs	r3, #23
 8008ecc:	18fb      	adds	r3, r7, r3
 8008ece:	2200      	movs	r2, #0
 8008ed0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008ed2:	f7fa fb17 	bl	8003504 <HAL_GetTick>
 8008ed6:	0002      	movs	r2, r0
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	1a9b      	subs	r3, r3, r2
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	18d3      	adds	r3, r2, r3
 8008ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008ee2:	f7fa fb0f 	bl	8003504 <HAL_GetTick>
 8008ee6:	0003      	movs	r3, r0
 8008ee8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	330c      	adds	r3, #12
 8008ef0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008ef2:	4b41      	ldr	r3, [pc, #260]	@ (8008ff8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	0013      	movs	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	189b      	adds	r3, r3, r2
 8008efc:	00da      	lsls	r2, r3, #3
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	0d1b      	lsrs	r3, r3, #20
 8008f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f04:	4353      	muls	r3, r2
 8008f06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008f08:	e068      	b.n	8008fdc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	23c0      	movs	r3, #192	@ 0xc0
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d10a      	bne.n	8008f2a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d107      	bne.n	8008f2a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	2117      	movs	r1, #23
 8008f22:	187b      	adds	r3, r7, r1
 8008f24:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008f26:	187b      	adds	r3, r7, r1
 8008f28:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	d055      	beq.n	8008fdc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f30:	f7fa fae8 	bl	8003504 <HAL_GetTick>
 8008f34:	0002      	movs	r2, r0
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d902      	bls.n	8008f46 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d142      	bne.n	8008fcc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	21e0      	movs	r1, #224	@ 0xe0
 8008f52:	438a      	bics	r2, r1
 8008f54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	2382      	movs	r3, #130	@ 0x82
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d113      	bne.n	8008f8a <SPI_WaitFifoStateUntilTimeout+0xce>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	2380      	movs	r3, #128	@ 0x80
 8008f68:	021b      	lsls	r3, r3, #8
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d005      	beq.n	8008f7a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	689a      	ldr	r2, [r3, #8]
 8008f72:	2380      	movs	r3, #128	@ 0x80
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d107      	bne.n	8008f8a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2140      	movs	r1, #64	@ 0x40
 8008f86:	438a      	bics	r2, r1
 8008f88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f8e:	2380      	movs	r3, #128	@ 0x80
 8008f90:	019b      	lsls	r3, r3, #6
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d110      	bne.n	8008fb8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4916      	ldr	r1, [pc, #88]	@ (8008ffc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008fa2:	400a      	ands	r2, r1
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2180      	movs	r1, #128	@ 0x80
 8008fb2:	0189      	lsls	r1, r1, #6
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	225d      	movs	r2, #93	@ 0x5d
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	225c      	movs	r2, #92	@ 0x5c
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e010      	b.n	8008fee <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d18e      	bne.n	8008f0a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	0018      	movs	r0, r3
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	b00a      	add	sp, #40	@ 0x28
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	46c0      	nop			@ (mov r8, r8)
 8008ff8:	20000010 	.word	0x20000010
 8008ffc:	ffffdfff 	.word	0xffffdfff

08009000 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af02      	add	r7, sp, #8
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	2382      	movs	r3, #130	@ 0x82
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	429a      	cmp	r2, r3
 8009016:	d113      	bne.n	8009040 <SPI_EndRxTransaction+0x40>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	2380      	movs	r3, #128	@ 0x80
 800901e:	021b      	lsls	r3, r3, #8
 8009020:	429a      	cmp	r2, r3
 8009022:	d005      	beq.n	8009030 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	2380      	movs	r3, #128	@ 0x80
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	429a      	cmp	r2, r3
 800902e:	d107      	bne.n	8009040 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2140      	movs	r1, #64	@ 0x40
 800903c:	438a      	bics	r2, r1
 800903e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	0013      	movs	r3, r2
 800904a:	2200      	movs	r2, #0
 800904c:	2180      	movs	r1, #128	@ 0x80
 800904e:	f7ff fea7 	bl	8008da0 <SPI_WaitFlagStateUntilTimeout>
 8009052:	1e03      	subs	r3, r0, #0
 8009054:	d007      	beq.n	8009066 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800905a:	2220      	movs	r2, #32
 800905c:	431a      	orrs	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e026      	b.n	80090b4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	2382      	movs	r3, #130	@ 0x82
 800906c:	005b      	lsls	r3, r3, #1
 800906e:	429a      	cmp	r2, r3
 8009070:	d11f      	bne.n	80090b2 <SPI_EndRxTransaction+0xb2>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	2380      	movs	r3, #128	@ 0x80
 8009078:	021b      	lsls	r3, r3, #8
 800907a:	429a      	cmp	r2, r3
 800907c:	d005      	beq.n	800908a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	2380      	movs	r3, #128	@ 0x80
 8009084:	00db      	lsls	r3, r3, #3
 8009086:	429a      	cmp	r2, r3
 8009088:	d113      	bne.n	80090b2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	23c0      	movs	r3, #192	@ 0xc0
 800908e:	00d9      	lsls	r1, r3, #3
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	0013      	movs	r3, r2
 8009098:	2200      	movs	r2, #0
 800909a:	f7ff ff0f 	bl	8008ebc <SPI_WaitFifoStateUntilTimeout>
 800909e:	1e03      	subs	r3, r0, #0
 80090a0:	d007      	beq.n	80090b2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090a6:	2220      	movs	r2, #32
 80090a8:	431a      	orrs	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e000      	b.n	80090b4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	0018      	movs	r0, r3
 80090b6:	46bd      	mov	sp, r7
 80090b8:	b004      	add	sp, #16
 80090ba:	bd80      	pop	{r7, pc}

080090bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	23c0      	movs	r3, #192	@ 0xc0
 80090cc:	0159      	lsls	r1, r3, #5
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	0013      	movs	r3, r2
 80090d6:	2200      	movs	r2, #0
 80090d8:	f7ff fef0 	bl	8008ebc <SPI_WaitFifoStateUntilTimeout>
 80090dc:	1e03      	subs	r3, r0, #0
 80090de:	d007      	beq.n	80090f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090e4:	2220      	movs	r2, #32
 80090e6:	431a      	orrs	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e027      	b.n	8009140 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	0013      	movs	r3, r2
 80090fa:	2200      	movs	r2, #0
 80090fc:	2180      	movs	r1, #128	@ 0x80
 80090fe:	f7ff fe4f 	bl	8008da0 <SPI_WaitFlagStateUntilTimeout>
 8009102:	1e03      	subs	r3, r0, #0
 8009104:	d007      	beq.n	8009116 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800910a:	2220      	movs	r2, #32
 800910c:	431a      	orrs	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e014      	b.n	8009140 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	23c0      	movs	r3, #192	@ 0xc0
 800911a:	00d9      	lsls	r1, r3, #3
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	0013      	movs	r3, r2
 8009124:	2200      	movs	r2, #0
 8009126:	f7ff fec9 	bl	8008ebc <SPI_WaitFifoStateUntilTimeout>
 800912a:	1e03      	subs	r3, r0, #0
 800912c:	d007      	beq.n	800913e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009132:	2220      	movs	r2, #32
 8009134:	431a      	orrs	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e000      	b.n	8009140 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	0018      	movs	r0, r3
 8009142:	46bd      	mov	sp, r7
 8009144:	b004      	add	sp, #16
 8009146:	bd80      	pop	{r7, pc}

08009148 <BH1750_Init>:
I2C_HandleTypeDef 	*bh1750_i2c;	// Handler to I2C interface
bh1750_mode_t 		bh1750_mode;	// Current sensor mode
uint8_t 			Bh1750_Mtreg;	// Current MT register value


bh1750_status_t BH1750_Init(I2C_HandleTypeDef *hi2c){
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8009150:	4b09      	ldr	r3, [pc, #36]	@ (8009178 <BH1750_Init+0x30>)
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]
	if(BH1750_OK == BH1750_Reset()){
 8009156:	f000 f811 	bl	800917c <BH1750_Reset>
 800915a:	1e03      	subs	r3, r0, #0
 800915c:	d106      	bne.n	800916c <BH1750_Init+0x24>
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 800915e:	2045      	movs	r0, #69	@ 0x45
 8009160:	f000 f85c 	bl	800921c <BH1750_SetMtreg>
 8009164:	1e03      	subs	r3, r0, #0
 8009166:	d101      	bne.n	800916c <BH1750_Init+0x24>
			return BH1750_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	e000      	b.n	800916e <BH1750_Init+0x26>
	}
	return BH1750_ERROR;
 800916c:	2301      	movs	r3, #1
}
 800916e:	0018      	movs	r0, r3
 8009170:	46bd      	mov	sp, r7
 8009172:	b002      	add	sp, #8
 8009174:	bd80      	pop	{r7, pc}
 8009176:	46c0      	nop			@ (mov r8, r8)
 8009178:	20000284 	.word	0x20000284

0800917c <BH1750_Reset>:

bh1750_status_t BH1750_Reset(void){
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8009182:	1dfb      	adds	r3, r7, #7
 8009184:	2207      	movs	r2, #7
 8009186:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8009188:	4b08      	ldr	r3, [pc, #32]	@ (80091ac <BH1750_Reset+0x30>)
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	1dfa      	adds	r2, r7, #7
 800918e:	230a      	movs	r3, #10
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	2301      	movs	r3, #1
 8009194:	2146      	movs	r1, #70	@ 0x46
 8009196:	f7fc fd2b 	bl	8005bf0 <HAL_I2C_Master_Transmit>
 800919a:	1e03      	subs	r3, r0, #0
 800919c:	d101      	bne.n	80091a2 <BH1750_Reset+0x26>
		return BH1750_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	e000      	b.n	80091a4 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 80091a2:	2301      	movs	r3, #1
}
 80091a4:	0018      	movs	r0, r3
 80091a6:	46bd      	mov	sp, r7
 80091a8:	b002      	add	sp, #8
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	20000284 	.word	0x20000284

080091b0 <BH1750_SetMode>:
		return BH1750_OK;

	return BH1750_ERROR;
}

bh1750_status_t BH1750_SetMode(bh1750_mode_t Mode){
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	0002      	movs	r2, r0
 80091b8:	1dfb      	adds	r3, r7, #7
 80091ba:	701a      	strb	r2, [r3, #0]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80091bc:	1dfb      	adds	r3, r7, #7
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	091b      	lsrs	r3, r3, #4
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d107      	bne.n	80091d8 <BH1750_SetMode+0x28>
 80091c8:	1dfb      	adds	r3, r7, #7
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	095b      	lsrs	r3, r3, #5
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <BH1750_SetMode+0x28>
 80091d4:	2301      	movs	r3, #1
 80091d6:	e019      	b.n	800920c <BH1750_SetMode+0x5c>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80091d8:	1dfb      	adds	r3, r7, #7
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	001a      	movs	r2, r3
 80091de:	230c      	movs	r3, #12
 80091e0:	4013      	ands	r3, r2
 80091e2:	d001      	beq.n	80091e8 <BH1750_SetMode+0x38>
 80091e4:	2301      	movs	r3, #1
 80091e6:	e011      	b.n	800920c <BH1750_SetMode+0x5c>

	bh1750_mode = Mode;
 80091e8:	1dfb      	adds	r3, r7, #7
 80091ea:	781a      	ldrb	r2, [r3, #0]
 80091ec:	4b09      	ldr	r3, [pc, #36]	@ (8009214 <BH1750_SetMode+0x64>)
 80091ee:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80091f0:	4b09      	ldr	r3, [pc, #36]	@ (8009218 <BH1750_SetMode+0x68>)
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	1dfa      	adds	r2, r7, #7
 80091f6:	230a      	movs	r3, #10
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	2301      	movs	r3, #1
 80091fc:	2146      	movs	r1, #70	@ 0x46
 80091fe:	f7fc fcf7 	bl	8005bf0 <HAL_I2C_Master_Transmit>
 8009202:	1e03      	subs	r3, r0, #0
 8009204:	d101      	bne.n	800920a <BH1750_SetMode+0x5a>
		return BH1750_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	e000      	b.n	800920c <BH1750_SetMode+0x5c>

	return BH1750_ERROR;
 800920a:	2301      	movs	r3, #1
}
 800920c:	0018      	movs	r0, r3
 800920e:	46bd      	mov	sp, r7
 8009210:	b002      	add	sp, #8
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20000288 	.word	0x20000288
 8009218:	20000284 	.word	0x20000284

0800921c <BH1750_SetMtreg>:

bh1750_status_t BH1750_SetMtreg(uint8_t Mtreg){
 800921c:	b5b0      	push	{r4, r5, r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af02      	add	r7, sp, #8
 8009222:	0002      	movs	r2, r0
 8009224:	1dfb      	adds	r3, r7, #7
 8009226:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8009228:	1dfb      	adds	r3, r7, #7
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	2b1e      	cmp	r3, #30
 800922e:	d903      	bls.n	8009238 <BH1750_SetMtreg+0x1c>
 8009230:	1dfb      	adds	r3, r7, #7
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2bff      	cmp	r3, #255	@ 0xff
 8009236:	d101      	bne.n	800923c <BH1750_SetMtreg+0x20>
		return BH1750_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e042      	b.n	80092c2 <BH1750_SetMtreg+0xa6>
	}

	Bh1750_Mtreg = Mtreg;
 800923c:	4b23      	ldr	r3, [pc, #140]	@ (80092cc <BH1750_SetMtreg+0xb0>)
 800923e:	1dfa      	adds	r2, r7, #7
 8009240:	7812      	ldrb	r2, [r2, #0]
 8009242:	701a      	strb	r2, [r3, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8009244:	1dfb      	adds	r3, r7, #7
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2240      	movs	r2, #64	@ 0x40
 800924e:	4313      	orrs	r3, r2
 8009250:	b2da      	uxtb	r2, r3
 8009252:	210c      	movs	r1, #12
 8009254:	187b      	adds	r3, r7, r1
 8009256:	701a      	strb	r2, [r3, #0]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8009258:	1dfb      	adds	r3, r7, #7
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	b25b      	sxtb	r3, r3
 800925e:	221f      	movs	r2, #31
 8009260:	4013      	ands	r3, r2
 8009262:	b25b      	sxtb	r3, r3
 8009264:	2260      	movs	r2, #96	@ 0x60
 8009266:	4313      	orrs	r3, r2
 8009268:	b25b      	sxtb	r3, r3
 800926a:	b2da      	uxtb	r2, r3
 800926c:	187b      	adds	r3, r7, r1
 800926e:	705a      	strb	r2, [r3, #1]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8009270:	4b17      	ldr	r3, [pc, #92]	@ (80092d0 <BH1750_SetMtreg+0xb4>)
 8009272:	6818      	ldr	r0, [r3, #0]
 8009274:	250f      	movs	r5, #15
 8009276:	197c      	adds	r4, r7, r5
 8009278:	187a      	adds	r2, r7, r1
 800927a:	230a      	movs	r3, #10
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	2301      	movs	r3, #1
 8009280:	2146      	movs	r1, #70	@ 0x46
 8009282:	f7fc fcb5 	bl	8005bf0 <HAL_I2C_Master_Transmit>
 8009286:	0003      	movs	r3, r0
 8009288:	7023      	strb	r3, [r4, #0]
	if (HAL_OK != retCode) {
 800928a:	197b      	adds	r3, r7, r5
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <BH1750_SetMtreg+0x7a>
		return BH1750_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e015      	b.n	80092c2 <BH1750_SetMtreg+0xa6>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8009296:	4b0e      	ldr	r3, [pc, #56]	@ (80092d0 <BH1750_SetMtreg+0xb4>)
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	250f      	movs	r5, #15
 800929c:	197c      	adds	r4, r7, r5
 800929e:	230c      	movs	r3, #12
 80092a0:	18fb      	adds	r3, r7, r3
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	230a      	movs	r3, #10
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	2301      	movs	r3, #1
 80092aa:	2146      	movs	r1, #70	@ 0x46
 80092ac:	f7fc fca0 	bl	8005bf0 <HAL_I2C_Master_Transmit>
 80092b0:	0003      	movs	r3, r0
 80092b2:	7023      	strb	r3, [r4, #0]
	if (HAL_OK == retCode) {
 80092b4:	197b      	adds	r3, r7, r5
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <BH1750_SetMtreg+0xa4>
		return BH1750_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	e000      	b.n	80092c2 <BH1750_SetMtreg+0xa6>
	}

	return BH1750_ERROR;
 80092c0:	2301      	movs	r3, #1
}
 80092c2:	0018      	movs	r0, r3
 80092c4:	46bd      	mov	sp, r7
 80092c6:	b004      	add	sp, #16
 80092c8:	bdb0      	pop	{r4, r5, r7, pc}
 80092ca:	46c0      	nop			@ (mov r8, r8)
 80092cc:	20000289 	.word	0x20000289
 80092d0:	20000284 	.word	0x20000284

080092d4 <BH1750_ReadLight>:
		return BH1750_OK;

	return BH1750_ERROR;
}

bh1750_status_t BH1750_ReadLight(float *Result){
 80092d4:	b590      	push	{r4, r7, lr}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af02      	add	r7, sp, #8
 80092da:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10)){
 80092dc:	4b24      	ldr	r3, [pc, #144]	@ (8009370 <BH1750_ReadLight+0x9c>)
 80092de:	6818      	ldr	r0, [r3, #0]
 80092e0:	2408      	movs	r4, #8
 80092e2:	193a      	adds	r2, r7, r4
 80092e4:	230a      	movs	r3, #10
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	2302      	movs	r3, #2
 80092ea:	2146      	movs	r1, #70	@ 0x46
 80092ec:	f7fc fd88 	bl	8005e00 <HAL_I2C_Master_Receive>
 80092f0:	1e03      	subs	r3, r0, #0
 80092f2:	d138      	bne.n	8009366 <BH1750_ReadLight+0x92>
		result = (tmp[0] << 8) | (tmp[1]);
 80092f4:	193b      	adds	r3, r7, r4
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	021b      	lsls	r3, r3, #8
 80092fa:	193a      	adds	r2, r7, r4
 80092fc:	7852      	ldrb	r2, [r2, #1]
 80092fe:	4313      	orrs	r3, r2
 8009300:	0018      	movs	r0, r3
 8009302:	f7f7 fa65 	bl	80007d0 <__aeabi_i2f>
 8009306:	1c03      	adds	r3, r0, #0
 8009308:	60fb      	str	r3, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG){
 800930a:	4b1a      	ldr	r3, [pc, #104]	@ (8009374 <BH1750_ReadLight+0xa0>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b45      	cmp	r3, #69	@ 0x45
 8009310:	d010      	beq.n	8009334 <BH1750_ReadLight+0x60>
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8009312:	4b18      	ldr	r3, [pc, #96]	@ (8009374 <BH1750_ReadLight+0xa0>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	0018      	movs	r0, r3
 8009318:	f7f7 faa6 	bl	8000868 <__aeabi_ui2f>
 800931c:	1c03      	adds	r3, r0, #0
 800931e:	1c19      	adds	r1, r3, #0
 8009320:	4815      	ldr	r0, [pc, #84]	@ (8009378 <BH1750_ReadLight+0xa4>)
 8009322:	f7f6 fff7 	bl	8000314 <__aeabi_fdiv>
 8009326:	1c03      	adds	r3, r0, #0
 8009328:	1c19      	adds	r1, r3, #0
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7f7 f912 	bl	8000554 <__aeabi_fmul>
 8009330:	1c03      	adds	r3, r0, #0
 8009332:	60fb      	str	r3, [r7, #12]
		}

		if(bh1750_mode == ONETIME_HIGH_RES_MODE_2 || bh1750_mode == CONTINUOUS_HIGH_RES_MODE_2){
 8009334:	4b11      	ldr	r3, [pc, #68]	@ (800937c <BH1750_ReadLight+0xa8>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b21      	cmp	r3, #33	@ 0x21
 800933a:	d003      	beq.n	8009344 <BH1750_ReadLight+0x70>
 800933c:	4b0f      	ldr	r3, [pc, #60]	@ (800937c <BH1750_ReadLight+0xa8>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2b11      	cmp	r3, #17
 8009342:	d106      	bne.n	8009352 <BH1750_ReadLight+0x7e>
			result /= 2.0;
 8009344:	2180      	movs	r1, #128	@ 0x80
 8009346:	05c9      	lsls	r1, r1, #23
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7f6 ffe3 	bl	8000314 <__aeabi_fdiv>
 800934e:	1c03      	adds	r3, r0, #0
 8009350:	60fb      	str	r3, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8009352:	490b      	ldr	r1, [pc, #44]	@ (8009380 <BH1750_ReadLight+0xac>)
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f7f6 ffdd 	bl	8000314 <__aeabi_fdiv>
 800935a:	1c03      	adds	r3, r0, #0
 800935c:	1c1a      	adds	r2, r3, #0
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	601a      	str	r2, [r3, #0]
		return BH1750_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	e000      	b.n	8009368 <BH1750_ReadLight+0x94>
	}
	return BH1750_ERROR;
 8009366:	2301      	movs	r3, #1
}
 8009368:	0018      	movs	r0, r3
 800936a:	46bd      	mov	sp, r7
 800936c:	b005      	add	sp, #20
 800936e:	bd90      	pop	{r4, r7, pc}
 8009370:	20000284 	.word	0x20000284
 8009374:	20000289 	.word	0x20000289
 8009378:	428a0000 	.word	0x428a0000
 800937c:	20000288 	.word	0x20000288
 8009380:	3f99999a 	.word	0x3f99999a

08009384 <RadioGetFskBandwidthRegValue>:
 * Returns the known FSK bandwidth registers value
 *
 * @param  bandwidth Bandwidth value in Hz
 * @retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue(uint32_t bandwidth){
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	if (bandwidth == 0){
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <RadioGetFskBandwidthRegValue+0x12>
		return (0x1F);
 8009392:	231f      	movs	r3, #31
 8009394:	e02b      	b.n	80093ee <RadioGetFskBandwidthRegValue+0x6a>
	}

	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++){
 8009396:	230f      	movs	r3, #15
 8009398:	18fb      	adds	r3, r7, r3
 800939a:	2200      	movs	r2, #0
 800939c:	701a      	strb	r2, [r3, #0]
 800939e:	e020      	b.n	80093e2 <RadioGetFskBandwidthRegValue+0x5e>
		if ((bandwidth >= FskBandwidths[i].bandwidth) && (bandwidth < FskBandwidths[i + 1].bandwidth)){
 80093a0:	210f      	movs	r1, #15
 80093a2:	187b      	adds	r3, r7, r1
 80093a4:	781a      	ldrb	r2, [r3, #0]
 80093a6:	4b14      	ldr	r3, [pc, #80]	@ (80093f8 <RadioGetFskBandwidthRegValue+0x74>)
 80093a8:	00d2      	lsls	r2, r2, #3
 80093aa:	58d3      	ldr	r3, [r2, r3]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d311      	bcc.n	80093d6 <RadioGetFskBandwidthRegValue+0x52>
 80093b2:	187b      	adds	r3, r7, r1
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	4b0f      	ldr	r3, [pc, #60]	@ (80093f8 <RadioGetFskBandwidthRegValue+0x74>)
 80093ba:	00d2      	lsls	r2, r2, #3
 80093bc:	58d3      	ldr	r3, [r2, r3]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d208      	bcs.n	80093d6 <RadioGetFskBandwidthRegValue+0x52>
			return FskBandwidths[i + 1].RegValue;
 80093c4:	187b      	adds	r3, r7, r1
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	3301      	adds	r3, #1
 80093ca:	4a0b      	ldr	r2, [pc, #44]	@ (80093f8 <RadioGetFskBandwidthRegValue+0x74>)
 80093cc:	00db      	lsls	r3, r3, #3
 80093ce:	18d3      	adds	r3, r2, r3
 80093d0:	3304      	adds	r3, #4
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	e00b      	b.n	80093ee <RadioGetFskBandwidthRegValue+0x6a>
	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++){
 80093d6:	210f      	movs	r1, #15
 80093d8:	187b      	adds	r3, r7, r1
 80093da:	781a      	ldrb	r2, [r3, #0]
 80093dc:	187b      	adds	r3, r7, r1
 80093de:	3201      	adds	r2, #1
 80093e0:	701a      	strb	r2, [r3, #0]
 80093e2:	230f      	movs	r3, #15
 80093e4:	18fb      	adds	r3, r7, r3
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	2b14      	cmp	r3, #20
 80093ea:	d9d9      	bls.n	80093a0 <RadioGetFskBandwidthRegValue+0x1c>
		}
	}
	// In case value not found, return bandwidth 0
	return (0x1F);
 80093ec:	231f      	movs	r3, #31
}
 80093ee:	0018      	movs	r0, r3
 80093f0:	46bd      	mov	sp, r7
 80093f2:	b004      	add	sp, #16
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	46c0      	nop			@ (mov r8, r8)
 80093f8:	0800bf8c 	.word	0x0800bf8c

080093fc <RadioInit>:

void RadioInit(RadioEvents_t *events){
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 8009404:	4b0f      	ldr	r3, [pc, #60]	@ (8009444 <RadioInit+0x48>)
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	601a      	str	r2, [r3, #0]
	SX126xInit();
 800940a:	f001 f8fd 	bl	800a608 <SX126xInit>
	SX126xSetStandby(STDBY_RC);
 800940e:	2000      	movs	r0, #0
 8009410:	f001 fa64 	bl	800a8dc <SX126xSetStandby>
	if(LORA_USE_LDO){
		SX126xSetRegulatorMode(USE_LDO);
 8009414:	2000      	movs	r0, #0
 8009416:	f001 fb55 	bl	800aac4 <SX126xSetRegulatorMode>
	}
	else{
		SX126xSetRegulatorMode(USE_DCDC);
	}

	SX126xSetBufferBaseAddress(0x00, 0x00);
 800941a:	2100      	movs	r1, #0
 800941c:	2000      	movs	r0, #0
 800941e:	f001 fed3 	bl	800b1c8 <SX126xSetBufferBaseAddress>
	SX126xSetTxParams(0, RADIO_RAMP_200_US);
 8009422:	2104      	movs	r1, #4
 8009424:	2000      	movs	r0, #0
 8009426:	f001 fcbb 	bl	800ada0 <SX126xSetTxParams>
	SX126xSetDioIrqParams(IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 800942a:	4907      	ldr	r1, [pc, #28]	@ (8009448 <RadioInit+0x4c>)
 800942c:	4806      	ldr	r0, [pc, #24]	@ (8009448 <RadioInit+0x4c>)
 800942e:	2300      	movs	r3, #0
 8009430:	2200      	movs	r2, #0
 8009432:	f001 fbd9 	bl	800abe8 <SX126xSetDioIrqParams>
//	TxTimeoutTimer.oneShot = true;
//	RxTimeoutTimer.oneShot = true;
//	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
//	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);

	IrqFired = false;
 8009436:	4b05      	ldr	r3, [pc, #20]	@ (800944c <RadioInit+0x50>)
 8009438:	2200      	movs	r2, #0
 800943a:	701a      	strb	r2, [r3, #0]
}
 800943c:	46c0      	nop			@ (mov r8, r8)
 800943e:	46bd      	mov	sp, r7
 8009440:	b002      	add	sp, #8
 8009442:	bd80      	pop	{r7, pc}
 8009444:	200003b4 	.word	0x200003b4
 8009448:	0000ffff 	.word	0x0000ffff
 800944c:	200003ab 	.word	0x200003ab

08009450 <RadioReInit>:

void RadioReInit(RadioEvents_t *events){
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 8009458:	4b05      	ldr	r3, [pc, #20]	@ (8009470 <RadioReInit+0x20>)
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	601a      	str	r2, [r3, #0]
	SX126xReInit();
 800945e:	f001 f8e5 	bl	800a62c <SX126xReInit>
//	TxTimeoutTimer.oneShot = true;
//	RxTimeoutTimer.oneShot = true;
//	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
//	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);

	IrqFired = false;
 8009462:	4b04      	ldr	r3, [pc, #16]	@ (8009474 <RadioReInit+0x24>)
 8009464:	2200      	movs	r2, #0
 8009466:	701a      	strb	r2, [r3, #0]
}
 8009468:	46c0      	nop			@ (mov r8, r8)
 800946a:	46bd      	mov	sp, r7
 800946c:	b002      	add	sp, #8
 800946e:	bd80      	pop	{r7, pc}
 8009470:	200003b4 	.word	0x200003b4
 8009474:	200003ab 	.word	0x200003ab

08009478 <RadioGetStatus>:

RadioState_t RadioGetStatus(void){
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
	switch (SX126xGetOperatingMode()){
 800947c:	f001 f8dc 	bl	800a638 <SX126xGetOperatingMode>
 8009480:	0003      	movs	r3, r0
 8009482:	2b07      	cmp	r3, #7
 8009484:	d009      	beq.n	800949a <RadioGetStatus+0x22>
 8009486:	dc0a      	bgt.n	800949e <RadioGetStatus+0x26>
 8009488:	2b04      	cmp	r3, #4
 800948a:	d002      	beq.n	8009492 <RadioGetStatus+0x1a>
 800948c:	2b05      	cmp	r3, #5
 800948e:	d002      	beq.n	8009496 <RadioGetStatus+0x1e>
 8009490:	e005      	b.n	800949e <RadioGetStatus+0x26>
		case MODE_TX:
		return RF_TX_RUNNING;
 8009492:	2302      	movs	r3, #2
 8009494:	e004      	b.n	80094a0 <RadioGetStatus+0x28>
		case MODE_RX:
		return RF_RX_RUNNING;
 8009496:	2301      	movs	r3, #1
 8009498:	e002      	b.n	80094a0 <RadioGetStatus+0x28>
		case MODE_CAD:
		return RF_CAD;
 800949a:	2303      	movs	r3, #3
 800949c:	e000      	b.n	80094a0 <RadioGetStatus+0x28>
		default:
		return RF_IDLE;
 800949e:	2300      	movs	r3, #0
	}
}
 80094a0:	0018      	movs	r0, r3
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <RadioSetModem>:

void RadioSetModem(RadioModems_t modem){
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	0002      	movs	r2, r0
 80094b0:	1dfb      	adds	r3, r7, #7
 80094b2:	701a      	strb	r2, [r3, #0]
	switch (modem){
 80094b4:	1dfb      	adds	r3, r7, #7
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d00a      	beq.n	80094d2 <RadioSetModem+0x2a>
		default:
		case MODEM_FSK:
			SX126xSetPacketType(PACKET_TYPE_GFSK);
 80094bc:	2000      	movs	r0, #0
 80094be:	f001 fc4f 	bl	800ad60 <SX126xSetPacketType>
			// When switching to GFSK mode the LoRa SyncWord register value is reset
			// Thus, we also reset the RadioPublicNetwork variable
			RadioPublicNetwork.Current = false;
 80094c2:	4b11      	ldr	r3, [pc, #68]	@ (8009508 <RadioSetModem+0x60>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	705a      	strb	r2, [r3, #1]
			_modem = modem;
 80094c8:	4b10      	ldr	r3, [pc, #64]	@ (800950c <RadioSetModem+0x64>)
 80094ca:	1dfa      	adds	r2, r7, #7
 80094cc:	7812      	ldrb	r2, [r2, #0]
 80094ce:	701a      	strb	r2, [r3, #0]
		break;
 80094d0:	e016      	b.n	8009500 <RadioSetModem+0x58>
		case MODEM_LORA:
			SX126xSetPacketType(PACKET_TYPE_LORA);
 80094d2:	2001      	movs	r0, #1
 80094d4:	f001 fc44 	bl	800ad60 <SX126xSetPacketType>
			// Public/Private network register is reset when switching modems
			if (RadioPublicNetwork.Current != RadioPublicNetwork.Previous){
 80094d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009508 <RadioSetModem+0x60>)
 80094da:	785a      	ldrb	r2, [r3, #1]
 80094dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009508 <RadioSetModem+0x60>)
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d008      	beq.n	80094f6 <RadioSetModem+0x4e>
				RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 80094e4:	4b08      	ldr	r3, [pc, #32]	@ (8009508 <RadioSetModem+0x60>)
 80094e6:	781a      	ldrb	r2, [r3, #0]
 80094e8:	4b07      	ldr	r3, [pc, #28]	@ (8009508 <RadioSetModem+0x60>)
 80094ea:	705a      	strb	r2, [r3, #1]
				RadioSetPublicNetwork(RadioPublicNetwork.Current);
 80094ec:	4b06      	ldr	r3, [pc, #24]	@ (8009508 <RadioSetModem+0x60>)
 80094ee:	785b      	ldrb	r3, [r3, #1]
 80094f0:	0018      	movs	r0, r3
 80094f2:	f000 feb1 	bl	800a258 <RadioSetPublicNetwork>
			}
			_modem = modem;
 80094f6:	4b05      	ldr	r3, [pc, #20]	@ (800950c <RadioSetModem+0x64>)
 80094f8:	1dfa      	adds	r2, r7, #7
 80094fa:	7812      	ldrb	r2, [r2, #0]
 80094fc:	701a      	strb	r2, [r3, #0]
		break;
 80094fe:	46c0      	nop			@ (mov r8, r8)
	}
}
 8009500:	46c0      	nop			@ (mov r8, r8)
 8009502:	46bd      	mov	sp, r7
 8009504:	b002      	add	sp, #8
 8009506:	bd80      	pop	{r7, pc}
 8009508:	200003b0 	.word	0x200003b0
 800950c:	200003ae 	.word	0x200003ae

08009510 <RadioSetChannel>:

void RadioSetChannel(uint32_t freq){
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
	SX126xSetRfFrequency(freq);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	0018      	movs	r0, r3
 800951c:	f001 fbda 	bl	800acd4 <SX126xSetRfFrequency>
}
 8009520:	46c0      	nop			@ (mov r8, r8)
 8009522:	46bd      	mov	sp, r7
 8009524:	b002      	add	sp, #8
 8009526:	bd80      	pop	{r7, pc}

08009528 <RadioIsChannelFree>:

bool RadioIsChannelFree(RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime){
 8009528:	b5b0      	push	{r4, r5, r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	0011      	movs	r1, r2
 8009532:	607b      	str	r3, [r7, #4]
 8009534:	230f      	movs	r3, #15
 8009536:	18fb      	adds	r3, r7, r3
 8009538:	1c02      	adds	r2, r0, #0
 800953a:	701a      	strb	r2, [r3, #0]
 800953c:	230c      	movs	r3, #12
 800953e:	18fb      	adds	r3, r7, r3
 8009540:	1c0a      	adds	r2, r1, #0
 8009542:	801a      	strh	r2, [r3, #0]
	bool status = true;
 8009544:	2317      	movs	r3, #23
 8009546:	18fb      	adds	r3, r7, r3
 8009548:	2201      	movs	r2, #1
 800954a:	701a      	strb	r2, [r3, #0]
	int16_t rssi = 0;
 800954c:	2314      	movs	r3, #20
 800954e:	18fb      	adds	r3, r7, r3
 8009550:	2200      	movs	r2, #0
 8009552:	801a      	strh	r2, [r3, #0]
	uint32_t carrierSenseTime = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	613b      	str	r3, [r7, #16]

	if (RadioGetStatus() != RF_IDLE){
 8009558:	f7ff ff8e 	bl	8009478 <RadioGetStatus>
 800955c:	1e03      	subs	r3, r0, #0
 800955e:	d001      	beq.n	8009564 <RadioIsChannelFree+0x3c>
		return false;
 8009560:	2300      	movs	r3, #0
 8009562:	e039      	b.n	80095d8 <RadioIsChannelFree+0xb0>
	}

	RadioSetModem(modem);
 8009564:	230f      	movs	r3, #15
 8009566:	18fb      	adds	r3, r7, r3
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	0018      	movs	r0, r3
 800956c:	f7ff ff9c 	bl	80094a8 <RadioSetModem>
	RadioSetChannel(freq);
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	0018      	movs	r0, r3
 8009574:	f7ff ffcc 	bl	8009510 <RadioSetChannel>
	RadioRx(0);
 8009578:	2000      	movs	r0, #0
 800957a:	f000 fd21 	bl	8009fc0 <RadioRx>

	HAL_Delay(1);
 800957e:	2001      	movs	r0, #1
 8009580:	f7f9 ffca 	bl	8003518 <HAL_Delay>

	carrierSenseTime = HAL_GetTick();
 8009584:	f7f9 ffbe 	bl	8003504 <HAL_GetTick>
 8009588:	0003      	movs	r3, r0
 800958a:	613b      	str	r3, [r7, #16]

	while (HAL_GetTick() - carrierSenseTime < maxCarrierSenseTime){
 800958c:	e017      	b.n	80095be <RadioIsChannelFree+0x96>
		rssi = RadioRssi(modem);
 800958e:	2514      	movs	r5, #20
 8009590:	197c      	adds	r4, r7, r5
 8009592:	230f      	movs	r3, #15
 8009594:	18fb      	adds	r3, r7, r3
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	0018      	movs	r0, r3
 800959a:	f000 fdc4 	bl	800a126 <RadioRssi>
 800959e:	0003      	movs	r3, r0
 80095a0:	8023      	strh	r3, [r4, #0]
		if (rssi > rssiThresh){
 80095a2:	197a      	adds	r2, r7, r5
 80095a4:	230c      	movs	r3, #12
 80095a6:	18fb      	adds	r3, r7, r3
 80095a8:	2100      	movs	r1, #0
 80095aa:	5e52      	ldrsh	r2, [r2, r1]
 80095ac:	2100      	movs	r1, #0
 80095ae:	5e5b      	ldrsh	r3, [r3, r1]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	dd04      	ble.n	80095be <RadioIsChannelFree+0x96>
			status = false;
 80095b4:	2317      	movs	r3, #23
 80095b6:	18fb      	adds	r3, r7, r3
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
			break;
 80095bc:	e007      	b.n	80095ce <RadioIsChannelFree+0xa6>
	while (HAL_GetTick() - carrierSenseTime < maxCarrierSenseTime){
 80095be:	f7f9 ffa1 	bl	8003504 <HAL_GetTick>
 80095c2:	0002      	movs	r2, r0
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d8df      	bhi.n	800958e <RadioIsChannelFree+0x66>
		}
	}
	RadioSleep();
 80095ce:	f000 fcd7 	bl	8009f80 <RadioSleep>
	return status;
 80095d2:	2317      	movs	r3, #23
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	781b      	ldrb	r3, [r3, #0]
}
 80095d8:	0018      	movs	r0, r3
 80095da:	46bd      	mov	sp, r7
 80095dc:	b006      	add	sp, #24
 80095de:	bdb0      	pop	{r4, r5, r7, pc}

080095e0 <RadioRandom>:

uint32_t RadioRandom(void){
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
	uint32_t rnd = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	607b      	str	r3, [r7, #4]
	/*
	 * Radio setup for random number generation
	 */
	// Set LoRa modem ON
	RadioSetModem(MODEM_LORA);
 80095ea:	2001      	movs	r0, #1
 80095ec:	f7ff ff5c 	bl	80094a8 <RadioSetModem>
	// Set radio in continuous reception
	SX126xSetRx(0);
 80095f0:	2000      	movs	r0, #0
 80095f2:	f001 f9b1 	bl	800a958 <SX126xSetRx>

	rnd = SX126xGetRandom();
 80095f6:	f001 f93d 	bl	800a874 <SX126xGetRandom>
 80095fa:	0003      	movs	r3, r0
 80095fc:	607b      	str	r3, [r7, #4]
	RadioSleep();
 80095fe:	f000 fcbf 	bl	8009f80 <RadioSleep>

	return rnd;
 8009602:	687b      	ldr	r3, [r7, #4]
}
 8009604:	0018      	movs	r0, r3
 8009606:	46bd      	mov	sp, r7
 8009608:	b002      	add	sp, #8
 800960a:	bd80      	pop	{r7, pc}

0800960c <RadioSetRxConfig>:
					  uint32_t bandwidthAfc, uint16_t preambleLen,
					  uint16_t symbTimeout, bool fixLen,
					  uint8_t payloadLen,
					  bool crcOn, bool freqHopOn, uint8_t hopPeriod,
					  bool iqInverted, bool rxContinuous)
{
 800960c:	b5b0      	push	{r4, r5, r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60b9      	str	r1, [r7, #8]
 8009614:	607a      	str	r2, [r7, #4]
 8009616:	0019      	movs	r1, r3
 8009618:	230f      	movs	r3, #15
 800961a:	18fb      	adds	r3, r7, r3
 800961c:	1c02      	adds	r2, r0, #0
 800961e:	701a      	strb	r2, [r3, #0]
 8009620:	230e      	movs	r3, #14
 8009622:	18fb      	adds	r3, r7, r3
 8009624:	1c0a      	adds	r2, r1, #0
 8009626:	701a      	strb	r2, [r3, #0]

	RxContinuous = rxContinuous;
 8009628:	4bc2      	ldr	r3, [pc, #776]	@ (8009934 <RadioSetRxConfig+0x328>)
 800962a:	2224      	movs	r2, #36	@ 0x24
 800962c:	2128      	movs	r1, #40	@ 0x28
 800962e:	1852      	adds	r2, r2, r1
 8009630:	19d2      	adds	r2, r2, r7
 8009632:	7812      	ldrb	r2, [r2, #0]
 8009634:	701a      	strb	r2, [r3, #0]
	if (rxContinuous == true){
 8009636:	2324      	movs	r3, #36	@ 0x24
 8009638:	185b      	adds	r3, r3, r1
 800963a:	19db      	adds	r3, r3, r7
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <RadioSetRxConfig+0x3e>
		symbTimeout = 0;
 8009642:	2330      	movs	r3, #48	@ 0x30
 8009644:	18fb      	adds	r3, r7, r3
 8009646:	2200      	movs	r2, #0
 8009648:	801a      	strh	r2, [r3, #0]
	}
	if (fixLen == true){
 800964a:	2334      	movs	r3, #52	@ 0x34
 800964c:	18fb      	adds	r3, r7, r3
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d005      	beq.n	8009660 <RadioSetRxConfig+0x54>
		MaxPayloadLength = payloadLen;
 8009654:	4bb8      	ldr	r3, [pc, #736]	@ (8009938 <RadioSetRxConfig+0x32c>)
 8009656:	2238      	movs	r2, #56	@ 0x38
 8009658:	18ba      	adds	r2, r7, r2
 800965a:	7812      	ldrb	r2, [r2, #0]
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	e002      	b.n	8009666 <RadioSetRxConfig+0x5a>
	}
	else{
		MaxPayloadLength = 0xFF;
 8009660:	4bb5      	ldr	r3, [pc, #724]	@ (8009938 <RadioSetRxConfig+0x32c>)
 8009662:	22ff      	movs	r2, #255	@ 0xff
 8009664:	701a      	strb	r2, [r3, #0]
	}

	switch (modem){
 8009666:	230f      	movs	r3, #15
 8009668:	18fb      	adds	r3, r7, r3
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <RadioSetRxConfig+0x6c>
 8009670:	2b01      	cmp	r3, #1
 8009672:	d100      	bne.n	8009676 <RadioSetRxConfig+0x6a>
 8009674:	e0af      	b.n	80097d6 <RadioSetRxConfig+0x1ca>
			// WORKAROUND END
			// Timeout Max, Timeout handled directly in SetRx function
			RxTimeout = RXTIMEOUT_LORA_MAX;
		break;
	}
}
 8009676:	e159      	b.n	800992c <RadioSetRxConfig+0x320>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 8009678:	2000      	movs	r0, #0
 800967a:	f001 fa03 	bl	800aa84 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800967e:	4baf      	ldr	r3, [pc, #700]	@ (800993c <RadioSetRxConfig+0x330>)
 8009680:	2240      	movs	r2, #64	@ 0x40
 8009682:	2100      	movs	r1, #0
 8009684:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009686:	4bad      	ldr	r3, [pc, #692]	@ (800993c <RadioSetRxConfig+0x330>)
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	645a      	str	r2, [r3, #68]	@ 0x44
			SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800968c:	4bab      	ldr	r3, [pc, #684]	@ (800993c <RadioSetRxConfig+0x330>)
 800968e:	224c      	movs	r2, #76	@ 0x4c
 8009690:	210b      	movs	r1, #11
 8009692:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue(bandwidth);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	0018      	movs	r0, r3
 8009698:	f7ff fe74 	bl	8009384 <RadioGetFskBandwidthRegValue>
 800969c:	0003      	movs	r3, r0
 800969e:	0019      	movs	r1, r3
 80096a0:	4ba6      	ldr	r3, [pc, #664]	@ (800993c <RadioSetRxConfig+0x330>)
 80096a2:	224d      	movs	r2, #77	@ 0x4d
 80096a4:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80096a6:	4ba5      	ldr	r3, [pc, #660]	@ (800993c <RadioSetRxConfig+0x330>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 80096ac:	232c      	movs	r3, #44	@ 0x2c
 80096ae:	18fb      	adds	r3, r7, r3
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	4ba1      	ldr	r3, [pc, #644]	@ (800993c <RadioSetRxConfig+0x330>)
 80096b8:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80096ba:	4ba0      	ldr	r3, [pc, #640]	@ (800993c <RadioSetRxConfig+0x330>)
 80096bc:	2204      	movs	r2, #4
 80096be:	771a      	strb	r2, [r3, #28]
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80096c0:	4b9e      	ldr	r3, [pc, #632]	@ (800993c <RadioSetRxConfig+0x330>)
 80096c2:	2218      	movs	r2, #24
 80096c4:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80096c6:	4b9d      	ldr	r3, [pc, #628]	@ (800993c <RadioSetRxConfig+0x330>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	779a      	strb	r2, [r3, #30]
			SX126x.PacketParams.Params.Gfsk.HeaderType = (fixLen == true) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80096cc:	2334      	movs	r3, #52	@ 0x34
 80096ce:	18fb      	adds	r3, r7, r3
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2201      	movs	r2, #1
 80096d4:	4053      	eors	r3, r2
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	001a      	movs	r2, r3
 80096da:	4b98      	ldr	r3, [pc, #608]	@ (800993c <RadioSetRxConfig+0x330>)
 80096dc:	77da      	strb	r2, [r3, #31]
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80096de:	4b96      	ldr	r3, [pc, #600]	@ (8009938 <RadioSetRxConfig+0x32c>)
 80096e0:	7819      	ldrb	r1, [r3, #0]
 80096e2:	4b96      	ldr	r3, [pc, #600]	@ (800993c <RadioSetRxConfig+0x330>)
 80096e4:	2220      	movs	r2, #32
 80096e6:	5499      	strb	r1, [r3, r2]
			if (crcOn == true){
 80096e8:	233c      	movs	r3, #60	@ 0x3c
 80096ea:	18fb      	adds	r3, r7, r3
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <RadioSetRxConfig+0xf0>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80096f2:	4b92      	ldr	r3, [pc, #584]	@ (800993c <RadioSetRxConfig+0x330>)
 80096f4:	2221      	movs	r2, #33	@ 0x21
 80096f6:	21f2      	movs	r1, #242	@ 0xf2
 80096f8:	5499      	strb	r1, [r3, r2]
 80096fa:	e003      	b.n	8009704 <RadioSetRxConfig+0xf8>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80096fc:	4b8f      	ldr	r3, [pc, #572]	@ (800993c <RadioSetRxConfig+0x330>)
 80096fe:	2221      	movs	r2, #33	@ 0x21
 8009700:	2101      	movs	r1, #1
 8009702:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009704:	4b8d      	ldr	r3, [pc, #564]	@ (800993c <RadioSetRxConfig+0x330>)
 8009706:	2222      	movs	r2, #34	@ 0x22
 8009708:	2101      	movs	r1, #1
 800970a:	5499      	strb	r1, [r3, r2]
			RadioStandby();
 800970c:	f000 fc4f 	bl	8009fae <RadioStandby>
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 8009710:	4b8a      	ldr	r3, [pc, #552]	@ (800993c <RadioSetRxConfig+0x330>)
 8009712:	2240      	movs	r2, #64	@ 0x40
 8009714:	5c9b      	ldrb	r3, [r3, r2]
 8009716:	1e5a      	subs	r2, r3, #1
 8009718:	4193      	sbcs	r3, r2
 800971a:	b2db      	uxtb	r3, r3
 800971c:	0018      	movs	r0, r3
 800971e:	f7ff fec3 	bl	80094a8 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 8009722:	4b87      	ldr	r3, [pc, #540]	@ (8009940 <RadioSetRxConfig+0x334>)
 8009724:	0018      	movs	r0, r3
 8009726:	f001 fbb5 	bl	800ae94 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 800972a:	4b86      	ldr	r3, [pc, #536]	@ (8009944 <RadioSetRxConfig+0x338>)
 800972c:	0018      	movs	r0, r3
 800972e:	f001 fc57 	bl	800afe0 <SX126xSetPacketParams>
			syncWord[0] = 0xC1;
 8009732:	2110      	movs	r1, #16
 8009734:	187b      	adds	r3, r7, r1
 8009736:	22c1      	movs	r2, #193	@ 0xc1
 8009738:	701a      	strb	r2, [r3, #0]
			syncWord[1] = 0x94;
 800973a:	187b      	adds	r3, r7, r1
 800973c:	2294      	movs	r2, #148	@ 0x94
 800973e:	705a      	strb	r2, [r3, #1]
			syncWord[2] = 0xC1;
 8009740:	187b      	adds	r3, r7, r1
 8009742:	22c1      	movs	r2, #193	@ 0xc1
 8009744:	709a      	strb	r2, [r3, #2]
			syncWord[3] = 0x00;
 8009746:	187b      	adds	r3, r7, r1
 8009748:	2200      	movs	r2, #0
 800974a:	70da      	strb	r2, [r3, #3]
			syncWord[4] = 0x00;
 800974c:	187b      	adds	r3, r7, r1
 800974e:	2200      	movs	r2, #0
 8009750:	711a      	strb	r2, [r3, #4]
			syncWord[5] = 0x00;
 8009752:	187b      	adds	r3, r7, r1
 8009754:	2200      	movs	r2, #0
 8009756:	715a      	strb	r2, [r3, #5]
			syncWord[6] = 0x00;
 8009758:	187b      	adds	r3, r7, r1
 800975a:	2200      	movs	r2, #0
 800975c:	719a      	strb	r2, [r3, #6]
			syncWord[7] = 0x00;
 800975e:	187b      	adds	r3, r7, r1
 8009760:	2200      	movs	r2, #0
 8009762:	71da      	strb	r2, [r3, #7]
			SX126xSetSyncWord(syncWord);
 8009764:	187b      	adds	r3, r7, r1
 8009766:	0018      	movs	r0, r3
 8009768:	f000 ffe5 	bl	800a736 <SX126xSetSyncWord>
			SX126xSetWhiteningSeed(0x01FF);
 800976c:	4b76      	ldr	r3, [pc, #472]	@ (8009948 <RadioSetRxConfig+0x33c>)
 800976e:	0018      	movs	r0, r3
 8009770:	f001 f83e 	bl	800a7f0 <SX126xSetWhiteningSeed>
			RxTimeout = (uint32_t)(symbTimeout * ((1.0 / (double)datarate) * 8.0) * 1000);
 8009774:	2330      	movs	r3, #48	@ 0x30
 8009776:	18fb      	adds	r3, r7, r3
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	0018      	movs	r0, r3
 800977c:	f7f8 fefe 	bl	800257c <__aeabi_i2d>
 8009780:	0004      	movs	r4, r0
 8009782:	000d      	movs	r5, r1
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7f8 ff27 	bl	80025d8 <__aeabi_ui2d>
 800978a:	0002      	movs	r2, r0
 800978c:	000b      	movs	r3, r1
 800978e:	2000      	movs	r0, #0
 8009790:	496e      	ldr	r1, [pc, #440]	@ (800994c <RadioSetRxConfig+0x340>)
 8009792:	f7f7 fc0f 	bl	8000fb4 <__aeabi_ddiv>
 8009796:	0002      	movs	r2, r0
 8009798:	000b      	movs	r3, r1
 800979a:	0010      	movs	r0, r2
 800979c:	0019      	movs	r1, r3
 800979e:	2200      	movs	r2, #0
 80097a0:	4b6b      	ldr	r3, [pc, #428]	@ (8009950 <RadioSetRxConfig+0x344>)
 80097a2:	f7f8 f84b 	bl	800183c <__aeabi_dmul>
 80097a6:	0002      	movs	r2, r0
 80097a8:	000b      	movs	r3, r1
 80097aa:	0020      	movs	r0, r4
 80097ac:	0029      	movs	r1, r5
 80097ae:	f7f8 f845 	bl	800183c <__aeabi_dmul>
 80097b2:	0002      	movs	r2, r0
 80097b4:	000b      	movs	r3, r1
 80097b6:	0010      	movs	r0, r2
 80097b8:	0019      	movs	r1, r3
 80097ba:	2200      	movs	r2, #0
 80097bc:	4b65      	ldr	r3, [pc, #404]	@ (8009954 <RadioSetRxConfig+0x348>)
 80097be:	f7f8 f83d 	bl	800183c <__aeabi_dmul>
 80097c2:	0002      	movs	r2, r0
 80097c4:	000b      	movs	r3, r1
 80097c6:	0010      	movs	r0, r2
 80097c8:	0019      	movs	r1, r3
 80097ca:	f7f6 fd85 	bl	80002d8 <__aeabi_d2uiz>
 80097ce:	0002      	movs	r2, r0
 80097d0:	4b61      	ldr	r3, [pc, #388]	@ (8009958 <RadioSetRxConfig+0x34c>)
 80097d2:	601a      	str	r2, [r3, #0]
		break;
 80097d4:	e0aa      	b.n	800992c <RadioSetRxConfig+0x320>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 80097d6:	2000      	movs	r0, #0
 80097d8:	f001 f954 	bl	800aa84 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126xSetLoRaSymbNumTimeout(symbTimeout);
 80097dc:	2330      	movs	r3, #48	@ 0x30
 80097de:	18fb      	adds	r3, r7, r3
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	0018      	movs	r0, r3
 80097e6:	f001 f95d 	bl	800aaa4 <SX126xSetLoRaSymbNumTimeout>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80097ea:	4b54      	ldr	r3, [pc, #336]	@ (800993c <RadioSetRxConfig+0x330>)
 80097ec:	2240      	movs	r2, #64	@ 0x40
 80097ee:	2101      	movs	r1, #1
 80097f0:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)datarate;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	b2d9      	uxtb	r1, r3
 80097f6:	4b51      	ldr	r3, [pc, #324]	@ (800993c <RadioSetRxConfig+0x330>)
 80097f8:	2250      	movs	r2, #80	@ 0x50
 80097fa:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80097fc:	4a57      	ldr	r2, [pc, #348]	@ (800995c <RadioSetRxConfig+0x350>)
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	18d3      	adds	r3, r2, r3
 8009802:	7819      	ldrb	r1, [r3, #0]
 8009804:	4b4d      	ldr	r3, [pc, #308]	@ (800993c <RadioSetRxConfig+0x330>)
 8009806:	2251      	movs	r2, #81	@ 0x51
 8009808:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)coderate;
 800980a:	4b4c      	ldr	r3, [pc, #304]	@ (800993c <RadioSetRxConfig+0x330>)
 800980c:	220e      	movs	r2, #14
 800980e:	18ba      	adds	r2, r7, r2
 8009810:	2152      	movs	r1, #82	@ 0x52
 8009812:	7812      	ldrb	r2, [r2, #0]
 8009814:	545a      	strb	r2, [r3, r1]
			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12))) ||
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d105      	bne.n	8009828 <RadioSetRxConfig+0x21c>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b0b      	cmp	r3, #11
 8009820:	d008      	beq.n	8009834 <RadioSetRxConfig+0x228>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b0c      	cmp	r3, #12
 8009826:	d005      	beq.n	8009834 <RadioSetRxConfig+0x228>
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d107      	bne.n	800983e <RadioSetRxConfig+0x232>
				((bandwidth == 1) && (datarate == 12))){
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b0c      	cmp	r3, #12
 8009832:	d104      	bne.n	800983e <RadioSetRxConfig+0x232>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009834:	4b41      	ldr	r3, [pc, #260]	@ (800993c <RadioSetRxConfig+0x330>)
 8009836:	2253      	movs	r2, #83	@ 0x53
 8009838:	2101      	movs	r1, #1
 800983a:	5499      	strb	r1, [r3, r2]
 800983c:	e003      	b.n	8009846 <RadioSetRxConfig+0x23a>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800983e:	4b3f      	ldr	r3, [pc, #252]	@ (800993c <RadioSetRxConfig+0x330>)
 8009840:	2253      	movs	r2, #83	@ 0x53
 8009842:	2100      	movs	r1, #0
 8009844:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009846:	4b3d      	ldr	r3, [pc, #244]	@ (800993c <RadioSetRxConfig+0x330>)
 8009848:	2201      	movs	r2, #1
 800984a:	761a      	strb	r2, [r3, #24]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 800984c:	4b3b      	ldr	r3, [pc, #236]	@ (800993c <RadioSetRxConfig+0x330>)
 800984e:	2250      	movs	r2, #80	@ 0x50
 8009850:	5c9b      	ldrb	r3, [r3, r2]
 8009852:	2b05      	cmp	r3, #5
 8009854:	d004      	beq.n	8009860 <RadioSetRxConfig+0x254>
				(SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6)){
 8009856:	4b39      	ldr	r3, [pc, #228]	@ (800993c <RadioSetRxConfig+0x330>)
 8009858:	2250      	movs	r2, #80	@ 0x50
 800985a:	5c9b      	ldrb	r3, [r3, r2]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 800985c:	2b06      	cmp	r3, #6
 800985e:	d10e      	bne.n	800987e <RadioSetRxConfig+0x272>
				if (preambleLen < 12){
 8009860:	232c      	movs	r3, #44	@ 0x2c
 8009862:	18fb      	adds	r3, r7, r3
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	2b0b      	cmp	r3, #11
 8009868:	d803      	bhi.n	8009872 <RadioSetRxConfig+0x266>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800986a:	4b34      	ldr	r3, [pc, #208]	@ (800993c <RadioSetRxConfig+0x330>)
 800986c:	220c      	movs	r2, #12
 800986e:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 8009870:	e00a      	b.n	8009888 <RadioSetRxConfig+0x27c>
					SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009872:	4b32      	ldr	r3, [pc, #200]	@ (800993c <RadioSetRxConfig+0x330>)
 8009874:	222c      	movs	r2, #44	@ 0x2c
 8009876:	18ba      	adds	r2, r7, r2
 8009878:	8812      	ldrh	r2, [r2, #0]
 800987a:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 800987c:	e004      	b.n	8009888 <RadioSetRxConfig+0x27c>
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800987e:	4b2f      	ldr	r3, [pc, #188]	@ (800993c <RadioSetRxConfig+0x330>)
 8009880:	222c      	movs	r2, #44	@ 0x2c
 8009882:	18ba      	adds	r2, r7, r2
 8009884:	8812      	ldrh	r2, [r2, #0]
 8009886:	849a      	strh	r2, [r3, #36]	@ 0x24
			SX126x.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t)fixLen;
 8009888:	2334      	movs	r3, #52	@ 0x34
 800988a:	18fb      	adds	r3, r7, r3
 800988c:	7819      	ldrb	r1, [r3, #0]
 800988e:	4b2b      	ldr	r3, [pc, #172]	@ (800993c <RadioSetRxConfig+0x330>)
 8009890:	2226      	movs	r2, #38	@ 0x26
 8009892:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009894:	4b28      	ldr	r3, [pc, #160]	@ (8009938 <RadioSetRxConfig+0x32c>)
 8009896:	7819      	ldrb	r1, [r3, #0]
 8009898:	4b28      	ldr	r3, [pc, #160]	@ (800993c <RadioSetRxConfig+0x330>)
 800989a:	2227      	movs	r2, #39	@ 0x27
 800989c:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t)crcOn;
 800989e:	233c      	movs	r3, #60	@ 0x3c
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	7819      	ldrb	r1, [r3, #0]
 80098a4:	4b25      	ldr	r3, [pc, #148]	@ (800993c <RadioSetRxConfig+0x330>)
 80098a6:	2228      	movs	r2, #40	@ 0x28
 80098a8:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.InvertIQ = (RadioLoRaIQModes_t)iqInverted;
 80098aa:	2320      	movs	r3, #32
 80098ac:	2228      	movs	r2, #40	@ 0x28
 80098ae:	189b      	adds	r3, r3, r2
 80098b0:	19db      	adds	r3, r3, r7
 80098b2:	7819      	ldrb	r1, [r3, #0]
 80098b4:	4b21      	ldr	r3, [pc, #132]	@ (800993c <RadioSetRxConfig+0x330>)
 80098b6:	2229      	movs	r2, #41	@ 0x29
 80098b8:	5499      	strb	r1, [r3, r2]
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 80098ba:	4b20      	ldr	r3, [pc, #128]	@ (800993c <RadioSetRxConfig+0x330>)
 80098bc:	2240      	movs	r2, #64	@ 0x40
 80098be:	5c9b      	ldrb	r3, [r3, r2]
 80098c0:	1e5a      	subs	r2, r3, #1
 80098c2:	4193      	sbcs	r3, r2
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	0018      	movs	r0, r3
 80098c8:	f7ff fdee 	bl	80094a8 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 80098cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009940 <RadioSetRxConfig+0x334>)
 80098ce:	0018      	movs	r0, r3
 80098d0:	f001 fae0 	bl	800ae94 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 80098d4:	4b1b      	ldr	r3, [pc, #108]	@ (8009944 <RadioSetRxConfig+0x338>)
 80098d6:	0018      	movs	r0, r3
 80098d8:	f001 fb82 	bl	800afe0 <SX126xSetPacketParams>
			if (SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED){
 80098dc:	4b17      	ldr	r3, [pc, #92]	@ (800993c <RadioSetRxConfig+0x330>)
 80098de:	2229      	movs	r2, #41	@ 0x29
 80098e0:	5c9b      	ldrb	r3, [r3, r2]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d10f      	bne.n	8009906 <RadioSetRxConfig+0x2fa>
				SX126xWriteRegister(0x0736, SX126xReadRegister(0x0736) & ~(1 << 2));
 80098e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009960 <RadioSetRxConfig+0x354>)
 80098e8:	0018      	movs	r0, r3
 80098ea:	f001 fee7 	bl	800b6bc <SX126xReadRegister>
 80098ee:	0003      	movs	r3, r0
 80098f0:	001a      	movs	r2, r3
 80098f2:	2304      	movs	r3, #4
 80098f4:	439a      	bics	r2, r3
 80098f6:	0013      	movs	r3, r2
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	4a19      	ldr	r2, [pc, #100]	@ (8009960 <RadioSetRxConfig+0x354>)
 80098fc:	0019      	movs	r1, r3
 80098fe:	0010      	movs	r0, r2
 8009900:	f001 fe82 	bl	800b608 <SX126xWriteRegister>
 8009904:	e00d      	b.n	8009922 <RadioSetRxConfig+0x316>
				SX126xWriteRegister(0x0736, SX126xReadRegister(0x0736) | (1 << 2));
 8009906:	4b16      	ldr	r3, [pc, #88]	@ (8009960 <RadioSetRxConfig+0x354>)
 8009908:	0018      	movs	r0, r3
 800990a:	f001 fed7 	bl	800b6bc <SX126xReadRegister>
 800990e:	0003      	movs	r3, r0
 8009910:	001a      	movs	r2, r3
 8009912:	2304      	movs	r3, #4
 8009914:	4313      	orrs	r3, r2
 8009916:	b2db      	uxtb	r3, r3
 8009918:	4a11      	ldr	r2, [pc, #68]	@ (8009960 <RadioSetRxConfig+0x354>)
 800991a:	0019      	movs	r1, r3
 800991c:	0010      	movs	r0, r2
 800991e:	f001 fe73 	bl	800b608 <SX126xWriteRegister>
			RxTimeout = RXTIMEOUT_LORA_MAX;
 8009922:	4b0d      	ldr	r3, [pc, #52]	@ (8009958 <RadioSetRxConfig+0x34c>)
 8009924:	22e0      	movs	r2, #224	@ 0xe0
 8009926:	0092      	lsls	r2, r2, #2
 8009928:	601a      	str	r2, [r3, #0]
		break;
 800992a:	46c0      	nop			@ (mov r8, r8)
}
 800992c:	46c0      	nop			@ (mov r8, r8)
 800992e:	46bd      	mov	sp, r7
 8009930:	b006      	add	sp, #24
 8009932:	bdb0      	pop	{r4, r5, r7, pc}
 8009934:	20000294 	.word	0x20000294
 8009938:	200000b0 	.word	0x200000b0
 800993c:	200003b8 	.word	0x200003b8
 8009940:	200003f8 	.word	0x200003f8
 8009944:	200003d0 	.word	0x200003d0
 8009948:	000001ff 	.word	0x000001ff
 800994c:	3ff00000 	.word	0x3ff00000
 8009950:	40200000 	.word	0x40200000
 8009954:	408f4000 	.word	0x408f4000
 8009958:	20000290 	.word	0x20000290
 800995c:	0800c03c 	.word	0x0800c03c
 8009960:	00000736 	.word	0x00000736

08009964 <RadioSetTxConfig>:

void RadioSetTxConfig(RadioModems_t modem, int8_t power, uint32_t fdev,
					  uint32_t bandwidth, uint32_t datarate,
					  uint8_t coderate, uint16_t preambleLen,
					  bool fixLen, bool crcOn, bool freqHopOn,
					  uint8_t hopPeriod, bool iqInverted, uint32_t timeout){
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60ba      	str	r2, [r7, #8]
 800996c:	607b      	str	r3, [r7, #4]
 800996e:	240f      	movs	r4, #15
 8009970:	193b      	adds	r3, r7, r4
 8009972:	1c02      	adds	r2, r0, #0
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	230e      	movs	r3, #14
 8009978:	18fb      	adds	r3, r7, r3
 800997a:	1c0a      	adds	r2, r1, #0
 800997c:	701a      	strb	r2, [r3, #0]

	switch (modem){
 800997e:	193b      	adds	r3, r7, r4
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <RadioSetTxConfig+0x2a>
 8009986:	2b01      	cmp	r3, #1
 8009988:	d100      	bne.n	800998c <RadioSetTxConfig+0x28>
 800998a:	e07e      	b.n	8009a8a <RadioSetTxConfig+0x126>
 800998c:	e103      	b.n	8009b96 <RadioSetTxConfig+0x232>
		case MODEM_FSK:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800998e:	4b9d      	ldr	r3, [pc, #628]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009990:	2240      	movs	r2, #64	@ 0x40
 8009992:	2100      	movs	r1, #0
 8009994:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009996:	4b9b      	ldr	r3, [pc, #620]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800999a:	645a      	str	r2, [r3, #68]	@ 0x44

			SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800999c:	4b99      	ldr	r3, [pc, #612]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 800999e:	224c      	movs	r2, #76	@ 0x4c
 80099a0:	210b      	movs	r1, #11
 80099a2:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue(bandwidth);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	0018      	movs	r0, r3
 80099a8:	f7ff fcec 	bl	8009384 <RadioGetFskBandwidthRegValue>
 80099ac:	0003      	movs	r3, r0
 80099ae:	0019      	movs	r1, r3
 80099b0:	4b94      	ldr	r3, [pc, #592]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 80099b2:	224d      	movs	r2, #77	@ 0x4d
 80099b4:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 80099b6:	4b93      	ldr	r3, [pc, #588]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	649a      	str	r2, [r3, #72]	@ 0x48

			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80099bc:	4b91      	ldr	r3, [pc, #580]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 80099be:	2200      	movs	r2, #0
 80099c0:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 80099c2:	2328      	movs	r3, #40	@ 0x28
 80099c4:	2108      	movs	r1, #8
 80099c6:	185b      	adds	r3, r3, r1
 80099c8:	19db      	adds	r3, r3, r7
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	00db      	lsls	r3, r3, #3
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	4b8c      	ldr	r3, [pc, #560]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 80099d2:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80099d4:	4b8b      	ldr	r3, [pc, #556]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 80099d6:	2204      	movs	r2, #4
 80099d8:	771a      	strb	r2, [r3, #28]
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80099da:	4b8a      	ldr	r3, [pc, #552]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 80099dc:	2218      	movs	r2, #24
 80099de:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80099e0:	4b88      	ldr	r3, [pc, #544]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	779a      	strb	r2, [r3, #30]
			SX126x.PacketParams.Params.Gfsk.HeaderType = (fixLen == true) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80099e6:	232c      	movs	r3, #44	@ 0x2c
 80099e8:	185b      	adds	r3, r3, r1
 80099ea:	19db      	adds	r3, r3, r7
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2201      	movs	r2, #1
 80099f0:	4053      	eors	r3, r2
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	001a      	movs	r2, r3
 80099f6:	4b83      	ldr	r3, [pc, #524]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 80099f8:	77da      	strb	r2, [r3, #31]

			if (crcOn == true){
 80099fa:	2330      	movs	r3, #48	@ 0x30
 80099fc:	185b      	adds	r3, r3, r1
 80099fe:	19db      	adds	r3, r3, r7
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d004      	beq.n	8009a10 <RadioSetTxConfig+0xac>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8009a06:	4b7f      	ldr	r3, [pc, #508]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009a08:	2221      	movs	r2, #33	@ 0x21
 8009a0a:	21f2      	movs	r1, #242	@ 0xf2
 8009a0c:	5499      	strb	r1, [r3, r2]
 8009a0e:	e003      	b.n	8009a18 <RadioSetTxConfig+0xb4>
			}
			else{
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009a10:	4b7c      	ldr	r3, [pc, #496]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009a12:	2221      	movs	r2, #33	@ 0x21
 8009a14:	2101      	movs	r1, #1
 8009a16:	5499      	strb	r1, [r3, r2]
			}
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009a18:	4b7a      	ldr	r3, [pc, #488]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009a1a:	2222      	movs	r2, #34	@ 0x22
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	5499      	strb	r1, [r3, r2]

			RadioStandby();
 8009a20:	f000 fac5 	bl	8009fae <RadioStandby>
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 8009a24:	4b77      	ldr	r3, [pc, #476]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009a26:	2240      	movs	r2, #64	@ 0x40
 8009a28:	5c9b      	ldrb	r3, [r3, r2]
 8009a2a:	1e5a      	subs	r2, r3, #1
 8009a2c:	4193      	sbcs	r3, r2
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	0018      	movs	r0, r3
 8009a32:	f7ff fd39 	bl	80094a8 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 8009a36:	4b74      	ldr	r3, [pc, #464]	@ (8009c08 <RadioSetTxConfig+0x2a4>)
 8009a38:	0018      	movs	r0, r3
 8009a3a:	f001 fa2b 	bl	800ae94 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 8009a3e:	4b73      	ldr	r3, [pc, #460]	@ (8009c0c <RadioSetTxConfig+0x2a8>)
 8009a40:	0018      	movs	r0, r3
 8009a42:	f001 facd 	bl	800afe0 <SX126xSetPacketParams>
			uint8_t syncWord[8];
			syncWord[0] = 0xC1;
 8009a46:	2110      	movs	r1, #16
 8009a48:	187b      	adds	r3, r7, r1
 8009a4a:	22c1      	movs	r2, #193	@ 0xc1
 8009a4c:	701a      	strb	r2, [r3, #0]
			syncWord[1] = 0x94;
 8009a4e:	187b      	adds	r3, r7, r1
 8009a50:	2294      	movs	r2, #148	@ 0x94
 8009a52:	705a      	strb	r2, [r3, #1]
			syncWord[2] = 0xC1;
 8009a54:	187b      	adds	r3, r7, r1
 8009a56:	22c1      	movs	r2, #193	@ 0xc1
 8009a58:	709a      	strb	r2, [r3, #2]
			syncWord[3] = 0x00;
 8009a5a:	187b      	adds	r3, r7, r1
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	70da      	strb	r2, [r3, #3]
			syncWord[4] = 0x00;
 8009a60:	187b      	adds	r3, r7, r1
 8009a62:	2200      	movs	r2, #0
 8009a64:	711a      	strb	r2, [r3, #4]
			syncWord[5] = 0x00;
 8009a66:	187b      	adds	r3, r7, r1
 8009a68:	2200      	movs	r2, #0
 8009a6a:	715a      	strb	r2, [r3, #5]
			syncWord[6] = 0x00;
 8009a6c:	187b      	adds	r3, r7, r1
 8009a6e:	2200      	movs	r2, #0
 8009a70:	719a      	strb	r2, [r3, #6]
			syncWord[7] = 0x00;
 8009a72:	187b      	adds	r3, r7, r1
 8009a74:	2200      	movs	r2, #0
 8009a76:	71da      	strb	r2, [r3, #7]
			SX126xSetSyncWord(syncWord);
 8009a78:	187b      	adds	r3, r7, r1
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	f000 fe5b 	bl	800a736 <SX126xSetSyncWord>
			// SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
			SX126xSetWhiteningSeed(0x01FF);
 8009a80:	4b63      	ldr	r3, [pc, #396]	@ (8009c10 <RadioSetTxConfig+0x2ac>)
 8009a82:	0018      	movs	r0, r3
 8009a84:	f000 feb4 	bl	800a7f0 <SX126xSetWhiteningSeed>
		break;
 8009a88:	e085      	b.n	8009b96 <RadioSetTxConfig+0x232>

		case MODEM_LORA:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009a8a:	4b5e      	ldr	r3, [pc, #376]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009a8c:	2240      	movs	r2, #64	@ 0x40
 8009a8e:	2101      	movs	r1, #1
 8009a90:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)datarate;
 8009a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a94:	b2d9      	uxtb	r1, r3
 8009a96:	4b5b      	ldr	r3, [pc, #364]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009a98:	2250      	movs	r2, #80	@ 0x50
 8009a9a:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8009a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8009c14 <RadioSetTxConfig+0x2b0>)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	18d3      	adds	r3, r2, r3
 8009aa2:	7819      	ldrb	r1, [r3, #0]
 8009aa4:	4b57      	ldr	r3, [pc, #348]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009aa6:	2251      	movs	r2, #81	@ 0x51
 8009aa8:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)coderate;
 8009aaa:	4b56      	ldr	r3, [pc, #344]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009aac:	2224      	movs	r2, #36	@ 0x24
 8009aae:	2108      	movs	r1, #8
 8009ab0:	1852      	adds	r2, r2, r1
 8009ab2:	19d2      	adds	r2, r2, r7
 8009ab4:	2152      	movs	r1, #82	@ 0x52
 8009ab6:	7812      	ldrb	r2, [r2, #0]
 8009ab8:	545a      	strb	r2, [r3, r1]

			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12))) ||
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d105      	bne.n	8009acc <RadioSetTxConfig+0x168>
 8009ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac2:	2b0b      	cmp	r3, #11
 8009ac4:	d008      	beq.n	8009ad8 <RadioSetTxConfig+0x174>
 8009ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac8:	2b0c      	cmp	r3, #12
 8009aca:	d005      	beq.n	8009ad8 <RadioSetTxConfig+0x174>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d107      	bne.n	8009ae2 <RadioSetTxConfig+0x17e>
				((bandwidth == 1) && (datarate == 12))){
 8009ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad4:	2b0c      	cmp	r3, #12
 8009ad6:	d104      	bne.n	8009ae2 <RadioSetTxConfig+0x17e>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009ada:	2253      	movs	r2, #83	@ 0x53
 8009adc:	2101      	movs	r1, #1
 8009ade:	5499      	strb	r1, [r3, r2]
 8009ae0:	e003      	b.n	8009aea <RadioSetTxConfig+0x186>
			}
			else{
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009ae2:	4b48      	ldr	r3, [pc, #288]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009ae4:	2253      	movs	r2, #83	@ 0x53
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	5499      	strb	r1, [r3, r2]
			}

			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009aea:	4b46      	ldr	r3, [pc, #280]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009aec:	2201      	movs	r2, #1
 8009aee:	761a      	strb	r2, [r3, #24]

			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 8009af0:	4b44      	ldr	r3, [pc, #272]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009af2:	2250      	movs	r2, #80	@ 0x50
 8009af4:	5c9b      	ldrb	r3, [r3, r2]
 8009af6:	2b05      	cmp	r3, #5
 8009af8:	d004      	beq.n	8009b04 <RadioSetTxConfig+0x1a0>
				(SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6)){
 8009afa:	4b42      	ldr	r3, [pc, #264]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009afc:	2250      	movs	r2, #80	@ 0x50
 8009afe:	5c9b      	ldrb	r3, [r3, r2]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 8009b00:	2b06      	cmp	r3, #6
 8009b02:	d112      	bne.n	8009b2a <RadioSetTxConfig+0x1c6>
				if (preambleLen < 12){
 8009b04:	2328      	movs	r3, #40	@ 0x28
 8009b06:	2208      	movs	r2, #8
 8009b08:	189b      	adds	r3, r3, r2
 8009b0a:	19db      	adds	r3, r3, r7
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	2b0b      	cmp	r3, #11
 8009b10:	d803      	bhi.n	8009b1a <RadioSetTxConfig+0x1b6>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8009b12:	4b3c      	ldr	r3, [pc, #240]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009b14:	220c      	movs	r2, #12
 8009b16:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 8009b18:	e00e      	b.n	8009b38 <RadioSetTxConfig+0x1d4>
				}
				else{
					SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009b1c:	2228      	movs	r2, #40	@ 0x28
 8009b1e:	2108      	movs	r1, #8
 8009b20:	1852      	adds	r2, r2, r1
 8009b22:	19d2      	adds	r2, r2, r7
 8009b24:	8812      	ldrh	r2, [r2, #0]
 8009b26:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 8009b28:	e006      	b.n	8009b38 <RadioSetTxConfig+0x1d4>
				}
			}
			else{
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009b2a:	4b36      	ldr	r3, [pc, #216]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009b2c:	2228      	movs	r2, #40	@ 0x28
 8009b2e:	2108      	movs	r1, #8
 8009b30:	1852      	adds	r2, r2, r1
 8009b32:	19d2      	adds	r2, r2, r7
 8009b34:	8812      	ldrh	r2, [r2, #0]
 8009b36:	849a      	strh	r2, [r3, #36]	@ 0x24
			}

			SX126x.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t)fixLen;
 8009b38:	232c      	movs	r3, #44	@ 0x2c
 8009b3a:	2008      	movs	r0, #8
 8009b3c:	181b      	adds	r3, r3, r0
 8009b3e:	19db      	adds	r3, r3, r7
 8009b40:	7819      	ldrb	r1, [r3, #0]
 8009b42:	4b30      	ldr	r3, [pc, #192]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009b44:	2226      	movs	r2, #38	@ 0x26
 8009b46:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009b48:	4b33      	ldr	r3, [pc, #204]	@ (8009c18 <RadioSetTxConfig+0x2b4>)
 8009b4a:	7819      	ldrb	r1, [r3, #0]
 8009b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009b4e:	2227      	movs	r2, #39	@ 0x27
 8009b50:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t)crcOn;
 8009b52:	2330      	movs	r3, #48	@ 0x30
 8009b54:	181b      	adds	r3, r3, r0
 8009b56:	19db      	adds	r3, r3, r7
 8009b58:	7819      	ldrb	r1, [r3, #0]
 8009b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009b5c:	2228      	movs	r2, #40	@ 0x28
 8009b5e:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.InvertIQ = (RadioLoRaIQModes_t)iqInverted;
 8009b60:	233c      	movs	r3, #60	@ 0x3c
 8009b62:	181b      	adds	r3, r3, r0
 8009b64:	19db      	adds	r3, r3, r7
 8009b66:	7819      	ldrb	r1, [r3, #0]
 8009b68:	4b26      	ldr	r3, [pc, #152]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009b6a:	2229      	movs	r2, #41	@ 0x29
 8009b6c:	5499      	strb	r1, [r3, r2]

			RadioStandby();
 8009b6e:	f000 fa1e 	bl	8009fae <RadioStandby>
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 8009b72:	4b24      	ldr	r3, [pc, #144]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009b74:	2240      	movs	r2, #64	@ 0x40
 8009b76:	5c9b      	ldrb	r3, [r3, r2]
 8009b78:	1e5a      	subs	r2, r3, #1
 8009b7a:	4193      	sbcs	r3, r2
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f7ff fc92 	bl	80094a8 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 8009b84:	4b20      	ldr	r3, [pc, #128]	@ (8009c08 <RadioSetTxConfig+0x2a4>)
 8009b86:	0018      	movs	r0, r3
 8009b88:	f001 f984 	bl	800ae94 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 8009b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8009c0c <RadioSetTxConfig+0x2a8>)
 8009b8e:	0018      	movs	r0, r3
 8009b90:	f001 fa26 	bl	800afe0 <SX126xSetPacketParams>
		break;
 8009b94:	46c0      	nop			@ (mov r8, r8)
	}

	// WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see DS_SX1261-2_V1.2 datasheet chapter 15.1
	if ((modem == MODEM_LORA) && (SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500)){
 8009b96:	230f      	movs	r3, #15
 8009b98:	18fb      	adds	r3, r7, r3
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d114      	bne.n	8009bca <RadioSetTxConfig+0x266>
 8009ba0:	4b18      	ldr	r3, [pc, #96]	@ (8009c04 <RadioSetTxConfig+0x2a0>)
 8009ba2:	2251      	movs	r2, #81	@ 0x51
 8009ba4:	5c9b      	ldrb	r3, [r3, r2]
 8009ba6:	2b06      	cmp	r3, #6
 8009ba8:	d10f      	bne.n	8009bca <RadioSetTxConfig+0x266>
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) & ~(1 << 2));
 8009baa:	4b1c      	ldr	r3, [pc, #112]	@ (8009c1c <RadioSetTxConfig+0x2b8>)
 8009bac:	0018      	movs	r0, r3
 8009bae:	f001 fd85 	bl	800b6bc <SX126xReadRegister>
 8009bb2:	0003      	movs	r3, r0
 8009bb4:	001a      	movs	r2, r3
 8009bb6:	2304      	movs	r3, #4
 8009bb8:	439a      	bics	r2, r3
 8009bba:	0013      	movs	r3, r2
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	4a17      	ldr	r2, [pc, #92]	@ (8009c1c <RadioSetTxConfig+0x2b8>)
 8009bc0:	0019      	movs	r1, r3
 8009bc2:	0010      	movs	r0, r2
 8009bc4:	f001 fd20 	bl	800b608 <SX126xWriteRegister>
 8009bc8:	e00d      	b.n	8009be6 <RadioSetTxConfig+0x282>
	}
	else{
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) | (1 << 2));
 8009bca:	4b14      	ldr	r3, [pc, #80]	@ (8009c1c <RadioSetTxConfig+0x2b8>)
 8009bcc:	0018      	movs	r0, r3
 8009bce:	f001 fd75 	bl	800b6bc <SX126xReadRegister>
 8009bd2:	0003      	movs	r3, r0
 8009bd4:	001a      	movs	r2, r3
 8009bd6:	2304      	movs	r3, #4
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8009c1c <RadioSetTxConfig+0x2b8>)
 8009bde:	0019      	movs	r1, r3
 8009be0:	0010      	movs	r0, r2
 8009be2:	f001 fd11 	bl	800b608 <SX126xWriteRegister>
	}
	// WORKAROUND END
	SX126xSetRfTxPower(power);
 8009be6:	230e      	movs	r3, #14
 8009be8:	18fb      	adds	r3, r7, r3
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	b25b      	sxtb	r3, r3
 8009bee:	0018      	movs	r0, r3
 8009bf0:	f001 fdfe 	bl	800b7f0 <SX126xSetRfTxPower>
	TxTimeout = timeout;
 8009bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8009c20 <RadioSetTxConfig+0x2bc>)
 8009bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bf8:	601a      	str	r2, [r3, #0]
}
 8009bfa:	46c0      	nop			@ (mov r8, r8)
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	b007      	add	sp, #28
 8009c00:	bd90      	pop	{r4, r7, pc}
 8009c02:	46c0      	nop			@ (mov r8, r8)
 8009c04:	200003b8 	.word	0x200003b8
 8009c08:	200003f8 	.word	0x200003f8
 8009c0c:	200003d0 	.word	0x200003d0
 8009c10:	000001ff 	.word	0x000001ff
 8009c14:	0800c03c 	.word	0x0800c03c
 8009c18:	200000b0 	.word	0x200000b0
 8009c1c:	00000889 	.word	0x00000889
 8009c20:	2000028c 	.word	0x2000028c

08009c24 <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency(uint32_t frequency){
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
	return true;
 8009c2c:	2301      	movs	r3, #1
}
 8009c2e:	0018      	movs	r0, r3
 8009c30:	46bd      	mov	sp, r7
 8009c32:	b002      	add	sp, #8
 8009c34:	bd80      	pop	{r7, pc}
	...

08009c38 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir(RadioModems_t modem, uint8_t pktLen){
 8009c38:	b5b0      	push	{r4, r5, r7, lr}
 8009c3a:	b090      	sub	sp, #64	@ 0x40
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	0002      	movs	r2, r0
 8009c40:	1dfb      	adds	r3, r7, #7
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	1dbb      	adds	r3, r7, #6
 8009c46:	1c0a      	adds	r2, r1, #0
 8009c48:	701a      	strb	r2, [r3, #0]
	uint32_t airTime = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch (modem){
 8009c4e:	1dfb      	adds	r3, r7, #7
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <RadioTimeOnAir+0x26>
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d100      	bne.n	8009c5c <RadioTimeOnAir+0x24>
 8009c5a:	e093      	b.n	8009d84 <RadioTimeOnAir+0x14c>
 8009c5c:	e148      	b.n	8009ef0 <RadioTimeOnAir+0x2b8>
		case MODEM_FSK:{
			// CRC Length calculation, catering for each type of CRC Calc offered in libary
			uint8_t crcLength = (uint8_t)(SX126x.PacketParams.Params.Gfsk.CrcLength);
 8009c5e:	203b      	movs	r0, #59	@ 0x3b
 8009c60:	183b      	adds	r3, r7, r0
 8009c62:	4aa6      	ldr	r2, [pc, #664]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009c64:	2121      	movs	r1, #33	@ 0x21
 8009c66:	5c52      	ldrb	r2, [r2, r1]
 8009c68:	701a      	strb	r2, [r3, #0]
			if ((crcLength == RADIO_CRC_2_BYTES) || (crcLength == RADIO_CRC_2_BYTES_INV) || (crcLength == RADIO_CRC_2_BYTES_IBM) || (crcLength == RADIO_CRC_2_BYTES_CCIT)){
 8009c6a:	0002      	movs	r2, r0
 8009c6c:	18bb      	adds	r3, r7, r2
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d00b      	beq.n	8009c8c <RadioTimeOnAir+0x54>
 8009c74:	18bb      	adds	r3, r7, r2
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b06      	cmp	r3, #6
 8009c7a:	d007      	beq.n	8009c8c <RadioTimeOnAir+0x54>
 8009c7c:	18bb      	adds	r3, r7, r2
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2bf1      	cmp	r3, #241	@ 0xf1
 8009c82:	d003      	beq.n	8009c8c <RadioTimeOnAir+0x54>
 8009c84:	18bb      	adds	r3, r7, r2
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	2bf2      	cmp	r3, #242	@ 0xf2
 8009c8a:	d104      	bne.n	8009c96 <RadioTimeOnAir+0x5e>
				crcLength = 2;
 8009c8c:	233b      	movs	r3, #59	@ 0x3b
 8009c8e:	18fb      	adds	r3, r7, r3
 8009c90:	2202      	movs	r2, #2
 8009c92:	701a      	strb	r2, [r3, #0]
 8009c94:	e011      	b.n	8009cba <RadioTimeOnAir+0x82>
			}
			else if ((crcLength == RADIO_CRC_1_BYTES) || (crcLength == RADIO_CRC_1_BYTES_INV)){
 8009c96:	223b      	movs	r2, #59	@ 0x3b
 8009c98:	18bb      	adds	r3, r7, r2
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <RadioTimeOnAir+0x70>
 8009ca0:	18bb      	adds	r3, r7, r2
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	2b04      	cmp	r3, #4
 8009ca6:	d104      	bne.n	8009cb2 <RadioTimeOnAir+0x7a>
				crcLength = 1;
 8009ca8:	233b      	movs	r3, #59	@ 0x3b
 8009caa:	18fb      	adds	r3, r7, r3
 8009cac:	2201      	movs	r2, #1
 8009cae:	701a      	strb	r2, [r3, #0]
 8009cb0:	e003      	b.n	8009cba <RadioTimeOnAir+0x82>
			}
			else{
				crcLength = 0;
 8009cb2:	233b      	movs	r3, #59	@ 0x3b
 8009cb4:	18fb      	adds	r3, r7, r3
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	701a      	strb	r2, [r3, #0]
			}
			airTime = rint((8 * (SX126x.PacketParams.Params.Gfsk.PreambleLength + (SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3) + ((SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH) ? 0.0 : 1.0) + pktLen + (crcLength)) /
 8009cba:	4b90      	ldr	r3, [pc, #576]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009cbc:	8b5b      	ldrh	r3, [r3, #26]
 8009cbe:	001a      	movs	r2, r3
 8009cc0:	4b8e      	ldr	r3, [pc, #568]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009cc2:	7f5b      	ldrb	r3, [r3, #29]
 8009cc4:	08db      	lsrs	r3, r3, #3
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	18d3      	adds	r3, r2, r3
 8009cca:	0018      	movs	r0, r3
 8009ccc:	f7f8 fc56 	bl	800257c <__aeabi_i2d>
 8009cd0:	0002      	movs	r2, r0
 8009cd2:	000b      	movs	r3, r1
 8009cd4:	4989      	ldr	r1, [pc, #548]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009cd6:	7fc9      	ldrb	r1, [r1, #31]
 8009cd8:	2900      	cmp	r1, #0
 8009cda:	d102      	bne.n	8009ce2 <RadioTimeOnAir+0xaa>
 8009cdc:	2000      	movs	r0, #0
 8009cde:	2100      	movs	r1, #0
 8009ce0:	e001      	b.n	8009ce6 <RadioTimeOnAir+0xae>
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	4986      	ldr	r1, [pc, #536]	@ (8009f00 <RadioTimeOnAir+0x2c8>)
 8009ce6:	f7f6 fe01 	bl	80008ec <__aeabi_dadd>
 8009cea:	0002      	movs	r2, r0
 8009cec:	000b      	movs	r3, r1
 8009cee:	0014      	movs	r4, r2
 8009cf0:	001d      	movs	r5, r3
 8009cf2:	1dbb      	adds	r3, r7, #6
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	f7f8 fc40 	bl	800257c <__aeabi_i2d>
 8009cfc:	0002      	movs	r2, r0
 8009cfe:	000b      	movs	r3, r1
 8009d00:	0020      	movs	r0, r4
 8009d02:	0029      	movs	r1, r5
 8009d04:	f7f6 fdf2 	bl	80008ec <__aeabi_dadd>
 8009d08:	0002      	movs	r2, r0
 8009d0a:	000b      	movs	r3, r1
 8009d0c:	0014      	movs	r4, r2
 8009d0e:	001d      	movs	r5, r3
 8009d10:	233b      	movs	r3, #59	@ 0x3b
 8009d12:	18fb      	adds	r3, r7, r3
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	0018      	movs	r0, r3
 8009d18:	f7f8 fc30 	bl	800257c <__aeabi_i2d>
 8009d1c:	0002      	movs	r2, r0
 8009d1e:	000b      	movs	r3, r1
 8009d20:	0020      	movs	r0, r4
 8009d22:	0029      	movs	r1, r5
 8009d24:	f7f6 fde2 	bl	80008ec <__aeabi_dadd>
 8009d28:	0002      	movs	r2, r0
 8009d2a:	000b      	movs	r3, r1
 8009d2c:	0010      	movs	r0, r2
 8009d2e:	0019      	movs	r1, r3
 8009d30:	2200      	movs	r2, #0
 8009d32:	4b74      	ldr	r3, [pc, #464]	@ (8009f04 <RadioTimeOnAir+0x2cc>)
 8009d34:	f7f7 fd82 	bl	800183c <__aeabi_dmul>
 8009d38:	0002      	movs	r2, r0
 8009d3a:	000b      	movs	r3, r1
 8009d3c:	0014      	movs	r4, r2
 8009d3e:	001d      	movs	r5, r3
							SX126x.ModulationParams.Params.Gfsk.BitRate) *
 8009d40:	4b6e      	ldr	r3, [pc, #440]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
			airTime = rint((8 * (SX126x.PacketParams.Params.Gfsk.PreambleLength + (SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3) + ((SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH) ? 0.0 : 1.0) + pktLen + (crcLength)) /
 8009d44:	0018      	movs	r0, r3
 8009d46:	f7f8 fc47 	bl	80025d8 <__aeabi_ui2d>
 8009d4a:	0002      	movs	r2, r0
 8009d4c:	000b      	movs	r3, r1
 8009d4e:	0020      	movs	r0, r4
 8009d50:	0029      	movs	r1, r5
 8009d52:	f7f7 f92f 	bl	8000fb4 <__aeabi_ddiv>
 8009d56:	0002      	movs	r2, r0
 8009d58:	000b      	movs	r3, r1
 8009d5a:	0010      	movs	r0, r2
 8009d5c:	0019      	movs	r1, r3
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4b69      	ldr	r3, [pc, #420]	@ (8009f08 <RadioTimeOnAir+0x2d0>)
 8009d62:	f7f7 fd6b 	bl	800183c <__aeabi_dmul>
 8009d66:	0002      	movs	r2, r0
 8009d68:	000b      	movs	r3, r1
 8009d6a:	0010      	movs	r0, r2
 8009d6c:	0019      	movs	r1, r3
 8009d6e:	f001 fe8d 	bl	800ba8c <rint>
 8009d72:	0002      	movs	r2, r0
 8009d74:	000b      	movs	r3, r1
 8009d76:	0010      	movs	r0, r2
 8009d78:	0019      	movs	r1, r3
 8009d7a:	f7f6 faad 	bl	80002d8 <__aeabi_d2uiz>
 8009d7e:	0003      	movs	r3, r0
 8009d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
						   1e3);
		}
		break;
 8009d82:	e0b5      	b.n	8009ef0 <RadioTimeOnAir+0x2b8>
		case MODEM_LORA:{
			double ts = RadioLoRaSymbTime[SX126x.ModulationParams.Params.LoRa.Bandwidth - 4][12 - SX126x.ModulationParams.Params.LoRa.SpreadingFactor];
 8009d84:	4b5d      	ldr	r3, [pc, #372]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009d86:	2251      	movs	r2, #81	@ 0x51
 8009d88:	5c9b      	ldrb	r3, [r3, r2]
 8009d8a:	1f1a      	subs	r2, r3, #4
 8009d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009d8e:	2150      	movs	r1, #80	@ 0x50
 8009d90:	5c5b      	ldrb	r3, [r3, r1]
 8009d92:	0019      	movs	r1, r3
 8009d94:	230c      	movs	r3, #12
 8009d96:	1a58      	subs	r0, r3, r1
 8009d98:	495c      	ldr	r1, [pc, #368]	@ (8009f0c <RadioTimeOnAir+0x2d4>)
 8009d9a:	0013      	movs	r3, r2
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	189b      	adds	r3, r3, r2
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	181b      	adds	r3, r3, r0
 8009da4:	00db      	lsls	r3, r3, #3
 8009da6:	18cb      	adds	r3, r1, r3
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dae:	637b      	str	r3, [r7, #52]	@ 0x34
			// time of preamble
			double tPreamble = (SX126x.PacketParams.Params.LoRa.PreambleLength + 4.25) * ts;
 8009db0:	4b52      	ldr	r3, [pc, #328]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009db2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009db4:	0018      	movs	r0, r3
 8009db6:	f7f8 fbe1 	bl	800257c <__aeabi_i2d>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4b54      	ldr	r3, [pc, #336]	@ (8009f10 <RadioTimeOnAir+0x2d8>)
 8009dbe:	f7f6 fd95 	bl	80008ec <__aeabi_dadd>
 8009dc2:	0002      	movs	r2, r0
 8009dc4:	000b      	movs	r3, r1
 8009dc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009dc8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009dca:	f7f7 fd37 	bl	800183c <__aeabi_dmul>
 8009dce:	0002      	movs	r2, r0
 8009dd0:	000b      	movs	r3, r1
 8009dd2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			// Symbol length of payload and time
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8009dd6:	1dbb      	adds	r3, r7, #6
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	005b      	lsls	r3, r3, #1
 8009ddc:	4a47      	ldr	r2, [pc, #284]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009dde:	2150      	movs	r1, #80	@ 0x50
 8009de0:	5c52      	ldrb	r2, [r2, r1]
 8009de2:	1a9b      	subs	r3, r3, r2
 8009de4:	1dda      	adds	r2, r3, #7
							   28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 8009de6:	4b45      	ldr	r3, [pc, #276]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009de8:	2128      	movs	r1, #40	@ 0x28
 8009dea:	5c5b      	ldrb	r3, [r3, r1]
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	18d3      	adds	r3, r2, r3
 8009df0:	009a      	lsls	r2, r3, #2
							   ((SX126x.PacketParams.Params.LoRa.HeaderType == LORA_PACKET_FIXED_LENGTH) ? 20 : 0)) /
 8009df2:	4b42      	ldr	r3, [pc, #264]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009df4:	2126      	movs	r1, #38	@ 0x26
 8009df6:	5c5b      	ldrb	r3, [r3, r1]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d101      	bne.n	8009e00 <RadioTimeOnAir+0x1c8>
 8009dfc:	2314      	movs	r3, #20
 8009dfe:	e000      	b.n	8009e02 <RadioTimeOnAir+0x1ca>
 8009e00:	2300      	movs	r3, #0
							   28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 8009e02:	1ad3      	subs	r3, r2, r3
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8009e04:	0018      	movs	r0, r3
 8009e06:	f7f8 fbb9 	bl	800257c <__aeabi_i2d>
 8009e0a:	0004      	movs	r4, r0
 8009e0c:	000d      	movs	r5, r1
							  (double)(4 * (SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 8009e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009e10:	2250      	movs	r2, #80	@ 0x50
 8009e12:	5c9b      	ldrb	r3, [r3, r2]
 8009e14:	0019      	movs	r1, r3
											((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0) ? 2 : 0)))) *
 8009e16:	4b39      	ldr	r3, [pc, #228]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009e18:	2253      	movs	r2, #83	@ 0x53
 8009e1a:	5c9b      	ldrb	r3, [r3, r2]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <RadioTimeOnAir+0x1ec>
 8009e20:	2302      	movs	r3, #2
 8009e22:	e000      	b.n	8009e26 <RadioTimeOnAir+0x1ee>
 8009e24:	2300      	movs	r3, #0
							  (double)(4 * (SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 8009e26:	1acb      	subs	r3, r1, r3
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	f7f8 fba6 	bl	800257c <__aeabi_i2d>
 8009e30:	0002      	movs	r2, r0
 8009e32:	000b      	movs	r3, r1
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8009e34:	0020      	movs	r0, r4
 8009e36:	0029      	movs	r1, r5
 8009e38:	f7f7 f8bc 	bl	8000fb4 <__aeabi_ddiv>
 8009e3c:	0002      	movs	r2, r0
 8009e3e:	000b      	movs	r3, r1
 8009e40:	0010      	movs	r0, r2
 8009e42:	0019      	movs	r1, r3
 8009e44:	f001 fd2e 	bl	800b8a4 <ceil>
 8009e48:	0004      	movs	r4, r0
 8009e4a:	000d      	movs	r5, r1
						 ((SX126x.ModulationParams.Params.LoRa.CodingRate % 4) + 4);
 8009e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8009efc <RadioTimeOnAir+0x2c4>)
 8009e4e:	2252      	movs	r2, #82	@ 0x52
 8009e50:	5c9b      	ldrb	r3, [r3, r2]
 8009e52:	001a      	movs	r2, r3
 8009e54:	2303      	movs	r3, #3
 8009e56:	4013      	ands	r3, r2
 8009e58:	3304      	adds	r3, #4
											((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0) ? 2 : 0)))) *
 8009e5a:	0018      	movs	r0, r3
 8009e5c:	f7f8 fb8e 	bl	800257c <__aeabi_i2d>
 8009e60:	0002      	movs	r2, r0
 8009e62:	000b      	movs	r3, r1
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8009e64:	0020      	movs	r0, r4
 8009e66:	0029      	movs	r1, r5
 8009e68:	f7f7 fce8 	bl	800183c <__aeabi_dmul>
 8009e6c:	0002      	movs	r2, r0
 8009e6e:	000b      	movs	r3, r1
 8009e70:	623a      	str	r2, [r7, #32]
 8009e72:	627b      	str	r3, [r7, #36]	@ 0x24
			double nPayload = 8 + ((tmp > 0) ? tmp : 0);
 8009e74:	2200      	movs	r2, #0
 8009e76:	2300      	movs	r3, #0
 8009e78:	6a38      	ldr	r0, [r7, #32]
 8009e7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e7c:	f7f6 f9fa 	bl	8000274 <__aeabi_dcmpgt>
 8009e80:	1e03      	subs	r3, r0, #0
 8009e82:	d002      	beq.n	8009e8a <RadioTimeOnAir+0x252>
 8009e84:	6a38      	ldr	r0, [r7, #32]
 8009e86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e88:	e001      	b.n	8009e8e <RadioTimeOnAir+0x256>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	2200      	movs	r2, #0
 8009e90:	4b1c      	ldr	r3, [pc, #112]	@ (8009f04 <RadioTimeOnAir+0x2cc>)
 8009e92:	f7f6 fd2b 	bl	80008ec <__aeabi_dadd>
 8009e96:	0002      	movs	r2, r0
 8009e98:	000b      	movs	r3, r1
 8009e9a:	61ba      	str	r2, [r7, #24]
 8009e9c:	61fb      	str	r3, [r7, #28]
			double tPayload = nPayload * ts;
 8009e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea2:	69b8      	ldr	r0, [r7, #24]
 8009ea4:	69f9      	ldr	r1, [r7, #28]
 8009ea6:	f7f7 fcc9 	bl	800183c <__aeabi_dmul>
 8009eaa:	0002      	movs	r2, r0
 8009eac:	000b      	movs	r3, r1
 8009eae:	613a      	str	r2, [r7, #16]
 8009eb0:	617b      	str	r3, [r7, #20]
			// Time on air
			double tOnAir = tPreamble + tPayload;
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009eb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eba:	f7f6 fd17 	bl	80008ec <__aeabi_dadd>
 8009ebe:	0002      	movs	r2, r0
 8009ec0:	000b      	movs	r3, r1
 8009ec2:	60ba      	str	r2, [r7, #8]
 8009ec4:	60fb      	str	r3, [r7, #12]
			// return milli seconds
			airTime = floor(tOnAir + 0.999);
 8009ec6:	4a13      	ldr	r2, [pc, #76]	@ (8009f14 <RadioTimeOnAir+0x2dc>)
 8009ec8:	4b13      	ldr	r3, [pc, #76]	@ (8009f18 <RadioTimeOnAir+0x2e0>)
 8009eca:	68b8      	ldr	r0, [r7, #8]
 8009ecc:	68f9      	ldr	r1, [r7, #12]
 8009ece:	f7f6 fd0d 	bl	80008ec <__aeabi_dadd>
 8009ed2:	0002      	movs	r2, r0
 8009ed4:	000b      	movs	r3, r1
 8009ed6:	0010      	movs	r0, r2
 8009ed8:	0019      	movs	r1, r3
 8009eda:	f001 fd5b 	bl	800b994 <floor>
 8009ede:	0002      	movs	r2, r0
 8009ee0:	000b      	movs	r3, r1
 8009ee2:	0010      	movs	r0, r2
 8009ee4:	0019      	movs	r1, r3
 8009ee6:	f7f6 f9f7 	bl	80002d8 <__aeabi_d2uiz>
 8009eea:	0003      	movs	r3, r0
 8009eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		break;
 8009eee:	46c0      	nop			@ (mov r8, r8)
	}

	return airTime;
 8009ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b010      	add	sp, #64	@ 0x40
 8009ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8009efa:	46c0      	nop			@ (mov r8, r8)
 8009efc:	200003b8 	.word	0x200003b8
 8009f00:	3ff00000 	.word	0x3ff00000
 8009f04:	40200000 	.word	0x40200000
 8009f08:	408f4000 	.word	0x408f4000
 8009f0c:	20000020 	.word	0x20000020
 8009f10:	40110000 	.word	0x40110000
 8009f14:	d916872b 	.word	0xd916872b
 8009f18:	3feff7ce 	.word	0x3feff7ce

08009f1c <RadioSend>:
 *        the radio in transmission
 *
 * \param buffer     Buffer pointer
 * \param size       Buffer size
 */
void RadioSend(uint8_t *buffer, uint8_t size){
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	000a      	movs	r2, r1
 8009f26:	1cfb      	adds	r3, r7, #3
 8009f28:	701a      	strb	r2, [r3, #0]
	SX126xSetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8009f2a:	4912      	ldr	r1, [pc, #72]	@ (8009f74 <RadioSend+0x58>)
 8009f2c:	4811      	ldr	r0, [pc, #68]	@ (8009f74 <RadioSend+0x58>)
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2200      	movs	r2, #0
 8009f32:	f000 fe59 	bl	800abe8 <SX126xSetDioIrqParams>
						  IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
						  IRQ_RADIO_NONE,
						  IRQ_RADIO_NONE);

	if (SX126xGetPacketType() == PACKET_TYPE_LORA){
 8009f36:	f000 ff29 	bl	800ad8c <SX126xGetPacketType>
 8009f3a:	0003      	movs	r3, r0
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d105      	bne.n	8009f4c <RadioSend+0x30>
		SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 8009f40:	4b0d      	ldr	r3, [pc, #52]	@ (8009f78 <RadioSend+0x5c>)
 8009f42:	1cfa      	adds	r2, r7, #3
 8009f44:	2127      	movs	r1, #39	@ 0x27
 8009f46:	7812      	ldrb	r2, [r2, #0]
 8009f48:	545a      	strb	r2, [r3, r1]
 8009f4a:	e004      	b.n	8009f56 <RadioSend+0x3a>
	}
	else{
		SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8009f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f78 <RadioSend+0x5c>)
 8009f4e:	1cfa      	adds	r2, r7, #3
 8009f50:	2120      	movs	r1, #32
 8009f52:	7812      	ldrb	r2, [r2, #0]
 8009f54:	545a      	strb	r2, [r3, r1]
	}
	SX126xSetPacketParams(&SX126x.PacketParams);
 8009f56:	4b09      	ldr	r3, [pc, #36]	@ (8009f7c <RadioSend+0x60>)
 8009f58:	0018      	movs	r0, r3
 8009f5a:	f001 f841 	bl	800afe0 <SX126xSetPacketParams>

	SX126xSendPayload(buffer, size, 0);
 8009f5e:	1cfb      	adds	r3, r7, #3
 8009f60:	7819      	ldrb	r1, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	0018      	movs	r0, r3
 8009f68:	f000 fbcd 	bl	800a706 <SX126xSendPayload>
//	TimerSetValue(&TxTimeoutTimer, TxTimeout);
//	TimerStart(&TxTimeoutTimer);
}
 8009f6c:	46c0      	nop			@ (mov r8, r8)
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	b002      	add	sp, #8
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	00000201 	.word	0x00000201
 8009f78:	200003b8 	.word	0x200003b8
 8009f7c:	200003d0 	.word	0x200003d0

08009f80 <RadioSleep>:

void RadioSleep(void){
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
	SleepParams_t params = {0};
 8009f86:	1d3b      	adds	r3, r7, #4
 8009f88:	2200      	movs	r2, #0
 8009f8a:	701a      	strb	r2, [r3, #0]

	params.Fields.WarmStart = 1;
 8009f8c:	1d3b      	adds	r3, r7, #4
 8009f8e:	781a      	ldrb	r2, [r3, #0]
 8009f90:	2104      	movs	r1, #4
 8009f92:	430a      	orrs	r2, r1
 8009f94:	701a      	strb	r2, [r3, #0]
	SX126xSetSleep(params);
 8009f96:	1d3b      	adds	r3, r7, #4
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	1c18      	adds	r0, r3, #0
 8009f9c:	f000 fc8a 	bl	800a8b4 <SX126xSetSleep>

	HAL_Delay(2);
 8009fa0:	2002      	movs	r0, #2
 8009fa2:	f7f9 fab9 	bl	8003518 <HAL_Delay>
}
 8009fa6:	46c0      	nop			@ (mov r8, r8)
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	b002      	add	sp, #8
 8009fac:	bd80      	pop	{r7, pc}

08009fae <RadioStandby>:

void RadioStandby(void){
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	af00      	add	r7, sp, #0
	SX126xSetStandby(STDBY_RC);
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	f000 fc92 	bl	800a8dc <SX126xSetStandby>
}
 8009fb8:	46c0      	nop			@ (mov r8, r8)
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <RadioRx>:

void RadioRx(uint32_t timeout){
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
	SX126xSetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
 8009fc8:	490c      	ldr	r1, [pc, #48]	@ (8009ffc <RadioRx+0x3c>)
 8009fca:	480c      	ldr	r0, [pc, #48]	@ (8009ffc <RadioRx+0x3c>)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f000 fe0a 	bl	800abe8 <SX126xSetDioIrqParams>

	if (timeout != 0){
//		TimerSetValue(&RxTimeoutTimer, timeout);
//		TimerStart(&RxTimeoutTimer);
	}
	if (RxContinuous == true){
 8009fd4:	4b0a      	ldr	r3, [pc, #40]	@ (800a000 <RadioRx+0x40>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d004      	beq.n	8009fe6 <RadioRx+0x26>
		SX126xSetRx(0xFFFFFF); // Rx Continuous
 8009fdc:	4b09      	ldr	r3, [pc, #36]	@ (800a004 <RadioRx+0x44>)
 8009fde:	0018      	movs	r0, r3
 8009fe0:	f000 fcba 	bl	800a958 <SX126xSetRx>
	}
	else{
		SX126xSetRx(RxTimeout << 6);
	}
}
 8009fe4:	e005      	b.n	8009ff2 <RadioRx+0x32>
		SX126xSetRx(RxTimeout << 6);
 8009fe6:	4b08      	ldr	r3, [pc, #32]	@ (800a008 <RadioRx+0x48>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	019b      	lsls	r3, r3, #6
 8009fec:	0018      	movs	r0, r3
 8009fee:	f000 fcb3 	bl	800a958 <SX126xSetRx>
}
 8009ff2:	46c0      	nop			@ (mov r8, r8)
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	b002      	add	sp, #8
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	46c0      	nop			@ (mov r8, r8)
 8009ffc:	00000262 	.word	0x00000262
 800a000:	20000294 	.word	0x20000294
 800a004:	00ffffff 	.word	0x00ffffff
 800a008:	20000290 	.word	0x20000290

0800a00c <RadioRxBoosted>:

void RadioRxBoosted(uint32_t timeout){
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
	SX126xSetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
 800a014:	490c      	ldr	r1, [pc, #48]	@ (800a048 <RadioRxBoosted+0x3c>)
 800a016:	480c      	ldr	r0, [pc, #48]	@ (800a048 <RadioRxBoosted+0x3c>)
 800a018:	2300      	movs	r3, #0
 800a01a:	2200      	movs	r2, #0
 800a01c:	f000 fde4 	bl	800abe8 <SX126xSetDioIrqParams>
						  IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
						  IRQ_RADIO_NONE,
						  IRQ_RADIO_NONE);

	if (RxContinuous == true){
 800a020:	4b0a      	ldr	r3, [pc, #40]	@ (800a04c <RadioRxBoosted+0x40>)
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d004      	beq.n	800a032 <RadioRxBoosted+0x26>
		// Even Continous mode is selected, put a timeout here
		if (timeout != 0){
//			TimerSetValue(&RxTimeoutTimer, timeout);
//			TimerStart(&RxTimeoutTimer);
		}
		SX126xSetRxBoosted(0xFFFFFF); // Rx Continuous
 800a028:	4b09      	ldr	r3, [pc, #36]	@ (800a050 <RadioRxBoosted+0x44>)
 800a02a:	0018      	movs	r0, r3
 800a02c:	f000 fcbc 	bl	800a9a8 <SX126xSetRxBoosted>
	}
	else{
		SX126xSetRxBoosted(RxTimeout << 6);
	}
}
 800a030:	e005      	b.n	800a03e <RadioRxBoosted+0x32>
		SX126xSetRxBoosted(RxTimeout << 6);
 800a032:	4b08      	ldr	r3, [pc, #32]	@ (800a054 <RadioRxBoosted+0x48>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	019b      	lsls	r3, r3, #6
 800a038:	0018      	movs	r0, r3
 800a03a:	f000 fcb5 	bl	800a9a8 <SX126xSetRxBoosted>
}
 800a03e:	46c0      	nop			@ (mov r8, r8)
 800a040:	46bd      	mov	sp, r7
 800a042:	b002      	add	sp, #8
 800a044:	bd80      	pop	{r7, pc}
 800a046:	46c0      	nop			@ (mov r8, r8)
 800a048:	00000262 	.word	0x00000262
 800a04c:	20000294 	.word	0x20000294
 800a050:	00ffffff 	.word	0x00ffffff
 800a054:	20000290 	.word	0x20000290

0800a058 <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime){
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
	SX126xSetDioIrqParams(IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT,
 800a062:	4908      	ldr	r1, [pc, #32]	@ (800a084 <RadioSetRxDutyCycle+0x2c>)
 800a064:	4807      	ldr	r0, [pc, #28]	@ (800a084 <RadioSetRxDutyCycle+0x2c>)
 800a066:	2300      	movs	r3, #0
 800a068:	2200      	movs	r2, #0
 800a06a:	f000 fdbd 	bl	800abe8 <SX126xSetDioIrqParams>
						  IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT,
						  IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SX126xSetRxDutyCycle(rxTime, sleepTime);
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	0011      	movs	r1, r2
 800a074:	0018      	movs	r0, r3
 800a076:	f000 fcbf 	bl	800a9f8 <SX126xSetRxDutyCycle>
}
 800a07a:	46c0      	nop			@ (mov r8, r8)
 800a07c:	46bd      	mov	sp, r7
 800a07e:	b002      	add	sp, #8
 800a080:	bd80      	pop	{r7, pc}
 800a082:	46c0      	nop			@ (mov r8, r8)
 800a084:	0000ffff 	.word	0x0000ffff

0800a088 <RadioSetCadParams>:

void RadioSetCadParams(uint8_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, uint8_t cadExitMode, uint32_t cadTimeout){
 800a088:	b5b0      	push	{r4, r5, r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af02      	add	r7, sp, #8
 800a08e:	0005      	movs	r5, r0
 800a090:	000c      	movs	r4, r1
 800a092:	0010      	movs	r0, r2
 800a094:	0019      	movs	r1, r3
 800a096:	1dfb      	adds	r3, r7, #7
 800a098:	1c2a      	adds	r2, r5, #0
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	1dbb      	adds	r3, r7, #6
 800a09e:	1c22      	adds	r2, r4, #0
 800a0a0:	701a      	strb	r2, [r3, #0]
 800a0a2:	1d7b      	adds	r3, r7, #5
 800a0a4:	1c02      	adds	r2, r0, #0
 800a0a6:	701a      	strb	r2, [r3, #0]
 800a0a8:	1d3b      	adds	r3, r7, #4
 800a0aa:	1c0a      	adds	r2, r1, #0
 800a0ac:	701a      	strb	r2, [r3, #0]
	SX126xSetCadParams((RadioLoRaCadSymbols_t)cadSymbolNum, cadDetPeak, cadDetMin, (RadioCadExitModes_t)cadExitMode, cadTimeout);
 800a0ae:	1d3b      	adds	r3, r7, #4
 800a0b0:	781c      	ldrb	r4, [r3, #0]
 800a0b2:	1d7b      	adds	r3, r7, #5
 800a0b4:	781a      	ldrb	r2, [r3, #0]
 800a0b6:	1dbb      	adds	r3, r7, #6
 800a0b8:	7819      	ldrb	r1, [r3, #0]
 800a0ba:	1dfb      	adds	r3, r7, #7
 800a0bc:	7818      	ldrb	r0, [r3, #0]
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	0023      	movs	r3, r4
 800a0c4:	f001 f83e 	bl	800b144 <SX126xSetCadParams>
}
 800a0c8:	46c0      	nop			@ (mov r8, r8)
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	b002      	add	sp, #8
 800a0ce:	bdb0      	pop	{r4, r5, r7, pc}

0800a0d0 <RadioStartCad>:

void RadioStartCad(void){
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
	SX126xSetDioIrqParams(IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED,
 800a0d4:	23c0      	movs	r3, #192	@ 0xc0
 800a0d6:	0059      	lsls	r1, r3, #1
 800a0d8:	23c0      	movs	r3, #192	@ 0xc0
 800a0da:	0058      	lsls	r0, r3, #1
 800a0dc:	2300      	movs	r3, #0
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f000 fd82 	bl	800abe8 <SX126xSetDioIrqParams>
						  IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED,
						  IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SX126xSetCad();
 800a0e4:	f000 fcb7 	bl	800aa56 <SX126xSetCad>
}
 800a0e8:	46c0      	nop			@ (mov r8, r8)
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <RadioSetTxContinuousWave>:
 *
 * \param freq       Channel RF frequency
 * \param power      Sets the output power [dBm]
 * \param time       Transmission mode timeout [s]
 */
void RadioSetTxContinuousWave(uint32_t freq, int8_t power, uint16_t time){
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	0008      	movs	r0, r1
 800a0f8:	0011      	movs	r1, r2
 800a0fa:	1cfb      	adds	r3, r7, #3
 800a0fc:	1c02      	adds	r2, r0, #0
 800a0fe:	701a      	strb	r2, [r3, #0]
 800a100:	003b      	movs	r3, r7
 800a102:	1c0a      	adds	r2, r1, #0
 800a104:	801a      	strh	r2, [r3, #0]
	SX126xSetRfFrequency(freq);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	0018      	movs	r0, r3
 800a10a:	f000 fde3 	bl	800acd4 <SX126xSetRfFrequency>
	SX126xSetRfTxPower(power);
 800a10e:	1cfb      	adds	r3, r7, #3
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	b25b      	sxtb	r3, r3
 800a114:	0018      	movs	r0, r3
 800a116:	f001 fb6b 	bl	800b7f0 <SX126xSetRfTxPower>
	SX126xSetTxContinuousWave();
 800a11a:	f000 fca9 	bl	800aa70 <SX126xSetTxContinuousWave>

//	TimerSetValue(&TxTimeoutTimer, time * 1e3);
//	TimerStart(&TxTimeoutTimer);
}
 800a11e:	46c0      	nop			@ (mov r8, r8)
 800a120:	46bd      	mov	sp, r7
 800a122:	b002      	add	sp, #8
 800a124:	bd80      	pop	{r7, pc}

0800a126 <RadioRssi>:

int16_t RadioRssi(RadioModems_t modem){
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	0002      	movs	r2, r0
 800a12e:	1dfb      	adds	r3, r7, #7
 800a130:	701a      	strb	r2, [r3, #0]
	return SX126xGetRssiInst();
 800a132:	f001 f865 	bl	800b200 <SX126xGetRssiInst>
 800a136:	0003      	movs	r3, r0
}
 800a138:	0018      	movs	r0, r3
 800a13a:	46bd      	mov	sp, r7
 800a13c:	b002      	add	sp, #8
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <RadioWrite>:
 * \brief Writes the radio register at the specified address
 *
 * \param  addr Register address
 * \param  data New register value
 */
void RadioWrite(uint16_t addr, uint8_t data){
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	0002      	movs	r2, r0
 800a148:	1dbb      	adds	r3, r7, #6
 800a14a:	801a      	strh	r2, [r3, #0]
 800a14c:	1d7b      	adds	r3, r7, #5
 800a14e:	1c0a      	adds	r2, r1, #0
 800a150:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegister(addr, data);
 800a152:	1d7b      	adds	r3, r7, #5
 800a154:	781a      	ldrb	r2, [r3, #0]
 800a156:	1dbb      	adds	r3, r7, #6
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	0011      	movs	r1, r2
 800a15c:	0018      	movs	r0, r3
 800a15e:	f001 fa53 	bl	800b608 <SX126xWriteRegister>
}
 800a162:	46c0      	nop			@ (mov r8, r8)
 800a164:	46bd      	mov	sp, r7
 800a166:	b002      	add	sp, #8
 800a168:	bd80      	pop	{r7, pc}

0800a16a <RadioRead>:
/*!
 * \brief Reads the radio register at the specified address
 *
 * \param  addr Register address
 */
uint8_t RadioRead(uint16_t addr){
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	0002      	movs	r2, r0
 800a172:	1dbb      	adds	r3, r7, #6
 800a174:	801a      	strh	r2, [r3, #0]
	return SX126xReadRegister(addr);
 800a176:	1dbb      	adds	r3, r7, #6
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	0018      	movs	r0, r3
 800a17c:	f001 fa9e 	bl	800b6bc <SX126xReadRegister>
 800a180:	0003      	movs	r3, r0
}
 800a182:	0018      	movs	r0, r3
 800a184:	46bd      	mov	sp, r7
 800a186:	b002      	add	sp, #8
 800a188:	bd80      	pop	{r7, pc}

0800a18a <RadioWriteBuffer>:

void RadioWriteBuffer(uint16_t addr, uint8_t *buffer, uint8_t size){
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6039      	str	r1, [r7, #0]
 800a192:	0011      	movs	r1, r2
 800a194:	1dbb      	adds	r3, r7, #6
 800a196:	1c02      	adds	r2, r0, #0
 800a198:	801a      	strh	r2, [r3, #0]
 800a19a:	1d7b      	adds	r3, r7, #5
 800a19c:	1c0a      	adds	r2, r1, #0
 800a19e:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegisters(addr, buffer, size);
 800a1a0:	1d7b      	adds	r3, r7, #5
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	1dbb      	adds	r3, r7, #6
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	f001 f9e7 	bl	800b580 <SX126xWriteRegisters>
}
 800a1b2:	46c0      	nop			@ (mov r8, r8)
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	b002      	add	sp, #8
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <RadioReadBuffer>:

void RadioReadBuffer(uint16_t addr, uint8_t *buffer, uint8_t size){
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6039      	str	r1, [r7, #0]
 800a1c2:	0011      	movs	r1, r2
 800a1c4:	1dbb      	adds	r3, r7, #6
 800a1c6:	1c02      	adds	r2, r0, #0
 800a1c8:	801a      	strh	r2, [r3, #0]
 800a1ca:	1d7b      	adds	r3, r7, #5
 800a1cc:	1c0a      	adds	r2, r1, #0
 800a1ce:	701a      	strb	r2, [r3, #0]
	SX126xReadRegisters(addr, buffer, size);
 800a1d0:	1d7b      	adds	r3, r7, #5
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	1dbb      	adds	r3, r7, #6
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	0018      	movs	r0, r3
 800a1de:	f001 fa27 	bl	800b630 <SX126xReadRegisters>
}
 800a1e2:	46c0      	nop			@ (mov r8, r8)
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	b002      	add	sp, #8
 800a1e8:	bd80      	pop	{r7, pc}
	...

0800a1ec <RadioSetMaxPayloadLength>:

void RadioReadFifo(uint8_t *buffer, uint8_t size){
	SX126xReadBuffer(0, buffer, size);
}

void RadioSetMaxPayloadLength(RadioModems_t modem, uint8_t max){
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	0002      	movs	r2, r0
 800a1f4:	1dfb      	adds	r3, r7, #7
 800a1f6:	701a      	strb	r2, [r3, #0]
 800a1f8:	1dbb      	adds	r3, r7, #6
 800a1fa:	1c0a      	adds	r2, r1, #0
 800a1fc:	701a      	strb	r2, [r3, #0]
	if (modem == MODEM_LORA){
 800a1fe:	1dfb      	adds	r3, r7, #7
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d10d      	bne.n	800a222 <RadioSetMaxPayloadLength+0x36>
		SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800a206:	4b11      	ldr	r3, [pc, #68]	@ (800a24c <RadioSetMaxPayloadLength+0x60>)
 800a208:	1dba      	adds	r2, r7, #6
 800a20a:	7812      	ldrb	r2, [r2, #0]
 800a20c:	701a      	strb	r2, [r3, #0]
 800a20e:	4b0f      	ldr	r3, [pc, #60]	@ (800a24c <RadioSetMaxPayloadLength+0x60>)
 800a210:	7819      	ldrb	r1, [r3, #0]
 800a212:	4b0f      	ldr	r3, [pc, #60]	@ (800a250 <RadioSetMaxPayloadLength+0x64>)
 800a214:	2227      	movs	r2, #39	@ 0x27
 800a216:	5499      	strb	r1, [r3, r2]
		SX126xSetPacketParams(&SX126x.PacketParams);
 800a218:	4b0e      	ldr	r3, [pc, #56]	@ (800a254 <RadioSetMaxPayloadLength+0x68>)
 800a21a:	0018      	movs	r0, r3
 800a21c:	f000 fee0 	bl	800afe0 <SX126xSetPacketParams>
		if (SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH){
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
			SX126xSetPacketParams(&SX126x.PacketParams);
		}
	}
}
 800a220:	e010      	b.n	800a244 <RadioSetMaxPayloadLength+0x58>
		if (SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH){
 800a222:	4b0b      	ldr	r3, [pc, #44]	@ (800a250 <RadioSetMaxPayloadLength+0x64>)
 800a224:	7fdb      	ldrb	r3, [r3, #31]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d10c      	bne.n	800a244 <RadioSetMaxPayloadLength+0x58>
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800a22a:	4b08      	ldr	r3, [pc, #32]	@ (800a24c <RadioSetMaxPayloadLength+0x60>)
 800a22c:	1dba      	adds	r2, r7, #6
 800a22e:	7812      	ldrb	r2, [r2, #0]
 800a230:	701a      	strb	r2, [r3, #0]
 800a232:	4b06      	ldr	r3, [pc, #24]	@ (800a24c <RadioSetMaxPayloadLength+0x60>)
 800a234:	7819      	ldrb	r1, [r3, #0]
 800a236:	4b06      	ldr	r3, [pc, #24]	@ (800a250 <RadioSetMaxPayloadLength+0x64>)
 800a238:	2220      	movs	r2, #32
 800a23a:	5499      	strb	r1, [r3, r2]
			SX126xSetPacketParams(&SX126x.PacketParams);
 800a23c:	4b05      	ldr	r3, [pc, #20]	@ (800a254 <RadioSetMaxPayloadLength+0x68>)
 800a23e:	0018      	movs	r0, r3
 800a240:	f000 fece 	bl	800afe0 <SX126xSetPacketParams>
}
 800a244:	46c0      	nop			@ (mov r8, r8)
 800a246:	46bd      	mov	sp, r7
 800a248:	b002      	add	sp, #8
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	200000b0 	.word	0x200000b0
 800a250:	200003b8 	.word	0x200003b8
 800a254:	200003d0 	.word	0x200003d0

0800a258 <RadioSetPublicNetwork>:

void RadioSetPublicNetwork(bool enable){
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	0002      	movs	r2, r0
 800a260:	1dfb      	adds	r3, r7, #7
 800a262:	701a      	strb	r2, [r3, #0]
	RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800a264:	4b14      	ldr	r3, [pc, #80]	@ (800a2b8 <RadioSetPublicNetwork+0x60>)
 800a266:	1dfa      	adds	r2, r7, #7
 800a268:	7812      	ldrb	r2, [r2, #0]
 800a26a:	701a      	strb	r2, [r3, #0]
 800a26c:	4b12      	ldr	r3, [pc, #72]	@ (800a2b8 <RadioSetPublicNetwork+0x60>)
 800a26e:	781a      	ldrb	r2, [r3, #0]
 800a270:	4b11      	ldr	r3, [pc, #68]	@ (800a2b8 <RadioSetPublicNetwork+0x60>)
 800a272:	705a      	strb	r2, [r3, #1]

	RadioSetModem(MODEM_LORA);
 800a274:	2001      	movs	r0, #1
 800a276:	f7ff f917 	bl	80094a8 <RadioSetModem>
	if (enable == true){
 800a27a:	1dfb      	adds	r3, r7, #7
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00b      	beq.n	800a29a <RadioSetPublicNetwork+0x42>
		// Change LoRa modem SyncWord
		SX126xWriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PUBLIC_SYNCWORD >> 8) & 0xFF);
 800a282:	23e8      	movs	r3, #232	@ 0xe8
 800a284:	00db      	lsls	r3, r3, #3
 800a286:	2134      	movs	r1, #52	@ 0x34
 800a288:	0018      	movs	r0, r3
 800a28a:	f001 f9bd 	bl	800b608 <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF);
 800a28e:	4b0b      	ldr	r3, [pc, #44]	@ (800a2bc <RadioSetPublicNetwork+0x64>)
 800a290:	2144      	movs	r1, #68	@ 0x44
 800a292:	0018      	movs	r0, r3
 800a294:	f001 f9b8 	bl	800b608 <SX126xWriteRegister>
	else{
		// Change LoRa modem SyncWord
		SX126xWriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
		SX126xWriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
	}
}
 800a298:	e00a      	b.n	800a2b0 <RadioSetPublicNetwork+0x58>
		SX126xWriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
 800a29a:	23e8      	movs	r3, #232	@ 0xe8
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	2114      	movs	r1, #20
 800a2a0:	0018      	movs	r0, r3
 800a2a2:	f001 f9b1 	bl	800b608 <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
 800a2a6:	4b05      	ldr	r3, [pc, #20]	@ (800a2bc <RadioSetPublicNetwork+0x64>)
 800a2a8:	2124      	movs	r1, #36	@ 0x24
 800a2aa:	0018      	movs	r0, r3
 800a2ac:	f001 f9ac 	bl	800b608 <SX126xWriteRegister>
}
 800a2b0:	46c0      	nop			@ (mov r8, r8)
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	b002      	add	sp, #8
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	200003b0 	.word	0x200003b0
 800a2bc:	00000741 	.word	0x00000741

0800a2c0 <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime(void){
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	af00      	add	r7, sp, #0
	return (RADIO_WAKEUP_TIME);
 800a2c4:	2303      	movs	r3, #3
}
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <RadioOnDioIrq>:
	RadioBgIrqProcess();
	RadioStandby();
	RadioSleep();
}

void RadioOnDioIrq(void){
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a2d0:	b672      	cpsid	i
}
 800a2d2:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	IrqFired = true;
 800a2d4:	4b03      	ldr	r3, [pc, #12]	@ (800a2e4 <RadioOnDioIrq+0x18>)
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a2da:	b662      	cpsie	i
}
 800a2dc:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
 800a2de:	46c0      	nop			@ (mov r8, r8)
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	200003ab 	.word	0x200003ab

0800a2e8 <RadioBgIrqProcess>:

void RadioBgIrqProcess(void){
 800a2e8:	b590      	push	{r4, r7, lr}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
	bool rx_timeout_handled = false;
 800a2ee:	1dfb      	adds	r3, r7, #7
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	701a      	strb	r2, [r3, #0]
	bool tx_timeout_handled = false;
 800a2f4:	1dbb      	adds	r3, r7, #6
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	701a      	strb	r2, [r3, #0]
	if (IrqFired == true){
 800a2fa:	4bad      	ldr	r3, [pc, #692]	@ (800a5b0 <RadioBgIrqProcess+0x2c8>)
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d100      	bne.n	800a304 <RadioBgIrqProcess+0x1c>
 800a302:	e11a      	b.n	800a53a <RadioBgIrqProcess+0x252>
  __ASM volatile ("cpsid i" : : : "memory");
 800a304:	b672      	cpsid	i
}
 800a306:	46c0      	nop			@ (mov r8, r8)
		__disable_irq();
		IrqFired = false;
 800a308:	4ba9      	ldr	r3, [pc, #676]	@ (800a5b0 <RadioBgIrqProcess+0x2c8>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a30e:	b662      	cpsie	i
}
 800a310:	46c0      	nop			@ (mov r8, r8)
		__enable_irq();

		uint16_t irqRegs = SX126xGetIrqStatus();
 800a312:	1d3c      	adds	r4, r7, #4
 800a314:	f000 fcb6 	bl	800ac84 <SX126xGetIrqStatus>
 800a318:	0003      	movs	r3, r0
 800a31a:	8023      	strh	r3, [r4, #0]
		SX126xClearIrqStatus(IRQ_RADIO_ALL);
 800a31c:	4ba5      	ldr	r3, [pc, #660]	@ (800a5b4 <RadioBgIrqProcess+0x2cc>)
 800a31e:	0018      	movs	r0, r3
 800a320:	f001 f81a 	bl	800b358 <SX126xClearIrqStatus>

		if ((irqRegs & IRQ_TX_DONE) == IRQ_TX_DONE){
 800a324:	1d3b      	adds	r3, r7, #4
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	2201      	movs	r2, #1
 800a32a:	4013      	ands	r3, r2
 800a32c:	d012      	beq.n	800a354 <RadioBgIrqProcess+0x6c>
			tx_timeout_handled = true;
 800a32e:	1dbb      	adds	r3, r7, #6
 800a330:	2201      	movs	r2, #1
 800a332:	701a      	strb	r2, [r3, #0]
//			TimerStop(&TxTimeoutTimer);
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 800a334:	2001      	movs	r0, #1
 800a336:	f000 f989 	bl	800a64c <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->TxDone != NULL)){
 800a33a:	4b9f      	ldr	r3, [pc, #636]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d008      	beq.n	800a354 <RadioBgIrqProcess+0x6c>
 800a342:	4b9d      	ldr	r3, [pc, #628]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <RadioBgIrqProcess+0x6c>
				RadioEvents->TxDone();
 800a34c:	4b9a      	ldr	r3, [pc, #616]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4798      	blx	r3
			}
		}

		if ((irqRegs & IRQ_RX_DONE) == IRQ_RX_DONE){
 800a354:	1d3b      	adds	r3, r7, #4
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	2202      	movs	r2, #2
 800a35a:	4013      	ands	r3, r2
 800a35c:	d06a      	beq.n	800a434 <RadioBgIrqProcess+0x14c>
			uint8_t size;

			rx_timeout_handled = true;
 800a35e:	1dfb      	adds	r3, r7, #7
 800a360:	2201      	movs	r2, #1
 800a362:	701a      	strb	r2, [r3, #0]
//			TimerStop(&RxTimeoutTimer);
			if (RxContinuous == false){
 800a364:	4b95      	ldr	r3, [pc, #596]	@ (800a5bc <RadioBgIrqProcess+0x2d4>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	2201      	movs	r2, #1
 800a36a:	4053      	eors	r3, r2
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d015      	beq.n	800a39e <RadioBgIrqProcess+0xb6>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 800a372:	2001      	movs	r0, #1
 800a374:	f000 f96a 	bl	800a64c <SX126xSetOperatingMode>

				// WORKAROUND - Implicit Header Mode Timeout Behavior, see DS_SX1261-2_V1.2 datasheet chapter 15.3
				// RegRtcControl = @address 0x0902
				SX126xWriteRegister(0x0902, 0x00);
 800a378:	4b91      	ldr	r3, [pc, #580]	@ (800a5c0 <RadioBgIrqProcess+0x2d8>)
 800a37a:	2100      	movs	r1, #0
 800a37c:	0018      	movs	r0, r3
 800a37e:	f001 f943 	bl	800b608 <SX126xWriteRegister>
				// RegEventMask = @address 0x0944
				SX126xWriteRegister(0x0944, SX126xReadRegister(0x0944) | (1 << 1));
 800a382:	4b90      	ldr	r3, [pc, #576]	@ (800a5c4 <RadioBgIrqProcess+0x2dc>)
 800a384:	0018      	movs	r0, r3
 800a386:	f001 f999 	bl	800b6bc <SX126xReadRegister>
 800a38a:	0003      	movs	r3, r0
 800a38c:	001a      	movs	r2, r3
 800a38e:	2302      	movs	r3, #2
 800a390:	4313      	orrs	r3, r2
 800a392:	b2db      	uxtb	r3, r3
 800a394:	4a8b      	ldr	r2, [pc, #556]	@ (800a5c4 <RadioBgIrqProcess+0x2dc>)
 800a396:	0019      	movs	r1, r3
 800a398:	0010      	movs	r0, r2
 800a39a:	f001 f935 	bl	800b608 <SX126xWriteRegister>
				// WORKAROUND END
			}
			memset(RadioRxPayload, 0, 255);
 800a39e:	4b8a      	ldr	r3, [pc, #552]	@ (800a5c8 <RadioBgIrqProcess+0x2e0>)
 800a3a0:	22ff      	movs	r2, #255	@ 0xff
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	f001 fa47 	bl	800b838 <memset>

			if ((irqRegs & IRQ_CRC_ERROR) == IRQ_CRC_ERROR){
 800a3aa:	1d3b      	adds	r3, r7, #4
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	2240      	movs	r2, #64	@ 0x40
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	d01d      	beq.n	800a3f0 <RadioBgIrqProcess+0x108>
				uint8_t size;
				// Discard buffer
				memset(RadioRxPayload, 0, 255);
 800a3b4:	4b84      	ldr	r3, [pc, #528]	@ (800a5c8 <RadioBgIrqProcess+0x2e0>)
 800a3b6:	22ff      	movs	r2, #255	@ 0xff
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f001 fa3c 	bl	800b838 <memset>
				SX126xGetPayload(RadioRxPayload, &size, 255);
 800a3c0:	1cb9      	adds	r1, r7, #2
 800a3c2:	4b81      	ldr	r3, [pc, #516]	@ (800a5c8 <RadioBgIrqProcess+0x2e0>)
 800a3c4:	22ff      	movs	r2, #255	@ 0xff
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	f000 f976 	bl	800a6b8 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 800a3cc:	4b7f      	ldr	r3, [pc, #508]	@ (800a5cc <RadioBgIrqProcess+0x2e4>)
 800a3ce:	0018      	movs	r0, r3
 800a3d0:	f000 ff66 	bl	800b2a0 <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxError)){
 800a3d4:	4b78      	ldr	r3, [pc, #480]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d02b      	beq.n	800a434 <RadioBgIrqProcess+0x14c>
 800a3dc:	4b76      	ldr	r3, [pc, #472]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d026      	beq.n	800a434 <RadioBgIrqProcess+0x14c>
					RadioEvents->RxError();
 800a3e6:	4b74      	ldr	r3, [pc, #464]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	4798      	blx	r3
 800a3ee:	e021      	b.n	800a434 <RadioBgIrqProcess+0x14c>
				}
			}
			else{
				SX126xGetPayload(RadioRxPayload, &size, 255);
 800a3f0:	1cf9      	adds	r1, r7, #3
 800a3f2:	4b75      	ldr	r3, [pc, #468]	@ (800a5c8 <RadioBgIrqProcess+0x2e0>)
 800a3f4:	22ff      	movs	r2, #255	@ 0xff
 800a3f6:	0018      	movs	r0, r3
 800a3f8:	f000 f95e 	bl	800a6b8 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 800a3fc:	4b73      	ldr	r3, [pc, #460]	@ (800a5cc <RadioBgIrqProcess+0x2e4>)
 800a3fe:	0018      	movs	r0, r3
 800a400:	f000 ff4e 	bl	800b2a0 <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxDone != NULL)){
 800a404:	4b6c      	ldr	r3, [pc, #432]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d013      	beq.n	800a434 <RadioBgIrqProcess+0x14c>
 800a40c:	4b6a      	ldr	r3, [pc, #424]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00e      	beq.n	800a434 <RadioBgIrqProcess+0x14c>
					RadioEvents->RxDone(RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt);
 800a416:	4b68      	ldr	r3, [pc, #416]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	689c      	ldr	r4, [r3, #8]
 800a41c:	1cfb      	adds	r3, r7, #3
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	0019      	movs	r1, r3
 800a422:	4b6a      	ldr	r3, [pc, #424]	@ (800a5cc <RadioBgIrqProcess+0x2e4>)
 800a424:	7b1b      	ldrb	r3, [r3, #12]
 800a426:	b25b      	sxtb	r3, r3
 800a428:	001a      	movs	r2, r3
 800a42a:	4b68      	ldr	r3, [pc, #416]	@ (800a5cc <RadioBgIrqProcess+0x2e4>)
 800a42c:	7b5b      	ldrb	r3, [r3, #13]
 800a42e:	b25b      	sxtb	r3, r3
 800a430:	4865      	ldr	r0, [pc, #404]	@ (800a5c8 <RadioBgIrqProcess+0x2e0>)
 800a432:	47a0      	blx	r4
				}
			}
		}

		if ((irqRegs & IRQ_CAD_DONE) == IRQ_CAD_DONE){
 800a434:	1d3b      	adds	r3, r7, #4
 800a436:	881b      	ldrh	r3, [r3, #0]
 800a438:	2280      	movs	r2, #128	@ 0x80
 800a43a:	4013      	ands	r3, r2
 800a43c:	d018      	beq.n	800a470 <RadioBgIrqProcess+0x188>
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 800a43e:	2001      	movs	r0, #1
 800a440:	f000 f904 	bl	800a64c <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->CadDone != NULL)){
 800a444:	4b5c      	ldr	r3, [pc, #368]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d011      	beq.n	800a470 <RadioBgIrqProcess+0x188>
 800a44c:	4b5a      	ldr	r3, [pc, #360]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00c      	beq.n	800a470 <RadioBgIrqProcess+0x188>
				RadioEvents->CadDone(((irqRegs & IRQ_CAD_ACTIVITY_DETECTED) == IRQ_CAD_ACTIVITY_DETECTED));
 800a456:	4b58      	ldr	r3, [pc, #352]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	1d3a      	adds	r2, r7, #4
 800a45e:	8811      	ldrh	r1, [r2, #0]
 800a460:	2280      	movs	r2, #128	@ 0x80
 800a462:	0052      	lsls	r2, r2, #1
 800a464:	400a      	ands	r2, r1
 800a466:	1e51      	subs	r1, r2, #1
 800a468:	418a      	sbcs	r2, r1
 800a46a:	b2d2      	uxtb	r2, r2
 800a46c:	0010      	movs	r0, r2
 800a46e:	4798      	blx	r3
			}
		}

		if ((irqRegs & IRQ_RX_TX_TIMEOUT) == IRQ_RX_TX_TIMEOUT){
 800a470:	1d3b      	adds	r3, r7, #4
 800a472:	881a      	ldrh	r2, [r3, #0]
 800a474:	2380      	movs	r3, #128	@ 0x80
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4013      	ands	r3, r2
 800a47a:	d030      	beq.n	800a4de <RadioBgIrqProcess+0x1f6>
			if (SX126xGetOperatingMode() == MODE_TX){
 800a47c:	f000 f8dc 	bl	800a638 <SX126xGetOperatingMode>
 800a480:	0003      	movs	r3, r0
 800a482:	2b04      	cmp	r3, #4
 800a484:	d113      	bne.n	800a4ae <RadioBgIrqProcess+0x1c6>
				tx_timeout_handled = true;
 800a486:	1dbb      	adds	r3, r7, #6
 800a488:	2201      	movs	r2, #1
 800a48a:	701a      	strb	r2, [r3, #0]
//				TimerStop(&TxTimeoutTimer);
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 800a48c:	2001      	movs	r0, #1
 800a48e:	f000 f8dd 	bl	800a64c <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL)){
 800a492:	4b49      	ldr	r3, [pc, #292]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d021      	beq.n	800a4de <RadioBgIrqProcess+0x1f6>
 800a49a:	4b47      	ldr	r3, [pc, #284]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01c      	beq.n	800a4de <RadioBgIrqProcess+0x1f6>
					RadioEvents->TxTimeout();
 800a4a4:	4b44      	ldr	r3, [pc, #272]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	4798      	blx	r3
 800a4ac:	e017      	b.n	800a4de <RadioBgIrqProcess+0x1f6>
				}
			}
			else if (SX126xGetOperatingMode() == MODE_RX){
 800a4ae:	f000 f8c3 	bl	800a638 <SX126xGetOperatingMode>
 800a4b2:	0003      	movs	r3, r0
 800a4b4:	2b05      	cmp	r3, #5
 800a4b6:	d112      	bne.n	800a4de <RadioBgIrqProcess+0x1f6>
				rx_timeout_handled = true;
 800a4b8:	1dfb      	adds	r3, r7, #7
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	701a      	strb	r2, [r3, #0]
//				TimerStop(&RxTimeoutTimer);
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 800a4be:	2001      	movs	r0, #1
 800a4c0:	f000 f8c4 	bl	800a64c <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)){
 800a4c4:	4b3c      	ldr	r3, [pc, #240]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d008      	beq.n	800a4de <RadioBgIrqProcess+0x1f6>
 800a4cc:	4b3a      	ldr	r3, [pc, #232]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d003      	beq.n	800a4de <RadioBgIrqProcess+0x1f6>
					RadioEvents->RxTimeout();
 800a4d6:	4b38      	ldr	r3, [pc, #224]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	4798      	blx	r3
				}
			}
		}

		if ((irqRegs & IRQ_PREAMBLE_DETECTED) == IRQ_PREAMBLE_DETECTED){
 800a4de:	1d3b      	adds	r3, r7, #4
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	2204      	movs	r2, #4
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	d00c      	beq.n	800a502 <RadioBgIrqProcess+0x21a>
			if ((RadioEvents != NULL) && (RadioEvents->PreAmpDetect != NULL)){
 800a4e8:	4b33      	ldr	r3, [pc, #204]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d008      	beq.n	800a502 <RadioBgIrqProcess+0x21a>
 800a4f0:	4b31      	ldr	r3, [pc, #196]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <RadioBgIrqProcess+0x21a>
				RadioEvents->PreAmpDetect();
 800a4fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	4798      	blx	r3

		if ((irqRegs & IRQ_HEADER_VALID) == IRQ_HEADER_VALID){
			//__NOP( );
		}

		if ((irqRegs & IRQ_HEADER_ERROR) == IRQ_HEADER_ERROR){
 800a502:	1d3b      	adds	r3, r7, #4
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	2220      	movs	r2, #32
 800a508:	4013      	ands	r3, r2
 800a50a:	d016      	beq.n	800a53a <RadioBgIrqProcess+0x252>
//			TimerStop(&RxTimeoutTimer);
			if (RxContinuous == false){
 800a50c:	4b2b      	ldr	r3, [pc, #172]	@ (800a5bc <RadioBgIrqProcess+0x2d4>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	2201      	movs	r2, #1
 800a512:	4053      	eors	r3, r2
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <RadioBgIrqProcess+0x238>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 800a51a:	2001      	movs	r0, #1
 800a51c:	f000 f896 	bl	800a64c <SX126xSetOperatingMode>
			}
			if ((RadioEvents != NULL) && (RadioEvents->RxError != NULL)){
 800a520:	4b25      	ldr	r3, [pc, #148]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d008      	beq.n	800a53a <RadioBgIrqProcess+0x252>
 800a528:	4b23      	ldr	r3, [pc, #140]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d003      	beq.n	800a53a <RadioBgIrqProcess+0x252>
				RadioEvents->RxError();
 800a532:	4b21      	ldr	r3, [pc, #132]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	4798      	blx	r3
			}
		}
	}
	if (TimerRxTimeout){
 800a53a:	4b25      	ldr	r3, [pc, #148]	@ (800a5d0 <RadioBgIrqProcess+0x2e8>)
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d016      	beq.n	800a570 <RadioBgIrqProcess+0x288>
		TimerRxTimeout = false;
 800a542:	4b23      	ldr	r3, [pc, #140]	@ (800a5d0 <RadioBgIrqProcess+0x2e8>)
 800a544:	2200      	movs	r2, #0
 800a546:	701a      	strb	r2, [r3, #0]
		if (!rx_timeout_handled){
 800a548:	1dfb      	adds	r3, r7, #7
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2201      	movs	r2, #1
 800a54e:	4053      	eors	r3, r2
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00c      	beq.n	800a570 <RadioBgIrqProcess+0x288>
//			TimerStop(&RxTimeoutTimer);
			if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)){
 800a556:	4b18      	ldr	r3, [pc, #96]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d008      	beq.n	800a570 <RadioBgIrqProcess+0x288>
 800a55e:	4b16      	ldr	r3, [pc, #88]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <RadioBgIrqProcess+0x288>
				RadioEvents->RxTimeout();
 800a568:	4b13      	ldr	r3, [pc, #76]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	4798      	blx	r3
			}
		}
	}
	if (TimerTxTimeout){
 800a570:	4b18      	ldr	r3, [pc, #96]	@ (800a5d4 <RadioBgIrqProcess+0x2ec>)
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d016      	beq.n	800a5a6 <RadioBgIrqProcess+0x2be>
		TimerTxTimeout = false;
 800a578:	4b16      	ldr	r3, [pc, #88]	@ (800a5d4 <RadioBgIrqProcess+0x2ec>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	701a      	strb	r2, [r3, #0]
		if (!tx_timeout_handled){
 800a57e:	1dbb      	adds	r3, r7, #6
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2201      	movs	r2, #1
 800a584:	4053      	eors	r3, r2
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00c      	beq.n	800a5a6 <RadioBgIrqProcess+0x2be>
//			TimerStop(&TxTimeoutTimer);
			if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL))
 800a58c:	4b0a      	ldr	r3, [pc, #40]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d008      	beq.n	800a5a6 <RadioBgIrqProcess+0x2be>
 800a594:	4b08      	ldr	r3, [pc, #32]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d003      	beq.n	800a5a6 <RadioBgIrqProcess+0x2be>
			{
				RadioEvents->TxTimeout();
 800a59e:	4b06      	ldr	r3, [pc, #24]	@ (800a5b8 <RadioBgIrqProcess+0x2d0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	4798      	blx	r3
			}
		}
	}
}
 800a5a6:	46c0      	nop			@ (mov r8, r8)
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	b003      	add	sp, #12
 800a5ac:	bd90      	pop	{r4, r7, pc}
 800a5ae:	46c0      	nop			@ (mov r8, r8)
 800a5b0:	200003ab 	.word	0x200003ab
 800a5b4:	0000ffff 	.word	0x0000ffff
 800a5b8:	200003b4 	.word	0x200003b4
 800a5bc:	20000294 	.word	0x20000294
 800a5c0:	00000902 	.word	0x00000902
 800a5c4:	00000944 	.word	0x00000944
 800a5c8:	200002ac 	.word	0x200002ac
 800a5cc:	20000298 	.word	0x20000298
 800a5d0:	200003ac 	.word	0x200003ac
 800a5d4:	200003ad 	.word	0x200003ad

0800a5d8 <RadioIrqProcess>:

void RadioIrqProcess(void){
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	af00      	add	r7, sp, #0
	RadioBgIrqProcess();
 800a5dc:	f7ff fe84 	bl	800a2e8 <RadioBgIrqProcess>
}
 800a5e0:	46c0      	nop			@ (mov r8, r8)
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
	...

0800a5e8 <RadioIrqProcessAfterDeepSleep>:

void RadioIrqProcessAfterDeepSleep(void){
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a5ec:	b672      	cpsid	i
}
 800a5ee:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	IrqFired = true;
 800a5f0:	4b04      	ldr	r3, [pc, #16]	@ (800a604 <RadioIrqProcessAfterDeepSleep+0x1c>)
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a5f6:	b662      	cpsie	i
}
 800a5f8:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
	RadioBgIrqProcess();
 800a5fa:	f7ff fe75 	bl	800a2e8 <RadioBgIrqProcess>
}
 800a5fe:	46c0      	nop			@ (mov r8, r8)
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	200003ab 	.word	0x200003ab

0800a608 <SX126xInit>:
/*
 * \brief Process the IRQ if handled by the driver
 */
void SX126xProcessIrqs(void);

void SX126xInit(void){
 800a608:	b580      	push	{r7, lr}
 800a60a:	af00      	add	r7, sp, #0
	SX126xReset();
 800a60c:	f000 fece 	bl	800b3ac <SX126xReset>
	SX126xWakeup();
 800a610:	f000 ff16 	bl	800b440 <SX126xWakeup>
	SX126xSetStandby(STDBY_RC);
 800a614:	2000      	movs	r0, #0
 800a616:	f000 f961 	bl	800a8dc <SX126xSetStandby>

	SX126xSetDio2AsRfSwitchCtrl(true);
 800a61a:	2001      	movs	r0, #1
 800a61c:	f000 fb49 	bl	800acb2 <SX126xSetDio2AsRfSwitchCtrl>

	SX126xSetOperatingMode(MODE_STDBY_RC);
 800a620:	2001      	movs	r0, #1
 800a622:	f000 f813 	bl	800a64c <SX126xSetOperatingMode>
}
 800a626:	46c0      	nop			@ (mov r8, r8)
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <SX126xReInit>:

void SX126xReInit(void){
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
}
 800a630:	46c0      	nop			@ (mov r8, r8)
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
	...

0800a638 <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode(void){
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
	return OperatingMode;
 800a63c:	4b02      	ldr	r3, [pc, #8]	@ (800a648 <SX126xGetOperatingMode+0x10>)
 800a63e:	781b      	ldrb	r3, [r3, #0]
}
 800a640:	0018      	movs	r0, r3
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	46c0      	nop			@ (mov r8, r8)
 800a648:	2000040c 	.word	0x2000040c

0800a64c <SX126xSetOperatingMode>:

void SX126xSetOperatingMode(RadioOperatingModes_t mode){
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	0002      	movs	r2, r0
 800a654:	1dfb      	adds	r3, r7, #7
 800a656:	701a      	strb	r2, [r3, #0]
	OperatingMode = mode;
 800a658:	4b03      	ldr	r3, [pc, #12]	@ (800a668 <SX126xSetOperatingMode+0x1c>)
 800a65a:	1dfa      	adds	r2, r7, #7
 800a65c:	7812      	ldrb	r2, [r2, #0]
 800a65e:	701a      	strb	r2, [r3, #0]
}
 800a660:	46c0      	nop			@ (mov r8, r8)
 800a662:	46bd      	mov	sp, r7
 800a664:	b002      	add	sp, #8
 800a666:	bd80      	pop	{r7, pc}
 800a668:	2000040c 	.word	0x2000040c

0800a66c <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady(void){
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
	if ((SX126xGetOperatingMode() == MODE_SLEEP) || (SX126xGetOperatingMode() == MODE_RX_DC)){
 800a670:	f7ff ffe2 	bl	800a638 <SX126xGetOperatingMode>
 800a674:	1e03      	subs	r3, r0, #0
 800a676:	d004      	beq.n	800a682 <SX126xCheckDeviceReady+0x16>
 800a678:	f7ff ffde 	bl	800a638 <SX126xGetOperatingMode>
 800a67c:	0003      	movs	r3, r0
 800a67e:	2b06      	cmp	r3, #6
 800a680:	d103      	bne.n	800a68a <SX126xCheckDeviceReady+0x1e>
		SX126xWakeup();
 800a682:	f000 fedd 	bl	800b440 <SX126xWakeup>
		// Switch is turned off when device is in sleep mode and turned on is all other modes
		SX126xAntSwOn();
 800a686:	f001 f8cd 	bl	800b824 <SX126xAntSwOn>
	}
	SX126xWaitOnBusy();
 800a68a:	f000 feaf 	bl	800b3ec <SX126xWaitOnBusy>
}
 800a68e:	46c0      	nop			@ (mov r8, r8)
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <SX126xSetPayload>:

void SX126xSetPayload(uint8_t *payload, uint8_t size){
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	000a      	movs	r2, r1
 800a69e:	1cfb      	adds	r3, r7, #3
 800a6a0:	701a      	strb	r2, [r3, #0]
	SX126xWriteBuffer(0x00, payload, size);
 800a6a2:	1cfb      	adds	r3, r7, #3
 800a6a4:	781a      	ldrb	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	0019      	movs	r1, r3
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	f001 f81a 	bl	800b6e4 <SX126xWriteBuffer>
}
 800a6b0:	46c0      	nop			@ (mov r8, r8)
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	b002      	add	sp, #8
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <SX126xGetPayload>:

uint8_t SX126xGetPayload(uint8_t *buffer, uint8_t *size, uint8_t maxSize){
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	1dfb      	adds	r3, r7, #7
 800a6c4:	701a      	strb	r2, [r3, #0]
	uint8_t offset = 0;
 800a6c6:	2117      	movs	r1, #23
 800a6c8:	187b      	adds	r3, r7, r1
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	701a      	strb	r2, [r3, #0]

	SX126xGetRxBufferStatus(size, &offset);
 800a6ce:	187a      	adds	r2, r7, r1
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	0011      	movs	r1, r2
 800a6d4:	0018      	movs	r0, r3
 800a6d6:	f000 fdad 	bl	800b234 <SX126xGetRxBufferStatus>
	if (*size > maxSize)
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	1dfa      	adds	r2, r7, #7
 800a6e0:	7812      	ldrb	r2, [r2, #0]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d201      	bcs.n	800a6ea <SX126xGetPayload+0x32>
		return 1;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e009      	b.n	800a6fe <SX126xGetPayload+0x46>
	SX126xReadBuffer(offset, buffer, *size);
 800a6ea:	2317      	movs	r3, #23
 800a6ec:	18fb      	adds	r3, r7, r3
 800a6ee:	7818      	ldrb	r0, [r3, #0]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	781a      	ldrb	r2, [r3, #0]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	0019      	movs	r1, r3
 800a6f8:	f001 f830 	bl	800b75c <SX126xReadBuffer>
	return 0;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	0018      	movs	r0, r3
 800a700:	46bd      	mov	sp, r7
 800a702:	b006      	add	sp, #24
 800a704:	bd80      	pop	{r7, pc}

0800a706 <SX126xSendPayload>:

void SX126xSendPayload(uint8_t *payload, uint8_t size, uint32_t timeout){
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	607a      	str	r2, [r7, #4]
 800a710:	200b      	movs	r0, #11
 800a712:	183b      	adds	r3, r7, r0
 800a714:	1c0a      	adds	r2, r1, #0
 800a716:	701a      	strb	r2, [r3, #0]
	SX126xSetPayload(payload, size);
 800a718:	183b      	adds	r3, r7, r0
 800a71a:	781a      	ldrb	r2, [r3, #0]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	0011      	movs	r1, r2
 800a720:	0018      	movs	r0, r3
 800a722:	f7ff ffb7 	bl	800a694 <SX126xSetPayload>
	SX126xSetTx(timeout);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	0018      	movs	r0, r3
 800a72a:	f000 f8f4 	bl	800a916 <SX126xSetTx>
}
 800a72e:	46c0      	nop			@ (mov r8, r8)
 800a730:	46bd      	mov	sp, r7
 800a732:	b004      	add	sp, #16
 800a734:	bd80      	pop	{r7, pc}

0800a736 <SX126xSetSyncWord>:

uint8_t SX126xSetSyncWord(uint8_t *syncWord){
 800a736:	b580      	push	{r7, lr}
 800a738:	b082      	sub	sp, #8
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
	SX126xWriteRegisters(REG_LR_SYNCWORDBASEADDRESS, syncWord, 8);
 800a73e:	6879      	ldr	r1, [r7, #4]
 800a740:	23d8      	movs	r3, #216	@ 0xd8
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	2208      	movs	r2, #8
 800a746:	0018      	movs	r0, r3
 800a748:	f000 ff1a 	bl	800b580 <SX126xWriteRegisters>
	return 0;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	0018      	movs	r0, r3
 800a750:	46bd      	mov	sp, r7
 800a752:	b002      	add	sp, #8
 800a754:	bd80      	pop	{r7, pc}
	...

0800a758 <SX126xSetCrcSeed>:

void SX126xSetCrcSeed(uint16_t seed){
 800a758:	b590      	push	{r4, r7, lr}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	0002      	movs	r2, r0
 800a760:	1dbb      	adds	r3, r7, #6
 800a762:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)((seed >> 8) & 0xFF);
 800a764:	1dbb      	adds	r3, r7, #6
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	0a1b      	lsrs	r3, r3, #8
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	240c      	movs	r4, #12
 800a770:	193b      	adds	r3, r7, r4
 800a772:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(seed & 0xFF);
 800a774:	1dbb      	adds	r3, r7, #6
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	193b      	adds	r3, r7, r4
 800a77c:	705a      	strb	r2, [r3, #1]

	switch (SX126xGetPacketType()){
 800a77e:	f000 fb05 	bl	800ad8c <SX126xGetPacketType>
 800a782:	1e03      	subs	r3, r0, #0
 800a784:	d106      	bne.n	800a794 <SX126xSetCrcSeed+0x3c>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCSEEDBASEADDR, buf, 2);
 800a786:	193b      	adds	r3, r7, r4
 800a788:	4805      	ldr	r0, [pc, #20]	@ (800a7a0 <SX126xSetCrcSeed+0x48>)
 800a78a:	2202      	movs	r2, #2
 800a78c:	0019      	movs	r1, r3
 800a78e:	f000 fef7 	bl	800b580 <SX126xWriteRegisters>
		break;
 800a792:	e000      	b.n	800a796 <SX126xSetCrcSeed+0x3e>

		default:
		break;
 800a794:	46c0      	nop			@ (mov r8, r8)
	}
}
 800a796:	46c0      	nop			@ (mov r8, r8)
 800a798:	46bd      	mov	sp, r7
 800a79a:	b005      	add	sp, #20
 800a79c:	bd90      	pop	{r4, r7, pc}
 800a79e:	46c0      	nop			@ (mov r8, r8)
 800a7a0:	000006bc 	.word	0x000006bc

0800a7a4 <SX126xSetCrcPolynomial>:

void SX126xSetCrcPolynomial(uint16_t polynomial){
 800a7a4:	b590      	push	{r4, r7, lr}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	0002      	movs	r2, r0
 800a7ac:	1dbb      	adds	r3, r7, #6
 800a7ae:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)((polynomial >> 8) & 0xFF);
 800a7b0:	1dbb      	adds	r3, r7, #6
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	0a1b      	lsrs	r3, r3, #8
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	240c      	movs	r4, #12
 800a7bc:	193b      	adds	r3, r7, r4
 800a7be:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(polynomial & 0xFF);
 800a7c0:	1dbb      	adds	r3, r7, #6
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	193b      	adds	r3, r7, r4
 800a7c8:	705a      	strb	r2, [r3, #1]

	switch (SX126xGetPacketType()){
 800a7ca:	f000 fadf 	bl	800ad8c <SX126xGetPacketType>
 800a7ce:	1e03      	subs	r3, r0, #0
 800a7d0:	d106      	bne.n	800a7e0 <SX126xSetCrcPolynomial+0x3c>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCPOLYBASEADDR, buf, 2);
 800a7d2:	193b      	adds	r3, r7, r4
 800a7d4:	4805      	ldr	r0, [pc, #20]	@ (800a7ec <SX126xSetCrcPolynomial+0x48>)
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	0019      	movs	r1, r3
 800a7da:	f000 fed1 	bl	800b580 <SX126xWriteRegisters>
		break;
 800a7de:	e000      	b.n	800a7e2 <SX126xSetCrcPolynomial+0x3e>

		default:
		break;
 800a7e0:	46c0      	nop			@ (mov r8, r8)
	}
}
 800a7e2:	46c0      	nop			@ (mov r8, r8)
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	b005      	add	sp, #20
 800a7e8:	bd90      	pop	{r4, r7, pc}
 800a7ea:	46c0      	nop			@ (mov r8, r8)
 800a7ec:	000006be 	.word	0x000006be

0800a7f0 <SX126xSetWhiteningSeed>:

void SX126xSetWhiteningSeed(uint16_t seed){
 800a7f0:	b590      	push	{r4, r7, lr}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	0002      	movs	r2, r0
 800a7f8:	1dbb      	adds	r3, r7, #6
 800a7fa:	801a      	strh	r2, [r3, #0]
	uint8_t regValue = 0;
 800a7fc:	240f      	movs	r4, #15
 800a7fe:	193b      	adds	r3, r7, r4
 800a800:	2200      	movs	r2, #0
 800a802:	701a      	strb	r2, [r3, #0]

	switch (SX126xGetPacketType()){
 800a804:	f000 fac2 	bl	800ad8c <SX126xGetPacketType>
 800a808:	1e03      	subs	r3, r0, #0
 800a80a:	d12c      	bne.n	800a866 <SX126xSetWhiteningSeed+0x76>
		case PACKET_TYPE_GFSK:
			regValue = SX126xReadRegister(REG_LR_WHITSEEDBASEADDR_MSB) & 0xFE;
 800a80c:	23d7      	movs	r3, #215	@ 0xd7
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	0018      	movs	r0, r3
 800a812:	f000 ff53 	bl	800b6bc <SX126xReadRegister>
 800a816:	0003      	movs	r3, r0
 800a818:	0019      	movs	r1, r3
 800a81a:	0020      	movs	r0, r4
 800a81c:	183b      	adds	r3, r7, r0
 800a81e:	2201      	movs	r2, #1
 800a820:	4391      	bics	r1, r2
 800a822:	000a      	movs	r2, r1
 800a824:	701a      	strb	r2, [r3, #0]
			regValue = ((seed >> 8) & 0x01) | regValue;
 800a826:	1dbb      	adds	r3, r7, #6
 800a828:	881b      	ldrh	r3, [r3, #0]
 800a82a:	0a1b      	lsrs	r3, r3, #8
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	b25b      	sxtb	r3, r3
 800a830:	2201      	movs	r2, #1
 800a832:	4013      	ands	r3, r2
 800a834:	b25a      	sxtb	r2, r3
 800a836:	183b      	adds	r3, r7, r0
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	b25b      	sxtb	r3, r3
 800a83c:	4313      	orrs	r3, r2
 800a83e:	b25a      	sxtb	r2, r3
 800a840:	183b      	adds	r3, r7, r0
 800a842:	701a      	strb	r2, [r3, #0]
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_MSB, regValue); // only 1 bit.
 800a844:	183b      	adds	r3, r7, r0
 800a846:	781a      	ldrb	r2, [r3, #0]
 800a848:	23d7      	movs	r3, #215	@ 0xd7
 800a84a:	00db      	lsls	r3, r3, #3
 800a84c:	0011      	movs	r1, r2
 800a84e:	0018      	movs	r0, r3
 800a850:	f000 feda 	bl	800b608 <SX126xWriteRegister>
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed);
 800a854:	1dbb      	adds	r3, r7, #6
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	4a05      	ldr	r2, [pc, #20]	@ (800a870 <SX126xSetWhiteningSeed+0x80>)
 800a85c:	0019      	movs	r1, r3
 800a85e:	0010      	movs	r0, r2
 800a860:	f000 fed2 	bl	800b608 <SX126xWriteRegister>
		break;
 800a864:	e000      	b.n	800a868 <SX126xSetWhiteningSeed+0x78>

		default:
		break;
 800a866:	46c0      	nop			@ (mov r8, r8)
	}
}
 800a868:	46c0      	nop			@ (mov r8, r8)
 800a86a:	46bd      	mov	sp, r7
 800a86c:	b005      	add	sp, #20
 800a86e:	bd90      	pop	{r4, r7, pc}
 800a870:	000006b9 	.word	0x000006b9

0800a874 <SX126xGetRandom>:

uint32_t SX126xGetRandom(void){
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
	uint8_t buf[] = {0, 0, 0, 0};
 800a87a:	1d3b      	adds	r3, r7, #4
 800a87c:	2200      	movs	r2, #0
 800a87e:	601a      	str	r2, [r3, #0]

	SX126xReadRegisters(RANDOM_NUMBER_GENERATORBASEADDR, buf, 4);
 800a880:	1d3b      	adds	r3, r7, #4
 800a882:	480b      	ldr	r0, [pc, #44]	@ (800a8b0 <SX126xGetRandom+0x3c>)
 800a884:	2204      	movs	r2, #4
 800a886:	0019      	movs	r1, r3
 800a888:	f000 fed2 	bl	800b630 <SX126xReadRegisters>

	return (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 800a88c:	1d3b      	adds	r3, r7, #4
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	061a      	lsls	r2, r3, #24
 800a892:	1d3b      	adds	r3, r7, #4
 800a894:	785b      	ldrb	r3, [r3, #1]
 800a896:	041b      	lsls	r3, r3, #16
 800a898:	431a      	orrs	r2, r3
 800a89a:	1d3b      	adds	r3, r7, #4
 800a89c:	789b      	ldrb	r3, [r3, #2]
 800a89e:	021b      	lsls	r3, r3, #8
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	1d3a      	adds	r2, r7, #4
 800a8a4:	78d2      	ldrb	r2, [r2, #3]
 800a8a6:	4313      	orrs	r3, r2
}
 800a8a8:	0018      	movs	r0, r3
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	b002      	add	sp, #8
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	00000819 	.word	0x00000819

0800a8b4 <SX126xSetSleep>:

void SX126xSetSleep(SleepParams_t sleepConfig){
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	1d3b      	adds	r3, r7, #4
 800a8bc:	7018      	strb	r0, [r3, #0]
	SX126xAntSwOff();
 800a8be:	f000 ffb6 	bl	800b82e <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_SLEEP, &sleepConfig.Value, 1);
 800a8c2:	1d3b      	adds	r3, r7, #4
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	0019      	movs	r1, r3
 800a8c8:	2084      	movs	r0, #132	@ 0x84
 800a8ca:	f000 fde5 	bl	800b498 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_SLEEP);
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	f7ff febc 	bl	800a64c <SX126xSetOperatingMode>
}
 800a8d4:	46c0      	nop			@ (mov r8, r8)
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	b002      	add	sp, #8
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <SX126xSetStandby>:

void SX126xSetStandby(RadioStandbyModes_t standbyConfig){
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	0002      	movs	r2, r0
 800a8e4:	1dfb      	adds	r3, r7, #7
 800a8e6:	701a      	strb	r2, [r3, #0]
	SX126xAntSwOff();
 800a8e8:	f000 ffa1 	bl	800b82e <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_STANDBY, (uint8_t *)&standbyConfig, 1);
 800a8ec:	1dfb      	adds	r3, r7, #7
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	0019      	movs	r1, r3
 800a8f2:	2080      	movs	r0, #128	@ 0x80
 800a8f4:	f000 fdd0 	bl	800b498 <SX126xWriteCommand>
	if (standbyConfig == STDBY_RC){
 800a8f8:	1dfb      	adds	r3, r7, #7
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d103      	bne.n	800a908 <SX126xSetStandby+0x2c>
		SX126xSetOperatingMode(MODE_STDBY_RC);
 800a900:	2001      	movs	r0, #1
 800a902:	f7ff fea3 	bl	800a64c <SX126xSetOperatingMode>
	}
	else{
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
	}
}
 800a906:	e002      	b.n	800a90e <SX126xSetStandby+0x32>
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
 800a908:	2002      	movs	r0, #2
 800a90a:	f7ff fe9f 	bl	800a64c <SX126xSetOperatingMode>
}
 800a90e:	46c0      	nop			@ (mov r8, r8)
 800a910:	46bd      	mov	sp, r7
 800a912:	b002      	add	sp, #8
 800a914:	bd80      	pop	{r7, pc}

0800a916 <SX126xSetTx>:
void SX126xSetFs(void){
	SX126xWriteCommand(RADIO_SET_FS, 0, 0);
	SX126xSetOperatingMode(MODE_FS);
}

void SX126xSetTx(uint32_t timeout){
 800a916:	b580      	push	{r7, lr}
 800a918:	b084      	sub	sp, #16
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_TX);
 800a91e:	2004      	movs	r0, #4
 800a920:	f7ff fe94 	bl	800a64c <SX126xSetOperatingMode>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	0c1b      	lsrs	r3, r3, #16
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	210c      	movs	r1, #12
 800a92c:	187b      	adds	r3, r7, r1
 800a92e:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	0a1b      	lsrs	r3, r3, #8
 800a934:	b2da      	uxtb	r2, r3
 800a936:	187b      	adds	r3, r7, r1
 800a938:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	187b      	adds	r3, r7, r1
 800a940:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_TX, buf, 3);
 800a942:	187b      	adds	r3, r7, r1
 800a944:	2203      	movs	r2, #3
 800a946:	0019      	movs	r1, r3
 800a948:	2083      	movs	r0, #131	@ 0x83
 800a94a:	f000 fda5 	bl	800b498 <SX126xWriteCommand>
}
 800a94e:	46c0      	nop			@ (mov r8, r8)
 800a950:	46bd      	mov	sp, r7
 800a952:	b004      	add	sp, #16
 800a954:	bd80      	pop	{r7, pc}
	...

0800a958 <SX126xSetRx>:

void SX126xSetRx(uint32_t timeout){
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 800a960:	2005      	movs	r0, #5
 800a962:	f7ff fe73 	bl	800a64c <SX126xSetOperatingMode>

    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 800a966:	4b0f      	ldr	r3, [pc, #60]	@ (800a9a4 <SX126xSetRx+0x4c>)
 800a968:	2194      	movs	r1, #148	@ 0x94
 800a96a:	0018      	movs	r0, r3
 800a96c:	f000 fe4c 	bl	800b608 <SX126xWriteRegister>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	0c1b      	lsrs	r3, r3, #16
 800a974:	b2da      	uxtb	r2, r3
 800a976:	210c      	movs	r1, #12
 800a978:	187b      	adds	r3, r7, r1
 800a97a:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	0a1b      	lsrs	r3, r3, #8
 800a980:	b2da      	uxtb	r2, r3
 800a982:	187b      	adds	r3, r7, r1
 800a984:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	187b      	adds	r3, r7, r1
 800a98c:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 800a98e:	187b      	adds	r3, r7, r1
 800a990:	2203      	movs	r2, #3
 800a992:	0019      	movs	r1, r3
 800a994:	2082      	movs	r0, #130	@ 0x82
 800a996:	f000 fd7f 	bl	800b498 <SX126xWriteCommand>
}
 800a99a:	46c0      	nop			@ (mov r8, r8)
 800a99c:	46bd      	mov	sp, r7
 800a99e:	b004      	add	sp, #16
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	46c0      	nop			@ (mov r8, r8)
 800a9a4:	000008ac 	.word	0x000008ac

0800a9a8 <SX126xSetRxBoosted>:

void SX126xSetRxBoosted(uint32_t timeout){
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 800a9b0:	2005      	movs	r0, #5
 800a9b2:	f7ff fe4b 	bl	800a64c <SX126xSetOperatingMode>

	SX126xWriteRegister(REG_RX_GAIN, 0x96); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 800a9b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f4 <SX126xSetRxBoosted+0x4c>)
 800a9b8:	2196      	movs	r1, #150	@ 0x96
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	f000 fe24 	bl	800b608 <SX126xWriteRegister>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	0c1b      	lsrs	r3, r3, #16
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	210c      	movs	r1, #12
 800a9c8:	187b      	adds	r3, r7, r1
 800a9ca:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	0a1b      	lsrs	r3, r3, #8
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	187b      	adds	r3, r7, r1
 800a9d4:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	187b      	adds	r3, r7, r1
 800a9dc:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 800a9de:	187b      	adds	r3, r7, r1
 800a9e0:	2203      	movs	r2, #3
 800a9e2:	0019      	movs	r1, r3
 800a9e4:	2082      	movs	r0, #130	@ 0x82
 800a9e6:	f000 fd57 	bl	800b498 <SX126xWriteCommand>
}
 800a9ea:	46c0      	nop			@ (mov r8, r8)
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	b004      	add	sp, #16
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	46c0      	nop			@ (mov r8, r8)
 800a9f4:	000008ac 	.word	0x000008ac

0800a9f8 <SX126xSetRxDutyCycle>:

void SX126xSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime){
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	buf[0] = (uint8_t)((rxTime >> 16) & 0xFF);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	0c1b      	lsrs	r3, r3, #16
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	2108      	movs	r1, #8
 800aa0a:	187b      	adds	r3, r7, r1
 800aa0c:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((rxTime >> 8) & 0xFF);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	0a1b      	lsrs	r3, r3, #8
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	187b      	adds	r3, r7, r1
 800aa16:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(rxTime & 0xFF);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	b2da      	uxtb	r2, r3
 800aa1c:	187b      	adds	r3, r7, r1
 800aa1e:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)((sleepTime >> 16) & 0xFF);
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	0c1b      	lsrs	r3, r3, #16
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	187b      	adds	r3, r7, r1
 800aa28:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((sleepTime >> 8) & 0xFF);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	0a1b      	lsrs	r3, r3, #8
 800aa2e:	b2da      	uxtb	r2, r3
 800aa30:	187b      	adds	r3, r7, r1
 800aa32:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)(sleepTime & 0xFF);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	187b      	adds	r3, r7, r1
 800aa3a:	715a      	strb	r2, [r3, #5]
	SX126xWriteCommand(RADIO_SET_RXDUTYCYCLE, buf, 6);
 800aa3c:	187b      	adds	r3, r7, r1
 800aa3e:	2206      	movs	r2, #6
 800aa40:	0019      	movs	r1, r3
 800aa42:	2094      	movs	r0, #148	@ 0x94
 800aa44:	f000 fd28 	bl	800b498 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_RX_DC);
 800aa48:	2006      	movs	r0, #6
 800aa4a:	f7ff fdff 	bl	800a64c <SX126xSetOperatingMode>
}
 800aa4e:	46c0      	nop			@ (mov r8, r8)
 800aa50:	46bd      	mov	sp, r7
 800aa52:	b004      	add	sp, #16
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <SX126xSetCad>:

void SX126xSetCad(void){
 800aa56:	b580      	push	{r7, lr}
 800aa58:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_CAD, 0, 0);
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	20c5      	movs	r0, #197	@ 0xc5
 800aa60:	f000 fd1a 	bl	800b498 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_CAD);
 800aa64:	2007      	movs	r0, #7
 800aa66:	f7ff fdf1 	bl	800a64c <SX126xSetOperatingMode>
}
 800aa6a:	46c0      	nop			@ (mov r8, r8)
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <SX126xSetTxContinuousWave>:

void SX126xSetTxContinuousWave(void){
 800aa70:	b580      	push	{r7, lr}
 800aa72:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSWAVE, 0, 0);
 800aa74:	2200      	movs	r2, #0
 800aa76:	2100      	movs	r1, #0
 800aa78:	20d1      	movs	r0, #209	@ 0xd1
 800aa7a:	f000 fd0d 	bl	800b498 <SX126xWriteCommand>
}
 800aa7e:	46c0      	nop			@ (mov r8, r8)
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <SX126xSetStopRxTimerOnPreambleDetect>:

void SX126xSetTxInfinitePreamble(void){
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0);
}

void SX126xSetStopRxTimerOnPreambleDetect(bool enable){
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	0002      	movs	r2, r0
 800aa8c:	1dfb      	adds	r3, r7, #7
 800aa8e:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_STOPRXTIMERONPREAMBLE, (uint8_t *)&enable, 1);
 800aa90:	1dfb      	adds	r3, r7, #7
 800aa92:	2201      	movs	r2, #1
 800aa94:	0019      	movs	r1, r3
 800aa96:	209f      	movs	r0, #159	@ 0x9f
 800aa98:	f000 fcfe 	bl	800b498 <SX126xWriteCommand>
}
 800aa9c:	46c0      	nop			@ (mov r8, r8)
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	b002      	add	sp, #8
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <SX126xSetLoRaSymbNumTimeout>:

void SX126xSetLoRaSymbNumTimeout(uint8_t SymbNum){
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	0002      	movs	r2, r0
 800aaac:	1dfb      	adds	r3, r7, #7
 800aaae:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_LORASYMBTIMEOUT, &SymbNum, 1);
 800aab0:	1dfb      	adds	r3, r7, #7
 800aab2:	2201      	movs	r2, #1
 800aab4:	0019      	movs	r1, r3
 800aab6:	20a0      	movs	r0, #160	@ 0xa0
 800aab8:	f000 fcee 	bl	800b498 <SX126xWriteCommand>
}
 800aabc:	46c0      	nop			@ (mov r8, r8)
 800aabe:	46bd      	mov	sp, r7
 800aac0:	b002      	add	sp, #8
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <SX126xSetRegulatorMode>:

void SX126xSetRegulatorMode(RadioRegulatorMode_t mode){
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	0002      	movs	r2, r0
 800aacc:	1dfb      	adds	r3, r7, #7
 800aace:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_REGULATORMODE, (uint8_t *)&mode, 1);
 800aad0:	1dfb      	adds	r3, r7, #7
 800aad2:	2201      	movs	r2, #1
 800aad4:	0019      	movs	r1, r3
 800aad6:	2096      	movs	r0, #150	@ 0x96
 800aad8:	f000 fcde 	bl	800b498 <SX126xWriteCommand>
}
 800aadc:	46c0      	nop			@ (mov r8, r8)
 800aade:	46bd      	mov	sp, r7
 800aae0:	b002      	add	sp, #8
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <SX126xCalibrateImage>:

void SX126xCalibrate(CalibrationParams_t calibParam){
	SX126xWriteCommand(RADIO_CALIBRATE, (uint8_t *)&calibParam, 1);
}

void SX126xCalibrateImage(uint32_t freq){
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
	uint8_t calFreq[2];

	if (freq > 900000000){
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a22      	ldr	r2, [pc, #136]	@ (800ab78 <SX126xCalibrateImage+0x94>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d907      	bls.n	800ab04 <SX126xCalibrateImage+0x20>
		calFreq[0] = 0xE1;
 800aaf4:	210c      	movs	r1, #12
 800aaf6:	187b      	adds	r3, r7, r1
 800aaf8:	22e1      	movs	r2, #225	@ 0xe1
 800aafa:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xE9;
 800aafc:	187b      	adds	r3, r7, r1
 800aafe:	22e9      	movs	r2, #233	@ 0xe9
 800ab00:	705a      	strb	r2, [r3, #1]
 800ab02:	e02e      	b.n	800ab62 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 850000000){
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a1d      	ldr	r2, [pc, #116]	@ (800ab7c <SX126xCalibrateImage+0x98>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d907      	bls.n	800ab1c <SX126xCalibrateImage+0x38>
		calFreq[0] = 0xD7;
 800ab0c:	210c      	movs	r1, #12
 800ab0e:	187b      	adds	r3, r7, r1
 800ab10:	22d7      	movs	r2, #215	@ 0xd7
 800ab12:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xDB;
 800ab14:	187b      	adds	r3, r7, r1
 800ab16:	22db      	movs	r2, #219	@ 0xdb
 800ab18:	705a      	strb	r2, [r3, #1]
 800ab1a:	e022      	b.n	800ab62 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 770000000){
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a18      	ldr	r2, [pc, #96]	@ (800ab80 <SX126xCalibrateImage+0x9c>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d907      	bls.n	800ab34 <SX126xCalibrateImage+0x50>
		calFreq[0] = 0xC1;
 800ab24:	210c      	movs	r1, #12
 800ab26:	187b      	adds	r3, r7, r1
 800ab28:	22c1      	movs	r2, #193	@ 0xc1
 800ab2a:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xC5;
 800ab2c:	187b      	adds	r3, r7, r1
 800ab2e:	22c5      	movs	r2, #197	@ 0xc5
 800ab30:	705a      	strb	r2, [r3, #1]
 800ab32:	e016      	b.n	800ab62 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 460000000){
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a13      	ldr	r2, [pc, #76]	@ (800ab84 <SX126xCalibrateImage+0xa0>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d907      	bls.n	800ab4c <SX126xCalibrateImage+0x68>
		calFreq[0] = 0x75;
 800ab3c:	210c      	movs	r1, #12
 800ab3e:	187b      	adds	r3, r7, r1
 800ab40:	2275      	movs	r2, #117	@ 0x75
 800ab42:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0x81;
 800ab44:	187b      	adds	r3, r7, r1
 800ab46:	2281      	movs	r2, #129	@ 0x81
 800ab48:	705a      	strb	r2, [r3, #1]
 800ab4a:	e00a      	b.n	800ab62 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 425000000){
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a0e      	ldr	r2, [pc, #56]	@ (800ab88 <SX126xCalibrateImage+0xa4>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d906      	bls.n	800ab62 <SX126xCalibrateImage+0x7e>
		calFreq[0] = 0x6B;
 800ab54:	210c      	movs	r1, #12
 800ab56:	187b      	adds	r3, r7, r1
 800ab58:	226b      	movs	r2, #107	@ 0x6b
 800ab5a:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0x6F;
 800ab5c:	187b      	adds	r3, r7, r1
 800ab5e:	226f      	movs	r2, #111	@ 0x6f
 800ab60:	705a      	strb	r2, [r3, #1]
	}
	SX126xWriteCommand(RADIO_CALIBRATEIMAGE, calFreq, 2);
 800ab62:	230c      	movs	r3, #12
 800ab64:	18fb      	adds	r3, r7, r3
 800ab66:	2202      	movs	r2, #2
 800ab68:	0019      	movs	r1, r3
 800ab6a:	2098      	movs	r0, #152	@ 0x98
 800ab6c:	f000 fc94 	bl	800b498 <SX126xWriteCommand>
}
 800ab70:	46c0      	nop			@ (mov r8, r8)
 800ab72:	46bd      	mov	sp, r7
 800ab74:	b004      	add	sp, #16
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	35a4e900 	.word	0x35a4e900
 800ab7c:	32a9f880 	.word	0x32a9f880
 800ab80:	2de54480 	.word	0x2de54480
 800ab84:	1b6b0b00 	.word	0x1b6b0b00
 800ab88:	1954fc40 	.word	0x1954fc40

0800ab8c <SX126xSetPaConfig>:

void SX126xSetPaConfig(uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut){
 800ab8c:	b5b0      	push	{r4, r5, r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	0005      	movs	r5, r0
 800ab94:	000c      	movs	r4, r1
 800ab96:	0010      	movs	r0, r2
 800ab98:	0019      	movs	r1, r3
 800ab9a:	1dfb      	adds	r3, r7, #7
 800ab9c:	1c2a      	adds	r2, r5, #0
 800ab9e:	701a      	strb	r2, [r3, #0]
 800aba0:	1dbb      	adds	r3, r7, #6
 800aba2:	1c22      	adds	r2, r4, #0
 800aba4:	701a      	strb	r2, [r3, #0]
 800aba6:	1d7b      	adds	r3, r7, #5
 800aba8:	1c02      	adds	r2, r0, #0
 800abaa:	701a      	strb	r2, [r3, #0]
 800abac:	1d3b      	adds	r3, r7, #4
 800abae:	1c0a      	adds	r2, r1, #0
 800abb0:	701a      	strb	r2, [r3, #0]
	uint8_t buf[4];

	buf[0] = paDutyCycle;
 800abb2:	210c      	movs	r1, #12
 800abb4:	187b      	adds	r3, r7, r1
 800abb6:	1dfa      	adds	r2, r7, #7
 800abb8:	7812      	ldrb	r2, [r2, #0]
 800abba:	701a      	strb	r2, [r3, #0]
	buf[1] = hpMax;
 800abbc:	187b      	adds	r3, r7, r1
 800abbe:	1dba      	adds	r2, r7, #6
 800abc0:	7812      	ldrb	r2, [r2, #0]
 800abc2:	705a      	strb	r2, [r3, #1]
	buf[2] = deviceSel;
 800abc4:	187b      	adds	r3, r7, r1
 800abc6:	1d7a      	adds	r2, r7, #5
 800abc8:	7812      	ldrb	r2, [r2, #0]
 800abca:	709a      	strb	r2, [r3, #2]
	buf[3] = paLut;
 800abcc:	187b      	adds	r3, r7, r1
 800abce:	1d3a      	adds	r2, r7, #4
 800abd0:	7812      	ldrb	r2, [r2, #0]
 800abd2:	70da      	strb	r2, [r3, #3]
	SX126xWriteCommand(RADIO_SET_PACONFIG, buf, 4);
 800abd4:	187b      	adds	r3, r7, r1
 800abd6:	2204      	movs	r2, #4
 800abd8:	0019      	movs	r1, r3
 800abda:	2095      	movs	r0, #149	@ 0x95
 800abdc:	f000 fc5c 	bl	800b498 <SX126xWriteCommand>
}
 800abe0:	46c0      	nop			@ (mov r8, r8)
 800abe2:	46bd      	mov	sp, r7
 800abe4:	b004      	add	sp, #16
 800abe6:	bdb0      	pop	{r4, r5, r7, pc}

0800abe8 <SX126xSetDioIrqParams>:

void SX126xSetRxTxFallbackMode(uint8_t fallbackMode){
	SX126xWriteCommand(RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1);
}

void SX126xSetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask){
 800abe8:	b5b0      	push	{r4, r5, r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	0005      	movs	r5, r0
 800abf0:	000c      	movs	r4, r1
 800abf2:	0010      	movs	r0, r2
 800abf4:	0019      	movs	r1, r3
 800abf6:	1dbb      	adds	r3, r7, #6
 800abf8:	1c2a      	adds	r2, r5, #0
 800abfa:	801a      	strh	r2, [r3, #0]
 800abfc:	1d3b      	adds	r3, r7, #4
 800abfe:	1c22      	adds	r2, r4, #0
 800ac00:	801a      	strh	r2, [r3, #0]
 800ac02:	1cbb      	adds	r3, r7, #2
 800ac04:	1c02      	adds	r2, r0, #0
 800ac06:	801a      	strh	r2, [r3, #0]
 800ac08:	003b      	movs	r3, r7
 800ac0a:	1c0a      	adds	r2, r1, #0
 800ac0c:	801a      	strh	r2, [r3, #0]
	uint8_t buf[8];

	buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 800ac0e:	1dbb      	adds	r3, r7, #6
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	0a1b      	lsrs	r3, r3, #8
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	2108      	movs	r1, #8
 800ac1a:	187b      	adds	r3, r7, r1
 800ac1c:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(irqMask & 0x00FF);
 800ac1e:	1dbb      	adds	r3, r7, #6
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	187b      	adds	r3, r7, r1
 800ac26:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)((dio1Mask >> 8) & 0x00FF);
 800ac28:	1d3b      	adds	r3, r7, #4
 800ac2a:	881b      	ldrh	r3, [r3, #0]
 800ac2c:	0a1b      	lsrs	r3, r3, #8
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	187b      	adds	r3, r7, r1
 800ac34:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)(dio1Mask & 0x00FF);
 800ac36:	1d3b      	adds	r3, r7, #4
 800ac38:	881b      	ldrh	r3, [r3, #0]
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	187b      	adds	r3, r7, r1
 800ac3e:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((dio2Mask >> 8) & 0x00FF);
 800ac40:	1cbb      	adds	r3, r7, #2
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	0a1b      	lsrs	r3, r3, #8
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	187b      	adds	r3, r7, r1
 800ac4c:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)(dio2Mask & 0x00FF);
 800ac4e:	1cbb      	adds	r3, r7, #2
 800ac50:	881b      	ldrh	r3, [r3, #0]
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	187b      	adds	r3, r7, r1
 800ac56:	715a      	strb	r2, [r3, #5]
	buf[6] = (uint8_t)((dio3Mask >> 8) & 0x00FF);
 800ac58:	003b      	movs	r3, r7
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	0a1b      	lsrs	r3, r3, #8
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	187b      	adds	r3, r7, r1
 800ac64:	719a      	strb	r2, [r3, #6]
	buf[7] = (uint8_t)(dio3Mask & 0x00FF);
 800ac66:	003b      	movs	r3, r7
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	b2da      	uxtb	r2, r3
 800ac6c:	187b      	adds	r3, r7, r1
 800ac6e:	71da      	strb	r2, [r3, #7]
	SX126xWriteCommand(RADIO_CFG_DIOIRQ, buf, 8);
 800ac70:	187b      	adds	r3, r7, r1
 800ac72:	2208      	movs	r2, #8
 800ac74:	0019      	movs	r1, r3
 800ac76:	2008      	movs	r0, #8
 800ac78:	f000 fc0e 	bl	800b498 <SX126xWriteCommand>
}
 800ac7c:	46c0      	nop			@ (mov r8, r8)
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	b004      	add	sp, #16
 800ac82:	bdb0      	pop	{r4, r5, r7, pc}

0800ac84 <SX126xGetIrqStatus>:

uint16_t SX126xGetIrqStatus(void){
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
	uint8_t irqStatus[2];

	SX126xReadCommand(RADIO_GET_IRQSTATUS, irqStatus, 2);
 800ac8a:	1d3b      	adds	r3, r7, #4
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	0019      	movs	r1, r3
 800ac90:	2012      	movs	r0, #18
 800ac92:	f000 fc39 	bl	800b508 <SX126xReadCommand>
	return (irqStatus[0] << 8) | irqStatus[1];
 800ac96:	1d3b      	adds	r3, r7, #4
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	021b      	lsls	r3, r3, #8
 800ac9c:	b21a      	sxth	r2, r3
 800ac9e:	1d3b      	adds	r3, r7, #4
 800aca0:	785b      	ldrb	r3, [r3, #1]
 800aca2:	b21b      	sxth	r3, r3
 800aca4:	4313      	orrs	r3, r2
 800aca6:	b21b      	sxth	r3, r3
 800aca8:	b29b      	uxth	r3, r3
}
 800acaa:	0018      	movs	r0, r3
 800acac:	46bd      	mov	sp, r7
 800acae:	b002      	add	sp, #8
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <SX126xSetDio2AsRfSwitchCtrl>:

void SX126xSetDio2AsRfSwitchCtrl(uint8_t enable){
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	0002      	movs	r2, r0
 800acba:	1dfb      	adds	r3, r7, #7
 800acbc:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_RFSWITCHMODE, &enable, 1);
 800acbe:	1dfb      	adds	r3, r7, #7
 800acc0:	2201      	movs	r2, #1
 800acc2:	0019      	movs	r1, r3
 800acc4:	209d      	movs	r0, #157	@ 0x9d
 800acc6:	f000 fbe7 	bl	800b498 <SX126xWriteCommand>
}
 800acca:	46c0      	nop			@ (mov r8, r8)
 800accc:	46bd      	mov	sp, r7
 800acce:	b002      	add	sp, #8
 800acd0:	bd80      	pop	{r7, pc}
	...

0800acd4 <SX126xSetRfFrequency>:
	buf[3] = (uint8_t)(timeout & 0xFF);

	SX126xWriteCommand(RADIO_SET_TCXOMODE, buf, 4);
}

void SX126xSetRfFrequency(uint32_t frequency){
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	uint8_t buf[4];
	uint32_t freq = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	60fb      	str	r3, [r7, #12]

	if (ImageCalibrated == false){
 800ace0:	4b1d      	ldr	r3, [pc, #116]	@ (800ad58 <SX126xSetRfFrequency+0x84>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2201      	movs	r2, #1
 800ace6:	4053      	eors	r3, r2
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d006      	beq.n	800acfc <SX126xSetRfFrequency+0x28>
		SX126xCalibrateImage(frequency);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	0018      	movs	r0, r3
 800acf2:	f7ff fef7 	bl	800aae4 <SX126xCalibrateImage>
		ImageCalibrated = true;
 800acf6:	4b18      	ldr	r3, [pc, #96]	@ (800ad58 <SX126xSetRfFrequency+0x84>)
 800acf8:	2201      	movs	r2, #1
 800acfa:	701a      	strb	r2, [r3, #0]
	}

	freq = (uint32_t)((double)frequency / (double)FREQ_STEP);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7f7 fc6b 	bl	80025d8 <__aeabi_ui2d>
 800ad02:	2200      	movs	r2, #0
 800ad04:	4b15      	ldr	r3, [pc, #84]	@ (800ad5c <SX126xSetRfFrequency+0x88>)
 800ad06:	f7f6 f955 	bl	8000fb4 <__aeabi_ddiv>
 800ad0a:	0002      	movs	r2, r0
 800ad0c:	000b      	movs	r3, r1
 800ad0e:	0010      	movs	r0, r2
 800ad10:	0019      	movs	r1, r3
 800ad12:	f7f5 fae1 	bl	80002d8 <__aeabi_d2uiz>
 800ad16:	0003      	movs	r3, r0
 800ad18:	60fb      	str	r3, [r7, #12]
	buf[0] = (uint8_t)((freq >> 24) & 0xFF);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	0e1b      	lsrs	r3, r3, #24
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	2108      	movs	r1, #8
 800ad22:	187b      	adds	r3, r7, r1
 800ad24:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((freq >> 16) & 0xFF);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	0c1b      	lsrs	r3, r3, #16
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	187b      	adds	r3, r7, r1
 800ad2e:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)((freq >> 8) & 0xFF);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	0a1b      	lsrs	r3, r3, #8
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	187b      	adds	r3, r7, r1
 800ad38:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)(freq & 0xFF);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	187b      	adds	r3, r7, r1
 800ad40:	70da      	strb	r2, [r3, #3]
	SX126xWriteCommand(RADIO_SET_RFFREQUENCY, buf, 4);
 800ad42:	187b      	adds	r3, r7, r1
 800ad44:	2204      	movs	r2, #4
 800ad46:	0019      	movs	r1, r3
 800ad48:	2086      	movs	r0, #134	@ 0x86
 800ad4a:	f000 fba5 	bl	800b498 <SX126xWriteCommand>
}
 800ad4e:	46c0      	nop			@ (mov r8, r8)
 800ad50:	46bd      	mov	sp, r7
 800ad52:	b004      	add	sp, #16
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	46c0      	nop			@ (mov r8, r8)
 800ad58:	20000414 	.word	0x20000414
 800ad5c:	3fee8480 	.word	0x3fee8480

0800ad60 <SX126xSetPacketType>:

void SX126xSetPacketType(RadioPacketTypes_t packetType){
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	0002      	movs	r2, r0
 800ad68:	1dfb      	adds	r3, r7, #7
 800ad6a:	701a      	strb	r2, [r3, #0]
	// Save packet type internally to avoid questioning the radio
	PacketType = packetType;
 800ad6c:	1dfb      	adds	r3, r7, #7
 800ad6e:	781a      	ldrb	r2, [r3, #0]
 800ad70:	4b05      	ldr	r3, [pc, #20]	@ (800ad88 <SX126xSetPacketType+0x28>)
 800ad72:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_PACKETTYPE, (uint8_t *)&packetType, 1);
 800ad74:	1dfb      	adds	r3, r7, #7
 800ad76:	2201      	movs	r2, #1
 800ad78:	0019      	movs	r1, r3
 800ad7a:	208a      	movs	r0, #138	@ 0x8a
 800ad7c:	f000 fb8c 	bl	800b498 <SX126xWriteCommand>
}
 800ad80:	46c0      	nop			@ (mov r8, r8)
 800ad82:	46bd      	mov	sp, r7
 800ad84:	b002      	add	sp, #8
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	2000040d 	.word	0x2000040d

0800ad8c <SX126xGetPacketType>:

RadioPacketTypes_t SX126xGetPacketType(void){
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	af00      	add	r7, sp, #0
	return PacketType;
 800ad90:	4b02      	ldr	r3, [pc, #8]	@ (800ad9c <SX126xGetPacketType+0x10>)
 800ad92:	781b      	ldrb	r3, [r3, #0]
}
 800ad94:	0018      	movs	r0, r3
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	46c0      	nop			@ (mov r8, r8)
 800ad9c:	2000040d 	.word	0x2000040d

0800ada0 <SX126xSetTxParams>:

void SX126xSetTxParams(int8_t power, RadioRampTimes_t rampTime){
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	0002      	movs	r2, r0
 800ada8:	1dfb      	adds	r3, r7, #7
 800adaa:	701a      	strb	r2, [r3, #0]
 800adac:	1dbb      	adds	r3, r7, #6
 800adae:	1c0a      	adds	r2, r1, #0
 800adb0:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];

	if (SX126xGetPaSelect(0) == SX1261){
 800adb2:	2000      	movs	r0, #0
 800adb4:	f000 fd2d 	bl	800b812 <SX126xGetPaSelect>
 800adb8:	0003      	movs	r3, r0
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d128      	bne.n	800ae10 <SX126xSetTxParams+0x70>
		if (power == 15){
 800adbe:	1dfb      	adds	r3, r7, #7
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	b25b      	sxtb	r3, r3
 800adc4:	2b0f      	cmp	r3, #15
 800adc6:	d106      	bne.n	800add6 <SX126xSetTxParams+0x36>
			SX126xSetPaConfig(0x06, 0x00, 0x01, 0x01);
 800adc8:	2301      	movs	r3, #1
 800adca:	2201      	movs	r2, #1
 800adcc:	2100      	movs	r1, #0
 800adce:	2006      	movs	r0, #6
 800add0:	f7ff fedc 	bl	800ab8c <SX126xSetPaConfig>
 800add4:	e005      	b.n	800ade2 <SX126xSetTxParams+0x42>
		}
		else{
			SX126xSetPaConfig(0x04, 0x00, 0x01, 0x01);
 800add6:	2301      	movs	r3, #1
 800add8:	2201      	movs	r2, #1
 800adda:	2100      	movs	r1, #0
 800addc:	2004      	movs	r0, #4
 800adde:	f7ff fed5 	bl	800ab8c <SX126xSetPaConfig>
		}
		if (power >= 14){
 800ade2:	1dfb      	adds	r3, r7, #7
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	b25b      	sxtb	r3, r3
 800ade8:	2b0d      	cmp	r3, #13
 800adea:	dd03      	ble.n	800adf4 <SX126xSetTxParams+0x54>
			power = 14;
 800adec:	1dfb      	adds	r3, r7, #7
 800adee:	220e      	movs	r2, #14
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	e007      	b.n	800ae04 <SX126xSetTxParams+0x64>
		}
		else if (power < -17){
 800adf4:	1dfb      	adds	r3, r7, #7
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	b25b      	sxtb	r3, r3
 800adfa:	3311      	adds	r3, #17
 800adfc:	da02      	bge.n	800ae04 <SX126xSetTxParams+0x64>
			power = -17;
 800adfe:	1dfb      	adds	r3, r7, #7
 800ae00:	22ef      	movs	r2, #239	@ 0xef
 800ae02:	701a      	strb	r2, [r3, #0]
		}
		SX126xWriteRegister(REG_OCP, 0x18); // current max is 80 mA for the whole device
 800ae04:	4b21      	ldr	r3, [pc, #132]	@ (800ae8c <SX126xSetTxParams+0xec>)
 800ae06:	2118      	movs	r1, #24
 800ae08:	0018      	movs	r0, r3
 800ae0a:	f000 fbfd 	bl	800b608 <SX126xWriteRegister>
 800ae0e:	e029      	b.n	800ae64 <SX126xSetTxParams+0xc4>
	}
	else {
		// WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
		// RegTxClampConfig = @address 0x08D8
		SX126xWriteRegister(0x08D8, SX126xReadRegister(0x08D8) | (0x0F << 1));
 800ae10:	4b1f      	ldr	r3, [pc, #124]	@ (800ae90 <SX126xSetTxParams+0xf0>)
 800ae12:	0018      	movs	r0, r3
 800ae14:	f000 fc52 	bl	800b6bc <SX126xReadRegister>
 800ae18:	0003      	movs	r3, r0
 800ae1a:	001a      	movs	r2, r3
 800ae1c:	231e      	movs	r3, #30
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	4a1b      	ldr	r2, [pc, #108]	@ (800ae90 <SX126xSetTxParams+0xf0>)
 800ae24:	0019      	movs	r1, r3
 800ae26:	0010      	movs	r0, r2
 800ae28:	f000 fbee 	bl	800b608 <SX126xWriteRegister>
		// WORKAROUND END
		SX126xSetPaConfig(0x04, 0x07, 0x00, 0x01);
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2107      	movs	r1, #7
 800ae32:	2004      	movs	r0, #4
 800ae34:	f7ff feaa 	bl	800ab8c <SX126xSetPaConfig>
		if (power > 22){
 800ae38:	1dfb      	adds	r3, r7, #7
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	b25b      	sxtb	r3, r3
 800ae3e:	2b16      	cmp	r3, #22
 800ae40:	dd03      	ble.n	800ae4a <SX126xSetTxParams+0xaa>
			power = 22;
 800ae42:	1dfb      	adds	r3, r7, #7
 800ae44:	2216      	movs	r2, #22
 800ae46:	701a      	strb	r2, [r3, #0]
 800ae48:	e007      	b.n	800ae5a <SX126xSetTxParams+0xba>
		}
		else if (power < -9){
 800ae4a:	1dfb      	adds	r3, r7, #7
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	b25b      	sxtb	r3, r3
 800ae50:	3309      	adds	r3, #9
 800ae52:	da02      	bge.n	800ae5a <SX126xSetTxParams+0xba>
			power = -9;
 800ae54:	1dfb      	adds	r3, r7, #7
 800ae56:	22f7      	movs	r2, #247	@ 0xf7
 800ae58:	701a      	strb	r2, [r3, #0]
		}
		SX126xWriteRegister(REG_OCP, 0x38); // current max 160mA for the whole device
 800ae5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ae8c <SX126xSetTxParams+0xec>)
 800ae5c:	2138      	movs	r1, #56	@ 0x38
 800ae5e:	0018      	movs	r0, r3
 800ae60:	f000 fbd2 	bl	800b608 <SX126xWriteRegister>
	}
	buf[0] = power;
 800ae64:	1dfb      	adds	r3, r7, #7
 800ae66:	781a      	ldrb	r2, [r3, #0]
 800ae68:	210c      	movs	r1, #12
 800ae6a:	187b      	adds	r3, r7, r1
 800ae6c:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)rampTime;
 800ae6e:	187b      	adds	r3, r7, r1
 800ae70:	1dba      	adds	r2, r7, #6
 800ae72:	7812      	ldrb	r2, [r2, #0]
 800ae74:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800ae76:	187b      	adds	r3, r7, r1
 800ae78:	2202      	movs	r2, #2
 800ae7a:	0019      	movs	r1, r3
 800ae7c:	208e      	movs	r0, #142	@ 0x8e
 800ae7e:	f000 fb0b 	bl	800b498 <SX126xWriteCommand>
}
 800ae82:	46c0      	nop			@ (mov r8, r8)
 800ae84:	46bd      	mov	sp, r7
 800ae86:	b004      	add	sp, #16
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	46c0      	nop			@ (mov r8, r8)
 800ae8c:	000008e7 	.word	0x000008e7
 800ae90:	000008d8 	.word	0x000008d8

0800ae94 <SX126xSetModulationParams>:

void SX126xSetModulationParams(ModulationParams_t *modulationParams){
 800ae94:	b5b0      	push	{r4, r5, r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint32_t tempVal = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	617b      	str	r3, [r7, #20]
	uint8_t buf[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800aea0:	2308      	movs	r3, #8
 800aea2:	18fb      	adds	r3, r7, r3
 800aea4:	4a49      	ldr	r2, [pc, #292]	@ (800afcc <SX126xSetModulationParams+0x138>)
 800aea6:	ca03      	ldmia	r2!, {r0, r1}
 800aea8:	c303      	stmia	r3!, {r0, r1}

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != modulationParams->PacketType){
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	781a      	ldrb	r2, [r3, #0]
 800aeae:	4b48      	ldr	r3, [pc, #288]	@ (800afd0 <SX126xSetModulationParams+0x13c>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d004      	beq.n	800aec0 <SX126xSetModulationParams+0x2c>
		SX126xSetPacketType(modulationParams->PacketType);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	0018      	movs	r0, r3
 800aebc:	f7ff ff50 	bl	800ad60 <SX126xSetPacketType>
	}

	switch (modulationParams->PacketType){
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <SX126xSetModulationParams+0x3a>
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d05e      	beq.n	800af8a <SX126xSetModulationParams+0xf6>

			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
		break;
		case PACKET_TYPE_NONE:
		default:
		return;
 800aecc:	e07b      	b.n	800afc6 <SX126xSetModulationParams+0x132>
			n = 8;
 800aece:	2513      	movs	r5, #19
 800aed0:	197b      	adds	r3, r7, r5
 800aed2:	2208      	movs	r2, #8
 800aed4:	701a      	strb	r2, [r3, #0]
			tempVal = (uint32_t)(32 * ((double)XTAL_FREQ / (double)modulationParams->Params.Gfsk.BitRate));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	0018      	movs	r0, r3
 800aedc:	f7f7 fb7c 	bl	80025d8 <__aeabi_ui2d>
 800aee0:	0002      	movs	r2, r0
 800aee2:	000b      	movs	r3, r1
 800aee4:	2000      	movs	r0, #0
 800aee6:	493b      	ldr	r1, [pc, #236]	@ (800afd4 <SX126xSetModulationParams+0x140>)
 800aee8:	f7f6 f864 	bl	8000fb4 <__aeabi_ddiv>
 800aeec:	0002      	movs	r2, r0
 800aeee:	000b      	movs	r3, r1
 800aef0:	0010      	movs	r0, r2
 800aef2:	0019      	movs	r1, r3
 800aef4:	2200      	movs	r2, #0
 800aef6:	4b38      	ldr	r3, [pc, #224]	@ (800afd8 <SX126xSetModulationParams+0x144>)
 800aef8:	f7f6 fca0 	bl	800183c <__aeabi_dmul>
 800aefc:	0002      	movs	r2, r0
 800aefe:	000b      	movs	r3, r1
 800af00:	0010      	movs	r0, r2
 800af02:	0019      	movs	r1, r3
 800af04:	f7f5 f9e8 	bl	80002d8 <__aeabi_d2uiz>
 800af08:	0003      	movs	r3, r0
 800af0a:	617b      	str	r3, [r7, #20]
			buf[0] = (tempVal >> 16) & 0xFF;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	0c1b      	lsrs	r3, r3, #16
 800af10:	b2da      	uxtb	r2, r3
 800af12:	2408      	movs	r4, #8
 800af14:	193b      	adds	r3, r7, r4
 800af16:	701a      	strb	r2, [r3, #0]
			buf[1] = (tempVal >> 8) & 0xFF;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	0a1b      	lsrs	r3, r3, #8
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	193b      	adds	r3, r7, r4
 800af20:	705a      	strb	r2, [r3, #1]
			buf[2] = tempVal & 0xFF;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	b2da      	uxtb	r2, r3
 800af26:	193b      	adds	r3, r7, r4
 800af28:	709a      	strb	r2, [r3, #2]
			buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	7b1a      	ldrb	r2, [r3, #12]
 800af2e:	193b      	adds	r3, r7, r4
 800af30:	70da      	strb	r2, [r3, #3]
			buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	7b5a      	ldrb	r2, [r3, #13]
 800af36:	193b      	adds	r3, r7, r4
 800af38:	711a      	strb	r2, [r3, #4]
			tempVal = (uint32_t)((double)modulationParams->Params.Gfsk.Fdev / (double)FREQ_STEP);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	0018      	movs	r0, r3
 800af40:	f7f7 fb4a 	bl	80025d8 <__aeabi_ui2d>
 800af44:	2200      	movs	r2, #0
 800af46:	4b25      	ldr	r3, [pc, #148]	@ (800afdc <SX126xSetModulationParams+0x148>)
 800af48:	f7f6 f834 	bl	8000fb4 <__aeabi_ddiv>
 800af4c:	0002      	movs	r2, r0
 800af4e:	000b      	movs	r3, r1
 800af50:	0010      	movs	r0, r2
 800af52:	0019      	movs	r1, r3
 800af54:	f7f5 f9c0 	bl	80002d8 <__aeabi_d2uiz>
 800af58:	0003      	movs	r3, r0
 800af5a:	617b      	str	r3, [r7, #20]
			buf[5] = (tempVal >> 16) & 0xFF;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	0c1b      	lsrs	r3, r3, #16
 800af60:	b2da      	uxtb	r2, r3
 800af62:	193b      	adds	r3, r7, r4
 800af64:	715a      	strb	r2, [r3, #5]
			buf[6] = (tempVal >> 8) & 0xFF;
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	0a1b      	lsrs	r3, r3, #8
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	193b      	adds	r3, r7, r4
 800af6e:	719a      	strb	r2, [r3, #6]
			buf[7] = (tempVal & 0xFF);
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	b2da      	uxtb	r2, r3
 800af74:	193b      	adds	r3, r7, r4
 800af76:	71da      	strb	r2, [r3, #7]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 800af78:	197b      	adds	r3, r7, r5
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	193b      	adds	r3, r7, r4
 800af80:	0019      	movs	r1, r3
 800af82:	208b      	movs	r0, #139	@ 0x8b
 800af84:	f000 fa88 	bl	800b498 <SX126xWriteCommand>
		break;
 800af88:	e01d      	b.n	800afc6 <SX126xSetModulationParams+0x132>
			n = 4;
 800af8a:	2013      	movs	r0, #19
 800af8c:	183b      	adds	r3, r7, r0
 800af8e:	2204      	movs	r2, #4
 800af90:	701a      	strb	r2, [r3, #0]
			buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	7c1a      	ldrb	r2, [r3, #16]
 800af96:	2108      	movs	r1, #8
 800af98:	187b      	adds	r3, r7, r1
 800af9a:	701a      	strb	r2, [r3, #0]
			buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	7c5a      	ldrb	r2, [r3, #17]
 800afa0:	187b      	adds	r3, r7, r1
 800afa2:	705a      	strb	r2, [r3, #1]
			buf[2] = modulationParams->Params.LoRa.CodingRate;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	7c9a      	ldrb	r2, [r3, #18]
 800afa8:	187b      	adds	r3, r7, r1
 800afaa:	709a      	strb	r2, [r3, #2]
			buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	7cda      	ldrb	r2, [r3, #19]
 800afb0:	187b      	adds	r3, r7, r1
 800afb2:	70da      	strb	r2, [r3, #3]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 800afb4:	183b      	adds	r3, r7, r0
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	b29a      	uxth	r2, r3
 800afba:	187b      	adds	r3, r7, r1
 800afbc:	0019      	movs	r1, r3
 800afbe:	208b      	movs	r0, #139	@ 0x8b
 800afc0:	f000 fa6a 	bl	800b498 <SX126xWriteCommand>
		break;
 800afc4:	46c0      	nop			@ (mov r8, r8)
	}
}
 800afc6:	46bd      	mov	sp, r7
 800afc8:	b006      	add	sp, #24
 800afca:	bdb0      	pop	{r4, r5, r7, pc}
 800afcc:	0800be00 	.word	0x0800be00
 800afd0:	2000040d 	.word	0x2000040d
 800afd4:	417e8480 	.word	0x417e8480
 800afd8:	40400000 	.word	0x40400000
 800afdc:	3fee8480 	.word	0x3fee8480

0800afe0 <SX126xSetPacketParams>:

void SX126xSetPacketParams(PacketParams_t *packetParams){
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint8_t crcVal = 0;
 800afe8:	2316      	movs	r3, #22
 800afea:	18fb      	adds	r3, r7, r3
 800afec:	2200      	movs	r2, #0
 800afee:	701a      	strb	r2, [r3, #0]
	uint8_t buf[9] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800aff0:	230c      	movs	r3, #12
 800aff2:	18fb      	adds	r3, r7, r3
 800aff4:	4a4d      	ldr	r2, [pc, #308]	@ (800b12c <SX126xSetPacketParams+0x14c>)
 800aff6:	ca03      	ldmia	r2!, {r0, r1}
 800aff8:	c303      	stmia	r3!, {r0, r1}
 800affa:	7812      	ldrb	r2, [r2, #0]
 800affc:	701a      	strb	r2, [r3, #0]

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != packetParams->PacketType){
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	781a      	ldrb	r2, [r3, #0]
 800b002:	4b4b      	ldr	r3, [pc, #300]	@ (800b130 <SX126xSetPacketParams+0x150>)
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	429a      	cmp	r2, r3
 800b008:	d004      	beq.n	800b014 <SX126xSetPacketParams+0x34>
		SX126xSetPacketType(packetParams->PacketType);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	0018      	movs	r0, r3
 800b010:	f7ff fea6 	bl	800ad60 <SX126xSetPacketType>
	}

	switch (packetParams->PacketType){
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <SX126xSetPacketParams+0x42>
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d056      	beq.n	800b0ce <SX126xSetPacketParams+0xee>
			buf[4] = packetParams->Params.LoRa.CrcMode;
			buf[5] = packetParams->Params.LoRa.InvertIQ;
		break;
		default:
		case PACKET_TYPE_NONE:
		return;
 800b020:	e081      	b.n	800b126 <SX126xSetPacketParams+0x146>
			if (packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM){
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	7a5b      	ldrb	r3, [r3, #9]
 800b026:	2bf1      	cmp	r3, #241	@ 0xf1
 800b028:	d10c      	bne.n	800b044 <SX126xSetPacketParams+0x64>
				SX126xSetCrcSeed(CRC_IBM_SEED);
 800b02a:	4b42      	ldr	r3, [pc, #264]	@ (800b134 <SX126xSetPacketParams+0x154>)
 800b02c:	0018      	movs	r0, r3
 800b02e:	f7ff fb93 	bl	800a758 <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_IBM);
 800b032:	4b41      	ldr	r3, [pc, #260]	@ (800b138 <SX126xSetPacketParams+0x158>)
 800b034:	0018      	movs	r0, r3
 800b036:	f7ff fbb5 	bl	800a7a4 <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES;
 800b03a:	2316      	movs	r3, #22
 800b03c:	18fb      	adds	r3, r7, r3
 800b03e:	2202      	movs	r2, #2
 800b040:	701a      	strb	r2, [r3, #0]
 800b042:	e015      	b.n	800b070 <SX126xSetPacketParams+0x90>
			else if (packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT){
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	7a5b      	ldrb	r3, [r3, #9]
 800b048:	2bf2      	cmp	r3, #242	@ 0xf2
 800b04a:	d10c      	bne.n	800b066 <SX126xSetPacketParams+0x86>
				SX126xSetCrcSeed(CRC_CCITT_SEED);
 800b04c:	4b3b      	ldr	r3, [pc, #236]	@ (800b13c <SX126xSetPacketParams+0x15c>)
 800b04e:	0018      	movs	r0, r3
 800b050:	f7ff fb82 	bl	800a758 <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_CCITT);
 800b054:	4b3a      	ldr	r3, [pc, #232]	@ (800b140 <SX126xSetPacketParams+0x160>)
 800b056:	0018      	movs	r0, r3
 800b058:	f7ff fba4 	bl	800a7a4 <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES_INV;
 800b05c:	2316      	movs	r3, #22
 800b05e:	18fb      	adds	r3, r7, r3
 800b060:	2206      	movs	r2, #6
 800b062:	701a      	strb	r2, [r3, #0]
 800b064:	e004      	b.n	800b070 <SX126xSetPacketParams+0x90>
				crcVal = packetParams->Params.Gfsk.CrcLength;
 800b066:	2316      	movs	r3, #22
 800b068:	18fb      	adds	r3, r7, r3
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	7a52      	ldrb	r2, [r2, #9]
 800b06e:	701a      	strb	r2, [r3, #0]
			n = 9;
 800b070:	2317      	movs	r3, #23
 800b072:	18fb      	adds	r3, r7, r3
 800b074:	2209      	movs	r2, #9
 800b076:	701a      	strb	r2, [r3, #0]
			buf[0] = (packetParams->Params.Gfsk.PreambleLength >> 8) & 0xFF;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	885b      	ldrh	r3, [r3, #2]
 800b07c:	0a1b      	lsrs	r3, r3, #8
 800b07e:	b29b      	uxth	r3, r3
 800b080:	b2da      	uxtb	r2, r3
 800b082:	210c      	movs	r1, #12
 800b084:	187b      	adds	r3, r7, r1
 800b086:	701a      	strb	r2, [r3, #0]
			buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	885b      	ldrh	r3, [r3, #2]
 800b08c:	b2da      	uxtb	r2, r3
 800b08e:	187b      	adds	r3, r7, r1
 800b090:	705a      	strb	r2, [r3, #1]
			buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	791a      	ldrb	r2, [r3, #4]
 800b096:	187b      	adds	r3, r7, r1
 800b098:	709a      	strb	r2, [r3, #2]
			buf[3] = (packetParams->Params.Gfsk.SyncWordLength /*<< 3*/); // convert from byte to bit
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	795a      	ldrb	r2, [r3, #5]
 800b09e:	187b      	adds	r3, r7, r1
 800b0a0:	70da      	strb	r2, [r3, #3]
			buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	799a      	ldrb	r2, [r3, #6]
 800b0a6:	187b      	adds	r3, r7, r1
 800b0a8:	711a      	strb	r2, [r3, #4]
			buf[5] = packetParams->Params.Gfsk.HeaderType;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	79da      	ldrb	r2, [r3, #7]
 800b0ae:	187b      	adds	r3, r7, r1
 800b0b0:	715a      	strb	r2, [r3, #5]
			buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	7a1a      	ldrb	r2, [r3, #8]
 800b0b6:	187b      	adds	r3, r7, r1
 800b0b8:	719a      	strb	r2, [r3, #6]
			buf[7] = crcVal;
 800b0ba:	187b      	adds	r3, r7, r1
 800b0bc:	2216      	movs	r2, #22
 800b0be:	18ba      	adds	r2, r7, r2
 800b0c0:	7812      	ldrb	r2, [r2, #0]
 800b0c2:	71da      	strb	r2, [r3, #7]
			buf[8] = packetParams->Params.Gfsk.DcFree;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	7a9a      	ldrb	r2, [r3, #10]
 800b0c8:	187b      	adds	r3, r7, r1
 800b0ca:	721a      	strb	r2, [r3, #8]
		break;
 800b0cc:	e021      	b.n	800b112 <SX126xSetPacketParams+0x132>
			n = 6;
 800b0ce:	2317      	movs	r3, #23
 800b0d0:	18fb      	adds	r3, r7, r3
 800b0d2:	2206      	movs	r2, #6
 800b0d4:	701a      	strb	r2, [r3, #0]
			buf[0] = (packetParams->Params.LoRa.PreambleLength >> 8) & 0xFF;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	899b      	ldrh	r3, [r3, #12]
 800b0da:	0a1b      	lsrs	r3, r3, #8
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	210c      	movs	r1, #12
 800b0e2:	187b      	adds	r3, r7, r1
 800b0e4:	701a      	strb	r2, [r3, #0]
			buf[1] = packetParams->Params.LoRa.PreambleLength;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	899b      	ldrh	r3, [r3, #12]
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	187b      	adds	r3, r7, r1
 800b0ee:	705a      	strb	r2, [r3, #1]
			buf[2] = packetParams->Params.LoRa.HeaderType;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	7b9a      	ldrb	r2, [r3, #14]
 800b0f4:	187b      	adds	r3, r7, r1
 800b0f6:	709a      	strb	r2, [r3, #2]
			buf[3] = packetParams->Params.LoRa.PayloadLength;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	7bda      	ldrb	r2, [r3, #15]
 800b0fc:	187b      	adds	r3, r7, r1
 800b0fe:	70da      	strb	r2, [r3, #3]
			buf[4] = packetParams->Params.LoRa.CrcMode;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7c1a      	ldrb	r2, [r3, #16]
 800b104:	187b      	adds	r3, r7, r1
 800b106:	711a      	strb	r2, [r3, #4]
			buf[5] = packetParams->Params.LoRa.InvertIQ;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	7c5a      	ldrb	r2, [r3, #17]
 800b10c:	187b      	adds	r3, r7, r1
 800b10e:	715a      	strb	r2, [r3, #5]
		break;
 800b110:	46c0      	nop			@ (mov r8, r8)
	}
	SX126xWriteCommand(RADIO_SET_PACKETPARAMS, buf, n);
 800b112:	2317      	movs	r3, #23
 800b114:	18fb      	adds	r3, r7, r3
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	b29a      	uxth	r2, r3
 800b11a:	230c      	movs	r3, #12
 800b11c:	18fb      	adds	r3, r7, r3
 800b11e:	0019      	movs	r1, r3
 800b120:	208c      	movs	r0, #140	@ 0x8c
 800b122:	f000 f9b9 	bl	800b498 <SX126xWriteCommand>
}
 800b126:	46bd      	mov	sp, r7
 800b128:	b006      	add	sp, #24
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	0800be08 	.word	0x0800be08
 800b130:	2000040d 	.word	0x2000040d
 800b134:	0000ffff 	.word	0x0000ffff
 800b138:	00008005 	.word	0x00008005
 800b13c:	00001d0f 	.word	0x00001d0f
 800b140:	00001021 	.word	0x00001021

0800b144 <SX126xSetCadParams>:

void SX126xSetCadParams(RadioLoRaCadSymbols_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, RadioCadExitModes_t cadExitMode, uint32_t cadTimeout){
 800b144:	b5b0      	push	{r4, r5, r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	0005      	movs	r5, r0
 800b14c:	000c      	movs	r4, r1
 800b14e:	0010      	movs	r0, r2
 800b150:	0019      	movs	r1, r3
 800b152:	1dfb      	adds	r3, r7, #7
 800b154:	1c2a      	adds	r2, r5, #0
 800b156:	701a      	strb	r2, [r3, #0]
 800b158:	1dbb      	adds	r3, r7, #6
 800b15a:	1c22      	adds	r2, r4, #0
 800b15c:	701a      	strb	r2, [r3, #0]
 800b15e:	1d7b      	adds	r3, r7, #5
 800b160:	1c02      	adds	r2, r0, #0
 800b162:	701a      	strb	r2, [r3, #0]
 800b164:	1d3b      	adds	r3, r7, #4
 800b166:	1c0a      	adds	r2, r1, #0
 800b168:	701a      	strb	r2, [r3, #0]
	uint8_t buf[7];

	buf[0] = (uint8_t)cadSymbolNum;
 800b16a:	2108      	movs	r1, #8
 800b16c:	187b      	adds	r3, r7, r1
 800b16e:	1dfa      	adds	r2, r7, #7
 800b170:	7812      	ldrb	r2, [r2, #0]
 800b172:	701a      	strb	r2, [r3, #0]
	buf[1] = cadDetPeak;
 800b174:	187b      	adds	r3, r7, r1
 800b176:	1dba      	adds	r2, r7, #6
 800b178:	7812      	ldrb	r2, [r2, #0]
 800b17a:	705a      	strb	r2, [r3, #1]
	buf[2] = cadDetMin;
 800b17c:	187b      	adds	r3, r7, r1
 800b17e:	1d7a      	adds	r2, r7, #5
 800b180:	7812      	ldrb	r2, [r2, #0]
 800b182:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)cadExitMode;
 800b184:	187b      	adds	r3, r7, r1
 800b186:	1d3a      	adds	r2, r7, #4
 800b188:	7812      	ldrb	r2, [r2, #0]
 800b18a:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((cadTimeout >> 16) & 0xFF);
 800b18c:	6a3b      	ldr	r3, [r7, #32]
 800b18e:	0c1b      	lsrs	r3, r3, #16
 800b190:	b2da      	uxtb	r2, r3
 800b192:	187b      	adds	r3, r7, r1
 800b194:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)((cadTimeout >> 8) & 0xFF);
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	0a1b      	lsrs	r3, r3, #8
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	187b      	adds	r3, r7, r1
 800b19e:	715a      	strb	r2, [r3, #5]
	buf[6] = (uint8_t)(cadTimeout & 0xFF);
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	b2da      	uxtb	r2, r3
 800b1a4:	187b      	adds	r3, r7, r1
 800b1a6:	719a      	strb	r2, [r3, #6]
	SX126xWriteCommand(RADIO_SET_CADPARAMS, buf, 7);
 800b1a8:	187b      	adds	r3, r7, r1
 800b1aa:	2207      	movs	r2, #7
 800b1ac:	0019      	movs	r1, r3
 800b1ae:	2088      	movs	r0, #136	@ 0x88
 800b1b0:	f000 f972 	bl	800b498 <SX126xWriteCommand>
	OperatingMode = MODE_CAD;
 800b1b4:	4b03      	ldr	r3, [pc, #12]	@ (800b1c4 <SX126xSetCadParams+0x80>)
 800b1b6:	2207      	movs	r2, #7
 800b1b8:	701a      	strb	r2, [r3, #0]
}
 800b1ba:	46c0      	nop			@ (mov r8, r8)
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	b004      	add	sp, #16
 800b1c0:	bdb0      	pop	{r4, r5, r7, pc}
 800b1c2:	46c0      	nop			@ (mov r8, r8)
 800b1c4:	2000040c 	.word	0x2000040c

0800b1c8 <SX126xSetBufferBaseAddress>:

void SX126xSetBufferBaseAddress(uint8_t txBaseAddress, uint8_t rxBaseAddress){
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	0002      	movs	r2, r0
 800b1d0:	1dfb      	adds	r3, r7, #7
 800b1d2:	701a      	strb	r2, [r3, #0]
 800b1d4:	1dbb      	adds	r3, r7, #6
 800b1d6:	1c0a      	adds	r2, r1, #0
 800b1d8:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 800b1da:	210c      	movs	r1, #12
 800b1dc:	187b      	adds	r3, r7, r1
 800b1de:	1dfa      	adds	r2, r7, #7
 800b1e0:	7812      	ldrb	r2, [r2, #0]
 800b1e2:	701a      	strb	r2, [r3, #0]
	buf[1] = rxBaseAddress;
 800b1e4:	187b      	adds	r3, r7, r1
 800b1e6:	1dba      	adds	r2, r7, #6
 800b1e8:	7812      	ldrb	r2, [r2, #0]
 800b1ea:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_SET_BUFFERBASEADDRESS, buf, 2);
 800b1ec:	187b      	adds	r3, r7, r1
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	0019      	movs	r1, r3
 800b1f2:	208f      	movs	r0, #143	@ 0x8f
 800b1f4:	f000 f950 	bl	800b498 <SX126xWriteCommand>
}
 800b1f8:	46c0      	nop			@ (mov r8, r8)
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	b004      	add	sp, #16
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <SX126xGetRssiInst>:
	SX126xReadCommand(RADIO_GET_STATUS, (uint8_t *)&stat, 1);
	status.Value = stat;
	return status;
}

int8_t SX126xGetRssiInst(void){
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
	uint8_t buf[1];
	int8_t rssi = 0;
 800b206:	1dfb      	adds	r3, r7, #7
 800b208:	2200      	movs	r2, #0
 800b20a:	701a      	strb	r2, [r3, #0]

	SX126xReadCommand(RADIO_GET_RSSIINST, buf, 1);
 800b20c:	1d3b      	adds	r3, r7, #4
 800b20e:	2201      	movs	r2, #1
 800b210:	0019      	movs	r1, r3
 800b212:	2015      	movs	r0, #21
 800b214:	f000 f978 	bl	800b508 <SX126xReadCommand>
	rssi = -buf[0] >> 1;
 800b218:	1d3b      	adds	r3, r7, #4
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	425b      	negs	r3, r3
 800b21e:	105a      	asrs	r2, r3, #1
 800b220:	1dfb      	adds	r3, r7, #7
 800b222:	701a      	strb	r2, [r3, #0]
	return rssi;
 800b224:	1dfb      	adds	r3, r7, #7
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	b25b      	sxtb	r3, r3
}
 800b22a:	0018      	movs	r0, r3
 800b22c:	46bd      	mov	sp, r7
 800b22e:	b002      	add	sp, #8
 800b230:	bd80      	pop	{r7, pc}
	...

0800b234 <SX126xGetRxBufferStatus>:

void SX126xGetRxBufferStatus(uint8_t *payloadLength, uint8_t *rxStartBufferPointer){
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
	uint8_t status[2];

	SX126xReadCommand(RADIO_GET_RXBUFFERSTATUS, status, 2);
 800b23e:	230c      	movs	r3, #12
 800b240:	18fb      	adds	r3, r7, r3
 800b242:	2202      	movs	r2, #2
 800b244:	0019      	movs	r1, r3
 800b246:	2013      	movs	r0, #19
 800b248:	f000 f95e 	bl	800b508 <SX126xReadCommand>
	// In case of LORA fixed header, the payloadLength is obtained by reading
	// the register REG_LR_PAYLOADLENGTH
	if ((SX126xGetPacketType() == PACKET_TYPE_LORA) && (SX126xReadRegister(REG_LR_PACKETPARAMS) >> 7 == 1)){
 800b24c:	f7ff fd9e 	bl	800ad8c <SX126xGetPacketType>
 800b250:	0003      	movs	r3, r0
 800b252:	2b01      	cmp	r3, #1
 800b254:	d111      	bne.n	800b27a <SX126xGetRxBufferStatus+0x46>
 800b256:	4b10      	ldr	r3, [pc, #64]	@ (800b298 <SX126xGetRxBufferStatus+0x64>)
 800b258:	0018      	movs	r0, r3
 800b25a:	f000 fa2f 	bl	800b6bc <SX126xReadRegister>
 800b25e:	0003      	movs	r3, r0
 800b260:	09db      	lsrs	r3, r3, #7
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b01      	cmp	r3, #1
 800b266:	d108      	bne.n	800b27a <SX126xGetRxBufferStatus+0x46>
		*payloadLength = SX126xReadRegister(REG_LR_PAYLOADLENGTH);
 800b268:	4b0c      	ldr	r3, [pc, #48]	@ (800b29c <SX126xGetRxBufferStatus+0x68>)
 800b26a:	0018      	movs	r0, r3
 800b26c:	f000 fa26 	bl	800b6bc <SX126xReadRegister>
 800b270:	0003      	movs	r3, r0
 800b272:	001a      	movs	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	701a      	strb	r2, [r3, #0]
 800b278:	e004      	b.n	800b284 <SX126xGetRxBufferStatus+0x50>
	}
	else{
		*payloadLength = status[0];
 800b27a:	230c      	movs	r3, #12
 800b27c:	18fb      	adds	r3, r7, r3
 800b27e:	781a      	ldrb	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	701a      	strb	r2, [r3, #0]
	}
	*rxStartBufferPointer = status[1];
 800b284:	230c      	movs	r3, #12
 800b286:	18fb      	adds	r3, r7, r3
 800b288:	785a      	ldrb	r2, [r3, #1]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	701a      	strb	r2, [r3, #0]
}
 800b28e:	46c0      	nop			@ (mov r8, r8)
 800b290:	46bd      	mov	sp, r7
 800b292:	b004      	add	sp, #16
 800b294:	bd80      	pop	{r7, pc}
 800b296:	46c0      	nop			@ (mov r8, r8)
 800b298:	00000704 	.word	0x00000704
 800b29c:	00000702 	.word	0x00000702

0800b2a0 <SX126xGetPacketStatus>:

void SX126xGetPacketStatus(PacketStatus_t *pktStatus){
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
	uint8_t status[3];

	SX126xReadCommand(RADIO_GET_PACKETSTATUS, status, 3);
 800b2a8:	230c      	movs	r3, #12
 800b2aa:	18fb      	adds	r3, r7, r3
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	0019      	movs	r1, r3
 800b2b0:	2014      	movs	r0, #20
 800b2b2:	f000 f929 	bl	800b508 <SX126xReadCommand>

	pktStatus->packetType = SX126xGetPacketType();
 800b2b6:	f7ff fd69 	bl	800ad8c <SX126xGetPacketType>
 800b2ba:	0003      	movs	r3, r0
 800b2bc:	001a      	movs	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	701a      	strb	r2, [r3, #0]
	switch (pktStatus->packetType){
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d002      	beq.n	800b2d0 <SX126xGetPacketStatus+0x30>
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d017      	beq.n	800b2fe <SX126xGetPacketStatus+0x5e>
 800b2ce:	e032      	b.n	800b336 <SX126xGetPacketStatus+0x96>
		case PACKET_TYPE_GFSK:
			pktStatus->Params.Gfsk.RxStatus = status[0];
 800b2d0:	210c      	movs	r1, #12
 800b2d2:	187b      	adds	r3, r7, r1
 800b2d4:	781a      	ldrb	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	711a      	strb	r2, [r3, #4]
			pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b2da:	187b      	adds	r3, r7, r1
 800b2dc:	785b      	ldrb	r3, [r3, #1]
 800b2de:	425b      	negs	r3, r3
 800b2e0:	105b      	asrs	r3, r3, #1
 800b2e2:	b25a      	sxtb	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	719a      	strb	r2, [r3, #6]
			pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b2e8:	187b      	adds	r3, r7, r1
 800b2ea:	789b      	ldrb	r3, [r3, #2]
 800b2ec:	425b      	negs	r3, r3
 800b2ee:	105b      	asrs	r3, r3, #1
 800b2f0:	b25a      	sxtb	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	715a      	strb	r2, [r3, #5]
			pktStatus->Params.Gfsk.FreqError = 0;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	609a      	str	r2, [r3, #8]
			break;
 800b2fc:	e025      	b.n	800b34a <SX126xGetPacketStatus+0xaa>

		case PACKET_TYPE_LORA:
			pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800b2fe:	210c      	movs	r1, #12
 800b300:	187b      	adds	r3, r7, r1
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	425b      	negs	r3, r3
 800b306:	105b      	asrs	r3, r3, #1
 800b308:	b25a      	sxtb	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	731a      	strb	r2, [r3, #12]
			// Returns SNR value [dB] rounded to the nearest integer value
			pktStatus->Params.LoRa.SnrPkt = (((int8_t)status[1]) + 2) >> 2;
 800b30e:	187b      	adds	r3, r7, r1
 800b310:	785b      	ldrb	r3, [r3, #1]
 800b312:	b25b      	sxtb	r3, r3
 800b314:	3302      	adds	r3, #2
 800b316:	109b      	asrs	r3, r3, #2
 800b318:	b25a      	sxtb	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	735a      	strb	r2, [r3, #13]
			pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800b31e:	187b      	adds	r3, r7, r1
 800b320:	789b      	ldrb	r3, [r3, #2]
 800b322:	425b      	negs	r3, r3
 800b324:	105b      	asrs	r3, r3, #1
 800b326:	b25a      	sxtb	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	739a      	strb	r2, [r3, #14]
			pktStatus->Params.LoRa.FreqError = FrequencyError;
 800b32c:	4b09      	ldr	r3, [pc, #36]	@ (800b354 <SX126xGetPacketStatus+0xb4>)
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	611a      	str	r2, [r3, #16]
			break;
 800b334:	e009      	b.n	800b34a <SX126xGetPacketStatus+0xaa>

		default:
		case PACKET_TYPE_NONE:
			// In that specific case, we set everything in the pktStatus to zeros
			// and reset the packet type accordingly
			memset(pktStatus, 0, sizeof(PacketStatus_t));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2214      	movs	r2, #20
 800b33a:	2100      	movs	r1, #0
 800b33c:	0018      	movs	r0, r3
 800b33e:	f000 fa7b 	bl	800b838 <memset>
			pktStatus->packetType = PACKET_TYPE_NONE;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	220f      	movs	r2, #15
 800b346:	701a      	strb	r2, [r3, #0]
		break;
 800b348:	46c0      	nop			@ (mov r8, r8)
	}
}
 800b34a:	46c0      	nop			@ (mov r8, r8)
 800b34c:	46bd      	mov	sp, r7
 800b34e:	b004      	add	sp, #16
 800b350:	bd80      	pop	{r7, pc}
 800b352:	46c0      	nop			@ (mov r8, r8)
 800b354:	20000410 	.word	0x20000410

0800b358 <SX126xClearIrqStatus>:
void SX126xClearDeviceErrors(void){
	uint8_t buf[2] = {0x00, 0x00};
	SX126xWriteCommand(RADIO_CLR_ERROR, buf, 2);
}

void SX126xClearIrqStatus(uint16_t irq){
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	0002      	movs	r2, r0
 800b360:	1dbb      	adds	r3, r7, #6
 800b362:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)(((uint16_t)irq >> 8) & 0x00FF);
 800b364:	1dbb      	adds	r3, r7, #6
 800b366:	881b      	ldrh	r3, [r3, #0]
 800b368:	0a1b      	lsrs	r3, r3, #8
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	210c      	movs	r1, #12
 800b370:	187b      	adds	r3, r7, r1
 800b372:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((uint16_t)irq & 0x00FF);
 800b374:	1dbb      	adds	r3, r7, #6
 800b376:	881b      	ldrh	r3, [r3, #0]
 800b378:	b2da      	uxtb	r2, r3
 800b37a:	187b      	adds	r3, r7, r1
 800b37c:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_CLR_IRQSTATUS, buf, 2);
 800b37e:	187b      	adds	r3, r7, r1
 800b380:	2202      	movs	r2, #2
 800b382:	0019      	movs	r1, r3
 800b384:	2002      	movs	r0, #2
 800b386:	f000 f887 	bl	800b498 <SX126xWriteCommand>
}
 800b38a:	46c0      	nop			@ (mov r8, r8)
 800b38c:	46bd      	mov	sp, r7
 800b38e:	b004      	add	sp, #16
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <SX126xIoInit>:
extern SPI_HandleTypeDef hspi1;


bool dio3IsOutput = false;

void SX126xIoInit(void){
 800b394:	b580      	push	{r7, lr}
 800b396:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 800b398:	4b03      	ldr	r3, [pc, #12]	@ (800b3a8 <SX126xIoInit+0x14>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	701a      	strb	r2, [r3, #0]

	SX126xReset();
 800b39e:	f000 f805 	bl	800b3ac <SX126xReset>
}
 800b3a2:	46c0      	nop			@ (mov r8, r8)
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20000415 	.word	0x20000415

0800b3ac <SX126xReset>:

void SX126xIoDeInit(void){
	dio3IsOutput = false;
}

void SX126xReset(void){
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 800b3b0:	2380      	movs	r3, #128	@ 0x80
 800b3b2:	0059      	lsls	r1, r3, #1
 800b3b4:	23a0      	movs	r3, #160	@ 0xa0
 800b3b6:	05db      	lsls	r3, r3, #23
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	0018      	movs	r0, r3
 800b3bc:	f7fa fa60 	bl	8005880 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800b3c0:	200a      	movs	r0, #10
 800b3c2:	f7f8 f8a9 	bl	8003518 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 800b3c6:	2380      	movs	r3, #128	@ 0x80
 800b3c8:	0059      	lsls	r1, r3, #1
 800b3ca:	23a0      	movs	r3, #160	@ 0xa0
 800b3cc:	05db      	lsls	r3, r3, #23
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	f7fa fa55 	bl	8005880 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800b3d6:	2014      	movs	r0, #20
 800b3d8:	f7f8 f89e 	bl	8003518 <HAL_Delay>
	dio3IsOutput = false;
 800b3dc:	4b02      	ldr	r3, [pc, #8]	@ (800b3e8 <SX126xReset+0x3c>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	701a      	strb	r2, [r3, #0]
}
 800b3e2:	46c0      	nop			@ (mov r8, r8)
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	20000415 	.word	0x20000415

0800b3ec <SX126xWaitOnBusy>:

void SX126xWaitOnBusy(void){
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
	int timeout = 1000;
 800b3f2:	23fa      	movs	r3, #250	@ 0xfa
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	607b      	str	r3, [r7, #4]
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 800b3f8:	e010      	b.n	800b41c <SX126xWaitOnBusy+0x30>
		for(int i=0; i<12000; i++)__NOP();
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	603b      	str	r3, [r7, #0]
 800b3fe:	e003      	b.n	800b408 <SX126xWaitOnBusy+0x1c>
 800b400:	46c0      	nop			@ (mov r8, r8)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	603b      	str	r3, [r7, #0]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	4a0c      	ldr	r2, [pc, #48]	@ (800b43c <SX126xWaitOnBusy+0x50>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	ddf7      	ble.n	800b400 <SX126xWaitOnBusy+0x14>
		timeout -= 1;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	3b01      	subs	r3, #1
 800b414:	607b      	str	r3, [r7, #4]
		if (timeout < 0){
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	db0b      	blt.n	800b434 <SX126xWaitOnBusy+0x48>
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 800b41c:	2380      	movs	r3, #128	@ 0x80
 800b41e:	009a      	lsls	r2, r3, #2
 800b420:	23a0      	movs	r3, #160	@ 0xa0
 800b422:	05db      	lsls	r3, r3, #23
 800b424:	0011      	movs	r1, r2
 800b426:	0018      	movs	r0, r3
 800b428:	f7fa f9fe 	bl	8005828 <HAL_GPIO_ReadPin>
 800b42c:	0003      	movs	r3, r0
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d0e3      	beq.n	800b3fa <SX126xWaitOnBusy+0xe>
 800b432:	e000      	b.n	800b436 <SX126xWaitOnBusy+0x4a>
			return;
 800b434:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 800b436:	46bd      	mov	sp, r7
 800b438:	b002      	add	sp, #8
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	00002edf 	.word	0x00002edf

0800b440 <SX126xWakeup>:

void SX126xWakeup(void){
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 800b446:	4b12      	ldr	r3, [pc, #72]	@ (800b490 <SX126xWakeup+0x50>)
 800b448:	2200      	movs	r2, #0
 800b44a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b44c:	b672      	cpsid	i
}
 800b44e:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800b450:	23a0      	movs	r3, #160	@ 0xa0
 800b452:	05db      	lsls	r3, r3, #23
 800b454:	2200      	movs	r2, #0
 800b456:	2110      	movs	r1, #16
 800b458:	0018      	movs	r0, r3
 800b45a:	f7fa fa11 	bl	8005880 <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_GET_STATUS, 0x00};
 800b45e:	1d3b      	adds	r3, r7, #4
 800b460:	22c0      	movs	r2, #192	@ 0xc0
 800b462:	801a      	strh	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800b464:	23fa      	movs	r3, #250	@ 0xfa
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	1d39      	adds	r1, r7, #4
 800b46a:	480a      	ldr	r0, [pc, #40]	@ (800b494 <SX126xWakeup+0x54>)
 800b46c:	2202      	movs	r2, #2
 800b46e:	f7fc ffe3 	bl	8008438 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800b472:	23a0      	movs	r3, #160	@ 0xa0
 800b474:	05db      	lsls	r3, r3, #23
 800b476:	2201      	movs	r2, #1
 800b478:	2110      	movs	r1, #16
 800b47a:	0018      	movs	r0, r3
 800b47c:	f7fa fa00 	bl	8005880 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800b480:	f7ff ffb4 	bl	800b3ec <SX126xWaitOnBusy>
  __ASM volatile ("cpsie i" : : : "memory");
 800b484:	b662      	cpsie	i
}
 800b486:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
 800b488:	46c0      	nop			@ (mov r8, r8)
 800b48a:	46bd      	mov	sp, r7
 800b48c:	b002      	add	sp, #8
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20000415 	.word	0x20000415
 800b494:	2000021c 	.word	0x2000021c

0800b498 <SX126xWriteCommand>:

void SX126xWriteCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 800b498:	b590      	push	{r4, r7, lr}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6039      	str	r1, [r7, #0]
 800b4a0:	0011      	movs	r1, r2
 800b4a2:	1dfb      	adds	r3, r7, #7
 800b4a4:	1c02      	adds	r2, r0, #0
 800b4a6:	701a      	strb	r2, [r3, #0]
 800b4a8:	1d3b      	adds	r3, r7, #4
 800b4aa:	1c0a      	adds	r2, r1, #0
 800b4ac:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800b4ae:	f7ff f8dd 	bl	800a66c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800b4b2:	23a0      	movs	r3, #160	@ 0xa0
 800b4b4:	05db      	lsls	r3, r3, #23
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2110      	movs	r1, #16
 800b4ba:	0018      	movs	r0, r3
 800b4bc:	f7fa f9e0 	bl	8005880 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&command, 1, 1000);
 800b4c0:	23fa      	movs	r3, #250	@ 0xfa
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	1df9      	adds	r1, r7, #7
 800b4c6:	480f      	ldr	r0, [pc, #60]	@ (800b504 <SX126xWriteCommand+0x6c>)
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f7fc ffb5 	bl	8008438 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buffer, size, 1000);
 800b4ce:	23fa      	movs	r3, #250	@ 0xfa
 800b4d0:	009c      	lsls	r4, r3, #2
 800b4d2:	1d3b      	adds	r3, r7, #4
 800b4d4:	881a      	ldrh	r2, [r3, #0]
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	480a      	ldr	r0, [pc, #40]	@ (800b504 <SX126xWriteCommand+0x6c>)
 800b4da:	0023      	movs	r3, r4
 800b4dc:	f7fc ffac 	bl	8008438 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800b4e0:	23a0      	movs	r3, #160	@ 0xa0
 800b4e2:	05db      	lsls	r3, r3, #23
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	2110      	movs	r1, #16
 800b4e8:	0018      	movs	r0, r3
 800b4ea:	f7fa f9c9 	bl	8005880 <HAL_GPIO_WritePin>

	if (command != RADIO_SET_SLEEP)
 800b4ee:	1dfb      	adds	r3, r7, #7
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	2b84      	cmp	r3, #132	@ 0x84
 800b4f4:	d001      	beq.n	800b4fa <SX126xWriteCommand+0x62>
		SX126xWaitOnBusy();
 800b4f6:	f7ff ff79 	bl	800b3ec <SX126xWaitOnBusy>
}
 800b4fa:	46c0      	nop			@ (mov r8, r8)
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	b003      	add	sp, #12
 800b500:	bd90      	pop	{r4, r7, pc}
 800b502:	46c0      	nop			@ (mov r8, r8)
 800b504:	2000021c 	.word	0x2000021c

0800b508 <SX126xReadCommand>:

void SX126xReadCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 800b508:	b590      	push	{r4, r7, lr}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6039      	str	r1, [r7, #0]
 800b510:	0011      	movs	r1, r2
 800b512:	1dfb      	adds	r3, r7, #7
 800b514:	1c02      	adds	r2, r0, #0
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	1d3b      	adds	r3, r7, #4
 800b51a:	1c0a      	adds	r2, r1, #0
 800b51c:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800b51e:	f7ff f8a5 	bl	800a66c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800b522:	23a0      	movs	r3, #160	@ 0xa0
 800b524:	05db      	lsls	r3, r3, #23
 800b526:	2200      	movs	r2, #0
 800b528:	2110      	movs	r1, #16
 800b52a:	0018      	movs	r0, r3
 800b52c:	f7fa f9a8 	bl	8005880 <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)command, 0x00};
 800b530:	210c      	movs	r1, #12
 800b532:	187b      	adds	r3, r7, r1
 800b534:	1dfa      	adds	r2, r7, #7
 800b536:	7812      	ldrb	r2, [r2, #0]
 800b538:	701a      	strb	r2, [r3, #0]
 800b53a:	187b      	adds	r3, r7, r1
 800b53c:	2200      	movs	r2, #0
 800b53e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800b540:	23fa      	movs	r3, #250	@ 0xfa
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	1879      	adds	r1, r7, r1
 800b546:	480d      	ldr	r0, [pc, #52]	@ (800b57c <SX126xReadCommand+0x74>)
 800b548:	2202      	movs	r2, #2
 800b54a:	f7fc ff75 	bl	8008438 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, size, 1000);
 800b54e:	23fa      	movs	r3, #250	@ 0xfa
 800b550:	009c      	lsls	r4, r3, #2
 800b552:	1d3b      	adds	r3, r7, #4
 800b554:	881a      	ldrh	r2, [r3, #0]
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	4808      	ldr	r0, [pc, #32]	@ (800b57c <SX126xReadCommand+0x74>)
 800b55a:	0023      	movs	r3, r4
 800b55c:	f7fd f8de 	bl	800871c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800b560:	23a0      	movs	r3, #160	@ 0xa0
 800b562:	05db      	lsls	r3, r3, #23
 800b564:	2201      	movs	r2, #1
 800b566:	2110      	movs	r1, #16
 800b568:	0018      	movs	r0, r3
 800b56a:	f7fa f989 	bl	8005880 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800b56e:	f7ff ff3d 	bl	800b3ec <SX126xWaitOnBusy>
}
 800b572:	46c0      	nop			@ (mov r8, r8)
 800b574:	46bd      	mov	sp, r7
 800b576:	b005      	add	sp, #20
 800b578:	bd90      	pop	{r4, r7, pc}
 800b57a:	46c0      	nop			@ (mov r8, r8)
 800b57c:	2000021c 	.word	0x2000021c

0800b580 <SX126xWriteRegisters>:

void SX126xWriteRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 800b580:	b590      	push	{r4, r7, lr}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6039      	str	r1, [r7, #0]
 800b588:	0011      	movs	r1, r2
 800b58a:	1dbb      	adds	r3, r7, #6
 800b58c:	1c02      	adds	r2, r0, #0
 800b58e:	801a      	strh	r2, [r3, #0]
 800b590:	1d3b      	adds	r3, r7, #4
 800b592:	1c0a      	adds	r2, r1, #0
 800b594:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800b596:	f7ff f869 	bl	800a66c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800b59a:	23a0      	movs	r3, #160	@ 0xa0
 800b59c:	05db      	lsls	r3, r3, #23
 800b59e:	2200      	movs	r2, #0
 800b5a0:	2110      	movs	r1, #16
 800b5a2:	0018      	movs	r0, r3
 800b5a4:	f7fa f96c 	bl	8005880 <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_WRITE_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF)};
 800b5a8:	210c      	movs	r1, #12
 800b5aa:	187b      	adds	r3, r7, r1
 800b5ac:	220d      	movs	r2, #13
 800b5ae:	701a      	strb	r2, [r3, #0]
 800b5b0:	1dbb      	adds	r3, r7, #6
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	0a1b      	lsrs	r3, r3, #8
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	187b      	adds	r3, r7, r1
 800b5bc:	705a      	strb	r2, [r3, #1]
 800b5be:	1dbb      	adds	r3, r7, #6
 800b5c0:	881b      	ldrh	r3, [r3, #0]
 800b5c2:	b2da      	uxtb	r2, r3
 800b5c4:	187b      	adds	r3, r7, r1
 800b5c6:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit(&hspi1, buf, 3, 1000);
 800b5c8:	23fa      	movs	r3, #250	@ 0xfa
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	1879      	adds	r1, r7, r1
 800b5ce:	480d      	ldr	r0, [pc, #52]	@ (800b604 <SX126xWriteRegisters+0x84>)
 800b5d0:	2203      	movs	r2, #3
 800b5d2:	f7fc ff31 	bl	8008438 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buffer, size, 1000);
 800b5d6:	23fa      	movs	r3, #250	@ 0xfa
 800b5d8:	009c      	lsls	r4, r3, #2
 800b5da:	1d3b      	adds	r3, r7, #4
 800b5dc:	881a      	ldrh	r2, [r3, #0]
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	4808      	ldr	r0, [pc, #32]	@ (800b604 <SX126xWriteRegisters+0x84>)
 800b5e2:	0023      	movs	r3, r4
 800b5e4:	f7fc ff28 	bl	8008438 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800b5e8:	23a0      	movs	r3, #160	@ 0xa0
 800b5ea:	05db      	lsls	r3, r3, #23
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	2110      	movs	r1, #16
 800b5f0:	0018      	movs	r0, r3
 800b5f2:	f7fa f945 	bl	8005880 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800b5f6:	f7ff fef9 	bl	800b3ec <SX126xWaitOnBusy>
}
 800b5fa:	46c0      	nop			@ (mov r8, r8)
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	b005      	add	sp, #20
 800b600:	bd90      	pop	{r4, r7, pc}
 800b602:	46c0      	nop			@ (mov r8, r8)
 800b604:	2000021c 	.word	0x2000021c

0800b608 <SX126xWriteRegister>:

void SX126xWriteRegister(uint16_t address, uint8_t value){
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	0002      	movs	r2, r0
 800b610:	1dbb      	adds	r3, r7, #6
 800b612:	801a      	strh	r2, [r3, #0]
 800b614:	1d7b      	adds	r3, r7, #5
 800b616:	1c0a      	adds	r2, r1, #0
 800b618:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegisters(address, &value, 1);
 800b61a:	1d79      	adds	r1, r7, #5
 800b61c:	1dbb      	adds	r3, r7, #6
 800b61e:	881b      	ldrh	r3, [r3, #0]
 800b620:	2201      	movs	r2, #1
 800b622:	0018      	movs	r0, r3
 800b624:	f7ff ffac 	bl	800b580 <SX126xWriteRegisters>
}
 800b628:	46c0      	nop			@ (mov r8, r8)
 800b62a:	46bd      	mov	sp, r7
 800b62c:	b002      	add	sp, #8
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <SX126xReadRegisters>:

void SX126xReadRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 800b630:	b590      	push	{r4, r7, lr}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6039      	str	r1, [r7, #0]
 800b638:	0011      	movs	r1, r2
 800b63a:	1dbb      	adds	r3, r7, #6
 800b63c:	1c02      	adds	r2, r0, #0
 800b63e:	801a      	strh	r2, [r3, #0]
 800b640:	1d3b      	adds	r3, r7, #4
 800b642:	1c0a      	adds	r2, r1, #0
 800b644:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800b646:	f7ff f811 	bl	800a66c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800b64a:	23a0      	movs	r3, #160	@ 0xa0
 800b64c:	05db      	lsls	r3, r3, #23
 800b64e:	2200      	movs	r2, #0
 800b650:	2110      	movs	r1, #16
 800b652:	0018      	movs	r0, r3
 800b654:	f7fa f914 	bl	8005880 <HAL_GPIO_WritePin>
	uint8_t buf[4] = {(uint8_t)RADIO_READ_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF), 0x00};
 800b658:	210c      	movs	r1, #12
 800b65a:	187b      	adds	r3, r7, r1
 800b65c:	221d      	movs	r2, #29
 800b65e:	701a      	strb	r2, [r3, #0]
 800b660:	1dbb      	adds	r3, r7, #6
 800b662:	881b      	ldrh	r3, [r3, #0]
 800b664:	0a1b      	lsrs	r3, r3, #8
 800b666:	b29b      	uxth	r3, r3
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	187b      	adds	r3, r7, r1
 800b66c:	705a      	strb	r2, [r3, #1]
 800b66e:	1dbb      	adds	r3, r7, #6
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	b2da      	uxtb	r2, r3
 800b674:	187b      	adds	r3, r7, r1
 800b676:	709a      	strb	r2, [r3, #2]
 800b678:	187b      	adds	r3, r7, r1
 800b67a:	2200      	movs	r2, #0
 800b67c:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, buf, 4, 1000);
 800b67e:	23fa      	movs	r3, #250	@ 0xfa
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	1879      	adds	r1, r7, r1
 800b684:	480c      	ldr	r0, [pc, #48]	@ (800b6b8 <SX126xReadRegisters+0x88>)
 800b686:	2204      	movs	r2, #4
 800b688:	f7fc fed6 	bl	8008438 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, size, 1000);
 800b68c:	23fa      	movs	r3, #250	@ 0xfa
 800b68e:	009c      	lsls	r4, r3, #2
 800b690:	1d3b      	adds	r3, r7, #4
 800b692:	881a      	ldrh	r2, [r3, #0]
 800b694:	6839      	ldr	r1, [r7, #0]
 800b696:	4808      	ldr	r0, [pc, #32]	@ (800b6b8 <SX126xReadRegisters+0x88>)
 800b698:	0023      	movs	r3, r4
 800b69a:	f7fd f83f 	bl	800871c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800b69e:	23a0      	movs	r3, #160	@ 0xa0
 800b6a0:	05db      	lsls	r3, r3, #23
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	2110      	movs	r1, #16
 800b6a6:	0018      	movs	r0, r3
 800b6a8:	f7fa f8ea 	bl	8005880 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800b6ac:	f7ff fe9e 	bl	800b3ec <SX126xWaitOnBusy>
}
 800b6b0:	46c0      	nop			@ (mov r8, r8)
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	b005      	add	sp, #20
 800b6b6:	bd90      	pop	{r4, r7, pc}
 800b6b8:	2000021c 	.word	0x2000021c

0800b6bc <SX126xReadRegister>:

uint8_t SX126xReadRegister(uint16_t address){
 800b6bc:	b590      	push	{r4, r7, lr}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	0002      	movs	r2, r0
 800b6c4:	1dbb      	adds	r3, r7, #6
 800b6c6:	801a      	strh	r2, [r3, #0]
	uint8_t data;
	SX126xReadRegisters(address, &data, 1);
 800b6c8:	240f      	movs	r4, #15
 800b6ca:	1939      	adds	r1, r7, r4
 800b6cc:	1dbb      	adds	r3, r7, #6
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	0018      	movs	r0, r3
 800b6d4:	f7ff ffac 	bl	800b630 <SX126xReadRegisters>
	return data;
 800b6d8:	193b      	adds	r3, r7, r4
 800b6da:	781b      	ldrb	r3, [r3, #0]
}
 800b6dc:	0018      	movs	r0, r3
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	b005      	add	sp, #20
 800b6e2:	bd90      	pop	{r4, r7, pc}

0800b6e4 <SX126xWriteBuffer>:

void SX126xWriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6039      	str	r1, [r7, #0]
 800b6ec:	0011      	movs	r1, r2
 800b6ee:	1dfb      	adds	r3, r7, #7
 800b6f0:	1c02      	adds	r2, r0, #0
 800b6f2:	701a      	strb	r2, [r3, #0]
 800b6f4:	1dbb      	adds	r3, r7, #6
 800b6f6:	1c0a      	adds	r2, r1, #0
 800b6f8:	701a      	strb	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800b6fa:	f7fe ffb7 	bl	800a66c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800b6fe:	23a0      	movs	r3, #160	@ 0xa0
 800b700:	05db      	lsls	r3, r3, #23
 800b702:	2200      	movs	r2, #0
 800b704:	2110      	movs	r1, #16
 800b706:	0018      	movs	r0, r3
 800b708:	f7fa f8ba 	bl	8005880 <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_WRITE_BUFFER, offset};
 800b70c:	210c      	movs	r1, #12
 800b70e:	187b      	adds	r3, r7, r1
 800b710:	220e      	movs	r2, #14
 800b712:	701a      	strb	r2, [r3, #0]
 800b714:	187b      	adds	r3, r7, r1
 800b716:	1dfa      	adds	r2, r7, #7
 800b718:	7812      	ldrb	r2, [r2, #0]
 800b71a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800b71c:	23fa      	movs	r3, #250	@ 0xfa
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	1879      	adds	r1, r7, r1
 800b722:	480d      	ldr	r0, [pc, #52]	@ (800b758 <SX126xWriteBuffer+0x74>)
 800b724:	2202      	movs	r2, #2
 800b726:	f7fc fe87 	bl	8008438 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buffer, size, 1000);
 800b72a:	1dbb      	adds	r3, r7, #6
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	b29a      	uxth	r2, r3
 800b730:	23fa      	movs	r3, #250	@ 0xfa
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	4808      	ldr	r0, [pc, #32]	@ (800b758 <SX126xWriteBuffer+0x74>)
 800b738:	f7fc fe7e 	bl	8008438 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800b73c:	23a0      	movs	r3, #160	@ 0xa0
 800b73e:	05db      	lsls	r3, r3, #23
 800b740:	2201      	movs	r2, #1
 800b742:	2110      	movs	r1, #16
 800b744:	0018      	movs	r0, r3
 800b746:	f7fa f89b 	bl	8005880 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800b74a:	f7ff fe4f 	bl	800b3ec <SX126xWaitOnBusy>
}
 800b74e:	46c0      	nop			@ (mov r8, r8)
 800b750:	46bd      	mov	sp, r7
 800b752:	b004      	add	sp, #16
 800b754:	bd80      	pop	{r7, pc}
 800b756:	46c0      	nop			@ (mov r8, r8)
 800b758:	2000021c 	.word	0x2000021c

0800b75c <SX126xReadBuffer>:

void SX126xReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6039      	str	r1, [r7, #0]
 800b764:	0011      	movs	r1, r2
 800b766:	1dfb      	adds	r3, r7, #7
 800b768:	1c02      	adds	r2, r0, #0
 800b76a:	701a      	strb	r2, [r3, #0]
 800b76c:	1dbb      	adds	r3, r7, #6
 800b76e:	1c0a      	adds	r2, r1, #0
 800b770:	701a      	strb	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800b772:	f7fe ff7b 	bl	800a66c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800b776:	23a0      	movs	r3, #160	@ 0xa0
 800b778:	05db      	lsls	r3, r3, #23
 800b77a:	2200      	movs	r2, #0
 800b77c:	2110      	movs	r1, #16
 800b77e:	0018      	movs	r0, r3
 800b780:	f7fa f87e 	bl	8005880 <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_READ_BUFFER, offset, 0x00};
 800b784:	210c      	movs	r1, #12
 800b786:	187b      	adds	r3, r7, r1
 800b788:	221e      	movs	r2, #30
 800b78a:	701a      	strb	r2, [r3, #0]
 800b78c:	187b      	adds	r3, r7, r1
 800b78e:	1dfa      	adds	r2, r7, #7
 800b790:	7812      	ldrb	r2, [r2, #0]
 800b792:	705a      	strb	r2, [r3, #1]
 800b794:	187b      	adds	r3, r7, r1
 800b796:	2200      	movs	r2, #0
 800b798:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800b79a:	23fa      	movs	r3, #250	@ 0xfa
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	1879      	adds	r1, r7, r1
 800b7a0:	4812      	ldr	r0, [pc, #72]	@ (800b7ec <SX126xReadBuffer+0x90>)
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	f7fc fe48 	bl	8008438 <HAL_SPI_Transmit>
	uint8_t dummy = 0;
 800b7a8:	210b      	movs	r1, #11
 800b7aa:	187b      	adds	r3, r7, r1
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1, &dummy, 1, 1000);
 800b7b0:	23fa      	movs	r3, #250	@ 0xfa
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	1879      	adds	r1, r7, r1
 800b7b6:	480d      	ldr	r0, [pc, #52]	@ (800b7ec <SX126xReadBuffer+0x90>)
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f7fc ffaf 	bl	800871c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, buffer, size, 1000);
 800b7be:	1dbb      	adds	r3, r7, #6
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	23fa      	movs	r3, #250	@ 0xfa
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	4808      	ldr	r0, [pc, #32]	@ (800b7ec <SX126xReadBuffer+0x90>)
 800b7cc:	f7fc ffa6 	bl	800871c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800b7d0:	23a0      	movs	r3, #160	@ 0xa0
 800b7d2:	05db      	lsls	r3, r3, #23
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	2110      	movs	r1, #16
 800b7d8:	0018      	movs	r0, r3
 800b7da:	f7fa f851 	bl	8005880 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800b7de:	f7ff fe05 	bl	800b3ec <SX126xWaitOnBusy>
}
 800b7e2:	46c0      	nop			@ (mov r8, r8)
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	b004      	add	sp, #16
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	46c0      	nop			@ (mov r8, r8)
 800b7ec:	2000021c 	.word	0x2000021c

0800b7f0 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower(int8_t power){
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	0002      	movs	r2, r0
 800b7f8:	1dfb      	adds	r3, r7, #7
 800b7fa:	701a      	strb	r2, [r3, #0]
	SX126xSetTxParams(power, RADIO_RAMP_40_US);
 800b7fc:	1dfb      	adds	r3, r7, #7
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	b25b      	sxtb	r3, r3
 800b802:	2102      	movs	r1, #2
 800b804:	0018      	movs	r0, r3
 800b806:	f7ff facb 	bl	800ada0 <SX126xSetTxParams>
}
 800b80a:	46c0      	nop			@ (mov r8, r8)
 800b80c:	46bd      	mov	sp, r7
 800b80e:	b002      	add	sp, #8
 800b810:	bd80      	pop	{r7, pc}

0800b812 <SX126xGetPaSelect>:

uint8_t SX126xGetPaSelect(uint32_t channel){
 800b812:	b580      	push	{r7, lr}
 800b814:	b082      	sub	sp, #8
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
	return SX1262;
 800b81a:	2302      	movs	r3, #2
}
 800b81c:	0018      	movs	r0, r3
 800b81e:	46bd      	mov	sp, r7
 800b820:	b002      	add	sp, #8
 800b822:	bd80      	pop	{r7, pc}

0800b824 <SX126xAntSwOn>:
		SPI_LORA.endTransaction();
		digitalWrite(_hwConfig.PIN_LORA_NSS, HIGH);
	}
}
*/
void SX126xAntSwOn(void){
 800b824:	b580      	push	{r7, lr}
 800b826:	af00      	add	r7, sp, #0
}
 800b828:	46c0      	nop			@ (mov r8, r8)
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <SX126xAntSwOff>:

void SX126xAntSwOff(void){
 800b82e:	b580      	push	{r7, lr}
 800b830:	af00      	add	r7, sp, #0
}
 800b832:	46c0      	nop			@ (mov r8, r8)
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <memset>:
 800b838:	0003      	movs	r3, r0
 800b83a:	1882      	adds	r2, r0, r2
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d100      	bne.n	800b842 <memset+0xa>
 800b840:	4770      	bx	lr
 800b842:	7019      	strb	r1, [r3, #0]
 800b844:	3301      	adds	r3, #1
 800b846:	e7f9      	b.n	800b83c <memset+0x4>

0800b848 <__libc_init_array>:
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	2600      	movs	r6, #0
 800b84c:	4c0c      	ldr	r4, [pc, #48]	@ (800b880 <__libc_init_array+0x38>)
 800b84e:	4d0d      	ldr	r5, [pc, #52]	@ (800b884 <__libc_init_array+0x3c>)
 800b850:	1b64      	subs	r4, r4, r5
 800b852:	10a4      	asrs	r4, r4, #2
 800b854:	42a6      	cmp	r6, r4
 800b856:	d109      	bne.n	800b86c <__libc_init_array+0x24>
 800b858:	2600      	movs	r6, #0
 800b85a:	f000 f9a1 	bl	800bba0 <_init>
 800b85e:	4c0a      	ldr	r4, [pc, #40]	@ (800b888 <__libc_init_array+0x40>)
 800b860:	4d0a      	ldr	r5, [pc, #40]	@ (800b88c <__libc_init_array+0x44>)
 800b862:	1b64      	subs	r4, r4, r5
 800b864:	10a4      	asrs	r4, r4, #2
 800b866:	42a6      	cmp	r6, r4
 800b868:	d105      	bne.n	800b876 <__libc_init_array+0x2e>
 800b86a:	bd70      	pop	{r4, r5, r6, pc}
 800b86c:	00b3      	lsls	r3, r6, #2
 800b86e:	58eb      	ldr	r3, [r5, r3]
 800b870:	4798      	blx	r3
 800b872:	3601      	adds	r6, #1
 800b874:	e7ee      	b.n	800b854 <__libc_init_array+0xc>
 800b876:	00b3      	lsls	r3, r6, #2
 800b878:	58eb      	ldr	r3, [r5, r3]
 800b87a:	4798      	blx	r3
 800b87c:	3601      	adds	r6, #1
 800b87e:	e7f2      	b.n	800b866 <__libc_init_array+0x1e>
 800b880:	0800c058 	.word	0x0800c058
 800b884:	0800c058 	.word	0x0800c058
 800b888:	0800c05c 	.word	0x0800c05c
 800b88c:	0800c058 	.word	0x0800c058

0800b890 <memcpy>:
 800b890:	2300      	movs	r3, #0
 800b892:	b510      	push	{r4, lr}
 800b894:	429a      	cmp	r2, r3
 800b896:	d100      	bne.n	800b89a <memcpy+0xa>
 800b898:	bd10      	pop	{r4, pc}
 800b89a:	5ccc      	ldrb	r4, [r1, r3]
 800b89c:	54c4      	strb	r4, [r0, r3]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	e7f8      	b.n	800b894 <memcpy+0x4>
	...

0800b8a4 <ceil>:
 800b8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8a6:	004b      	lsls	r3, r1, #1
 800b8a8:	4a34      	ldr	r2, [pc, #208]	@ (800b97c <ceil+0xd8>)
 800b8aa:	0d5b      	lsrs	r3, r3, #21
 800b8ac:	189e      	adds	r6, r3, r2
 800b8ae:	000d      	movs	r5, r1
 800b8b0:	0004      	movs	r4, r0
 800b8b2:	9001      	str	r0, [sp, #4]
 800b8b4:	2e13      	cmp	r6, #19
 800b8b6:	dc2e      	bgt.n	800b916 <ceil+0x72>
 800b8b8:	2e00      	cmp	r6, #0
 800b8ba:	da11      	bge.n	800b8e0 <ceil+0x3c>
 800b8bc:	4a30      	ldr	r2, [pc, #192]	@ (800b980 <ceil+0xdc>)
 800b8be:	4b31      	ldr	r3, [pc, #196]	@ (800b984 <ceil+0xe0>)
 800b8c0:	f7f5 f814 	bl	80008ec <__aeabi_dadd>
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f7f4 fcd4 	bl	8000274 <__aeabi_dcmpgt>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	d01f      	beq.n	800b910 <ceil+0x6c>
 800b8d0:	2d00      	cmp	r5, #0
 800b8d2:	db4f      	blt.n	800b974 <ceil+0xd0>
 800b8d4:	432c      	orrs	r4, r5
 800b8d6:	1e25      	subs	r5, r4, #0
 800b8d8:	d01a      	beq.n	800b910 <ceil+0x6c>
 800b8da:	2400      	movs	r4, #0
 800b8dc:	4d2a      	ldr	r5, [pc, #168]	@ (800b988 <ceil+0xe4>)
 800b8de:	e017      	b.n	800b910 <ceil+0x6c>
 800b8e0:	4f2a      	ldr	r7, [pc, #168]	@ (800b98c <ceil+0xe8>)
 800b8e2:	4137      	asrs	r7, r6
 800b8e4:	003b      	movs	r3, r7
 800b8e6:	400b      	ands	r3, r1
 800b8e8:	4303      	orrs	r3, r0
 800b8ea:	d01e      	beq.n	800b92a <ceil+0x86>
 800b8ec:	4a24      	ldr	r2, [pc, #144]	@ (800b980 <ceil+0xdc>)
 800b8ee:	4b25      	ldr	r3, [pc, #148]	@ (800b984 <ceil+0xe0>)
 800b8f0:	f7f4 fffc 	bl	80008ec <__aeabi_dadd>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f7f4 fcbc 	bl	8000274 <__aeabi_dcmpgt>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d007      	beq.n	800b910 <ceil+0x6c>
 800b900:	2d00      	cmp	r5, #0
 800b902:	dd03      	ble.n	800b90c <ceil+0x68>
 800b904:	2380      	movs	r3, #128	@ 0x80
 800b906:	035b      	lsls	r3, r3, #13
 800b908:	4133      	asrs	r3, r6
 800b90a:	18ed      	adds	r5, r5, r3
 800b90c:	2400      	movs	r4, #0
 800b90e:	43bd      	bics	r5, r7
 800b910:	0029      	movs	r1, r5
 800b912:	0020      	movs	r0, r4
 800b914:	e009      	b.n	800b92a <ceil+0x86>
 800b916:	2e33      	cmp	r6, #51	@ 0x33
 800b918:	dd09      	ble.n	800b92e <ceil+0x8a>
 800b91a:	2380      	movs	r3, #128	@ 0x80
 800b91c:	00db      	lsls	r3, r3, #3
 800b91e:	429e      	cmp	r6, r3
 800b920:	d103      	bne.n	800b92a <ceil+0x86>
 800b922:	0002      	movs	r2, r0
 800b924:	000b      	movs	r3, r1
 800b926:	f7f4 ffe1 	bl	80008ec <__aeabi_dadd>
 800b92a:	b003      	add	sp, #12
 800b92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b92e:	2701      	movs	r7, #1
 800b930:	4a17      	ldr	r2, [pc, #92]	@ (800b990 <ceil+0xec>)
 800b932:	427f      	negs	r7, r7
 800b934:	189b      	adds	r3, r3, r2
 800b936:	40df      	lsrs	r7, r3
 800b938:	4207      	tst	r7, r0
 800b93a:	d0f6      	beq.n	800b92a <ceil+0x86>
 800b93c:	4a10      	ldr	r2, [pc, #64]	@ (800b980 <ceil+0xdc>)
 800b93e:	4b11      	ldr	r3, [pc, #68]	@ (800b984 <ceil+0xe0>)
 800b940:	f7f4 ffd4 	bl	80008ec <__aeabi_dadd>
 800b944:	2200      	movs	r2, #0
 800b946:	2300      	movs	r3, #0
 800b948:	f7f4 fc94 	bl	8000274 <__aeabi_dcmpgt>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d0df      	beq.n	800b910 <ceil+0x6c>
 800b950:	2d00      	cmp	r5, #0
 800b952:	dd02      	ble.n	800b95a <ceil+0xb6>
 800b954:	2e14      	cmp	r6, #20
 800b956:	d102      	bne.n	800b95e <ceil+0xba>
 800b958:	3501      	adds	r5, #1
 800b95a:	43bc      	bics	r4, r7
 800b95c:	e7d8      	b.n	800b910 <ceil+0x6c>
 800b95e:	2234      	movs	r2, #52	@ 0x34
 800b960:	2301      	movs	r3, #1
 800b962:	1b92      	subs	r2, r2, r6
 800b964:	4093      	lsls	r3, r2
 800b966:	18e4      	adds	r4, r4, r3
 800b968:	9b01      	ldr	r3, [sp, #4]
 800b96a:	429c      	cmp	r4, r3
 800b96c:	419b      	sbcs	r3, r3
 800b96e:	425b      	negs	r3, r3
 800b970:	18ed      	adds	r5, r5, r3
 800b972:	e7f2      	b.n	800b95a <ceil+0xb6>
 800b974:	2580      	movs	r5, #128	@ 0x80
 800b976:	2400      	movs	r4, #0
 800b978:	062d      	lsls	r5, r5, #24
 800b97a:	e7c9      	b.n	800b910 <ceil+0x6c>
 800b97c:	fffffc01 	.word	0xfffffc01
 800b980:	8800759c 	.word	0x8800759c
 800b984:	7e37e43c 	.word	0x7e37e43c
 800b988:	3ff00000 	.word	0x3ff00000
 800b98c:	000fffff 	.word	0x000fffff
 800b990:	fffffbed 	.word	0xfffffbed

0800b994 <floor>:
 800b994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b996:	004b      	lsls	r3, r1, #1
 800b998:	4a36      	ldr	r2, [pc, #216]	@ (800ba74 <floor+0xe0>)
 800b99a:	0d5b      	lsrs	r3, r3, #21
 800b99c:	189e      	adds	r6, r3, r2
 800b99e:	000c      	movs	r4, r1
 800b9a0:	0005      	movs	r5, r0
 800b9a2:	9001      	str	r0, [sp, #4]
 800b9a4:	2e13      	cmp	r6, #19
 800b9a6:	dc2f      	bgt.n	800ba08 <floor+0x74>
 800b9a8:	2e00      	cmp	r6, #0
 800b9aa:	da14      	bge.n	800b9d6 <floor+0x42>
 800b9ac:	4a32      	ldr	r2, [pc, #200]	@ (800ba78 <floor+0xe4>)
 800b9ae:	4b33      	ldr	r3, [pc, #204]	@ (800ba7c <floor+0xe8>)
 800b9b0:	f7f4 ff9c 	bl	80008ec <__aeabi_dadd>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f7f4 fc5c 	bl	8000274 <__aeabi_dcmpgt>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d007      	beq.n	800b9d0 <floor+0x3c>
 800b9c0:	2c00      	cmp	r4, #0
 800b9c2:	da50      	bge.n	800ba66 <floor+0xd2>
 800b9c4:	0064      	lsls	r4, r4, #1
 800b9c6:	0864      	lsrs	r4, r4, #1
 800b9c8:	4325      	orrs	r5, r4
 800b9ca:	d14f      	bne.n	800ba6c <floor+0xd8>
 800b9cc:	2480      	movs	r4, #128	@ 0x80
 800b9ce:	0624      	lsls	r4, r4, #24
 800b9d0:	0021      	movs	r1, r4
 800b9d2:	0028      	movs	r0, r5
 800b9d4:	e022      	b.n	800ba1c <floor+0x88>
 800b9d6:	4f2a      	ldr	r7, [pc, #168]	@ (800ba80 <floor+0xec>)
 800b9d8:	4137      	asrs	r7, r6
 800b9da:	003b      	movs	r3, r7
 800b9dc:	400b      	ands	r3, r1
 800b9de:	4303      	orrs	r3, r0
 800b9e0:	d01c      	beq.n	800ba1c <floor+0x88>
 800b9e2:	4a25      	ldr	r2, [pc, #148]	@ (800ba78 <floor+0xe4>)
 800b9e4:	4b25      	ldr	r3, [pc, #148]	@ (800ba7c <floor+0xe8>)
 800b9e6:	f7f4 ff81 	bl	80008ec <__aeabi_dadd>
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f7f4 fc41 	bl	8000274 <__aeabi_dcmpgt>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d0ec      	beq.n	800b9d0 <floor+0x3c>
 800b9f6:	2c00      	cmp	r4, #0
 800b9f8:	da03      	bge.n	800ba02 <floor+0x6e>
 800b9fa:	2380      	movs	r3, #128	@ 0x80
 800b9fc:	035b      	lsls	r3, r3, #13
 800b9fe:	4133      	asrs	r3, r6
 800ba00:	18e4      	adds	r4, r4, r3
 800ba02:	2500      	movs	r5, #0
 800ba04:	43bc      	bics	r4, r7
 800ba06:	e7e3      	b.n	800b9d0 <floor+0x3c>
 800ba08:	2e33      	cmp	r6, #51	@ 0x33
 800ba0a:	dd09      	ble.n	800ba20 <floor+0x8c>
 800ba0c:	2380      	movs	r3, #128	@ 0x80
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	429e      	cmp	r6, r3
 800ba12:	d103      	bne.n	800ba1c <floor+0x88>
 800ba14:	0002      	movs	r2, r0
 800ba16:	000b      	movs	r3, r1
 800ba18:	f7f4 ff68 	bl	80008ec <__aeabi_dadd>
 800ba1c:	b003      	add	sp, #12
 800ba1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba20:	2701      	movs	r7, #1
 800ba22:	4a18      	ldr	r2, [pc, #96]	@ (800ba84 <floor+0xf0>)
 800ba24:	427f      	negs	r7, r7
 800ba26:	189b      	adds	r3, r3, r2
 800ba28:	40df      	lsrs	r7, r3
 800ba2a:	4238      	tst	r0, r7
 800ba2c:	d0f6      	beq.n	800ba1c <floor+0x88>
 800ba2e:	4a12      	ldr	r2, [pc, #72]	@ (800ba78 <floor+0xe4>)
 800ba30:	4b12      	ldr	r3, [pc, #72]	@ (800ba7c <floor+0xe8>)
 800ba32:	f7f4 ff5b 	bl	80008ec <__aeabi_dadd>
 800ba36:	2200      	movs	r2, #0
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f7f4 fc1b 	bl	8000274 <__aeabi_dcmpgt>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d0c6      	beq.n	800b9d0 <floor+0x3c>
 800ba42:	2c00      	cmp	r4, #0
 800ba44:	da02      	bge.n	800ba4c <floor+0xb8>
 800ba46:	2e14      	cmp	r6, #20
 800ba48:	d102      	bne.n	800ba50 <floor+0xbc>
 800ba4a:	3401      	adds	r4, #1
 800ba4c:	43bd      	bics	r5, r7
 800ba4e:	e7bf      	b.n	800b9d0 <floor+0x3c>
 800ba50:	2234      	movs	r2, #52	@ 0x34
 800ba52:	2301      	movs	r3, #1
 800ba54:	1b92      	subs	r2, r2, r6
 800ba56:	4093      	lsls	r3, r2
 800ba58:	18ed      	adds	r5, r5, r3
 800ba5a:	9b01      	ldr	r3, [sp, #4]
 800ba5c:	429d      	cmp	r5, r3
 800ba5e:	419b      	sbcs	r3, r3
 800ba60:	425b      	negs	r3, r3
 800ba62:	18e4      	adds	r4, r4, r3
 800ba64:	e7f2      	b.n	800ba4c <floor+0xb8>
 800ba66:	2500      	movs	r5, #0
 800ba68:	002c      	movs	r4, r5
 800ba6a:	e7b1      	b.n	800b9d0 <floor+0x3c>
 800ba6c:	2500      	movs	r5, #0
 800ba6e:	4c06      	ldr	r4, [pc, #24]	@ (800ba88 <floor+0xf4>)
 800ba70:	e7ae      	b.n	800b9d0 <floor+0x3c>
 800ba72:	46c0      	nop			@ (mov r8, r8)
 800ba74:	fffffc01 	.word	0xfffffc01
 800ba78:	8800759c 	.word	0x8800759c
 800ba7c:	7e37e43c 	.word	0x7e37e43c
 800ba80:	000fffff 	.word	0x000fffff
 800ba84:	fffffbed 	.word	0xfffffbed
 800ba88:	bff00000 	.word	0xbff00000

0800ba8c <rint>:
 800ba8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba8e:	004a      	lsls	r2, r1, #1
 800ba90:	b085      	sub	sp, #20
 800ba92:	0d52      	lsrs	r2, r2, #21
 800ba94:	9201      	str	r2, [sp, #4]
 800ba96:	9e01      	ldr	r6, [sp, #4]
 800ba98:	4a3c      	ldr	r2, [pc, #240]	@ (800bb8c <rint+0x100>)
 800ba9a:	000d      	movs	r5, r1
 800ba9c:	18b6      	adds	r6, r6, r2
 800ba9e:	0003      	movs	r3, r0
 800baa0:	0fcc      	lsrs	r4, r1, #31
 800baa2:	2e13      	cmp	r6, #19
 800baa4:	dc55      	bgt.n	800bb52 <rint+0xc6>
 800baa6:	2e00      	cmp	r6, #0
 800baa8:	da2a      	bge.n	800bb00 <rint+0x74>
 800baaa:	004a      	lsls	r2, r1, #1
 800baac:	0852      	lsrs	r2, r2, #1
 800baae:	4302      	orrs	r2, r0
 800bab0:	d024      	beq.n	800bafc <rint+0x70>
 800bab2:	030a      	lsls	r2, r1, #12
 800bab4:	0b12      	lsrs	r2, r2, #12
 800bab6:	4302      	orrs	r2, r0
 800bab8:	4253      	negs	r3, r2
 800baba:	4313      	orrs	r3, r2
 800babc:	2280      	movs	r2, #128	@ 0x80
 800babe:	0c4d      	lsrs	r5, r1, #17
 800bac0:	0312      	lsls	r2, r2, #12
 800bac2:	0b1b      	lsrs	r3, r3, #12
 800bac4:	4013      	ands	r3, r2
 800bac6:	046d      	lsls	r5, r5, #17
 800bac8:	432b      	orrs	r3, r5
 800baca:	0019      	movs	r1, r3
 800bacc:	4b30      	ldr	r3, [pc, #192]	@ (800bb90 <rint+0x104>)
 800bace:	00e2      	lsls	r2, r4, #3
 800bad0:	189b      	adds	r3, r3, r2
 800bad2:	681e      	ldr	r6, [r3, #0]
 800bad4:	685f      	ldr	r7, [r3, #4]
 800bad6:	0002      	movs	r2, r0
 800bad8:	000b      	movs	r3, r1
 800bada:	0030      	movs	r0, r6
 800badc:	0039      	movs	r1, r7
 800bade:	f7f4 ff05 	bl	80008ec <__aeabi_dadd>
 800bae2:	9002      	str	r0, [sp, #8]
 800bae4:	9103      	str	r1, [sp, #12]
 800bae6:	9802      	ldr	r0, [sp, #8]
 800bae8:	9903      	ldr	r1, [sp, #12]
 800baea:	003b      	movs	r3, r7
 800baec:	0032      	movs	r2, r6
 800baee:	f7f6 f96d 	bl	8001dcc <__aeabi_dsub>
 800baf2:	004b      	lsls	r3, r1, #1
 800baf4:	07e4      	lsls	r4, r4, #31
 800baf6:	085b      	lsrs	r3, r3, #1
 800baf8:	431c      	orrs	r4, r3
 800bafa:	0021      	movs	r1, r4
 800bafc:	b005      	add	sp, #20
 800bafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb00:	4f24      	ldr	r7, [pc, #144]	@ (800bb94 <rint+0x108>)
 800bb02:	000a      	movs	r2, r1
 800bb04:	4137      	asrs	r7, r6
 800bb06:	403a      	ands	r2, r7
 800bb08:	4302      	orrs	r2, r0
 800bb0a:	d0f7      	beq.n	800bafc <rint+0x70>
 800bb0c:	087f      	lsrs	r7, r7, #1
 800bb0e:	4039      	ands	r1, r7
 800bb10:	430b      	orrs	r3, r1
 800bb12:	d00a      	beq.n	800bb2a <rint+0x9e>
 800bb14:	4b20      	ldr	r3, [pc, #128]	@ (800bb98 <rint+0x10c>)
 800bb16:	9a01      	ldr	r2, [sp, #4]
 800bb18:	43bd      	bics	r5, r7
 800bb1a:	18d2      	adds	r2, r2, r3
 800bb1c:	4253      	negs	r3, r2
 800bb1e:	415a      	adcs	r2, r3
 800bb20:	07d3      	lsls	r3, r2, #31
 800bb22:	2280      	movs	r2, #128	@ 0x80
 800bb24:	02d2      	lsls	r2, r2, #11
 800bb26:	4132      	asrs	r2, r6
 800bb28:	4315      	orrs	r5, r2
 800bb2a:	4919      	ldr	r1, [pc, #100]	@ (800bb90 <rint+0x104>)
 800bb2c:	00e4      	lsls	r4, r4, #3
 800bb2e:	1909      	adds	r1, r1, r4
 800bb30:	001a      	movs	r2, r3
 800bb32:	002b      	movs	r3, r5
 800bb34:	680c      	ldr	r4, [r1, #0]
 800bb36:	684d      	ldr	r5, [r1, #4]
 800bb38:	0020      	movs	r0, r4
 800bb3a:	0029      	movs	r1, r5
 800bb3c:	f7f4 fed6 	bl	80008ec <__aeabi_dadd>
 800bb40:	9002      	str	r0, [sp, #8]
 800bb42:	9103      	str	r1, [sp, #12]
 800bb44:	9802      	ldr	r0, [sp, #8]
 800bb46:	9903      	ldr	r1, [sp, #12]
 800bb48:	0022      	movs	r2, r4
 800bb4a:	002b      	movs	r3, r5
 800bb4c:	f7f6 f93e 	bl	8001dcc <__aeabi_dsub>
 800bb50:	e7d4      	b.n	800bafc <rint+0x70>
 800bb52:	2e33      	cmp	r6, #51	@ 0x33
 800bb54:	dd08      	ble.n	800bb68 <rint+0xdc>
 800bb56:	2380      	movs	r3, #128	@ 0x80
 800bb58:	00db      	lsls	r3, r3, #3
 800bb5a:	429e      	cmp	r6, r3
 800bb5c:	d1ce      	bne.n	800bafc <rint+0x70>
 800bb5e:	0002      	movs	r2, r0
 800bb60:	000b      	movs	r3, r1
 800bb62:	f7f4 fec3 	bl	80008ec <__aeabi_dadd>
 800bb66:	e7c9      	b.n	800bafc <rint+0x70>
 800bb68:	9e01      	ldr	r6, [sp, #4]
 800bb6a:	4a0c      	ldr	r2, [pc, #48]	@ (800bb9c <rint+0x110>)
 800bb6c:	18b2      	adds	r2, r6, r2
 800bb6e:	2601      	movs	r6, #1
 800bb70:	4276      	negs	r6, r6
 800bb72:	40d6      	lsrs	r6, r2
 800bb74:	4206      	tst	r6, r0
 800bb76:	d0c1      	beq.n	800bafc <rint+0x70>
 800bb78:	0876      	lsrs	r6, r6, #1
 800bb7a:	4206      	tst	r6, r0
 800bb7c:	d0d5      	beq.n	800bb2a <rint+0x9e>
 800bb7e:	2180      	movs	r1, #128	@ 0x80
 800bb80:	05c9      	lsls	r1, r1, #23
 800bb82:	4111      	asrs	r1, r2
 800bb84:	43b3      	bics	r3, r6
 800bb86:	430b      	orrs	r3, r1
 800bb88:	e7cf      	b.n	800bb2a <rint+0x9e>
 800bb8a:	46c0      	nop			@ (mov r8, r8)
 800bb8c:	fffffc01 	.word	0xfffffc01
 800bb90:	0800c048 	.word	0x0800c048
 800bb94:	000fffff 	.word	0x000fffff
 800bb98:	fffffbee 	.word	0xfffffbee
 800bb9c:	fffffbed 	.word	0xfffffbed

0800bba0 <_init>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	46c0      	nop			@ (mov r8, r8)
 800bba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bba6:	bc08      	pop	{r3}
 800bba8:	469e      	mov	lr, r3
 800bbaa:	4770      	bx	lr

0800bbac <_fini>:
 800bbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbae:	46c0      	nop			@ (mov r8, r8)
 800bbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbb2:	bc08      	pop	{r3}
 800bbb4:	469e      	mov	lr, r3
 800bbb6:	4770      	bx	lr
