
Demo_NFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  08011cf8  08011cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012450  08012450  0001418c  2**0
                  CONTENTS
  4 .ARM          00000008  08012450  08012450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012458  08012458  0001418c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012458  08012458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801245c  0801245c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08012460  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001128  2000018c  080125ec  0001418c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012b4  080125ec  000142b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001418c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e650  00000000  00000000  000141bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ff3  00000000  00000000  0003280c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  00037800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e8  00000000  00000000  00038f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ea0  00000000  00000000  0003a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024763  00000000  00000000  00064010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dffb0  00000000  00000000  00088773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168723  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006440  00000000  00000000  00168768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0016eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011ce0 	.word	0x08011ce0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	08011ce0 	.word	0x08011ce0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <hex2Str>:
static void demoNotif(rfalNfcState st);
ReturnCode demoTransceiveBlocking(uint8_t *txBuf, uint16_t txBufSize,
		uint8_t **rxBuf, uint16_t **rcvLen, uint32_t fwt);


char* hex2Str(unsigned char *data, size_t dataLen) {
 8000570:	b480      	push	{r7}
 8000572:	b089      	sub	sp, #36	@ 0x24
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	unsigned char *pin = data;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	61fb      	str	r3, [r7, #28]
	const char *hex = "0123456789ABCDEF";
 800057e:	4b37      	ldr	r3, [pc, #220]	@ (800065c <hex2Str+0xec>)
 8000580:	613b      	str	r3, [r7, #16]
	char *pout = hexStr[hexStrIdx];
 8000582:	4b37      	ldr	r3, [pc, #220]	@ (8000660 <hex2Str+0xf0>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	01db      	lsls	r3, r3, #7
 8000588:	4a36      	ldr	r2, [pc, #216]	@ (8000664 <hex2Str+0xf4>)
 800058a:	4413      	add	r3, r2
 800058c:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	75fb      	strb	r3, [r7, #23]
	uint8_t idx = hexStrIdx;
 8000592:	4b33      	ldr	r3, [pc, #204]	@ (8000660 <hex2Str+0xf0>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	73fb      	strb	r3, [r7, #15]
	size_t len;

	if (dataLen == 0) {
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <hex2Str+0x36>
		pout[0] = 0;
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
 80005a4:	e042      	b.n	800062c <hex2Str+0xbc>
	}
	else {
		/* Trim data that doesn't fit in buffer */
		len = MIN(dataLen, (MAX_HEX_STR_LENGTH / 2));
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b40      	cmp	r3, #64	@ 0x40
 80005aa:	bf28      	it	cs
 80005ac:	2340      	movcs	r3, #64	@ 0x40
 80005ae:	60bb      	str	r3, [r7, #8]

		for (; i < (len - 1); ++i) {
 80005b0:	e01c      	b.n	80005ec <hex2Str+0x7c>
			*pout++ = hex[(*pin >> 4) & 0xF];
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	091b      	lsrs	r3, r3, #4
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	f003 030f 	and.w	r3, r3, #15
 80005be:	693a      	ldr	r2, [r7, #16]
 80005c0:	441a      	add	r2, r3
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	1c59      	adds	r1, r3, #1
 80005c6:	61b9      	str	r1, [r7, #24]
 80005c8:	7812      	ldrb	r2, [r2, #0]
 80005ca:	701a      	strb	r2, [r3, #0]
			*pout++ = hex[(*pin++) & 0xF];
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	61fa      	str	r2, [r7, #28]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f003 030f 	and.w	r3, r3, #15
 80005d8:	693a      	ldr	r2, [r7, #16]
 80005da:	441a      	add	r2, r3
 80005dc:	69bb      	ldr	r3, [r7, #24]
 80005de:	1c59      	adds	r1, r3, #1
 80005e0:	61b9      	str	r1, [r7, #24]
 80005e2:	7812      	ldrb	r2, [r2, #0]
 80005e4:	701a      	strb	r2, [r3, #0]
		for (; i < (len - 1); ++i) {
 80005e6:	7dfb      	ldrb	r3, [r7, #23]
 80005e8:	3301      	adds	r3, #1
 80005ea:	75fb      	strb	r3, [r7, #23]
 80005ec:	7dfa      	ldrb	r2, [r7, #23]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d3dd      	bcc.n	80005b2 <hex2Str+0x42>
		}
		*pout++ = hex[(*pin >> 4) & 0xF];
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	091b      	lsrs	r3, r3, #4
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f003 030f 	and.w	r3, r3, #15
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	441a      	add	r2, r3
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	1c59      	adds	r1, r3, #1
 800060a:	61b9      	str	r1, [r7, #24]
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	701a      	strb	r2, [r3, #0]
		*pout++ = hex[(*pin) & 0xF];
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f003 030f 	and.w	r3, r3, #15
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	441a      	add	r2, r3
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	1c59      	adds	r1, r3, #1
 8000620:	61b9      	str	r1, [r7, #24]
 8000622:	7812      	ldrb	r2, [r2, #0]
 8000624:	701a      	strb	r2, [r3, #0]
		*pout = 0;
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
	}

	hexStrIdx++;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <hex2Str+0xf0>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <hex2Str+0xf0>)
 8000636:	701a      	strb	r2, [r3, #0]
	hexStrIdx %= MAX_HEX_STR;
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <hex2Str+0xf0>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	f003 0303 	and.w	r3, r3, #3
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <hex2Str+0xf0>)
 8000644:	701a      	strb	r2, [r3, #0]

	return hexStr[idx];
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	01db      	lsls	r3, r3, #7
 800064a:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <hex2Str+0xf4>)
 800064c:	4413      	add	r3, r2
}
 800064e:	4618      	mov	r0, r3
 8000650:	3724      	adds	r7, #36	@ 0x24
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	08011cfc 	.word	0x08011cfc
 8000660:	20000434 	.word	0x20000434
 8000664:	20000234 	.word	0x20000234

08000668 <demoNotif>:
 * \brief Demo Notification
 *
 *  This function receives the event notifications from RFAL
 *****************************************************************************
 */
static void demoNotif(rfalNfcState st) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	uint8_t devCnt;
	rfalNfcDevice *dev;

	if (st == RFAL_NFC_STATE_WAKEUP_MODE) {
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b03      	cmp	r3, #3
 8000676:	d017      	beq.n	80006a8 <demoNotif+0x40>
//		LOG_INFO(TAG, "NFC card detecting");
	}
	else if (st == RFAL_NFC_STATE_POLL_TECHDETECT) {
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b0a      	cmp	r3, #10
 800067c:	d014      	beq.n	80006a8 <demoNotif+0x40>
//		LOG_EVENT(TAG, "Detected.");
	}
	else if (st == RFAL_NFC_STATE_POLL_SELECT) {
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b0c      	cmp	r3, #12
 8000682:	d111      	bne.n	80006a8 <demoNotif+0x40>
		/* Multiple devices were found, activate first of them */
		rfalNfcGetDevicesFound(&dev, &devCnt);
 8000684:	f107 020f 	add.w	r2, r7, #15
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f008 f818 	bl	80086c4 <rfalNfcGetDevicesFound>
		rfalNfcSelect(0);
 8000694:	2000      	movs	r0, #0
 8000696:	f007 ffef 	bl	8008678 <rfalNfcSelect>

		LOG_EVENT(TAG, "Multiple Tags detected: %d \r\n", devCnt);
 800069a:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <demoNotif+0x48>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	7bfa      	ldrb	r2, [r7, #15]
 80006a0:	4904      	ldr	r1, [pc, #16]	@ (80006b4 <demoNotif+0x4c>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 ffcc 	bl	8004640 <LOG_EVENT>
	}
}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000080 	.word	0x20000080
 80006b4:	08011d10 	.word	0x08011d10

080006b8 <demoIni>:
 *
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni(void) {
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	ReturnCode err;

	err = rfalNfcInitialize();
 80006be:	f007 ff11 	bl	80084e4 <rfalNfcInitialize>
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
	if (err == ERR_NONE) {
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d140      	bne.n	800074e <demoIni+0x96>
		discParam.compMode = RFAL_COMPLIANCE_MODE_NFC;
 80006cc:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <demoIni+0xa0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
		discParam.devLimit = 1U;
 80006d2:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <demoIni+0xa0>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	719a      	strb	r2, [r3, #6]
		discParam.nfcfBR = RFAL_BR_212;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <demoIni+0xa0>)
 80006da:	2201      	movs	r2, #1
 80006dc:	71da      	strb	r2, [r3, #7]
		discParam.ap2pBR = RFAL_BR_424;
 80006de:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <demoIni+0xa0>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

		ST_MEMCPY(&discParam.nfcid3, NFCID3, sizeof(NFCID3));
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <demoIni+0xa0>)
 80006e8:	4a1c      	ldr	r2, [pc, #112]	@ (800075c <demoIni+0xa4>)
 80006ea:	3308      	adds	r3, #8
 80006ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ee:	c303      	stmia	r3!, {r0, r1}
 80006f0:	801a      	strh	r2, [r3, #0]
		ST_MEMCPY(&discParam.GB, GB, sizeof(GB));
 80006f2:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <demoIni+0xa0>)
 80006f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000760 <demoIni+0xa8>)
 80006f6:	f103 0512 	add.w	r5, r3, #18
 80006fa:	4614      	mov	r4, r2
 80006fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fe:	6028      	str	r0, [r5, #0]
 8000700:	6069      	str	r1, [r5, #4]
 8000702:	60aa      	str	r2, [r5, #8]
 8000704:	60eb      	str	r3, [r5, #12]
 8000706:	6820      	ldr	r0, [r4, #0]
 8000708:	6128      	str	r0, [r5, #16]
		discParam.GBLen = sizeof(GB);
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <demoIni+0xa0>)
 800070c:	2214      	movs	r2, #20
 800070e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

		discParam.notifyCb = demoNotif;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <demoIni+0xa0>)
 8000714:	4a13      	ldr	r2, [pc, #76]	@ (8000764 <demoIni+0xac>)
 8000716:	669a      	str	r2, [r3, #104]	@ 0x68
		discParam.totalDuration = 1000U;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <demoIni+0xa0>)
 800071a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800071e:	809a      	strh	r2, [r3, #4]
		discParam.wakeupEnabled = true;
 8000720:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <demoIni+0xa0>)
 8000722:	2201      	movs	r2, #1
 8000724:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		discParam.wakeupConfigDefault = true;
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <demoIni+0xa0>)
 800072a:	2201      	movs	r2, #1
 800072c:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
		discParam.techs2Find = ( RFAL_NFC_POLL_TECH_A | RFAL_NFC_POLL_TECH_B
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <demoIni+0xa0>)
 8000732:	222f      	movs	r2, #47	@ 0x2f
 8000734:	805a      	strh	r2, [r3, #2]
				| RFAL_NFC_POLL_TECH_F | RFAL_NFC_POLL_TECH_V
				| RFAL_NFC_POLL_TECH_ST25TB);
        discParam.techs2Find   |= RFAL_NFC_POLL_TECH_AP2P;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <demoIni+0xa0>)
 8000738:	885b      	ldrh	r3, [r3, #2]
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <demoIni+0xa0>)
 8000742:	805a      	strh	r2, [r3, #2]

		state = DEMO_ST_START_DISCOVERY;
 8000744:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <demoIni+0xb0>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
		return true;
 800074a:	2301      	movs	r3, #1
 800074c:	e000      	b.n	8000750 <demoIni+0x98>
	}
	return false;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bdb0      	pop	{r4, r5, r7, pc}
 8000758:	200001ac 	.word	0x200001ac
 800075c:	20000000 	.word	0x20000000
 8000760:	2000000c 	.word	0x2000000c
 8000764:	08000669 	.word	0x08000669
 8000768:	20000230 	.word	0x20000230

0800076c <demoCycle>:
 *
 *  This function executes the demo state machine. 
 *  It must be called periodically
 *****************************************************************************
 */
int demoCycle(void) {
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b087      	sub	sp, #28
 8000770:	af00      	add	r7, sp, #0
	int x = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
	static rfalNfcDevice *nfcDevice;

	rfalNfcWorker(); /* Run RFAL worker periodically */
 8000776:	f007 fff3 	bl	8008760 <rfalNfcWorker>

	/*******************************************************************************/
	/* Check if USER button is pressed */
	if (platformGpioIsLow(PLATFORM_USER_BUTTON_PORT,
 800077a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800077e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000782:	f001 fa63 	bl	8001c4c <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d02a      	beq.n	80007e2 <demoCycle+0x76>
			PLATFORM_USER_BUTTON_PIN)) {
		discParam.wakeupEnabled = !discParam.wakeupEnabled; /* enable/disable wakeup */
 800078c:	4bab      	ldr	r3, [pc, #684]	@ (8000a3c <demoCycle+0x2d0>)
 800078e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f083 0301 	eor.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4ba4      	ldr	r3, [pc, #656]	@ (8000a3c <demoCycle+0x2d0>)
 80007aa:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		state = DEMO_ST_START_DISCOVERY; /* restart loop          */
 80007ae:	4ba4      	ldr	r3, [pc, #656]	@ (8000a40 <demoCycle+0x2d4>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
		platformLog("Toggling Wake Up mode %s\r\n",
 80007b4:	4ba1      	ldr	r3, [pc, #644]	@ (8000a3c <demoCycle+0x2d0>)
 80007b6:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <demoCycle+0x56>
 80007be:	4ba1      	ldr	r3, [pc, #644]	@ (8000a44 <demoCycle+0x2d8>)
 80007c0:	e000      	b.n	80007c4 <demoCycle+0x58>
 80007c2:	4ba1      	ldr	r3, [pc, #644]	@ (8000a48 <demoCycle+0x2dc>)
 80007c4:	461a      	mov	r2, r3
 80007c6:	49a1      	ldr	r1, [pc, #644]	@ (8000a4c <demoCycle+0x2e0>)
 80007c8:	48a1      	ldr	r0, [pc, #644]	@ (8000a50 <demoCycle+0x2e4>)
 80007ca:	f003 feed 	bl	80045a8 <LOG_DEBUG>
				discParam.wakeupEnabled ? "ON" : "OFF");

		/* Debounce button */
		while (platformGpioIsLow(PLATFORM_USER_BUTTON_PORT,
 80007ce:	bf00      	nop
 80007d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d8:	f001 fa38 	bl	8001c4c <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d1f6      	bne.n	80007d0 <demoCycle+0x64>
				PLATFORM_USER_BUTTON_PIN));
	}

	switch (state) {
 80007e2:	4b97      	ldr	r3, [pc, #604]	@ (8000a40 <demoCycle+0x2d4>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d002      	beq.n	80007f0 <demoCycle+0x84>
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d00a      	beq.n	8000804 <demoCycle+0x98>
		break;

			/*******************************************************************************/
		case DEMO_ST_NOTINIT:
		default:
		break;
 80007ee:	e18e      	b.n	8000b0e <demoCycle+0x3a2>
			rfalNfcDeactivate( false);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f007 ff1f 	bl	8008634 <rfalNfcDeactivate>
			rfalNfcDiscover(&discParam);
 80007f6:	4891      	ldr	r0, [pc, #580]	@ (8000a3c <demoCycle+0x2d0>)
 80007f8:	f007 fe90 	bl	800851c <rfalNfcDiscover>
			state = DEMO_ST_DISCOVERY;
 80007fc:	4b90      	ldr	r3, [pc, #576]	@ (8000a40 <demoCycle+0x2d4>)
 80007fe:	2202      	movs	r2, #2
 8000800:	701a      	strb	r2, [r3, #0]
		break;
 8000802:	e184      	b.n	8000b0e <demoCycle+0x3a2>
			if (rfalNfcIsDevActivated(rfalNfcGetState())) {
 8000804:	f007 ff52 	bl	80086ac <rfalNfcGetState>
 8000808:	4603      	mov	r3, r0
 800080a:	2b1d      	cmp	r3, #29
 800080c:	f240 817e 	bls.w	8000b0c <demoCycle+0x3a0>
 8000810:	f007 ff4c 	bl	80086ac <rfalNfcGetState>
 8000814:	4603      	mov	r3, r0
 8000816:	2b21      	cmp	r3, #33	@ 0x21
 8000818:	f200 8178 	bhi.w	8000b0c <demoCycle+0x3a0>
				rfalNfcGetActiveDevice(&nfcDevice);
 800081c:	488d      	ldr	r0, [pc, #564]	@ (8000a54 <demoCycle+0x2e8>)
 800081e:	f007 ff77 	bl	8008710 <rfalNfcGetActiveDevice>
				switch (nfcDevice->type) {
 8000822:	4b8c      	ldr	r3, [pc, #560]	@ (8000a54 <demoCycle+0x2e8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b0c      	cmp	r3, #12
 800082a:	f200 8163 	bhi.w	8000af4 <demoCycle+0x388>
 800082e:	a201      	add	r2, pc, #4	@ (adr r2, 8000834 <demoCycle+0xc8>)
 8000830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000834:	08000869 	.word	0x08000869
 8000838:	08000937 	.word	0x08000937
 800083c:	0800095d 	.word	0x0800095d
 8000840:	080009cd 	.word	0x080009cd
 8000844:	08000a7d 	.word	0x08000a7d
 8000848:	08000aa3 	.word	0x08000aa3
 800084c:	08000af5 	.word	0x08000af5
 8000850:	08000af5 	.word	0x08000af5
 8000854:	08000af5 	.word	0x08000af5
 8000858:	08000af5 	.word	0x08000af5
 800085c:	08000acd 	.word	0x08000acd
 8000860:	08000af5 	.word	0x08000af5
 8000864:	08000acd 	.word	0x08000acd
						switch (nfcDevice->dev.nfca.type) {
 8000868:	4b7a      	ldr	r3, [pc, #488]	@ (8000a54 <demoCycle+0x2e8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b60      	cmp	r3, #96	@ 0x60
 8000870:	d032      	beq.n	80008d8 <demoCycle+0x16c>
 8000872:	2b60      	cmp	r3, #96	@ 0x60
 8000874:	dc45      	bgt.n	8000902 <demoCycle+0x196>
 8000876:	2b40      	cmp	r3, #64	@ 0x40
 8000878:	d02e      	beq.n	80008d8 <demoCycle+0x16c>
 800087a:	2b40      	cmp	r3, #64	@ 0x40
 800087c:	dc41      	bgt.n	8000902 <demoCycle+0x196>
 800087e:	2b01      	cmp	r3, #1
 8000880:	d002      	beq.n	8000888 <demoCycle+0x11c>
 8000882:	2b20      	cmp	r3, #32
 8000884:	d013      	beq.n	80008ae <demoCycle+0x142>
 8000886:	e03c      	b.n	8000902 <demoCycle+0x196>
								LOG_WARN(TAG, "ISO14443A/Topaz (NFC-A T1T) TAG found. UID: %s",
 8000888:	4b73      	ldr	r3, [pc, #460]	@ (8000a58 <demoCycle+0x2ec>)
 800088a:	681c      	ldr	r4, [r3, #0]
										hex2Str(nfcDevice->nfcid,
 800088c:	4b71      	ldr	r3, [pc, #452]	@ (8000a54 <demoCycle+0x2e8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	699a      	ldr	r2, [r3, #24]
												nfcDevice->nfcidLen));
 8000892:	4b70      	ldr	r3, [pc, #448]	@ (8000a54 <demoCycle+0x2e8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	7f1b      	ldrb	r3, [r3, #28]
								LOG_WARN(TAG, "ISO14443A/Topaz (NFC-A T1T) TAG found. UID: %s",
 8000898:	4619      	mov	r1, r3
 800089a:	4610      	mov	r0, r2
 800089c:	f7ff fe68 	bl	8000570 <hex2Str>
 80008a0:	4603      	mov	r3, r0
 80008a2:	461a      	mov	r2, r3
 80008a4:	496d      	ldr	r1, [pc, #436]	@ (8000a5c <demoCycle+0x2f0>)
 80008a6:	4620      	mov	r0, r4
 80008a8:	f003 fde6 	bl	8004478 <LOG_WARN>
							break;
 80008ac:	e042      	b.n	8000934 <demoCycle+0x1c8>
								LOG_WARN(TAG, "NFCA Passive ISO-DEP device found. UID: %s", hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 80008ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000a58 <demoCycle+0x2ec>)
 80008b0:	681c      	ldr	r4, [r3, #0]
 80008b2:	4b68      	ldr	r3, [pc, #416]	@ (8000a54 <demoCycle+0x2e8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	699a      	ldr	r2, [r3, #24]
 80008b8:	4b66      	ldr	r3, [pc, #408]	@ (8000a54 <demoCycle+0x2e8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	7f1b      	ldrb	r3, [r3, #28]
 80008be:	4619      	mov	r1, r3
 80008c0:	4610      	mov	r0, r2
 80008c2:	f7ff fe55 	bl	8000570 <hex2Str>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4965      	ldr	r1, [pc, #404]	@ (8000a60 <demoCycle+0x2f4>)
 80008cc:	4620      	mov	r0, r4
 80008ce:	f003 fdd3 	bl	8004478 <LOG_WARN>
								demoAPDU();
 80008d2:	f000 fa43 	bl	8000d5c <demoAPDU>
							break;
 80008d6:	e02d      	b.n	8000934 <demoCycle+0x1c8>
								LOG_WARN(TAG,
 80008d8:	4b5f      	ldr	r3, [pc, #380]	@ (8000a58 <demoCycle+0x2ec>)
 80008da:	681c      	ldr	r4, [r3, #0]
										hex2Str(nfcDevice->nfcid,
 80008dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000a54 <demoCycle+0x2e8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	699a      	ldr	r2, [r3, #24]
												nfcDevice->nfcidLen));
 80008e2:	4b5c      	ldr	r3, [pc, #368]	@ (8000a54 <demoCycle+0x2e8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	7f1b      	ldrb	r3, [r3, #28]
								LOG_WARN(TAG,
 80008e8:	4619      	mov	r1, r3
 80008ea:	4610      	mov	r0, r2
 80008ec:	f7ff fe40 	bl	8000570 <hex2Str>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	495b      	ldr	r1, [pc, #364]	@ (8000a64 <demoCycle+0x2f8>)
 80008f6:	4620      	mov	r0, r4
 80008f8:	f003 fdbe 	bl	8004478 <LOG_WARN>
								demoP2P();
 80008fc:	f000 f9ba 	bl	8000c74 <demoP2P>
							break;
 8000900:	e018      	b.n	8000934 <demoCycle+0x1c8>
								LOG_WARN(TAG,
 8000902:	4b55      	ldr	r3, [pc, #340]	@ (8000a58 <demoCycle+0x2ec>)
 8000904:	681c      	ldr	r4, [r3, #0]
										hex2Str(nfcDevice->nfcid,
 8000906:	4b53      	ldr	r3, [pc, #332]	@ (8000a54 <demoCycle+0x2e8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	699a      	ldr	r2, [r3, #24]
												nfcDevice->nfcidLen));
 800090c:	4b51      	ldr	r3, [pc, #324]	@ (8000a54 <demoCycle+0x2e8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	7f1b      	ldrb	r3, [r3, #28]
								LOG_WARN(TAG,
 8000912:	4619      	mov	r1, r3
 8000914:	4610      	mov	r0, r2
 8000916:	f7ff fe2b 	bl	8000570 <hex2Str>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	4952      	ldr	r1, [pc, #328]	@ (8000a68 <demoCycle+0x2fc>)
 8000920:	4620      	mov	r0, r4
 8000922:	f003 fda9 	bl	8004478 <LOG_WARN>
								demoNfca(&nfcDevice->dev.nfca);
 8000926:	4b4b      	ldr	r3, [pc, #300]	@ (8000a54 <demoCycle+0x2e8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f959 	bl	8000be4 <demoNfca>
							break;
 8000932:	bf00      	nop
					break;
 8000934:	e0df      	b.n	8000af6 <demoCycle+0x38a>
						LOG_WARN(TAG,"ISO14443B/NFC-B card found. UID: %s",
 8000936:	4b48      	ldr	r3, [pc, #288]	@ (8000a58 <demoCycle+0x2ec>)
 8000938:	681c      	ldr	r4, [r3, #0]
								hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 800093a:	4b46      	ldr	r3, [pc, #280]	@ (8000a54 <demoCycle+0x2e8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	699a      	ldr	r2, [r3, #24]
 8000940:	4b44      	ldr	r3, [pc, #272]	@ (8000a54 <demoCycle+0x2e8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	7f1b      	ldrb	r3, [r3, #28]
						LOG_WARN(TAG,"ISO14443B/NFC-B card found. UID: %s",
 8000946:	4619      	mov	r1, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f7ff fe11 	bl	8000570 <hex2Str>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4946      	ldr	r1, [pc, #280]	@ (8000a6c <demoCycle+0x300>)
 8000954:	4620      	mov	r0, r4
 8000956:	f003 fd8f 	bl	8004478 <LOG_WARN>
					break;
 800095a:	e0cc      	b.n	8000af6 <demoCycle+0x38a>
						if (rfalNfcfIsNfcDepSupported(&nfcDevice->dev.nfcf)) {
 800095c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a54 <demoCycle+0x2e8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	78db      	ldrb	r3, [r3, #3]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d119      	bne.n	800099a <demoCycle+0x22e>
 8000966:	4b3b      	ldr	r3, [pc, #236]	@ (8000a54 <demoCycle+0x2e8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	791b      	ldrb	r3, [r3, #4]
 800096c:	2bfe      	cmp	r3, #254	@ 0xfe
 800096e:	d114      	bne.n	800099a <demoCycle+0x22e>
							LOG_WARN(TAG,
 8000970:	4b39      	ldr	r3, [pc, #228]	@ (8000a58 <demoCycle+0x2ec>)
 8000972:	681c      	ldr	r4, [r3, #0]
									hex2Str(nfcDevice->nfcid,
 8000974:	4b37      	ldr	r3, [pc, #220]	@ (8000a54 <demoCycle+0x2e8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	699a      	ldr	r2, [r3, #24]
											nfcDevice->nfcidLen));
 800097a:	4b36      	ldr	r3, [pc, #216]	@ (8000a54 <demoCycle+0x2e8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	7f1b      	ldrb	r3, [r3, #28]
							LOG_WARN(TAG,
 8000980:	4619      	mov	r1, r3
 8000982:	4610      	mov	r0, r2
 8000984:	f7ff fdf4 	bl	8000570 <hex2Str>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	4938      	ldr	r1, [pc, #224]	@ (8000a70 <demoCycle+0x304>)
 800098e:	4620      	mov	r0, r4
 8000990:	f003 fd72 	bl	8004478 <LOG_WARN>
							demoP2P();
 8000994:	f000 f96e 	bl	8000c74 <demoP2P>
					break;
 8000998:	e0ad      	b.n	8000af6 <demoCycle+0x38a>
							LOG_WARN(TAG, "Felica/NFC-F card found. UID: %s",
 800099a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <demoCycle+0x2ec>)
 800099c:	681c      	ldr	r4, [r3, #0]
									hex2Str(nfcDevice->nfcid,
 800099e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a54 <demoCycle+0x2e8>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	699a      	ldr	r2, [r3, #24]
											nfcDevice->nfcidLen));
 80009a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a54 <demoCycle+0x2e8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	7f1b      	ldrb	r3, [r3, #28]
							LOG_WARN(TAG, "Felica/NFC-F card found. UID: %s",
 80009aa:	4619      	mov	r1, r3
 80009ac:	4610      	mov	r0, r2
 80009ae:	f7ff fddf 	bl	8000570 <hex2Str>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	492f      	ldr	r1, [pc, #188]	@ (8000a74 <demoCycle+0x308>)
 80009b8:	4620      	mov	r0, r4
 80009ba:	f003 fd5d 	bl	8004478 <LOG_WARN>
							demoNfcf(&nfcDevice->dev.nfcf);
 80009be:	4b25      	ldr	r3, [pc, #148]	@ (8000a54 <demoCycle+0x2e8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f8c1 	bl	8000b4c <demoNfcf>
					break;
 80009ca:	e094      	b.n	8000af6 <demoCycle+0x38a>
						ST_MEMCPY(devUID, nfcDevice->nfcid,
 80009cc:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <demoCycle+0x2e8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6999      	ldr	r1, [r3, #24]
								nfcDevice->nfcidLen); /* Copy the UID into local var */
 80009d2:	4b20      	ldr	r3, [pc, #128]	@ (8000a54 <demoCycle+0x2e8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	7f1b      	ldrb	r3, [r3, #28]
						ST_MEMCPY(devUID, nfcDevice->nfcid,
 80009d8:	461a      	mov	r2, r3
 80009da:	463b      	mov	r3, r7
 80009dc:	4618      	mov	r0, r3
 80009de:	f010 fe0b 	bl	80115f8 <memcpy>
						REVERSE_BYTES(devUID, RFAL_NFCV_UID_LEN); /* Reverse the UID for display purposes */
 80009e2:	463b      	mov	r3, r7
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	463b      	mov	r3, r7
 80009e8:	3307      	adds	r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e00d      	b.n	8000a0a <demoCycle+0x29e>
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	72fb      	strb	r3, [r7, #11]
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	613a      	str	r2, [r7, #16]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	7812      	ldrb	r2, [r2, #0]
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	60fa      	str	r2, [r7, #12]
 8000a06:	7afa      	ldrb	r2, [r7, #11]
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d3ed      	bcc.n	80009ee <demoCycle+0x282>
						LOG_WARN(TAG,"ISO15693/NFC-V card found. UID: %s",
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <demoCycle+0x2ec>)
 8000a14:	681c      	ldr	r4, [r3, #0]
 8000a16:	463b      	mov	r3, r7
 8000a18:	2108      	movs	r1, #8
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fda8 	bl	8000570 <hex2Str>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	4914      	ldr	r1, [pc, #80]	@ (8000a78 <demoCycle+0x30c>)
 8000a26:	4620      	mov	r0, r4
 8000a28:	f003 fd26 	bl	8004478 <LOG_WARN>
						demoNfcv(&nfcDevice->dev.nfcv);
 8000a2c:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <demoCycle+0x2e8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f8e0 	bl	8000bf8 <demoNfcv>
					break;
 8000a38:	e05d      	b.n	8000af6 <demoCycle+0x38a>
 8000a3a:	bf00      	nop
 8000a3c:	200001ac 	.word	0x200001ac
 8000a40:	20000230 	.word	0x20000230
 8000a44:	08011d30 	.word	0x08011d30
 8000a48:	08011d34 	.word	0x08011d34
 8000a4c:	08011d38 	.word	0x08011d38
 8000a50:	08011cf8 	.word	0x08011cf8
 8000a54:	20000438 	.word	0x20000438
 8000a58:	20000080 	.word	0x20000080
 8000a5c:	08011d54 	.word	0x08011d54
 8000a60:	08011d84 	.word	0x08011d84
 8000a64:	08011db0 	.word	0x08011db0
 8000a68:	08011ddc 	.word	0x08011ddc
 8000a6c:	08011e00 	.word	0x08011e00
 8000a70:	08011e24 	.word	0x08011e24
 8000a74:	08011e50 	.word	0x08011e50
 8000a78:	08011e74 	.word	0x08011e74
						LOG_WARN(TAG,"ST25TB card found. UID: %s",
 8000a7c:	4b26      	ldr	r3, [pc, #152]	@ (8000b18 <demoCycle+0x3ac>)
 8000a7e:	681c      	ldr	r4, [r3, #0]
								hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 8000a80:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <demoCycle+0x3b0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	699a      	ldr	r2, [r3, #24]
 8000a86:	4b25      	ldr	r3, [pc, #148]	@ (8000b1c <demoCycle+0x3b0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	7f1b      	ldrb	r3, [r3, #28]
						LOG_WARN(TAG,"ST25TB card found. UID: %s",
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4610      	mov	r0, r2
 8000a90:	f7ff fd6e 	bl	8000570 <hex2Str>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4921      	ldr	r1, [pc, #132]	@ (8000b20 <demoCycle+0x3b4>)
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f003 fcec 	bl	8004478 <LOG_WARN>
					break;
 8000aa0:	e029      	b.n	8000af6 <demoCycle+0x38a>
						LOG_WARN(TAG,
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <demoCycle+0x3ac>)
 8000aa4:	681c      	ldr	r4, [r3, #0]
								hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <demoCycle+0x3b0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	699a      	ldr	r2, [r3, #24]
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <demoCycle+0x3b0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	7f1b      	ldrb	r3, [r3, #28]
						LOG_WARN(TAG,
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4610      	mov	r0, r2
 8000ab6:	f7ff fd5b 	bl	8000570 <hex2Str>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	4919      	ldr	r1, [pc, #100]	@ (8000b24 <demoCycle+0x3b8>)
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f003 fcd9 	bl	8004478 <LOG_WARN>
						demoP2P();
 8000ac6:	f000 f8d5 	bl	8000c74 <demoP2P>
					break;
 8000aca:	e014      	b.n	8000af6 <demoCycle+0x38a>
						LOG_WARN(TAG,"Activated in CE %s mode.",
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <demoCycle+0x3ac>)
 8000ace:	6818      	ldr	r0, [r3, #0]
								(nfcDevice->type == RFAL_NFC_POLL_TYPE_NFCA) ?
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <demoCycle+0x3b0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
						LOG_WARN(TAG,"Activated in CE %s mode.",
 8000ad6:	2b0a      	cmp	r3, #10
 8000ad8:	d101      	bne.n	8000ade <demoCycle+0x372>
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <demoCycle+0x3bc>)
 8000adc:	e000      	b.n	8000ae0 <demoCycle+0x374>
 8000ade:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <demoCycle+0x3c0>)
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4913      	ldr	r1, [pc, #76]	@ (8000b30 <demoCycle+0x3c4>)
 8000ae4:	f003 fcc8 	bl	8004478 <LOG_WARN>
						demoCE(nfcDevice);
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <demoCycle+0x3b0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f823 	bl	8000b38 <demoCE>
					break;
 8000af2:	e000      	b.n	8000af6 <demoCycle+0x38a>
					break;
 8000af4:	bf00      	nop
				rfalNfcDeactivate( false);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f007 fd9c 	bl	8008634 <rfalNfcDeactivate>
				platformDelay(50);
 8000afc:	2032      	movs	r0, #50	@ 0x32
 8000afe:	f000 fdd5 	bl	80016ac <HAL_Delay>
				state = DEMO_ST_START_DISCOVERY;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <demoCycle+0x3c8>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
				x = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
		break;
 8000b0c:	bf00      	nop
	}

	return x;
 8000b0e:	697b      	ldr	r3, [r7, #20]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	371c      	adds	r7, #28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	20000080 	.word	0x20000080
 8000b1c:	20000438 	.word	0x20000438
 8000b20:	08011e98 	.word	0x08011e98
 8000b24:	08011eb4 	.word	0x08011eb4
 8000b28:	08011edc 	.word	0x08011edc
 8000b2c:	08011ee4 	.word	0x08011ee4
 8000b30:	08011eec 	.word	0x08011eec
 8000b34:	20000230 	.word	0x20000230

08000b38 <demoCE>:

static void demoCE( rfalNfcDevice *nfcDev )
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
        }
    }
    while( (err == ERR_NONE) || (err == ERR_SLEEP_REQ) );

#endif /* RFAL_FEATURE_LISTEN_MODE */
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <demoNfcf>:
 *
 * Example how to exchange read and write blocks on a NFC-F tag
 * 
 *****************************************************************************
 */
static void demoNfcf(rfalNfcfListenDevice *nfcfDev) {
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b09d      	sub	sp, #116	@ 0x74
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	6078      	str	r0, [r7, #4]
	ReturnCode err;
	uint8_t buf[(RFAL_NFCF_NFCID2_LEN + RFAL_NFCF_CMD_LEN
			+ (3 * RFAL_NFCF_BLOCK_LEN))];
	uint16_t rcvLen;
	rfalNfcfServ srv = RFAL_NFCF_SERVICECODE_RDWR;
 8000b54:	2309      	movs	r3, #9
 8000b56:	853b      	strh	r3, [r7, #40]	@ 0x28
	rfalNfcfBlockListElem bl[3];
	rfalNfcfServBlockListParam servBlock;
	//uint8_t                    wrData[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF };

	servBlock.numServ = 1; /* Only one Service to be used           */
 8000b58:	2301      	movs	r3, #1
 8000b5a:	733b      	strb	r3, [r7, #12]
	servBlock.servList = &srv; /* Service Code: NDEF is Read/Writeable  */
 8000b5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b60:	613b      	str	r3, [r7, #16]
	servBlock.numBlock = 1; /* Only one block to be used             */
 8000b62:	2301      	movs	r3, #1
 8000b64:	753b      	strb	r3, [r7, #20]
	servBlock.blockList = bl;
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	61bb      	str	r3, [r7, #24]
	bl[0].conf = RFAL_NFCF_BLOCKLISTELEM_LEN; /* Two-byte Block List Element           */
 8000b6c:	2380      	movs	r3, #128	@ 0x80
 8000b6e:	773b      	strb	r3, [r7, #28]
	bl[0].blockNum = 0x0001; /* Block: NDEF Data                      */
 8000b70:	2301      	movs	r3, #1
 8000b72:	83fb      	strh	r3, [r7, #30]

	err = rfalNfcfPollerCheck(nfcfDev->sensfRes.NFCID2, &servBlock, buf,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	1c98      	adds	r0, r3, #2
 8000b78:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000b7c:	f107 010c 	add.w	r1, r7, #12
 8000b80:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2339      	movs	r3, #57	@ 0x39
 8000b88:	f00c fdc2 	bl	800d710 <rfalNfcfPollerCheck>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
			sizeof(buf), &rcvLen);
	platformLog(" Check Block: %s Data:  %s \r\n",
 8000b92:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <demoNfcf+0x52>
 8000b9a:	4c0d      	ldr	r4, [pc, #52]	@ (8000bd0 <demoNfcf+0x84>)
 8000b9c:	e000      	b.n	8000ba0 <demoNfcf+0x54>
 8000b9e:	4c0d      	ldr	r4, [pc, #52]	@ (8000bd4 <demoNfcf+0x88>)
 8000ba0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d108      	bne.n	8000bba <demoNfcf+0x6e>
 8000ba8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bac:	3301      	adds	r3, #1
 8000bae:	2110      	movs	r1, #16
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fcdd 	bl	8000570 <hex2Str>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e000      	b.n	8000bbc <demoNfcf+0x70>
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <demoNfcf+0x8c>)
 8000bbc:	4622      	mov	r2, r4
 8000bbe:	4907      	ldr	r1, [pc, #28]	@ (8000bdc <demoNfcf+0x90>)
 8000bc0:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <demoNfcf+0x94>)
 8000bc2:	f003 fcf1 	bl	80045a8 <LOG_DEBUG>
        err = rfalNfcfPollerUpdate( nfcfDev->sensfRes.NFCID2, &servBlock, buf , sizeof(buf), wrData, buf, sizeof(buf) );
        platformLog(" Update Block: %s Data: %s \r\n", (err != ERR_NONE) ? "FAIL": "OK", (err != ERR_NONE) ? "" : hex2Str( wrData, RFAL_NFCF_BLOCK_LEN) );
        err = rfalNfcfPollerCheck( nfcfDev->sensfRes.NFCID2, &servBlock, buf, sizeof(buf), &rcvLen);
        platformLog(" Check Block:  %s Data: %s \r\n", (err != ERR_NONE) ? "FAIL": "OK", (err != ERR_NONE) ? "" : hex2Str( &buf[1], RFAL_NFCF_BLOCK_LEN) );
    #endif
}
 8000bc6:	bf00      	nop
 8000bc8:	376c      	adds	r7, #108	@ 0x6c
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	08011f08 	.word	0x08011f08
 8000bd4:	08011f10 	.word	0x08011f10
 8000bd8:	08011f14 	.word	0x08011f14
 8000bdc:	08011f18 	.word	0x08011f18
 8000be0:	08011cf8 	.word	0x08011cf8

08000be4 <demoNfca>:

static void demoNfca(rfalNfcaListenDevice *nfcaDev) {
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
//
//	err = rfalNfcaPollerSelect(nfcaDev->nfcId1, nfcaDev->nfcId1Len, &nfcaDev->selRes);
//	if(err != ERR_NONE) LOG_ERROR(TAG, "Error NFC-A card poller select");
//	err = rfalNfcaPollerTechnologyDetection(RFAL_COMPLIANCE_MODE_NFC, &nfcaDev->sensRes);
//	if(err != ERR_NONE) LOG_ERROR(TAG, "Error NFC-A technology detection");
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <demoNfcv>:
 *
 * Example how to exchange read and write blocks on a NFC-V tag
 * 
 *****************************************************************************
 */
static void demoNfcv(rfalNfcvListenDevice *nfcvDev) {
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b08b      	sub	sp, #44	@ 0x2c
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	6078      	str	r0, [r7, #4]
	ReturnCode err;
	uint16_t rcvLen;
	uint8_t blockNum = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	77fb      	strb	r3, [r7, #31]
	uint8_t *uid;
#if DEMO_NFCV_WRITE_TAG
    uint8_t               wrData[DEMO_NFCV_BLOCK_LEN] = { 0x11, 0x22, 0x33, 0x99 };             /* Write block example */
#endif

	uid = nfcvDev->InvRes.UID;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3302      	adds	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]

	/*
	 * Read block using Read Single Block command
	 * with addressed mode (uid != NULL) or selected mode (uid == NULL)
	 */
	err = rfalNfcvPollerReadSingleBlock(RFAL_NFCV_REQ_FLAG_DEFAULT, uid,
 8000c0a:	f107 010c 	add.w	r1, r7, #12
 8000c0e:	7ffa      	ldrb	r2, [r7, #31]
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	2307      	movs	r3, #7
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	69b9      	ldr	r1, [r7, #24]
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f00d f936 	bl	800de90 <rfalNfcvPollerReadSingleBlock>
 8000c24:	4603      	mov	r3, r0
 8000c26:	82fb      	strh	r3, [r7, #22]
			blockNum, rxBuf, sizeof(rxBuf), &rcvLen);
	platformLog(" Read Block: %s %s\r\n",
 8000c28:	8afb      	ldrh	r3, [r7, #22]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <demoNfcv+0x3a>
 8000c2e:	4c0c      	ldr	r4, [pc, #48]	@ (8000c60 <demoNfcv+0x68>)
 8000c30:	e000      	b.n	8000c34 <demoNfcv+0x3c>
 8000c32:	4c0c      	ldr	r4, [pc, #48]	@ (8000c64 <demoNfcv+0x6c>)
 8000c34:	8afb      	ldrh	r3, [r7, #22]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d108      	bne.n	8000c4c <demoNfcv+0x54>
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	3301      	adds	r3, #1
 8000c40:	2104      	movs	r1, #4
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fc94 	bl	8000570 <hex2Str>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	e000      	b.n	8000c4e <demoNfcv+0x56>
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <demoNfcv+0x70>)
 8000c4e:	4622      	mov	r2, r4
 8000c50:	4906      	ldr	r1, [pc, #24]	@ (8000c6c <demoNfcv+0x74>)
 8000c52:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <demoNfcv+0x78>)
 8000c54:	f003 fca8 	bl	80045a8 <LOG_DEBUG>
        err = rfalNfcvPollerWriteSingleBlock(RFAL_NFCV_REQ_FLAG_DEFAULT, uid, blockNum, wrData, sizeof(wrData));
        platformLog(" Write Block: %s Data: %s\r\n", (err != ERR_NONE) ? "FAIL": "OK", hex2Str( wrData, DEMO_NFCV_BLOCK_LEN) );
        err = rfalNfcvPollerReadSingleBlock(RFAL_NFCV_REQ_FLAG_DEFAULT, uid, blockNum, rxBuf, sizeof(rxBuf), &rcvLen);
        platformLog(" Read Block: %s %s\r\n", (err != ERR_NONE) ? "FAIL": "OK Data:", (err != ERR_NONE) ? "" : hex2Str( &rxBuf[1], DEMO_NFCV_BLOCK_LEN));
    #endif
}
 8000c58:	bf00      	nop
 8000c5a:	3724      	adds	r7, #36	@ 0x24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	08011f08 	.word	0x08011f08
 8000c64:	08011f38 	.word	0x08011f38
 8000c68:	08011f14 	.word	0x08011f14
 8000c6c:	08011f44 	.word	0x08011f44
 8000c70:	08011cf8 	.word	0x08011cf8

08000c74 <demoP2P>:
 * LLCP SYMM packets to maintain the connection.
 * 
 * 
 *****************************************************************************
 */
void demoP2P(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
	uint16_t *rxLen;
	uint8_t *rxData;
	ReturnCode err;

	platformLog(" Initalize device .. ");
 8000c7a:	492d      	ldr	r1, [pc, #180]	@ (8000d30 <demoP2P+0xbc>)
 8000c7c:	482d      	ldr	r0, [pc, #180]	@ (8000d34 <demoP2P+0xc0>)
 8000c7e:	f003 fc93 	bl	80045a8 <LOG_DEBUG>
	err = demoTransceiveBlocking(ndefInit, sizeof(ndefInit), &rxData, &rxLen,
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	1d3a      	adds	r2, r7, #4
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c8c:	9100      	str	r1, [sp, #0]
 8000c8e:	211a      	movs	r1, #26
 8000c90:	4829      	ldr	r0, [pc, #164]	@ (8000d38 <demoP2P+0xc4>)
 8000c92:	f000 f8e5 	bl	8000e60 <demoTransceiveBlocking>
 8000c96:	4603      	mov	r3, r0
 8000c98:	81fb      	strh	r3, [r7, #14]
			RFAL_FWT_NONE);
	if (err != ERR_NONE) {
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d004      	beq.n	8000caa <demoP2P+0x36>
		platformLog("failed.");
 8000ca0:	4926      	ldr	r1, [pc, #152]	@ (8000d3c <demoP2P+0xc8>)
 8000ca2:	4824      	ldr	r0, [pc, #144]	@ (8000d34 <demoP2P+0xc0>)
 8000ca4:	f003 fc80 	bl	80045a8 <LOG_DEBUG>
		return;
 8000ca8:	e03e      	b.n	8000d28 <demoP2P+0xb4>
	}
	platformLog("succeeded.\r\n");
 8000caa:	4925      	ldr	r1, [pc, #148]	@ (8000d40 <demoP2P+0xcc>)
 8000cac:	4821      	ldr	r0, [pc, #132]	@ (8000d34 <demoP2P+0xc0>)
 8000cae:	f003 fc7b 	bl	80045a8 <LOG_DEBUG>

	platformLog(" Push NDEF Uri: www.ST.com .. ");
 8000cb2:	4924      	ldr	r1, [pc, #144]	@ (8000d44 <demoP2P+0xd0>)
 8000cb4:	481f      	ldr	r0, [pc, #124]	@ (8000d34 <demoP2P+0xc0>)
 8000cb6:	f003 fc77 	bl	80045a8 <LOG_DEBUG>
	err = demoTransceiveBlocking(ndefUriSTcom, sizeof(ndefUriSTcom), &rxData,
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	1d3a      	adds	r2, r7, #4
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cc4:	9100      	str	r1, [sp, #0]
 8000cc6:	2122      	movs	r1, #34	@ 0x22
 8000cc8:	481f      	ldr	r0, [pc, #124]	@ (8000d48 <demoP2P+0xd4>)
 8000cca:	f000 f8c9 	bl	8000e60 <demoTransceiveBlocking>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	81fb      	strh	r3, [r7, #14]
			&rxLen, RFAL_FWT_NONE);
	if (err != ERR_NONE) {
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d004      	beq.n	8000ce2 <demoP2P+0x6e>
		platformLog("failed.");
 8000cd8:	4918      	ldr	r1, [pc, #96]	@ (8000d3c <demoP2P+0xc8>)
 8000cda:	4816      	ldr	r0, [pc, #88]	@ (8000d34 <demoP2P+0xc0>)
 8000cdc:	f003 fc64 	bl	80045a8 <LOG_DEBUG>
		return;
 8000ce0:	e022      	b.n	8000d28 <demoP2P+0xb4>
	}
	platformLog("succeeded.\r\n");
 8000ce2:	4917      	ldr	r1, [pc, #92]	@ (8000d40 <demoP2P+0xcc>)
 8000ce4:	4813      	ldr	r0, [pc, #76]	@ (8000d34 <demoP2P+0xc0>)
 8000ce6:	f003 fc5f 	bl	80045a8 <LOG_DEBUG>

	platformLog(" Device present, maintaining connection ");
 8000cea:	4918      	ldr	r1, [pc, #96]	@ (8000d4c <demoP2P+0xd8>)
 8000cec:	4811      	ldr	r0, [pc, #68]	@ (8000d34 <demoP2P+0xc0>)
 8000cee:	f003 fc5b 	bl	80045a8 <LOG_DEBUG>
	while (err == ERR_NONE) {
 8000cf2:	e012      	b.n	8000d1a <demoP2P+0xa6>
		err = demoTransceiveBlocking(ndefLLCPSYMM, sizeof(ndefLLCPSYMM),
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	1d3a      	adds	r2, r7, #4
 8000cfa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cfe:	9100      	str	r1, [sp, #0]
 8000d00:	2102      	movs	r1, #2
 8000d02:	4813      	ldr	r0, [pc, #76]	@ (8000d50 <demoP2P+0xdc>)
 8000d04:	f000 f8ac 	bl	8000e60 <demoTransceiveBlocking>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	81fb      	strh	r3, [r7, #14]
				&rxData, &rxLen, RFAL_FWT_NONE);
		platformLog(".");
 8000d0c:	4911      	ldr	r1, [pc, #68]	@ (8000d54 <demoP2P+0xe0>)
 8000d0e:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <demoP2P+0xc0>)
 8000d10:	f003 fc4a 	bl	80045a8 <LOG_DEBUG>
		platformDelay(50);
 8000d14:	2032      	movs	r0, #50	@ 0x32
 8000d16:	f000 fcc9 	bl	80016ac <HAL_Delay>
	while (err == ERR_NONE) {
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0e9      	beq.n	8000cf4 <demoP2P+0x80>
	}
	platformLog("\r\n Device removed.\r\n");
 8000d20:	490d      	ldr	r1, [pc, #52]	@ (8000d58 <demoP2P+0xe4>)
 8000d22:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <demoP2P+0xc0>)
 8000d24:	f003 fc40 	bl	80045a8 <LOG_DEBUG>
}
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	08011f5c 	.word	0x08011f5c
 8000d34:	08011cf8 	.word	0x08011cf8
 8000d38:	20000040 	.word	0x20000040
 8000d3c:	08011f74 	.word	0x08011f74
 8000d40:	08011f7c 	.word	0x08011f7c
 8000d44:	08011f8c 	.word	0x08011f8c
 8000d48:	2000005c 	.word	0x2000005c
 8000d4c:	08011fac 	.word	0x08011fac
 8000d50:	200001a8 	.word	0x200001a8
 8000d54:	08011fd8 	.word	0x08011fd8
 8000d58:	08011fdc 	.word	0x08011fdc

08000d5c <demoAPDU>:
 * Example how to exchange a set of predefined APDUs with PICC. The NDEF
 * application will be selected and then CC will be selected and read.
 * 
 *****************************************************************************
 */
void demoAPDU(void) {
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af02      	add	r7, sp, #8
	ReturnCode err;
	uint16_t *rxLen;
	uint8_t *rxData;

	/* Exchange APDU: NDEF Tag Application Select command */
	err = demoTransceiveBlocking(ndefSelectApp, sizeof(ndefSelectApp), &rxData,
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	1d3a      	adds	r2, r7, #4
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d6c:	9100      	str	r1, [sp, #0]
 8000d6e:	210d      	movs	r1, #13
 8000d70:	4832      	ldr	r0, [pc, #200]	@ (8000e3c <demoAPDU+0xe0>)
 8000d72:	f000 f875 	bl	8000e60 <demoTransceiveBlocking>
 8000d76:	4603      	mov	r3, r0
 8000d78:	81fb      	strh	r3, [r7, #14]
			&rxLen, RFAL_FWT_NONE);
	platformLog(" Select NDEF Application: %s Data: %s\r\n",
 8000d7a:	89fb      	ldrh	r3, [r7, #14]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <demoAPDU+0x28>
 8000d80:	4c2f      	ldr	r4, [pc, #188]	@ (8000e40 <demoAPDU+0xe4>)
 8000d82:	e000      	b.n	8000d86 <demoAPDU+0x2a>
 8000d84:	4c2f      	ldr	r4, [pc, #188]	@ (8000e44 <demoAPDU+0xe8>)
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4610      	mov	r0, r2
 8000d90:	f7ff fbee 	bl	8000570 <hex2Str>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4622      	mov	r2, r4
 8000d98:	492b      	ldr	r1, [pc, #172]	@ (8000e48 <demoAPDU+0xec>)
 8000d9a:	482c      	ldr	r0, [pc, #176]	@ (8000e4c <demoAPDU+0xf0>)
 8000d9c:	f003 fc04 	bl	80045a8 <LOG_DEBUG>
			(err != ERR_NONE) ? "FAIL": "OK", hex2Str(rxData, *rxLen));

	if ((err == ERR_NONE) && rxData[0] == 0x90 && rxData[1] == 0x00) {
 8000da0:	89fb      	ldrh	r3, [r7, #14]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d146      	bne.n	8000e34 <demoAPDU+0xd8>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b90      	cmp	r3, #144	@ 0x90
 8000dac:	d142      	bne.n	8000e34 <demoAPDU+0xd8>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3301      	adds	r3, #1
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d13d      	bne.n	8000e34 <demoAPDU+0xd8>
		/* Exchange APDU: Select Capability Container File */
		err = demoTransceiveBlocking(ccSelectFile, sizeof(ccSelectFile),
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	1d3a      	adds	r2, r7, #4
 8000dbe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dc2:	9100      	str	r1, [sp, #0]
 8000dc4:	2107      	movs	r1, #7
 8000dc6:	4822      	ldr	r0, [pc, #136]	@ (8000e50 <demoAPDU+0xf4>)
 8000dc8:	f000 f84a 	bl	8000e60 <demoTransceiveBlocking>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	81fb      	strh	r3, [r7, #14]
				&rxData, &rxLen, RFAL_FWT_NONE);
		platformLog(" Select CC: %s Data: %s\r\n",
 8000dd0:	89fb      	ldrh	r3, [r7, #14]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <demoAPDU+0x7e>
 8000dd6:	4c1a      	ldr	r4, [pc, #104]	@ (8000e40 <demoAPDU+0xe4>)
 8000dd8:	e000      	b.n	8000ddc <demoAPDU+0x80>
 8000dda:	4c1a      	ldr	r4, [pc, #104]	@ (8000e44 <demoAPDU+0xe8>)
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	4610      	mov	r0, r2
 8000de6:	f7ff fbc3 	bl	8000570 <hex2Str>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4622      	mov	r2, r4
 8000dee:	4919      	ldr	r1, [pc, #100]	@ (8000e54 <demoAPDU+0xf8>)
 8000df0:	4816      	ldr	r0, [pc, #88]	@ (8000e4c <demoAPDU+0xf0>)
 8000df2:	f003 fbd9 	bl	80045a8 <LOG_DEBUG>
				(err != ERR_NONE) ? "FAIL": "OK", hex2Str(rxData, *rxLen));

		/* Exchange APDU: Read Capability Container File  */
		err = demoTransceiveBlocking(readBynary, sizeof(readBynary), &rxData,
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	1d3a      	adds	r2, r7, #4
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e00:	9100      	str	r1, [sp, #0]
 8000e02:	2105      	movs	r1, #5
 8000e04:	4814      	ldr	r0, [pc, #80]	@ (8000e58 <demoAPDU+0xfc>)
 8000e06:	f000 f82b 	bl	8000e60 <demoTransceiveBlocking>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	81fb      	strh	r3, [r7, #14]
				&rxLen, RFAL_FWT_NONE);
		platformLog(" Read CC: %s Data: %s\r\n",
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <demoAPDU+0xbc>
 8000e14:	4c0a      	ldr	r4, [pc, #40]	@ (8000e40 <demoAPDU+0xe4>)
 8000e16:	e000      	b.n	8000e1a <demoAPDU+0xbe>
 8000e18:	4c0a      	ldr	r4, [pc, #40]	@ (8000e44 <demoAPDU+0xe8>)
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	4610      	mov	r0, r2
 8000e24:	f7ff fba4 	bl	8000570 <hex2Str>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4622      	mov	r2, r4
 8000e2c:	490b      	ldr	r1, [pc, #44]	@ (8000e5c <demoAPDU+0x100>)
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <demoAPDU+0xf0>)
 8000e30:	f003 fbba 	bl	80045a8 <LOG_DEBUG>
				(err != ERR_NONE) ? "FAIL": "OK", hex2Str(rxData, *rxLen));
	}
//	else{
//		LOG_ERROR()
//	}
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	20000020 	.word	0x20000020
 8000e40:	08011f08 	.word	0x08011f08
 8000e44:	08011f10 	.word	0x08011f10
 8000e48:	08011ff4 	.word	0x08011ff4
 8000e4c:	08011cf8 	.word	0x08011cf8
 8000e50:	20000030 	.word	0x20000030
 8000e54:	0801201c 	.word	0x0801201c
 8000e58:	20000038 	.word	0x20000038
 8000e5c:	08012038 	.word	0x08012038

08000e60 <demoTransceiveBlocking>:
 *  \return ERR_NONE      : No error, activation successful
 * 
 *****************************************************************************
 */
ReturnCode demoTransceiveBlocking(uint8_t *txBuf, uint16_t txBufSize,
		uint8_t **rxData, uint16_t **rcvLen, uint32_t fwt) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	817b      	strh	r3, [r7, #10]
	ReturnCode err;

	err = rfalNfcDataExchangeStart(txBuf, txBufSize, rxData, rcvLen, fwt);
 8000e70:	8979      	ldrh	r1, [r7, #10]
 8000e72:	6a3b      	ldr	r3, [r7, #32]
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f007 fe54 	bl	8008b28 <rfalNfcDataExchangeStart>
 8000e80:	4603      	mov	r3, r0
 8000e82:	82fb      	strh	r3, [r7, #22]
	if (err == ERR_NONE) {
 8000e84:	8afb      	ldrh	r3, [r7, #22]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d108      	bne.n	8000e9c <demoTransceiveBlocking+0x3c>
		do {
			rfalNfcWorker();
 8000e8a:	f007 fc69 	bl	8008760 <rfalNfcWorker>
			err = rfalNfcDataExchangeGetStatus();
 8000e8e:	f007 ff65 	bl	8008d5c <rfalNfcDataExchangeGetStatus>
 8000e92:	4603      	mov	r3, r0
 8000e94:	82fb      	strh	r3, [r7, #22]
		}
		while (err == ERR_BUSY);
 8000e96:	8afb      	ldrh	r3, [r7, #22]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d0f6      	beq.n	8000e8a <demoTransceiveBlocking+0x2a>
	}
	return err;
 8000e9c:	8afb      	ldrh	r3, [r7, #22]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	4b30      	ldr	r3, [pc, #192]	@ (8000f80 <MX_GPIO_Init+0xd8>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8000f80 <MX_GPIO_Init+0xd8>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eca:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <MX_GPIO_Init+0xd8>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <MX_GPIO_Init+0xd8>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4a29      	ldr	r2, [pc, #164]	@ (8000f80 <MX_GPIO_Init+0xd8>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <MX_GPIO_Init+0xd8>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <MX_GPIO_Init+0xd8>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a23      	ldr	r2, [pc, #140]	@ (8000f80 <MX_GPIO_Init+0xd8>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_GPIO_Init+0xd8>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_CS_GPIO_Port, NFC_CS_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f0c:	481d      	ldr	r0, [pc, #116]	@ (8000f84 <MX_GPIO_Init+0xdc>)
 8000f0e:	f000 feb5 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_INT_Pin;
 8000f12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFC_INT_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	4816      	ldr	r0, [pc, #88]	@ (8000f84 <MX_GPIO_Init+0xdc>)
 8000f2a:	f000 fd15 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_CS_Pin;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NFC_CS_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4619      	mov	r1, r3
 8000f46:	480f      	ldr	r0, [pc, #60]	@ (8000f84 <MX_GPIO_Init+0xdc>)
 8000f48:	f000 fd06 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f64:	f000 fcf8 	bl	8001958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2028      	movs	r0, #40	@ 0x28
 8000f6e:	f000 fcbc 	bl	80018ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f72:	2028      	movs	r0, #40	@ 0x28
 8000f74:	f000 fcd5 	bl	8001922 <HAL_NVIC_EnableIRQ>

}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000400 	.word	0x48000400

08000f88 <LL_PWR_ClearFlag_SB>:
  * @brief  Clear Stand-By Flag
  * @rmtoll SCR          CSBF          LL_PWR_ClearFlag_SB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_SB(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CSBF);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <LL_PWR_ClearFlag_SB+0x18>)
 8000f8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f92:	619a      	str	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40007000 	.word	0x40007000

08000fa4 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <LL_PWR_ClearFlag_WU+0x14>)
 8000faa:	221f      	movs	r2, #31
 8000fac:	619a      	str	r2, [r3, #24]
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40007000 	.word	0x40007000

08000fbc <tracelog>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t globalCommProtectCnt = 0;
static const char *TAG = "NFC";
uint32_t x = 0;
static void tracelog(char *str) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 1000);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff f903 	bl	80001d0 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <tracelog+0x28>)
 8000fd6:	f002 fcf3 	bl	80039c0 <HAL_UART_Transmit>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000574 	.word	0x20000574

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fae8 	bl	80015c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f847 	bl	8001084 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f7ff ff57 	bl	8000ea8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000ffa:	f000 f8b5 	bl	8001168 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000ffe:	f000 fa2f 	bl	8001460 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <main+0x88>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	4a1a      	ldr	r2, [pc, #104]	@ (8001070 <main+0x88>)
 8001008:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800100c:	6093      	str	r3, [r2, #8]

	log_monitor_init(tracelog);
 800100e:	4819      	ldr	r0, [pc, #100]	@ (8001074 <main+0x8c>)
 8001010:	f003 f9d6 	bl	80043c0 <log_monitor_init>
	LOG_INFO(TAG, "App startup.");
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <main+0x90>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4918      	ldr	r1, [pc, #96]	@ (800107c <main+0x94>)
 800101a:	4618      	mov	r0, r3
 800101c:	f003 f9e0 	bl	80043e0 <LOG_INFO>
	spiInit(&hspi2);
 8001020:	4817      	ldr	r0, [pc, #92]	@ (8001080 <main+0x98>)
 8001022:	f000 f923 	bl	800126c <spiInit>
	HAL_Delay(2000);
 8001026:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800102a:	f000 fb3f 	bl	80016ac <HAL_Delay>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		demoIni();
 800102e:	f7ff fb43 	bl	80006b8 <demoIni>
		demoCycle();
 8001032:	f7ff fb9b 	bl	800076c <demoCycle>
		demoCycle();
 8001036:	f7ff fb99 	bl	800076c <demoCycle>

//		LOG_INFO(TAG, "Enter stop mode.");
		LL_PWR_ClearFlag_SB();
 800103a:	f7ff ffa5 	bl	8000f88 <LL_PWR_ClearFlag_SB>
		LL_PWR_ClearFlag_WU();
 800103e:	f7ff ffb1 	bl	8000fa4 <LL_PWR_ClearFlag_WU>
		HAL_SuspendTick();
 8001042:	f000 fb57 	bl	80016f4 <HAL_SuspendTick>
		HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001046:	2001      	movs	r0, #1
 8001048:	f000 fec8 	bl	8001ddc <HAL_PWREx_EnterSTOP2Mode>
		HAL_ResumeTick();
 800104c:	f000 fb62 	bl	8001714 <HAL_ResumeTick>
//		LOG_INFO(TAG, "Exit stop mode.");

		uint8_t i = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	71fb      	strb	r3, [r7, #7]
		while(!demoCycle() && i<20)	i++;
 8001054:	e002      	b.n	800105c <main+0x74>
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	3301      	adds	r3, #1
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	f7ff fb86 	bl	800076c <demoCycle>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1e3      	bne.n	800102e <main+0x46>
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b13      	cmp	r3, #19
 800106a:	d9f4      	bls.n	8001056 <main+0x6e>
	while (1) {
 800106c:	e7df      	b.n	800102e <main+0x46>
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	08000fbd 	.word	0x08000fbd
 8001078:	20000084 	.word	0x20000084
 800107c:	08012054 	.word	0x08012054
 8001080:	20000440 	.word	0x20000440

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b096      	sub	sp, #88	@ 0x58
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2244      	movs	r2, #68	@ 0x44
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f010 fa6c 	bl	8011570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010aa:	f000 fe41 	bl	8001d30 <HAL_PWREx_ControlVoltageScaling>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010b4:	f000 f848 	bl	8001148 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010b8:	f000 fe1c 	bl	8001cf4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010bc:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <SystemClock_Config+0xc0>)
 80010be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010c2:	4a20      	ldr	r2, [pc, #128]	@ (8001144 <SystemClock_Config+0xc0>)
 80010c4:	f023 0318 	bic.w	r3, r3, #24
 80010c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010cc:	2314      	movs	r3, #20
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80010dc:	23b0      	movs	r3, #176	@ 0xb0
 80010de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e0:	2302      	movs	r3, #2
 80010e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010e4:	2301      	movs	r3, #1
 80010e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e8:	2304      	movs	r3, #4
 80010ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80010ec:	2308      	movs	r3, #8
 80010ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010f0:	2307      	movs	r3, #7
 80010f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fe97 	bl	8001e34 <HAL_RCC_OscConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800110c:	f000 f81c 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	230f      	movs	r3, #15
 8001112:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2303      	movs	r3, #3
 8001116:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	2102      	movs	r1, #2
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fa97 	bl	800265c <HAL_RCC_ClockConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001134:	f000 f808 	bl	8001148 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001138:	f001 fecc 	bl	8002ed4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800113c:	bf00      	nop
 800113e:	3758      	adds	r7, #88	@ 0x58
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021000 	.word	0x40021000

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	LOG_ERROR(TAG, "Error handler.");
 800114c:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <Error_Handler+0x18>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4904      	ldr	r1, [pc, #16]	@ (8001164 <Error_Handler+0x1c>)
 8001152:	4618      	mov	r0, r3
 8001154:	f003 f9dc 	bl	8004510 <LOG_ERROR>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <Error_Handler+0x14>
 8001160:	20000084 	.word	0x20000084
 8001164:	08012064 	.word	0x08012064

08001168 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800116c:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <MX_SPI2_Init+0x74>)
 800116e:	4a1c      	ldr	r2, [pc, #112]	@ (80011e0 <MX_SPI2_Init+0x78>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <MX_SPI2_Init+0x74>)
 8001174:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <MX_SPI2_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <MX_SPI2_Init+0x74>)
 8001182:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001186:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_SPI2_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <MX_SPI2_Init+0x74>)
 8001190:	2201      	movs	r2, #1
 8001192:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_SPI2_Init+0x74>)
 8001196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800119a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_SPI2_Init+0x74>)
 800119e:	2210      	movs	r2, #16
 80011a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_SPI2_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_SPI2_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_SPI2_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_SPI2_Init+0x74>)
 80011b6:	2207      	movs	r2, #7
 80011b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_SPI2_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_SPI2_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_SPI2_Init+0x74>)
 80011c8:	f001 ff86 	bl	80030d8 <HAL_SPI_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011d2:	f7ff ffb9 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000440 	.word	0x20000440
 80011e0:	40003800 	.word	0x40003800

080011e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a17      	ldr	r2, [pc, #92]	@ (8001260 <HAL_SPI_MspInit+0x7c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d128      	bne.n	8001258 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <HAL_SPI_MspInit+0x80>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120a:	4a16      	ldr	r2, [pc, #88]	@ (8001264 <HAL_SPI_MspInit+0x80>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001210:	6593      	str	r3, [r2, #88]	@ 0x58
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <HAL_SPI_MspInit+0x80>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <HAL_SPI_MspInit+0x80>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a10      	ldr	r2, [pc, #64]	@ (8001264 <HAL_SPI_MspInit+0x80>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <HAL_SPI_MspInit+0x80>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001236:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001248:	2305      	movs	r3, #5
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <HAL_SPI_MspInit+0x84>)
 8001254:	f000 fb80 	bl	8001958 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	@ 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40003800 	.word	0x40003800
 8001264:	40021000 	.word	0x40021000
 8001268:	48000400 	.word	0x48000400

0800126c <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 8001274:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <spiInit+0x2c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001288:	601a      	str	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	2000056c 	.word	0x2000056c

0800129c <spiTxRx>:
{
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
}

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	4613      	mov	r3, r2
 80012a8:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 80012aa:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <spiTxRx+0x6c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <spiTxRx+0x1a>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e024      	b.n	8001300 <spiTxRx+0x64>

  if(length > SPI_BUF_LEN)
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	2b61      	cmp	r3, #97	@ 0x61
 80012ba:	d901      	bls.n	80012c0 <spiTxRx+0x24>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e01f      	b.n	8001300 <spiTxRx+0x64>
  }

  /* Initialize Tx data*/
  if(txData != NULL)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <spiTxRx+0x38>
  {
    memcpy(txBuf, txData, length );
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	461a      	mov	r2, r3
 80012ca:	68f9      	ldr	r1, [r7, #12]
 80012cc:	480f      	ldr	r0, [pc, #60]	@ (800130c <spiTxRx+0x70>)
 80012ce:	f010 f993 	bl	80115f8 <memcpy>
 80012d2:	e005      	b.n	80012e0 <spiTxRx+0x44>
  }
  else
  {
    memset(txBuf, 0x00, length );
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	461a      	mov	r2, r3
 80012d8:	2100      	movs	r1, #0
 80012da:	480c      	ldr	r0, [pc, #48]	@ (800130c <spiTxRx+0x70>)
 80012dc:	f010 f948 	bl	8011570 <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <spiTxRx+0x6c>)
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <spiTxRx+0x52>
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	e000      	b.n	80012f0 <spiTxRx+0x54>
 80012ee:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <spiTxRx+0x74>)
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012f6:	9100      	str	r1, [sp, #0]
 80012f8:	4904      	ldr	r1, [pc, #16]	@ (800130c <spiTxRx+0x70>)
 80012fa:	f001 ff90 	bl	800321e <HAL_SPI_TransmitReceive>
 80012fe:	4603      	mov	r3, r0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000056c 	.word	0x2000056c
 800130c:	200004a4 	.word	0x200004a4
 8001310:	20000508 	.word	0x20000508

08001314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <HAL_MspInit+0x44>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131e:	4a0e      	ldr	r2, [pc, #56]	@ (8001358 <HAL_MspInit+0x44>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6613      	str	r3, [r2, #96]	@ 0x60
 8001326:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <HAL_MspInit+0x44>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <HAL_MspInit+0x44>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001336:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_MspInit+0x44>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133c:	6593      	str	r3, [r2, #88]	@ 0x58
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_MspInit+0x44>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <NMI_Handler+0x4>

08001364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <MemManage_Handler+0x4>

08001374 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <UsageFault_Handler+0x4>

08001384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b2:	f000 f95b 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}

080013ba <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 80013be:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80013c2:	f000 fc73 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  st25r3911Isr();
 80013c6:	f004 f8fb 	bl	80055c0 <st25r3911Isr>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	@ (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f010 f8ce 	bl	80115a0 <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20010000 	.word	0x20010000
 8001430:	00000400 	.word	0x00000400
 8001434:	20000570 	.word	0x20000570
 8001438:	200012b8 	.word	0x200012b8

0800143c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <SystemInit+0x20>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <SystemInit+0x20>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001466:	4a15      	ldr	r2, [pc, #84]	@ (80014bc <MX_USART1_UART_Init+0x5c>)
 8001468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 800146c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 80014a4:	f002 fa3e 	bl	8003924 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014ae:	f7ff fe4b 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000574 	.word	0x20000574
 80014bc:	40013800 	.word	0x40013800

080014c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b0a0      	sub	sp, #128	@ 0x80
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	225c      	movs	r2, #92	@ 0x5c
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f010 f845 	bl	8011570 <memset>
  if(uartHandle->Instance==USART1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <HAL_UART_MspInit+0xa4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d135      	bne.n	800155c <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fad1 	bl	8002aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001508:	f7ff fe1e 	bl	8001148 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800150c:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <HAL_UART_MspInit+0xa8>)
 800150e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001510:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <HAL_UART_MspInit+0xa8>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001516:	6613      	str	r3, [r2, #96]	@ 0x60
 8001518:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <HAL_UART_MspInit+0xa8>)
 800151a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <HAL_UART_MspInit+0xa8>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001528:	4a0f      	ldr	r2, [pc, #60]	@ (8001568 <HAL_UART_MspInit+0xa8>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001530:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <HAL_UART_MspInit+0xa8>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800153c:	23c0      	movs	r3, #192	@ 0xc0
 800153e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800154c:	2307      	movs	r3, #7
 800154e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001554:	4619      	mov	r1, r3
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <HAL_UART_MspInit+0xac>)
 8001558:	f000 f9fe 	bl	8001958 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800155c:	bf00      	nop
 800155e:	3780      	adds	r7, #128	@ 0x80
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40013800 	.word	0x40013800
 8001568:	40021000 	.word	0x40021000
 800156c:	48000400 	.word	0x48000400

08001570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001574:	f7ff ff62 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	@ (80015ac <LoopForever+0x6>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	@ (80015b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <LoopForever+0xe>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	@ (80015bc <LoopForever+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159e:	f010 f805 	bl	80115ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015a2:	f7ff fd21 	bl	8000fe8 <main>

080015a6 <LoopForever>:

LoopForever:
    b LoopForever
 80015a6:	e7fe      	b.n	80015a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80015b4:	08012460 	.word	0x08012460
  ldr r2, =_sbss
 80015b8:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80015bc:	200012b4 	.word	0x200012b4

080015c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_IRQHandler>

080015c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f981 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015d2:	200f      	movs	r0, #15
 80015d4:	f000 f80e 	bl	80015f4 <HAL_InitTick>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	71fb      	strb	r3, [r7, #7]
 80015e2:	e001      	b.n	80015e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015e4:	f7ff fe96 	bl	8001314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015e8:	79fb      	ldrb	r3, [r7, #7]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <HAL_InitTick+0x6c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d023      	beq.n	8001650 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_InitTick+0x70>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <HAL_InitTick+0x6c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f98d 	bl	800193e <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10f      	bne.n	800164a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d809      	bhi.n	8001644 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001638:	f000 f957 	bl	80018ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800163c:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <HAL_InitTick+0x74>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e007      	b.n	8001654 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e004      	b.n	8001654 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	e001      	b.n	8001654 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000090 	.word	0x20000090
 8001664:	20000088 	.word	0x20000088
 8001668:	2000008c 	.word	0x2000008c

0800166c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_IncTick+0x20>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_IncTick+0x24>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a04      	ldr	r2, [pc, #16]	@ (8001690 <HAL_IncTick+0x24>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000090 	.word	0x20000090
 8001690:	200005fc 	.word	0x200005fc

08001694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b03      	ldr	r3, [pc, #12]	@ (80016a8 <HAL_GetTick+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200005fc 	.word	0x200005fc

080016ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b4:	f7ff ffee 	bl	8001694 <HAL_GetTick>
 80016b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016c4:	d005      	beq.n	80016d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <HAL_Delay+0x44>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d2:	bf00      	nop
 80016d4:	f7ff ffde 	bl	8001694 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d8f7      	bhi.n	80016d4 <HAL_Delay+0x28>
  {
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000090 	.word	0x20000090

080016f4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <HAL_SuspendTick+0x1c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <HAL_SuspendTick+0x1c>)
 80016fe:	f023 0302 	bic.w	r3, r3, #2
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_ResumeTick+0x1c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <HAL_ResumeTick+0x1c>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	@ (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	@ (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	@ (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	@ 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	@ 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018b4:	f7ff ff8e 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff29 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff3e 	bl	800177c <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff8e 	bl	8001828 <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5d 	bl	80017d4 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff31 	bl	8001798 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	e154      	b.n	8001c12 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8146 	beq.w	8001c0c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d005      	beq.n	8001998 <HAL_GPIO_Init+0x40>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d130      	bne.n	80019fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 0201 	and.w	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d017      	beq.n	8001a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d123      	bne.n	8001a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	6939      	ldr	r1, [r7, #16]
 8001a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0203 	and.w	r2, r3, #3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80a0 	beq.w	8001c0c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001acc:	4b58      	ldr	r3, [pc, #352]	@ (8001c30 <HAL_GPIO_Init+0x2d8>)
 8001ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad0:	4a57      	ldr	r2, [pc, #348]	@ (8001c30 <HAL_GPIO_Init+0x2d8>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ad8:	4b55      	ldr	r3, [pc, #340]	@ (8001c30 <HAL_GPIO_Init+0x2d8>)
 8001ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ae4:	4a53      	ldr	r2, [pc, #332]	@ (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b0e:	d019      	beq.n	8001b44 <HAL_GPIO_Init+0x1ec>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a49      	ldr	r2, [pc, #292]	@ (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d013      	beq.n	8001b40 <HAL_GPIO_Init+0x1e8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a48      	ldr	r2, [pc, #288]	@ (8001c3c <HAL_GPIO_Init+0x2e4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00d      	beq.n	8001b3c <HAL_GPIO_Init+0x1e4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a47      	ldr	r2, [pc, #284]	@ (8001c40 <HAL_GPIO_Init+0x2e8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d007      	beq.n	8001b38 <HAL_GPIO_Init+0x1e0>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a46      	ldr	r2, [pc, #280]	@ (8001c44 <HAL_GPIO_Init+0x2ec>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_GPIO_Init+0x1dc>
 8001b30:	2304      	movs	r3, #4
 8001b32:	e008      	b.n	8001b46 <HAL_GPIO_Init+0x1ee>
 8001b34:	2307      	movs	r3, #7
 8001b36:	e006      	b.n	8001b46 <HAL_GPIO_Init+0x1ee>
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e004      	b.n	8001b46 <HAL_GPIO_Init+0x1ee>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e002      	b.n	8001b46 <HAL_GPIO_Init+0x1ee>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_GPIO_Init+0x1ee>
 8001b44:	2300      	movs	r3, #0
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	f002 0203 	and.w	r2, r2, #3
 8001b4c:	0092      	lsls	r2, r2, #2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b56:	4937      	ldr	r1, [pc, #220]	@ (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b64:	4b38      	ldr	r3, [pc, #224]	@ (8001c48 <HAL_GPIO_Init+0x2f0>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b88:	4a2f      	ldr	r2, [pc, #188]	@ (8001c48 <HAL_GPIO_Init+0x2f0>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c48 <HAL_GPIO_Init+0x2f0>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bb2:	4a25      	ldr	r2, [pc, #148]	@ (8001c48 <HAL_GPIO_Init+0x2f0>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bb8:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <HAL_GPIO_Init+0x2f0>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c48 <HAL_GPIO_Init+0x2f0>)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_GPIO_Init+0x2f0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c06:	4a10      	ldr	r2, [pc, #64]	@ (8001c48 <HAL_GPIO_Init+0x2f0>)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f47f aea3 	bne.w	8001968 <HAL_GPIO_Init+0x10>
  }
}
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
 8001c26:	371c      	adds	r7, #28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010000 	.word	0x40010000
 8001c38:	48000400 	.word	0x48000400
 8001c3c:	48000800 	.word	0x48000800
 8001c40:	48000c00 	.word	0x48000c00
 8001c44:	48001000 	.word	0x48001000
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e001      	b.n	8001c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cb6:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f806 	bl	8001cdc <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40010400 	.word	0x40010400

08001cdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a04      	ldr	r2, [pc, #16]	@ (8001d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40007000 	.word	0x40007000

08001d14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <HAL_PWREx_GetVoltageRange+0x18>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40007000 	.word	0x40007000

08001d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d3e:	d130      	bne.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d40:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d4c:	d038      	beq.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d56:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2232      	movs	r2, #50	@ 0x32
 8001d64:	fb02 f303 	mul.w	r3, r2, r3
 8001d68:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0c9b      	lsrs	r3, r3, #18
 8001d70:	3301      	adds	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d74:	e002      	b.n	8001d7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d7c:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d88:	d102      	bne.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f2      	bne.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d9c:	d110      	bne.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e00f      	b.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dae:	d007      	beq.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001db0:	4b07      	ldr	r3, [pc, #28]	@ (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001db8:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	20000088 	.word	0x20000088
 8001dd8:	431bde83 	.word	0x431bde83

08001ddc <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	4a0f      	ldr	r2, [pc, #60]	@ (8001e2c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8001e30 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001e08:	bf30      	wfi
 8001e0a:	e002      	b.n	8001e12 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001e0c:	bf40      	sev
    __WFE();
 8001e0e:	bf20      	wfe
    __WFE();
 8001e10:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e12:	4b07      	ldr	r3, [pc, #28]	@ (8001e30 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	4a06      	ldr	r2, [pc, #24]	@ (8001e30 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	6113      	str	r3, [r2, #16]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f000 bc02 	b.w	800264c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e48:	4b96      	ldr	r3, [pc, #600]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e52:	4b94      	ldr	r3, [pc, #592]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80e4 	beq.w	8002032 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_RCC_OscConfig+0x4c>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	f040 808b 	bne.w	8001f8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	f040 8087 	bne.w	8001f8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e80:	4b88      	ldr	r3, [pc, #544]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x64>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e3d9      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1a      	ldr	r2, [r3, #32]
 8001e9c:	4b81      	ldr	r3, [pc, #516]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d004      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x7e>
 8001ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001eb0:	e005      	b.n	8001ebe <HAL_RCC_OscConfig+0x8a>
 8001eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d223      	bcs.n	8001f0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fd8c 	bl	80029e4 <RCC_SetFlashLatencyFromMSIRange>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e3ba      	b.n	800264c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed6:	4b73      	ldr	r3, [pc, #460]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a72      	ldr	r2, [pc, #456]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b70      	ldr	r3, [pc, #448]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	496d      	ldr	r1, [pc, #436]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef4:	4b6b      	ldr	r3, [pc, #428]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	4968      	ldr	r1, [pc, #416]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
 8001f08:	e025      	b.n	8001f56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f0a:	4b66      	ldr	r3, [pc, #408]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a65      	ldr	r2, [pc, #404]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001f10:	f043 0308 	orr.w	r3, r3, #8
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b63      	ldr	r3, [pc, #396]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4960      	ldr	r1, [pc, #384]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f28:	4b5e      	ldr	r3, [pc, #376]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	495b      	ldr	r1, [pc, #364]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fd4c 	bl	80029e4 <RCC_SetFlashLatencyFromMSIRange>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e37a      	b.n	800264c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f56:	f000 fc81 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b51      	ldr	r3, [pc, #324]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	4950      	ldr	r1, [pc, #320]	@ (80020a8 <HAL_RCC_OscConfig+0x274>)
 8001f68:	5ccb      	ldrb	r3, [r1, r3]
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	4a4e      	ldr	r2, [pc, #312]	@ (80020ac <HAL_RCC_OscConfig+0x278>)
 8001f74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f76:	4b4e      	ldr	r3, [pc, #312]	@ (80020b0 <HAL_RCC_OscConfig+0x27c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fb3a 	bl	80015f4 <HAL_InitTick>
 8001f80:	4603      	mov	r3, r0
 8001f82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d052      	beq.n	8002030 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	e35e      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d032      	beq.n	8001ffc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f96:	4b43      	ldr	r3, [pc, #268]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a42      	ldr	r2, [pc, #264]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fb77 	bl	8001694 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001faa:	f7ff fb73 	bl	8001694 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e347      	b.n	800264c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fbc:	4b39      	ldr	r3, [pc, #228]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc8:	4b36      	ldr	r3, [pc, #216]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a35      	ldr	r2, [pc, #212]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b33      	ldr	r3, [pc, #204]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4930      	ldr	r1, [pc, #192]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	492b      	ldr	r1, [pc, #172]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
 8001ffa:	e01a      	b.n	8002032 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ffc:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a28      	ldr	r2, [pc, #160]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002008:	f7ff fb44 	bl	8001694 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002010:	f7ff fb40 	bl	8001694 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e314      	b.n	800264c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1dc>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d073      	beq.n	8002126 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d005      	beq.n	8002050 <HAL_RCC_OscConfig+0x21c>
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d10e      	bne.n	8002068 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d10b      	bne.n	8002068 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d063      	beq.n	8002124 <HAL_RCC_OscConfig+0x2f0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d15f      	bne.n	8002124 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e2f1      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002070:	d106      	bne.n	8002080 <HAL_RCC_OscConfig+0x24c>
 8002072:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e025      	b.n	80020cc <HAL_RCC_OscConfig+0x298>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002088:	d114      	bne.n	80020b4 <HAL_RCC_OscConfig+0x280>
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a05      	ldr	r2, [pc, #20]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8002090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a02      	ldr	r2, [pc, #8]	@ (80020a4 <HAL_RCC_OscConfig+0x270>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e013      	b.n	80020cc <HAL_RCC_OscConfig+0x298>
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08012230 	.word	0x08012230
 80020ac:	20000088 	.word	0x20000088
 80020b0:	2000008c 	.word	0x2000008c
 80020b4:	4ba0      	ldr	r3, [pc, #640]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a9f      	ldr	r2, [pc, #636]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b9d      	ldr	r3, [pc, #628]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a9c      	ldr	r2, [pc, #624]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff fade 	bl	8001694 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fada 	bl	8001694 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	@ 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e2ae      	b.n	800264c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ee:	4b92      	ldr	r3, [pc, #584]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x2a8>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff faca 	bl	8001694 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff fac6 	bl	8001694 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	@ 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e29a      	b.n	800264c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002116:	4b88      	ldr	r3, [pc, #544]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x2d0>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d060      	beq.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d005      	beq.n	8002144 <HAL_RCC_OscConfig+0x310>
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d119      	bne.n	8002172 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d116      	bne.n	8002172 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002144:	4b7c      	ldr	r3, [pc, #496]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_OscConfig+0x328>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e277      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b76      	ldr	r3, [pc, #472]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	4973      	ldr	r1, [pc, #460]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002170:	e040      	b.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d023      	beq.n	80021c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217a:	4b6f      	ldr	r3, [pc, #444]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6e      	ldr	r2, [pc, #440]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7ff fa85 	bl	8001694 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218e:	f7ff fa81 	bl	8001694 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e255      	b.n	800264c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a0:	4b65      	ldr	r3, [pc, #404]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ac:	4b62      	ldr	r3, [pc, #392]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	061b      	lsls	r3, r3, #24
 80021ba:	495f      	ldr	r1, [pc, #380]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	e018      	b.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80021c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7ff fa61 	bl	8001694 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d6:	f7ff fa5d 	bl	8001694 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e231      	b.n	800264c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e8:	4b53      	ldr	r3, [pc, #332]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d03c      	beq.n	800227a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01c      	beq.n	8002242 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002208:	4b4b      	ldr	r3, [pc, #300]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 800220a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800220e:	4a4a      	ldr	r2, [pc, #296]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7ff fa3c 	bl	8001694 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fa38 	bl	8001694 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e20c      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002232:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 8002234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ef      	beq.n	8002220 <HAL_RCC_OscConfig+0x3ec>
 8002240:	e01b      	b.n	800227a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002242:	4b3d      	ldr	r3, [pc, #244]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 8002244:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002248:	4a3b      	ldr	r2, [pc, #236]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7ff fa1f 	bl	8001694 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225a:	f7ff fa1b 	bl	8001694 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1ef      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800226c:	4b32      	ldr	r3, [pc, #200]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ef      	bne.n	800225a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80a6 	beq.w	80023d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002288:	2300      	movs	r3, #0
 800228a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800228c:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10d      	bne.n	80022b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	4a26      	ldr	r2, [pc, #152]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 800229e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022a4:	4b24      	ldr	r3, [pc, #144]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b0:	2301      	movs	r3, #1
 80022b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	4b21      	ldr	r3, [pc, #132]	@ (800233c <HAL_RCC_OscConfig+0x508>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d118      	bne.n	80022f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c0:	4b1e      	ldr	r3, [pc, #120]	@ (800233c <HAL_RCC_OscConfig+0x508>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <HAL_RCC_OscConfig+0x508>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022cc:	f7ff f9e2 	bl	8001694 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7ff f9de 	bl	8001694 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1b2      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_RCC_OscConfig+0x508>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <HAL_RCC_OscConfig+0x4d8>
 80022fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002300:	4a0d      	ldr	r2, [pc, #52]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800230a:	e029      	b.n	8002360 <HAL_RCC_OscConfig+0x52c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b05      	cmp	r3, #5
 8002312:	d115      	bne.n	8002340 <HAL_RCC_OscConfig+0x50c>
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231a:	4a07      	ldr	r2, [pc, #28]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002324:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232a:	4a03      	ldr	r2, [pc, #12]	@ (8002338 <HAL_RCC_OscConfig+0x504>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002334:	e014      	b.n	8002360 <HAL_RCC_OscConfig+0x52c>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	40007000 	.word	0x40007000
 8002340:	4b9a      	ldr	r3, [pc, #616]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002346:	4a99      	ldr	r2, [pc, #612]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002350:	4b96      	ldr	r3, [pc, #600]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002356:	4a95      	ldr	r2, [pc, #596]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d016      	beq.n	8002396 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7ff f994 	bl	8001694 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7ff f990 	bl	8001694 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e162      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002386:	4b89      	ldr	r3, [pc, #548]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0ed      	beq.n	8002370 <HAL_RCC_OscConfig+0x53c>
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7ff f97d 	bl	8001694 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7ff f979 	bl	8001694 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e14b      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b4:	4b7d      	ldr	r3, [pc, #500]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1ed      	bne.n	800239e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c2:	7ffb      	ldrb	r3, [r7, #31]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c8:	4b78      	ldr	r3, [pc, #480]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023cc:	4a77      	ldr	r2, [pc, #476]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 80023ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d03c      	beq.n	800245a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01c      	beq.n	8002422 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023e8:	4b70      	ldr	r3, [pc, #448]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 80023ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023ee:	4a6f      	ldr	r2, [pc, #444]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f8:	f7ff f94c 	bl	8001694 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002400:	f7ff f948 	bl	8001694 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e11c      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002412:	4b66      	ldr	r3, [pc, #408]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 8002414:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ef      	beq.n	8002400 <HAL_RCC_OscConfig+0x5cc>
 8002420:	e01b      	b.n	800245a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002422:	4b62      	ldr	r3, [pc, #392]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 8002424:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002428:	4a60      	ldr	r2, [pc, #384]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002432:	f7ff f92f 	bl	8001694 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800243a:	f7ff f92b 	bl	8001694 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0ff      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800244c:	4b57      	ldr	r3, [pc, #348]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 800244e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1ef      	bne.n	800243a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80f3 	beq.w	800264a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	2b02      	cmp	r3, #2
 800246a:	f040 80c9 	bne.w	8002600 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800246e:	4b4f      	ldr	r3, [pc, #316]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0203 	and.w	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	429a      	cmp	r2, r3
 8002480:	d12c      	bne.n	80024dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	3b01      	subs	r3, #1
 800248e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d123      	bne.n	80024dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d11b      	bne.n	80024dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d113      	bne.n	80024dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	3b01      	subs	r3, #1
 80024c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d109      	bne.n	80024dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	3b01      	subs	r3, #1
 80024d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d06b      	beq.n	80025b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d062      	beq.n	80025a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024e2:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0ac      	b.n	800264c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024f2:	4b2e      	ldr	r3, [pc, #184]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 80024f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024fe:	f7ff f8c9 	bl	8001694 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7ff f8c5 	bl	8001694 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e099      	b.n	800264c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002518:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002524:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	4b21      	ldr	r3, [pc, #132]	@ (80025b0 <HAL_RCC_OscConfig+0x77c>)
 800252a:	4013      	ands	r3, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002534:	3a01      	subs	r2, #1
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	4311      	orrs	r1, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800253e:	0212      	lsls	r2, r2, #8
 8002540:	4311      	orrs	r1, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002546:	0852      	lsrs	r2, r2, #1
 8002548:	3a01      	subs	r2, #1
 800254a:	0552      	lsls	r2, r2, #21
 800254c:	4311      	orrs	r1, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002552:	0852      	lsrs	r2, r2, #1
 8002554:	3a01      	subs	r2, #1
 8002556:	0652      	lsls	r2, r2, #25
 8002558:	4311      	orrs	r1, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800255e:	06d2      	lsls	r2, r2, #27
 8002560:	430a      	orrs	r2, r1
 8002562:	4912      	ldr	r1, [pc, #72]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 8002564:	4313      	orrs	r3, r2
 8002566:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0f      	ldr	r2, [pc, #60]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 800256e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002572:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002574:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a0c      	ldr	r2, [pc, #48]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 800257a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800257e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002580:	f7ff f888 	bl	8001694 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7ff f884 	bl	8001694 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e058      	b.n	800264c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259a:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <HAL_RCC_OscConfig+0x778>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a6:	e050      	b.n	800264a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e04f      	b.n	800264c <HAL_RCC_OscConfig+0x818>
 80025ac:	40021000 	.word	0x40021000
 80025b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b4:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <HAL_RCC_OscConfig+0x820>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d144      	bne.n	800264a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025c0:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_RCC_OscConfig+0x820>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a23      	ldr	r2, [pc, #140]	@ (8002654 <HAL_RCC_OscConfig+0x820>)
 80025c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025cc:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <HAL_RCC_OscConfig+0x820>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a20      	ldr	r2, [pc, #128]	@ (8002654 <HAL_RCC_OscConfig+0x820>)
 80025d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025d8:	f7ff f85c 	bl	8001694 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff f858 	bl	8001694 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e02c      	b.n	800264c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f2:	4b18      	ldr	r3, [pc, #96]	@ (8002654 <HAL_RCC_OscConfig+0x820>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x7ac>
 80025fe:	e024      	b.n	800264a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d01f      	beq.n	8002646 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <HAL_RCC_OscConfig+0x820>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <HAL_RCC_OscConfig+0x820>)
 800260c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7ff f83f 	bl	8001694 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7ff f83b 	bl	8001694 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e00f      	b.n	800264c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_RCC_OscConfig+0x820>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_RCC_OscConfig+0x820>)
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	4905      	ldr	r1, [pc, #20]	@ (8002654 <HAL_RCC_OscConfig+0x820>)
 800263e:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <HAL_RCC_OscConfig+0x824>)
 8002640:	4013      	ands	r3, r2
 8002642:	60cb      	str	r3, [r1, #12]
 8002644:	e001      	b.n	800264a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	feeefffc 	.word	0xfeeefffc

0800265c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0e7      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b75      	ldr	r3, [pc, #468]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d910      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b72      	ldr	r3, [pc, #456]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4970      	ldr	r1, [pc, #448]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b6e      	ldr	r3, [pc, #440]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0cf      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b66      	ldr	r3, [pc, #408]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d908      	bls.n	80026ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026bc:	4b63      	ldr	r3, [pc, #396]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4960      	ldr	r1, [pc, #384]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d04c      	beq.n	8002774 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e2:	4b5a      	ldr	r3, [pc, #360]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d121      	bne.n	8002732 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0a6      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fa:	4b54      	ldr	r3, [pc, #336]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d115      	bne.n	8002732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e09a      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002712:	4b4e      	ldr	r3, [pc, #312]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e08e      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002722:	4b4a      	ldr	r3, [pc, #296]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e086      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002732:	4b46      	ldr	r3, [pc, #280]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 0203 	bic.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4943      	ldr	r1, [pc, #268]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002744:	f7fe ffa6 	bl	8001694 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	e00a      	b.n	8002762 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7fe ffa2 	bl	8001694 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e06e      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	4b3a      	ldr	r3, [pc, #232]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 020c 	and.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	429a      	cmp	r2, r3
 8002772:	d1eb      	bne.n	800274c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d010      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	4b31      	ldr	r3, [pc, #196]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800278c:	429a      	cmp	r2, r3
 800278e:	d208      	bcs.n	80027a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b2e      	ldr	r3, [pc, #184]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	492b      	ldr	r1, [pc, #172]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a2:	4b29      	ldr	r3, [pc, #164]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d210      	bcs.n	80027d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b0:	4b25      	ldr	r3, [pc, #148]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 0207 	bic.w	r2, r3, #7
 80027b8:	4923      	ldr	r1, [pc, #140]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c0:	4b21      	ldr	r3, [pc, #132]	@ (8002848 <HAL_RCC_ClockConfig+0x1ec>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e036      	b.n	8002840 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027de:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4918      	ldr	r1, [pc, #96]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d009      	beq.n	8002810 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027fc:	4b13      	ldr	r3, [pc, #76]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4910      	ldr	r1, [pc, #64]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002810:	f000 f824 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	490b      	ldr	r1, [pc, #44]	@ (8002850 <HAL_RCC_ClockConfig+0x1f4>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
 800282c:	4a09      	ldr	r2, [pc, #36]	@ (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 800282e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_RCC_ClockConfig+0x1fc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fedd 	bl	80015f4 <HAL_InitTick>
 800283a:	4603      	mov	r3, r0
 800283c:	72fb      	strb	r3, [r7, #11]

  return status;
 800283e:	7afb      	ldrb	r3, [r7, #11]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	08012230 	.word	0x08012230
 8002854:	20000088 	.word	0x20000088
 8002858:	2000008c 	.word	0x2000008c

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	@ 0x24
 8002860:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286a:	4b3e      	ldr	r3, [pc, #248]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002874:	4b3b      	ldr	r3, [pc, #236]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x34>
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d121      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d11e      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002890:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	e005      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d102      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028d4:	4b25      	ldr	r3, [pc, #148]	@ (800296c <HAL_RCC_GetSysClockFreq+0x110>)
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	e004      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028e0:	4b23      	ldr	r3, [pc, #140]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x114>)
 80028e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d134      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d003      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0xa6>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d003      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0xac>
 8002900:	e005      	b.n	800290e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002902:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <HAL_RCC_GetSysClockFreq+0x110>)
 8002904:	617b      	str	r3, [r7, #20]
      break;
 8002906:	e005      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002908:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x114>)
 800290a:	617b      	str	r3, [r7, #20]
      break;
 800290c:	e002      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	617b      	str	r3, [r7, #20]
      break;
 8002912:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002914:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	3301      	adds	r3, #1
 8002920:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002922:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	fb03 f202 	mul.w	r2, r3, r2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800293a:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	0e5b      	lsrs	r3, r3, #25
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	3301      	adds	r3, #1
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002954:	69bb      	ldr	r3, [r7, #24]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	08012248 	.word	0x08012248
 800296c:	00f42400 	.word	0x00f42400
 8002970:	007a1200 	.word	0x007a1200

08002974 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b03      	ldr	r3, [pc, #12]	@ (8002988 <HAL_RCC_GetHCLKFreq+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000088 	.word	0x20000088

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002990:	f7ff fff0 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4904      	ldr	r1, [pc, #16]	@ (80029b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	08012240 	.word	0x08012240

080029b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029bc:	f7ff ffda 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0adb      	lsrs	r3, r3, #11
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4904      	ldr	r1, [pc, #16]	@ (80029e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	08012240 	.word	0x08012240

080029e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029f0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029fc:	f7ff f98a 	bl	8001d14 <HAL_PWREx_GetVoltageRange>
 8002a00:	6178      	str	r0, [r7, #20]
 8002a02:	e014      	b.n	8002a2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a04:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a08:	4a24      	ldr	r2, [pc, #144]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a10:	4b22      	ldr	r3, [pc, #136]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a1c:	f7ff f97a 	bl	8001d14 <HAL_PWREx_GetVoltageRange>
 8002a20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a22:	4b1e      	ldr	r3, [pc, #120]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a26:	4a1d      	ldr	r2, [pc, #116]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a34:	d10b      	bne.n	8002a4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b80      	cmp	r3, #128	@ 0x80
 8002a3a:	d919      	bls.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a40:	d902      	bls.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a42:	2302      	movs	r3, #2
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	e013      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a48:	2301      	movs	r3, #1
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	e010      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b80      	cmp	r3, #128	@ 0x80
 8002a52:	d902      	bls.n	8002a5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a54:	2303      	movs	r3, #3
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	e00a      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b80      	cmp	r3, #128	@ 0x80
 8002a5e:	d102      	bne.n	8002a66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a60:	2302      	movs	r3, #2
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	e004      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b70      	cmp	r3, #112	@ 0x70
 8002a6a:	d101      	bne.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 0207 	bic.w	r2, r3, #7
 8002a78:	4909      	ldr	r1, [pc, #36]	@ (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40022000 	.word	0x40022000

08002aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002aac:	2300      	movs	r3, #0
 8002aae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d031      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ac8:	d01a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002aca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ace:	d814      	bhi.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ad4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ad8:	d10f      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ada:	4b5d      	ldr	r3, [pc, #372]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4a5c      	ldr	r2, [pc, #368]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ae6:	e00c      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fa00 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002af8:	e003      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	74fb      	strb	r3, [r7, #19]
      break;
 8002afe:	e000      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b08:	4b51      	ldr	r3, [pc, #324]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	494e      	ldr	r1, [pc, #312]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b1e:	e001      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 809e 	beq.w	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b36:	4b46      	ldr	r3, [pc, #280]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00d      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4c:	4b40      	ldr	r3, [pc, #256]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b50:	4a3f      	ldr	r2, [pc, #252]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b58:	4b3d      	ldr	r3, [pc, #244]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b64:	2301      	movs	r3, #1
 8002b66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b68:	4b3a      	ldr	r3, [pc, #232]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a39      	ldr	r2, [pc, #228]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b74:	f7fe fd8e 	bl	8001694 <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b7a:	e009      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7c:	f7fe fd8a 	bl	8001694 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d902      	bls.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b8e:	e005      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b90:	4b30      	ldr	r3, [pc, #192]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ef      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d15a      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01e      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d019      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bbe:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bca:	4b21      	ldr	r3, [pc, #132]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bda:	4b1d      	ldr	r3, [pc, #116]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bea:	4a19      	ldr	r2, [pc, #100]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d016      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fd4a 	bl	8001694 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c02:	e00b      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c04:	f7fe fd46 	bl	8001694 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d902      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	74fb      	strb	r3, [r7, #19]
            break;
 8002c1a:	e006      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0ec      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10b      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c30:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	4904      	ldr	r1, [pc, #16]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c46:	e009      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	74bb      	strb	r3, [r7, #18]
 8002c4c:	e006      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5c:	7c7b      	ldrb	r3, [r7, #17]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d105      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c62:	4b9b      	ldr	r3, [pc, #620]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c66:	4a9a      	ldr	r2, [pc, #616]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c7a:	4b95      	ldr	r3, [pc, #596]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c80:	f023 0203 	bic.w	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4991      	ldr	r1, [pc, #580]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c9c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca2:	f023 020c 	bic.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	4989      	ldr	r1, [pc, #548]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cbe:	4b84      	ldr	r3, [pc, #528]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	4980      	ldr	r1, [pc, #512]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ce0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cee:	4978      	ldr	r1, [pc, #480]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d02:	4b73      	ldr	r3, [pc, #460]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d10:	496f      	ldr	r1, [pc, #444]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d24:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	4967      	ldr	r1, [pc, #412]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d46:	4b62      	ldr	r3, [pc, #392]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	495e      	ldr	r1, [pc, #376]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d68:	4b59      	ldr	r3, [pc, #356]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d76:	4956      	ldr	r1, [pc, #344]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d8a:	4b51      	ldr	r3, [pc, #324]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d98:	494d      	ldr	r1, [pc, #308]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d028      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dac:	4b48      	ldr	r3, [pc, #288]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dba:	4945      	ldr	r1, [pc, #276]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dca:	d106      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dcc:	4b40      	ldr	r3, [pc, #256]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dd6:	60d3      	str	r3, [r2, #12]
 8002dd8:	e011      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002de2:	d10c      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f882 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002df0:	4603      	mov	r3, r0
 8002df2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d028      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e0a:	4b31      	ldr	r3, [pc, #196]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e10:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e18:	492d      	ldr	r1, [pc, #180]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e28:	d106      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e2a:	4b29      	ldr	r3, [pc, #164]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	4a28      	ldr	r2, [pc, #160]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e34:	60d3      	str	r3, [r2, #12]
 8002e36:	e011      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2101      	movs	r1, #1
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 f853 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e52:	7cfb      	ldrb	r3, [r7, #19]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01c      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e68:	4b19      	ldr	r3, [pc, #100]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e76:	4916      	ldr	r1, [pc, #88]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e86:	d10c      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f830 	bl	8002ef4 <RCCEx_PLLSAI1_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8002e9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ea0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eae:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebc:	4904      	ldr	r1, [pc, #16]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ec4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ed8:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f02:	4b74      	ldr	r3, [pc, #464]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d018      	beq.n	8002f40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f0e:	4b71      	ldr	r3, [pc, #452]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0203 	and.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d10d      	bne.n	8002f3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
       ||
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f26:	4b6b      	ldr	r3, [pc, #428]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
       ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d047      	beq.n	8002fca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	e044      	b.n	8002fca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d018      	beq.n	8002f7a <RCCEx_PLLSAI1_Config+0x86>
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d825      	bhi.n	8002f98 <RCCEx_PLLSAI1_Config+0xa4>
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d002      	beq.n	8002f56 <RCCEx_PLLSAI1_Config+0x62>
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d009      	beq.n	8002f68 <RCCEx_PLLSAI1_Config+0x74>
 8002f54:	e020      	b.n	8002f98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f56:	4b5f      	ldr	r3, [pc, #380]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11d      	bne.n	8002f9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f66:	e01a      	b.n	8002f9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f68:	4b5a      	ldr	r3, [pc, #360]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d116      	bne.n	8002fa2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f78:	e013      	b.n	8002fa2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f7a:	4b56      	ldr	r3, [pc, #344]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f86:	4b53      	ldr	r3, [pc, #332]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f96:	e006      	b.n	8002fa6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9c:	e004      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e002      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e000      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fae:	4b49      	ldr	r3, [pc, #292]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	4943      	ldr	r1, [pc, #268]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d17c      	bne.n	80030ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fd0:	4b40      	ldr	r3, [pc, #256]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a3f      	ldr	r2, [pc, #252]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fe fb5a 	bl	8001694 <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fe2:	e009      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fe4:	f7fe fb56 	bl	8001694 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d902      	bls.n	8002ff8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ff6:	e005      	b.n	8003004 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ff8:	4b36      	ldr	r3, [pc, #216]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ef      	bne.n	8002fe4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d15f      	bne.n	80030ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d110      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003010:	4b30      	ldr	r3, [pc, #192]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003018:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	0211      	lsls	r1, r2, #8
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	06d2      	lsls	r2, r2, #27
 8003028:	430a      	orrs	r2, r1
 800302a:	492a      	ldr	r1, [pc, #168]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800302c:	4313      	orrs	r3, r2
 800302e:	610b      	str	r3, [r1, #16]
 8003030:	e027      	b.n	8003082 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d112      	bne.n	800305e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003038:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003040:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6892      	ldr	r2, [r2, #8]
 8003048:	0211      	lsls	r1, r2, #8
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6912      	ldr	r2, [r2, #16]
 800304e:	0852      	lsrs	r2, r2, #1
 8003050:	3a01      	subs	r2, #1
 8003052:	0552      	lsls	r2, r2, #21
 8003054:	430a      	orrs	r2, r1
 8003056:	491f      	ldr	r1, [pc, #124]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003058:	4313      	orrs	r3, r2
 800305a:	610b      	str	r3, [r1, #16]
 800305c:	e011      	b.n	8003082 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800305e:	4b1d      	ldr	r3, [pc, #116]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003066:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6892      	ldr	r2, [r2, #8]
 800306e:	0211      	lsls	r1, r2, #8
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6952      	ldr	r2, [r2, #20]
 8003074:	0852      	lsrs	r2, r2, #1
 8003076:	3a01      	subs	r2, #1
 8003078:	0652      	lsls	r2, r2, #25
 800307a:	430a      	orrs	r2, r1
 800307c:	4915      	ldr	r1, [pc, #84]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800307e:	4313      	orrs	r3, r2
 8003080:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003082:	4b14      	ldr	r3, [pc, #80]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a13      	ldr	r2, [pc, #76]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003088:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800308c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe fb01 	bl	8001694 <HAL_GetTick>
 8003092:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003094:	e009      	b.n	80030aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003096:	f7fe fafd 	bl	8001694 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d902      	bls.n	80030aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	73fb      	strb	r3, [r7, #15]
          break;
 80030a8:	e005      	b.n	80030b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030aa:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ef      	beq.n	8003096 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030bc:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	4903      	ldr	r1, [pc, #12]	@ (80030d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000

080030d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e095      	b.n	8003216 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d108      	bne.n	8003104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030fa:	d009      	beq.n	8003110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]
 8003102:	e005      	b.n	8003110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe f85a 	bl	80011e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003146:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003150:	d902      	bls.n	8003158 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e002      	b.n	800315e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003158:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800315c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003166:	d007      	beq.n	8003178 <HAL_SPI_Init+0xa0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003170:	d002      	beq.n	8003178 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ba:	ea42 0103 	orr.w	r1, r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	0c1b      	lsrs	r3, r3, #16
 80031d4:	f003 0204 	and.w	r2, r3, #4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031f4:	ea42 0103 	orr.w	r1, r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b08a      	sub	sp, #40	@ 0x28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800322c:	2301      	movs	r3, #1
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003230:	f7fe fa30 	bl	8001694 <HAL_GetTick>
 8003234:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800323c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003244:	887b      	ldrh	r3, [r7, #2]
 8003246:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003248:	887b      	ldrh	r3, [r7, #2]
 800324a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800324c:	7ffb      	ldrb	r3, [r7, #31]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d00c      	beq.n	800326c <HAL_SPI_TransmitReceive+0x4e>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003258:	d106      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x4a>
 8003262:	7ffb      	ldrb	r3, [r7, #31]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d001      	beq.n	800326c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
 800326a:	e1f3      	b.n	8003654 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_SPI_TransmitReceive+0x60>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_SPI_TransmitReceive+0x60>
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e1e8      	b.n	8003654 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x72>
 800328c:	2302      	movs	r3, #2
 800328e:	e1e1      	b.n	8003654 <HAL_SPI_TransmitReceive+0x436>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d003      	beq.n	80032ac <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2205      	movs	r2, #5
 80032a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	887a      	ldrh	r2, [r7, #2]
 80032c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	887a      	ldrh	r2, [r7, #2]
 80032d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032ee:	d802      	bhi.n	80032f6 <HAL_SPI_TransmitReceive+0xd8>
 80032f0:	8abb      	ldrh	r3, [r7, #20]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d908      	bls.n	8003308 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	e007      	b.n	8003318 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003316:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003322:	2b40      	cmp	r3, #64	@ 0x40
 8003324:	d007      	beq.n	8003336 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800333e:	f240 8083 	bls.w	8003448 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x132>
 800334a:	8afb      	ldrh	r3, [r7, #22]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d16f      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003354:	881a      	ldrh	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	1c9a      	adds	r2, r3, #2
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003374:	e05c      	b.n	8003430 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d11b      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x19e>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d016      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x19e>
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	2b01      	cmp	r3, #1
 8003392:	d113      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003398:	881a      	ldrh	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a4:	1c9a      	adds	r2, r3, #2
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d11c      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x1e6>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	b292      	uxth	r2, r2
 80033e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003400:	2301      	movs	r3, #1
 8003402:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003404:	f7fe f946 	bl	8001694 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003410:	429a      	cmp	r2, r3
 8003412:	d80d      	bhi.n	8003430 <HAL_SPI_TransmitReceive+0x212>
 8003414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800341a:	d009      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e111      	b.n	8003654 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d19d      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x158>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d197      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x158>
 8003446:	e0e5      	b.n	8003614 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_SPI_TransmitReceive+0x23a>
 8003450:	8afb      	ldrh	r3, [r7, #22]
 8003452:	2b01      	cmp	r3, #1
 8003454:	f040 80d1 	bne.w	80035fa <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d912      	bls.n	8003488 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	881a      	ldrh	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003472:	1c9a      	adds	r2, r3, #2
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b02      	subs	r3, #2
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003486:	e0b8      	b.n	80035fa <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	330c      	adds	r3, #12
 8003492:	7812      	ldrb	r2, [r2, #0]
 8003494:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ae:	e0a4      	b.n	80035fa <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d134      	bne.n	8003528 <HAL_SPI_TransmitReceive+0x30a>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d02f      	beq.n	8003528 <HAL_SPI_TransmitReceive+0x30a>
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d12c      	bne.n	8003528 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d912      	bls.n	80034fe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	1c9a      	adds	r2, r3, #2
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b02      	subs	r3, #2
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034fc:	e012      	b.n	8003524 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	330c      	adds	r3, #12
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d148      	bne.n	80035c8 <HAL_SPI_TransmitReceive+0x3aa>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d042      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d923      	bls.n	8003596 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	b292      	uxth	r2, r2
 800355a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	1c9a      	adds	r2, r3, #2
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b02      	subs	r3, #2
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d81f      	bhi.n	80035c4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	e016      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f103 020c 	add.w	r2, r3, #12
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	7812      	ldrb	r2, [r2, #0]
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035c4:	2301      	movs	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035c8:	f7fe f864 	bl	8001694 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d803      	bhi.n	80035e0 <HAL_SPI_TransmitReceive+0x3c2>
 80035d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035de:	d102      	bne.n	80035e6 <HAL_SPI_TransmitReceive+0x3c8>
 80035e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e02c      	b.n	8003654 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f af55 	bne.w	80034b0 <HAL_SPI_TransmitReceive+0x292>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	f47f af4e 	bne.w	80034b0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f93d 	bl	8003898 <SPI_EndRxTxTransaction>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e00e      	b.n	8003654 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003652:	2300      	movs	r3, #0
  }
}
 8003654:	4618      	mov	r0, r3
 8003656:	3728      	adds	r7, #40	@ 0x28
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800366c:	f7fe f812 	bl	8001694 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	4413      	add	r3, r2
 800367a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800367c:	f7fe f80a 	bl	8001694 <HAL_GetTick>
 8003680:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003682:	4b39      	ldr	r3, [pc, #228]	@ (8003768 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	015b      	lsls	r3, r3, #5
 8003688:	0d1b      	lsrs	r3, r3, #20
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	fb02 f303 	mul.w	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003692:	e054      	b.n	800373e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800369a:	d050      	beq.n	800373e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800369c:	f7fd fffa 	bl	8001694 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d902      	bls.n	80036b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d13d      	bne.n	800372e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ca:	d111      	bne.n	80036f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036d4:	d004      	beq.n	80036e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036de:	d107      	bne.n	80036f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036f8:	d10f      	bne.n	800371a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e017      	b.n	800375e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3b01      	subs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4013      	ands	r3, r2
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	429a      	cmp	r2, r3
 800374c:	bf0c      	ite	eq
 800374e:	2301      	moveq	r3, #1
 8003750:	2300      	movne	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	429a      	cmp	r2, r3
 800375a:	d19b      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000088 	.word	0x20000088

0800376c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08a      	sub	sp, #40	@ 0x28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800377e:	f7fd ff89 	bl	8001694 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	4413      	add	r3, r2
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800378e:	f7fd ff81 	bl	8001694 <HAL_GetTick>
 8003792:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800379c:	4b3d      	ldr	r3, [pc, #244]	@ (8003894 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	00da      	lsls	r2, r3, #3
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	0d1b      	lsrs	r3, r3, #20
 80037ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037b4:	e060      	b.n	8003878 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80037bc:	d107      	bne.n	80037ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d104      	bne.n	80037ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037d4:	d050      	beq.n	8003878 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037d6:	f7fd ff5d 	bl	8001694 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d902      	bls.n	80037ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d13d      	bne.n	8003868 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003804:	d111      	bne.n	800382a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800380e:	d004      	beq.n	800381a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003818:	d107      	bne.n	800382a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003828:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003832:	d10f      	bne.n	8003854 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003852:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e010      	b.n	800388a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	3b01      	subs	r3, #1
 8003876:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	d196      	bne.n	80037b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3728      	adds	r7, #40	@ 0x28
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000088 	.word	0x20000088

08003898 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff ff5b 	bl	800376c <SPI_WaitFifoStateUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e027      	b.n	800391c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2200      	movs	r2, #0
 80038d4:	2180      	movs	r1, #128	@ 0x80
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff fec0 	bl	800365c <SPI_WaitFlagStateUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e014      	b.n	800391c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff ff34 	bl	800376c <SPI_WaitFifoStateUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e000      	b.n	800391c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e040      	b.n	80039b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd fdba 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	@ 0x24
 8003950:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fb0c 	bl	8003f88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f8af 	bl	8003ad4 <UART_SetConfig>
 8003976:	4603      	mov	r3, r0
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e01b      	b.n	80039b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800398e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800399e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fb8b 	bl	80040cc <UART_CheckIdleState>
 80039b6:	4603      	mov	r3, r0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d177      	bne.n	8003ac8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_UART_Transmit+0x24>
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e070      	b.n	8003aca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2221      	movs	r2, #33	@ 0x21
 80039f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039f6:	f7fd fe4d 	bl	8001694 <HAL_GetTick>
 80039fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a14:	d108      	bne.n	8003a28 <HAL_UART_Transmit+0x68>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	e003      	b.n	8003a30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a30:	e02f      	b.n	8003a92 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2180      	movs	r1, #128	@ 0x80
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fbed 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e03b      	b.n	8003aca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	881a      	ldrh	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a64:	b292      	uxth	r2, r2
 8003a66:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e007      	b.n	8003a80 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	781a      	ldrb	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1c9      	bne.n	8003a32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2140      	movs	r1, #64	@ 0x40
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fbb7 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e005      	b.n	8003aca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad8:	b08a      	sub	sp, #40	@ 0x28
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b9e      	ldr	r3, [pc, #632]	@ (8003d7c <UART_SetConfig+0x2a8>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a93      	ldr	r2, [pc, #588]	@ (8003d80 <UART_SetConfig+0x2ac>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b50:	430a      	orrs	r2, r1
 8003b52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a8a      	ldr	r2, [pc, #552]	@ (8003d84 <UART_SetConfig+0x2b0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d126      	bne.n	8003bac <UART_SetConfig+0xd8>
 8003b5e:	4b8a      	ldr	r3, [pc, #552]	@ (8003d88 <UART_SetConfig+0x2b4>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d81b      	bhi.n	8003ba4 <UART_SetConfig+0xd0>
 8003b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b74 <UART_SetConfig+0xa0>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003b85 	.word	0x08003b85
 8003b78:	08003b95 	.word	0x08003b95
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b9d 	.word	0x08003b9d
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8a:	e0ab      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b92:	e0a7      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003b94:	2304      	movs	r3, #4
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9a:	e0a3      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba2:	e09f      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003baa:	e09b      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a76      	ldr	r2, [pc, #472]	@ (8003d8c <UART_SetConfig+0x2b8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d138      	bne.n	8003c28 <UART_SetConfig+0x154>
 8003bb6:	4b74      	ldr	r3, [pc, #464]	@ (8003d88 <UART_SetConfig+0x2b4>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d82d      	bhi.n	8003c20 <UART_SetConfig+0x14c>
 8003bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bcc <UART_SetConfig+0xf8>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003c21 	.word	0x08003c21
 8003bd4:	08003c21 	.word	0x08003c21
 8003bd8:	08003c21 	.word	0x08003c21
 8003bdc:	08003c11 	.word	0x08003c11
 8003be0:	08003c21 	.word	0x08003c21
 8003be4:	08003c21 	.word	0x08003c21
 8003be8:	08003c21 	.word	0x08003c21
 8003bec:	08003c09 	.word	0x08003c09
 8003bf0:	08003c21 	.word	0x08003c21
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c21 	.word	0x08003c21
 8003bfc:	08003c19 	.word	0x08003c19
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c06:	e06d      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0e:	e069      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c10:	2304      	movs	r3, #4
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c16:	e065      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1e:	e061      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c26:	e05d      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	@ (8003d90 <UART_SetConfig+0x2bc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d125      	bne.n	8003c7e <UART_SetConfig+0x1aa>
 8003c32:	4b55      	ldr	r3, [pc, #340]	@ (8003d88 <UART_SetConfig+0x2b4>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c3c:	2b30      	cmp	r3, #48	@ 0x30
 8003c3e:	d016      	beq.n	8003c6e <UART_SetConfig+0x19a>
 8003c40:	2b30      	cmp	r3, #48	@ 0x30
 8003c42:	d818      	bhi.n	8003c76 <UART_SetConfig+0x1a2>
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d00a      	beq.n	8003c5e <UART_SetConfig+0x18a>
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d814      	bhi.n	8003c76 <UART_SetConfig+0x1a2>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <UART_SetConfig+0x182>
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d008      	beq.n	8003c66 <UART_SetConfig+0x192>
 8003c54:	e00f      	b.n	8003c76 <UART_SetConfig+0x1a2>
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c5c:	e042      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c64:	e03e      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c66:	2304      	movs	r3, #4
 8003c68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6c:	e03a      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c6e:	2308      	movs	r3, #8
 8003c70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c74:	e036      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c76:	2310      	movs	r3, #16
 8003c78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7c:	e032      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a3f      	ldr	r2, [pc, #252]	@ (8003d80 <UART_SetConfig+0x2ac>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d12a      	bne.n	8003cde <UART_SetConfig+0x20a>
 8003c88:	4b3f      	ldr	r3, [pc, #252]	@ (8003d88 <UART_SetConfig+0x2b4>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c96:	d01a      	beq.n	8003cce <UART_SetConfig+0x1fa>
 8003c98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c9c:	d81b      	bhi.n	8003cd6 <UART_SetConfig+0x202>
 8003c9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ca2:	d00c      	beq.n	8003cbe <UART_SetConfig+0x1ea>
 8003ca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ca8:	d815      	bhi.n	8003cd6 <UART_SetConfig+0x202>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <UART_SetConfig+0x1e2>
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cb2:	d008      	beq.n	8003cc6 <UART_SetConfig+0x1f2>
 8003cb4:	e00f      	b.n	8003cd6 <UART_SetConfig+0x202>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cbc:	e012      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc4:	e00e      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ccc:	e00a      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cd4:	e006      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003cd6:	2310      	movs	r3, #16
 8003cd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cdc:	e002      	b.n	8003ce4 <UART_SetConfig+0x210>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a25      	ldr	r2, [pc, #148]	@ (8003d80 <UART_SetConfig+0x2ac>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	f040 808a 	bne.w	8003e04 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d824      	bhi.n	8003d42 <UART_SetConfig+0x26e>
 8003cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8003d00 <UART_SetConfig+0x22c>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d25 	.word	0x08003d25
 8003d04:	08003d43 	.word	0x08003d43
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d43 	.word	0x08003d43
 8003d10:	08003d33 	.word	0x08003d33
 8003d14:	08003d43 	.word	0x08003d43
 8003d18:	08003d43 	.word	0x08003d43
 8003d1c:	08003d43 	.word	0x08003d43
 8003d20:	08003d3b 	.word	0x08003d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d24:	f7fe fe32 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8003d28:	61f8      	str	r0, [r7, #28]
        break;
 8003d2a:	e010      	b.n	8003d4e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d2c:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <UART_SetConfig+0x2c0>)
 8003d2e:	61fb      	str	r3, [r7, #28]
        break;
 8003d30:	e00d      	b.n	8003d4e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d32:	f7fe fd93 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8003d36:	61f8      	str	r0, [r7, #28]
        break;
 8003d38:	e009      	b.n	8003d4e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d3e:	61fb      	str	r3, [r7, #28]
        break;
 8003d40:	e005      	b.n	8003d4e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8109 	beq.w	8003f68 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d305      	bcc.n	8003d72 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d912      	bls.n	8003d98 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d78:	e0f6      	b.n	8003f68 <UART_SetConfig+0x494>
 8003d7a:	bf00      	nop
 8003d7c:	efff69f3 	.word	0xefff69f3
 8003d80:	40008000 	.word	0x40008000
 8003d84:	40013800 	.word	0x40013800
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40004400 	.word	0x40004400
 8003d90:	40004800 	.word	0x40004800
 8003d94:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	461c      	mov	r4, r3
 8003d9e:	4615      	mov	r5, r2
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	022b      	lsls	r3, r5, #8
 8003daa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dae:	0222      	lsls	r2, r4, #8
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	6849      	ldr	r1, [r1, #4]
 8003db4:	0849      	lsrs	r1, r1, #1
 8003db6:	2000      	movs	r0, #0
 8003db8:	4688      	mov	r8, r1
 8003dba:	4681      	mov	r9, r0
 8003dbc:	eb12 0a08 	adds.w	sl, r2, r8
 8003dc0:	eb43 0b09 	adc.w	fp, r3, r9
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dd2:	4650      	mov	r0, sl
 8003dd4:	4659      	mov	r1, fp
 8003dd6:	f7fc fa53 	bl	8000280 <__aeabi_uldivmod>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4613      	mov	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003de8:	d308      	bcc.n	8003dfc <UART_SetConfig+0x328>
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df0:	d204      	bcs.n	8003dfc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	e0b5      	b.n	8003f68 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e02:	e0b1      	b.n	8003f68 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e0c:	d15d      	bne.n	8003eca <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d827      	bhi.n	8003e66 <UART_SetConfig+0x392>
 8003e16:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <UART_SetConfig+0x348>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e51 	.word	0x08003e51
 8003e28:	08003e67 	.word	0x08003e67
 8003e2c:	08003e57 	.word	0x08003e57
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e67 	.word	0x08003e67
 8003e38:	08003e67 	.word	0x08003e67
 8003e3c:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7fe fda4 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8003e44:	61f8      	str	r0, [r7, #28]
        break;
 8003e46:	e014      	b.n	8003e72 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e48:	f7fe fdb6 	bl	80029b8 <HAL_RCC_GetPCLK2Freq>
 8003e4c:	61f8      	str	r0, [r7, #28]
        break;
 8003e4e:	e010      	b.n	8003e72 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b4c      	ldr	r3, [pc, #304]	@ (8003f84 <UART_SetConfig+0x4b0>)
 8003e52:	61fb      	str	r3, [r7, #28]
        break;
 8003e54:	e00d      	b.n	8003e72 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7fe fd01 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8003e5a:	61f8      	str	r0, [r7, #28]
        break;
 8003e5c:	e009      	b.n	8003e72 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e62:	61fb      	str	r3, [r7, #28]
        break;
 8003e64:	e005      	b.n	8003e72 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d077      	beq.n	8003f68 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	005a      	lsls	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	441a      	add	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b0f      	cmp	r3, #15
 8003e92:	d916      	bls.n	8003ec2 <UART_SetConfig+0x3ee>
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e9a:	d212      	bcs.n	8003ec2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f023 030f 	bic.w	r3, r3, #15
 8003ea4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	8afb      	ldrh	r3, [r7, #22]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	8afa      	ldrh	r2, [r7, #22]
 8003ebe:	60da      	str	r2, [r3, #12]
 8003ec0:	e052      	b.n	8003f68 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ec8:	e04e      	b.n	8003f68 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d827      	bhi.n	8003f22 <UART_SetConfig+0x44e>
 8003ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed8 <UART_SetConfig+0x404>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f05 	.word	0x08003f05
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f23 	.word	0x08003f23
 8003ee8:	08003f13 	.word	0x08003f13
 8003eec:	08003f23 	.word	0x08003f23
 8003ef0:	08003f23 	.word	0x08003f23
 8003ef4:	08003f23 	.word	0x08003f23
 8003ef8:	08003f1b 	.word	0x08003f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe fd46 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8003f00:	61f8      	str	r0, [r7, #28]
        break;
 8003f02:	e014      	b.n	8003f2e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe fd58 	bl	80029b8 <HAL_RCC_GetPCLK2Freq>
 8003f08:	61f8      	str	r0, [r7, #28]
        break;
 8003f0a:	e010      	b.n	8003f2e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f84 <UART_SetConfig+0x4b0>)
 8003f0e:	61fb      	str	r3, [r7, #28]
        break;
 8003f10:	e00d      	b.n	8003f2e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fe fca3 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8003f16:	61f8      	str	r0, [r7, #28]
        break;
 8003f18:	e009      	b.n	8003f2e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f1e:	61fb      	str	r3, [r7, #28]
        break;
 8003f20:	e005      	b.n	8003f2e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f2c:	bf00      	nop
    }

    if (pclk != 0U)
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d019      	beq.n	8003f68 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	085a      	lsrs	r2, r3, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	441a      	add	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b0f      	cmp	r3, #15
 8003f4c:	d909      	bls.n	8003f62 <UART_SetConfig+0x48e>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f54:	d205      	bcs.n	8003f62 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60da      	str	r2, [r3, #12]
 8003f60:	e002      	b.n	8003f68 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3728      	adds	r7, #40	@ 0x28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f82:	bf00      	nop
 8003f84:	00f42400 	.word	0x00f42400

08003f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01a      	beq.n	800409e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004086:	d10a      	bne.n	800409e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	605a      	str	r2, [r3, #4]
  }
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b098      	sub	sp, #96	@ 0x60
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040dc:	f7fd fada 	bl	8001694 <HAL_GetTick>
 80040e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d12e      	bne.n	800414e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f8:	2200      	movs	r2, #0
 80040fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f88c 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d021      	beq.n	800414e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800411e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004128:	647b      	str	r3, [r7, #68]	@ 0x44
 800412a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800412e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e6      	bne.n	800410a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e062      	b.n	8004214 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b04      	cmp	r3, #4
 800415a:	d149      	bne.n	80041f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800415c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004164:	2200      	movs	r2, #0
 8004166:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f856 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d03c      	beq.n	80041f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	623b      	str	r3, [r7, #32]
   return(result);
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800418a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004194:	633b      	str	r3, [r7, #48]	@ 0x30
 8004196:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800419a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3308      	adds	r3, #8
 80041c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041c8:	61fa      	str	r2, [r7, #28]
 80041ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	69b9      	ldr	r1, [r7, #24]
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	617b      	str	r3, [r7, #20]
   return(result);
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e5      	bne.n	80041a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e011      	b.n	8004214 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3758      	adds	r7, #88	@ 0x58
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422c:	e04f      	b.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004234:	d04b      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7fd fa2d 	bl	8001694 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <UART_WaitOnFlagUntilTimeout+0x30>
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e04e      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d037      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b80      	cmp	r3, #128	@ 0x80
 8004262:	d034      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b40      	cmp	r3, #64	@ 0x40
 8004268:	d031      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b08      	cmp	r3, #8
 8004276:	d110      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2208      	movs	r2, #8
 800427e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f838 	bl	80042f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2208      	movs	r2, #8
 800428a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e029      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a8:	d111      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f81e 	bl	80042f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e00f      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4013      	ands	r3, r2
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d0a0      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b095      	sub	sp, #84	@ 0x54
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800430c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800431c:	643b      	str	r3, [r7, #64]	@ 0x40
 800431e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004322:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e6      	bne.n	80042fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3308      	adds	r3, #8
 8004336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004350:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004352:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e5      	bne.n	8004330 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004368:	2b01      	cmp	r3, #1
 800436a:	d118      	bne.n	800439e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	60bb      	str	r3, [r7, #8]
   return(result);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	647b      	str	r3, [r7, #68]	@ 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	613b      	str	r3, [r7, #16]
   return(result);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e6      	bne.n	800436c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043b2:	bf00      	nop
 80043b4:	3754      	adds	r7, #84	@ 0x54
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <log_monitor_init>:
 *
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_monitor_init(void (*PrintString_Function)(char*)){
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	plog = PrintString_Function;
 80043c8:	4a04      	ldr	r2, [pc, #16]	@ (80043dc <log_monitor_init+0x1c>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6013      	str	r3, [r2, #0]
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000600 	.word	0x20000600

080043e0 <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 80043e0:	b40e      	push	{r1, r2, r3}
 80043e2:	b590      	push	{r4, r7, lr}
 80043e4:	b08a      	sub	sp, #40	@ 0x28
 80043e6:	af04      	add	r7, sp, #16
 80043e8:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 80043ea:	f7fd f953 	bl	8001694 <HAL_GetTick>
 80043ee:	6178      	str	r0, [r7, #20]
	char *Temp_buffer = NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 80043f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043f8:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 80043fa:	f107 0310 	add.w	r3, r7, #16
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004402:	4618      	mov	r0, r3
 8004404:	f00d f880 	bl	8011508 <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 8004408:	4b15      	ldr	r3, [pc, #84]	@ (8004460 <LOG_INFO+0x80>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <LOG_INFO+0x84>)
 8004410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004414:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <LOG_INFO+0x88>)
 8004416:	681c      	ldr	r4, [r3, #0]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4a14      	ldr	r2, [pc, #80]	@ (800446c <LOG_INFO+0x8c>)
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	f107 0008 	add.w	r0, r7, #8
 8004422:	9203      	str	r2, [sp, #12]
 8004424:	9302      	str	r3, [sp, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	4623      	mov	r3, r4
 8004430:	460a      	mov	r2, r1
 8004432:	490f      	ldr	r1, [pc, #60]	@ (8004470 <LOG_INFO+0x90>)
 8004434:	f00d f82c 	bl	8011490 <asiprintf>
	plog(Output_buffer);
 8004438:	4b0e      	ldr	r3, [pc, #56]	@ (8004474 <LOG_INFO+0x94>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	4610      	mov	r0, r2
 8004440:	4798      	blx	r3

	free(Temp_buffer);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4618      	mov	r0, r3
 8004446:	f00c ff6d 	bl	8011324 <free>
	free(Output_buffer);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4618      	mov	r0, r3
 800444e:	f00c ff69 	bl	8011324 <free>
}
 8004452:	bf00      	nop
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800445c:	b003      	add	sp, #12
 800445e:	4770      	bx	lr
 8004460:	20000091 	.word	0x20000091
 8004464:	200000b8 	.word	0x200000b8
 8004468:	20000098 	.word	0x20000098
 800446c:	200000b4 	.word	0x200000b4
 8004470:	08012210 	.word	0x08012210
 8004474:	20000600 	.word	0x20000600

08004478 <LOG_WARN>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_WARN(const char *tag,  const char *format, ...){
 8004478:	b40e      	push	{r1, r2, r3}
 800447a:	b590      	push	{r4, r7, lr}
 800447c:	b08a      	sub	sp, #40	@ 0x28
 800447e:	af04      	add	r7, sp, #16
 8004480:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8004482:	f7fd f907 	bl	8001694 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]
	char *Temp_buffer = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 800448c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004490:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 8004492:	f107 0310 	add.w	r3, r7, #16
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800449a:	4618      	mov	r0, r3
 800449c:	f00d f834 	bl	8011508 <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logw], log_level_str[1], time, tag, Temp_buffer, COLOR_END);
 80044a0:	4b15      	ldr	r3, [pc, #84]	@ (80044f8 <LOG_WARN+0x80>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	4b15      	ldr	r3, [pc, #84]	@ (80044fc <LOG_WARN+0x84>)
 80044a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044ac:	4b14      	ldr	r3, [pc, #80]	@ (8004500 <LOG_WARN+0x88>)
 80044ae:	685c      	ldr	r4, [r3, #4]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4a14      	ldr	r2, [pc, #80]	@ (8004504 <LOG_WARN+0x8c>)
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	f107 0008 	add.w	r0, r7, #8
 80044ba:	9203      	str	r2, [sp, #12]
 80044bc:	9302      	str	r3, [sp, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	4623      	mov	r3, r4
 80044c8:	460a      	mov	r2, r1
 80044ca:	490f      	ldr	r1, [pc, #60]	@ (8004508 <LOG_WARN+0x90>)
 80044cc:	f00c ffe0 	bl	8011490 <asiprintf>
	plog(Output_buffer);
 80044d0:	4b0e      	ldr	r3, [pc, #56]	@ (800450c <LOG_WARN+0x94>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	4610      	mov	r0, r2
 80044d8:	4798      	blx	r3

	free(Temp_buffer);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4618      	mov	r0, r3
 80044de:	f00c ff21 	bl	8011324 <free>
	free(Output_buffer);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f00c ff1d 	bl	8011324 <free>
}
 80044ea:	bf00      	nop
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80044f4:	b003      	add	sp, #12
 80044f6:	4770      	bx	lr
 80044f8:	20000092 	.word	0x20000092
 80044fc:	200000b8 	.word	0x200000b8
 8004500:	20000098 	.word	0x20000098
 8004504:	200000b4 	.word	0x200000b4
 8004508:	08012210 	.word	0x08012210
 800450c:	20000600 	.word	0x20000600

08004510 <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 8004510:	b40e      	push	{r1, r2, r3}
 8004512:	b590      	push	{r4, r7, lr}
 8004514:	b08a      	sub	sp, #40	@ 0x28
 8004516:	af04      	add	r7, sp, #16
 8004518:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 800451a:	f7fd f8bb 	bl	8001694 <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]
	char *Temp_buffer = NULL;
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8004524:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004528:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 800452a:	f107 0310 	add.w	r3, r7, #16
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004532:	4618      	mov	r0, r3
 8004534:	f00c ffe8 	bl	8011508 <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 8004538:	4b15      	ldr	r3, [pc, #84]	@ (8004590 <LOG_ERROR+0x80>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	4b15      	ldr	r3, [pc, #84]	@ (8004594 <LOG_ERROR+0x84>)
 8004540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004544:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <LOG_ERROR+0x88>)
 8004546:	689c      	ldr	r4, [r3, #8]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4a14      	ldr	r2, [pc, #80]	@ (800459c <LOG_ERROR+0x8c>)
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	f107 0008 	add.w	r0, r7, #8
 8004552:	9203      	str	r2, [sp, #12]
 8004554:	9302      	str	r3, [sp, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	4623      	mov	r3, r4
 8004560:	460a      	mov	r2, r1
 8004562:	490f      	ldr	r1, [pc, #60]	@ (80045a0 <LOG_ERROR+0x90>)
 8004564:	f00c ff94 	bl	8011490 <asiprintf>
	plog(Output_buffer);
 8004568:	4b0e      	ldr	r3, [pc, #56]	@ (80045a4 <LOG_ERROR+0x94>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	4610      	mov	r0, r2
 8004570:	4798      	blx	r3

	free(Temp_buffer);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4618      	mov	r0, r3
 8004576:	f00c fed5 	bl	8011324 <free>
	free(Output_buffer);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f00c fed1 	bl	8011324 <free>
}
 8004582:	bf00      	nop
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800458c:	b003      	add	sp, #12
 800458e:	4770      	bx	lr
 8004590:	20000093 	.word	0x20000093
 8004594:	200000b8 	.word	0x200000b8
 8004598:	20000098 	.word	0x20000098
 800459c:	200000b4 	.word	0x200000b4
 80045a0:	08012210 	.word	0x08012210
 80045a4:	20000600 	.word	0x20000600

080045a8 <LOG_DEBUG>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_DEBUG(const char *tag,  const char *format, ...){
 80045a8:	b40e      	push	{r1, r2, r3}
 80045aa:	b590      	push	{r4, r7, lr}
 80045ac:	b08a      	sub	sp, #40	@ 0x28
 80045ae:	af04      	add	r7, sp, #16
 80045b0:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 80045b2:	f7fd f86f 	bl	8001694 <HAL_GetTick>
 80045b6:	6178      	str	r0, [r7, #20]
	char *Temp_buffer = NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 80045bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045c0:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 80045c2:	f107 0310 	add.w	r3, r7, #16
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045ca:	4618      	mov	r0, r3
 80045cc:	f00c ff9c 	bl	8011508 <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logd], log_level_str[3], time, tag, Temp_buffer, COLOR_END);
 80045d0:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <LOG_DEBUG+0x80>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b15      	ldr	r3, [pc, #84]	@ (800462c <LOG_DEBUG+0x84>)
 80045d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045dc:	4b14      	ldr	r3, [pc, #80]	@ (8004630 <LOG_DEBUG+0x88>)
 80045de:	68dc      	ldr	r4, [r3, #12]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4a14      	ldr	r2, [pc, #80]	@ (8004634 <LOG_DEBUG+0x8c>)
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	f107 0008 	add.w	r0, r7, #8
 80045ea:	9203      	str	r2, [sp, #12]
 80045ec:	9302      	str	r3, [sp, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	4623      	mov	r3, r4
 80045f8:	460a      	mov	r2, r1
 80045fa:	490f      	ldr	r1, [pc, #60]	@ (8004638 <LOG_DEBUG+0x90>)
 80045fc:	f00c ff48 	bl	8011490 <asiprintf>
	plog(Output_buffer);
 8004600:	4b0e      	ldr	r3, [pc, #56]	@ (800463c <LOG_DEBUG+0x94>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	4610      	mov	r0, r2
 8004608:	4798      	blx	r3

	free(Temp_buffer);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4618      	mov	r0, r3
 800460e:	f00c fe89 	bl	8011324 <free>
	free(Output_buffer);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4618      	mov	r0, r3
 8004616:	f00c fe85 	bl	8011324 <free>
}
 800461a:	bf00      	nop
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004624:	b003      	add	sp, #12
 8004626:	4770      	bx	lr
 8004628:	20000094 	.word	0x20000094
 800462c:	200000b8 	.word	0x200000b8
 8004630:	20000098 	.word	0x20000098
 8004634:	200000b4 	.word	0x200000b4
 8004638:	08012210 	.word	0x08012210
 800463c:	20000600 	.word	0x20000600

08004640 <LOG_EVENT>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_EVENT(const char *tag,  const char *format, ...){
 8004640:	b40e      	push	{r1, r2, r3}
 8004642:	b590      	push	{r4, r7, lr}
 8004644:	b08a      	sub	sp, #40	@ 0x28
 8004646:	af04      	add	r7, sp, #16
 8004648:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 800464a:	f7fd f823 	bl	8001694 <HAL_GetTick>
 800464e:	6178      	str	r0, [r7, #20]
	char *Temp_buffer = NULL;
 8004650:	2300      	movs	r3, #0
 8004652:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8004654:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004658:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 800465a:	f107 0310 	add.w	r3, r7, #16
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004662:	4618      	mov	r0, r3
 8004664:	f00c ff50 	bl	8011508 <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logv], log_level_str[5], time, tag, Temp_buffer, COLOR_END);
 8004668:	4b15      	ldr	r3, [pc, #84]	@ (80046c0 <LOG_EVENT+0x80>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	4b15      	ldr	r3, [pc, #84]	@ (80046c4 <LOG_EVENT+0x84>)
 8004670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004674:	4b14      	ldr	r3, [pc, #80]	@ (80046c8 <LOG_EVENT+0x88>)
 8004676:	695c      	ldr	r4, [r3, #20]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4a14      	ldr	r2, [pc, #80]	@ (80046cc <LOG_EVENT+0x8c>)
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	f107 0008 	add.w	r0, r7, #8
 8004682:	9203      	str	r2, [sp, #12]
 8004684:	9302      	str	r3, [sp, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	9301      	str	r3, [sp, #4]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	4623      	mov	r3, r4
 8004690:	460a      	mov	r2, r1
 8004692:	490f      	ldr	r1, [pc, #60]	@ (80046d0 <LOG_EVENT+0x90>)
 8004694:	f00c fefc 	bl	8011490 <asiprintf>
	plog(Output_buffer);
 8004698:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <LOG_EVENT+0x94>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	4610      	mov	r0, r2
 80046a0:	4798      	blx	r3

	free(Temp_buffer);
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f00c fe3d 	bl	8011324 <free>
	free(Output_buffer);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f00c fe39 	bl	8011324 <free>
}
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80046bc:	b003      	add	sp, #12
 80046be:	4770      	bx	lr
 80046c0:	20000095 	.word	0x20000095
 80046c4:	200000b8 	.word	0x200000b8
 80046c8:	20000098 	.word	0x20000098
 80046cc:	200000b4 	.word	0x200000b4
 80046d0:	08012210 	.word	0x08012210
 80046d4:	20000600 	.word	0x20000600

080046d8 <st25r3911TxRxOn>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3911TxRxOn( void )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
    st25r3911SetRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 80046dc:	2148      	movs	r1, #72	@ 0x48
 80046de:	2002      	movs	r0, #2
 80046e0:	f000 fd6b 	bl	80051ba <st25r3911SetRegisterBits>
}
 80046e4:	bf00      	nop
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <st25r3911TxRxOff>:

void st25r3911TxRxOff( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
    st25r3911ClrRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 80046ec:	2148      	movs	r1, #72	@ 0x48
 80046ee:	2002      	movs	r0, #2
 80046f0:	f000 fd40 	bl	8005174 <st25r3911ClrRegisterBits>
}
 80046f4:	bf00      	nop
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <st25r3911OscOn>:


void st25r3911OscOn( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3911_REG_OP_CONTROL_en instead of ST25R3911_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3911CheckReg( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_en, ST25R3911_REG_OP_CONTROL_en ) )
 80046fc:	2280      	movs	r2, #128	@ 0x80
 80046fe:	2180      	movs	r1, #128	@ 0x80
 8004700:	2002      	movs	r0, #2
 8004702:	f000 f9b7 	bl	8004a74 <st25r3911CheckReg>
 8004706:	4603      	mov	r3, r0
 8004708:	f083 0301 	eor.w	r3, r3, #1
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d011      	beq.n	8004736 <st25r3911OscOn+0x3e>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3911GetInterrupt( ST25R3911_IRQ_MASK_OSC );
 8004712:	2080      	movs	r0, #128	@ 0x80
 8004714:	f001 f854 	bl	80057c0 <st25r3911GetInterrupt>
      
        /* enable oscillator frequency stable interrupt */
        st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_OSC);
 8004718:	2080      	movs	r0, #128	@ 0x80
 800471a:	f001 f88d 	bl	8005838 <st25r3911EnableInterrupts>

        /* enable oscillator and regulator output */
        st25r3911ModifyRegister(ST25R3911_REG_OP_CONTROL, 0x00, ST25R3911_REG_OP_CONTROL_en);
 800471e:	2280      	movs	r2, #128	@ 0x80
 8004720:	2100      	movs	r1, #0
 8004722:	2002      	movs	r0, #2
 8004724:	f000 fd7d 	bl	8005222 <st25r3911ModifyRegister>

        /* wait for the oscillator interrupt */
        st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_OSC, ST25R3911_OSC_STABLE_TIMEOUT);
 8004728:	210a      	movs	r1, #10
 800472a:	2080      	movs	r0, #128	@ 0x80
 800472c:	f000 fff4 	bl	8005718 <st25r3911WaitForInterruptsTimed>
        st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_OSC);
 8004730:	2080      	movs	r0, #128	@ 0x80
 8004732:	f001 f88d 	bl	8005850 <st25r3911DisableInterrupts>
    }
    
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}

0800473a <st25r3911Initialize>:


void st25r3911Initialize(void)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;

    /* first, reset the st25r3911 */
    st25r3911ExecuteCommand(ST25R3911_CMD_SET_DEFAULT);
 8004740:	20c1      	movs	r0, #193	@ 0xc1
 8004742:	f000 fe5d 	bl	8005400 <st25r3911ExecuteCommand>

    /* Set Operation Control Register to default value */
    st25r3911WriteRegister(ST25R3911_REG_OP_CONTROL, 0x00);
 8004746:	2100      	movs	r1, #0
 8004748:	2002      	movs	r0, #2
 800474a:	f000 fcc5 	bl	80050d8 <st25r3911WriteRegister>
        
    /* enable pull downs on miso line */
    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2, 0, 
 800474e:	2218      	movs	r2, #24
 8004750:	2100      	movs	r1, #0
 8004752:	2001      	movs	r0, #1
 8004754:	f000 fd65 	bl	8005222 <st25r3911ModifyRegister>
            ST25R3911_REG_IO_CONF2_miso_pd1 |
            ST25R3911_REG_IO_CONF2_miso_pd2);

    /* after reset all interrupts are enabled. so disable them at first */
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_ALL);
 8004758:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800475c:	f001 f878 	bl	8005850 <st25r3911DisableInterrupts>
    /* and clear them, just to be sure... */
    st25r3911ClearInterrupts();
 8004760:	f001 f882 	bl	8005868 <st25r3911ClearInterrupts>
    
    st25r3911OscOn();
 8004764:	f7ff ffc8 	bl	80046f8 <st25r3911OscOn>
    
    /* Measure vdd and set sup3V bit accordingly */
    vdd_mV = st25r3911MeasureVoltage(ST25R3911_REG_REGULATOR_CONTROL_mpsv_vdd);
 8004768:	2000      	movs	r0, #0
 800476a:	f000 f925 	bl	80049b8 <st25r3911MeasureVoltage>
 800476e:	4603      	mov	r3, r0
 8004770:	80fb      	strh	r3, [r7, #6]

    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2,
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8004778:	d201      	bcs.n	800477e <st25r3911Initialize+0x44>
 800477a:	2380      	movs	r3, #128	@ 0x80
 800477c:	e000      	b.n	8004780 <st25r3911Initialize+0x46>
 800477e:	2300      	movs	r3, #0
 8004780:	461a      	mov	r2, r3
 8004782:	2180      	movs	r1, #128	@ 0x80
 8004784:	2001      	movs	r0, #1
 8004786:	f000 fd4c 	bl	8005222 <st25r3911ModifyRegister>
                         ST25R3911_REG_IO_CONF2_sup3V,
                         (uint8_t)((vdd_mV < 3600U)?ST25R3911_REG_IO_CONF2_sup3V:0U));

    /* Make sure Transmitter and Receiver are disabled */
    st25r3911TxRxOff();
 800478a:	f7ff ffad 	bl	80046e8 <st25r3911TxRxOff>
    
    return;
 800478e:	bf00      	nop
}
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <st25r3911AdjustRegulators>:

    return;
}

ReturnCode st25r3911AdjustRegulators(uint16_t* result_mV)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
    uint8_t result;
    uint8_t io_conf2;
    ReturnCode err = ERR_NONE;
 800479e:	2300      	movs	r3, #0
 80047a0:	81fb      	strh	r3, [r7, #14]

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3911SetRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 80047a2:	2180      	movs	r1, #128	@ 0x80
 80047a4:	202a      	movs	r0, #42	@ 0x2a
 80047a6:	f000 fd08 	bl	80051ba <st25r3911SetRegisterBits>
    st25r3911ClrRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 80047aa:	2180      	movs	r1, #128	@ 0x80
 80047ac:	202a      	movs	r0, #42	@ 0x2a
 80047ae:	f000 fce1 	bl	8005174 <st25r3911ClrRegisterBits>

    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_ADJUST_REGULATORS,
 80047b2:	f107 030d 	add.w	r3, r7, #13
 80047b6:	2205      	movs	r2, #5
 80047b8:	212b      	movs	r1, #43	@ 0x2b
 80047ba:	20d6      	movs	r0, #214	@ 0xd6
 80047bc:	f000 fad2 	bl	8004d64 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_REGULATOR_RESULT,
                                    5,
                                    &result);
  
    st25r3911ReadRegister(ST25R3911_REG_IO_CONF2, &io_conf2);
 80047c0:	f107 030c 	add.w	r3, r7, #12
 80047c4:	4619      	mov	r1, r3
 80047c6:	2001      	movs	r0, #1
 80047c8:	f000 fb48 	bl	8004e5c <st25r3911ReadRegister>

    result >>= ST25R3911_REG_REGULATOR_RESULT_shift_reg;
 80047cc:	7b7b      	ldrb	r3, [r7, #13]
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	737b      	strb	r3, [r7, #13]
    result -= 5U;
 80047d4:	7b7b      	ldrb	r3, [r7, #13]
 80047d6:	3b05      	subs	r3, #5
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	737b      	strb	r3, [r7, #13]
    if (result_mV != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d029      	beq.n	8004836 <st25r3911AdjustRegulators+0xa0>
    {
        if((io_conf2 & ST25R3911_REG_IO_CONF2_sup3V) != 0U)
 80047e2:	7b3b      	ldrb	r3, [r7, #12]
 80047e4:	b25b      	sxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	da15      	bge.n	8004816 <st25r3911AdjustRegulators+0x80>
        {
            *result_mV = 2400;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80047f0:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 100U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	881a      	ldrh	r2, [r3, #0]
 80047f6:	7b7b      	ldrb	r3, [r7, #13]
 80047f8:	4619      	mov	r1, r3
 80047fa:	0089      	lsls	r1, r1, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	4619      	mov	r1, r3
 8004800:	0088      	lsls	r0, r1, #2
 8004802:	4619      	mov	r1, r3
 8004804:	4603      	mov	r3, r0
 8004806:	440b      	add	r3, r1
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	b29b      	uxth	r3, r3
 800480c:	4413      	add	r3, r2
 800480e:	b29a      	uxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	e00f      	b.n	8004836 <st25r3911AdjustRegulators+0xa0>
        }
        else
        {
            *result_mV = 3900;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f640 723c 	movw	r2, #3900	@ 0xf3c
 800481c:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 120U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	881a      	ldrh	r2, [r3, #0]
 8004822:	7b7b      	ldrb	r3, [r7, #13]
 8004824:	4619      	mov	r1, r3
 8004826:	0109      	lsls	r1, r1, #4
 8004828:	1acb      	subs	r3, r1, r3
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	b29b      	uxth	r3, r3
 800482e:	4413      	add	r3, r2
 8004830:	b29a      	uxth	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	801a      	strh	r2, [r3, #0]
        }
    }
    return err;
 8004836:	89fb      	ldrh	r3, [r7, #14]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <st25r3911MeasureAmplitude>:

void st25r3911MeasureAmplitude(uint8_t* result)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_AMPLITUDE,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	220a      	movs	r2, #10
 800484c:	2120      	movs	r1, #32
 800484e:	20d3      	movs	r0, #211	@ 0xd3
 8004850:	f000 fa88 	bl	8004d64 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <st25r3911MeasurePhase>:

void st25r3911MeasurePhase(uint8_t* result)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_PHASE,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	220a      	movs	r2, #10
 8004868:	2120      	movs	r1, #32
 800486a:	20d9      	movs	r0, #217	@ 0xd9
 800486c:	f000 fa7a 	bl	8004d64 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <st25r3911MeasureCapacitance>:

void st25r3911MeasureCapacitance(uint8_t* result)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_CAPACITANCE, 
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	220a      	movs	r2, #10
 8004884:	2120      	movs	r1, #32
 8004886:	20de      	movs	r0, #222	@ 0xde
 8004888:	f000 fa6c 	bl	8004d64 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <st25r3911CalibrateAntenna>:

void st25r3911CalibrateAntenna(uint8_t* result)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_CALIBRATE_ANTENNA,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	220a      	movs	r2, #10
 80048a0:	2123      	movs	r1, #35	@ 0x23
 80048a2:	20d8      	movs	r0, #216	@ 0xd8
 80048a4:	f000 fa5e 	bl	8004d64 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_ANT_CAL_RESULT,
                                    10,
                                    result);
}
 80048a8:	bf00      	nop
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <st25r3911CalibrateCapacitiveSensor>:
                                    result);
}


ReturnCode st25r3911CalibrateCapacitiveSensor(uint8_t* result)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_mask_cs_mcal );
 80048b8:	21f8      	movs	r1, #248	@ 0xf8
 80048ba:	202e      	movs	r0, #46	@ 0x2e
 80048bc:	f000 fc5a 	bl	8005174 <st25r3911ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_CALIBRATE_C_SENSOR, ST25R3911_REG_CAP_SENSOR_RESULT, ST25R3911_TOUT_CALIBRATE_CAP_SENSOR, &res );
 80048c0:	f107 030d 	add.w	r3, r7, #13
 80048c4:	2204      	movs	r2, #4
 80048c6:	212f      	movs	r1, #47	@ 0x2f
 80048c8:	20dd      	movs	r0, #221	@ 0xdd
 80048ca:	f000 fa4b 	bl	8004d64 <st25r3911ExecuteCommandAndGetResult>
 80048ce:	4603      	mov	r3, r0
 80048d0:	81fb      	strh	r3, [r7, #14]
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 80048d2:	7b7b      	ldrb	r3, [r7, #13]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 80048dc:	7b7b      	ldrb	r3, [r7, #13]
 80048de:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 80048e6:	89fb      	ldrh	r3, [r7, #14]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <st25r3911CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e008      	b.n	8004902 <st25r3911CalibrateCapacitiveSensor+0x52>
    }
    
    if( result != NULL )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <st25r3911CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3911_REG_CAP_SENSOR_CONTROL_shift_cs_mcal);
 80048f6:	7b7b      	ldrb	r3, [r7, #13]
 80048f8:	08db      	lsrs	r3, r3, #3
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <st25r3911SetBitrate>:


ReturnCode st25r3911SetBitrate(uint8_t txRate, uint8_t rxRate)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	4603      	mov	r3, r0
 8004912:	460a      	mov	r2, r1
 8004914:	71fb      	strb	r3, [r7, #7]
 8004916:	4613      	mov	r3, r2
 8004918:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3911ReadRegister(ST25R3911_REG_BIT_RATE, &reg);
 800491a:	f107 030f 	add.w	r3, r7, #15
 800491e:	4619      	mov	r1, r3
 8004920:	2004      	movs	r0, #4
 8004922:	f000 fa9b 	bl	8004e5c <st25r3911ReadRegister>
    if (rxRate != ST25R3911_BR_DO_NOT_SET)
 8004926:	79bb      	ldrb	r3, [r7, #6]
 8004928:	2bff      	cmp	r3, #255	@ 0xff
 800492a:	d00e      	beq.n	800494a <st25r3911SetBitrate+0x40>
    {
        if(rxRate > ST25R3911_BR_3390)
 800492c:	79bb      	ldrb	r3, [r7, #6]
 800492e:	2b05      	cmp	r3, #5
 8004930:	d901      	bls.n	8004936 <st25r3911SetBitrate+0x2c>
        {
            return ERR_PARAM;
 8004932:	2307      	movs	r3, #7
 8004934:	e025      	b.n	8004982 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_rxrate);     /* MISRA 10.3 */
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	f023 030f 	bic.w	r3, r3, #15
 800493c:	b2db      	uxtb	r3, r3
 800493e:	73fb      	strb	r3, [r7, #15]
            reg |= rxRate << ST25R3911_REG_BIT_RATE_shift_rxrate;
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	79bb      	ldrb	r3, [r7, #6]
 8004944:	4313      	orrs	r3, r2
 8004946:	b2db      	uxtb	r3, r3
 8004948:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (txRate != ST25R3911_BR_DO_NOT_SET)
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	2bff      	cmp	r3, #255	@ 0xff
 800494e:	d012      	beq.n	8004976 <st25r3911SetBitrate+0x6c>
    {
        if(txRate > ST25R3911_BR_6780)
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	2b06      	cmp	r3, #6
 8004954:	d901      	bls.n	800495a <st25r3911SetBitrate+0x50>
        {
            return ERR_PARAM;
 8004956:	2307      	movs	r3, #7
 8004958:	e013      	b.n	8004982 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_txrate);     /* MISRA 10.3 */
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	b2db      	uxtb	r3, r3
 8004962:	73fb      	strb	r3, [r7, #15]
            reg |= txRate<<ST25R3911_REG_BIT_RATE_shift_txrate;
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	b25a      	sxtb	r2, r3
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	b25b      	sxtb	r3, r3
 800496e:	4313      	orrs	r3, r2
 8004970:	b25b      	sxtb	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	73fb      	strb	r3, [r7, #15]
        }
    }
    st25r3911WriteRegister(ST25R3911_REG_BIT_RATE, reg);
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	4619      	mov	r1, r3
 800497a:	2004      	movs	r0, #4
 800497c:	f000 fbac 	bl	80050d8 <st25r3911WriteRegister>
    
    return ERR_NONE;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <st25r3911MeasurePowerSupply>:

uint8_t st25r3911MeasurePowerSupply( uint8_t mpsv )
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	4603      	mov	r3, r0
 8004992:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3911ChangeRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_mask_mpsv, mpsv );
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	461a      	mov	r2, r3
 8004998:	2106      	movs	r1, #6
 800499a:	202a      	movs	r0, #42	@ 0x2a
 800499c:	f000 fc2b 	bl	80051f6 <st25r3911ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_MEASURE_VDD, ST25R3911_REG_AD_RESULT, 10, &result);
 80049a0:	f107 030f 	add.w	r3, r7, #15
 80049a4:	220a      	movs	r2, #10
 80049a6:	2120      	movs	r1, #32
 80049a8:	20df      	movs	r0, #223	@ 0xdf
 80049aa:	f000 f9db 	bl	8004d64 <st25r3911ExecuteCommandAndGetResult>

    return result;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <st25r3911MeasureVoltage>:

uint16_t st25r3911MeasureVoltage(uint8_t mpsv)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3911MeasurePowerSupply( mpsv );
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ffe0 	bl	800498a <st25r3911MeasurePowerSupply>
 80049ca:	4603      	mov	r3, r0
 80049cc:	73fb      	strb	r3, [r7, #15]

    mV = ((uint16_t)result) * 23U;
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	461a      	mov	r2, r3
 80049d4:	0052      	lsls	r2, r2, #1
 80049d6:	441a      	add	r2, r3
 80049d8:	00d2      	lsls	r2, r2, #3
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	81bb      	strh	r3, [r7, #12]
    mV += ((((uint16_t)result) * 438U) + 500U) / 1000U;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80049e4:	fb02 f303 	mul.w	r3, r2, r3
 80049e8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80049ec:	4a06      	ldr	r2, [pc, #24]	@ (8004a08 <st25r3911MeasureVoltage+0x50>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	099b      	lsrs	r3, r3, #6
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	89bb      	ldrh	r3, [r7, #12]
 80049f8:	4413      	add	r3, r2
 80049fa:	81bb      	strh	r3, [r7, #12]

    return mV;
 80049fc:	89bb      	ldrh	r3, [r7, #12]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	10624dd3 	.word	0x10624dd3

08004a0c <st25r3911StartGPTimer_8fcs>:
{
    return st25r3911NoResponseTime_64fcs;
}

void st25r3911StartGPTimer_8fcs(uint16_t gpt_8fcs, uint8_t trigger_source)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	460a      	mov	r2, r1
 8004a16:	80fb      	strh	r3, [r7, #6]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	717b      	strb	r3, [r7, #5]
    st25r3911SetGPTime_8fcs(gpt_8fcs);
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 f811 	bl	8004a46 <st25r3911SetGPTime_8fcs>

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, 
 8004a24:	797b      	ldrb	r3, [r7, #5]
 8004a26:	461a      	mov	r2, r3
 8004a28:	21e0      	movs	r1, #224	@ 0xe0
 8004a2a:	2011      	movs	r0, #17
 8004a2c:	f000 fbf9 	bl	8005222 <st25r3911ModifyRegister>
            ST25R3911_REG_GPT_CONTROL_gptc_mask, 
            trigger_source);
    if (trigger_source == 0U)
 8004a30:	797b      	ldrb	r3, [r7, #5]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <st25r3911StartGPTimer_8fcs+0x32>
    {
        st25r3911ExecuteCommand(ST25R3911_CMD_START_GP_TIMER);
 8004a36:	20e0      	movs	r0, #224	@ 0xe0
 8004a38:	f000 fce2 	bl	8005400 <st25r3911ExecuteCommand>
    }

    return;
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
}
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <st25r3911SetGPTime_8fcs>:

void st25r3911SetGPTime_8fcs(uint16_t gpt_8fcs)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	80fb      	strh	r3, [r7, #6]
    st25r3911WriteRegister(ST25R3911_REG_GPT1, (uint8_t)(gpt_8fcs >> 8));
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	2012      	movs	r0, #18
 8004a5c:	f000 fb3c 	bl	80050d8 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_GPT2, (uint8_t)(gpt_8fcs & 0xffU));
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	4619      	mov	r1, r3
 8004a66:	2013      	movs	r0, #19
 8004a68:	f000 fb36 	bl	80050d8 <st25r3911WriteRegister>

    return;
 8004a6c:	bf00      	nop
}
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <st25r3911CheckReg>:

bool st25r3911CheckReg( uint8_t reg, uint8_t mask, uint8_t value )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	71fb      	strb	r3, [r7, #7]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	71bb      	strb	r3, [r7, #6]
 8004a82:	4613      	mov	r3, r2
 8004a84:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( reg, &regVal );
 8004a8a:	f107 020f 	add.w	r2, r7, #15
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f9e2 	bl	8004e5c <st25r3911ReadRegister>
    
    return ((regVal & mask) == value );
 8004a98:	7bfa      	ldrb	r2, [r7, #15]
 8004a9a:	79bb      	ldrb	r3, [r7, #6]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	797a      	ldrb	r2, [r7, #5]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <st25r3911CheckChipID>:


bool st25r3911CheckChipID( uint8_t *rev )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 8004abc:	2300      	movs	r3, #0
 8004abe:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( ST25R3911_REG_IC_IDENTITY, &ID );
 8004ac0:	f107 030f 	add.w	r3, r7, #15
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	203f      	movs	r0, #63	@ 0x3f
 8004ac8:	f000 f9c8 	bl	8004e5c <st25r3911ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3911's IC type code */
    if( (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_type) != ST25R3911_REG_IC_IDENTITY_ic_type )
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d001      	beq.n	8004ada <st25r3911CheckChipID+0x26>
    {
        return false;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e009      	b.n	8004aee <st25r3911CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <st25r3911CheckChipID+0x38>
    {
        *rev = (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_rev);
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 8004aec:	2301      	movs	r3, #1
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <st25r3911SetNoResponseTime_64fcs>:

ReturnCode st25r3911SetNoResponseTime_64fcs(uint32_t nrt_64fcs)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
    ReturnCode err = ERR_NONE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	81fb      	strh	r3, [r7, #14]
    uint8_t nrt_step = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	737b      	strb	r3, [r7, #13]
    uint32_t noResponseTime_64fcs = nrt_64fcs;      /* MISRA 17.8: Use intermediate variable */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	60bb      	str	r3, [r7, #8]

    st25r3911NoResponseTime_64fcs = noResponseTime_64fcs;
 8004b0c:	4a18      	ldr	r2, [pc, #96]	@ (8004b70 <st25r3911SetNoResponseTime_64fcs+0x78>)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	6013      	str	r3, [r2, #0]
    if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b18:	d312      	bcc.n	8004b40 <st25r3911SetNoResponseTime_64fcs+0x48>
    {
        nrt_step = ST25R3911_REG_GPT_CONTROL_nrt_step;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	737b      	strb	r3, [r7, #13]
        noResponseTime_64fcs = (noResponseTime_64fcs + 63U) / 64U;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	333f      	adds	r3, #63	@ 0x3f
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	60bb      	str	r3, [r7, #8]
        if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b2c:	d304      	bcc.n	8004b38 <st25r3911SetNoResponseTime_64fcs+0x40>
        {
            noResponseTime_64fcs = 0xFFFFU;
 8004b2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b32:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;
 8004b34:	2307      	movs	r3, #7
 8004b36:	81fb      	strh	r3, [r7, #14]
        }
        st25r3911NoResponseTime_64fcs = 64U * noResponseTime_64fcs;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	019b      	lsls	r3, r3, #6
 8004b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b70 <st25r3911SetNoResponseTime_64fcs+0x78>)
 8004b3e:	6013      	str	r3, [r2, #0]
    }

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_step, nrt_step);
 8004b40:	7b7b      	ldrb	r3, [r7, #13]
 8004b42:	461a      	mov	r2, r3
 8004b44:	2101      	movs	r1, #1
 8004b46:	2011      	movs	r0, #17
 8004b48:	f000 fb6b 	bl	8005222 <st25r3911ModifyRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER1, (uint8_t)(noResponseTime_64fcs >> 8));
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	4619      	mov	r1, r3
 8004b54:	200f      	movs	r0, #15
 8004b56:	f000 fabf 	bl	80050d8 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER2, (uint8_t)(noResponseTime_64fcs & 0xffU));
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	4619      	mov	r1, r3
 8004b60:	2010      	movs	r0, #16
 8004b62:	f000 fab9 	bl	80050d8 <st25r3911WriteRegister>

    return err;
 8004b66:	89fb      	ldrh	r3, [r7, #14]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000604 	.word	0x20000604

08004b74 <st25r3911PerformCollisionAvoidance>:
    
    return err;
}

ReturnCode st25r3911PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	461a      	mov	r2, r3
 8004b82:	4623      	mov	r3, r4
 8004b84:	71fb      	strb	r3, [r7, #7]
 8004b86:	4603      	mov	r3, r0
 8004b88:	71bb      	strb	r3, [r7, #6]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	717b      	strb	r3, [r7, #5]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	713b      	strb	r3, [r7, #4]
    uint8_t  treMask;
    uint32_t irqs;
    
    if( (FieldONCmd != ST25R3911_CMD_INITIAL_RF_COLLISION)    && 
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	2bc8      	cmp	r3, #200	@ 0xc8
 8004b96:	d007      	beq.n	8004ba8 <st25r3911PerformCollisionAvoidance+0x34>
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	2bca      	cmp	r3, #202	@ 0xca
 8004b9c:	d004      	beq.n	8004ba8 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_0) && 
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	2bc9      	cmp	r3, #201	@ 0xc9
 8004ba2:	d001      	beq.n	8004ba8 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_N)   )
    {
        return ERR_PARAM;
 8004ba4:	2307      	movs	r3, #7
 8004ba6:	e056      	b.n	8004c56 <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) )
 8004ba8:	79bb      	ldrb	r3, [r7, #6]
 8004baa:	2bff      	cmp	r3, #255	@ 0xff
 8004bac:	d102      	bne.n	8004bb4 <st25r3911PerformCollisionAvoidance+0x40>
 8004bae:	797b      	ldrb	r3, [r7, #5]
 8004bb0:	2bff      	cmp	r3, #255	@ 0xff
 8004bb2:	d01e      	beq.n	8004bf2 <st25r3911PerformCollisionAvoidance+0x7e>
    {
        treMask = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 8004bb8:	79bb      	ldrb	r3, [r7, #6]
 8004bba:	2bff      	cmp	r3, #255	@ 0xff
 8004bbc:	d003      	beq.n	8004bc6 <st25r3911PerformCollisionAvoidance+0x52>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_trg;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8004bc4:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 8004bc6:	797b      	ldrb	r3, [r7, #5]
 8004bc8:	2bff      	cmp	r3, #255	@ 0xff
 8004bca:	d003      	beq.n	8004bd4 <st25r3911PerformCollisionAvoidance+0x60>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_rfe;
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	f043 030f 	orr.w	r3, r3, #15
 8004bd2:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3911ChangeRegisterBits( ST25R3911_REG_FIELD_THRESHOLD, treMask, (pdThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_trg) | (caThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_rfe ) );
 8004bd4:	79bb      	ldrb	r3, [r7, #6]
 8004bd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	797b      	ldrb	r3, [r7, #5]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	4313      	orrs	r3, r2
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	4619      	mov	r1, r3
 8004bec:	2029      	movs	r0, #41	@ 0x29
 8004bee:	f000 fb02 	bl	80051f6 <st25r3911ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3911ModifyRegister(ST25R3911_REG_AUX, ST25R3911_REG_AUX_mask_nfc_n, (nTRFW & ST25R3911_REG_AUX_mask_nfc_n) );
 8004bf2:	793b      	ldrb	r3, [r7, #4]
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2103      	movs	r1, #3
 8004bfe:	2009      	movs	r0, #9
 8004c00:	f000 fb0f 	bl	8005222 <st25r3911ModifyRegister>
    
    /* Enable and clear CA specific interrupts and execute command */
    st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 8004c04:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8004c08:	f000 fe16 	bl	8005838 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 8004c0c:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8004c10:	f000 fdd6 	bl	80057c0 <st25r3911GetInterrupt>
    
    st25r3911ExecuteCommand(FieldONCmd);
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fbf2 	bl	8005400 <st25r3911ExecuteCommand>
    
    irqs = st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT, ST25R3911_CA_TIMEOUT );
 8004c1c:	210a      	movs	r1, #10
 8004c1e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8004c22:	f000 fd79 	bl	8005718 <st25r3911WaitForInterruptsTimed>
 8004c26:	60b8      	str	r0, [r7, #8]
    
    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_EON) );
 8004c28:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004c2c:	f000 fdc8 	bl	80057c0 <st25r3911GetInterrupt>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT);
 8004c30:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8004c34:	f000 fe0c 	bl	8005850 <st25r3911DisableInterrupts>
    
    
    if((ST25R3911_IRQ_MASK_CAC & irqs) != 0U)                             /* Collision occurred */
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <st25r3911PerformCollisionAvoidance+0xd2>
    {
        return ERR_RF_COLLISION;
 8004c42:	231d      	movs	r3, #29
 8004c44:	e007      	b.n	8004c56 <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    if((ST25R3911_IRQ_MASK_CAT & irqs) != 0U)                             /* No Collision detected, Field On */
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <st25r3911PerformCollisionAvoidance+0xe0>
    {
        return ERR_NONE;
 8004c50:	2300      	movs	r3, #0
 8004c52:	e000      	b.n	8004c56 <st25r3911PerformCollisionAvoidance+0xe2>
    }

    /* No interrupt detected */
    return ERR_INTERNAL;
 8004c54:	230c      	movs	r3, #12
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd90      	pop	{r4, r7, pc}

08004c5e <st25r3911SetNumTxBits>:
    return ERR_NONE;
}


void st25r3911SetNumTxBits( uint32_t nBits )
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xffU)); 
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	201e      	movs	r0, #30
 8004c6e:	f000 fa33 	bl	80050d8 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xffU));    
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	0a1b      	lsrs	r3, r3, #8
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	4619      	mov	r1, r3
 8004c7a:	201d      	movs	r0, #29
 8004c7c:	f000 fa2c 	bl	80050d8 <st25r3911WriteRegister>
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <st25r3911StreamConfigure>:
    }
    return true;
}

ReturnCode st25r3911StreamConfigure(const struct st25r3911StreamConfig *config)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
    uint8_t smd = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	73fb      	strb	r3, [r7, #15]
    uint8_t mode;

    if (config->useBPSK != 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d016      	beq.n	8004cca <st25r3911StreamConfigure+0x42>
    {
        mode = ST25R3911_REG_MODE_om_bpsk_stream;
 8004c9c:	2378      	movs	r3, #120	@ 0x78
 8004c9e:	73bb      	strb	r3, [r7, #14]
        if ((config->din<2U) || (config->din>4U)) /* not in fc/4 .. fc/16 */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	785b      	ldrb	r3, [r3, #1]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d903      	bls.n	8004cb0 <st25r3911StreamConfigure+0x28>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	785b      	ldrb	r3, [r3, #1]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d901      	bls.n	8004cb4 <st25r3911StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 8004cb0:	2307      	movs	r3, #7
 8004cb2:	e053      	b.n	8004d5c <st25r3911StreamConfigure+0xd4>
        }
        smd |= (4U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	785b      	ldrb	r3, [r3, #1]
 8004cb8:	f1c3 0304 	rsb	r3, r3, #4
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	015b      	lsls	r3, r3, #5
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	73fb      	strb	r3, [r7, #15]
 8004cc8:	e01b      	b.n	8004d02 <st25r3911StreamConfigure+0x7a>

    }
    else
    {
        mode = ST25R3911_REG_MODE_om_subcarrier_stream;
 8004cca:	2370      	movs	r3, #112	@ 0x70
 8004ccc:	73bb      	strb	r3, [r7, #14]
        if ((config->din<3U) || (config->din>6U)) /* not in fc/8 .. fc/64 */
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d903      	bls.n	8004cde <st25r3911StreamConfigure+0x56>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d901      	bls.n	8004ce2 <st25r3911StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 8004cde:	2307      	movs	r3, #7
 8004ce0:	e03c      	b.n	8004d5c <st25r3911StreamConfigure+0xd4>
        }
        smd |= (6U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	785b      	ldrb	r3, [r3, #1]
 8004ce6:	f1c3 0306 	rsb	r3, r3, #6
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	015b      	lsls	r3, r3, #5
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	73fb      	strb	r3, [r7, #15]
        if (config->report_period_length == 0U) 
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	78db      	ldrb	r3, [r3, #3]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <st25r3911StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 8004cfe:	2307      	movs	r3, #7
 8004d00:	e02c      	b.n	8004d5c <st25r3911StreamConfigure+0xd4>
        }
    }

    if ((config->dout<1U) || (config->dout>7U)) /* not in fc/2 .. fc/128 */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	789b      	ldrb	r3, [r3, #2]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <st25r3911StreamConfigure+0x8a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	789b      	ldrb	r3, [r3, #2]
 8004d0e:	2b07      	cmp	r3, #7
 8004d10:	d901      	bls.n	8004d16 <st25r3911StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 8004d12:	2307      	movs	r3, #7
 8004d14:	e022      	b.n	8004d5c <st25r3911StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3911_REG_STREAM_MODE_shift_stx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	789b      	ldrb	r3, [r3, #2]
 8004d1a:	f1c3 0307 	rsb	r3, r3, #7
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	73fb      	strb	r3, [r7, #15]

    if (config->report_period_length > 3U) 
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	78db      	ldrb	r3, [r3, #3]
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d901      	bls.n	8004d32 <st25r3911StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 8004d2e:	2307      	movs	r3, #7
 8004d30:	e014      	b.n	8004d5c <st25r3911StreamConfigure+0xd4>
    }
    smd |= config->report_period_length << ST25R3911_REG_STREAM_MODE_shift_scp;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	78db      	ldrb	r3, [r3, #3]
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	b25a      	sxtb	r2, r3
 8004d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	b25b      	sxtb	r3, r3
 8004d42:	73fb      	strb	r3, [r7, #15]

    st25r3911WriteRegister(ST25R3911_REG_STREAM_MODE, smd);
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	4619      	mov	r1, r3
 8004d48:	2008      	movs	r0, #8
 8004d4a:	f000 f9c5 	bl	80050d8 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, ST25R3911_REG_MODE_mask_om, mode);
 8004d4e:	7bbb      	ldrb	r3, [r7, #14]
 8004d50:	461a      	mov	r2, r3
 8004d52:	2178      	movs	r1, #120	@ 0x78
 8004d54:	2003      	movs	r0, #3
 8004d56:	f000 fa4e 	bl	80051f6 <st25r3911ChangeRegisterBits>

    return ERR_NONE;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <st25r3911ExecuteCommandAndGetResult>:
 *  \param[out] result: 8 bit long result
 *
 *****************************************************************************
 */
static ReturnCode st25r3911ExecuteCommandAndGetResult(uint8_t cmd, uint8_t resreg, uint8_t sleeptime, uint8_t* result)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	71fb      	strb	r3, [r7, #7]
 8004d70:	460b      	mov	r3, r1
 8004d72:	71bb      	strb	r3, [r7, #6]
 8004d74:	4613      	mov	r3, r2
 8004d76:	717b      	strb	r3, [r7, #5]

    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8004d78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004d7c:	f000 fd5c 	bl	8005838 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8004d80:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004d84:	f000 fd1c 	bl	80057c0 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fb38 	bl	8005400 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 8004d90:	797b      	ldrb	r3, [r7, #5]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	4619      	mov	r1, r3
 8004d96:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004d9a:	f000 fcbd 	bl	8005718 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8004d9e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004da2:	f000 fd55 	bl	8005850 <st25r3911DisableInterrupts>
    
    /* read out the result if the pointer is not NULL */
    if (result != NULL)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <st25r3911ExecuteCommandAndGetResult+0x52>
    {
        st25r3911ReadRegister(resreg, result);
 8004dac:	79bb      	ldrb	r3, [r7, #6]
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 f853 	bl	8004e5c <st25r3911ReadRegister>
    }

    return ERR_NONE;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <__NVIC_EnableIRQ>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	db0b      	blt.n	8004dea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	f003 021f 	and.w	r2, r3, #31
 8004dd8:	4907      	ldr	r1, [pc, #28]	@ (8004df8 <__NVIC_EnableIRQ+0x38>)
 8004dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	2001      	movs	r0, #1
 8004de2:	fa00 f202 	lsl.w	r2, r0, r2
 8004de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	e000e100 	.word	0xe000e100

08004dfc <__NVIC_DisableIRQ>:
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	db12      	blt.n	8004e34 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	f003 021f 	and.w	r2, r3, #31
 8004e14:	490a      	ldr	r1, [pc, #40]	@ (8004e40 <__NVIC_DisableIRQ+0x44>)
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e22:	3320      	adds	r3, #32
 8004e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e28:	f3bf 8f4f 	dsb	sy
}
 8004e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004e2e:	f3bf 8f6f 	isb	sy
}
 8004e32:	bf00      	nop
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	e000e100 	.word	0xe000e100

08004e44 <st25r3911CheckFieldSetLED>:
* LOCAL FUNCTION PROTOTYPES
******************************************************************************
*/

static inline void st25r3911CheckFieldSetLED(uint8_t value)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
    else
    {
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
#endif /* PLATFORM_LED_FIELD_PIN */
    }
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <st25r3911ReadRegister>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911ReadRegister(uint8_t reg, uint8_t* value)
{ 
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	6039      	str	r1, [r7, #0]
 8004e66:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    platformProtectST25R391xComm();
 8004e68:	4b22      	ldr	r3, [pc, #136]	@ (8004ef4 <st25r3911ReadRegister+0x98>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	4b20      	ldr	r3, [pc, #128]	@ (8004ef4 <st25r3911ReadRegister+0x98>)
 8004e72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e74:	f3bf 8f4f 	dsb	sy
}
 8004e78:	bf00      	nop
 8004e7a:	2028      	movs	r0, #40	@ 0x28
 8004e7c:	f7ff ffbe 	bl	8004dfc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004e80:	f3bf 8f4f 	dsb	sy
}
 8004e84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004e86:	f3bf 8f6f 	isb	sy
}
 8004e8a:	bf00      	nop
    platformSpiSelect();
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e92:	4819      	ldr	r0, [pc, #100]	@ (8004ef8 <st25r3911ReadRegister+0x9c>)
 8004e94:	f7fc fef2 	bl	8001c7c <HAL_GPIO_WritePin>
  
    buf[0] = (reg | ST25R3911_READ_MODE);
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	733b      	strb	r3, [r7, #12]
    buf[1] = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	737b      	strb	r3, [r7, #13]
  
    platformSpiTxRx(buf, buf, 2);
 8004ea6:	f107 010c 	add.w	r1, r7, #12
 8004eaa:	f107 030c 	add.w	r3, r7, #12
 8004eae:	2202      	movs	r2, #2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fc f9f3 	bl	800129c <spiTxRx>
  
    if(value != NULL)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <st25r3911ReadRegister+0x66>
    {
      *value = buf[1];
 8004ebc:	7b7a      	ldrb	r2, [r7, #13]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004ec8:	480b      	ldr	r0, [pc, #44]	@ (8004ef8 <st25r3911ReadRegister+0x9c>)
 8004eca:	f7fc fed7 	bl	8001c7c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8004ece:	4b09      	ldr	r3, [pc, #36]	@ (8004ef4 <st25r3911ReadRegister+0x98>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	4b07      	ldr	r3, [pc, #28]	@ (8004ef4 <st25r3911ReadRegister+0x98>)
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <st25r3911ReadRegister+0x98>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <st25r3911ReadRegister+0x8e>
 8004ee2:	2028      	movs	r0, #40	@ 0x28
 8004ee4:	f7ff ff6c 	bl	8004dc0 <__NVIC_EnableIRQ>

    return;
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
}
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	2000043c 	.word	0x2000043c
 8004ef8:	48000400 	.word	0x48000400

08004efc <st25r3911ReadMultipleRegisters>:


void st25r3911ReadMultipleRegisters(uint8_t reg, uint8_t* values, uint8_t length)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	6039      	str	r1, [r7, #0]
 8004f06:	71fb      	strb	r3, [r7, #7]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	71bb      	strb	r3, [r7, #6]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = (reg | ST25R3911_READ_MODE);
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
  
    if (length > 0U)
 8004f16:	79bb      	ldrb	r3, [r7, #6]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d039      	beq.n	8004f90 <st25r3911ReadMultipleRegisters+0x94>
    {
        platformProtectST25R391xComm();
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <st25r3911ReadMultipleRegisters+0x9c>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	4b1c      	ldr	r3, [pc, #112]	@ (8004f98 <st25r3911ReadMultipleRegisters+0x9c>)
 8004f26:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f28:	f3bf 8f4f 	dsb	sy
}
 8004f2c:	bf00      	nop
 8004f2e:	2028      	movs	r0, #40	@ 0x28
 8004f30:	f7ff ff64 	bl	8004dfc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004f34:	f3bf 8f4f 	dsb	sy
}
 8004f38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f3a:	f3bf 8f6f 	isb	sy
}
 8004f3e:	bf00      	nop
        platformSpiSelect();
 8004f40:	2200      	movs	r2, #0
 8004f42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f46:	4815      	ldr	r0, [pc, #84]	@ (8004f9c <st25r3911ReadMultipleRegisters+0xa0>)
 8004f48:	f7fc fe98 	bl	8001c7c <HAL_GPIO_WritePin>
        ST_MEMCPY( values, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) );  /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /* ST25R391X_COM_SINGLETXRX */
  
        /* Since the result comes one byte later, let's first transmit the adddress with discarding the result */
        platformSpiTxRx(&cmd, NULL, ST25R3911_CMD_LEN);
 8004f4c:	f107 030f 	add.w	r3, r7, #15
 8004f50:	2201      	movs	r2, #1
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fc f9a1 	bl	800129c <spiTxRx>
        platformSpiTxRx(NULL, values, length);  
 8004f5a:	79bb      	ldrb	r3, [r7, #6]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	2000      	movs	r0, #0
 8004f64:	f7fc f99a 	bl	800129c <spiTxRx>
  
#endif  /* ST25R391X_COM_SINGLETXRX */

        platformSpiDeselect();
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f6e:	480b      	ldr	r0, [pc, #44]	@ (8004f9c <st25r3911ReadMultipleRegisters+0xa0>)
 8004f70:	f7fc fe84 	bl	8001c7c <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8004f74:	4b08      	ldr	r3, [pc, #32]	@ (8004f98 <st25r3911ReadMultipleRegisters+0x9c>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <st25r3911ReadMultipleRegisters+0x9c>)
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	4b05      	ldr	r3, [pc, #20]	@ (8004f98 <st25r3911ReadMultipleRegisters+0x9c>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d103      	bne.n	8004f90 <st25r3911ReadMultipleRegisters+0x94>
 8004f88:	2028      	movs	r0, #40	@ 0x28
 8004f8a:	f7ff ff19 	bl	8004dc0 <__NVIC_EnableIRQ>
    }
    
    return;
 8004f8e:	bf00      	nop
 8004f90:	bf00      	nop
}
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	2000043c 	.word	0x2000043c
 8004f9c:	48000400 	.word	0x48000400

08004fa0 <st25r3911ReadTestRegister>:

void st25r3911ReadTestRegister(uint8_t reg, uint8_t* value)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	6039      	str	r1, [r7, #0]
 8004faa:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */

    platformProtectST25R391xComm();
 8004fac:	4b23      	ldr	r3, [pc, #140]	@ (800503c <st25r3911ReadTestRegister+0x9c>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	4b21      	ldr	r3, [pc, #132]	@ (800503c <st25r3911ReadTestRegister+0x9c>)
 8004fb6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fb8:	f3bf 8f4f 	dsb	sy
}
 8004fbc:	bf00      	nop
 8004fbe:	2028      	movs	r0, #40	@ 0x28
 8004fc0:	f7ff ff1c 	bl	8004dfc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004fc4:	f3bf 8f4f 	dsb	sy
}
 8004fc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fca:	f3bf 8f6f 	isb	sy
}
 8004fce:	bf00      	nop
    platformSpiSelect();
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004fd6:	481a      	ldr	r0, [pc, #104]	@ (8005040 <st25r3911ReadTestRegister+0xa0>)
 8004fd8:	f7fc fe50 	bl	8001c7c <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8004fdc:	23fc      	movs	r3, #252	@ 0xfc
 8004fde:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_READ_MODE);
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, buf, 3);
 8004fee:	f107 010c 	add.w	r1, r7, #12
 8004ff2:	f107 030c 	add.w	r3, r7, #12
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fc f94f 	bl	800129c <spiTxRx>
    
    if(value != NULL)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <st25r3911ReadTestRegister+0x6a>
    {
      *value = buf[2];
 8005004:	7bba      	ldrb	r2, [r7, #14]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 800500a:	2201      	movs	r2, #1
 800500c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005010:	480b      	ldr	r0, [pc, #44]	@ (8005040 <st25r3911ReadTestRegister+0xa0>)
 8005012:	f7fc fe33 	bl	8001c7c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8005016:	4b09      	ldr	r3, [pc, #36]	@ (800503c <st25r3911ReadTestRegister+0x9c>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	3b01      	subs	r3, #1
 800501c:	b2da      	uxtb	r2, r3
 800501e:	4b07      	ldr	r3, [pc, #28]	@ (800503c <st25r3911ReadTestRegister+0x9c>)
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	4b06      	ldr	r3, [pc, #24]	@ (800503c <st25r3911ReadTestRegister+0x9c>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <st25r3911ReadTestRegister+0x92>
 800502a:	2028      	movs	r0, #40	@ 0x28
 800502c:	f7ff fec8 	bl	8004dc0 <__NVIC_EnableIRQ>

    return;
 8005030:	bf00      	nop
 8005032:	bf00      	nop
}
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	2000043c 	.word	0x2000043c
 8005040:	48000400 	.word	0x48000400

08005044 <st25r3911WriteTestRegister>:

void st25r3911WriteTestRegister(uint8_t reg, uint8_t value)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	460a      	mov	r2, r1
 800504e:	71fb      	strb	r3, [r7, #7]
 8005050:	4613      	mov	r3, r2
 8005052:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */
    
    platformProtectST25R391xComm();
 8005054:	4b1e      	ldr	r3, [pc, #120]	@ (80050d0 <st25r3911WriteTestRegister+0x8c>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	b2da      	uxtb	r2, r3
 800505c:	4b1c      	ldr	r3, [pc, #112]	@ (80050d0 <st25r3911WriteTestRegister+0x8c>)
 800505e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005060:	f3bf 8f4f 	dsb	sy
}
 8005064:	bf00      	nop
 8005066:	2028      	movs	r0, #40	@ 0x28
 8005068:	f7ff fec8 	bl	8004dfc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800506c:	f3bf 8f4f 	dsb	sy
}
 8005070:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005072:	f3bf 8f6f 	isb	sy
}
 8005076:	bf00      	nop
    platformSpiSelect();
 8005078:	2200      	movs	r2, #0
 800507a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800507e:	4815      	ldr	r0, [pc, #84]	@ (80050d4 <st25r3911WriteTestRegister+0x90>)
 8005080:	f7fc fdfc 	bl	8001c7c <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8005084:	23fc      	movs	r3, #252	@ 0xfc
 8005086:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_WRITE_MODE);
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	737b      	strb	r3, [r7, #13]
    buf[2] = value;
 800508c:	79bb      	ldrb	r3, [r7, #6]
 800508e:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, NULL, 3);
 8005090:	f107 030c 	add.w	r3, r7, #12
 8005094:	2203      	movs	r2, #3
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f7fc f8ff 	bl	800129c <spiTxRx>
  
    platformSpiDeselect();
 800509e:	2201      	movs	r2, #1
 80050a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80050a4:	480b      	ldr	r0, [pc, #44]	@ (80050d4 <st25r3911WriteTestRegister+0x90>)
 80050a6:	f7fc fde9 	bl	8001c7c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 80050aa:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <st25r3911WriteTestRegister+0x8c>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	4b07      	ldr	r3, [pc, #28]	@ (80050d0 <st25r3911WriteTestRegister+0x8c>)
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	4b06      	ldr	r3, [pc, #24]	@ (80050d0 <st25r3911WriteTestRegister+0x8c>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <st25r3911WriteTestRegister+0x82>
 80050be:	2028      	movs	r0, #40	@ 0x28
 80050c0:	f7ff fe7e 	bl	8004dc0 <__NVIC_EnableIRQ>

    return;
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
}
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	2000043c 	.word	0x2000043c
 80050d4:	48000400 	.word	0x48000400

080050d8 <st25r3911WriteRegister>:

void st25r3911WriteRegister(uint8_t reg, uint8_t value)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	460a      	mov	r2, r1
 80050e2:	71fb      	strb	r3, [r7, #7]
 80050e4:	4613      	mov	r3, r2
 80050e6:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    if (ST25R3911_REG_OP_CONTROL == reg)
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d103      	bne.n	80050f6 <st25r3911WriteRegister+0x1e>
    {
        st25r3911CheckFieldSetLED(value);
 80050ee:	79bb      	ldrb	r3, [r7, #6]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff fea7 	bl	8004e44 <st25r3911CheckFieldSetLED>
    }    
    
    platformProtectST25R391xComm();
 80050f6:	4b1d      	ldr	r3, [pc, #116]	@ (800516c <st25r3911WriteRegister+0x94>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	3301      	adds	r3, #1
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	4b1b      	ldr	r3, [pc, #108]	@ (800516c <st25r3911WriteRegister+0x94>)
 8005100:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005102:	f3bf 8f4f 	dsb	sy
}
 8005106:	bf00      	nop
 8005108:	2028      	movs	r0, #40	@ 0x28
 800510a:	f7ff fe77 	bl	8004dfc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800510e:	f3bf 8f4f 	dsb	sy
}
 8005112:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005114:	f3bf 8f6f 	isb	sy
}
 8005118:	bf00      	nop
    platformSpiSelect();
 800511a:	2200      	movs	r2, #0
 800511c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005120:	4813      	ldr	r0, [pc, #76]	@ (8005170 <st25r3911WriteRegister+0x98>)
 8005122:	f7fc fdab 	bl	8001c7c <HAL_GPIO_WritePin>

    buf[0] = reg | ST25R3911_WRITE_MODE;
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	733b      	strb	r3, [r7, #12]
    buf[1] = value;
 800512a:	79bb      	ldrb	r3, [r7, #6]
 800512c:	737b      	strb	r3, [r7, #13]
    
    platformSpiTxRx(buf, NULL, 2);
 800512e:	f107 030c 	add.w	r3, r7, #12
 8005132:	2202      	movs	r2, #2
 8005134:	2100      	movs	r1, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f7fc f8b0 	bl	800129c <spiTxRx>
    
    platformSpiDeselect();
 800513c:	2201      	movs	r2, #1
 800513e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005142:	480b      	ldr	r0, [pc, #44]	@ (8005170 <st25r3911WriteRegister+0x98>)
 8005144:	f7fc fd9a 	bl	8001c7c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8005148:	4b08      	ldr	r3, [pc, #32]	@ (800516c <st25r3911WriteRegister+0x94>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	3b01      	subs	r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	4b06      	ldr	r3, [pc, #24]	@ (800516c <st25r3911WriteRegister+0x94>)
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	4b05      	ldr	r3, [pc, #20]	@ (800516c <st25r3911WriteRegister+0x94>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d103      	bne.n	8005164 <st25r3911WriteRegister+0x8c>
 800515c:	2028      	movs	r0, #40	@ 0x28
 800515e:	f7ff fe2f 	bl	8004dc0 <__NVIC_EnableIRQ>

    return;
 8005162:	bf00      	nop
 8005164:	bf00      	nop
}
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	2000043c 	.word	0x2000043c
 8005170:	48000400 	.word	0x48000400

08005174 <st25r3911ClrRegisterBits>:

void st25r3911ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	460a      	mov	r2, r1
 800517e:	71fb      	strb	r3, [r7, #7]
 8005180:	4613      	mov	r3, r2
 8005182:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8005184:	f107 020f 	add.w	r2, r7, #15
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	4611      	mov	r1, r2
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fe65 	bl	8004e5c <st25r3911ReadRegister>
    tmp &= ~clr_mask;
 8005192:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005196:	43db      	mvns	r3, r3
 8005198:	b25a      	sxtb	r2, r3
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	b25b      	sxtb	r3, r3
 800519e:	4013      	ands	r3, r2
 80051a0:	b25b      	sxtb	r3, r3
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 80051a6:	7bfa      	ldrb	r2, [r7, #15]
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	4611      	mov	r1, r2
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff ff93 	bl	80050d8 <st25r3911WriteRegister>
    
    return;
 80051b2:	bf00      	nop
}
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <st25r3911SetRegisterBits>:


void st25r3911SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	4603      	mov	r3, r0
 80051c2:	460a      	mov	r2, r1
 80051c4:	71fb      	strb	r3, [r7, #7]
 80051c6:	4613      	mov	r3, r2
 80051c8:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 80051ca:	f107 020f 	add.w	r2, r7, #15
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fe42 	bl	8004e5c <st25r3911ReadRegister>
    tmp |= set_mask;
 80051d8:	7bfa      	ldrb	r2, [r7, #15]
 80051da:	79bb      	ldrb	r3, [r7, #6]
 80051dc:	4313      	orrs	r3, r2
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	4611      	mov	r1, r2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff ff75 	bl	80050d8 <st25r3911WriteRegister>
    
    return;
 80051ee:	bf00      	nop
}
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <st25r3911ChangeRegisterBits>:

void st25r3911ChangeRegisterBits(uint8_t reg, uint8_t valueMask, uint8_t value)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	4603      	mov	r3, r0
 80051fe:	71fb      	strb	r3, [r7, #7]
 8005200:	460b      	mov	r3, r1
 8005202:	71bb      	strb	r3, [r7, #6]
 8005204:	4613      	mov	r3, r2
 8005206:	717b      	strb	r3, [r7, #5]
    st25r3911ModifyRegister(reg, valueMask, (valueMask & value) );
 8005208:	79ba      	ldrb	r2, [r7, #6]
 800520a:	797b      	ldrb	r3, [r7, #5]
 800520c:	4013      	ands	r3, r2
 800520e:	b2da      	uxtb	r2, r3
 8005210:	79b9      	ldrb	r1, [r7, #6]
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 f804 	bl	8005222 <st25r3911ModifyRegister>
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <st25r3911ModifyRegister>:

void st25r3911ModifyRegister(uint8_t reg, uint8_t clr_mask, uint8_t set_mask)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	4603      	mov	r3, r0
 800522a:	71fb      	strb	r3, [r7, #7]
 800522c:	460b      	mov	r3, r1
 800522e:	71bb      	strb	r3, [r7, #6]
 8005230:	4613      	mov	r3, r2
 8005232:	717b      	strb	r3, [r7, #5]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8005234:	f107 020f 	add.w	r2, r7, #15
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fe0d 	bl	8004e5c <st25r3911ReadRegister>

    /* mask out the bits we don't want to change */
    tmp &= ~clr_mask;
 8005242:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005246:	43db      	mvns	r3, r3
 8005248:	b25a      	sxtb	r2, r3
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	b25b      	sxtb	r3, r3
 800524e:	4013      	ands	r3, r2
 8005250:	b25b      	sxtb	r3, r3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	73fb      	strb	r3, [r7, #15]
    /* set the new value */
    tmp |= set_mask;
 8005256:	7bfa      	ldrb	r2, [r7, #15]
 8005258:	797b      	ldrb	r3, [r7, #5]
 800525a:	4313      	orrs	r3, r2
 800525c:	b2db      	uxtb	r3, r3
 800525e:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	4611      	mov	r1, r2
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff ff36 	bl	80050d8 <st25r3911WriteRegister>

    return;
 800526c:	bf00      	nop
}
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <st25r3911ChangeTestRegisterBits>:

void st25r3911ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
 800527e:	460b      	mov	r3, r1
 8005280:	71bb      	strb	r3, [r7, #6]
 8005282:	4613      	mov	r3, r2
 8005284:	717b      	strb	r3, [r7, #5]
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    st25r3911ReadTestRegister(reg, &rdVal);
 8005286:	f107 020e 	add.w	r2, r7, #14
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	4611      	mov	r1, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fe86 	bl	8004fa0 <st25r3911ReadTestRegister>
    
    /* Compute new value */
    wrVal  = (rdVal & ~valueMask);
 8005294:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005298:	43db      	mvns	r3, r3
 800529a:	b25a      	sxtb	r2, r3
 800529c:	7bbb      	ldrb	r3, [r7, #14]
 800529e:	b25b      	sxtb	r3, r3
 80052a0:	4013      	ands	r3, r2
 80052a2:	b25b      	sxtb	r3, r3
 80052a4:	73fb      	strb	r3, [r7, #15]
    wrVal |= (value & valueMask);
 80052a6:	797a      	ldrb	r2, [r7, #5]
 80052a8:	79bb      	ldrb	r3, [r7, #6]
 80052aa:	4013      	ands	r3, r2
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	73fb      	strb	r3, [r7, #15]
    
    /* Write new reg value */
    st25r3911WriteTestRegister(reg, wrVal );
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	4611      	mov	r1, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff fec2 	bl	8005044 <st25r3911WriteTestRegister>
    
    return;
 80052c0:	bf00      	nop
}
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <st25r3911WriteFifo>:
    return;
}


void st25r3911WriteFifo(const uint8_t* values, uint8_t length)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	460b      	mov	r3, r1
 80052d2:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_LOAD;
 80052d4:	2380      	movs	r3, #128	@ 0x80
 80052d6:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */

    if (length > 0U)
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d039      	beq.n	8005352 <st25r3911WriteFifo+0x8a>
    {  
        platformProtectST25R391xComm();
 80052de:	4b1f      	ldr	r3, [pc, #124]	@ (800535c <st25r3911WriteFifo+0x94>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	3301      	adds	r3, #1
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	4b1d      	ldr	r3, [pc, #116]	@ (800535c <st25r3911WriteFifo+0x94>)
 80052e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80052ea:	f3bf 8f4f 	dsb	sy
}
 80052ee:	bf00      	nop
 80052f0:	2028      	movs	r0, #40	@ 0x28
 80052f2:	f7ff fd83 	bl	8004dfc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80052f6:	f3bf 8f4f 	dsb	sy
}
 80052fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052fc:	f3bf 8f6f 	isb	sy
}
 8005300:	bf00      	nop
        platformSpiSelect();
 8005302:	2200      	movs	r2, #0
 8005304:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005308:	4815      	ldr	r0, [pc, #84]	@ (8005360 <st25r3911WriteFifo+0x98>)
 800530a:	f7fc fcb7 	bl	8001c7c <HAL_GPIO_WritePin>

        platformSpiTxRx( comBuf, NULL, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 800530e:	f107 030f 	add.w	r3, r7, #15
 8005312:	2201      	movs	r2, #1
 8005314:	2100      	movs	r1, #0
 8005316:	4618      	mov	r0, r3
 8005318:	f7fb ffc0 	bl	800129c <spiTxRx>
        platformSpiTxRx( values, NULL, length );
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	2100      	movs	r1, #0
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fb ffb9 	bl	800129c <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiDeselect();
 800532a:	2201      	movs	r2, #1
 800532c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005330:	480b      	ldr	r0, [pc, #44]	@ (8005360 <st25r3911WriteFifo+0x98>)
 8005332:	f7fc fca3 	bl	8001c7c <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8005336:	4b09      	ldr	r3, [pc, #36]	@ (800535c <st25r3911WriteFifo+0x94>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	3b01      	subs	r3, #1
 800533c:	b2da      	uxtb	r2, r3
 800533e:	4b07      	ldr	r3, [pc, #28]	@ (800535c <st25r3911WriteFifo+0x94>)
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	4b06      	ldr	r3, [pc, #24]	@ (800535c <st25r3911WriteFifo+0x94>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <st25r3911WriteFifo+0x8a>
 800534a:	2028      	movs	r0, #40	@ 0x28
 800534c:	f7ff fd38 	bl	8004dc0 <__NVIC_EnableIRQ>
    }

    return;
 8005350:	bf00      	nop
 8005352:	bf00      	nop
}
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	2000043c 	.word	0x2000043c
 8005360:	48000400 	.word	0x48000400

08005364 <st25r3911ReadFifo>:

void st25r3911ReadFifo(uint8_t* buf, uint8_t length)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_READ;
 8005370:	23bf      	movs	r3, #191	@ 0xbf
 8005372:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
    
    if(length > 0U)
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d039      	beq.n	80053ee <st25r3911ReadFifo+0x8a>
    {
        platformProtectST25R391xComm();
 800537a:	4b1f      	ldr	r3, [pc, #124]	@ (80053f8 <st25r3911ReadFifo+0x94>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	3301      	adds	r3, #1
 8005380:	b2da      	uxtb	r2, r3
 8005382:	4b1d      	ldr	r3, [pc, #116]	@ (80053f8 <st25r3911ReadFifo+0x94>)
 8005384:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005386:	f3bf 8f4f 	dsb	sy
}
 800538a:	bf00      	nop
 800538c:	2028      	movs	r0, #40	@ 0x28
 800538e:	f7ff fd35 	bl	8004dfc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8005392:	f3bf 8f4f 	dsb	sy
}
 8005396:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005398:	f3bf 8f6f 	isb	sy
}
 800539c:	bf00      	nop
        platformSpiSelect();
 800539e:	2200      	movs	r2, #0
 80053a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053a4:	4815      	ldr	r0, [pc, #84]	@ (80053fc <st25r3911ReadFifo+0x98>)
 80053a6:	f7fc fc69 	bl	8001c7c <HAL_GPIO_WritePin>
        platformSpiTxRx( comBuf, comBuf, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );          /* Transceive as a single SPI call                        */
        ST_MEMCPY( buf, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) ); /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 80053aa:	f107 030f 	add.w	r3, r7, #15
 80053ae:	2201      	movs	r2, #1
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fb ff72 	bl	800129c <spiTxRx>
        platformSpiTxRx( NULL, buf, length );
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	2000      	movs	r0, #0
 80053c2:	f7fb ff6b 	bl	800129c <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
      
        platformSpiDeselect();
 80053c6:	2201      	movs	r2, #1
 80053c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053cc:	480b      	ldr	r0, [pc, #44]	@ (80053fc <st25r3911ReadFifo+0x98>)
 80053ce:	f7fc fc55 	bl	8001c7c <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 80053d2:	4b09      	ldr	r3, [pc, #36]	@ (80053f8 <st25r3911ReadFifo+0x94>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	4b07      	ldr	r3, [pc, #28]	@ (80053f8 <st25r3911ReadFifo+0x94>)
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <st25r3911ReadFifo+0x94>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <st25r3911ReadFifo+0x8a>
 80053e6:	2028      	movs	r0, #40	@ 0x28
 80053e8:	f7ff fcea 	bl	8004dc0 <__NVIC_EnableIRQ>
    }

    return;
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
}
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	2000043c 	.word	0x2000043c
 80053fc:	48000400 	.word	0x48000400

08005400 <st25r3911ExecuteCommand>:

void st25r3911ExecuteCommand( uint8_t cmd )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
    {
        platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
    }
#endif /* PLATFORM_LED_FIELD_PIN */
    
    tmpCmd = (cmd | ST25R3911_CMD_MODE);
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8005410:	b2db      	uxtb	r3, r3
 8005412:	73fb      	strb	r3, [r7, #15]

    platformProtectST25R391xComm();
 8005414:	4b1b      	ldr	r3, [pc, #108]	@ (8005484 <st25r3911ExecuteCommand+0x84>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	b2da      	uxtb	r2, r3
 800541c:	4b19      	ldr	r3, [pc, #100]	@ (8005484 <st25r3911ExecuteCommand+0x84>)
 800541e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005420:	f3bf 8f4f 	dsb	sy
}
 8005424:	bf00      	nop
 8005426:	2028      	movs	r0, #40	@ 0x28
 8005428:	f7ff fce8 	bl	8004dfc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800542c:	f3bf 8f4f 	dsb	sy
}
 8005430:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005432:	f3bf 8f6f 	isb	sy
}
 8005436:	bf00      	nop
    platformSpiSelect();
 8005438:	2200      	movs	r2, #0
 800543a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800543e:	4812      	ldr	r0, [pc, #72]	@ (8005488 <st25r3911ExecuteCommand+0x88>)
 8005440:	f7fc fc1c 	bl	8001c7c <HAL_GPIO_WritePin>
    
    platformSpiTxRx( &tmpCmd, NULL, ST25R3911_CMD_LEN );
 8005444:	f107 030f 	add.w	r3, r7, #15
 8005448:	2201      	movs	r2, #1
 800544a:	2100      	movs	r1, #0
 800544c:	4618      	mov	r0, r3
 800544e:	f7fb ff25 	bl	800129c <spiTxRx>
    
    platformSpiDeselect();
 8005452:	2201      	movs	r2, #1
 8005454:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005458:	480b      	ldr	r0, [pc, #44]	@ (8005488 <st25r3911ExecuteCommand+0x88>)
 800545a:	f7fc fc0f 	bl	8001c7c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 800545e:	4b09      	ldr	r3, [pc, #36]	@ (8005484 <st25r3911ExecuteCommand+0x84>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	3b01      	subs	r3, #1
 8005464:	b2da      	uxtb	r2, r3
 8005466:	4b07      	ldr	r3, [pc, #28]	@ (8005484 <st25r3911ExecuteCommand+0x84>)
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <st25r3911ExecuteCommand+0x84>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d103      	bne.n	800547a <st25r3911ExecuteCommand+0x7a>
 8005472:	2028      	movs	r0, #40	@ 0x28
 8005474:	f7ff fca4 	bl	8004dc0 <__NVIC_EnableIRQ>

    return;
 8005478:	bf00      	nop
 800547a:	bf00      	nop
}
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	2000043c 	.word	0x2000043c
 8005488:	48000400 	.word	0x48000400

0800548c <st25r3911ExecuteCommands>:


void st25r3911ExecuteCommands(const uint8_t *cmds, uint8_t length)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	70fb      	strb	r3, [r7, #3]
    platformProtectST25R391xComm();
 8005498:	4b1b      	ldr	r3, [pc, #108]	@ (8005508 <st25r3911ExecuteCommands+0x7c>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	4b19      	ldr	r3, [pc, #100]	@ (8005508 <st25r3911ExecuteCommands+0x7c>)
 80054a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054a4:	f3bf 8f4f 	dsb	sy
}
 80054a8:	bf00      	nop
 80054aa:	2028      	movs	r0, #40	@ 0x28
 80054ac:	f7ff fca6 	bl	8004dfc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80054b0:	f3bf 8f4f 	dsb	sy
}
 80054b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80054b6:	f3bf 8f6f 	isb	sy
}
 80054ba:	bf00      	nop
    platformSpiSelect();
 80054bc:	2200      	movs	r2, #0
 80054be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054c2:	4812      	ldr	r0, [pc, #72]	@ (800550c <st25r3911ExecuteCommands+0x80>)
 80054c4:	f7fc fbda 	bl	8001c7c <HAL_GPIO_WritePin>
    
    platformSpiTxRx( cmds, NULL, length );
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	2100      	movs	r1, #0
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7fb fee3 	bl	800129c <spiTxRx>
    
    platformSpiDeselect();
 80054d6:	2201      	movs	r2, #1
 80054d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054dc:	480b      	ldr	r0, [pc, #44]	@ (800550c <st25r3911ExecuteCommands+0x80>)
 80054de:	f7fc fbcd 	bl	8001c7c <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 80054e2:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <st25r3911ExecuteCommands+0x7c>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	4b07      	ldr	r3, [pc, #28]	@ (8005508 <st25r3911ExecuteCommands+0x7c>)
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <st25r3911ExecuteCommands+0x7c>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <st25r3911ExecuteCommands+0x72>
 80054f6:	2028      	movs	r0, #40	@ 0x28
 80054f8:	f7ff fc62 	bl	8004dc0 <__NVIC_EnableIRQ>

    return;
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
}
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	2000043c 	.word	0x2000043c
 800550c:	48000400 	.word	0x48000400

08005510 <__NVIC_EnableIRQ>:
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800551a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551e:	2b00      	cmp	r3, #0
 8005520:	db0b      	blt.n	800553a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	f003 021f 	and.w	r2, r3, #31
 8005528:	4907      	ldr	r1, [pc, #28]	@ (8005548 <__NVIC_EnableIRQ+0x38>)
 800552a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	2001      	movs	r0, #1
 8005532:	fa00 f202 	lsl.w	r2, r0, r2
 8005536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	e000e100 	.word	0xe000e100

0800554c <__NVIC_DisableIRQ>:
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555a:	2b00      	cmp	r3, #0
 800555c:	db12      	blt.n	8005584 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	f003 021f 	and.w	r2, r3, #31
 8005564:	490a      	ldr	r1, [pc, #40]	@ (8005590 <__NVIC_DisableIRQ+0x44>)
 8005566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	2001      	movs	r0, #1
 800556e:	fa00 f202 	lsl.w	r2, r0, r2
 8005572:	3320      	adds	r3, #32
 8005574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005578:	f3bf 8f4f 	dsb	sy
}
 800557c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800557e:	f3bf 8f6f 	isb	sy
}
 8005582:	bf00      	nop
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	e000e100 	.word	0xe000e100

08005594 <st25r3911InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911InitInterrupts( void )
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
    platformIrqST25R3911PinInitialize();
    platformIrqST25R3911SetCallback( st25r3911Isr );
    
    st25r3911interrupt.callback     = NULL;
 8005598:	4b08      	ldr	r3, [pc, #32]	@ (80055bc <st25r3911InitInterrupts+0x28>)
 800559a:	2200      	movs	r2, #0
 800559c:	605a      	str	r2, [r3, #4]
    st25r3911interrupt.prevCallback = NULL;
 800559e:	4b07      	ldr	r3, [pc, #28]	@ (80055bc <st25r3911InitInterrupts+0x28>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
    st25r3911interrupt.status       = ST25R3911_IRQ_MASK_NONE;
 80055a4:	4b05      	ldr	r3, [pc, #20]	@ (80055bc <st25r3911InitInterrupts+0x28>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	609a      	str	r2, [r3, #8]
    st25r3911interrupt.mask         = ST25R3911_IRQ_MASK_NONE;
 80055aa:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <st25r3911InitInterrupts+0x28>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	60da      	str	r2, [r3, #12]
#endif /* PLATFORM_LED_RX_PIN */

#ifdef PLATFORM_LED_FIELD_PIN
    platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
#endif /* PLATFORM_LED_FIELD_PIN */
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000608 	.word	0x20000608

080055c0 <st25r3911Isr>:

void st25r3911Isr( void )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
    st25r3911CheckForReceivedInterrupts();
 80055c4:	f000 f80c 	bl	80055e0 <st25r3911CheckForReceivedInterrupts>
    
    if (NULL != st25r3911interrupt.callback)
 80055c8:	4b04      	ldr	r3, [pc, #16]	@ (80055dc <st25r3911Isr+0x1c>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <st25r3911Isr+0x16>
    {
        st25r3911interrupt.callback();
 80055d0:	4b02      	ldr	r3, [pc, #8]	@ (80055dc <st25r3911Isr+0x1c>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	4798      	blx	r3
    }
}
 80055d6:	bf00      	nop
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000608 	.word	0x20000608

080055e0 <st25r3911CheckForReceivedInterrupts>:

void st25r3911CheckForReceivedInterrupts( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3911_INT_REGS_LEN];
    uint32_t irqStatus; 

    irqStatus = ST25R3911_IRQ_MASK_NONE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3911_IRQ_MASK_ALL & 0xFFU), ST25R3911_INT_REGS_LEN );  /* MISRA 10.3 */
 80055ea:	463b      	mov	r3, r7
 80055ec:	2203      	movs	r2, #3
 80055ee:	21ff      	movs	r1, #255	@ 0xff
 80055f0:	4618      	mov	r0, r3
 80055f2:	f00b ffbd 	bl	8011570 <memset>
        
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 80055f6:	e014      	b.n	8005622 <st25r3911CheckForReceivedInterrupts+0x42>
    {
        st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, sizeof(iregs));
 80055f8:	463b      	mov	r3, r7
 80055fa:	2203      	movs	r2, #3
 80055fc:	4619      	mov	r1, r3
 80055fe:	2017      	movs	r0, #23
 8005600:	f7ff fc7c 	bl	8004efc <st25r3911ReadMultipleRegisters>
        {
            platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
        }
#endif /* PLATFORM_LED_RX_PIN */
       
        irqStatus |= (uint32_t)iregs[0];
 8005604:	783b      	ldrb	r3, [r7, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4313      	orrs	r3, r2
 800560c:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[1]<<8;
 800560e:	787b      	ldrb	r3, [r7, #1]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4313      	orrs	r3, r2
 8005616:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[2]<<16;
 8005618:	78bb      	ldrb	r3, [r7, #2]
 800561a:	041b      	lsls	r3, r3, #16
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	4313      	orrs	r3, r2
 8005620:	607b      	str	r3, [r7, #4]
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8005622:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005626:	4817      	ldr	r0, [pc, #92]	@ (8005684 <st25r3911CheckForReceivedInterrupts+0xa4>)
 8005628:	f7fc fb10 	bl	8001c4c <HAL_GPIO_ReadPin>
 800562c:	4603      	mov	r3, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d0e2      	beq.n	80055f8 <st25r3911CheckForReceivedInterrupts+0x18>
    }
    
    /* Forward all interrupts, even masked ones to application. */
    platformProtectST25R391xIrqStatus();
 8005632:	4b15      	ldr	r3, [pc, #84]	@ (8005688 <st25r3911CheckForReceivedInterrupts+0xa8>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	b2da      	uxtb	r2, r3
 800563a:	4b13      	ldr	r3, [pc, #76]	@ (8005688 <st25r3911CheckForReceivedInterrupts+0xa8>)
 800563c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800563e:	f3bf 8f4f 	dsb	sy
}
 8005642:	bf00      	nop
 8005644:	2028      	movs	r0, #40	@ 0x28
 8005646:	f7ff ff81 	bl	800554c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800564a:	f3bf 8f4f 	dsb	sy
}
 800564e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005650:	f3bf 8f6f 	isb	sy
}
 8005654:	bf00      	nop
    st25r3911interrupt.status |= irqStatus;
 8005656:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <st25r3911CheckForReceivedInterrupts+0xac>)
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4313      	orrs	r3, r2
 800565e:	4a0b      	ldr	r2, [pc, #44]	@ (800568c <st25r3911CheckForReceivedInterrupts+0xac>)
 8005660:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8005662:	4b09      	ldr	r3, [pc, #36]	@ (8005688 <st25r3911CheckForReceivedInterrupts+0xa8>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	3b01      	subs	r3, #1
 8005668:	b2da      	uxtb	r2, r3
 800566a:	4b07      	ldr	r3, [pc, #28]	@ (8005688 <st25r3911CheckForReceivedInterrupts+0xa8>)
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <st25r3911CheckForReceivedInterrupts+0xa8>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <st25r3911CheckForReceivedInterrupts+0x9c>
 8005676:	2028      	movs	r0, #40	@ 0x28
 8005678:	f7ff ff4a 	bl	8005510 <__NVIC_EnableIRQ>
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	48000400 	.word	0x48000400
 8005688:	2000043c 	.word	0x2000043c
 800568c:	20000608 	.word	0x20000608

08005690 <st25r3911ModifyInterrupts>:


void st25r3911ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
    uint8_t i;
    uint32_t old_mask;
    uint32_t new_mask;

    old_mask = st25r3911interrupt.mask;
 800569a:	4b1e      	ldr	r3, [pc, #120]	@ (8005714 <st25r3911ModifyInterrupts+0x84>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	613b      	str	r3, [r7, #16]
    new_mask = (~old_mask & set_mask) | (old_mask & clr_mask);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	43da      	mvns	r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	401a      	ands	r2, r3
 80056a8:	6939      	ldr	r1, [r7, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	400b      	ands	r3, r1
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
    st25r3911interrupt.mask &= ~clr_mask;
 80056b2:	4b18      	ldr	r3, [pc, #96]	@ (8005714 <st25r3911ModifyInterrupts+0x84>)
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	43db      	mvns	r3, r3
 80056ba:	4013      	ands	r3, r2
 80056bc:	4a15      	ldr	r2, [pc, #84]	@ (8005714 <st25r3911ModifyInterrupts+0x84>)
 80056be:	60d3      	str	r3, [r2, #12]
    st25r3911interrupt.mask |= set_mask;
 80056c0:	4b14      	ldr	r3, [pc, #80]	@ (8005714 <st25r3911ModifyInterrupts+0x84>)
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	4a12      	ldr	r2, [pc, #72]	@ (8005714 <st25r3911ModifyInterrupts+0x84>)
 80056ca:	60d3      	str	r3, [r2, #12]
    for (i=0; i<3U ; i++)
 80056cc:	2300      	movs	r3, #0
 80056ce:	75fb      	strb	r3, [r7, #23]
 80056d0:	e019      	b.n	8005706 <st25r3911ModifyInterrupts+0x76>
    { 
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00d      	beq.n	80056fe <st25r3911ModifyInterrupts+0x6e>
            continue;
        }
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
 80056e4:	3314      	adds	r3, #20
 80056e6:	b2d8      	uxtb	r0, r3
 80056e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005714 <st25r3911ModifyInterrupts+0x84>)
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	4619      	mov	r1, r3
 80056f8:	f7ff fcee 	bl	80050d8 <st25r3911WriteRegister>
 80056fc:	e000      	b.n	8005700 <st25r3911ModifyInterrupts+0x70>
            continue;
 80056fe:	bf00      	nop
    for (i=0; i<3U ; i++)
 8005700:	7dfb      	ldrb	r3, [r7, #23]
 8005702:	3301      	adds	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]
 8005706:	7dfb      	ldrb	r3, [r7, #23]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d9e2      	bls.n	80056d2 <st25r3911ModifyInterrupts+0x42>
    }
    return;
 800570c:	bf00      	nop
}
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000608 	.word	0x20000608

08005718 <st25r3911WaitForInterruptsTimed>:


uint32_t st25r3911WaitForInterruptsTimed(uint32_t mask, uint16_t tmo)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	807b      	strh	r3, [r7, #2]
    uint32_t tmr;
    uint32_t status;
   
    tmr = platformTimerCreate(tmo);
 8005724:	887b      	ldrh	r3, [r7, #2]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f8d2 	bl	80058d0 <timerCalculateTimer>
 800572c:	60f8      	str	r0, [r7, #12]
    do 
    {
        status = (st25r3911interrupt.status & mask);
 800572e:	4b22      	ldr	r3, [pc, #136]	@ (80057b8 <st25r3911WaitForInterruptsTimed+0xa0>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	4013      	ands	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f8d7 	bl	80058ec <timerIsExpired>
 800573e:	4603      	mov	r3, r0
 8005740:	f083 0301 	eor.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <st25r3911WaitForInterruptsTimed+0x38>
 800574a:	887b      	ldrh	r3, [r7, #2]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <st25r3911WaitForInterruptsTimed+0x3e>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0eb      	beq.n	800572e <st25r3911WaitForInterruptsTimed+0x16>

    status = st25r3911interrupt.status & mask;
 8005756:	4b18      	ldr	r3, [pc, #96]	@ (80057b8 <st25r3911WaitForInterruptsTimed+0xa0>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	4013      	ands	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 8005760:	4b16      	ldr	r3, [pc, #88]	@ (80057bc <st25r3911WaitForInterruptsTimed+0xa4>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	3301      	adds	r3, #1
 8005766:	b2da      	uxtb	r2, r3
 8005768:	4b14      	ldr	r3, [pc, #80]	@ (80057bc <st25r3911WaitForInterruptsTimed+0xa4>)
 800576a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800576c:	f3bf 8f4f 	dsb	sy
}
 8005770:	bf00      	nop
 8005772:	2028      	movs	r0, #40	@ 0x28
 8005774:	f7ff feea 	bl	800554c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8005778:	f3bf 8f4f 	dsb	sy
}
 800577c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800577e:	f3bf 8f6f 	isb	sy
}
 8005782:	bf00      	nop
    st25r3911interrupt.status &= ~status;
 8005784:	4b0c      	ldr	r3, [pc, #48]	@ (80057b8 <st25r3911WaitForInterruptsTimed+0xa0>)
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	43db      	mvns	r3, r3
 800578c:	4013      	ands	r3, r2
 800578e:	4a0a      	ldr	r2, [pc, #40]	@ (80057b8 <st25r3911WaitForInterruptsTimed+0xa0>)
 8005790:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8005792:	4b0a      	ldr	r3, [pc, #40]	@ (80057bc <st25r3911WaitForInterruptsTimed+0xa4>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	3b01      	subs	r3, #1
 8005798:	b2da      	uxtb	r2, r3
 800579a:	4b08      	ldr	r3, [pc, #32]	@ (80057bc <st25r3911WaitForInterruptsTimed+0xa4>)
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	4b07      	ldr	r3, [pc, #28]	@ (80057bc <st25r3911WaitForInterruptsTimed+0xa4>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <st25r3911WaitForInterruptsTimed+0x94>
 80057a6:	2028      	movs	r0, #40	@ 0x28
 80057a8:	f7ff feb2 	bl	8005510 <__NVIC_EnableIRQ>
    
    return status;
 80057ac:	68bb      	ldr	r3, [r7, #8]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000608 	.word	0x20000608
 80057bc:	2000043c 	.word	0x2000043c

080057c0 <st25r3911GetInterrupt>:

uint32_t st25r3911GetInterrupt(uint32_t mask)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3911interrupt.status & mask);
 80057c8:	4b19      	ldr	r3, [pc, #100]	@ (8005830 <st25r3911GetInterrupt+0x70>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4013      	ands	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
    if (irqs != ST25R3911_IRQ_MASK_NONE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d025      	beq.n	8005824 <st25r3911GetInterrupt+0x64>
    {
        platformProtectST25R391xIrqStatus();
 80057d8:	4b16      	ldr	r3, [pc, #88]	@ (8005834 <st25r3911GetInterrupt+0x74>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	4b14      	ldr	r3, [pc, #80]	@ (8005834 <st25r3911GetInterrupt+0x74>)
 80057e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057e4:	f3bf 8f4f 	dsb	sy
}
 80057e8:	bf00      	nop
 80057ea:	2028      	movs	r0, #40	@ 0x28
 80057ec:	f7ff feae 	bl	800554c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80057f0:	f3bf 8f4f 	dsb	sy
}
 80057f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80057f6:	f3bf 8f6f 	isb	sy
}
 80057fa:	bf00      	nop
        st25r3911interrupt.status &= ~irqs;
 80057fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <st25r3911GetInterrupt+0x70>)
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	43db      	mvns	r3, r3
 8005804:	4013      	ands	r3, r2
 8005806:	4a0a      	ldr	r2, [pc, #40]	@ (8005830 <st25r3911GetInterrupt+0x70>)
 8005808:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 800580a:	4b0a      	ldr	r3, [pc, #40]	@ (8005834 <st25r3911GetInterrupt+0x74>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	3b01      	subs	r3, #1
 8005810:	b2da      	uxtb	r2, r3
 8005812:	4b08      	ldr	r3, [pc, #32]	@ (8005834 <st25r3911GetInterrupt+0x74>)
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	4b07      	ldr	r3, [pc, #28]	@ (8005834 <st25r3911GetInterrupt+0x74>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <st25r3911GetInterrupt+0x64>
 800581e:	2028      	movs	r0, #40	@ 0x28
 8005820:	f7ff fe76 	bl	8005510 <__NVIC_EnableIRQ>
    }
    return irqs;
 8005824:	68fb      	ldr	r3, [r7, #12]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000608 	.word	0x20000608
 8005834:	2000043c 	.word	0x2000043c

08005838 <st25r3911EnableInterrupts>:

void st25r3911EnableInterrupts(uint32_t mask)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(mask,0);
 8005840:	2100      	movs	r1, #0
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff ff24 	bl	8005690 <st25r3911ModifyInterrupts>
}
 8005848:	bf00      	nop
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <st25r3911DisableInterrupts>:

void st25r3911DisableInterrupts(uint32_t mask)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(0,mask);
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	2000      	movs	r0, #0
 800585c:	f7ff ff18 	bl	8005690 <st25r3911ModifyInterrupts>
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <st25r3911ClearInterrupts>:

void st25r3911ClearInterrupts( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
    uint8_t iregs[3];

    st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, 3);
 800586e:	1d3b      	adds	r3, r7, #4
 8005870:	2203      	movs	r2, #3
 8005872:	4619      	mov	r1, r3
 8005874:	2017      	movs	r0, #23
 8005876:	f7ff fb41 	bl	8004efc <st25r3911ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 800587a:	4b13      	ldr	r3, [pc, #76]	@ (80058c8 <st25r3911ClearInterrupts+0x60>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	3301      	adds	r3, #1
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4b11      	ldr	r3, [pc, #68]	@ (80058c8 <st25r3911ClearInterrupts+0x60>)
 8005884:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005886:	f3bf 8f4f 	dsb	sy
}
 800588a:	bf00      	nop
 800588c:	2028      	movs	r0, #40	@ 0x28
 800588e:	f7ff fe5d 	bl	800554c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8005892:	f3bf 8f4f 	dsb	sy
}
 8005896:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005898:	f3bf 8f6f 	isb	sy
}
 800589c:	bf00      	nop
    st25r3911interrupt.status = 0;
 800589e:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <st25r3911ClearInterrupts+0x64>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 80058a4:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <st25r3911ClearInterrupts+0x60>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <st25r3911ClearInterrupts+0x60>)
 80058ae:	701a      	strb	r2, [r3, #0]
 80058b0:	4b05      	ldr	r3, [pc, #20]	@ (80058c8 <st25r3911ClearInterrupts+0x60>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d103      	bne.n	80058c0 <st25r3911ClearInterrupts+0x58>
 80058b8:	2028      	movs	r0, #40	@ 0x28
 80058ba:	f7ff fe29 	bl	8005510 <__NVIC_EnableIRQ>
    return;
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
}
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	2000043c 	.word	0x2000043c
 80058cc:	20000608 	.word	0x20000608

080058d0 <timerCalculateTimer>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

/*******************************************************************************/
uint32_t timerCalculateTimer(uint16_t time) {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	80fb      	strh	r3, [r7, #6]
	return (platformGetSysTick() + time);
 80058da:	f7fb fedb 	bl	8001694 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	88fb      	ldrh	r3, [r7, #6]
 80058e2:	4413      	add	r3, r2
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <timerIsExpired>:

/*******************************************************************************/
bool timerIsExpired(uint32_t timer) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	uint32_t uDiff;
	int32_t sDiff;

	uDiff = (timer - platformGetSysTick()); /* Calculate the diff between the timers */
 80058f4:	f7fb fece 	bl	8001694 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
	sDiff = uDiff; /* Convert the diff to a signed var      */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	60bb      	str	r3, [r7, #8]
	 *    Signaling not expired: acceptable!
	 * 2) Time roll-over case will be handled correctly: super!
	 */

	/* Check if the given timer has expired already */
	if (sDiff < 0) {
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	da01      	bge.n	800590e <timerIsExpired+0x22>
		return true;
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <timerIsExpired+0x24>
	}

	return false;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800591c:	4b07      	ldr	r3, [pc, #28]	@ (800593c <rfalAnalogConfigInitialize+0x24>)
 800591e:	4a08      	ldr	r2, [pc, #32]	@ (8005940 <rfalAnalogConfigInitialize+0x28>)
 8005920:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 8005922:	4b06      	ldr	r3, [pc, #24]	@ (800593c <rfalAnalogConfigInitialize+0x24>)
 8005924:	f44f 72d1 	mov.w	r2, #418	@ 0x1a2
 8005928:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800592a:	4b04      	ldr	r3, [pc, #16]	@ (800593c <rfalAnalogConfigInitialize+0x24>)
 800592c:	2201      	movs	r2, #1
 800592e:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 8005930:	bf00      	nop
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	20000618 	.word	0x20000618
 8005940:	08012278 	.word	0x08012278

08005944 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 8005952:	2300      	movs	r3, #0
 8005954:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 8005956:	4b4b      	ldr	r3, [pc, #300]	@ (8005a84 <rfalSetAnalogConfig+0x140>)
 8005958:	799b      	ldrb	r3, [r3, #6]
 800595a:	f083 0301 	eor.w	r3, r3, #1
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 8005964:	2305      	movs	r3, #5
 8005966:	e089      	b.n	8005a7c <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 8005968:	f107 020e 	add.w	r2, r7, #14
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	4611      	mov	r1, r2
 8005970:	4618      	mov	r0, r3
 8005972:	f000 f889 	bl	8005a88 <rfalAnalogConfigSearch>
 8005976:	4603      	mov	r3, r0
 8005978:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800597a:	7d3b      	ldrb	r3, [r7, #20]
 800597c:	2bff      	cmp	r3, #255	@ 0xff
 800597e:	d07b      	beq.n	8005a78 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 8005980:	4b40      	ldr	r3, [pc, #256]	@ (8005a84 <rfalSetAnalogConfig+0x140>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	89fb      	ldrh	r3, [r7, #14]
 8005988:	4413      	add	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800598c:	7d3b      	ldrb	r3, [r7, #20]
 800598e:	b29b      	uxth	r3, r3
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	b29a      	uxth	r2, r3
 8005994:	89fb      	ldrh	r3, [r7, #14]
 8005996:	4413      	add	r3, r2
 8005998:	b29b      	uxth	r3, r3
 800599a:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800599c:	4b39      	ldr	r3, [pc, #228]	@ (8005a84 <rfalSetAnalogConfig+0x140>)
 800599e:	889b      	ldrh	r3, [r3, #4]
 80059a0:	3301      	adds	r3, #1
 80059a2:	89fa      	ldrh	r2, [r7, #14]
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d201      	bcs.n	80059ac <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e067      	b.n	8005a7c <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 80059ac:	2300      	movs	r3, #0
 80059ae:	757b      	strb	r3, [r7, #21]
 80059b0:	e05d      	b.n	8005a6e <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 80059b2:	7d7b      	ldrb	r3, [r7, #21]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4413      	add	r3, r2
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	7d7a      	ldrb	r2, [r7, #21]
 80059c0:	0092      	lsls	r2, r2, #2
 80059c2:	6939      	ldr	r1, [r7, #16]
 80059c4:	440a      	add	r2, r1
 80059c6:	7852      	ldrb	r2, [r2, #1]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d026      	beq.n	8005a20 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 80059d2:	7d7b      	ldrb	r3, [r7, #21]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4413      	add	r3, r2
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	b21a      	sxth	r2, r3
 80059e0:	7d7b      	ldrb	r3, [r7, #21]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	6939      	ldr	r1, [r7, #16]
 80059e6:	440b      	add	r3, r1
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	b21b      	sxth	r3, r3
 80059ec:	4313      	orrs	r3, r2
 80059ee:	b21b      	sxth	r3, r3
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059f6:	b298      	uxth	r0, r3
 80059f8:	7d7b      	ldrb	r3, [r7, #21]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4413      	add	r3, r2
 8005a00:	7899      	ldrb	r1, [r3, #2]
 8005a02:	7d7b      	ldrb	r3, [r7, #21]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4413      	add	r3, r2
 8005a0a:	78db      	ldrb	r3, [r3, #3]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f00b fa20 	bl	8010e52 <rfalChipChangeTestRegBits>
 8005a12:	4603      	mov	r3, r0
 8005a14:	82fb      	strh	r3, [r7, #22]
 8005a16:	8afb      	ldrh	r3, [r7, #22]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d025      	beq.n	8005a68 <rfalSetAnalogConfig+0x124>
 8005a1c:	8afb      	ldrh	r3, [r7, #22]
 8005a1e:	e02d      	b.n	8005a7c <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 8005a20:	7d7b      	ldrb	r3, [r7, #21]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	b21a      	sxth	r2, r3
 8005a2e:	7d7b      	ldrb	r3, [r7, #21]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	6939      	ldr	r1, [r7, #16]
 8005a34:	440b      	add	r3, r1
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	b21b      	sxth	r3, r3
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	b21b      	sxth	r3, r3
 8005a3e:	b298      	uxth	r0, r3
 8005a40:	7d7b      	ldrb	r3, [r7, #21]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	7899      	ldrb	r1, [r3, #2]
 8005a4a:	7d7b      	ldrb	r3, [r7, #21]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4413      	add	r3, r2
 8005a52:	78db      	ldrb	r3, [r3, #3]
 8005a54:	461a      	mov	r2, r3
 8005a56:	f00b f9e7 	bl	8010e28 <rfalChipChangeRegBits>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	82fb      	strh	r3, [r7, #22]
 8005a5e:	8afb      	ldrh	r3, [r7, #22]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <rfalSetAnalogConfig+0x124>
 8005a64:	8afb      	ldrh	r3, [r7, #22]
 8005a66:	e009      	b.n	8005a7c <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 8005a68:	7d7b      	ldrb	r3, [r7, #21]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	757b      	strb	r3, [r7, #21]
 8005a6e:	7d7a      	ldrb	r2, [r7, #21]
 8005a70:	7d3b      	ldrb	r3, [r7, #20]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d39d      	bcc.n	80059b2 <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 8005a76:	e777      	b.n	8005968 <rfalSetAnalogConfig+0x24>
            break;
 8005a78:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 8005a7a:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20000618 	.word	0x20000618

08005a88 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b089      	sub	sp, #36	@ 0x24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	6039      	str	r1, [r7, #0]
 8005a92:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 8005a94:	4b2c      	ldr	r3, [pc, #176]	@ (8005b48 <rfalAnalogConfigSearch+0xc0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	61bb      	str	r3, [r7, #24]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 8005a9a:	88fb      	ldrh	r3, [r7, #6]
 8005a9c:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8005aa0:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <rfalAnalogConfigSearch+0x34>
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ab4:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	e001      	b.n	8005ac0 <rfalAnalogConfigSearch+0x38>
 8005abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <rfalAnalogConfigSearch+0x48>
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	e000      	b.n	8005ad2 <rfalAnalogConfigSearch+0x4a>
 8005ad0:	2303      	movs	r3, #3
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	82fb      	strh	r3, [r7, #22]
                       );
    
    i = *configOffset;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8005adc:	e028      	b.n	8005b30 <rfalAnalogConfigSearch+0xa8>
    {
        configTbl = &currentConfigTbl[i];
 8005ade:	8bfb      	ldrh	r3, [r7, #30]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
        foundConfigId = GETU16(configTbl);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	b21a      	sxth	r2, r3
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3301      	adds	r3, #1
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	b21b      	sxth	r3, r3
 8005af6:	4313      	orrs	r3, r2
 8005af8:	b21b      	sxth	r3, r3
 8005afa:	81fb      	strh	r3, [r7, #14]
        if (configId == (foundConfigId & configIdMaskVal))
 8005afc:	89fa      	ldrh	r2, [r7, #14]
 8005afe:	8afb      	ldrh	r3, [r7, #22]
 8005b00:	4013      	ands	r3, r2
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	88fa      	ldrh	r2, [r7, #6]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d108      	bne.n	8005b1c <rfalAnalogConfigSearch+0x94>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 8005b0a:	8bfb      	ldrh	r3, [r7, #30]
 8005b0c:	3303      	adds	r3, #3
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	3302      	adds	r3, #2
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	e00f      	b.n	8005b3c <rfalAnalogConfigSearch+0xb4>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	3302      	adds	r3, #2
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 8005b26:	8bfb      	ldrh	r3, [r7, #30]
 8005b28:	4413      	add	r3, r2
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3303      	adds	r3, #3
 8005b2e:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8005b30:	4b05      	ldr	r3, [pc, #20]	@ (8005b48 <rfalAnalogConfigSearch+0xc0>)
 8005b32:	889b      	ldrh	r3, [r3, #4]
 8005b34:	8bfa      	ldrh	r2, [r7, #30]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3d1      	bcc.n	8005ade <rfalAnalogConfigSearch+0x56>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 8005b3a:	23ff      	movs	r3, #255	@ 0xff
} /* rfalAnalogConfigSearch() */
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3724      	adds	r7, #36	@ 0x24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	20000618 	.word	0x20000618

08005b4c <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	4603      	mov	r3, r0
 8005b54:	6039      	str	r1, [r7, #0]
 8005b56:	80fb      	strh	r3, [r7, #6]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 8005b60:	2300      	movs	r3, #0
 8005b62:	81bb      	strh	r3, [r7, #12]
 8005b64:	e00d      	b.n	8005b82 <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 8005b66:	89bb      	ldrh	r3, [r7, #12]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	89fb      	ldrh	r3, [r7, #14]
 8005b70:	4611      	mov	r1, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f80e 	bl	8005b94 <rfalCrcUpdateCcitt>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 8005b7c:	89bb      	ldrh	r3, [r7, #12]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	81bb      	strh	r3, [r7, #12]
 8005b82:	89ba      	ldrh	r2, [r7, #12]
 8005b84:	88bb      	ldrh	r3, [r7, #4]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d3ed      	bcc.n	8005b66 <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 8005b8a:	89fb      	ldrh	r3, [r7, #14]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	460a      	mov	r2, r1
 8005b9e:	80fb      	strh	r3, [r7, #6]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 8005ba4:	88fb      	ldrh	r3, [r7, #6]
 8005ba6:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 8005ba8:	797b      	ldrb	r3, [r7, #5]
 8005baa:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 8005bac:	89fb      	ldrh	r3, [r7, #14]
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	7b7b      	ldrb	r3, [r7, #13]
 8005bb2:	4053      	eors	r3, r2
 8005bb4:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 8005bb6:	7b7b      	ldrb	r3, [r7, #13]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	b25a      	sxtb	r2, r3
 8005bbc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005bc0:	4053      	eors	r3, r2
 8005bc2:	b25b      	sxtb	r3, r3
 8005bc4:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 8005bc6:	89fb      	ldrh	r3, [r7, #14]
 8005bc8:	0a1b      	lsrs	r3, r3, #8
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	b21a      	sxth	r2, r3
 8005bce:	7b7b      	ldrb	r3, [r7, #13]
 8005bd0:	021b      	lsls	r3, r3, #8
 8005bd2:	b21b      	sxth	r3, r3
 8005bd4:	4053      	eors	r3, r2
 8005bd6:	b21a      	sxth	r2, r3
 8005bd8:	7b7b      	ldrb	r3, [r7, #13]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	b21b      	sxth	r3, r3
 8005bde:	4053      	eors	r3, r2
 8005be0:	b21a      	sxth	r2, r3
 8005be2:	7b7b      	ldrb	r3, [r7, #13]
 8005be4:	091b      	lsrs	r3, r3, #4
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	b21b      	sxth	r3, r3
 8005bea:	4053      	eors	r3, r2
 8005bec:	b21b      	sxth	r3, r3
 8005bee:	81fb      	strh	r3, [r7, #14]

    return crc;
 8005bf0:	89fb      	ldrh	r3, [r7, #14]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 8005c0a:	2208      	movs	r2, #8
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	480d      	ldr	r0, [pc, #52]	@ (8005c44 <iso15693PhyConfigure+0x44>)
 8005c10:	f00b fcf2 	bl	80115f8 <memcpy>
    
    if ( config->speedMode <= 3U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d808      	bhi.n	8005c2e <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f1c3 0303 	rsb	r3, r3, #3
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	4b07      	ldr	r3, [pc, #28]	@ (8005c48 <iso15693PhyConfigure+0x48>)
 8005c2a:	70da      	strb	r2, [r3, #3]
 8005c2c:	e002      	b.n	8005c34 <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 8005c2e:	4b06      	ldr	r3, [pc, #24]	@ (8005c48 <iso15693PhyConfigure+0x48>)
 8005c30:	2203      	movs	r2, #3
 8005c32:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	4a04      	ldr	r2, [pc, #16]	@ (8005c48 <iso15693PhyConfigure+0x48>)
 8005c38:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000620 	.word	0x20000620
 8005c48:	20000138 	.word	0x20000138

08005c4c <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b08b      	sub	sp, #44	@ 0x2c
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	4608      	mov	r0, r1
 8005c56:	4611      	mov	r1, r2
 8005c58:	461a      	mov	r2, r3
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	807b      	strh	r3, [r7, #2]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	707b      	strb	r3, [r7, #1]
 8005c62:	4613      	mov	r3, r2
 8005c64:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	847b      	strh	r3, [r7, #34]	@ 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 8005c6e:	787b      	ldrb	r3, [r7, #1]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <iso15693VCDCode+0x2c>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e000      	b.n	8005c7a <iso15693VCDCode+0x2e>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 8005c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c7e:	2200      	movs	r2, #0
 8005c80:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 8005c82:	4b93      	ldr	r3, [pc, #588]	@ (8005ed0 <iso15693VCDCode+0x284>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d117      	bne.n	8005cba <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 8005c8a:	2321      	movs	r3, #33	@ 0x21
 8005c8c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        eof = ISO15693_DAT_EOF_1_4;
 8005c90:	2304      	movs	r3, #4
 8005c92:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 8005c96:	4b8f      	ldr	r3, [pc, #572]	@ (8005ed4 <iso15693VCDCode+0x288>)
 8005c98:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 8005c9a:	887a      	ldrh	r2, [r7, #2]
 8005c9c:	7d7b      	ldrb	r3, [r7, #21]
 8005c9e:	4413      	add	r3, r2
                  + 1U) /* EOF */
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 8005caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cac:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 8005cae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d823      	bhi.n	8005cfe <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e138      	b.n	8005f2c <iso15693VCDCode+0x2e0>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 8005cba:	2381      	movs	r3, #129	@ 0x81
 8005cbc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        eof = ISO15693_DAT_EOF_1_256;
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 8005cc6:	4b84      	ldr	r3, [pc, #528]	@ (8005ed8 <iso15693VCDCode+0x28c>)
 8005cc8:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 8005cca:	887a      	ldrh	r2, [r7, #2]
 8005ccc:	7d7b      	ldrb	r3, [r7, #21]
 8005cce:	4413      	add	r3, r2
                  + 1U) /* EOF */
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	019b      	lsls	r3, r3, #6
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3302      	adds	r3, #2
 8005cd8:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 8005cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cdc:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 8005cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 8005ce6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005cea:	2b3f      	cmp	r3, #63	@ 0x3f
 8005cec:	d807      	bhi.n	8005cfe <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e11c      	b.n	8005f2c <iso15693VCDCode+0x2e0>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 8005cf2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005cf6:	2b40      	cmp	r3, #64	@ 0x40
 8005cf8:	d801      	bhi.n	8005cfe <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e116      	b.n	8005f2c <iso15693VCDCode+0x2e0>
            }
        }
    }

    if (length == 0U)
 8005cfe:	887b      	ldrh	r3, [r7, #2]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 8005d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d06:	2201      	movs	r2, #1
 8005d08:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 8005d0a:	887b      	ldrh	r3, [r7, #2]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01b      	beq.n	8005d48 <iso15693VCDCode+0xfc>
 8005d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d117      	bne.n	8005d48 <iso15693VCDCode+0xfc>
 8005d18:	783b      	ldrb	r3, [r7, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d014      	beq.n	8005d48 <iso15693VCDCode+0xfc>
 8005d1e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005d22:	f083 0301 	eor.w	r3, r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00d      	beq.n	8005d48 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	f043 0302 	orr.w	r3, r3, #2
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 8005d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d4a:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 8005d4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005d50:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 8005d52:	887b      	ldrh	r3, [r7, #2]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d03b      	beq.n	8005dd0 <iso15693VCDCode+0x184>
 8005d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d137      	bne.n	8005dd0 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005d66:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 8005d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d72:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 8005d74:	8afb      	ldrh	r3, [r7, #22]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 8005d80:	e026      	b.n	8005dd0 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 8005d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	7818      	ldrb	r0, [r3, #0]
 8005d8e:	f107 030e 	add.w	r3, r7, #14
 8005d92:	8afa      	ldrh	r2, [r7, #22]
 8005d94:	69fc      	ldr	r4, [r7, #28]
 8005d96:	69b9      	ldr	r1, [r7, #24]
 8005d98:	47a0      	blx	r4
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        (*actOutBufSize) += filled_size;
 8005d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da0:	881a      	ldrh	r2, [r3, #0]
 8005da2:	89fb      	ldrh	r3, [r7, #14]
 8005da4:	4413      	add	r3, r2
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005daa:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 8005dac:	89fb      	ldrh	r3, [r7, #14]
 8005dae:	461a      	mov	r2, r3
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	4413      	add	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 8005db6:	89fb      	ldrh	r3, [r7, #14]
 8005db8:	8afa      	ldrh	r2, [r7, #22]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 8005dbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <iso15693VCDCode+0x184>
            (*offset)++;
 8005dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dce:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 8005dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	887a      	ldrh	r2, [r7, #2]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d902      	bls.n	8005de0 <iso15693VCDCode+0x194>
 8005dda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0d0      	beq.n	8005d82 <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 8005de0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d062      	beq.n	8005eac <iso15693VCDCode+0x260>
        return ERR_AGAIN;
 8005de6:	230d      	movs	r3, #13
 8005de8:	e0a0      	b.n	8005f2c <iso15693VCDCode+0x2e0>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 8005dea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d12b      	bne.n	8005e48 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8005df0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <iso15693VCDCode+0x1b2>
 8005df8:	f24e 0012 	movw	r0, #57362	@ 0xe012
 8005dfc:	e001      	b.n	8005e02 <iso15693VCDCode+0x1b6>
 8005dfe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005e02:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <iso15693VCDCode+0x1c4>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	e000      	b.n	8005e12 <iso15693VCDCode+0x1c6>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	d003      	beq.n	8005e22 <iso15693VCDCode+0x1d6>
 8005e1a:	887a      	ldrh	r2, [r7, #2]
 8005e1c:	3a01      	subs	r2, #1
 8005e1e:	b292      	uxth	r2, r2
 8005e20:	e000      	b.n	8005e24 <iso15693VCDCode+0x1d8>
 8005e22:	887a      	ldrh	r2, [r7, #2]
 8005e24:	4619      	mov	r1, r3
 8005e26:	f7ff fe91 	bl	8005b4c <rfalCrcCalculateCcitt>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	847b      	strh	r3, [r7, #34]	@ 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8005e2e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005e32:	f083 0301 	eor.w	r3, r3, #1
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <iso15693VCDCode+0x1f8>
 8005e3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	e000      	b.n	8005e46 <iso15693VCDCode+0x1fa>
 8005e44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e46:	847b      	strh	r3, [r7, #34]	@ 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 8005e48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 8005e4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 8005e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	887b      	ldrh	r3, [r7, #2]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	3328      	adds	r3, #40	@ 0x28
 8005e64:	443b      	add	r3, r7
 8005e66:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 8005e6a:	f107 030c 	add.w	r3, r7, #12
 8005e6e:	8afa      	ldrh	r2, [r7, #22]
 8005e70:	69fc      	ldr	r4, [r7, #28]
 8005e72:	69b9      	ldr	r1, [r7, #24]
 8005e74:	47a0      	blx	r4
 8005e76:	4603      	mov	r3, r0
 8005e78:	84fb      	strh	r3, [r7, #38]	@ 0x26
        (*actOutBufSize) += filled_size;
 8005e7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e7c:	881a      	ldrh	r2, [r3, #0]
 8005e7e:	89bb      	ldrh	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e86:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 8005e88:	89bb      	ldrh	r3, [r7, #12]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	4413      	add	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 8005e92:	89bb      	ldrh	r3, [r7, #12]
 8005e94:	8afa      	ldrh	r2, [r7, #22]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 8005e9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d105      	bne.n	8005eac <iso15693VCDCode+0x260>
            (*offset)++;
 8005ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eaa:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 8005eac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <iso15693VCDCode+0x27a>
 8005eb2:	787b      	ldrb	r3, [r7, #1]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d006      	beq.n	8005ec6 <iso15693VCDCode+0x27a>
 8005eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	887b      	ldrh	r3, [r7, #2]
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d391      	bcc.n	8005dea <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 8005ec6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <iso15693VCDCode+0x290>
        return ERR_AGAIN;
 8005ecc:	230d      	movs	r3, #13
 8005ece:	e02d      	b.n	8005f2c <iso15693VCDCode+0x2e0>
 8005ed0:	20000620 	.word	0x20000620
 8005ed4:	08006171 	.word	0x08006171
 8005ed8:	08006219 	.word	0x08006219
    }

    if ((!sendCrc && (*offset == length))
 8005edc:	787b      	ldrb	r3, [r7, #1]
 8005ede:	f083 0301 	eor.w	r3, r3, #1
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <iso15693VCDCode+0x2a6>
 8005ee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	887a      	ldrh	r2, [r7, #2]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d009      	beq.n	8005f06 <iso15693VCDCode+0x2ba>
            || (sendCrc && (*offset == (length + 2U))))
 8005ef2:	787b      	ldrb	r3, [r7, #1]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d018      	beq.n	8005f2a <iso15693VCDCode+0x2de>
 8005ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	887b      	ldrh	r3, [r7, #2]
 8005f00:	3302      	adds	r3, #2
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d111      	bne.n	8005f2a <iso15693VCDCode+0x2de>
    {
        *outputBuf = eof; 
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005f0c:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 8005f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f18:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 8005f1a:	8afb      	ldrh	r3, [r7, #22]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	3301      	adds	r3, #1
 8005f24:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 8005f26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f28:	e000      	b.n	8005f2c <iso15693VCDCode+0x2e0>
        return ERR_AGAIN;
 8005f2a:	230d      	movs	r3, #13
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	372c      	adds	r7, #44	@ 0x2c
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd90      	pop	{r4, r7, pc}

08005f34 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	607a      	str	r2, [r7, #4]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	460b      	mov	r3, r1
 8005f42:	817b      	strh	r3, [r7, #10]
 8005f44:	4613      	mov	r3, r2
 8005f46:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 8005f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4e:	2200      	movs	r2, #0
 8005f50:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 8005f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f54:	2200      	movs	r2, #0
 8005f56:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	2b17      	cmp	r3, #23
 8005f62:	d001      	beq.n	8005f68 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 8005f64:	2309      	movs	r3, #9
 8005f66:	e0ff      	b.n	8006168 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 8005f68:	893b      	ldrh	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e0fa      	b.n	8006168 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 8005f72:	2305      	movs	r3, #5
 8005f74:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 8005f7a:	893b      	ldrh	r3, [r7, #8]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2100      	movs	r1, #0
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f00b faf5 	bl	8011570 <memset>

    if (inBufLen == 0U)
 8005f86:	897b      	ldrh	r3, [r7, #10]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f040 808e 	bne.w	80060aa <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 8005f8e:	2315      	movs	r3, #21
 8005f90:	e0ea      	b.n	8006168 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 8005f92:	2300      	movs	r3, #0
 8005f94:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 8005f96:	8bbb      	ldrh	r3, [r7, #28]
 8005f98:	08db      	lsrs	r3, r3, #3
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	8bbb      	ldrh	r3, [r7, #28]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	fa42 f303 	asr.w	r3, r2, r3
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 8005fb8:	8bbb      	ldrh	r3, [r7, #28]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	08db      	lsrs	r3, r3, #3
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	8bbb      	ldrh	r3, [r7, #28]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	fa42 f303 	asr.w	r3, r2, r3
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	7e3b      	ldrb	r3, [r7, #24]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 8005fe4:	7e3b      	ldrb	r3, [r7, #24]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d102      	bne.n	8005ff0 <iso15693VICCDecode+0xbc>
        {
            bp++;
 8005fea:	8b7b      	ldrh	r3, [r7, #26]
 8005fec:	3301      	adds	r3, #1
 8005fee:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 8005ff0:	7e3b      	ldrb	r3, [r7, #24]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d119      	bne.n	800602a <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 8005ff6:	8b7b      	ldrh	r3, [r7, #26]
 8005ff8:	08db      	lsrs	r3, r3, #3
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4413      	add	r3, r2
 8006002:	7819      	ldrb	r1, [r3, #0]
 8006004:	8b7b      	ldrh	r3, [r7, #26]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2201      	movs	r2, #1
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	b2da      	uxtb	r2, r3
 8006012:	8b7b      	ldrh	r3, [r7, #26]
 8006014:	08db      	lsrs	r3, r3, #3
 8006016:	b29b      	uxth	r3, r3
 8006018:	4618      	mov	r0, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4403      	add	r3, r0
 800601e:	430a      	orrs	r2, r1
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
            bp++;
 8006024:	8b7b      	ldrh	r3, [r7, #26]
 8006026:	3301      	adds	r3, #1
 8006028:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800602a:	8b7b      	ldrh	r3, [r7, #26]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d115      	bne.n	8006062 <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 8006036:	8bbb      	ldrh	r3, [r7, #28]
 8006038:	08db      	lsrs	r3, r3, #3
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4413      	add	r3, r2
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006048:	2ba0      	cmp	r3, #160	@ 0xa0
 800604a:	d10a      	bne.n	8006062 <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800604c:	8bbb      	ldrh	r3, [r7, #28]
 800604e:	08db      	lsrs	r3, r3, #3
 8006050:	b29b      	uxth	r3, r3
 8006052:	3301      	adds	r3, #1
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d101      	bne.n	8006062 <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800605e:	2301      	movs	r3, #1
 8006060:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 8006062:	7e3b      	ldrb	r3, [r7, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <iso15693VICCDecode+0x13a>
 8006068:	7e3b      	ldrb	r3, [r7, #24]
 800606a:	2b03      	cmp	r3, #3
 800606c:	d10f      	bne.n	800608e <iso15693VICCDecode+0x15a>
 800606e:	7e7b      	ldrb	r3, [r7, #25]
 8006070:	f083 0301 	eor.w	r3, r3, #1
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800607a:	8b7a      	ldrh	r2, [r7, #26]
 800607c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800607e:	429a      	cmp	r2, r3
 8006080:	d302      	bcc.n	8006088 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 8006082:	231d      	movs	r3, #29
 8006084:	83fb      	strh	r3, [r7, #30]
 8006086:	e002      	b.n	800608e <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 8006088:	8b7b      	ldrh	r3, [r7, #26]
 800608a:	3301      	adds	r3, #1
 800608c:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800608e:	8b7a      	ldrh	r2, [r7, #26]
 8006090:	893b      	ldrh	r3, [r7, #8]
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	429a      	cmp	r2, r3
 8006096:	d20f      	bcs.n	80060b8 <iso15693VICCDecode+0x184>
 8006098:	8bfb      	ldrh	r3, [r7, #30]
 800609a:	2b1d      	cmp	r3, #29
 800609c:	d00c      	beq.n	80060b8 <iso15693VICCDecode+0x184>
 800609e:	7e7b      	ldrb	r3, [r7, #25]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 80060a4:	8bbb      	ldrh	r3, [r7, #28]
 80060a6:	3302      	adds	r3, #2
 80060a8:	83bb      	strh	r3, [r7, #28]
 80060aa:	8bba      	ldrh	r2, [r7, #28]
 80060ac:	897b      	ldrh	r3, [r7, #10]
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	3b02      	subs	r3, #2
 80060b2:	429a      	cmp	r2, r3
 80060b4:	f4ff af6d 	bcc.w	8005f92 <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 80060b8:	8b7b      	ldrh	r3, [r7, #26]
 80060ba:	08db      	lsrs	r3, r3, #3
 80060bc:	b29a      	uxth	r2, r3
 80060be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c0:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 80060c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c4:	8b7a      	ldrh	r2, [r7, #26]
 80060c6:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 80060c8:	8bfb      	ldrh	r3, [r7, #30]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <iso15693VICCDecode+0x19e>
    {
        return err;
 80060ce:	8bfb      	ldrh	r3, [r7, #30]
 80060d0:	e04a      	b.n	8006168 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 80060d2:	8b7b      	ldrh	r3, [r7, #26]
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 80060de:	2315      	movs	r3, #21
 80060e0:	e042      	b.n	8006168 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d93b      	bls.n	8006162 <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 80060ea:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <iso15693VICCDecode+0x1c4>
 80060f2:	f24e 0012 	movw	r0, #57362	@ 0xe012
 80060f6:	e001      	b.n	80060fc <iso15693VICCDecode+0x1c8>
 80060f8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80060fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	3b02      	subs	r3, #2
 8006102:	b29b      	uxth	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	f7ff fd20 	bl	8005b4c <rfalCrcCalculateCcitt>
 800610c:	4603      	mov	r3, r0
 800610e:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8006110:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006114:	f083 0301 	eor.w	r3, r3, #1
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <iso15693VICCDecode+0x1f2>
 800611e:	8afb      	ldrh	r3, [r7, #22]
 8006120:	43db      	mvns	r3, r3
 8006122:	b29b      	uxth	r3, r3
 8006124:	e000      	b.n	8006128 <iso15693VICCDecode+0x1f4>
 8006126:	8afb      	ldrh	r3, [r7, #22]
 8006128:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800612a:	8afb      	ldrh	r3, [r7, #22]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006130:	8812      	ldrh	r2, [r2, #0]
 8006132:	3a02      	subs	r2, #2
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	440a      	add	r2, r1
 8006138:	7812      	ldrb	r2, [r2, #0]
 800613a:	4293      	cmp	r3, r2
 800613c:	d10e      	bne.n	800615c <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800613e:	8afb      	ldrh	r3, [r7, #22]
 8006140:	0a1b      	lsrs	r3, r3, #8
 8006142:	b29b      	uxth	r3, r3
 8006144:	b2db      	uxtb	r3, r3
 8006146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006148:	8812      	ldrh	r2, [r2, #0]
 800614a:	3a01      	subs	r2, #1
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	440a      	add	r2, r1
 8006150:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 8006152:	4293      	cmp	r3, r2
 8006154:	d102      	bne.n	800615c <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 8006156:	2300      	movs	r3, #0
 8006158:	83fb      	strh	r3, [r7, #30]
 800615a:	e004      	b.n	8006166 <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 800615c:	2315      	movs	r3, #21
 800615e:	83fb      	strh	r3, [r7, #30]
 8006160:	e001      	b.n	8006166 <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 8006162:	2315      	movs	r3, #21
 8006164:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 8006166:	8bfb      	ldrh	r3, [r7, #30]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 8006170:	b480      	push	{r7}
 8006172:	b089      	sub	sp, #36	@ 0x24
 8006174:	af00      	add	r7, sp, #0
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	4603      	mov	r3, r0
 800617c:	73fb      	strb	r3, [r7, #15]
 800617e:	4613      	mov	r3, r2
 8006180:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 8006182:	2300      	movs	r3, #0
 8006184:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 8006190:	89bb      	ldrh	r3, [r7, #12]
 8006192:	2b03      	cmp	r3, #3
 8006194:	d801      	bhi.n	800619a <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 8006196:	2301      	movs	r3, #1
 8006198:	e038      	b.n	800620c <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800619e:	2300      	movs	r3, #0
 80061a0:	83bb      	strh	r3, [r7, #28]
 80061a2:	e02f      	b.n	8006204 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 80061a4:	7ffb      	ldrb	r3, [r7, #31]
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d81a      	bhi.n	80061e4 <iso15693PhyVCDCode1Of4+0x74>
 80061ae:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <iso15693PhyVCDCode1Of4+0x44>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	080061c5 	.word	0x080061c5
 80061b8:	080061cd 	.word	0x080061cd
 80061bc:	080061d5 	.word	0x080061d5
 80061c0:	080061dd 	.word	0x080061dd
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2202      	movs	r2, #2
 80061c8:	701a      	strb	r2, [r3, #0]
                break;
 80061ca:	e00c      	b.n	80061e6 <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2208      	movs	r2, #8
 80061d0:	701a      	strb	r2, [r3, #0]
                break;
 80061d2:	e008      	b.n	80061e6 <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2220      	movs	r2, #32
 80061d8:	701a      	strb	r2, [r3, #0]
                break;
 80061da:	e004      	b.n	80061e6 <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2280      	movs	r2, #128	@ 0x80
 80061e0:	701a      	strb	r2, [r3, #0]
                break;
 80061e2:	e000      	b.n	80061e6 <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 80061e4:	bf00      	nop
        }
        outbuf++;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	3301      	adds	r3, #1
 80061ea:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	3301      	adds	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 80061f8:	7ffb      	ldrb	r3, [r7, #31]
 80061fa:	089b      	lsrs	r3, r3, #2
 80061fc:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 80061fe:	8bbb      	ldrh	r3, [r7, #28]
 8006200:	3301      	adds	r3, #1
 8006202:	83bb      	strh	r3, [r7, #28]
 8006204:	8bbb      	ldrh	r3, [r7, #28]
 8006206:	2b03      	cmp	r3, #3
 8006208:	d9cc      	bls.n	80061a4 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800620a:	8afb      	ldrh	r3, [r7, #22]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3724      	adds	r7, #36	@ 0x24
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	@ 0x24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607b      	str	r3, [r7, #4]
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]
 8006226:	4613      	mov	r3, r2
 8006228:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800622a:	2300      	movs	r3, #0
 800622c:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 8006238:	89bb      	ldrh	r3, [r7, #12]
 800623a:	2b3f      	cmp	r3, #63	@ 0x3f
 800623c:	d801      	bhi.n	8006242 <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 800623e:	2301      	movs	r3, #1
 8006240:	e039      	b.n	80062b6 <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 8006246:	2300      	movs	r3, #0
 8006248:	83bb      	strh	r3, [r7, #28]
 800624a:	e030      	b.n	80062ae <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 800624c:	7ffb      	ldrb	r3, [r7, #31]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d81a      	bhi.n	8006288 <iso15693PhyVCDCode1Of256+0x70>
 8006252:	a201      	add	r2, pc, #4	@ (adr r2, 8006258 <iso15693PhyVCDCode1Of256+0x40>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	08006269 	.word	0x08006269
 800625c:	08006271 	.word	0x08006271
 8006260:	08006279 	.word	0x08006279
 8006264:	08006281 	.word	0x08006281
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2202      	movs	r2, #2
 800626c:	701a      	strb	r2, [r3, #0]
                break;
 800626e:	e00f      	b.n	8006290 <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2208      	movs	r2, #8
 8006274:	701a      	strb	r2, [r3, #0]
                break;
 8006276:	e00b      	b.n	8006290 <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2220      	movs	r2, #32
 800627c:	701a      	strb	r2, [r3, #0]
                break;
 800627e:	e007      	b.n	8006290 <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2280      	movs	r2, #128	@ 0x80
 8006284:	701a      	strb	r2, [r3, #0]
                break;
 8006286:	e003      	b.n	8006290 <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
                break;               
 800628e:	bf00      	nop
        }
        outbuf++;
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	3301      	adds	r3, #1
 8006294:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	3301      	adds	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 80062a2:	7ffb      	ldrb	r3, [r7, #31]
 80062a4:	3b04      	subs	r3, #4
 80062a6:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 80062a8:	8bbb      	ldrh	r3, [r7, #28]
 80062aa:	3301      	adds	r3, #1
 80062ac:	83bb      	strh	r3, [r7, #28]
 80062ae:	8bbb      	ldrh	r3, [r7, #28]
 80062b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80062b2:	d9cb      	bls.n	800624c <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 80062b4:	8afb      	ldrh	r3, [r7, #22]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3724      	adds	r7, #36	@ 0x24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop

080062c4 <isoDepClearCounters>:
 ******************************************************************************
 */

/*******************************************************************************/
static void isoDepClearCounters( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
    gIsoDep.cntIRetrys   = 0;
 80062c8:	4b06      	ldr	r3, [pc, #24]	@ (80062e4 <isoDepClearCounters+0x20>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys   = 0;
 80062ce:	4b05      	ldr	r3, [pc, #20]	@ (80062e4 <isoDepClearCounters+0x20>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	719a      	strb	r2, [r3, #6]
    gIsoDep.cntSRetrys   = 0;
 80062d4:	4b03      	ldr	r3, [pc, #12]	@ (80062e4 <isoDepClearCounters+0x20>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	71da      	strb	r2, [r3, #7]
}
 80062da:	bf00      	nop
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	20000628 	.word	0x20000628

080062e8 <isoDepTx>:

/*******************************************************************************/
static ReturnCode isoDepTx( uint8_t pcb, const uint8_t* txBuf, uint8_t *infBuf, uint16_t infLen, uint32_t fwt )
{
 80062e8:	b590      	push	{r4, r7, lr}
 80062ea:	b08b      	sub	sp, #44	@ 0x2c
 80062ec:	af04      	add	r7, sp, #16
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	461a      	mov	r2, r3
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
 80062f8:	4613      	mov	r3, r2
 80062fa:	81bb      	strh	r3, [r7, #12]
    uint8_t    *txBlock;
    uint16_t   txBufLen;
    uint8_t    computedPcb;

    
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	617b      	str	r3, [r7, #20]
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 8006300:	4a44      	ldr	r2, [pc, #272]	@ (8006414 <isoDepTx+0x12c>)
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
    
    
    if ( infLen > 0U )
 8006308:	89bb      	ldrh	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d009      	beq.n	8006322 <isoDepTx+0x3a>
    {
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	4a3f      	ldr	r2, [pc, #252]	@ (8006414 <isoDepTx+0x12c>)
 8006316:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 800631a:	4293      	cmp	r3, r2
 800631c:	d201      	bcs.n	8006322 <isoDepTx+0x3a>
        {
            return ERR_NOMEM;
 800631e:	2301      	movs	r3, #1
 8006320:	e074      	b.n	800640c <isoDepTx+0x124>
    }
    
    
    /*******************************************************************************/
    /* Compute optional PCB bits */
    computedPcb = pcb;
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8006326:	4b3b      	ldr	r3, [pc, #236]	@ (8006414 <isoDepTx+0x12c>)
 8006328:	78db      	ldrb	r3, [r3, #3]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d108      	bne.n	8006340 <isoDepTx+0x58>
 800632e:	4b39      	ldr	r3, [pc, #228]	@ (8006414 <isoDepTx+0x12c>)
 8006330:	78db      	ldrb	r3, [r3, #3]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d108      	bne.n	8006348 <isoDepTx+0x60>
 8006336:	4b37      	ldr	r3, [pc, #220]	@ (8006414 <isoDepTx+0x12c>)
 8006338:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <isoDepTx+0x60>
 8006340:	7cfb      	ldrb	r3, [r7, #19]
 8006342:	f043 0308 	orr.w	r3, r3, #8
 8006346:	74fb      	strb	r3, [r7, #19]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8006348:	4b32      	ldr	r3, [pc, #200]	@ (8006414 <isoDepTx+0x12c>)
 800634a:	791b      	ldrb	r3, [r3, #4]
 800634c:	2bff      	cmp	r3, #255	@ 0xff
 800634e:	d003      	beq.n	8006358 <isoDepTx+0x70>
 8006350:	7cfb      	ldrb	r3, [r7, #19]
 8006352:	f043 0304 	orr.w	r3, r3, #4
 8006356:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 8006358:	4b2e      	ldr	r3, [pc, #184]	@ (8006414 <isoDepTx+0x12c>)
 800635a:	7c9b      	ldrb	r3, [r3, #18]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <isoDepTx+0x8a>
 8006360:	7cfb      	ldrb	r3, [r7, #19]
 8006362:	f003 03e2 	and.w	r3, r3, #226	@ 0xe2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d103      	bne.n	8006372 <isoDepTx+0x8a>
 800636a:	7cfb      	ldrb	r3, [r7, #19]
 800636c:	f043 0310 	orr.w	r3, r3, #16
 8006370:	74fb      	strb	r3, [r7, #19]

    
    /*******************************************************************************/
    /* Compute Payload on the given txBuf, start by the PCB | DID | NAD | before INF */
    
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 8006372:	4b28      	ldr	r3, [pc, #160]	@ (8006414 <isoDepTx+0x12c>)
 8006374:	791b      	ldrb	r3, [r3, #4]
 8006376:	2bff      	cmp	r3, #255	@ 0xff
 8006378:	d006      	beq.n	8006388 <isoDepTx+0xa0>
    {
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	3b01      	subs	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	4b24      	ldr	r3, [pc, #144]	@ (8006414 <isoDepTx+0x12c>)
 8006382:	791a      	ldrb	r2, [r3, #4]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	701a      	strb	r2, [r3, #0]
    }
    
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 8006388:	4b22      	ldr	r3, [pc, #136]	@ (8006414 <isoDepTx+0x12c>)
 800638a:	78db      	ldrb	r3, [r3, #3]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <isoDepTx+0xba>
 8006390:	4b20      	ldr	r3, [pc, #128]	@ (8006414 <isoDepTx+0x12c>)
 8006392:	78db      	ldrb	r3, [r3, #3]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <isoDepTx+0xc8>
 8006398:	4b1e      	ldr	r3, [pc, #120]	@ (8006414 <isoDepTx+0x12c>)
 800639a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d006      	beq.n	80063b0 <isoDepTx+0xc8>
    {
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006414 <isoDepTx+0x12c>)
 80063aa:	78da      	ldrb	r2, [r3, #3]
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	701a      	strb	r2, [r3, #0]
    }
    
    *(--txBlock)      = computedPcb;               /* PCB always present */
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	7cfa      	ldrb	r2, [r7, #19]
 80063ba:	701a      	strb	r2, [r3, #0]
    
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	89bb      	ldrh	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	823b      	strh	r3, [r7, #16]
    
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 80063ca:	8a3a      	ldrh	r2, [r7, #16]
 80063cc:	4b11      	ldr	r3, [pc, #68]	@ (8006414 <isoDepTx+0x12c>)
 80063ce:	8a1b      	ldrh	r3, [r3, #16]
 80063d0:	3b02      	subs	r3, #2
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d901      	bls.n	80063da <isoDepTx+0xf2>
    {
        return ERR_NOTSUPP;
 80063d6:	2318      	movs	r3, #24
 80063d8:	e018      	b.n	800640c <isoDepTx+0x124>
    }
        
    return rfalTransceiveBlockingTx( txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 80063da:	4b0e      	ldr	r3, [pc, #56]	@ (8006414 <isoDepTx+0x12c>)
 80063dc:	6998      	ldr	r0, [r3, #24]
 80063de:	4b0d      	ldr	r3, [pc, #52]	@ (8006414 <isoDepTx+0x12c>)
 80063e0:	8bdc      	ldrh	r4, [r3, #30]
 80063e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006414 <isoDepTx+0x12c>)
 80063e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <isoDepTx+0x12c>)
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d001      	beq.n	80063f2 <isoDepTx+0x10a>
 80063ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f0:	e001      	b.n	80063f6 <isoDepTx+0x10e>
 80063f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063f6:	8a39      	ldrh	r1, [r7, #16]
 80063f8:	9302      	str	r3, [sp, #8]
 80063fa:	2300      	movs	r3, #0
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	9200      	str	r2, [sp, #0]
 8006400:	4623      	mov	r3, r4
 8006402:	4602      	mov	r2, r0
 8006404:	6978      	ldr	r0, [r7, #20]
 8006406:	f008 fcbf 	bl	800ed88 <rfalTransceiveBlockingTx>
 800640a:	4603      	mov	r3, r0
}
 800640c:	4618      	mov	r0, r3
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	bd90      	pop	{r4, r7, pc}
 8006414:	20000628 	.word	0x20000628

08006418 <isoDepHandleControlMsg>:

/*******************************************************************************/
static ReturnCode isoDepHandleControlMsg( rfalIsoDepControlMsg controlMsg, uint8_t param )
{
 8006418:	b590      	push	{r4, r7, lr}
 800641a:	b089      	sub	sp, #36	@ 0x24
 800641c:	af02      	add	r7, sp, #8
 800641e:	4603      	mov	r3, r0
 8006420:	460a      	mov	r2, r1
 8006422:	71fb      	strb	r3, [r7, #7]
 8006424:	4613      	mov	r3, r2
 8006426:	71bb      	strb	r3, [r7, #6]
    uint8_t  pcb;   
    uint8_t  ctrlMsgBuf[ISODEP_CONTROLMSG_BUF_LEN];
    uint8_t  infLen;
    uint32_t fwtTemp;
    
    infLen  = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	75bb      	strb	r3, [r7, #22]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 800642c:	4b56      	ldr	r3, [pc, #344]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	4b55      	ldr	r3, [pc, #340]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	4413      	add	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 8006438:	f107 030c 	add.w	r3, r7, #12
 800643c:	2204      	movs	r2, #4
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f00b f895 	bl	8011570 <memset>
    
    switch( controlMsg )
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	2b03      	cmp	r3, #3
 800644a:	f200 8088 	bhi.w	800655e <isoDepHandleControlMsg+0x146>
 800644e:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <isoDepHandleControlMsg+0x3c>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	08006465 	.word	0x08006465
 8006458:	08006491 	.word	0x08006491
 800645c:	080064bd 	.word	0x080064bd
 8006460:	0800652b 	.word	0x0800652b
    {
        /*******************************************************************************/
        case ISODEP_R_ACK:
            
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 8006464:	4b48      	ldr	r3, [pc, #288]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 8006466:	799b      	ldrb	r3, [r3, #6]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	b2d1      	uxtb	r1, r2
 800646c:	4a46      	ldr	r2, [pc, #280]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 800646e:	7191      	strb	r1, [r2, #6]
 8006470:	4a45      	ldr	r2, [pc, #276]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 8006472:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8006476:	4293      	cmp	r3, r2
 8006478:	d901      	bls.n	800647e <isoDepHandleControlMsg+0x66>
            {
                return ERR_PROTO;
 800647a:	230b      	movs	r3, #11
 800647c:	e07f      	b.n	800657e <isoDepHandleControlMsg+0x166>
            }
            
            pcb = isoDep_PCBRACK( gIsoDep.blockNumber );
 800647e:	4b42      	ldr	r3, [pc, #264]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 8006480:	789b      	ldrb	r3, [r3, #2]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	b2db      	uxtb	r3, r3
 8006488:	f063 035d 	orn	r3, r3, #93	@ 0x5d
 800648c:	75fb      	strb	r3, [r7, #23]
            break;
 800648e:	e068      	b.n	8006562 <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_R_NAK:
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 8006490:	4b3d      	ldr	r3, [pc, #244]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 8006492:	799b      	ldrb	r3, [r3, #6]
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	b2d1      	uxtb	r1, r2
 8006498:	4a3b      	ldr	r2, [pc, #236]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 800649a:	7191      	strb	r1, [r2, #6]
 800649c:	4a3a      	ldr	r2, [pc, #232]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 800649e:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d901      	bls.n	80064aa <isoDepHandleControlMsg+0x92>
            {
                return ERR_TIMEOUT;
 80064a6:	2304      	movs	r3, #4
 80064a8:	e069      	b.n	800657e <isoDepHandleControlMsg+0x166>
            }
            
            pcb = isoDep_PCBRNAK( gIsoDep.blockNumber );            
 80064aa:	4b37      	ldr	r3, [pc, #220]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 80064ac:	789b      	ldrb	r3, [r3, #2]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f063 034d 	orn	r3, r3, #77	@ 0x4d
 80064b8:	75fb      	strb	r3, [r7, #23]
            break;
 80064ba:	e052      	b.n	8006562 <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_S_WTX:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 80064bc:	4b32      	ldr	r3, [pc, #200]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 80064be:	79db      	ldrb	r3, [r3, #7]
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	b2d1      	uxtb	r1, r2
 80064c4:	4a30      	ldr	r2, [pc, #192]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 80064c6:	71d1      	strb	r1, [r2, #7]
 80064c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 80064ca:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d901      	bls.n	80064d6 <isoDepHandleControlMsg+0xbe>
            {
                return ERR_PROTO;
 80064d2:	230b      	movs	r3, #11
 80064d4:	e053      	b.n	800657e <isoDepHandleControlMsg+0x166>
            }
            
            /* Check if WTXM is valid */
            if( ! isoDep_isWTXMValid(param) )
 80064d6:	79bb      	ldrb	r3, [r7, #6]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <isoDepHandleControlMsg+0xca>
 80064dc:	79bb      	ldrb	r3, [r7, #6]
 80064de:	2b3b      	cmp	r3, #59	@ 0x3b
 80064e0:	d901      	bls.n	80064e6 <isoDepHandleControlMsg+0xce>
            {
                return ERR_PROTO;
 80064e2:	230b      	movs	r3, #11
 80064e4:	e04b      	b.n	800657e <isoDepHandleControlMsg+0x166>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 80064e6:	4b28      	ldr	r3, [pc, #160]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d111      	bne.n	8006512 <isoDepHandleControlMsg+0xfa>
            {
                /* Calculate temp Wait Time eXtension */ 
                fwtTemp = (gIsoDep.fwt * param);
 80064ee:	4b26      	ldr	r3, [pc, #152]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	79ba      	ldrb	r2, [r7, #6]
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	613b      	str	r3, [r7, #16]
                fwtTemp = MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006500:	bf28      	it	cs
 8006502:	f04f 6380 	movcs.w	r3, #67108864	@ 0x4000000
 8006506:	613b      	str	r3, [r7, #16]
                fwtTemp += gIsoDep.dFwt;
 8006508:	4b1f      	ldr	r3, [pc, #124]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4413      	add	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
            }
            
            pcb = ISODEP_PCB_SWTX;
 8006512:	23f2      	movs	r3, #242	@ 0xf2
 8006514:	75fb      	strb	r3, [r7, #23]
            ctrlMsgBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 8006516:	7dbb      	ldrb	r3, [r7, #22]
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	75ba      	strb	r2, [r7, #22]
 800651c:	3302      	adds	r3, #2
 800651e:	3318      	adds	r3, #24
 8006520:	443b      	add	r3, r7
 8006522:	79ba      	ldrb	r2, [r7, #6]
 8006524:	f803 2c0c 	strb.w	r2, [r3, #-12]
            break;
 8006528:	e01b      	b.n	8006562 <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_S_DSL:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 800652a:	4b17      	ldr	r3, [pc, #92]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 800652c:	79db      	ldrb	r3, [r3, #7]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	b2d1      	uxtb	r1, r2
 8006532:	4a15      	ldr	r2, [pc, #84]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 8006534:	71d1      	strb	r1, [r2, #7]
 8006536:	4a14      	ldr	r2, [pc, #80]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 8006538:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 800653c:	4293      	cmp	r3, r2
 800653e:	d901      	bls.n	8006544 <isoDepHandleControlMsg+0x12c>
            {
                return ERR_PROTO;
 8006540:	230b      	movs	r3, #11
 8006542:	e01c      	b.n	800657e <isoDepHandleControlMsg+0x166>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 8006544:	4b10      	ldr	r3, [pc, #64]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <isoDepHandleControlMsg+0x140>
            {
                /* Digital 1.0 - 13.2.7.3 Poller must wait fwtDEACTIVATION */
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 800654c:	f44f 338c 	mov.w	r3, #71680	@ 0x11800
 8006550:	613b      	str	r3, [r7, #16]
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 8006552:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <isoDepHandleControlMsg+0x170>)
 8006554:	2203      	movs	r2, #3
 8006556:	701a      	strb	r2, [r3, #0]
            }
            pcb = ISODEP_PCB_SDSL;
 8006558:	23c2      	movs	r3, #194	@ 0xc2
 800655a:	75fb      	strb	r3, [r7, #23]
            break;
 800655c:	e001      	b.n	8006562 <isoDepHandleControlMsg+0x14a>
        
        /*******************************************************************************/
        default:
            return ERR_INTERNAL;
 800655e:	230c      	movs	r3, #12
 8006560:	e00d      	b.n	800657e <isoDepHandleControlMsg+0x166>
    }
    
    return isoDepTx( pcb, ctrlMsgBuf, &ctrlMsgBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 8006562:	7dbb      	ldrb	r3, [r7, #22]
 8006564:	b29c      	uxth	r4, r3
 8006566:	f107 030c 	add.w	r3, r7, #12
 800656a:	1c9a      	adds	r2, r3, #2
 800656c:	f107 010c 	add.w	r1, r7, #12
 8006570:	7df8      	ldrb	r0, [r7, #23]
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	4623      	mov	r3, r4
 8006578:	f7ff feb6 	bl	80062e8 <isoDepTx>
 800657c:	4603      	mov	r3, r0
}
 800657e:	4618      	mov	r0, r3
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	bd90      	pop	{r4, r7, pc}
 8006586:	bf00      	nop
 8006588:	20000628 	.word	0x20000628

0800658c <isoDepReSendControlMsg>:

#if RFAL_FEATURE_ISO_DEP_LISTEN
/*******************************************************************************/
static ReturnCode isoDepReSendControlMsg( void )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
    if( isoDep_PCBisRACK( gIsoDep.lastPCB ) )
 8006590:	4b2a      	ldr	r3, [pc, #168]	@ (800663c <isoDepReSendControlMsg+0xb0>)
 8006592:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006596:	f003 03e6 	and.w	r3, r3, #230	@ 0xe6
 800659a:	2ba2      	cmp	r3, #162	@ 0xa2
 800659c:	d10c      	bne.n	80065b8 <isoDepReSendControlMsg+0x2c>
 800659e:	4b27      	ldr	r3, [pc, #156]	@ (800663c <isoDepReSendControlMsg+0xb0>)
 80065a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d105      	bne.n	80065b8 <isoDepReSendControlMsg+0x2c>
    {
        return isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM );
 80065ac:	2100      	movs	r1, #0
 80065ae:	2000      	movs	r0, #0
 80065b0:	f7ff ff32 	bl	8006418 <isoDepHandleControlMsg>
 80065b4:	4603      	mov	r3, r0
 80065b6:	e03f      	b.n	8006638 <isoDepReSendControlMsg+0xac>
    }
    
    if( isoDep_PCBisRNAK( gIsoDep.lastPCB ) )
 80065b8:	4b20      	ldr	r3, [pc, #128]	@ (800663c <isoDepReSendControlMsg+0xb0>)
 80065ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065be:	f003 03e6 	and.w	r3, r3, #230	@ 0xe6
 80065c2:	2ba2      	cmp	r3, #162	@ 0xa2
 80065c4:	d10c      	bne.n	80065e0 <isoDepReSendControlMsg+0x54>
 80065c6:	4b1d      	ldr	r3, [pc, #116]	@ (800663c <isoDepReSendControlMsg+0xb0>)
 80065c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <isoDepReSendControlMsg+0x54>
    {
        return isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM );
 80065d4:	2100      	movs	r1, #0
 80065d6:	2001      	movs	r0, #1
 80065d8:	f7ff ff1e 	bl	8006418 <isoDepHandleControlMsg>
 80065dc:	4603      	mov	r3, r0
 80065de:	e02b      	b.n	8006638 <isoDepReSendControlMsg+0xac>
    }
    
    if( isoDep_PCBisSDeselect( gIsoDep.lastPCB ) )
 80065e0:	4b16      	ldr	r3, [pc, #88]	@ (800663c <isoDepReSendControlMsg+0xb0>)
 80065e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065e6:	f003 03c7 	and.w	r3, r3, #199	@ 0xc7
 80065ea:	2bc2      	cmp	r3, #194	@ 0xc2
 80065ec:	d10c      	bne.n	8006608 <isoDepReSendControlMsg+0x7c>
 80065ee:	4b13      	ldr	r3, [pc, #76]	@ (800663c <isoDepReSendControlMsg+0xb0>)
 80065f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d105      	bne.n	8006608 <isoDepReSendControlMsg+0x7c>
    {
        return isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM );
 80065fc:	2100      	movs	r1, #0
 80065fe:	2003      	movs	r0, #3
 8006600:	f7ff ff0a 	bl	8006418 <isoDepHandleControlMsg>
 8006604:	4603      	mov	r3, r0
 8006606:	e017      	b.n	8006638 <isoDepReSendControlMsg+0xac>
    }
    
    if( isoDep_PCBisSWTX( gIsoDep.lastPCB ) )
 8006608:	4b0c      	ldr	r3, [pc, #48]	@ (800663c <isoDepReSendControlMsg+0xb0>)
 800660a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800660e:	f003 03c7 	and.w	r3, r3, #199	@ 0xc7
 8006612:	2bc2      	cmp	r3, #194	@ 0xc2
 8006614:	d10f      	bne.n	8006636 <isoDepReSendControlMsg+0xaa>
 8006616:	4b09      	ldr	r3, [pc, #36]	@ (800663c <isoDepReSendControlMsg+0xb0>)
 8006618:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800661c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006620:	2b30      	cmp	r3, #48	@ 0x30
 8006622:	d108      	bne.n	8006636 <isoDepReSendControlMsg+0xaa>
    {
        return isoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM );
 8006624:	4b05      	ldr	r3, [pc, #20]	@ (800663c <isoDepReSendControlMsg+0xb0>)
 8006626:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800662a:	4619      	mov	r1, r3
 800662c:	2002      	movs	r0, #2
 800662e:	f7ff fef3 	bl	8006418 <isoDepHandleControlMsg>
 8006632:	4603      	mov	r3, r0
 8006634:	e000      	b.n	8006638 <isoDepReSendControlMsg+0xac>
    }
    return ERR_WRONG_STATE; 
 8006636:	2321      	movs	r3, #33	@ 0x21
}
 8006638:	4618      	mov	r0, r3
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20000628 	.word	0x20000628

08006640 <rfalIsoDepInitialize>:
 */


/*******************************************************************************/
void rfalIsoDepInitialize( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
    gIsoDep.state        = ISODEP_ST_IDLE;
 8006644:	4b26      	ldr	r3, [pc, #152]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 8006646:	2200      	movs	r2, #0
 8006648:	701a      	strb	r2, [r3, #0]
    gIsoDep.role         = ISODEP_ROLE_PCD;
 800664a:	4b25      	ldr	r3, [pc, #148]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 800664c:	2200      	movs	r2, #0
 800664e:	705a      	strb	r2, [r3, #1]
    gIsoDep.did          = RFAL_ISODEP_NO_DID;
 8006650:	4b23      	ldr	r3, [pc, #140]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 8006652:	2200      	movs	r2, #0
 8006654:	70da      	strb	r2, [r3, #3]
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 8006656:	4b22      	ldr	r3, [pc, #136]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 8006658:	22ff      	movs	r2, #255	@ 0xff
 800665a:	711a      	strb	r2, [r3, #4]
    gIsoDep.blockNumber  = 0;
 800665c:	4b20      	ldr	r3, [pc, #128]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 800665e:	2200      	movs	r2, #0
 8006660:	709a      	strb	r2, [r3, #2]
    gIsoDep.isTxChaining = false;
 8006662:	4b1f      	ldr	r3, [pc, #124]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 8006664:	2200      	movs	r2, #0
 8006666:	749a      	strb	r2, [r3, #18]
    gIsoDep.isRxChaining = false;
 8006668:	4b1d      	ldr	r3, [pc, #116]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 800666a:	2200      	movs	r2, #0
 800666c:	74da      	strb	r2, [r3, #19]
    gIsoDep.lastDID00    = false;
 800666e:	4b1c      	ldr	r3, [pc, #112]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 8006676:	4b1a      	ldr	r3, [pc, #104]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 8006678:	2240      	movs	r2, #64	@ 0x40
 800667a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 800667e:	4b18      	ldr	r3, [pc, #96]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 8006680:	2210      	movs	r2, #16
 8006682:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 8006684:	4b16      	ldr	r3, [pc, #88]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 8006686:	2210      	movs	r2, #16
 8006688:	845a      	strh	r2, [r3, #34]	@ 0x22
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 800668a:	4b15      	ldr	r3, [pc, #84]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    
    gIsoDep.rxLen        = NULL;
 8006692:	4b13      	ldr	r3, [pc, #76]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 8006694:	2200      	movs	r2, #0
 8006696:	62da      	str	r2, [r3, #44]	@ 0x2c
    gIsoDep.rxBuf        = NULL;
 8006698:	4b11      	ldr	r3, [pc, #68]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 800669a:	2200      	movs	r2, #0
 800669c:	619a      	str	r2, [r3, #24]
    
    gIsoDep.isTxPending  = false;
 800669e:	4b10      	ldr	r3, [pc, #64]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    gIsoDep.isWait4WTX   = false;
 80066a6:	4b0e      	ldr	r3, [pc, #56]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 80066ae:	4b0c      	ldr	r3, [pc, #48]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    gIsoDep.maxRetriesR    = RFAL_ISODEP_MAX_R_RETRYS;
 80066b6:	4b0a      	ldr	r3, [pc, #40]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 80066b8:	2203      	movs	r2, #3
 80066ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    gIsoDep.maxRetriesS    = RFAL_ISODEP_MAX_S_RETRYS;
 80066be:	4b08      	ldr	r3, [pc, #32]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 80066c0:	2203      	movs	r2, #3
 80066c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 80066c6:	4b06      	ldr	r3, [pc, #24]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 80066c8:	2202      	movs	r2, #2
 80066ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    gIsoDep.maxRetriesRATS = RFAL_ISODEP_RATS_RETRIES;
 80066ce:	4b04      	ldr	r3, [pc, #16]	@ (80066e0 <rfalIsoDepInitialize+0xa0>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    
    isoDepClearCounters();
 80066d6:	f7ff fdf5 	bl	80062c4 <isoDepClearCounters>
}
 80066da:	bf00      	nop
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000628 	.word	0x20000628

080066e4 <isoDepDataExchangePCD>:


#if RFAL_FEATURE_ISO_DEP_POLL
/*******************************************************************************/
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
{
 80066e4:	b5b0      	push	{r4, r5, r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    uint8_t    rxPCB;
    
    /* Check out parameters */
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <isoDepDataExchangePCD+0x16>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <isoDepDataExchangePCD+0x1a>
    {
        return ERR_PARAM;
 80066fa:	2307      	movs	r3, #7
 80066fc:	e268      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
    }    
    
    *outIsChaining = false;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
        
    /* Calculate header required and check if the buffers InfPositions are suitable */    
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 8006704:	4b9f      	ldr	r3, [pc, #636]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 800670c:	4b9d      	ldr	r3, [pc, #628]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 800670e:	78db      	ldrb	r3, [r3, #3]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <isoDepDataExchangePCD+0x40>
 8006714:	4b9b      	ldr	r3, [pc, #620]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006716:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800671a:	3301      	adds	r3, #1
 800671c:	b2da      	uxtb	r2, r3
 800671e:	4b99      	ldr	r3, [pc, #612]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006720:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 8006724:	4b97      	ldr	r3, [pc, #604]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006726:	791b      	ldrb	r3, [r3, #4]
 8006728:	2bff      	cmp	r3, #255	@ 0xff
 800672a:	d007      	beq.n	800673c <isoDepDataExchangePCD+0x58>
 800672c:	4b95      	ldr	r3, [pc, #596]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 800672e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006732:	3301      	adds	r3, #1
 8006734:	b2da      	uxtb	r2, r3
 8006736:	4b93      	ldr	r3, [pc, #588]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006738:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    
    /* check if there is enough space before the infPos to append ISO-DEP headers on rx and tx */
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 800673c:	4b91      	ldr	r3, [pc, #580]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 800673e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8006742:	4b90      	ldr	r3, [pc, #576]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006744:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006748:	429a      	cmp	r2, r3
 800674a:	d307      	bcc.n	800675c <isoDepDataExchangePCD+0x78>
 800674c:	4b8d      	ldr	r3, [pc, #564]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 800674e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006752:	4b8c      	ldr	r3, [pc, #560]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006754:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006758:	429a      	cmp	r2, r3
 800675a:	d201      	bcs.n	8006760 <isoDepDataExchangePCD+0x7c>
    {
        return ERR_PARAM;
 800675c:	2307      	movs	r3, #7
 800675e:	e237      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
    }
    
    /*******************************************************************************/
    /* Wait until SFGT has been fulfilled (as a PCD) */
    if(gIsoDep.SFGTTimer != 0U)
 8006760:	4b88      	ldr	r3, [pc, #544]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00c      	beq.n	8006782 <isoDepDataExchangePCD+0x9e>
    {
        if( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) )
 8006768:	4b86      	ldr	r3, [pc, #536]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 800676a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff f8bd 	bl	80058ec <timerIsExpired>
 8006772:	4603      	mov	r3, r0
 8006774:	f083 0301 	eor.w	r3, r3, #1
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <isoDepDataExchangePCD+0x9e>
        {
            return ERR_BUSY;
 800677e:	2302      	movs	r3, #2
 8006780:	e226      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
        }
    }
    /* Once done, clear SFGT timer */
    gIsoDep.SFGTTimer = 0;
 8006782:	4b80      	ldr	r3, [pc, #512]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006784:	2200      	movs	r2, #0
 8006786:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    
    /*******************************************************************************/
    switch( gIsoDep.state )
 8006788:	4b7e      	ldr	r3, [pc, #504]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b03      	cmp	r3, #3
 800678e:	f300 821d 	bgt.w	8006bcc <isoDepDataExchangePCD+0x4e8>
 8006792:	2b02      	cmp	r3, #2
 8006794:	da2d      	bge.n	80067f2 <isoDepDataExchangePCD+0x10e>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <isoDepDataExchangePCD+0xbc>
 800679a:	2b01      	cmp	r3, #1
 800679c:	d002      	beq.n	80067a4 <isoDepDataExchangePCD+0xc0>
            /* fall through */
          
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* MISRA 16.4: no empty default (comment will suffice) */
            break;
 800679e:	e215      	b.n	8006bcc <isoDepDataExchangePCD+0x4e8>
            return ERR_NONE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e215      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 80067a4:	4b77      	ldr	r3, [pc, #476]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80067a6:	789b      	ldrb	r3, [r3, #2]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	f043 0302 	orr.w	r3, r3, #2
 80067b2:	b2d8      	uxtb	r0, r3
 80067b4:	4b73      	ldr	r3, [pc, #460]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80067b6:	6959      	ldr	r1, [r3, #20]
 80067b8:	4b72      	ldr	r3, [pc, #456]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	4a71      	ldr	r2, [pc, #452]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80067be:	f892 2020 	ldrb.w	r2, [r2, #32]
 80067c2:	189c      	adds	r4, r3, r2
 80067c4:	4b6f      	ldr	r3, [pc, #444]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80067c6:	8b9d      	ldrh	r5, [r3, #28]
 80067c8:	4b6e      	ldr	r3, [pc, #440]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	4b6d      	ldr	r3, [pc, #436]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	462b      	mov	r3, r5
 80067d6:	4622      	mov	r2, r4
 80067d8:	f7ff fd86 	bl	80062e8 <isoDepTx>
 80067dc:	4603      	mov	r3, r0
 80067de:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 80067e0:	89fb      	ldrh	r3, [r7, #14]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <isoDepDataExchangePCD+0x10a>
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 80067e6:	4b67      	ldr	r3, [pc, #412]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80067e8:	2202      	movs	r2, #2
 80067ea:	701a      	strb	r2, [r3, #0]
                  break;
 80067ec:	e001      	b.n	80067f2 <isoDepDataExchangePCD+0x10e>
                  return ret;
 80067ee:	89fb      	ldrh	r3, [r7, #14]
 80067f0:	e1ee      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
            ret = rfalGetTransceiveStatus();
 80067f2:	f008 fb7f 	bl	800eef4 <rfalGetTransceiveStatus>
 80067f6:	4603      	mov	r3, r0
 80067f8:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 80067fa:	89fb      	ldrh	r3, [r7, #14]
 80067fc:	2b09      	cmp	r3, #9
 80067fe:	dc29      	bgt.n	8006854 <isoDepDataExchangePCD+0x170>
 8006800:	2b00      	cmp	r3, #0
 8006802:	da0e      	bge.n	8006822 <isoDepDataExchangePCD+0x13e>
 8006804:	e058      	b.n	80068b8 <isoDepDataExchangePCD+0x1d4>
 8006806:	3b15      	subs	r3, #21
 8006808:	4a5f      	ldr	r2, [pc, #380]	@ (8006988 <isoDepDataExchangePCD+0x2a4>)
 800680a:	fa22 f303 	lsr.w	r3, r2, r3
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	bf14      	ite	ne
 8006816:	2301      	movne	r3, #1
 8006818:	2300      	moveq	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d11e      	bne.n	800685e <isoDepDataExchangePCD+0x17a>
 8006820:	e04a      	b.n	80068b8 <isoDepDataExchangePCD+0x1d4>
 8006822:	2b09      	cmp	r3, #9
 8006824:	d848      	bhi.n	80068b8 <isoDepDataExchangePCD+0x1d4>
 8006826:	a201      	add	r2, pc, #4	@ (adr r2, 800682c <isoDepDataExchangePCD+0x148>)
 8006828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682c:	080068bd 	.word	0x080068bd
 8006830:	080068b9 	.word	0x080068b9
 8006834:	080068b5 	.word	0x080068b5
 8006838:	080068b9 	.word	0x080068b9
 800683c:	0800685f 	.word	0x0800685f
 8006840:	080068b9 	.word	0x080068b9
 8006844:	080068b9 	.word	0x080068b9
 8006848:	080068b9 	.word	0x080068b9
 800684c:	080068b9 	.word	0x080068b9
 8006850:	0800685f 	.word	0x0800685f
 8006854:	2b28      	cmp	r3, #40	@ 0x28
 8006856:	dc2f      	bgt.n	80068b8 <isoDepDataExchangePCD+0x1d4>
 8006858:	2b15      	cmp	r3, #21
 800685a:	dad4      	bge.n	8006806 <isoDepDataExchangePCD+0x122>
 800685c:	e02c      	b.n	80068b8 <isoDepDataExchangePCD+0x1d4>
                    if( gIsoDep.isRxChaining )
 800685e:	4b49      	ldr	r3, [pc, #292]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006860:	7cdb      	ldrb	r3, [r3, #19]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <isoDepDataExchangePCD+0x198>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8006866:	2100      	movs	r1, #0
 8006868:	2000      	movs	r0, #0
 800686a:	f7ff fdd5 	bl	8006418 <isoDepHandleControlMsg>
 800686e:	4603      	mov	r3, r0
 8006870:	81fb      	strh	r3, [r7, #14]
 8006872:	89fb      	ldrh	r3, [r7, #14]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01b      	beq.n	80068b0 <isoDepDataExchangePCD+0x1cc>
 8006878:	89fb      	ldrh	r3, [r7, #14]
 800687a:	e1a9      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 800687c:	4b41      	ldr	r3, [pc, #260]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b03      	cmp	r3, #3
 8006882:	d10a      	bne.n	800689a <isoDepDataExchangePCD+0x1b6>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 8006884:	2100      	movs	r1, #0
 8006886:	2003      	movs	r0, #3
 8006888:	f7ff fdc6 	bl	8006418 <isoDepHandleControlMsg>
 800688c:	4603      	mov	r3, r0
 800688e:	81fb      	strh	r3, [r7, #14]
 8006890:	89fb      	ldrh	r3, [r7, #14]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00c      	beq.n	80068b0 <isoDepDataExchangePCD+0x1cc>
 8006896:	89fb      	ldrh	r3, [r7, #14]
 8006898:	e19a      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 800689a:	2100      	movs	r1, #0
 800689c:	2001      	movs	r0, #1
 800689e:	f7ff fdbb 	bl	8006418 <isoDepHandleControlMsg>
 80068a2:	4603      	mov	r3, r0
 80068a4:	81fb      	strh	r3, [r7, #14]
 80068a6:	89fb      	ldrh	r3, [r7, #14]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <isoDepDataExchangePCD+0x1cc>
 80068ac:	89fb      	ldrh	r3, [r7, #14]
 80068ae:	e18f      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                    return ERR_BUSY;
 80068b0:	2302      	movs	r3, #2
 80068b2:	e18d      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                    return ERR_BUSY;  /* Debug purposes */
 80068b4:	2302      	movs	r3, #2
 80068b6:	e18b      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                    return ret;
 80068b8:	89fb      	ldrh	r3, [r7, #14]
 80068ba:	e189      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                    break;
 80068bc:	bf00      	nop
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	3307      	adds	r3, #7
 80068c4:	08db      	lsrs	r3, r3, #3
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	801a      	strh	r2, [r3, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	4a2c      	ldr	r2, [pc, #176]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80068d2:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d305      	bcc.n	80068e6 <isoDepDataExchangePCD+0x202>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	881a      	ldrh	r2, [r3, #0]
 80068de:	4b29      	ldr	r3, [pc, #164]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80068e0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d301      	bcc.n	80068ea <isoDepDataExchangePCD+0x206>
                return ERR_PROTO;
 80068e6:	230b      	movs	r3, #11
 80068e8:	e172      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 80068ea:	4b26      	ldr	r3, [pc, #152]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	737b      	strb	r3, [r7, #13]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 80068f2:	4b24      	ldr	r3, [pc, #144]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 80068f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d10b      	bne.n	8006914 <isoDepDataExchangePCD+0x230>
 80068fc:	7b7b      	ldrb	r3, [r7, #13]
 80068fe:	f003 0308 	and.w	r3, r3, #8
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <isoDepDataExchangePCD+0x22c>
 8006906:	7b7b      	ldrb	r3, [r7, #13]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <isoDepDataExchangePCD+0x230>
                return ERR_PROTO;
 8006910:	230b      	movs	r3, #11
 8006912:	e15d      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 8006914:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006916:	78db      	ldrb	r3, [r3, #3]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00e      	beq.n	800693a <isoDepDataExchangePCD+0x256>
 800691c:	7b7b      	ldrb	r3, [r7, #13]
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d007      	beq.n	8006936 <isoDepDataExchangePCD+0x252>
 8006926:	4b17      	ldr	r3, [pc, #92]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 8006928:	78da      	ldrb	r2, [r3, #3]
 800692a:	4b16      	ldr	r3, [pc, #88]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	3301      	adds	r3, #1
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d001      	beq.n	800693a <isoDepDataExchangePCD+0x256>
                return ERR_PROTO;
 8006936:	230b      	movs	r3, #11
 8006938:	e14a      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
            if( isoDep_PCBisSBlock(rxPCB) )
 800693a:	7b7b      	ldrb	r3, [r7, #13]
 800693c:	f003 03c7 	and.w	r3, r3, #199	@ 0xc7
 8006940:	2bc2      	cmp	r3, #194	@ 0xc2
 8006942:	d139      	bne.n	80069b8 <isoDepDataExchangePCD+0x2d4>
                if( isoDep_PCBisSWTX(rxPCB) )
 8006944:	7b7b      	ldrb	r3, [r7, #13]
 8006946:	f003 03c7 	and.w	r3, r3, #199	@ 0xc7
 800694a:	2bc2      	cmp	r3, #194	@ 0xc2
 800694c:	d120      	bne.n	8006990 <isoDepDataExchangePCD+0x2ac>
 800694e:	7b7b      	ldrb	r3, [r7, #13]
 8006950:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006954:	2b30      	cmp	r3, #48	@ 0x30
 8006956:	d11b      	bne.n	8006990 <isoDepDataExchangePCD+0x2ac>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, isoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 8006958:	4b0a      	ldr	r3, [pc, #40]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	4a09      	ldr	r2, [pc, #36]	@ (8006984 <isoDepDataExchangePCD+0x2a0>)
 800695e:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8006962:	4413      	add	r3, r2
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800696a:	b2db      	uxtb	r3, r3
 800696c:	4619      	mov	r1, r3
 800696e:	2002      	movs	r0, #2
 8006970:	f7ff fd52 	bl	8006418 <isoDepHandleControlMsg>
 8006974:	4603      	mov	r3, r0
 8006976:	81fb      	strh	r3, [r7, #14]
 8006978:	89fb      	ldrh	r3, [r7, #14]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d006      	beq.n	800698c <isoDepDataExchangePCD+0x2a8>
 800697e:	89fb      	ldrh	r3, [r7, #14]
 8006980:	e126      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
 8006982:	bf00      	nop
 8006984:	20000628 	.word	0x20000628
 8006988:	00080041 	.word	0x00080041
                    return ERR_BUSY;
 800698c:	2302      	movs	r3, #2
 800698e:	e11f      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                if( isoDep_PCBisSDeselect(rxPCB) )
 8006990:	7b7b      	ldrb	r3, [r7, #13]
 8006992:	f003 03c7 	and.w	r3, r3, #199	@ 0xc7
 8006996:	2bc2      	cmp	r3, #194	@ 0xc2
 8006998:	d10c      	bne.n	80069b4 <isoDepDataExchangePCD+0x2d0>
 800699a:	7b7b      	ldrb	r3, [r7, #13]
 800699c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d107      	bne.n	80069b4 <isoDepDataExchangePCD+0x2d0>
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 80069a4:	4b8c      	ldr	r3, [pc, #560]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d103      	bne.n	80069b4 <isoDepDataExchangePCD+0x2d0>
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 80069ac:	f7ff fe48 	bl	8006640 <rfalIsoDepInitialize>
                        return ERR_NONE;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e10d      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                return ERR_PROTO;
 80069b4:	230b      	movs	r3, #11
 80069b6:	e10b      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
            else if( isoDep_PCBisRBlock(rxPCB) )
 80069b8:	7b7b      	ldrb	r3, [r7, #13]
 80069ba:	f003 03e6 	and.w	r3, r3, #230	@ 0xe6
 80069be:	2ba2      	cmp	r3, #162	@ 0xa2
 80069c0:	d141      	bne.n	8006a46 <isoDepDataExchangePCD+0x362>
                if( isoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 80069c2:	7b7b      	ldrb	r3, [r7, #13]
 80069c4:	f003 03e6 	and.w	r3, r3, #230	@ 0xe6
 80069c8:	2ba2      	cmp	r3, #162	@ 0xa2
 80069ca:	d13a      	bne.n	8006a42 <isoDepDataExchangePCD+0x35e>
 80069cc:	7b7b      	ldrb	r3, [r7, #13]
 80069ce:	f003 0310 	and.w	r3, r3, #16
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d135      	bne.n	8006a42 <isoDepDataExchangePCD+0x35e>
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 80069d6:	7b7b      	ldrb	r3, [r7, #13]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	4a7e      	ldr	r2, [pc, #504]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 80069de:	7892      	ldrb	r2, [r2, #2]
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d119      	bne.n	8006a18 <isoDepDataExchangePCD+0x334>
                        gIsoDep.blockNumber = isoDep_PCBNextBN( gIsoDep.blockNumber );
 80069e4:	4b7c      	ldr	r3, [pc, #496]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 80069e6:	789b      	ldrb	r3, [r3, #2]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bf0c      	ite	eq
 80069f2:	2301      	moveq	r3, #1
 80069f4:	2300      	movne	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	4b77      	ldr	r3, [pc, #476]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 80069fc:	709a      	strb	r2, [r3, #2]
                        if( !gIsoDep.isTxChaining )
 80069fe:	4b76      	ldr	r3, [pc, #472]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006a00:	7c9b      	ldrb	r3, [r3, #18]
 8006a02:	f083 0301 	eor.w	r3, r3, #1
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <isoDepDataExchangePCD+0x32c>
                            return ERR_PROTO;
 8006a0c:	230b      	movs	r3, #11
 8006a0e:	e0df      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                        isoDepClearCounters();
 8006a10:	f7ff fc58 	bl	80062c4 <isoDepClearCounters>
                        return ERR_NONE;  /* This block has been transmitted */
 8006a14:	2300      	movs	r3, #0
 8006a16:	e0db      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 8006a18:	4b6f      	ldr	r3, [pc, #444]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006a1a:	795b      	ldrb	r3, [r3, #5]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	b2d1      	uxtb	r1, r2
 8006a20:	4a6d      	ldr	r2, [pc, #436]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006a22:	7151      	strb	r1, [r2, #5]
 8006a24:	4a6c      	ldr	r2, [pc, #432]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006a26:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d207      	bcs.n	8006a3e <isoDepDataExchangePCD+0x35a>
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 8006a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	719a      	strb	r2, [r3, #6]
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 8006a34:	4b68      	ldr	r3, [pc, #416]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	701a      	strb	r2, [r3, #0]
                            return ERR_BUSY;
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e0c8      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                        return ERR_PROTO;
 8006a3e:	230b      	movs	r3, #11
 8006a40:	e0c6      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                    return ERR_PROTO;
 8006a42:	230b      	movs	r3, #11
 8006a44:	e0c4      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
            else if( isoDep_PCBisIBlock(rxPCB) )
 8006a46:	7b7b      	ldrb	r3, [r7, #13]
 8006a48:	f003 03e2 	and.w	r3, r3, #226	@ 0xe2
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	f040 80bb 	bne.w	8006bc8 <isoDepDataExchangePCD+0x4e4>
                if( isoDep_PCBisChaining(rxPCB) )
 8006a52:	7b7b      	ldrb	r3, [r7, #13]
 8006a54:	f003 0310 	and.w	r3, r3, #16
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d05d      	beq.n	8006b18 <isoDepDataExchangePCD+0x434>
                    gIsoDep.isRxChaining = true;
 8006a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	74da      	strb	r2, [r3, #19]
                    *outIsChaining       = true;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2201      	movs	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8006a68:	7b7b      	ldrb	r3, [r7, #13]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	4a5a      	ldr	r2, [pc, #360]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006a70:	7892      	ldrb	r2, [r2, #2]
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d143      	bne.n	8006afe <isoDepDataExchangePCD+0x41a>
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 8006a76:	4b58      	ldr	r3, [pc, #352]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006a78:	789b      	ldrb	r3, [r3, #2]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	bf0c      	ite	eq
 8006a84:	2301      	moveq	r3, #1
 8006a86:	2300      	movne	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	4b52      	ldr	r3, [pc, #328]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006a8e:	709a      	strb	r2, [r3, #2]
                        isoDepClearCounters();  /* Clear counters in case R counter is already at max */
 8006a90:	f7ff fc18 	bl	80062c4 <isoDepClearCounters>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8006a94:	2100      	movs	r1, #0
 8006a96:	2000      	movs	r0, #0
 8006a98:	f7ff fcbe 	bl	8006418 <isoDepHandleControlMsg>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	81fb      	strh	r3, [r7, #14]
 8006aa0:	89fb      	ldrh	r3, [r7, #14]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <isoDepDataExchangePCD+0x3c6>
 8006aa6:	89fb      	ldrh	r3, [r7, #14]
 8006aa8:	e092      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                        *outActRxLen -= gIsoDep.hdrLen;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	4a4a      	ldr	r2, [pc, #296]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006ab0:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8006ab4:	1a9b      	subs	r3, r3, r2
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	801a      	strh	r2, [r3, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8006abc:	4b46      	ldr	r3, [pc, #280]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006abe:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8006ac2:	4b45      	ldr	r3, [pc, #276]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006ac4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d014      	beq.n	8006af6 <isoDepDataExchangePCD+0x412>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d010      	beq.n	8006af6 <isoDepDataExchangePCD+0x412>
                            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 8006ad4:	4b40      	ldr	r3, [pc, #256]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	4a3f      	ldr	r2, [pc, #252]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006ada:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8006ade:	1898      	adds	r0, r3, r2
 8006ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006ae6:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8006aea:	1899      	adds	r1, r3, r2
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	f00a fd23 	bl	801153c <memmove>
                        isoDepClearCounters();
 8006af6:	f7ff fbe5 	bl	80062c4 <isoDepClearCounters>
                        return ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 8006afa:	230d      	movs	r3, #13
 8006afc:	e068      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 8006afe:	2100      	movs	r1, #0
 8006b00:	2000      	movs	r0, #0
 8006b02:	f7ff fc89 	bl	8006418 <isoDepHandleControlMsg>
 8006b06:	4603      	mov	r3, r0
 8006b08:	81fb      	strh	r3, [r7, #14]
 8006b0a:	89fb      	ldrh	r3, [r7, #14]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <isoDepDataExchangePCD+0x430>
 8006b10:	89fb      	ldrh	r3, [r7, #14]
 8006b12:	e05d      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                    return ERR_BUSY;
 8006b14:	2302      	movs	r3, #2
 8006b16:	e05b      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 8006b18:	4b2f      	ldr	r3, [pc, #188]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	74da      	strb	r2, [r3, #19]
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8006b1e:	7b7b      	ldrb	r3, [r7, #13]
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	4a2c      	ldr	r2, [pc, #176]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b26:	7892      	ldrb	r2, [r2, #2]
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d139      	bne.n	8006ba0 <isoDepDataExchangePCD+0x4bc>
                    isoDep_ToggleBN( gIsoDep.blockNumber );
 8006b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b2e:	789b      	ldrb	r3, [r3, #2]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	bf0c      	ite	eq
 8006b3a:	2301      	moveq	r3, #1
 8006b3c:	2300      	movne	r3, #0
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	4b25      	ldr	r3, [pc, #148]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b44:	709a      	strb	r2, [r3, #2]
                    *outActRxLen -= gIsoDep.hdrLen;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	4a23      	ldr	r2, [pc, #140]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b4c:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8006b50:	1a9b      	subs	r3, r3, r2
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	801a      	strh	r2, [r3, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8006b58:	4b1f      	ldr	r3, [pc, #124]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b5a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d014      	beq.n	8006b92 <isoDepDataExchangePCD+0x4ae>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d010      	beq.n	8006b92 <isoDepDataExchangePCD+0x4ae>
                        ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 8006b70:	4b19      	ldr	r3, [pc, #100]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	4a18      	ldr	r2, [pc, #96]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b76:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8006b7a:	1898      	adds	r0, r3, r2
 8006b7c:	4b16      	ldr	r3, [pc, #88]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	4a15      	ldr	r2, [pc, #84]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b82:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8006b86:	1899      	adds	r1, r3, r2
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f00a fcd5 	bl	801153c <memmove>
                    gIsoDep.state = ISODEP_ST_IDLE;
 8006b92:	4b11      	ldr	r3, [pc, #68]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
                    isoDepClearCounters();
 8006b98:	f7ff fb94 	bl	80062c4 <isoDepClearCounters>
                    return ERR_NONE;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e017      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 8006ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd8 <isoDepDataExchangePCD+0x4f4>)
 8006ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d001      	beq.n	8006bae <isoDepDataExchangePCD+0x4ca>
                        return ERR_PROTO;
 8006baa:	230b      	movs	r3, #11
 8006bac:	e010      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8006bae:	2100      	movs	r1, #0
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	f7ff fc31 	bl	8006418 <isoDepHandleControlMsg>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	81fb      	strh	r3, [r7, #14]
 8006bba:	89fb      	ldrh	r3, [r7, #14]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <isoDepDataExchangePCD+0x4e0>
 8006bc0:	89fb      	ldrh	r3, [r7, #14]
 8006bc2:	e005      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                    return ERR_BUSY;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e003      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
                return ERR_PROTO;
 8006bc8:	230b      	movs	r3, #11
 8006bca:	e001      	b.n	8006bd0 <isoDepDataExchangePCD+0x4ec>
            break;
 8006bcc:	bf00      	nop
    }
    
    return ERR_INTERNAL;
 8006bce:	230c      	movs	r3, #12
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8006bd8:	20000628 	.word	0x20000628

08006bdc <rfalIsoDepDeselect>:

/*******************************************************************************/
ReturnCode rfalIsoDepDeselect( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
    bool       dummyB;
    
    /*******************************************************************************/
    /* Check if  rx parameters have been set before, otherwise use global variable *
     * To cope with a Deselect after RATS\ATTRIB without any I-Block exchanged     */
    if( (gIsoDep.rxLen == NULL) || (gIsoDep.rxBuf == NULL) )
 8006be2:	4b23      	ldr	r3, [pc, #140]	@ (8006c70 <rfalIsoDepDeselect+0x94>)
 8006be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <rfalIsoDepDeselect+0x16>
 8006bea:	4b21      	ldr	r3, [pc, #132]	@ (8006c70 <rfalIsoDepDeselect+0x94>)
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d110      	bne.n	8006c14 <rfalIsoDepDeselect+0x38>
    {
        /* Using local vars would be safe as rfalIsoDepInitialize will clear the   *
         * reference to local vars before exiting (no EXIT_ON_ERR),                *
         * but MISRA 18.6 3217 would be still be flagged. Using static variables   */
        gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 8006bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8006c70 <rfalIsoDepDeselect+0x94>)
 8006bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8006c74 <rfalIsoDepDeselect+0x98>)
 8006bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
        gIsoDep.rxBuf       = gIsoDep.ctrlRxBuf;
 8006bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8006c70 <rfalIsoDepDeselect+0x94>)
 8006bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8006c78 <rfalIsoDepDeselect+0x9c>)
 8006bfc:	619a      	str	r2, [r3, #24]
        
        gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN;
 8006bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8006c70 <rfalIsoDepDeselect+0x94>)
 8006c00:	2204      	movs	r2, #4
 8006c02:	83da      	strh	r2, [r3, #30]
        gIsoDep.rxBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8006c04:	4b1a      	ldr	r3, [pc, #104]	@ (8006c70 <rfalIsoDepDeselect+0x94>)
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8006c0c:	4b18      	ldr	r3, [pc, #96]	@ (8006c70 <rfalIsoDepDeselect+0x94>)
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 2020 	strb.w	r2, [r3, #32]
    
    
    /*******************************************************************************/
    /* The Deselect process is being done blocking, Digital 1.0 - 13.2.7.1 MUST wait response and retry*/
    /* Set the maximum reruns while we will wait for a response */
    cntRerun = ISODEP_MAX_RERUNS;
 8006c14:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8006c18:	607b      	str	r3, [r7, #4]
    
    /* Send DSL request and run protocol until get a response, error or "timeout" */    
    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ));
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	2003      	movs	r0, #3
 8006c1e:	f7ff fbfb 	bl	8006418 <isoDepHandleControlMsg>
 8006c22:	4603      	mov	r3, r0
 8006c24:	807b      	strh	r3, [r7, #2]
 8006c26:	887b      	ldrh	r3, [r7, #2]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <rfalIsoDepDeselect+0x54>
 8006c2c:	887b      	ldrh	r3, [r7, #2]
 8006c2e:	e01a      	b.n	8006c66 <rfalIsoDepDeselect+0x8a>
    do{
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 8006c30:	4b0f      	ldr	r3, [pc, #60]	@ (8006c70 <rfalIsoDepDeselect+0x94>)
 8006c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c34:	1c7a      	adds	r2, r7, #1
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fd53 	bl	80066e4 <isoDepDataExchangePCD>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	807b      	strh	r3, [r7, #2]
        rfalWorker();
 8006c42:	f008 f969 	bl	800ef18 <rfalWorker>
    }
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	1e5a      	subs	r2, r3, #1
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <rfalIsoDepDeselect+0x7a>
 8006c50:	887b      	ldrh	r3, [r7, #2]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d0ec      	beq.n	8006c30 <rfalIsoDepDeselect+0x54>
        
    rfalIsoDepInitialize();
 8006c56:	f7ff fcf3 	bl	8006640 <rfalIsoDepInitialize>
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <rfalIsoDepDeselect+0x88>
 8006c60:	887b      	ldrh	r3, [r7, #2]
 8006c62:	e000      	b.n	8006c66 <rfalIsoDepDeselect+0x8a>
 8006c64:	2304      	movs	r3, #4
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000628 	.word	0x20000628
 8006c74:	20000672 	.word	0x20000672
 8006c78:	2000066d 	.word	0x2000066d

08006c7c <rfalIsoDepFWI2FWT>:
#endif /* RFAL_FEATURE_ISO_DEP_POLL */


/*******************************************************************************/
uint32_t rfalIsoDepFWI2FWT( uint8_t fwi )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4603      	mov	r3, r0
 8006c84:	71fb      	strb	r3, [r7, #7]
    uint32_t result;
    uint8_t  tmpFWI;
    
    tmpFWI = fwi;
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	73fb      	strb	r3, [r7, #15]
    
    /* RFU values -> take the default value  
     * Digital 1.0  11.6.2.17  FWI[1,14]
     * Digital 1.1  7.6.2.22   FWI[0,14]
     * EMVCo 2.6    Table A.5  FWI[0,14] */
    if( tmpFWI > ISODEP_FWI_MAX )
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	2b0e      	cmp	r3, #14
 8006c8e:	d901      	bls.n	8006c94 <rfalIsoDepFWI2FWT+0x18>
    {
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 8006c90:	2304      	movs	r3, #4
 8006c92:	73fb      	strb	r3, [r7, #15]
    }

    /* FWT = (256 x 16/fC) x 2^FWI => 2^(FWI+12)  Digital 1.1  13.8.1 & 7.9.1 */
    
    result = ((uint32_t)1U << (tmpFWI + 12U));
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	330c      	adds	r3, #12
 8006c98:	2201      	movs	r2, #1
 8006c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9e:	60bb      	str	r3, [r7, #8]
    result = MIN( RFAL_ISODEP_MAX_FWT, result);  /* Maximum Frame Waiting Time must be fulfilled */
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ca6:	bf28      	it	cs
 8006ca8:	f04f 6380 	movcs.w	r3, #67108864	@ 0x4000000
 8006cac:	60bb      	str	r3, [r7, #8]
    
    return result;
 8006cae:	68bb      	ldr	r3, [r7, #8]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <rfalIsoDepFSxI2FSx>:


/*******************************************************************************/
uint16_t rfalIsoDepFSxI2FSx( uint8_t FSxI )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	71fb      	strb	r3, [r7, #7]
    uint16_t fsx;
    uint8_t  fsi;
    
    /* Enforce maximum FSxI/FSx allowed - NFC Forum and EMVCo differ */
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8006cc6:	4b34      	ldr	r3, [pc, #208]	@ (8006d98 <rfalIsoDepFSxI2FSx+0xdc>)
 8006cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d105      	bne.n	8006cdc <rfalIsoDepFSxI2FSx+0x20>
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	2b0c      	cmp	r3, #12
 8006cd4:	bf28      	it	cs
 8006cd6:	230c      	movcs	r3, #12
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	e004      	b.n	8006ce6 <rfalIsoDepFSxI2FSx+0x2a>
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	bf28      	it	cs
 8006ce2:	2308      	movcs	r3, #8
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	737b      	strb	r3, [r7, #13]
    
    switch( fsi )
 8006ce8:	7b7b      	ldrb	r3, [r7, #13]
 8006cea:	2b0c      	cmp	r3, #12
 8006cec:	d848      	bhi.n	8006d80 <rfalIsoDepFSxI2FSx+0xc4>
 8006cee:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf4 <rfalIsoDepFSxI2FSx+0x38>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d29 	.word	0x08006d29
 8006cf8:	08006d2f 	.word	0x08006d2f
 8006cfc:	08006d35 	.word	0x08006d35
 8006d00:	08006d3b 	.word	0x08006d3b
 8006d04:	08006d41 	.word	0x08006d41
 8006d08:	08006d47 	.word	0x08006d47
 8006d0c:	08006d4d 	.word	0x08006d4d
 8006d10:	08006d53 	.word	0x08006d53
 8006d14:	08006d59 	.word	0x08006d59
 8006d18:	08006d61 	.word	0x08006d61
 8006d1c:	08006d69 	.word	0x08006d69
 8006d20:	08006d71 	.word	0x08006d71
 8006d24:	08006d79 	.word	0x08006d79
    {
        case (uint8_t)RFAL_ISODEP_FSXI_16:           fsx = (uint16_t)RFAL_ISODEP_FSX_16;   break;
 8006d28:	2310      	movs	r3, #16
 8006d2a:	81fb      	strh	r3, [r7, #14]
 8006d2c:	e02c      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_24:           fsx = (uint16_t)RFAL_ISODEP_FSX_24;   break;
 8006d2e:	2318      	movs	r3, #24
 8006d30:	81fb      	strh	r3, [r7, #14]
 8006d32:	e029      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_32:           fsx = (uint16_t)RFAL_ISODEP_FSX_32;   break;
 8006d34:	2320      	movs	r3, #32
 8006d36:	81fb      	strh	r3, [r7, #14]
 8006d38:	e026      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_40:           fsx = (uint16_t)RFAL_ISODEP_FSX_40;   break;
 8006d3a:	2328      	movs	r3, #40	@ 0x28
 8006d3c:	81fb      	strh	r3, [r7, #14]
 8006d3e:	e023      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_48:           fsx = (uint16_t)RFAL_ISODEP_FSX_48;   break;
 8006d40:	2330      	movs	r3, #48	@ 0x30
 8006d42:	81fb      	strh	r3, [r7, #14]
 8006d44:	e020      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_64:           fsx = (uint16_t)RFAL_ISODEP_FSX_64;   break;
 8006d46:	2340      	movs	r3, #64	@ 0x40
 8006d48:	81fb      	strh	r3, [r7, #14]
 8006d4a:	e01d      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_96:           fsx = (uint16_t)RFAL_ISODEP_FSX_96;   break;
 8006d4c:	2360      	movs	r3, #96	@ 0x60
 8006d4e:	81fb      	strh	r3, [r7, #14]
 8006d50:	e01a      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_128:          fsx = (uint16_t)RFAL_ISODEP_FSX_128;  break;
 8006d52:	2380      	movs	r3, #128	@ 0x80
 8006d54:	81fb      	strh	r3, [r7, #14]
 8006d56:	e017      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_256:          fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8006d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d5c:	81fb      	strh	r3, [r7, #14]
 8006d5e:	e013      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_512:          fsx = (uint16_t)RFAL_ISODEP_FSX_512;  break;
 8006d60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d64:	81fb      	strh	r3, [r7, #14]
 8006d66:	e00f      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_1024:         fsx = (uint16_t)RFAL_ISODEP_FSX_1024; break;
 8006d68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d6c:	81fb      	strh	r3, [r7, #14]
 8006d6e:	e00b      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_2048:         fsx = (uint16_t)RFAL_ISODEP_FSX_2048; break;
 8006d70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006d74:	81fb      	strh	r3, [r7, #14]
 8006d76:	e007      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_4096:         fsx = (uint16_t)RFAL_ISODEP_FSX_4096; break;
 8006d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d7c:	81fb      	strh	r3, [r7, #14]
 8006d7e:	e003      	b.n	8006d88 <rfalIsoDepFSxI2FSx+0xcc>
        default:                                     fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8006d80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d84:	81fb      	strh	r3, [r7, #14]
 8006d86:	bf00      	nop
    }
    return fsx;
 8006d88:	89fb      	ldrh	r3, [r7, #14]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	20000628 	.word	0x20000628

08006d9c <rfalIsoDepIsRats>:

#if RFAL_FEATURE_ISO_DEP_LISTEN

/*******************************************************************************/
bool rfalIsoDepIsRats( const uint8_t *buf, uint8_t bufLen )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	70fb      	strb	r3, [r7, #3]
    if(buf != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d008      	beq.n	8006dc0 <rfalIsoDepIsRats+0x24>
    {
        if ((RFAL_ISODEP_CMD_RATS == (uint8_t)*buf) && (sizeof(rfalIsoDepRats) == bufLen))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2be0      	cmp	r3, #224	@ 0xe0
 8006db4:	d104      	bne.n	8006dc0 <rfalIsoDepIsRats+0x24>
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d101      	bne.n	8006dc0 <rfalIsoDepIsRats+0x24>
        {
            return true;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <rfalIsoDepIsRats+0x26>
        }
    }
    return false;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
	...

08006dd0 <rfalIsoDepListenStartActivation>:



/*******************************************************************************/
ReturnCode rfalIsoDepListenStartActivation( rfalIsoDepAtsParam *atsParam, const rfalIsoDepAttribResParam *attribResParam, uint8_t *buf, uint16_t bufLen, rfalIsoDepListenActvParam actParam)
{
 8006dd0:	b590      	push	{r4, r7, lr}
 8006dd2:	b08d      	sub	sp, #52	@ 0x34
 8006dd4:	af04      	add	r7, sp, #16
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	807b      	strh	r3, [r7, #2]
    uint8_t *txBuf;
    uint8_t bufIt;
    uint8_t *buffer = buf;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	61bb      	str	r3, [r7, #24]
    
    /*******************************************************************************/
    bufIt        = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	77fb      	strb	r3, [r7, #31]
    txBuf        = (uint8_t*)actParam.rxBuf;      /* Use the rxBuf as TxBuf as well, the struct enforces a size enough MAX( NFCA_ATS_MAX_LEN, NFCB_ATTRIB_RES_MAX_LEN ) */
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	617b      	str	r3, [r7, #20]
    gIsoDep.txBR = RFAL_BR_106;
 8006dea:	4ba1      	ldr	r3, [pc, #644]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    gIsoDep.rxBR = RFAL_BR_106;
 8006df2:	4b9f      	ldr	r3, [pc, #636]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        
    /* Check for a valid buffer pointer */
    if( buffer == NULL )
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <rfalIsoDepListenStartActivation+0x34>
    {
        return ERR_PARAM;
 8006e00:	2307      	movs	r3, #7
 8006e02:	e131      	b.n	8007068 <rfalIsoDepListenStartActivation+0x298>
    }
    
    /*******************************************************************************/
    if( *buffer == RFAL_ISODEP_CMD_RATS )
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2be0      	cmp	r3, #224	@ 0xe0
 8006e0a:	f040 80f3 	bne.w	8006ff4 <rfalIsoDepListenStartActivation+0x224>
    {
        /* Check ATS parameters */
        if( atsParam == NULL )
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <rfalIsoDepListenStartActivation+0x48>
        {
            return ERR_PARAM;
 8006e14:	2307      	movs	r3, #7
 8006e16:	e127      	b.n	8007068 <rfalIsoDepListenStartActivation+0x298>
        }
        
        /* If requested copy RATS to device info */
        if( actParam.isoDepDev != NULL )
 8006e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <rfalIsoDepListenStartActivation+0x5a>
        {
            ST_MEMCPY( (uint8_t*)&actParam.isoDepDev->activation.A.Poller.RATS, buffer, sizeof(rfalIsoDepRats) );	/* Copy RATS' CMD + PARAM */
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e20:	461a      	mov	r2, r3
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	8013      	strh	r3, [r2, #0]
        }
        
        
        /*******************************************************************************/
        /* Process RATS                                                                */
        buffer++;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	61bb      	str	r3, [r7, #24]
        gIsoDep.fsx = rfalIsoDepFSxI2FSx( (((*buffer) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	091b      	lsrs	r3, r3, #4
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7ff ff3f 	bl	8006cbc <rfalIsoDepFSxI2FSx>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	4b8b      	ldr	r3, [pc, #556]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006e44:	821a      	strh	r2, [r3, #16]
        gIsoDep.did = (*buffer & RFAL_ISODEP_DID_MASK);
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	f003 030f 	and.w	r3, r3, #15
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	4b87      	ldr	r3, [pc, #540]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006e52:	70da      	strb	r2, [r3, #3]
        
        
        /*******************************************************************************/
        /* Digital 1.1  13.6.1.8 - DID as to between 0 and 14 */
        if( gIsoDep.did > RFAL_ISODEP_DID_MAX )
 8006e54:	4b86      	ldr	r3, [pc, #536]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006e56:	78db      	ldrb	r3, [r3, #3]
 8006e58:	2b0e      	cmp	r3, #14
 8006e5a:	d901      	bls.n	8006e60 <rfalIsoDepListenStartActivation+0x90>
        {
            return ERR_PROTO;
 8006e5c:	230b      	movs	r3, #11
 8006e5e:	e103      	b.n	8007068 <rfalIsoDepListenStartActivation+0x298>
        }
        
        /* Check if we are configured to support DID */
        if( (gIsoDep.did != RFAL_ISODEP_DID_00) && (!atsParam->didSupport) )
 8006e60:	4b83      	ldr	r3, [pc, #524]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006e62:	78db      	ldrb	r3, [r3, #3]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d008      	beq.n	8006e7a <rfalIsoDepListenStartActivation+0xaa>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	78db      	ldrb	r3, [r3, #3]
 8006e6c:	f083 0301 	eor.w	r3, r3, #1
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <rfalIsoDepListenStartActivation+0xaa>
        {
            return ERR_NOTSUPP;
 8006e76:	2318      	movs	r3, #24
 8006e78:	e0f6      	b.n	8007068 <rfalIsoDepListenStartActivation+0x298>
        }

        
        /*******************************************************************************/
        /* Check RFAL supported bit rates  */
        if( (!(RFAL_SUPPORT_BR_CE_A_212) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_212) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_212) != 0U)))  ||
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	791b      	ldrb	r3, [r3, #4]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d11d      	bne.n	8006ec2 <rfalIsoDepListenStartActivation+0xf2>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	791b      	ldrb	r3, [r3, #4]
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d117      	bne.n	8006ec2 <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_424) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_424) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_424) != 0U)))  ||
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	791b      	ldrb	r3, [r3, #4]
 8006e96:	f003 0302 	and.w	r3, r3, #2
        if( (!(RFAL_SUPPORT_BR_CE_A_212) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_212) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_212) != 0U)))  ||
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d111      	bne.n	8006ec2 <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_424) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_424) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_424) != 0U)))  ||
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	791b      	ldrb	r3, [r3, #4]
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10b      	bne.n	8006ec2 <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_848) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_848) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_848) != 0U)))   )            
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	791b      	ldrb	r3, [r3, #4]
 8006eae:	f003 0304 	and.w	r3, r3, #4
            (!(RFAL_SUPPORT_BR_CE_A_424) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_424) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_424) != 0U)))  ||
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d105      	bne.n	8006ec2 <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_848) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_848) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_848) != 0U)))   )            
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	791b      	ldrb	r3, [r3, #4]
 8006eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <rfalIsoDepListenStartActivation+0xf6>
        {
            return ERR_NOTSUPP;
 8006ec2:	2318      	movs	r3, #24
 8006ec4:	e0d0      	b.n	8007068 <rfalIsoDepListenStartActivation+0x298>
        }
        
        /* Enforce proper FWI configuration */
        if( atsParam->fwi > ISODEP_FWI_LIS_MAX)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	4b68      	ldr	r3, [pc, #416]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006ece:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <rfalIsoDepListenStartActivation+0x10a>
 8006ed6:	2307      	movs	r3, #7
 8006ed8:	e000      	b.n	8006edc <rfalIsoDepListenStartActivation+0x10c>
 8006eda:	2308      	movs	r3, #8
 8006edc:	4293      	cmp	r3, r2
 8006ede:	da09      	bge.n	8006ef4 <rfalIsoDepListenStartActivation+0x124>
        {
            atsParam->fwi = ISODEP_FWI_LIS_MAX;
 8006ee0:	4b63      	ldr	r3, [pc, #396]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <rfalIsoDepListenStartActivation+0x11e>
 8006eea:	2207      	movs	r2, #7
 8006eec:	e000      	b.n	8006ef0 <rfalIsoDepListenStartActivation+0x120>
 8006eee:	2208      	movs	r2, #8
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	705a      	strb	r2, [r3, #1]
        }
        
        gIsoDep.atsTA  = atsParam->ta;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	791a      	ldrb	r2, [r3, #4]
 8006ef8:	4b5d      	ldr	r3, [pc, #372]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006efa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
        gIsoDep.fwt    = rfalIsoDepFWI2FWT(atsParam->fwi);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff feba 	bl	8006c7c <rfalIsoDepFWI2FWT>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	4a59      	ldr	r2, [pc, #356]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006f0c:	6093      	str	r3, [r2, #8]
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx(atsParam->fsci);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff fed2 	bl	8006cbc <rfalIsoDepFSxI2FSx>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	4b54      	ldr	r3, [pc, #336]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006f1e:	845a      	strh	r2, [r3, #34]	@ 0x22
        
        
        /* Ensure proper/maximum Historical Bytes length  */
        atsParam->hbLen = MIN( RFAL_ISODEP_ATS_HB_MAX_LEN, atsParam->hbLen );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	7b1b      	ldrb	r3, [r3, #12]
 8006f24:	2b0f      	cmp	r3, #15
 8006f26:	bf28      	it	cs
 8006f28:	230f      	movcs	r3, #15
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	731a      	strb	r2, [r3, #12]
        
        /*******************************************************************************/
        /* Compute ATS                                                                 */
        
        txBuf[ bufIt++ ] = (RFAL_ISODEP_ATS_HIST_OFFSET + atsParam->hbLen);                                  /* TL */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	7b1a      	ldrb	r2, [r3, #12]
 8006f34:	7ffb      	ldrb	r3, [r7, #31]
 8006f36:	1c59      	adds	r1, r3, #1
 8006f38:	77f9      	strb	r1, [r7, #31]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	440b      	add	r3, r1
 8006f40:	3205      	adds	r2, #5
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = ( (RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK | RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK | 
                              RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK)| atsParam->fsci       );                  /* T0 */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	781a      	ldrb	r2, [r3, #0]
        txBuf[ bufIt++ ] = ( (RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK | RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK | 
 8006f4a:	7ffb      	ldrb	r3, [r7, #31]
 8006f4c:	1c59      	adds	r1, r3, #1
 8006f4e:	77f9      	strb	r1, [r7, #31]
 8006f50:	4619      	mov	r1, r3
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	440b      	add	r3, r1
 8006f56:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = atsParam->ta;                                                                     /* TA */
 8006f5e:	7ffb      	ldrb	r3, [r7, #31]
 8006f60:	1c5a      	adds	r2, r3, #1
 8006f62:	77fa      	strb	r2, [r7, #31]
 8006f64:	461a      	mov	r2, r3
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	4413      	add	r3, r2
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	7912      	ldrb	r2, [r2, #4]
 8006f6e:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	785b      	ldrb	r3, [r3, #1]
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	b2d9      	uxtb	r1, r3
                             (atsParam->sfgi & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) );                          /* TB */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	789b      	ldrb	r3, [r3, #2]
 8006f7c:	f023 030f 	bic.w	r3, r3, #15
 8006f80:	b2da      	uxtb	r2, r3
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 8006f82:	7ffb      	ldrb	r3, [r7, #31]
 8006f84:	1c58      	adds	r0, r3, #1
 8006f86:	77f8      	strb	r0, [r7, #31]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	4403      	add	r3, r0
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = (uint8_t)((atsParam->didSupport) ? RFAL_ISODEP_ATS_TC_DID : 0U);                  /* TC */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	78db      	ldrb	r3, [r3, #3]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <rfalIsoDepListenStartActivation+0x1d0>
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	e000      	b.n	8006fa2 <rfalIsoDepListenStartActivation+0x1d2>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	7ffb      	ldrb	r3, [r7, #31]
 8006fa4:	1c59      	adds	r1, r3, #1
 8006fa6:	77f9      	strb	r1, [r7, #31]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	440b      	add	r3, r1
 8006fae:	701a      	strb	r2, [r3, #0]
        
        if( atsParam->hbLen > 0U )             /* MISRA 21.18 */
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	7b1b      	ldrb	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00e      	beq.n	8006fd6 <rfalIsoDepListenStartActivation+0x206>
        {
            ST_MEMCPY( &txBuf[bufIt], atsParam->hb, atsParam->hbLen );                                       /* T1-Tk */
 8006fb8:	7ffb      	ldrb	r3, [r7, #31]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	18d0      	adds	r0, r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6899      	ldr	r1, [r3, #8]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	7b1b      	ldrb	r3, [r3, #12]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f00a fb16 	bl	80115f8 <memcpy>
            bufIt += atsParam->hbLen;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	7b1a      	ldrb	r2, [r3, #12]
 8006fd0:	7ffb      	ldrb	r3, [r7, #31]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	77fb      	strb	r3, [r7, #31]
        }
        
        gIsoDep.state = ISODEP_ST_PICC_ACT_ATS;
 8006fd6:	4b26      	ldr	r3, [pc, #152]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006fd8:	2204      	movs	r2, #4
 8006fda:	701a      	strb	r2, [r3, #0]
    else
    {
        return ERR_PARAM;
    }
    
    gIsoDep.actvParam = actParam;
 8006fdc:	4b24      	ldr	r3, [pc, #144]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8006fde:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 8006fe2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    
    /*******************************************************************************/
    /* If requested copy to ISO-DEP device info */
    if( actParam.isoDepDev != NULL )
 8006fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d02a      	beq.n	8007048 <rfalIsoDepListenStartActivation+0x278>
 8006ff2:	e00c      	b.n	800700e <rfalIsoDepListenStartActivation+0x23e>
    else if( *buffer == RFAL_ISODEP_CMD_ATTRIB )
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b1d      	cmp	r3, #29
 8006ffa:	d106      	bne.n	800700a <rfalIsoDepListenStartActivation+0x23a>
        if( attribResParam == NULL )
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <rfalIsoDepListenStartActivation+0x236>
            return ERR_PARAM;
 8007002:	2307      	movs	r3, #7
 8007004:	e030      	b.n	8007068 <rfalIsoDepListenStartActivation+0x298>
        return ERR_NOT_IMPLEMENTED;
 8007006:	230f      	movs	r3, #15
 8007008:	e02e      	b.n	8007068 <rfalIsoDepListenStartActivation+0x298>
        return ERR_PARAM;
 800700a:	2307      	movs	r3, #7
 800700c:	e02c      	b.n	8007068 <rfalIsoDepListenStartActivation+0x298>
    {
        actParam.isoDepDev->info.DID  = gIsoDep.did;
 800700e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007010:	4a17      	ldr	r2, [pc, #92]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8007012:	78d2      	ldrb	r2, [r2, #3]
 8007014:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
        actParam.isoDepDev->info.FSx  = gIsoDep.fsx;
 8007018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800701a:	4a15      	ldr	r2, [pc, #84]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 800701c:	8a12      	ldrh	r2, [r2, #16]
 800701e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
        actParam.isoDepDev->info.FWT  = gIsoDep.fwt;
 8007022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007024:	4a12      	ldr	r2, [pc, #72]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8007026:	6892      	ldr	r2, [r2, #8]
 8007028:	631a      	str	r2, [r3, #48]	@ 0x30
        actParam.isoDepDev->info.dFWT = 0;
 800702a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800702c:	2200      	movs	r2, #0
 800702e:	635a      	str	r2, [r3, #52]	@ 0x34
        actParam.isoDepDev->info.DSI  = gIsoDep.txBR;
 8007030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007032:	4a0f      	ldr	r2, [pc, #60]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8007034:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8007038:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        actParam.isoDepDev->info.DRI  = gIsoDep.rxBR;
 800703c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800703e:	4a0c      	ldr	r2, [pc, #48]	@ (8007070 <rfalIsoDepListenStartActivation+0x2a0>)
 8007040:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8007044:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    }
    
    return rfalTransceiveBlockingTx( txBuf, bufIt, (uint8_t*)actParam.rxBuf, sizeof( rfalIsoDepBufFormat ), actParam.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FWT_NONE );
 8007048:	7ffb      	ldrb	r3, [r7, #31]
 800704a:	b299      	uxth	r1, r3
 800704c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800704e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007054:	9002      	str	r0, [sp, #8]
 8007056:	2000      	movs	r0, #0
 8007058:	9001      	str	r0, [sp, #4]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	f240 1303 	movw	r3, #259	@ 0x103
 8007060:	6978      	ldr	r0, [r7, #20]
 8007062:	f007 fe91 	bl	800ed88 <rfalTransceiveBlockingTx>
 8007066:	4603      	mov	r3, r0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3724      	adds	r7, #36	@ 0x24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd90      	pop	{r4, r7, pc}
 8007070:	20000628 	.word	0x20000628

08007074 <rfalIsoDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepListenGetActivationStatus( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af04      	add	r7, sp, #16
    rfalBitRate dsi;
    rfalBitRate dri;
    
    
    /* Check if Activation is running */
    if( gIsoDep.state < ISODEP_ST_PICC_ACT_ATS )
 800707a:	4b78      	ldr	r3, [pc, #480]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	2b03      	cmp	r3, #3
 8007080:	d801      	bhi.n	8007086 <rfalIsoDepListenGetActivationStatus+0x12>
    {
        return ERR_WRONG_STATE;
 8007082:	2321      	movs	r3, #33	@ 0x21
 8007084:	e15c      	b.n	8007340 <rfalIsoDepListenGetActivationStatus+0x2cc>
    }
    
    /* Check if Activation has finished already */
    if( gIsoDep.state >= ISODEP_ST_PICC_RX )
 8007086:	4b75      	ldr	r3, [pc, #468]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b05      	cmp	r3, #5
 800708c:	d901      	bls.n	8007092 <rfalIsoDepListenGetActivationStatus+0x1e>
    {
        return ERR_NONE;
 800708e:	2300      	movs	r3, #0
 8007090:	e156      	b.n	8007340 <rfalIsoDepListenGetActivationStatus+0x2cc>
    }
    
    
    /*******************************************************************************/
    /* Check for incoming msg */
    err = rfalGetTransceiveStatus();
 8007092:	f007 ff2f 	bl	800eef4 <rfalGetTransceiveStatus>
 8007096:	4603      	mov	r3, r0
 8007098:	81bb      	strh	r3, [r7, #12]
    switch( err )
 800709a:	89bb      	ldrh	r3, [r7, #12]
 800709c:	2b25      	cmp	r3, #37	@ 0x25
 800709e:	d859      	bhi.n	8007154 <rfalIsoDepListenGetActivationStatus+0xe0>
 80070a0:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <rfalIsoDepListenGetActivationStatus+0x34>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	08007179 	.word	0x08007179
 80070ac:	08007155 	.word	0x08007155
 80070b0:	08007141 	.word	0x08007141
 80070b4:	08007155 	.word	0x08007155
 80070b8:	08007155 	.word	0x08007155
 80070bc:	08007155 	.word	0x08007155
 80070c0:	08007155 	.word	0x08007155
 80070c4:	08007155 	.word	0x08007155
 80070c8:	08007155 	.word	0x08007155
 80070cc:	08007145 	.word	0x08007145
 80070d0:	08007155 	.word	0x08007155
 80070d4:	08007155 	.word	0x08007155
 80070d8:	08007155 	.word	0x08007155
 80070dc:	08007155 	.word	0x08007155
 80070e0:	08007155 	.word	0x08007155
 80070e4:	08007155 	.word	0x08007155
 80070e8:	08007155 	.word	0x08007155
 80070ec:	08007155 	.word	0x08007155
 80070f0:	08007155 	.word	0x08007155
 80070f4:	08007155 	.word	0x08007155
 80070f8:	08007155 	.word	0x08007155
 80070fc:	08007145 	.word	0x08007145
 8007100:	08007155 	.word	0x08007155
 8007104:	08007155 	.word	0x08007155
 8007108:	08007155 	.word	0x08007155
 800710c:	08007155 	.word	0x08007155
 8007110:	08007155 	.word	0x08007155
 8007114:	08007145 	.word	0x08007145
 8007118:	08007155 	.word	0x08007155
 800711c:	08007155 	.word	0x08007155
 8007120:	08007155 	.word	0x08007155
 8007124:	08007155 	.word	0x08007155
 8007128:	08007155 	.word	0x08007155
 800712c:	08007155 	.word	0x08007155
 8007130:	08007155 	.word	0x08007155
 8007134:	08007155 	.word	0x08007155
 8007138:	08007155 	.word	0x08007155
 800713c:	08007141 	.word	0x08007141
            break;
            
        /*******************************************************************************/
        case ERR_LINK_LOSS:
        case ERR_BUSY:
            return err;
 8007140:	89bb      	ldrh	r3, [r7, #12]
 8007142:	e0fd      	b.n	8007340 <rfalIsoDepListenGetActivationStatus+0x2cc>
        case ERR_CRC:
        case ERR_PAR:
        case ERR_FRAMING:
            
            /* ISO14443 4  5.6.2.2 2  If ATS has been replied upon a invalid block, PICC disables the PPS responses */
            if( gIsoDep.state == ISODEP_ST_PICC_ACT_ATS )
 8007144:	4b45      	ldr	r3, [pc, #276]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2b04      	cmp	r3, #4
 800714a:	d103      	bne.n	8007154 <rfalIsoDepListenGetActivationStatus+0xe0>
            {
               gIsoDep.state = ISODEP_ST_PICC_RX;
 800714c:	4b43      	ldr	r3, [pc, #268]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 800714e:	2206      	movs	r2, #6
 8007150:	701a      	strb	r2, [r3, #0]
               break;
 8007152:	e012      	b.n	800717a <rfalIsoDepListenGetActivationStatus+0x106>
            /* fall through */
            
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* ReEnable the receiver and wait for another frame */
            isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 8007154:	4b41      	ldr	r3, [pc, #260]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 8007156:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007158:	4b40      	ldr	r3, [pc, #256]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 800715a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800715c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007160:	9102      	str	r1, [sp, #8]
 8007162:	2100      	movs	r1, #0
 8007164:	9101      	str	r1, [sp, #4]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	f240 1303 	movw	r3, #259	@ 0x103
 800716c:	2100      	movs	r1, #0
 800716e:	2000      	movs	r0, #0
 8007170:	f007 fe0a 	bl	800ed88 <rfalTransceiveBlockingTx>
            
            return ERR_BUSY;
 8007174:	2302      	movs	r3, #2
 8007176:	e0e3      	b.n	8007340 <rfalIsoDepListenGetActivationStatus+0x2cc>
            break;
 8007178:	bf00      	nop
    }
    
    
    txBuf = (uint8_t*)gIsoDep.actvParam.rxBuf;   /* Use the rxBuf as TxBuf as well, the struct enforces a size enough  MAX(NFCA_PPS_RES_LEN, ISODEP_DSL_MAX_LEN) */    
 800717a:	4b38      	ldr	r3, [pc, #224]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 800717c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800717e:	60bb      	str	r3, [r7, #8]
    dri   = RFAL_BR_KEEP;                        /* The RFAL_BR_KEEP is used to check if PPS with BR change was requested */
 8007180:	23ff      	movs	r3, #255	@ 0xff
 8007182:	73bb      	strb	r3, [r7, #14]
    dsi   = RFAL_BR_KEEP;                        /* MISRA 9.1 */
 8007184:	23ff      	movs	r3, #255	@ 0xff
 8007186:	73fb      	strb	r3, [r7, #15]
    bufIt = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	71fb      	strb	r3, [r7, #7]
    
    
    /*******************************************************************************/
    gIsoDep.role  = ISODEP_ROLE_PICC;
 800718c:	4b33      	ldr	r3, [pc, #204]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 800718e:	2201      	movs	r2, #1
 8007190:	705a      	strb	r2, [r3, #1]
    
    /*******************************************************************************/
    if( gIsoDep.state == ISODEP_ST_PICC_ACT_ATS )
 8007192:	4b32      	ldr	r3, [pc, #200]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b04      	cmp	r3, #4
 8007198:	f040 809c 	bne.w	80072d4 <rfalIsoDepListenGetActivationStatus+0x260>
    {
        /* Check for a PPS    ISO 14443-4  5.3 */
        if( ( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_PPS_MASK) == RFAL_ISODEP_PPS_SB )
 800719c:	4b2f      	ldr	r3, [pc, #188]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 800719e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071a6:	2bd0      	cmp	r3, #208	@ 0xd0
 80071a8:	f040 8094 	bne.w	80072d4 <rfalIsoDepListenGetActivationStatus+0x260>
        {
            /* ISO 14443-4  5.3.1  Check if the we are the addressed DID/CID */
            /* ISO 14443-4  5.3.2  Check for a valid PPS0 */
            if( (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_DID_MASK) != gIsoDep.did)                         ||
 80071ac:	4b2b      	ldr	r3, [pc, #172]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 80071ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	4a29      	ldr	r2, [pc, #164]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 80071b8:	78d2      	ldrb	r2, [r2, #3]
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d107      	bne.n	80071ce <rfalIsoDepListenGetActivationStatus+0x15a>
                (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS0_POS] & RFAL_ISODEP_PPS0_VALID_MASK) != RFAL_ISODEP_PPS0_PPS1_NOT_PRESENT)   )
 80071be:	4b27      	ldr	r3, [pc, #156]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 80071c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071c2:	3301      	adds	r3, #1
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
            if( (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_DID_MASK) != gIsoDep.did)                         ||
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d011      	beq.n	80071f2 <rfalIsoDepListenGetActivationStatus+0x17e>
            {
                /* Invalid DID on PPS request or Invalid PPS0, reEnable the receiver and wait another frame */
                isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 80071ce:	4b23      	ldr	r3, [pc, #140]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 80071d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071d2:	4b22      	ldr	r3, [pc, #136]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 80071d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80071da:	9102      	str	r1, [sp, #8]
 80071dc:	2100      	movs	r1, #0
 80071de:	9101      	str	r1, [sp, #4]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	f240 1303 	movw	r3, #259	@ 0x103
 80071e6:	2100      	movs	r1, #0
 80071e8:	2000      	movs	r0, #0
 80071ea:	f007 fdcd 	bl	800ed88 <rfalTransceiveBlockingTx>
                
                return ERR_BUSY;
 80071ee:	2302      	movs	r3, #2
 80071f0:	e0a6      	b.n	8007340 <rfalIsoDepListenGetActivationStatus+0x2cc>
            }
            
            /*******************************************************************************/
            /* Check PPS1 presence */
            if( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS0_POS] == RFAL_ISODEP_PPS0_PPS1_PRESENT )
 80071f2:	4b1a      	ldr	r3, [pc, #104]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 80071f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071f6:	3301      	adds	r3, #1
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b11      	cmp	r3, #17
 80071fc:	d130      	bne.n	8007260 <rfalIsoDepListenGetActivationStatus+0x1ec>
            {
                uint8_t newdri = ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] & RFAL_ISODEP_PPS1_DxI_MASK;                                 /* MISRA 10.8 */
 80071fe:	4b17      	ldr	r3, [pc, #92]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 8007200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007202:	3302      	adds	r3, #2
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	71bb      	strb	r3, [r7, #6]
                uint8_t newdsi = (((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] >> RFAL_ISODEP_PPS1_DSI_SHIFT) & RFAL_ISODEP_PPS1_DxI_MASK; /* MISRA 10.8 */
 800720c:	4b13      	ldr	r3, [pc, #76]	@ (800725c <rfalIsoDepListenGetActivationStatus+0x1e8>)
 800720e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007210:	3302      	adds	r3, #2
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	089b      	lsrs	r3, r3, #2
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 0303 	and.w	r3, r3, #3
 800721c:	717b      	strb	r3, [r7, #5]
				/* PRQA S 4342 2 # MISRA 10.5 - Layout of enum rfalBitRate and above masks guarantee no invalid enum values to be created */
                dri = (rfalBitRate) (newdri); 
 800721e:	79bb      	ldrb	r3, [r7, #6]
 8007220:	73bb      	strb	r3, [r7, #14]
                dsi = (rfalBitRate) (newdsi);
 8007222:	797b      	ldrb	r3, [r7, #5]
 8007224:	73fb      	strb	r3, [r7, #15]
                                
                if( (!(RFAL_SUPPORT_BR_CE_A_106) && (( dsi == RFAL_BR_106 ) || ( dri == RFAL_BR_106 )))  ||
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d014      	beq.n	8007256 <rfalIsoDepListenGetActivationStatus+0x1e2>
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d011      	beq.n	8007256 <rfalIsoDepListenGetActivationStatus+0x1e2>
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d00e      	beq.n	8007256 <rfalIsoDepListenGetActivationStatus+0x1e2>
                    (!(RFAL_SUPPORT_BR_CE_A_212) && (( dsi == RFAL_BR_212 ) || ( dri == RFAL_BR_212 )))  ||
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d00b      	beq.n	8007256 <rfalIsoDepListenGetActivationStatus+0x1e2>
 800723e:	7bfb      	ldrb	r3, [r7, #15]
 8007240:	2b02      	cmp	r3, #2
 8007242:	d008      	beq.n	8007256 <rfalIsoDepListenGetActivationStatus+0x1e2>
                    (!(RFAL_SUPPORT_BR_CE_A_424) && (( dsi == RFAL_BR_424 ) || ( dri == RFAL_BR_424 )))  ||
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2b02      	cmp	r3, #2
 8007248:	d005      	beq.n	8007256 <rfalIsoDepListenGetActivationStatus+0x1e2>
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	2b03      	cmp	r3, #3
 800724e:	d002      	beq.n	8007256 <rfalIsoDepListenGetActivationStatus+0x1e2>
                    (!(RFAL_SUPPORT_BR_CE_A_848) && (( dsi == RFAL_BR_848 ) || ( dri == RFAL_BR_848 )))     )
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	2b03      	cmp	r3, #3
 8007254:	d104      	bne.n	8007260 <rfalIsoDepListenGetActivationStatus+0x1ec>
                {
                    return ERR_PROTO;
 8007256:	230b      	movs	r3, #11
 8007258:	e072      	b.n	8007340 <rfalIsoDepListenGetActivationStatus+0x2cc>
 800725a:	bf00      	nop
 800725c:	20000628 	.word	0x20000628
                }
            }
            
            /*******************************************************************************/
            /* Compute and send PPS RES / Ack                                              */
            txBuf[ bufIt++ ] = ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS];
 8007260:	4b39      	ldr	r3, [pc, #228]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 8007262:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	1c59      	adds	r1, r3, #1
 8007268:	71f9      	strb	r1, [r7, #7]
 800726a:	4619      	mov	r1, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	440b      	add	r3, r1
 8007270:	7812      	ldrb	r2, [r2, #0]
 8007272:	701a      	strb	r2, [r3, #0]
            
            rfalTransceiveBlockingTx( txBuf, bufIt, (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FWT_NONE );
 8007274:	79fb      	ldrb	r3, [r7, #7]
 8007276:	b299      	uxth	r1, r3
 8007278:	4b33      	ldr	r3, [pc, #204]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 800727a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800727c:	4b32      	ldr	r3, [pc, #200]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 800727e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007284:	9002      	str	r0, [sp, #8]
 8007286:	2000      	movs	r0, #0
 8007288:	9001      	str	r0, [sp, #4]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	f240 1303 	movw	r3, #259	@ 0x103
 8007290:	68b8      	ldr	r0, [r7, #8]
 8007292:	f007 fd79 	bl	800ed88 <rfalTransceiveBlockingTx>

            /*******************************************************************************/
            /* Exchange the bit rates if requested */
            if( dri != RFAL_BR_KEEP )
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2bff      	cmp	r3, #255	@ 0xff
 800729a:	d01b      	beq.n	80072d4 <rfalIsoDepListenGetActivationStatus+0x260>
            {
                rfalSetBitRate( dsi, dri );                 /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset above (RFAL_SUPPORT_BR_CE_A_xxx) */
 800729c:	7bba      	ldrb	r2, [r7, #14]
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	4611      	mov	r1, r2
 80072a2:	4618      	mov	r0, r3
 80072a4:	f007 f8c6 	bl	800e434 <rfalSetBitRate>
                
                gIsoDep.txBR = dsi;  /* DSI codes the divisor from PICC to PCD */
 80072a8:	4a27      	ldr	r2, [pc, #156]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                gIsoDep.rxBR = dri;  /* DRI codes the divisor from PCD to PICC */
 80072b0:	4a25      	ldr	r2, [pc, #148]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
                
                
                if(gIsoDep.actvParam.isoDepDev != NULL)
 80072b8:	4b23      	ldr	r3, [pc, #140]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 80072ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <rfalIsoDepListenGetActivationStatus+0x260>
                {
                    gIsoDep.actvParam.isoDepDev->info.DSI =  dsi;
 80072c0:	4b21      	ldr	r3, [pc, #132]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 80072c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c4:	7bfa      	ldrb	r2, [r7, #15]
 80072c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                    gIsoDep.actvParam.isoDepDev->info.DRI =  dri;
 80072ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 80072cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ce:	7bba      	ldrb	r2, [r7, #14]
 80072d0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
        }
        /* Check for a S-Deselect is done on Data Exchange Activity                    */
    }
     
     /*******************************************************************************/
     gIsoDep.hdrLen   = RFAL_ISODEP_PCB_LEN;
 80072d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
     gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;             /* Always assume DID to be aligned with Digital 1.1  15.1.2 and ISO14443  4 5.6.3    #454 */
 80072dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 80072de:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80072e2:	3301      	adds	r3, #1
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	4b18      	ldr	r3, [pc, #96]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 80072e8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
     gIsoDep.hdrLen  += (uint8_t)((gIsoDep.nad != RFAL_ISODEP_NO_NAD) ? RFAL_ISODEP_NAD_LEN : 0U);
 80072ec:	4b16      	ldr	r3, [pc, #88]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 80072ee:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80072f2:	4a15      	ldr	r2, [pc, #84]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 80072f4:	7912      	ldrb	r2, [r2, #4]
 80072f6:	2aff      	cmp	r2, #255	@ 0xff
 80072f8:	bf14      	ite	ne
 80072fa:	2201      	movne	r2, #1
 80072fc:	2200      	moveq	r2, #0
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	4413      	add	r3, r2
 8007302:	b2da      	uxtb	r2, r3
 8007304:	4b10      	ldr	r3, [pc, #64]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 8007306:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
     
     /*******************************************************************************/
     /* Rule C - The PICC block number shall be initialized to 1 at activation */
     gIsoDep.blockNumber = 1;
 800730a:	4b0f      	ldr	r3, [pc, #60]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 800730c:	2201      	movs	r2, #1
 800730e:	709a      	strb	r2, [r3, #2]
    
    /* Activation done, keep the rcvd data in, reMap the activation buffer to the global to be retrieved by the DEP method */
    gIsoDep.rxBuf       = (uint8_t*)gIsoDep.actvParam.rxBuf;
 8007310:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 8007312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007314:	4a0c      	ldr	r2, [pc, #48]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 8007316:	6193      	str	r3, [r2, #24]
    gIsoDep.rxBufLen    = sizeof( rfalIsoDepBufFormat );
 8007318:	4b0b      	ldr	r3, [pc, #44]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 800731a:	f240 1203 	movw	r2, #259	@ 0x103
 800731e:	83da      	strh	r2, [r3, #30]
    gIsoDep.rxBufInfPos = (uint8_t)((uint32_t)gIsoDep.actvParam.rxBuf->inf - (uint32_t)gIsoDep.actvParam.rxBuf->prologue);
 8007320:	4b09      	ldr	r3, [pc, #36]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 8007322:	2203      	movs	r2, #3
 8007324:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    gIsoDep.rxLen       = gIsoDep.actvParam.rxLen;
 8007328:	4b07      	ldr	r3, [pc, #28]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 800732a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732c:	4a06      	ldr	r2, [pc, #24]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 800732e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    gIsoDep.rxChaining  = gIsoDep.actvParam.isRxChaining;
 8007330:	4b05      	ldr	r3, [pc, #20]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 8007332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007334:	4a04      	ldr	r2, [pc, #16]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 8007336:	6313      	str	r3, [r2, #48]	@ 0x30
    
    gIsoDep.state = ISODEP_ST_PICC_RX;
 8007338:	4b03      	ldr	r3, [pc, #12]	@ (8007348 <rfalIsoDepListenGetActivationStatus+0x2d4>)
 800733a:	2206      	movs	r2, #6
 800733c:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	20000628 	.word	0x20000628

0800734c <rfalIsoDepStartTransceive>:
}


/*******************************************************************************/
ReturnCode rfalIsoDepStartTransceive( rfalIsoDepTxRxParam param )
{
 800734c:	b084      	sub	sp, #16
 800734e:	b580      	push	{r7, lr}
 8007350:	af00      	add	r7, sp, #0
 8007352:	f107 0c08 	add.w	ip, r7, #8
 8007356:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    gIsoDep.txBuf        = param.txBuf->prologue;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	461a      	mov	r2, r3
 800735e:	4b30      	ldr	r3, [pc, #192]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 8007360:	615a      	str	r2, [r3, #20]
    gIsoDep.txBufInfPos  = (uint8_t)((uint32_t)param.txBuf->inf - (uint32_t)param.txBuf->prologue);
 8007362:	4b2f      	ldr	r3, [pc, #188]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 8007364:	2203      	movs	r2, #3
 8007366:	f883 2020 	strb.w	r2, [r3, #32]
    gIsoDep.txBufLen     = param.txBufLen;
 800736a:	89ba      	ldrh	r2, [r7, #12]
 800736c:	4b2c      	ldr	r3, [pc, #176]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 800736e:	839a      	strh	r2, [r3, #28]
    gIsoDep.isTxChaining = param.isTxChaining;
 8007370:	7bba      	ldrb	r2, [r7, #14]
 8007372:	4b2b      	ldr	r3, [pc, #172]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 8007374:	749a      	strb	r2, [r3, #18]
    
    gIsoDep.rxBuf        = param.rxBuf->prologue;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	461a      	mov	r2, r3
 800737a:	4b29      	ldr	r3, [pc, #164]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 800737c:	619a      	str	r2, [r3, #24]
    gIsoDep.rxBufInfPos  = (uint8_t)((uint32_t)param.rxBuf->inf - (uint32_t)param.rxBuf->prologue);
 800737e:	4b28      	ldr	r3, [pc, #160]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 8007380:	2203      	movs	r2, #3
 8007382:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 8007386:	4b26      	ldr	r3, [pc, #152]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 8007388:	f240 1203 	movw	r2, #259	@ 0x103
 800738c:	83da      	strh	r2, [r3, #30]
    
    gIsoDep.rxLen        = param.rxLen;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	4a23      	ldr	r2, [pc, #140]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 8007392:	62d3      	str	r3, [r2, #44]	@ 0x2c
    gIsoDep.rxChaining   = param.isRxChaining;
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	4a22      	ldr	r2, [pc, #136]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 8007398:	6313      	str	r3, [r2, #48]	@ 0x30
    
    
    gIsoDep.fwt          = param.FWT;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	4a20      	ldr	r2, [pc, #128]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 800739e:	6093      	str	r3, [r2, #8]
    gIsoDep.dFwt         = param.dFWT;
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 80073a4:	60d3      	str	r3, [r2, #12]
    gIsoDep.fsx          = param.FSx;
 80073a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80073a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 80073aa:	821a      	strh	r2, [r3, #16]
    gIsoDep.did          = param.DID;
 80073ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80073b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 80073b2:	70da      	strb	r2, [r3, #3]
    
    /* Only change the FSx from activation if no to Keep */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 80073b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073b6:	2bff      	cmp	r3, #255	@ 0xff
 80073b8:	d001      	beq.n	80073be <rfalIsoDepStartTransceive+0x72>
 80073ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073bc:	e001      	b.n	80073c2 <rfalIsoDepStartTransceive+0x76>
 80073be:	4b18      	ldr	r3, [pc, #96]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 80073c0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80073c2:	4a17      	ldr	r2, [pc, #92]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 80073c4:	8453      	strh	r3, [r2, #34]	@ 0x22
    
    /* Clear inner control params for next dataExchange */
    gIsoDep.isRxChaining  = false;
 80073c6:	4b16      	ldr	r3, [pc, #88]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	74da      	strb	r2, [r3, #19]
    isoDepClearCounters();
 80073cc:	f7fe ff7a 	bl	80062c4 <isoDepClearCounters>
    
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 80073d0:	4b13      	ldr	r3, [pc, #76]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 80073d2:	785b      	ldrb	r3, [r3, #1]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d119      	bne.n	800740c <rfalIsoDepStartTransceive+0xc0>
    {
       if(gIsoDep.txBufLen > 0U)
 80073d8:	4b11      	ldr	r3, [pc, #68]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 80073da:	8b9b      	ldrh	r3, [r3, #28]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d010      	beq.n	8007402 <rfalIsoDepStartTransceive+0xb6>
       {
           /* Ensure that an RTOX Ack is not being expected at moment */
           if( !gIsoDep.isWait4WTX )
 80073e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 80073e2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80073e6:	f083 0301 	eor.w	r3, r3, #1
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d004      	beq.n	80073fa <rfalIsoDepStartTransceive+0xae>
           {
               gIsoDep.state = ISODEP_ST_PICC_TX;
 80073f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 80073f2:	2208      	movs	r2, #8
 80073f4:	701a      	strb	r2, [r3, #0]
               return ERR_NONE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	e00c      	b.n	8007414 <rfalIsoDepStartTransceive+0xc8>
           }
           else
           {
               /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
               gIsoDep.isTxPending = true;
 80073fa:	4b09      	ldr	r3, [pc, #36]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
           }
       }
       
       /* Digital 1.1  15.2.5.1 The first block SHALL be sent by the Reader/Writer */
       gIsoDep.state = ISODEP_ST_PICC_RX;
 8007402:	4b07      	ldr	r3, [pc, #28]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 8007404:	2206      	movs	r2, #6
 8007406:	701a      	strb	r2, [r3, #0]
       return ERR_NONE;
 8007408:	2300      	movs	r3, #0
 800740a:	e003      	b.n	8007414 <rfalIsoDepStartTransceive+0xc8>
    }
    
    gIsoDep.state = ISODEP_ST_PCD_TX;
 800740c:	4b04      	ldr	r3, [pc, #16]	@ (8007420 <rfalIsoDepStartTransceive+0xd4>)
 800740e:	2201      	movs	r2, #1
 8007410:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	46bd      	mov	sp, r7
 8007418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800741c:	b004      	add	sp, #16
 800741e:	4770      	bx	lr
 8007420:	20000628 	.word	0x20000628

08007424 <rfalIsoDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepGetTransceiveStatus( void )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 8007428:	4b09      	ldr	r3, [pc, #36]	@ (8007450 <rfalIsoDepGetTransceiveStatus+0x2c>)
 800742a:	785b      	ldrb	r3, [r3, #1]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d103      	bne.n	8007438 <rfalIsoDepGetTransceiveStatus+0x14>
    {
#if RFAL_FEATURE_ISO_DEP_LISTEN
        return isoDepDataExchangePICC();
 8007430:	f000 f810 	bl	8007454 <isoDepDataExchangePICC>
 8007434:	4603      	mov	r3, r0
 8007436:	e008      	b.n	800744a <rfalIsoDepGetTransceiveStatus+0x26>
#endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
    }
    else
    {
#if RFAL_FEATURE_ISO_DEP_POLL
        return isoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 8007438:	4b05      	ldr	r3, [pc, #20]	@ (8007450 <rfalIsoDepGetTransceiveStatus+0x2c>)
 800743a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743c:	4a04      	ldr	r2, [pc, #16]	@ (8007450 <rfalIsoDepGetTransceiveStatus+0x2c>)
 800743e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007440:	4611      	mov	r1, r2
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff f94e 	bl	80066e4 <isoDepDataExchangePCD>
 8007448:	4603      	mov	r3, r0
#else
        return ERR_NOTSUPP;
#endif /* RFAL_FEATURE_ISO_DEP_POLL */
    }
}
 800744a:	4618      	mov	r0, r3
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000628 	.word	0x20000628

08007454 <isoDepDataExchangePICC>:

#if RFAL_FEATURE_ISO_DEP_LISTEN

/*******************************************************************************/
static ReturnCode isoDepDataExchangePICC( void )
{
 8007454:	b590      	push	{r4, r7, lr}
 8007456:	b087      	sub	sp, #28
 8007458:	af04      	add	r7, sp, #16
    uint8_t    rxPCB;
    ReturnCode ret;
    
    switch( gIsoDep.state )
 800745a:	4bb6      	ldr	r3, [pc, #728]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b08      	cmp	r3, #8
 8007460:	f200 8137 	bhi.w	80076d2 <isoDepDataExchangePICC+0x27e>
 8007464:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <isoDepDataExchangePICC+0x18>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	08007491 	.word	0x08007491
 8007470:	080076d3 	.word	0x080076d3
 8007474:	080076d3 	.word	0x080076d3
 8007478:	080076d3 	.word	0x080076d3
 800747c:	080076d3 	.word	0x080076d3
 8007480:	080076d3 	.word	0x080076d3
 8007484:	080074e5 	.word	0x080074e5
 8007488:	08007639 	.word	0x08007639
 800748c:	08007495 	.word	0x08007495
    {
        /*******************************************************************************/
        case ISODEP_ST_IDLE:
            return ERR_NONE;
 8007490:	2300      	movs	r3, #0
 8007492:	e3ab      	b.n	8007bec <isoDepDataExchangePICC+0x798>
        

        /*******************************************************************************/
        case ISODEP_ST_PICC_TX:
        
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, RFAL_FWT_NONE );
 8007494:	4ba7      	ldr	r3, [pc, #668]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 8007496:	789b      	ldrb	r3, [r3, #2]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	b2db      	uxtb	r3, r3
 800749e:	f043 0302 	orr.w	r3, r3, #2
 80074a2:	b2d8      	uxtb	r0, r3
 80074a4:	4ba3      	ldr	r3, [pc, #652]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80074a6:	6959      	ldr	r1, [r3, #20]
 80074a8:	4ba2      	ldr	r3, [pc, #648]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	4aa1      	ldr	r2, [pc, #644]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80074ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80074b2:	441a      	add	r2, r3
 80074b4:	4b9f      	ldr	r3, [pc, #636]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80074b6:	8b9b      	ldrh	r3, [r3, #28]
 80074b8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80074bc:	9400      	str	r4, [sp, #0]
 80074be:	f7fe ff13 	bl	80062e8 <isoDepTx>
 80074c2:	4603      	mov	r3, r0
 80074c4:	80fb      	strh	r3, [r7, #6]
            
            /* Clear pending Tx flag */
            gIsoDep.isTxPending = false;
 80074c6:	4b9b      	ldr	r3, [pc, #620]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            
            switch( ret )
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <isoDepDataExchangePICC+0x8a>
            {
             case ERR_NONE:
                 gIsoDep.state = ISODEP_ST_PICC_RX;
 80074d4:	4b97      	ldr	r3, [pc, #604]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80074d6:	2206      	movs	r2, #6
 80074d8:	701a      	strb	r2, [r3, #0]
                 return ERR_BUSY;
 80074da:	2302      	movs	r3, #2
 80074dc:	e386      	b.n	8007bec <isoDepDataExchangePICC+0x798>
             
             default:
                /* MISRA 16.4: no empty default statement (a comment being enough) */
                break;
 80074de:	bf00      	nop
            }
            return ret;
 80074e0:	88fb      	ldrh	r3, [r7, #6]
 80074e2:	e383      	b.n	8007bec <isoDepDataExchangePICC+0x798>
        
        
        /*******************************************************************************/
        case ISODEP_ST_PICC_RX:
            
            ret = rfalGetTransceiveStatus();
 80074e4:	f007 fd06 	bl	800eef4 <rfalGetTransceiveStatus>
 80074e8:	4603      	mov	r3, r0
 80074ea:	80fb      	strh	r3, [r7, #6]
            switch( ret )
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	2b25      	cmp	r3, #37	@ 0x25
 80074f0:	f200 80a0 	bhi.w	8007634 <isoDepDataExchangePICC+0x1e0>
 80074f4:	a201      	add	r2, pc, #4	@ (adr r2, 80074fc <isoDepDataExchangePICC+0xa8>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	080075c1 	.word	0x080075c1
 8007500:	08007635 	.word	0x08007635
 8007504:	080075bd 	.word	0x080075bd
 8007508:	08007635 	.word	0x08007635
 800750c:	08007595 	.word	0x08007595
 8007510:	08007635 	.word	0x08007635
 8007514:	08007635 	.word	0x08007635
 8007518:	08007635 	.word	0x08007635
 800751c:	08007635 	.word	0x08007635
 8007520:	08007595 	.word	0x08007595
 8007524:	08007635 	.word	0x08007635
 8007528:	08007635 	.word	0x08007635
 800752c:	08007635 	.word	0x08007635
 8007530:	08007635 	.word	0x08007635
 8007534:	08007635 	.word	0x08007635
 8007538:	08007635 	.word	0x08007635
 800753c:	08007635 	.word	0x08007635
 8007540:	08007635 	.word	0x08007635
 8007544:	08007635 	.word	0x08007635
 8007548:	08007635 	.word	0x08007635
 800754c:	08007635 	.word	0x08007635
 8007550:	08007595 	.word	0x08007595
 8007554:	08007635 	.word	0x08007635
 8007558:	08007635 	.word	0x08007635
 800755c:	08007635 	.word	0x08007635
 8007560:	08007635 	.word	0x08007635
 8007564:	08007635 	.word	0x08007635
 8007568:	08007595 	.word	0x08007595
 800756c:	08007635 	.word	0x08007635
 8007570:	08007635 	.word	0x08007635
 8007574:	08007635 	.word	0x08007635
 8007578:	08007635 	.word	0x08007635
 800757c:	08007635 	.word	0x08007635
 8007580:	08007635 	.word	0x08007635
 8007584:	08007635 	.word	0x08007635
 8007588:	08007635 	.word	0x08007635
 800758c:	08007635 	.word	0x08007635
 8007590:	080075b9 	.word	0x080075b9
                case ERR_CRC:
                case ERR_PAR:
                case ERR_FRAMING:
                    
                    /* Digital 1.1 - 15.2.6.2  The CE SHALL NOT attempt error recovery and remains in Rx mode upon Transmission or a Protocol Error */                                        
                    isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 8007594:	4b67      	ldr	r3, [pc, #412]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 8007596:	699a      	ldr	r2, [r3, #24]
 8007598:	4b66      	ldr	r3, [pc, #408]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 800759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80075a0:	9102      	str	r1, [sp, #8]
 80075a2:	2100      	movs	r1, #0
 80075a4:	9101      	str	r1, [sp, #4]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	f240 1303 	movw	r3, #259	@ 0x103
 80075ac:	2100      	movs	r1, #0
 80075ae:	2000      	movs	r0, #0
 80075b0:	f007 fbea 	bl	800ed88 <rfalTransceiveBlockingTx>
                    
                    return ERR_BUSY;
 80075b4:	2302      	movs	r3, #2
 80075b6:	e319      	b.n	8007bec <isoDepDataExchangePICC+0x798>
                    
                /*******************************************************************************/
                case ERR_LINK_LOSS:
                    return ret;             /* Debug purposes */
 80075b8:	88fb      	ldrh	r3, [r7, #6]
 80075ba:	e317      	b.n	8007bec <isoDepDataExchangePICC+0x798>
                    
                case ERR_BUSY:
                    return ret;             /* Debug purposes */
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	e315      	b.n	8007bec <isoDepDataExchangePICC+0x798>
                    
                /*******************************************************************************/
                case ERR_NONE:
                    *gIsoDep.rxLen = rfalConvBitsToBytes( *gIsoDep.rxLen );
 80075c0:	4b5c      	ldr	r3, [pc, #368]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	3307      	adds	r3, #7
 80075c8:	08da      	lsrs	r2, r3, #3
 80075ca:	4b5a      	ldr	r3, [pc, #360]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ce:	b292      	uxth	r2, r2
 80075d0:	801a      	strh	r2, [r3, #0]
                    break;
 80075d2:	bf00      	nop

                /*******************************************************************************/
				default:
                    return ret;
            }
            break;
 80075d4:	bf00      	nop
        default:
            return ERR_INTERNAL;
    }
    
    /* ISO 14443-4 7.5.6.2 CE SHALL NOT attempt error recovery -> clear counters */
    isoDepClearCounters();
 80075d6:	f7fe fe75 	bl	80062c4 <isoDepClearCounters>
    /*******************************************************************************/
    /* No error, process incoming msg                                              */
    /*******************************************************************************/
        
    /* Grab rcvd PCB */
    rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 80075da:	4b56      	ldr	r3, [pc, #344]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	717b      	strb	r3, [r7, #5]
    /*******************************************************************************/
    /* When DID=0 PCD may or may not use DID, therefore check whether current PCD request 
     * has DID present to be reflected on max INF length                         #454  */            
        
    /* ReCalculate Header Length */
    gIsoDep.hdrLen   = RFAL_ISODEP_PCB_LEN;
 80075e2:	4b54      	ldr	r3, [pc, #336]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    gIsoDep.hdrLen  += (uint8_t)( (isoDep_PCBhasDID(rxPCB)) ? RFAL_ISODEP_DID_LEN : 0U );
 80075ea:	4b52      	ldr	r3, [pc, #328]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80075ec:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80075f0:	797a      	ldrb	r2, [r7, #5]
 80075f2:	f002 0208 	and.w	r2, r2, #8
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	bf14      	ite	ne
 80075fa:	2201      	movne	r2, #1
 80075fc:	2200      	moveq	r2, #0
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	4413      	add	r3, r2
 8007602:	b2da      	uxtb	r2, r3
 8007604:	4b4b      	ldr	r3, [pc, #300]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 8007606:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    gIsoDep.hdrLen  += (uint8_t)( (isoDep_PCBhasNAD(rxPCB)) ? RFAL_ISODEP_NAD_LEN : 0U );
 800760a:	4b4a      	ldr	r3, [pc, #296]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 800760c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007610:	797a      	ldrb	r2, [r7, #5]
 8007612:	f002 0204 	and.w	r2, r2, #4
 8007616:	2a00      	cmp	r2, #0
 8007618:	bf14      	ite	ne
 800761a:	2201      	movne	r2, #1
 800761c:	2200      	moveq	r2, #0
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	4413      	add	r3, r2
 8007622:	b2da      	uxtb	r2, r3
 8007624:	4b43      	ldr	r3, [pc, #268]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 8007626:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        
    /* Store whether last PCD block had DID. for PICC special handling of DID = 0 */
    if( gIsoDep.did == RFAL_ISODEP_DID_00 )
 800762a:	4b42      	ldr	r3, [pc, #264]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 800762c:	78db      	ldrb	r3, [r3, #3]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d15d      	bne.n	80076ee <isoDepDataExchangePICC+0x29a>
 8007632:	e050      	b.n	80076d6 <isoDepDataExchangePICC+0x282>
                    return ret;
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	e2d9      	b.n	8007bec <isoDepDataExchangePICC+0x798>
            if( !isoDepTimerisExpired( gIsoDep.WTXTimer ) )       /* Do nothing until WTX timer has expired */
 8007638:	4b3e      	ldr	r3, [pc, #248]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 800763a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe f955 	bl	80058ec <timerIsExpired>
 8007642:	4603      	mov	r3, r0
 8007644:	f083 0301 	eor.w	r3, r3, #1
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <isoDepDataExchangePICC+0x1fe>
               return ERR_BUSY;
 800764e:	2302      	movs	r3, #2
 8007650:	e2cc      	b.n	8007bec <isoDepDataExchangePICC+0x798>
            gIsoDep.isWait4WTX = true;
 8007652:	4b38      	ldr	r3, [pc, #224]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 8007654:	2201      	movs	r2, #1
 8007656:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            gIsoDep.lastWTXM = (uint8_t)isoDep_WTXMListenerMax( gIsoDep.fwt );
 800765a:	4b36      	ldr	r3, [pc, #216]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 800765c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007660:	2b01      	cmp	r3, #1
 8007662:	d101      	bne.n	8007668 <isoDepDataExchangePICC+0x214>
 8007664:	2307      	movs	r3, #7
 8007666:	e000      	b.n	800766a <isoDepDataExchangePICC+0x216>
 8007668:	2308      	movs	r3, #8
 800766a:	4618      	mov	r0, r3
 800766c:	f7ff fb06 	bl	8006c7c <rfalIsoDepFWI2FWT>
 8007670:	4602      	mov	r2, r0
 8007672:	4b30      	ldr	r3, [pc, #192]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	fbb2 f3f3 	udiv	r3, r2, r3
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b3a      	cmp	r3, #58	@ 0x3a
 800767e:	d811      	bhi.n	80076a4 <isoDepDataExchangePICC+0x250>
 8007680:	4b2c      	ldr	r3, [pc, #176]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 8007682:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007686:	2b01      	cmp	r3, #1
 8007688:	d101      	bne.n	800768e <isoDepDataExchangePICC+0x23a>
 800768a:	2307      	movs	r3, #7
 800768c:	e000      	b.n	8007690 <isoDepDataExchangePICC+0x23c>
 800768e:	2308      	movs	r3, #8
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff faf3 	bl	8006c7c <rfalIsoDepFWI2FWT>
 8007696:	4602      	mov	r2, r0
 8007698:	4b26      	ldr	r3, [pc, #152]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	e000      	b.n	80076a6 <isoDepDataExchangePICC+0x252>
 80076a4:	233b      	movs	r3, #59	@ 0x3b
 80076a6:	4a23      	ldr	r2, [pc, #140]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80076a8:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
            EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM ) );
 80076ac:	4b21      	ldr	r3, [pc, #132]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80076ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80076b2:	4619      	mov	r1, r3
 80076b4:	2002      	movs	r0, #2
 80076b6:	f7fe feaf 	bl	8006418 <isoDepHandleControlMsg>
 80076ba:	4603      	mov	r3, r0
 80076bc:	80fb      	strh	r3, [r7, #6]
 80076be:	88fb      	ldrh	r3, [r7, #6]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <isoDepDataExchangePICC+0x274>
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	e291      	b.n	8007bec <isoDepDataExchangePICC+0x798>
            gIsoDep.state = ISODEP_ST_PICC_RX;                    /* Go back to Rx to process WTX ack        */
 80076c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80076ca:	2206      	movs	r2, #6
 80076cc:	701a      	strb	r2, [r3, #0]
            return ERR_BUSY;
 80076ce:	2302      	movs	r3, #2
 80076d0:	e28c      	b.n	8007bec <isoDepDataExchangePICC+0x798>
            return ERR_INTERNAL;
 80076d2:	230c      	movs	r3, #12
 80076d4:	e28a      	b.n	8007bec <isoDepDataExchangePICC+0x798>
    {
        gIsoDep.lastDID00 = ( (isoDep_PCBhasDID(rxPCB)) ? true : false );
 80076d6:	797b      	ldrb	r3, [r7, #5]
 80076d8:	08db      	lsrs	r3, r3, #3
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bf14      	ite	ne
 80076e2:	2301      	movne	r3, #1
 80076e4:	2300      	moveq	r3, #0
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	4b12      	ldr	r3, [pc, #72]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80076ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    
    /*******************************************************************************/
    /* Check rcvd msg length, cannot be less then the expected header    OR        * 
     * if the rcvd msg exceeds our announced frame size (FSD)                      */
    if( ((*gIsoDep.rxLen) < gIsoDep.hdrLen) || ((*gIsoDep.rxLen) > (gIsoDep.ourFsx - ISODEP_CRC_LEN)) )
 80076ee:	4b11      	ldr	r3, [pc, #68]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80076f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 80076f6:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d308      	bcc.n	8007710 <isoDepDataExchangePICC+0x2bc>
 80076fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	4b0b      	ldr	r3, [pc, #44]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 8007708:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800770a:	3b02      	subs	r3, #2
 800770c:	429a      	cmp	r2, r3
 800770e:	d913      	bls.n	8007738 <isoDepDataExchangePICC+0x2e4>
    {
        isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 8007710:	4b08      	ldr	r3, [pc, #32]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 8007712:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007714:	4b07      	ldr	r3, [pc, #28]	@ (8007734 <isoDepDataExchangePICC+0x2e0>)
 8007716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007718:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800771c:	9102      	str	r1, [sp, #8]
 800771e:	2100      	movs	r1, #0
 8007720:	9101      	str	r1, [sp, #4]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	f240 1303 	movw	r3, #259	@ 0x103
 8007728:	2100      	movs	r1, #0
 800772a:	2000      	movs	r0, #0
 800772c:	f007 fb2c 	bl	800ed88 <rfalTransceiveBlockingTx>
        return ERR_BUSY;  /* ERR_PROTO Ignore this protocol request */
 8007730:	2302      	movs	r3, #2
 8007732:	e25b      	b.n	8007bec <isoDepDataExchangePICC+0x798>
 8007734:	20000628 	.word	0x20000628
    }
    
    /* If we are expecting DID, check if PCB signals its presence and if device ID match OR
     * If our DID=0 and DID is sent but with an incorrect value                              */
    if( ((gIsoDep.did != RFAL_ISODEP_DID_00) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])))   || 
 8007738:	4ba2      	ldr	r3, [pc, #648]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800773a:	78db      	ldrb	r3, [r3, #3]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00c      	beq.n	800775a <isoDepDataExchangePICC+0x306>
 8007740:	797b      	ldrb	r3, [r7, #5]
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d016      	beq.n	8007778 <isoDepDataExchangePICC+0x324>
 800774a:	4b9e      	ldr	r3, [pc, #632]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800774c:	78da      	ldrb	r2, [r3, #3]
 800774e:	4b9d      	ldr	r3, [pc, #628]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	3301      	adds	r3, #1
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d10e      	bne.n	8007778 <isoDepDataExchangePICC+0x324>
        ((gIsoDep.did == RFAL_ISODEP_DID_00) &&    isoDep_PCBhasDID(rxPCB) && (RFAL_ISODEP_DID_00 != gIsoDep.rxBuf[ ISODEP_DID_POS ]) )     )
 800775a:	4b9a      	ldr	r3, [pc, #616]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800775c:	78db      	ldrb	r3, [r3, #3]
    if( ((gIsoDep.did != RFAL_ISODEP_DID_00) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])))   || 
 800775e:	2b00      	cmp	r3, #0
 8007760:	d11c      	bne.n	800779c <isoDepDataExchangePICC+0x348>
        ((gIsoDep.did == RFAL_ISODEP_DID_00) &&    isoDep_PCBhasDID(rxPCB) && (RFAL_ISODEP_DID_00 != gIsoDep.rxBuf[ ISODEP_DID_POS ]) )     )
 8007762:	797b      	ldrb	r3, [r7, #5]
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b00      	cmp	r3, #0
 800776a:	d017      	beq.n	800779c <isoDepDataExchangePICC+0x348>
 800776c:	4b95      	ldr	r3, [pc, #596]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	3301      	adds	r3, #1
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d011      	beq.n	800779c <isoDepDataExchangePICC+0x348>
    {
        isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 8007778:	4b92      	ldr	r3, [pc, #584]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800777a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800777c:	4b91      	ldr	r3, [pc, #580]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800777e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007780:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007784:	9102      	str	r1, [sp, #8]
 8007786:	2100      	movs	r1, #0
 8007788:	9101      	str	r1, [sp, #4]
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	f240 1303 	movw	r3, #259	@ 0x103
 8007790:	2100      	movs	r1, #0
 8007792:	2000      	movs	r0, #0
 8007794:	f007 faf8 	bl	800ed88 <rfalTransceiveBlockingTx>
        return ERR_BUSY;  /* Ignore a wrong DID request */
 8007798:	2302      	movs	r3, #2
 800779a:	e227      	b.n	8007bec <isoDepDataExchangePICC+0x798>
    }
    
    /* If we aren't expecting NAD and it's received */
    if( (gIsoDep.nad == RFAL_ISODEP_NO_NAD) && isoDep_PCBhasNAD(rxPCB) )
 800779c:	4b89      	ldr	r3, [pc, #548]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800779e:	791b      	ldrb	r3, [r3, #4]
 80077a0:	2bff      	cmp	r3, #255	@ 0xff
 80077a2:	d116      	bne.n	80077d2 <isoDepDataExchangePICC+0x37e>
 80077a4:	797b      	ldrb	r3, [r7, #5]
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d011      	beq.n	80077d2 <isoDepDataExchangePICC+0x37e>
    {
        isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 80077ae:	4b85      	ldr	r3, [pc, #532]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 80077b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077b2:	4b84      	ldr	r3, [pc, #528]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 80077b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80077ba:	9102      	str	r1, [sp, #8]
 80077bc:	2100      	movs	r1, #0
 80077be:	9101      	str	r1, [sp, #4]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	f240 1303 	movw	r3, #259	@ 0x103
 80077c6:	2100      	movs	r1, #0
 80077c8:	2000      	movs	r0, #0
 80077ca:	f007 fadd 	bl	800ed88 <rfalTransceiveBlockingTx>
        return ERR_BUSY;  /* Ignore a unexpected NAD request */
 80077ce:	2302      	movs	r3, #2
 80077d0:	e20c      	b.n	8007bec <isoDepDataExchangePICC+0x798>
    }
        
    /*******************************************************************************/
    /* Process S-Block                                                             */
    /*******************************************************************************/
    if( isoDep_PCBisSBlock(rxPCB) )
 80077d2:	797b      	ldrb	r3, [r7, #5]
 80077d4:	f003 03c7 	and.w	r3, r3, #199	@ 0xc7
 80077d8:	2bc2      	cmp	r3, #194	@ 0xc2
 80077da:	f040 8082 	bne.w	80078e2 <isoDepDataExchangePICC+0x48e>
    {
       /* Check if is a Wait Time eXtension */
       if( isoDep_PCBisSWTX(rxPCB) )
 80077de:	797b      	ldrb	r3, [r7, #5]
 80077e0:	f003 03c7 	and.w	r3, r3, #199	@ 0xc7
 80077e4:	2bc2      	cmp	r3, #194	@ 0xc2
 80077e6:	d158      	bne.n	800789a <isoDepDataExchangePICC+0x446>
 80077e8:	797b      	ldrb	r3, [r7, #5]
 80077ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077ee:	2b30      	cmp	r3, #48	@ 0x30
 80077f0:	d153      	bne.n	800789a <isoDepDataExchangePICC+0x446>
       {
            /* Check if we're expecting a S-WTX */
            if( isoDep_PCBisWTX( gIsoDep.lastPCB ) )
 80077f2:	4b74      	ldr	r3, [pc, #464]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 80077f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80077f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077fc:	2b30      	cmp	r3, #48	@ 0x30
 80077fe:	d14c      	bne.n	800789a <isoDepDataExchangePICC+0x446>
            {
                /* Digital 1.1  15.2.2.11 S(WTX) Ack with different WTXM -> Protocol Error  *
                 *              Power level indication also should be set to 0              */
                if( ( gIsoDep.rxBuf[ gIsoDep.hdrLen ] == gIsoDep.lastWTXM) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_SWTX_INF_LEN) )
 8007800:	4b70      	ldr	r3, [pc, #448]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	4a6f      	ldr	r2, [pc, #444]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007806:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 800780a:	4413      	add	r3, r2
 800780c:	781a      	ldrb	r2, [r3, #0]
 800780e:	4b6d      	ldr	r3, [pc, #436]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007810:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007814:	429a      	cmp	r2, r3
 8007816:	d140      	bne.n	800789a <isoDepDataExchangePICC+0x446>
 8007818:	4b6a      	ldr	r3, [pc, #424]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800781a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	4b68      	ldr	r3, [pc, #416]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007822:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b01      	cmp	r3, #1
 800782a:	d136      	bne.n	800789a <isoDepDataExchangePICC+0x446>
                {
                    /* Clear waiting for RTOX Ack Flag */
                    gIsoDep.isWait4WTX = false;
 800782c:	4b65      	ldr	r3, [pc, #404]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    
                    /* Check if a Tx is already pending */
                    if( gIsoDep.isTxPending )
 8007834:	4b63      	ldr	r3, [pc, #396]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007836:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800783a:	2b00      	cmp	r3, #0
 800783c:	d004      	beq.n	8007848 <isoDepDataExchangePICC+0x3f4>
                    {
                        /* Has a pending Tx, go immediately to TX */ 
                        gIsoDep.state = ISODEP_ST_PICC_TX;
 800783e:	4b61      	ldr	r3, [pc, #388]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007840:	2208      	movs	r2, #8
 8007842:	701a      	strb	r2, [r3, #0]
                        return ERR_BUSY;
 8007844:	2302      	movs	r3, #2
 8007846:	e1d1      	b.n	8007bec <isoDepDataExchangePICC+0x798>
                    }
                    
                    /* Set WTX timer */
                    isoDepTimerStart( gIsoDep.WTXTimer, isoDep_WTXAdjust( (gIsoDep.lastWTXM * rfalConv1fcToMs( gIsoDep.fwt )) ) );
 8007848:	4b5e      	ldr	r3, [pc, #376]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800784a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800784e:	4619      	mov	r1, r3
 8007850:	4b5c      	ldr	r3, [pc, #368]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	4a5c      	ldr	r2, [pc, #368]	@ (80079c8 <isoDepDataExchangePICC+0x574>)
 8007856:	fba2 2303 	umull	r2, r3, r2, r3
 800785a:	0b1b      	lsrs	r3, r3, #12
 800785c:	b29b      	uxth	r3, r3
 800785e:	fb11 f303 	smulbb	r3, r1, r3
 8007862:	b29a      	uxth	r2, r3
 8007864:	4b57      	ldr	r3, [pc, #348]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007866:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800786a:	4618      	mov	r0, r3
 800786c:	4b55      	ldr	r3, [pc, #340]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	4955      	ldr	r1, [pc, #340]	@ (80079c8 <isoDepDataExchangePICC+0x574>)
 8007872:	fba1 1303 	umull	r1, r3, r1, r3
 8007876:	0b1b      	lsrs	r3, r3, #12
 8007878:	fb00 f303 	mul.w	r3, r0, r3
 800787c:	08db      	lsrs	r3, r3, #3
 800787e:	b29b      	uxth	r3, r3
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	b29b      	uxth	r3, r3
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe f823 	bl	80058d0 <timerCalculateTimer>
 800788a:	4603      	mov	r3, r0
 800788c:	4a4d      	ldr	r2, [pc, #308]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800788e:	6353      	str	r3, [r2, #52]	@ 0x34
                    
                    gIsoDep.state = ISODEP_ST_PICC_SWTX;
 8007890:	4b4c      	ldr	r3, [pc, #304]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007892:	2207      	movs	r2, #7
 8007894:	701a      	strb	r2, [r3, #0]
                    return ERR_BUSY;
 8007896:	2302      	movs	r3, #2
 8007898:	e1a8      	b.n	8007bec <isoDepDataExchangePICC+0x798>
            }
            /* Unexpected/Incorrect S-WTX, fall into reRenable */
       }
       
       /* Check if is a deselect request */
       if( isoDep_PCBisSDeselect(rxPCB) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_SDSL_INF_LEN) )
 800789a:	797b      	ldrb	r3, [r7, #5]
 800789c:	f003 03c7 	and.w	r3, r3, #199	@ 0xc7
 80078a0:	2bc2      	cmp	r3, #194	@ 0xc2
 80078a2:	f040 8192 	bne.w	8007bca <isoDepDataExchangePICC+0x776>
 80078a6:	797b      	ldrb	r3, [r7, #5]
 80078a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 818c 	bne.w	8007bca <isoDepDataExchangePICC+0x776>
 80078b2:	4b44      	ldr	r3, [pc, #272]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 80078b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	4a42      	ldr	r2, [pc, #264]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 80078ba:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 80078be:	4293      	cmp	r3, r2
 80078c0:	f040 8183 	bne.w	8007bca <isoDepDataExchangePICC+0x776>
       {
           EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 80078c4:	2100      	movs	r1, #0
 80078c6:	2003      	movs	r0, #3
 80078c8:	f7fe fda6 	bl	8006418 <isoDepHandleControlMsg>
 80078cc:	4603      	mov	r3, r0
 80078ce:	80fb      	strh	r3, [r7, #6]
 80078d0:	88fb      	ldrh	r3, [r7, #6]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <isoDepDataExchangePICC+0x486>
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	e188      	b.n	8007bec <isoDepDataExchangePICC+0x798>
           
           rfalIsoDepInitialize();         /* Session finished reInit vars */
 80078da:	f7fe feb1 	bl	8006640 <rfalIsoDepInitialize>
           return ERR_SLEEP_REQ;
 80078de:	2320      	movs	r3, #32
 80078e0:	e184      	b.n	8007bec <isoDepDataExchangePICC+0x798>
    }
    
    /*******************************************************************************/
    /* Process R-Block                                                             */
    /*******************************************************************************/
    else if( isoDep_PCBisRBlock(rxPCB) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_RBLOCK_INF_LEN))
 80078e2:	797b      	ldrb	r3, [r7, #5]
 80078e4:	f003 03e6 	and.w	r3, r3, #230	@ 0xe6
 80078e8:	2ba2      	cmp	r3, #162	@ 0xa2
 80078ea:	f040 809e 	bne.w	8007a2a <isoDepDataExchangePICC+0x5d6>
 80078ee:	4b35      	ldr	r3, [pc, #212]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 80078f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	4a33      	ldr	r2, [pc, #204]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 80078f6:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 80078fa:	4293      	cmp	r3, r2
 80078fc:	f040 8095 	bne.w	8007a2a <isoDepDataExchangePICC+0x5d6>
    {
        if( isoDep_PCBisRACK(rxPCB) )                             /* Check if is a R-ACK */
 8007900:	797b      	ldrb	r3, [r7, #5]
 8007902:	f003 03e6 	and.w	r3, r3, #230	@ 0xe6
 8007906:	2ba2      	cmp	r3, #162	@ 0xa2
 8007908:	d160      	bne.n	80079cc <isoDepDataExchangePICC+0x578>
 800790a:	797b      	ldrb	r3, [r7, #5]
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	2b00      	cmp	r3, #0
 8007912:	d15b      	bne.n	80079cc <isoDepDataExchangePICC+0x578>
        {
            if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )      /* Check block number  */
 8007914:	797b      	ldrb	r3, [r7, #5]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	4a2a      	ldr	r2, [pc, #168]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800791c:	7892      	ldrb	r2, [r2, #2]
 800791e:	4293      	cmp	r3, r2
 8007920:	d10e      	bne.n	8007940 <isoDepDataExchangePICC+0x4ec>
            {
                /* Rule 11 - R(ACK) with current bn -> re-transmit */
                if( !isoDep_PCBisIBlock(gIsoDep.lastPCB) )
 8007922:	4b28      	ldr	r3, [pc, #160]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007924:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007928:	f003 03e2 	and.w	r3, r3, #226	@ 0xe2
 800792c:	2b02      	cmp	r3, #2
 800792e:	d002      	beq.n	8007936 <isoDepDataExchangePICC+0x4e2>
                {
                    isoDepReSendControlMsg();
 8007930:	f7fe fe2c 	bl	800658c <isoDepReSendControlMsg>
 8007934:	e002      	b.n	800793c <isoDepDataExchangePICC+0x4e8>
                }
                else
                {
                    gIsoDep.state = ISODEP_ST_PICC_TX;
 8007936:	4b23      	ldr	r3, [pc, #140]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007938:	2208      	movs	r2, #8
 800793a:	701a      	strb	r2, [r3, #0]
                }
                
                return ERR_BUSY;
 800793c:	2302      	movs	r3, #2
 800793e:	e155      	b.n	8007bec <isoDepDataExchangePICC+0x798>
            }
            else
            {
                if( !gIsoDep.isTxChaining )
 8007940:	4b20      	ldr	r3, [pc, #128]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007942:	7c9b      	ldrb	r3, [r3, #18]
 8007944:	f083 0301 	eor.w	r3, r3, #1
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d011      	beq.n	8007972 <isoDepDataExchangePICC+0x51e>
                {
                    /* Rule 13 violation R(ACK) without performing chaining */
                    isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 800794e:	4b1d      	ldr	r3, [pc, #116]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	4b1c      	ldr	r3, [pc, #112]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007956:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800795a:	9102      	str	r1, [sp, #8]
 800795c:	2100      	movs	r1, #0
 800795e:	9101      	str	r1, [sp, #4]
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	f240 1303 	movw	r3, #259	@ 0x103
 8007966:	2100      	movs	r1, #0
 8007968:	2000      	movs	r0, #0
 800796a:	f007 fa0d 	bl	800ed88 <rfalTransceiveBlockingTx>
                    return ERR_BUSY;
 800796e:	2302      	movs	r3, #2
 8007970:	e13c      	b.n	8007bec <isoDepDataExchangePICC+0x798>
                }
                
                /* Rule E -  R(ACK) with not current bn -> toogle bn */
                isoDep_ToggleBN( gIsoDep.blockNumber );
 8007972:	4b14      	ldr	r3, [pc, #80]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 8007974:	789b      	ldrb	r3, [r3, #2]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	bf0c      	ite	eq
 8007980:	2301      	moveq	r3, #1
 8007982:	2300      	movne	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	461a      	mov	r2, r3
 8007988:	4b0e      	ldr	r3, [pc, #56]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800798a:	709a      	strb	r2, [r3, #2]

                /* This block has been transmitted and acknowledged, perform WTX until next data is provided  */

                /* Rule 9 - PICC is allowed to send an S(WTX) instead of an I-block or an R(ACK) */
                isoDepTimerStart( gIsoDep.WTXTimer, isoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 800798c:	4b0d      	ldr	r3, [pc, #52]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	4a0d      	ldr	r2, [pc, #52]	@ (80079c8 <isoDepDataExchangePICC+0x574>)
 8007992:	fba2 2303 	umull	r2, r3, r2, r3
 8007996:	0b1b      	lsrs	r3, r3, #12
 8007998:	b29a      	uxth	r2, r3
 800799a:	4b0a      	ldr	r3, [pc, #40]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	490a      	ldr	r1, [pc, #40]	@ (80079c8 <isoDepDataExchangePICC+0x574>)
 80079a0:	fba1 1303 	umull	r1, r3, r1, r3
 80079a4:	0b1b      	lsrs	r3, r3, #12
 80079a6:	08db      	lsrs	r3, r3, #3
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fd ff8e 	bl	80058d0 <timerCalculateTimer>
 80079b4:	4603      	mov	r3, r0
 80079b6:	4a03      	ldr	r2, [pc, #12]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 80079b8:	6353      	str	r3, [r2, #52]	@ 0x34
                gIsoDep.state = ISODEP_ST_PICC_SWTX;
 80079ba:	4b02      	ldr	r3, [pc, #8]	@ (80079c4 <isoDepDataExchangePICC+0x570>)
 80079bc:	2207      	movs	r2, #7
 80079be:	701a      	strb	r2, [r3, #0]
                
                /* Rule 13 - R(ACK) with not current bn -> continue chaining */
                return ERR_NONE;                                 /* This block has been transmitted */
 80079c0:	2300      	movs	r3, #0
 80079c2:	e113      	b.n	8007bec <isoDepDataExchangePICC+0x798>
 80079c4:	20000628 	.word	0x20000628
 80079c8:	4d542005 	.word	0x4d542005
            }
        }
        else if( isoDep_PCBisRNAK(rxPCB) )                       /* Check if is a R-NACK */
 80079cc:	797b      	ldrb	r3, [r7, #5]
 80079ce:	f003 03e6 	and.w	r3, r3, #230	@ 0xe6
 80079d2:	2ba2      	cmp	r3, #162	@ 0xa2
 80079d4:	f040 80f8 	bne.w	8007bc8 <isoDepDataExchangePICC+0x774>
 80079d8:	797b      	ldrb	r3, [r7, #5]
 80079da:	f003 0310 	and.w	r3, r3, #16
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80f2 	beq.w	8007bc8 <isoDepDataExchangePICC+0x774>
        {
            if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Check block number  */
 80079e4:	797b      	ldrb	r3, [r7, #5]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	4a82      	ldr	r2, [pc, #520]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 80079ec:	7892      	ldrb	r2, [r2, #2]
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d10e      	bne.n	8007a10 <isoDepDataExchangePICC+0x5bc>
            {
                /* Rule 11 - R(NAK) with current bn -> re-transmit last x-Block */
                if( !isoDep_PCBisIBlock(gIsoDep.lastPCB) )
 80079f2:	4b80      	ldr	r3, [pc, #512]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 80079f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80079f8:	f003 03e2 	and.w	r3, r3, #226	@ 0xe2
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d002      	beq.n	8007a06 <isoDepDataExchangePICC+0x5b2>
                {
                    isoDepReSendControlMsg();
 8007a00:	f7fe fdc4 	bl	800658c <isoDepReSendControlMsg>
 8007a04:	e002      	b.n	8007a0c <isoDepDataExchangePICC+0x5b8>
                }
                else
                {
                    gIsoDep.state = ISODEP_ST_PICC_TX;
 8007a06:	4b7b      	ldr	r3, [pc, #492]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007a08:	2208      	movs	r2, #8
 8007a0a:	701a      	strb	r2, [r3, #0]
                }
                
                return ERR_BUSY;
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e0ed      	b.n	8007bec <isoDepDataExchangePICC+0x798>
            }
            else
            {
                /* Rule 12 - R(NAK) with not current bn -> R(ACK) */
                EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8007a10:	2100      	movs	r1, #0
 8007a12:	2000      	movs	r0, #0
 8007a14:	f7fe fd00 	bl	8006418 <isoDepHandleControlMsg>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	80fb      	strh	r3, [r7, #6]
 8007a1c:	88fb      	ldrh	r3, [r7, #6]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <isoDepDataExchangePICC+0x5d2>
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	e0e2      	b.n	8007bec <isoDepDataExchangePICC+0x798>
                
                return ERR_BUSY;
 8007a26:	2302      	movs	r3, #2
 8007a28:	e0e0      	b.n	8007bec <isoDepDataExchangePICC+0x798>
    }
    
    /*******************************************************************************/
    /* Process I-Block                                                             */
    /*******************************************************************************/
    else if( isoDep_PCBisIBlock(rxPCB) )
 8007a2a:	797b      	ldrb	r3, [r7, #5]
 8007a2c:	f003 03e2 	and.w	r3, r3, #226	@ 0xe2
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	f040 80ca 	bne.w	8007bca <isoDepDataExchangePICC+0x776>
    {
        /* Rule D - When an I-block is received, the PICC shall toggle its block number before sending a block */
        isoDep_ToggleBN( gIsoDep.blockNumber );
 8007a36:	4b6f      	ldr	r3, [pc, #444]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007a38:	789b      	ldrb	r3, [r3, #2]
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	bf0c      	ite	eq
 8007a44:	2301      	moveq	r3, #1
 8007a46:	2300      	movne	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4b69      	ldr	r3, [pc, #420]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007a4e:	709a      	strb	r2, [r3, #2]
        
        /*******************************************************************************/
        /* Check if the block number is the one expected                               */
        /* Check if PCD sent an I-Block instead ACK/NACK when we are chaining          */
        if( (isoDep_GetBN(rxPCB) != gIsoDep.blockNumber) || (gIsoDep.isTxChaining) )
 8007a50:	797b      	ldrb	r3, [r7, #5]
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	4a67      	ldr	r2, [pc, #412]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007a58:	7892      	ldrb	r2, [r2, #2]
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d103      	bne.n	8007a66 <isoDepDataExchangePICC+0x612>
 8007a5e:	4b65      	ldr	r3, [pc, #404]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007a60:	7c9b      	ldrb	r3, [r3, #18]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d01e      	beq.n	8007aa4 <isoDepDataExchangePICC+0x650>
        {
            /* Remain in the same Block Number */
            isoDep_ToggleBN( gIsoDep.blockNumber );
 8007a66:	4b63      	ldr	r3, [pc, #396]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007a68:	789b      	ldrb	r3, [r3, #2]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bf0c      	ite	eq
 8007a74:	2301      	moveq	r3, #1
 8007a76:	2300      	movne	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007a7e:	709a      	strb	r2, [r3, #2]
            
            /* ISO 14443-4 7.5.6.2 & Digital 1.1 - 15.2.6.2  The CE SHALL NOT attempt error recovery and remains in Rx mode upon Transmission or a Protocol Error */                                  
            isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 8007a80:	4b5c      	ldr	r3, [pc, #368]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007a82:	699a      	ldr	r2, [r3, #24]
 8007a84:	4b5b      	ldr	r3, [pc, #364]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007a8c:	9102      	str	r1, [sp, #8]
 8007a8e:	2100      	movs	r1, #0
 8007a90:	9101      	str	r1, [sp, #4]
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	f240 1303 	movw	r3, #259	@ 0x103
 8007a98:	2100      	movs	r1, #0
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f007 f974 	bl	800ed88 <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e0a3      	b.n	8007bec <isoDepDataExchangePICC+0x798>
        }
        
        /*******************************************************************************/
        /* is PCD performing chaining  ?                                               */
        if( isoDep_PCBisChaining(rxPCB) )
 8007aa4:	797b      	ldrb	r3, [r7, #5]
 8007aa6:	f003 0310 	and.w	r3, r3, #16
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d03e      	beq.n	8007b2c <isoDepDataExchangePICC+0x6d8>
        {
            gIsoDep.isRxChaining  = true;
 8007aae:	4b51      	ldr	r3, [pc, #324]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	74da      	strb	r2, [r3, #19]
            *gIsoDep.rxChaining   = true; /* Output Parameter*/            
 8007ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab8:	2201      	movs	r2, #1
 8007aba:	701a      	strb	r2, [r3, #0]
                        
            EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8007abc:	2100      	movs	r1, #0
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f7fe fcaa 	bl	8006418 <isoDepHandleControlMsg>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	80fb      	strh	r3, [r7, #6]
 8007ac8:	88fb      	ldrh	r3, [r7, #6]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <isoDepDataExchangePICC+0x67e>
 8007ace:	88fb      	ldrh	r3, [r7, #6]
 8007ad0:	e08c      	b.n	8007bec <isoDepDataExchangePICC+0x798>
                            
            /* Received I-Block with chaining, send current data to DH */
            
            /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
            *gIsoDep.rxLen -= gIsoDep.hdrLen;
 8007ad2:	4b48      	ldr	r3, [pc, #288]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad6:	881a      	ldrh	r2, [r3, #0]
 8007ad8:	4b46      	ldr	r3, [pc, #280]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007ada:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4b44      	ldr	r3, [pc, #272]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae4:	1a52      	subs	r2, r2, r1
 8007ae6:	b292      	uxth	r2, r2
 8007ae8:	801a      	strh	r2, [r3, #0]
            if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*gIsoDep.rxLen > 0U) )
 8007aea:	4b42      	ldr	r3, [pc, #264]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007aec:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8007af0:	4b40      	ldr	r3, [pc, #256]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007af2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d016      	beq.n	8007b28 <isoDepDataExchangePICC+0x6d4>
 8007afa:	4b3e      	ldr	r3, [pc, #248]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d011      	beq.n	8007b28 <isoDepDataExchangePICC+0x6d4>
            {
                ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *gIsoDep.rxLen );
 8007b04:	4b3b      	ldr	r3, [pc, #236]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	4a3a      	ldr	r2, [pc, #232]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b0a:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8007b0e:	1898      	adds	r0, r3, r2
 8007b10:	4b38      	ldr	r3, [pc, #224]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	4a37      	ldr	r2, [pc, #220]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b16:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8007b1a:	1899      	adds	r1, r3, r2
 8007b1c:	4b35      	ldr	r3, [pc, #212]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f009 fd0a 	bl	801153c <memmove>
            }
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/            
 8007b28:	230d      	movs	r3, #13
 8007b2a:	e05f      	b.n	8007bec <isoDepDataExchangePICC+0x798>
        }
        
        
        /*******************************************************************************/
        /* PCD is not performing chaining                                              */
        gIsoDep.isRxChaining  = false; /* clear PCD chaining flag */
 8007b2c:	4b31      	ldr	r3, [pc, #196]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	74da      	strb	r2, [r3, #19]
        *gIsoDep.rxChaining   = false; /* Output Parameter        */
 8007b32:	4b30      	ldr	r3, [pc, #192]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b36:	2200      	movs	r2, #0
 8007b38:	701a      	strb	r2, [r3, #0]
        
        /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
        *gIsoDep.rxLen -= gIsoDep.hdrLen;
 8007b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3e:	881a      	ldrh	r2, [r3, #0]
 8007b40:	4b2c      	ldr	r3, [pc, #176]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b42:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007b46:	4619      	mov	r1, r3
 8007b48:	4b2a      	ldr	r3, [pc, #168]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4c:	1a52      	subs	r2, r2, r1
 8007b4e:	b292      	uxth	r2, r2
 8007b50:	801a      	strh	r2, [r3, #0]
        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*gIsoDep.rxLen > 0U) )
 8007b52:	4b28      	ldr	r3, [pc, #160]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b54:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8007b58:	4b26      	ldr	r3, [pc, #152]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d016      	beq.n	8007b90 <isoDepDataExchangePICC+0x73c>
 8007b62:	4b24      	ldr	r3, [pc, #144]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d011      	beq.n	8007b90 <isoDepDataExchangePICC+0x73c>
        {
            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *gIsoDep.rxLen );
 8007b6c:	4b21      	ldr	r3, [pc, #132]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	4a20      	ldr	r2, [pc, #128]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b72:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8007b76:	1898      	adds	r0, r3, r2
 8007b78:	4b1e      	ldr	r3, [pc, #120]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b7e:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8007b82:	1899      	adds	r1, r3, r2
 8007b84:	4b1b      	ldr	r3, [pc, #108]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f009 fcd6 	bl	801153c <memmove>
        }
        
        
        /*******************************************************************************/
        /* Reception done, send data back and start WTX timer                          */
        isoDepTimerStart( gIsoDep.WTXTimer, isoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 8007b90:	4b18      	ldr	r3, [pc, #96]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	4a18      	ldr	r2, [pc, #96]	@ (8007bf8 <isoDepDataExchangePICC+0x7a4>)
 8007b96:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9a:	0b1b      	lsrs	r3, r3, #12
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	4b15      	ldr	r3, [pc, #84]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	4915      	ldr	r1, [pc, #84]	@ (8007bf8 <isoDepDataExchangePICC+0x7a4>)
 8007ba4:	fba1 1303 	umull	r1, r3, r1, r3
 8007ba8:	0b1b      	lsrs	r3, r3, #12
 8007baa:	08db      	lsrs	r3, r3, #3
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fd fe8c 	bl	80058d0 <timerCalculateTimer>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	4a0e      	ldr	r2, [pc, #56]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007bbc:	6353      	str	r3, [r2, #52]	@ 0x34
        
        gIsoDep.state = ISODEP_ST_PICC_SWTX;
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e011      	b.n	8007bec <isoDepDataExchangePICC+0x798>
        if( isoDep_PCBisRACK(rxPCB) )                             /* Check if is a R-ACK */
 8007bc8:	bf00      	nop
        /* MISRA 15.7 - Empty else */
    }
    
    /* Unexpected/Unknown Block */
    /* ISO 14443-4 7.5.6.2 & Digital 1.1 - 15.2.6.2  The CE SHALL NOT attempt error recovery and remains in Rx mode upon Transmission or a Protocol Error */
    isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 8007bca:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007bcc:	699a      	ldr	r2, [r3, #24]
 8007bce:	4b09      	ldr	r3, [pc, #36]	@ (8007bf4 <isoDepDataExchangePICC+0x7a0>)
 8007bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007bd6:	9102      	str	r1, [sp, #8]
 8007bd8:	2100      	movs	r1, #0
 8007bda:	9101      	str	r1, [sp, #4]
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	f240 1303 	movw	r3, #259	@ 0x103
 8007be2:	2100      	movs	r1, #0
 8007be4:	2000      	movs	r0, #0
 8007be6:	f007 f8cf 	bl	800ed88 <rfalTransceiveBlockingTx>
    
    return ERR_BUSY;
 8007bea:	2302      	movs	r3, #2
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd90      	pop	{r4, r7, pc}
 8007bf4:	20000628 	.word	0x20000628
 8007bf8:	4d542005 	.word	0x4d542005

08007bfc <rfalIsoDepRATS>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepRATS( rfalIsoDepFSxI FSDI, uint8_t DID, rfalIsoDepAts *ats , uint8_t *atsLen)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	@ 0x28
 8007c00:	af04      	add	r7, sp, #16
 8007c02:	60ba      	str	r2, [r7, #8]
 8007c04:	607b      	str	r3, [r7, #4]
 8007c06:	4603      	mov	r3, r0
 8007c08:	73fb      	strb	r3, [r7, #15]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	73bb      	strb	r3, [r7, #14]
    uint16_t       rcvLen;
    ReturnCode     ret;
    rfalIsoDepRats ratsReq;
    
    if( ats == NULL )
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <rfalIsoDepRATS+0x1c>
    {
        return ERR_PARAM;
 8007c14:	2307      	movs	r3, #7
 8007c16:	e03c      	b.n	8007c92 <rfalIsoDepRATS+0x96>
    }
    
    /*******************************************************************************/
    /* Compose RATS */
    ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 8007c18:	23e0      	movs	r3, #224	@ 0xe0
 8007c1a:	743b      	strb	r3, [r7, #16]
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	011b      	lsls	r3, r3, #4
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	747b      	strb	r3, [r7, #17]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8007c30:	f107 0010 	add.w	r0, r7, #16
 8007c34:	4b19      	ldr	r3, [pc, #100]	@ (8007c9c <rfalIsoDepRATS+0xa0>)
 8007c36:	9302      	str	r3, [sp, #8]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9301      	str	r3, [sp, #4]
 8007c3c:	f107 0314 	add.w	r3, r7, #20
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	2314      	movs	r3, #20
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	2102      	movs	r1, #2
 8007c48:	f007 f900 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	82fb      	strh	r3, [r7, #22]
    
    if( ret == ERR_NONE )
 8007c50:	8afb      	ldrh	r3, [r7, #22]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d115      	bne.n	8007c82 <rfalIsoDepRATS+0x86>
    {
        /* Check for valid ATS length  Digital 1.1  13.6.2.1 & 13.6.2.3 */
        if( (rcvLen < RFAL_ISODEP_ATS_MIN_LEN) || (rcvLen > RFAL_ISODEP_ATS_MAX_LEN) || (ats->TL != rcvLen) )
 8007c56:	8abb      	ldrh	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d008      	beq.n	8007c6e <rfalIsoDepRATS+0x72>
 8007c5c:	8abb      	ldrh	r3, [r7, #20]
 8007c5e:	2b14      	cmp	r3, #20
 8007c60:	d805      	bhi.n	8007c6e <rfalIsoDepRATS+0x72>
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	8abb      	ldrh	r3, [r7, #20]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d001      	beq.n	8007c72 <rfalIsoDepRATS+0x76>
        {
            return ERR_PROTO;
 8007c6e:	230b      	movs	r3, #11
 8007c70:	e00f      	b.n	8007c92 <rfalIsoDepRATS+0x96>
        }
        
        /* Assign our FSx, in case the a Deselect is send without Transceive */
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff f821 	bl	8006cbc <rfalIsoDepFSxI2FSx>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4b08      	ldr	r3, [pc, #32]	@ (8007ca0 <rfalIsoDepRATS+0xa4>)
 8007c80:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
    
    /* Check and assign if ATS length was requested (length also available on TL) */
    if( atsLen != NULL )
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <rfalIsoDepRATS+0x94>
    {
        *atsLen = (uint8_t)rcvLen;
 8007c88:	8abb      	ldrh	r3, [r7, #20]
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 8007c90:	8afb      	ldrh	r3, [r7, #22]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	00046780 	.word	0x00046780
 8007ca0:	20000628 	.word	0x20000628

08007ca4 <rfalIsoDepPPS>:


/*******************************************************************************/
ReturnCode rfalIsoDepPPS( uint8_t DID, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepPpsRes *ppsRes )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af04      	add	r7, sp, #16
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	4603      	mov	r3, r0
 8007cae:	71fb      	strb	r3, [r7, #7]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	71bb      	strb	r3, [r7, #6]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	717b      	strb	r3, [r7, #5]
    uint16_t         rcvLen;
    ReturnCode       ret;
    rfalIsoDepPpsReq ppsReq;
    
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <rfalIsoDepPPS+0x2c>
 8007cbe:	79bb      	ldrb	r3, [r7, #6]
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d805      	bhi.n	8007cd0 <rfalIsoDepPPS+0x2c>
 8007cc4:	797b      	ldrb	r3, [r7, #5]
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d802      	bhi.n	8007cd0 <rfalIsoDepPPS+0x2c>
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	2b0e      	cmp	r3, #14
 8007cce:	d901      	bls.n	8007cd4 <rfalIsoDepPPS+0x30>
    {
        return ERR_PARAM;
 8007cd0:	2307      	movs	r3, #7
 8007cd2:	e033      	b.n	8007d3c <rfalIsoDepPPS+0x98>
    }
    
    /*******************************************************************************/
    /* Compose PPS Request */
    ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	f003 030f 	and.w	r3, r3, #15
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	723b      	strb	r3, [r7, #8]
    ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8007ce4:	2311      	movs	r3, #17
 8007ce6:	727b      	strb	r3, [r7, #9]
    ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 8007ce8:	79bb      	ldrb	r3, [r7, #6]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	b25a      	sxtb	r2, r3
 8007cee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	b25b      	sxtb	r3, r3
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	72bb      	strb	r3, [r7, #10]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8007d00:	f107 0008 	add.w	r0, r7, #8
 8007d04:	4b0f      	ldr	r3, [pc, #60]	@ (8007d44 <rfalIsoDepPPS+0xa0>)
 8007d06:	9302      	str	r3, [sp, #8]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9301      	str	r3, [sp, #4]
 8007d0c:	f107 030c 	add.w	r3, r7, #12
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	2301      	movs	r3, #1
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	2103      	movs	r1, #3
 8007d18:	f007 f898 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	81fb      	strh	r3, [r7, #14]
    
    if( ret == ERR_NONE )
 8007d20:	89fb      	ldrh	r3, [r7, #14]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d109      	bne.n	8007d3a <rfalIsoDepPPS+0x96>
    {
        /* Check for valid PPS Response   */
        if( (rcvLen != RFAL_ISODEP_PPS_RES_LEN) || (ppsRes->PPSS != ppsReq.PPSS) )
 8007d26:	89bb      	ldrh	r3, [r7, #12]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d104      	bne.n	8007d36 <rfalIsoDepPPS+0x92>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781a      	ldrb	r2, [r3, #0]
 8007d30:	7a3b      	ldrb	r3, [r7, #8]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d001      	beq.n	8007d3a <rfalIsoDepPPS+0x96>
        {
            return ERR_PROTO;
 8007d36:	230b      	movs	r3, #11
 8007d38:	e000      	b.n	8007d3c <rfalIsoDepPPS+0x98>
        }
    }
    return ret;
 8007d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	00046780 	.word	0x00046780

08007d48 <rfalIsoDepATTRIB>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepATTRIB( const uint8_t* nfcid0, uint8_t PARAM1, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepFSxI FSDI, uint8_t PARAM3, uint8_t DID, const uint8_t* HLInfo, uint8_t HLInfoLen, uint32_t fwt, rfalIsoDepAttribRes *attribRes, uint8_t *attribResLen )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b092      	sub	sp, #72	@ 0x48
 8007d4c:	af04      	add	r7, sp, #16
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	4608      	mov	r0, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	70fb      	strb	r3, [r7, #3]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70bb      	strb	r3, [r7, #2]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	707b      	strb	r3, [r7, #1]
    uint16_t            rcvLen;
    ReturnCode          ret;
    rfalIsoDepAttribCmd attribCmd;
    
    
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8007d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00c      	beq.n	8007d82 <rfalIsoDepATTRIB+0x3a>
 8007d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <rfalIsoDepATTRIB+0x3a>
 8007d6e:	78bb      	ldrb	r3, [r7, #2]
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d806      	bhi.n	8007d82 <rfalIsoDepATTRIB+0x3a>
 8007d74:	787b      	ldrb	r3, [r7, #1]
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d803      	bhi.n	8007d82 <rfalIsoDepATTRIB+0x3a>
 8007d7a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8007d7e:	2b0e      	cmp	r3, #14
 8007d80:	d901      	bls.n	8007d86 <rfalIsoDepATTRIB+0x3e>
    {
        return ERR_NONE;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e065      	b.n	8007e52 <rfalIsoDepATTRIB+0x10a>
    }
    
    /*******************************************************************************/
    /* Compose ATTRIB command */
    attribCmd.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 8007d86:	231d      	movs	r3, #29
 8007d88:	723b      	strb	r3, [r7, #8]
    attribCmd.Param.PARAM1 = PARAM1;
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	737b      	strb	r3, [r7, #13]
    attribCmd.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8007d8e:	78bb      	ldrb	r3, [r7, #2]
 8007d90:	019b      	lsls	r3, r3, #6
 8007d92:	b25a      	sxtb	r2, r3
 8007d94:	787b      	ldrb	r3, [r7, #1]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	b25b      	sxtb	r3, r3
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	b25b      	sxtb	r3, r3
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f023 030f 	bic.w	r3, r3, #15
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	4313      	orrs	r3, r2
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	73bb      	strb	r3, [r7, #14]
    attribCmd.Param.PARAM3 = PARAM3;
 8007db6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007dba:	73fb      	strb	r3, [r7, #15]
    attribCmd.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 8007dbc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8007dc0:	f003 030f 	and.w	r3, r3, #15
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	743b      	strb	r3, [r7, #16]
    ST_MEMCPY(attribCmd.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f8c7 3009 	str.w	r3, [r7, #9]
    
    /* Append the Higher layer Info if provided */
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 8007dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d011      	beq.n	8007dfa <rfalIsoDepATTRIB+0xb2>
 8007dd6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00d      	beq.n	8007dfa <rfalIsoDepATTRIB+0xb2>
    {
        ST_MEMCPY(attribCmd.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 8007dde:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	bf28      	it	cs
 8007de6:	2320      	movcs	r3, #32
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	461a      	mov	r2, r3
 8007dec:	f107 0308 	add.w	r3, r7, #8
 8007df0:	3309      	adds	r3, #9
 8007df2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007df4:	4618      	mov	r0, r3
 8007df6:	f009 fbff 	bl	80115f8 <memcpy>
    }
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&attribCmd, (RFAL_ISODEP_ATTRIB_HDR_LEN + MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)attribRes, sizeof(rfalIsoDepAttribRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8007dfa:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	bf28      	it	cs
 8007e02:	2320      	movcs	r3, #32
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	3309      	adds	r3, #9
 8007e08:	b299      	uxth	r1, r3
 8007e0a:	f107 0008 	add.w	r0, r7, #8
 8007e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e10:	9302      	str	r3, [sp, #8]
 8007e12:	2300      	movs	r3, #0
 8007e14:	9301      	str	r3, [sp, #4]
 8007e16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	2321      	movs	r3, #33	@ 0x21
 8007e1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e20:	f007 f814 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 8007e24:	4603      	mov	r3, r0
 8007e26:	86fb      	strh	r3, [r7, #54]	@ 0x36
       
    *attribResLen = (uint8_t)rcvLen;
 8007e28:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e2e:	701a      	strb	r2, [r3, #0]
    
    if( ret == ERR_NONE )
 8007e30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10c      	bne.n	8007e50 <rfalIsoDepATTRIB+0x108>
    {
        /* Check a for valid ATTRIB Response   Digital 1.1  15.6.2.1 */
        if( (rcvLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((attribRes->mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID) )
 8007e36:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d007      	beq.n	8007e4c <rfalIsoDepATTRIB+0x104>
 8007e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f003 020f 	and.w	r2, r3, #15
 8007e44:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d001      	beq.n	8007e50 <rfalIsoDepATTRIB+0x108>
        {
           return ERR_PROTO;
 8007e4c:	230b      	movs	r3, #11
 8007e4e:	e000      	b.n	8007e52 <rfalIsoDepATTRIB+0x10a>
        }
    }
   
   return ret;
 8007e50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3738      	adds	r7, #56	@ 0x38
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <rfalIsoDepPollAHandleActivation>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepPollAHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, rfalIsoDepDevice *isoDepDev )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	4603      	mov	r3, r0
 8007e66:	71fb      	strb	r3, [r7, #7]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	71bb      	strb	r3, [r7, #6]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	717b      	strb	r3, [r7, #5]
    uint8_t          RATSretries;
    uint8_t          msgIt;
    ReturnCode       ret;
    rfalIsoDepPpsRes ppsRes;
    
    if( isoDepDev == NULL )
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <rfalIsoDepPollAHandleActivation+0x1e>
    {
        return ERR_PARAM;
 8007e76:	2307      	movs	r3, #7
 8007e78:	e143      	b.n	8008102 <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /* Enable EMD handling according   Digital 1.1  4.1.1.1 ; EMVCo 2.6  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8007e7a:	2002      	movs	r0, #2
 8007e7c:	f006 fd4c 	bl	800e918 <rfalSetErrorHandling>
    
    RATSretries = gIsoDep.maxRetriesRATS;
 8007e80:	4ba2      	ldr	r3, [pc, #648]	@ (800810c <rfalIsoDepPollAHandleActivation+0x2b0>)
 8007e82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e86:	73fb      	strb	r3, [r7, #15]
    /***************************************************************************/
    /* Send RATS                                                               */
    do
    {
        /* Digital 1.1 13.7.1.1 and ISO 14443-4 5.6.1.1 - Upon a failed RATS it may be retransmited [0,1] */
        ret = rfalIsoDepRATS( FSDI, DID, &isoDepDev->activation.A.Listener.ATS, &isoDepDev->activation.A.Listener.ATSLen );
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	3314      	adds	r3, #20
 8007e8e:	79b9      	ldrb	r1, [r7, #6]
 8007e90:	79f8      	ldrb	r0, [r7, #7]
 8007e92:	f7ff feb3 	bl	8007bfc <rfalIsoDepRATS>
 8007e96:	4603      	mov	r3, r0
 8007e98:	81bb      	strh	r3, [r7, #12]
        
        /* EMVCo 2.6  9.6.1.1 & 9.6.1.2  If a timeout error is detected retransmit, on transmission error abort */
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 8007e9a:	4b9c      	ldr	r3, [pc, #624]	@ (800810c <rfalIsoDepPollAHandleActivation+0x2b0>)
 8007e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d105      	bne.n	8007eb0 <rfalIsoDepPollAHandleActivation+0x54>
 8007ea4:	89bb      	ldrh	r3, [r7, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <rfalIsoDepPollAHandleActivation+0x54>
 8007eaa:	89bb      	ldrh	r3, [r7, #12]
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d10b      	bne.n	8007ec8 <rfalIsoDepPollAHandleActivation+0x6c>
        {
            break;
        }
        
        platformDelay(1);
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	f7f9 fbfb 	bl	80016ac <HAL_Delay>
    }
    while( ((RATSretries--) != 0U) && (ret != ERR_NONE) );
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	1e5a      	subs	r2, r3, #1
 8007eba:	73fa      	strb	r2, [r7, #15]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d004      	beq.n	8007eca <rfalIsoDepPollAHandleActivation+0x6e>
 8007ec0:	89bb      	ldrh	r3, [r7, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e0      	bne.n	8007e88 <rfalIsoDepPollAHandleActivation+0x2c>
 8007ec6:	e000      	b.n	8007eca <rfalIsoDepPollAHandleActivation+0x6e>
            break;
 8007ec8:	bf00      	nop
    
    
    /* Switch between NFC Forum and ISO14443-4 behaviour #595
     *   ISO14443-4  5.6.1  If RATS fails, a Deactivation sequence should be performed as defined on clause 8  
     *   Activity 1.1  9.6  Device Deactivation Activity is to be only performed when there's an active device */
    if( ret != ERR_NONE )
 8007eca:	89bb      	ldrh	r3, [r7, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d008      	beq.n	8007ee2 <rfalIsoDepPollAHandleActivation+0x86>
    {
        if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 8007ed0:	4b8e      	ldr	r3, [pc, #568]	@ (800810c <rfalIsoDepPollAHandleActivation+0x2b0>)
 8007ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d101      	bne.n	8007ede <rfalIsoDepPollAHandleActivation+0x82>
        {
            rfalIsoDepDeselect();
 8007eda:	f7fe fe7f 	bl	8006bdc <rfalIsoDepDeselect>
        }
        return ret;
 8007ede:	89bb      	ldrh	r3, [r7, #12]
 8007ee0:	e10f      	b.n	8008102 <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /*******************************************************************************/
    /* Process ATS Response                                                        */
    isoDepDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    isoDepDev->info.SFGI = 0;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2200      	movs	r2, #0
 8007eee:	639a      	str	r2, [r3, #56]	@ 0x38
    isoDepDev->info.MBL  = 0;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    isoDepDev->info.DSI  = RFAL_BR_106;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    isoDepDev->info.DRI  = RFAL_BR_106;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    isoDepDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    
    
    /*******************************************************************************/
    /* Check for ATS optional fields                                               */
    if( isoDepDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d973      	bls.n	8007ffe <rfalIsoDepPollAHandleActivation+0x1a2>
    {
        msgIt = RFAL_ISODEP_ATS_MIN_LEN;
 8007f16:	2301      	movs	r3, #1
 8007f18:	73bb      	strb	r3, [r7, #14]
        
        /* Format byte T0 is optional, if present assign FSDI */
        isoDepDev->info.FSxI = (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        
        /* T0 has already been processed, always the same position */
        msgIt++; 
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	73bb      	strb	r3, [r7, #14]
        
        /* Check if TA is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	f003 0310 	and.w	r3, r3, #16
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00d      	beq.n	8007f58 <rfalIsoDepPollAHandleActivation+0xfc>
        {
            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++], &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	1c59      	adds	r1, r3, #1
 8007f42:	73b9      	strb	r1, [r7, #14]
 8007f44:	4413      	add	r3, r2
 8007f46:	7819      	ldrb	r1, [r3, #0]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	3349      	adds	r3, #73	@ 0x49
 8007f52:	7978      	ldrb	r0, [r7, #5]
 8007f54:	f000 f9f6 	bl	8008344 <rfalIsoDepCalcBitRate>
        }
        
        /* Check if TB is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	785b      	ldrb	r3, [r3, #1]
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d018      	beq.n	8007f96 <rfalIsoDepPollAHandleActivation+0x13a>
        {
            isoDepDev->info.SFGI  = ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++];
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	1c59      	adds	r1, r3, #1
 8007f6a:	73b9      	strb	r1, [r7, #14]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	461a      	mov	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	639a      	str	r2, [r3, #56]	@ 0x38
            isoDepDev->info.FWI   = (uint8_t)((isoDepDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7a:	091b      	lsrs	r3, r3, #4
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f003 030f 	and.w	r3, r3, #15
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            isoDepDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8e:	f003 020f 	and.w	r2, r3, #15
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        
        /* Check if TC is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d02d      	beq.n	8007ffe <rfalIsoDepPollAHandleActivation+0x1a2>
        {
            /* Check for Protocol features support */
            /* Advanced protocol features defined on Digital 1.0 Table 69, removed after */
            isoDepDev->info.supAdFt = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	091b      	lsrs	r3, r3, #4
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bf14      	ite	ne
 8007fb4:	2301      	movne	r3, #1
 8007fb6:	2300      	moveq	r3, #0
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
            isoDepDev->info.supDID  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	bf14      	ite	ne
 8007fd2:	2301      	movne	r3, #1
 8007fd4:	2300      	moveq	r3, #0
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            isoDepDev->info.supNAD  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	1c59      	adds	r1, r3, #1
 8007fe4:	73b9      	strb	r1, [r7, #14]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bf14      	ite	ne
 8007ff2:	2301      	movne	r3, #1
 8007ff4:	2300      	moveq	r3, #0
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        }
    }
    
    isoDepDev->info.FSx  = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008004:	4618      	mov	r0, r3
 8008006:	f7fe fe59 	bl	8006cbc <rfalIsoDepFSxI2FSx>
 800800a:	4603      	mov	r3, r0
 800800c:	461a      	mov	r2, r3
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    
    isoDepDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008018:	b2db      	uxtb	r3, r3
 800801a:	4618      	mov	r0, r3
 800801c:	f000 fa36 	bl	800848c <rfalIsoDepSFGI2SFGT>
 8008020:	4602      	mov	r2, r0
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	63da      	str	r2, [r3, #60]	@ 0x3c
    isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800802a:	b29b      	uxth	r3, r3
 800802c:	4618      	mov	r0, r3
 800802e:	f7fd fc4f 	bl	80058d0 <timerCalculateTimer>
 8008032:	4603      	mov	r3, r0
 8008034:	4a35      	ldr	r2, [pc, #212]	@ (800810c <rfalIsoDepPollAHandleActivation+0x2b0>)
 8008036:	63d3      	str	r3, [r2, #60]	@ 0x3c
    
    isoDepDev->info.FWT  = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800803e:	4618      	mov	r0, r3
 8008040:	f7fe fe1c 	bl	8006c7c <rfalIsoDepFWI2FWT>
 8008044:	4602      	mov	r2, r0
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	631a      	str	r2, [r3, #48]	@ 0x30
    isoDepDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8008050:	635a      	str	r2, [r3, #52]	@ 0x34
    
    isoDepDev->info.DID = ( (isoDepDev->info.supDID) ? DID : RFAL_ISODEP_NO_DID);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <rfalIsoDepPollAHandleActivation+0x204>
 800805c:	79ba      	ldrb	r2, [r7, #6]
 800805e:	e000      	b.n	8008062 <rfalIsoDepPollAHandleActivation+0x206>
 8008060:	2200      	movs	r2, #0
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    isoDepDev->info.NAD = RFAL_ISODEP_NO_NAD;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	22ff      	movs	r2, #255	@ 0xff
 800806c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    
    
    /*******************************************************************************/
    /* If higher bit rates are supported by both devices, send PPS                 */
    if( (isoDepDev->info.DSI != RFAL_BR_106) || (isoDepDev->info.DRI != RFAL_BR_106) )
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8008076:	2b00      	cmp	r3, #0
 8008078:	d104      	bne.n	8008084 <rfalIsoDepPollAHandleActivation+0x228>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008080:	2b00      	cmp	r3, #0
 8008082:	d030      	beq.n	80080e6 <rfalIsoDepPollAHandleActivation+0x28a>
    {
        /* Wait until SFGT has been fulfilled */
        while( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) ) { /* MISRA 15.6: mandatory brackets */ };
 8008084:	bf00      	nop
 8008086:	4b21      	ldr	r3, [pc, #132]	@ (800810c <rfalIsoDepPollAHandleActivation+0x2b0>)
 8008088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800808a:	4618      	mov	r0, r3
 800808c:	f7fd fc2e 	bl	80058ec <timerIsExpired>
 8008090:	4603      	mov	r3, r0
 8008092:	f083 0301 	eor.w	r3, r3, #1
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f4      	bne.n	8008086 <rfalIsoDepPollAHandleActivation+0x22a>
        
        ret = rfalIsoDepPPS( isoDepDev->info.DID, isoDepDev->info.DSI, isoDepDev->info.DRI, &ppsRes );
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	f893 004a 	ldrb.w	r0, [r3, #74]	@ 0x4a
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 80080ae:	f107 0308 	add.w	r3, r7, #8
 80080b2:	f7ff fdf7 	bl	8007ca4 <rfalIsoDepPPS>
 80080b6:	4603      	mov	r3, r0
 80080b8:	81bb      	strh	r3, [r7, #12]
        
        if( ret == ERR_NONE )
 80080ba:	89bb      	ldrh	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <rfalIsoDepPollAHandleActivation+0x27a>
        {
            /* DSI code the divisor from PICC to PCD */
            /* DRI code the divisor from PCD to PICC */
            rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f006 f9b0 	bl	800e434 <rfalSetBitRate>
 80080d4:	e007      	b.n	80080e6 <rfalIsoDepPollAHandleActivation+0x28a>
        }
        else
        {
            isoDepDev->info.DSI = RFAL_BR_106;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            isoDepDev->info.DRI = RFAL_BR_106;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
        }
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80080ec:	4b07      	ldr	r3, [pc, #28]	@ (800810c <rfalIsoDepPollAHandleActivation+0x2b0>)
 80080ee:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe fde2 	bl	8006cbc <rfalIsoDepFSxI2FSx>
 80080f8:	4603      	mov	r3, r0
 80080fa:	461a      	mov	r2, r3
 80080fc:	4b03      	ldr	r3, [pc, #12]	@ (800810c <rfalIsoDepPollAHandleActivation+0x2b0>)
 80080fe:	845a      	strh	r2, [r3, #34]	@ 0x22
    
    return ERR_NONE;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20000628 	.word	0x20000628

08008110 <rfalIsoDepPollBHandleActivation>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepPollBHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, uint8_t PARAM1, const rfalNfcbListenDevice *nfcbDev, const uint8_t* HLInfo, uint8_t HLInfoLen, rfalIsoDepDevice *isoDepDev )
{
 8008110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008112:	b08d      	sub	sp, #52	@ 0x34
 8008114:	af08      	add	r7, sp, #32
 8008116:	4604      	mov	r4, r0
 8008118:	4608      	mov	r0, r1
 800811a:	4611      	mov	r1, r2
 800811c:	461a      	mov	r2, r3
 800811e:	4623      	mov	r3, r4
 8008120:	71fb      	strb	r3, [r7, #7]
 8008122:	4603      	mov	r3, r0
 8008124:	71bb      	strb	r3, [r7, #6]
 8008126:	460b      	mov	r3, r1
 8008128:	717b      	strb	r3, [r7, #5]
 800812a:	4613      	mov	r3, r2
 800812c:	713b      	strb	r3, [r7, #4]
    ReturnCode ret;
    uint8_t    mbli;
    
    /***************************************************************************/
    /* Initialize ISO-DEP Device with info from SENSB_RES                      */
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 800812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008130:	7b1b      	ldrb	r3, [r3, #12]
 8008132:	091b      	lsrs	r3, r3, #4
 8008134:	b2da      	uxtb	r2, r3
 8008136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008138:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    isoDepDev->info.FWT     = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 800813c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fd9a 	bl	8006c7c <rfalIsoDepFWI2FWT>
 8008148:	4602      	mov	r2, r0
 800814a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814c:	631a      	str	r2, [r3, #48]	@ 0x30
    isoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 800814e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008150:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8008154:	635a      	str	r2, [r3, #52]	@ 0x34
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 8008156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008158:	7b5b      	ldrb	r3, [r3, #13]
 800815a:	091b      	lsrs	r3, r3, #4
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 020f 	and.w	r2, r3, #15
 8008162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008164:	639a      	str	r2, [r3, #56]	@ 0x38
    isoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 8008166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816a:	b2db      	uxtb	r3, r3
 800816c:	4618      	mov	r0, r3
 800816e:	f000 f98d 	bl	800848c <rfalIsoDepSFGI2SFGT>
 8008172:	4602      	mov	r2, r0
 8008174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008176:	63da      	str	r2, [r3, #60]	@ 0x3c
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 8008178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817a:	7adb      	ldrb	r3, [r3, #11]
 800817c:	091b      	lsrs	r3, r3, #4
 800817e:	b2da      	uxtb	r2, r3
 8008180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    isoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 8008186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008188:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe fd95 	bl	8006cbc <rfalIsoDepFSxI2FSx>
 8008192:	4603      	mov	r3, r0
 8008194:	461a      	mov	r2, r3
 8008196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008198:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    isoDepDev->info.DID     = DID;
 800819c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819e:	79ba      	ldrb	r2, [r7, #6]
 80081a0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 80081a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a6:	7b1b      	ldrb	r3, [r3, #12]
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	bf14      	ite	ne
 80081b0:	2301      	movne	r3, #1
 80081b2:	2300      	moveq	r3, #0
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    isoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 80081bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081be:	7b1b      	ldrb	r3, [r3, #12]
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bf14      	ite	ne
 80081ca:	2301      	movne	r3, #1
 80081cc:	2300      	moveq	r3, #0
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    
    
    /* Check if DID requested is supported by PICC */
    if( (DID != RFAL_ISODEP_NO_DID) && (!isoDepDev->info.supDID) )
 80081d6:	79bb      	ldrb	r3, [r7, #6]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <rfalIsoDepPollBHandleActivation+0xe0>
 80081dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081de:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80081e2:	f083 0301 	eor.w	r3, r3, #1
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <rfalIsoDepPollBHandleActivation+0xe0>
    {
        return ERR_PARAM;
 80081ec:	2307      	movs	r3, #7
 80081ee:	e0a3      	b.n	8008338 <rfalIsoDepPollBHandleActivation+0x228>
    }
    
    /* Enable EMD handling according   Digital 2.1  4.1.1.1 ; EMVCo 3.0  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 80081f0:	2002      	movs	r0, #2
 80081f2:	f006 fb91 	bl	800e918 <rfalSetErrorHandling>
    
    /***************************************************************************/
    /* Set FDT Poll to be used on upcoming communications                      */
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 80081f6:	4b52      	ldr	r3, [pc, #328]	@ (8008340 <rfalIsoDepPollBHandleActivation+0x230>)
 80081f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d104      	bne.n	800820a <rfalIsoDepPollBHandleActivation+0xfa>
    {
        /* Disregard Minimum TR2 returned by PICC, always use FDTb MIN   EMVCo 3.0  6.3.2.10  */
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 8008200:	f641 207c 	movw	r0, #6780	@ 0x1a7c
 8008204:	f006 fb98 	bl	800e938 <rfalSetFDTPoll>
 8008208:	e00d      	b.n	8008226 <rfalIsoDepPollBHandleActivation+0x116>
    }
    else
    {
        /* Apply minimum TR2 from SENSB_RES   Digital 2.1  7.6.2.23 */
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 800820a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820c:	7adb      	ldrb	r3, [r3, #11]
 800820e:	085b      	lsrs	r3, r3, #1
 8008210:	b2db      	uxtb	r3, r3
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	b2db      	uxtb	r3, r3
 8008218:	4618      	mov	r0, r3
 800821a:	f005 f877 	bl	800d30c <rfalNfcbTR2ToFDT>
 800821e:	4603      	mov	r3, r0
 8008220:	4618      	mov	r0, r3
 8008222:	f006 fb89 	bl	800e938 <rfalSetFDTPoll>
    }
    
    
    /* Calculate max Bit Rate */
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 8008226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008228:	7a99      	ldrb	r1, [r3, #10]
 800822a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800822c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8008230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008232:	3349      	adds	r3, #73	@ 0x49
 8008234:	7978      	ldrb	r0, [r7, #5]
 8008236:	f000 f885 	bl	8008344 <rfalIsoDepCalcBitRate>
    
    /***************************************************************************/
    /* Send ATTRIB Command                                                     */
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	1c9d      	adds	r5, r3, #2
                           (((nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_ADC_ADV_FEATURE_MASK) != 0U) ? PARAM1 : RFAL_ISODEP_ATTRIB_REQ_PARAM1_DEFAULT),
 800823e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008240:	7b1b      	ldrb	r3, [r3, #12]
 8008242:	f003 0308 	and.w	r3, r3, #8
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <rfalIsoDepPollBHandleActivation+0x13e>
 800824a:	7939      	ldrb	r1, [r7, #4]
 800824c:	e000      	b.n	8008250 <rfalIsoDepPollBHandleActivation+0x140>
 800824e:	2100      	movs	r1, #0
 8008250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008252:	f893 6048 	ldrb.w	r6, [r3, #72]	@ 0x48
 8008256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008258:	f893 c049 	ldrb.w	ip, [r3, #73]	@ 0x49
                           isoDepDev->info.DSI,
                           isoDepDev->info.DRI,
                           FSDI,
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 800825c:	4b38      	ldr	r3, [pc, #224]	@ (8008340 <rfalIsoDepPollBHandleActivation+0x230>)
 800825e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8008262:	2b01      	cmp	r3, #1
 8008264:	d005      	beq.n	8008272 <rfalIsoDepPollBHandleActivation+0x162>
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 8008266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008268:	7adb      	ldrb	r3, [r3, #11]
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	b2db      	uxtb	r3, r3
 8008270:	e000      	b.n	8008274 <rfalIsoDepPollBHandleActivation+0x164>
 8008272:	2301      	movs	r3, #1
                           DID,
                           HLInfo,
                           HLInfoLen,
                           (isoDepDev->info.FWT + isoDepDev->info.dFWT),
 8008274:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008276:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8008278:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800827a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800827c:	4402      	add	r2, r0
 800827e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008280:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8008282:	3421      	adds	r4, #33	@ 0x21
 8008284:	9407      	str	r4, [sp, #28]
 8008286:	9006      	str	r0, [sp, #24]
 8008288:	9205      	str	r2, [sp, #20]
 800828a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800828e:	9204      	str	r2, [sp, #16]
 8008290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008292:	9203      	str	r2, [sp, #12]
 8008294:	79ba      	ldrb	r2, [r7, #6]
 8008296:	9202      	str	r2, [sp, #8]
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	4663      	mov	r3, ip
 80082a0:	4632      	mov	r2, r6
 80082a2:	4628      	mov	r0, r5
 80082a4:	f7ff fd50 	bl	8007d48 <rfalIsoDepATTRIB>
 80082a8:	4603      	mov	r3, r0
 80082aa:	81fb      	strh	r3, [r7, #14]
                           &isoDepDev->activation.B.Listener.ATTRIB_RESLen
                         );
    
    /***************************************************************************/
    /* Process ATTRIB Response                                                 */
    if( ret == ERR_NONE )
 80082ac:	89fb      	ldrh	r3, [r7, #14]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d12c      	bne.n	800830c <rfalIsoDepPollBHandleActivation+0x1fc>
    {
        /* Digital 1.1 14.6.2.3 - Check if received DID match */
        if( (isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID )
 80082b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f003 020f 	and.w	r2, r3, #15
 80082ba:	79bb      	ldrb	r3, [r7, #6]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d001      	beq.n	80082c4 <rfalIsoDepPollBHandleActivation+0x1b4>
        {
            return ERR_PROTO;
 80082c0:	230b      	movs	r3, #11
 80082c2:	e039      	b.n	8008338 <rfalIsoDepPollBHandleActivation+0x228>
        }
                
        /* Retrieve MBLI and calculate new FDS/MBL (Maximum Buffer Length) */
        mbli = ((isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 80082c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	091b      	lsrs	r3, r3, #4
 80082ca:	737b      	strb	r3, [r7, #13]
        if( mbli > 0U)
 80082cc:	7b7b      	ldrb	r3, [r7, #13]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d008      	beq.n	80082e4 <rfalIsoDepPollBHandleActivation+0x1d4>
        {
            /* Digital 1.1  14.6.2  Calculate Maximum Buffer Length MBL = FSC x 2^(MBLI-1) */
            isoDepDev->info.MBL = (isoDepDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 80082d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80082d8:	461a      	mov	r2, r3
 80082da:	7b7b      	ldrb	r3, [r7, #13]
 80082dc:	3b01      	subs	r3, #1
 80082de:	409a      	lsls	r2, r3
 80082e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e2:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* DSI code the divisor from PICC to PCD */
        /* DRI code the divisor from PCD to PICC */
        rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 80082e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e6:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 80082ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80082f0:	4619      	mov	r1, r3
 80082f2:	4610      	mov	r0, r2
 80082f4:	f006 f89e 	bl	800e434 <rfalSetBitRate>
        {
            /* REMARK: SoF EoF TR0 and TR1 are not passed on to RF layer */
        }
        
        /* Start the SFGT timer */
        isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 80082f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fd fae6 	bl	80058d0 <timerCalculateTimer>
 8008304:	4603      	mov	r3, r0
 8008306:	4a0e      	ldr	r2, [pc, #56]	@ (8008340 <rfalIsoDepPollBHandleActivation+0x230>)
 8008308:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800830a:	e007      	b.n	800831c <rfalIsoDepPollBHandleActivation+0x20c>
    }
    else
    {
        isoDepDev->info.DSI = RFAL_BR_106;
 800830c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        isoDepDev->info.DRI = RFAL_BR_106;
 8008314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 800831c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8008322:	4b07      	ldr	r3, [pc, #28]	@ (8008340 <rfalIsoDepPollBHandleActivation+0x230>)
 8008324:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fcc7 	bl	8006cbc <rfalIsoDepFSxI2FSx>
 800832e:	4603      	mov	r3, r0
 8008330:	461a      	mov	r2, r3
 8008332:	4b03      	ldr	r3, [pc, #12]	@ (8008340 <rfalIsoDepPollBHandleActivation+0x230>)
 8008334:	845a      	strh	r2, [r3, #34]	@ 0x22
    
    return ret;
 8008336:	89fb      	ldrh	r3, [r7, #14]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008340:	20000628 	.word	0x20000628

08008344 <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	60ba      	str	r2, [r7, #8]
 800834c:	607b      	str	r3, [r7, #4]
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]
 8008352:	460b      	mov	r3, r1
 8008354:	73bb      	strb	r3, [r7, #14]
    uint8_t     dsiMask;
    int8_t      i;
    bool        bitrateFound;
    rfalBitRate curMaxBR;
    
    curMaxBR = maxAllowedBR;
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	757b      	strb	r3, [r7, #21]
    
    do
    {
        bitrateFound = true;
 800835a:	2301      	movs	r3, #1
 800835c:	75bb      	strb	r3, [r7, #22]
        
        (*dsi) = RFAL_BR_106;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2200      	movs	r2, #0
 8008362:	701a      	strb	r2, [r3, #0]
        (*dri) = RFAL_BR_106;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
        
        /* Digital 1.0  5.6.2.5 & 11.6.2.14: A received RFU value of b4 = 1b MUST be interpreted as if b7 to b1 ? 0000000b (only 106 kbits/s in both direction) */
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	f040 8083 	bne.w	800847e <rfalIsoDepCalcBitRate+0x13a>
 8008378:	7d7b      	ldrb	r3, [r7, #21]
 800837a:	2b03      	cmp	r3, #3
 800837c:	d87f      	bhi.n	800847e <rfalIsoDepCalcBitRate+0x13a>
            return;
        }
        
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008384:	753b      	strb	r3, [r7, #20]
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 8008386:	2302      	movs	r3, #2
 8008388:	75fb      	strb	r3, [r7, #23]
 800838a:	e019      	b.n	80083c0 <rfalIsoDepCalcBitRate+0x7c>
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800838c:	7d3a      	ldrb	r2, [r7, #20]
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	4619      	mov	r1, r3
 8008392:	2310      	movs	r3, #16
 8008394:	408b      	lsls	r3, r1
 8008396:	4013      	ands	r3, r2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00b      	beq.n	80083b4 <rfalIsoDepCalcBitRate+0x70>
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	7d7b      	ldrb	r3, [r7, #21]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d806      	bhi.n	80083b4 <rfalIsoDepCalcBitRate+0x70>
            {
                uint8_t newdsi = ((uint8_t) i) + 1U;
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	3301      	adds	r3, #1
 80083aa:	74fb      	strb	r3, [r7, #19]
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	7cfa      	ldrb	r2, [r7, #19]
 80083b0:	701a      	strb	r2, [r3, #0]
                break;
 80083b2:	e009      	b.n	80083c8 <rfalIsoDepCalcBitRate+0x84>
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 80083b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	75fb      	strb	r3, [r7, #23]
 80083c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dae1      	bge.n	800838c <rfalIsoDepCalcBitRate+0x48>
            }
        }
        
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	74bb      	strb	r3, [r7, #18]
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 80083d0:	2302      	movs	r3, #2
 80083d2:	75fb      	strb	r3, [r7, #23]
 80083d4:	e018      	b.n	8008408 <rfalIsoDepCalcBitRate+0xc4>
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80083d6:	7cbb      	ldrb	r3, [r7, #18]
 80083d8:	7dfa      	ldrb	r2, [r7, #23]
 80083da:	40d3      	lsrs	r3, r2
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <rfalIsoDepCalcBitRate+0xb8>
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	7d7b      	ldrb	r3, [r7, #21]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d806      	bhi.n	80083fc <rfalIsoDepCalcBitRate+0xb8>
            {
                uint8_t newdri = ((uint8_t) i) + 1U;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	3301      	adds	r3, #1
 80083f2:	747b      	strb	r3, [r7, #17]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	7c7a      	ldrb	r2, [r7, #17]
 80083f8:	701a      	strb	r2, [r3, #0]
                break;
 80083fa:	e009      	b.n	8008410 <rfalIsoDepCalcBitRate+0xcc>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 80083fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008400:	b2db      	uxtb	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	b2db      	uxtb	r3, r3
 8008406:	75fb      	strb	r3, [r7, #23]
 8008408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800840c:	2b00      	cmp	r3, #0
 800840e:	dae2      	bge.n	80083d6 <rfalIsoDepCalcBitRate+0x92>
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 8008410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008414:	2b00      	cmp	r3, #0
 8008416:	da2a      	bge.n	800846e <rfalIsoDepCalcBitRate+0x12a>
        {   
            (*dsi) = MIN((*dsi), (*dri));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	781a      	ldrb	r2, [r3, #0]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	4293      	cmp	r3, r2
 8008422:	bf28      	it	cs
 8008424:	4613      	movcs	r3, r2
 8008426:	b2da      	uxtb	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	701a      	strb	r2, [r3, #0]
            (*dri) = (*dsi);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	781a      	ldrb	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	701a      	strb	r2, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d018      	beq.n	800846e <rfalIsoDepCalcBitRate+0x12a>
 800843c:	7d3a      	ldrb	r2, [r7, #20]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	3b01      	subs	r3, #1
 8008444:	2110      	movs	r1, #16
 8008446:	fa01 f303 	lsl.w	r3, r1, r3
 800844a:	4013      	ands	r3, r2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d009      	beq.n	8008464 <rfalIsoDepCalcBitRate+0x120>
 8008450:	7cba      	ldrb	r2, [r7, #18]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	3b01      	subs	r3, #1
 8008458:	fa22 f303 	lsr.w	r3, r2, r3
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b00      	cmp	r3, #0
 8008462:	d104      	bne.n	800846e <rfalIsoDepCalcBitRate+0x12a>
            {
                bitrateFound = false;
 8008464:	2300      	movs	r3, #0
 8008466:	75bb      	strb	r3, [r7, #22]
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	757b      	strb	r3, [r7, #21]
            }
        }
    } while (!(bitrateFound));
 800846e:	7dbb      	ldrb	r3, [r7, #22]
 8008470:	f083 0301 	eor.w	r3, r3, #1
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	f47f af6f 	bne.w	800835a <rfalIsoDepCalcBitRate+0x16>
 800847c:	e000      	b.n	8008480 <rfalIsoDepCalcBitRate+0x13c>
            return;
 800847e:	bf00      	nop
    
}
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
	...

0800848c <rfalIsoDepSFGI2SFGT>:

/*******************************************************************************/
static uint32_t rfalIsoDepSFGI2SFGT( uint8_t sfgi )
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	71fb      	strb	r3, [r7, #7]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	72fb      	strb	r3, [r7, #11]
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 800849a:	7afb      	ldrb	r3, [r7, #11]
 800849c:	2b0e      	cmp	r3, #14
 800849e:	d901      	bls.n	80084a4 <rfalIsoDepSFGI2SFGT+0x18>
    {
        tmpSFGI = ISODEP_SFGI_MIN;
 80084a0:	2300      	movs	r3, #0
 80084a2:	72fb      	strb	r3, [r7, #11]
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
 80084a4:	7afb      	ldrb	r3, [r7, #11]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00b      	beq.n	80084c2 <rfalIsoDepSFGI2SFGT+0x36>
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80084b0:	409a      	lsls	r2, r3
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80084b8:	fa01 f303 	lsl.w	r3, r1, r3
 80084bc:	4413      	add	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	e002      	b.n	80084c8 <rfalIsoDepSFGI2SFGT+0x3c>
    }
    /* Otherwise use FDTPoll min Digital  1.1  13.8.2.3*/
    else
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 80084c2:	f641 237c 	movw	r3, #6780	@ 0x1a7c
 80084c6:	60fb      	str	r3, [r7, #12]
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4a05      	ldr	r2, [pc, #20]	@ (80084e0 <rfalIsoDepSFGI2SFGT+0x54>)
 80084cc:	fba2 2303 	umull	r2, r3, r2, r3
 80084d0:	0b1b      	lsrs	r3, r3, #12
 80084d2:	3301      	adds	r3, #1
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	4d542005 	.word	0x4d542005

080084e4 <rfalNfcInitialize>:
#endif /* RFAL_FEATURE_LISTEN_MODE*/


/*******************************************************************************/
ReturnCode rfalNfcInitialize( void )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 80084ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008518 <rfalNfcInitialize+0x34>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	701a      	strb	r2, [r3, #0]
    
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 80084f0:	f7fd fa12 	bl	8005918 <rfalAnalogConfigInitialize>
    EXIT_ON_ERR( err, rfalInitialize() );      /* Initialize RFAL */
 80084f4:	f005 fde8 	bl	800e0c8 <rfalInitialize>
 80084f8:	4603      	mov	r3, r0
 80084fa:	80fb      	strh	r3, [r7, #6]
 80084fc:	88fb      	ldrh	r3, [r7, #6]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <rfalNfcInitialize+0x22>
 8008502:	88fb      	ldrh	r3, [r7, #6]
 8008504:	e003      	b.n	800850e <rfalNfcInitialize+0x2a>

    gNfcDev.state = RFAL_NFC_STATE_IDLE;         /* Go to initialized */
 8008506:	4b04      	ldr	r3, [pc, #16]	@ (8008518 <rfalNfcInitialize+0x34>)
 8008508:	2201      	movs	r2, #1
 800850a:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	200006b0 	.word	0x200006b0

0800851c <rfalNfcDiscover>:

/*******************************************************************************/
ReturnCode rfalNfcDiscover( const rfalNfcDiscoverParam *disParams )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
    /* Check if initialization has been performed */
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 8008524:	4b42      	ldr	r3, [pc, #264]	@ (8008630 <rfalNfcDiscover+0x114>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d001      	beq.n	8008530 <rfalNfcDiscover+0x14>
    {
        return ERR_WRONG_STATE;
 800852c:	2321      	movs	r3, #33	@ 0x21
 800852e:	e07a      	b.n	8008626 <rfalNfcDiscover+0x10a>
    }
    
    /* Check valid parameters */
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d025      	beq.n	8008582 <rfalNfcDiscover+0x66>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	799b      	ldrb	r3, [r3, #6]
 800853a:	2b05      	cmp	r3, #5
 800853c:	d821      	bhi.n	8008582 <rfalNfcDiscover+0x66>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	799b      	ldrb	r3, [r3, #6]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d01d      	beq.n	8008582 <rfalNfcDiscover+0x66>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	885b      	ldrh	r3, [r3, #2]
 800854a:	f003 0304 	and.w	r3, r3, #4
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 800854e:	2b00      	cmp	r3, #0
 8008550:	d007      	beq.n	8008562 <rfalNfcDiscover+0x46>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	79db      	ldrb	r3, [r3, #7]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d003      	beq.n	8008562 <rfalNfcDiscover+0x46>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	79db      	ldrb	r3, [r3, #7]
 800855e:	2b02      	cmp	r3, #2
 8008560:	d10f      	bne.n	8008582 <rfalNfcDiscover+0x66>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	885b      	ldrh	r3, [r3, #2]
 8008566:	f003 0310 	and.w	r3, r3, #16
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 800856a:	2b00      	cmp	r3, #0
 800856c:	d004      	beq.n	8008578 <rfalNfcDiscover+0x5c>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008574:	2b02      	cmp	r3, #2
 8008576:	d804      	bhi.n	8008582 <rfalNfcDiscover+0x66>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800857e:	2b30      	cmp	r3, #48	@ 0x30
 8008580:	d901      	bls.n	8008586 <rfalNfcDiscover+0x6a>
    {
        return ERR_PARAM;
 8008582:	2307      	movs	r3, #7
 8008584:	e04f      	b.n	8008626 <rfalNfcDiscover+0x10a>
    {
        return ERR_DISABLED;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
    }
    
    /* Initialize context for discovery */
    gNfcDev.activeDev       = NULL;
 8008586:	4b2a      	ldr	r3, [pc, #168]	@ (8008630 <rfalNfcDiscover+0x114>)
 8008588:	2200      	movs	r2, #0
 800858a:	609a      	str	r2, [r3, #8]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 800858c:	4b28      	ldr	r3, [pc, #160]	@ (8008630 <rfalNfcDiscover+0x114>)
 800858e:	2200      	movs	r2, #0
 8008590:	805a      	strh	r2, [r3, #2]
    gNfcDev.devCnt          = 0;
 8008592:	4b27      	ldr	r3, [pc, #156]	@ (8008630 <rfalNfcDiscover+0x114>)
 8008594:	2200      	movs	r2, #0
 8008596:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
    gNfcDev.discRestart     = true;
 800859a:	4b25      	ldr	r3, [pc, #148]	@ (8008630 <rfalNfcDiscover+0x114>)
 800859c:	2201      	movs	r2, #1
 800859e:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
    gNfcDev.disc            = *disParams;
 80085a2:	4b23      	ldr	r3, [pc, #140]	@ (8008630 <rfalNfcDiscover+0x114>)
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	330c      	adds	r3, #12
 80085a8:	4611      	mov	r1, r2
 80085aa:	2284      	movs	r2, #132	@ 0x84
 80085ac:	4618      	mov	r0, r3
 80085ae:	f009 f823 	bl	80115f8 <memcpy>
    
    
    /* Calculate Listen Mask */
    gNfcDev.lmMask  = 0U;
 80085b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008630 <rfalNfcDiscover+0x114>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 80085ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008630 <rfalNfcDiscover+0x114>)
 80085bc:	f8d3 22f4 	ldr.w	r2, [r3, #756]	@ 0x2f4
 80085c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008630 <rfalNfcDiscover+0x114>)
 80085c2:	89db      	ldrh	r3, [r3, #14]
 80085c4:	089b      	lsrs	r3, r3, #2
 80085c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085ca:	4313      	orrs	r3, r2
 80085cc:	4a18      	ldr	r2, [pc, #96]	@ (8008630 <rfalNfcDiscover+0x114>)
 80085ce:	f8c2 32f4 	str.w	r3, [r2, #756]	@ 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_B) != 0U) ? RFAL_LM_MASK_NFCB : 0U);
 80085d2:	4b17      	ldr	r3, [pc, #92]	@ (8008630 <rfalNfcDiscover+0x114>)
 80085d4:	f8d3 22f4 	ldr.w	r2, [r3, #756]	@ 0x2f4
 80085d8:	4b15      	ldr	r3, [pc, #84]	@ (8008630 <rfalNfcDiscover+0x114>)
 80085da:	89db      	ldrh	r3, [r3, #14]
 80085dc:	089b      	lsrs	r3, r3, #2
 80085de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085e2:	4313      	orrs	r3, r2
 80085e4:	4a12      	ldr	r2, [pc, #72]	@ (8008630 <rfalNfcDiscover+0x114>)
 80085e6:	f8c2 32f4 	str.w	r3, [r2, #756]	@ 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 80085ea:	4b11      	ldr	r3, [pc, #68]	@ (8008630 <rfalNfcDiscover+0x114>)
 80085ec:	f8d3 22f4 	ldr.w	r2, [r3, #756]	@ 0x2f4
 80085f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008630 <rfalNfcDiscover+0x114>)
 80085f2:	89db      	ldrh	r3, [r3, #14]
 80085f4:	089b      	lsrs	r3, r3, #2
 80085f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80085fa:	4313      	orrs	r3, r2
 80085fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008630 <rfalNfcDiscover+0x114>)
 80085fe:	f8c2 32f4 	str.w	r3, [r2, #756]	@ 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 8008602:	4b0b      	ldr	r3, [pc, #44]	@ (8008630 <rfalNfcDiscover+0x114>)
 8008604:	f8d3 22f4 	ldr.w	r2, [r3, #756]	@ 0x2f4
 8008608:	4b09      	ldr	r3, [pc, #36]	@ (8008630 <rfalNfcDiscover+0x114>)
 800860a:	89db      	ldrh	r3, [r3, #14]
 800860c:	b21b      	sxth	r3, r3
 800860e:	109b      	asrs	r3, r3, #2
 8008610:	b21b      	sxth	r3, r3
 8008612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008616:	4313      	orrs	r3, r2
 8008618:	4a05      	ldr	r2, [pc, #20]	@ (8008630 <rfalNfcDiscover+0x114>)
 800861a:	f8c2 32f4 	str.w	r3, [r2, #756]	@ 0x2f4
    {
        return ERR_NOTSUPP;
    }
#endif
    
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 800861e:	4b04      	ldr	r3, [pc, #16]	@ (8008630 <rfalNfcDiscover+0x114>)
 8008620:	2202      	movs	r2, #2
 8008622:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	200006b0 	.word	0x200006b0

08008634 <rfalNfcDeactivate>:

/*******************************************************************************/
ReturnCode rfalNfcDeactivate( bool discovery )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state <= RFAL_NFC_STATE_IDLE )
 800863e:	4b0d      	ldr	r3, [pc, #52]	@ (8008674 <rfalNfcDeactivate+0x40>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d801      	bhi.n	800864a <rfalNfcDeactivate+0x16>
    {
        return ERR_WRONG_STATE;
 8008646:	2321      	movs	r3, #33	@ 0x21
 8008648:	e010      	b.n	800866c <rfalNfcDeactivate+0x38>
    }
    
    /* Check if discovery is to continue afterwards */
    if( discovery == true )
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d007      	beq.n	8008660 <rfalNfcDeactivate+0x2c>
    {
        /* If so let the state machine continue*/
        gNfcDev.discRestart = discovery;
 8008650:	4a08      	ldr	r2, [pc, #32]	@ (8008674 <rfalNfcDeactivate+0x40>)
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	f882 32f2 	strb.w	r3, [r2, #754]	@ 0x2f2
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 8008658:	4b06      	ldr	r3, [pc, #24]	@ (8008674 <rfalNfcDeactivate+0x40>)
 800865a:	2222      	movs	r2, #34	@ 0x22
 800865c:	701a      	strb	r2, [r3, #0]
 800865e:	e004      	b.n	800866a <rfalNfcDeactivate+0x36>
    }
    else
    {
        /* Otherwise deactivate immediately and go to IDLE */
        rfalNfcDeactivation();
 8008660:	f001 fd7a 	bl	800a158 <rfalNfcDeactivation>
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 8008664:	4b03      	ldr	r3, [pc, #12]	@ (8008674 <rfalNfcDeactivate+0x40>)
 8008666:	2201      	movs	r2, #1
 8008668:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	200006b0 	.word	0x200006b0

08008678 <rfalNfcSelect>:

/*******************************************************************************/
ReturnCode rfalNfcSelect( uint8_t devIdx )
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state != RFAL_NFC_STATE_POLL_SELECT )
 8008682:	4b09      	ldr	r3, [pc, #36]	@ (80086a8 <rfalNfcSelect+0x30>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b0c      	cmp	r3, #12
 8008688:	d001      	beq.n	800868e <rfalNfcSelect+0x16>
    {
        return ERR_WRONG_STATE;
 800868a:	2321      	movs	r3, #33	@ 0x21
 800868c:	e006      	b.n	800869c <rfalNfcSelect+0x24>
    }
    
    gNfcDev.selDevIdx = devIdx;
 800868e:	4a06      	ldr	r2, [pc, #24]	@ (80086a8 <rfalNfcSelect+0x30>)
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	71d3      	strb	r3, [r2, #7]
    gNfcDev.state     = RFAL_NFC_STATE_POLL_ACTIVATION;
 8008694:	4b04      	ldr	r3, [pc, #16]	@ (80086a8 <rfalNfcSelect+0x30>)
 8008696:	220d      	movs	r2, #13
 8008698:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	200006b0 	.word	0x200006b0

080086ac <rfalNfcGetState>:

/*******************************************************************************/
rfalNfcState rfalNfcGetState( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
    return gNfcDev.state;
 80086b0:	4b03      	ldr	r3, [pc, #12]	@ (80086c0 <rfalNfcGetState+0x14>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	200006b0 	.word	0x200006b0

080086c4 <rfalNfcGetDevicesFound>:

/*******************************************************************************/
ReturnCode rfalNfcGetDevicesFound( rfalNfcDevice **devList, uint8_t *devCnt )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_POLL_SELECT )
 80086ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008708 <rfalNfcGetDevicesFound+0x44>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b0b      	cmp	r3, #11
 80086d4:	d801      	bhi.n	80086da <rfalNfcGetDevicesFound+0x16>
    {
        return ERR_WRONG_STATE;
 80086d6:	2321      	movs	r3, #33	@ 0x21
 80086d8:	e010      	b.n	80086fc <rfalNfcGetDevicesFound+0x38>
    }
    
    /* Check valid parameters */
    if( (devList == NULL) || (devCnt == NULL) )
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <rfalNfcGetDevicesFound+0x22>
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <rfalNfcGetDevicesFound+0x26>
    {
        return ERR_PARAM;
 80086e6:	2307      	movs	r3, #7
 80086e8:	e008      	b.n	80086fc <rfalNfcGetDevicesFound+0x38>
    }
    
    *devCnt  = gNfcDev.devCnt;
 80086ea:	4b07      	ldr	r3, [pc, #28]	@ (8008708 <rfalNfcGetDevicesFound+0x44>)
 80086ec:	f893 22e8 	ldrb.w	r2, [r3, #744]	@ 0x2e8
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	701a      	strb	r2, [r3, #0]
    *devList = gNfcDev.devList;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a05      	ldr	r2, [pc, #20]	@ (800870c <rfalNfcGetDevicesFound+0x48>)
 80086f8:	601a      	str	r2, [r3, #0]
    
    return ERR_NONE;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	200006b0 	.word	0x200006b0
 800870c:	20000740 	.word	0x20000740

08008710 <rfalNfcGetActiveDevice>:

/*******************************************************************************/
ReturnCode rfalNfcGetActiveDevice( rfalNfcDevice **dev )
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 8008718:	4b10      	ldr	r3, [pc, #64]	@ (800875c <rfalNfcGetActiveDevice+0x4c>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b1d      	cmp	r3, #29
 800871e:	d801      	bhi.n	8008724 <rfalNfcGetActiveDevice+0x14>
    {
        return ERR_WRONG_STATE;
 8008720:	2321      	movs	r3, #33	@ 0x21
 8008722:	e014      	b.n	800874e <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check valid parameter */
    if( dev == NULL )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <rfalNfcGetActiveDevice+0x1e>
    {
        return ERR_PARAM;
 800872a:	2307      	movs	r3, #7
 800872c:	e00f      	b.n	800874e <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check for valid state */
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 800872e:	4b0b      	ldr	r3, [pc, #44]	@ (800875c <rfalNfcGetActiveDevice+0x4c>)
 8008730:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <rfalNfcGetActiveDevice+0x30>
 8008738:	4b08      	ldr	r3, [pc, #32]	@ (800875c <rfalNfcGetActiveDevice+0x4c>)
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <rfalNfcGetActiveDevice+0x34>
    {
        return ERR_REQUEST;
 8008740:	2305      	movs	r3, #5
 8008742:	e004      	b.n	800874e <rfalNfcGetActiveDevice+0x3e>
    }
    
    *dev = gNfcDev.activeDev;
 8008744:	4b05      	ldr	r3, [pc, #20]	@ (800875c <rfalNfcGetActiveDevice+0x4c>)
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	601a      	str	r2, [r3, #0]
    return ERR_NONE;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	200006b0 	.word	0x200006b0

08008760 <rfalNfcWorker>:

/*******************************************************************************/
void rfalNfcWorker( void )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af04      	add	r7, sp, #16
    ReturnCode err;
   
    rfalWorker();                                                                     /* Execute RFAL process  */
 8008766:	f006 fbd7 	bl	800ef18 <rfalWorker>
    
    switch( gNfcDev.state )
 800876a:	4bae      	ldr	r3, [pc, #696]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b22      	cmp	r3, #34	@ 0x22
 8008770:	f200 81b6 	bhi.w	8008ae0 <rfalNfcWorker+0x380>
 8008774:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <rfalNfcWorker+0x1c>)
 8008776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877a:	bf00      	nop
 800877c:	08008ae1 	.word	0x08008ae1
 8008780:	08008ae1 	.word	0x08008ae1
 8008784:	08008809 	.word	0x08008809
 8008788:	08008877 	.word	0x08008877
 800878c:	08008ae1 	.word	0x08008ae1
 8008790:	08008ae1 	.word	0x08008ae1
 8008794:	08008ae1 	.word	0x08008ae1
 8008798:	08008ae1 	.word	0x08008ae1
 800879c:	08008ae1 	.word	0x08008ae1
 80087a0:	08008ae1 	.word	0x08008ae1
 80087a4:	080088a5 	.word	0x080088a5
 80087a8:	080088f1 	.word	0x080088f1
 80087ac:	08008ae1 	.word	0x08008ae1
 80087b0:	0800894d 	.word	0x0800894d
 80087b4:	08008ae1 	.word	0x08008ae1
 80087b8:	08008ae1 	.word	0x08008ae1
 80087bc:	08008ae1 	.word	0x08008ae1
 80087c0:	08008ae1 	.word	0x08008ae1
 80087c4:	08008ae1 	.word	0x08008ae1
 80087c8:	08008ae1 	.word	0x08008ae1
 80087cc:	08008a05 	.word	0x08008a05
 80087d0:	08008a5b 	.word	0x08008a5b
 80087d4:	08008a8f 	.word	0x08008a8f
 80087d8:	08008a8f 	.word	0x08008a8f
 80087dc:	08008ae1 	.word	0x08008ae1
 80087e0:	08008ae1 	.word	0x08008ae1
 80087e4:	08008ae1 	.word	0x08008ae1
 80087e8:	08008ae1 	.word	0x08008ae1
 80087ec:	08008ae1 	.word	0x08008ae1
 80087f0:	08008ae1 	.word	0x08008ae1
 80087f4:	08008ae1 	.word	0x08008ae1
 80087f8:	08008983 	.word	0x08008983
 80087fc:	08008ae1 	.word	0x08008ae1
 8008800:	08008ae1 	.word	0x08008ae1
 8008804:	080089d5 	.word	0x080089d5
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_START_DISCOVERY:
        
            /* Initialize context for discovery cycle */
            gNfcDev.devCnt      = 0;
 8008808:	4b86      	ldr	r3, [pc, #536]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800880a:	2200      	movs	r2, #0
 800880c:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
            gNfcDev.selDevIdx   = 0;
 8008810:	4b84      	ldr	r3, [pc, #528]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008812:	2200      	movs	r2, #0
 8008814:	71da      	strb	r2, [r3, #7]
            gNfcDev.techsFound  = RFAL_NFC_TECH_NONE;
 8008816:	4b83      	ldr	r3, [pc, #524]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008818:	2200      	movs	r2, #0
 800881a:	805a      	strh	r2, [r3, #2]
            gNfcDev.techs2do    = gNfcDev.disc.techs2Find;
 800881c:	4b81      	ldr	r3, [pc, #516]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800881e:	89da      	ldrh	r2, [r3, #14]
 8008820:	4b80      	ldr	r3, [pc, #512]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008822:	809a      	strh	r2, [r3, #4]
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 8008824:	4b7f      	ldr	r3, [pc, #508]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008826:	220a      	movs	r2, #10
 8008828:	701a      	strb	r2, [r3, #0]
        
        #if RFAL_FEATURE_WAKEUP_MODE    
            /* Check if Low power Wake-Up is to be performed */
            if( gNfcDev.disc.wakeupEnabled )
 800882a:	4b7e      	ldr	r3, [pc, #504]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800882c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 8157 	beq.w	8008ae4 <rfalNfcWorker+0x384>
            {
                /* Initialize Low power Wake-up mode and wait */
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 8008836:	4b7b      	ldr	r3, [pc, #492]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008838:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <rfalNfcWorker+0xe4>
 8008840:	2300      	movs	r3, #0
 8008842:	e000      	b.n	8008846 <rfalNfcWorker+0xe6>
 8008844:	4b78      	ldr	r3, [pc, #480]	@ (8008a28 <rfalNfcWorker+0x2c8>)
 8008846:	4618      	mov	r0, r3
 8008848:	f008 f8ac 	bl	80109a4 <rfalWakeUpModeStart>
 800884c:	4603      	mov	r3, r0
 800884e:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 8008850:	88fb      	ldrh	r3, [r7, #6]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f040 8146 	bne.w	8008ae4 <rfalNfcWorker+0x384>
                {
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 8008858:	4b72      	ldr	r3, [pc, #456]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800885a:	2203      	movs	r2, #3
 800885c:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 800885e:	4b71      	ldr	r3, [pc, #452]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 813e 	beq.w	8008ae4 <rfalNfcWorker+0x384>
 8008868:	4b6e      	ldr	r3, [pc, #440]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800886a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800886c:	4a6d      	ldr	r2, [pc, #436]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800886e:	7812      	ldrb	r2, [r2, #0]
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
                }
            }
        #endif /* RFAL_FEATURE_WAKEUP_MODE */
            break;
 8008874:	e136      	b.n	8008ae4 <rfalNfcWorker+0x384>
        /*******************************************************************************/
        case RFAL_NFC_STATE_WAKEUP_MODE:
            
    #if RFAL_FEATURE_WAKEUP_MODE
            /* Check if the Wake-up mode has woke */
            if( rfalWakeUpModeHasWoke() )
 8008876:	f008 fa63 	bl	8010d40 <rfalWakeUpModeHasWoke>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 8133 	beq.w	8008ae8 <rfalNfcWorker+0x388>
            {
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 8008882:	f008 faad 	bl	8010de0 <rfalWakeUpModeStop>
                gNfcDev.state = RFAL_NFC_STATE_POLL_TECHDETECT;                       /* Go to Technology detection     */
 8008886:	4b67      	ldr	r3, [pc, #412]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008888:	220a      	movs	r2, #10
 800888a:	701a      	strb	r2, [r3, #0]
                
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 800888c:	4b65      	ldr	r3, [pc, #404]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800888e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 8129 	beq.w	8008ae8 <rfalNfcWorker+0x388>
 8008896:	4b63      	ldr	r3, [pc, #396]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800889a:	4a62      	ldr	r2, [pc, #392]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800889c:	7812      	ldrb	r2, [r2, #0]
 800889e:	4610      	mov	r0, r2
 80088a0:	4798      	blx	r3
            }
    #endif /* RFAL_FEATURE_WAKEUP_MODE */

            break;
 80088a2:	e121      	b.n	8008ae8 <rfalNfcWorker+0x388>
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_TECHDETECT:
            
            /* Start total duration timer */
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 80088a4:	4b5f      	ldr	r3, [pc, #380]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80088a6:	8a1b      	ldrh	r3, [r3, #16]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fd f811 	bl	80058d0 <timerCalculateTimer>
 80088ae:	4603      	mov	r3, r0
 80088b0:	4a5c      	ldr	r2, [pc, #368]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80088b2:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
        
            err = rfalNfcPollTechDetetection();                                       /* Perform Technology Detection                         */
 80088b6:	f000 fad5 	bl	8008e64 <rfalNfcPollTechDetetection>
 80088ba:	4603      	mov	r3, r0
 80088bc:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 80088be:	88fb      	ldrh	r3, [r7, #6]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	f000 8113 	beq.w	8008aec <rfalNfcWorker+0x38c>
            {
                if( ( err != ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d103      	bne.n	80088d4 <rfalNfcWorker+0x174>
 80088cc:	4b55      	ldr	r3, [pc, #340]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80088ce:	885b      	ldrh	r3, [r3, #2]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d105      	bne.n	80088e0 <rfalNfcWorker+0x180>
                {
                    rfalFieldOff();
 80088d4:	f006 f8ea 	bl	800eaac <rfalFieldOff>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_TECHDETECT;                 /* Nothing found as poller, go to listener */
 80088d8:	4b52      	ldr	r3, [pc, #328]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80088da:	2214      	movs	r2, #20
 80088dc:	701a      	strb	r2, [r3, #0]
                    break;
 80088de:	e114      	b.n	8008b0a <rfalNfcWorker+0x3aa>
                }
                
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 80088e0:	4b50      	ldr	r3, [pc, #320]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80088e2:	885a      	ldrh	r2, [r3, #2]
 80088e4:	4b4f      	ldr	r3, [pc, #316]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80088e6:	809a      	strh	r2, [r3, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 80088e8:	4b4e      	ldr	r3, [pc, #312]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80088ea:	220b      	movs	r2, #11
 80088ec:	701a      	strb	r2, [r3, #0]
            }
            break;
 80088ee:	e0fd      	b.n	8008aec <rfalNfcWorker+0x38c>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_COLAVOIDANCE:
        
            err = rfalNfcPollCollResolution();                                        /* Resolve any eventual collision                       */
 80088f0:	f000 fc46 	bl	8009180 <rfalNfcPollCollResolution>
 80088f4:	4603      	mov	r3, r0
 80088f6:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 80088f8:	88fb      	ldrh	r3, [r7, #6]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	f000 80f8 	beq.w	8008af0 <rfalNfcWorker+0x390>
            {
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 8008900:	88fb      	ldrh	r3, [r7, #6]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d104      	bne.n	8008910 <rfalNfcWorker+0x1b0>
 8008906:	4b47      	ldr	r3, [pc, #284]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008908:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 800890c:	2b00      	cmp	r3, #0
 800890e:	d103      	bne.n	8008918 <rfalNfcWorker+0x1b8>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;
 8008910:	4b44      	ldr	r3, [pc, #272]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008912:	2222      	movs	r2, #34	@ 0x22
 8008914:	701a      	strb	r2, [r3, #0]
                    break;                                                            /* Unable to retrieve any device, restart loop          */
 8008916:	e0f8      	b.n	8008b0a <rfalNfcWorker+0x3aa>
                }
                
                /* Check if more than one device has been found */
                if( gNfcDev.devCnt > 1U )
 8008918:	4b42      	ldr	r3, [pc, #264]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800891a:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 800891e:	2b01      	cmp	r3, #1
 8008920:	d90d      	bls.n	800893e <rfalNfcWorker+0x1de>
                {
                    /* If more than one device was found inform upper layer to choose which one to activate */
                    if( gNfcDev.disc.notifyCb != NULL )
 8008922:	4b40      	ldr	r3, [pc, #256]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008926:	2b00      	cmp	r3, #0
 8008928:	d009      	beq.n	800893e <rfalNfcWorker+0x1de>
                    {
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 800892a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800892c:	220c      	movs	r2, #12
 800892e:	701a      	strb	r2, [r3, #0]
                        gNfcDev.disc.notifyCb( gNfcDev.state );
 8008930:	4b3c      	ldr	r3, [pc, #240]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008934:	4a3b      	ldr	r2, [pc, #236]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008936:	7812      	ldrb	r2, [r2, #0]
 8008938:	4610      	mov	r0, r2
 800893a:	4798      	blx	r3
                        break;
 800893c:	e0e5      	b.n	8008b0a <rfalNfcWorker+0x3aa>
                    }
                }
                
                /* If only one device or no callback has been set, activate the first device found */
                gNfcDev.selDevIdx = 0U;
 800893e:	4b39      	ldr	r3, [pc, #228]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008940:	2200      	movs	r2, #0
 8008942:	71da      	strb	r2, [r3, #7]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 8008944:	4b37      	ldr	r3, [pc, #220]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008946:	220d      	movs	r2, #13
 8008948:	701a      	strb	r2, [r3, #0]
            }
            break;
 800894a:	e0d1      	b.n	8008af0 <rfalNfcWorker+0x390>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_ACTIVATION:
            
            if( rfalNfcPollActivation( gNfcDev.selDevIdx ) != ERR_NONE )              /* Activate selected device           */
 800894c:	4b35      	ldr	r3, [pc, #212]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800894e:	79db      	ldrb	r3, [r3, #7]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fee3 	bl	800971c <rfalNfcPollActivation>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <rfalNfcWorker+0x204>
            {
                gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;                          /* If Activation failed, restart loop */
 800895c:	4b31      	ldr	r3, [pc, #196]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800895e:	2222      	movs	r2, #34	@ 0x22
 8008960:	701a      	strb	r2, [r3, #0]
                break;
 8008962:	e0d2      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            }
            
            gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 8008964:	4b2f      	ldr	r3, [pc, #188]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008966:	221e      	movs	r2, #30
 8008968:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 800896a:	4b2e      	ldr	r3, [pc, #184]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800896c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 80c0 	beq.w	8008af4 <rfalNfcWorker+0x394>
 8008974:	4b2b      	ldr	r3, [pc, #172]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008978:	4a2a      	ldr	r2, [pc, #168]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 800897a:	7812      	ldrb	r2, [r2, #0]
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
            break;
 8008980:	e0b8      	b.n	8008af4 <rfalNfcWorker+0x394>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DATAEXCHANGE:

            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 8008982:	f000 f9eb 	bl	8008d5c <rfalNfcDataExchangeGetStatus>
            
            if( gNfcDev.dataExErr != ERR_BUSY )                                       /* If Dataexchange has terminated */
 8008986:	4b27      	ldr	r3, [pc, #156]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008988:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	@ 0x2f0
 800898c:	2b02      	cmp	r3, #2
 800898e:	d00c      	beq.n	80089aa <rfalNfcWorker+0x24a>
            {
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 8008990:	4b24      	ldr	r3, [pc, #144]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008992:	2221      	movs	r2, #33	@ 0x21
 8008994:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8008996:	4b23      	ldr	r3, [pc, #140]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800899a:	2b00      	cmp	r3, #0
 800899c:	d005      	beq.n	80089aa <rfalNfcWorker+0x24a>
 800899e:	4b21      	ldr	r3, [pc, #132]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089a2:	4a20      	ldr	r2, [pc, #128]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089a4:	7812      	ldrb	r2, [r2, #0]
 80089a6:	4610      	mov	r0, r2
 80089a8:	4798      	blx	r3
            }
            if( gNfcDev.dataExErr == ERR_SLEEP_REQ )                                  /* Check if Listen mode has to go to Sleep */
 80089aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089ac:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	@ 0x2f0
 80089b0:	2b20      	cmp	r3, #32
 80089b2:	f040 80a1 	bne.w	8008af8 <rfalNfcWorker+0x398>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 80089b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089b8:	2217      	movs	r2, #23
 80089ba:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 80089bc:	4b19      	ldr	r3, [pc, #100]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 8099 	beq.w	8008af8 <rfalNfcWorker+0x398>
 80089c6:	4b17      	ldr	r3, [pc, #92]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089ca:	4a16      	ldr	r2, [pc, #88]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089cc:	7812      	ldrb	r2, [r2, #0]
 80089ce:	4610      	mov	r0, r2
 80089d0:	4798      	blx	r3
            }
            break;
 80089d2:	e091      	b.n	8008af8 <rfalNfcWorker+0x398>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DEACTIVATION:
            
            rfalNfcDeactivation();                                                    /* Deactivate current device */
 80089d4:	f001 fbc0 	bl	800a158 <rfalNfcDeactivation>
        
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 80089d8:	4b12      	ldr	r3, [pc, #72]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089da:	f893 32f2 	ldrb.w	r3, [r3, #754]	@ 0x2f2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <rfalNfcWorker+0x286>
 80089e2:	2202      	movs	r2, #2
 80089e4:	e000      	b.n	80089e8 <rfalNfcWorker+0x288>
 80089e6:	2201      	movs	r2, #1
 80089e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089ea:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 80089ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8083 	beq.w	8008afc <rfalNfcWorker+0x39c>
 80089f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 80089fc:	7812      	ldrb	r2, [r2, #0]
 80089fe:	4610      	mov	r0, r2
 8008a00:	4798      	blx	r3
            break;
 8008a02:	e07b      	b.n	8008afc <rfalNfcWorker+0x39c>
        
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_TECHDETECT:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 8008a04:	4b07      	ldr	r3, [pc, #28]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008a06:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fc ff6e 	bl	80058ec <timerIsExpired>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00a      	beq.n	8008a2c <rfalNfcWorker+0x2cc>
            {
                #if RFAL_FEATURE_LISTEN_MODE
                    rfalListenStop();
 8008a16:	f007 fea9 	bl	801076c <rfalListenStop>
                #else
                    rfalFieldOff();
                #endif /* RFAL_FEATURE_LISTEN_MODE */
                
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 8008a1a:	4b02      	ldr	r3, [pc, #8]	@ (8008a24 <rfalNfcWorker+0x2c4>)
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	701a      	strb	r2, [r3, #0]
                break;
 8008a20:	e073      	b.n	8008b0a <rfalNfcWorker+0x3aa>
 8008a22:	bf00      	nop
 8008a24:	200006b0 	.word	0x200006b0
 8008a28:	2000072a 	.word	0x2000072a
            }

    #if RFAL_FEATURE_LISTEN_MODE
            err = rfalListenStart( gNfcDev.lmMask, &gNfcDev.disc.lmConfigPA, NULL, &gNfcDev.disc.lmConfigPF, (uint8_t*)&gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen );
 8008a2c:	4b38      	ldr	r3, [pc, #224]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008a2e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	@ 0x2f4
 8008a32:	4b38      	ldr	r3, [pc, #224]	@ (8008b14 <rfalNfcWorker+0x3b4>)
 8008a34:	9302      	str	r3, [sp, #8]
 8008a36:	23ff      	movs	r3, #255	@ 0xff
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	4b37      	ldr	r3, [pc, #220]	@ (8008b18 <rfalNfcWorker+0x3b8>)
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	4b37      	ldr	r3, [pc, #220]	@ (8008b1c <rfalNfcWorker+0x3bc>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	4937      	ldr	r1, [pc, #220]	@ (8008b20 <rfalNfcWorker+0x3c0>)
 8008a44:	f007 fd2c 	bl	80104a0 <rfalListenStart>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	80fb      	strh	r3, [r7, #6]
            if( err == ERR_NONE )
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d156      	bne.n	8008b00 <rfalNfcWorker+0x3a0>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_COLAVOIDANCE;                   /* Wait for listen mode to be activated */
 8008a52:	4b2f      	ldr	r3, [pc, #188]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008a54:	2215      	movs	r2, #21
 8008a56:	701a      	strb	r2, [r3, #0]
            }
            break;
 8008a58:	e052      	b.n	8008b00 <rfalNfcWorker+0x3a0>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_COLAVOIDANCE:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )                           /* Check if the total duration has been reached */
 8008a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008a5c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fc ff43 	bl	80058ec <timerIsExpired>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d005      	beq.n	8008a78 <rfalNfcWorker+0x318>
            {
                rfalListenStop();
 8008a6c:	f007 fe7e 	bl	801076c <rfalListenStop>
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 8008a70:	4b27      	ldr	r3, [pc, #156]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008a72:	2202      	movs	r2, #2
 8008a74:	701a      	strb	r2, [r3, #0]
                break;
 8008a76:	e048      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            }
            
            /* Check for external field */
            if( rfalListenGetState( NULL, NULL ) >= RFAL_LM_STATE_IDLE )
 8008a78:	2100      	movs	r1, #0
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	f007 fea2 	bl	80107c4 <rfalListenGetState>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d93e      	bls.n	8008b04 <rfalNfcWorker+0x3a4>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 8008a86:	4b22      	ldr	r3, [pc, #136]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008a88:	2216      	movs	r2, #22
 8008a8a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8008a8c:	e03a      	b.n	8008b04 <rfalNfcWorker+0x3a4>
        
        /*******************************************************************************/    
        case RFAL_NFC_STATE_LISTEN_ACTIVATION:
        case RFAL_NFC_STATE_LISTEN_SLEEP:
            
            err = rfalNfcListenActivation();
 8008a8e:	f001 f8f7 	bl	8009c80 <rfalNfcListenActivation>
 8008a92:	4603      	mov	r3, r0
 8008a94:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )
 8008a96:	88fb      	ldrh	r3, [r7, #6]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d035      	beq.n	8008b08 <rfalNfcWorker+0x3a8>
            {
                if( err == ERR_NONE )
 8008a9c:	88fb      	ldrh	r3, [r7, #6]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d118      	bne.n	8008ad4 <rfalNfcWorker+0x374>
                {
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 8008aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8008b24 <rfalNfcWorker+0x3c4>)
 8008aa6:	609a      	str	r2, [r3, #8]
                    gNfcDev.devCnt++;
 8008aa8:	4b19      	ldr	r3, [pc, #100]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008aaa:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8008aae:	3301      	adds	r3, #1
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	4b17      	ldr	r3, [pc, #92]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008ab4:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
                    
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 8008ab8:	4b15      	ldr	r3, [pc, #84]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008aba:	221e      	movs	r2, #30
 8008abc:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Inform upper layer that a device has been activated */
 8008abe:	4b14      	ldr	r3, [pc, #80]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d020      	beq.n	8008b08 <rfalNfcWorker+0x3a8>
 8008ac6:	4b12      	ldr	r3, [pc, #72]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aca:	4a11      	ldr	r2, [pc, #68]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008acc:	7812      	ldrb	r2, [r2, #0]
 8008ace:	4610      	mov	r0, r2
 8008ad0:	4798      	blx	r3
                    rfalListenStop();
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
                }
            }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
            break;
 8008ad2:	e019      	b.n	8008b08 <rfalNfcWorker+0x3a8>
                    rfalListenStop();
 8008ad4:	f007 fe4a 	bl	801076c <rfalListenStop>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 8008ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8008b10 <rfalNfcWorker+0x3b0>)
 8008ada:	2202      	movs	r2, #2
 8008adc:	701a      	strb	r2, [r3, #0]
            break;
 8008ade:	e013      	b.n	8008b08 <rfalNfcWorker+0x3a8>
        /*******************************************************************************/
        case RFAL_NFC_STATE_ACTIVATED:
        case RFAL_NFC_STATE_POLL_SELECT:
        case RFAL_NFC_STATE_DATAEXCHANGE_DONE:
        default:
            return;
 8008ae0:	bf00      	nop
 8008ae2:	e012      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            break;
 8008ae4:	bf00      	nop
 8008ae6:	e010      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            break;
 8008ae8:	bf00      	nop
 8008aea:	e00e      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            break;
 8008aec:	bf00      	nop
 8008aee:	e00c      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            break;
 8008af0:	bf00      	nop
 8008af2:	e00a      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            break;
 8008af4:	bf00      	nop
 8008af6:	e008      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            break;
 8008af8:	bf00      	nop
 8008afa:	e006      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            break;
 8008afc:	bf00      	nop
 8008afe:	e004      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            break;
 8008b00:	bf00      	nop
 8008b02:	e002      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            break;
 8008b04:	bf00      	nop
 8008b06:	e000      	b.n	8008b0a <rfalNfcWorker+0x3aa>
            break;
 8008b08:	bf00      	nop
    }
}
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	200006b0 	.word	0x200006b0
 8008b14:	20000bae 	.word	0x20000bae
 8008b18:	20000aab 	.word	0x20000aab
 8008b1c:	2000070e 	.word	0x2000070e
 8008b20:	20000700 	.word	0x20000700
 8008b24:	20000740 	.word	0x20000740

08008b28 <rfalNfcDataExchangeStart>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeStart( uint8_t *txData, uint16_t txDataLen, uint8_t **rxData, uint16_t **rvdLen, uint32_t fwt )
{
 8008b28:	b5b0      	push	{r4, r5, r7, lr}
 8008b2a:	b09c      	sub	sp, #112	@ 0x70
 8008b2c:	af06      	add	r7, sp, #24
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	607a      	str	r2, [r7, #4]
 8008b32:	603b      	str	r3, [r7, #0]
 8008b34:	460b      	mov	r3, r1
 8008b36:	817b      	strh	r3, [r7, #10]
    rfalTransceiveContext ctx;
    
    /*******************************************************************************/
    /* The Data Exchange is divided in two different moments, the trigger/Start of *
     *  the transfer followed by the check until its completion                    */
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 8008b38:	4b7f      	ldr	r3, [pc, #508]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b1d      	cmp	r3, #29
 8008b3e:	f240 80f5 	bls.w	8008d2c <rfalNfcDataExchangeStart+0x204>
 8008b42:	4b7d      	ldr	r3, [pc, #500]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 80f0 	beq.w	8008d2c <rfalNfcDataExchangeStart+0x204>
        
        /*******************************************************************************/
        /* In Listen mode is the Poller that initiates the communicatation             */
        /* Assign output parameters and rfalNfcDataExchangeGetStatus will return       */
        /* incoming data from Poller/Initiator                                         */
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 8008b4c:	4b7a      	ldr	r3, [pc, #488]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b1e      	cmp	r3, #30
 8008b52:	d124      	bne.n	8008b9e <rfalNfcDataExchangeStart+0x76>
 8008b54:	4b78      	ldr	r3, [pc, #480]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b09      	cmp	r3, #9
 8008b5c:	d91f      	bls.n	8008b9e <rfalNfcDataExchangeStart+0x76>
 8008b5e:	4b76      	ldr	r3, [pc, #472]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	2b0f      	cmp	r3, #15
 8008b66:	d81a      	bhi.n	8008b9e <rfalNfcDataExchangeStart+0x76>
        {
            if( txDataLen > 0U )
 8008b68:	897b      	ldrh	r3, [r7, #10]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <rfalNfcDataExchangeStart+0x4a>
            {
                return ERR_WRONG_STATE;
 8008b6e:	2321      	movs	r3, #33	@ 0x21
 8008b70:	e0dd      	b.n	8008d2e <rfalNfcDataExchangeStart+0x206>
            }
            
            *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	4a71      	ldr	r2, [pc, #452]	@ (8008d3c <rfalNfcDataExchangeStart+0x214>)
 8008b76:	601a      	str	r2, [r3, #0]
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 8008b78:	4b6f      	ldr	r3, [pc, #444]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	7f5b      	ldrb	r3, [r3, #29]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d008      	beq.n	8008b94 <rfalNfcDataExchangeStart+0x6c>
                                  ((gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_NFCDEP) ? gNfcDev.rxBuf.nfcDepBuf.inf : gNfcDev.rxBuf.rfBuf) );
 8008b82:	4b6d      	ldr	r3, [pc, #436]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	7f5b      	ldrb	r3, [r3, #29]
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d101      	bne.n	8008b90 <rfalNfcDataExchangeStart+0x68>
 8008b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8008d40 <rfalNfcDataExchangeStart+0x218>)
 8008b8e:	e002      	b.n	8008b96 <rfalNfcDataExchangeStart+0x6e>
 8008b90:	4b6c      	ldr	r3, [pc, #432]	@ (8008d44 <rfalNfcDataExchangeStart+0x21c>)
 8008b92:	e000      	b.n	8008b96 <rfalNfcDataExchangeStart+0x6e>
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 8008b94:	4b6c      	ldr	r3, [pc, #432]	@ (8008d48 <rfalNfcDataExchangeStart+0x220>)
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	6013      	str	r3, [r2, #0]
            return ERR_NONE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e0c7      	b.n	8008d2e <rfalNfcDataExchangeStart+0x206>
        }
        
        
        /*******************************************************************************/
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 8008b9e:	4b66      	ldr	r3, [pc, #408]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	7f5b      	ldrb	r3, [r3, #29]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d065      	beq.n	8008c74 <rfalNfcDataExchangeStart+0x14c>
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	f300 80ad 	bgt.w	8008d08 <rfalNfcDataExchangeStart+0x1e0>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <rfalNfcDataExchangeStart+0x90>
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d021      	beq.n	8008bfa <rfalNfcDataExchangeStart+0xd2>
 8008bb6:	e0a7      	b.n	8008d08 <rfalNfcDataExchangeStart+0x1e0>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
    
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bbc:	897b      	ldrh	r3, [r7, #10]
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008bc4:	4b5f      	ldr	r3, [pc, #380]	@ (8008d44 <rfalNfcDataExchangeStart+0x21c>)
 8008bc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bc8:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8008bcc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008bd0:	4b5a      	ldr	r3, [pc, #360]	@ (8008d3c <rfalNfcDataExchangeStart+0x214>)
 8008bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bda:	653b      	str	r3, [r7, #80]	@ 0x50
                *rxData = (uint8_t*)gNfcDev.rxBuf.rfBuf;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a59      	ldr	r2, [pc, #356]	@ (8008d44 <rfalNfcDataExchangeStart+0x21c>)
 8008be0:	601a      	str	r2, [r3, #0]
                *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	4a55      	ldr	r2, [pc, #340]	@ (8008d3c <rfalNfcDataExchangeStart+0x214>)
 8008be6:	601a      	str	r2, [r3, #0]
                err = rfalStartTransceive( &ctx );
 8008be8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008bec:	4618      	mov	r0, r3
 8008bee:	f005 ff73 	bl	800ead8 <rfalStartTransceive>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                break;
 8008bf8:	e08a      	b.n	8008d10 <rfalNfcDataExchangeStart+0x1e8>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
            {
                rfalIsoDepTxRxParam isoDepTxRx;
                
                if( txDataLen > 0U )
 8008bfa:	897b      	ldrh	r3, [r7, #10]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <rfalNfcDataExchangeStart+0xe4>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.isoDepBuf.inf, txData, txDataLen );
 8008c00:	897b      	ldrh	r3, [r7, #10]
 8008c02:	461a      	mov	r2, r3
 8008c04:	68f9      	ldr	r1, [r7, #12]
 8008c06:	4851      	ldr	r0, [pc, #324]	@ (8008d4c <rfalNfcDataExchangeStart+0x224>)
 8008c08:	f008 fcf6 	bl	80115f8 <memcpy>
                }
                
                isoDepTxRx.DID          = RFAL_ISODEP_NO_DID;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                isoDepTxRx.ourFSx       = RFAL_ISODEP_FSX_KEEP;
 8008c12:	23ff      	movs	r3, #255	@ 0xff
 8008c14:	863b      	strh	r3, [r7, #48]	@ 0x30
                isoDepTxRx.FSx          = gNfcDev.activeDev->proto.isoDep.info.FSx;
 8008c16:	4b48      	ldr	r3, [pc, #288]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008c1e:	867b      	strh	r3, [r7, #50]	@ 0x32
                isoDepTxRx.dFWT         = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 8008c20:	4b45      	ldr	r3, [pc, #276]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
                isoDepTxRx.FWT          = gNfcDev.activeDev->proto.isoDep.info.FWT;
 8008c28:	4b43      	ldr	r3, [pc, #268]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
                isoDepTxRx.txBuf        = &gNfcDev.txBuf.isoDepBuf;
 8008c30:	4b47      	ldr	r3, [pc, #284]	@ (8008d50 <rfalNfcDataExchangeStart+0x228>)
 8008c32:	617b      	str	r3, [r7, #20]
                isoDepTxRx.txBufLen     = txDataLen;
 8008c34:	897b      	ldrh	r3, [r7, #10]
 8008c36:	833b      	strh	r3, [r7, #24]
                isoDepTxRx.isTxChaining = false;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	76bb      	strb	r3, [r7, #26]
                isoDepTxRx.rxBuf        = &gNfcDev.rxBuf.isoDepBuf;
 8008c3c:	4b41      	ldr	r3, [pc, #260]	@ (8008d44 <rfalNfcDataExchangeStart+0x21c>)
 8008c3e:	61fb      	str	r3, [r7, #28]
                isoDepTxRx.rxLen        = &gNfcDev.rxLen;
 8008c40:	4b3e      	ldr	r3, [pc, #248]	@ (8008d3c <rfalNfcDataExchangeStart+0x214>)
 8008c42:	623b      	str	r3, [r7, #32]
                isoDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 8008c44:	4b43      	ldr	r3, [pc, #268]	@ (8008d54 <rfalNfcDataExchangeStart+0x22c>)
 8008c46:	627b      	str	r3, [r7, #36]	@ 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.inf;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8008d48 <rfalNfcDataExchangeStart+0x220>)
 8008c4c:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	4a3a      	ldr	r2, [pc, #232]	@ (8008d3c <rfalNfcDataExchangeStart+0x214>)
 8008c52:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL ISO-DEP Transceive                                           */
                err = rfalIsoDepStartTransceive( isoDepTxRx );
 8008c54:	466d      	mov	r5, sp
 8008c56:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8008c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	f107 0314 	add.w	r3, r7, #20
 8008c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c68:	f7fe fb70 	bl	800734c <rfalIsoDepStartTransceive>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                break;
 8008c72:	e04d      	b.n	8008d10 <rfalNfcDataExchangeStart+0x1e8>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_NFCDEP:
            {
                rfalNfcDepTxRxParam nfcDepTxRx;
                
                if( txDataLen > 0U)
 8008c74:	897b      	ldrh	r3, [r7, #10]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d005      	beq.n	8008c86 <rfalNfcDataExchangeStart+0x15e>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.nfcDepBuf.inf, txData, txDataLen );
 8008c7a:	897b      	ldrh	r3, [r7, #10]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	68f9      	ldr	r1, [r7, #12]
 8008c80:	4835      	ldr	r0, [pc, #212]	@ (8008d58 <rfalNfcDataExchangeStart+0x230>)
 8008c82:	f008 fcb9 	bl	80115f8 <memcpy>
                }
                
                nfcDepTxRx.DID          = RFAL_NFCDEP_DID_KEEP;
 8008c86:	23ff      	movs	r3, #255	@ 0xff
 8008c88:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
                nfcDepTxRx.FSx          = rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) );
 8008c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c94:	091b      	lsrs	r3, r3, #4
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	019b      	lsls	r3, r3, #6
 8008ca0:	2bfd      	cmp	r3, #253	@ 0xfd
 8008ca2:	d80c      	bhi.n	8008cbe <rfalNfcDataExchangeStart+0x196>
 8008ca4:	4b24      	ldr	r3, [pc, #144]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008cac:	091b      	lsrs	r3, r3, #4
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	019b      	lsls	r3, r3, #6
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	e000      	b.n	8008cc0 <rfalNfcDataExchangeStart+0x198>
 8008cbe:	23fe      	movs	r3, #254	@ 0xfe
 8008cc0:	863b      	strh	r3, [r7, #48]	@ 0x30
                nfcDepTxRx.dFWT         = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 8008cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                nfcDepTxRx.FWT          = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 8008cca:	4b1b      	ldr	r3, [pc, #108]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
                nfcDepTxRx.txBuf        = &gNfcDev.txBuf.nfcDepBuf;
 8008cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8008d50 <rfalNfcDataExchangeStart+0x228>)
 8008cd4:	617b      	str	r3, [r7, #20]
                nfcDepTxRx.txBufLen     = txDataLen;
 8008cd6:	897b      	ldrh	r3, [r7, #10]
 8008cd8:	833b      	strh	r3, [r7, #24]
                nfcDepTxRx.isTxChaining = false;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	76bb      	strb	r3, [r7, #26]
                nfcDepTxRx.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 8008cde:	4b19      	ldr	r3, [pc, #100]	@ (8008d44 <rfalNfcDataExchangeStart+0x21c>)
 8008ce0:	61fb      	str	r3, [r7, #28]
                nfcDepTxRx.rxLen        = &gNfcDev.rxLen;
 8008ce2:	4b16      	ldr	r3, [pc, #88]	@ (8008d3c <rfalNfcDataExchangeStart+0x214>)
 8008ce4:	623b      	str	r3, [r7, #32]
                nfcDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 8008ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8008d54 <rfalNfcDataExchangeStart+0x22c>)
 8008ce8:	627b      	str	r3, [r7, #36]	@ 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.inf;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a14      	ldr	r2, [pc, #80]	@ (8008d40 <rfalNfcDataExchangeStart+0x218>)
 8008cee:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	4a12      	ldr	r2, [pc, #72]	@ (8008d3c <rfalNfcDataExchangeStart+0x214>)
 8008cf4:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL NFC-DEP Transceive                                           */
                err = rfalNfcDepStartTransceive( &nfcDepTxRx );                          
 8008cf6:	f107 0314 	add.w	r3, r7, #20
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f003 fbcc 	bl	800c498 <rfalNfcDepStartTransceive>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                break;
 8008d06:	e003      	b.n	8008d10 <rfalNfcDataExchangeStart+0x1e8>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */

            /*******************************************************************************/
            default:
                err = ERR_PARAM;
 8008d08:	2307      	movs	r3, #7
 8008d0a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                break;
 8008d0e:	bf00      	nop
        }
        
        /* If a transceive has succesfully started flag Data Exchange as ongoing */
        if( err == ERR_NONE )
 8008d10:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d106      	bne.n	8008d26 <rfalNfcDataExchangeStart+0x1fe>
        {
            gNfcDev.dataExErr = ERR_BUSY;
 8008d18:	4b07      	ldr	r3, [pc, #28]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 8008d20:	4b05      	ldr	r3, [pc, #20]	@ (8008d38 <rfalNfcDataExchangeStart+0x210>)
 8008d22:	221f      	movs	r2, #31
 8008d24:	701a      	strb	r2, [r3, #0]
        }
        
        return err;
 8008d26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008d2a:	e000      	b.n	8008d2e <rfalNfcDataExchangeStart+0x206>
    }
    
    return ERR_WRONG_STATE;
 8008d2c:	2321      	movs	r3, #33	@ 0x21
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3758      	adds	r7, #88	@ 0x58
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bdb0      	pop	{r4, r5, r7, pc}
 8008d36:	bf00      	nop
 8008d38:	200006b0 	.word	0x200006b0
 8008d3c:	20000bae 	.word	0x20000bae
 8008d40:	20000ab0 	.word	0x20000ab0
 8008d44:	20000aab 	.word	0x20000aab
 8008d48:	20000aae 	.word	0x20000aae
 8008d4c:	200009ab 	.word	0x200009ab
 8008d50:	200009a8 	.word	0x200009a8
 8008d54:	200009a3 	.word	0x200009a3
 8008d58:	200009ad 	.word	0x200009ad

08008d5c <rfalNfcDataExchangeGetStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeGetStatus( void )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Check if it's the first frame received in Listen mode */
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 8008d60:	4b3d      	ldr	r3, [pc, #244]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b1e      	cmp	r3, #30
 8008d66:	d114      	bne.n	8008d92 <rfalNfcDataExchangeGetStatus+0x36>
    {
        /* Continue data exchange as normal */
        gNfcDev.dataExErr = ERR_BUSY;
 8008d68:	4b3b      	ldr	r3, [pc, #236]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 8008d70:	4b39      	ldr	r3, [pc, #228]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008d72:	221f      	movs	r2, #31
 8008d74:	701a      	strb	r2, [r3, #0]
        
        /* Check if we performing in T3T CE */
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 8008d76:	4b38      	ldr	r3, [pc, #224]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b0c      	cmp	r3, #12
 8008d7e:	d108      	bne.n	8008d92 <rfalNfcDataExchangeGetStatus+0x36>
 8008d80:	4b35      	ldr	r3, [pc, #212]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	7f5b      	ldrb	r3, [r3, #29]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d103      	bne.n	8008d92 <rfalNfcDataExchangeGetStatus+0x36>
        {
            /* The first frame has been retrieved by rfalListenMode, flag data immediately                  */
            /* Can only call rfalGetTransceiveStatus() after starting a transceive with rfalStartTransceive */
            gNfcDev.dataExErr = ERR_NONE;
 8008d8a:	4b33      	ldr	r3, [pc, #204]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0
    }
    
    
    /*******************************************************************************/
    /* Check if we are in we have been placed to sleep, and return last error     */
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 8008d92:	4b31      	ldr	r3, [pc, #196]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b17      	cmp	r3, #23
 8008d98:	d103      	bne.n	8008da2 <rfalNfcDataExchangeGetStatus+0x46>
    {
        return gNfcDev.dataExErr;                                /* ERR_SLEEP_REQ */
 8008d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008d9c:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	@ 0x2f0
 8008da0:	e057      	b.n	8008e52 <rfalNfcDataExchangeGetStatus+0xf6>
    }

    
    /*******************************************************************************/    
    /* Check if Data exchange has been started */
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE)  )
 8008da2:	4b2d      	ldr	r3, [pc, #180]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b1f      	cmp	r3, #31
 8008da8:	d005      	beq.n	8008db6 <rfalNfcDataExchangeGetStatus+0x5a>
 8008daa:	4b2b      	ldr	r3, [pc, #172]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b21      	cmp	r3, #33	@ 0x21
 8008db0:	d001      	beq.n	8008db6 <rfalNfcDataExchangeGetStatus+0x5a>
    {
        return ERR_WRONG_STATE;
 8008db2:	2321      	movs	r3, #33	@ 0x21
 8008db4:	e04d      	b.n	8008e52 <rfalNfcDataExchangeGetStatus+0xf6>
    }
    
    /* Check if Data exchange is still ongoing */
    if( gNfcDev.dataExErr == ERR_BUSY )
 8008db6:	4b28      	ldr	r3, [pc, #160]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008db8:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	@ 0x2f0
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d145      	bne.n	8008e4c <rfalNfcDataExchangeGetStatus+0xf0>
    {
        switch( gNfcDev.activeDev->rfInterface )
 8008dc0:	4b25      	ldr	r3, [pc, #148]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	7f5b      	ldrb	r3, [r3, #29]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d016      	beq.n	8008df8 <rfalNfcDataExchangeGetStatus+0x9c>
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	dc1c      	bgt.n	8008e08 <rfalNfcDataExchangeGetStatus+0xac>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <rfalNfcDataExchangeGetStatus+0x7c>
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d008      	beq.n	8008de8 <rfalNfcDataExchangeGetStatus+0x8c>
 8008dd6:	e017      	b.n	8008e08 <rfalNfcDataExchangeGetStatus+0xac>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 8008dd8:	f006 f88c 	bl	800eef4 <rfalGetTransceiveStatus>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	461a      	mov	r2, r3
 8008de0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008de2:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0
                break;
 8008de6:	e014      	b.n	8008e12 <rfalNfcDataExchangeGetStatus+0xb6>
        
        #if RFAL_FEATURE_ISO_DEP
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
                gNfcDev.dataExErr = rfalIsoDepGetTransceiveStatus();
 8008de8:	f7fe fb1c 	bl	8007424 <rfalIsoDepGetTransceiveStatus>
 8008dec:	4603      	mov	r3, r0
 8008dee:	461a      	mov	r2, r3
 8008df0:	4b19      	ldr	r3, [pc, #100]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008df2:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0
                break;
 8008df6:	e00c      	b.n	8008e12 <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_ISO_DEP */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                gNfcDev.dataExErr = rfalNfcDepGetTransceiveStatus();
 8008df8:	f003 fb84 	bl	800c504 <rfalNfcDepGetTransceiveStatus>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	461a      	mov	r2, r3
 8008e00:	4b15      	ldr	r3, [pc, #84]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008e02:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0
                break;
 8008e06:	e004      	b.n	8008e12 <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            /*******************************************************************************/
            default:
                gNfcDev.dataExErr = ERR_PARAM;
 8008e08:	4b13      	ldr	r3, [pc, #76]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008e0a:	2207      	movs	r2, #7
 8008e0c:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0
                break;
 8008e10:	bf00      	nop
        
        
    #if  RFAL_FEATURE_LISTEN_MODE
        /*******************************************************************************/
        /* If a Sleep request has been received (Listen Mode) go to sleep immediately  */
        if( gNfcDev.dataExErr == ERR_SLEEP_REQ )
 8008e12:	4b11      	ldr	r3, [pc, #68]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008e14:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	@ 0x2f0
 8008e18:	2b20      	cmp	r3, #32
 8008e1a:	d117      	bne.n	8008e4c <rfalNfcDataExchangeGetStatus+0xf0>
        {
            EXIT_ON_ERR( gNfcDev.dataExErr, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 8008e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e5c <rfalNfcDataExchangeGetStatus+0x100>)
 8008e1e:	22ff      	movs	r2, #255	@ 0xff
 8008e20:	490f      	ldr	r1, [pc, #60]	@ (8008e60 <rfalNfcDataExchangeGetStatus+0x104>)
 8008e22:	200c      	movs	r0, #12
 8008e24:	f007 fcbe 	bl	80107a4 <rfalListenSleepStart>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008e2e:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0
 8008e32:	4b09      	ldr	r3, [pc, #36]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008e34:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	@ 0x2f0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <rfalNfcDataExchangeGetStatus+0xe8>
 8008e3c:	4b06      	ldr	r3, [pc, #24]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008e3e:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	@ 0x2f0
 8008e42:	e006      	b.n	8008e52 <rfalNfcDataExchangeGetStatus+0xf6>
            
            /* If set Sleep was succesfull keep restore the Sleep request signal */
            gNfcDev.dataExErr = ERR_SLEEP_REQ;
 8008e44:	4b04      	ldr	r3, [pc, #16]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008e46:	2220      	movs	r2, #32
 8008e48:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0
        }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
        
    }
    
    return gNfcDev.dataExErr;
 8008e4c:	4b02      	ldr	r3, [pc, #8]	@ (8008e58 <rfalNfcDataExchangeGetStatus+0xfc>)
 8008e4e:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	@ 0x2f0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	200006b0 	.word	0x200006b0
 8008e5c:	20000bae 	.word	0x20000bae
 8008e60:	20000aab 	.word	0x20000aab

08008e64 <rfalNfcPollTechDetetection>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollTechDetetection( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08a      	sub	sp, #40	@ 0x28
 8008e68:	af00      	add	r7, sp, #0
    ReturnCode           err;
    
    err = ERR_NONE;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    
    /*******************************************************************************/
    /* AP2P Technology Detection                                                   */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 8008e6e:	4b9a      	ldr	r3, [pc, #616]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008e70:	89db      	ldrh	r3, [r3, #14]
 8008e72:	f003 0310 	and.w	r3, r3, #16
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d05a      	beq.n	8008f30 <rfalNfcPollTechDetetection+0xcc>
 8008e7a:	4b97      	ldr	r3, [pc, #604]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008e7c:	889b      	ldrh	r3, [r3, #4]
 8008e7e:	f003 0310 	and.w	r3, r3, #16
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d054      	beq.n	8008f30 <rfalNfcPollTechDetetection+0xcc>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 8008e86:	4b94      	ldr	r3, [pc, #592]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008e88:	889b      	ldrh	r3, [r3, #4]
 8008e8a:	f023 0310 	bic.w	r3, r3, #16
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	4b91      	ldr	r3, [pc, #580]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008e92:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFC_DEP
    
        EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 8008e94:	4b90      	ldr	r3, [pc, #576]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008e96:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8008e9a:	4a8f      	ldr	r2, [pc, #572]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008e9c:	f892 204f 	ldrb.w	r2, [r2, #79]	@ 0x4f
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	2009      	movs	r0, #9
 8008ea4:	f005 f9b4 	bl	800e210 <rfalSetMode>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008eac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <rfalNfcPollTechDetetection+0x52>
 8008eb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008eb4:	e15d      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
        rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	f005 fd2e 	bl	800e918 <rfalSetErrorHandling>
        rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 8008ebc:	2040      	movs	r0, #64	@ 0x40
 8008ebe:	f005 fd51 	bl	800e964 <rfalSetFDTListen>
        rfalSetFDTPoll( RFAL_TIMING_NONE );
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	f005 fd38 	bl	800e938 <rfalSetFDTPoll>
        rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 8008ec8:	4884      	ldr	r0, [pc, #528]	@ (80090dc <rfalNfcPollTechDetetection+0x278>)
 8008eca:	f005 fd5f 	bl	800e98c <rfalSetGT>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                     /* Turns the Field On and starts GT timer */
 8008ece:	f005 fd8b 	bl	800e9e8 <rfalFieldOnAndStartGT>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008ed6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <rfalNfcPollTechDetetection+0x7c>
 8008edc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ede:	e148      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	487e      	ldr	r0, [pc, #504]	@ (80090e0 <rfalNfcPollTechDetetection+0x27c>)
 8008ee8:	f001 f892 	bl	800a010 <rfalNfcNfcDepActivate>
 8008eec:	4603      	mov	r3, r0
 8008eee:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if( err == ERR_NONE )
 8008ef0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d118      	bne.n	8008f28 <rfalNfcPollTechDetetection+0xc4>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 8008ef6:	4b78      	ldr	r3, [pc, #480]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008ef8:	885b      	ldrh	r3, [r3, #2]
 8008efa:	f043 0310 	orr.w	r3, r3, #16
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	4b75      	ldr	r3, [pc, #468]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008f02:	805a      	strh	r2, [r3, #2]
            
            gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 8008f04:	4b74      	ldr	r3, [pc, #464]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008f06:	2205      	movs	r2, #5
 8008f08:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 8008f0c:	4b72      	ldr	r3, [pc, #456]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008f0e:	2202      	movs	r2, #2
 8008f10:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
            gNfcDev.devCnt++;
 8008f14:	4b70      	ldr	r3, [pc, #448]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008f16:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	4b6e      	ldr	r3, [pc, #440]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008f20:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
            
            return ERR_NONE;
 8008f24:	2300      	movs	r3, #0
 8008f26:	e124      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
        }
        
        rfalFieldOff();
 8008f28:	f005 fdc0 	bl	800eaac <rfalFieldOff>
        return ERR_BUSY;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e120      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-A Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 8008f30:	4b69      	ldr	r3, [pc, #420]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008f32:	89db      	ldrh	r3, [r3, #14]
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d034      	beq.n	8008fa6 <rfalNfcPollTechDetetection+0x142>
 8008f3c:	4b66      	ldr	r3, [pc, #408]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008f3e:	889b      	ldrh	r3, [r3, #4]
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d02e      	beq.n	8008fa6 <rfalNfcPollTechDetetection+0x142>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 8008f48:	4b63      	ldr	r3, [pc, #396]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008f4a:	889b      	ldrh	r3, [r3, #4]
 8008f4c:	f023 0301 	bic.w	r3, r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	4b61      	ldr	r3, [pc, #388]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008f54:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCA
        {
            rfalNfcaSensRes sensRes;            
        
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 8008f56:	f003 fb05 	bl	800c564 <rfalNfcaPollerInitialize>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008f5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <rfalNfcPollTechDetetection+0x104>
 8008f64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f66:	e104      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 8008f68:	f005 fd3e 	bl	800e9e8 <rfalFieldOnAndStartGT>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008f70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <rfalNfcPollTechDetetection+0x116>
 8008f76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f78:	e0fb      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
                                                                                       
            err = rfalNfcaPollerTechnologyDetection( gNfcDev.disc.compMode, &sensRes );/* Poll for NFC-A devices */
 8008f7a:	4b57      	ldr	r3, [pc, #348]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008f7c:	7b1b      	ldrb	r3, [r3, #12]
 8008f7e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8008f82:	4611      	mov	r1, r2
 8008f84:	4618      	mov	r0, r3
 8008f86:	f003 fb39 	bl	800c5fc <rfalNfcaPollerTechnologyDetection>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
            if( err == ERR_NONE )
 8008f8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d106      	bne.n	8008fa2 <rfalNfcPollTechDetetection+0x13e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 8008f94:	4b50      	ldr	r3, [pc, #320]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008f96:	885b      	ldrh	r3, [r3, #2]
 8008f98:	f043 0301 	orr.w	r3, r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008fa0:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e0e5      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-B Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 8008fa6:	4b4c      	ldr	r3, [pc, #304]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008fa8:	89db      	ldrh	r3, [r3, #14]
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d035      	beq.n	800901e <rfalNfcPollTechDetetection+0x1ba>
 8008fb2:	4b49      	ldr	r3, [pc, #292]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008fb4:	889b      	ldrh	r3, [r3, #4]
 8008fb6:	f003 0302 	and.w	r3, r3, #2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d02f      	beq.n	800901e <rfalNfcPollTechDetetection+0x1ba>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 8008fbe:	4b46      	ldr	r3, [pc, #280]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008fc0:	889b      	ldrh	r3, [r3, #4]
 8008fc2:	f023 0302 	bic.w	r3, r3, #2
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	4b43      	ldr	r3, [pc, #268]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008fca:	809a      	strh	r2, [r3, #4]
    #if RFAL_FEATURE_NFCB
        {
            rfalNfcbSensbRes sensbRes;
            uint8_t          sensbResLen;            
        
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                           /* Initialize RFAL for NFC-B */
 8008fcc:	f003 fee8 	bl	800cda0 <rfalNfcbPollerInitialize>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008fd4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <rfalNfcPollTechDetetection+0x17a>
 8008fda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008fdc:	e0c9      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 8008fde:	f005 fd03 	bl	800e9e8 <rfalFieldOnAndStartGT>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008fe6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <rfalNfcPollTechDetetection+0x18c>
 8008fec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008fee:	e0c0      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
                                                                                                       
            err = rfalNfcbPollerTechnologyDetection( gNfcDev.disc.compMode, &sensbRes, &sensbResLen ); /* Poll for NFC-B devices */
 8008ff0:	4b39      	ldr	r3, [pc, #228]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8008ff2:	7b1b      	ldrb	r3, [r3, #12]
 8008ff4:	f107 0213 	add.w	r2, r7, #19
 8008ff8:	f107 0114 	add.w	r1, r7, #20
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f003 ffe1 	bl	800cfc4 <rfalNfcbPollerTechnologyDetection>
 8009002:	4603      	mov	r3, r0
 8009004:	84fb      	strh	r3, [r7, #38]	@ 0x26
            if( err == ERR_NONE )
 8009006:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009008:	2b00      	cmp	r3, #0
 800900a:	d106      	bne.n	800901a <rfalNfcPollTechDetetection+0x1b6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 800900c:	4b32      	ldr	r3, [pc, #200]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 800900e:	885b      	ldrh	r3, [r3, #2]
 8009010:	f043 0302 	orr.w	r3, r3, #2
 8009014:	b29a      	uxth	r2, r3
 8009016:	4b30      	ldr	r3, [pc, #192]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8009018:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 800901a:	2302      	movs	r3, #2
 800901c:	e0a9      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
    }
    
    /*******************************************************************************/
    /* Passive NFC-F Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 800901e:	4b2e      	ldr	r3, [pc, #184]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8009020:	89db      	ldrh	r3, [r3, #14]
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d031      	beq.n	800908e <rfalNfcPollTechDetetection+0x22a>
 800902a:	4b2b      	ldr	r3, [pc, #172]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 800902c:	889b      	ldrh	r3, [r3, #4]
 800902e:	f003 0304 	and.w	r3, r3, #4
 8009032:	2b00      	cmp	r3, #0
 8009034:	d02b      	beq.n	800908e <rfalNfcPollTechDetetection+0x22a>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8009036:	4b28      	ldr	r3, [pc, #160]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8009038:	889b      	ldrh	r3, [r3, #4]
 800903a:	f023 0304 	bic.w	r3, r3, #4
 800903e:	b29a      	uxth	r2, r3
 8009040:	4b25      	ldr	r3, [pc, #148]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8009042:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCF
    
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );          /* Initialize RFAL for NFC-F */
 8009044:	4b24      	ldr	r3, [pc, #144]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8009046:	7cdb      	ldrb	r3, [r3, #19]
 8009048:	4618      	mov	r0, r3
 800904a:	f004 fa83 	bl	800d554 <rfalNfcfPollerInitialize>
 800904e:	4603      	mov	r3, r0
 8009050:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009052:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <rfalNfcPollTechDetetection+0x1f8>
 8009058:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800905a:	e08a      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 800905c:	f005 fcc4 	bl	800e9e8 <rfalFieldOnAndStartGT>
 8009060:	4603      	mov	r3, r0
 8009062:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009064:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <rfalNfcPollTechDetetection+0x20a>
 800906a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800906c:	e081      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
                                                                                      
        err = rfalNfcfPollerCheckPresence();                                          /* Poll for NFC-F devices */
 800906e:	f004 fabf 	bl	800d5f0 <rfalNfcfPollerCheckPresence>
 8009072:	4603      	mov	r3, r0
 8009074:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if( err == ERR_NONE )
 8009076:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009078:	2b00      	cmp	r3, #0
 800907a:	d106      	bne.n	800908a <rfalNfcPollTechDetetection+0x226>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 800907c:	4b16      	ldr	r3, [pc, #88]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 800907e:	885b      	ldrh	r3, [r3, #2]
 8009080:	f043 0304 	orr.w	r3, r3, #4
 8009084:	b29a      	uxth	r2, r3
 8009086:	4b14      	ldr	r3, [pc, #80]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8009088:	805a      	strh	r2, [r3, #2]
        }
        
        return ERR_BUSY;
 800908a:	2302      	movs	r3, #2
 800908c:	e071      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-V Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 800908e:	4b12      	ldr	r3, [pc, #72]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 8009090:	89db      	ldrh	r3, [r3, #14]
 8009092:	f003 0308 	and.w	r3, r3, #8
 8009096:	2b00      	cmp	r3, #0
 8009098:	d036      	beq.n	8009108 <rfalNfcPollTechDetetection+0x2a4>
 800909a:	4b0f      	ldr	r3, [pc, #60]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 800909c:	889b      	ldrh	r3, [r3, #4]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d030      	beq.n	8009108 <rfalNfcPollTechDetetection+0x2a4>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 80090a6:	4b0c      	ldr	r3, [pc, #48]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 80090a8:	889b      	ldrh	r3, [r3, #4]
 80090aa:	f023 0308 	bic.w	r3, r3, #8
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	4b09      	ldr	r3, [pc, #36]	@ (80090d8 <rfalNfcPollTechDetetection+0x274>)
 80090b2:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCV
        {
            rfalNfcvInventoryRes invRes;
        
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                               /* Initialize RFAL for NFC-V */
 80090b4:	f004 fca8 	bl	800da08 <rfalNfcvPollerInitialize>
 80090b8:	4603      	mov	r3, r0
 80090ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80090bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <rfalNfcPollTechDetetection+0x262>
 80090c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80090c4:	e055      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 80090c6:	f005 fc8f 	bl	800e9e8 <rfalFieldOnAndStartGT>
 80090ca:	4603      	mov	r3, r0
 80090cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80090ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d007      	beq.n	80090e4 <rfalNfcPollTechDetetection+0x280>
 80090d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80090d6:	e04c      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
 80090d8:	200006b0 	.word	0x200006b0
 80090dc:	00063510 	.word	0x00063510
 80090e0:	20000740 	.word	0x20000740
                                                                                          
            err = rfalNfcvPollerCheckPresence( &invRes );                                 /* Poll for NFC-V devices */
 80090e4:	1d3b      	adds	r3, r7, #4
 80090e6:	4618      	mov	r0, r3
 80090e8:	f004 fcb2 	bl	800da50 <rfalNfcvPollerCheckPresence>
 80090ec:	4603      	mov	r3, r0
 80090ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
            if( err == ERR_NONE )
 80090f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <rfalNfcPollTechDetetection+0x2a0>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 80090f6:	4b21      	ldr	r3, [pc, #132]	@ (800917c <rfalNfcPollTechDetetection+0x318>)
 80090f8:	885b      	ldrh	r3, [r3, #2]
 80090fa:	f043 0308 	orr.w	r3, r3, #8
 80090fe:	b29a      	uxth	r2, r3
 8009100:	4b1e      	ldr	r3, [pc, #120]	@ (800917c <rfalNfcPollTechDetetection+0x318>)
 8009102:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 8009104:	2302      	movs	r3, #2
 8009106:	e034      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive Proprietary Technology ST25TB                                       */
    /*******************************************************************************/  
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 8009108:	4b1c      	ldr	r3, [pc, #112]	@ (800917c <rfalNfcPollTechDetetection+0x318>)
 800910a:	89db      	ldrh	r3, [r3, #14]
 800910c:	f003 0320 	and.w	r3, r3, #32
 8009110:	2b00      	cmp	r3, #0
 8009112:	d02d      	beq.n	8009170 <rfalNfcPollTechDetetection+0x30c>
 8009114:	4b19      	ldr	r3, [pc, #100]	@ (800917c <rfalNfcPollTechDetetection+0x318>)
 8009116:	889b      	ldrh	r3, [r3, #4]
 8009118:	f003 0320 	and.w	r3, r3, #32
 800911c:	2b00      	cmp	r3, #0
 800911e:	d027      	beq.n	8009170 <rfalNfcPollTechDetetection+0x30c>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 8009120:	4b16      	ldr	r3, [pc, #88]	@ (800917c <rfalNfcPollTechDetetection+0x318>)
 8009122:	889b      	ldrh	r3, [r3, #4]
 8009124:	f023 0320 	bic.w	r3, r3, #32
 8009128:	b29a      	uxth	r2, r3
 800912a:	4b14      	ldr	r3, [pc, #80]	@ (800917c <rfalNfcPollTechDetetection+0x318>)
 800912c:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_ST25TB
        
        EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                             /* Initialize RFAL for NFC-V */
 800912e:	f007 ff2e 	bl	8010f8e <rfalSt25tbPollerInitialize>
 8009132:	4603      	mov	r3, r0
 8009134:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009136:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <rfalNfcPollTechDetetection+0x2dc>
 800913c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800913e:	e018      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 8009140:	f005 fc52 	bl	800e9e8 <rfalFieldOnAndStartGT>
 8009144:	4603      	mov	r3, r0
 8009146:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009148:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <rfalNfcPollTechDetetection+0x2ee>
 800914e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009150:	e00f      	b.n	8009172 <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalSt25tbPollerCheckPresence( NULL );                                  /* Poll for ST25TB devices */
 8009152:	2000      	movs	r0, #0
 8009154:	f007 ff22 	bl	8010f9c <rfalSt25tbPollerCheckPresence>
 8009158:	4603      	mov	r3, r0
 800915a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if( err == ERR_NONE )
 800915c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800915e:	2b00      	cmp	r3, #0
 8009160:	d106      	bne.n	8009170 <rfalNfcPollTechDetetection+0x30c>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 8009162:	4b06      	ldr	r3, [pc, #24]	@ (800917c <rfalNfcPollTechDetetection+0x318>)
 8009164:	885b      	ldrh	r3, [r3, #2]
 8009166:	f043 0320 	orr.w	r3, r3, #32
 800916a:	b29a      	uxth	r2, r3
 800916c:	4b03      	ldr	r3, [pc, #12]	@ (800917c <rfalNfcPollTechDetetection+0x318>)
 800916e:	805a      	strh	r2, [r3, #2]
        }
        
    #endif /* RFAL_FEATURE_ST25TB */
    }
    
    return ERR_NONE;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3728      	adds	r7, #40	@ 0x28
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	200006b0 	.word	0x200006b0

08009180 <rfalNfcPollCollResolution>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollCollResolution( void )
{
 8009180:	b5b0      	push	{r4, r5, r7, lr}
 8009182:	b09e      	sub	sp, #120	@ 0x78
 8009184:	af00      	add	r7, sp, #0
    uint8_t    i;
    uint8_t    devCnt;
    ReturnCode err;
    
    err    = ERR_NONE;
 8009186:	2300      	movs	r3, #0
 8009188:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    devCnt = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    i      = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    NO_WARNING(err);
    NO_WARNING(devCnt);
    NO_WARNING(i);
    
    /* Check if device limit has been reached */
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 8009198:	4bb5      	ldr	r3, [pc, #724]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 800919a:	f893 22e8 	ldrb.w	r2, [r3, #744]	@ 0x2e8
 800919e:	4bb4      	ldr	r3, [pc, #720]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80091a0:	7c9b      	ldrb	r3, [r3, #18]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d301      	bcc.n	80091aa <rfalNfcPollCollResolution+0x2a>
    {
        return ERR_NONE;
 80091a6:	2300      	movs	r3, #0
 80091a8:	e2b1      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-A Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCA
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 80091aa:	4bb1      	ldr	r3, [pc, #708]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80091ac:	885b      	ldrh	r3, [r3, #2]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 8084 	beq.w	80092c0 <rfalNfcPollCollResolution+0x140>
 80091b8:	4bad      	ldr	r3, [pc, #692]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80091ba:	889b      	ldrh	r3, [r3, #4]
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d07d      	beq.n	80092c0 <rfalNfcPollCollResolution+0x140>
    {
        rfalNfcaListenDevice nfcaDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 80091c4:	4baa      	ldr	r3, [pc, #680]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80091c6:	889b      	ldrh	r3, [r3, #4]
 80091c8:	f023 0301 	bic.w	r3, r3, #1
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	4ba8      	ldr	r3, [pc, #672]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80091d0:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcaPollerInitialize());                                /* Initialize RFAL for NFC-A */
 80091d2:	f003 f9c7 	bl	800c564 <rfalNfcaPollerInitialize>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 80091dc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <rfalNfcPollCollResolution+0x6a>
 80091e4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80091e8:	e291      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 80091ea:	f005 fbfd 	bl	800e9e8 <rfalFieldOnAndStartGT>
 80091ee:	4603      	mov	r3, r0
 80091f0:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 80091f4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <rfalNfcPollCollResolution+0x82>
 80091fc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009200:	e285      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcaPollerFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt );
 8009202:	4b9b      	ldr	r3, [pc, #620]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 8009204:	7b18      	ldrb	r0, [r3, #12]
 8009206:	4b9a      	ldr	r3, [pc, #616]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 8009208:	7c9a      	ldrb	r2, [r3, #18]
 800920a:	4b99      	ldr	r3, [pc, #612]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 800920c:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	b2d9      	uxtb	r1, r3
 8009214:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 8009218:	1d3a      	adds	r2, r7, #4
 800921a:	f003 fbde 	bl	800c9da <rfalNfcaPollerFullCollisionResolution>
 800921e:	4603      	mov	r3, r0
 8009220:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8009224:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009228:	2b00      	cmp	r3, #0
 800922a:	d147      	bne.n	80092bc <rfalNfcPollCollResolution+0x13c>
 800922c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8009230:	2b00      	cmp	r3, #0
 8009232:	d043      	beq.n	80092bc <rfalNfcPollCollResolution+0x13c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8009234:	2300      	movs	r3, #0
 8009236:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800923a:	e039      	b.n	80092b0 <rfalNfcPollCollResolution+0x130>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 800923c:	4b8c      	ldr	r3, [pc, #560]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 800923e:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009242:	4619      	mov	r1, r3
 8009244:	4a8a      	ldr	r2, [pc, #552]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 8009246:	460b      	mov	r3, r1
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	1a5b      	subs	r3, r3, r1
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	4413      	add	r3, r2
 8009250:	3390      	adds	r3, #144	@ 0x90
 8009252:	2200      	movs	r2, #0
 8009254:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8009256:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800925a:	4b85      	ldr	r3, [pc, #532]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 800925c:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009260:	4618      	mov	r0, r3
 8009262:	4983      	ldr	r1, [pc, #524]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 8009264:	4603      	mov	r3, r0
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	1a1b      	subs	r3, r3, r0
 800926a:	00db      	lsls	r3, r3, #3
 800926c:	440b      	add	r3, r1
 800926e:	3390      	adds	r3, #144	@ 0x90
 8009270:	2116      	movs	r1, #22
 8009272:	fb01 f202 	mul.w	r2, r1, r2
 8009276:	3278      	adds	r2, #120	@ 0x78
 8009278:	443a      	add	r2, r7
 800927a:	3a74      	subs	r2, #116	@ 0x74
 800927c:	3301      	adds	r3, #1
 800927e:	6811      	ldr	r1, [r2, #0]
 8009280:	6855      	ldr	r5, [r2, #4]
 8009282:	6894      	ldr	r4, [r2, #8]
 8009284:	68d0      	ldr	r0, [r2, #12]
 8009286:	6019      	str	r1, [r3, #0]
 8009288:	605d      	str	r5, [r3, #4]
 800928a:	609c      	str	r4, [r3, #8]
 800928c:	60d8      	str	r0, [r3, #12]
 800928e:	6911      	ldr	r1, [r2, #16]
 8009290:	6119      	str	r1, [r3, #16]
 8009292:	8a92      	ldrh	r2, [r2, #20]
 8009294:	829a      	strh	r2, [r3, #20]
                gNfcDev.devCnt++;
 8009296:	4b76      	ldr	r3, [pc, #472]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 8009298:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 800929c:	3301      	adds	r3, #1
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	4b73      	ldr	r3, [pc, #460]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80092a2:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 80092a6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80092aa:	3301      	adds	r3, #1
 80092ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80092b0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80092b4:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d3bf      	bcc.n	800923c <rfalNfcPollCollResolution+0xbc>
            }
        }
        
        return ERR_BUSY;
 80092bc:	2302      	movs	r3, #2
 80092be:	e226      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-B Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 80092c0:	4b6b      	ldr	r3, [pc, #428]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80092c2:	885b      	ldrh	r3, [r3, #2]
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 8084 	beq.w	80093d6 <rfalNfcPollCollResolution+0x256>
 80092ce:	4b68      	ldr	r3, [pc, #416]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80092d0:	889b      	ldrh	r3, [r3, #4]
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d07d      	beq.n	80093d6 <rfalNfcPollCollResolution+0x256>
    {
        rfalNfcbListenDevice nfcbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 80092da:	4b65      	ldr	r3, [pc, #404]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80092dc:	889b      	ldrh	r3, [r3, #4]
 80092de:	f023 0302 	bic.w	r3, r3, #2
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	4b62      	ldr	r3, [pc, #392]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80092e6:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                                /* Initialize RFAL for NFC-B */
 80092e8:	f003 fd5a 	bl	800cda0 <rfalNfcbPollerInitialize>
 80092ec:	4603      	mov	r3, r0
 80092ee:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 80092f2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <rfalNfcPollCollResolution+0x180>
 80092fa:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80092fe:	e206      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8009300:	f005 fb72 	bl	800e9e8 <rfalFieldOnAndStartGT>
 8009304:	4603      	mov	r3, r0
 8009306:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 800930a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <rfalNfcPollCollResolution+0x198>
 8009312:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009316:	e1fa      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcbPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt );
 8009318:	4b55      	ldr	r3, [pc, #340]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 800931a:	7b18      	ldrb	r0, [r3, #12]
 800931c:	4b54      	ldr	r3, [pc, #336]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 800931e:	7c9a      	ldrb	r2, [r3, #18]
 8009320:	4b53      	ldr	r3, [pc, #332]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 8009322:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	b2d9      	uxtb	r1, r3
 800932a:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 800932e:	1d3a      	adds	r2, r7, #4
 8009330:	f003 fe5a 	bl	800cfe8 <rfalNfcbPollerCollisionResolution>
 8009334:	4603      	mov	r3, r0
 8009336:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 800933a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800933e:	2b00      	cmp	r3, #0
 8009340:	d147      	bne.n	80093d2 <rfalNfcPollCollResolution+0x252>
 8009342:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8009346:	2b00      	cmp	r3, #0
 8009348:	d043      	beq.n	80093d2 <rfalNfcPollCollResolution+0x252>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 800934a:	2300      	movs	r3, #0
 800934c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009350:	e039      	b.n	80093c6 <rfalNfcPollCollResolution+0x246>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8009352:	4b47      	ldr	r3, [pc, #284]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 8009354:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009358:	4619      	mov	r1, r3
 800935a:	4a45      	ldr	r2, [pc, #276]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 800935c:	460b      	mov	r3, r1
 800935e:	011b      	lsls	r3, r3, #4
 8009360:	1a5b      	subs	r3, r3, r1
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	4413      	add	r3, r2
 8009366:	3390      	adds	r3, #144	@ 0x90
 8009368:	2201      	movs	r2, #1
 800936a:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 800936c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8009370:	4b3f      	ldr	r3, [pc, #252]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 8009372:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009376:	4618      	mov	r0, r3
 8009378:	493d      	ldr	r1, [pc, #244]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 800937a:	4603      	mov	r3, r0
 800937c:	011b      	lsls	r3, r3, #4
 800937e:	1a1b      	subs	r3, r3, r0
 8009380:	00db      	lsls	r3, r3, #3
 8009382:	440b      	add	r3, r1
 8009384:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8009388:	4613      	mov	r3, r2
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	1a9b      	subs	r3, r3, r2
 800938e:	3378      	adds	r3, #120	@ 0x78
 8009390:	443b      	add	r3, r7
 8009392:	f1a3 0274 	sub.w	r2, r3, #116	@ 0x74
 8009396:	1c4b      	adds	r3, r1, #1
 8009398:	6814      	ldr	r4, [r2, #0]
 800939a:	6850      	ldr	r0, [r2, #4]
 800939c:	6891      	ldr	r1, [r2, #8]
 800939e:	601c      	str	r4, [r3, #0]
 80093a0:	6058      	str	r0, [r3, #4]
 80093a2:	6099      	str	r1, [r3, #8]
 80093a4:	8991      	ldrh	r1, [r2, #12]
 80093a6:	7b92      	ldrb	r2, [r2, #14]
 80093a8:	8199      	strh	r1, [r3, #12]
 80093aa:	739a      	strb	r2, [r3, #14]
                gNfcDev.devCnt++;
 80093ac:	4b30      	ldr	r3, [pc, #192]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80093ae:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 80093b2:	3301      	adds	r3, #1
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	4b2e      	ldr	r3, [pc, #184]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80093b8:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 80093bc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80093c0:	3301      	adds	r3, #1
 80093c2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80093c6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80093ca:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d3bf      	bcc.n	8009352 <rfalNfcPollCollResolution+0x1d2>
            }
        }
        
        return ERR_BUSY;
 80093d2:	2302      	movs	r3, #2
 80093d4:	e19b      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-F Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCF
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 80093d6:	4b26      	ldr	r3, [pc, #152]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80093d8:	885b      	ldrh	r3, [r3, #2]
 80093da:	f003 0304 	and.w	r3, r3, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 808e 	beq.w	8009500 <rfalNfcPollCollResolution+0x380>
 80093e4:	4b22      	ldr	r3, [pc, #136]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80093e6:	889b      	ldrh	r3, [r3, #4]
 80093e8:	f003 0304 	and.w	r3, r3, #4
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 8087 	beq.w	8009500 <rfalNfcPollCollResolution+0x380>
    {
        rfalNfcfListenDevice nfcfDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 80093f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80093f4:	889b      	ldrh	r3, [r3, #4]
 80093f6:	f023 0304 	bic.w	r3, r3, #4
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 80093fe:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));           /* Initialize RFAL for NFC-F */
 8009400:	4b1b      	ldr	r3, [pc, #108]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 8009402:	7cdb      	ldrb	r3, [r3, #19]
 8009404:	4618      	mov	r0, r3
 8009406:	f004 f8a5 	bl	800d554 <rfalNfcfPollerInitialize>
 800940a:	4603      	mov	r3, r0
 800940c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8009410:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <rfalNfcPollCollResolution+0x29e>
 8009418:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800941c:	e177      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 800941e:	f005 fae3 	bl	800e9e8 <rfalFieldOnAndStartGT>
 8009422:	4603      	mov	r3, r0
 8009424:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8009428:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <rfalNfcPollCollResolution+0x2b6>
 8009430:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009434:	e16b      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcfPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt );
 8009436:	4b0e      	ldr	r3, [pc, #56]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 8009438:	7b18      	ldrb	r0, [r3, #12]
 800943a:	4b0d      	ldr	r3, [pc, #52]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 800943c:	7c9a      	ldrb	r2, [r3, #18]
 800943e:	4b0c      	ldr	r3, [pc, #48]	@ (8009470 <rfalNfcPollCollResolution+0x2f0>)
 8009440:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	b2d9      	uxtb	r1, r3
 8009448:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 800944c:	1d3a      	adds	r2, r7, #4
 800944e:	f004 f8ef 	bl	800d630 <rfalNfcfPollerCollisionResolution>
 8009452:	4603      	mov	r3, r0
 8009454:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8009458:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800945c:	2b00      	cmp	r3, #0
 800945e:	d14d      	bne.n	80094fc <rfalNfcPollCollResolution+0x37c>
 8009460:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8009464:	2b00      	cmp	r3, #0
 8009466:	d049      	beq.n	80094fc <rfalNfcPollCollResolution+0x37c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8009468:	2300      	movs	r3, #0
 800946a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800946e:	e03f      	b.n	80094f0 <rfalNfcPollCollResolution+0x370>
 8009470:	200006b0 	.word	0x200006b0
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8009474:	4ba8      	ldr	r3, [pc, #672]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009476:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 800947a:	4619      	mov	r1, r3
 800947c:	4aa6      	ldr	r2, [pc, #664]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 800947e:	460b      	mov	r3, r1
 8009480:	011b      	lsls	r3, r3, #4
 8009482:	1a5b      	subs	r3, r3, r1
 8009484:	00db      	lsls	r3, r3, #3
 8009486:	4413      	add	r3, r2
 8009488:	3390      	adds	r3, #144	@ 0x90
 800948a:	2202      	movs	r2, #2
 800948c:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 800948e:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8009492:	4ba1      	ldr	r3, [pc, #644]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009494:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009498:	4618      	mov	r0, r3
 800949a:	499f      	ldr	r1, [pc, #636]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 800949c:	4603      	mov	r3, r0
 800949e:	011b      	lsls	r3, r3, #4
 80094a0:	1a1b      	subs	r3, r3, r0
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	440b      	add	r3, r1
 80094a6:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80094aa:	4613      	mov	r3, r2
 80094ac:	00db      	lsls	r3, r3, #3
 80094ae:	4413      	add	r3, r2
 80094b0:	005b      	lsls	r3, r3, #1
 80094b2:	4413      	add	r3, r2
 80094b4:	3378      	adds	r3, #120	@ 0x78
 80094b6:	443b      	add	r3, r7
 80094b8:	f1a3 0274 	sub.w	r2, r3, #116	@ 0x74
 80094bc:	1c4b      	adds	r3, r1, #1
 80094be:	6815      	ldr	r5, [r2, #0]
 80094c0:	6854      	ldr	r4, [r2, #4]
 80094c2:	6890      	ldr	r0, [r2, #8]
 80094c4:	68d1      	ldr	r1, [r2, #12]
 80094c6:	601d      	str	r5, [r3, #0]
 80094c8:	605c      	str	r4, [r3, #4]
 80094ca:	6098      	str	r0, [r3, #8]
 80094cc:	60d9      	str	r1, [r3, #12]
 80094ce:	8a11      	ldrh	r1, [r2, #16]
 80094d0:	7c92      	ldrb	r2, [r2, #18]
 80094d2:	8219      	strh	r1, [r3, #16]
 80094d4:	749a      	strb	r2, [r3, #18]
                gNfcDev.devCnt++;
 80094d6:	4b90      	ldr	r3, [pc, #576]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 80094d8:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 80094dc:	3301      	adds	r3, #1
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	4b8d      	ldr	r3, [pc, #564]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 80094e2:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80094e6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80094ea:	3301      	adds	r3, #1
 80094ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80094f0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80094f4:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d3bb      	bcc.n	8009474 <rfalNfcPollCollResolution+0x2f4>
            }
        }
        
        return ERR_BUSY;
 80094fc:	2302      	movs	r3, #2
 80094fe:	e106      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-V Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCV
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 8009500:	4b85      	ldr	r3, [pc, #532]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009502:	885b      	ldrh	r3, [r3, #2]
 8009504:	f003 0308 	and.w	r3, r3, #8
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 8083 	beq.w	8009614 <rfalNfcPollCollResolution+0x494>
 800950e:	4b82      	ldr	r3, [pc, #520]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009510:	889b      	ldrh	r3, [r3, #4]
 8009512:	f003 0308 	and.w	r3, r3, #8
 8009516:	2b00      	cmp	r3, #0
 8009518:	d07c      	beq.n	8009614 <rfalNfcPollCollResolution+0x494>
    {
        rfalNfcvListenDevice nfcvDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 800951a:	4b7f      	ldr	r3, [pc, #508]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 800951c:	889b      	ldrh	r3, [r3, #4]
 800951e:	f023 0308 	bic.w	r3, r3, #8
 8009522:	b29a      	uxth	r2, r3
 8009524:	4b7c      	ldr	r3, [pc, #496]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009526:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                                /* Initialize RFAL for NFC-V */
 8009528:	f004 fa6e 	bl	800da08 <rfalNfcvPollerInitialize>
 800952c:	4603      	mov	r3, r0
 800952e:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8009532:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <rfalNfcPollCollResolution+0x3c0>
 800953a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800953e:	e0e6      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8009540:	f005 fa52 	bl	800e9e8 <rfalFieldOnAndStartGT>
 8009544:	4603      	mov	r3, r0
 8009546:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 800954a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <rfalNfcPollCollResolution+0x3d8>
 8009552:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009556:	e0da      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 8009558:	4b6f      	ldr	r3, [pc, #444]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 800955a:	7c9a      	ldrb	r2, [r3, #18]
 800955c:	4b6e      	ldr	r3, [pc, #440]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 800955e:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	b2d9      	uxtb	r1, r3
 8009566:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 800956a:	1d3a      	adds	r2, r7, #4
 800956c:	2000      	movs	r0, #0
 800956e:	f004 faf3 	bl	800db58 <rfalNfcvPollerCollisionResolution>
 8009572:	4603      	mov	r3, r0
 8009574:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8009578:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800957c:	2b00      	cmp	r3, #0
 800957e:	d147      	bne.n	8009610 <rfalNfcPollCollResolution+0x490>
 8009580:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8009584:	2b00      	cmp	r3, #0
 8009586:	d043      	beq.n	8009610 <rfalNfcPollCollResolution+0x490>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8009588:	2300      	movs	r3, #0
 800958a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800958e:	e039      	b.n	8009604 <rfalNfcPollCollResolution+0x484>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 8009590:	4b61      	ldr	r3, [pc, #388]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009592:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009596:	4619      	mov	r1, r3
 8009598:	4a5f      	ldr	r2, [pc, #380]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 800959a:	460b      	mov	r3, r1
 800959c:	011b      	lsls	r3, r3, #4
 800959e:	1a5b      	subs	r3, r3, r1
 80095a0:	00db      	lsls	r3, r3, #3
 80095a2:	4413      	add	r3, r2
 80095a4:	3390      	adds	r3, #144	@ 0x90
 80095a6:	2203      	movs	r2, #3
 80095a8:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80095aa:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80095ae:	4b5a      	ldr	r3, [pc, #360]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 80095b0:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 80095b4:	4618      	mov	r0, r3
 80095b6:	4958      	ldr	r1, [pc, #352]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 80095b8:	4603      	mov	r3, r0
 80095ba:	011b      	lsls	r3, r3, #4
 80095bc:	1a1b      	subs	r3, r3, r0
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	440b      	add	r3, r1
 80095c2:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80095c6:	4613      	mov	r3, r2
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	3378      	adds	r3, #120	@ 0x78
 80095d2:	443b      	add	r3, r7
 80095d4:	f1a3 0274 	sub.w	r2, r3, #116	@ 0x74
 80095d8:	1c4b      	adds	r3, r1, #1
 80095da:	6814      	ldr	r4, [r2, #0]
 80095dc:	6850      	ldr	r0, [r2, #4]
 80095de:	6891      	ldr	r1, [r2, #8]
 80095e0:	601c      	str	r4, [r3, #0]
 80095e2:	6058      	str	r0, [r3, #4]
 80095e4:	6099      	str	r1, [r3, #8]
 80095e6:	7b12      	ldrb	r2, [r2, #12]
 80095e8:	731a      	strb	r2, [r3, #12]
                gNfcDev.devCnt++;
 80095ea:	4b4b      	ldr	r3, [pc, #300]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 80095ec:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 80095f0:	3301      	adds	r3, #1
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	4b48      	ldr	r3, [pc, #288]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 80095f6:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80095fa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80095fe:	3301      	adds	r3, #1
 8009600:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009604:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8009608:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800960c:	429a      	cmp	r2, r3
 800960e:	d3bf      	bcc.n	8009590 <rfalNfcPollCollResolution+0x410>
            }
        }
        
        return ERR_BUSY;
 8009610:	2302      	movs	r3, #2
 8009612:	e07c      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* ST25TB Collision Resolution                                                 */
    /*******************************************************************************/
#if RFAL_FEATURE_ST25TB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 8009614:	4b40      	ldr	r3, [pc, #256]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009616:	885b      	ldrh	r3, [r3, #2]
 8009618:	f003 0320 	and.w	r3, r3, #32
 800961c:	2b00      	cmp	r3, #0
 800961e:	d075      	beq.n	800970c <rfalNfcPollCollResolution+0x58c>
 8009620:	4b3d      	ldr	r3, [pc, #244]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009622:	889b      	ldrh	r3, [r3, #4]
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	d06f      	beq.n	800970c <rfalNfcPollCollResolution+0x58c>
    {
        rfalSt25tbListenDevice st25tbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800962c:	4b3a      	ldr	r3, [pc, #232]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 800962e:	889b      	ldrh	r3, [r3, #4]
 8009630:	f023 0320 	bic.w	r3, r3, #32
 8009634:	b29a      	uxth	r2, r3
 8009636:	4b38      	ldr	r3, [pc, #224]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009638:	809a      	strh	r2, [r3, #4]
        
        rfalSt25tbPollerInitialize();                                                 /* Initialize RFAL for ST25TB */
 800963a:	f007 fca8 	bl	8010f8e <rfalSt25tbPollerInitialize>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 800963e:	f005 f9d3 	bl	800e9e8 <rfalFieldOnAndStartGT>
 8009642:	4603      	mov	r3, r0
 8009644:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8009648:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <rfalNfcPollCollResolution+0x4d6>
 8009650:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009654:	e05b      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
        
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 8009656:	4b30      	ldr	r3, [pc, #192]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009658:	7c9a      	ldrb	r2, [r3, #18]
 800965a:	4b2f      	ldr	r3, [pc, #188]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 800965c:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f107 0273 	add.w	r2, r7, #115	@ 0x73
 8009668:	1d39      	adds	r1, r7, #4
 800966a:	4618      	mov	r0, r3
 800966c:	f007 fd8c 	bl	8011188 <rfalSt25tbPollerCollisionResolution>
 8009670:	4603      	mov	r3, r0
 8009672:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8009676:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800967a:	2b00      	cmp	r3, #0
 800967c:	d144      	bne.n	8009708 <rfalNfcPollCollResolution+0x588>
 800967e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8009682:	2b00      	cmp	r3, #0
 8009684:	d040      	beq.n	8009708 <rfalNfcPollCollResolution+0x588>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8009686:	2300      	movs	r3, #0
 8009688:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800968c:	e036      	b.n	80096fc <rfalNfcPollCollResolution+0x57c>
            {
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 800968e:	4b22      	ldr	r3, [pc, #136]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009690:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009694:	4619      	mov	r1, r3
 8009696:	4a20      	ldr	r2, [pc, #128]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 8009698:	460b      	mov	r3, r1
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	1a5b      	subs	r3, r3, r1
 800969e:	00db      	lsls	r3, r3, #3
 80096a0:	4413      	add	r3, r2
 80096a2:	3390      	adds	r3, #144	@ 0x90
 80096a4:	2204      	movs	r2, #4
 80096a6:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 80096a8:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80096ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 80096ae:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 80096b2:	4618      	mov	r0, r3
 80096b4:	4918      	ldr	r1, [pc, #96]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 80096b6:	4603      	mov	r3, r0
 80096b8:	011b      	lsls	r3, r3, #4
 80096ba:	1a1b      	subs	r3, r3, r0
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	440b      	add	r3, r1
 80096c0:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	3378      	adds	r3, #120	@ 0x78
 80096ce:	443b      	add	r3, r7
 80096d0:	f1a3 0274 	sub.w	r2, r3, #116	@ 0x74
 80096d4:	1c4b      	adds	r3, r1, #1
 80096d6:	6810      	ldr	r0, [r2, #0]
 80096d8:	6851      	ldr	r1, [r2, #4]
 80096da:	6018      	str	r0, [r3, #0]
 80096dc:	6059      	str	r1, [r3, #4]
 80096de:	8912      	ldrh	r2, [r2, #8]
 80096e0:	811a      	strh	r2, [r3, #8]
                gNfcDev.devCnt++;
 80096e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 80096e4:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 80096e8:	3301      	adds	r3, #1
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009718 <rfalNfcPollCollResolution+0x598>)
 80096ee:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80096f2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80096f6:	3301      	adds	r3, #1
 80096f8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80096fc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8009700:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8009704:	429a      	cmp	r2, r3
 8009706:	d3c2      	bcc.n	800968e <rfalNfcPollCollResolution+0x50e>
            }
        }
        
        return ERR_BUSY;
 8009708:	2302      	movs	r3, #2
 800970a:	e000      	b.n	800970e <rfalNfcPollCollResolution+0x58e>
    }
#endif /* RFAL_FEATURE_ST25TB */
    
    return ERR_NONE;                                                                  /* All technologies have been performed */
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3778      	adds	r7, #120	@ 0x78
 8009712:	46bd      	mov	sp, r7
 8009714:	bdb0      	pop	{r4, r5, r7, pc}
 8009716:	bf00      	nop
 8009718:	200006b0 	.word	0x200006b0

0800971c <rfalNfcPollActivation>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollActivation( uint8_t devIt )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08e      	sub	sp, #56	@ 0x38
 8009720:	af04      	add	r7, sp, #16
 8009722:	4603      	mov	r3, r0
 8009724:	71fb      	strb	r3, [r7, #7]
    ReturnCode err;
    
    err = ERR_NONE;
 8009726:	2300      	movs	r3, #0
 8009728:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    /* Supress warning when specific RFAL features have been disabled */
    NO_WARNING(err);
    
    if( devIt > gNfcDev.devCnt )
 800972a:	4ba6      	ldr	r3, [pc, #664]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 800972c:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8009730:	79fa      	ldrb	r2, [r7, #7]
 8009732:	429a      	cmp	r2, r3
 8009734:	d901      	bls.n	800973a <rfalNfcPollActivation+0x1e>
    {
        return ERR_WRONG_STATE;
 8009736:	2321      	movs	r3, #33	@ 0x21
 8009738:	e29c      	b.n	8009c74 <rfalNfcPollActivation+0x558>
    }
    
    switch( gNfcDev.devList[devIt].type )
 800973a:	79fa      	ldrb	r2, [r7, #7]
 800973c:	49a1      	ldr	r1, [pc, #644]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 800973e:	4613      	mov	r3, r2
 8009740:	011b      	lsls	r3, r3, #4
 8009742:	1a9b      	subs	r3, r3, r2
 8009744:	00db      	lsls	r3, r3, #3
 8009746:	440b      	add	r3, r1
 8009748:	3390      	adds	r3, #144	@ 0x90
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b05      	cmp	r3, #5
 800974e:	f200 8284 	bhi.w	8009c5a <rfalNfcPollActivation+0x53e>
 8009752:	a201      	add	r2, pc, #4	@ (adr r2, 8009758 <rfalNfcPollActivation+0x3c>)
 8009754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009758:	080097ab 	.word	0x080097ab
 800975c:	080099c9 	.word	0x080099c9
 8009760:	08009abd 	.word	0x08009abd
 8009764:	08009bb7 	.word	0x08009bb7
 8009768:	08009c09 	.word	0x08009c09
 800976c:	08009771 	.word	0x08009771
        /*******************************************************************************/
    #if RFAL_FEATURE_NFC_DEP
        case RFAL_NFC_LISTEN_TYPE_AP2P:
            /* Activation has already been perfomed (ATR_REQ) */
        
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8009770:	79f9      	ldrb	r1, [r7, #7]
 8009772:	79fa      	ldrb	r2, [r7, #7]
 8009774:	460b      	mov	r3, r1
 8009776:	011b      	lsls	r3, r3, #4
 8009778:	1a5b      	subs	r3, r3, r1
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	33b0      	adds	r3, #176	@ 0xb0
 800977e:	4991      	ldr	r1, [pc, #580]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009780:	440b      	add	r3, r1
 8009782:	1c99      	adds	r1, r3, #2
 8009784:	488f      	ldr	r0, [pc, #572]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009786:	4613      	mov	r3, r2
 8009788:	011b      	lsls	r3, r3, #4
 800978a:	1a9b      	subs	r3, r3, r2
 800978c:	00db      	lsls	r3, r3, #3
 800978e:	4403      	add	r3, r0
 8009790:	33a8      	adds	r3, #168	@ 0xa8
 8009792:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 8009794:	79fa      	ldrb	r2, [r7, #7]
 8009796:	498b      	ldr	r1, [pc, #556]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009798:	4613      	mov	r3, r2
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	1a9b      	subs	r3, r3, r2
 800979e:	00db      	lsls	r3, r3, #3
 80097a0:	440b      	add	r3, r1
 80097a2:	33ac      	adds	r3, #172	@ 0xac
 80097a4:	220a      	movs	r2, #10
 80097a6:	701a      	strb	r2, [r3, #0]
            break;
 80097a8:	e259      	b.n	8009c5e <rfalNfcPollActivation+0x542>
        /* Passive NFC-A Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCA
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            
            rfalNfcaPollerInitialize();
 80097aa:	f002 fedb 	bl	800c564 <rfalNfcaPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 80097ae:	79fa      	ldrb	r2, [r7, #7]
 80097b0:	4984      	ldr	r1, [pc, #528]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 80097b2:	4613      	mov	r3, r2
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	1a9b      	subs	r3, r3, r2
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	440b      	add	r3, r1
 80097bc:	33a6      	adds	r3, #166	@ 0xa6
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d02a      	beq.n	800981a <rfalNfcPollActivation+0xfe>
            {
                rfalNfcaSensRes sensRes;
                rfalNfcaSelRes  selRes;
                
                EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes ) ); /* Wake up all cards  */
 80097c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097c8:	4619      	mov	r1, r3
 80097ca:	2052      	movs	r0, #82	@ 0x52
 80097cc:	f002 feee 	bl	800c5ac <rfalNfcaPollerCheckPresence>
 80097d0:	4603      	mov	r3, r0
 80097d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80097d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <rfalNfcPollActivation+0xc2>
 80097da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80097dc:	e24a      	b.n	8009c74 <rfalNfcPollActivation+0x558>
                EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); /* Select specific device  */
 80097de:	79fa      	ldrb	r2, [r7, #7]
 80097e0:	4613      	mov	r3, r2
 80097e2:	011b      	lsls	r3, r3, #4
 80097e4:	1a9b      	subs	r3, r3, r2
 80097e6:	00db      	lsls	r3, r3, #3
 80097e8:	3390      	adds	r3, #144	@ 0x90
 80097ea:	4a76      	ldr	r2, [pc, #472]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 80097ec:	4413      	add	r3, r2
 80097ee:	1d98      	adds	r0, r3, #6
 80097f0:	79fa      	ldrb	r2, [r7, #7]
 80097f2:	4974      	ldr	r1, [pc, #464]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 80097f4:	4613      	mov	r3, r2
 80097f6:	011b      	lsls	r3, r3, #4
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	440b      	add	r3, r1
 80097fe:	3395      	adds	r3, #149	@ 0x95
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	f107 0220 	add.w	r2, r7, #32
 8009806:	4619      	mov	r1, r3
 8009808:	f003 fa02 	bl	800cc10 <rfalNfcaPollerSelect>
 800980c:	4603      	mov	r3, r0
 800980e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009810:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <rfalNfcPollActivation+0xfe>
 8009816:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009818:	e22c      	b.n	8009c74 <rfalNfcPollActivation+0x558>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 800981a:	79f9      	ldrb	r1, [r7, #7]
 800981c:	79fa      	ldrb	r2, [r7, #7]
 800981e:	460b      	mov	r3, r1
 8009820:	011b      	lsls	r3, r3, #4
 8009822:	1a5b      	subs	r3, r3, r1
 8009824:	00db      	lsls	r3, r3, #3
 8009826:	3390      	adds	r3, #144	@ 0x90
 8009828:	4966      	ldr	r1, [pc, #408]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 800982a:	440b      	add	r3, r1
 800982c:	1d99      	adds	r1, r3, #6
 800982e:	4865      	ldr	r0, [pc, #404]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009830:	4613      	mov	r3, r2
 8009832:	011b      	lsls	r3, r3, #4
 8009834:	1a9b      	subs	r3, r3, r2
 8009836:	00db      	lsls	r3, r3, #3
 8009838:	4403      	add	r3, r0
 800983a:	33a8      	adds	r3, #168	@ 0xa8
 800983c:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 800983e:	79f9      	ldrb	r1, [r7, #7]
 8009840:	79fa      	ldrb	r2, [r7, #7]
 8009842:	4860      	ldr	r0, [pc, #384]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009844:	460b      	mov	r3, r1
 8009846:	011b      	lsls	r3, r3, #4
 8009848:	1a5b      	subs	r3, r3, r1
 800984a:	00db      	lsls	r3, r3, #3
 800984c:	4403      	add	r3, r0
 800984e:	3395      	adds	r3, #149	@ 0x95
 8009850:	7818      	ldrb	r0, [r3, #0]
 8009852:	495c      	ldr	r1, [pc, #368]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009854:	4613      	mov	r3, r2
 8009856:	011b      	lsls	r3, r3, #4
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	440b      	add	r3, r1
 800985e:	33ac      	adds	r3, #172	@ 0xac
 8009860:	4602      	mov	r2, r0
 8009862:	701a      	strb	r2, [r3, #0]
            
            /*******************************************************************************/
            /* Perform protocol specific activation                                        */
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 8009864:	79fa      	ldrb	r2, [r7, #7]
 8009866:	4957      	ldr	r1, [pc, #348]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009868:	4613      	mov	r3, r2
 800986a:	011b      	lsls	r3, r3, #4
 800986c:	1a9b      	subs	r3, r3, r2
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	440b      	add	r3, r1
 8009872:	3391      	adds	r3, #145	@ 0x91
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b60      	cmp	r3, #96	@ 0x60
 8009878:	d065      	beq.n	8009946 <rfalNfcPollActivation+0x22a>
 800987a:	2b60      	cmp	r3, #96	@ 0x60
 800987c:	f300 809e 	bgt.w	80099bc <rfalNfcPollActivation+0x2a0>
 8009880:	2b40      	cmp	r3, #64	@ 0x40
 8009882:	d060      	beq.n	8009946 <rfalNfcPollActivation+0x22a>
 8009884:	2b40      	cmp	r3, #64	@ 0x40
 8009886:	f300 8099 	bgt.w	80099bc <rfalNfcPollActivation+0x2a0>
 800988a:	2b20      	cmp	r3, #32
 800988c:	d03a      	beq.n	8009904 <rfalNfcPollActivation+0x1e8>
 800988e:	2b20      	cmp	r3, #32
 8009890:	f300 8094 	bgt.w	80099bc <rfalNfcPollActivation+0x2a0>
 8009894:	2b00      	cmp	r3, #0
 8009896:	d02a      	beq.n	80098ee <rfalNfcPollActivation+0x1d2>
 8009898:	2b01      	cmp	r3, #1
 800989a:	f040 808f 	bne.w	80099bc <rfalNfcPollActivation+0x2a0>
                /*******************************************************************************/
                case RFAL_NFCA_T1T:
                
                    /* No further activation needed for T1T (RID already performed) */
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 800989e:	79f9      	ldrb	r1, [r7, #7]
 80098a0:	79fa      	ldrb	r2, [r7, #7]
 80098a2:	460b      	mov	r3, r1
 80098a4:	011b      	lsls	r3, r3, #4
 80098a6:	1a5b      	subs	r3, r3, r1
 80098a8:	00db      	lsls	r3, r3, #3
 80098aa:	3398      	adds	r3, #152	@ 0x98
 80098ac:	4945      	ldr	r1, [pc, #276]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 80098ae:	440b      	add	r3, r1
 80098b0:	f103 010a 	add.w	r1, r3, #10
 80098b4:	4843      	ldr	r0, [pc, #268]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 80098b6:	4613      	mov	r3, r2
 80098b8:	011b      	lsls	r3, r3, #4
 80098ba:	1a9b      	subs	r3, r3, r2
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	4403      	add	r3, r0
 80098c0:	33a8      	adds	r3, #168	@ 0xa8
 80098c2:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 80098c4:	79fa      	ldrb	r2, [r7, #7]
 80098c6:	493f      	ldr	r1, [pc, #252]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 80098c8:	4613      	mov	r3, r2
 80098ca:	011b      	lsls	r3, r3, #4
 80098cc:	1a9b      	subs	r3, r3, r2
 80098ce:	00db      	lsls	r3, r3, #3
 80098d0:	440b      	add	r3, r1
 80098d2:	33ac      	adds	r3, #172	@ 0xac
 80098d4:	2204      	movs	r2, #4
 80098d6:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 80098d8:	79fa      	ldrb	r2, [r7, #7]
 80098da:	493a      	ldr	r1, [pc, #232]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 80098dc:	4613      	mov	r3, r2
 80098de:	011b      	lsls	r3, r3, #4
 80098e0:	1a9b      	subs	r3, r3, r2
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	440b      	add	r3, r1
 80098e6:	33ad      	adds	r3, #173	@ 0xad
 80098e8:	2200      	movs	r2, #0
 80098ea:	701a      	strb	r2, [r3, #0]
                    break;
 80098ec:	e068      	b.n	80099c0 <rfalNfcPollActivation+0x2a4>
                
                case RFAL_NFCA_T2T:
                    
                    /* No further activation needed for a T2T */

                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 80098ee:	79fa      	ldrb	r2, [r7, #7]
 80098f0:	4934      	ldr	r1, [pc, #208]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 80098f2:	4613      	mov	r3, r2
 80098f4:	011b      	lsls	r3, r3, #4
 80098f6:	1a9b      	subs	r3, r3, r2
 80098f8:	00db      	lsls	r3, r3, #3
 80098fa:	440b      	add	r3, r1
 80098fc:	33ad      	adds	r3, #173	@ 0xad
 80098fe:	2200      	movs	r2, #0
 8009900:	701a      	strb	r2, [r3, #0]
                    break;
 8009902:	e05d      	b.n	80099c0 <rfalNfcPollActivation+0x2a4>
                /*******************************************************************************/
                case RFAL_NFCA_T4T:                                                   /* Device supports ISO-DEP */
                
                #if RFAL_FEATURE_ISO_DEP_POLL
                    /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported */
                    rfalIsoDepInitialize();
 8009904:	f7fc fe9c 	bl	8006640 <rfalIsoDepInitialize>
                    EXIT_ON_ERR( err, rfalIsoDepPollAHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, &gNfcDev.devList[devIt].proto.isoDep ) );
 8009908:	79fa      	ldrb	r2, [r7, #7]
 800990a:	4613      	mov	r3, r2
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	1a9b      	subs	r3, r3, r2
 8009910:	00db      	lsls	r3, r3, #3
 8009912:	33b0      	adds	r3, #176	@ 0xb0
 8009914:	4a2b      	ldr	r2, [pc, #172]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009916:	4413      	add	r3, r2
 8009918:	2202      	movs	r2, #2
 800991a:	2100      	movs	r1, #0
 800991c:	2008      	movs	r0, #8
 800991e:	f7fe fa9d 	bl	8007e5c <rfalIsoDepPollAHandleActivation>
 8009922:	4603      	mov	r3, r0
 8009924:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009926:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <rfalNfcPollActivation+0x214>
 800992c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800992e:	e1a1      	b.n	8009c74 <rfalNfcPollActivation+0x558>
                    
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 8009930:	79fa      	ldrb	r2, [r7, #7]
 8009932:	4924      	ldr	r1, [pc, #144]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009934:	4613      	mov	r3, r2
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	1a9b      	subs	r3, r3, r2
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	440b      	add	r3, r1
 800993e:	33ad      	adds	r3, #173	@ 0xad
 8009940:	2201      	movs	r2, #1
 8009942:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No ISO-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    break;
 8009944:	e03c      	b.n	80099c0 <rfalNfcPollActivation+0x2a4>
                case RFAL_NFCA_T4T_NFCDEP:                                            /* Device supports both T4T and NFC-DEP */
                case RFAL_NFCA_NFCDEP:                                                /* Device supports NFC-DEP */
                
                #if RFAL_FEATURE_NFC_DEP
                    /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                    EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8009946:	79fa      	ldrb	r2, [r7, #7]
 8009948:	4613      	mov	r3, r2
 800994a:	011b      	lsls	r3, r3, #4
 800994c:	1a9b      	subs	r3, r3, r2
 800994e:	00db      	lsls	r3, r3, #3
 8009950:	3390      	adds	r3, #144	@ 0x90
 8009952:	4a1c      	ldr	r2, [pc, #112]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009954:	1898      	adds	r0, r3, r2
 8009956:	2300      	movs	r3, #0
 8009958:	2200      	movs	r2, #0
 800995a:	2100      	movs	r1, #0
 800995c:	f000 fb58 	bl	800a010 <rfalNfcNfcDepActivate>
 8009960:	4603      	mov	r3, r0
 8009962:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009964:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <rfalNfcPollActivation+0x252>
 800996a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800996c:	e182      	b.n	8009c74 <rfalNfcPollActivation+0x558>
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 800996e:	79f9      	ldrb	r1, [r7, #7]
 8009970:	79fa      	ldrb	r2, [r7, #7]
 8009972:	460b      	mov	r3, r1
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	1a5b      	subs	r3, r3, r1
 8009978:	00db      	lsls	r3, r3, #3
 800997a:	33b0      	adds	r3, #176	@ 0xb0
 800997c:	4911      	ldr	r1, [pc, #68]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 800997e:	440b      	add	r3, r1
 8009980:	1c99      	adds	r1, r3, #2
 8009982:	4810      	ldr	r0, [pc, #64]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009984:	4613      	mov	r3, r2
 8009986:	011b      	lsls	r3, r3, #4
 8009988:	1a9b      	subs	r3, r3, r2
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	4403      	add	r3, r0
 800998e:	33a8      	adds	r3, #168	@ 0xa8
 8009990:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8009992:	79fa      	ldrb	r2, [r7, #7]
 8009994:	490b      	ldr	r1, [pc, #44]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 8009996:	4613      	mov	r3, r2
 8009998:	011b      	lsls	r3, r3, #4
 800999a:	1a9b      	subs	r3, r3, r2
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	440b      	add	r3, r1
 80099a0:	33ac      	adds	r3, #172	@ 0xac
 80099a2:	220a      	movs	r2, #10
 80099a4:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;   /* NFC-A P2P device activated */
 80099a6:	79fa      	ldrb	r2, [r7, #7]
 80099a8:	4906      	ldr	r1, [pc, #24]	@ (80099c4 <rfalNfcPollActivation+0x2a8>)
 80099aa:	4613      	mov	r3, r2
 80099ac:	011b      	lsls	r3, r3, #4
 80099ae:	1a9b      	subs	r3, r3, r2
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	440b      	add	r3, r1
 80099b4:	33ad      	adds	r3, #173	@ 0xad
 80099b6:	2202      	movs	r2, #2
 80099b8:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No NFC-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_NFC_DEP */
                    break;
 80099ba:	e001      	b.n	80099c0 <rfalNfcPollActivation+0x2a4>
                
                /*******************************************************************************/
                default:
                    return ERR_WRONG_STATE;
 80099bc:	2321      	movs	r3, #33	@ 0x21
 80099be:	e159      	b.n	8009c74 <rfalNfcPollActivation+0x558>
            }
            break;
 80099c0:	e14d      	b.n	8009c5e <rfalNfcPollActivation+0x542>
 80099c2:	bf00      	nop
 80099c4:	200006b0 	.word	0x200006b0
        /* Passive NFC-B Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCB
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            
            rfalNfcbPollerInitialize();
 80099c8:	f003 f9ea 	bl	800cda0 <rfalNfcbPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is in Sleep */
 80099cc:	79fa      	ldrb	r2, [r7, #7]
 80099ce:	49ab      	ldr	r1, [pc, #684]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 80099d0:	4613      	mov	r3, r2
 80099d2:	011b      	lsls	r3, r3, #4
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	440b      	add	r3, r1
 80099da:	339f      	adds	r3, #159	@ 0x9f
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d007      	beq.n	80099f2 <rfalNfcPollActivation+0x2d6>
            {
                rfalNfcbSensbRes sensbRes;
                uint8_t          sensbResLen;
                
                /* Wake up all cards. SENSB_RES may return collision but the NFCID0 is available to explicitly select NFC-B card via ATTRIB; so error will be ignored here */
                rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen );
 80099e2:	f107 030f 	add.w	r3, r7, #15
 80099e6:	f107 0210 	add.w	r2, r7, #16
 80099ea:	2100      	movs	r1, #0
 80099ec:	2008      	movs	r0, #8
 80099ee:	f003 fa03 	bl	800cdf8 <rfalNfcbPollerCheckPresence>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 80099f2:	79f9      	ldrb	r1, [r7, #7]
 80099f4:	79fa      	ldrb	r2, [r7, #7]
 80099f6:	460b      	mov	r3, r1
 80099f8:	011b      	lsls	r3, r3, #4
 80099fa:	1a5b      	subs	r3, r3, r1
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	3390      	adds	r3, #144	@ 0x90
 8009a00:	499e      	ldr	r1, [pc, #632]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009a02:	440b      	add	r3, r1
 8009a04:	1cd9      	adds	r1, r3, #3
 8009a06:	489d      	ldr	r0, [pc, #628]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009a08:	4613      	mov	r3, r2
 8009a0a:	011b      	lsls	r3, r3, #4
 8009a0c:	1a9b      	subs	r3, r3, r2
 8009a0e:	00db      	lsls	r3, r3, #3
 8009a10:	4403      	add	r3, r0
 8009a12:	33a8      	adds	r3, #168	@ 0xa8
 8009a14:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 8009a16:	79fa      	ldrb	r2, [r7, #7]
 8009a18:	4998      	ldr	r1, [pc, #608]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	011b      	lsls	r3, r3, #4
 8009a1e:	1a9b      	subs	r3, r3, r2
 8009a20:	00db      	lsls	r3, r3, #3
 8009a22:	440b      	add	r3, r1
 8009a24:	33ac      	adds	r3, #172	@ 0xac
 8009a26:	2204      	movs	r2, #4
 8009a28:	701a      	strb	r2, [r3, #0]
            
        #if RFAL_FEATURE_ISO_DEP_POLL
            /* Check if device supports  ISO-DEP (ISO14443-4) */
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 8009a2a:	79fa      	ldrb	r2, [r7, #7]
 8009a2c:	4993      	ldr	r1, [pc, #588]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009a2e:	4613      	mov	r3, r2
 8009a30:	011b      	lsls	r3, r3, #4
 8009a32:	1a9b      	subs	r3, r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	440b      	add	r3, r1
 8009a38:	339c      	adds	r3, #156	@ 0x9c
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d030      	beq.n	8009aa6 <rfalNfcPollActivation+0x38a>
            {
                rfalIsoDepInitialize();
 8009a44:	f7fc fdfc 	bl	8006640 <rfalIsoDepInitialize>
                /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported    */
                EXIT_ON_ERR( err, rfalIsoDepPollBHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 8009a48:	79fa      	ldrb	r2, [r7, #7]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	011b      	lsls	r3, r3, #4
 8009a4e:	1a9b      	subs	r3, r3, r2
 8009a50:	00db      	lsls	r3, r3, #3
 8009a52:	3390      	adds	r3, #144	@ 0x90
 8009a54:	4a89      	ldr	r2, [pc, #548]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009a56:	4413      	add	r3, r2
 8009a58:	1c59      	adds	r1, r3, #1
 8009a5a:	79fa      	ldrb	r2, [r7, #7]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	011b      	lsls	r3, r3, #4
 8009a60:	1a9b      	subs	r3, r3, r2
 8009a62:	00db      	lsls	r3, r3, #3
 8009a64:	33b0      	adds	r3, #176	@ 0xb0
 8009a66:	4a85      	ldr	r2, [pc, #532]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009a68:	4413      	add	r3, r2
 8009a6a:	9303      	str	r3, [sp, #12]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	9302      	str	r3, [sp, #8]
 8009a70:	2300      	movs	r3, #0
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	9100      	str	r1, [sp, #0]
 8009a76:	2300      	movs	r3, #0
 8009a78:	2202      	movs	r2, #2
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	2008      	movs	r0, #8
 8009a7e:	f7fe fb47 	bl	8008110 <rfalIsoDepPollBHandleActivation>
 8009a82:	4603      	mov	r3, r0
 8009a84:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009a86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <rfalNfcPollActivation+0x374>
 8009a8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009a8e:	e0f1      	b.n	8009c74 <rfalNfcPollActivation+0x558>
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 8009a90:	79fa      	ldrb	r2, [r7, #7]
 8009a92:	497a      	ldr	r1, [pc, #488]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009a94:	4613      	mov	r3, r2
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	1a9b      	subs	r3, r3, r2
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	440b      	add	r3, r1
 8009a9e:	33ad      	adds	r3, #173	@ 0xad
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	701a      	strb	r2, [r3, #0]
                break;
 8009aa4:	e0db      	b.n	8009c5e <rfalNfcPollActivation+0x542>
            }
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
            
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 8009aa6:	79fa      	ldrb	r2, [r7, #7]
 8009aa8:	4974      	ldr	r1, [pc, #464]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009aaa:	4613      	mov	r3, r2
 8009aac:	011b      	lsls	r3, r3, #4
 8009aae:	1a9b      	subs	r3, r3, r2
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	440b      	add	r3, r1
 8009ab4:	33ad      	adds	r3, #173	@ 0xad
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	701a      	strb	r2, [r3, #0]
            break;
 8009aba:	e0d0      	b.n	8009c5e <rfalNfcPollActivation+0x542>
        /* Passive NFC-F Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCF
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 8009abc:	4b6f      	ldr	r3, [pc, #444]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009abe:	7cdb      	ldrb	r3, [r3, #19]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f003 fd47 	bl	800d554 <rfalNfcfPollerInitialize>
        
        #if RFAL_FEATURE_NFC_DEP
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 8009ac6:	79fa      	ldrb	r2, [r7, #7]
 8009ac8:	496c      	ldr	r1, [pc, #432]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009aca:	4613      	mov	r3, r2
 8009acc:	011b      	lsls	r3, r3, #4
 8009ace:	1a9b      	subs	r3, r3, r2
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	440b      	add	r3, r1
 8009ad4:	3393      	adds	r3, #147	@ 0x93
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d145      	bne.n	8009b68 <rfalNfcPollActivation+0x44c>
 8009adc:	79fa      	ldrb	r2, [r7, #7]
 8009ade:	4967      	ldr	r1, [pc, #412]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	011b      	lsls	r3, r3, #4
 8009ae4:	1a9b      	subs	r3, r3, r2
 8009ae6:	00db      	lsls	r3, r3, #3
 8009ae8:	440b      	add	r3, r1
 8009aea:	3394      	adds	r3, #148	@ 0x94
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2bfe      	cmp	r3, #254	@ 0xfe
 8009af0:	d13a      	bne.n	8009b68 <rfalNfcPollActivation+0x44c>
            {
                /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8009af2:	79fa      	ldrb	r2, [r7, #7]
 8009af4:	4613      	mov	r3, r2
 8009af6:	011b      	lsls	r3, r3, #4
 8009af8:	1a9b      	subs	r3, r3, r2
 8009afa:	00db      	lsls	r3, r3, #3
 8009afc:	3390      	adds	r3, #144	@ 0x90
 8009afe:	4a5f      	ldr	r2, [pc, #380]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009b00:	1898      	adds	r0, r3, r2
 8009b02:	2300      	movs	r3, #0
 8009b04:	2200      	movs	r2, #0
 8009b06:	2100      	movs	r1, #0
 8009b08:	f000 fa82 	bl	800a010 <rfalNfcNfcDepActivate>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009b10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <rfalNfcPollActivation+0x3fe>
 8009b16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b18:	e0ac      	b.n	8009c74 <rfalNfcPollActivation+0x558>
                
                /* Set NFCID */
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8009b1a:	79f9      	ldrb	r1, [r7, #7]
 8009b1c:	79fa      	ldrb	r2, [r7, #7]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	011b      	lsls	r3, r3, #4
 8009b22:	1a5b      	subs	r3, r3, r1
 8009b24:	00db      	lsls	r3, r3, #3
 8009b26:	33b0      	adds	r3, #176	@ 0xb0
 8009b28:	4954      	ldr	r1, [pc, #336]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009b2a:	440b      	add	r3, r1
 8009b2c:	1c99      	adds	r1, r3, #2
 8009b2e:	4853      	ldr	r0, [pc, #332]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009b30:	4613      	mov	r3, r2
 8009b32:	011b      	lsls	r3, r3, #4
 8009b34:	1a9b      	subs	r3, r3, r2
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	4403      	add	r3, r0
 8009b3a:	33a8      	adds	r3, #168	@ 0xa8
 8009b3c:	6019      	str	r1, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8009b3e:	79fa      	ldrb	r2, [r7, #7]
 8009b40:	494e      	ldr	r1, [pc, #312]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009b42:	4613      	mov	r3, r2
 8009b44:	011b      	lsls	r3, r3, #4
 8009b46:	1a9b      	subs	r3, r3, r2
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	440b      	add	r3, r1
 8009b4c:	33ac      	adds	r3, #172	@ 0xac
 8009b4e:	220a      	movs	r2, #10
 8009b50:	701a      	strb	r2, [r3, #0]
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;       /* NFC-F P2P device activated */
 8009b52:	79fa      	ldrb	r2, [r7, #7]
 8009b54:	4949      	ldr	r1, [pc, #292]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009b56:	4613      	mov	r3, r2
 8009b58:	011b      	lsls	r3, r3, #4
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	440b      	add	r3, r1
 8009b60:	33ad      	adds	r3, #173	@ 0xad
 8009b62:	2202      	movs	r2, #2
 8009b64:	701a      	strb	r2, [r3, #0]
                break;
 8009b66:	e07a      	b.n	8009c5e <rfalNfcPollActivation+0x542>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 8009b68:	79f9      	ldrb	r1, [r7, #7]
 8009b6a:	79fa      	ldrb	r2, [r7, #7]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	011b      	lsls	r3, r3, #4
 8009b70:	1a5b      	subs	r3, r3, r1
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	3390      	adds	r3, #144	@ 0x90
 8009b76:	4941      	ldr	r1, [pc, #260]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009b78:	440b      	add	r3, r1
 8009b7a:	1cd9      	adds	r1, r3, #3
 8009b7c:	483f      	ldr	r0, [pc, #252]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009b7e:	4613      	mov	r3, r2
 8009b80:	011b      	lsls	r3, r3, #4
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	4403      	add	r3, r0
 8009b88:	33a8      	adds	r3, #168	@ 0xa8
 8009b8a:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8009b8c:	79fa      	ldrb	r2, [r7, #7]
 8009b8e:	493b      	ldr	r1, [pc, #236]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009b90:	4613      	mov	r3, r2
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	1a9b      	subs	r3, r3, r2
 8009b96:	00db      	lsls	r3, r3, #3
 8009b98:	440b      	add	r3, r1
 8009b9a:	33ac      	adds	r3, #172	@ 0xac
 8009b9c:	2208      	movs	r2, #8
 8009b9e:	701a      	strb	r2, [r3, #0]
            
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-F T3T device activated */
 8009ba0:	79fa      	ldrb	r2, [r7, #7]
 8009ba2:	4936      	ldr	r1, [pc, #216]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	011b      	lsls	r3, r3, #4
 8009ba8:	1a9b      	subs	r3, r3, r2
 8009baa:	00db      	lsls	r3, r3, #3
 8009bac:	440b      	add	r3, r1
 8009bae:	33ad      	adds	r3, #173	@ 0xad
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]
            break;
 8009bb4:	e053      	b.n	8009c5e <rfalNfcPollActivation+0x542>
        /* Passive NFC-V Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCV
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            
            rfalNfcvPollerInitialize();
 8009bb6:	f003 ff27 	bl	800da08 <rfalNfcvPollerInitialize>
            
            /* No specific activation needed for a T5T */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 8009bba:	79f9      	ldrb	r1, [r7, #7]
 8009bbc:	79fa      	ldrb	r2, [r7, #7]
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	011b      	lsls	r3, r3, #4
 8009bc2:	1a5b      	subs	r3, r3, r1
 8009bc4:	00db      	lsls	r3, r3, #3
 8009bc6:	3390      	adds	r3, #144	@ 0x90
 8009bc8:	492c      	ldr	r1, [pc, #176]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009bca:	440b      	add	r3, r1
 8009bcc:	1cd9      	adds	r1, r3, #3
 8009bce:	482b      	ldr	r0, [pc, #172]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	011b      	lsls	r3, r3, #4
 8009bd4:	1a9b      	subs	r3, r3, r2
 8009bd6:	00db      	lsls	r3, r3, #3
 8009bd8:	4403      	add	r3, r0
 8009bda:	33a8      	adds	r3, #168	@ 0xa8
 8009bdc:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCV_UID_LEN;
 8009bde:	79fa      	ldrb	r2, [r7, #7]
 8009be0:	4926      	ldr	r1, [pc, #152]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009be2:	4613      	mov	r3, r2
 8009be4:	011b      	lsls	r3, r3, #4
 8009be6:	1a9b      	subs	r3, r3, r2
 8009be8:	00db      	lsls	r3, r3, #3
 8009bea:	440b      	add	r3, r1
 8009bec:	33ac      	adds	r3, #172	@ 0xac
 8009bee:	2208      	movs	r2, #8
 8009bf0:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-V T5T device activated */
 8009bf2:	79fa      	ldrb	r2, [r7, #7]
 8009bf4:	4921      	ldr	r1, [pc, #132]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	011b      	lsls	r3, r3, #4
 8009bfa:	1a9b      	subs	r3, r3, r2
 8009bfc:	00db      	lsls	r3, r3, #3
 8009bfe:	440b      	add	r3, r1
 8009c00:	33ad      	adds	r3, #173	@ 0xad
 8009c02:	2200      	movs	r2, #0
 8009c04:	701a      	strb	r2, [r3, #0]
            break;
 8009c06:	e02a      	b.n	8009c5e <rfalNfcPollActivation+0x542>
        /* Passive ST25TB Activation                                                   */
        /*******************************************************************************/
    #if RFAL_FEATURE_ST25TB
        case RFAL_NFC_LISTEN_TYPE_ST25TB:
            
            rfalSt25tbPollerInitialize();
 8009c08:	f007 f9c1 	bl	8010f8e <rfalSt25tbPollerInitialize>
            
            /* No specific activation needed for a ST25TB */
        
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 8009c0c:	79f9      	ldrb	r1, [r7, #7]
 8009c0e:	79fa      	ldrb	r2, [r7, #7]
 8009c10:	460b      	mov	r3, r1
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	1a5b      	subs	r3, r3, r1
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	3390      	adds	r3, #144	@ 0x90
 8009c1a:	4918      	ldr	r1, [pc, #96]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009c1c:	440b      	add	r3, r1
 8009c1e:	1c99      	adds	r1, r3, #2
 8009c20:	4816      	ldr	r0, [pc, #88]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009c22:	4613      	mov	r3, r2
 8009c24:	011b      	lsls	r3, r3, #4
 8009c26:	1a9b      	subs	r3, r3, r2
 8009c28:	00db      	lsls	r3, r3, #3
 8009c2a:	4403      	add	r3, r0
 8009c2c:	33a8      	adds	r3, #168	@ 0xa8
 8009c2e:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 8009c30:	79fa      	ldrb	r2, [r7, #7]
 8009c32:	4912      	ldr	r1, [pc, #72]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009c34:	4613      	mov	r3, r2
 8009c36:	011b      	lsls	r3, r3, #4
 8009c38:	1a9b      	subs	r3, r3, r2
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	440b      	add	r3, r1
 8009c3e:	33ac      	adds	r3, #172	@ 0xac
 8009c40:	2208      	movs	r2, #8
 8009c42:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* ST25TB device activated */
 8009c44:	79fa      	ldrb	r2, [r7, #7]
 8009c46:	490d      	ldr	r1, [pc, #52]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009c48:	4613      	mov	r3, r2
 8009c4a:	011b      	lsls	r3, r3, #4
 8009c4c:	1a9b      	subs	r3, r3, r2
 8009c4e:	00db      	lsls	r3, r3, #3
 8009c50:	440b      	add	r3, r1
 8009c52:	33ad      	adds	r3, #173	@ 0xad
 8009c54:	2200      	movs	r2, #0
 8009c56:	701a      	strb	r2, [r3, #0]
            break;
 8009c58:	e001      	b.n	8009c5e <rfalNfcPollActivation+0x542>
    #endif /* RFAL_FEATURE_ST25TB */
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 8009c5a:	2321      	movs	r3, #33	@ 0x21
 8009c5c:	e00a      	b.n	8009c74 <rfalNfcPollActivation+0x558>
    }
    
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 8009c5e:	79fa      	ldrb	r2, [r7, #7]
 8009c60:	4613      	mov	r3, r2
 8009c62:	011b      	lsls	r3, r3, #4
 8009c64:	1a9b      	subs	r3, r3, r2
 8009c66:	00db      	lsls	r3, r3, #3
 8009c68:	3390      	adds	r3, #144	@ 0x90
 8009c6a:	4a04      	ldr	r2, [pc, #16]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009c6c:	4413      	add	r3, r2
 8009c6e:	4a03      	ldr	r2, [pc, #12]	@ (8009c7c <rfalNfcPollActivation+0x560>)
 8009c70:	6093      	str	r3, [r2, #8]
    return ERR_NONE;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3728      	adds	r7, #40	@ 0x28
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	200006b0 	.word	0x200006b0

08009c80 <rfalNfcListenActivation>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_LISTEN_MODE
static ReturnCode rfalNfcListenActivation( void )
{
 8009c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c82:	b08f      	sub	sp, #60	@ 0x3c
 8009c84:	af04      	add	r7, sp, #16
    uint8_t                   hdrLen;
    ReturnCode                ret;
    rfalLmState               lmSt;
    rfalBitRate               bitRate;
    
    lmSt = rfalListenGetState( &isDataRcvd, &bitRate );
 8009c86:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8009c8a:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 8009c8e:	4611      	mov	r1, r2
 8009c90:	4618      	mov	r0, r3
 8009c92:	f006 fd97 	bl	80107c4 <rfalListenGetState>
 8009c96:	4603      	mov	r3, r0
 8009c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    switch(lmSt)
 8009c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	2b0f      	cmp	r3, #15
 8009ca4:	f200 81ae 	bhi.w	800a004 <rfalNfcListenActivation+0x384>
 8009ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb0 <rfalNfcListenActivation+0x30>)
 8009caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cae:	bf00      	nop
 8009cb0:	0800a001 	.word	0x0800a001
 8009cb4:	08009f3f 	.word	0x08009f3f
 8009cb8:	08009ffd 	.word	0x08009ffd
 8009cbc:	0800a005 	.word	0x0800a005
 8009cc0:	08009e67 	.word	0x08009e67
 8009cc4:	08009cf1 	.word	0x08009cf1
 8009cc8:	08009e35 	.word	0x08009e35
 8009ccc:	0800a005 	.word	0x0800a005
 8009cd0:	08009ef9 	.word	0x08009ef9
 8009cd4:	08009f1d 	.word	0x08009f1d
 8009cd8:	08009f1d 	.word	0x08009f1d
 8009cdc:	08009ffd 	.word	0x08009ffd
 8009ce0:	0800a005 	.word	0x0800a005
 8009ce4:	08009ffd 	.word	0x08009ffd
 8009ce8:	08009cf1 	.word	0x08009cf1
 8009cec:	08009ffd 	.word	0x08009ffd
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_ACTIVE_A:                                                  /* NFC-A CE activation */
        case RFAL_LM_STATE_ACTIVE_Ax:
            
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 8009cf0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 809b 	beq.w	8009e30 <rfalNfcListenActivation+0x1b0>
            {
                /* Set the header length in NFC-A */
                hdrLen = (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN);
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                
                NO_WARNING(hdrLen);  /* Supress warning if feature switch is disabled */
                
                /* Check if received data is a Sleep request */
                if( rfalNfcaListenerIsSleepReq( gNfcDev.rxBuf.rfBuf, rfalConvBitsToBytes(gNfcDev.rxLen)) )     /* Check if received data is a SLP_REQ */
 8009d00:	4bb8      	ldr	r3, [pc, #736]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009d02:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	@ 0x4fe
 8009d06:	3307      	adds	r3, #7
 8009d08:	08db      	lsrs	r3, r3, #3
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	48b6      	ldr	r0, [pc, #728]	@ (8009fe8 <rfalNfcListenActivation+0x368>)
 8009d10:	f003 f809 	bl	800cd26 <rfalNfcaListenerIsSleepReq>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00c      	beq.n	8009d34 <rfalNfcListenActivation+0xb4>
                {
                    /* Set the Listen Mode in Sleep state */
                    EXIT_ON_ERR( ret, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 8009d1a:	4bb4      	ldr	r3, [pc, #720]	@ (8009fec <rfalNfcListenActivation+0x36c>)
 8009d1c:	22ff      	movs	r2, #255	@ 0xff
 8009d1e:	49b2      	ldr	r1, [pc, #712]	@ (8009fe8 <rfalNfcListenActivation+0x368>)
 8009d20:	200c      	movs	r0, #12
 8009d22:	f006 fd3f 	bl	80107a4 <rfalListenSleepStart>
 8009d26:	4603      	mov	r3, r0
 8009d28:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009d2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d07f      	beq.n	8009e30 <rfalNfcListenActivation+0x1b0>
 8009d30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d32:	e169      	b.n	800a008 <rfalNfcListenActivation+0x388>
                }
                
            #if RFAL_FEATURE_ISO_DEP_LISTEN
                /* Check if received data is a valid RATS */
                else if( rfalIsoDepIsRats( gNfcDev.rxBuf.rfBuf, (uint8_t)rfalConvBitsToBytes(gNfcDev.rxLen) ) )
 8009d34:	4bab      	ldr	r3, [pc, #684]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009d36:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	@ 0x4fe
 8009d3a:	3307      	adds	r3, #7
 8009d3c:	08db      	lsrs	r3, r3, #3
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	4619      	mov	r1, r3
 8009d42:	48a9      	ldr	r0, [pc, #676]	@ (8009fe8 <rfalNfcListenActivation+0x368>)
 8009d44:	f7fd f82a 	bl	8006d9c <rfalIsoDepIsRats>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d031      	beq.n	8009db2 <rfalNfcListenActivation+0x132>
                {
                    rfalIsoDepAtsParam        atsParam;
                    rfalIsoDepListenActvParam rxParam;
                    
                    /* Set ATS parameters */
                    atsParam.fsci       = (uint8_t)RFAL_ISODEP_DEFAULT_FSCI;
 8009d4e:	2308      	movs	r3, #8
 8009d50:	743b      	strb	r3, [r7, #16]
                    atsParam.fwi        = RFAL_ISODEP_DEFAULT_FWI;
 8009d52:	2308      	movs	r3, #8
 8009d54:	747b      	strb	r3, [r7, #17]
                    atsParam.sfgi       = RFAL_ISODEP_DEFAULT_SFGI;
 8009d56:	2300      	movs	r3, #0
 8009d58:	74bb      	strb	r3, [r7, #18]
                    atsParam.didSupport = false;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	74fb      	strb	r3, [r7, #19]
                    atsParam.ta         = RFAL_ISODEP_ATS_TA_SAME_D;
 8009d5e:	2380      	movs	r3, #128	@ 0x80
 8009d60:	753b      	strb	r3, [r7, #20]
                    atsParam.hb         = NULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	61bb      	str	r3, [r7, #24]
                    atsParam.hbLen      = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	773b      	strb	r3, [r7, #28]

                    /* Set Rx parameters */
                    rxParam.rxBuf        = (rfalIsoDepBufFormat*) &gNfcDev.rxBuf.isoDepBuf;
 8009d6a:	4b9f      	ldr	r3, [pc, #636]	@ (8009fe8 <rfalNfcListenActivation+0x368>)
 8009d6c:	603b      	str	r3, [r7, #0]
                    rxParam.rxLen        = &gNfcDev.rxLen;
 8009d6e:	4b9f      	ldr	r3, [pc, #636]	@ (8009fec <rfalNfcListenActivation+0x36c>)
 8009d70:	607b      	str	r3, [r7, #4]
                    rxParam.isoDepDev    = &gNfcDev.devList->proto.isoDep;
 8009d72:	4b9f      	ldr	r3, [pc, #636]	@ (8009ff0 <rfalNfcListenActivation+0x370>)
 8009d74:	60fb      	str	r3, [r7, #12]
                    rxParam.isRxChaining = &gNfcDev.isRxChaining;
 8009d76:	4b9f      	ldr	r3, [pc, #636]	@ (8009ff4 <rfalNfcListenActivation+0x374>)
 8009d78:	60bb      	str	r3, [r7, #8]

                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_4A );                   /* Set next state CE T4T */
 8009d7a:	2007      	movs	r0, #7
 8009d7c:	f006 fd42 	bl	8010804 <rfalListenSetState>
                    rfalIsoDepInitialize();                                           /* Initialize ISO-DEP layer to handle ISO14443-a activation / RATS */
 8009d80:	f7fc fc5e 	bl	8006640 <rfalIsoDepInitialize>
                    
                    /* Set ISO-DEP layer to digest RATS and handle activation */
                    EXIT_ON_ERR( ret, rfalIsoDepListenStartActivation( &atsParam, NULL, gNfcDev.rxBuf.rfBuf, gNfcDev.rxLen, rxParam ) );
 8009d84:	4b97      	ldr	r3, [pc, #604]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009d86:	f8b3 64fe 	ldrh.w	r6, [r3, #1278]	@ 0x4fe
 8009d8a:	f107 0510 	add.w	r5, r7, #16
 8009d8e:	466c      	mov	r4, sp
 8009d90:	463b      	mov	r3, r7
 8009d92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009d98:	4633      	mov	r3, r6
 8009d9a:	4a93      	ldr	r2, [pc, #588]	@ (8009fe8 <rfalNfcListenActivation+0x368>)
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f7fd f816 	bl	8006dd0 <rfalIsoDepListenStartActivation>
 8009da4:	4603      	mov	r3, r0
 8009da6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009da8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d040      	beq.n	8009e30 <rfalNfcListenActivation+0x1b0>
 8009dae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009db0:	e12a      	b.n	800a008 <rfalNfcListenActivation+0x388>
                }
            #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
            
            #if RFAL_FEATURE_NFC_DEP
                /* Check if received data is a valid ATR_REQ */
                else if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 8009db2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009db6:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8009dba:	4a8a      	ldr	r2, [pc, #552]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009dbc:	4413      	add	r3, r2
 8009dbe:	1cd8      	adds	r0, r3, #3
 8009dc0:	4b88      	ldr	r3, [pc, #544]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009dc2:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	@ 0x4fe
 8009dc6:	3307      	adds	r3, #7
 8009dc8:	08db      	lsrs	r3, r3, #3
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	4a83      	ldr	r2, [pc, #524]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009dd8:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8009ddc:	4619      	mov	r1, r3
 8009dde:	f001 fd8b 	bl	800b8f8 <rfalNfcDepIsAtrReq>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d021      	beq.n	8009e2c <rfalNfcListenActivation+0x1ac>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 8009de8:	4b7e      	ldr	r3, [pc, #504]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009dea:	220a      	movs	r2, #10
 8009dec:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8009df0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009df4:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8009df8:	4a7a      	ldr	r2, [pc, #488]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009dfa:	4413      	add	r3, r2
 8009dfc:	1cd9      	adds	r1, r3, #3
 8009dfe:	4b79      	ldr	r3, [pc, #484]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009e00:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	@ 0x4fe
 8009e04:	3307      	adds	r3, #7
 8009e06:	08db      	lsrs	r3, r3, #3
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	460a      	mov	r2, r1
 8009e16:	2100      	movs	r1, #0
 8009e18:	4877      	ldr	r0, [pc, #476]	@ (8009ff8 <rfalNfcListenActivation+0x378>)
 8009e1a:	f000 f8f9 	bl	800a010 <rfalNfcNfcDepActivate>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009e22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <rfalNfcListenActivation+0x1b0>
 8009e28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e2a:	e0ed      	b.n	800a008 <rfalNfcListenActivation+0x388>
                }
            #endif /* RFAL_FEATURE_NFC_DEP */
                
                else
                {
                    return ERR_PROTO;
 8009e2c:	230b      	movs	r3, #11
 8009e2e:	e0eb      	b.n	800a008 <rfalNfcListenActivation+0x388>
                }
            }
            return ERR_BUSY;
 8009e30:	2302      	movs	r3, #2
 8009e32:	e0e9      	b.n	800a008 <rfalNfcListenActivation+0x388>
            
    #if RFAL_FEATURE_ISO_DEP_LISTEN
        /*******************************************************************************/
        case RFAL_LM_STATE_CARDEMU_4A:                                                /* T4T ISO-DEP activation */
            
            ret = rfalIsoDepListenGetActivationStatus();
 8009e34:	f7fd f91e 	bl	8007074 <rfalIsoDepListenGetActivationStatus>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if( ret == ERR_NONE )
 8009e3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10f      	bne.n	8009e62 <rfalNfcListenActivation+0x1e2>
            {
                gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCA;
 8009e42:	4b68      	ldr	r3, [pc, #416]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009e44:	220a      	movs	r2, #10
 8009e46:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_ISODEP;
 8009e4a:	4b66      	ldr	r3, [pc, #408]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
                gNfcDev.devList->nfcid       = NULL;
 8009e52:	4b64      	ldr	r3, [pc, #400]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                gNfcDev.devList->nfcidLen    = 0;
 8009e5a:	4b62      	ldr	r3, [pc, #392]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
            }
            return ret;
 8009e62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e64:	e0d0      	b.n	800a008 <rfalNfcListenActivation+0x388>
    #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_F:                                                   /* NFC-F CE activation */
            
            if( isDataRcvd )                                                          /* Wait for the first received data */
 8009e66:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d042      	beq.n	8009ef4 <rfalNfcListenActivation+0x274>
            {
            #if RFAL_FEATURE_NFC_DEP
                /* Set the header length in NFC-F */
                hdrLen = RFAL_NFCDEP_LEN_LEN;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                
                if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 8009e74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009e78:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8009e7c:	4a59      	ldr	r2, [pc, #356]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009e7e:	4413      	add	r3, r2
 8009e80:	1cd8      	adds	r0, r3, #3
 8009e82:	4b58      	ldr	r3, [pc, #352]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009e84:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	@ 0x4fe
 8009e88:	3307      	adds	r3, #7
 8009e8a:	08db      	lsrs	r3, r3, #3
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	4a52      	ldr	r2, [pc, #328]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009e9a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	f001 fd2a 	bl	800b8f8 <rfalNfcDepIsAtrReq>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d021      	beq.n	8009eee <rfalNfcListenActivation+0x26e>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCF;
 8009eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009eac:	220c      	movs	r2, #12
 8009eae:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8009eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009eb6:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8009eba:	4a4a      	ldr	r2, [pc, #296]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009ebc:	4413      	add	r3, r2
 8009ebe:	1cd9      	adds	r1, r3, #3
 8009ec0:	4b48      	ldr	r3, [pc, #288]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009ec2:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	@ 0x4fe
 8009ec6:	3307      	adds	r3, #7
 8009ec8:	08db      	lsrs	r3, r3, #3
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	460a      	mov	r2, r1
 8009ed8:	2100      	movs	r1, #0
 8009eda:	4847      	ldr	r0, [pc, #284]	@ (8009ff8 <rfalNfcListenActivation+0x378>)
 8009edc:	f000 f898 	bl	800a010 <rfalNfcNfcDepActivate>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009ee4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d004      	beq.n	8009ef4 <rfalNfcListenActivation+0x274>
 8009eea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009eec:	e08c      	b.n	800a008 <rfalNfcListenActivation+0x388>
                }
                else
            #endif /* RFAL_FEATURE_NFC_DEP */
                {
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_3 );                    /* First data already received - set T3T CE */
 8009eee:	2009      	movs	r0, #9
 8009ef0:	f006 fc88 	bl	8010804 <rfalListenSetState>
                }
            }
            return ERR_BUSY;
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	e087      	b.n	800a008 <rfalNfcListenActivation+0x388>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_CARDEMU_3:                                                 /* T3T activated */
            
            gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCF;
 8009ef8:	4b3a      	ldr	r3, [pc, #232]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009efa:	220c      	movs	r2, #12
 8009efc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_RF;
 8009f00:	4b38      	ldr	r3, [pc, #224]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
            gNfcDev.devList->nfcid       = NULL;
 8009f08:	4b36      	ldr	r3, [pc, #216]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
            gNfcDev.devList->nfcidLen    = 0;
 8009f10:	4b34      	ldr	r3, [pc, #208]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
            
            return ERR_NONE;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	e075      	b.n	800a008 <rfalNfcListenActivation+0x388>
    #if RFAL_FEATURE_NFC_DEP
        /*******************************************************************************/
        case RFAL_LM_STATE_TARGET_A:                                                  /* NFC-DEP activation */
        case RFAL_LM_STATE_TARGET_F:
            
            ret = rfalNfcDepListenGetActivationStatus();
 8009f1c:	f002 fa56 	bl	800c3cc <rfalNfcDepListenGetActivationStatus>
 8009f20:	4603      	mov	r3, r0
 8009f22:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if( ret == ERR_NONE )
 8009f24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d107      	bne.n	8009f3a <rfalNfcListenActivation+0x2ba>
            {
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 8009f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
                gNfcDev.devList->nfcidLen    = RFAL_NFCDEP_NFCID3_LEN;
 8009f32:	4b2c      	ldr	r3, [pc, #176]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009f34:	220a      	movs	r2, #10
 8009f36:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
            }
            return ret;
 8009f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f3c:	e064      	b.n	800a008 <rfalNfcListenActivation+0x388>
    #endif /* RFAL_FEATURE_NFC_DEP */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:                                                      /* AP2P activation */
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 8009f3e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d04c      	beq.n	8009fe0 <rfalNfcListenActivation+0x360>
            {
                
                if( (gNfcDev.lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )                /* Check if AP2P is enabled */
 8009f46:	4b27      	ldr	r3, [pc, #156]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009f48:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8009f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d045      	beq.n	8009fe0 <rfalNfcListenActivation+0x360>
                {
                    
                #if RFAL_FEATURE_NFC_DEP
                    /* Calculate the header length in NFC-A or NFC-F mode*/
                    hdrLen = ( (bitRate == RFAL_BR_106) ? (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN) : RFAL_NFCDEP_LEN_LEN );
 8009f54:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <rfalNfcListenActivation+0x2e0>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e000      	b.n	8009f62 <rfalNfcListenActivation+0x2e2>
 8009f60:	2301      	movs	r3, #1
 8009f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    
                    if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), NULL) )
 8009f66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f6a:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8009f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009f70:	4413      	add	r3, r2
 8009f72:	1cd8      	adds	r0, r3, #3
 8009f74:	4b1b      	ldr	r3, [pc, #108]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009f76:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	@ 0x4fe
 8009f7a:	3307      	adds	r3, #7
 8009f7c:	08db      	lsrs	r3, r3, #3
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	f001 fcb3 	bl	800b8f8 <rfalNfcDepIsAtrReq>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d021      	beq.n	8009fdc <rfalNfcListenActivation+0x35c>
                    {
                        gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_AP2P;
 8009f98:	4b12      	ldr	r3, [pc, #72]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009f9a:	220f      	movs	r2, #15
 8009f9c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
                        EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8009fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009fa4:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8009fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009faa:	4413      	add	r3, r2
 8009fac:	1cd9      	adds	r1, r3, #3
 8009fae:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe4 <rfalNfcListenActivation+0x364>)
 8009fb0:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	@ 0x4fe
 8009fb4:	3307      	adds	r3, #7
 8009fb6:	08db      	lsrs	r3, r3, #3
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	460a      	mov	r2, r1
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	480b      	ldr	r0, [pc, #44]	@ (8009ff8 <rfalNfcListenActivation+0x378>)
 8009fca:	f000 f821 	bl	800a010 <rfalNfcNfcDepActivate>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009fd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <rfalNfcListenActivation+0x360>
 8009fd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fda:	e015      	b.n	800a008 <rfalNfcListenActivation+0x388>
                    }
                    else
                #endif /* RFAL_FEATURE_NFC_DEP */
                    {
                        return ERR_PROTO;
 8009fdc:	230b      	movs	r3, #11
 8009fde:	e013      	b.n	800a008 <rfalNfcListenActivation+0x388>
                    }
                }
            }
            return ERR_BUSY;
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	e011      	b.n	800a008 <rfalNfcListenActivation+0x388>
 8009fe4:	200006b0 	.word	0x200006b0
 8009fe8:	20000aab 	.word	0x20000aab
 8009fec:	20000bae 	.word	0x20000bae
 8009ff0:	20000760 	.word	0x20000760
 8009ff4:	200009a3 	.word	0x200009a3
 8009ff8:	20000740 	.word	0x20000740
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_A:
        case RFAL_LM_STATE_READY_Ax:
        case RFAL_LM_STATE_SLEEP_A:
        case RFAL_LM_STATE_SLEEP_AF:
            return ERR_BUSY;
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e003      	b.n	800a008 <rfalNfcListenActivation+0x388>
        
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            return ERR_LINK_LOSS;
 800a000:	2325      	movs	r3, #37	@ 0x25
 800a002:	e001      	b.n	800a008 <rfalNfcListenActivation+0x388>
        
        default:                                                                      /* Wait for activation */
            break;
 800a004:	bf00      	nop
    }

    return ERR_INTERNAL;
 800a006:	230c      	movs	r3, #12
}
 800a008:	4618      	mov	r0, r3
 800a00a:	372c      	adds	r7, #44	@ 0x2c
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a010 <rfalNfcNfcDepActivate>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_NFC_DEP
static ReturnCode rfalNfcNfcDepActivate( rfalNfcDevice *device, rfalNfcDepCommMode commMode, const uint8_t *atrReq, uint16_t atrReqLen )
{
 800a010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a012:	b0a5      	sub	sp, #148	@ 0x94
 800a014:	af04      	add	r7, sp, #16
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	607a      	str	r2, [r7, #4]
 800a01a:	461a      	mov	r2, r3
 800a01c:	460b      	mov	r3, r1
 800a01e:	72fb      	strb	r3, [r7, #11]
 800a020:	4613      	mov	r3, r2
 800a022:	813b      	strh	r3, [r7, #8]
    rfalNfcDepAtrParam          initParam;
    
    /* If we are in Poll mode */
    if( rfalNfcIsRemDevListener( device->type ) )
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	2b05      	cmp	r3, #5
 800a02a:	d838      	bhi.n	800a09e <rfalNfcNfcDepActivate+0x8e>
    {
        /*******************************************************************************/
        /* If Passive F use the NFCID2 retrieved from SENSF                            */
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b02      	cmp	r3, #2
 800a032:	d106      	bne.n	800a042 <rfalNfcNfcDepActivate+0x32>
        {
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3303      	adds	r3, #3
 800a038:	66fb      	str	r3, [r7, #108]	@ 0x6c
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 800a03a:	2308      	movs	r3, #8
 800a03c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 800a040:	e004      	b.n	800a04c <rfalNfcNfcDepActivate+0x3c>
        }
        else
        {
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 800a042:	4b3e      	ldr	r3, [pc, #248]	@ (800a13c <rfalNfcNfcDepActivate+0x12c>)
 800a044:	66fb      	str	r3, [r7, #108]	@ 0x6c
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800a046:	230a      	movs	r3, #10
 800a048:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        }    
        
        initParam.BS        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800a04c:	2300      	movs	r3, #0
 800a04e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800a052:	2300      	movs	r3, #0
 800a054:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 800a058:	2300      	movs	r3, #0
 800a05a:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 800a05e:	2300      	movs	r3, #0
 800a060:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
        initParam.LR        = RFAL_NFCDEP_LR_254;
 800a064:	2303      	movs	r3, #3
 800a066:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
        initParam.GB        = gNfcDev.disc.GB;
 800a06a:	4b35      	ldr	r3, [pc, #212]	@ (800a140 <rfalNfcNfcDepActivate+0x130>)
 800a06c:	67bb      	str	r3, [r7, #120]	@ 0x78
        initParam.GBLen     = gNfcDev.disc.GBLen;
 800a06e:	4b35      	ldr	r3, [pc, #212]	@ (800a144 <rfalNfcNfcDepActivate+0x134>)
 800a070:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a074:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
        initParam.commMode  = commMode;
 800a078:	7afb      	ldrb	r3, [r7, #11]
 800a07a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800a07e:	230e      	movs	r3, #14
 800a080:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
        
        rfalNfcDepInitialize();
 800a084:	f001 fb7a 	bl	800b77c <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
        return rfalNfcDepInitiatorHandleActivation( &initParam, RFAL_BR_424, &device->proto.nfcDep );
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f103 0220 	add.w	r2, r3, #32
 800a08e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800a092:	2102      	movs	r1, #2
 800a094:	4618      	mov	r0, r3
 800a096:	f001 ff19 	bl	800becc <rfalNfcDepInitiatorHandleActivation>
 800a09a:	4603      	mov	r3, r0
 800a09c:	e04a      	b.n	800a134 <rfalNfcNfcDepActivate+0x124>
    }
    
    /* If we are in Listen mode */
#if RFAL_FEATURE_LISTEN_MODE
    else if( rfalNfcIsRemDevPoller( device->type ) )
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	2b09      	cmp	r3, #9
 800a0a4:	d945      	bls.n	800a132 <rfalNfcNfcDepActivate+0x122>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b0f      	cmp	r3, #15
 800a0ac:	d841      	bhi.n	800a132 <rfalNfcNfcDepActivate+0x122>
    {
        rfalNfcDepListenActvParam   actvParams;
        rfalNfcDepTargetParam       targetParam;
        
        ST_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 800a0ae:	4b25      	ldr	r3, [pc, #148]	@ (800a144 <rfalNfcNfcDepActivate+0x134>)
 800a0b0:	f107 0215 	add.w	r2, r7, #21
 800a0b4:	3314      	adds	r3, #20
 800a0b6:	cb03      	ldmia	r3!, {r0, r1}
 800a0b8:	6010      	str	r0, [r2, #0]
 800a0ba:	6051      	str	r1, [r2, #4]
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	8113      	strh	r3, [r2, #8]
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	77fb      	strb	r3, [r7, #31]
        targetParam.brt       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	f887 3020 	strb.w	r3, [r7, #32]
        targetParam.to        = RFAL_NFCDEP_WT_TRG_MAX;
 800a0ca:	230e      	movs	r3, #14
 800a0cc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        targetParam.ppt       = rfalNfcDepLR2PP(RFAL_NFCDEP_LR_254);
 800a0d0:	2330      	movs	r3, #48	@ 0x30
 800a0d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        targetParam.GBtLen    = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        targetParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800a0dc:	230e      	movs	r3, #14
 800a0de:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        targetParam.commMode  = commMode;
 800a0e2:	7afb      	ldrb	r3, [r7, #11]
 800a0e4:	753b      	strb	r3, [r7, #20]
            
        
        /* Set activation buffer (including header) for NFC-DEP */
        actvParams.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 800a0e6:	4b18      	ldr	r3, [pc, #96]	@ (800a148 <rfalNfcNfcDepActivate+0x138>)
 800a0e8:	65bb      	str	r3, [r7, #88]	@ 0x58
        actvParams.rxLen        = &gNfcDev.rxLen;
 800a0ea:	4b18      	ldr	r3, [pc, #96]	@ (800a14c <rfalNfcNfcDepActivate+0x13c>)
 800a0ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
        actvParams.isRxChaining = &gNfcDev.isRxChaining;
 800a0ee:	4b18      	ldr	r3, [pc, #96]	@ (800a150 <rfalNfcNfcDepActivate+0x140>)
 800a0f0:	663b      	str	r3, [r7, #96]	@ 0x60
        actvParams.nfcDepDev    = &gNfcDev.devList->proto.nfcDep;
 800a0f2:	4b18      	ldr	r3, [pc, #96]	@ (800a154 <rfalNfcNfcDepActivate+0x144>)
 800a0f4:	667b      	str	r3, [r7, #100]	@ 0x64

        rfalListenSetState( ((device->type == RFAL_NFC_POLL_TYPE_NFCA) ? RFAL_LM_STATE_TARGET_A : RFAL_LM_STATE_TARGET_F) );
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	2b0a      	cmp	r3, #10
 800a0fc:	d101      	bne.n	800a102 <rfalNfcNfcDepActivate+0xf2>
 800a0fe:	230a      	movs	r3, #10
 800a100:	e000      	b.n	800a104 <rfalNfcNfcDepActivate+0xf4>
 800a102:	230b      	movs	r3, #11
 800a104:	4618      	mov	r0, r3
 800a106:	f006 fb7d 	bl	8010804 <rfalListenSetState>
        
        rfalNfcDepInitialize();
 800a10a:	f001 fb37 	bl	800b77c <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: send ATR_RES and handle activation */
        return rfalNfcDepListenStartActivation( &targetParam, atrReq, atrReqLen, actvParams );
 800a10e:	893e      	ldrh	r6, [r7, #8]
 800a110:	f107 0514 	add.w	r5, r7, #20
 800a114:	466c      	mov	r4, sp
 800a116:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a11a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a11e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a122:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a124:	4632      	mov	r2, r6
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	4628      	mov	r0, r5
 800a12a:	f002 f83d 	bl	800c1a8 <rfalNfcDepListenStartActivation>
 800a12e:	4603      	mov	r3, r0
 800a130:	e000      	b.n	800a134 <rfalNfcNfcDepActivate+0x124>
    }
#endif  /* RFAL_FEATURE_LISTEN_MODE */
    
    else
    {
        return ERR_INTERNAL;
 800a132:	230c      	movs	r3, #12
    }
}
 800a134:	4618      	mov	r0, r3
 800a136:	3784      	adds	r7, #132	@ 0x84
 800a138:	46bd      	mov	sp, r7
 800a13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a13c:	200006c4 	.word	0x200006c4
 800a140:	200006ce 	.word	0x200006ce
 800a144:	200006b0 	.word	0x200006b0
 800a148:	20000aab 	.word	0x20000aab
 800a14c:	20000bae 	.word	0x20000bae
 800a150:	200009a3 	.word	0x200009a3
 800a154:	20000760 	.word	0x20000760

0800a158 <rfalNfcDeactivation>:
 * \return  ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 800a15c:	4b10      	ldr	r3, [pc, #64]	@ (800a1a0 <rfalNfcDeactivation+0x48>)
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d013      	beq.n	800a18c <rfalNfcDeactivation+0x34>
    {
        switch( gNfcDev.activeDev->rfInterface )
 800a164:	4b0e      	ldr	r3, [pc, #56]	@ (800a1a0 <rfalNfcDeactivation+0x48>)
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	7f5b      	ldrb	r3, [r3, #29]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d008      	beq.n	800a180 <rfalNfcDeactivation+0x28>
 800a16e:	2b02      	cmp	r3, #2
 800a170:	dc09      	bgt.n	800a186 <rfalNfcDeactivation+0x2e>
 800a172:	2b00      	cmp	r3, #0
 800a174:	d009      	beq.n	800a18a <rfalNfcDeactivation+0x32>
 800a176:	2b01      	cmp	r3, #1
 800a178:	d105      	bne.n	800a186 <rfalNfcDeactivation+0x2e>
                break;                                                                /* No specific deactivation to be performed */
            
            /*******************************************************************************/
        #if RFAL_FEATURE_ISO_DEP_POLL
            case RFAL_NFC_INTERFACE_ISODEP:
                rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 800a17a:	f7fc fd2f 	bl	8006bdc <rfalIsoDepDeselect>
                break;
 800a17e:	e005      	b.n	800a18c <rfalNfcDeactivation+0x34>
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                rfalNfcDepRLS();                                                      /* Send a Release to device */
 800a180:	f001 fe3c 	bl	800bdfc <rfalNfcDepRLS>
                break;
 800a184:	e002      	b.n	800a18c <rfalNfcDeactivation+0x34>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            default:
                return ERR_REQUEST;
 800a186:	2305      	movs	r3, #5
 800a188:	e008      	b.n	800a19c <rfalNfcDeactivation+0x44>
                break;                                                                /* No specific deactivation to be performed */
 800a18a:	bf00      	nop
        }
    }
    
    #if RFAL_FEATURE_WAKEUP_MODE
        rfalWakeUpModeStop();
 800a18c:	f006 fe28 	bl	8010de0 <rfalWakeUpModeStop>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
    
    #if RFAL_FEATURE_LISTEN_MODE
        rfalListenStop();
 800a190:	f006 faec 	bl	801076c <rfalListenStop>
    #else
        rfalFieldOff();
    #endif
    
    gNfcDev.activeDev = NULL;
 800a194:	4b02      	ldr	r3, [pc, #8]	@ (800a1a0 <rfalNfcDeactivation+0x48>)
 800a196:	2200      	movs	r2, #0
 800a198:	609a      	str	r2, [r3, #8]
    return ERR_NONE;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	200006b0 	.word	0x200006b0

0800a1a4 <nfcipDxIsSupported>:
/*******************************************************************************/


/*******************************************************************************/
static bool nfcipDxIsSupported( uint8_t Dx, uint8_t BRx, uint8_t BSx )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	71fb      	strb	r3, [r7, #7]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	71bb      	strb	r3, [r7, #6]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	717b      	strb	r3, [r7, #5]
	uint8_t Bx;
	
	/* Take the min of the possible bit rates, we'll use one for both directions */
	Bx = MIN(BRx, BSx);
 800a1b6:	797a      	ldrb	r2, [r7, #5]
 800a1b8:	79bb      	ldrb	r3, [r7, #6]
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	bf28      	it	cs
 800a1be:	4613      	movcs	r3, r2
 800a1c0:	73fb      	strb	r3, [r7, #15]
	
	/* Lower bit rates must be supported for P2P */
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 800a1c2:	79fb      	ldrb	r3, [r7, #7]
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d801      	bhi.n	800a1cc <nfcipDxIsSupported+0x28>
	{
		return true;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e008      	b.n	800a1de <nfcipDxIsSupported+0x3a>
	}
	
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d104      	bne.n	800a1dc <nfcipDxIsSupported+0x38>
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <nfcipDxIsSupported+0x38>
	{
		return true;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e000      	b.n	800a1de <nfcipDxIsSupported+0x3a>
	}

	return false;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
	...

0800a1ec <nfcipTxRx>:


/*******************************************************************************/
static ReturnCode nfcipTxRx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint32_t fwt, uint8_t* paylBuf, uint8_t paylBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rxActLen )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b088      	sub	sp, #32
 800a1f0:	af02      	add	r7, sp, #8
 800a1f2:	60b9      	str	r1, [r7, #8]
 800a1f4:	607a      	str	r2, [r7, #4]
 800a1f6:	603b      	str	r3, [r7, #0]
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	73fb      	strb	r3, [r7, #15]
    ReturnCode ret;
    
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	2b06      	cmp	r3, #6
 800a200:	d002      	beq.n	800a208 <nfcipTxRx+0x1c>
 800a202:	7bfb      	ldrb	r3, [r7, #15]
 800a204:	2b07      	cmp	r3, #7
 800a206:	d101      	bne.n	800a20c <nfcipTxRx+0x20>
    {
        return ERR_PARAM;
 800a208:	2307      	movs	r3, #7
 800a20a:	e030      	b.n	800a26e <nfcipTxRx+0x82>
    }
    
    /* Assign the global params for this TxRx */
    gNfcip.rxBuf       = rxBuf;
 800a20c:	4a1a      	ldr	r2, [pc, #104]	@ (800a278 <nfcipTxRx+0x8c>)
 800a20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a210:	6653      	str	r3, [r2, #100]	@ 0x64
    gNfcip.rxBufLen    = rxBufLen;
 800a212:	4a19      	ldr	r2, [pc, #100]	@ (800a278 <nfcipTxRx+0x8c>)
 800a214:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a216:	f8a2 306a 	strh.w	r3, [r2, #106]	@ 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 800a21a:	4a17      	ldr	r2, [pc, #92]	@ (800a278 <nfcipTxRx+0x8c>)
 800a21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a21e:	66d3      	str	r3, [r2, #108]	@ 0x6c
    
    
    /*******************************************************************************/
	/* Transmission                                                                */
	/*******************************************************************************/
    if(txBuf != NULL)                                              /* if nothing to Tx, just do Rx */               
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d013      	beq.n	800a24e <nfcipTxRx+0x62>
    {
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 800a226:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	7bf8      	ldrb	r0, [r7, #15]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	2300      	movs	r3, #0
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	4613      	mov	r3, r2
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	68b9      	ldr	r1, [r7, #8]
 800a23c:	f000 ff9e 	bl	800b17c <nfcipTx>
 800a240:	4603      	mov	r3, r0
 800a242:	82fb      	strh	r3, [r7, #22]
 800a244:	8afb      	ldrh	r3, [r7, #22]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <nfcipTxRx+0x62>
 800a24a:	8afb      	ldrh	r3, [r7, #22]
 800a24c:	e00f      	b.n	800a26e <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/
	/* Reception                                                                   */
	/*******************************************************************************/
    ret = nfcipDataRx( true );
 800a24e:	2001      	movs	r0, #1
 800a250:	f001 ff66 	bl	800c120 <nfcipDataRx>
 800a254:	4603      	mov	r3, r0
 800a256:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a258:	8afb      	ldrh	r3, [r7, #22]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <nfcipTxRx+0x76>
    {
        return ret;
 800a25e:	8afb      	ldrh	r3, [r7, #22]
 800a260:	e005      	b.n	800a26e <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/    
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 800a262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	461a      	mov	r2, r3
 800a268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a26a:	801a      	strh	r2, [r3, #0]
    return ERR_NONE;                                         		/* Tx and Rx completed successfully                   */
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	20000bb0 	.word	0x20000bb0

0800a27c <nfcipDEPControlMsg>:


/*******************************************************************************/
static ReturnCode nfcipDEPControlMsg( uint8_t pfb, uint8_t RTOX  )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08c      	sub	sp, #48	@ 0x30
 800a280:	af02      	add	r7, sp, #8
 800a282:	4603      	mov	r3, r0
 800a284:	460a      	mov	r2, r1
 800a286:	71fb      	strb	r3, [r7, #7]
 800a288:	4613      	mov	r3, r2
 800a28a:	71bb      	strb	r3, [r7, #6]


    /*******************************************************************************/
    /* Calculate Cmd and fwt to be used                                            */
    /*******************************************************************************/
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 800a28c:	4b2a      	ldr	r3, [pc, #168]	@ (800a338 <nfcipDEPControlMsg+0xbc>)
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <nfcipDEPControlMsg+0x1c>
 800a294:	2307      	movs	r3, #7
 800a296:	e000      	b.n	800a29a <nfcipDEPControlMsg+0x1e>
 800a298:	2306      	movs	r3, #6
 800a29a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 800a29e:	4b26      	ldr	r3, [pc, #152]	@ (800a338 <nfcipDEPControlMsg+0xbc>)
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d018      	beq.n	800a2d8 <nfcipDEPControlMsg+0x5c>
 800a2a6:	79fb      	ldrb	r3, [r7, #7]
 800a2a8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a2ac:	2b80      	cmp	r3, #128	@ 0x80
 800a2ae:	d10d      	bne.n	800a2cc <nfcipDEPControlMsg+0x50>
 800a2b0:	79fb      	ldrb	r3, [r7, #7]
 800a2b2:	f003 0310 	and.w	r3, r3, #16
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d008      	beq.n	800a2cc <nfcipDEPControlMsg+0x50>
 800a2ba:	79bb      	ldrb	r3, [r7, #6]
 800a2bc:	4a1e      	ldr	r2, [pc, #120]	@ (800a338 <nfcipDEPControlMsg+0xbc>)
 800a2be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a2c0:	fb03 f202 	mul.w	r2, r3, r2
 800a2c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a338 <nfcipDEPControlMsg+0xbc>)
 800a2c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2c8:	4413      	add	r3, r2
 800a2ca:	e007      	b.n	800a2dc <nfcipDEPControlMsg+0x60>
 800a2cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a338 <nfcipDEPControlMsg+0xbc>)
 800a2ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2d0:	4b19      	ldr	r3, [pc, #100]	@ (800a338 <nfcipDEPControlMsg+0xbc>)
 800a2d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2d4:	4413      	add	r3, r2
 800a2d6:	e001      	b.n	800a2dc <nfcipDEPControlMsg+0x60>
 800a2d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2dc:	623b      	str	r3, [r7, #32]
    
    if( nfcip_PFBisSTO( pfb ) )
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a2e4:	2b80      	cmp	r3, #128	@ 0x80
 800a2e6:	d116      	bne.n	800a316 <nfcipDEPControlMsg+0x9a>
 800a2e8:	79fb      	ldrb	r3, [r7, #7]
 800a2ea:	f003 0310 	and.w	r3, r3, #16
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d011      	beq.n	800a316 <nfcipDEPControlMsg+0x9a>
    {
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 800a2f2:	79bb      	ldrb	r3, [r7, #6]
 800a2f4:	747b      	strb	r3, [r7, #17]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 800a2f6:	f107 030c 	add.w	r3, r7, #12
 800a2fa:	1d5a      	adds	r2, r3, #5
 800a2fc:	f107 010c 	add.w	r1, r7, #12
 800a300:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	2301      	movs	r3, #1
 800a30e:	f000 ff35 	bl	800b17c <nfcipTx>
 800a312:	4603      	mov	r3, r0
 800a314:	e00c      	b.n	800a330 <nfcipDEPControlMsg+0xb4>
    }
    else
    {
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 800a316:	f107 010c 	add.w	r1, r7, #12
 800a31a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800a31e:	6a3b      	ldr	r3, [r7, #32]
 800a320:	9301      	str	r3, [sp, #4]
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	2300      	movs	r3, #0
 800a328:	2200      	movs	r2, #0
 800a32a:	f000 ff27 	bl	800b17c <nfcipTx>
 800a32e:	4603      	mov	r3, r0
    }
}
 800a330:	4618      	mov	r0, r3
 800a332:	3728      	adds	r7, #40	@ 0x28
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	20000bb0 	.word	0x20000bb0

0800a33c <nfcipClearCounters>:

/*******************************************************************************/
static void nfcipClearCounters( void )
{
 800a33c:	b480      	push	{r7}
 800a33e:	af00      	add	r7, sp, #0
    gNfcip.cntATNRetrys  = 0;
 800a340:	4b0c      	ldr	r3, [pc, #48]	@ (800a374 <nfcipClearCounters+0x38>)
 800a342:	2200      	movs	r2, #0
 800a344:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    gNfcip.cntNACKRetrys = 0;
 800a348:	4b0a      	ldr	r3, [pc, #40]	@ (800a374 <nfcipClearCounters+0x38>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    gNfcip.cntTORetrys   = 0;
 800a350:	4b08      	ldr	r3, [pc, #32]	@ (800a374 <nfcipClearCounters+0x38>)
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
    gNfcip.cntTxRetrys   = 0;
 800a358:	4b06      	ldr	r3, [pc, #24]	@ (800a374 <nfcipClearCounters+0x38>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    gNfcip.cntRTOXRetrys = 0;
 800a360:	4b04      	ldr	r3, [pc, #16]	@ (800a374 <nfcipClearCounters+0x38>)
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 800a368:	bf00      	nop
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20000bb0 	.word	0x20000bb0

0800a378 <nfcipInitiatorHandleDEP>:

/*******************************************************************************/
static ReturnCode nfcipInitiatorHandleDEP( ReturnCode rxRes, uint16_t rxLen, uint16_t *outActRxLen, bool *outIsChaining )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60ba      	str	r2, [r7, #8]
 800a380:	607b      	str	r3, [r7, #4]
 800a382:	4603      	mov	r3, r0
 800a384:	81fb      	strh	r3, [r7, #14]
 800a386:	460b      	mov	r3, r1
 800a388:	81bb      	strh	r3, [r7, #12]
    uint8_t    rxMsgIt;
    uint8_t    rxPFB;
    uint8_t    rxRTOX;
    uint8_t    optHdrLen;
    
    ret        = ERR_INTERNAL;
 800a38a:	230c      	movs	r3, #12
 800a38c:	82fb      	strh	r3, [r7, #22]
    rxMsgIt    = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	757b      	strb	r3, [r7, #21]
    optHdrLen  = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	753b      	strb	r3, [r7, #20]
    
    *outActRxLen    = 0;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	2200      	movs	r2, #0
 800a39a:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 800a3a2:	89fb      	ldrh	r3, [r7, #14]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 80b2 	beq.w	800a50e <nfcipInitiatorHandleDEP+0x196>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f2c0 80ad 	blt.w	800a50a <nfcipInitiatorHandleDEP+0x192>
 800a3b0:	2b1d      	cmp	r3, #29
 800a3b2:	f300 80aa 	bgt.w	800a50a <nfcipInitiatorHandleDEP+0x192>
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	f2c0 80a7 	blt.w	800a50a <nfcipInitiatorHandleDEP+0x192>
 800a3bc:	461a      	mov	r2, r3
 800a3be:	2301      	movs	r3, #1
 800a3c0:	4093      	lsls	r3, r2
 800a3c2:	4a90      	ldr	r2, [pc, #576]	@ (800a604 <nfcipInitiatorHandleDEP+0x28c>)
 800a3c4:	401a      	ands	r2, r3
 800a3c6:	2a00      	cmp	r2, #0
 800a3c8:	bf14      	ite	ne
 800a3ca:	2201      	movne	r2, #1
 800a3cc:	2200      	moveq	r2, #0
 800a3ce:	b2d2      	uxtb	r2, r2
 800a3d0:	2a00      	cmp	r2, #0
 800a3d2:	d176      	bne.n	800a4c2 <nfcipInitiatorHandleDEP+0x14a>
 800a3d4:	f003 0204 	and.w	r2, r3, #4
 800a3d8:	2a00      	cmp	r2, #0
 800a3da:	bf14      	ite	ne
 800a3dc:	2201      	movne	r2, #1
 800a3de:	2200      	moveq	r2, #0
 800a3e0:	b2d2      	uxtb	r2, r2
 800a3e2:	2a00      	cmp	r2, #0
 800a3e4:	f040 808f 	bne.w	800a506 <nfcipInitiatorHandleDEP+0x18e>
 800a3e8:	f003 0310 	and.w	r3, r3, #16
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	bf14      	ite	ne
 800a3f0:	2301      	movne	r3, #1
 800a3f2:	2300      	moveq	r3, #0
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f000 8087 	beq.w	800a50a <nfcipInitiatorHandleDEP+0x192>
        case ERR_TIMEOUT:
            
            nfcipLogI( " NFCIP(I) TIMEOUT  TORetrys:%d \r\n", gNfcip.cntTORetrys );
            
            /* Digital 1.0 14.15.5.6 - If nTO >= Max raise protocol error */
            if( gNfcip.cntTORetrys++ >= NFCIP_MAX_TO_RETRYS )
 800a3fc:	4b82      	ldr	r3, [pc, #520]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a3fe:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	b2d1      	uxtb	r1, r2
 800a406:	4a80      	ldr	r2, [pc, #512]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a408:	f882 1057 	strb.w	r1, [r2, #87]	@ 0x57
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d901      	bls.n	800a414 <nfcipInitiatorHandleDEP+0x9c>
            {
                return ERR_PROTO;
 800a410:	230b      	movs	r3, #11
 800a412:	e26a      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
             * will be done #54. 
             * This is used to address the issue some devices that havea big TO. 
             * Normally LLCP layer has timeout already, and NFCIP layer is still
             * running error handling, retrying ATN/NACKs                                  */
            /*******************************************************************************/
            if( nfcipIsDeactivationPending() )
 800a414:	4b7c      	ldr	r3, [pc, #496]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d008      	beq.n	800a430 <nfcipInitiatorHandleDEP+0xb8>
 800a41e:	4b7a      	ldr	r3, [pc, #488]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a424:	4798      	blx	r3
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <nfcipInitiatorHandleDEP+0xb8>
            {
                nfcipLogI( " skipping error recovery due deactivation pending \r\n");
                return ERR_TIMEOUT;
 800a42c:	2304      	movs	r3, #4
 800a42e:	e25c      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            }
            
            /* Digital 1.0 14.15.5.6 1)  If last PDU was NACK */
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 800a430:	4b75      	ldr	r3, [pc, #468]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a432:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800a436:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a43a:	2b40      	cmp	r3, #64	@ 0x40
 800a43c:	d128      	bne.n	800a490 <nfcipInitiatorHandleDEP+0x118>
 800a43e:	4b72      	ldr	r3, [pc, #456]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a440:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800a444:	f003 0310 	and.w	r3, r3, #16
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d021      	beq.n	800a490 <nfcipInitiatorHandleDEP+0x118>
            {
                /* Digital 1.0 14.15.5.6 2)  if NACKs failed raise protocol error  */
                if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 800a44c:	4b6e      	ldr	r3, [pc, #440]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a44e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	b2d1      	uxtb	r1, r2
 800a456:	4a6c      	ldr	r2, [pc, #432]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a458:	f882 1059 	strb.w	r1, [r2, #89]	@ 0x59
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d901      	bls.n	800a464 <nfcipInitiatorHandleDEP+0xec>
                {
                    return ERR_PROTO;
 800a460:	230b      	movs	r3, #11
 800a462:	e242      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
                }
                
                /* Send NACK */
                nfcipLogI( " NFCIP(I) Sending NACK retry: %d \r\n", gNfcip.cntNACKRetrys );
                EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 800a464:	4b68      	ldr	r3, [pc, #416]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a466:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a46a:	f003 0303 	and.w	r3, r3, #3
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2100      	movs	r1, #0
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff feff 	bl	800a27c <nfcipDEPControlMsg>
 800a47e:	4603      	mov	r3, r0
 800a480:	82fb      	strh	r3, [r7, #22]
 800a482:	8afb      	ldrh	r3, [r7, #22]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <nfcipInitiatorHandleDEP+0x114>
 800a488:	8afb      	ldrh	r3, [r7, #22]
 800a48a:	e22e      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
                return ERR_BUSY;
 800a48c:	2302      	movs	r3, #2
 800a48e:	e22c      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            }
            
            nfcipLogI( " NFCIP(I) Checking if to send ATN  ATNRetrys: %d \r\n", gNfcip.cntATNRetrys );
            
            /* Digital 1.0 14.15.5.6 3)  Otherwise send ATN */                            
            if( gNfcip.cntATNRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 800a490:	4b5d      	ldr	r3, [pc, #372]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a492:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800a496:	1c5a      	adds	r2, r3, #1
 800a498:	b2d1      	uxtb	r1, r2
 800a49a:	4a5b      	ldr	r2, [pc, #364]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a49c:	f882 105a 	strb.w	r1, [r2, #90]	@ 0x5a
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d901      	bls.n	800a4a8 <nfcipInitiatorHandleDEP+0x130>
            {
                return ERR_PROTO;
 800a4a4:	230b      	movs	r3, #11
 800a4a6:	e220      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            }
                            
            /* Send ATN */
            nfcipLogI( " NFCIP(I) Sending ATN \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	2080      	movs	r0, #128	@ 0x80
 800a4ac:	f7ff fee6 	bl	800a27c <nfcipDEPControlMsg>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	82fb      	strh	r3, [r7, #22]
 800a4b4:	8afb      	ldrh	r3, [r7, #22]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <nfcipInitiatorHandleDEP+0x146>
 800a4ba:	8afb      	ldrh	r3, [r7, #22]
 800a4bc:	e215      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            return ERR_BUSY;
 800a4be:	2302      	movs	r3, #2
 800a4c0:	e213      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
                }
#endif /* 0 */
            }

            /* Digital 1.1 16.12.5.4  if NACKs failed raise Transmission error  */
            if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 800a4c2:	4b51      	ldr	r3, [pc, #324]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a4c4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a4c8:	1c5a      	adds	r2, r3, #1
 800a4ca:	b2d1      	uxtb	r1, r2
 800a4cc:	4a4e      	ldr	r2, [pc, #312]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a4ce:	f882 1059 	strb.w	r1, [r2, #89]	@ 0x59
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d901      	bls.n	800a4da <nfcipInitiatorHandleDEP+0x162>
            {
                return ERR_FRAMING;
 800a4d6:	2309      	movs	r3, #9
 800a4d8:	e207      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            }
                            
            /* Send NACK */
            nfcipLogI( " NFCIP(I) Sending NACK  \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 800a4da:	4b4b      	ldr	r3, [pc, #300]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a4dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a4e0:	f003 0303 	and.w	r3, r3, #3
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff fec4 	bl	800a27c <nfcipDEPControlMsg>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	82fb      	strh	r3, [r7, #22]
 800a4f8:	8afb      	ldrh	r3, [r7, #22]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <nfcipInitiatorHandleDEP+0x18a>
 800a4fe:	8afb      	ldrh	r3, [r7, #22]
 800a500:	e1f3      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            return ERR_BUSY;
 800a502:	2302      	movs	r3, #2
 800a504:	e1f1      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            
        case ERR_NONE:
            break;
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 800a506:	2302      	movs	r3, #2
 800a508:	e1ef      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            
        default:
            nfcipLogW( " NFCIP(I) Error: %d \r\n", rxRes );
            return rxRes;
 800a50a:	89fb      	ldrh	r3, [r7, #14]
 800a50c:	e1ed      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            break;
 800a50e:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 800a510:	4b3d      	ldr	r3, [pc, #244]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a512:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a514:	7d7b      	ldrb	r3, [r7, #21]
 800a516:	1c59      	adds	r1, r3, #1
 800a518:	7579      	strb	r1, [r7, #21]
 800a51a:	4413      	add	r3, r2
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	74fb      	strb	r3, [r7, #19]
    
    nfcipLogD( " NFCIP(I) rx OK: %d bytes \r\n", nfcDepLen );
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 800a520:	4b39      	ldr	r3, [pc, #228]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a522:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a524:	7d7b      	ldrb	r3, [r7, #21]
 800a526:	1c59      	adds	r1, r3, #1
 800a528:	7579      	strb	r1, [r7, #21]
 800a52a:	4413      	add	r3, r2
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2bd5      	cmp	r3, #213	@ 0xd5
 800a530:	d001      	beq.n	800a536 <nfcipInitiatorHandleDEP+0x1be>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_RES );
        return ERR_PROTO;
 800a532:	230b      	movs	r3, #11
 800a534:	e1d9      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
    }
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 800a536:	4b34      	ldr	r3, [pc, #208]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a538:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a53a:	7d7b      	ldrb	r3, [r7, #21]
 800a53c:	1c59      	adds	r1, r3, #1
 800a53e:	7579      	strb	r1, [r7, #21]
 800a540:	4413      	add	r3, r2
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	2b07      	cmp	r3, #7
 800a546:	d001      	beq.n	800a54c <nfcipInitiatorHandleDEP+0x1d4>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_CMD_DEP_RES );
        return ERR_PROTO;
 800a548:	230b      	movs	r3, #11
 800a54a:	e1ce      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
    }
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 800a54c:	4b2e      	ldr	r3, [pc, #184]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a54e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a550:	7d7b      	ldrb	r3, [r7, #21]
 800a552:	1c59      	adds	r1, r3, #1
 800a554:	7579      	strb	r1, [r7, #21]
 800a556:	4413      	add	r3, r2
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	74bb      	strb	r3, [r7, #18]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 800a55c:	7cbb      	ldrb	r3, [r7, #18]
 800a55e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a562:	2b80      	cmp	r3, #128	@ 0x80
 800a564:	d00b      	beq.n	800a57e <nfcipInitiatorHandleDEP+0x206>
 800a566:	7cbb      	ldrb	r3, [r7, #18]
 800a568:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a56c:	2b40      	cmp	r3, #64	@ 0x40
 800a56e:	d006      	beq.n	800a57e <nfcipInitiatorHandleDEP+0x206>
 800a570:	7cbb      	ldrb	r3, [r7, #18]
 800a572:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <nfcipInitiatorHandleDEP+0x206>
    {
        return ERR_PROTO;
 800a57a:	230b      	movs	r3, #11
 800a57c:	e1b5      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
    }
        
    /*******************************************************************************/
    /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800a57e:	4b22      	ldr	r3, [pc, #136]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a580:	78db      	ldrb	r3, [r3, #3]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d015      	beq.n	800a5b2 <nfcipInitiatorHandleDEP+0x23a>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 800a586:	4b20      	ldr	r3, [pc, #128]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a588:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a58a:	7d7b      	ldrb	r3, [r7, #21]
 800a58c:	1c59      	adds	r1, r3, #1
 800a58e:	7579      	strb	r1, [r7, #21]
 800a590:	4413      	add	r3, r2
 800a592:	781a      	ldrb	r2, [r3, #0]
 800a594:	4b1c      	ldr	r3, [pc, #112]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a596:	78db      	ldrb	r3, [r3, #3]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d104      	bne.n	800a5a6 <nfcipInitiatorHandleDEP+0x22e>
 800a59c:	7cbb      	ldrb	r3, [r7, #18]
 800a59e:	f003 0304 	and.w	r3, r3, #4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <nfcipInitiatorHandleDEP+0x232>
        {
            return ERR_PROTO;
 800a5a6:	230b      	movs	r3, #11
 800a5a8:	e19f      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800a5aa:	7d3b      	ldrb	r3, [r7, #20]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	753b      	strb	r3, [r7, #20]
 800a5b0:	e006      	b.n	800a5c0 <nfcipInitiatorHandleDEP+0x248>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 800a5b2:	7cbb      	ldrb	r3, [r7, #18]
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <nfcipInitiatorHandleDEP+0x248>
    {
        return ERR_PROTO;
 800a5bc:	230b      	movs	r3, #11
 800a5be:	e194      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
        /* MISRA 15.7 - Empty else */
    }
    
    /*******************************************************************************/
    /* Digital 1.0 14.6.2.8 & 14.6.3.11 NAD must not be used  */
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 800a5c0:	4b11      	ldr	r3, [pc, #68]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a5c2:	791b      	ldrb	r3, [r3, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d015      	beq.n	800a5f4 <nfcipInitiatorHandleDEP+0x27c>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || !nfcip_PFBhasNAD( rxPFB ) )
 800a5c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a5ca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a5cc:	7d7b      	ldrb	r3, [r7, #21]
 800a5ce:	1c59      	adds	r1, r3, #1
 800a5d0:	7579      	strb	r1, [r7, #21]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	781a      	ldrb	r2, [r3, #0]
 800a5d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a608 <nfcipInitiatorHandleDEP+0x290>)
 800a5d8:	791b      	ldrb	r3, [r3, #4]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d104      	bne.n	800a5e8 <nfcipInitiatorHandleDEP+0x270>
 800a5de:	7cbb      	ldrb	r3, [r7, #18]
 800a5e0:	f003 0308 	and.w	r3, r3, #8
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d101      	bne.n	800a5ec <nfcipInitiatorHandleDEP+0x274>
        {
            return ERR_PROTO;
 800a5e8:	230b      	movs	r3, #11
 800a5ea:	e17e      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
        }        
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800a5ec:	7d3b      	ldrb	r3, [r7, #20]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	753b      	strb	r3, [r7, #20]
 800a5f2:	e00b      	b.n	800a60c <nfcipInitiatorHandleDEP+0x294>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 800a5f4:	7cbb      	ldrb	r3, [r7, #18]
 800a5f6:	f003 0308 	and.w	r3, r3, #8
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d006      	beq.n	800a60c <nfcipInitiatorHandleDEP+0x294>
    {
        return ERR_PROTO;
 800a5fe:	230b      	movs	r3, #11
 800a600:	e173      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
 800a602:	bf00      	nop
 800a604:	28200200 	.word	0x28200200
 800a608:	20000bb0 	.word	0x20000bb0
    }
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 800a60c:	7cbb      	ldrb	r3, [r7, #18]
 800a60e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a612:	2b40      	cmp	r3, #64	@ 0x40
 800a614:	d151      	bne.n	800a6ba <nfcipInitiatorHandleDEP+0x342>
    {
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 800a616:	7cbb      	ldrb	r3, [r7, #18]
 800a618:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a61c:	2b40      	cmp	r3, #64	@ 0x40
 800a61e:	d14a      	bne.n	800a6b6 <nfcipInitiatorHandleDEP+0x33e>
 800a620:	7cbb      	ldrb	r3, [r7, #18]
 800a622:	f003 0310 	and.w	r3, r3, #16
 800a626:	2b00      	cmp	r3, #0
 800a628:	d145      	bne.n	800a6b6 <nfcipInitiatorHandleDEP+0x33e>
        {
            nfcipLogI( " NFCIP(I) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 800a62a:	4ba9      	ldr	r3, [pc, #676]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a62c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a630:	461a      	mov	r2, r3
 800a632:	7cbb      	ldrb	r3, [r7, #18]
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	429a      	cmp	r2, r3
 800a63a:	d11c      	bne.n	800a676 <nfcipInitiatorHandleDEP+0x2fe>
            {
                /* 14.12.3.3 R-ACK with correct PNI -> Increment */
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800a63c:	4ba4      	ldr	r3, [pc, #656]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a63e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a642:	3301      	adds	r3, #1
 800a644:	b2db      	uxtb	r3, r3
 800a646:	f003 0303 	and.w	r3, r3, #3
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	4ba0      	ldr	r3, [pc, #640]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a64e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
                                
                /* R-ACK while not performing chaining -> Protocol error*/
                if( !gNfcip.isTxChaining )
 800a652:	4b9f      	ldr	r3, [pc, #636]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a654:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800a658:	f083 0301 	eor.w	r3, r3, #1
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <nfcipInitiatorHandleDEP+0x2ee>
                {
                    return ERR_PROTO;
 800a662:	230b      	movs	r3, #11
 800a664:	e141      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
                }
                
                nfcipClearCounters();
 800a666:	f7ff fe69 	bl	800a33c <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 800a66a:	4b99      	ldr	r3, [pc, #612]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a66c:	2204      	movs	r2, #4
 800a66e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                return ERR_NONE;                            /* This block has been transmitted */
 800a672:	2300      	movs	r3, #0
 800a674:	e139      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            }
            else  /* Digital 1.0 14.12.4.5 ACK with wrong PNI Initiator may retransmit */
            {
                if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 800a676:	4b96      	ldr	r3, [pc, #600]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a678:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a67c:	1c5a      	adds	r2, r3, #1
 800a67e:	b2d1      	uxtb	r1, r2
 800a680:	4a93      	ldr	r2, [pc, #588]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a682:	f882 1056 	strb.w	r1, [r2, #86]	@ 0x56
 800a686:	2b02      	cmp	r3, #2
 800a688:	d901      	bls.n	800a68e <nfcipInitiatorHandleDEP+0x316>
                {
                    return ERR_PROTO;
 800a68a:	230b      	movs	r3, #11
 800a68c:	e12d      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
                /* Extended the MAY in Digital 1.0 14.12.4.5 to only reTransmit if the ACK
                 * is for the previous DEP, otherwise raise Protocol immediately 
                 * If the PNI difference is more than 1 it is worthless to reTransmit 3x
                 * and after raise the error                                              */
                
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 800a68e:	4b90      	ldr	r3, [pc, #576]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a690:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a694:	3b01      	subs	r3, #1
 800a696:	b2da      	uxtb	r2, r3
 800a698:	7cbb      	ldrb	r3, [r7, #18]
 800a69a:	4053      	eors	r3, r2
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	f003 0303 	and.w	r3, r3, #3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d105      	bne.n	800a6b2 <nfcipInitiatorHandleDEP+0x33a>
                {
                    /* ReTransmit */
                    nfcipLogI( " NFCIP(I) Rcvd ACK prev PNI -> reTx \r\n" );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 800a6a6:	4b8a      	ldr	r3, [pc, #552]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a6a8:	2205      	movs	r2, #5
 800a6aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                    return ERR_BUSY;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	e11b      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
                }
                
                nfcipLogI( " NFCIP(I) Rcvd ACK unexpected far PNI -> Error \r\n" );
                return ERR_PROTO;
 800a6b2:	230b      	movs	r3, #11
 800a6b4:	e119      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            }
        }
        else /* Digital 1.0 - 14.12.5.2 Target must never send NACK  */
        {            
            return ERR_PROTO;
 800a6b6:	230b      	movs	r3, #11
 800a6b8:	e117      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 800a6ba:	7cbb      	ldrb	r3, [r7, #18]
 800a6bc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a6c0:	2b80      	cmp	r3, #128	@ 0x80
 800a6c2:	f040 8094 	bne.w	800a7ee <nfcipInitiatorHandleDEP+0x476>
    {
        nfcipLogI( " NFCIP(I) Rcvd S-PDU  \r\n" );
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 800a6c6:	7cbb      	ldrb	r3, [r7, #18]
 800a6c8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a6cc:	2b80      	cmp	r3, #128	@ 0x80
 800a6ce:	d146      	bne.n	800a75e <nfcipInitiatorHandleDEP+0x3e6>
 800a6d0:	7cbb      	ldrb	r3, [r7, #18]
 800a6d2:	f003 0310 	and.w	r3, r3, #16
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d141      	bne.n	800a75e <nfcipInitiatorHandleDEP+0x3e6>
        {
            nfcipLogI( " NFCIP(I) Rcvd ATN  \r\n" );
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 800a6da:	4b7d      	ldr	r3, [pc, #500]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a6dc:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800a6e0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a6e4:	2b80      	cmp	r3, #128	@ 0x80
 800a6e6:	d138      	bne.n	800a75a <nfcipInitiatorHandleDEP+0x3e2>
 800a6e8:	4b79      	ldr	r3, [pc, #484]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a6ea:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800a6ee:	f003 0310 	and.w	r3, r3, #16
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d131      	bne.n	800a75a <nfcipInitiatorHandleDEP+0x3e2>
            {  
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 800a6f6:	4b76      	ldr	r3, [pc, #472]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
                
                /* Although spec is not clear NFC Forum Digital test is expecting to
                 * retransmit upon receiving ATN_RES */
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800a6fe:	4b74      	ldr	r3, [pc, #464]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a700:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800a704:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a708:	2b80      	cmp	r3, #128	@ 0x80
 800a70a:	d114      	bne.n	800a736 <nfcipInitiatorHandleDEP+0x3be>
 800a70c:	4b70      	ldr	r3, [pc, #448]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a70e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800a712:	f003 0310 	and.w	r3, r3, #16
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00d      	beq.n	800a736 <nfcipInitiatorHandleDEP+0x3be>
                {
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx RTOX_RES \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800a71a:	4b6d      	ldr	r3, [pc, #436]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a71c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a720:	4619      	mov	r1, r3
 800a722:	2090      	movs	r0, #144	@ 0x90
 800a724:	f7ff fdaa 	bl	800a27c <nfcipDEPControlMsg>
 800a728:	4603      	mov	r3, r0
 800a72a:	82fb      	strh	r3, [r7, #22]
 800a72c:	8afb      	ldrh	r3, [r7, #22]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d011      	beq.n	800a756 <nfcipInitiatorHandleDEP+0x3de>
 800a732:	8afb      	ldrh	r3, [r7, #22]
 800a734:	e0d9      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
                }
                else
                {
                    /* ReTransmit ? */
                    if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 800a736:	4b66      	ldr	r3, [pc, #408]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a738:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	b2d1      	uxtb	r1, r2
 800a740:	4a63      	ldr	r2, [pc, #396]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a742:	f882 1056 	strb.w	r1, [r2, #86]	@ 0x56
 800a746:	2b02      	cmp	r3, #2
 800a748:	d901      	bls.n	800a74e <nfcipInitiatorHandleDEP+0x3d6>
                    {
                        return ERR_PROTO;
 800a74a:	230b      	movs	r3, #11
 800a74c:	e0cd      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
                    }
                    
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx  PNI: %d \r\n", gNfcip.pni );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 800a74e:	4b60      	ldr	r3, [pc, #384]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a750:	2205      	movs	r2, #5
 800a752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                }
                
                return ERR_BUSY;
 800a756:	2302      	movs	r3, #2
 800a758:	e0c7      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            }
            else                                               /* Digital 1.0  14.12.4.4 & 14.12.4.8 */
            {
                return ERR_PROTO;
 800a75a:	230b      	movs	r3, #11
 800a75c:	e0c5      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            }
        }
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 800a75e:	7cbb      	ldrb	r3, [r7, #18]
 800a760:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a764:	2b80      	cmp	r3, #128	@ 0x80
 800a766:	d140      	bne.n	800a7ea <nfcipInitiatorHandleDEP+0x472>
 800a768:	7cbb      	ldrb	r3, [r7, #18]
 800a76a:	f003 0310 	and.w	r3, r3, #16
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d03b      	beq.n	800a7ea <nfcipInitiatorHandleDEP+0x472>
        {
            nfcipLogI( " NFCIP(I) Rcvd TO  \r\n" );
            
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 800a772:	4b57      	ldr	r3, [pc, #348]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a774:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a776:	7d7b      	ldrb	r3, [r7, #21]
 800a778:	1c59      	adds	r1, r3, #1
 800a77a:	7579      	strb	r1, [r7, #21]
 800a77c:	4413      	add	r3, r2
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	747b      	strb	r3, [r7, #17]
            
            /* Digital 1.1 16.12.4.3 - Initiator MAY stop accepting subsequent RTOX Req   *
             *                       - RTOX request to an ATN -> Protocol error           */
            if( (gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 800a782:	4b53      	ldr	r3, [pc, #332]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a784:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a788:	1c5a      	adds	r2, r3, #1
 800a78a:	b2d1      	uxtb	r1, r2
 800a78c:	4a50      	ldr	r2, [pc, #320]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a78e:	f882 1058 	strb.w	r1, [r2, #88]	@ 0x58
 800a792:	2b03      	cmp	r3, #3
 800a794:	d80d      	bhi.n	800a7b2 <nfcipInitiatorHandleDEP+0x43a>
 800a796:	4b4e      	ldr	r3, [pc, #312]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a798:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800a79c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a7a0:	2b80      	cmp	r3, #128	@ 0x80
 800a7a2:	d108      	bne.n	800a7b6 <nfcipInitiatorHandleDEP+0x43e>
 800a7a4:	4b4a      	ldr	r3, [pc, #296]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a7a6:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800a7aa:	f003 0310 	and.w	r3, r3, #16
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <nfcipInitiatorHandleDEP+0x43e>
            {
                return ERR_PROTO;
 800a7b2:	230b      	movs	r3, #11
 800a7b4:	e099      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            }
            
            /* Digital 1.1 16.8.4.1 RTOX must be between [1,59] */
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 800a7b6:	7c7b      	ldrb	r3, [r7, #17]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <nfcipInitiatorHandleDEP+0x44a>
 800a7bc:	7c7b      	ldrb	r3, [r7, #17]
 800a7be:	2b3b      	cmp	r3, #59	@ 0x3b
 800a7c0:	d901      	bls.n	800a7c6 <nfcipInitiatorHandleDEP+0x44e>
            {
                return ERR_PROTO;
 800a7c2:	230b      	movs	r3, #11
 800a7c4:	e091      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            }
            
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 800a7c6:	7c7b      	ldrb	r3, [r7, #17]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	2090      	movs	r0, #144	@ 0x90
 800a7cc:	f7ff fd56 	bl	800a27c <nfcipDEPControlMsg>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	82fb      	strh	r3, [r7, #22]
 800a7d4:	8afb      	ldrh	r3, [r7, #22]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d001      	beq.n	800a7de <nfcipInitiatorHandleDEP+0x466>
 800a7da:	8afb      	ldrh	r3, [r7, #22]
 800a7dc:	e085      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            gNfcip.lastRTOX = rxRTOX;
 800a7de:	4a3c      	ldr	r2, [pc, #240]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a7e0:	7c7b      	ldrb	r3, [r7, #17]
 800a7e2:	f882 3055 	strb.w	r3, [r2, #85]	@ 0x55
            
            return ERR_BUSY;
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	e07f      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
        }
        else
        {
            /* Unexpected S-PDU */
            return ERR_PROTO;                       /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
 800a7ea:	230b      	movs	r3, #11
 800a7ec:	e07d      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 800a7ee:	7cbb      	ldrb	r3, [r7, #18]
 800a7f0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d177      	bne.n	800a8e8 <nfcipInitiatorHandleDEP+0x570>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 800a7f8:	4b35      	ldr	r3, [pc, #212]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a7fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a7fe:	461a      	mov	r2, r3
 800a800:	7cbb      	ldrb	r3, [r7, #18]
 800a802:	f003 0303 	and.w	r3, r3, #3
 800a806:	429a      	cmp	r2, r3
 800a808:	d001      	beq.n	800a80e <nfcipInitiatorHandleDEP+0x496>
        {
            nfcipLogI( " NFCIP(I) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni  , nfcip_PBF_PNI( rxPFB ) );
            return ERR_PROTO;
 800a80a:	230b      	movs	r3, #11
 800a80c:	e06d      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
        }
        
        nfcipLogD( " NFCIP(I) Rcvd IPDU OK    PNI: %d \r\n", gNfcip.pni );
        
        /* 14.12.3.3 I-PDU with correct PNI -> Increment */
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800a80e:	4b30      	ldr	r3, [pc, #192]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a814:	3301      	adds	r3, #1
 800a816:	b2db      	uxtb	r3, r3
 800a818:	f003 0303 	and.w	r3, r3, #3
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	4b2c      	ldr	r3, [pc, #176]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
                
        
        /* Successful data Exchange */
        nfcipClearCounters();
 800a824:	f7ff fd8a 	bl	800a33c <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 800a828:	7cfb      	ldrb	r3, [r7, #19]
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	7d3b      	ldrb	r3, [r7, #20]
 800a82e:	b29b      	uxth	r3, r3
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	b29b      	uxth	r3, r3
 800a834:	3b04      	subs	r3, #4
 800a836:	b29a      	uxth	r2, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	801a      	strh	r2, [r3, #0]
        
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 800a83c:	4b24      	ldr	r3, [pc, #144]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a83e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800a842:	461a      	mov	r2, r3
 800a844:	7d3b      	ldrb	r3, [r7, #20]
 800a846:	3304      	adds	r3, #4
 800a848:	429a      	cmp	r2, r3
 800a84a:	d013      	beq.n	800a874 <nfcipInitiatorHandleDEP+0x4fc>
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	881b      	ldrh	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00f      	beq.n	800a874 <nfcipInitiatorHandleDEP+0x4fc>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 800a854:	4b1e      	ldr	r3, [pc, #120]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a858:	4a1d      	ldr	r2, [pc, #116]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a85a:	f892 2071 	ldrb.w	r2, [r2, #113]	@ 0x71
 800a85e:	1898      	adds	r0, r3, r2
 800a860:	4b1b      	ldr	r3, [pc, #108]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a862:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a864:	7d3b      	ldrb	r3, [r7, #20]
 800a866:	3304      	adds	r3, #4
 800a868:	18d1      	adds	r1, r2, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	f006 fe64 	bl	801153c <memmove>
        }

        /*******************************************************************************/
        /* Check if target is indicating chaining MI                                   */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 800a874:	7cbb      	ldrb	r3, [r7, #18]
 800a876:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d12a      	bne.n	800a8d4 <nfcipInitiatorHandleDEP+0x55c>
 800a87e:	7cbb      	ldrb	r3, [r7, #18]
 800a880:	f003 0310 	and.w	r3, r3, #16
 800a884:	2b00      	cmp	r3, #0
 800a886:	d025      	beq.n	800a8d4 <nfcipInitiatorHandleDEP+0x55c>
        {
            gNfcip.isRxChaining = true;
 800a888:	4b11      	ldr	r3, [pc, #68]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
            *outIsChaining      = true;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(I) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800a896:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a898:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a89c:	f003 0303 	and.w	r3, r3, #3
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8a6:	b2d8      	uxtb	r0, r3
 800a8a8:	4b09      	ldr	r3, [pc, #36]	@ (800a8d0 <nfcipInitiatorHandleDEP+0x558>)
 800a8aa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a8ac:	7d7b      	ldrb	r3, [r7, #21]
 800a8ae:	1c59      	adds	r1, r3, #1
 800a8b0:	7579      	strb	r1, [r7, #21]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	f7ff fce0 	bl	800a27c <nfcipDEPControlMsg>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	82fb      	strh	r3, [r7, #22]
 800a8c0:	8afb      	ldrh	r3, [r7, #22]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <nfcipInitiatorHandleDEP+0x552>
 800a8c6:	8afb      	ldrh	r3, [r7, #22]
 800a8c8:	e00f      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 800a8ca:	230d      	movs	r3, #13
 800a8cc:	e00d      	b.n	800a8ea <nfcipInitiatorHandleDEP+0x572>
 800a8ce:	bf00      	nop
 800a8d0:	20000bb0 	.word	0x20000bb0
        }
        else
        {
            gNfcip.isRxChaining = false;
 800a8d4:	4b07      	ldr	r3, [pc, #28]	@ (800a8f4 <nfcipInitiatorHandleDEP+0x57c>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 800a8dc:	4b05      	ldr	r3, [pc, #20]	@ (800a8f4 <nfcipInitiatorHandleDEP+0x57c>)
 800a8de:	2204      	movs	r2, #4
 800a8e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            
            ret = ERR_NONE;    /* Data exchange done */
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	82fb      	strh	r3, [r7, #22]
        }
    }
    return ret;
 800a8e8:	8afb      	ldrh	r3, [r7, #22]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20000bb0 	.word	0x20000bb0

0800a8f8 <nfcipTargetHandleRX>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleRX( ReturnCode rxRes, uint16_t *outActRxLen, bool *outIsChaining )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b08c      	sub	sp, #48	@ 0x30
 800a8fc:	af04      	add	r7, sp, #16
 800a8fe:	4603      	mov	r3, r0
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	81fb      	strh	r3, [r7, #14]
    uint8_t    rxPFB;
    uint8_t    optHdrLen;
    uint8_t    resBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_TARGET_RES_MAX];
        
    
    ret        = ERR_INTERNAL;
 800a906:	230c      	movs	r3, #12
 800a908:	83fb      	strh	r3, [r7, #30]
    rxMsgIt    = 0;
 800a90a:	2300      	movs	r3, #0
 800a90c:	777b      	strb	r3, [r7, #29]
    optHdrLen  = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	773b      	strb	r3, [r7, #28]
    
    *outActRxLen    = 0;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	2200      	movs	r2, #0
 800a916:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 800a91e:	89fb      	ldrh	r3, [r7, #14]
 800a920:	2b25      	cmp	r3, #37	@ 0x25
 800a922:	d006      	beq.n	800a932 <nfcipTargetHandleRX+0x3a>
 800a924:	2b25      	cmp	r3, #37	@ 0x25
 800a926:	dc0a      	bgt.n	800a93e <nfcipTargetHandleRX+0x46>
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d01d      	beq.n	800a968 <nfcipTargetHandleRX+0x70>
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d003      	beq.n	800a938 <nfcipTargetHandleRX+0x40>
 800a930:	e005      	b.n	800a93e <nfcipTargetHandleRX+0x46>
        case ERR_NONE:
            break;
            
        case ERR_LINK_LOSS:
            nfcipLogW( " NFCIP(T) Error: %d \r\n", rxRes );
            return rxRes;
 800a932:	89fb      	ldrh	r3, [r7, #14]
 800a934:	f000 bc1a 	b.w	800b16c <nfcipTargetHandleRX+0x874>
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 800a938:	2302      	movs	r3, #2
 800a93a:	f000 bc17 	b.w	800b16c <nfcipTargetHandleRX+0x874>
             * The Target MUST always stay in receive mode when a                          *
             * Transmission Error or a Protocol Error occurs.                              *
             *                                                                             *
             * Do not push Transmission/Protocol Errors to upper layer in Listen Mode #766 */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800a93e:	4b9e      	ldr	r3, [pc, #632]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a940:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a942:	4b9d      	ldr	r3, [pc, #628]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a944:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800a948:	4b9b      	ldr	r3, [pc, #620]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a94a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a94c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a950:	9002      	str	r0, [sp, #8]
 800a952:	2004      	movs	r0, #4
 800a954:	9001      	str	r0, [sp, #4]
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	460b      	mov	r3, r1
 800a95a:	2100      	movs	r1, #0
 800a95c:	2000      	movs	r0, #0
 800a95e:	f004 fa13 	bl	800ed88 <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 800a962:	2302      	movs	r3, #2
 800a964:	f000 bc02 	b.w	800b16c <nfcipTargetHandleRX+0x874>
            break;
 800a968:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 800a96a:	4b93      	ldr	r3, [pc, #588]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a96c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a96e:	7f7b      	ldrb	r3, [r7, #29]
 800a970:	1c59      	adds	r1, r3, #1
 800a972:	7779      	strb	r1, [r7, #29]
 800a974:	4413      	add	r3, r2
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	76fb      	strb	r3, [r7, #27]
        
    nfcipLogD( " NFCIP(T) rx OK: %d bytes \r\n", nfcDepLen );
    
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 800a97a:	4b8f      	ldr	r3, [pc, #572]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a97c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a97e:	7f7b      	ldrb	r3, [r7, #29]
 800a980:	1c59      	adds	r1, r3, #1
 800a982:	7779      	strb	r1, [r7, #29]
 800a984:	4413      	add	r3, r2
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2bd4      	cmp	r3, #212	@ 0xd4
 800a98a:	d013      	beq.n	800a9b4 <nfcipTargetHandleRX+0xbc>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800a98c:	4b8a      	ldr	r3, [pc, #552]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a98e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a990:	4b89      	ldr	r3, [pc, #548]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a992:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800a996:	4b88      	ldr	r3, [pc, #544]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a99a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a99e:	9002      	str	r0, [sp, #8]
 800a9a0:	2004      	movs	r0, #4
 800a9a2:	9001      	str	r0, [sp, #4]
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	f004 f9ec 	bl	800ed88 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore bad request */
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	e3db      	b.n	800b16c <nfcipTargetHandleRX+0x874>
    
    
    /*******************************************************************************/
    /* Check whether target rcvd a normal DEP or deactivation request              */
    /*******************************************************************************/
    switch( gNfcip.rxBuf[rxMsgIt++] )
 800a9b4:	4b80      	ldr	r3, [pc, #512]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a9b6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a9b8:	7f7b      	ldrb	r3, [r7, #29]
 800a9ba:	1c59      	adds	r1, r3, #1
 800a9bc:	7779      	strb	r1, [r7, #29]
 800a9be:	4413      	add	r3, r2
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	2b0a      	cmp	r3, #10
 800a9c4:	d032      	beq.n	800aa2c <nfcipTargetHandleRX+0x134>
 800a9c6:	2b0a      	cmp	r3, #10
 800a9c8:	dc5d      	bgt.n	800aa86 <nfcipTargetHandleRX+0x18e>
 800a9ca:	2b06      	cmp	r3, #6
 800a9cc:	d06f      	beq.n	800aaae <nfcipTargetHandleRX+0x1b6>
 800a9ce:	2b08      	cmp	r3, #8
 800a9d0:	d159      	bne.n	800aa86 <nfcipTargetHandleRX+0x18e>
            
            nfcipLogI( " NFCIP(T) rx DSL \r\n" );
            
            /* Digital 1.0  14.9.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.9.1.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 800a9d2:	4b79      	ldr	r3, [pc, #484]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a9d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a9d6:	7f7b      	ldrb	r3, [r7, #29]
 800a9d8:	1c59      	adds	r1, r3, #1
 800a9da:	7779      	strb	r1, [r7, #29]
 800a9dc:	4413      	add	r3, r2
 800a9de:	781a      	ldrb	r2, [r3, #0]
 800a9e0:	4b75      	ldr	r3, [pc, #468]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a9e2:	78db      	ldrb	r3, [r3, #3]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d102      	bne.n	800a9ee <nfcipTargetHandleRX+0xf6>
 800a9e8:	7efb      	ldrb	r3, [r7, #27]
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	d003      	beq.n	800a9f6 <nfcipTargetHandleRX+0xfe>
 800a9ee:	4b72      	ldr	r3, [pc, #456]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a9f0:	78db      	ldrb	r3, [r3, #3]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d106      	bne.n	800aa04 <nfcipTargetHandleRX+0x10c>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 800a9f6:	4b70      	ldr	r3, [pc, #448]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800a9f8:	78db      	ldrb	r3, [r3, #3]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d104      	bne.n	800aa08 <nfcipTargetHandleRX+0x110>
 800a9fe:	7efb      	ldrb	r3, [r7, #27]
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d001      	beq.n	800aa08 <nfcipTargetHandleRX+0x110>
               )
            {
                nfcipLogI( " NFCIP(T) DSL wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 800aa04:	2302      	movs	r3, #2
 800aa06:	e3b1      	b.n	800b16c <nfcipTargetHandleRX+0x874>
            }
            
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 800aa08:	f107 0114 	add.w	r1, r7, #20
 800aa0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	2300      	movs	r3, #0
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	2300      	movs	r3, #0
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2009      	movs	r0, #9
 800aa1c:	f000 fbae 	bl	800b17c <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 800aa20:	4b65      	ldr	r3, [pc, #404]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aa22:	2210      	movs	r2, #16
 800aa24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            return ERR_SLEEP_REQ;
 800aa28:	2320      	movs	r3, #32
 800aa2a:	e39f      	b.n	800b16c <nfcipTargetHandleRX+0x874>
            
            nfcipLogI( " NFCIP(T) rx RLS \r\n" );
            
            /* Digital 1.0  14.10.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.10.2.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 800aa2c:	4b62      	ldr	r3, [pc, #392]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aa2e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aa30:	7f7b      	ldrb	r3, [r7, #29]
 800aa32:	1c59      	adds	r1, r3, #1
 800aa34:	7779      	strb	r1, [r7, #29]
 800aa36:	4413      	add	r3, r2
 800aa38:	781a      	ldrb	r2, [r3, #0]
 800aa3a:	4b5f      	ldr	r3, [pc, #380]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aa3c:	78db      	ldrb	r3, [r3, #3]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d102      	bne.n	800aa48 <nfcipTargetHandleRX+0x150>
 800aa42:	7efb      	ldrb	r3, [r7, #27]
 800aa44:	2b04      	cmp	r3, #4
 800aa46:	d003      	beq.n	800aa50 <nfcipTargetHandleRX+0x158>
 800aa48:	4b5b      	ldr	r3, [pc, #364]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aa4a:	78db      	ldrb	r3, [r3, #3]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d106      	bne.n	800aa5e <nfcipTargetHandleRX+0x166>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 800aa50:	4b59      	ldr	r3, [pc, #356]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aa52:	78db      	ldrb	r3, [r3, #3]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d104      	bne.n	800aa62 <nfcipTargetHandleRX+0x16a>
 800aa58:	7efb      	ldrb	r3, [r7, #27]
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d901      	bls.n	800aa62 <nfcipTargetHandleRX+0x16a>
               )
            {
                nfcipLogI( " NFCIP(T) RLS wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 800aa5e:	2302      	movs	r3, #2
 800aa60:	e384      	b.n	800b16c <nfcipTargetHandleRX+0x874>
            }
                
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 800aa62:	f107 0114 	add.w	r1, r7, #20
 800aa66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa6a:	9301      	str	r3, [sp, #4]
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	2300      	movs	r3, #0
 800aa72:	2200      	movs	r2, #0
 800aa74:	200b      	movs	r0, #11
 800aa76:	f000 fb81 	bl	800b17c <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 800aa7a:	4b4f      	ldr	r3, [pc, #316]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aa7c:	220c      	movs	r2, #12
 800aa7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            return ERR_RELEASE_REQ;
 800aa82:	231f      	movs	r3, #31
 800aa84:	e372      	b.n	800b16c <nfcipTargetHandleRX+0x874>
        default:
            
            /* Don't go to NFCIP_ST_TARG_DEP_IDLE state as it needs to ignore this    *
             * invalid frame, and keep waiting for more frames                        */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800aa86:	4b4c      	ldr	r3, [pc, #304]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aa88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aa8a:	4b4b      	ldr	r3, [pc, #300]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aa8c:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800aa90:	4b49      	ldr	r3, [pc, #292]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aa92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa98:	9002      	str	r0, [sp, #8]
 800aa9a:	2004      	movs	r0, #4
 800aa9c:	9001      	str	r0, [sp, #4]
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f004 f96f 	bl	800ed88 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad frame */
 800aaaa:	2302      	movs	r3, #2
 800aaac:	e35e      	b.n	800b16c <nfcipTargetHandleRX+0x874>
            break;                                /* Continue to normal DEP processing */
 800aaae:	bf00      	nop
    }
    
    /*******************************************************************************/
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 800aab0:	4b41      	ldr	r3, [pc, #260]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aab2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aab4:	7f7b      	ldrb	r3, [r7, #29]
 800aab6:	1c59      	adds	r1, r3, #1
 800aab8:	7779      	strb	r1, [r7, #29]
 800aaba:	4413      	add	r3, r2
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	76bb      	strb	r3, [r7, #26]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 800aac0:	7ebb      	ldrb	r3, [r7, #26]
 800aac2:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800aac6:	2b80      	cmp	r3, #128	@ 0x80
 800aac8:	d01d      	beq.n	800ab06 <nfcipTargetHandleRX+0x20e>
 800aaca:	7ebb      	ldrb	r3, [r7, #26]
 800aacc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800aad0:	2b40      	cmp	r3, #64	@ 0x40
 800aad2:	d018      	beq.n	800ab06 <nfcipTargetHandleRX+0x20e>
 800aad4:	7ebb      	ldrb	r3, [r7, #26]
 800aad6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d013      	beq.n	800ab06 <nfcipTargetHandleRX+0x20e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800aade:	4b36      	ldr	r3, [pc, #216]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aae0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aae2:	4b35      	ldr	r3, [pc, #212]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aae4:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800aae8:	4b33      	ldr	r3, [pc, #204]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800aaea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aaf0:	9002      	str	r0, [sp, #8]
 800aaf2:	2004      	movs	r0, #4
 800aaf4:	9001      	str	r0, [sp, #4]
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	2100      	movs	r1, #0
 800aafc:	2000      	movs	r0, #0
 800aafe:	f004 f943 	bl	800ed88 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore invalid PFB  */
 800ab02:	2302      	movs	r3, #2
 800ab04:	e332      	b.n	800b16c <nfcipTargetHandleRX+0x874>
    }
    
    /*******************************************************************************/   
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800ab06:	4b2c      	ldr	r3, [pc, #176]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab08:	78db      	ldrb	r3, [r3, #3]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d03b      	beq.n	800ab86 <nfcipTargetHandleRX+0x28e>
    {
        if( !nfcip_PFBhasDID( rxPFB ) )
 800ab0e:	7ebb      	ldrb	r3, [r7, #26]
 800ab10:	f003 0304 	and.w	r3, r3, #4
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d113      	bne.n	800ab40 <nfcipTargetHandleRX+0x248>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ab18:	4b27      	ldr	r3, [pc, #156]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab1a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ab1c:	4b26      	ldr	r3, [pc, #152]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab1e:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800ab22:	4b25      	ldr	r3, [pc, #148]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab2a:	9002      	str	r0, [sp, #8]
 800ab2c:	2004      	movs	r0, #4
 800ab2e:	9001      	str	r0, [sp, #4]
 800ab30:	9300      	str	r3, [sp, #0]
 800ab32:	460b      	mov	r3, r1
 800ab34:	2100      	movs	r1, #0
 800ab36:	2000      	movs	r0, #0
 800ab38:	f004 f926 	bl	800ed88 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	e315      	b.n	800b16c <nfcipTargetHandleRX+0x874>
        }
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 800ab40:	4b1d      	ldr	r3, [pc, #116]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab42:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ab44:	7f7b      	ldrb	r3, [r7, #29]
 800ab46:	1c59      	adds	r1, r3, #1
 800ab48:	7779      	strb	r1, [r7, #29]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	781a      	ldrb	r2, [r3, #0]
 800ab4e:	4b1a      	ldr	r3, [pc, #104]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab50:	78db      	ldrb	r3, [r3, #3]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d013      	beq.n	800ab7e <nfcipTargetHandleRX+0x286>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ab56:	4b18      	ldr	r3, [pc, #96]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab58:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ab5a:	4b17      	ldr	r3, [pc, #92]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab5c:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800ab60:	4b15      	ldr	r3, [pc, #84]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab68:	9002      	str	r0, [sp, #8]
 800ab6a:	2004      	movs	r0, #4
 800ab6c:	9001      	str	r0, [sp, #4]
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	460b      	mov	r3, r1
 800ab72:	2100      	movs	r1, #0
 800ab74:	2000      	movs	r0, #0
 800ab76:	f004 f907 	bl	800ed88 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	e2f6      	b.n	800b16c <nfcipTargetHandleRX+0x874>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800ab7e:	7f3b      	ldrb	r3, [r7, #28]
 800ab80:	3301      	adds	r3, #1
 800ab82:	773b      	strb	r3, [r7, #28]
 800ab84:	e01a      	b.n	800abbc <nfcipTargetHandleRX+0x2c4>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 800ab86:	7ebb      	ldrb	r3, [r7, #26]
 800ab88:	f003 0304 	and.w	r3, r3, #4
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d015      	beq.n	800abbc <nfcipTargetHandleRX+0x2c4>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ab90:	4b09      	ldr	r3, [pc, #36]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab92:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ab94:	4b08      	ldr	r3, [pc, #32]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab96:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800ab9a:	4b07      	ldr	r3, [pc, #28]	@ (800abb8 <nfcipTargetHandleRX+0x2c0>)
 800ab9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aba2:	9002      	str	r0, [sp, #8]
 800aba4:	2004      	movs	r0, #4
 800aba6:	9001      	str	r0, [sp, #4]
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	460b      	mov	r3, r1
 800abac:	2100      	movs	r1, #0
 800abae:	2000      	movs	r0, #0
 800abb0:	f004 f8ea 	bl	800ed88 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore unexpected DID  */
 800abb4:	2302      	movs	r3, #2
 800abb6:	e2d9      	b.n	800b16c <nfcipTargetHandleRX+0x874>
 800abb8:	20000bb0 	.word	0x20000bb0
        /* MISRA 15.7 - Empty else */
    }
                                  
        
    /*******************************************************************************/
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 800abbc:	4b96      	ldr	r3, [pc, #600]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800abbe:	791b      	ldrb	r3, [r3, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d027      	beq.n	800ac14 <nfcipTargetHandleRX+0x31c>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 800abc4:	4b94      	ldr	r3, [pc, #592]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800abc6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800abc8:	7f7b      	ldrb	r3, [r7, #29]
 800abca:	1c59      	adds	r1, r3, #1
 800abcc:	7779      	strb	r1, [r7, #29]
 800abce:	4413      	add	r3, r2
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	4b91      	ldr	r3, [pc, #580]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800abd4:	78db      	ldrb	r3, [r3, #3]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d104      	bne.n	800abe4 <nfcipTargetHandleRX+0x2ec>
 800abda:	7ebb      	ldrb	r3, [r7, #26]
 800abdc:	f003 0304 	and.w	r3, r3, #4
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d113      	bne.n	800ac0c <nfcipTargetHandleRX+0x314>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800abe4:	4b8c      	ldr	r3, [pc, #560]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800abe6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800abe8:	4b8b      	ldr	r3, [pc, #556]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800abea:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800abee:	4b8a      	ldr	r3, [pc, #552]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800abf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abf6:	9002      	str	r0, [sp, #8]
 800abf8:	2004      	movs	r0, #4
 800abfa:	9001      	str	r0, [sp, #4]
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	460b      	mov	r3, r1
 800ac00:	2100      	movs	r1, #0
 800ac02:	2000      	movs	r0, #0
 800ac04:	f004 f8c0 	bl	800ed88 <rfalTransceiveBlockingTx>
            return ERR_BUSY;                            /* ERR_PROTO - Ignore bad/missing DID  */
 800ac08:	2302      	movs	r3, #2
 800ac0a:	e2af      	b.n	800b16c <nfcipTargetHandleRX+0x874>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800ac0c:	7f3b      	ldrb	r3, [r7, #28]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	773b      	strb	r3, [r7, #28]
 800ac12:	e018      	b.n	800ac46 <nfcipTargetHandleRX+0x34e>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 800ac14:	7ebb      	ldrb	r3, [r7, #26]
 800ac16:	f003 0308 	and.w	r3, r3, #8
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d013      	beq.n	800ac46 <nfcipTargetHandleRX+0x34e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ac1e:	4b7e      	ldr	r3, [pc, #504]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ac20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ac22:	4b7d      	ldr	r3, [pc, #500]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ac24:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800ac28:	4b7b      	ldr	r3, [pc, #492]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ac2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac30:	9002      	str	r0, [sp, #8]
 800ac32:	2004      	movs	r0, #4
 800ac34:	9001      	str	r0, [sp, #4]
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	f004 f8a3 	bl	800ed88 <rfalTransceiveBlockingTx>
        return ERR_BUSY;                                /* ERR_PROTO - Ignore unexpected NAD  */
 800ac42:	2302      	movs	r3, #2
 800ac44:	e292      	b.n	800b16c <nfcipTargetHandleRX+0x874>
    
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 800ac46:	7ebb      	ldrb	r3, [r7, #26]
 800ac48:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800ac4c:	2b40      	cmp	r3, #64	@ 0x40
 800ac4e:	f040 80c5 	bne.w	800addc <nfcipTargetHandleRX+0x4e4>
    {
        nfcipLogD( " NFCIP(T) Rcvd R-PDU  \r\n" );
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 800ac52:	7ebb      	ldrb	r3, [r7, #26]
 800ac54:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800ac58:	2b40      	cmp	r3, #64	@ 0x40
 800ac5a:	f040 8083 	bne.w	800ad64 <nfcipTargetHandleRX+0x46c>
 800ac5e:	7ebb      	ldrb	r3, [r7, #26]
 800ac60:	f003 0310 	and.w	r3, r3, #16
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d17d      	bne.n	800ad64 <nfcipTargetHandleRX+0x46c>
        {
            nfcipLogI( " NFCIP(T) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 800ac68:	4b6b      	ldr	r3, [pc, #428]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ac6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ac6e:	461a      	mov	r2, r3
 800ac70:	7ebb      	ldrb	r3, [r7, #26]
 800ac72:	f003 0303 	and.w	r3, r3, #3
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d149      	bne.n	800ad0e <nfcipTargetHandleRX+0x416>
            {
                /* R-ACK while not performing chaining -> Protocol error */
                if( !gNfcip.isTxChaining )
 800ac7a:	4b67      	ldr	r3, [pc, #412]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ac7c:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800ac80:	f083 0301 	eor.w	r3, r3, #1
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d013      	beq.n	800acb2 <nfcipTargetHandleRX+0x3ba>
                {
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ac8a:	4b63      	ldr	r3, [pc, #396]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ac8c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ac8e:	4b62      	ldr	r3, [pc, #392]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ac90:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800ac94:	4b60      	ldr	r3, [pc, #384]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ac96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac9c:	9002      	str	r0, [sp, #8]
 800ac9e:	2004      	movs	r0, #4
 800aca0:	9001      	str	r0, [sp, #4]
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	460b      	mov	r3, r1
 800aca6:	2100      	movs	r1, #0
 800aca8:	2000      	movs	r0, #0
 800acaa:	f004 f86d 	bl	800ed88 <rfalTransceiveBlockingTx>
                    return ERR_BUSY;                    /* ERR_PROTO - Ignore unexpected ACK  */
 800acae:	2302      	movs	r3, #2
 800acb0:	e25c      	b.n	800b16c <nfcipTargetHandleRX+0x874>
                }
                
                /* This block has been transmitted and acknowledged, perform RTOX until next data is provided  */
                
                /* Digital 1.1  16.12.4.7 - If ACK rcvd continue with chaining or an RTOX */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800acb2:	4b59      	ldr	r3, [pc, #356]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800acb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acb8:	f003 030f 	and.w	r3, r3, #15
 800acbc:	330c      	adds	r3, #12
 800acbe:	2201      	movs	r2, #1
 800acc0:	fa02 f303 	lsl.w	r3, r2, r3
 800acc4:	4a55      	ldr	r2, [pc, #340]	@ (800ae1c <nfcipTargetHandleRX+0x524>)
 800acc6:	fba2 2303 	umull	r2, r3, r2, r3
 800acca:	0b1b      	lsrs	r3, r3, #12
 800accc:	b29a      	uxth	r2, r3
 800acce:	4b52      	ldr	r3, [pc, #328]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800acd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	330c      	adds	r3, #12
 800acda:	2101      	movs	r1, #1
 800acdc:	fa01 f303 	lsl.w	r3, r1, r3
 800ace0:	494e      	ldr	r1, [pc, #312]	@ (800ae1c <nfcipTargetHandleRX+0x524>)
 800ace2:	fba1 1303 	umull	r1, r3, r1, r3
 800ace6:	0b1b      	lsrs	r3, r3, #12
 800ace8:	3301      	adds	r3, #1
 800acea:	08db      	lsrs	r3, r3, #3
 800acec:	b29b      	uxth	r3, r3
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	3301      	adds	r3, #1
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fa fdea 	bl	80058d0 <timerCalculateTimer>
 800acfc:	4603      	mov	r3, r0
 800acfe:	4a46      	ldr	r2, [pc, #280]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ad00:	67d3      	str	r3, [r2, #124]	@ 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800ad02:	4b45      	ldr	r3, [pc, #276]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ad04:	220e      	movs	r2, #14
 800ad06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                
                return ERR_NONE;                        /* This block has been transmitted */
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	e22e      	b.n	800b16c <nfcipTargetHandleRX+0x874>
            }
            
            /* Digital 1.0 14.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 800ad0e:	4b42      	ldr	r3, [pc, #264]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ad10:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800ad14:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800ad18:	2b80      	cmp	r3, #128	@ 0x80
 800ad1a:	d15e      	bne.n	800adda <nfcipTargetHandleRX+0x4e2>
 800ad1c:	4b3e      	ldr	r3, [pc, #248]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ad1e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800ad22:	f003 0310 	and.w	r3, r3, #16
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d157      	bne.n	800adda <nfcipTargetHandleRX+0x4e2>
 800ad2a:	4b3b      	ldr	r3, [pc, #236]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ad2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ad30:	3b01      	subs	r3, #1
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	7ebb      	ldrb	r3, [r7, #26]
 800ad36:	4053      	eors	r3, r2
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	f003 0303 	and.w	r3, r3, #3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d14b      	bne.n	800adda <nfcipTargetHandleRX+0x4e2>
            {   
                nfcipLogI( " NFCIP(T) wrong PNI, last was ATN reTx  \r\n" );
                /* Spec says to leave current PNI as is, but will be Inc after Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 800ad42:	4b35      	ldr	r3, [pc, #212]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ad44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	f003 0303 	and.w	r3, r3, #3
 800ad50:	b2da      	uxtb	r2, r3
 800ad52:	4b31      	ldr	r3, [pc, #196]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ad54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
                
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800ad58:	4b2f      	ldr	r3, [pc, #188]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ad5a:	220f      	movs	r2, #15
 800ad5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                return ERR_BUSY;
 800ad60:	2302      	movs	r3, #2
 800ad62:	e203      	b.n	800b16c <nfcipTargetHandleRX+0x874>
        }
        /*******************************************************************************/
        /* R NACK                                                                      */
        /*******************************************************************************/
        /* ISO 18092 12.6.1.3.3 When rcv NACK if PNI = prev PNI sent ->  reTx          */
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 800ad64:	7ebb      	ldrb	r3, [r7, #26]
 800ad66:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800ad6a:	2b40      	cmp	r3, #64	@ 0x40
 800ad6c:	d121      	bne.n	800adb2 <nfcipTargetHandleRX+0x4ba>
 800ad6e:	7ebb      	ldrb	r3, [r7, #26]
 800ad70:	f003 0310 	and.w	r3, r3, #16
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d01c      	beq.n	800adb2 <nfcipTargetHandleRX+0x4ba>
 800ad78:	4b27      	ldr	r3, [pc, #156]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ad7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	7ebb      	ldrb	r3, [r7, #26]
 800ad84:	4053      	eors	r3, r2
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	f003 0303 	and.w	r3, r3, #3
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d110      	bne.n	800adb2 <nfcipTargetHandleRX+0x4ba>
        {
            nfcipLogI( " NFCIP(T) Rcvd NACK  \r\n" );
            
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 800ad90:	4b21      	ldr	r3, [pc, #132]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ad92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ad96:	3b01      	subs	r3, #1
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	4b1d      	ldr	r3, [pc, #116]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ada2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800ada6:	4b1c      	ldr	r3, [pc, #112]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800ada8:	220f      	movs	r2, #15
 800adaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            return ERR_BUSY;
 800adae:	2302      	movs	r3, #2
 800adb0:	e1dc      	b.n	800b16c <nfcipTargetHandleRX+0x874>
        }
        else
        {        
            nfcipLogI( " NFCIP(T) Unexpected R-PDU \r\n" );
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800adb2:	4b19      	ldr	r3, [pc, #100]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800adb4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800adb6:	4b18      	ldr	r3, [pc, #96]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800adb8:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800adbc:	4b16      	ldr	r3, [pc, #88]	@ (800ae18 <nfcipTargetHandleRX+0x520>)
 800adbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adc4:	9002      	str	r0, [sp, #8]
 800adc6:	2004      	movs	r0, #4
 800adc8:	9001      	str	r0, [sp, #4]
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	460b      	mov	r3, r1
 800adce:	2100      	movs	r1, #0
 800add0:	2000      	movs	r0, #0
 800add2:	f003 ffd9 	bl	800ed88 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected R-PDU  */
 800add6:	2302      	movs	r3, #2
 800add8:	e1c8      	b.n	800b16c <nfcipTargetHandleRX+0x874>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 800adda:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )
 800addc:	7ebb      	ldrb	r3, [r7, #26]
 800adde:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800ade2:	2b80      	cmp	r3, #128	@ 0x80
 800ade4:	f040 80ac 	bne.w	800af40 <nfcipTargetHandleRX+0x648>
        
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        /* ISO 18092 12.6.3 Attention                                                  */
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 800ade8:	7ebb      	ldrb	r3, [r7, #26]
 800adea:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800adee:	2b80      	cmp	r3, #128	@ 0x80
 800adf0:	d116      	bne.n	800ae20 <nfcipTargetHandleRX+0x528>
 800adf2:	7ebb      	ldrb	r3, [r7, #26]
 800adf4:	f003 0310 	and.w	r3, r3, #16
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d111      	bne.n	800ae20 <nfcipTargetHandleRX+0x528>
        {            
            nfcipLogI( " NFCIP(T) Rcvd ATN  curPNI: %d \r\n", gNfcip.pni );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 800adfc:	2100      	movs	r1, #0
 800adfe:	2080      	movs	r0, #128	@ 0x80
 800ae00:	f7ff fa3c 	bl	800a27c <nfcipDEPControlMsg>
 800ae04:	4603      	mov	r3, r0
 800ae06:	83fb      	strh	r3, [r7, #30]
 800ae08:	8bfb      	ldrh	r3, [r7, #30]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <nfcipTargetHandleRX+0x51a>
 800ae0e:	8bfb      	ldrh	r3, [r7, #30]
 800ae10:	e1ac      	b.n	800b16c <nfcipTargetHandleRX+0x874>
            return ERR_BUSY;
 800ae12:	2302      	movs	r3, #2
 800ae14:	e1aa      	b.n	800b16c <nfcipTargetHandleRX+0x874>
 800ae16:	bf00      	nop
 800ae18:	20000bb0 	.word	0x20000bb0
 800ae1c:	4d542005 	.word	0x4d542005
        }
        
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 800ae20:	7ebb      	ldrb	r3, [r7, #26]
 800ae22:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800ae26:	2b80      	cmp	r3, #128	@ 0x80
 800ae28:	d175      	bne.n	800af16 <nfcipTargetHandleRX+0x61e>
 800ae2a:	7ebb      	ldrb	r3, [r7, #26]
 800ae2c:	f003 0310 	and.w	r3, r3, #16
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d070      	beq.n	800af16 <nfcipTargetHandleRX+0x61e>
        {
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800ae34:	4bab      	ldr	r3, [pc, #684]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800ae36:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800ae3a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800ae3e:	2b80      	cmp	r3, #128	@ 0x80
 800ae40:	d17d      	bne.n	800af3e <nfcipTargetHandleRX+0x646>
 800ae42:	4ba8      	ldr	r3, [pc, #672]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800ae44:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800ae48:	f003 0310 	and.w	r3, r3, #16
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d076      	beq.n	800af3e <nfcipTargetHandleRX+0x646>
            {
                nfcipLogI( " NFCIP(T) Rcvd TO  \r\n" );
                
                /* Digital 1.1  16.8.4.6  RTOX value in RES different that in REQ -> Protocol Error */
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 800ae50:	4ba4      	ldr	r3, [pc, #656]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800ae52:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800ae56:	4ba3      	ldr	r3, [pc, #652]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800ae58:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800ae5a:	7f7b      	ldrb	r3, [r7, #29]
 800ae5c:	1c58      	adds	r0, r3, #1
 800ae5e:	7778      	strb	r0, [r7, #29]
 800ae60:	440b      	add	r3, r1
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d013      	beq.n	800ae90 <nfcipTargetHandleRX+0x598>
                {
                    nfcipLogI( " NFCIP(T) Mismatched RTOX value \r\n" );
                    
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ae68:	4b9e      	ldr	r3, [pc, #632]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800ae6a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ae6c:	4b9d      	ldr	r3, [pc, #628]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800ae6e:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800ae72:	4b9c      	ldr	r3, [pc, #624]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800ae74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae7a:	9002      	str	r0, [sp, #8]
 800ae7c:	2004      	movs	r0, #4
 800ae7e:	9001      	str	r0, [sp, #4]
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	460b      	mov	r3, r1
 800ae84:	2100      	movs	r1, #0
 800ae86:	2000      	movs	r0, #0
 800ae88:	f003 ff7e 	bl	800ed88 <rfalTransceiveBlockingTx>
                    return ERR_BUSY; /* ERR_PROTO - Ignore unexpected RTOX value  */
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	e16d      	b.n	800b16c <nfcipTargetHandleRX+0x874>
                }
                
                /* Clear waiting for RTOX Ack Flag */
                gNfcip.isWait4RTOX = false;
 800ae90:	4b94      	ldr	r3, [pc, #592]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
                
                /* Check if a Tx is already pending */
                if( gNfcip.isTxPending )
 800ae98:	4b92      	ldr	r3, [pc, #584]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800ae9a:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d005      	beq.n	800aeae <nfcipTargetHandleRX+0x5b6>
                {
                    nfcipLogW( " NFCIP(T) Tx pending, go immediately to TX \r\n" );
                    
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800aea2:	4b90      	ldr	r3, [pc, #576]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800aea4:	220f      	movs	r2, #15
 800aea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                    return ERR_BUSY;
 800aeaa:	2302      	movs	r3, #2
 800aeac:	e15e      	b.n	800b16c <nfcipTargetHandleRX+0x874>
                }
                
                /* Start RTOX timer and change to check state  */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 800aeae:	4b8d      	ldr	r3, [pc, #564]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800aeb0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	4b8b      	ldr	r3, [pc, #556]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800aeb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aebc:	f003 030f 	and.w	r3, r3, #15
 800aec0:	330c      	adds	r3, #12
 800aec2:	fa02 f303 	lsl.w	r3, r2, r3
 800aec6:	4a88      	ldr	r2, [pc, #544]	@ (800b0e8 <nfcipTargetHandleRX+0x7f0>)
 800aec8:	fba2 2303 	umull	r2, r3, r2, r3
 800aecc:	0b1b      	lsrs	r3, r3, #12
 800aece:	b29a      	uxth	r2, r3
 800aed0:	4b84      	ldr	r3, [pc, #528]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800aed2:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800aed6:	4619      	mov	r1, r3
 800aed8:	4b82      	ldr	r3, [pc, #520]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800aeda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aede:	f003 030f 	and.w	r3, r3, #15
 800aee2:	330c      	adds	r3, #12
 800aee4:	fa01 f303 	lsl.w	r3, r1, r3
 800aee8:	497f      	ldr	r1, [pc, #508]	@ (800b0e8 <nfcipTargetHandleRX+0x7f0>)
 800aeea:	fba1 1303 	umull	r1, r3, r1, r3
 800aeee:	0b1b      	lsrs	r3, r3, #12
 800aef0:	3301      	adds	r3, #1
 800aef2:	08db      	lsrs	r3, r3, #3
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	3301      	adds	r3, #1
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fa fce6 	bl	80058d0 <timerCalculateTimer>
 800af04:	4603      	mov	r3, r0
 800af06:	4a77      	ldr	r2, [pc, #476]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800af08:	67d3      	str	r3, [r2, #124]	@ 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800af0a:	4b76      	ldr	r3, [pc, #472]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800af0c:	220e      	movs	r2, #14
 800af0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                
                return ERR_BUSY;
 800af12:	2302      	movs	r3, #2
 800af14:	e12a      	b.n	800b16c <nfcipTargetHandleRX+0x874>
        else
        {
            /* Unexpected S-PDU */
            nfcipLogI( " NFCIP(T) Unexpected S-PDU \r\n" );         /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800af16:	4b73      	ldr	r3, [pc, #460]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800af18:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800af1a:	4b72      	ldr	r3, [pc, #456]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800af1c:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800af20:	4b70      	ldr	r3, [pc, #448]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800af22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af28:	9002      	str	r0, [sp, #8]
 800af2a:	2004      	movs	r0, #4
 800af2c:	9001      	str	r0, [sp, #4]
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	460b      	mov	r3, r1
 800af32:	2100      	movs	r1, #0
 800af34:	2000      	movs	r0, #0
 800af36:	f003 ff27 	bl	800ed88 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected S-PDU  */
 800af3a:	2302      	movs	r3, #2
 800af3c:	e116      	b.n	800b16c <nfcipTargetHandleRX+0x874>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800af3e:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 800af40:	7ebb      	ldrb	r3, [r7, #26]
 800af42:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800af46:	2b00      	cmp	r3, #0
 800af48:	f040 810f 	bne.w	800b16a <nfcipTargetHandleRX+0x872>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 800af4c:	4b65      	ldr	r3, [pc, #404]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800af4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800af52:	461a      	mov	r2, r3
 800af54:	7ebb      	ldrb	r3, [r7, #26]
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d06e      	beq.n	800b03c <nfcipTargetHandleRX+0x744>
        {
            nfcipLogI( " NFCIP(T) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni, nfcip_PBF_PNI( rxPFB ) );
            
            /* Digital 1.1 16.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 800af5e:	4b61      	ldr	r3, [pc, #388]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800af60:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800af64:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800af68:	2b80      	cmp	r3, #128	@ 0x80
 800af6a:	d153      	bne.n	800b014 <nfcipTargetHandleRX+0x71c>
 800af6c:	4b5d      	ldr	r3, [pc, #372]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800af6e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800af72:	f003 0310 	and.w	r3, r3, #16
 800af76:	2b00      	cmp	r3, #0
 800af78:	d14c      	bne.n	800b014 <nfcipTargetHandleRX+0x71c>
 800af7a:	4b5a      	ldr	r3, [pc, #360]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800af7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800af80:	3b01      	subs	r3, #1
 800af82:	b2da      	uxtb	r2, r3
 800af84:	7ebb      	ldrb	r3, [r7, #26]
 800af86:	4053      	eors	r3, r2
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	f003 0303 	and.w	r3, r3, #3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d140      	bne.n	800b014 <nfcipTargetHandleRX+0x71c>
            {
                /* Spec says to leave current PNI as is, but will be Inc after Data Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 800af92:	4b54      	ldr	r3, [pc, #336]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800af94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800af98:	3b01      	subs	r3, #1
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	f003 0303 	and.w	r3, r3, #3
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	4b50      	ldr	r3, [pc, #320]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800afa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
                
                if( nfcip_PFBisIMI( rxPFB ) )
 800afa8:	7ebb      	ldrb	r3, [r7, #26]
 800afaa:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d12a      	bne.n	800b008 <nfcipTargetHandleRX+0x710>
 800afb2:	7ebb      	ldrb	r3, [r7, #26]
 800afb4:	f003 0310 	and.w	r3, r3, #16
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d025      	beq.n	800b008 <nfcipTargetHandleRX+0x710>
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before && chaining -> send ACK  \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800afbc:	4b49      	ldr	r3, [pc, #292]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800afbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800afc2:	f003 0303 	and.w	r3, r3, #3
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afcc:	b2d8      	uxtb	r0, r3
 800afce:	4b45      	ldr	r3, [pc, #276]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800afd0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800afd2:	7f7b      	ldrb	r3, [r7, #29]
 800afd4:	1c59      	adds	r1, r3, #1
 800afd6:	7779      	strb	r1, [r7, #29]
 800afd8:	4413      	add	r3, r2
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	4619      	mov	r1, r3
 800afde:	f7ff f94d 	bl	800a27c <nfcipDEPControlMsg>
 800afe2:	4603      	mov	r3, r0
 800afe4:	83fb      	strh	r3, [r7, #30]
 800afe6:	8bfb      	ldrh	r3, [r7, #30]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <nfcipTargetHandleRX+0x6f8>
 800afec:	8bfb      	ldrh	r3, [r7, #30]
 800afee:	e0bd      	b.n	800b16c <nfcipTargetHandleRX+0x874>
                    
                    /* Digital 1.1 16.12.3.4 (...) leave the current PNI unchanged afterwards */
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800aff0:	4b3c      	ldr	r3, [pc, #240]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800aff2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aff6:	3301      	adds	r3, #1
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	f003 0303 	and.w	r3, r3, #3
 800affe:	b2da      	uxtb	r2, r3
 800b000:	4b38      	ldr	r3, [pc, #224]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800b006:	e003      	b.n	800b010 <nfcipTargetHandleRX+0x718>
                }
                else
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before -> reTx last I-PDU  \r\n" );
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800b008:	4b36      	ldr	r3, [pc, #216]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b00a:	220f      	movs	r2, #15
 800b00c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                }
                
                return ERR_BUSY;
 800b010:	2302      	movs	r3, #2
 800b012:	e0ab      	b.n	800b16c <nfcipTargetHandleRX+0x874>
            }
                        
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800b014:	4b33      	ldr	r3, [pc, #204]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b016:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b018:	4b32      	ldr	r3, [pc, #200]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b01a:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800b01e:	4b31      	ldr	r3, [pc, #196]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b026:	9002      	str	r0, [sp, #8]
 800b028:	2004      	movs	r0, #4
 800b02a:	9001      	str	r0, [sp, #4]
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	460b      	mov	r3, r1
 800b030:	2100      	movs	r1, #0
 800b032:	2000      	movs	r0, #0
 800b034:	f003 fea8 	bl	800ed88 <rfalTransceiveBlockingTx>
            return ERR_BUSY;            /* ERR_PROTO - Ignore bad PNI value  */
 800b038:	2302      	movs	r3, #2
 800b03a:	e097      	b.n	800b16c <nfcipTargetHandleRX+0x874>
        nfcipLogD( " NFCIP(T) Rcvd IPDU OK PNI: %d  \r\n", gNfcip.pni );
        
        /*******************************************************************************/
        /* Successful data exchange                                                    */
        /*******************************************************************************/
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 800b03c:	7efb      	ldrb	r3, [r7, #27]
 800b03e:	b29a      	uxth	r2, r3
 800b040:	7f3b      	ldrb	r3, [r7, #28]
 800b042:	b29b      	uxth	r3, r3
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	b29b      	uxth	r3, r3
 800b048:	3b04      	subs	r3, #4
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	801a      	strh	r2, [r3, #0]
        
        nfcipClearCounters();
 800b050:	f7ff f974 	bl	800a33c <nfcipClearCounters>

        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 800b054:	4b23      	ldr	r3, [pc, #140]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b056:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800b05a:	461a      	mov	r2, r3
 800b05c:	7f3b      	ldrb	r3, [r7, #28]
 800b05e:	3304      	adds	r3, #4
 800b060:	429a      	cmp	r2, r3
 800b062:	d013      	beq.n	800b08c <nfcipTargetHandleRX+0x794>
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00f      	beq.n	800b08c <nfcipTargetHandleRX+0x794>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 800b06c:	4b1d      	ldr	r3, [pc, #116]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b06e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b070:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b072:	f892 2071 	ldrb.w	r2, [r2, #113]	@ 0x71
 800b076:	1898      	adds	r0, r3, r2
 800b078:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b07a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b07c:	7f3b      	ldrb	r3, [r7, #28]
 800b07e:	3304      	adds	r3, #4
 800b080:	18d1      	adds	r1, r2, r3
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	881b      	ldrh	r3, [r3, #0]
 800b086:	461a      	mov	r2, r3
 800b088:	f006 fa58 	bl	801153c <memmove>
        
        
        /*******************************************************************************/
        /* Check if Initiator is indicating chaining MI                                */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 800b08c:	7ebb      	ldrb	r3, [r7, #26]
 800b08e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d137      	bne.n	800b106 <nfcipTargetHandleRX+0x80e>
 800b096:	7ebb      	ldrb	r3, [r7, #26]
 800b098:	f003 0310 	and.w	r3, r3, #16
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d032      	beq.n	800b106 <nfcipTargetHandleRX+0x80e>
        {
            gNfcip.isRxChaining = true;
 800b0a0:	4b10      	ldr	r3, [pc, #64]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
            *outIsChaining      = true;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(T) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800b0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b0b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b0b4:	f003 0303 	and.w	r3, r3, #3
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0be:	b2d8      	uxtb	r0, r3
 800b0c0:	4b08      	ldr	r3, [pc, #32]	@ (800b0e4 <nfcipTargetHandleRX+0x7ec>)
 800b0c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b0c4:	7f7b      	ldrb	r3, [r7, #29]
 800b0c6:	1c59      	adds	r1, r3, #1
 800b0c8:	7779      	strb	r1, [r7, #29]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	f7ff f8d4 	bl	800a27c <nfcipDEPControlMsg>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	83fb      	strh	r3, [r7, #30]
 800b0d8:	8bfb      	ldrh	r3, [r7, #30]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d006      	beq.n	800b0ec <nfcipTargetHandleRX+0x7f4>
 800b0de:	8bfb      	ldrh	r3, [r7, #30]
 800b0e0:	e044      	b.n	800b16c <nfcipTargetHandleRX+0x874>
 800b0e2:	bf00      	nop
 800b0e4:	20000bb0 	.word	0x20000bb0
 800b0e8:	4d542005 	.word	0x4d542005
            
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800b0ec:	4b21      	ldr	r3, [pc, #132]	@ (800b174 <nfcipTargetHandleRX+0x87c>)
 800b0ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	f003 0303 	and.w	r3, r3, #3
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	4b1d      	ldr	r3, [pc, #116]	@ (800b174 <nfcipTargetHandleRX+0x87c>)
 800b0fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 800b102:	230d      	movs	r3, #13
 800b104:	e032      	b.n	800b16c <nfcipTargetHandleRX+0x874>
            }
            
            /*******************************************************************************/
            /* Reception done, send to DH and start RTOX timer                             */
            /*******************************************************************************/
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800b106:	4b1b      	ldr	r3, [pc, #108]	@ (800b174 <nfcipTargetHandleRX+0x87c>)
 800b108:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b10c:	f003 030f 	and.w	r3, r3, #15
 800b110:	330c      	adds	r3, #12
 800b112:	2201      	movs	r2, #1
 800b114:	fa02 f303 	lsl.w	r3, r2, r3
 800b118:	4a17      	ldr	r2, [pc, #92]	@ (800b178 <nfcipTargetHandleRX+0x880>)
 800b11a:	fba2 2303 	umull	r2, r3, r2, r3
 800b11e:	0b1b      	lsrs	r3, r3, #12
 800b120:	b29a      	uxth	r2, r3
 800b122:	4b14      	ldr	r3, [pc, #80]	@ (800b174 <nfcipTargetHandleRX+0x87c>)
 800b124:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b128:	f003 030f 	and.w	r3, r3, #15
 800b12c:	330c      	adds	r3, #12
 800b12e:	2101      	movs	r1, #1
 800b130:	fa01 f303 	lsl.w	r3, r1, r3
 800b134:	4910      	ldr	r1, [pc, #64]	@ (800b178 <nfcipTargetHandleRX+0x880>)
 800b136:	fba1 1303 	umull	r1, r3, r1, r3
 800b13a:	0b1b      	lsrs	r3, r3, #12
 800b13c:	3301      	adds	r3, #1
 800b13e:	08db      	lsrs	r3, r3, #3
 800b140:	b29b      	uxth	r3, r3
 800b142:	1ad3      	subs	r3, r2, r3
 800b144:	b29b      	uxth	r3, r3
 800b146:	3301      	adds	r3, #1
 800b148:	b29b      	uxth	r3, r3
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fa fbc0 	bl	80058d0 <timerCalculateTimer>
 800b150:	4603      	mov	r3, r0
 800b152:	4a08      	ldr	r2, [pc, #32]	@ (800b174 <nfcipTargetHandleRX+0x87c>)
 800b154:	67d3      	str	r3, [r2, #124]	@ 0x7c
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800b156:	4b07      	ldr	r3, [pc, #28]	@ (800b174 <nfcipTargetHandleRX+0x87c>)
 800b158:	220e      	movs	r2, #14
 800b15a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            
            gNfcip.isRxChaining = false;
 800b15e:	4b05      	ldr	r3, [pc, #20]	@ (800b174 <nfcipTargetHandleRX+0x87c>)
 800b160:	2200      	movs	r2, #0
 800b162:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
            ret = ERR_NONE;                            /* Data exchange done */
 800b166:	2300      	movs	r3, #0
 800b168:	83fb      	strh	r3, [r7, #30]
        }
    }
    return ret;
 800b16a:	8bfb      	ldrh	r3, [r7, #30]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3720      	adds	r7, #32
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	20000bb0 	.word	0x20000bb0
 800b178:	4d542005 	.word	0x4d542005

0800b17c <nfcipTx>:


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b088      	sub	sp, #32
 800b180:	af00      	add	r7, sp, #0
 800b182:	60b9      	str	r1, [r7, #8]
 800b184:	607a      	str	r2, [r7, #4]
 800b186:	461a      	mov	r2, r3
 800b188:	4603      	mov	r3, r0
 800b18a:	73fb      	strb	r3, [r7, #15]
 800b18c:	4613      	mov	r3, r2
 800b18e:	81bb      	strh	r3, [r7, #12]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <nfcipTx+0x1e>
    {
        return ERR_PARAM;
 800b196:	2307      	movs	r3, #7
 800b198:	e177      	b.n	800b48a <nfcipTx+0x30e>
    }
    

    payloadBuf = paylBuf;                                               /* MISRA 17.8: Use intermediate variable */
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	617b      	str	r3, [r7, #20]
    
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 800b19e:	89bb      	ldrh	r3, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <nfcipTx+0x2e>
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d102      	bne.n	800b1b0 <nfcipTx+0x34>
    {
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	3305      	adds	r3, #5
 800b1ae:	617b      	str	r3, [r7, #20]
    }
    
    
    txBufIt  = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	83fb      	strh	r3, [r7, #30]
    pfb      = pfbData;                                                 /* MISRA 17.8: Use intermediate variable */
 800b1b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b1b8:	74fb      	strb	r3, [r7, #19]
    
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	61bb      	str	r3, [r7, #24]
        
    
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 800b1be:	4aa0      	ldr	r2, [pc, #640]	@ (800b440 <nfcipTx+0x2c4>)
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 800b1c6:	4b9e      	ldr	r3, [pc, #632]	@ (800b440 <nfcipTx+0x2c4>)
 800b1c8:	22ff      	movs	r2, #255	@ 0xff
 800b1ca:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
    
    /*******************************************************************************/
    /* Compute outgoing NFCIP message                                              */
    /*******************************************************************************/
    switch( cmd )
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	2b0b      	cmp	r3, #11
 800b1d2:	f200 8120 	bhi.w	800b416 <nfcipTx+0x29a>
 800b1d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1dc <nfcipTx+0x60>)
 800b1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1dc:	0800b20d 	.word	0x0800b20d
 800b1e0:	0800b20d 	.word	0x0800b20d
 800b1e4:	0800b301 	.word	0x0800b301
 800b1e8:	0800b337 	.word	0x0800b337
 800b1ec:	0800b337 	.word	0x0800b337
 800b1f0:	0800b337 	.word	0x0800b337
 800b1f4:	0800b35f 	.word	0x0800b35f
 800b1f8:	0800b35f 	.word	0x0800b35f
 800b1fc:	0800b347 	.word	0x0800b347
 800b200:	0800b347 	.word	0x0800b347
 800b204:	0800b347 	.word	0x0800b347
 800b208:	0800b347 	.word	0x0800b347
    {
        /*******************************************************************************/
        case NFCIP_CMD_ATR_RES:
        case NFCIP_CMD_ATR_REQ:
            
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 800b20c:	220a      	movs	r2, #10
 800b20e:	2100      	movs	r1, #0
 800b210:	6978      	ldr	r0, [r7, #20]
 800b212:	f006 f9ad 	bl	8011570 <memset>
 800b216:	4b8a      	ldr	r3, [pc, #552]	@ (800b440 <nfcipTx+0x2c4>)
 800b218:	7c5b      	ldrb	r3, [r3, #17]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d006      	beq.n	800b22c <nfcipTx+0xb0>
 800b21e:	4b88      	ldr	r3, [pc, #544]	@ (800b440 <nfcipTx+0x2c4>)
 800b220:	7c5b      	ldrb	r3, [r3, #17]
 800b222:	461a      	mov	r2, r3
 800b224:	4987      	ldr	r1, [pc, #540]	@ (800b444 <nfcipTx+0x2c8>)
 800b226:	6978      	ldr	r0, [r7, #20]
 800b228:	f006 f9e6 	bl	80115f8 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 800b22c:	8bfb      	ldrh	r3, [r7, #30]
 800b22e:	330a      	adds	r3, #10
 800b230:	83fb      	strh	r3, [r7, #30]
            
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 800b232:	8bfb      	ldrh	r3, [r7, #30]
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	83fa      	strh	r2, [r7, #30]
 800b238:	461a      	mov	r2, r3
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	4413      	add	r3, r2
 800b23e:	4a80      	ldr	r2, [pc, #512]	@ (800b440 <nfcipTx+0x2c4>)
 800b240:	78d2      	ldrb	r2, [r2, #3]
 800b242:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 800b244:	8bfb      	ldrh	r3, [r7, #30]
 800b246:	1c5a      	adds	r2, r3, #1
 800b248:	83fa      	strh	r2, [r7, #30]
 800b24a:	461a      	mov	r2, r3
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	4413      	add	r3, r2
 800b250:	4a7b      	ldr	r2, [pc, #492]	@ (800b440 <nfcipTx+0x2c4>)
 800b252:	7952      	ldrb	r2, [r2, #5]
 800b254:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 800b256:	8bfb      	ldrh	r3, [r7, #30]
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	83fa      	strh	r2, [r7, #30]
 800b25c:	461a      	mov	r2, r3
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	4413      	add	r3, r2
 800b262:	4a77      	ldr	r2, [pc, #476]	@ (800b440 <nfcipTx+0x2c4>)
 800b264:	7992      	ldrb	r2, [r2, #6]
 800b266:	701a      	strb	r2, [r3, #0]
            
            if( cmd == NFCIP_CMD_ATR_RES )
 800b268:	7bfb      	ldrb	r3, [r7, #15]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d109      	bne.n	800b282 <nfcipTx+0x106>
            {
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 800b26e:	8bfb      	ldrh	r3, [r7, #30]
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	83fa      	strh	r2, [r7, #30]
 800b274:	461a      	mov	r2, r3
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	4413      	add	r3, r2
 800b27a:	4a71      	ldr	r2, [pc, #452]	@ (800b440 <nfcipTx+0x2c4>)
 800b27c:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 800b280:	701a      	strb	r2, [r3, #0]
            }
                                    
            if( gNfcip.cfg.gbLen > 0U)
 800b282:	4b6f      	ldr	r3, [pc, #444]	@ (800b440 <nfcipTx+0x2c4>)
 800b284:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d023      	beq.n	800b2d4 <nfcipTx+0x158>
            {
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 800b28c:	4b6c      	ldr	r3, [pc, #432]	@ (800b440 <nfcipTx+0x2c4>)
 800b28e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b292:	011b      	lsls	r3, r3, #4
 800b294:	b2db      	uxtb	r3, r3
 800b296:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	8bfb      	ldrh	r3, [r7, #30]
 800b29e:	1c59      	adds	r1, r3, #1
 800b2a0:	83f9      	strh	r1, [r7, #30]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	440b      	add	r3, r1
 800b2a8:	f042 0202 	orr.w	r2, r2, #2
 800b2ac:	b2d2      	uxtb	r2, r2
 800b2ae:	701a      	strb	r2, [r3, #0]
                ST_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 800b2b0:	8bfb      	ldrh	r3, [r7, #30]
 800b2b2:	697a      	ldr	r2, [r7, #20]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	4a62      	ldr	r2, [pc, #392]	@ (800b440 <nfcipTx+0x2c4>)
 800b2b8:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 800b2bc:	4962      	ldr	r1, [pc, #392]	@ (800b448 <nfcipTx+0x2cc>)
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f006 f99a 	bl	80115f8 <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 800b2c4:	4b5e      	ldr	r3, [pc, #376]	@ (800b440 <nfcipTx+0x2c4>)
 800b2c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	8bfb      	ldrh	r3, [r7, #30]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	83fb      	strh	r3, [r7, #30]
 800b2d2:	e00e      	b.n	800b2f2 <nfcipTx+0x176>
            }
            else
            {
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 800b2d4:	4b5a      	ldr	r3, [pc, #360]	@ (800b440 <nfcipTx+0x2c4>)
 800b2d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b2da:	011b      	lsls	r3, r3, #4
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	8bfb      	ldrh	r3, [r7, #30]
 800b2e0:	1c59      	adds	r1, r3, #1
 800b2e2:	83f9      	strh	r1, [r7, #30]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	440b      	add	r3, r1
 800b2ea:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 800b2ee:	b2d2      	uxtb	r2, r2
 800b2f0:	701a      	strb	r2, [r3, #0]
            }
            
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 800b2f2:	8bfb      	ldrh	r3, [r7, #30]
 800b2f4:	3302      	adds	r3, #2
 800b2f6:	2b40      	cmp	r3, #64	@ 0x40
 800b2f8:	f240 808f 	bls.w	800b41a <nfcipTx+0x29e>
            {
                return ERR_PARAM;
 800b2fc:	2307      	movs	r3, #7
 800b2fe:	e0c4      	b.n	800b48a <nfcipTx+0x30e>
            break;
            
        /*******************************************************************************/
        case NFCIP_CMD_WUP_REQ:                               /* ISO 18092 - 12.5.2.1 */
            
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 800b300:	220a      	movs	r2, #10
 800b302:	2100      	movs	r1, #0
 800b304:	6978      	ldr	r0, [r7, #20]
 800b306:	f006 f933 	bl	8011570 <memset>
 800b30a:	4b4d      	ldr	r3, [pc, #308]	@ (800b440 <nfcipTx+0x2c4>)
 800b30c:	7c5b      	ldrb	r3, [r3, #17]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d006      	beq.n	800b320 <nfcipTx+0x1a4>
 800b312:	4b4b      	ldr	r3, [pc, #300]	@ (800b440 <nfcipTx+0x2c4>)
 800b314:	7c5b      	ldrb	r3, [r3, #17]
 800b316:	461a      	mov	r2, r3
 800b318:	494a      	ldr	r1, [pc, #296]	@ (800b444 <nfcipTx+0x2c8>)
 800b31a:	6978      	ldr	r0, [r7, #20]
 800b31c:	f006 f96c 	bl	80115f8 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 800b320:	8bfb      	ldrh	r3, [r7, #30]
 800b322:	330a      	adds	r3, #10
 800b324:	83fb      	strh	r3, [r7, #30]
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	3b01      	subs	r3, #1
 800b32a:	61bb      	str	r3, [r7, #24]
 800b32c:	4b44      	ldr	r3, [pc, #272]	@ (800b440 <nfcipTx+0x2c4>)
 800b32e:	78da      	ldrb	r2, [r3, #3]
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	701a      	strb	r2, [r3, #0]
            break;
 800b334:	e076      	b.n	800b424 <nfcipTx+0x2a8>
        /*******************************************************************************/
        case NFCIP_CMD_WUP_RES:                               /* ISO 18092 - 12.5.2.2 */
        case NFCIP_CMD_PSL_REQ:
        case NFCIP_CMD_PSL_RES:
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	3b01      	subs	r3, #1
 800b33a:	61bb      	str	r3, [r7, #24]
 800b33c:	4b40      	ldr	r3, [pc, #256]	@ (800b440 <nfcipTx+0x2c4>)
 800b33e:	78da      	ldrb	r2, [r3, #3]
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	701a      	strb	r2, [r3, #0]
            break;
 800b344:	e06e      	b.n	800b424 <nfcipTx+0x2a8>
        case NFCIP_CMD_RLS_RES:
        case NFCIP_CMD_DSL_REQ:
        case NFCIP_CMD_DSL_RES:
            
            /* Digital 1.0 - 14.8.1.1 & 14.9.1.1 & 14.10.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 800b346:	4b3e      	ldr	r3, [pc, #248]	@ (800b440 <nfcipTx+0x2c4>)
 800b348:	78db      	ldrb	r3, [r3, #3]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d067      	beq.n	800b41e <nfcipTx+0x2a2>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	3b01      	subs	r3, #1
 800b352:	61bb      	str	r3, [r7, #24]
 800b354:	4b3a      	ldr	r3, [pc, #232]	@ (800b440 <nfcipTx+0x2c4>)
 800b356:	78da      	ldrb	r2, [r3, #3]
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800b35c:	e05f      	b.n	800b41e <nfcipTx+0x2a2>
        /*******************************************************************************/
        case NFCIP_CMD_DEP_REQ:
        case NFCIP_CMD_DEP_RES:
            
            /* Compute optional PFB bits */
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 800b35e:	4b38      	ldr	r3, [pc, #224]	@ (800b440 <nfcipTx+0x2c4>)
 800b360:	78db      	ldrb	r3, [r3, #3]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <nfcipTx+0x1f2>
 800b366:	7cfb      	ldrb	r3, [r7, #19]
 800b368:	f043 0304 	orr.w	r3, r3, #4
 800b36c:	74fb      	strb	r3, [r7, #19]
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 800b36e:	4b34      	ldr	r3, [pc, #208]	@ (800b440 <nfcipTx+0x2c4>)
 800b370:	791b      	ldrb	r3, [r3, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <nfcipTx+0x202>
 800b376:	7cfb      	ldrb	r3, [r7, #19]
 800b378:	f043 0308 	orr.w	r3, r3, #8
 800b37c:	74fb      	strb	r3, [r7, #19]
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 800b37e:	4b30      	ldr	r3, [pc, #192]	@ (800b440 <nfcipTx+0x2c4>)
 800b380:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800b384:	2b00      	cmp	r3, #0
 800b386:	d008      	beq.n	800b39a <nfcipTx+0x21e>
 800b388:	7cfb      	ldrb	r3, [r7, #19]
 800b38a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d103      	bne.n	800b39a <nfcipTx+0x21e>
 800b392:	7cfb      	ldrb	r3, [r7, #19]
 800b394:	f043 0310 	orr.w	r3, r3, #16
 800b398:	74fb      	strb	r3, [r7, #19]
            
            /* Store PFB for future handling */
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 800b39a:	4a29      	ldr	r2, [pc, #164]	@ (800b440 <nfcipTx+0x2c4>)
 800b39c:	7cfb      	ldrb	r3, [r7, #19]
 800b39e:	f882 3053 	strb.w	r3, [r2, #83]	@ 0x53
            
            if( !nfcip_PFBisSATN(pfb) )
 800b3a2:	7cfb      	ldrb	r3, [r7, #19]
 800b3a4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b3a8:	2b80      	cmp	r3, #128	@ 0x80
 800b3aa:	d104      	bne.n	800b3b6 <nfcipTx+0x23a>
 800b3ac:	7cfb      	ldrb	r3, [r7, #19]
 800b3ae:	f003 0310 	and.w	r3, r3, #16
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d003      	beq.n	800b3be <nfcipTx+0x242>
            {
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 800b3b6:	4a22      	ldr	r2, [pc, #136]	@ (800b440 <nfcipTx+0x2c4>)
 800b3b8:	7cfb      	ldrb	r3, [r7, #19]
 800b3ba:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
            }
            
            
            /* Add NAD if it is to be supported */
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 800b3be:	4b20      	ldr	r3, [pc, #128]	@ (800b440 <nfcipTx+0x2c4>)
 800b3c0:	791b      	ldrb	r3, [r3, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d006      	beq.n	800b3d4 <nfcipTx+0x258>
            {
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	61bb      	str	r3, [r7, #24]
 800b3cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b440 <nfcipTx+0x2c4>)
 800b3ce:	791a      	ldrb	r2, [r3, #4]
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	701a      	strb	r2, [r3, #0]
            }
            
            /* Digital 1.0 - 14.8.1.1 & 14.8.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 800b3d4:	4b1a      	ldr	r3, [pc, #104]	@ (800b440 <nfcipTx+0x2c4>)
 800b3d6:	78db      	ldrb	r3, [r3, #3]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d006      	beq.n	800b3ea <nfcipTx+0x26e>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	61bb      	str	r3, [r7, #24]
 800b3e2:	4b17      	ldr	r3, [pc, #92]	@ (800b440 <nfcipTx+0x2c4>)
 800b3e4:	78da      	ldrb	r2, [r3, #3]
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	701a      	strb	r2, [r3, #0]
            }
            
            *(--txBlock) = pfb;                                                          /* PFB */
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	61bb      	str	r3, [r7, #24]
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	7cfa      	ldrb	r2, [r7, #19]
 800b3f4:	701a      	strb	r2, [r3, #0]
                        
            
            /* NCI 1.0 - Check if Empty frames are allowed */
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 800b3f6:	89bb      	ldrh	r3, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d112      	bne.n	800b422 <nfcipTx+0x2a6>
 800b3fc:	4b10      	ldr	r3, [pc, #64]	@ (800b440 <nfcipTx+0x2c4>)
 800b3fe:	789b      	ldrb	r3, [r3, #2]
 800b400:	f003 0304 	and.w	r3, r3, #4
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00c      	beq.n	800b422 <nfcipTx+0x2a6>
 800b408:	7cfb      	ldrb	r3, [r7, #19]
 800b40a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d107      	bne.n	800b422 <nfcipTx+0x2a6>
            {
                return ERR_PARAM;
 800b412:	2307      	movs	r3, #7
 800b414:	e039      	b.n	800b48a <nfcipTx+0x30e>
            }
            break;

        /*******************************************************************************/
        default:
            return ERR_PARAM;
 800b416:	2307      	movs	r3, #7
 800b418:	e037      	b.n	800b48a <nfcipTx+0x30e>
            break;
 800b41a:	bf00      	nop
 800b41c:	e002      	b.n	800b424 <nfcipTx+0x2a8>
            break;
 800b41e:	bf00      	nop
 800b420:	e000      	b.n	800b424 <nfcipTx+0x2a8>
            break;
 800b422:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Prepend Header                                                              */
    /*******************************************************************************/    
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	3b01      	subs	r3, #1
 800b428:	61bb      	str	r3, [r7, #24]
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	7bfa      	ldrb	r2, [r7, #15]
 800b42e:	701a      	strb	r2, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 800b430:	7bfb      	ldrb	r3, [r7, #15]
 800b432:	f003 0301 	and.w	r3, r3, #1
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d107      	bne.n	800b44c <nfcipTx+0x2d0>
 800b43c:	22d4      	movs	r2, #212	@ 0xd4
 800b43e:	e006      	b.n	800b44e <nfcipTx+0x2d2>
 800b440:	20000bb0 	.word	0x20000bb0
 800b444:	20000bb7 	.word	0x20000bb7
 800b448:	20000bc2 	.word	0x20000bc2
 800b44c:	22d5      	movs	r2, #213	@ 0xd5
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	3b01      	subs	r3, #1
 800b452:	61bb      	str	r3, [r7, #24]
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	701a      	strb	r2, [r3, #0]
        
    
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	b29a      	uxth	r2, r3
 800b460:	89bb      	ldrh	r3, [r7, #12]
 800b462:	4413      	add	r3, r2
 800b464:	b29a      	uxth	r2, r3
 800b466:	8bfb      	ldrh	r3, [r7, #30]
 800b468:	4413      	add	r3, r2
 800b46a:	83fb      	strh	r3, [r7, #30]
    
    
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800b46c:	4b09      	ldr	r3, [pc, #36]	@ (800b494 <nfcipTx+0x318>)
 800b46e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b472:	8bfa      	ldrh	r2, [r7, #30]
 800b474:	429a      	cmp	r2, r3
 800b476:	d901      	bls.n	800b47c <nfcipTx+0x300>
    {
        return ERR_NOTSUPP;
 800b478:	2318      	movs	r3, #24
 800b47a:	e006      	b.n	800b48a <nfcipTx+0x30e>
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
 800b47c:	8bfb      	ldrh	r3, [r7, #30]
 800b47e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b480:	4619      	mov	r1, r3
 800b482:	69b8      	ldr	r0, [r7, #24]
 800b484:	f000 fe2c 	bl	800c0e0 <nfcipDataTx>
 800b488:	4603      	mov	r3, r0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3720      	adds	r7, #32
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	20000bb0 	.word	0x20000bb0

0800b498 <nfcipConfig>:
 ******************************************************************************
 */

/*******************************************************************************/
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
    if (cfg == NULL) 
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d034      	beq.n	800b510 <nfcipConfig+0x78>
    {
        return;
    }
    
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 800b4a6:	2250      	movs	r2, #80	@ 0x50
 800b4a8:	6879      	ldr	r1, [r7, #4]
 800b4aa:	481b      	ldr	r0, [pc, #108]	@ (800b518 <nfcipConfig+0x80>)
 800b4ac:	f006 f8a4 	bl	80115f8 <memcpy>
    
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 800b4b0:	4b19      	ldr	r3, [pc, #100]	@ (800b518 <nfcipConfig+0x80>)
 800b4b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4b6:	2b0e      	cmp	r3, #14
 800b4b8:	bf28      	it	cs
 800b4ba:	230e      	movcs	r3, #14
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	4b16      	ldr	r3, [pc, #88]	@ (800b518 <nfcipConfig+0x80>)
 800b4c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 800b4c4:	4b14      	ldr	r3, [pc, #80]	@ (800b518 <nfcipConfig+0x80>)
 800b4c6:	78db      	ldrb	r3, [r3, #3]
 800b4c8:	2b0e      	cmp	r3, #14
 800b4ca:	bf28      	it	cs
 800b4cc:	230e      	movcs	r3, #14
 800b4ce:	b2da      	uxtb	r2, r3
 800b4d0:	4b11      	ldr	r3, [pc, #68]	@ (800b518 <nfcipConfig+0x80>)
 800b4d2:	70da      	strb	r2, [r3, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 800b4d4:	4b10      	ldr	r3, [pc, #64]	@ (800b518 <nfcipConfig+0x80>)
 800b4d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b4da:	3301      	adds	r3, #1
 800b4dc:	019b      	lsls	r3, r3, #6
 800b4de:	2bfd      	cmp	r3, #253	@ 0xfd
 800b4e0:	d807      	bhi.n	800b4f2 <nfcipConfig+0x5a>
 800b4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b518 <nfcipConfig+0x80>)
 800b4e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	019b      	lsls	r3, r3, #6
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	e000      	b.n	800b4f4 <nfcipConfig+0x5c>
 800b4f2:	23fe      	movs	r3, #254	@ 0xfe
 800b4f4:	4a08      	ldr	r2, [pc, #32]	@ (800b518 <nfcipConfig+0x80>)
 800b4f6:	f8a2 305c 	strh.w	r3, [r2, #92]	@ 0x5c
    
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 800b4fa:	4b07      	ldr	r3, [pc, #28]	@ (800b518 <nfcipConfig+0x80>)
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d101      	bne.n	800b506 <nfcipConfig+0x6e>
 800b502:	220a      	movs	r2, #10
 800b504:	e000      	b.n	800b508 <nfcipConfig+0x70>
 800b506:	2201      	movs	r2, #1
 800b508:	4b03      	ldr	r3, [pc, #12]	@ (800b518 <nfcipConfig+0x80>)
 800b50a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800b50e:	e000      	b.n	800b512 <nfcipConfig+0x7a>
        return;
 800b510:	bf00      	nop
}
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	20000bb0 	.word	0x20000bb0

0800b51c <nfcipRun>:


/*******************************************************************************/
static ReturnCode nfcipRun( uint16_t *outActRxLen, bool *outIsChaining  )
{
 800b51c:	b5b0      	push	{r4, r5, r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af02      	add	r7, sp, #8
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    
    ret = ERR_SYNTAX;
 800b526:	2314      	movs	r3, #20
 800b528:	81fb      	strh	r3, [r7, #14]
    
    nfcipLogD( " NFCIP Run() state: %d \r\n", gNfcip.state );
    
    switch( gNfcip.state )
 800b52a:	4b93      	ldr	r3, [pc, #588]	@ (800b778 <nfcipRun+0x25c>)
 800b52c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b530:	2b10      	cmp	r3, #16
 800b532:	f200 8117 	bhi.w	800b764 <nfcipRun+0x248>
 800b536:	a201      	add	r2, pc, #4	@ (adr r2, 800b53c <nfcipRun+0x20>)
 800b538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53c:	0800b581 	.word	0x0800b581
 800b540:	0800b765 	.word	0x0800b765
 800b544:	0800b765 	.word	0x0800b765
 800b548:	0800b765 	.word	0x0800b765
 800b54c:	0800b581 	.word	0x0800b581
 800b550:	0800b585 	.word	0x0800b585
 800b554:	0800b5e1 	.word	0x0800b5e1
 800b558:	0800b765 	.word	0x0800b765
 800b55c:	0800b765 	.word	0x0800b765
 800b560:	0800b765 	.word	0x0800b765
 800b564:	0800b765 	.word	0x0800b765
 800b568:	0800b765 	.word	0x0800b765
 800b56c:	0800b581 	.word	0x0800b581
 800b570:	0800b72b 	.word	0x0800b72b
 800b574:	0800b609 	.word	0x0800b609
 800b578:	0800b6b3 	.word	0x0800b6b3
 800b57c:	0800b581 	.word	0x0800b581
        /*******************************************************************************/
        case NFCIP_ST_IDLE:
        case NFCIP_ST_INIT_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_SLEEP:
            return ERR_NONE;
 800b580:	2300      	movs	r3, #0
 800b582:	e0f5      	b.n	800b770 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_TX:
            
            nfcipLogD( " NFCIP(I) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 800b584:	4b7c      	ldr	r3, [pc, #496]	@ (800b778 <nfcipRun+0x25c>)
 800b586:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800b588:	4b7b      	ldr	r3, [pc, #492]	@ (800b778 <nfcipRun+0x25c>)
 800b58a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b58c:	4a7a      	ldr	r2, [pc, #488]	@ (800b778 <nfcipRun+0x25c>)
 800b58e:	f892 2070 	ldrb.w	r2, [r2, #112]	@ 0x70
 800b592:	189c      	adds	r4, r3, r2
 800b594:	4b78      	ldr	r3, [pc, #480]	@ (800b778 <nfcipRun+0x25c>)
 800b596:	f8b3 5068 	ldrh.w	r5, [r3, #104]	@ 0x68
 800b59a:	4b77      	ldr	r3, [pc, #476]	@ (800b778 <nfcipRun+0x25c>)
 800b59c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b5a0:	f003 0303 	and.w	r3, r3, #3
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	4a74      	ldr	r2, [pc, #464]	@ (800b778 <nfcipRun+0x25c>)
 800b5a8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800b5aa:	4a73      	ldr	r2, [pc, #460]	@ (800b778 <nfcipRun+0x25c>)
 800b5ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b5ae:	440a      	add	r2, r1
 800b5b0:	9201      	str	r2, [sp, #4]
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	462b      	mov	r3, r5
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	4601      	mov	r1, r0
 800b5ba:	2006      	movs	r0, #6
 800b5bc:	f7ff fdde 	bl	800b17c <nfcipTx>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	81fb      	strh	r3, [r7, #14]
                        
            switch( ret )
 800b5c4:	89fb      	ldrh	r3, [r7, #14]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d005      	beq.n	800b5d6 <nfcipRun+0xba>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 800b5ca:	4b6b      	ldr	r3, [pc, #428]	@ (800b778 <nfcipRun+0x25c>)
 800b5cc:	2204      	movs	r2, #4
 800b5ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                  return ret;
 800b5d2:	89fb      	ldrh	r3, [r7, #14]
 800b5d4:	e0cc      	b.n	800b770 <nfcipRun+0x254>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 800b5d6:	4b68      	ldr	r3, [pc, #416]	@ (800b778 <nfcipRun+0x25c>)
 800b5d8:	2206      	movs	r2, #6
 800b5da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                  break;
 800b5de:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_RX:          /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */

            ret = nfcipDataRx( false );
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	f000 fd9d 	bl	800c120 <nfcipDataRx>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	81fb      	strh	r3, [r7, #14]
            
            if( ret != ERR_BUSY )
 800b5ea:	89fb      	ldrh	r3, [r7, #14]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	f000 80bb 	beq.w	800b768 <nfcipRun+0x24c>
            {
                ret = nfcipInitiatorHandleDEP( ret, *gNfcip.rxRcvdLen, outActRxLen, outIsChaining );
 800b5f2:	4b61      	ldr	r3, [pc, #388]	@ (800b778 <nfcipRun+0x25c>)
 800b5f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5f6:	8819      	ldrh	r1, [r3, #0]
 800b5f8:	89f8      	ldrh	r0, [r7, #14]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	f7fe febb 	bl	800a378 <nfcipInitiatorHandleDEP>
 800b602:	4603      	mov	r3, r0
 800b604:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 800b606:	e0af      	b.n	800b768 <nfcipRun+0x24c>
            
        /*******************************************************************************/    
        case NFCIP_ST_TARG_DEP_RTOX:
            
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 800b608:	4b5b      	ldr	r3, [pc, #364]	@ (800b778 <nfcipRun+0x25c>)
 800b60a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7fa f96d 	bl	80058ec <timerIsExpired>
 800b612:	4603      	mov	r3, r0
 800b614:	f083 0301 	eor.w	r3, r3, #1
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <nfcipRun+0x106>
            {
                return ERR_BUSY;
 800b61e:	2302      	movs	r3, #2
 800b620:	e0a6      	b.n	800b770 <nfcipRun+0x254>
            }
            
            /* If we cannot send a RTOX raise a Timeout error so that we do not   
             * hold the field On forever in AP2P                                  */
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 800b622:	4b55      	ldr	r3, [pc, #340]	@ (800b778 <nfcipRun+0x25c>)
 800b624:	789b      	ldrb	r3, [r3, #2]
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <nfcipRun+0x116>
            {
                /* We should reEnable Rx, and measure time between our field Off to 
                 * either report link loss or recover               #287          */
                nfcipLogI( " NFCIP(T) RTOX not sent due to config, NOT reenabling Rx \r\n" );
                return ERR_TIMEOUT;
 800b62e:	2304      	movs	r3, #4
 800b630:	e09e      	b.n	800b770 <nfcipRun+0x254>
            } 

            if( gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 800b632:	4b51      	ldr	r3, [pc, #324]	@ (800b778 <nfcipRun+0x25c>)
 800b634:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b638:	1c5a      	adds	r2, r3, #1
 800b63a:	b2d1      	uxtb	r1, r2
 800b63c:	4a4e      	ldr	r2, [pc, #312]	@ (800b778 <nfcipRun+0x25c>)
 800b63e:	f882 1058 	strb.w	r1, [r2, #88]	@ 0x58
 800b642:	2b03      	cmp	r3, #3
 800b644:	d901      	bls.n	800b64a <nfcipRun+0x12e>
            {
                return ERR_PROTO;
 800b646:	230b      	movs	r3, #11
 800b648:	e092      	b.n	800b770 <nfcipRun+0x254>
            }
            
            nfcipLogI( " NFCIP(T) RTOX sent \r\n" );
            
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 800b64a:	4b4b      	ldr	r3, [pc, #300]	@ (800b778 <nfcipRun+0x25c>)
 800b64c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b650:	f003 030f 	and.w	r3, r3, #15
 800b654:	330c      	adds	r3, #12
 800b656:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800b65a:	fa22 f303 	lsr.w	r3, r2, r3
 800b65e:	2b3a      	cmp	r3, #58	@ 0x3a
 800b660:	d80b      	bhi.n	800b67a <nfcipRun+0x15e>
 800b662:	4b45      	ldr	r3, [pc, #276]	@ (800b778 <nfcipRun+0x25c>)
 800b664:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b668:	f003 030f 	and.w	r3, r3, #15
 800b66c:	330c      	adds	r3, #12
 800b66e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800b672:	fa22 f303 	lsr.w	r3, r2, r3
 800b676:	b2db      	uxtb	r3, r3
 800b678:	e000      	b.n	800b67c <nfcipRun+0x160>
 800b67a:	233b      	movs	r3, #59	@ 0x3b
 800b67c:	4a3e      	ldr	r2, [pc, #248]	@ (800b778 <nfcipRun+0x25c>)
 800b67e:	f882 3055 	strb.w	r3, [r2, #85]	@ 0x55
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800b682:	4b3d      	ldr	r3, [pc, #244]	@ (800b778 <nfcipRun+0x25c>)
 800b684:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800b688:	4619      	mov	r1, r3
 800b68a:	2090      	movs	r0, #144	@ 0x90
 800b68c:	f7fe fdf6 	bl	800a27c <nfcipDEPControlMsg>
 800b690:	4603      	mov	r3, r0
 800b692:	81fb      	strh	r3, [r7, #14]
 800b694:	89fb      	ldrh	r3, [r7, #14]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <nfcipRun+0x182>
 800b69a:	89fb      	ldrh	r3, [r7, #14]
 800b69c:	e068      	b.n	800b770 <nfcipRun+0x254>
            
            /* Set waiting for RTOX Ack Flag */
            gNfcip.isWait4RTOX = true;
 800b69e:	4b36      	ldr	r3, [pc, #216]	@ (800b778 <nfcipRun+0x25c>)
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
            
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 800b6a6:	4b34      	ldr	r3, [pc, #208]	@ (800b778 <nfcipRun+0x25c>)
 800b6a8:	220d      	movs	r2, #13
 800b6aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            return ERR_BUSY;
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	e05e      	b.n	800b770 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_TX:
            
            nfcipLogD( " NFCIP(T) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 800b6b2:	4b31      	ldr	r3, [pc, #196]	@ (800b778 <nfcipRun+0x25c>)
 800b6b4:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800b6b6:	4b30      	ldr	r3, [pc, #192]	@ (800b778 <nfcipRun+0x25c>)
 800b6b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6ba:	4a2f      	ldr	r2, [pc, #188]	@ (800b778 <nfcipRun+0x25c>)
 800b6bc:	f892 2070 	ldrb.w	r2, [r2, #112]	@ 0x70
 800b6c0:	441a      	add	r2, r3
 800b6c2:	4b2d      	ldr	r3, [pc, #180]	@ (800b778 <nfcipRun+0x25c>)
 800b6c4:	f8b3 0068 	ldrh.w	r0, [r3, #104]	@ 0x68
 800b6c8:	4b2b      	ldr	r3, [pc, #172]	@ (800b778 <nfcipRun+0x25c>)
 800b6ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b6ce:	f003 0303 	and.w	r3, r3, #3
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b6d8:	9401      	str	r4, [sp, #4]
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2007      	movs	r0, #7
 800b6e0:	f7ff fd4c 	bl	800b17c <nfcipTx>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	81fb      	strh	r3, [r7, #14]
            
            /* Clear flags */
            gNfcip.isTxPending = false;
 800b6e8:	4b23      	ldr	r3, [pc, #140]	@ (800b778 <nfcipRun+0x25c>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
            gNfcip.isWait4RTOX = false;
 800b6f0:	4b21      	ldr	r3, [pc, #132]	@ (800b778 <nfcipRun+0x25c>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
            
            /* Digital 1.0 14.12.3.4 Increment the current PNI after Tx */
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800b6f8:	4b1f      	ldr	r3, [pc, #124]	@ (800b778 <nfcipRun+0x25c>)
 800b6fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b6fe:	3301      	adds	r3, #1
 800b700:	b2db      	uxtb	r3, r3
 800b702:	f003 0303 	and.w	r3, r3, #3
 800b706:	b2da      	uxtb	r2, r3
 800b708:	4b1b      	ldr	r3, [pc, #108]	@ (800b778 <nfcipRun+0x25c>)
 800b70a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            
            switch( ret )
 800b70e:	89fb      	ldrh	r3, [r7, #14]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d005      	beq.n	800b720 <nfcipRun+0x204>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 800b714:	4b18      	ldr	r3, [pc, #96]	@ (800b778 <nfcipRun+0x25c>)
 800b716:	220c      	movs	r2, #12
 800b718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                  return ret;
 800b71c:	89fb      	ldrh	r3, [r7, #14]
 800b71e:	e027      	b.n	800b770 <nfcipRun+0x254>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 800b720:	4b15      	ldr	r3, [pc, #84]	@ (800b778 <nfcipRun+0x25c>)
 800b722:	220d      	movs	r2, #13
 800b724:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                  break;
 800b728:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_RX:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 800b72a:	4b13      	ldr	r3, [pc, #76]	@ (800b778 <nfcipRun+0x25c>)
 800b72c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b730:	2b00      	cmp	r3, #0
 800b732:	d006      	beq.n	800b742 <nfcipRun+0x226>
            {
                nfcipLogD( " NFCIP(T) Skipping Rx Using DEP from Activation \r\n" );
                
                gNfcip.isReqPending = false;
 800b734:	4b10      	ldr	r3, [pc, #64]	@ (800b778 <nfcipRun+0x25c>)
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
                ret = ERR_NONE;
 800b73c:	2300      	movs	r3, #0
 800b73e:	81fb      	strh	r3, [r7, #14]
 800b740:	e004      	b.n	800b74c <nfcipRun+0x230>
            }
            else
            {
                ret = nfcipDataRx( false );
 800b742:	2000      	movs	r0, #0
 800b744:	f000 fcec 	bl	800c120 <nfcipDataRx>
 800b748:	4603      	mov	r3, r0
 800b74a:	81fb      	strh	r3, [r7, #14]
            }
            
            if( ret != ERR_BUSY )
 800b74c:	89fb      	ldrh	r3, [r7, #14]
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d00c      	beq.n	800b76c <nfcipRun+0x250>
            {
                ret = nfcipTargetHandleRX( ret, outActRxLen, outIsChaining );
 800b752:	89fb      	ldrh	r3, [r7, #14]
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	6879      	ldr	r1, [r7, #4]
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff f8cd 	bl	800a8f8 <nfcipTargetHandleRX>
 800b75e:	4603      	mov	r3, r0
 800b760:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 800b762:	e003      	b.n	800b76c <nfcipRun+0x250>
            
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800b764:	bf00      	nop
 800b766:	e002      	b.n	800b76e <nfcipRun+0x252>
            break;
 800b768:	bf00      	nop
 800b76a:	e000      	b.n	800b76e <nfcipRun+0x252>
            break;
 800b76c:	bf00      	nop
    }
    return ret;
 800b76e:	89fb      	ldrh	r3, [r7, #14]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bdb0      	pop	{r4, r5, r7, pc}
 800b778:	20000bb0 	.word	0x20000bb0

0800b77c <rfalNfcDepInitialize>:
}


/*******************************************************************************/
void rfalNfcDepInitialize( void )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	af00      	add	r7, sp, #0
    nfcipLogD( " NFCIP Ini() \r\n" );
	
    gNfcip.state          = NFCIP_ST_IDLE;
 800b780:	4b28      	ldr	r3, [pc, #160]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b782:	2200      	movs	r2, #0
 800b784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    gNfcip.isDeactivating = NULL;
 800b788:	4b26      	ldr	r3, [pc, #152]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    gNfcip.isTxPending    = false;
 800b790:	4b24      	ldr	r3, [pc, #144]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b792:	2200      	movs	r2, #0
 800b794:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
    gNfcip.isWait4RTOX    = false;
 800b798:	4b22      	ldr	r3, [pc, #136]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
    gNfcip.isReqPending   = false;
 800b7a0:	4b20      	ldr	r3, [pc, #128]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    
            
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800b7a8:	4b1e      	ldr	r3, [pc, #120]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	709a      	strb	r2, [r3, #2]
    
    gNfcip.cfg.did   = RFAL_NFCDEP_DID_NO;
 800b7ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	70da      	strb	r2, [r3, #3]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 800b7b4:	4b1b      	ldr	r3, [pc, #108]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	711a      	strb	r2, [r3, #4]
    
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800b7ba:	4b1a      	ldr	r3, [pc, #104]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7bc:	2200      	movs	r2, #0
 800b7be:	719a      	strb	r2, [r3, #6]
    gNfcip.cfg.bs    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800b7c0:	4b18      	ldr	r3, [pc, #96]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	715a      	strb	r2, [r3, #5]
    
    gNfcip.cfg.lr    = RFAL_NFCDEP_LR_254;
 800b7c6:	4b17      	ldr	r3, [pc, #92]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7c8:	2203      	movs	r2, #3
 800b7ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800b7ce:	4b15      	ldr	r3, [pc, #84]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	019b      	lsls	r3, r3, #6
 800b7d8:	2bfd      	cmp	r3, #253	@ 0xfd
 800b7da:	d807      	bhi.n	800b7ec <rfalNfcDepInitialize+0x70>
 800b7dc:	4b11      	ldr	r3, [pc, #68]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	019b      	lsls	r3, r3, #6
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	e000      	b.n	800b7ee <rfalNfcDepInitialize+0x72>
 800b7ec:	23fe      	movs	r3, #254	@ 0xfe
 800b7ee:	4a0d      	ldr	r2, [pc, #52]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7f0:	f8a2 305c 	strh.w	r3, [r2, #92]	@ 0x5c
    
    gNfcip.cfg.gbLen = 0;    
 800b7f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 800b7fc:	4b09      	ldr	r3, [pc, #36]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b7fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b802:	649a      	str	r2, [r3, #72]	@ 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 800b804:	4b07      	ldr	r3, [pc, #28]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b806:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b80a:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    gNfcip.pni       = 0;    
 800b80c:	4b05      	ldr	r3, [pc, #20]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b80e:	2200      	movs	r2, #0
 800b810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    gNfcip.RTOXTimer = 0;
 800b814:	4b03      	ldr	r3, [pc, #12]	@ (800b824 <rfalNfcDepInitialize+0xa8>)
 800b816:	2200      	movs	r2, #0
 800b818:	67da      	str	r2, [r3, #124]	@ 0x7c

    nfcipClearCounters();
 800b81a:	f7fe fd8f 	bl	800a33c <nfcipClearCounters>
}
 800b81e:	bf00      	nop
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20000bb0 	.word	0x20000bb0

0800b828 <nfcipSetDEPParams>:


/*******************************************************************************/
static void nfcipSetDEPParams( rfalNfcDepDEPParams *DEPParams )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
    nfcipLogD( " NFCIP SetDEP() txLen: %d \r\n", DEPParams->txBufLen );
	
    gNfcip.isTxChaining = DEPParams->txChaining;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	7ada      	ldrb	r2, [r3, #11]
 800b834:	4b2f      	ldr	r3, [pc, #188]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b836:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
    gNfcip.txBuf        = DEPParams->txBuf;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	4a2d      	ldr	r2, [pc, #180]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b840:	6613      	str	r3, [r2, #96]	@ 0x60
    gNfcip.rxBuf        = DEPParams->rxBuf;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	4a2b      	ldr	r2, [pc, #172]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b848:	6653      	str	r3, [r2, #100]	@ 0x64
    gNfcip.txBufLen     = DEPParams->txBufLen;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	891a      	ldrh	r2, [r3, #8]
 800b84e:	4b29      	ldr	r3, [pc, #164]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b850:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	8a1a      	ldrh	r2, [r3, #16]
 800b858:	4b26      	ldr	r3, [pc, #152]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b85a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	7a9a      	ldrb	r2, [r3, #10]
 800b862:	4b24      	ldr	r3, [pc, #144]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b864:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
    gNfcip.rxBufPaylPos = DEPParams->rxBufPaylPos;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	7c9a      	ldrb	r2, [r3, #18]
 800b86c:	4b21      	ldr	r3, [pc, #132]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b86e:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    
    if( DEPParams->did != RFAL_NFCDEP_DID_KEEP )
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	2bff      	cmp	r3, #255	@ 0xff
 800b878:	d007      	beq.n	800b88a <nfcipSetDEPParams+0x62>
    {
        gNfcip.cfg.did  = nfcip_DIDMax( DEPParams->did );
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	2b0e      	cmp	r3, #14
 800b880:	bf28      	it	cs
 800b882:	230e      	movcs	r3, #14
 800b884:	b2da      	uxtb	r2, r3
 800b886:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b888:	70da      	strb	r2, [r3, #3]
    }
    
    gNfcip.cfg.fwt      = DEPParams->fwt;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	4a19      	ldr	r2, [pc, #100]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b890:	6493      	str	r3, [r2, #72]	@ 0x48
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	699b      	ldr	r3, [r3, #24]
 800b896:	4a17      	ldr	r2, [pc, #92]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b898:	64d3      	str	r3, [r2, #76]	@ 0x4c
    gNfcip.fsc          = DEPParams->fsc;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	8b9a      	ldrh	r2, [r3, #28]
 800b89e:	4b15      	ldr	r3, [pc, #84]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b8a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    
    
    
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 800b8a4:	4b13      	ldr	r3, [pc, #76]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d119      	bne.n	800b8e0 <nfcipSetDEPParams+0xb8>
    {
        /* If there's any data to be sent go for Tx */
        if(DEPParams->txBufLen > 0U)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	891b      	ldrh	r3, [r3, #8]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d010      	beq.n	800b8d6 <nfcipSetDEPParams+0xae>
        {
            /* Ensure that an RTOX Ack is not being expected at moment */
            if( !gNfcip.isWait4RTOX )
 800b8b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b8b6:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800b8ba:	f083 0301 	eor.w	r3, r3, #1
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d004      	beq.n	800b8ce <nfcipSetDEPParams+0xa6>
            {
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800b8c4:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b8c6:	220f      	movs	r2, #15
 800b8c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                return;
 800b8cc:	e00e      	b.n	800b8ec <nfcipSetDEPParams+0xc4>
            }
            else
            {
                /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
                gNfcip.isTxPending = true;
 800b8ce:	4b09      	ldr	r3, [pc, #36]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
                nfcipLogW( " NFCIP(T) Waiting RTOX, queueing outgoing DEP Block \r\n" );                
            }
        }    
    
        /*Digital 1.0  14.12.4.1 In target mode the first PDU MUST be sent by the Initiator */
        gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 800b8d6:	4b07      	ldr	r3, [pc, #28]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b8d8:	220d      	movs	r2, #13
 800b8da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return;
 800b8de:	e005      	b.n	800b8ec <nfcipSetDEPParams+0xc4>
    }

    /* New data TxRx request clear previous error counters for consecutive TxRx without reseting communication/protocol layer*/
    nfcipClearCounters();
 800b8e0:	f7fe fd2c 	bl	800a33c <nfcipClearCounters>
    
    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 800b8e4:	4b03      	ldr	r3, [pc, #12]	@ (800b8f4 <nfcipSetDEPParams+0xcc>)
 800b8e6:	2205      	movs	r2, #5
 800b8e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20000bb0 	.word	0x20000bb0

0800b8f8 <rfalNfcDepIsAtrReq>:
}


/*******************************************************************************/
bool rfalNfcDepIsAtrReq( const uint8_t* buf, uint16_t bufLen, uint8_t* nfcid3 )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	460b      	mov	r3, r1
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	817b      	strh	r3, [r7, #10]
    uint8_t msgIt;
    
    msgIt = 0;
 800b906:	2300      	movs	r3, #0
 800b908:	75fb      	strb	r3, [r7, #23]
    
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 800b90a:	897b      	ldrh	r3, [r7, #10]
 800b90c:	2b0f      	cmp	r3, #15
 800b90e:	d902      	bls.n	800b916 <rfalNfcDepIsAtrReq+0x1e>
 800b910:	897b      	ldrh	r3, [r7, #10]
 800b912:	2b40      	cmp	r3, #64	@ 0x40
 800b914:	d901      	bls.n	800b91a <rfalNfcDepIsAtrReq+0x22>
    {
        return false;
 800b916:	2300      	movs	r3, #0
 800b918:	e020      	b.n	800b95c <rfalNfcDepIsAtrReq+0x64>
    }
    
    if ( buf[msgIt++] != NFCIP_REQ )
 800b91a:	7dfb      	ldrb	r3, [r7, #23]
 800b91c:	1c5a      	adds	r2, r3, #1
 800b91e:	75fa      	strb	r2, [r7, #23]
 800b920:	461a      	mov	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	4413      	add	r3, r2
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	2bd4      	cmp	r3, #212	@ 0xd4
 800b92a:	d001      	beq.n	800b930 <rfalNfcDepIsAtrReq+0x38>
    {
        return false;
 800b92c:	2300      	movs	r3, #0
 800b92e:	e015      	b.n	800b95c <rfalNfcDepIsAtrReq+0x64>
    }
    
    if( buf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_REQ )
 800b930:	7dfb      	ldrb	r3, [r7, #23]
 800b932:	1c5a      	adds	r2, r3, #1
 800b934:	75fa      	strb	r2, [r7, #23]
 800b936:	461a      	mov	r2, r3
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	4413      	add	r3, r2
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <rfalNfcDepIsAtrReq+0x4e>
    {
        return false;
 800b942:	2300      	movs	r3, #0
 800b944:	e00a      	b.n	800b95c <rfalNfcDepIsAtrReq+0x64>
    }
    
    /* Output NFID3 if requested */
    if( nfcid3 != NULL )
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d006      	beq.n	800b95a <rfalNfcDepIsAtrReq+0x62>
    {
        ST_MEMCPY( nfcid3, &buf[RFAL_NFCDEP_ATR_REQ_NFCID3_POS], RFAL_NFCDEP_NFCID3_LEN );
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	3302      	adds	r3, #2
 800b950:	220a      	movs	r2, #10
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f005 fe4f 	bl	80115f8 <memcpy>
    }
     
    return true;
 800b95a:	2301      	movs	r3, #1
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3718      	adds	r7, #24
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <nfcipTargetHandleActivation>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleActivation( rfalNfcDepDevice *nfcDepDev, uint8_t *outBRS )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b088      	sub	sp, #32
 800b968:	af02      	add	r7, sp, #8
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_PSLRES_LEN];
    
    /*******************************************************************************/
    /*  Check if we are in correct state                                           */
    /*******************************************************************************/
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 800b96e:	4b79      	ldr	r3, [pc, #484]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800b970:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b974:	2b0b      	cmp	r3, #11
 800b976:	d001      	beq.n	800b97c <nfcipTargetHandleActivation+0x18>
    {
        return ERR_WRONG_STATE;
 800b978:	2321      	movs	r3, #33	@ 0x21
 800b97a:	e0e6      	b.n	800bb4a <nfcipTargetHandleActivation+0x1e6>
    
    
    /*******************************************************************************/
    /*  Check required parameters                                                  */
    /*******************************************************************************/
    if( outBRS == NULL )
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d101      	bne.n	800b986 <nfcipTargetHandleActivation+0x22>
    {
        return ERR_PARAM;
 800b982:	2307      	movs	r3, #7
 800b984:	e0e1      	b.n	800bb4a <nfcipTargetHandleActivation+0x1e6>
    }
    
    /*******************************************************************************/
    /*  Wait and process incoming cmd (PSL / DEP)                                  */
    /*******************************************************************************/        
    ret = nfcipDataRx( false );
 800b986:	2000      	movs	r0, #0
 800b988:	f000 fbca 	bl	800c120 <nfcipDataRx>
 800b98c:	4603      	mov	r3, r0
 800b98e:	82fb      	strh	r3, [r7, #22]

    if( ret != ERR_NONE )
 800b990:	8afb      	ldrh	r3, [r7, #22]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <nfcipTargetHandleActivation+0x36>
    {
        return ret;
 800b996:	8afb      	ldrh	r3, [r7, #22]
 800b998:	e0d7      	b.n	800bb4a <nfcipTargetHandleActivation+0x1e6>
    }
    
    msgIt   = 0;
 800b99a:	2300      	movs	r3, #0
 800b99c:	757b      	strb	r3, [r7, #21]
    *outBRS = RFAL_NFCDEP_BRS_MAINTAIN;                   /* set out BRS to be maintained */
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	22c0      	movs	r2, #192	@ 0xc0
 800b9a2:	701a      	strb	r2, [r3, #0]
 
    msgIt++;                                              /* Skip LEN byte                */
 800b9a4:	7d7b      	ldrb	r3, [r7, #21]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	757b      	strb	r3, [r7, #21]
    
    if ( gNfcip.rxBuf[msgIt++] != NFCIP_REQ )
 800b9aa:	4b6a      	ldr	r3, [pc, #424]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800b9ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b9ae:	7d7b      	ldrb	r3, [r7, #21]
 800b9b0:	1c59      	adds	r1, r3, #1
 800b9b2:	7579      	strb	r1, [r7, #21]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	2bd4      	cmp	r3, #212	@ 0xd4
 800b9ba:	d001      	beq.n	800b9c0 <nfcipTargetHandleActivation+0x5c>
    {
        return ERR_PROTO;
 800b9bc:	230b      	movs	r3, #11
 800b9be:	e0c4      	b.n	800bb4a <nfcipTargetHandleActivation+0x1e6>
    }
    
    if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_PSL_REQ )
 800b9c0:	4b64      	ldr	r3, [pc, #400]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800b9c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b9c4:	7d7b      	ldrb	r3, [r7, #21]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	2b04      	cmp	r3, #4
 800b9cc:	f040 8082 	bne.w	800bad4 <nfcipTargetHandleActivation+0x170>
    {
        msgIt++;
 800b9d0:	7d7b      	ldrb	r3, [r7, #21]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	757b      	strb	r3, [r7, #21]
        
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 800b9d6:	4b5f      	ldr	r3, [pc, #380]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800b9d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b9da:	7d7b      	ldrb	r3, [r7, #21]
 800b9dc:	1c59      	adds	r1, r3, #1
 800b9de:	7579      	strb	r1, [r7, #21]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	781a      	ldrb	r2, [r3, #0]
 800b9e4:	4b5b      	ldr	r3, [pc, #364]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800b9e6:	78db      	ldrb	r3, [r3, #3]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d001      	beq.n	800b9f0 <nfcipTargetHandleActivation+0x8c>
        {
            return ERR_PROTO;
 800b9ec:	230b      	movs	r3, #11
 800b9ee:	e0ac      	b.n	800bb4a <nfcipTargetHandleActivation+0x1e6>
        }
        
        nfcipLogI( " NFCIP(T) PSL REQ rcvd \r\n" );
        
        *outBRS = gNfcip.rxBuf[msgIt++];                  /* assign output BRS value      */
 800b9f0:	4b58      	ldr	r3, [pc, #352]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800b9f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b9f4:	7d7b      	ldrb	r3, [r7, #21]
 800b9f6:	1c59      	adds	r1, r3, #1
 800b9f8:	7579      	strb	r1, [r7, #21]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	781a      	ldrb	r2, [r3, #0]
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	701a      	strb	r2, [r3, #0]
        
        /* Store FSL(LR) and update current config */
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 800ba02:	4b54      	ldr	r3, [pc, #336]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800ba04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ba06:	7d7b      	ldrb	r3, [r7, #21]
 800ba08:	1c59      	adds	r1, r3, #1
 800ba0a:	7579      	strb	r1, [r7, #21]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	f003 0303 	and.w	r3, r3, #3
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	4b4f      	ldr	r3, [pc, #316]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800ba18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800ba1c:	4b4d      	ldr	r3, [pc, #308]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800ba1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ba22:	3301      	adds	r3, #1
 800ba24:	019b      	lsls	r3, r3, #6
 800ba26:	2bfd      	cmp	r3, #253	@ 0xfd
 800ba28:	d807      	bhi.n	800ba3a <nfcipTargetHandleActivation+0xd6>
 800ba2a:	4b4a      	ldr	r3, [pc, #296]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800ba2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ba30:	3301      	adds	r3, #1
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	019b      	lsls	r3, r3, #6
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	e000      	b.n	800ba3c <nfcipTargetHandleActivation+0xd8>
 800ba3a:	23fe      	movs	r3, #254	@ 0xfe
 800ba3c:	4a45      	ldr	r2, [pc, #276]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800ba3e:	f8a2 305c 	strh.w	r3, [r2, #92]	@ 0x5c
        
        /*******************************************************************************/
        /* Update NFC-DDE Device info */
        if( nfcDepDev != NULL )
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d032      	beq.n	800baae <nfcipTargetHandleActivation+0x14a>
        {
            /* Update Bitrate info */
            /* PRQA S 4342 2 # MISRA 10.5 - Layout of enum rfalBitRate and definition of rfalNfcDepBRS2DSI guarantee no invalid enum values to be created */
            nfcDepDev->info.DSI = (rfalBitRate)rfalNfcDepBRS2DSI( *outBRS );   /* DSI codes the bit rate from Initiator to Target */
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	08db      	lsrs	r3, r3, #3
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	f003 0307 	and.w	r3, r3, #7
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            nfcDepDev->info.DRI = (rfalBitRate)rfalNfcDepBRS2DRI( *outBRS );   /* DRI codes the bit rate from Target to Initiator */
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	f003 0307 	and.w	r3, r3, #7
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            
            /* Update Length Reduction and Frame Size */
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 800ba6c:	4b39      	ldr	r3, [pc, #228]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800ba6e:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            nfcDepDev->info.FS = gNfcip.fsc;
 800ba78:	4b36      	ldr	r3, [pc, #216]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800ba7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
            
            /* Update PPi byte */
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	7bdb      	ldrb	r3, [r3, #15]
 800ba88:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	73da      	strb	r2, [r3, #15]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi |= rfalNfcDepLR2PP( gNfcip.cfg.lr );
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	7bda      	ldrb	r2, [r3, #15]
 800ba96:	4b2f      	ldr	r3, [pc, #188]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800ba98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ba9c:	011b      	lsls	r3, r3, #4
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	4313      	orrs	r3, r2
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	73da      	strb	r2, [r3, #15]
        }
        
        EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_PSL_RES, txBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 800baae:	f107 010c 	add.w	r1, r7, #12
 800bab2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bab6:	9301      	str	r3, [sp, #4]
 800bab8:	2300      	movs	r3, #0
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	2300      	movs	r3, #0
 800babe:	2200      	movs	r2, #0
 800bac0:	2005      	movs	r0, #5
 800bac2:	f7ff fb5b 	bl	800b17c <nfcipTx>
 800bac6:	4603      	mov	r3, r0
 800bac8:	82fb      	strh	r3, [r7, #22]
 800baca:	8afb      	ldrh	r3, [r7, #22]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d037      	beq.n	800bb40 <nfcipTargetHandleActivation+0x1dc>
 800bad0:	8afb      	ldrh	r3, [r7, #22]
 800bad2:	e03a      	b.n	800bb4a <nfcipTargetHandleActivation+0x1e6>
    }
    else
    {
        if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_DEP_REQ )
 800bad4:	4b1f      	ldr	r3, [pc, #124]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800bad6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bad8:	7d7b      	ldrb	r3, [r7, #21]
 800bada:	4413      	add	r3, r2
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	2b06      	cmp	r3, #6
 800bae0:	d12a      	bne.n	800bb38 <nfcipTargetHandleActivation+0x1d4>
        {
            msgIt++;
 800bae2:	7d7b      	ldrb	r3, [r7, #21]
 800bae4:	3301      	adds	r3, #1
 800bae6:	757b      	strb	r3, [r7, #21]
                    
            /*******************************************************************************/
            /* Digital 1.0 14.12.3.1 PNI must be initialized to 0 */
            if( nfcip_PBF_PNI( gNfcip.rxBuf[msgIt] ) != 0U )
 800bae8:	4b1a      	ldr	r3, [pc, #104]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800baea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800baec:	7d7b      	ldrb	r3, [r7, #21]
 800baee:	4413      	add	r3, r2
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	f003 0303 	and.w	r3, r3, #3
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <nfcipTargetHandleActivation+0x19a>
            {
                return ERR_PROTO;
 800bafa:	230b      	movs	r3, #11
 800bafc:	e025      	b.n	800bb4a <nfcipTargetHandleActivation+0x1e6>
            }
            
            /*******************************************************************************/
            /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
            if( nfcip_PFBhasDID( gNfcip.rxBuf[ msgIt] ) ) 
 800bafe:	4b15      	ldr	r3, [pc, #84]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800bb00:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bb02:	7d7b      	ldrb	r3, [r7, #21]
 800bb04:	4413      	add	r3, r2
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	f003 0304 	and.w	r3, r3, #4
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00d      	beq.n	800bb2c <nfcipTargetHandleActivation+0x1c8>
            {
                if( gNfcip.rxBuf[++msgIt] != gNfcip.cfg.did )
 800bb10:	4b10      	ldr	r3, [pc, #64]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800bb12:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bb14:	7d7b      	ldrb	r3, [r7, #21]
 800bb16:	3301      	adds	r3, #1
 800bb18:	757b      	strb	r3, [r7, #21]
 800bb1a:	7d7b      	ldrb	r3, [r7, #21]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	781a      	ldrb	r2, [r3, #0]
 800bb20:	4b0c      	ldr	r3, [pc, #48]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800bb22:	78db      	ldrb	r3, [r3, #3]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d007      	beq.n	800bb38 <nfcipTargetHandleActivation+0x1d4>
                {
                    return ERR_PROTO;
 800bb28:	230b      	movs	r3, #11
 800bb2a:	e00e      	b.n	800bb4a <nfcipTargetHandleActivation+0x1e6>
                }
            }
            else if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )          /* DID expected but not rcv */
 800bb2c:	4b09      	ldr	r3, [pc, #36]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800bb2e:	78db      	ldrb	r3, [r3, #3]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <nfcipTargetHandleActivation+0x1d4>
            {
                return ERR_PROTO;
 800bb34:	230b      	movs	r3, #11
 800bb36:	e008      	b.n	800bb4a <nfcipTargetHandleActivation+0x1e6>
                /* MISRA 15.7 - Empty else */
            }
        }
        
        /* Signal Request pending to be digested on normal Handling (DEP_REQ, DSL_REQ, RLS_REQ) */
        gNfcip.isReqPending = true;
 800bb38:	4b06      	ldr	r3, [pc, #24]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    }
    
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 800bb40:	4b04      	ldr	r3, [pc, #16]	@ (800bb54 <nfcipTargetHandleActivation+0x1f0>)
 800bb42:	220d      	movs	r2, #13
 800bb44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return ERR_NONE;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3718      	adds	r7, #24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	20000bb0 	.word	0x20000bb0

0800bb58 <rfalNfcDepATR>:


/*******************************************************************************/
ReturnCode rfalNfcDepATR( const rfalNfcDepAtrParam* param, rfalNfcDepAtrRes *atrRes, uint8_t* atrResLen )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b0c0      	sub	sp, #256	@ 0x100
 800bb5c:	af04      	add	r7, sp, #16
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
    uint8_t           msgIt;
    uint8_t           txBuf[RFAL_NFCDEP_ATRREQ_MAX_LEN];
    uint8_t           rxBuf[NFCIP_ATRRES_BUF_LEN];
    
    
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d005      	beq.n	800bb76 <rfalNfcDepATR+0x1e>
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <rfalNfcDepATR+0x1e>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d101      	bne.n	800bb7a <rfalNfcDepATR+0x22>
    {
        return ERR_PARAM;
 800bb76:	2307      	movs	r3, #7
 800bb78:	e0ba      	b.n	800bcf0 <rfalNfcDepATR+0x198>
    
    /*******************************************************************************/
    /* Configure NFC-DEP layer                                                     */
    /*******************************************************************************/
    
    cfg.did  = param->DID;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	7a5b      	ldrb	r3, [r3, #9]
 800bb7e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    cfg.nad  = param->NAD;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	7a9b      	ldrb	r3, [r3, #10]
 800bb86:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 800bb8a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bb8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    cfg.dFwt = RFAL_NFCDEP_MAX_FWT;
 800bb92:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bb96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    cfg.br   = param->BR;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	7b1b      	ldrb	r3, [r3, #12]
 800bb9e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    cfg.bs   = param->BS;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	7adb      	ldrb	r3, [r3, #11]
 800bba6:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    cfg.lr   = param->LR;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	7b5b      	ldrb	r3, [r3, #13]
 800bbae:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 800bbb2:	230e      	movs	r3, #14
 800bbb4:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0
    
    
    cfg.gbLen = param->GBLen;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	7d1b      	ldrb	r3, [r3, #20]
 800bbbc:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 800bbc0:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00a      	beq.n	800bbde <rfalNfcDepATR+0x86>
    {
        ST_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6919      	ldr	r1, [r3, #16]
 800bbcc:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800bbd6:	3312      	adds	r3, #18
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f005 fd0d 	bl	80115f8 <memcpy>
    }
    
    cfg.nfcidLen = param->nfcidLen;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	7a1b      	ldrb	r3, [r3, #8]
 800bbe2:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 800bbe6:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00a      	beq.n	800bc04 <rfalNfcDepATR+0xac>
    {
        ST_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6859      	ldr	r1, [r3, #4]
 800bbf2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800bbfc:	3307      	adds	r3, #7
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f005 fcfa 	bl	80115f8 <memcpy>
    }
    
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 800bc04:	2300      	movs	r3, #0
 800bc06:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
    cfg.oper     = param->operParam;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	785b      	ldrb	r3, [r3, #1]
 800bc0e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
    cfg.commMode = param->commMode;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d

    rfalNfcDepInitialize();
 800bc1a:	f7ff fdaf 	bl	800b77c <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 800bc1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7ff fc38 	bl	800b498 <nfcipConfig>
    
    /*******************************************************************************/
    /* Send ATR_REQ                                                                */
    /*******************************************************************************/
    
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 800bc28:	4b33      	ldr	r3, [pc, #204]	@ (800bcf8 <rfalNfcDepATR+0x1a0>)
 800bc2a:	785b      	ldrb	r3, [r3, #1]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d101      	bne.n	800bc34 <rfalNfcDepATR+0xdc>
 800bc30:	4a32      	ldr	r2, [pc, #200]	@ (800bcfc <rfalNfcDepATR+0x1a4>)
 800bc32:	e000      	b.n	800bc36 <rfalNfcDepATR+0xde>
 800bc34:	4a32      	ldr	r2, [pc, #200]	@ (800bd00 <rfalNfcDepATR+0x1a8>)
 800bc36:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800bc3a:	f107 039a 	add.w	r3, r7, #154	@ 0x9a
 800bc3e:	9303      	str	r3, [sp, #12]
 800bc40:	2341      	movs	r3, #65	@ 0x41
 800bc42:	9302      	str	r3, [sp, #8]
 800bc44:	f107 0314 	add.w	r3, r7, #20
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	2000      	movs	r0, #0
 800bc52:	f7fe facb 	bl	800a1ec <nfcipTxRx>
 800bc56:	4603      	mov	r3, r0
 800bc58:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 800bc5c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d002      	beq.n	800bc6a <rfalNfcDepATR+0x112>
 800bc64:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 800bc68:	e042      	b.n	800bcf0 <rfalNfcDepATR+0x198>
    
    
    /*******************************************************************************/
    /* ATR sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 800bc70:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	f887 20ed 	strb.w	r2, [r7, #237]	@ 0xed
 800bc7a:	33f0      	adds	r3, #240	@ 0xf0
 800bc7c:	443b      	add	r3, r7
 800bc7e:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 800bc82:	3b01      	subs	r3, #1
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 800bc8a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800bc8e:	2b10      	cmp	r3, #16
 800bc90:	d903      	bls.n	800bc9a <rfalNfcDepATR+0x142>
 800bc92:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800bc96:	2b40      	cmp	r3, #64	@ 0x40
 800bc98:	d901      	bls.n	800bc9e <rfalNfcDepATR+0x146>
    {
        return ERR_PROTO;
 800bc9a:	230b      	movs	r3, #11
 800bc9c:	e028      	b.n	800bcf0 <rfalNfcDepATR+0x198>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 800bc9e:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	f887 20ed 	strb.w	r2, [r7, #237]	@ 0xed
 800bca8:	33f0      	adds	r3, #240	@ 0xf0
 800bcaa:	443b      	add	r3, r7
 800bcac:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 800bcb0:	2bd5      	cmp	r3, #213	@ 0xd5
 800bcb2:	d001      	beq.n	800bcb8 <rfalNfcDepATR+0x160>
    {
        return ERR_PROTO;
 800bcb4:	230b      	movs	r3, #11
 800bcb6:	e01b      	b.n	800bcf0 <rfalNfcDepATR+0x198>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 800bcb8:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 800bcbc:	1c5a      	adds	r2, r3, #1
 800bcbe:	f887 20ed 	strb.w	r2, [r7, #237]	@ 0xed
 800bcc2:	33f0      	adds	r3, #240	@ 0xf0
 800bcc4:	443b      	add	r3, r7
 800bcc6:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d001      	beq.n	800bcd2 <rfalNfcDepATR+0x17a>
    {
        return ERR_PROTO;
 800bcce:	230b      	movs	r3, #11
 800bcd0:	e00e      	b.n	800bcf0 <rfalNfcDepATR+0x198>
    }
    
    ST_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 800bcd2:	f107 0314 	add.w	r3, r7, #20
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 800bcdc:	4619      	mov	r1, r3
 800bcde:	68b8      	ldr	r0, [r7, #8]
 800bce0:	f005 fc8a 	bl	80115f8 <memcpy>
    *atrResLen = (uint8_t)rxLen;
 800bce4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800bce8:	b2da      	uxtb	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	37f0      	adds	r7, #240	@ 0xf0
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	20000bb0 	.word	0x20000bb0
 800bcfc:	00200201 	.word	0x00200201
 800bd00:	01000201 	.word	0x01000201

0800bd04 <rfalNfcDepPSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepPSL( uint8_t BRS, uint8_t FSL )
{
 800bd04:	b590      	push	{r4, r7, lr}
 800bd06:	b08b      	sub	sp, #44	@ 0x2c
 800bd08:	af04      	add	r7, sp, #16
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	460a      	mov	r2, r1
 800bd0e:	71fb      	strb	r3, [r7, #7]
 800bd10:	4613      	mov	r3, r2
 800bd12:	71bb      	strb	r3, [r7, #6]
    uint16_t   rxLen;
    uint8_t    msgIt;
    uint8_t    txBuf[NFCIP_PSLREQ_LEN + NFCIP_PSLPAY_LEN];
    uint8_t    rxBuf[NFCIP_PSLRES_LEN];
    
    msgIt = NFCIP_PSLREQ_LEN;
 800bd14:	2304      	movs	r3, #4
 800bd16:	75fb      	strb	r3, [r7, #23]
    
    txBuf[msgIt++] = BRS;
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	75fa      	strb	r2, [r7, #23]
 800bd1e:	3318      	adds	r3, #24
 800bd20:	443b      	add	r3, r7
 800bd22:	79fa      	ldrb	r2, [r7, #7]
 800bd24:	f803 2c0c 	strb.w	r2, [r3, #-12]
    txBuf[msgIt++] = FSL;
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	75fa      	strb	r2, [r7, #23]
 800bd2e:	3318      	adds	r3, #24
 800bd30:	443b      	add	r3, r7
 800bd32:	79ba      	ldrb	r2, [r7, #6]
 800bd34:	f803 2c0c 	strb.w	r2, [r3, #-12]
    
    /*******************************************************************************/
    /* Send PSL REQ and wait for response                                          */
    /*******************************************************************************/
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 800bd38:	4b2d      	ldr	r3, [pc, #180]	@ (800bdf0 <rfalNfcDepPSL+0xec>)
 800bd3a:	785b      	ldrb	r3, [r3, #1]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d101      	bne.n	800bd44 <rfalNfcDepPSL+0x40>
 800bd40:	482c      	ldr	r0, [pc, #176]	@ (800bdf4 <rfalNfcDepPSL+0xf0>)
 800bd42:	e000      	b.n	800bd46 <rfalNfcDepPSL+0x42>
 800bd44:	482c      	ldr	r0, [pc, #176]	@ (800bdf8 <rfalNfcDepPSL+0xf4>)
 800bd46:	7dfb      	ldrb	r3, [r7, #23]
 800bd48:	3b04      	subs	r3, #4
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	f107 020c 	add.w	r2, r7, #12
 800bd50:	1d14      	adds	r4, r2, #4
 800bd52:	f107 010c 	add.w	r1, r7, #12
 800bd56:	f107 0212 	add.w	r2, r7, #18
 800bd5a:	9203      	str	r2, [sp, #12]
 800bd5c:	2204      	movs	r2, #4
 800bd5e:	9202      	str	r2, [sp, #8]
 800bd60:	f107 0208 	add.w	r2, r7, #8
 800bd64:	9201      	str	r2, [sp, #4]
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	4623      	mov	r3, r4
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	2004      	movs	r0, #4
 800bd6e:	f7fe fa3d 	bl	800a1ec <nfcipTxRx>
 800bd72:	4603      	mov	r3, r0
 800bd74:	82bb      	strh	r3, [r7, #20]
 800bd76:	8abb      	ldrh	r3, [r7, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d001      	beq.n	800bd80 <rfalNfcDepPSL+0x7c>
 800bd7c:	8abb      	ldrh	r3, [r7, #20]
 800bd7e:	e032      	b.n	800bde6 <rfalNfcDepPSL+0xe2>
    
    
    /*******************************************************************************/
    /* PSL sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	75fb      	strb	r3, [r7, #23]
    rxLen = (uint16_t)(rxBuf[msgIt++]);                /* use LEN byte                   */
 800bd84:	7dfb      	ldrb	r3, [r7, #23]
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	75fa      	strb	r2, [r7, #23]
 800bd8a:	3318      	adds	r3, #24
 800bd8c:	443b      	add	r3, r7
 800bd8e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800bd92:	827b      	strh	r3, [r7, #18]
        
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 800bd94:	8a7b      	ldrh	r3, [r7, #18]
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	d801      	bhi.n	800bd9e <rfalNfcDepPSL+0x9a>
    {
        return ERR_PROTO;
 800bd9a:	230b      	movs	r3, #11
 800bd9c:	e023      	b.n	800bde6 <rfalNfcDepPSL+0xe2>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	1c5a      	adds	r2, r3, #1
 800bda2:	75fa      	strb	r2, [r7, #23]
 800bda4:	3318      	adds	r3, #24
 800bda6:	443b      	add	r3, r7
 800bda8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800bdac:	2bd5      	cmp	r3, #213	@ 0xd5
 800bdae:	d001      	beq.n	800bdb4 <rfalNfcDepPSL+0xb0>
    {
        return ERR_PROTO;
 800bdb0:	230b      	movs	r3, #11
 800bdb2:	e018      	b.n	800bde6 <rfalNfcDepPSL+0xe2>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 800bdb4:	7dfb      	ldrb	r3, [r7, #23]
 800bdb6:	1c5a      	adds	r2, r3, #1
 800bdb8:	75fa      	strb	r2, [r7, #23]
 800bdba:	3318      	adds	r3, #24
 800bdbc:	443b      	add	r3, r7
 800bdbe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800bdc2:	2b05      	cmp	r3, #5
 800bdc4:	d001      	beq.n	800bdca <rfalNfcDepPSL+0xc6>
    {
        return ERR_PROTO;
 800bdc6:	230b      	movs	r3, #11
 800bdc8:	e00d      	b.n	800bde6 <rfalNfcDepPSL+0xe2>
    }
    
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 800bdca:	7dfb      	ldrb	r3, [r7, #23]
 800bdcc:	1c5a      	adds	r2, r3, #1
 800bdce:	75fa      	strb	r2, [r7, #23]
 800bdd0:	3318      	adds	r3, #24
 800bdd2:	443b      	add	r3, r7
 800bdd4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800bdd8:	4b05      	ldr	r3, [pc, #20]	@ (800bdf0 <rfalNfcDepPSL+0xec>)
 800bdda:	78db      	ldrb	r3, [r3, #3]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d001      	beq.n	800bde4 <rfalNfcDepPSL+0xe0>
    {
        return ERR_PROTO;
 800bde0:	230b      	movs	r3, #11
 800bde2:	e000      	b.n	800bde6 <rfalNfcDepPSL+0xe2>
    }
    
    return ERR_NONE;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	371c      	adds	r7, #28
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd90      	pop	{r4, r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	20000bb0 	.word	0x20000bb0
 800bdf4:	00200201 	.word	0x00200201
 800bdf8:	01000201 	.word	0x01000201

0800bdfc <rfalNfcDepRLS>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepRLS( void )
{   
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08a      	sub	sp, #40	@ 0x28
 800be00:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_RLSREQ_LEN];
    uint8_t    rxBuf[NFCIP_RLSRES_LEN];    
    uint8_t    rxMsgIt;
    uint16_t   rxLen = 0;
 800be02:	2300      	movs	r3, #0
 800be04:	80fb      	strh	r3, [r7, #6]
    
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 800be06:	4b2e      	ldr	r3, [pc, #184]	@ (800bec0 <rfalNfcDepRLS+0xc4>)
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d101      	bne.n	800be12 <rfalNfcDepRLS+0x16>
    {
        return ERR_NONE;
 800be0e:	2300      	movs	r3, #0
 800be10:	e051      	b.n	800beb6 <rfalNfcDepRLS+0xba>
    }
        
    /* Repeating a RLS REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, RFAL_NFCDEP_ATRRES_MAX_LEN, &rxLen  ) );
 800be12:	4b2b      	ldr	r3, [pc, #172]	@ (800bec0 <rfalNfcDepRLS+0xc4>)
 800be14:	785b      	ldrb	r3, [r3, #1]
 800be16:	2b01      	cmp	r3, #1
 800be18:	d101      	bne.n	800be1e <rfalNfcDepRLS+0x22>
 800be1a:	4a2a      	ldr	r2, [pc, #168]	@ (800bec4 <rfalNfcDepRLS+0xc8>)
 800be1c:	e000      	b.n	800be20 <rfalNfcDepRLS+0x24>
 800be1e:	4a2a      	ldr	r2, [pc, #168]	@ (800bec8 <rfalNfcDepRLS+0xcc>)
 800be20:	f107 010c 	add.w	r1, r7, #12
 800be24:	1dbb      	adds	r3, r7, #6
 800be26:	9303      	str	r3, [sp, #12]
 800be28:	2340      	movs	r3, #64	@ 0x40
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	f107 0308 	add.w	r3, r7, #8
 800be30:	9301      	str	r3, [sp, #4]
 800be32:	2300      	movs	r3, #0
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	2300      	movs	r3, #0
 800be38:	200a      	movs	r0, #10
 800be3a:	f7fe f9d7 	bl	800a1ec <nfcipTxRx>
 800be3e:	4603      	mov	r3, r0
 800be40:	82fb      	strh	r3, [r7, #22]
 800be42:	8afb      	ldrh	r3, [r7, #22]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d001      	beq.n	800be4c <rfalNfcDepRLS+0x50>
 800be48:	8afb      	ldrh	r3, [r7, #22]
 800be4a:	e034      	b.n	800beb6 <rfalNfcDepRLS+0xba>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 800be4c:	2300      	movs	r3, #0
 800be4e:	757b      	strb	r3, [r7, #21]
       
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 800be50:	7d7b      	ldrb	r3, [r7, #21]
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	757a      	strb	r2, [r7, #21]
 800be56:	3318      	adds	r3, #24
 800be58:	443b      	add	r3, r7
 800be5a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d801      	bhi.n	800be66 <rfalNfcDepRLS+0x6a>
    {
        return ERR_PROTO;
 800be62:	230b      	movs	r3, #11
 800be64:	e027      	b.n	800beb6 <rfalNfcDepRLS+0xba>
    }
        
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 800be66:	7d7b      	ldrb	r3, [r7, #21]
 800be68:	1c5a      	adds	r2, r3, #1
 800be6a:	757a      	strb	r2, [r7, #21]
 800be6c:	3318      	adds	r3, #24
 800be6e:	443b      	add	r3, r7
 800be70:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800be74:	2bd5      	cmp	r3, #213	@ 0xd5
 800be76:	d001      	beq.n	800be7c <rfalNfcDepRLS+0x80>
    {
        return ERR_PROTO;
 800be78:	230b      	movs	r3, #11
 800be7a:	e01c      	b.n	800beb6 <rfalNfcDepRLS+0xba>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 800be7c:	7d7b      	ldrb	r3, [r7, #21]
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	757a      	strb	r2, [r7, #21]
 800be82:	3318      	adds	r3, #24
 800be84:	443b      	add	r3, r7
 800be86:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800be8a:	2b0b      	cmp	r3, #11
 800be8c:	d001      	beq.n	800be92 <rfalNfcDepRLS+0x96>
    {
        return ERR_PROTO;
 800be8e:	230b      	movs	r3, #11
 800be90:	e011      	b.n	800beb6 <rfalNfcDepRLS+0xba>
    }
     
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800be92:	4b0b      	ldr	r3, [pc, #44]	@ (800bec0 <rfalNfcDepRLS+0xc4>)
 800be94:	78db      	ldrb	r3, [r3, #3]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00c      	beq.n	800beb4 <rfalNfcDepRLS+0xb8>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 800be9a:	7d7b      	ldrb	r3, [r7, #21]
 800be9c:	1c5a      	adds	r2, r3, #1
 800be9e:	757a      	strb	r2, [r7, #21]
 800bea0:	3318      	adds	r3, #24
 800bea2:	443b      	add	r3, r7
 800bea4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800bea8:	4b05      	ldr	r3, [pc, #20]	@ (800bec0 <rfalNfcDepRLS+0xc4>)
 800beaa:	78db      	ldrb	r3, [r3, #3]
 800beac:	429a      	cmp	r2, r3
 800beae:	d001      	beq.n	800beb4 <rfalNfcDepRLS+0xb8>
        {
            return ERR_PROTO;
 800beb0:	230b      	movs	r3, #11
 800beb2:	e000      	b.n	800beb6 <rfalNfcDepRLS+0xba>
        }
    }
    
    return ERR_NONE;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3718      	adds	r7, #24
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20000bb0 	.word	0x20000bb0
 800bec4:	00200201 	.word	0x00200201
 800bec8:	01000201 	.word	0x01000201

0800becc <rfalNfcDepInitiatorHandleActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepInitiatorHandleActivation( rfalNfcDepAtrParam* param, rfalBitRate desiredBR, rfalNfcDepDevice* nfcDepDev )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	460b      	mov	r3, r1
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	72fb      	strb	r3, [r7, #11]
    uint8_t    maxRetyrs;
    uint8_t    PSL_BRS;
    uint8_t    PSL_FSL;
    bool       sendPSL;
    
    if( (param == NULL) || (nfcDepDev == NULL) )
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <rfalNfcDepInitiatorHandleActivation+0x1a>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <rfalNfcDepInitiatorHandleActivation+0x1e>
    {
        return ERR_PARAM;
 800bee6:	2307      	movs	r3, #7
 800bee8:	e0db      	b.n	800c0a2 <rfalNfcDepInitiatorHandleActivation+0x1d6>
    }
    
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2200      	movs	r2, #0
 800beee:	729a      	strb	r2, [r3, #10]
    maxRetyrs  = NFCIP_ATR_RETRY_MAX;
 800bef0:	2302      	movs	r3, #2
 800bef2:	75fb      	strb	r3, [r7, #23]
    /*******************************************************************************/
    /* Send ATR REQ and wait for response                                          */
    /*******************************************************************************/
    do{  /* Upon transmission error ATR REQ should be retried */
        
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 800bef4:	6879      	ldr	r1, [r7, #4]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	3341      	adds	r3, #65	@ 0x41
 800befa:	461a      	mov	r2, r3
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f7ff fe2b 	bl	800bb58 <rfalNfcDepATR>
 800bf02:	4603      	mov	r3, r0
 800bf04:	827b      	strh	r3, [r7, #18]
         
         if( nfcipIsTransmissionError(ret) )
 800bf06:	8a7b      	ldrh	r3, [r7, #18]
 800bf08:	2b15      	cmp	r3, #21
 800bf0a:	d005      	beq.n	800bf18 <rfalNfcDepInitiatorHandleActivation+0x4c>
 800bf0c:	8a7b      	ldrh	r3, [r7, #18]
 800bf0e:	2b09      	cmp	r3, #9
 800bf10:	d002      	beq.n	800bf18 <rfalNfcDepInitiatorHandleActivation+0x4c>
 800bf12:	8a7b      	ldrh	r3, [r7, #18]
 800bf14:	2b1b      	cmp	r3, #27
 800bf16:	d106      	bne.n	800bf26 <rfalNfcDepInitiatorHandleActivation+0x5a>
         {
             continue;
 800bf18:	bf00      	nop
         }
         break;
    }
    while( (maxRetyrs--) != 0U );
 800bf1a:	7dfb      	ldrb	r3, [r7, #23]
 800bf1c:	1e5a      	subs	r2, r3, #1
 800bf1e:	75fa      	strb	r2, [r7, #23]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1e7      	bne.n	800bef4 <rfalNfcDepInitiatorHandleActivation+0x28>
 800bf24:	e000      	b.n	800bf28 <rfalNfcDepInitiatorHandleActivation+0x5c>
         break;
 800bf26:	bf00      	nop
    
    if( ret != ERR_NONE )
 800bf28:	8a7b      	ldrh	r3, [r7, #18]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <rfalNfcDepInitiatorHandleActivation+0x66>
    {
        return ret;
 800bf2e:	8a7b      	ldrh	r3, [r7, #18]
 800bf30:	e0b7      	b.n	800c0a2 <rfalNfcDepInitiatorHandleActivation+0x1d6>
    }
    
    /*******************************************************************************/
    /* Compute NFC-DEP device with ATR_RES                                         */
    /*******************************************************************************/
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bf38:	3b11      	subs	r3, #17
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	7b1a      	ldrb	r2, [r3, #12]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	7c1b      	ldrb	r3, [r3, #16]
 800bf58:	091b      	lsrs	r3, r3, #4
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f003 0303 	and.w	r3, r3, #3
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bf6e:	3301      	adds	r3, #1
 800bf70:	019b      	lsls	r3, r3, #6
 800bf72:	2bfd      	cmp	r3, #253	@ 0xfd
 800bf74:	d807      	bhi.n	800bf86 <rfalNfcDepInitiatorHandleActivation+0xba>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	019b      	lsls	r3, r3, #6
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	e000      	b.n	800bf88 <rfalNfcDepInitiatorHandleActivation+0xbc>
 800bf86:	22fe      	movs	r2, #254	@ 0xfe
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	7bdb      	ldrb	r3, [r3, #15]
 800bf92:	f003 030f 	and.w	r3, r3, #15
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 f883 	bl	800c0b0 <rfalNfcDepCalculateRWT>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	649a      	str	r2, [r3, #72]	@ 0x48
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	220c      	movs	r2, #12
 800bfb4:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3355      	adds	r3, #85	@ 0x55
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4610      	mov	r0, r2
 800bfc4:	f002 fc82 	bl	800e8cc <rfalGetBitRate>
    
    
    /*******************************************************************************/
    /* Check if a PSL needs to be sent                                                */
    /*******************************************************************************/
    sendPSL = false;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	757b      	strb	r3, [r7, #21]
    PSL_BRS = rfalNfcDepDx2BRS( nfcDepDev->info.DSI );  /* Set current bit rate divisor on both directions  */
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800bfd2:	00db      	lsls	r3, r3, #3
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800bfe2:	f003 0307 	and.w	r3, r3, #7
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	75bb      	strb	r3, [r7, #22]
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bff2:	747b      	strb	r3, [r7, #17]
    
    
    /*******************************************************************************/
    /* Check Baud rates                                                            */
    /*******************************************************************************/
    if( nfcDepDev->info.DSI != desiredBR )    /* if desired BR is different    */
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800bffa:	7afa      	ldrb	r2, [r7, #11]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d018      	beq.n	800c032 <rfalNfcDepInitiatorHandleActivation+0x166>
    {
       /* || (target->brt != RFAL_NFCDEP_Bx_NO_HIGH_BR) || (target->bst != RFAL_NFCDEP_Bx_NO_HIGH_BR)  */  /* if target supports higher BR, must send PSL? */
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	7b99      	ldrb	r1, [r3, #14]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	7b5a      	ldrb	r2, [r3, #13]
 800c008:	7afb      	ldrb	r3, [r7, #11]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fe f8ca 	bl	800a1a4 <nfcipDxIsSupported>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00d      	beq.n	800c032 <rfalNfcDepInitiatorHandleActivation+0x166>
        {
            sendPSL = true;
 800c016:	2301      	movs	r3, #1
 800c018:	757b      	strb	r3, [r7, #21]
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 800c01a:	7afb      	ldrb	r3, [r7, #11]
 800c01c:	00db      	lsls	r3, r3, #3
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c024:	b2da      	uxtb	r2, r3
 800c026:	7afb      	ldrb	r3, [r7, #11]
 800c028:	f003 0307 	and.w	r3, r3, #7
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	4313      	orrs	r3, r2
 800c030:	75bb      	strb	r3, [r7, #22]
        }
    }

    
    /*******************************************************************************/
    if( sendPSL )
 800c032:	7d7b      	ldrb	r3, [r7, #21]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d033      	beq.n	800c0a0 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    {
        /*******************************************************************************/
        /* Send PSL REQ and wait for response                                          */
        /*******************************************************************************/
        EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 800c038:	7c7a      	ldrb	r2, [r7, #17]
 800c03a:	7dbb      	ldrb	r3, [r7, #22]
 800c03c:	4611      	mov	r1, r2
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff fe60 	bl	800bd04 <rfalNfcDepPSL>
 800c044:	4603      	mov	r3, r0
 800c046:	827b      	strh	r3, [r7, #18]
 800c048:	8a7b      	ldrh	r3, [r7, #18]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <rfalNfcDepInitiatorHandleActivation+0x186>
 800c04e:	8a7b      	ldrh	r3, [r7, #18]
 800c050:	e027      	b.n	800c0a2 <rfalNfcDepInitiatorHandleActivation+0x1d6>
        
        /* Check if bit rate has been changed */
        if( nfcDepDev->info.DSI != desiredBR )
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800c058:	7afa      	ldrb	r2, [r7, #11]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d01e      	beq.n	800c09c <rfalNfcDepInitiatorHandleActivation+0x1d0>
        {
            /* Check if device was in Passive NFC-A and went to higher bit rates, use NFC-F */
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800c064:	2b00      	cmp	r3, #0
 800c066:	d107      	bne.n	800c078 <rfalNfcDepInitiatorHandleActivation+0x1ac>
 800c068:	4b10      	ldr	r3, [pc, #64]	@ (800c0ac <rfalNfcDepInitiatorHandleActivation+0x1e0>)
 800c06a:	785b      	ldrb	r3, [r3, #1]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d103      	bne.n	800c078 <rfalNfcDepInitiatorHandleActivation+0x1ac>
            {
                
            #if RFAL_FEATURE_NFCF 
                /* If Passive initialize NFC-F module */
                rfalNfcfPollerInitialize( desiredBR );
 800c070:	7afb      	ldrb	r3, [r7, #11]
 800c072:	4618      	mov	r0, r3
 800c074:	f001 fa6e 	bl	800d554 <rfalNfcfPollerInitialize>
                return ERR_NOTSUPP;
            #endif /* RFAL_FEATURE_NFCF */
                
            }
            
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	7afa      	ldrb	r2, [r7, #11]
 800c07c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	7afa      	ldrb	r2, [r7, #11]
 800c084:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c094:	4619      	mov	r1, r3
 800c096:	4610      	mov	r0, r2
 800c098:	f002 f9cc 	bl	800e434 <rfalSetBitRate>
        }
        
        
        return ERR_NONE;   /* PSL has been sent    */
 800c09c:	2300      	movs	r3, #0
 800c09e:	e000      	b.n	800c0a2 <rfalNfcDepInitiatorHandleActivation+0x1d6>
    }
    
    return ERR_NONE;       /* No PSL has been sent */
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3718      	adds	r7, #24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20000bb0 	.word	0x20000bb0

0800c0b0 <rfalNfcDepCalculateRWT>:


/*******************************************************************************/
uint32_t rfalNfcDepCalculateRWT( uint8_t wt )
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	71fb      	strb	r3, [r7, #7]
    /* Digital 1.0  14.6.3.8  &  Digital 1.1  16.6.3.9     */
    /* Digital 1.1  16.6.3.9 treat all RFU values as WT=14 */
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 800c0ba:	79fb      	ldrb	r3, [r7, #7]
 800c0bc:	2b0e      	cmp	r3, #14
 800c0be:	bf28      	it	cs
 800c0c0:	230e      	movcs	r3, #14
 800c0c2:	73fb      	strb	r3, [r7, #15]
        
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
 800c0c6:	f003 030f 	and.w	r3, r3, #15
 800c0ca:	330c      	adds	r3, #12
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	fa02 f303 	lsl.w	r3, r2, r3
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3714      	adds	r7, #20
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
	...

0800c0e0 <nfcipDataTx>:



/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
 800c0e0:	b590      	push	{r4, r7, lr}
 800c0e2:	b089      	sub	sp, #36	@ 0x24
 800c0e4:	af04      	add	r7, sp, #16
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	607a      	str	r2, [r7, #4]
 800c0ec:	817b      	strh	r3, [r7, #10]
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 800c0ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c11c <nfcipDataTx+0x3c>)
 800c0f0:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800c0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c11c <nfcipDataTx+0x3c>)
 800c0f4:	f8b3 406a 	ldrh.w	r4, [r3, #106]	@ 0x6a
 800c0f8:	4b08      	ldr	r3, [pc, #32]	@ (800c11c <nfcipDataTx+0x3c>)
 800c0fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0fc:	8979      	ldrh	r1, [r7, #10]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	9202      	str	r2, [sp, #8]
 800c102:	2204      	movs	r2, #4
 800c104:	9201      	str	r2, [sp, #4]
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	4623      	mov	r3, r4
 800c10a:	4602      	mov	r2, r0
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f002 fe3b 	bl	800ed88 <rfalTransceiveBlockingTx>
 800c112:	4603      	mov	r3, r0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3714      	adds	r7, #20
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd90      	pop	{r4, r7, pc}
 800c11c:	20000bb0 	.word	0x20000bb0

0800c120 <nfcipDataRx>:


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	4603      	mov	r3, r0
 800c128:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 800c12a:	79fb      	ldrb	r3, [r7, #7]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d004      	beq.n	800c13a <nfcipDataRx+0x1a>
    {
        ret = rfalTransceiveBlockingRx();
 800c130:	f002 fe76 	bl	800ee20 <rfalTransceiveBlockingRx>
 800c134:	4603      	mov	r3, r0
 800c136:	81fb      	strh	r3, [r7, #14]
 800c138:	e003      	b.n	800c142 <nfcipDataRx+0x22>
    }
    else
    {
        ret = rfalGetTransceiveStatus();
 800c13a:	f002 fedb 	bl	800eef4 <rfalGetTransceiveStatus>
 800c13e:	4603      	mov	r3, r0
 800c140:	81fb      	strh	r3, [r7, #14]
    }
    
    if( ret != ERR_BUSY )
 800c142:	89fb      	ldrh	r3, [r7, #14]
 800c144:	2b02      	cmp	r3, #2
 800c146:	d027      	beq.n	800c198 <nfcipDataRx+0x78>
    {
        if( gNfcip.rxRcvdLen != NULL )
 800c148:	4b16      	ldr	r3, [pc, #88]	@ (800c1a4 <nfcipDataRx+0x84>)
 800c14a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d023      	beq.n	800c198 <nfcipDataRx+0x78>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 800c150:	4b14      	ldr	r3, [pc, #80]	@ (800c1a4 <nfcipDataRx+0x84>)
 800c152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	3307      	adds	r3, #7
 800c158:	08da      	lsrs	r2, r3, #3
 800c15a:	4b12      	ldr	r3, [pc, #72]	@ (800c1a4 <nfcipDataRx+0x84>)
 800c15c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c15e:	b292      	uxth	r2, r2
 800c160:	801a      	strh	r2, [r3, #0]
                        
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 800c162:	89fb      	ldrh	r3, [r7, #14]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d117      	bne.n	800c198 <nfcipDataRx+0x78>
 800c168:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a4 <nfcipDataRx+0x84>)
 800c16a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d013      	beq.n	800c198 <nfcipDataRx+0x78>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 800c170:	4b0c      	ldr	r3, [pc, #48]	@ (800c1a4 <nfcipDataRx+0x84>)
 800c172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c174:	881b      	ldrh	r3, [r3, #0]
 800c176:	4a0b      	ldr	r2, [pc, #44]	@ (800c1a4 <nfcipDataRx+0x84>)
 800c178:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c17a:	7812      	ldrb	r2, [r2, #0]
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d109      	bne.n	800c194 <nfcipDataRx+0x74>
 800c180:	4b08      	ldr	r3, [pc, #32]	@ (800c1a4 <nfcipDataRx+0x84>)
 800c182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	2b02      	cmp	r3, #2
 800c188:	d904      	bls.n	800c194 <nfcipDataRx+0x74>
 800c18a:	4b06      	ldr	r3, [pc, #24]	@ (800c1a4 <nfcipDataRx+0x84>)
 800c18c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c18e:	881b      	ldrh	r3, [r3, #0]
 800c190:	2bff      	cmp	r3, #255	@ 0xff
 800c192:	d901      	bls.n	800c198 <nfcipDataRx+0x78>
                {
                    return ERR_FRAMING;
 800c194:	2309      	movs	r3, #9
 800c196:	e000      	b.n	800c19a <nfcipDataRx+0x7a>
                }
            }
        }
    }
    
    return ret;
 800c198:	89fb      	ldrh	r3, [r7, #14]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20000bb0 	.word	0x20000bb0

0800c1a8 <rfalNfcDepListenStartActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenStartActivation( const rfalNfcDepTargetParam *param, const uint8_t *atrReq, uint16_t atrReqLength, rfalNfcDepListenActvParam rxParam )
{
 800c1a8:	b082      	sub	sp, #8
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b09c      	sub	sp, #112	@ 0x70
 800c1ae:	af02      	add	r7, sp, #8
 800c1b0:	60f8      	str	r0, [r7, #12]
 800c1b2:	60b9      	str	r1, [r7, #8]
 800c1b4:	677b      	str	r3, [r7, #116]	@ 0x74
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	80fb      	strh	r3, [r7, #6]
    ReturnCode        ret;
    rfalNfcDepConfigs cfg;
    
    
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d005      	beq.n	800c1cc <rfalNfcDepListenStartActivation+0x24>
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d002      	beq.n	800c1cc <rfalNfcDepListenStartActivation+0x24>
 800c1c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d101      	bne.n	800c1d0 <rfalNfcDepListenStartActivation+0x28>
    {
        return ERR_PARAM;
 800c1cc:	2307      	movs	r3, #7
 800c1ce:	e0f4      	b.n	800c3ba <rfalNfcDepListenStartActivation+0x212>
    }
    
    
    /*******************************************************************************/
    /*  Check whether is a valid ATR_REQ Compute NFC-DEP device                    */
    if( !rfalNfcDepIsAtrReq( atrReq, atrReqLength, NULL ) )
 800c1d0:	88fb      	ldrh	r3, [r7, #6]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	68b8      	ldr	r0, [r7, #8]
 800c1d8:	f7ff fb8e 	bl	800b8f8 <rfalNfcDepIsAtrReq>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	f083 0301 	eor.w	r3, r3, #1
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <rfalNfcDepListenStartActivation+0x44>
    {
        return ERR_PARAM;
 800c1e8:	2307      	movs	r3, #7
 800c1ea:	e0e6      	b.n	800c3ba <rfalNfcDepListenStartActivation+0x212>
    }
    
    rxParam.nfcDepDev->activation.Initiator.ATR_REQLen = (uint8_t)atrReqLength;                   /* nfcipIsAtrReq() is already checking Min and Max buffer lengths */ 
 800c1ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c1f0:	88fa      	ldrh	r2, [r7, #6]
 800c1f2:	b2d2      	uxtb	r2, r2
 800c1f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    if( atrReqLength > 0U )                                                                       /* MISRA 21.18 */
 800c1f8:	88fb      	ldrh	r3, [r7, #6]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d007      	beq.n	800c20e <rfalNfcDepListenStartActivation+0x66>
    {
        ST_MEMCPY( (uint8_t*)&rxParam.nfcDepDev->activation.Initiator.ATR_REQ, atrReq, atrReqLength );
 800c1fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c202:	4618      	mov	r0, r3
 800c204:	88fb      	ldrh	r3, [r7, #6]
 800c206:	461a      	mov	r2, r3
 800c208:	68b9      	ldr	r1, [r7, #8]
 800c20a:	f005 f9f5 	bl	80115f8 <memcpy>
    }        
    
    rxParam.nfcDepDev->info.GBLen = (uint8_t)(atrReqLength - RFAL_NFCDEP_ATRREQ_MIN_LEN);
 800c20e:	88fb      	ldrh	r3, [r7, #6]
 800c210:	b2da      	uxtb	r2, r3
 800c212:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c216:	3a10      	subs	r2, #16
 800c218:	b2d2      	uxtb	r2, r2
 800c21a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    rxParam.nfcDepDev->info.DID   = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800c21e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c222:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c226:	7b12      	ldrb	r2, [r2, #12]
 800c228:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    rxParam.nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                        /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 800c22c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c230:	2200      	movs	r2, #0
 800c232:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
    rxParam.nfcDepDev->info.LR    = rfalNfcDepPP2LR( rxParam.nfcDepDev->activation.Initiator.ATR_REQ.PPi );
 800c236:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c23a:	7bdb      	ldrb	r3, [r3, #15]
 800c23c:	091b      	lsrs	r3, r3, #4
 800c23e:	b2da      	uxtb	r2, r3
 800c240:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c244:	f002 0203 	and.w	r2, r2, #3
 800c248:	b2d2      	uxtb	r2, r2
 800c24a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    rxParam.nfcDepDev->info.FS    = rfalNfcDepLR2FS( rxParam.nfcDepDev->info.LR );
 800c24e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c252:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c256:	3301      	adds	r3, #1
 800c258:	019b      	lsls	r3, r3, #6
 800c25a:	2bfd      	cmp	r3, #253	@ 0xfd
 800c25c:	d808      	bhi.n	800c270 <rfalNfcDepListenStartActivation+0xc8>
 800c25e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c262:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c266:	3301      	adds	r3, #1
 800c268:	b29b      	uxth	r3, r3
 800c26a:	019b      	lsls	r3, r3, #6
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	e000      	b.n	800c272 <rfalNfcDepListenStartActivation+0xca>
 800c270:	22fe      	movs	r2, #254	@ 0xfe
 800c272:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c276:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    rxParam.nfcDepDev->info.WT    = 0;
 800c27a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 800c284:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c288:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c28c:	649a      	str	r2, [r3, #72]	@ 0x48
    rxParam.nfcDepDev->info.dFWT  = NFCIP_NO_FWT;
 800c28e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c292:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c296:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 800c298:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c29c:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800c2a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c2a4:	3355      	adds	r3, #85	@ 0x55
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	f002 fb0f 	bl	800e8cc <rfalGetBitRate>
    
    
    /* Store Device Info location, updated upon a PSL  */
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 800c2ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c2b2:	4a45      	ldr	r2, [pc, #276]	@ (800c3c8 <rfalNfcDepListenStartActivation+0x220>)
 800c2b4:	6793      	str	r3, [r2, #120]	@ 0x78
    
    
    /*******************************************************************************/
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800c2b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c2ba:	7b1b      	ldrb	r3, [r3, #12]
 800c2bc:	75fb      	strb	r3, [r7, #23]
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	763b      	strb	r3, [r7, #24]
    
    cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 800c2c2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c2c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 800c2c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c2cc:	663b      	str	r3, [r7, #96]	@ 0x60

    cfg.br = param->brt;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	7b1b      	ldrb	r3, [r3, #12]
 800c2d2:	76bb      	strb	r3, [r7, #26]
    cfg.bs = param->bst;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	7adb      	ldrb	r3, [r3, #11]
 800c2d8:	767b      	strb	r3, [r7, #25]
    
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	7b9b      	ldrb	r3, [r3, #14]
 800c2de:	091b      	lsrs	r3, r3, #4
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	f003 0303 	and.w	r3, r3, #3
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    
    cfg.gbLen = param->GBtLen;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c2f2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    if( cfg.gbLen > 0U )          /* MISRA 21.18 */
 800c2f6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00b      	beq.n	800c316 <rfalNfcDepListenStartActivation+0x16e>
    {
        ST_MEMCPY(cfg.gb, param->GBt, cfg.gbLen);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f103 010f 	add.w	r1, r3, #15
 800c304:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800c308:	461a      	mov	r2, r3
 800c30a:	f107 0314 	add.w	r3, r7, #20
 800c30e:	3312      	adds	r3, #18
 800c310:	4618      	mov	r0, r3
 800c312:	f005 f971 	bl	80115f8 <memcpy>
    }
    
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800c316:	230a      	movs	r3, #10
 800c318:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    ST_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	f107 031b 	add.w	r3, r7, #27
 800c324:	6810      	ldr	r0, [r2, #0]
 800c326:	6851      	ldr	r1, [r2, #4]
 800c328:	6018      	str	r0, [r3, #0]
 800c32a:	6059      	str	r1, [r3, #4]
 800c32c:	8912      	ldrh	r2, [r2, #8]
 800c32e:	811a      	strh	r2, [r3, #8]

    cfg.to = param->to;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	7b5b      	ldrb	r3, [r3, #13]
 800c334:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
    
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 800c338:	2301      	movs	r3, #1
 800c33a:	753b      	strb	r3, [r7, #20]
    cfg.oper     = param->operParam;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c342:	75bb      	strb	r3, [r7, #22]
    cfg.commMode = param->commMode;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	757b      	strb	r3, [r7, #21]

    rfalNfcDepInitialize();
 800c34a:	f7ff fa17 	bl	800b77c <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 800c34e:	f107 0314 	add.w	r3, r7, #20
 800c352:	4618      	mov	r0, r3
 800c354:	f7ff f8a0 	bl	800b498 <nfcipConfig>
        
    
    /*******************************************************************************/
    /*  Reply with ATR RES to Initiator                                            */
    /*******************************************************************************/
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 800c358:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c35a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3c8 <rfalNfcDepListenStartActivation+0x220>)
 800c35c:	6653      	str	r3, [r2, #100]	@ 0x64
    gNfcip.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 800c35e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3c8 <rfalNfcDepListenStartActivation+0x220>)
 800c360:	f240 1203 	movw	r2, #259	@ 0x103
 800c364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 800c368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c36a:	4a17      	ldr	r2, [pc, #92]	@ (800c3c8 <rfalNfcDepListenStartActivation+0x220>)
 800c36c:	66d3      	str	r3, [r2, #108]	@ 0x6c
    gNfcip.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 800c36e:	4b16      	ldr	r3, [pc, #88]	@ (800c3c8 <rfalNfcDepListenStartActivation+0x220>)
 800c370:	2205      	movs	r2, #5
 800c372:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    gNfcip.isChaining   = rxParam.isRxChaining;
 800c376:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c378:	4a13      	ldr	r2, [pc, #76]	@ (800c3c8 <rfalNfcDepListenStartActivation+0x220>)
 800c37a:	6753      	str	r3, [r2, #116]	@ 0x74
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 800c37c:	4b12      	ldr	r3, [pc, #72]	@ (800c3c8 <rfalNfcDepListenStartActivation+0x220>)
 800c37e:	2205      	movs	r2, #5
 800c380:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
   
    EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 800c384:	4b10      	ldr	r3, [pc, #64]	@ (800c3c8 <rfalNfcDepListenStartActivation+0x220>)
 800c386:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800c388:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	2300      	movs	r3, #0
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	2300      	movs	r3, #0
 800c394:	2200      	movs	r2, #0
 800c396:	2001      	movs	r0, #1
 800c398:	f7fe fef0 	bl	800b17c <nfcipTx>
 800c39c:	4603      	mov	r3, r0
 800c39e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c3a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <rfalNfcDepListenStartActivation+0x208>
 800c3aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c3ae:	e004      	b.n	800c3ba <rfalNfcDepListenStartActivation+0x212>
    
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
 800c3b0:	4b05      	ldr	r3, [pc, #20]	@ (800c3c8 <rfalNfcDepListenStartActivation+0x220>)
 800c3b2:	220b      	movs	r2, #11
 800c3b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    
    return ERR_NONE;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3768      	adds	r7, #104	@ 0x68
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3c4:	b002      	add	sp, #8
 800c3c6:	4770      	bx	lr
 800c3c8:	20000bb0 	.word	0x20000bb0

0800c3cc <rfalNfcDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenGetActivationStatus( void )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af04      	add	r7, sp, #16
    ReturnCode err;
    uint8_t    BRS;
    
    BRS = RFAL_NFCDEP_BRS_MAINTAIN;
 800c3d2:	23c0      	movs	r3, #192	@ 0xc0
 800c3d4:	717b      	strb	r3, [r7, #5]
    
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 800c3d6:	4b2f      	ldr	r3, [pc, #188]	@ (800c494 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800c3d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3da:	1d7a      	adds	r2, r7, #5
 800c3dc:	4611      	mov	r1, r2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fac0 	bl	800b964 <nfcipTargetHandleActivation>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	80fb      	strh	r3, [r7, #6]
    
    switch (err)
 800c3e8:	88fb      	ldrh	r3, [r7, #6]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d002      	beq.n	800c3f4 <rfalNfcDepListenGetActivationStatus+0x28>
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d048      	beq.n	800c484 <rfalNfcDepListenGetActivationStatus+0xb8>
 800c3f2:	e034      	b.n	800c45e <rfalNfcDepListenGetActivationStatus+0x92>
    {
        case ERR_NONE:
            
            if( BRS != RFAL_NFCDEP_BRS_MAINTAIN )
 800c3f4:	797b      	ldrb	r3, [r7, #5]
 800c3f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800c3f8:	d046      	beq.n	800c488 <rfalNfcDepListenGetActivationStatus+0xbc>
            {
                /* DSI codes the bit rate from Initiator to Target */
                /* DRI codes the bit rate from Target to Initiator */
                
                if( gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_ACTIVE )
 800c3fa:	4b26      	ldr	r3, [pc, #152]	@ (800c494 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800c3fc:	785b      	ldrb	r3, [r3, #1]
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d112      	bne.n	800c428 <rfalNfcDepListenGetActivationStatus+0x5c>
                {
                    EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 800c402:	4b24      	ldr	r3, [pc, #144]	@ (800c494 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800c404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c406:	f893 1055 	ldrb.w	r1, [r3, #85]	@ 0x55
 800c40a:	4b22      	ldr	r3, [pc, #136]	@ (800c494 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800c40c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c40e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800c412:	461a      	mov	r2, r3
 800c414:	200d      	movs	r0, #13
 800c416:	f001 fefb 	bl	800e210 <rfalSetMode>
 800c41a:	4603      	mov	r3, r0
 800c41c:	80fb      	strh	r3, [r7, #6]
 800c41e:	88fb      	ldrh	r3, [r7, #6]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d031      	beq.n	800c488 <rfalNfcDepListenGetActivationStatus+0xbc>
 800c424:	88fb      	ldrh	r3, [r7, #6]
 800c426:	e031      	b.n	800c48c <rfalNfcDepListenGetActivationStatus+0xc0>
                }
                else
                {
                    EXIT_ON_ERR( err, rfalSetMode( ((RFAL_BR_106 == gNfcip.nfcDepDev->info.DRI) ? RFAL_MODE_LISTEN_NFCA : RFAL_MODE_LISTEN_NFCF), gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 800c428:	4b1a      	ldr	r3, [pc, #104]	@ (800c494 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800c42a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c42c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c430:	2b00      	cmp	r3, #0
 800c432:	d101      	bne.n	800c438 <rfalNfcDepListenGetActivationStatus+0x6c>
 800c434:	200a      	movs	r0, #10
 800c436:	e000      	b.n	800c43a <rfalNfcDepListenGetActivationStatus+0x6e>
 800c438:	200c      	movs	r0, #12
 800c43a:	4b16      	ldr	r3, [pc, #88]	@ (800c494 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800c43c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c43e:	f893 1055 	ldrb.w	r1, [r3, #85]	@ 0x55
 800c442:	4b14      	ldr	r3, [pc, #80]	@ (800c494 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800c444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c446:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800c44a:	461a      	mov	r2, r3
 800c44c:	f001 fee0 	bl	800e210 <rfalSetMode>
 800c450:	4603      	mov	r3, r0
 800c452:	80fb      	strh	r3, [r7, #6]
 800c454:	88fb      	ldrh	r3, [r7, #6]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d016      	beq.n	800c488 <rfalNfcDepListenGetActivationStatus+0xbc>
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	e016      	b.n	800c48c <rfalNfcDepListenGetActivationStatus+0xc0>
            break;
            
        case ERR_PROTO:
        default:
            // re-enable receiving of data
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c45e:	4b0d      	ldr	r3, [pc, #52]	@ (800c494 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800c460:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c462:	4b0c      	ldr	r3, [pc, #48]	@ (800c494 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800c464:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800c468:	4b0a      	ldr	r3, [pc, #40]	@ (800c494 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800c46a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c46c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c470:	9002      	str	r0, [sp, #8]
 800c472:	2004      	movs	r0, #4
 800c474:	9001      	str	r0, [sp, #4]
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	460b      	mov	r3, r1
 800c47a:	2100      	movs	r1, #0
 800c47c:	2000      	movs	r0, #0
 800c47e:	f002 fc83 	bl	800ed88 <rfalTransceiveBlockingTx>
            break;
 800c482:	e002      	b.n	800c48a <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 800c484:	bf00      	nop
 800c486:	e000      	b.n	800c48a <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 800c488:	bf00      	nop
    } // if (no err)
    
    return err;
 800c48a:	88fb      	ldrh	r3, [r7, #6]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	20000bb0 	.word	0x20000bb0

0800c498 <rfalNfcDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalNfcDepStartTransceive( rfalNfcDepTxRxParam *param )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08a      	sub	sp, #40	@ 0x28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
    rfalNfcDepDEPParams nfcDepParams;
    
    nfcDepParams.txBuf        = (uint8_t *)param->txBuf;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	60fb      	str	r3, [r7, #12]
    nfcDepParams.txBufLen     = param->txBufLen;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	889b      	ldrh	r3, [r3, #4]
 800c4aa:	823b      	strh	r3, [r7, #16]
    nfcDepParams.txChaining   = param->isTxChaining;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	799b      	ldrb	r3, [r3, #6]
 800c4b0:	74fb      	strb	r3, [r7, #19]
    nfcDepParams.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;  /* position in txBuf where actual outgoing data is located */
 800c4b2:	2305      	movs	r3, #5
 800c4b4:	74bb      	strb	r3, [r7, #18]
    nfcDepParams.did          = RFAL_NFCDEP_DID_KEEP;
 800c4b6:	23ff      	movs	r3, #255	@ 0xff
 800c4b8:	723b      	strb	r3, [r7, #8]
    nfcDepParams.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 800c4ba:	2305      	movs	r3, #5
 800c4bc:	76bb      	strb	r3, [r7, #26]
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	617b      	str	r3, [r7, #20]
    nfcDepParams.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 800c4c4:	f240 1303 	movw	r3, #259	@ 0x103
 800c4c8:	833b      	strh	r3, [r7, #24]
    nfcDepParams.fsc          = param->FSx;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	8b9b      	ldrh	r3, [r3, #28]
 800c4ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
    nfcDepParams.fwt          = param->FWT;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	695b      	ldr	r3, [r3, #20]
 800c4d4:	61fb      	str	r3, [r7, #28]
    nfcDepParams.dFwt         = param->dFWT;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	623b      	str	r3, [r7, #32]

    gNfcip.rxRcvdLen          = param->rxLen;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	4a07      	ldr	r2, [pc, #28]	@ (800c500 <rfalNfcDepStartTransceive+0x68>)
 800c4e2:	66d3      	str	r3, [r2, #108]	@ 0x6c
    gNfcip.isChaining         = param->isRxChaining;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	4a05      	ldr	r2, [pc, #20]	@ (800c500 <rfalNfcDepStartTransceive+0x68>)
 800c4ea:	6753      	str	r3, [r2, #116]	@ 0x74

    nfcipSetDEPParams(&nfcDepParams);
 800c4ec:	f107 0308 	add.w	r3, r7, #8
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7ff f999 	bl	800b828 <nfcipSetDEPParams>
    
    return ERR_NONE;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3728      	adds	r7, #40	@ 0x28
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	20000bb0 	.word	0x20000bb0

0800c504 <rfalNfcDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	af00      	add	r7, sp, #0
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 800c508:	4b05      	ldr	r3, [pc, #20]	@ (800c520 <rfalNfcDepGetTransceiveStatus+0x1c>)
 800c50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c50c:	4a04      	ldr	r2, [pc, #16]	@ (800c520 <rfalNfcDepGetTransceiveStatus+0x1c>)
 800c50e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f7ff f802 	bl	800b51c <nfcipRun>
 800c518:	4603      	mov	r3, r0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	20000bb0 	.word	0x20000bb0

0800c524 <rfalNfcaCalculateBcc>:
 * LOCAL FUNCTIONS
 ******************************************************************************
 */

static uint8_t rfalNfcaCalculateBcc( const uint8_t* buf, uint8_t bufLen )
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	460b      	mov	r3, r1
 800c52e:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t BCC;
    
    BCC = 0;
 800c530:	2300      	movs	r3, #0
 800c532:	73bb      	strb	r3, [r7, #14]
    
    /* BCC is XOR over first 4 bytes of the SDD_RES  Digital 1.1 6.7.2 */
    for(i = 0; i < bufLen; i++)
 800c534:	2300      	movs	r3, #0
 800c536:	73fb      	strb	r3, [r7, #15]
 800c538:	e009      	b.n	800c54e <rfalNfcaCalculateBcc+0x2a>
    {
        BCC ^= buf[i];
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	4413      	add	r3, r2
 800c540:	781a      	ldrb	r2, [r3, #0]
 800c542:	7bbb      	ldrb	r3, [r7, #14]
 800c544:	4053      	eors	r3, r2
 800c546:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < bufLen; i++)
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	3301      	adds	r3, #1
 800c54c:	73fb      	strb	r3, [r7, #15]
 800c54e:	7bfa      	ldrb	r2, [r7, #15]
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	429a      	cmp	r2, r3
 800c554:	d3f1      	bcc.n	800c53a <rfalNfcaCalculateBcc+0x16>
    }
    
    return BCC;
 800c556:	7bbb      	ldrb	r3, [r7, #14]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <rfalNfcaPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 800c56a:	2200      	movs	r2, #0
 800c56c:	2100      	movs	r1, #0
 800c56e:	2001      	movs	r0, #1
 800c570:	f001 fe4e 	bl	800e210 <rfalSetMode>
 800c574:	4603      	mov	r3, r0
 800c576:	80fb      	strh	r3, [r7, #6]
 800c578:	88fb      	ldrh	r3, [r7, #6]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d001      	beq.n	800c582 <rfalNfcaPollerInitialize+0x1e>
 800c57e:	88fb      	ldrh	r3, [r7, #6]
 800c580:	e00e      	b.n	800c5a0 <rfalNfcaPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800c582:	2001      	movs	r0, #1
 800c584:	f002 f9c8 	bl	800e918 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 800c588:	4807      	ldr	r0, [pc, #28]	@ (800c5a8 <rfalNfcaPollerInitialize+0x44>)
 800c58a:	f002 f9ff 	bl	800e98c <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 800c58e:	f240 4094 	movw	r0, #1172	@ 0x494
 800c592:	f002 f9e7 	bl	800e964 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 800c596:	f641 207c 	movw	r0, #6780	@ 0x1a7c
 800c59a:	f002 f9cd 	bl	800e938 <rfalSetFDTPoll>
    
    return ERR_NONE;
 800c59e:	2300      	movs	r3, #0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	000108d8 	.word	0x000108d8

0800c5ac <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af02      	add	r7, sp, #8
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	6039      	str	r1, [r7, #0]
 800c5b6:	71fb      	strb	r3, [r7, #7]
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800c5b8:	f107 030c 	add.w	r3, r7, #12
 800c5bc:	79f8      	ldrb	r0, [r7, #7]
 800c5be:	f240 6254 	movw	r2, #1620	@ 0x654
 800c5c2:	9200      	str	r2, [sp, #0]
 800c5c4:	2210      	movs	r2, #16
 800c5c6:	6839      	ldr	r1, [r7, #0]
 800c5c8:	f003 fbe8 	bl	800fd9c <rfalISO14443ATransceiveShortFrame>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	81fb      	strh	r3, [r7, #14]
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 800c5d0:	89fb      	ldrh	r3, [r7, #14]
 800c5d2:	2b1d      	cmp	r3, #29
 800c5d4:	d00b      	beq.n	800c5ee <rfalNfcaPollerCheckPresence+0x42>
 800c5d6:	89fb      	ldrh	r3, [r7, #14]
 800c5d8:	2b15      	cmp	r3, #21
 800c5da:	d008      	beq.n	800c5ee <rfalNfcaPollerCheckPresence+0x42>
 800c5dc:	89fb      	ldrh	r3, [r7, #14]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d005      	beq.n	800c5ee <rfalNfcaPollerCheckPresence+0x42>
 800c5e2:	89fb      	ldrh	r3, [r7, #14]
 800c5e4:	2b09      	cmp	r3, #9
 800c5e6:	d002      	beq.n	800c5ee <rfalNfcaPollerCheckPresence+0x42>
 800c5e8:	89fb      	ldrh	r3, [r7, #14]
 800c5ea:	2b1b      	cmp	r3, #27
 800c5ec:	d101      	bne.n	800c5f2 <rfalNfcaPollerCheckPresence+0x46>
    {
       ret = ERR_NONE;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 800c5f2:	89fb      	ldrh	r3, [r7, #14]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <rfalNfcaPollerTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcaSensRes *sensRes )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	4603      	mov	r3, r0
 800c604:	6039      	str	r1, [r7, #0]
 800c606:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 800c608:	79fb      	ldrb	r3, [r7, #7]
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d101      	bne.n	800c612 <rfalNfcaPollerTechnologyDetection+0x16>
 800c60e:	2352      	movs	r3, #82	@ 0x52
 800c610:	e000      	b.n	800c614 <rfalNfcaPollerTechnologyDetection+0x18>
 800c612:	2326      	movs	r3, #38	@ 0x26
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	4618      	mov	r0, r3
 800c618:	f7ff ffc8 	bl	800c5ac <rfalNfcaPollerCheckPresence>
 800c61c:	4603      	mov	r3, r0
 800c61e:	81fb      	strh	r3, [r7, #14]
 800c620:	89fb      	ldrh	r3, [r7, #14]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <rfalNfcaPollerTechnologyDetection+0x2e>
 800c626:	89fb      	ldrh	r3, [r7, #14]
 800c628:	e005      	b.n	800c636 <rfalNfcaPollerTechnologyDetection+0x3a>
    
    /* Send SLP_REQ as  Activity 1.1  9.2.3.6 and EMVCo 2.6  9.2.1.3 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO)
 800c62a:	79fb      	ldrb	r3, [r7, #7]
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d001      	beq.n	800c634 <rfalNfcaPollerTechnologyDetection+0x38>
    {
        rfalNfcaPollerSleep();
 800c630:	f000 fb60 	bl	800ccf4 <rfalNfcaPollerSleep>
    }
    return ERR_NONE;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <rfalNfcaPollerSingleCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcaPollerSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 800c63e:	b590      	push	{r4, r7, lr}
 800c640:	b08f      	sub	sp, #60	@ 0x3c
 800c642:	af04      	add	r7, sp, #16
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
 800c648:	603b      	str	r3, [r7, #0]
 800c64a:	4603      	mov	r3, r0
 800c64c:	73fb      	strb	r3, [r7, #15]
    ReturnCode      ret;
    rfalNfcaSelReq  selReq;
    uint16_t        bytesRx;
    uint8_t         bytesTxRx;
    uint8_t         bitsTxRx;
    bool            doBacktrack = false;
 800c64e:	2300      	movs	r3, #0
 800c650:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint8_t         backtrackCnt = 3;
 800c654:	2303      	movs	r3, #3
 800c656:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d008      	beq.n	800c672 <rfalNfcaPollerSingleCollisionResolution+0x34>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d005      	beq.n	800c672 <rfalNfcaPollerSingleCollisionResolution+0x34>
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <rfalNfcaPollerSingleCollisionResolution+0x34>
 800c66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <rfalNfcaPollerSingleCollisionResolution+0x38>
    {
        return ERR_PARAM;
 800c672:	2307      	movs	r3, #7
 800c674:	e1ad      	b.n	800c9d2 <rfalNfcaPollerSingleCollisionResolution+0x394>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2200      	movs	r2, #0
 800c67a:	701a      	strb	r2, [r3, #0]
    *nfcId1Len   = 0;
 800c67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c67e:	2200      	movs	r2, #0
 800c680:	701a      	strb	r2, [r3, #0]
    ST_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 800c682:	220a      	movs	r2, #10
 800c684:	2100      	movs	r1, #0
 800c686:	6838      	ldr	r0, [r7, #0]
 800c688:	f004 ff72 	bl	8011570 <memset>
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.3.4 */
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 800c68c:	2300      	movs	r3, #0
 800c68e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c692:	e198      	b.n	800c9c6 <rfalNfcaPollerSingleCollisionResolution+0x388>
    {
        /* Initialize the SDD_REQ to send for the new cascade level */
        ST_MEMSET( (uint8_t*)&selReq, 0x00, sizeof(rfalNfcaSelReq) );
 800c694:	f107 0318 	add.w	r3, r7, #24
 800c698:	2207      	movs	r2, #7
 800c69a:	2100      	movs	r1, #0
 800c69c:	4618      	mov	r0, r3
 800c69e:	f004 ff67 	bl	8011570 <memset>
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 800c6a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6a6:	005b      	lsls	r3, r3, #1
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	3b6d      	subs	r3, #109	@ 0x6d
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	763b      	strb	r3, [r7, #24]
    
        bytesTxRx    = RFAL_NFCA_SDD_REQ_LEN;
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	757b      	strb	r3, [r7, #21]
        bitsTxRx     = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	753b      	strb	r3, [r7, #20]
        
        /*******************************************************************************/
        /* Go through Collision loop */
        do
        {
            uint8_t         collBit = 1; /* standards mandate or recommend collision bit to be set to One. */
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            /* Calculate SEL_PAR with the bytes/bits to be sent */
            selReq.selPar = rfalNfcaSelPar(bytesTxRx, bitsTxRx);
 800c6be:	7d7b      	ldrb	r3, [r7, #21]
 800c6c0:	011b      	lsls	r3, r3, #4
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	7d3b      	ldrb	r3, [r7, #20]
 800c6c6:	f003 030f 	and.w	r3, r3, #15
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	767b      	strb	r3, [r7, #25]
    
            /* Send SDD_REQ (Anticollision frame) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            rfalNfcaTxRetry( ret, rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&selReq, &bytesTxRx, &bitsTxRx, &bytesRx, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 800c6d2:	7bfb      	ldrb	r3, [r7, #15]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d101      	bne.n	800c6dc <rfalNfcaPollerSingleCollisionResolution+0x9e>
 800c6d8:	2302      	movs	r3, #2
 800c6da:	e000      	b.n	800c6de <rfalNfcaPollerSingleCollisionResolution+0xa0>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	f887 3020 	strb.w	r3, [r7, #32]
 800c6e2:	f107 0316 	add.w	r3, r7, #22
 800c6e6:	f107 0214 	add.w	r2, r7, #20
 800c6ea:	f107 0115 	add.w	r1, r7, #21
 800c6ee:	f107 0018 	add.w	r0, r7, #24
 800c6f2:	f240 6454 	movw	r4, #1620	@ 0x654
 800c6f6:	9400      	str	r4, [sp, #0]
 800c6f8:	f003 fc4c 	bl	800ff94 <rfalISO14443ATransceiveAnticollisionFrame>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c700:	7bfb      	ldrb	r3, [r7, #15]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d102      	bne.n	800c70c <rfalNfcaPollerSingleCollisionResolution+0xce>
 800c706:	2005      	movs	r0, #5
 800c708:	f7f4 ffd0 	bl	80016ac <HAL_Delay>
 800c70c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c710:	1e5a      	subs	r2, r3, #1
 800c712:	f887 2020 	strb.w	r2, [r7, #32]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d002      	beq.n	800c720 <rfalNfcaPollerSingleCollisionResolution+0xe2>
 800c71a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c71c:	2b04      	cmp	r3, #4
 800c71e:	d0e0      	beq.n	800c6e2 <rfalNfcaPollerSingleCollisionResolution+0xa4>
            
            bytesRx = rfalConvBitsToBytes(bytesRx);
 800c720:	8afb      	ldrh	r3, [r7, #22]
 800c722:	3307      	adds	r3, #7
 800c724:	08db      	lsrs	r3, r3, #3
 800c726:	b29b      	uxth	r3, r3
 800c728:	82fb      	strh	r3, [r7, #22]
            
            if ((ret == ERR_TIMEOUT) 
 800c72a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c72c:	2b04      	cmp	r3, #4
 800c72e:	d146      	bne.n	800c7be <rfalNfcaPollerSingleCollisionResolution+0x180>
                && (backtrackCnt != 0U) && !doBacktrack
 800c730:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c734:	2b00      	cmp	r3, #0
 800c736:	d042      	beq.n	800c7be <rfalNfcaPollerSingleCollisionResolution+0x180>
 800c738:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c73c:	f083 0301 	eor.w	r3, r3, #1
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d03b      	beq.n	800c7be <rfalNfcaPollerSingleCollisionResolution+0x180>
                && !((RFAL_NFCA_SDD_REQ_LEN==bytesTxRx) && (0U==bitsTxRx)))
 800c746:	7d7b      	ldrb	r3, [r7, #21]
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d102      	bne.n	800c752 <rfalNfcaPollerSingleCollisionResolution+0x114>
 800c74c:	7d3b      	ldrb	r3, [r7, #20]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d035      	beq.n	800c7be <rfalNfcaPollerSingleCollisionResolution+0x180>
                 * collisions of a weaker tag go unnoticed. If then a later 
                 * collision is recognized and the strong tag has a 0 at the 
                 * collision position then no tag will respond. Catch this 
                 * corner case and then try with the bit being sent as zero. */
                rfalNfcaSensRes sensRes;
                ret = ERR_RF_COLLISION;
 800c752:	231d      	movs	r3, #29
 800c754:	84bb      	strh	r3, [r7, #36]	@ 0x24
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 800c756:	f107 0310 	add.w	r3, r7, #16
 800c75a:	4619      	mov	r1, r3
 800c75c:	2026      	movs	r0, #38	@ 0x26
 800c75e:	f7ff ff25 	bl	800c5ac <rfalNfcaPollerCheckPresence>
                /* Algorithm below does a post-increment, decrement to go back to current position */
                if (0U == bitsTxRx)
 800c762:	7d3b      	ldrb	r3, [r7, #20]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d106      	bne.n	800c776 <rfalNfcaPollerSingleCollisionResolution+0x138>
                {
                    bitsTxRx = 7;
 800c768:	2307      	movs	r3, #7
 800c76a:	753b      	strb	r3, [r7, #20]
                    bytesTxRx--;
 800c76c:	7d7b      	ldrb	r3, [r7, #21]
 800c76e:	3b01      	subs	r3, #1
 800c770:	b2db      	uxtb	r3, r3
 800c772:	757b      	strb	r3, [r7, #21]
 800c774:	e003      	b.n	800c77e <rfalNfcaPollerSingleCollisionResolution+0x140>
                }
                else
                {
                    bitsTxRx--;
 800c776:	7d3b      	ldrb	r3, [r7, #20]
 800c778:	3b01      	subs	r3, #1
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	753b      	strb	r3, [r7, #20]
                }
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 800c77e:	7d7b      	ldrb	r3, [r7, #21]
 800c780:	461a      	mov	r2, r3
 800c782:	f107 0318 	add.w	r3, r7, #24
 800c786:	4413      	add	r3, r2
 800c788:	781a      	ldrb	r2, [r3, #0]
 800c78a:	7d3b      	ldrb	r3, [r7, #20]
 800c78c:	4619      	mov	r1, r3
 800c78e:	2301      	movs	r3, #1
 800c790:	408b      	lsls	r3, r1
 800c792:	b2db      	uxtb	r3, r3
 800c794:	4013      	ands	r3, r2
 800c796:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 800c79a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <rfalNfcaPollerSingleCollisionResolution+0x168>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e000      	b.n	800c7a8 <rfalNfcaPollerSingleCollisionResolution+0x16a>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                doBacktrack = true;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                backtrackCnt--;
 800c7b2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            { 
 800c7bc:	e002      	b.n	800c7c4 <rfalNfcaPollerSingleCollisionResolution+0x186>
            }
            else
            {
                doBacktrack = false;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            if( ret == ERR_RF_COLLISION )
 800c7c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c7c6:	2b1d      	cmp	r3, #29
 800c7c8:	d17e      	bne.n	800c8c8 <rfalNfcaPollerSingleCollisionResolution+0x28a>
            {
                /* Check received length */
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 800c7ca:	7d7b      	ldrb	r3, [r7, #21]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	7d3b      	ldrb	r3, [r7, #20]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <rfalNfcaPollerSingleCollisionResolution+0x19a>
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	e000      	b.n	800c7da <rfalNfcaPollerSingleCollisionResolution+0x19c>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	4413      	add	r3, r2
 800c7dc:	2b07      	cmp	r3, #7
 800c7de:	d901      	bls.n	800c7e4 <rfalNfcaPollerSingleCollisionResolution+0x1a6>
                {
                    return ERR_PROTO;
 800c7e0:	230b      	movs	r3, #11
 800c7e2:	e0f6      	b.n	800c9d2 <rfalNfcaPollerSingleCollisionResolution+0x394>
                }

                if( ((bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (backtrackCnt != 0U) )
 800c7e4:	7d7b      	ldrb	r3, [r7, #21]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	7d3b      	ldrb	r3, [r7, #20]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d001      	beq.n	800c7f2 <rfalNfcaPollerSingleCollisionResolution+0x1b4>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e000      	b.n	800c7f4 <rfalNfcaPollerSingleCollisionResolution+0x1b6>
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	4413      	add	r3, r2
 800c7f6:	2b06      	cmp	r3, #6
 800c7f8:	d91a      	bls.n	800c830 <rfalNfcaPollerSingleCollisionResolution+0x1f2>
 800c7fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d016      	beq.n	800c830 <rfalNfcaPollerSingleCollisionResolution+0x1f2>
                { /* Collision in BCC: Anticollide only UID part */
                    backtrackCnt--;
 800c802:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c806:	3b01      	subs	r3, #1
 800c808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                    bytesTxRx = RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN - 1U;
 800c80c:	2305      	movs	r3, #5
 800c80e:	757b      	strb	r3, [r7, #21]
                    bitsTxRx = 7;
 800c810:	2307      	movs	r3, #7
 800c812:	753b      	strb	r3, [r7, #20]
                    collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 800c814:	7d7b      	ldrb	r3, [r7, #21]
 800c816:	461a      	mov	r2, r3
 800c818:	f107 0318 	add.w	r3, r7, #24
 800c81c:	4413      	add	r3, r2
 800c81e:	781a      	ldrb	r2, [r3, #0]
 800c820:	7d3b      	ldrb	r3, [r7, #20]
 800c822:	4619      	mov	r1, r3
 800c824:	2301      	movs	r3, #1
 800c826:	408b      	lsls	r3, r1
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	4013      	ands	r3, r2
 800c82c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                }
                
                if( (devLimit == 0U) && !(*collPending) )
 800c830:	7bfb      	ldrb	r3, [r7, #15]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10b      	bne.n	800c84e <rfalNfcaPollerSingleCollisionResolution+0x210>
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	f083 0301 	eor.w	r3, r3, #1
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	2b00      	cmp	r3, #0
 800c842:	d004      	beq.n	800c84e <rfalNfcaPollerSingleCollisionResolution+0x210>
                {   
                    /* Activity 1.0 & 1.1  9.3.4.12: If CON_DEVICES_LIMIT has a value of 0, then 
                     * NFC Forum Device is configured to perform collision detection only       */
                    *collPending = true;
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2201      	movs	r2, #1
 800c848:	701a      	strb	r2, [r3, #0]
                    return ERR_IGNORE;
 800c84a:	2312      	movs	r3, #18
 800c84c:	e0c1      	b.n	800c9d2 <rfalNfcaPollerSingleCollisionResolution+0x394>
                }
                
                *collPending = true;
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2201      	movs	r2, #1
 800c852:	701a      	strb	r2, [r3, #0]
                
                /* Set and select the collision bit, with the number of bytes/bits successfully TxRx */
                if (collBit != 0U)
 800c854:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d013      	beq.n	800c884 <rfalNfcaPollerSingleCollisionResolution+0x246>
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 800c85c:	7d7b      	ldrb	r3, [r7, #21]
 800c85e:	461a      	mov	r2, r3
 800c860:	f107 0318 	add.w	r3, r7, #24
 800c864:	4413      	add	r3, r2
 800c866:	7819      	ldrb	r1, [r3, #0]
 800c868:	7d3b      	ldrb	r3, [r7, #20]
 800c86a:	461a      	mov	r2, r3
 800c86c:	2301      	movs	r3, #1
 800c86e:	4093      	lsls	r3, r2
 800c870:	b2da      	uxtb	r2, r3
 800c872:	7d7b      	ldrb	r3, [r7, #21]
 800c874:	4618      	mov	r0, r3
 800c876:	f107 0318 	add.w	r3, r7, #24
 800c87a:	4403      	add	r3, r0
 800c87c:	430a      	orrs	r2, r1
 800c87e:	b2d2      	uxtb	r2, r2
 800c880:	701a      	strb	r2, [r3, #0]
 800c882:	e014      	b.n	800c8ae <rfalNfcaPollerSingleCollisionResolution+0x270>
                }
                else
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 800c884:	7d7b      	ldrb	r3, [r7, #21]
 800c886:	461a      	mov	r2, r3
 800c888:	f107 0318 	add.w	r3, r7, #24
 800c88c:	4413      	add	r3, r2
 800c88e:	7819      	ldrb	r1, [r3, #0]
 800c890:	7d3b      	ldrb	r3, [r7, #20]
 800c892:	461a      	mov	r2, r3
 800c894:	2301      	movs	r3, #1
 800c896:	4093      	lsls	r3, r2
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	43db      	mvns	r3, r3
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	7d7b      	ldrb	r3, [r7, #21]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f107 0318 	add.w	r3, r7, #24
 800c8a6:	4403      	add	r3, r0
 800c8a8:	400a      	ands	r2, r1
 800c8aa:	b2d2      	uxtb	r2, r2
 800c8ac:	701a      	strb	r2, [r3, #0]
                }

                bitsTxRx++;
 800c8ae:	7d3b      	ldrb	r3, [r7, #20]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	753b      	strb	r3, [r7, #20]
                
                /* Check if number of bits form a byte */
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 800c8b6:	7d3b      	ldrb	r3, [r7, #20]
 800c8b8:	2b08      	cmp	r3, #8
 800c8ba:	d105      	bne.n	800c8c8 <rfalNfcaPollerSingleCollisionResolution+0x28a>
                {
                    bitsTxRx = 0;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	753b      	strb	r3, [r7, #20]
                    bytesTxRx++;
 800c8c0:	7d7b      	ldrb	r3, [r7, #21]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	757b      	strb	r3, [r7, #21]
                }
            }
        }while (ret == ERR_RF_COLLISION);
 800c8c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8ca:	2b1d      	cmp	r3, #29
 800c8cc:	f43f aef4 	beq.w	800c6b8 <rfalNfcaPollerSingleCollisionResolution+0x7a>
        
        
        /*******************************************************************************/
        /* Check if Collision loop has failed */
        if( ret != ERR_NONE )
 800c8d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d001      	beq.n	800c8da <rfalNfcaPollerSingleCollisionResolution+0x29c>
        {
            return ret;
 800c8d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8d8:	e07b      	b.n	800c9d2 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        
        /* If collisions are to be reported check whether the response is complete */
        if( (devLimit == 0U) && (bytesRx != sizeof(rfalNfcaSddRes)) )
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d104      	bne.n	800c8ea <rfalNfcaPollerSingleCollisionResolution+0x2ac>
 800c8e0:	8afb      	ldrh	r3, [r7, #22]
 800c8e2:	2b05      	cmp	r3, #5
 800c8e4:	d001      	beq.n	800c8ea <rfalNfcaPollerSingleCollisionResolution+0x2ac>
        {
            return ERR_PROTO;
 800c8e6:	230b      	movs	r3, #11
 800c8e8:	e073      	b.n	800c9d2 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /* Check if the received BCC match */
        if( selReq.bcc != rfalNfcaCalculateBcc( selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 800c8ea:	7fbc      	ldrb	r4, [r7, #30]
 800c8ec:	f107 0318 	add.w	r3, r7, #24
 800c8f0:	3302      	adds	r3, #2
 800c8f2:	2104      	movs	r1, #4
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7ff fe15 	bl	800c524 <rfalNfcaCalculateBcc>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	429c      	cmp	r4, r3
 800c8fe:	d001      	beq.n	800c904 <rfalNfcaPollerSingleCollisionResolution+0x2c6>
        {
            return ERR_PROTO;
 800c900:	230b      	movs	r3, #11
 800c902:	e066      	b.n	800c9d2 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /*******************************************************************************/
        /* Anticollision OK, Select this Cascade Level */
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800c904:	2370      	movs	r3, #112	@ 0x70
 800c906:	767b      	strb	r3, [r7, #25]
        
        /* Send SEL_REQ (Select command) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
        rfalNfcaTxRetry( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &bytesRx, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 800c908:	7bfb      	ldrb	r3, [r7, #15]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d101      	bne.n	800c912 <rfalNfcaPollerSingleCollisionResolution+0x2d4>
 800c90e:	2302      	movs	r3, #2
 800c910:	e000      	b.n	800c914 <rfalNfcaPollerSingleCollisionResolution+0x2d6>
 800c912:	2300      	movs	r3, #0
 800c914:	77fb      	strb	r3, [r7, #31]
 800c916:	f107 0018 	add.w	r0, r7, #24
 800c91a:	f240 6354 	movw	r3, #1620	@ 0x654
 800c91e:	9302      	str	r3, [sp, #8]
 800c920:	2300      	movs	r3, #0
 800c922:	9301      	str	r3, [sp, #4]
 800c924:	f107 0316 	add.w	r3, r7, #22
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	2301      	movs	r3, #1
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	2107      	movs	r1, #7
 800c930:	f002 fa8c 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 800c934:	4603      	mov	r3, r0
 800c936:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d102      	bne.n	800c944 <rfalNfcaPollerSingleCollisionResolution+0x306>
 800c93e:	2005      	movs	r0, #5
 800c940:	f7f4 feb4 	bl	80016ac <HAL_Delay>
 800c944:	7ffb      	ldrb	r3, [r7, #31]
 800c946:	1e5a      	subs	r2, r3, #1
 800c948:	77fa      	strb	r2, [r7, #31]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d002      	beq.n	800c954 <rfalNfcaPollerSingleCollisionResolution+0x316>
 800c94e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c950:	2b04      	cmp	r3, #4
 800c952:	d0e0      	beq.n	800c916 <rfalNfcaPollerSingleCollisionResolution+0x2d8>
        
        if( ret != ERR_NONE )
 800c954:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c956:	2b00      	cmp	r3, #0
 800c958:	d001      	beq.n	800c95e <rfalNfcaPollerSingleCollisionResolution+0x320>
        {
            return ret;
 800c95a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c95c:	e039      	b.n	800c9d2 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }

        
        /* Ensure proper response length */
        if( bytesRx != sizeof(rfalNfcaSelRes) )
 800c95e:	8afb      	ldrh	r3, [r7, #22]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d001      	beq.n	800c968 <rfalNfcaPollerSingleCollisionResolution+0x32a>
        {
            return ERR_PROTO;
 800c964:	230b      	movs	r3, #11
 800c966:	e034      	b.n	800c9d2 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /*******************************************************************************/
        /* Check cascade byte, if cascade tag then go next cascade level */
        if( (ret == ERR_NONE) && (*selReq.nfcid1 == RFAL_NFCA_SDD_CT) )
 800c968:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d11b      	bne.n	800c9a6 <rfalNfcaPollerSingleCollisionResolution+0x368>
 800c96e:	7ebb      	ldrb	r3, [r7, #26]
 800c970:	2b88      	cmp	r3, #136	@ 0x88
 800c972:	d118      	bne.n	800c9a6 <rfalNfcaPollerSingleCollisionResolution+0x368>
        {
            /* Cascade Tag present, store nfcid1 bytes (excluding cascade tag) and continue for next CL */
            ST_MEMCPY( &nfcId1[*nfcId1Len], &((uint8_t*)&selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800c974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	461a      	mov	r2, r3
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	1898      	adds	r0, r3, r2
 800c97e:	f107 0318 	add.w	r3, r7, #24
 800c982:	3302      	adds	r3, #2
 800c984:	3301      	adds	r3, #1
 800c986:	2203      	movs	r2, #3
 800c988:	4619      	mov	r1, r3
 800c98a:	f004 fe35 	bl	80115f8 <memcpy>
            *nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800c98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	3303      	adds	r3, #3
 800c994:	b2da      	uxtb	r2, r3
 800c996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c998:	701a      	strb	r2, [r3, #0]
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 800c99a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c99e:	3301      	adds	r3, #1
 800c9a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c9a4:	e00f      	b.n	800c9c6 <rfalNfcaPollerSingleCollisionResolution+0x388>
        }
        else
        {
            /* UID Selection complete, Stop Cascade Level loop */
            ST_MEMCPY( &nfcId1[*nfcId1Len], (uint8_t*)&selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 800c9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f8d7 201a 	ldr.w	r2, [r7, #26]
 800c9b4:	601a      	str	r2, [r3, #0]
            *nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	3304      	adds	r3, #4
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c0:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	e005      	b.n	800c9d2 <rfalNfcaPollerSingleCollisionResolution+0x394>
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 800c9c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9ca:	2b02      	cmp	r3, #2
 800c9cc:	f67f ae62 	bls.w	800c694 <rfalNfcaPollerSingleCollisionResolution+0x56>
        }
    }
    return ERR_INTERNAL;
 800c9d0:	230c      	movs	r3, #12
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	372c      	adds	r7, #44	@ 0x2c
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd90      	pop	{r4, r7, pc}

0800c9da <rfalNfcaPollerFullCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 800c9da:	b5b0      	push	{r4, r5, r7, lr}
 800c9dc:	b08a      	sub	sp, #40	@ 0x28
 800c9de:	af02      	add	r7, sp, #8
 800c9e0:	60ba      	str	r2, [r7, #8]
 800c9e2:	607b      	str	r3, [r7, #4]
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73fb      	strb	r3, [r7, #15]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	73bb      	strb	r3, [r7, #14]
    ReturnCode      ret;
    bool            collPending;
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d002      	beq.n	800c9f8 <rfalNfcaPollerFullCollisionResolution+0x1e>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d101      	bne.n	800c9fc <rfalNfcaPollerFullCollisionResolution+0x22>
    {
        return ERR_PARAM;
 800c9f8:	2307      	movs	r3, #7
 800c9fa:	e105      	b.n	800cc08 <rfalNfcaPollerFullCollisionResolution+0x22e>
    }
    
    *devCnt = 0;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	701a      	strb	r2, [r3, #0]
    ret     = ERR_NONE;
 800ca02:	2300      	movs	r3, #0
 800ca04:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 800ca06:	7bfb      	ldrb	r3, [r7, #15]
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	d028      	beq.n	800ca5e <rfalNfcaPollerFullCollisionResolution+0x84>
    {
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	1c59      	adds	r1, r3, #1
 800ca10:	f107 0316 	add.w	r3, r7, #22
 800ca14:	f240 6254 	movw	r2, #1620	@ 0x654
 800ca18:	9200      	str	r2, [sp, #0]
 800ca1a:	2210      	movs	r2, #16
 800ca1c:	2052      	movs	r0, #82	@ 0x52
 800ca1e:	f003 f9bd 	bl	800fd9c <rfalISO14443ATransceiveShortFrame>
 800ca22:	4603      	mov	r3, r0
 800ca24:	83fb      	strh	r3, [r7, #30]
        if(ret != ERR_NONE)
 800ca26:	8bfb      	ldrh	r3, [r7, #30]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d010      	beq.n	800ca4e <rfalNfcaPollerFullCollisionResolution+0x74>
        {
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != ERR_RF_COLLISION) && (ret != ERR_CRC) && (ret != ERR_FRAMING) && (ret != ERR_PAR)) )
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d00b      	beq.n	800ca4a <rfalNfcaPollerFullCollisionResolution+0x70>
 800ca32:	8bfb      	ldrh	r3, [r7, #30]
 800ca34:	2b1d      	cmp	r3, #29
 800ca36:	d00a      	beq.n	800ca4e <rfalNfcaPollerFullCollisionResolution+0x74>
 800ca38:	8bfb      	ldrh	r3, [r7, #30]
 800ca3a:	2b15      	cmp	r3, #21
 800ca3c:	d007      	beq.n	800ca4e <rfalNfcaPollerFullCollisionResolution+0x74>
 800ca3e:	8bfb      	ldrh	r3, [r7, #30]
 800ca40:	2b09      	cmp	r3, #9
 800ca42:	d004      	beq.n	800ca4e <rfalNfcaPollerFullCollisionResolution+0x74>
 800ca44:	8bfb      	ldrh	r3, [r7, #30]
 800ca46:	2b1b      	cmp	r3, #27
 800ca48:	d001      	beq.n	800ca4e <rfalNfcaPollerFullCollisionResolution+0x74>
            {
                return ret;
 800ca4a:	8bfb      	ldrh	r3, [r7, #30]
 800ca4c:	e0dc      	b.n	800cc08 <rfalNfcaPollerFullCollisionResolution+0x22e>
            }
        }
        
        /* Check proper SENS_RES/ATQA size */
        if( (ret == ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 800ca4e:	8bfb      	ldrh	r3, [r7, #30]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d104      	bne.n	800ca5e <rfalNfcaPollerFullCollisionResolution+0x84>
 800ca54:	8afb      	ldrh	r3, [r7, #22]
 800ca56:	2b10      	cmp	r3, #16
 800ca58:	d001      	beq.n	800ca5e <rfalNfcaPollerFullCollisionResolution+0x84>
        {
            return ERR_PROTO;
 800ca5a:	230b      	movs	r3, #11
 800ca5c:	e0d4      	b.n	800cc08 <rfalNfcaPollerFullCollisionResolution+0x22e>
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	789b      	ldrb	r3, [r3, #2]
 800ca62:	f003 030f 	and.w	r3, r3, #15
 800ca66:	2b0c      	cmp	r3, #12
 800ca68:	d12a      	bne.n	800cac0 <rfalNfcaPollerFullCollisionResolution+0xe6>
 800ca6a:	7bbb      	ldrb	r3, [r7, #14]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d027      	beq.n	800cac0 <rfalNfcaPollerFullCollisionResolution+0xe6>
 800ca70:	8bfb      	ldrh	r3, [r7, #30]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d124      	bne.n	800cac0 <rfalNfcaPollerFullCollisionResolution+0xe6>
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d021      	beq.n	800cac0 <rfalNfcaPollerFullCollisionResolution+0xe6>
    {
        /* RID_REQ shall be performed with rfalT1TPollerRid()    Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 800ca7c:	f004 fbf7 	bl	801126e <rfalT1TPollerInitialize>
        EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	330f      	adds	r3, #15
 800ca84:	4618      	mov	r0, r3
 800ca86:	f004 fc14 	bl	80112b2 <rfalT1TPollerRid>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	83fb      	strh	r3, [r7, #30]
 800ca8e:	8bfb      	ldrh	r3, [r7, #30]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <rfalNfcaPollerFullCollisionResolution+0xbe>
 800ca94:	8bfb      	ldrh	r3, [r7, #30]
 800ca96:	e0b7      	b.n	800cc08 <rfalNfcaPollerFullCollisionResolution+0x22e>
        
        /* T1T doesn't support Anticollision */
        *devCnt = 1;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	701a      	strb	r2, [r3, #0]
        nfcaDevList->isSleep   = false;
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	2200      	movs	r2, #0
 800caa2:	755a      	strb	r2, [r3, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2201      	movs	r2, #1
 800caa8:	701a      	strb	r2, [r3, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	2204      	movs	r2, #4
 800caae:	711a      	strb	r2, [r3, #4]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	3305      	adds	r3, #5
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	3211      	adds	r2, #17
 800cab8:	6812      	ldr	r2, [r2, #0]
 800caba:	601a      	str	r2, [r3, #0]
        
        return ERR_NONE;
 800cabc:	2300      	movs	r3, #0
 800cabe:	e0a3      	b.n	800cc08 <rfalNfcaPollerFullCollisionResolution+0x22e>
    }    
    #endif /* RFAL_FEATURE_T1T */
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	f107 0318 	add.w	r3, r7, #24
 800cac6:	3201      	adds	r2, #1
 800cac8:	8812      	ldrh	r2, [r2, #0]
 800caca:	801a      	strh	r2, [r3, #0]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 800cacc:	7bbb      	ldrb	r3, [r7, #14]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d008      	beq.n	800cae4 <rfalNfcaPollerFullCollisionResolution+0x10a>
    {
        ST_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 800cad2:	7bbb      	ldrb	r3, [r7, #14]
 800cad4:	2216      	movs	r2, #22
 800cad6:	fb02 f303 	mul.w	r3, r2, r3
 800cada:	461a      	mov	r2, r3
 800cadc:	2100      	movs	r1, #0
 800cade:	68b8      	ldr	r0, [r7, #8]
 800cae0:	f004 fd46 	bl	8011570 <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	3301      	adds	r3, #1
 800cae8:	f107 0218 	add.w	r2, r7, #24
 800caec:	8812      	ldrh	r2, [r2, #0]
 800caee:	801a      	strh	r2, [r3, #0]
    /*******************************************************************************/
    do
    {
        uint8_t newDeviceType;
        
        EXIT_ON_ERR( ret, rfalNfcaPollerSingleCollisionResolution( devLimit, &collPending, &nfcaDevList[*devCnt].selRes, (uint8_t*)&nfcaDevList[*devCnt].nfcId1, (uint8_t*)&nfcaDevList[*devCnt].nfcId1Len ) );
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	461a      	mov	r2, r3
 800caf6:	2316      	movs	r3, #22
 800caf8:	fb02 f303 	mul.w	r3, r2, r3
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	4413      	add	r3, r2
 800cb00:	1cdc      	adds	r4, r3, #3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	461a      	mov	r2, r3
 800cb08:	2316      	movs	r3, #22
 800cb0a:	fb02 f303 	mul.w	r3, r2, r3
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	4413      	add	r3, r2
 800cb12:	1d5d      	adds	r5, r3, #5
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	2316      	movs	r3, #22
 800cb1c:	fb02 f303 	mul.w	r3, r2, r3
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	4413      	add	r3, r2
 800cb24:	3304      	adds	r3, #4
 800cb26:	f107 011c 	add.w	r1, r7, #28
 800cb2a:	7bb8      	ldrb	r0, [r7, #14]
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	462b      	mov	r3, r5
 800cb30:	4622      	mov	r2, r4
 800cb32:	f7ff fd84 	bl	800c63e <rfalNfcaPollerSingleCollisionResolution>
 800cb36:	4603      	mov	r3, r0
 800cb38:	83fb      	strh	r3, [r7, #30]
 800cb3a:	8bfb      	ldrh	r3, [r7, #30]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <rfalNfcaPollerFullCollisionResolution+0x16a>
 800cb40:	8bfb      	ldrh	r3, [r7, #30]
 800cb42:	e061      	b.n	800cc08 <rfalNfcaPollerFullCollisionResolution+0x22e>
        
        /* Assign Listen Device */
        newDeviceType = ((uint8_t)nfcaDevList[*devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	461a      	mov	r2, r3
 800cb4a:	2316      	movs	r3, #22
 800cb4c:	fb02 f303 	mul.w	r3, r2, r3
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	4413      	add	r3, r2
 800cb54:	78db      	ldrb	r3, [r3, #3]
 800cb56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cb5a:	777b      	strb	r3, [r7, #29]
        /* PRQA S 4342 1 # MISRA 10.5 - Guaranteed that no invalid enum values are created: see guard_eq_RFAL_NFCA_T2T, .... */
        nfcaDevList[*devCnt].type    = (rfalNfcaListenDeviceType) (newDeviceType);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	461a      	mov	r2, r3
 800cb62:	2316      	movs	r3, #22
 800cb64:	fb02 f303 	mul.w	r3, r2, r3
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	7f7a      	ldrb	r2, [r7, #29]
 800cb6e:	701a      	strb	r2, [r3, #0]
        nfcaDevList[*devCnt].isSleep = false;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	461a      	mov	r2, r3
 800cb76:	2316      	movs	r3, #22
 800cb78:	fb02 f303 	mul.w	r3, r2, r3
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	4413      	add	r3, r2
 800cb80:	2200      	movs	r2, #0
 800cb82:	755a      	strb	r2, [r3, #21]
        (*devCnt)++;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	701a      	strb	r2, [r3, #0]

        
        /* If a collision was detected and device counter is lower than limit  Activity 1.1  9.3.4.21 */
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	7bba      	ldrb	r2, [r7, #14]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d92a      	bls.n	800cbf0 <rfalNfcaPollerFullCollisionResolution+0x216>
 800cb9a:	7f3b      	ldrb	r3, [r7, #28]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d102      	bne.n	800cba6 <rfalNfcaPollerFullCollisionResolution+0x1cc>
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d024      	beq.n	800cbf0 <rfalNfcaPollerFullCollisionResolution+0x216>
        {
            /* Put this device to Sleep  Activity 1.1  9.3.4.22 */
            rfalNfcaPollerSleep();
 800cba6:	f000 f8a5 	bl	800ccf4 <rfalNfcaPollerSleep>
            nfcaDevList[(*devCnt - 1U)].isSleep = true;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	2316      	movs	r3, #22
 800cbb2:	fb02 f303 	mul.w	r3, r2, r3
 800cbb6:	3b16      	subs	r3, #22
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	4413      	add	r3, r2
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	755a      	strb	r2, [r3, #21]
            
            
            /* Send a new SENS_REQ to check for other cards  Activity 1.1  9.3.4.23 */
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &nfcaDevList[*devCnt].sensRes );
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	2316      	movs	r3, #22
 800cbc8:	fb02 f303 	mul.w	r3, r2, r3
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	4413      	add	r3, r2
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	2026      	movs	r0, #38	@ 0x26
 800cbd6:	f7ff fce9 	bl	800c5ac <rfalNfcaPollerCheckPresence>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 800cbde:	8bfb      	ldrh	r3, [r7, #30]
 800cbe0:	2b04      	cmp	r3, #4
 800cbe2:	d102      	bne.n	800cbea <rfalNfcaPollerFullCollisionResolution+0x210>
            {
                /* No more devices found, exit */
                collPending = false;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 800cbe8:	e004      	b.n	800cbf4 <rfalNfcaPollerFullCollisionResolution+0x21a>
            }
            else
            {
                /* Another device found, continue loop */
                collPending = true;
 800cbea:	2301      	movs	r3, #1
 800cbec:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 800cbee:	e001      	b.n	800cbf4 <rfalNfcaPollerFullCollisionResolution+0x21a>
            }
        }
        else
        {
            /* Exit loop */
            collPending = false;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	773b      	strb	r3, [r7, #28]
        }
    }while( (*devCnt < devLimit) && (collPending) );
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	7bba      	ldrb	r2, [r7, #14]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d903      	bls.n	800cc06 <rfalNfcaPollerFullCollisionResolution+0x22c>
 800cbfe:	7f3b      	ldrb	r3, [r7, #28]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f47f af75 	bne.w	800caf0 <rfalNfcaPollerFullCollisionResolution+0x116>
    
    return ERR_NONE;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3720      	adds	r7, #32
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bdb0      	pop	{r4, r5, r7, pc}

0800cc10 <rfalNfcaPollerSelect>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08c      	sub	sp, #48	@ 0x30
 800cc14:	af04      	add	r7, sp, #16
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	607a      	str	r2, [r7, #4]
 800cc1c:	72fb      	strb	r3, [r7, #11]
    uint8_t        nfcidOffset;
    uint16_t       rxLen;
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d005      	beq.n	800cc30 <rfalNfcaPollerSelect+0x20>
 800cc24:	7afb      	ldrb	r3, [r7, #11]
 800cc26:	2b0a      	cmp	r3, #10
 800cc28:	d802      	bhi.n	800cc30 <rfalNfcaPollerSelect+0x20>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d101      	bne.n	800cc34 <rfalNfcaPollerSelect+0x24>
    {
        return ERR_PARAM;
 800cc30:	2307      	movs	r3, #7
 800cc32:	e058      	b.n	800cce6 <rfalNfcaPollerSelect+0xd6>
    }
    
    
    /* Calculate Cascate Level */
    cl          = rfalNfcaNfcidLen2CL( nfcidLen );
 800cc34:	7afb      	ldrb	r3, [r7, #11]
 800cc36:	4a2e      	ldr	r2, [pc, #184]	@ (800ccf0 <rfalNfcaPollerSelect+0xe0>)
 800cc38:	fba2 2303 	umull	r2, r3, r2, r3
 800cc3c:	089b      	lsrs	r3, r3, #2
 800cc3e:	777b      	strb	r3, [r7, #29]
    nfcidOffset = 0;
 800cc40:	2300      	movs	r3, #0
 800cc42:	77bb      	strb	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 800cc44:	2300      	movs	r3, #0
 800cc46:	77fb      	strb	r3, [r7, #31]
 800cc48:	e048      	b.n	800ccdc <rfalNfcaPollerSelect+0xcc>
    {
        /* Assign SEL_CMD according to the CLn and SEL_PAR*/
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 800cc4a:	7ffb      	ldrb	r3, [r7, #31]
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	3b6d      	subs	r3, #109	@ 0x6d
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	743b      	strb	r3, [r7, #16]
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800cc56:	2370      	movs	r3, #112	@ 0x70
 800cc58:	747b      	strb	r3, [r7, #17]
        
        /* Compute NFCID/Data on the SEL_REQ command   Digital 1.1  Table 18 */
        if( cl != i )
 800cc5a:	7f7a      	ldrb	r2, [r7, #29]
 800cc5c:	7ffb      	ldrb	r3, [r7, #31]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d00f      	beq.n	800cc82 <rfalNfcaPollerSelect+0x72>
        {
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 800cc62:	2388      	movs	r3, #136	@ 0x88
 800cc64:	74bb      	strb	r3, [r7, #18]
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800cc66:	7fbb      	ldrb	r3, [r7, #30]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	18d1      	adds	r1, r2, r3
 800cc6c:	f107 0310 	add.w	r3, r7, #16
 800cc70:	3303      	adds	r3, #3
 800cc72:	2203      	movs	r2, #3
 800cc74:	4618      	mov	r0, r3
 800cc76:	f004 fcbf 	bl	80115f8 <memcpy>
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800cc7a:	7fbb      	ldrb	r3, [r7, #30]
 800cc7c:	3303      	adds	r3, #3
 800cc7e:	77bb      	strb	r3, [r7, #30]
 800cc80:	e005      	b.n	800cc8e <rfalNfcaPollerSelect+0x7e>
        }
        else
        {
            ST_MEMCPY( selReq.nfcid1, &nfcid1[nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 800cc82:	7fbb      	ldrb	r3, [r7, #30]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	4413      	add	r3, r2
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f8c7 3012 	str.w	r3, [r7, #18]
        }
        
        /* Calculate nfcid's BCC */
        selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 800cc8e:	f107 0310 	add.w	r3, r7, #16
 800cc92:	3302      	adds	r3, #2
 800cc94:	2104      	movs	r1, #4
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7ff fc44 	bl	800c524 <rfalNfcaCalculateBcc>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	75bb      	strb	r3, [r7, #22]
        
        /*******************************************************************************/
        /* Send SEL_REQ  */
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 800cca0:	f107 0010 	add.w	r0, r7, #16
 800cca4:	f240 6354 	movw	r3, #1620	@ 0x654
 800cca8:	9302      	str	r3, [sp, #8]
 800ccaa:	2300      	movs	r3, #0
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	f107 0318 	add.w	r3, r7, #24
 800ccb2:	9300      	str	r3, [sp, #0]
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	2107      	movs	r1, #7
 800ccba:	f002 f8c7 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	837b      	strh	r3, [r7, #26]
 800ccc2:	8b7b      	ldrh	r3, [r7, #26]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d001      	beq.n	800cccc <rfalNfcaPollerSelect+0xbc>
 800ccc8:	8b7b      	ldrh	r3, [r7, #26]
 800ccca:	e00c      	b.n	800cce6 <rfalNfcaPollerSelect+0xd6>
        
        /* Ensure proper response length */
        if( rxLen != sizeof(rfalNfcaSelRes) )
 800cccc:	8b3b      	ldrh	r3, [r7, #24]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d001      	beq.n	800ccd6 <rfalNfcaPollerSelect+0xc6>
        {
            return ERR_PROTO;
 800ccd2:	230b      	movs	r3, #11
 800ccd4:	e007      	b.n	800cce6 <rfalNfcaPollerSelect+0xd6>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 800ccd6:	7ffb      	ldrb	r3, [r7, #31]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	77fb      	strb	r3, [r7, #31]
 800ccdc:	7ffa      	ldrb	r2, [r7, #31]
 800ccde:	7f7b      	ldrb	r3, [r7, #29]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d9b2      	bls.n	800cc4a <rfalNfcaPollerSelect+0x3a>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return ERR_NONE;
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3720      	adds	r7, #32
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	cccccccd 	.word	0xcccccccd

0800ccf4 <rfalNfcaPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSleep( void )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af04      	add	r7, sp, #16
    rfalNfcaSlpReq slpReq;
    uint8_t        rxBuf;    /* dummy buffer, just to perform Rx */
    
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 800ccfa:	2350      	movs	r3, #80	@ 0x50
 800ccfc:	713b      	strb	r3, [r7, #4]
    slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	717b      	strb	r3, [r7, #5]
    
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 800cd02:	1cfa      	adds	r2, r7, #3
 800cd04:	1d38      	adds	r0, r7, #4
 800cd06:	f243 43f8 	movw	r3, #13560	@ 0x34f8
 800cd0a:	9302      	str	r3, [sp, #8]
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9301      	str	r3, [sp, #4]
 800cd10:	2300      	movs	r3, #0
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	2301      	movs	r3, #1
 800cd16:	2102      	movs	r1, #2
 800cd18:	f002 f898 	bl	800ee4c <rfalTransceiveBlockingTxRx>
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    
    return ERR_NONE;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <rfalNfcaListenerIsSleepReq>:


/*******************************************************************************/
bool rfalNfcaListenerIsSleepReq( const uint8_t *buf, uint16_t bufLen )
{
 800cd26:	b480      	push	{r7}
 800cd28:	b083      	sub	sp, #12
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	460b      	mov	r3, r1
 800cd30:	807b      	strh	r3, [r7, #2]
    /* Check if length and payload match */
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
 800cd32:	887b      	ldrh	r3, [r7, #2]
 800cd34:	2b02      	cmp	r3, #2
 800cd36:	d108      	bne.n	800cd4a <rfalNfcaListenerIsSleepReq+0x24>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	2b50      	cmp	r3, #80	@ 0x50
 800cd3e:	d104      	bne.n	800cd4a <rfalNfcaListenerIsSleepReq+0x24>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	3301      	adds	r3, #1
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <rfalNfcaListenerIsSleepReq+0x28>
    {
        return false;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	e000      	b.n	800cd50 <rfalNfcaListenerIsSleepReq+0x2a>
    }
    
    return true;
 800cd4e:	2301      	movs	r3, #1
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <rfalNfcbCheckSensbRes>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	460b      	mov	r3, r1
 800cd66:	70fb      	strb	r3, [r7, #3]
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 800cd68:	78fb      	ldrb	r3, [r7, #3]
 800cd6a:	2b0c      	cmp	r3, #12
 800cd6c:	d004      	beq.n	800cd78 <rfalNfcbCheckSensbRes+0x1c>
 800cd6e:	78fb      	ldrb	r3, [r7, #3]
 800cd70:	2b0d      	cmp	r3, #13
 800cd72:	d001      	beq.n	800cd78 <rfalNfcbCheckSensbRes+0x1c>
    {
        return ERR_PROTO;
 800cd74:	230b      	movs	r3, #11
 800cd76:	e00c      	b.n	800cd92 <rfalNfcbCheckSensbRes+0x36>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	7a9b      	ldrb	r3, [r3, #10]
 800cd7c:	f003 0308 	and.w	r3, r3, #8
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d103      	bne.n	800cd8c <rfalNfcbCheckSensbRes+0x30>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	2b50      	cmp	r3, #80	@ 0x50
 800cd8a:	d001      	beq.n	800cd90 <rfalNfcbCheckSensbRes+0x34>
    {
        return ERR_PROTO;
 800cd8c:	230b      	movs	r3, #11
 800cd8e:	e000      	b.n	800cd92 <rfalNfcbCheckSensbRes+0x36>
    }
    return ERR_NONE;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	370c      	adds	r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
	...

0800cda0 <rfalNfcbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 800cda6:	2200      	movs	r2, #0
 800cda8:	2100      	movs	r1, #0
 800cdaa:	2003      	movs	r0, #3
 800cdac:	f001 fa30 	bl	800e210 <rfalSetMode>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	80fb      	strh	r3, [r7, #6]
 800cdb4:	88fb      	ldrh	r3, [r7, #6]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d001      	beq.n	800cdbe <rfalNfcbPollerInitialize+0x1e>
 800cdba:	88fb      	ldrh	r3, [r7, #6]
 800cdbc:	e014      	b.n	800cde8 <rfalNfcbPollerInitialize+0x48>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800cdbe:	2001      	movs	r0, #1
 800cdc0:	f001 fdaa 	bl	800e918 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 800cdc4:	480a      	ldr	r0, [pc, #40]	@ (800cdf0 <rfalNfcbPollerInitialize+0x50>)
 800cdc6:	f001 fde1 	bl	800e98c <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 800cdca:	f44f 707c 	mov.w	r0, #1008	@ 0x3f0
 800cdce:	f001 fdc9 	bl	800e964 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 800cdd2:	f641 207c 	movw	r0, #6780	@ 0x1a7c
 800cdd6:	f001 fdaf 	bl	800e938 <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 800cdda:	4b06      	ldr	r3, [pc, #24]	@ (800cdf4 <rfalNfcbPollerInitialize+0x54>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	701a      	strb	r2, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
 800cde0:	4b04      	ldr	r3, [pc, #16]	@ (800cdf4 <rfalNfcbPollerInitialize+0x54>)
 800cde2:	2200      	movs	r2, #0
 800cde4:	705a      	strb	r2, [r3, #1]
    
    return ERR_NONE;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	000108d8 	.word	0x000108d8
 800cdf4:	20000c38 	.word	0x20000c38

0800cdf8 <rfalNfcbPollerCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08a      	sub	sp, #40	@ 0x28
 800cdfc:	af04      	add	r7, sp, #16
 800cdfe:	60ba      	str	r2, [r7, #8]
 800ce00:	607b      	str	r3, [r7, #4]
 800ce02:	4603      	mov	r3, r0
 800ce04:	73fb      	strb	r3, [r7, #15]
 800ce06:	460b      	mov	r3, r1
 800ce08:	73bb      	strb	r3, [r7, #14]
    ReturnCode       ret;
    rfalNfcbSensbReq sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 800ce0a:	7bfb      	ldrb	r3, [r7, #15]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d002      	beq.n	800ce16 <rfalNfcbPollerCheckPresence+0x1e>
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
 800ce12:	2b08      	cmp	r3, #8
 800ce14:	d108      	bne.n	800ce28 <rfalNfcbPollerCheckPresence+0x30>
 800ce16:	7bbb      	ldrb	r3, [r7, #14]
 800ce18:	2b04      	cmp	r3, #4
 800ce1a:	d805      	bhi.n	800ce28 <rfalNfcbPollerCheckPresence+0x30>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d002      	beq.n	800ce28 <rfalNfcbPollerCheckPresence+0x30>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d101      	bne.n	800ce2c <rfalNfcbPollerCheckPresence+0x34>
    {
        return ERR_PARAM;
 800ce28:	2307      	movs	r3, #7
 800ce2a:	e044      	b.n	800ceb6 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    *sensbResLen = 0;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	701a      	strb	r2, [r3, #0]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 800ce32:	220d      	movs	r2, #13
 800ce34:	2100      	movs	r1, #0
 800ce36:	68b8      	ldr	r0, [r7, #8]
 800ce38:	f004 fb9a 	bl	8011570 <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 800ce3c:	2305      	movs	r3, #5
 800ce3e:	743b      	strb	r3, [r7, #16]
    sensbReq.AFI   = gRfalNfcb.AFI;
 800ce40:	4b1f      	ldr	r3, [pc, #124]	@ (800cec0 <rfalNfcbPollerCheckPresence+0xc8>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	747b      	strb	r3, [r7, #17]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800ce46:	4b1e      	ldr	r3, [pc, #120]	@ (800cec0 <rfalNfcbPollerCheckPresence+0xc8>)
 800ce48:	785b      	ldrb	r3, [r3, #1]
 800ce4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	7bfb      	ldrb	r3, [r7, #15]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	b2da      	uxtb	r2, r3
 800ce56:	7bbb      	ldrb	r3, [r7, #14]
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	74bb      	strb	r3, [r7, #18]
    
    /* Send SENSB_REQ and disable AGC to detect collisions */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800ce5e:	f107 0010 	add.w	r0, r7, #16
 800ce62:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800ce66:	9302      	str	r3, [sp, #8]
 800ce68:	2300      	movs	r3, #0
 800ce6a:	9301      	str	r3, [sp, #4]
 800ce6c:	f107 0314 	add.w	r3, r7, #20
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	230d      	movs	r3, #13
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	2103      	movs	r1, #3
 800ce78:	f001 ffe8 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 800ce80:	8abb      	ldrh	r3, [r7, #20]
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	701a      	strb	r2, [r3, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800ce88:	8afb      	ldrh	r3, [r7, #22]
 800ce8a:	2b15      	cmp	r3, #21
 800ce8c:	d002      	beq.n	800ce94 <rfalNfcbPollerCheckPresence+0x9c>
 800ce8e:	8afb      	ldrh	r3, [r7, #22]
 800ce90:	2b09      	cmp	r3, #9
 800ce92:	d104      	bne.n	800ce9e <rfalNfcbPollerCheckPresence+0xa6>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        *sensbResLen = 0;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	e00b      	b.n	800ceb6 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    if( ret == ERR_NONE )
 800ce9e:	8afb      	ldrh	r3, [r7, #22]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d107      	bne.n	800ceb4 <rfalNfcbPollerCheckPresence+0xbc>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	68b8      	ldr	r0, [r7, #8]
 800ceac:	f7ff ff56 	bl	800cd5c <rfalNfcbCheckSensbRes>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	e000      	b.n	800ceb6 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    return ret;
 800ceb4:	8afb      	ldrh	r3, [r7, #22]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3718      	adds	r7, #24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	20000c38 	.word	0x20000c38

0800cec4 <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b08a      	sub	sp, #40	@ 0x28
 800cec8:	af04      	add	r7, sp, #16
 800ceca:	6078      	str	r0, [r7, #4]
    uint16_t        rxLen;
    ReturnCode      ret;
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <rfalNfcbPollerSleep+0x12>
    {
        return ERR_PARAM;
 800ced2:	2307      	movs	r3, #7
 800ced4:	e024      	b.n	800cf20 <rfalNfcbPollerSleep+0x5c>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800ced6:	2350      	movs	r3, #80	@ 0x50
 800ced8:	733b      	strb	r3, [r7, #12]
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f8c7 300d 	str.w	r3, [r7, #13]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 800cee2:	f107 0208 	add.w	r2, r7, #8
 800cee6:	f107 000c 	add.w	r0, r7, #12
 800ceea:	4b0f      	ldr	r3, [pc, #60]	@ (800cf28 <rfalNfcbPollerSleep+0x64>)
 800ceec:	9302      	str	r3, [sp, #8]
 800ceee:	2300      	movs	r3, #0
 800cef0:	9301      	str	r3, [sp, #4]
 800cef2:	f107 0314 	add.w	r3, r7, #20
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	2301      	movs	r3, #1
 800cefa:	2105      	movs	r1, #5
 800cefc:	f001 ffa6 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 800cf00:	4603      	mov	r3, r0
 800cf02:	82fb      	strh	r3, [r7, #22]
 800cf04:	8afb      	ldrh	r3, [r7, #22]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <rfalNfcbPollerSleep+0x4a>
 800cf0a:	8afb      	ldrh	r3, [r7, #22]
 800cf0c:	e008      	b.n	800cf20 <rfalNfcbPollerSleep+0x5c>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 800cf0e:	8abb      	ldrh	r3, [r7, #20]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d102      	bne.n	800cf1a <rfalNfcbPollerSleep+0x56>
 800cf14:	7a3b      	ldrb	r3, [r7, #8]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <rfalNfcbPollerSleep+0x5a>
    {
        return ERR_PROTO;
 800cf1a:	230b      	movs	r3, #11
 800cf1c:	e000      	b.n	800cf20 <rfalNfcbPollerSleep+0x5c>
    }
    return ERR_NONE;
 800cf1e:	2300      	movs	r3, #0
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3718      	adds	r7, #24
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	0003a278 	.word	0x0003a278

0800cf2c <rfalNfcbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b08a      	sub	sp, #40	@ 0x28
 800cf30:	af04      	add	r7, sp, #16
 800cf32:	4603      	mov	r3, r0
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	73fb      	strb	r3, [r7, #15]
    ReturnCode         ret;
    rfalNfcbSlotMarker slotMarker;
    uint16_t           rxLen;
    
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d008      	beq.n	800cf52 <rfalNfcbPollerSlotMarker+0x26>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d005      	beq.n	800cf52 <rfalNfcbPollerSlotMarker+0x26>
 800cf46:	7bfb      	ldrb	r3, [r7, #15]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d002      	beq.n	800cf52 <rfalNfcbPollerSlotMarker+0x26>
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
 800cf4e:	2b10      	cmp	r3, #16
 800cf50:	d901      	bls.n	800cf56 <rfalNfcbPollerSlotMarker+0x2a>
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return ERR_PARAM;
 800cf52:	2307      	movs	r3, #7
 800cf54:	e02f      	b.n	800cfb6 <rfalNfcbPollerSlotMarker+0x8a>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 800cf56:	7bfb      	ldrb	r3, [r7, #15]
 800cf58:	011b      	lsls	r3, r3, #4
 800cf5a:	b25b      	sxtb	r3, r3
 800cf5c:	f043 0305 	orr.w	r3, r3, #5
 800cf60:	b25b      	sxtb	r3, r3
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	753b      	strb	r3, [r7, #20]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 800cf66:	f107 0014 	add.w	r0, r7, #20
 800cf6a:	4b15      	ldr	r3, [pc, #84]	@ (800cfc0 <rfalNfcbPollerSlotMarker+0x94>)
 800cf6c:	9302      	str	r3, [sp, #8]
 800cf6e:	2300      	movs	r3, #0
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	f107 0312 	add.w	r3, r7, #18
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	230d      	movs	r3, #13
 800cf7a:	68ba      	ldr	r2, [r7, #8]
 800cf7c:	2101      	movs	r1, #1
 800cf7e:	f001 ff65 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 800cf82:	4603      	mov	r3, r0
 800cf84:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 800cf86:	8a7b      	ldrh	r3, [r7, #18]
 800cf88:	b2da      	uxtb	r2, r3
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	701a      	strb	r2, [r3, #0]
    
    /* Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800cf8e:	8afb      	ldrh	r3, [r7, #22]
 800cf90:	2b15      	cmp	r3, #21
 800cf92:	d002      	beq.n	800cf9a <rfalNfcbPollerSlotMarker+0x6e>
 800cf94:	8afb      	ldrh	r3, [r7, #22]
 800cf96:	2b09      	cmp	r3, #9
 800cf98:	d101      	bne.n	800cf9e <rfalNfcbPollerSlotMarker+0x72>
    {
        return ERR_RF_COLLISION;
 800cf9a:	231d      	movs	r3, #29
 800cf9c:	e00b      	b.n	800cfb6 <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    if( ret == ERR_NONE )
 800cf9e:	8afb      	ldrh	r3, [r7, #22]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d107      	bne.n	800cfb4 <rfalNfcbPollerSlotMarker+0x88>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	68b8      	ldr	r0, [r7, #8]
 800cfac:	f7ff fed6 	bl	800cd5c <rfalNfcbCheckSensbRes>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	e000      	b.n	800cfb6 <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    return ret;
 800cfb4:	8afb      	ldrh	r3, [r7, #22]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3718      	adds	r7, #24
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	0003a278 	.word	0x0003a278

0800cfc4 <rfalNfcbPollerTechnologyDetection>:


ReturnCode rfalNfcbPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	4603      	mov	r3, r0
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
 800cfd0:	73fb      	strb	r3, [r7, #15]
    NO_WARNING(compMode);
    
    return rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	2000      	movs	r0, #0
 800cfda:	f7ff ff0d 	bl	800cdf8 <rfalNfcbPollerCheckPresence>
 800cfde:	4603      	mov	r3, r0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <rfalNfcbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b08a      	sub	sp, #40	@ 0x28
 800cfec:	af04      	add	r7, sp, #16
 800cfee:	60ba      	str	r2, [r7, #8]
 800cff0:	607b      	str	r3, [r7, #4]
 800cff2:	4603      	mov	r3, r0
 800cff4:	73fb      	strb	r3, [r7, #15]
 800cff6:	460b      	mov	r3, r1
 800cff8:	73bb      	strb	r3, [r7, #14]
    bool colPending; /* dummy */
    return rfalNfcbPollerSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &colPending );
 800cffa:	7bb9      	ldrb	r1, [r7, #14]
 800cffc:	7bf8      	ldrb	r0, [r7, #15]
 800cffe:	f107 0317 	add.w	r3, r7, #23
 800d002:	9302      	str	r3, [sp, #8]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	9301      	str	r3, [sp, #4]
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	2304      	movs	r3, #4
 800d00e:	2200      	movs	r2, #0
 800d010:	f000 f805 	bl	800d01e <rfalNfcbPollerSlottedCollisionResolution>
 800d014:	4603      	mov	r3, r0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3718      	adds	r7, #24
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <rfalNfcbPollerSlottedCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 800d01e:	b590      	push	{r4, r7, lr}
 800d020:	b085      	sub	sp, #20
 800d022:	af00      	add	r7, sp, #0
 800d024:	4604      	mov	r4, r0
 800d026:	4608      	mov	r0, r1
 800d028:	4611      	mov	r1, r2
 800d02a:	461a      	mov	r2, r3
 800d02c:	4623      	mov	r3, r4
 800d02e:	71fb      	strb	r3, [r7, #7]
 800d030:	4603      	mov	r3, r0
 800d032:	71bb      	strb	r3, [r7, #6]
 800d034:	460b      	mov	r3, r1
 800d036:	717b      	strb	r3, [r7, #5]
 800d038:	4613      	mov	r3, r2
 800d03a:	713b      	strb	r3, [r7, #4]
        uint8_t       slotCode;
        uint8_t       curDevCnt;
        
        
        /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
        if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 800d03c:	6a3b      	ldr	r3, [r7, #32]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d011      	beq.n	800d066 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800d042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00e      	beq.n	800d066 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800d048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00b      	beq.n	800d066 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800d04e:	797b      	ldrb	r3, [r7, #5]
 800d050:	2b04      	cmp	r3, #4
 800d052:	d808      	bhi.n	800d066 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800d054:	793b      	ldrb	r3, [r7, #4]
 800d056:	2b04      	cmp	r3, #4
 800d058:	d805      	bhi.n	800d066 <rfalNfcbPollerSlottedCollisionResolution+0x48>
            (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 800d05a:	79fb      	ldrb	r3, [r7, #7]
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d104      	bne.n	800d06a <rfalNfcbPollerSlottedCollisionResolution+0x4c>
 800d060:	797b      	ldrb	r3, [r7, #5]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <rfalNfcbPollerSlottedCollisionResolution+0x4c>
        {
            return ERR_PARAM;
 800d066:	2307      	movs	r3, #7
 800d068:	e14c      	b.n	800d304 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        /* Initialise as no error in case Activity 1.0 where the previous SENSB_RES from technology detection should be used */
        ret         = ERR_NONE;
 800d06a:	2300      	movs	r3, #0
 800d06c:	81fb      	strh	r3, [r7, #14]
        *devCnt     = 0;
 800d06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d070:	2200      	movs	r2, #0
 800d072:	701a      	strb	r2, [r3, #0]
        curDevCnt   = 0;
 800d074:	2300      	movs	r3, #0
 800d076:	72fb      	strb	r3, [r7, #11]
        *colPending = false;
 800d078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07a:	2200      	movs	r2, #0
 800d07c:	701a      	strb	r2, [r3, #0]
           
        
        /* Send ALLB_REQ   Activity 1.1   9.3.5.2 and 9.3.5.3  (Symbol 1 and 2) */
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 800d07e:	79fb      	ldrb	r3, [r7, #7]
 800d080:	2b02      	cmp	r3, #2
 800d082:	d010      	beq.n	800d0a6 <rfalNfcbPollerSlottedCollisionResolution+0x88>
        {
           ret =  rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, initSlots, &nfcbDevList->sensbRes, &nfcbDevList->sensbResLen );
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	1c5a      	adds	r2, r3, #1
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	7979      	ldrb	r1, [r7, #5]
 800d08c:	2008      	movs	r0, #8
 800d08e:	f7ff feb3 	bl	800cdf8 <rfalNfcbPollerCheckPresence>
 800d092:	4603      	mov	r3, r0
 800d094:	81fb      	strh	r3, [r7, #14]
           if( (ret != ERR_NONE) && (initSlots == RFAL_NFCB_SLOT_NUM_1) )
 800d096:	89fb      	ldrh	r3, [r7, #14]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d004      	beq.n	800d0a6 <rfalNfcbPollerSlottedCollisionResolution+0x88>
 800d09c:	797b      	ldrb	r3, [r7, #5]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d101      	bne.n	800d0a6 <rfalNfcbPollerSlottedCollisionResolution+0x88>
           {
               return ret;
 800d0a2:	89fb      	ldrh	r3, [r7, #14]
 800d0a4:	e12e      	b.n	800d304 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
           }
        }

        
        /* Check if there was a transmission error on WUPB  EMVCo 2.6  9.3.3.1 */
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
 800d0a6:	79fb      	ldrb	r3, [r7, #7]
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d105      	bne.n	800d0b8 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d101      	bne.n	800d0b8 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
        {
            return ERR_FRAMING;
 800d0b4:	2309      	movs	r3, #9
 800d0b6:	e125      	b.n	800d304 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 800d0b8:	797b      	ldrb	r3, [r7, #5]
 800d0ba:	737b      	strb	r3, [r7, #13]
 800d0bc:	e11c      	b.n	800d2f8 <rfalNfcbPollerSlottedCollisionResolution+0x2da>
        {
            do {
                /* Activity 1.1  9.3.5.23  -  Symbol 22 */
                if( (compMode == RFAL_COMPLIANCE_MODE_NFC) && (curDevCnt != 0U) )
 800d0be:	79fb      	ldrb	r3, [r7, #7]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d11a      	bne.n	800d0fa <rfalNfcbPollerSlottedCollisionResolution+0xdc>
 800d0c4:	7afb      	ldrb	r3, [r7, #11]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d017      	beq.n	800d0fa <rfalNfcbPollerSlottedCollisionResolution+0xdc>
                {
                    rfalNfcbPollerSleep( nfcbDevList[(*devCnt-1U)].sensbRes.nfcid0 );
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	011b      	lsls	r3, r3, #4
 800d0d4:	1a9b      	subs	r3, r3, r2
 800d0d6:	3b0f      	subs	r3, #15
 800d0d8:	6a3a      	ldr	r2, [r7, #32]
 800d0da:	4413      	add	r3, r2
 800d0dc:	3302      	adds	r3, #2
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7ff fef0 	bl	800cec4 <rfalNfcbPollerSleep>
                    nfcbDevList[(*devCnt-1U)].isSleep = true;
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	011b      	lsls	r3, r3, #4
 800d0ee:	1a9b      	subs	r3, r3, r2
 800d0f0:	3b0f      	subs	r3, #15
 800d0f2:	6a3a      	ldr	r2, [r7, #32]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	739a      	strb	r2, [r3, #14]
                }
                
                /* Send SENSB_REQ with number of slots if not the first Activity 1.1  9.3.5.24  -  Symbol 23 */
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 800d0fa:	7b7a      	ldrb	r2, [r7, #13]
 800d0fc:	797b      	ldrb	r3, [r7, #5]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d103      	bne.n	800d10a <rfalNfcbPollerSlottedCollisionResolution+0xec>
 800d102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d017      	beq.n	800d13a <rfalNfcbPollerSlottedCollisionResolution+0x11c>
                {
                    /* PRQA S 4342 1 # MISRA 10.5 - Layout of rfalNfcbSlots and above loop guarantee that no invalid enum values are created. */
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	4613      	mov	r3, r2
 800d112:	011b      	lsls	r3, r3, #4
 800d114:	1a9b      	subs	r3, r3, r2
 800d116:	6a3a      	ldr	r2, [r7, #32]
 800d118:	4413      	add	r3, r2
 800d11a:	1c58      	adds	r0, r3, #1
 800d11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	461a      	mov	r2, r3
 800d122:	4613      	mov	r3, r2
 800d124:	011b      	lsls	r3, r3, #4
 800d126:	1a9b      	subs	r3, r3, r2
 800d128:	6a3a      	ldr	r2, [r7, #32]
 800d12a:	4413      	add	r3, r2
 800d12c:	7b79      	ldrb	r1, [r7, #13]
 800d12e:	4602      	mov	r2, r0
 800d130:	2000      	movs	r0, #0
 800d132:	f7ff fe61 	bl	800cdf8 <rfalNfcbPollerCheckPresence>
 800d136:	4603      	mov	r3, r0
 800d138:	81fb      	strh	r3, [r7, #14]
                }
                
                /* Activity 1.1  9.3.5.6  -  Symbol 5 */
                slotCode    = 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	733b      	strb	r3, [r7, #12]
                curDevCnt   = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	72fb      	strb	r3, [r7, #11]
                *colPending = false;
 800d142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d144:	2200      	movs	r2, #0
 800d146:	701a      	strb	r2, [r3, #0]

                do{
                    /* Activity 1.1  9.3.5.26  -  Symbol 25 */
                    if( slotCode != 0U )
 800d148:	7b3b      	ldrb	r3, [r7, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d017      	beq.n	800d17e <rfalNfcbPollerSlottedCollisionResolution+0x160>
                    {
                        ret = rfalNfcbPollerSlotMarker( slotCode, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 800d14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	4613      	mov	r3, r2
 800d156:	011b      	lsls	r3, r3, #4
 800d158:	1a9b      	subs	r3, r3, r2
 800d15a:	6a3a      	ldr	r2, [r7, #32]
 800d15c:	4413      	add	r3, r2
 800d15e:	1c59      	adds	r1, r3, #1
 800d160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	461a      	mov	r2, r3
 800d166:	4613      	mov	r3, r2
 800d168:	011b      	lsls	r3, r3, #4
 800d16a:	1a9b      	subs	r3, r3, r2
 800d16c:	6a3a      	ldr	r2, [r7, #32]
 800d16e:	4413      	add	r3, r2
 800d170:	461a      	mov	r2, r3
 800d172:	7b3b      	ldrb	r3, [r7, #12]
 800d174:	4618      	mov	r0, r3
 800d176:	f7ff fed9 	bl	800cf2c <rfalNfcbPollerSlotMarker>
 800d17a:	4603      	mov	r3, r0
 800d17c:	81fb      	strh	r3, [r7, #14]
                    }
                    
                    /* Activity 1.1  9.3.5.7 and 9.3.5.8  -  Symbol 6 */
                    if( ret != ERR_TIMEOUT )
 800d17e:	89fb      	ldrh	r3, [r7, #14]
 800d180:	2b04      	cmp	r3, #4
 800d182:	f000 809d 	beq.w	800d2c0 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                    {
                        /* Activity 1.1  9.3.5.8  -  Symbol 7 */
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 800d186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	461a      	mov	r2, r3
 800d18c:	4613      	mov	r3, r2
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	1a9b      	subs	r3, r3, r2
 800d192:	6a3a      	ldr	r2, [r7, #32]
 800d194:	4413      	add	r3, r2
 800d196:	1c58      	adds	r0, r3, #1
 800d198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	461a      	mov	r2, r3
 800d19e:	4613      	mov	r3, r2
 800d1a0:	011b      	lsls	r3, r3, #4
 800d1a2:	1a9b      	subs	r3, r3, r2
 800d1a4:	6a3a      	ldr	r2, [r7, #32]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	f7ff fdd6 	bl	800cd5c <rfalNfcbCheckSensbRes>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d177      	bne.n	800d2a6 <rfalNfcbPollerSlottedCollisionResolution+0x288>
 800d1b6:	89fb      	ldrh	r3, [r7, #14]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d174      	bne.n	800d2a6 <rfalNfcbPollerSlottedCollisionResolution+0x288>
                        {
                            nfcbDevList[*devCnt].isSleep = false;
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	011b      	lsls	r3, r3, #4
 800d1c6:	1a9b      	subs	r3, r3, r2
 800d1c8:	6a3a      	ldr	r2, [r7, #32]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	739a      	strb	r2, [r3, #14]
                            
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800d1d0:	79fb      	ldrb	r3, [r7, #7]
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d107      	bne.n	800d1e6 <rfalNfcbPollerSlottedCollisionResolution+0x1c8>
                            {
                                (*devCnt)++;
 800d1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e0:	701a      	strb	r2, [r3, #0]
                                return ret;
 800d1e2:	89fb      	ldrh	r3, [r7, #14]
 800d1e4:	e08e      	b.n	800d304 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_ISO )
 800d1e6:	79fb      	ldrb	r3, [r7, #7]
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d12b      	bne.n	800d244 <rfalNfcbPollerSlottedCollisionResolution+0x226>
                            {
                                /* Activity 1.0  9.3.5.8  -  Symbol 7 */
                                (*devCnt)++;
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	b2da      	uxtb	r2, r3
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f6:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 800d1f8:	7afb      	ldrb	r3, [r7, #11]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.0  9.3.5.10  -  Symbol 9 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	79ba      	ldrb	r2, [r7, #6]
 800d204:	429a      	cmp	r2, r3
 800d206:	d902      	bls.n	800d20e <rfalNfcbPollerSlottedCollisionResolution+0x1f0>
 800d208:	7b7b      	ldrb	r3, [r7, #13]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d101      	bne.n	800d212 <rfalNfcbPollerSlottedCollisionResolution+0x1f4>
                                {
                                    return ret;
 800d20e:	89fb      	ldrh	r3, [r7, #14]
 800d210:	e078      	b.n	800d304 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                                }

                                /* Activity 1.0  9.3.5.11  -  Symbol 10 */
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 800d212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	461a      	mov	r2, r3
 800d218:	4613      	mov	r3, r2
 800d21a:	011b      	lsls	r3, r3, #4
 800d21c:	1a9b      	subs	r3, r3, r2
 800d21e:	3b0f      	subs	r3, #15
 800d220:	6a3a      	ldr	r2, [r7, #32]
 800d222:	4413      	add	r3, r2
 800d224:	3302      	adds	r3, #2
 800d226:	4618      	mov	r0, r3
 800d228:	f7ff fe4c 	bl	800cec4 <rfalNfcbPollerSleep>
                                nfcbDevList[*devCnt-1U].isSleep =  true;
 800d22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	461a      	mov	r2, r3
 800d232:	4613      	mov	r3, r2
 800d234:	011b      	lsls	r3, r3, #4
 800d236:	1a9b      	subs	r3, r3, r2
 800d238:	3b0f      	subs	r3, #15
 800d23a:	6a3a      	ldr	r2, [r7, #32]
 800d23c:	4413      	add	r3, r2
 800d23e:	2201      	movs	r2, #1
 800d240:	739a      	strb	r2, [r3, #14]
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800d242:	e03c      	b.n	800d2be <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d139      	bne.n	800d2be <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            {
                                /* Activity 1.1  9.3.5.10 and 9.3.5.11  -  Symbol 9 and Symbol 11*/
                                if(curDevCnt != 0U)
 800d24a:	7afb      	ldrb	r3, [r7, #11]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d017      	beq.n	800d280 <rfalNfcbPollerSlottedCollisionResolution+0x262>
                                {
                                    rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 800d250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	461a      	mov	r2, r3
 800d256:	4613      	mov	r3, r2
 800d258:	011b      	lsls	r3, r3, #4
 800d25a:	1a9b      	subs	r3, r3, r2
 800d25c:	3b0f      	subs	r3, #15
 800d25e:	6a3a      	ldr	r2, [r7, #32]
 800d260:	4413      	add	r3, r2
 800d262:	3302      	adds	r3, #2
 800d264:	4618      	mov	r0, r3
 800d266:	f7ff fe2d 	bl	800cec4 <rfalNfcbPollerSleep>
                                    nfcbDevList[*devCnt-1U].isSleep = true;
 800d26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	461a      	mov	r2, r3
 800d270:	4613      	mov	r3, r2
 800d272:	011b      	lsls	r3, r3, #4
 800d274:	1a9b      	subs	r3, r3, r2
 800d276:	3b0f      	subs	r3, #15
 800d278:	6a3a      	ldr	r2, [r7, #32]
 800d27a:	4413      	add	r3, r2
 800d27c:	2201      	movs	r2, #1
 800d27e:	739a      	strb	r2, [r3, #14]
                                }
                                
                                /* Activity 1.1  9.3.5.12  -  Symbol 11 */
                                (*devCnt)++;
 800d280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	3301      	adds	r3, #1
 800d286:	b2da      	uxtb	r2, r3
 800d288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28a:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 800d28c:	7afb      	ldrb	r3, [r7, #11]
 800d28e:	3301      	adds	r3, #1
 800d290:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.1  9.3.5.6  -  Symbol 13 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800d292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	79ba      	ldrb	r2, [r7, #6]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d902      	bls.n	800d2a2 <rfalNfcbPollerSlottedCollisionResolution+0x284>
 800d29c:	7b7b      	ldrb	r3, [r7, #13]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10d      	bne.n	800d2be <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                                {
                                    return ret;
 800d2a2:	89fb      	ldrh	r3, [r7, #14]
 800d2a4:	e02e      	b.n	800d304 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                        }
                        else
                        {
                            /* If deviceLimit is set to 0 the NFC Forum Device is configured to perform collision detection only  Activity 1.0 and 1.1  9.3.5.5  - Symbol 4 */
                            if( (devLimit == 0U) && (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800d2a6:	79bb      	ldrb	r3, [r7, #6]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d104      	bne.n	800d2b6 <rfalNfcbPollerSlottedCollisionResolution+0x298>
 800d2ac:	7b7b      	ldrb	r3, [r7, #13]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <rfalNfcbPollerSlottedCollisionResolution+0x298>
                            {
                                return ERR_RF_COLLISION;
 800d2b2:	231d      	movs	r3, #29
 800d2b4:	e026      	b.n	800d304 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            
                            /* Activity 1.1  9.3.5.9  -  Symbol 8 */
                            *colPending = true;
 800d2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	701a      	strb	r2, [r3, #0]
 800d2bc:	e000      	b.n	800d2c0 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800d2be:	bf00      	nop
                        }
                    }
                    
                    /* Activity 1.1  9.3.5.15  -  Symbol 14 */
                    slotCode++;
 800d2c0:	7b3b      	ldrb	r3, [r7, #12]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	733b      	strb	r3, [r7, #12]
                }
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 800d2c6:	7b7b      	ldrb	r3, [r7, #13]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	7b3a      	ldrb	r2, [r7, #12]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	f4ff af38 	bcc.w	800d148 <rfalNfcbPollerSlottedCollisionResolution+0x12a>
                
                /* Activity 1.1  9.3.5.17  -  Symbol 16 */
                if( !(*colPending) )
 800d2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	f083 0301 	eor.w	r3, r3, #1
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d001      	beq.n	800d2ea <rfalNfcbPollerSlottedCollisionResolution+0x2cc>
                {
                    return ERR_NONE;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	e00c      	b.n	800d304 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                }
            
            /* Activity 1.1  9.3.5.18  -  Symbol 17 */
            } while (curDevCnt != 0U);     /* If a collision is detected and card(s) were found on this loop keep the same number of available slots */
 800d2ea:	7afb      	ldrb	r3, [r7, #11]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f47f aee6 	bne.w	800d0be <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 800d2f2:	7b7b      	ldrb	r3, [r7, #13]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	737b      	strb	r3, [r7, #13]
 800d2f8:	7b7a      	ldrb	r2, [r7, #13]
 800d2fa:	793b      	ldrb	r3, [r7, #4]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	f67f aede 	bls.w	800d0be <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        }
        
        return ERR_NONE;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3714      	adds	r7, #20
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd90      	pop	{r4, r7, pc}

0800d30c <rfalNfcbTR2ToFDT>:


/*******************************************************************************/
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
 800d30c:	b480      	push	{r7}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	4603      	mov	r3, r0
 800d314:	71fb      	strb	r3, [r7, #7]
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 800d316:	4a0a      	ldr	r2, [pc, #40]	@ (800d340 <rfalNfcbTR2ToFDT+0x34>)
 800d318:	f107 0308 	add.w	r3, r7, #8
 800d31c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d320:	e883 0003 	stmia.w	r3, {r0, r1}
    /*******************************************************************************/

    return rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 800d324:	79fb      	ldrb	r3, [r7, #7]
 800d326:	f003 0303 	and.w	r3, r3, #3
 800d32a:	005b      	lsls	r3, r3, #1
 800d32c:	3310      	adds	r3, #16
 800d32e:	443b      	add	r3, r7
 800d330:	f833 3c08 	ldrh.w	r3, [r3, #-8]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	08012228 	.word	0x08012228

0800d344 <rfalNfcfComputeValidSENF>:
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
{
 800d344:	b5b0      	push	{r4, r5, r7, lr}
 800d346:	b08c      	sub	sp, #48	@ 0x30
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	4611      	mov	r1, r2
 800d350:	461a      	mov	r2, r3
 800d352:	460b      	mov	r3, r1
 800d354:	71fb      	strb	r3, [r7, #7]
 800d356:	4613      	mov	r3, r2
 800d358:	71bb      	strb	r3, [r7, #6]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 800d35a:	e0eb      	b.n	800d534 <rfalNfcfComputeValidSENF+0x1f0>
    {
        duplicate = false;
 800d35c:	2300      	movs	r3, #0
 800d35e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        gRfalNfcfGreedyF.pollFound--;
 800d362:	4b7b      	ldr	r3, [pc, #492]	@ (800d550 <rfalNfcfComputeValidSENF+0x20c>)
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	3b01      	subs	r3, #1
 800d368:	b2da      	uxtb	r2, r3
 800d36a:	4b79      	ldr	r3, [pc, #484]	@ (800d550 <rfalNfcfComputeValidSENF+0x20c>)
 800d36c:	701a      	strb	r2, [r3, #0]
        
        /* MISRA 11.3 - Cannot point directly into different object type, use local copy */
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 800d36e:	4b78      	ldr	r3, [pc, #480]	@ (800d550 <rfalNfcfComputeValidSENF+0x20c>)
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	461a      	mov	r2, r3
 800d374:	4613      	mov	r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	4413      	add	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4a74      	ldr	r2, [pc, #464]	@ (800d550 <rfalNfcfComputeValidSENF+0x20c>)
 800d37e:	4413      	add	r3, r2
 800d380:	3302      	adds	r3, #2
 800d382:	f107 0414 	add.w	r4, r7, #20
 800d386:	461d      	mov	r5, r3
 800d388:	6828      	ldr	r0, [r5, #0]
 800d38a:	6869      	ldr	r1, [r5, #4]
 800d38c:	68aa      	ldr	r2, [r5, #8]
 800d38e:	68eb      	ldr	r3, [r5, #12]
 800d390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d392:	8a2b      	ldrh	r3, [r5, #16]
 800d394:	7caa      	ldrb	r2, [r5, #18]
 800d396:	8023      	strh	r3, [r4, #0]
 800d398:	4613      	mov	r3, r2
 800d39a:	70a3      	strb	r3, [r4, #2]
        
        
        /* Point to received SENSF_RES */
        sensfBuf = &sensfCopy;
 800d39c:	f107 0314 	add.w	r3, r7, #20
 800d3a0:	62bb      	str	r3, [r7, #40]	@ 0x28
        
        
        /* Check for devices that are already in device list */
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d3a8:	e01b      	b.n	800d3e2 <rfalNfcfComputeValidSENF+0x9e>
        {
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 800d3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ac:	1c98      	adds	r0, r3, #2
 800d3ae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	00db      	lsls	r3, r3, #3
 800d3b6:	4413      	add	r3, r2
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	4413      	add	r3, r2
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	4413      	add	r3, r2
 800d3c0:	3302      	adds	r3, #2
 800d3c2:	2208      	movs	r2, #8
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	f004 f8a9 	bl	801151c <memcmp>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d103      	bne.n	800d3d8 <rfalNfcfComputeValidSENF+0x94>
            {
                duplicate = true;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                break;
 800d3d6:	e00a      	b.n	800d3ee <rfalNfcfComputeValidSENF+0xaa>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 800d3d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d3dc:	3301      	adds	r3, #1
 800d3de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d3dd      	bcc.n	800d3aa <rfalNfcfComputeValidSENF+0x66>
            }
        }
        
        /* If is a duplicate skip this (and not to overwrite)*/        
        if(duplicate && !overwrite)
 800d3ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d006      	beq.n	800d404 <rfalNfcfComputeValidSENF+0xc0>
 800d3f6:	79bb      	ldrb	r3, [r7, #6]
 800d3f8:	f083 0301 	eor.w	r3, r3, #1
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f040 8093 	bne.w	800d52a <rfalNfcfComputeValidSENF+0x1e6>
        {
            continue;
        }
        
        /* Check if response length is OK */
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 800d404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	3b02      	subs	r3, #2
 800d40a:	2b0f      	cmp	r3, #15
 800d40c:	f240 808f 	bls.w	800d52e <rfalNfcfComputeValidSENF+0x1ea>
 800d410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	3b02      	subs	r3, #2
 800d416:	2b12      	cmp	r3, #18
 800d418:	f200 8089 	bhi.w	800d52e <rfalNfcfComputeValidSENF+0x1ea>
        {
            continue;
        }
        
        /* Check if the response is a SENSF_RES / Polling response */
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 800d41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d41e:	785b      	ldrb	r3, [r3, #1]
 800d420:	2b01      	cmp	r3, #1
 800d422:	f040 8086 	bne.w	800d532 <rfalNfcfComputeValidSENF+0x1ee>
        {
            continue;
        }
        
        /* Check if is an overwrite request or new device*/
        if(duplicate && overwrite)
 800d426:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d02a      	beq.n	800d484 <rfalNfcfComputeValidSENF+0x140>
 800d42e:	79bb      	ldrb	r3, [r7, #6]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d027      	beq.n	800d484 <rfalNfcfComputeValidSENF+0x140>
        {
            /* overwrite deviceInfo/GRE_SENSF_RES with SENSF_RES */
            outDevInfo[tmpIdx].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 800d434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d436:	7819      	ldrb	r1, [r3, #0]
 800d438:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d43c:	4613      	mov	r3, r2
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	4413      	add	r3, r2
 800d442:	005b      	lsls	r3, r3, #1
 800d444:	4413      	add	r3, r2
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	4413      	add	r3, r2
 800d44a:	1e4a      	subs	r2, r1, #1
 800d44c:	b2d2      	uxtb	r2, r2
 800d44e:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[tmpIdx].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[tmpIdx].sensfResLen );
 800d450:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d454:	4613      	mov	r3, r2
 800d456:	00db      	lsls	r3, r3, #3
 800d458:	4413      	add	r3, r2
 800d45a:	005b      	lsls	r3, r3, #1
 800d45c:	4413      	add	r3, r2
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	4413      	add	r3, r2
 800d462:	1c58      	adds	r0, r3, #1
 800d464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d466:	1c59      	adds	r1, r3, #1
 800d468:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d46c:	4613      	mov	r3, r2
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	4413      	add	r3, r2
 800d472:	005b      	lsls	r3, r3, #1
 800d474:	4413      	add	r3, r2
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	4413      	add	r3, r2
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	461a      	mov	r2, r3
 800d47e:	f004 f8bb 	bl	80115f8 <memcpy>
            continue;
 800d482:	e057      	b.n	800d534 <rfalNfcfComputeValidSENF+0x1f0>
        }
        else
        {
            /* fill deviceInfo/GRE_SENSF_RES with new SENSF_RES */
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 800d484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d486:	7819      	ldrb	r1, [r3, #0]
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	461a      	mov	r2, r3
 800d48e:	4613      	mov	r3, r2
 800d490:	00db      	lsls	r3, r3, #3
 800d492:	4413      	add	r3, r2
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	4413      	add	r3, r2
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	4413      	add	r3, r2
 800d49c:	1e4a      	subs	r2, r1, #1
 800d49e:	b2d2      	uxtb	r2, r2
 800d4a0:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	00db      	lsls	r3, r3, #3
 800d4ac:	4413      	add	r3, r2
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	4413      	add	r3, r2
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	1c58      	adds	r0, r3, #1
 800d4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ba:	1c59      	adds	r1, r3, #1
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	00db      	lsls	r3, r3, #3
 800d4c6:	4413      	add	r3, r2
 800d4c8:	005b      	lsls	r3, r3, #1
 800d4ca:	4413      	add	r3, r2
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	f004 f890 	bl	80115f8 <memcpy>
        }
        
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	4613      	mov	r3, r2
 800d4e0:	00db      	lsls	r3, r3, #3
 800d4e2:	4413      	add	r3, r2
 800d4e4:	005b      	lsls	r3, r3, #1
 800d4e6:	4413      	add	r3, r2
 800d4e8:	68fa      	ldr	r2, [r7, #12]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	789b      	ldrb	r3, [r3, #2]
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d10e      	bne.n	800d510 <rfalNfcfComputeValidSENF+0x1cc>
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	00db      	lsls	r3, r3, #3
 800d4fc:	4413      	add	r3, r2
 800d4fe:	005b      	lsls	r3, r3, #1
 800d500:	4413      	add	r3, r2
 800d502:	68fa      	ldr	r2, [r7, #12]
 800d504:	4413      	add	r3, r2
 800d506:	78db      	ldrb	r3, [r3, #3]
 800d508:	2bfe      	cmp	r3, #254	@ 0xfe
 800d50a:	d101      	bne.n	800d510 <rfalNfcfComputeValidSENF+0x1cc>
 800d50c:	2301      	movs	r3, #1
 800d50e:	e000      	b.n	800d512 <rfalNfcfComputeValidSENF+0x1ce>
 800d510:	2300      	movs	r3, #0
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	b2da      	uxtb	r2, r3
 800d518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d51a:	701a      	strb	r2, [r3, #0]
                
        (*curDevIdx)++;
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	3301      	adds	r3, #1
 800d522:	b2da      	uxtb	r2, r3
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	701a      	strb	r2, [r3, #0]
 800d528:	e004      	b.n	800d534 <rfalNfcfComputeValidSENF+0x1f0>
            continue;
 800d52a:	bf00      	nop
 800d52c:	e002      	b.n	800d534 <rfalNfcfComputeValidSENF+0x1f0>
            continue;
 800d52e:	bf00      	nop
 800d530:	e000      	b.n	800d534 <rfalNfcfComputeValidSENF+0x1f0>
            continue;
 800d532:	bf00      	nop
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 800d534:	4b06      	ldr	r3, [pc, #24]	@ (800d550 <rfalNfcfComputeValidSENF+0x20c>)
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d005      	beq.n	800d548 <rfalNfcfComputeValidSENF+0x204>
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	79fa      	ldrb	r2, [r7, #7]
 800d542:	429a      	cmp	r2, r3
 800d544:	f63f af0a 	bhi.w	800d35c <rfalNfcfComputeValidSENF+0x18>
    }
}
 800d548:	bf00      	nop
 800d54a:	3730      	adds	r7, #48	@ 0x30
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bdb0      	pop	{r4, r5, r7, pc}
 800d550:	20000c3c 	.word	0x20000c3c

0800d554 <rfalNfcfPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	4603      	mov	r3, r0
 800d55c:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 800d55e:	79fb      	ldrb	r3, [r7, #7]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d004      	beq.n	800d56e <rfalNfcfPollerInitialize+0x1a>
 800d564:	79fb      	ldrb	r3, [r7, #7]
 800d566:	2b02      	cmp	r3, #2
 800d568:	d001      	beq.n	800d56e <rfalNfcfPollerInitialize+0x1a>
    {
        return ERR_PARAM;
 800d56a:	2307      	movs	r3, #7
 800d56c:	e01b      	b.n	800d5a6 <rfalNfcfPollerInitialize+0x52>
    }
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 800d56e:	79fa      	ldrb	r2, [r7, #7]
 800d570:	79fb      	ldrb	r3, [r7, #7]
 800d572:	4619      	mov	r1, r3
 800d574:	2006      	movs	r0, #6
 800d576:	f000 fe4b 	bl	800e210 <rfalSetMode>
 800d57a:	4603      	mov	r3, r0
 800d57c:	81fb      	strh	r3, [r7, #14]
 800d57e:	89fb      	ldrh	r3, [r7, #14]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d001      	beq.n	800d588 <rfalNfcfPollerInitialize+0x34>
 800d584:	89fb      	ldrh	r3, [r7, #14]
 800d586:	e00e      	b.n	800d5a6 <rfalNfcfPollerInitialize+0x52>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800d588:	2001      	movs	r0, #1
 800d58a:	f001 f9c5 	bl	800e918 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 800d58e:	4808      	ldr	r0, [pc, #32]	@ (800d5b0 <rfalNfcfPollerInitialize+0x5c>)
 800d590:	f001 f9fc 	bl	800e98c <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 800d594:	f44f 6027 	mov.w	r0, #2672	@ 0xa70
 800d598:	f001 f9e4 	bl	800e964 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 800d59c:	f44f 6027 	mov.w	r0, #2672	@ 0xa70
 800d5a0:	f001 f9ca 	bl	800e938 <rfalSetFDTPoll>
    
    return ERR_NONE;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	bf00      	nop
 800d5b0:	00042360 	.word	0x00042360

0800d5b4 <rfalNfcfPollerPoll>:



/*******************************************************************************/
ReturnCode rfalNfcfPollerPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes *cardList, uint8_t *devCnt, uint8_t *collisions )
{
 800d5b4:	b590      	push	{r4, r7, lr}
 800d5b6:	b087      	sub	sp, #28
 800d5b8:	af04      	add	r7, sp, #16
 800d5ba:	603b      	str	r3, [r7, #0]
 800d5bc:	4603      	mov	r3, r0
 800d5be:	71fb      	strb	r3, [r7, #7]
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	80bb      	strh	r3, [r7, #4]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	71bb      	strb	r3, [r7, #6]
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 800d5c8:	79fb      	ldrb	r3, [r7, #7]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	79bc      	ldrb	r4, [r7, #6]
 800d5d0:	88b9      	ldrh	r1, [r7, #4]
 800d5d2:	79f8      	ldrb	r0, [r7, #7]
 800d5d4:	69fa      	ldr	r2, [r7, #28]
 800d5d6:	9202      	str	r2, [sp, #8]
 800d5d8:	69ba      	ldr	r2, [r7, #24]
 800d5da:	9201      	str	r2, [sp, #4]
 800d5dc:	9300      	str	r3, [sp, #0]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	4622      	mov	r2, r4
 800d5e2:	f002 fe6d 	bl	80102c0 <rfalFeliCaPoll>
 800d5e6:	4603      	mov	r3, r0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd90      	pop	{r4, r7, pc}

0800d5f0 <rfalNfcfPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheckPresence( void )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af04      	add	r7, sp, #16
    gRfalNfcfGreedyF.pollFound     = 0;
 800d5f6:	4b0b      	ldr	r3, [pc, #44]	@ (800d624 <rfalNfcfPollerCheckPresence+0x34>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	701a      	strb	r2, [r3, #0]
    gRfalNfcfGreedyF.pollCollision = 0;
 800d5fc:	4b09      	ldr	r3, [pc, #36]	@ (800d624 <rfalNfcfPollerCheckPresence+0x34>)
 800d5fe:	2200      	movs	r2, #0
 800d600:	705a      	strb	r2, [r3, #1]
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800d602:	4b09      	ldr	r3, [pc, #36]	@ (800d628 <rfalNfcfPollerCheckPresence+0x38>)
 800d604:	9302      	str	r3, [sp, #8]
 800d606:	4b07      	ldr	r3, [pc, #28]	@ (800d624 <rfalNfcfPollerCheckPresence+0x34>)
 800d608:	9301      	str	r3, [sp, #4]
 800d60a:	2304      	movs	r3, #4
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	4b07      	ldr	r3, [pc, #28]	@ (800d62c <rfalNfcfPollerCheckPresence+0x3c>)
 800d610:	2200      	movs	r2, #0
 800d612:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d616:	2003      	movs	r0, #3
 800d618:	f002 fe52 	bl	80102c0 <rfalFeliCaPoll>
 800d61c:	4603      	mov	r3, r0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	20000c3c 	.word	0x20000c3c
 800d628:	20000c3d 	.word	0x20000c3d
 800d62c:	20000c3e 	.word	0x20000c3e

0800d630 <rfalNfcfPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b088      	sub	sp, #32
 800d634:	af02      	add	r7, sp, #8
 800d636:	60ba      	str	r2, [r7, #8]
 800d638:	607b      	str	r3, [r7, #4]
 800d63a:	4603      	mov	r3, r0
 800d63c:	73fb      	strb	r3, [r7, #15]
 800d63e:	460b      	mov	r3, r1
 800d640:	73bb      	strb	r3, [r7, #14]
    ReturnCode  ret;
    bool        nfcDepFound;
    
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <rfalNfcfPollerCollisionResolution+0x1e>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d101      	bne.n	800d652 <rfalNfcfPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 800d64e:	2307      	movs	r3, #7
 800d650:	e053      	b.n	800d6fa <rfalNfcfPollerCollisionResolution+0xca>
    }
            
    *devCnt      = 0;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	701a      	strb	r2, [r3, #0]
    nfcDepFound  = false;
 800d658:	2300      	movs	r3, #0
 800d65a:	757b      	strb	r3, [r7, #21]
    /* ACTIVITY 1.1 - 9.3.63.59 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 800d65c:	7bbb      	ldrb	r3, [r7, #14]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <rfalNfcfPollerCollisionResolution+0x36>
 800d662:	7bba      	ldrb	r2, [r7, #14]
 800d664:	e000      	b.n	800d668 <rfalNfcfPollerCollisionResolution+0x38>
 800d666:	2204      	movs	r2, #4
 800d668:	f107 0315 	add.w	r3, r7, #21
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	2300      	movs	r3, #0
 800d670:	6879      	ldr	r1, [r7, #4]
 800d672:	68b8      	ldr	r0, [r7, #8]
 800d674:	f7ff fe66 	bl	800d344 <rfalNfcfComputeValidSENF>
    /*******************************************************************************/
    /* ACTIVITY 1.0 - 9.3.6.4                                                      */
    /* ACTIVITY 1.1 - 9.3.63.60 Check if devices found are lower than the limit    */
    /* and send a SENSF_REQ if so                                                  */
    /*******************************************************************************/
    if( *devCnt < devLimit )
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	7bba      	ldrb	r2, [r7, #14]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d93a      	bls.n	800d6f8 <rfalNfcfPollerCollisionResolution+0xc8>
    {
        /* ACTIVITY 1.0 - 9.3.6.5  Copy valid SENSF_RES and then to remove it
         * ACTIVITY 1.1 - 9.3.6.65 Copy and filter duplicates                                           
         * For now, due to some devices keep generating different nfcid2, we use 1.0  
         * Phones detected: Samsung Galaxy Nexus,Samsung Galaxy S3,Samsung Nexus S */
        *devCnt = 0;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	701a      	strb	r2, [r3, #0]
        
        ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800d688:	4b1e      	ldr	r3, [pc, #120]	@ (800d704 <rfalNfcfPollerCollisionResolution+0xd4>)
 800d68a:	9301      	str	r3, [sp, #4]
 800d68c:	4b1e      	ldr	r3, [pc, #120]	@ (800d708 <rfalNfcfPollerCollisionResolution+0xd8>)
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	4b1e      	ldr	r3, [pc, #120]	@ (800d70c <rfalNfcfPollerCollisionResolution+0xdc>)
 800d692:	2200      	movs	r2, #0
 800d694:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d698:	200f      	movs	r0, #15
 800d69a:	f7ff ff8b 	bl	800d5b4 <rfalNfcfPollerPoll>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	82fb      	strh	r3, [r7, #22]
        if( ret == ERR_NONE )
 800d6a2:	8afb      	ldrh	r3, [r7, #22]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d108      	bne.n	800d6ba <rfalNfcfPollerCollisionResolution+0x8a>
        {
            rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, false, &nfcDepFound );
 800d6a8:	7bba      	ldrb	r2, [r7, #14]
 800d6aa:	f107 0315 	add.w	r3, r7, #21
 800d6ae:	9300      	str	r3, [sp, #0]
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	6879      	ldr	r1, [r7, #4]
 800d6b4:	68b8      	ldr	r0, [r7, #8]
 800d6b6:	f7ff fe45 	bl	800d344 <rfalNfcfComputeValidSENF>
        }
      
      /*******************************************************************************/
      /* ACTIVITY 1.1 -  9.3.6.63 Check if any device supports NFC DEP               */
      /*******************************************************************************/
      if( nfcDepFound && (compMode == RFAL_COMPLIANCE_MODE_NFC) )
 800d6ba:	7d7b      	ldrb	r3, [r7, #21]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d01b      	beq.n	800d6f8 <rfalNfcfPollerCollisionResolution+0xc8>
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d118      	bne.n	800d6f8 <rfalNfcfPollerCollisionResolution+0xc8>
      {
          ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_SYSTEM_CODE, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800d6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d704 <rfalNfcfPollerCollisionResolution+0xd4>)
 800d6c8:	9301      	str	r3, [sp, #4]
 800d6ca:	4b0f      	ldr	r3, [pc, #60]	@ (800d708 <rfalNfcfPollerCollisionResolution+0xd8>)
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d70c <rfalNfcfPollerCollisionResolution+0xdc>)
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d6d6:	200f      	movs	r0, #15
 800d6d8:	f7ff ff6c 	bl	800d5b4 <rfalNfcfPollerPoll>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	82fb      	strh	r3, [r7, #22]
          if( ret == ERR_NONE )
 800d6e0:	8afb      	ldrh	r3, [r7, #22]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d108      	bne.n	800d6f8 <rfalNfcfPollerCollisionResolution+0xc8>
          {
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
 800d6e6:	7bba      	ldrb	r2, [r7, #14]
 800d6e8:	f107 0315 	add.w	r3, r7, #21
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	6879      	ldr	r1, [r7, #4]
 800d6f2:	68b8      	ldr	r0, [r7, #8]
 800d6f4:	f7ff fe26 	bl	800d344 <rfalNfcfComputeValidSENF>
          }
      }
    }
    
    return ERR_NONE;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3718      	adds	r7, #24
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	20000c3d 	.word	0x20000c3d
 800d708:	20000c3c 	.word	0x20000c3c
 800d70c:	20000c3e 	.word	0x20000c3e

0800d710 <rfalNfcfPollerCheck>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheck( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvdLen )
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b0a0      	sub	sp, #128	@ 0x80
 800d714:	af04      	add	r7, sp, #16
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
 800d71c:	807b      	strh	r3, [r7, #2]
    uint8_t    i;
    ReturnCode ret;
    uint8_t    *checkRes;
    
    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d018      	beq.n	800d756 <rfalNfcfPollerCheck+0x46>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d015      	beq.n	800d756 <rfalNfcfPollerCheck+0x46>
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d012      	beq.n	800d756 <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00e      	beq.n	800d756 <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	7a1b      	ldrb	r3, [r3, #8]
 800d73c:	2b0f      	cmp	r3, #15
 800d73e:	d80a      	bhi.n	800d756 <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 800d744:	2b00      	cmp	r3, #0
 800d746:	d006      	beq.n	800d756 <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	2b0f      	cmp	r3, #15
 800d74e:	d802      	bhi.n	800d756 <rfalNfcfPollerCheck+0x46>
 800d750:	887b      	ldrh	r3, [r7, #2]
 800d752:	2b0b      	cmp	r3, #11
 800d754:	d801      	bhi.n	800d75a <rfalNfcfPollerCheck+0x4a>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECK_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 800d756:	2307      	movs	r3, #7
 800d758:	e110      	b.n	800d97c <rfalNfcfPollerCheck+0x26c>
    }
    
    msgIt = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    
    /*******************************************************************************/
    /* Compose CHECK command/request                                               */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 800d760:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d764:	1c5a      	adds	r2, r3, #1
 800d766:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 800d76a:	3370      	adds	r3, #112	@ 0x70
 800d76c:	443b      	add	r3, r7
 800d76e:	2206      	movs	r2, #6
 800d770:	f803 2c60 	strb.w	r2, [r3, #-96]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 800d774:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d778:	f107 0210 	add.w	r2, r7, #16
 800d77c:	4413      	add	r3, r2
 800d77e:	2208      	movs	r2, #8
 800d780:	68f9      	ldr	r1, [r7, #12]
 800d782:	4618      	mov	r0, r3
 800d784:	f003 ff38 	bl	80115f8 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 800d788:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d78c:	3308      	adds	r3, #8
 800d78e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 800d792:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d796:	1c5a      	adds	r2, r3, #1
 800d798:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 800d79c:	4619      	mov	r1, r3
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	781a      	ldrb	r2, [r3, #0]
 800d7a2:	f101 0370 	add.w	r3, r1, #112	@ 0x70
 800d7a6:	443b      	add	r3, r7
 800d7a8:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800d7b2:	e028      	b.n	800d806 <rfalNfcfPollerCheck+0xf6>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	685a      	ldr	r2, [r3, #4]
 800d7b8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	4413      	add	r3, r2
 800d7c0:	881a      	ldrh	r2, [r3, #0]
 800d7c2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d7c6:	1c59      	adds	r1, r3, #1
 800d7c8:	f887 106f 	strb.w	r1, [r7, #111]	@ 0x6f
 800d7cc:	b2d2      	uxtb	r2, r2
 800d7ce:	3370      	adds	r3, #112	@ 0x70
 800d7d0:	443b      	add	r3, r7
 800d7d2:	f803 2c60 	strb.w	r2, [r3, #-96]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	685a      	ldr	r2, [r3, #4]
 800d7da:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800d7de:	005b      	lsls	r3, r3, #1
 800d7e0:	4413      	add	r3, r2
 800d7e2:	881b      	ldrh	r3, [r3, #0]
 800d7e4:	0a1b      	lsrs	r3, r3, #8
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d7ec:	1c59      	adds	r1, r3, #1
 800d7ee:	f887 106f 	strb.w	r1, [r7, #111]	@ 0x6f
 800d7f2:	b2d2      	uxtb	r2, r2
 800d7f4:	3370      	adds	r3, #112	@ 0x70
 800d7f6:	443b      	add	r3, r7
 800d7f8:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 800d7fc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800d800:	3301      	adds	r3, #1
 800d802:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800d80e:	429a      	cmp	r2, r3
 800d810:	d3d0      	bcc.n	800d7b4 <rfalNfcfPollerCheck+0xa4>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 800d812:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d816:	1c5a      	adds	r2, r3, #1
 800d818:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 800d81c:	4619      	mov	r1, r3
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	7a1a      	ldrb	r2, [r3, #8]
 800d822:	f101 0370 	add.w	r3, r1, #112	@ 0x70
 800d826:	443b      	add	r3, r7
 800d828:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 800d82c:	2300      	movs	r3, #0
 800d82e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800d832:	e054      	b.n	800d8de <rfalNfcfPollerCheck+0x1ce>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	68da      	ldr	r2, [r3, #12]
 800d838:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	441a      	add	r2, r3
 800d840:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d844:	1c59      	adds	r1, r3, #1
 800d846:	f887 106f 	strb.w	r1, [r7, #111]	@ 0x6f
 800d84a:	7812      	ldrb	r2, [r2, #0]
 800d84c:	3370      	adds	r3, #112	@ 0x70
 800d84e:	443b      	add	r3, r7
 800d850:	f803 2c60 	strb.w	r2, [r3, #-96]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	68da      	ldr	r2, [r3, #12]
 800d858:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	4413      	add	r3, r2
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	b25b      	sxtb	r3, r3
 800d864:	2b00      	cmp	r3, #0
 800d866:	da11      	bge.n	800d88c <rfalNfcfPollerCheck+0x17c>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	68da      	ldr	r2, [r3, #12]
 800d86c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4413      	add	r3, r2
 800d874:	885a      	ldrh	r2, [r3, #2]
 800d876:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d87a:	1c59      	adds	r1, r3, #1
 800d87c:	f887 106f 	strb.w	r1, [r7, #111]	@ 0x6f
 800d880:	b2d2      	uxtb	r2, r2
 800d882:	3370      	adds	r3, #112	@ 0x70
 800d884:	443b      	add	r3, r7
 800d886:	f803 2c60 	strb.w	r2, [r3, #-96]
 800d88a:	e023      	b.n	800d8d4 <rfalNfcfPollerCheck+0x1c4>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	68da      	ldr	r2, [r3, #12]
 800d890:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4413      	add	r3, r2
 800d898:	885a      	ldrh	r2, [r3, #2]
 800d89a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d89e:	1c59      	adds	r1, r3, #1
 800d8a0:	f887 106f 	strb.w	r1, [r7, #111]	@ 0x6f
 800d8a4:	b2d2      	uxtb	r2, r2
 800d8a6:	3370      	adds	r3, #112	@ 0x70
 800d8a8:	443b      	add	r3, r7
 800d8aa:	f803 2c60 	strb.w	r2, [r3, #-96]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	68da      	ldr	r2, [r3, #12]
 800d8b2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	4413      	add	r3, r2
 800d8ba:	885b      	ldrh	r3, [r3, #2]
 800d8bc:	0a1b      	lsrs	r3, r3, #8
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d8c4:	1c59      	adds	r1, r3, #1
 800d8c6:	f887 106f 	strb.w	r1, [r7, #111]	@ 0x6f
 800d8ca:	b2d2      	uxtb	r2, r2
 800d8cc:	3370      	adds	r3, #112	@ 0x70
 800d8ce:	443b      	add	r3, r7
 800d8d0:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 800d8d4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800d8d8:	3301      	adds	r3, #1
 800d8da:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	7a1b      	ldrb	r3, [r3, #8]
 800d8e2:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d3a4      	bcc.n	800d834 <rfalNfcfPollerCheck+0x124>
        }
    }
    
    /*******************************************************************************/
    /* Transceive CHECK command/request                                            */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 800d8ea:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d8ee:	b299      	uxth	r1, r3
 800d8f0:	887a      	ldrh	r2, [r7, #2]
 800d8f2:	f107 0010 	add.w	r0, r7, #16
 800d8f6:	4b23      	ldr	r3, [pc, #140]	@ (800d984 <rfalNfcfPollerCheck+0x274>)
 800d8f8:	9302      	str	r3, [sp, #8]
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	4613      	mov	r3, r2
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	f001 faa1 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 800d90a:	4603      	mov	r3, r0
 800d90c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    
    if( ret == ERR_NONE )
 800d910:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d914:	2b00      	cmp	r3, #0
 800d916:	d12f      	bne.n	800d978 <rfalNfcfPollerCheck+0x268>
    {
        /* Skip LEN byte */
        checkRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	3301      	adds	r3, #1
 800d91c:	66bb      	str	r3, [r7, #104]	@ 0x68
        
        /* Check response length */
        if( *rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 800d91e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d920:	881b      	ldrh	r3, [r3, #0]
 800d922:	2b0a      	cmp	r3, #10
 800d924:	d803      	bhi.n	800d92e <rfalNfcfPollerCheck+0x21e>
        {
            ret = ERR_PROTO;
 800d926:	230b      	movs	r3, #11
 800d928:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d92c:	e024      	b.n	800d978 <rfalNfcfPollerCheck+0x268>
        }
        /* Check for a valid response */
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 800d92e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	2b07      	cmp	r3, #7
 800d934:	d109      	bne.n	800d94a <rfalNfcfPollerCheck+0x23a>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 800d936:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d938:	3309      	adds	r3, #9
 800d93a:	781b      	ldrb	r3, [r3, #0]
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d104      	bne.n	800d94a <rfalNfcfPollerCheck+0x23a>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)        )
 800d940:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d942:	330a      	adds	r3, #10
 800d944:	781b      	ldrb	r3, [r3, #0]
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 800d946:	2b00      	cmp	r3, #0
 800d948:	d003      	beq.n	800d952 <rfalNfcfPollerCheck+0x242>
        {
            ret = ERR_REQUEST;
 800d94a:	2305      	movs	r3, #5
 800d94c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d950:	e012      	b.n	800d978 <rfalNfcfPollerCheck+0x268>
        }
        /* CHECK succesfull, remove header */
        else
        {
            (*rcvdLen) -= (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_NOB_POS);
 800d952:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d954:	881b      	ldrh	r3, [r3, #0]
 800d956:	3b0c      	subs	r3, #12
 800d958:	b29a      	uxth	r2, r3
 800d95a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d95c:	801a      	strh	r2, [r3, #0]
            
            if( *rcvdLen > 0U )
 800d95e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d960:	881b      	ldrh	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d008      	beq.n	800d978 <rfalNfcfPollerCheck+0x268>
            {
                ST_MEMMOVE( rxBuf, &checkRes[RFAL_NFCF_CHECKUPDATE_RES_NOB_POS], (*rcvdLen) );
 800d966:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d968:	f103 010b 	add.w	r1, r3, #11
 800d96c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	461a      	mov	r2, r3
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f003 fde2 	bl	801153c <memmove>
            }
        }
    }
    
    return ret;
 800d978:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3770      	adds	r7, #112	@ 0x70
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	02000010 	.word	0x02000010

0800d988 <rfalNfcvParseError>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcvParseError( uint8_t err )
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	4603      	mov	r3, r0
 800d990:	71fb      	strb	r3, [r7, #7]
    switch(err)
 800d992:	79fb      	ldrb	r3, [r7, #7]
 800d994:	3b01      	subs	r3, #1
 800d996:	2b12      	cmp	r3, #18
 800d998:	d82e      	bhi.n	800d9f8 <rfalNfcvParseError+0x70>
 800d99a:	a201      	add	r2, pc, #4	@ (adr r2, 800d9a0 <rfalNfcvParseError+0x18>)
 800d99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a0:	0800d9ed 	.word	0x0800d9ed
 800d9a4:	0800d9f1 	.word	0x0800d9f1
 800d9a8:	0800d9ed 	.word	0x0800d9ed
 800d9ac:	0800d9f9 	.word	0x0800d9f9
 800d9b0:	0800d9f9 	.word	0x0800d9f9
 800d9b4:	0800d9f9 	.word	0x0800d9f9
 800d9b8:	0800d9f9 	.word	0x0800d9f9
 800d9bc:	0800d9f9 	.word	0x0800d9f9
 800d9c0:	0800d9f9 	.word	0x0800d9f9
 800d9c4:	0800d9f9 	.word	0x0800d9f9
 800d9c8:	0800d9f9 	.word	0x0800d9f9
 800d9cc:	0800d9f9 	.word	0x0800d9f9
 800d9d0:	0800d9f9 	.word	0x0800d9f9
 800d9d4:	0800d9f9 	.word	0x0800d9f9
 800d9d8:	0800d9f9 	.word	0x0800d9f9
 800d9dc:	0800d9f9 	.word	0x0800d9f9
 800d9e0:	0800d9f9 	.word	0x0800d9f9
 800d9e4:	0800d9f9 	.word	0x0800d9f9
 800d9e8:	0800d9f5 	.word	0x0800d9f5
    {
        case RFAL_NFCV_ERROR_CMD_NOT_SUPPORTED:
        case RFAL_NFCV_ERROR_OPTION_NOT_SUPPORTED:
            return ERR_NOTSUPP;
 800d9ec:	2318      	movs	r3, #24
 800d9ee:	e004      	b.n	800d9fa <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_CMD_NOT_RECOGNIZED:
            return ERR_PROTO;
 800d9f0:	230b      	movs	r3, #11
 800d9f2:	e002      	b.n	800d9fa <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_WRITE_FAILED:
            return ERR_WRITE;
 800d9f4:	2319      	movs	r3, #25
 800d9f6:	e000      	b.n	800d9fa <rfalNfcvParseError+0x72>
            
        default:
            return ERR_REQUEST;
 800d9f8:	2305      	movs	r3, #5
    }
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	370c      	adds	r7, #12
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop

0800da08 <rfalNfcvPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 800da0e:	22ec      	movs	r2, #236	@ 0xec
 800da10:	21ec      	movs	r1, #236	@ 0xec
 800da12:	2007      	movs	r0, #7
 800da14:	f000 fbfc 	bl	800e210 <rfalSetMode>
 800da18:	4603      	mov	r3, r0
 800da1a:	80fb      	strh	r3, [r7, #6]
 800da1c:	88fb      	ldrh	r3, [r7, #6]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <rfalNfcvPollerInitialize+0x1e>
 800da22:	88fb      	ldrh	r3, [r7, #6]
 800da24:	e00e      	b.n	800da44 <rfalNfcvPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800da26:	2001      	movs	r0, #1
 800da28:	f000 ff76 	bl	800e918 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 800da2c:	4807      	ldr	r0, [pc, #28]	@ (800da4c <rfalNfcvPollerInitialize+0x44>)
 800da2e:	f000 ffad 	bl	800e98c <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 800da32:	f241 00d6 	movw	r0, #4310	@ 0x10d6
 800da36:	f000 ff95 	bl	800e964 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 800da3a:	f44f 5083 	mov.w	r0, #4192	@ 0x1060
 800da3e:	f000 ff7b 	bl	800e938 <rfalSetFDTPoll>
    
    return ERR_NONE;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	000108d8 	.word	0x000108d8

0800da50 <rfalNfcvPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCheckPresence( rfalNfcvInventoryRes *invRes )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af02      	add	r7, sp, #8
 800da56:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    
    /* INVENTORY_REQ with 1 slot and no Mask   Activity 2.0 (Candidate) 9.2.3.32 */
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 800da58:	2300      	movs	r3, #0
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	2100      	movs	r1, #0
 800da62:	2020      	movs	r0, #32
 800da64:	f000 f815 	bl	800da92 <rfalNfcvPollerInventory>
 800da68:	4603      	mov	r3, r0
 800da6a:	81fb      	strh	r3, [r7, #14]
    
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 800da6c:	89fb      	ldrh	r3, [r7, #14]
 800da6e:	2b1d      	cmp	r3, #29
 800da70:	d008      	beq.n	800da84 <rfalNfcvPollerCheckPresence+0x34>
 800da72:	89fb      	ldrh	r3, [r7, #14]
 800da74:	2b15      	cmp	r3, #21
 800da76:	d005      	beq.n	800da84 <rfalNfcvPollerCheckPresence+0x34>
 800da78:	89fb      	ldrh	r3, [r7, #14]
 800da7a:	2b09      	cmp	r3, #9
 800da7c:	d002      	beq.n	800da84 <rfalNfcvPollerCheckPresence+0x34>
        (ret == ERR_FRAMING)      || (ret == ERR_PROTO)  )
 800da7e:	89fb      	ldrh	r3, [r7, #14]
 800da80:	2b0b      	cmp	r3, #11
 800da82:	d101      	bne.n	800da88 <rfalNfcvPollerCheckPresence+0x38>
    {
        ret = ERR_NONE;
 800da84:	2300      	movs	r3, #0
 800da86:	81fb      	strh	r3, [r7, #14]
    }
    
    return ret;
 800da88:	89fb      	ldrh	r3, [r7, #14]
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}

0800da92 <rfalNfcvPollerInventory>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b08c      	sub	sp, #48	@ 0x30
 800da96:	af02      	add	r7, sp, #8
 800da98:	60ba      	str	r2, [r7, #8]
 800da9a:	607b      	str	r3, [r7, #4]
 800da9c:	4603      	mov	r3, r0
 800da9e:	73fb      	strb	r3, [r7, #15]
 800daa0:	460b      	mov	r3, r1
 800daa2:	73bb      	strb	r3, [r7, #14]
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d102      	bne.n	800dab0 <rfalNfcvPollerInventory+0x1e>
 800daaa:	7bbb      	ldrb	r3, [r7, #14]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d102      	bne.n	800dab6 <rfalNfcvPollerInventory+0x24>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d101      	bne.n	800daba <rfalNfcvPollerInventory+0x28>
    {
        return ERR_PARAM;
 800dab6:	2307      	movs	r3, #7
 800dab8:	e04a      	b.n	800db50 <rfalNfcvPollerInventory+0xbe>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 800daba:	7bfb      	ldrb	r3, [r7, #15]
 800dabc:	f043 0306 	orr.w	r3, r3, #6
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	763b      	strb	r3, [r7, #24]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 800dac4:	2301      	movs	r3, #1
 800dac6:	767b      	strb	r3, [r7, #25]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 800dac8:	7bbb      	ldrb	r3, [r7, #14]
 800daca:	7bfa      	ldrb	r2, [r7, #15]
 800dacc:	2a20      	cmp	r2, #32
 800dace:	d101      	bne.n	800dad4 <rfalNfcvPollerInventory+0x42>
 800dad0:	2240      	movs	r2, #64	@ 0x40
 800dad2:	e000      	b.n	800dad6 <rfalNfcvPollerInventory+0x44>
 800dad4:	223c      	movs	r2, #60	@ 0x3c
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d806      	bhi.n	800dae8 <rfalNfcvPollerInventory+0x56>
 800dada:	7bfb      	ldrb	r3, [r7, #15]
 800dadc:	2b20      	cmp	r3, #32
 800dade:	d101      	bne.n	800dae4 <rfalNfcvPollerInventory+0x52>
 800dae0:	2340      	movs	r3, #64	@ 0x40
 800dae2:	e002      	b.n	800daea <rfalNfcvPollerInventory+0x58>
 800dae4:	233c      	movs	r3, #60	@ 0x3c
 800dae6:	e000      	b.n	800daea <rfalNfcvPollerInventory+0x58>
 800dae8:	7bbb      	ldrb	r3, [r7, #14]
 800daea:	76bb      	strb	r3, [r7, #26]
    
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 800daec:	7ebb      	ldrb	r3, [r7, #26]
 800daee:	3307      	adds	r3, #7
 800daf0:	08db      	lsrs	r3, r3, #3
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00b      	beq.n	800db10 <rfalNfcvPollerInventory+0x7e>
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 800daf8:	7ebb      	ldrb	r3, [r7, #26]
 800dafa:	3307      	adds	r3, #7
 800dafc:	08db      	lsrs	r3, r3, #3
 800dafe:	b29b      	uxth	r3, r3
 800db00:	461a      	mov	r2, r3
 800db02:	f107 0318 	add.w	r3, r7, #24
 800db06:	3303      	adds	r3, #3
 800db08:	68b9      	ldr	r1, [r7, #8]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f003 fd74 	bl	80115f8 <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 800db10:	7ebb      	ldrb	r3, [r7, #26]
 800db12:	3307      	adds	r3, #7
 800db14:	08db      	lsrs	r3, r3, #3
 800db16:	b2db      	uxtb	r3, r3
 800db18:	3303      	adds	r3, #3
 800db1a:	b2d9      	uxtb	r1, r3
 800db1c:	f107 0018 	add.w	r0, r7, #24
 800db20:	f107 0316 	add.w	r3, r7, #22
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	230c      	movs	r3, #12
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	f002 fb29 	bl	8010180 <rfalISO15693TransceiveAnticollisionFrame>
 800db2e:	4603      	mov	r3, r0
 800db30:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 800db32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <rfalNfcvPollerInventory+0xac>
    {
        *rcvdLen = rxLen;
 800db38:	8afa      	ldrh	r2, [r7, #22]
 800db3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3c:	801a      	strh	r2, [r3, #0]
    }
    
    if( ret == ERR_NONE )
 800db3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800db40:	2b00      	cmp	r3, #0
 800db42:	d104      	bne.n	800db4e <rfalNfcvPollerInventory+0xbc>
    {
        if( rxLen != rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800db44:	8afb      	ldrh	r3, [r7, #22]
 800db46:	2b60      	cmp	r3, #96	@ 0x60
 800db48:	d001      	beq.n	800db4e <rfalNfcvPollerInventory+0xbc>
        {
            return ERR_PROTO;
 800db4a:	230b      	movs	r3, #11
 800db4c:	e000      	b.n	800db50 <rfalNfcvPollerInventory+0xbe>
        }
    }
    
    return ret;
 800db4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 800db50:	4618      	mov	r0, r3
 800db52:	3728      	adds	r7, #40	@ 0x28
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b0ae      	sub	sp, #184	@ 0xb8
 800db5c:	af02      	add	r7, sp, #8
 800db5e:	60ba      	str	r2, [r7, #8]
 800db60:	607b      	str	r3, [r7, #4]
 800db62:	4603      	mov	r3, r0
 800db64:	73fb      	strb	r3, [r7, #15]
 800db66:	460b      	mov	r3, r1
 800db68:	73bb      	strb	r3, [r7, #14]
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d002      	beq.n	800db76 <rfalNfcvPollerCollisionResolution+0x1e>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d101      	bne.n	800db7a <rfalNfcvPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 800db76:	2307      	movs	r3, #7
 800db78:	e186      	b.n	800de88 <rfalNfcvPollerCollisionResolution+0x330>
    }

    /* Initialize parameters */
    *devCnt = 0;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]
    colIt         = 0;
 800db80:	2300      	movs	r3, #0
 800db82:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
    colCnt        = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
    colPending    = false;
 800db8c:	2300      	movs	r3, #0
 800db8e:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 800db92:	f107 0314 	add.w	r3, r7, #20
 800db96:	2290      	movs	r2, #144	@ 0x90
 800db98:	2100      	movs	r1, #0
 800db9a:	4618      	mov	r0, r3
 800db9c:	f003 fce8 	bl	8011570 <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 800dba0:	7bbb      	ldrb	r3, [r7, #14]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d00a      	beq.n	800dbbc <rfalNfcvPollerCollisionResolution+0x64>
    {
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 800dba6:	7bba      	ldrb	r2, [r7, #14]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	005b      	lsls	r3, r3, #1
 800dbac:	4413      	add	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	2100      	movs	r1, #0
 800dbb6:	68b8      	ldr	r0, [r7, #8]
 800dbb8:	f003 fcda 	bl	8011570 <memset>
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 800dbbc:	7bfb      	ldrb	r3, [r7, #15]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d12b      	bne.n	800dc1a <rfalNfcvPollerCollisionResolution+0xc2>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.0  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	9200      	str	r2, [sp, #0]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	2100      	movs	r1, #0
 800dbcc:	2020      	movs	r0, #32
 800dbce:	f7ff ff60 	bl	800da92 <rfalNfcvPollerInventory>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.0  9.3.7.2 (Symbol 1)  */
 800dbd8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800dbdc:	2b04      	cmp	r3, #4
 800dbde:	d101      	bne.n	800dbe4 <rfalNfcvPollerCollisionResolution+0x8c>
        {
            return ERR_NONE;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	e151      	b.n	800de88 <rfalNfcvPollerCollisionResolution+0x330>
        }
        if( ret == ERR_NONE )     /* Device found without transmission error/collision    Activity 2.0  9.3.7.3 (Symbol 2)  */
 800dbe4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d107      	bne.n	800dbfc <rfalNfcvPollerCollisionResolution+0xa4>
        {
            (*devCnt)++;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	e145      	b.n	800de88 <rfalNfcvPollerCollisionResolution+0x330>
        }

        /* A Collision has been identified  Activity 2.0  9.3.7.2  (Symbol 3) */
        colPending = true;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
        colCnt        = 1;
 800dc02:	2301      	movs	r3, #1
 800dc04:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab

        /* Check if the Collision Resolution is set to perform only Collision detection   Activity 2.0  9.3.7.5 (Symbol 4)*/
        if( devLimit == 0U )
 800dc08:	7bbb      	ldrb	r3, [r7, #14]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d101      	bne.n	800dc12 <rfalNfcvPollerCollisionResolution+0xba>
        {
            return ERR_RF_COLLISION;
 800dc0e:	231d      	movs	r3, #29
 800dc10:	e13a      	b.n	800de88 <rfalNfcvPollerCollisionResolution+0x330>
        }

        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800dc12:	2004      	movs	r0, #4
 800dc14:	f7f3 fd4a 	bl	80016ac <HAL_Delay>
 800dc18:	e005      	b.n	800dc26 <rfalNfcvPollerCollisionResolution+0xce>
        /*******************************************************************************/
    }
    else
    { 
        /* Advance to 16 slots below without mask. Will give a good chance to identify multiple cards */
        colPending = true;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
        colCnt        = 1;
 800dc20:	2301      	movs	r3, #1
 800dc22:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
    
    /* Execute until all collisions are resolved Activity 2.0  9.3.7.16  (Symbol 17) */
    do
    {
        /* Activity 2.0  9.3.7.5  (Symbol 6) */
        colPending = false;
 800dc26:	2300      	movs	r3, #0
 800dc28:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
        slotNum    = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        
        do
        {
            if( slotNum == 0U )
 800dc32:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d129      	bne.n	800dc8e <rfalNfcvPollerCollisionResolution+0x136>
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.0  9.3.7.7  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 800dc3a:	f897 20ac 	ldrb.w	r2, [r7, #172]	@ 0xac
 800dc3e:	4613      	mov	r3, r2
 800dc40:	00db      	lsls	r3, r3, #3
 800dc42:	4413      	add	r3, r2
 800dc44:	33b0      	adds	r3, #176	@ 0xb0
 800dc46:	443b      	add	r3, r7
 800dc48:	3b9c      	subs	r3, #156	@ 0x9c
 800dc4a:	7818      	ldrb	r0, [r3, #0]
 800dc4c:	f897 20ac 	ldrb.w	r2, [r7, #172]	@ 0xac
 800dc50:	f107 0114 	add.w	r1, r7, #20
 800dc54:	4613      	mov	r3, r2
 800dc56:	00db      	lsls	r3, r3, #3
 800dc58:	4413      	add	r3, r2
 800dc5a:	440b      	add	r3, r1
 800dc5c:	1c59      	adds	r1, r3, #1
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	461a      	mov	r2, r3
 800dc64:	4613      	mov	r3, r2
 800dc66:	005b      	lsls	r3, r3, #1
 800dc68:	4413      	add	r3, r2
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	4413      	add	r3, r2
 800dc6e:	68ba      	ldr	r2, [r7, #8]
 800dc70:	4413      	add	r3, r2
 800dc72:	461a      	mov	r2, r3
 800dc74:	f107 03a6 	add.w	r3, r7, #166	@ 0xa6
 800dc78:	9300      	str	r3, [sp, #0]
 800dc7a:	4613      	mov	r3, r2
 800dc7c:	460a      	mov	r2, r1
 800dc7e:	4601      	mov	r1, r0
 800dc80:	2000      	movs	r0, #0
 800dc82:	f7ff ff06 	bl	800da92 <rfalNfcvPollerInventory>
 800dc86:	4603      	mov	r3, r0
 800dc88:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 800dc8c:	e013      	b.n	800dcb6 <rfalNfcvPollerCollisionResolution+0x15e>
            }
            else
            {
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	461a      	mov	r2, r3
 800dc94:	4613      	mov	r3, r2
 800dc96:	005b      	lsls	r3, r3, #1
 800dc98:	4413      	add	r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4413      	add	r3, r2
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	4413      	add	r3, r2
 800dca2:	4618      	mov	r0, r3
 800dca4:	f107 03a6 	add.w	r3, r7, #166	@ 0xa6
 800dca8:	461a      	mov	r2, r3
 800dcaa:	210c      	movs	r1, #12
 800dcac:	f002 fac8 	bl	8010240 <rfalISO15693TransceiveEOFAnticollision>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
            }
            slotNum++;
 800dcb6:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800dcba:	3301      	adds	r3, #1
 800dcbc:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
            
            /*******************************************************************************/
            if( ret != ERR_TIMEOUT )
 800dcc0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800dcc4:	2b04      	cmp	r3, #4
 800dcc6:	f000 80c3 	beq.w	800de50 <rfalNfcvPollerCollisionResolution+0x2f8>
            {
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800dcca:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800dcce:	2b5f      	cmp	r3, #95	@ 0x5f
 800dcd0:	d802      	bhi.n	800dcd8 <rfalNfcvPollerCollisionResolution+0x180>
                { /* If only a partial frame was received make sure the FDT_V_INVENT_NORES is fulfilled */
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800dcd2:	2004      	movs	r0, #4
 800dcd4:	f7f3 fcea 	bl	80016ac <HAL_Delay>
                }

                if( ret == ERR_NONE )
 800dcd8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10b      	bne.n	800dcf8 <rfalNfcvPollerCollisionResolution+0x1a0>
                {
                    /* Check if the device found is already on the list and its response is a valid INVENTORY_RES */
                    if( rcvdLen == rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800dce0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800dce4:	2b60      	cmp	r3, #96	@ 0x60
 800dce6:	f040 80b6 	bne.w	800de56 <rfalNfcvPollerCollisionResolution+0x2fe>
                    {
                        /* Activity 2.0  9.3.7.15  (Symbol 11) */
                        (*devCnt)++;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	701a      	strb	r2, [r3, #0]
 800dcf6:	e0ae      	b.n	800de56 <rfalNfcvPollerCollisionResolution+0x2fe>
                    }
                }
                else /* Treat everything else as collision */
                {
                    /* Activity 2.0  9.3.7.15  (Symbol 16) */
                    colPending = true;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
                    

                    /*******************************************************************************/
                    /* Ensure that this collision still fits on the container */
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 800dcfe:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800dd02:	2b0f      	cmp	r3, #15
 800dd04:	f200 80a7 	bhi.w	800de56 <rfalNfcvPollerCollisionResolution+0x2fe>
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.0  9.3.7.15  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 800dd08:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 800dd0c:	f107 0114 	add.w	r1, r7, #20
 800dd10:	4613      	mov	r3, r2
 800dd12:	00db      	lsls	r3, r3, #3
 800dd14:	4413      	add	r3, r2
 800dd16:	440b      	add	r3, r1
 800dd18:	1c58      	adds	r0, r3, #1
 800dd1a:	f897 20ac 	ldrb.w	r2, [r7, #172]	@ 0xac
 800dd1e:	f107 0114 	add.w	r1, r7, #20
 800dd22:	4613      	mov	r3, r2
 800dd24:	00db      	lsls	r3, r3, #3
 800dd26:	4413      	add	r3, r2
 800dd28:	440b      	add	r3, r1
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	2208      	movs	r2, #8
 800dd2e:	4619      	mov	r1, r3
 800dd30:	f003 fc62 	bl	80115f8 <memcpy>
                        colPos = colFound[colIt].maskLen;
 800dd34:	f897 20ac 	ldrb.w	r2, [r7, #172]	@ 0xac
 800dd38:	4613      	mov	r3, r2
 800dd3a:	00db      	lsls	r3, r3, #3
 800dd3c:	4413      	add	r3, r2
 800dd3e:	33b0      	adds	r3, #176	@ 0xb0
 800dd40:	443b      	add	r3, r7
 800dd42:	3b9c      	subs	r3, #156	@ 0x9c
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 800dd4a:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 800dd4e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800dd52:	08db      	lsrs	r3, r3, #3
 800dd54:	b2d8      	uxtb	r0, r3
 800dd56:	4601      	mov	r1, r0
 800dd58:	4613      	mov	r3, r2
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	4413      	add	r3, r2
 800dd5e:	33b0      	adds	r3, #176	@ 0xb0
 800dd60:	443b      	add	r3, r7
 800dd62:	440b      	add	r3, r1
 800dd64:	3b9b      	subs	r3, #155	@ 0x9b
 800dd66:	7819      	ldrb	r1, [r3, #0]
 800dd68:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800dd6c:	f003 0307 	and.w	r3, r3, #7
 800dd70:	2201      	movs	r2, #1
 800dd72:	fa02 f303 	lsl.w	r3, r2, r3
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	3b01      	subs	r3, #1
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 800dd80:	400b      	ands	r3, r1
 800dd82:	b2d9      	uxtb	r1, r3
 800dd84:	4613      	mov	r3, r2
 800dd86:	00db      	lsls	r3, r3, #3
 800dd88:	4413      	add	r3, r2
 800dd8a:	33b0      	adds	r3, #176	@ 0xb0
 800dd8c:	443b      	add	r3, r7
 800dd8e:	4403      	add	r3, r0
 800dd90:	3b9b      	subs	r3, #155	@ 0x9b
 800dd92:	460a      	mov	r2, r1
 800dd94:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 800dd96:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 800dd9a:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800dd9e:	08db      	lsrs	r3, r3, #3
 800dda0:	b2d8      	uxtb	r0, r3
 800dda2:	4601      	mov	r1, r0
 800dda4:	4613      	mov	r3, r2
 800dda6:	00db      	lsls	r3, r3, #3
 800dda8:	4413      	add	r3, r2
 800ddaa:	33b0      	adds	r3, #176	@ 0xb0
 800ddac:	443b      	add	r3, r7
 800ddae:	440b      	add	r3, r1
 800ddb0:	3b9b      	subs	r3, #155	@ 0x9b
 800ddb2:	7819      	ldrb	r1, [r3, #0]
 800ddb4:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800ddb8:	1e5a      	subs	r2, r3, #1
 800ddba:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800ddbe:	f003 0307 	and.w	r3, r3, #7
 800ddc2:	fa02 f303 	lsl.w	r3, r2, r3
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 800ddcc:	430b      	orrs	r3, r1
 800ddce:	b2d9      	uxtb	r1, r3
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	00db      	lsls	r3, r3, #3
 800ddd4:	4413      	add	r3, r2
 800ddd6:	33b0      	adds	r3, #176	@ 0xb0
 800ddd8:	443b      	add	r3, r7
 800ddda:	4403      	add	r3, r0
 800dddc:	3b9b      	subs	r3, #155	@ 0x9b
 800ddde:	460a      	mov	r2, r1
 800dde0:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 800dde2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800dde6:	1e5a      	subs	r2, r3, #1
 800dde8:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800ddec:	f003 0307 	and.w	r3, r3, #7
 800ddf0:	f1c3 0308 	rsb	r3, r3, #8
 800ddf4:	fa22 f003 	lsr.w	r0, r2, r3
 800ddf8:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 800ddfc:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800de00:	08db      	lsrs	r3, r3, #3
 800de02:	b2db      	uxtb	r3, r3
 800de04:	1c59      	adds	r1, r3, #1
 800de06:	b2c0      	uxtb	r0, r0
 800de08:	4613      	mov	r3, r2
 800de0a:	00db      	lsls	r3, r3, #3
 800de0c:	4413      	add	r3, r2
 800de0e:	33b0      	adds	r3, #176	@ 0xb0
 800de10:	443b      	add	r3, r7
 800de12:	440b      	add	r3, r1
 800de14:	3b9b      	subs	r3, #155	@ 0x9b
 800de16:	4602      	mov	r2, r0
 800de18:	701a      	strb	r2, [r3, #0]

                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 800de1a:	f897 20ac 	ldrb.w	r2, [r7, #172]	@ 0xac
 800de1e:	4613      	mov	r3, r2
 800de20:	00db      	lsls	r3, r3, #3
 800de22:	4413      	add	r3, r2
 800de24:	33b0      	adds	r3, #176	@ 0xb0
 800de26:	443b      	add	r3, r7
 800de28:	3b9c      	subs	r3, #156	@ 0x9c
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 800de30:	3304      	adds	r3, #4
 800de32:	b2d9      	uxtb	r1, r3
 800de34:	4613      	mov	r3, r2
 800de36:	00db      	lsls	r3, r3, #3
 800de38:	4413      	add	r3, r2
 800de3a:	33b0      	adds	r3, #176	@ 0xb0
 800de3c:	443b      	add	r3, r7
 800de3e:	3b9c      	subs	r3, #156	@ 0x9c
 800de40:	460a      	mov	r2, r1
 800de42:	701a      	strb	r2, [r3, #0]

                        colCnt++;
 800de44:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800de48:	3301      	adds	r3, #1
 800de4a:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 800de4e:	e002      	b.n	800de56 <rfalNfcvPollerCollisionResolution+0x2fe>
                }
            }
            else 
            { 
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800de50:	2004      	movs	r0, #4
 800de52:	f7f3 fc2b 	bl	80016ac <HAL_Delay>
            }
            
            /* Check if devices found have reached device limit   Activity 2.0  9.3.7.15  (Symbol 16) */
            if( *devCnt >= devLimit )
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	7bba      	ldrb	r2, [r7, #14]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d801      	bhi.n	800de64 <rfalNfcvPollerCollisionResolution+0x30c>
            {
                return ERR_NONE;
 800de60:	2300      	movs	r3, #0
 800de62:	e011      	b.n	800de88 <rfalNfcvPollerCollisionResolution+0x330>
            }
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 800de64:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800de68:	2b0f      	cmp	r3, #15
 800de6a:	f67f aee2 	bls.w	800dc32 <rfalNfcvPollerCollisionResolution+0xda>
        colIt++;
 800de6e:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 800de72:	3301      	adds	r3, #1
 800de74:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
    } while( colIt < colCnt );                     /* Collisions found loop */
 800de78:	f897 20ac 	ldrb.w	r2, [r7, #172]	@ 0xac
 800de7c:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800de80:	429a      	cmp	r2, r3
 800de82:	f4ff aed0 	bcc.w	800dc26 <rfalNfcvPollerCollisionResolution+0xce>
    
    return ERR_NONE;
 800de86:	2300      	movs	r3, #0
}
 800de88:	4618      	mov	r0, r3
 800de8a:	37b0      	adds	r7, #176	@ 0xb0
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <rfalNfcvPollerReadSingleBlock>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_SELECT, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b08c      	sub	sp, #48	@ 0x30
 800de94:	af06      	add	r7, sp, #24
 800de96:	60b9      	str	r1, [r7, #8]
 800de98:	607b      	str	r3, [r7, #4]
 800de9a:	4603      	mov	r3, r0
 800de9c:	73fb      	strb	r3, [r7, #15]
 800de9e:	4613      	mov	r3, r2
 800dea0:	73bb      	strb	r3, [r7, #14]
    uint8_t bn;

    bn = blockNum;
 800dea2:	7bbb      	ldrb	r3, [r7, #14]
 800dea4:	75fb      	strb	r3, [r7, #23]

    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), rxBuf, rxBufLen, rcvLen );
 800dea6:	7bf9      	ldrb	r1, [r7, #15]
 800dea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deaa:	9304      	str	r3, [sp, #16]
 800deac:	8c3b      	ldrh	r3, [r7, #32]
 800deae:	9303      	str	r3, [sp, #12]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	9302      	str	r3, [sp, #8]
 800deb4:	2301      	movs	r3, #1
 800deb6:	9301      	str	r3, [sp, #4]
 800deb8:	f107 0317 	add.w	r3, r7, #23
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	2200      	movs	r2, #0
 800dec2:	2020      	movs	r0, #32
 800dec4:	f000 f806 	bl	800ded4 <rfalNfcvPollerTransceiveReq>
 800dec8:	4603      	mov	r3, r0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3718      	adds	r7, #24
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
	...

0800ded4 <rfalNfcvPollerTransceiveReq>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_GET_SYS_INFO, flags, requestField, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen ); 
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerTransceiveReq( uint8_t cmd, uint8_t flags, uint8_t param, const uint8_t* uid, const uint8_t *data, uint16_t dataLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b094      	sub	sp, #80	@ 0x50
 800ded8:	af04      	add	r7, sp, #16
 800deda:	603b      	str	r3, [r7, #0]
 800dedc:	4603      	mov	r3, r0
 800dede:	71fb      	strb	r3, [r7, #7]
 800dee0:	460b      	mov	r3, r1
 800dee2:	71bb      	strb	r3, [r7, #6]
 800dee4:	4613      	mov	r3, r2
 800dee6:	717b      	strb	r3, [r7, #5]
    rfalNfcvGenericReq req;
    uint8_t            msgIt;
    rfalBitRate        rxBR;
    bool               fastMode;
    
    msgIt    = 0;
 800dee8:	2300      	movs	r3, #0
 800deea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    fastMode = false;
 800deee:	2300      	movs	r3, #0
 800def0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 800def4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800def6:	2b00      	cmp	r3, #0
 800def8:	d013      	beq.n	800df22 <rfalNfcvPollerTransceiveReq+0x4e>
 800defa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800defc:	2b00      	cmp	r3, #0
 800defe:	d010      	beq.n	800df22 <rfalNfcvPollerTransceiveReq+0x4e>
 800df00:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <rfalNfcvPollerTransceiveReq+0x3a>
 800df08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d009      	beq.n	800df22 <rfalNfcvPollerTransceiveReq+0x4e>
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
 800df0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800df12:	683a      	ldr	r2, [r7, #0]
 800df14:	2a00      	cmp	r2, #0
 800df16:	d001      	beq.n	800df1c <rfalNfcvPollerTransceiveReq+0x48>
 800df18:	2229      	movs	r2, #41	@ 0x29
 800df1a:	e000      	b.n	800df1e <rfalNfcvPollerTransceiveReq+0x4a>
 800df1c:	2221      	movs	r2, #33	@ 0x21
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 800df1e:	429a      	cmp	r2, r3
 800df20:	d201      	bcs.n	800df26 <rfalNfcvPollerTransceiveReq+0x52>
    {
        return ERR_PARAM;
 800df22:	2307      	movs	r3, #7
 800df24:	e0ca      	b.n	800e0bc <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    
    /* Check if the command is an ST's Fast command */
    if( (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_SINGLE_BLOCK)    || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK)    || 
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	2bc0      	cmp	r3, #192	@ 0xc0
 800df2a:	d017      	beq.n	800df5c <rfalNfcvPollerTransceiveReq+0x88>
 800df2c:	79fb      	ldrb	r3, [r7, #7]
 800df2e:	2bc4      	cmp	r3, #196	@ 0xc4
 800df30:	d014      	beq.n	800df5c <rfalNfcvPollerTransceiveReq+0x88>
 800df32:	79fb      	ldrb	r3, [r7, #7]
 800df34:	2bc3      	cmp	r3, #195	@ 0xc3
 800df36:	d011      	beq.n	800df5c <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MULTIPLE_BLOCKS) || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCKS) ||
 800df38:	79fb      	ldrb	r3, [r7, #7]
 800df3a:	2bc5      	cmp	r3, #197	@ 0xc5
 800df3c:	d00e      	beq.n	800df5c <rfalNfcvPollerTransceiveReq+0x88>
 800df3e:	79fb      	ldrb	r3, [r7, #7]
 800df40:	2bca      	cmp	r3, #202	@ 0xca
 800df42:	d00b      	beq.n	800df5c <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_MESSAGE)        || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE_LENGTH)           ||
 800df44:	79fb      	ldrb	r3, [r7, #7]
 800df46:	2bcb      	cmp	r3, #203	@ 0xcb
 800df48:	d008      	beq.n	800df5c <rfalNfcvPollerTransceiveReq+0x88>
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	2bcc      	cmp	r3, #204	@ 0xcc
 800df4e:	d005      	beq.n	800df5c <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE)         || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_DYN_CONFIGURATION)        ||               
 800df50:	79fb      	ldrb	r3, [r7, #7]
 800df52:	2bcd      	cmp	r3, #205	@ 0xcd
 800df54:	d002      	beq.n	800df5c <rfalNfcvPollerTransceiveReq+0x88>
 800df56:	79fb      	ldrb	r3, [r7, #7]
 800df58:	2bce      	cmp	r3, #206	@ 0xce
 800df5a:	d10c      	bne.n	800df76 <rfalNfcvPollerTransceiveReq+0xa2>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_DYN_CONFIGURATION) )
    {
        /* Store current Rx bit rate and move to fast mode */
        rfalGetBitRate( NULL, &rxBR );
 800df5c:	f107 030f 	add.w	r3, r7, #15
 800df60:	4619      	mov	r1, r3
 800df62:	2000      	movs	r0, #0
 800df64:	f000 fcb2 	bl	800e8cc <rfalGetBitRate>
        rfalSetBitRate( RFAL_BR_KEEP, RFAL_BR_52p97 );
 800df68:	21eb      	movs	r1, #235	@ 0xeb
 800df6a:	20ff      	movs	r0, #255	@ 0xff
 800df6c:	f000 fa62 	bl	800e434 <rfalSetBitRate>
        
        fastMode = true;
 800df70:	2301      	movs	r3, #1
 800df72:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    }
    
    
    /* Compute Request Command */
    req.REQ_FLAG  = (uint8_t)(flags & (~((uint32_t)RFAL_NFCV_REQ_FLAG_ADDRESS) & ~((uint32_t)RFAL_NFCV_REQ_FLAG_SELECT)));
 800df76:	79bb      	ldrb	r3, [r7, #6]
 800df78:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	743b      	strb	r3, [r7, #16]
    req.CMD       = cmd;
 800df80:	79fb      	ldrb	r3, [r7, #7]
 800df82:	747b      	strb	r3, [r7, #17]
    
    /* Prepend parameter on ceratin proprietary requests: IC Manuf, Parameters */
    if( param != RFAL_NFCV_PARAM_SKIP )
 800df84:	797b      	ldrb	r3, [r7, #5]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d009      	beq.n	800df9e <rfalNfcvPollerTransceiveReq+0xca>
    {
        req.payload.data[msgIt++] = param;
 800df8a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800df8e:	1c5a      	adds	r2, r3, #1
 800df90:	f887 203d 	strb.w	r2, [r7, #61]	@ 0x3d
 800df94:	3340      	adds	r3, #64	@ 0x40
 800df96:	443b      	add	r3, r7
 800df98:	797a      	ldrb	r2, [r7, #5]
 800df9a:	f803 2c2e 	strb.w	r2, [r3, #-46]
    }
    
    /* Check if request is to be sent in Addressed or Selected mode */
    if( uid != NULL )
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d015      	beq.n	800dfd0 <rfalNfcvPollerTransceiveReq+0xfc>
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
 800dfa4:	7c3b      	ldrb	r3, [r7, #16]
 800dfa6:	f043 0320 	orr.w	r3, r3, #32
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	743b      	strb	r3, [r7, #16]
        ST_MEMCPY( &req.payload.data[msgIt], uid, RFAL_NFCV_UID_LEN );
 800dfae:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800dfb2:	f107 0210 	add.w	r2, r7, #16
 800dfb6:	4413      	add	r3, r2
 800dfb8:	3302      	adds	r3, #2
 800dfba:	2208      	movs	r2, #8
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f003 fb1a 	bl	80115f8 <memcpy>
        msgIt += RFAL_NFCV_UID_LEN;
 800dfc4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800dfc8:	3308      	adds	r3, #8
 800dfca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 800dfce:	e004      	b.n	800dfda <rfalNfcvPollerTransceiveReq+0x106>
    }
    else
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_SELECT;
 800dfd0:	7c3b      	ldrb	r3, [r7, #16]
 800dfd2:	f043 0310 	orr.w	r3, r3, #16
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	743b      	strb	r3, [r7, #16]
    }
    
    if( dataLen > 0U )
 800dfda:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d013      	beq.n	800e00a <rfalNfcvPollerTransceiveReq+0x136>
    {
        ST_MEMCPY( &req.payload.data[msgIt], data, dataLen);
 800dfe2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800dfe6:	f107 0210 	add.w	r2, r7, #16
 800dfea:	4413      	add	r3, r2
 800dfec:	3302      	adds	r3, #2
 800dfee:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800dff2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800dff4:	4618      	mov	r0, r3
 800dff6:	f003 faff 	bl	80115f8 <memcpy>
        msgIt += (uint8_t)dataLen;
 800dffa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800e004:	4413      	add	r3, r2
 800e006:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    }
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_MAX );
 800e00a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800e00e:	b29b      	uxth	r3, r3
 800e010:	3302      	adds	r3, #2
 800e012:	b299      	uxth	r1, r3
 800e014:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800e018:	f107 0010 	add.w	r0, r7, #16
 800e01c:	4b29      	ldr	r3, [pc, #164]	@ (800e0c4 <rfalNfcvPollerTransceiveReq+0x1f0>)
 800e01e:	9302      	str	r3, [sp, #8]
 800e020:	2300      	movs	r3, #0
 800e022:	9301      	str	r3, [sp, #4]
 800e024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e026:	9300      	str	r3, [sp, #0]
 800e028:	4613      	mov	r3, r2
 800e02a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e02c:	f000 ff0e 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 800e030:	4603      	mov	r3, r0
 800e032:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    
    /* If the Option Flag is set in certain commands an EOF needs to be sent after 20ms to retrieve the VICC response      ISO15693-3 2009  10.4.2 & 10.4.3 & 10.4.5 */
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 800e034:	79bb      	ldrb	r3, [r7, #6]
 800e036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d01b      	beq.n	800e076 <rfalNfcvPollerTransceiveReq+0x1a2>
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	2b21      	cmp	r3, #33	@ 0x21
 800e042:	d00e      	beq.n	800e062 <rfalNfcvPollerTransceiveReq+0x18e>
 800e044:	79fb      	ldrb	r3, [r7, #7]
 800e046:	2b24      	cmp	r3, #36	@ 0x24
 800e048:	d00b      	beq.n	800e062 <rfalNfcvPollerTransceiveReq+0x18e>
 800e04a:	79fb      	ldrb	r3, [r7, #7]
 800e04c:	2b22      	cmp	r3, #34	@ 0x22
 800e04e:	d008      	beq.n	800e062 <rfalNfcvPollerTransceiveReq+0x18e>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_LOCK_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK)                   ||
 800e050:	79fb      	ldrb	r3, [r7, #7]
 800e052:	2b31      	cmp	r3, #49	@ 0x31
 800e054:	d005      	beq.n	800e062 <rfalNfcvPollerTransceiveReq+0x18e>
 800e056:	79fb      	ldrb	r3, [r7, #7]
 800e058:	2b32      	cmp	r3, #50	@ 0x32
 800e05a:	d002      	beq.n	800e062 <rfalNfcvPollerTransceiveReq+0x18e>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK))  )
 800e05c:	79fb      	ldrb	r3, [r7, #7]
 800e05e:	2b34      	cmp	r3, #52	@ 0x34
 800e060:	d109      	bne.n	800e076 <rfalNfcvPollerTransceiveReq+0x1a2>
    {
        ret = rfalISO15693TransceiveEOF( rxBuf, (uint8_t)rxBufLen, rcvLen );
 800e062:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800e066:	b2db      	uxtb	r3, r3
 800e068:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e06a:	4619      	mov	r1, r3
 800e06c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e06e:	f002 f8fd 	bl	801026c <rfalISO15693TransceiveEOF>
 800e072:	4603      	mov	r3, r0
 800e074:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    /* Restore Rx BitRate */
    if( fastMode )
 800e076:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d004      	beq.n	800e088 <rfalNfcvPollerTransceiveReq+0x1b4>
    {
        rfalSetBitRate( RFAL_BR_KEEP, rxBR );
 800e07e:	7bfb      	ldrb	r3, [r7, #15]
 800e080:	4619      	mov	r1, r3
 800e082:	20ff      	movs	r0, #255	@ 0xff
 800e084:	f000 f9d6 	bl	800e434 <rfalSetBitRate>
    }
    
    if( ret != ERR_NONE )
 800e088:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <rfalNfcvPollerTransceiveReq+0x1be>
    {
        return ret;
 800e08e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e090:	e014      	b.n	800e0bc <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    /* Check if the response minimum length has been received */
    if( (*rcvLen) < (uint8_t)RFAL_NFCV_FLAG_LEN )
 800e092:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e094:	881b      	ldrh	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d101      	bne.n	800e09e <rfalNfcvPollerTransceiveReq+0x1ca>
    {
        return ERR_PROTO;
 800e09a:	230b      	movs	r3, #11
 800e09c:	e00e      	b.n	800e0bc <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    /* Check if an error has been signalled */
    if( (rxBuf[RFAL_NFCV_FLAG_POS] & (uint8_t)RFAL_NFCV_RES_FLAG_ERROR) != 0U )
 800e09e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	f003 0301 	and.w	r3, r3, #1
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d007      	beq.n	800e0ba <rfalNfcvPollerTransceiveReq+0x1e6>
    {
        return rfalNfcvParseError( rxBuf[RFAL_NFCV_DATASTART_POS] );
 800e0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff fc69 	bl	800d988 <rfalNfcvParseError>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	e000      	b.n	800e0bc <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    return ERR_NONE;
 800e0ba:	2300      	movs	r3, #0
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3740      	adds	r7, #64	@ 0x40
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	00042360 	.word	0x00042360

0800e0c8 <rfalInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	af00      	add	r7, sp, #0
    st25r3911InitInterrupts();
 800e0cc:	f7f7 fa62 	bl	8005594 <st25r3911InitInterrupts>
    
    /* Initialize chip */
    st25r3911Initialize();
 800e0d0:	f7f6 fb33 	bl	800473a <st25r3911Initialize>
    
    /* Check expected chip: ST25R3911 */
    if( !st25r3911CheckChipID( NULL ) )
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	f7f6 fced 	bl	8004ab4 <st25r3911CheckChipID>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	f083 0301 	eor.w	r3, r3, #1
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <rfalInitialize+0x22>
    {
        return ERR_HW_MISMATCH;
 800e0e6:	2324      	movs	r3, #36	@ 0x24
 800e0e8:	e052      	b.n	800e190 <rfalInitialize+0xc8>
    }
    
    /* Disable any previous observation mode */
    rfalST25R3911ObsModeDisable();
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	2001      	movs	r0, #1
 800e0ee:	f7f6 ffa9 	bl	8005044 <st25r3911WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	f7f7 fc26 	bl	8005944 <rfalSetAnalogConfig>

    /*******************************************************************************/
    /* Set FIFO Water Levels to be used */
    st25r3911ChangeRegisterBits( ST25R3911_REG_IO_CONF1, (ST25R3911_REG_IO_CONF1_fifo_lt | ST25R3911_REG_IO_CONF1_fifo_lr), (ST25R3911_REG_IO_CONF1_fifo_lt_32bytes | ST25R3911_REG_IO_CONF1_fifo_lr_64bytes) );
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	2130      	movs	r1, #48	@ 0x30
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	f7f7 f87a 	bl	80051f6 <st25r3911ChangeRegisterBits>
    
    /* Always have CRC in FIFO upon reception  */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_crc_2_fifo );
 800e102:	2140      	movs	r1, #64	@ 0x40
 800e104:	2009      	movs	r0, #9
 800e106:	f7f7 f858 	bl	80051ba <st25r3911SetRegisterBits>
    
    /* Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800e10a:	2110      	movs	r1, #16
 800e10c:	2009      	movs	r0, #9
 800e10e:	f7f7 f854 	bl	80051ba <st25r3911SetRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800e112:	f001 fdf5 	bl	800fd00 <rfalFIFOStatusClear>
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 800e116:	4b1f      	ldr	r3, [pc, #124]	@ (800e194 <rfalInitialize+0xcc>)
 800e118:	2201      	movs	r2, #1
 800e11a:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 800e11c:	4b1d      	ldr	r3, [pc, #116]	@ (800e194 <rfalInitialize+0xcc>)
 800e11e:	2200      	movs	r2, #0
 800e120:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 800e122:	4b1c      	ldr	r3, [pc, #112]	@ (800e194 <rfalInitialize+0xcc>)
 800e124:	2200      	movs	r2, #0
 800e126:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 800e128:	4b1a      	ldr	r3, [pc, #104]	@ (800e194 <rfalInitialize+0xcc>)
 800e12a:	2200      	movs	r2, #0
 800e12c:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 800e12e:	4b19      	ldr	r3, [pc, #100]	@ (800e194 <rfalInitialize+0xcc>)
 800e130:	2200      	movs	r2, #0
 800e132:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 800e134:	4b17      	ldr	r3, [pc, #92]	@ (800e194 <rfalInitialize+0xcc>)
 800e136:	2200      	movs	r2, #0
 800e138:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 800e13a:	4b16      	ldr	r3, [pc, #88]	@ (800e194 <rfalInitialize+0xcc>)
 800e13c:	2200      	movs	r2, #0
 800e13e:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800e140:	4b14      	ldr	r3, [pc, #80]	@ (800e194 <rfalInitialize+0xcc>)
 800e142:	2200      	movs	r2, #0
 800e144:	751a      	strb	r2, [r3, #20]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 800e146:	4b13      	ldr	r3, [pc, #76]	@ (800e194 <rfalInitialize+0xcc>)
 800e148:	2200      	movs	r2, #0
 800e14a:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 800e14c:	4b11      	ldr	r3, [pc, #68]	@ (800e194 <rfalInitialize+0xcc>)
 800e14e:	2200      	movs	r2, #0
 800e150:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800e152:	4b10      	ldr	r3, [pc, #64]	@ (800e194 <rfalInitialize+0xcc>)
 800e154:	2200      	movs	r2, #0
 800e156:	609a      	str	r2, [r3, #8]
    
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 800e158:	4b0e      	ldr	r3, [pc, #56]	@ (800e194 <rfalInitialize+0xcc>)
 800e15a:	2200      	movs	r2, #0
 800e15c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    gRFAL.callbacks.preTxRx  = NULL;
 800e15e:	4b0d      	ldr	r3, [pc, #52]	@ (800e194 <rfalInitialize+0xcc>)
 800e160:	2200      	movs	r2, #0
 800e162:	64da      	str	r2, [r3, #76]	@ 0x4c
    gRFAL.callbacks.postTxRx = NULL;
 800e164:	4b0b      	ldr	r3, [pc, #44]	@ (800e194 <rfalInitialize+0xcc>)
 800e166:	2200      	movs	r2, #0
 800e168:	651a      	str	r2, [r3, #80]	@ 0x50
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 800e16a:	4b0a      	ldr	r3, [pc, #40]	@ (800e194 <rfalInitialize+0xcc>)
 800e16c:	2200      	movs	r2, #0
 800e16e:	f8a3 23e8 	strh.w	r2, [r3, #1000]	@ 0x3e8
#endif /* RFAL_FEATURE_NFCV */
    
#if RFAL_FEATURE_LISTEN_MODE    
    /* Initialize Listen Mode */
    gRFAL.Lm.state           = RFAL_LM_STATE_NOT_INIT;
 800e172:	4b08      	ldr	r3, [pc, #32]	@ (800e194 <rfalInitialize+0xcc>)
 800e174:	2200      	movs	r2, #0
 800e176:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
 800e17a:	4b06      	ldr	r3, [pc, #24]	@ (800e194 <rfalInitialize+0xcc>)
 800e17c:	22ff      	movs	r2, #255	@ 0xff
 800e17e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800e182:	4b04      	ldr	r3, [pc, #16]	@ (800e194 <rfalInitialize+0xcc>)
 800e184:	2200      	movs	r2, #0
 800e186:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 800e18a:	f000 f805 	bl	800e198 <rfalCalibrate>
    
    return ERR_NONE;
 800e18e:	2300      	movs	r3, #0
}
 800e190:	4618      	mov	r0, r3
 800e192:	bd80      	pop	{r7, pc}
 800e194:	20000d80 	.word	0x20000d80

0800e198 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800e19e:	4b1b      	ldr	r3, [pc, #108]	@ (800e20c <rfalCalibrate+0x74>)
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 800e1a6:	2321      	movs	r3, #33	@ 0x21
 800e1a8:	e02b      	b.n	800e202 <rfalCalibrate+0x6a>
    /*******************************************************************************/
    /* Perform ST25R3911 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )       
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	2180      	movs	r1, #128	@ 0x80
 800e1ae:	202a      	movs	r0, #42	@ 0x2a
 800e1b0:	f7f6 fc60 	bl	8004a74 <st25r3911CheckReg>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d003      	beq.n	800e1c2 <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3911AdjustRegulators( &resValue );
 800e1ba:	1dbb      	adds	r3, r7, #6
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7f6 faea 	bl	8004796 <st25r3911AdjustRegulators>
    }
    
    /* Automatic Antenna calibration only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_ANT_CAL_CONTROL, ST25R3911_REG_ANT_CAL_CONTROL_trim_s, 0x00 ) )
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	2180      	movs	r1, #128	@ 0x80
 800e1c6:	2021      	movs	r0, #33	@ 0x21
 800e1c8:	f7f6 fc54 	bl	8004a74 <st25r3911CheckReg>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d010      	beq.n	800e1f4 <rfalCalibrate+0x5c>
    {
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );
 800e1d2:	1dbb      	adds	r3, r7, #6
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7f6 fb5d 	bl	8004894 <st25r3911CalibrateAntenna>
      
        /*******************************************************************************/
        /* REMARK: Silicon workaround ST25R3911 Errata #1.5                            */
        /* Always run the command Calibrate Antenna twice                              */
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );                
 800e1da:	1dbb      	adds	r3, r7, #6
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7f6 fb59 	bl	8004894 <st25r3911CalibrateAntenna>
    {
        /* If no antenna calibration is performed there is no need to perform second regulator adjustment again */
        return ERR_NONE; 
    }
    
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	2180      	movs	r1, #128	@ 0x80
 800e1e6:	202a      	movs	r0, #42	@ 0x2a
 800e1e8:	f7f6 fc44 	bl	8004a74 <st25r3911CheckReg>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d006      	beq.n	800e200 <rfalCalibrate+0x68>
 800e1f2:	e001      	b.n	800e1f8 <rfalCalibrate+0x60>
        return ERR_NONE; 
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	e004      	b.n	800e202 <rfalCalibrate+0x6a>
    {
        /* Adjust the regulators again with the Antenna calibrated */
        st25r3911AdjustRegulators( &resValue );
 800e1f8:	1dbb      	adds	r3, r7, #6
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7f6 facb 	bl	8004796 <st25r3911AdjustRegulators>
    }
    
    return ERR_NONE;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	20000d80 	.word	0x20000d80

0800e210 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	4603      	mov	r3, r0
 800e218:	71fb      	strb	r3, [r7, #7]
 800e21a:	460b      	mov	r3, r1
 800e21c:	71bb      	strb	r3, [r7, #6]
 800e21e:	4613      	mov	r3, r2
 800e220:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800e222:	4b83      	ldr	r3, [pc, #524]	@ (800e430 <rfalSetMode+0x220>)
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d101      	bne.n	800e22e <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 800e22a:	2321      	movs	r3, #33	@ 0x21
 800e22c:	e0fb      	b.n	800e426 <rfalSetMode+0x216>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800e22e:	79bb      	ldrb	r3, [r7, #6]
 800e230:	2bff      	cmp	r3, #255	@ 0xff
 800e232:	d002      	beq.n	800e23a <rfalSetMode+0x2a>
 800e234:	797b      	ldrb	r3, [r7, #5]
 800e236:	2bff      	cmp	r3, #255	@ 0xff
 800e238:	d101      	bne.n	800e23e <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 800e23a:	2307      	movs	r3, #7
 800e23c:	e0f3      	b.n	800e426 <rfalSetMode+0x216>
    }
   
    switch( mode )
 800e23e:	79fb      	ldrb	r3, [r7, #7]
 800e240:	3b01      	subs	r3, #1
 800e242:	2b0c      	cmp	r3, #12
 800e244:	f200 80db 	bhi.w	800e3fe <rfalSetMode+0x1ee>
 800e248:	a201      	add	r2, pc, #4	@ (adr r2, 800e250 <rfalSetMode+0x40>)
 800e24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24e:	bf00      	nop
 800e250:	0800e285 	.word	0x0800e285
 800e254:	0800e2a7 	.word	0x0800e2a7
 800e258:	0800e2c9 	.word	0x0800e2c9
 800e25c:	0800e2ff 	.word	0x0800e2ff
 800e260:	0800e335 	.word	0x0800e335
 800e264:	0800e36b 	.word	0x0800e36b
 800e268:	0800e38d 	.word	0x0800e38d
 800e26c:	0800e38d 	.word	0x0800e38d
 800e270:	0800e3a7 	.word	0x0800e3a7
 800e274:	0800e3fb 	.word	0x0800e3fb
 800e278:	0800e3fb 	.word	0x0800e3fb
 800e27c:	0800e3fb 	.word	0x0800e3fb
 800e280:	0800e3d1 	.word	0x0800e3d1
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800e284:	2104      	movs	r1, #4
 800e286:	2002      	movs	r0, #2
 800e288:	f7f6 ff74 	bl	8005174 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443a);
 800e28c:	2108      	movs	r1, #8
 800e28e:	2003      	movs	r0, #3
 800e290:	f7f6 ff22 	bl	80050d8 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800e294:	f240 1001 	movw	r0, #257	@ 0x101
 800e298:	f7f7 fb54 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800e29c:	f44f 7081 	mov.w	r0, #258	@ 0x102
 800e2a0:	f7f7 fb50 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e2a4:	e0ad      	b.n	800e402 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800e2a6:	2104      	movs	r1, #4
 800e2a8:	2002      	movs	r0, #2
 800e2aa:	f7f6 ff63 	bl	8005174 <st25r3911ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_topaz );
 800e2ae:	2120      	movs	r1, #32
 800e2b0:	2003      	movs	r0, #3
 800e2b2:	f7f6 ff11 	bl	80050d8 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800e2b6:	f240 1001 	movw	r0, #257	@ 0x101
 800e2ba:	f7f7 fb43 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800e2be:	f44f 7081 	mov.w	r0, #258	@ 0x102
 800e2c2:	f7f7 fb3f 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e2c6:	e09c      	b.n	800e402 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800e2c8:	2104      	movs	r1, #4
 800e2ca:	2002      	movs	r0, #2
 800e2cc:	f7f6 ff52 	bl	8005174 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800e2d0:	2110      	movs	r1, #16
 800e2d2:	2003      	movs	r0, #3
 800e2d4:	f7f6 ff00 	bl	80050d8 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800e2d8:	2200      	movs	r2, #0
 800e2da:	21fc      	movs	r1, #252	@ 0xfc
 800e2dc:	2006      	movs	r0, #6
 800e2de:	f7f6 ff8a 	bl	80051f6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	21f8      	movs	r1, #248	@ 0xf8
 800e2e6:	2007      	movs	r0, #7
 800e2e8:	f7f6 ff85 	bl	80051f6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_eof_12_10to11etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800e2ec:	f240 2001 	movw	r0, #513	@ 0x201
 800e2f0:	f7f7 fb28 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800e2f4:	f240 2002 	movw	r0, #514	@ 0x202
 800e2f8:	f7f7 fb24 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e2fc:	e081      	b.n	800e402 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800e2fe:	2104      	movs	r1, #4
 800e300:	2002      	movs	r0, #2
 800e302:	f7f6 ff37 	bl	8005174 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800e306:	2110      	movs	r1, #16
 800e308:	2003      	movs	r0, #3
 800e30a:	f7f6 fee5 	bl	80050d8 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800e30e:	2200      	movs	r2, #0
 800e310:	21fc      	movs	r1, #252	@ 0xfc
 800e312:	2006      	movs	r0, #6
 800e314:	f7f6 ff6f 	bl	80051f6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800e318:	2228      	movs	r2, #40	@ 0x28
 800e31a:	21f8      	movs	r1, #248	@ 0xf8
 800e31c:	2007      	movs	r0, #7
 800e31e:	f7f6 ff6a 	bl	80051f6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_eof_12_10to12etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800e322:	f240 2001 	movw	r0, #513	@ 0x201
 800e326:	f7f7 fb0d 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800e32a:	f240 2002 	movw	r0, #514	@ 0x202
 800e32e:	f7f7 fb09 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e332:	e066      	b.n	800e402 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_CTS:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800e334:	2104      	movs	r1, #4
 800e336:	2002      	movs	r0, #2
 800e338:	f7f6 ff1c 	bl	8005174 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800e33c:	2110      	movs	r1, #16
 800e33e:	2003      	movs	r0, #3
 800e340:	f7f6 feca 	bl	80050d8 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800e344:	2200      	movs	r2, #0
 800e346:	21fc      	movs	r1, #252	@ 0xfc
 800e348:	2006      	movs	r0, #6
 800e34a:	f7f6 ff54 	bl	80051f6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, clear SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800e34e:	2230      	movs	r2, #48	@ 0x30
 800e350:	21f8      	movs	r1, #248	@ 0xf8
 800e352:	2007      	movs	r0, #7
 800e354:	f7f6 ff4f 	bl	80051f6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800e358:	f240 2001 	movw	r0, #513	@ 0x201
 800e35c:	f7f7 faf2 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800e360:	f240 2002 	movw	r0, #514	@ 0x202
 800e364:	f7f7 faee 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e368:	e04b      	b.n	800e402 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800e36a:	2104      	movs	r1, #4
 800e36c:	2002      	movs	r0, #2
 800e36e:	f7f6 ff01 	bl	8005174 <st25r3911ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_felica );
 800e372:	2118      	movs	r1, #24
 800e374:	2003      	movs	r0, #3
 800e376:	f7f6 feaf 	bl	80050d8 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800e37a:	f240 4001 	movw	r0, #1025	@ 0x401
 800e37e:	f7f7 fae1 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800e382:	f240 4002 	movw	r0, #1026	@ 0x402
 800e386:	f7f7 fadd 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e38a:	e03a      	b.n	800e402 <rfalSetMode+0x1f2>
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCV:
        case RFAL_MODE_POLL_PICOPASS:
        
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800e38c:	2104      	movs	r1, #4
 800e38e:	2002      	movs	r0, #2
 800e390:	f7f6 fef0 	bl	8005174 <st25r3911ClrRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800e394:	f241 0001 	movw	r0, #4097	@ 0x1001
 800e398:	f7f7 fad4 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800e39c:	f241 0002 	movw	r0, #4098	@ 0x1002
 800e3a0:	f7f7 fad0 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e3a4:	e02d      	b.n	800e402 <rfalSetMode+0x1f2>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_nfc | ST25R3911_REG_MODE_nfc_ar) );
 800e3a6:	2101      	movs	r1, #1
 800e3a8:	2003      	movs	r0, #3
 800e3aa:	f7f6 fe95 	bl	80050d8 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 800e3ae:	2160      	movs	r1, #96	@ 0x60
 800e3b0:	2040      	movs	r0, #64	@ 0x40
 800e3b2:	f7f6 fb2b 	bl	8004a0c <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800e3b6:	2110      	movs	r1, #16
 800e3b8:	2009      	movs	r0, #9
 800e3ba:	f7f6 fefe 	bl	80051ba <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800e3be:	f640 0001 	movw	r0, #2049	@ 0x801
 800e3c2:	f7f7 fabf 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800e3c6:	f640 0002 	movw	r0, #2050	@ 0x802
 800e3ca:	f7f7 fabb 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e3ce:	e018      	b.n	800e402 <rfalSetMode+0x1f2>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_nfcip1_normal_mode | ST25R3911_REG_MODE_nfc_ar) );
 800e3d0:	2189      	movs	r1, #137	@ 0x89
 800e3d2:	2003      	movs	r0, #3
 800e3d4:	f7f6 fe80 	bl	80050d8 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 800e3d8:	2160      	movs	r1, #96	@ 0x60
 800e3da:	2040      	movs	r0, #64	@ 0x40
 800e3dc:	f7f6 fb16 	bl	8004a0c <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800e3e0:	2110      	movs	r1, #16
 800e3e2:	2009      	movs	r0, #9
 800e3e4:	f7f6 fee9 	bl	80051ba <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800e3e8:	f648 0001 	movw	r0, #34817	@ 0x8801
 800e3ec:	f7f7 faaa 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800e3f0:	f648 0002 	movw	r0, #34818	@ 0x8802
 800e3f4:	f7f7 faa6 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e3f8:	e003      	b.n	800e402 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
            return ERR_NOTSUPP;
 800e3fa:	2318      	movs	r3, #24
 800e3fc:	e013      	b.n	800e426 <rfalSetMode+0x216>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800e3fe:	230f      	movs	r3, #15
 800e400:	e011      	b.n	800e426 <rfalSetMode+0x216>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800e402:	4b0b      	ldr	r3, [pc, #44]	@ (800e430 <rfalSetMode+0x220>)
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	2b02      	cmp	r3, #2
 800e408:	bf38      	it	cc
 800e40a:	2302      	movcc	r3, #2
 800e40c:	b2da      	uxtb	r2, r3
 800e40e:	4b08      	ldr	r3, [pc, #32]	@ (800e430 <rfalSetMode+0x220>)
 800e410:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 800e412:	4a07      	ldr	r2, [pc, #28]	@ (800e430 <rfalSetMode+0x220>)
 800e414:	79fb      	ldrb	r3, [r7, #7]
 800e416:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 800e418:	797a      	ldrb	r2, [r7, #5]
 800e41a:	79bb      	ldrb	r3, [r7, #6]
 800e41c:	4611      	mov	r1, r2
 800e41e:	4618      	mov	r0, r3
 800e420:	f000 f808 	bl	800e434 <rfalSetBitRate>
 800e424:	4603      	mov	r3, r0
}
 800e426:	4618      	mov	r0, r3
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	20000d80 	.word	0x20000d80

0800e434 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b088      	sub	sp, #32
 800e438:	af00      	add	r7, sp, #0
 800e43a:	4603      	mov	r3, r0
 800e43c:	460a      	mov	r2, r1
 800e43e:	71fb      	strb	r3, [r7, #7]
 800e440:	4613      	mov	r3, r2
 800e442:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800e444:	4b9a      	ldr	r3, [pc, #616]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 800e44c:	2321      	movs	r3, #33	@ 0x21
 800e44e:	e232      	b.n	800e8b6 <rfalSetBitRate+0x482>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800e450:	79fb      	ldrb	r3, [r7, #7]
 800e452:	2bff      	cmp	r3, #255	@ 0xff
 800e454:	d102      	bne.n	800e45c <rfalSetBitRate+0x28>
 800e456:	4b96      	ldr	r3, [pc, #600]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e458:	789b      	ldrb	r3, [r3, #2]
 800e45a:	e000      	b.n	800e45e <rfalSetBitRate+0x2a>
 800e45c:	79fb      	ldrb	r3, [r7, #7]
 800e45e:	4a94      	ldr	r2, [pc, #592]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e460:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800e462:	79bb      	ldrb	r3, [r7, #6]
 800e464:	2bff      	cmp	r3, #255	@ 0xff
 800e466:	d102      	bne.n	800e46e <rfalSetBitRate+0x3a>
 800e468:	4b91      	ldr	r3, [pc, #580]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e46a:	78db      	ldrb	r3, [r3, #3]
 800e46c:	e000      	b.n	800e470 <rfalSetBitRate+0x3c>
 800e46e:	79bb      	ldrb	r3, [r7, #6]
 800e470:	4a8f      	ldr	r2, [pc, #572]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e472:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800e474:	4b8e      	ldr	r3, [pc, #568]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e476:	785b      	ldrb	r3, [r3, #1]
 800e478:	2b07      	cmp	r3, #7
 800e47a:	d012      	beq.n	800e4a2 <rfalSetBitRate+0x6e>
 800e47c:	4b8c      	ldr	r3, [pc, #560]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e47e:	785b      	ldrb	r3, [r3, #1]
 800e480:	2b08      	cmp	r3, #8
 800e482:	d00e      	beq.n	800e4a2 <rfalSetBitRate+0x6e>
    {
        EXIT_ON_ERR( ret, st25r3911SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800e484:	4b8a      	ldr	r3, [pc, #552]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e486:	789b      	ldrb	r3, [r3, #2]
 800e488:	4a89      	ldr	r2, [pc, #548]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e48a:	78d2      	ldrb	r2, [r2, #3]
 800e48c:	4611      	mov	r1, r2
 800e48e:	4618      	mov	r0, r3
 800e490:	f7f6 fa3b 	bl	800490a <st25r3911SetBitrate>
 800e494:	4603      	mov	r3, r0
 800e496:	83fb      	strh	r3, [r7, #30]
 800e498:	8bfb      	ldrh	r3, [r7, #30]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d001      	beq.n	800e4a2 <rfalSetBitRate+0x6e>
 800e49e:	8bfb      	ldrh	r3, [r7, #30]
 800e4a0:	e209      	b.n	800e8b6 <rfalSetBitRate+0x482>
    }
    
    
    switch( gRFAL.mode )
 800e4a2:	4b83      	ldr	r3, [pc, #524]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e4a4:	785b      	ldrb	r3, [r3, #1]
 800e4a6:	2b0d      	cmp	r3, #13
 800e4a8:	f200 8202 	bhi.w	800e8b0 <rfalSetBitRate+0x47c>
 800e4ac:	a201      	add	r2, pc, #4	@ (adr r2, 800e4b4 <rfalSetBitRate+0x80>)
 800e4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b2:	bf00      	nop
 800e4b4:	0800e8ad 	.word	0x0800e8ad
 800e4b8:	0800e4ed 	.word	0x0800e4ed
 800e4bc:	0800e4ed 	.word	0x0800e4ed
 800e4c0:	0800e56d 	.word	0x0800e56d
 800e4c4:	0800e56d 	.word	0x0800e56d
 800e4c8:	0800e56d 	.word	0x0800e56d
 800e4cc:	0800e5f5 	.word	0x0800e5f5
 800e4d0:	0800e67d 	.word	0x0800e67d
 800e4d4:	0800e67d 	.word	0x0800e67d
 800e4d8:	0800e7ad 	.word	0x0800e7ad
 800e4dc:	0800e8ad 	.word	0x0800e8ad
 800e4e0:	0800e8ad 	.word	0x0800e8ad
 800e4e4:	0800e8ad 	.word	0x0800e8ad
 800e4e8:	0800e835 	.word	0x0800e835
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800e4ec:	2008      	movs	r0, #8
 800e4ee:	f7f7 fa29 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800e4f2:	4b6f      	ldr	r3, [pc, #444]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e4f4:	789b      	ldrb	r3, [r3, #2]
 800e4f6:	2bea      	cmp	r3, #234	@ 0xea
 800e4f8:	d90b      	bls.n	800e512 <rfalSetBitRate+0xde>
 800e4fa:	4b6d      	ldr	r3, [pc, #436]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e4fc:	789b      	ldrb	r3, [r3, #2]
 800e4fe:	011b      	lsls	r3, r3, #4
 800e500:	b29b      	uxth	r3, r3
 800e502:	b2db      	uxtb	r3, r3
 800e504:	b29b      	uxth	r3, r3
 800e506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e50a:	f043 0301 	orr.w	r3, r3, #1
 800e50e:	b29b      	uxth	r3, r3
 800e510:	e00c      	b.n	800e52c <rfalSetBitRate+0xf8>
 800e512:	4b67      	ldr	r3, [pc, #412]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e514:	789b      	ldrb	r3, [r3, #2]
 800e516:	3301      	adds	r3, #1
 800e518:	b29b      	uxth	r3, r3
 800e51a:	011b      	lsls	r3, r3, #4
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	b29b      	uxth	r3, r3
 800e522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e526:	f043 0301 	orr.w	r3, r3, #1
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7f7 fa09 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800e532:	4b5f      	ldr	r3, [pc, #380]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e534:	78db      	ldrb	r3, [r3, #3]
 800e536:	2bea      	cmp	r3, #234	@ 0xea
 800e538:	d909      	bls.n	800e54e <rfalSetBitRate+0x11a>
 800e53a:	4b5d      	ldr	r3, [pc, #372]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e53c:	78db      	ldrb	r3, [r3, #3]
 800e53e:	011b      	lsls	r3, r3, #4
 800e540:	b29b      	uxth	r3, r3
 800e542:	b2db      	uxtb	r3, r3
 800e544:	b29b      	uxth	r3, r3
 800e546:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	e00a      	b.n	800e564 <rfalSetBitRate+0x130>
 800e54e:	4b58      	ldr	r3, [pc, #352]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e550:	78db      	ldrb	r3, [r3, #3]
 800e552:	3301      	adds	r3, #1
 800e554:	b29b      	uxth	r3, r3
 800e556:	011b      	lsls	r3, r3, #4
 800e558:	b29b      	uxth	r3, r3
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800e562:	b29b      	uxth	r3, r3
 800e564:	4618      	mov	r0, r3
 800e566:	f7f7 f9ed 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e56a:	e1a3      	b.n	800e8b4 <rfalSetBitRate+0x480>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800e56c:	2008      	movs	r0, #8
 800e56e:	f7f7 f9e9 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800e572:	4b4f      	ldr	r3, [pc, #316]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e574:	789b      	ldrb	r3, [r3, #2]
 800e576:	2bea      	cmp	r3, #234	@ 0xea
 800e578:	d90b      	bls.n	800e592 <rfalSetBitRate+0x15e>
 800e57a:	4b4d      	ldr	r3, [pc, #308]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e57c:	789b      	ldrb	r3, [r3, #2]
 800e57e:	011b      	lsls	r3, r3, #4
 800e580:	b29b      	uxth	r3, r3
 800e582:	b2db      	uxtb	r3, r3
 800e584:	b29b      	uxth	r3, r3
 800e586:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e58a:	f043 0301 	orr.w	r3, r3, #1
 800e58e:	b29b      	uxth	r3, r3
 800e590:	e00c      	b.n	800e5ac <rfalSetBitRate+0x178>
 800e592:	4b47      	ldr	r3, [pc, #284]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e594:	789b      	ldrb	r3, [r3, #2]
 800e596:	3301      	adds	r3, #1
 800e598:	b29b      	uxth	r3, r3
 800e59a:	011b      	lsls	r3, r3, #4
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e5a6:	f043 0301 	orr.w	r3, r3, #1
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7f7 f9c9 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800e5b2:	4b3f      	ldr	r3, [pc, #252]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e5b4:	78db      	ldrb	r3, [r3, #3]
 800e5b6:	2bea      	cmp	r3, #234	@ 0xea
 800e5b8:	d90b      	bls.n	800e5d2 <rfalSetBitRate+0x19e>
 800e5ba:	4b3d      	ldr	r3, [pc, #244]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e5bc:	78db      	ldrb	r3, [r3, #3]
 800e5be:	011b      	lsls	r3, r3, #4
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e5ca:	f043 0302 	orr.w	r3, r3, #2
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	e00c      	b.n	800e5ec <rfalSetBitRate+0x1b8>
 800e5d2:	4b37      	ldr	r3, [pc, #220]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e5d4:	78db      	ldrb	r3, [r3, #3]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	011b      	lsls	r3, r3, #4
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e5e6:	f043 0302 	orr.w	r3, r3, #2
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7f7 f9a9 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e5f2:	e15f      	b.n	800e8b4 <rfalSetBitRate+0x480>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800e5f4:	2008      	movs	r0, #8
 800e5f6:	f7f7 f9a5 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800e5fa:	4b2d      	ldr	r3, [pc, #180]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e5fc:	789b      	ldrb	r3, [r3, #2]
 800e5fe:	2bea      	cmp	r3, #234	@ 0xea
 800e600:	d90b      	bls.n	800e61a <rfalSetBitRate+0x1e6>
 800e602:	4b2b      	ldr	r3, [pc, #172]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e604:	789b      	ldrb	r3, [r3, #2]
 800e606:	011b      	lsls	r3, r3, #4
 800e608:	b29b      	uxth	r3, r3
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e612:	f043 0301 	orr.w	r3, r3, #1
 800e616:	b29b      	uxth	r3, r3
 800e618:	e00c      	b.n	800e634 <rfalSetBitRate+0x200>
 800e61a:	4b25      	ldr	r3, [pc, #148]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e61c:	789b      	ldrb	r3, [r3, #2]
 800e61e:	3301      	adds	r3, #1
 800e620:	b29b      	uxth	r3, r3
 800e622:	011b      	lsls	r3, r3, #4
 800e624:	b29b      	uxth	r3, r3
 800e626:	b2db      	uxtb	r3, r3
 800e628:	b29b      	uxth	r3, r3
 800e62a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e62e:	f043 0301 	orr.w	r3, r3, #1
 800e632:	b29b      	uxth	r3, r3
 800e634:	4618      	mov	r0, r3
 800e636:	f7f7 f985 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800e63a:	4b1d      	ldr	r3, [pc, #116]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e63c:	78db      	ldrb	r3, [r3, #3]
 800e63e:	2bea      	cmp	r3, #234	@ 0xea
 800e640:	d90b      	bls.n	800e65a <rfalSetBitRate+0x226>
 800e642:	4b1b      	ldr	r3, [pc, #108]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e644:	78db      	ldrb	r3, [r3, #3]
 800e646:	011b      	lsls	r3, r3, #4
 800e648:	b29b      	uxth	r3, r3
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e652:	f043 0302 	orr.w	r3, r3, #2
 800e656:	b29b      	uxth	r3, r3
 800e658:	e00c      	b.n	800e674 <rfalSetBitRate+0x240>
 800e65a:	4b15      	ldr	r3, [pc, #84]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e65c:	78db      	ldrb	r3, [r3, #3]
 800e65e:	3301      	adds	r3, #1
 800e660:	b29b      	uxth	r3, r3
 800e662:	011b      	lsls	r3, r3, #4
 800e664:	b29b      	uxth	r3, r3
 800e666:	b2db      	uxtb	r3, r3
 800e668:	b29b      	uxth	r3, r3
 800e66a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e66e:	f043 0302 	orr.w	r3, r3, #2
 800e672:	b29b      	uxth	r3, r3
 800e674:	4618      	mov	r0, r3
 800e676:	f7f7 f965 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e67a:	e11b      	b.n	800e8b4 <rfalSetBitRate+0x480>
        
           #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
           #else
               
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 800e67c:	4b0c      	ldr	r3, [pc, #48]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e67e:	78db      	ldrb	r3, [r3, #3]
 800e680:	2bec      	cmp	r3, #236	@ 0xec
 800e682:	d00b      	beq.n	800e69c <rfalSetBitRate+0x268>
 800e684:	4b0a      	ldr	r3, [pc, #40]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e686:	78db      	ldrb	r3, [r3, #3]
 800e688:	2beb      	cmp	r3, #235	@ 0xeb
 800e68a:	d007      	beq.n	800e69c <rfalSetBitRate+0x268>
 800e68c:	4b08      	ldr	r3, [pc, #32]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e68e:	78db      	ldrb	r3, [r3, #3]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d003      	beq.n	800e69c <rfalSetBitRate+0x268>
 800e694:	4b06      	ldr	r3, [pc, #24]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e696:	78db      	ldrb	r3, [r3, #3]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d107      	bne.n	800e6ac <rfalSetBitRate+0x278>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 800e69c:	4b04      	ldr	r3, [pc, #16]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e69e:	789b      	ldrb	r3, [r3, #2]
 800e6a0:	2bed      	cmp	r3, #237	@ 0xed
 800e6a2:	d007      	beq.n	800e6b4 <rfalSetBitRate+0x280>
 800e6a4:	4b02      	ldr	r3, [pc, #8]	@ (800e6b0 <rfalSetBitRate+0x27c>)
 800e6a6:	789b      	ldrb	r3, [r3, #2]
 800e6a8:	2bec      	cmp	r3, #236	@ 0xec
 800e6aa:	d003      	beq.n	800e6b4 <rfalSetBitRate+0x280>
                {
                    return ERR_PARAM;
 800e6ac:	2307      	movs	r3, #7
 800e6ae:	e102      	b.n	800e8b6 <rfalSetBitRate+0x482>
 800e6b0:	20000d80 	.word	0x20000d80
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3911StreamConfig      streamConf;
                    iso15693PhyConfig_t               config;
                    
                    /* Set the coding configuration for configuring ISO15693 */
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 800e6b4:	4b82      	ldr	r3, [pc, #520]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e6b6:	789b      	ldrb	r3, [r3, #2]
 800e6b8:	2bed      	cmp	r3, #237	@ 0xed
 800e6ba:	bf0c      	ite	eq
 800e6bc:	2301      	moveq	r3, #1
 800e6be:	2300      	movne	r3, #0
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 800e6c4:	4b7e      	ldr	r3, [pc, #504]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e6c6:	78db      	ldrb	r3, [r3, #3]
 800e6c8:	2beb      	cmp	r3, #235	@ 0xeb
 800e6ca:	d006      	beq.n	800e6da <rfalSetBitRate+0x2a6>
 800e6cc:	2beb      	cmp	r3, #235	@ 0xeb
 800e6ce:	dc0d      	bgt.n	800e6ec <rfalSetBitRate+0x2b8>
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d005      	beq.n	800e6e0 <rfalSetBitRate+0x2ac>
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d006      	beq.n	800e6e6 <rfalSetBitRate+0x2b2>
 800e6d8:	e008      	b.n	800e6ec <rfalSetBitRate+0x2b8>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 800e6da:	2301      	movs	r3, #1
 800e6dc:	613b      	str	r3, [r7, #16]
                            break;
 800e6de:	e008      	b.n	800e6f2 <rfalSetBitRate+0x2be>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	613b      	str	r3, [r7, #16]
                            break;
 800e6e4:	e005      	b.n	800e6f2 <rfalSetBitRate+0x2be>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 800e6e6:	2303      	movs	r3, #3
 800e6e8:	613b      	str	r3, [r7, #16]
                            break;
 800e6ea:	e002      	b.n	800e6f2 <rfalSetBitRate+0x2be>
                        default:
                            config.speedMode = 0;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	613b      	str	r3, [r7, #16]
                            break;
 800e6f0:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);   /* Convert ISO15693 config into StreamConfig */
 800e6f2:	f107 0218 	add.w	r2, r7, #24
 800e6f6:	f107 030c 	add.w	r3, r7, #12
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7f7 fa7f 	bl	8005c00 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	785b      	ldrb	r3, [r3, #1]
 800e706:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	789b      	ldrb	r3, [r3, #2]
 800e70c:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	78db      	ldrb	r3, [r3, #3]
 800e712:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	753b      	strb	r3, [r7, #20]
                    st25r3911StreamConfigure(&streamConf);
 800e71a:	f107 0314 	add.w	r3, r7, #20
 800e71e:	4618      	mov	r0, r3
 800e720:	f7f6 fab2 	bl	8004c88 <st25r3911StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800e724:	2008      	movs	r0, #8
 800e726:	f7f7 f90d 	bl	8005944 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800e72a:	4b65      	ldr	r3, [pc, #404]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e72c:	789b      	ldrb	r3, [r3, #2]
 800e72e:	2bea      	cmp	r3, #234	@ 0xea
 800e730:	d90b      	bls.n	800e74a <rfalSetBitRate+0x316>
 800e732:	4b63      	ldr	r3, [pc, #396]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e734:	789b      	ldrb	r3, [r3, #2]
 800e736:	011b      	lsls	r3, r3, #4
 800e738:	b29b      	uxth	r3, r3
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e742:	f043 0301 	orr.w	r3, r3, #1
 800e746:	b29b      	uxth	r3, r3
 800e748:	e00c      	b.n	800e764 <rfalSetBitRate+0x330>
 800e74a:	4b5d      	ldr	r3, [pc, #372]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e74c:	789b      	ldrb	r3, [r3, #2]
 800e74e:	3301      	adds	r3, #1
 800e750:	b29b      	uxth	r3, r3
 800e752:	011b      	lsls	r3, r3, #4
 800e754:	b29b      	uxth	r3, r3
 800e756:	b2db      	uxtb	r3, r3
 800e758:	b29b      	uxth	r3, r3
 800e75a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e75e:	f043 0301 	orr.w	r3, r3, #1
 800e762:	b29b      	uxth	r3, r3
 800e764:	4618      	mov	r0, r3
 800e766:	f7f7 f8ed 	bl	8005944 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800e76a:	4b55      	ldr	r3, [pc, #340]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e76c:	78db      	ldrb	r3, [r3, #3]
 800e76e:	2bea      	cmp	r3, #234	@ 0xea
 800e770:	d90b      	bls.n	800e78a <rfalSetBitRate+0x356>
 800e772:	4b53      	ldr	r3, [pc, #332]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e774:	78db      	ldrb	r3, [r3, #3]
 800e776:	011b      	lsls	r3, r3, #4
 800e778:	b29b      	uxth	r3, r3
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e782:	f043 0302 	orr.w	r3, r3, #2
 800e786:	b29b      	uxth	r3, r3
 800e788:	e00c      	b.n	800e7a4 <rfalSetBitRate+0x370>
 800e78a:	4b4d      	ldr	r3, [pc, #308]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e78c:	78db      	ldrb	r3, [r3, #3]
 800e78e:	3301      	adds	r3, #1
 800e790:	b29b      	uxth	r3, r3
 800e792:	011b      	lsls	r3, r3, #4
 800e794:	b29b      	uxth	r3, r3
 800e796:	b2db      	uxtb	r3, r3
 800e798:	b29b      	uxth	r3, r3
 800e79a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e79e:	f043 0302 	orr.w	r3, r3, #2
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7f7 f8cd 	bl	8005944 <rfalSetAnalogConfig>
                break;
 800e7aa:	e083      	b.n	800e8b4 <rfalSetBitRate+0x480>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800e7ac:	2008      	movs	r0, #8
 800e7ae:	f7f7 f8c9 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800e7b2:	4b43      	ldr	r3, [pc, #268]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e7b4:	789b      	ldrb	r3, [r3, #2]
 800e7b6:	2bea      	cmp	r3, #234	@ 0xea
 800e7b8:	d90b      	bls.n	800e7d2 <rfalSetBitRate+0x39e>
 800e7ba:	4b41      	ldr	r3, [pc, #260]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e7bc:	789b      	ldrb	r3, [r3, #2]
 800e7be:	011b      	lsls	r3, r3, #4
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e7ca:	f043 0301 	orr.w	r3, r3, #1
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	e00c      	b.n	800e7ec <rfalSetBitRate+0x3b8>
 800e7d2:	4b3b      	ldr	r3, [pc, #236]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e7d4:	789b      	ldrb	r3, [r3, #2]
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	011b      	lsls	r3, r3, #4
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e7e6:	f043 0301 	orr.w	r3, r3, #1
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7f7 f8a9 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800e7f2:	4b33      	ldr	r3, [pc, #204]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e7f4:	78db      	ldrb	r3, [r3, #3]
 800e7f6:	2bea      	cmp	r3, #234	@ 0xea
 800e7f8:	d90b      	bls.n	800e812 <rfalSetBitRate+0x3de>
 800e7fa:	4b31      	ldr	r3, [pc, #196]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e7fc:	78db      	ldrb	r3, [r3, #3]
 800e7fe:	011b      	lsls	r3, r3, #4
 800e800:	b29b      	uxth	r3, r3
 800e802:	b2db      	uxtb	r3, r3
 800e804:	b29b      	uxth	r3, r3
 800e806:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e80a:	f043 0302 	orr.w	r3, r3, #2
 800e80e:	b29b      	uxth	r3, r3
 800e810:	e00c      	b.n	800e82c <rfalSetBitRate+0x3f8>
 800e812:	4b2b      	ldr	r3, [pc, #172]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e814:	78db      	ldrb	r3, [r3, #3]
 800e816:	3301      	adds	r3, #1
 800e818:	b29b      	uxth	r3, r3
 800e81a:	011b      	lsls	r3, r3, #4
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	b29b      	uxth	r3, r3
 800e822:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e826:	f043 0302 	orr.w	r3, r3, #2
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7f7 f889 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e832:	e03f      	b.n	800e8b4 <rfalSetBitRate+0x480>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800e834:	2009      	movs	r0, #9
 800e836:	f7f7 f885 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800e83a:	4b21      	ldr	r3, [pc, #132]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e83c:	789b      	ldrb	r3, [r3, #2]
 800e83e:	2bea      	cmp	r3, #234	@ 0xea
 800e840:	d909      	bls.n	800e856 <rfalSetBitRate+0x422>
 800e842:	4b1f      	ldr	r3, [pc, #124]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e844:	789b      	ldrb	r3, [r3, #2]
 800e846:	011b      	lsls	r3, r3, #4
 800e848:	b29b      	uxth	r3, r3
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	4b1d      	ldr	r3, [pc, #116]	@ (800e8c4 <rfalSetBitRate+0x490>)
 800e850:	4313      	orrs	r3, r2
 800e852:	b29b      	uxth	r3, r3
 800e854:	e00a      	b.n	800e86c <rfalSetBitRate+0x438>
 800e856:	4b1a      	ldr	r3, [pc, #104]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e858:	789b      	ldrb	r3, [r3, #2]
 800e85a:	3301      	adds	r3, #1
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	011b      	lsls	r3, r3, #4
 800e860:	b29b      	uxth	r3, r3
 800e862:	b2db      	uxtb	r3, r3
 800e864:	b29a      	uxth	r2, r3
 800e866:	4b17      	ldr	r3, [pc, #92]	@ (800e8c4 <rfalSetBitRate+0x490>)
 800e868:	4313      	orrs	r3, r2
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7f7 f869 	bl	8005944 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800e872:	4b13      	ldr	r3, [pc, #76]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e874:	78db      	ldrb	r3, [r3, #3]
 800e876:	2bea      	cmp	r3, #234	@ 0xea
 800e878:	d909      	bls.n	800e88e <rfalSetBitRate+0x45a>
 800e87a:	4b11      	ldr	r3, [pc, #68]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e87c:	78db      	ldrb	r3, [r3, #3]
 800e87e:	011b      	lsls	r3, r3, #4
 800e880:	b29b      	uxth	r3, r3
 800e882:	b2db      	uxtb	r3, r3
 800e884:	b29a      	uxth	r2, r3
 800e886:	4b10      	ldr	r3, [pc, #64]	@ (800e8c8 <rfalSetBitRate+0x494>)
 800e888:	4313      	orrs	r3, r2
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	e00a      	b.n	800e8a4 <rfalSetBitRate+0x470>
 800e88e:	4b0c      	ldr	r3, [pc, #48]	@ (800e8c0 <rfalSetBitRate+0x48c>)
 800e890:	78db      	ldrb	r3, [r3, #3]
 800e892:	3301      	adds	r3, #1
 800e894:	b29b      	uxth	r3, r3
 800e896:	011b      	lsls	r3, r3, #4
 800e898:	b29b      	uxth	r3, r3
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	b29a      	uxth	r2, r3
 800e89e:	4b0a      	ldr	r3, [pc, #40]	@ (800e8c8 <rfalSetBitRate+0x494>)
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7f7 f84d 	bl	8005944 <rfalSetAnalogConfig>
            break;
 800e8aa:	e003      	b.n	800e8b4 <rfalSetBitRate+0x480>
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 800e8ac:	2321      	movs	r3, #33	@ 0x21
 800e8ae:	e002      	b.n	800e8b6 <rfalSetBitRate+0x482>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800e8b0:	230f      	movs	r3, #15
 800e8b2:	e000      	b.n	800e8b6 <rfalSetBitRate+0x482>
    }
    
    return ERR_NONE;
 800e8b4:	2300      	movs	r3, #0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3720      	adds	r7, #32
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	20000d80 	.word	0x20000d80
 800e8c4:	ffff8801 	.word	0xffff8801
 800e8c8:	ffff8802 	.word	0xffff8802

0800e8cc <rfalGetBitRate>:


/*******************************************************************************/
ReturnCode rfalGetBitRate( rfalBitRate *txBR, rfalBitRate *rxBR )
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 800e8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800e914 <rfalGetBitRate+0x48>)
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d003      	beq.n	800e8e6 <rfalGetBitRate+0x1a>
 800e8de:	4b0d      	ldr	r3, [pc, #52]	@ (800e914 <rfalGetBitRate+0x48>)
 800e8e0:	785b      	ldrb	r3, [r3, #1]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d101      	bne.n	800e8ea <rfalGetBitRate+0x1e>
    {
        return ERR_WRONG_STATE;
 800e8e6:	2321      	movs	r3, #33	@ 0x21
 800e8e8:	e00e      	b.n	800e908 <rfalGetBitRate+0x3c>
    }
    
    if( txBR != NULL )
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d003      	beq.n	800e8f8 <rfalGetBitRate+0x2c>
    {
        *txBR = gRFAL.txBR;
 800e8f0:	4b08      	ldr	r3, [pc, #32]	@ (800e914 <rfalGetBitRate+0x48>)
 800e8f2:	789a      	ldrb	r2, [r3, #2]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	701a      	strb	r2, [r3, #0]
    }
    
    if( rxBR != NULL )
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d003      	beq.n	800e906 <rfalGetBitRate+0x3a>
    {
        *rxBR = gRFAL.rxBR;
 800e8fe:	4b05      	ldr	r3, [pc, #20]	@ (800e914 <rfalGetBitRate+0x48>)
 800e900:	78da      	ldrb	r2, [r3, #3]
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 800e906:	2300      	movs	r3, #0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr
 800e914:	20000d80 	.word	0x20000d80

0800e918 <rfalSetErrorHandling>:


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	4603      	mov	r3, r0
 800e920:	71fb      	strb	r3, [r7, #7]
    gRFAL.conf.eHandling = eHandling;
 800e922:	4a04      	ldr	r2, [pc, #16]	@ (800e934 <rfalSetErrorHandling+0x1c>)
 800e924:	79fb      	ldrb	r3, [r7, #7]
 800e926:	71d3      	strb	r3, [r2, #7]
}
 800e928:	bf00      	nop
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr
 800e934:	20000d80 	.word	0x20000d80

0800e938 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3911_GPT_MAX_1FC );
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4a06      	ldr	r2, [pc, #24]	@ (800e95c <rfalSetFDTPoll+0x24>)
 800e944:	4293      	cmp	r3, r2
 800e946:	bf28      	it	cs
 800e948:	4613      	movcs	r3, r2
 800e94a:	4a05      	ldr	r2, [pc, #20]	@ (800e960 <rfalSetFDTPoll+0x28>)
 800e94c:	6113      	str	r3, [r2, #16]
}
 800e94e:	bf00      	nop
 800e950:	370c      	adds	r7, #12
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr
 800e95a:	bf00      	nop
 800e95c:	0007fff8 	.word	0x0007fff8
 800e960:	20000d80 	.word	0x20000d80

0800e964 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3911_MRT_MAX_1FC);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f5b3 5f7f 	cmp.w	r3, #16320	@ 0x3fc0
 800e972:	bf28      	it	cs
 800e974:	f44f 537f 	movcs.w	r3, #16320	@ 0x3fc0
 800e978:	4a03      	ldr	r2, [pc, #12]	@ (800e988 <rfalSetFDTListen+0x24>)
 800e97a:	60d3      	str	r3, [r2, #12]
}
 800e97c:	bf00      	nop
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr
 800e988:	20000d80 	.word	0x20000d80

0800e98c <rfalSetGT>:
{
    return gRFAL.timings.FDTListen;
}

void rfalSetGT( uint32_t GT )
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3911_GT_MAX_1FC );
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	4a06      	ldr	r2, [pc, #24]	@ (800e9b0 <rfalSetGT+0x24>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	bf28      	it	cs
 800e99c:	4613      	movcs	r3, r2
 800e99e:	4a05      	ldr	r2, [pc, #20]	@ (800e9b4 <rfalSetGT+0x28>)
 800e9a0:	6093      	str	r3, [r2, #8]
}
 800e9a2:	bf00      	nop
 800e9a4:	370c      	adds	r7, #12
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ac:	4770      	bx	lr
 800e9ae:	bf00      	nop
 800e9b0:	040a8bc0 	.word	0x040a8bc0
 800e9b4:	20000d80 	.word	0x20000d80

0800e9b8 <rfalIsGTExpired>:
    return gRFAL.timings.GT;
}

/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 800e9bc:	4b09      	ldr	r3, [pc, #36]	@ (800e9e4 <rfalIsGTExpired+0x2c>)
 800e9be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d00c      	beq.n	800e9de <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 800e9c4:	4b07      	ldr	r3, [pc, #28]	@ (800e9e4 <rfalIsGTExpired+0x2c>)
 800e9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7f6 ff8f 	bl	80058ec <timerIsExpired>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	f083 0301 	eor.w	r3, r3, #1
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d001      	beq.n	800e9de <rfalIsGTExpired+0x26>
        {
            return false;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	e000      	b.n	800e9e0 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 800e9de:	2301      	movs	r3, #1
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	20000d80 	.word	0x20000d80

0800e9e8 <rfalFieldOnAndStartGT>:

/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
    ReturnCode  ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3911IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800e9ee:	2280      	movs	r2, #128	@ 0x80
 800e9f0:	2180      	movs	r1, #128	@ 0x80
 800e9f2:	2002      	movs	r0, #2
 800e9f4:	f7f6 f83e 	bl	8004a74 <st25r3911CheckReg>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	f083 0301 	eor.w	r3, r3, #1
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d103      	bne.n	800ea0c <rfalFieldOnAndStartGT+0x24>
 800ea04:	4b27      	ldr	r3, [pc, #156]	@ (800eaa4 <rfalFieldOnAndStartGT+0xbc>)
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d101      	bne.n	800ea10 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 800ea0c:	2321      	movs	r3, #33	@ 0x21
 800ea0e:	e044      	b.n	800ea9a <rfalFieldOnAndStartGT+0xb2>
    }
    
    ret = ERR_NONE;
 800ea10:	2300      	movs	r3, #0
 800ea12:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800ea14:	2002      	movs	r0, #2
 800ea16:	f7f6 ff95 	bl	8005944 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3911IsTxEnabled() || !gRFAL.field )
 800ea1a:	2208      	movs	r2, #8
 800ea1c:	2108      	movs	r1, #8
 800ea1e:	2002      	movs	r0, #2
 800ea20:	f7f6 f828 	bl	8004a74 <st25r3911CheckReg>
 800ea24:	4603      	mov	r3, r0
 800ea26:	f083 0301 	eor.w	r3, r3, #1
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d106      	bne.n	800ea3e <rfalFieldOnAndStartGT+0x56>
 800ea30:	4b1c      	ldr	r3, [pc, #112]	@ (800eaa4 <rfalFieldOnAndStartGT+0xbc>)
 800ea32:	791b      	ldrb	r3, [r3, #4]
 800ea34:	f083 0301 	eor.w	r3, r3, #1
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d016      	beq.n	800ea6c <rfalFieldOnAndStartGT+0x84>
    {
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3911PerformCollisionAvoidance( ST25R3911_CMD_RESPONSE_RF_COLLISION_0, ST25R3911_THRESHOLD_DO_NOT_SET, ST25R3911_THRESHOLD_DO_NOT_SET, 0 );
 800ea3e:	2300      	movs	r3, #0
 800ea40:	22ff      	movs	r2, #255	@ 0xff
 800ea42:	21ff      	movs	r1, #255	@ 0xff
 800ea44:	20ca      	movs	r0, #202	@ 0xca
 800ea46:	f7f6 f895 	bl	8004b74 <st25r3911PerformCollisionAvoidance>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3911IsTxEnabled();
 800ea4e:	2208      	movs	r2, #8
 800ea50:	2108      	movs	r1, #8
 800ea52:	2002      	movs	r0, #2
 800ea54:	f7f6 f80e 	bl	8004a74 <st25r3911CheckReg>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	4b11      	ldr	r3, [pc, #68]	@ (800eaa4 <rfalFieldOnAndStartGT+0xbc>)
 800ea5e:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 800ea60:	4b10      	ldr	r3, [pc, #64]	@ (800eaa4 <rfalFieldOnAndStartGT+0xbc>)
 800ea62:	791b      	ldrb	r3, [r3, #4]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d001      	beq.n	800ea6c <rfalFieldOnAndStartGT+0x84>
        {            
            st25r3911TxRxOn(); /* Enable Tx and Rx (Tx is already On) */
 800ea68:	f7f5 fe36 	bl	80046d8 <st25r3911TxRxOn>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800ea6c:	4b0d      	ldr	r3, [pc, #52]	@ (800eaa4 <rfalFieldOnAndStartGT+0xbc>)
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d011      	beq.n	800ea98 <rfalFieldOnAndStartGT+0xb0>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3911_GT_MIN_1FC) ) );
 800ea74:	4b0b      	ldr	r3, [pc, #44]	@ (800eaa4 <rfalFieldOnAndStartGT+0xbc>)
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	f243 42f8 	movw	r2, #13560	@ 0x34f8
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	bf38      	it	cc
 800ea80:	4613      	movcc	r3, r2
 800ea82:	4a09      	ldr	r2, [pc, #36]	@ (800eaa8 <rfalFieldOnAndStartGT+0xc0>)
 800ea84:	fba2 2303 	umull	r2, r3, r2, r3
 800ea88:	0b1b      	lsrs	r3, r3, #12
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7f6 ff1f 	bl	80058d0 <timerCalculateTimer>
 800ea92:	4603      	mov	r3, r0
 800ea94:	4a03      	ldr	r2, [pc, #12]	@ (800eaa4 <rfalFieldOnAndStartGT+0xbc>)
 800ea96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
    
    return ret;
 800ea98:	88fb      	ldrh	r3, [r7, #6]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	20000d80 	.word	0x20000d80
 800eaa8:	4d542005 	.word	0x4d542005

0800eaac <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 800eab0:	4b08      	ldr	r3, [pc, #32]	@ (800ead4 <rfalFieldOff+0x28>)
 800eab2:	7d1b      	ldrb	r3, [r3, #20]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d001      	beq.n	800eabc <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 800eab8:	f000 face 	bl	800f058 <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3911TxRxOff();
 800eabc:	f7f5 fe14 	bl	80046e8 <st25r3911TxRxOff>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 800eac0:	2003      	movs	r0, #3
 800eac2:	f7f6 ff3f 	bl	8005944 <rfalSetAnalogConfig>
    gRFAL.field = false;
 800eac6:	4b03      	ldr	r3, [pc, #12]	@ (800ead4 <rfalFieldOff+0x28>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 800eacc:	2300      	movs	r3, #0
}
 800eace:	4618      	mov	r0, r3
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	20000d80 	.word	0x20000d80

0800ead8 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 800ead8:	b5b0      	push	{r4, r5, r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d101      	bne.n	800eaea <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 800eae6:	2307      	movs	r3, #7
 800eae8:	e11c      	b.n	800ed24 <rfalStartTransceive+0x24c>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800eaea:	4b90      	ldr	r3, [pc, #576]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	f240 8117 	bls.w	800ed22 <rfalStartTransceive+0x24a>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800eaf4:	2208      	movs	r2, #8
 800eaf6:	2108      	movs	r1, #8
 800eaf8:	2002      	movs	r0, #2
 800eafa:	f7f5 ffbb 	bl	8004a74 <st25r3911CheckReg>
 800eafe:	4603      	mov	r3, r0
 800eb00:	f083 0301 	eor.w	r3, r3, #1
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d011      	beq.n	800eb2e <rfalStartTransceive+0x56>
 800eb0a:	4b88      	ldr	r3, [pc, #544]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eb0c:	785b      	ldrb	r3, [r3, #1]
 800eb0e:	2b0a      	cmp	r3, #10
 800eb10:	d00d      	beq.n	800eb2e <rfalStartTransceive+0x56>
 800eb12:	4b86      	ldr	r3, [pc, #536]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eb14:	785b      	ldrb	r3, [r3, #1]
 800eb16:	2b0b      	cmp	r3, #11
 800eb18:	d009      	beq.n	800eb2e <rfalStartTransceive+0x56>
 800eb1a:	4b84      	ldr	r3, [pc, #528]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eb1c:	785b      	ldrb	r3, [r3, #1]
 800eb1e:	2b0c      	cmp	r3, #12
 800eb20:	d005      	beq.n	800eb2e <rfalStartTransceive+0x56>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d001      	beq.n	800eb2e <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 800eb2a:	2321      	movs	r3, #33	@ 0x21
 800eb2c:	e0fa      	b.n	800ed24 <rfalStartTransceive+0x24c>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 800eb2e:	4b7f      	ldr	r3, [pc, #508]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	f103 041c 	add.w	r4, r3, #28
 800eb36:	4615      	mov	r5, r2
 800eb38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800eb44:	4b79      	ldr	r3, [pc, #484]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d031      	beq.n	800ebb0 <rfalStartTransceive+0xd8>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 800eb4c:	2340      	movs	r3, #64	@ 0x40
 800eb4e:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800eb50:	4b76      	ldr	r3, [pc, #472]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eb52:	785b      	ldrb	r3, [r3, #1]
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d103      	bne.n	800eb60 <rfalStartTransceive+0x88>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800eb5e:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800eb60:	4b72      	ldr	r3, [pc, #456]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eb62:	785b      	ldrb	r3, [r3, #1]
 800eb64:	2b02      	cmp	r3, #2
 800eb66:	d103      	bne.n	800eb70 <rfalStartTransceive+0x98>
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800eb6e:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 800eb70:	4b6e      	ldr	r3, [pc, #440]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eb72:	785b      	ldrb	r3, [r3, #1]
 800eb74:	2b03      	cmp	r3, #3
 800eb76:	d103      	bne.n	800eb80 <rfalStartTransceive+0xa8>
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800eb7e:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 800eb80:	4b6a      	ldr	r3, [pc, #424]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eb82:	785b      	ldrb	r3, [r3, #1]
 800eb84:	2b07      	cmp	r3, #7
 800eb86:	d102      	bne.n	800eb8e <rfalStartTransceive+0xb6>
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	3380      	adds	r3, #128	@ 0x80
 800eb8c:	60fb      	str	r3, [r7, #12]
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 800eb8e:	4b67      	ldr	r3, [pc, #412]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	68fa      	ldr	r2, [r7, #12]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d806      	bhi.n	800eba6 <rfalStartTransceive+0xce>
 800eb98:	4b64      	ldr	r3, [pc, #400]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eb9a:	68da      	ldr	r2, [r3, #12]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	099b      	lsrs	r3, r3, #6
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	e000      	b.n	800eba8 <rfalStartTransceive+0xd0>
 800eba6:	2304      	movs	r3, #4
 800eba8:	4619      	mov	r1, r3
 800ebaa:	200e      	movs	r0, #14
 800ebac:	f7f6 fa94 	bl	80050d8 <st25r3911WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800ebb0:	4b5e      	ldr	r3, [pc, #376]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ebb2:	785b      	ldrb	r3, [r3, #1]
 800ebb4:	2b09      	cmp	r3, #9
 800ebb6:	d053      	beq.n	800ec60 <rfalStartTransceive+0x188>
 800ebb8:	4b5c      	ldr	r3, [pc, #368]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ebba:	785b      	ldrb	r3, [r3, #1]
 800ebbc:	2b0d      	cmp	r3, #13
 800ebbe:	d04f      	beq.n	800ec60 <rfalStartTransceive+0x188>
        {
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800ebc0:	4b5a      	ldr	r3, [pc, #360]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ebc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ebc8:	d046      	beq.n	800ec58 <rfalStartTransceive+0x180>
 800ebca:	4b58      	ldr	r3, [pc, #352]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ebcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d042      	beq.n	800ec58 <rfalStartTransceive+0x180>
            {
                /* Ensure proper timing configuration */
                if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 800ebd2:	4b56      	ldr	r3, [pc, #344]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ebd4:	68da      	ldr	r2, [r3, #12]
 800ebd6:	4b55      	ldr	r3, [pc, #340]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ebd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d301      	bcc.n	800ebe2 <rfalStartTransceive+0x10a>
                {
                    return ERR_PARAM;
 800ebde:	2307      	movs	r3, #7
 800ebe0:	e0a0      	b.n	800ed24 <rfalStartTransceive+0x24c>
                }
        
                FxTAdj = RFAL_FWT_ADJUSTMENT;
 800ebe2:	2340      	movs	r3, #64	@ 0x40
 800ebe4:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800ebe6:	4b51      	ldr	r3, [pc, #324]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ebe8:	785b      	ldrb	r3, [r3, #1]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d103      	bne.n	800ebf6 <rfalStartTransceive+0x11e>
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ebf4:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800ebf6:	4b4d      	ldr	r3, [pc, #308]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ebf8:	785b      	ldrb	r3, [r3, #1]
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	d103      	bne.n	800ec06 <rfalStartTransceive+0x12e>
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ec04:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 800ec06:	4b49      	ldr	r3, [pc, #292]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec08:	785b      	ldrb	r3, [r3, #1]
 800ec0a:	2b03      	cmp	r3, #3
 800ec0c:	d103      	bne.n	800ec16 <rfalStartTransceive+0x13e>
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f503 632e 	add.w	r3, r3, #2784	@ 0xae0
 800ec14:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 800ec16:	4b45      	ldr	r3, [pc, #276]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec18:	785b      	ldrb	r3, [r3, #1]
 800ec1a:	2b06      	cmp	r3, #6
 800ec1c:	d10b      	bne.n	800ec36 <rfalStartTransceive+0x15e>
                {
                    FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 800ec1e:	4b43      	ldr	r3, [pc, #268]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec20:	789b      	ldrb	r3, [r3, #2]
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	d102      	bne.n	800ec2c <rfalStartTransceive+0x154>
 800ec26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec2a:	e001      	b.n	800ec30 <rfalStartTransceive+0x158>
 800ec2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	4413      	add	r3, r2
 800ec34:	60fb      	str	r3, [r7, #12]
                }
                
                /* Ensure that the given FWT doesn't exceed NRT maximum */
                gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3911_NRT_MAX_1FC );
 800ec36:	4b3d      	ldr	r3, [pc, #244]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	4a3c      	ldr	r2, [pc, #240]	@ (800ed30 <rfalStartTransceive+0x258>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	bf28      	it	cs
 800ec44:	4613      	movcs	r3, r2
 800ec46:	4a39      	ldr	r2, [pc, #228]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec48:	6353      	str	r3, [r2, #52]	@ 0x34
                
                /* Set FWT in the NRT */
                st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 800ec4a:	4b38      	ldr	r3, [pc, #224]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec4e:	099b      	lsrs	r3, r3, #6
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7f5 ff51 	bl	8004af8 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800ec56:	e006      	b.n	800ec66 <rfalStartTransceive+0x18e>
            }
            else
            {
                /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
                st25r3911SetNoResponseTime_64fcs( RFAL_ST25R3911_NRT_DISABLED );
 800ec58:	2000      	movs	r0, #0
 800ec5a:	f7f5 ff4d 	bl	8004af8 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800ec5e:	e002      	b.n	800ec66 <rfalStartTransceive+0x18e>
            }
        }
        else /* Active Comms */
        {
            /* Setup NRT timer for rf response RF collision timeout. */
            st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc(RFAL_AP2P_FIELDON_TADTTRFW) );
 800ec60:	2080      	movs	r0, #128	@ 0x80
 800ec62:	f7f5 ff49 	bl	8004af8 <st25r3911SetNoResponseTime_64fcs>
            
            /* In Active Mode No Response Timer cannot be used to measure FWT a SW timer is used instead */
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 800ec66:	4b31      	ldr	r3, [pc, #196]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec68:	2203      	movs	r2, #3
 800ec6a:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 800ec6c:	4b2f      	ldr	r3, [pc, #188]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec6e:	220b      	movs	r2, #11
 800ec70:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800ec72:	4b2e      	ldr	r3, [pc, #184]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec74:	2202      	movs	r2, #2
 800ec76:	82da      	strh	r2, [r3, #22]
        gRFAL.TxRx.rxse   = false;
 800ec78:	4b2c      	ldr	r3, [pc, #176]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	761a      	strb	r2, [r3, #24]
        
    #if RFAL_FEATURE_NFCV        
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800ec7e:	4b2b      	ldr	r3, [pc, #172]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec80:	785b      	ldrb	r3, [r3, #1]
 800ec82:	2b07      	cmp	r3, #7
 800ec84:	d003      	beq.n	800ec8e <rfalStartTransceive+0x1b6>
 800ec86:	4b29      	ldr	r3, [pc, #164]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec88:	785b      	ldrb	r3, [r3, #1]
 800ec8a:	2b08      	cmp	r3, #8
 800ec8c:	d128      	bne.n	800ece0 <rfalStartTransceive+0x208>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 800ec8e:	4a27      	ldr	r2, [pc, #156]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec90:	4b26      	ldr	r3, [pc, #152]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ec92:	f502 7473 	add.w	r4, r2, #972	@ 0x3cc
 800ec96:	f103 051c 	add.w	r5, r3, #28
 800ec9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eca2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 800eca6:	4b21      	ldr	r3, [pc, #132]	@ (800ed2c <rfalStartTransceive+0x254>)
 800eca8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d001      	beq.n	800ecb4 <rfalStartTransceive+0x1dc>
 800ecb0:	4b20      	ldr	r3, [pc, #128]	@ (800ed34 <rfalStartTransceive+0x25c>)
 800ecb2:	e000      	b.n	800ecb6 <rfalStartTransceive+0x1de>
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	4a1d      	ldr	r2, [pc, #116]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ecb8:	6253      	str	r3, [r2, #36]	@ 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800ecba:	4b1c      	ldr	r3, [pc, #112]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ecbc:	f44f 5282 	mov.w	r2, #4160	@ 0x1040
 800ecc0:	851a      	strh	r2, [r3, #40]	@ 0x28
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 800ecc2:	4b1a      	ldr	r3, [pc, #104]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ecc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ecc8:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800eccc:	f043 0333 	orr.w	r3, r3, #51	@ 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 800ecd0:	4a16      	ldr	r2, [pc, #88]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ecd2:	6313      	str	r3, [r2, #48]	@ 0x30
            
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 800ecd4:	4b15      	ldr	r3, [pc, #84]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ecd6:	69db      	ldr	r3, [r3, #28]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d001      	beq.n	800ece0 <rfalStartTransceive+0x208>
            {
                return  ERR_NONE;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	e021      	b.n	800ed24 <rfalStartTransceive+0x24c>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 800ece0:	4b12      	ldr	r3, [pc, #72]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ece2:	69db      	ldr	r3, [r3, #28]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d003      	beq.n	800ecf0 <rfalStartTransceive+0x218>
 800ece8:	4b10      	ldr	r3, [pc, #64]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ecea:	8c1b      	ldrh	r3, [r3, #32]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d116      	bne.n	800ed1e <rfalStartTransceive+0x246>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800ecf0:	f000 f9c8 	bl	800f084 <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 800ecf4:	4b0d      	ldr	r3, [pc, #52]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ecf6:	785b      	ldrb	r3, [r3, #1]
 800ecf8:	2b09      	cmp	r3, #9
 800ecfa:	d003      	beq.n	800ed04 <rfalStartTransceive+0x22c>
 800ecfc:	4b0b      	ldr	r3, [pc, #44]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ecfe:	785b      	ldrb	r3, [r3, #1]
 800ed00:	2b0d      	cmp	r3, #13
 800ed02:	d103      	bne.n	800ed0c <rfalStartTransceive+0x234>
            {
                st25r3911TxOff();
 800ed04:	2108      	movs	r1, #8
 800ed06:	2002      	movs	r0, #2
 800ed08:	f7f6 fa34 	bl	8005174 <st25r3911ClrRegisterBits>
            }
            
            /* No Tx done, enable the Receiver */
            st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 800ed0c:	20d1      	movs	r0, #209	@ 0xd1
 800ed0e:	f7f6 fb77 	bl	8005400 <st25r3911ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3911ExecuteCommand( ST25R3911_CMD_START_NO_RESPONSE_TIMER );
 800ed12:	20e3      	movs	r0, #227	@ 0xe3
 800ed14:	f7f6 fb74 	bl	8005400 <st25r3911ExecuteCommand>
            
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800ed18:	4b04      	ldr	r3, [pc, #16]	@ (800ed2c <rfalStartTransceive+0x254>)
 800ed1a:	2251      	movs	r2, #81	@ 0x51
 800ed1c:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	e000      	b.n	800ed24 <rfalStartTransceive+0x24c>
    }
    
    return ERR_WRONG_STATE;
 800ed22:	2321      	movs	r3, #33	@ 0x21
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3710      	adds	r7, #16
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bdb0      	pop	{r4, r5, r7, pc}
 800ed2c:	20000d80 	.word	0x20000d80
 800ed30:	0ffff000 	.word	0x0ffff000
 800ed34:	20000f40 	.word	0x20000f40

0800ed38 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 800ed38:	b480      	push	{r7}
 800ed3a:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800ed3c:	4b09      	ldr	r3, [pc, #36]	@ (800ed64 <rfalIsTransceiveInTx+0x2c>)
 800ed3e:	7d1b      	ldrb	r3, [r3, #20]
 800ed40:	2b0a      	cmp	r3, #10
 800ed42:	d905      	bls.n	800ed50 <rfalIsTransceiveInTx+0x18>
 800ed44:	4b07      	ldr	r3, [pc, #28]	@ (800ed64 <rfalIsTransceiveInTx+0x2c>)
 800ed46:	7d1b      	ldrb	r3, [r3, #20]
 800ed48:	2b50      	cmp	r3, #80	@ 0x50
 800ed4a:	d801      	bhi.n	800ed50 <rfalIsTransceiveInTx+0x18>
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e000      	b.n	800ed52 <rfalIsTransceiveInTx+0x1a>
 800ed50:	2300      	movs	r3, #0
 800ed52:	f003 0301 	and.w	r3, r3, #1
 800ed56:	b2db      	uxtb	r3, r3
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop
 800ed64:	20000d80 	.word	0x20000d80

0800ed68 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 800ed68:	b480      	push	{r7}
 800ed6a:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800ed6c:	4b05      	ldr	r3, [pc, #20]	@ (800ed84 <rfalIsTransceiveInRx+0x1c>)
 800ed6e:	7d1b      	ldrb	r3, [r3, #20]
 800ed70:	2b50      	cmp	r3, #80	@ 0x50
 800ed72:	bf8c      	ite	hi
 800ed74:	2301      	movhi	r3, #1
 800ed76:	2300      	movls	r3, #0
 800ed78:	b2db      	uxtb	r3, r3
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr
 800ed84:	20000d80 	.word	0x20000d80

0800ed88 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b08c      	sub	sp, #48	@ 0x30
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	607a      	str	r2, [r7, #4]
 800ed92:	461a      	mov	r2, r3
 800ed94:	460b      	mov	r3, r1
 800ed96:	817b      	strh	r3, [r7, #10]
 800ed98:	4613      	mov	r3, r2
 800ed9a:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	613b      	str	r3, [r7, #16]
 800eda0:	897b      	ldrh	r3, [r7, #10]
 800eda2:	00db      	lsls	r3, r3, #3
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	82bb      	strh	r3, [r7, #20]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	61bb      	str	r3, [r7, #24]
 800edac:	893b      	ldrh	r3, [r7, #8]
 800edae:	00db      	lsls	r3, r3, #3
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	83bb      	strh	r3, [r7, #28]
 800edb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edb6:	623b      	str	r3, [r7, #32]
 800edb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edba:	627b      	str	r3, [r7, #36]	@ 0x24
 800edbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800edc0:	f107 0310 	add.w	r3, r7, #16
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7ff fe87 	bl	800ead8 <rfalStartTransceive>
 800edca:	4603      	mov	r3, r0
 800edcc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800edce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d001      	beq.n	800edd8 <rfalTransceiveBlockingTx+0x50>
 800edd4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800edd6:	e002      	b.n	800edde <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 800edd8:	f000 f805 	bl	800ede6 <rfalTransceiveRunBlockingTx>
 800eddc:	4603      	mov	r3, r0
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3730      	adds	r7, #48	@ 0x30
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b082      	sub	sp, #8
 800edea:	af00      	add	r7, sp, #0
    ReturnCode  ret;
        
    do{
        rfalWorker();
 800edec:	f000 f894 	bl	800ef18 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800edf0:	f000 f880 	bl	800eef4 <rfalGetTransceiveStatus>
 800edf4:	4603      	mov	r3, r0
 800edf6:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800edf8:	f7ff ff9e 	bl	800ed38 <rfalIsTransceiveInTx>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d002      	beq.n	800ee08 <rfalTransceiveRunBlockingTx+0x22>
 800ee02:	88fb      	ldrh	r3, [r7, #6]
 800ee04:	2b02      	cmp	r3, #2
 800ee06:	d0f1      	beq.n	800edec <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 800ee08:	f7ff ffae 	bl	800ed68 <rfalIsTransceiveInRx>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d001      	beq.n	800ee16 <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 800ee12:	2300      	movs	r3, #0
 800ee14:	e000      	b.n	800ee18 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 800ee16:	88fb      	ldrh	r3, [r7, #6]
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 800ee26:	f000 f877 	bl	800ef18 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800ee2a:	f000 f863 	bl	800eef4 <rfalGetTransceiveStatus>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 800ee32:	f7ff ff99 	bl	800ed68 <rfalIsTransceiveInRx>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <rfalTransceiveBlockingRx+0x22>
 800ee3c:	88fb      	ldrh	r3, [r7, #6]
 800ee3e:	2b02      	cmp	r3, #2
 800ee40:	d0f1      	beq.n	800ee26 <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 800ee42:	88fb      	ldrh	r3, [r7, #6]
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3708      	adds	r7, #8
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b08a      	sub	sp, #40	@ 0x28
 800ee50:	af04      	add	r7, sp, #16
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	607a      	str	r2, [r7, #4]
 800ee56:	461a      	mov	r2, r3
 800ee58:	460b      	mov	r3, r1
 800ee5a:	817b      	strh	r3, [r7, #10]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 800ee60:	893a      	ldrh	r2, [r7, #8]
 800ee62:	8979      	ldrh	r1, [r7, #10]
 800ee64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee66:	9302      	str	r3, [sp, #8]
 800ee68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee6a:	9301      	str	r3, [sp, #4]
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	4613      	mov	r3, r2
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f7ff ff87 	bl	800ed88 <rfalTransceiveBlockingTx>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	82fb      	strh	r3, [r7, #22]
 800ee7e:	8afb      	ldrh	r3, [r7, #22]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d001      	beq.n	800ee88 <rfalTransceiveBlockingTxRx+0x3c>
 800ee84:	8afb      	ldrh	r3, [r7, #22]
 800ee86:	e00e      	b.n	800eea6 <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 800ee88:	f7ff ffca 	bl	800ee20 <rfalTransceiveBlockingRx>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 800ee90:	6a3b      	ldr	r3, [r7, #32]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d006      	beq.n	800eea4 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen =  rfalConvBitsToBytes(*actLen);
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	881b      	ldrh	r3, [r3, #0]
 800ee9a:	3307      	adds	r3, #7
 800ee9c:	08db      	lsrs	r3, r3, #3
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	6a3b      	ldr	r3, [r7, #32]
 800eea2:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 800eea4:	8afb      	ldrh	r3, [r7, #22]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3718      	adds	r7, #24
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 800eeb4:	4b0e      	ldr	r3, [pc, #56]	@ (800eef0 <rfalRunTransceiveWorker+0x40>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	2b03      	cmp	r3, #3
 800eeba:	d115      	bne.n	800eee8 <rfalRunTransceiveWorker+0x38>
    {     
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 800eebc:	f7ff ff3c 	bl	800ed38 <rfalIsTransceiveInTx>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d005      	beq.n	800eed2 <rfalRunTransceiveWorker+0x22>
        {
            rfalTransceiveTx();
 800eec6:	f000 f973 	bl	800f1b0 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 800eeca:	f000 f813 	bl	800eef4 <rfalGetTransceiveStatus>
 800eece:	4603      	mov	r3, r0
 800eed0:	e00b      	b.n	800eeea <rfalRunTransceiveWorker+0x3a>
        }
        
        if( rfalIsTransceiveInRx() )
 800eed2:	f7ff ff49 	bl	800ed68 <rfalIsTransceiveInRx>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d005      	beq.n	800eee8 <rfalRunTransceiveWorker+0x38>
        {
            rfalTransceiveRx();
 800eedc:	f000 fbb4 	bl	800f648 <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 800eee0:	f000 f808 	bl	800eef4 <rfalGetTransceiveStatus>
 800eee4:	4603      	mov	r3, r0
 800eee6:	e000      	b.n	800eeea <rfalRunTransceiveWorker+0x3a>
        }
    }    
    return ERR_WRONG_STATE;
 800eee8:	2321      	movs	r3, #33	@ 0x21
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	20000d80 	.word	0x20000d80

0800eef4 <rfalGetTransceiveStatus>:
{
    return gRFAL.TxRx.state;
}

ReturnCode rfalGetTransceiveStatus( void )
{
 800eef4:	b480      	push	{r7}
 800eef6:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800eef8:	4b06      	ldr	r3, [pc, #24]	@ (800ef14 <rfalGetTransceiveStatus+0x20>)
 800eefa:	7d1b      	ldrb	r3, [r3, #20]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d102      	bne.n	800ef06 <rfalGetTransceiveStatus+0x12>
 800ef00:	4b04      	ldr	r3, [pc, #16]	@ (800ef14 <rfalGetTransceiveStatus+0x20>)
 800ef02:	8adb      	ldrh	r3, [r3, #22]
 800ef04:	e000      	b.n	800ef08 <rfalGetTransceiveStatus+0x14>
 800ef06:	2302      	movs	r3, #2
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	20000d80 	.word	0x20000d80

0800ef18 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 800ef1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ef4c <rfalWorker+0x34>)
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	2b05      	cmp	r3, #5
 800ef22:	d00c      	beq.n	800ef3e <rfalWorker+0x26>
 800ef24:	2b05      	cmp	r3, #5
 800ef26:	dc0d      	bgt.n	800ef44 <rfalWorker+0x2c>
 800ef28:	2b03      	cmp	r3, #3
 800ef2a:	d002      	beq.n	800ef32 <rfalWorker+0x1a>
 800ef2c:	2b04      	cmp	r3, #4
 800ef2e:	d003      	beq.n	800ef38 <rfalWorker+0x20>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800ef30:	e008      	b.n	800ef44 <rfalWorker+0x2c>
            rfalRunTransceiveWorker();
 800ef32:	f7ff ffbd 	bl	800eeb0 <rfalRunTransceiveWorker>
            break;
 800ef36:	e006      	b.n	800ef46 <rfalWorker+0x2e>
            rfalRunListenModeWorker();
 800ef38:	f001 fb0e 	bl	8010558 <rfalRunListenModeWorker>
            break;
 800ef3c:	e003      	b.n	800ef46 <rfalWorker+0x2e>
            rfalRunWakeUpModeWorker();
 800ef3e:	f001 ff11 	bl	8010d64 <rfalRunWakeUpModeWorker>
            break;
 800ef42:	e000      	b.n	800ef46 <rfalWorker+0x2e>
            break;
 800ef44:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 800ef46:	bf00      	nop
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	20000d80 	.word	0x20000d80

0800ef50 <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
    bool    rxHasIncParError;
    uint8_t fifoBytesToRead;
    uint8_t reEnRx[] = { ST25R3911_CMD_CLEAR_FIFO, ST25R3911_CMD_UNMASK_RECEIVE_DATA };
 800ef56:	f24d 13c2 	movw	r3, #53698	@ 0xd1c2
 800ef5a:	80bb      	strh	r3, [r7, #4]
    

    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 800ef5c:	f000 fede 	bl	800fd1c <rfalFIFOStatusGetNumBytes>
 800ef60:	4603      	mov	r3, r0
 800ef62:	71fb      	strb	r3, [r7, #7]
    
    
    /*******************************************************************************/
    /* EMVCo                                                                       */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800ef64:	4b3b      	ldr	r3, [pc, #236]	@ (800f054 <rfalErrorHandling+0x104>)
 800ef66:	79db      	ldrb	r3, [r3, #7]
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d141      	bne.n	800eff0 <rfalErrorHandling+0xa0>
        /*   - Parity error                                                            */
        /*   - CRC error                                                               */
        /*******************************************************************************/        
     
        /* Check if reception has incompete bytes or parity error */
        rxHasIncParError = ( rfalFIFOStatusIsIncompleteByte() ? true : rfalFIFOStatusIsMissingPar() );   /* MISRA 13.5 */
 800ef6c:	f000 fee2 	bl	800fd34 <rfalFIFOStatusIsIncompleteByte>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d104      	bne.n	800ef80 <rfalErrorHandling+0x30>
 800ef76:	f000 feef 	bl	800fd58 <rfalFIFOStatusIsMissingPar>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d001      	beq.n	800ef84 <rfalErrorHandling+0x34>
 800ef80:	2301      	movs	r3, #1
 800ef82:	e000      	b.n	800ef86 <rfalErrorHandling+0x36>
 800ef84:	2300      	movs	r3, #0
 800ef86:	71bb      	strb	r3, [r7, #6]
        
        /* In case there are residual bits decrement FIFO bytes */
        if( (fifoBytesToRead > 0U) && rxHasIncParError)
 800ef88:	79fb      	ldrb	r3, [r7, #7]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d005      	beq.n	800ef9a <rfalErrorHandling+0x4a>
 800ef8e:	79bb      	ldrb	r3, [r7, #6]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d002      	beq.n	800ef9a <rfalErrorHandling+0x4a>
        {
            fifoBytesToRead--;
 800ef94:	79fb      	ldrb	r3, [r7, #7]
 800ef96:	3b01      	subs	r3, #1
 800ef98:	71fb      	strb	r3, [r7, #7]
        }
            
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 800ef9a:	4b2e      	ldr	r3, [pc, #184]	@ (800f054 <rfalErrorHandling+0x104>)
 800ef9c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800ef9e:	461a      	mov	r2, r3
 800efa0:	79fb      	ldrb	r3, [r7, #7]
 800efa2:	4413      	add	r3, r2
 800efa4:	2b03      	cmp	r3, #3
 800efa6:	dc50      	bgt.n	800f04a <rfalErrorHandling+0xfa>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 800efa8:	4b2a      	ldr	r3, [pc, #168]	@ (800f054 <rfalErrorHandling+0x104>)
 800efaa:	8adb      	ldrh	r3, [r3, #22]
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 800efac:	2b1d      	cmp	r3, #29
 800efae:	d00e      	beq.n	800efce <rfalErrorHandling+0x7e>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 800efb0:	4b28      	ldr	r3, [pc, #160]	@ (800f054 <rfalErrorHandling+0x104>)
 800efb2:	8adb      	ldrh	r3, [r3, #22]
 800efb4:	2b09      	cmp	r3, #9
 800efb6:	d00a      	beq.n	800efce <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 800efb8:	4b26      	ldr	r3, [pc, #152]	@ (800f054 <rfalErrorHandling+0x104>)
 800efba:	8adb      	ldrh	r3, [r3, #22]
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 800efbc:	2b1b      	cmp	r3, #27
 800efbe:	d006      	beq.n	800efce <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 800efc0:	4b24      	ldr	r3, [pc, #144]	@ (800f054 <rfalErrorHandling+0x104>)
 800efc2:	8adb      	ldrh	r3, [r3, #22]
 800efc4:	2b15      	cmp	r3, #21
 800efc6:	d002      	beq.n	800efce <rfalErrorHandling+0x7e>
 800efc8:	79bb      	ldrb	r3, [r7, #6]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d03d      	beq.n	800f04a <rfalErrorHandling+0xfa>
              rxHasIncParError                                                               ) )
        {
            /* Ignore this reception, ReEnable receiver */
            st25r3911ExecuteCommands( reEnRx, sizeof(reEnRx) );
 800efce:	1d3b      	adds	r3, r7, #4
 800efd0:	2102      	movs	r1, #2
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7f6 fa5a 	bl	800548c <st25r3911ExecuteCommands>
            
            rfalFIFOStatusClear();
 800efd8:	f000 fe92 	bl	800fd00 <rfalFIFOStatusClear>
            gRFAL.fifo.bytesTotal = 0;
 800efdc:	4b1d      	ldr	r3, [pc, #116]	@ (800f054 <rfalErrorHandling+0x104>)
 800efde:	2200      	movs	r2, #0
 800efe0:	875a      	strh	r2, [r3, #58]	@ 0x3a
            gRFAL.TxRx.status = ERR_BUSY;
 800efe2:	4b1c      	ldr	r3, [pc, #112]	@ (800f054 <rfalErrorHandling+0x104>)
 800efe4:	2202      	movs	r2, #2
 800efe6:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800efe8:	4b1a      	ldr	r3, [pc, #104]	@ (800f054 <rfalErrorHandling+0x104>)
 800efea:	2253      	movs	r2, #83	@ 0x53
 800efec:	751a      	strb	r2, [r3, #20]
 800efee:	e02d      	b.n	800f04c <rfalErrorHandling+0xfc>
    }

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800eff0:	4b18      	ldr	r3, [pc, #96]	@ (800f054 <rfalErrorHandling+0x104>)
 800eff2:	785b      	ldrb	r3, [r3, #1]
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d129      	bne.n	800f04c <rfalErrorHandling+0xfc>
        /*******************************************************************************/
        /* If we received one incomplete byte (not a block and a incomplete byte at    *
         * the end) we will raise a specific error ( support for T2T 4 bit ACK / NAK )   *
         * Otherwise just leave it as an CRC/FRAMING/PAR error                         */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 800eff8:	4b16      	ldr	r3, [pc, #88]	@ (800f054 <rfalErrorHandling+0x104>)
 800effa:	8adb      	ldrh	r3, [r3, #22]
 800effc:	2b1b      	cmp	r3, #27
 800effe:	d003      	beq.n	800f008 <rfalErrorHandling+0xb8>
 800f000:	4b14      	ldr	r3, [pc, #80]	@ (800f054 <rfalErrorHandling+0x104>)
 800f002:	8adb      	ldrh	r3, [r3, #22]
 800f004:	2b15      	cmp	r3, #21
 800f006:	d121      	bne.n	800f04c <rfalErrorHandling+0xfc>
        {
            if( rfalFIFOStatusIsIncompleteByte() && (fifoBytesToRead == RFAL_NFC_RX_INCOMPLETE_LEN) )
 800f008:	f000 fe94 	bl	800fd34 <rfalFIFOStatusIsIncompleteByte>
 800f00c:	4603      	mov	r3, r0
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d01c      	beq.n	800f04c <rfalErrorHandling+0xfc>
 800f012:	79fb      	ldrb	r3, [r7, #7]
 800f014:	2b01      	cmp	r3, #1
 800f016:	d119      	bne.n	800f04c <rfalErrorHandling+0xfc>
            {
                st25r3911ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 800f018:	4b0e      	ldr	r3, [pc, #56]	@ (800f054 <rfalErrorHandling+0x104>)
 800f01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f01c:	79fa      	ldrb	r2, [r7, #7]
 800f01e:	4611      	mov	r1, r2
 800f020:	4618      	mov	r0, r3
 800f022:	f7f6 f99f 	bl	8005364 <st25r3911ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 800f026:	4b0b      	ldr	r3, [pc, #44]	@ (800f054 <rfalErrorHandling+0x104>)
 800f028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d006      	beq.n	800f03c <rfalErrorHandling+0xec>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800f02e:	f000 fea5 	bl	800fd7c <rfalFIFOGetNumIncompleteBits>
 800f032:	4603      	mov	r3, r0
 800f034:	461a      	mov	r2, r3
 800f036:	4b07      	ldr	r3, [pc, #28]	@ (800f054 <rfalErrorHandling+0x104>)
 800f038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f03a:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800f03c:	4b05      	ldr	r3, [pc, #20]	@ (800f054 <rfalErrorHandling+0x104>)
 800f03e:	2228      	movs	r2, #40	@ 0x28
 800f040:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f042:	4b04      	ldr	r3, [pc, #16]	@ (800f054 <rfalErrorHandling+0x104>)
 800f044:	225a      	movs	r2, #90	@ 0x5a
 800f046:	751a      	strb	r2, [r3, #20]
 800f048:	e000      	b.n	800f04c <rfalErrorHandling+0xfc>
        return;
 800f04a:	bf00      	nop
            }
        }
    }
    
}
 800f04c:	3708      	adds	r7, #8
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	20000d80 	.word	0x20000d80

0800f058 <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 800f05c:	21e0      	movs	r1, #224	@ 0xe0
 800f05e:	2005      	movs	r0, #5
 800f060:	f7f6 f888 	bl	8005174 <st25r3911ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800f064:	2110      	movs	r1, #16
 800f066:	200b      	movs	r0, #11
 800f068:	f7f6 f8a7 	bl	80051ba <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 800f06c:	4b04      	ldr	r3, [pc, #16]	@ (800f080 <rfalCleanupTransceive+0x28>)
 800f06e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <rfalCleanupTransceive+0x22>
    {
        gRFAL.callbacks.postTxRx();
 800f074:	4b02      	ldr	r3, [pc, #8]	@ (800f080 <rfalCleanupTransceive+0x28>)
 800f076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f078:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 800f07a:	bf00      	nop
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	20000d80 	.word	0x20000d80

0800f084 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
    uint8_t  reg;
    
    /*******************************************************************************/
    /* In the EMVCo mode the NRT will continue to run.                             *
     * For the clear to stop it, the EMV mode has to be disabled before            */
    st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 800f08a:	2102      	movs	r1, #2
 800f08c:	2011      	movs	r0, #17
 800f08e:	f7f6 f871 	bl	8005174 <st25r3911ClrRegisterBits>
    
    /* Reset receive logic */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 800f092:	20c2      	movs	r0, #194	@ 0xc2
 800f094:	f7f6 f9b4 	bl	8005400 <st25r3911ExecuteCommand>
    
    /* Reset Rx Gain */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 800f098:	20d5      	movs	r0, #213	@ 0xd5
 800f09a:	f7f6 f9b1 	bl	8005400 <st25r3911ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800f09e:	4b42      	ldr	r3, [pc, #264]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f0a0:	785b      	ldrb	r3, [r3, #1]
 800f0a2:	2b09      	cmp	r3, #9
 800f0a4:	d01c      	beq.n	800f0e0 <rfalPrepareTransceive+0x5c>
 800f0a6:	4b40      	ldr	r3, [pc, #256]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f0a8:	785b      	ldrb	r3, [r3, #1]
 800f0aa:	2b0d      	cmp	r3, #13
 800f0ac:	d018      	beq.n	800f0e0 <rfalPrepareTransceive+0x5c>
    {
       /* In Passive communications General Purpose Timer is used to measure FDT Poll */
       if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800f0ae:	4b3e      	ldr	r3, [pc, #248]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d014      	beq.n	800f0e0 <rfalPrepareTransceive+0x5c>
       {
           /* Configure GPT to start at RX end */
           st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 800f0b6:	4b3c      	ldr	r3, [pc, #240]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f0b8:	691b      	ldr	r3, [r3, #16]
 800f0ba:	f240 423b 	movw	r2, #1083	@ 0x43b
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d804      	bhi.n	800f0cc <rfalPrepareTransceive+0x48>
 800f0c2:	4b39      	ldr	r3, [pc, #228]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	08db      	lsrs	r3, r3, #3
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	e005      	b.n	800f0d8 <rfalPrepareTransceive+0x54>
 800f0cc:	4b36      	ldr	r3, [pc, #216]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f0ce:	691b      	ldr	r3, [r3, #16]
 800f0d0:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 800f0d4:	08db      	lsrs	r3, r3, #3
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	2120      	movs	r1, #32
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7f5 fc96 	bl	8004a0c <st25r3911StartGPTimer_8fcs>
    
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 800f0e0:	4b31      	ldr	r3, [pc, #196]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f0e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d002      	beq.n	800f0ee <rfalPrepareTransceive+0x6a>
    {
        gRFAL.callbacks.preTxRx();
 800f0e8:	4b2f      	ldr	r3, [pc, #188]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f0ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0ec:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    maskInterrupts = ( ST25R3911_IRQ_MASK_FWL  | ST25R3911_IRQ_MASK_TXE  |
 800f0ee:	4b2f      	ldr	r3, [pc, #188]	@ (800f1ac <rfalPrepareTransceive+0x128>)
 800f0f0:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3911_REG_ISO14443A_NFC_no_tx_par_off | ST25R3911_REG_ISO14443A_NFC_no_rx_par_off | ST25R3911_REG_ISO14443A_NFC_nfc_f0_off);
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 800f0f6:	4b2c      	ldr	r3, [pc, #176]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f0f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0fa:	f003 0304 	and.w	r3, r3, #4
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d003      	beq.n	800f10a <rfalPrepareTransceive+0x86>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_nfc_f0;
 800f102:	78fb      	ldrb	r3, [r7, #3]
 800f104:	f043 0320 	orr.w	r3, r3, #32
 800f108:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 800f10a:	4b27      	ldr	r3, [pc, #156]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f10c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f10e:	f003 0310 	and.w	r3, r3, #16
 800f112:	2b00      	cmp	r3, #0
 800f114:	d003      	beq.n	800f11e <rfalPrepareTransceive+0x9a>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_rx_par;
 800f116:	78fb      	ldrb	r3, [r7, #3]
 800f118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f11c:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 800f11e:	4b22      	ldr	r3, [pc, #136]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f122:	f003 0320 	and.w	r3, r3, #32
 800f126:	2b00      	cmp	r3, #0
 800f128:	d003      	beq.n	800f132 <rfalPrepareTransceive+0xae>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_tx_par;
 800f12a:	78fb      	ldrb	r3, [r7, #3]
 800f12c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f130:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0), reg );
 800f132:	78fb      	ldrb	r3, [r7, #3]
 800f134:	461a      	mov	r2, r3
 800f136:	21e0      	movs	r1, #224	@ 0xe0
 800f138:	2005      	movs	r0, #5
 800f13a:	f7f6 f85c 	bl	80051f6 <st25r3911ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 800f13e:	4b1a      	ldr	r3, [pc, #104]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f142:	f003 0308 	and.w	r3, r3, #8
 800f146:	2b00      	cmp	r3, #0
 800f148:	d004      	beq.n	800f154 <rfalPrepareTransceive+0xd0>
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800f14a:	2110      	movs	r1, #16
 800f14c:	200b      	movs	r0, #11
 800f14e:	f7f6 f811 	bl	8005174 <st25r3911ClrRegisterBits>
 800f152:	e003      	b.n	800f15c <rfalPrepareTransceive+0xd8>
    }
    else
    {
        st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800f154:	2110      	movs	r1, #16
 800f156:	200b      	movs	r0, #11
 800f158:	f7f6 f82f 	bl	80051ba <st25r3911SetRegisterBits>
    

    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800f15c:	4b12      	ldr	r3, [pc, #72]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f15e:	79db      	ldrb	r3, [r3, #7]
 800f160:	2b02      	cmp	r3, #2
 800f162:	d104      	bne.n	800f16e <rfalPrepareTransceive+0xea>
    {
        st25r3911SetRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 800f164:	2102      	movs	r1, #2
 800f166:	2011      	movs	r0, #17
 800f168:	f7f6 f827 	bl	80051ba <st25r3911SetRegisterBits>
 800f16c:	e003      	b.n	800f176 <rfalPrepareTransceive+0xf2>
    }
    else
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 800f16e:	2102      	movs	r1, #2
 800f170:	2011      	movs	r0, #17
 800f172:	f7f5 ffff 	bl	8005174 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 800f176:	4b0c      	ldr	r3, [pc, #48]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f178:	785b      	ldrb	r3, [r3, #1]
 800f17a:	2b09      	cmp	r3, #9
 800f17c:	d003      	beq.n	800f186 <rfalPrepareTransceive+0x102>
 800f17e:	4b0a      	ldr	r3, [pc, #40]	@ (800f1a8 <rfalPrepareTransceive+0x124>)
 800f180:	785b      	ldrb	r3, [r3, #1]
 800f182:	2b0d      	cmp	r3, #13
 800f184:	d103      	bne.n	800f18e <rfalPrepareTransceive+0x10a>
    {
        maskInterrupts |= ( ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC );
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f443 53f0 	orr.w	r3, r3, #7680	@ 0x1e00
 800f18c:	607b      	str	r3, [r7, #4]
    }
    
    
    /*******************************************************************************/
    /* clear and enable these interrupts */
    st25r3911GetInterrupt( maskInterrupts );
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f7f6 fb16 	bl	80057c0 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( maskInterrupts );
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f7f6 fb4f 	bl	8005838 <st25r3911EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800f19a:	f000 fdb1 	bl	800fd00 <rfalFIFOStatusClear>
}
 800f19e:	bf00      	nop
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	20000d80 	.word	0x20000d80
 800f1ac:	00f04078 	.word	0x00f04078

0800f1b0 <rfalTransceiveTx>:

/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 800f1b0:	b5b0      	push	{r4, r5, r7, lr}
 800f1b2:	b08a      	sub	sp, #40	@ 0x28
 800f1b4:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	81fb      	strh	r3, [r7, #14]
    NO_WARNING(ret);
    
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800f1be:	4b95      	ldr	r3, [pc, #596]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f1c0:	7d1a      	ldrb	r2, [r3, #20]
 800f1c2:	4b94      	ldr	r3, [pc, #592]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f1c4:	7d5b      	ldrb	r3, [r3, #21]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d003      	beq.n	800f1d2 <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800f1ca:	4b92      	ldr	r3, [pc, #584]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f1cc:	7d1a      	ldrb	r2, [r3, #20]
 800f1ce:	4b91      	ldr	r3, [pc, #580]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f1d0:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800f1d2:	4b90      	ldr	r3, [pc, #576]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f1d4:	7d1b      	ldrb	r3, [r3, #20]
 800f1d6:	3b0b      	subs	r3, #11
 800f1d8:	2b08      	cmp	r3, #8
 800f1da:	f200 8217 	bhi.w	800f60c <rfalTransceiveTx+0x45c>
 800f1de:	a201      	add	r2, pc, #4	@ (adr r2, 800f1e4 <rfalTransceiveTx+0x34>)
 800f1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e4:	0800f209 	.word	0x0800f209
 800f1e8:	0800f20f 	.word	0x0800f20f
 800f1ec:	0800f22d 	.word	0x0800f22d
 800f1f0:	0800f255 	.word	0x0800f255
 800f1f4:	0800f3a5 	.word	0x0800f3a5
 800f1f8:	0800f3e1 	.word	0x0800f3e1
 800f1fc:	0800f527 	.word	0x0800f527
 800f200:	0800f59d 	.word	0x0800f59d
 800f204:	0800f5e3 	.word	0x0800f5e3
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 800f208:	4b82      	ldr	r3, [pc, #520]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f20a:	220c      	movs	r2, #12
 800f20c:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 800f20e:	f7ff fbd3 	bl	800e9b8 <rfalIsGTExpired>
 800f212:	4603      	mov	r3, r0
 800f214:	f083 0301 	eor.w	r3, r3, #1
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f040 81fd 	bne.w	800f61a <rfalTransceiveTx+0x46a>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800f220:	4b7c      	ldr	r3, [pc, #496]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f222:	2200      	movs	r2, #0
 800f224:	641a      	str	r2, [r3, #64]	@ 0x40
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 800f226:	4b7b      	ldr	r3, [pc, #492]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f228:	220d      	movs	r2, #13
 800f22a:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 800f22c:	4b79      	ldr	r3, [pc, #484]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f22e:	785b      	ldrb	r3, [r3, #1]
 800f230:	2b09      	cmp	r3, #9
 800f232:	d00c      	beq.n	800f24e <rfalTransceiveTx+0x9e>
 800f234:	4b77      	ldr	r3, [pc, #476]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f236:	785b      	ldrb	r3, [r3, #1]
 800f238:	2b0d      	cmp	r3, #13
 800f23a:	d008      	beq.n	800f24e <rfalTransceiveTx+0x9e>
            {
                if( st25r3911IsGPTRunning() )
 800f23c:	2204      	movs	r2, #4
 800f23e:	2104      	movs	r1, #4
 800f240:	202b      	movs	r0, #43	@ 0x2b
 800f242:	f7f5 fc17 	bl	8004a74 <st25r3911CheckReg>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	f040 81e8 	bne.w	800f61e <rfalTransceiveTx+0x46e>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 800f24e:	4b71      	ldr	r3, [pc, #452]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f250:	220e      	movs	r2, #14
 800f252:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800f254:	f7ff ff16 	bl	800f084 <rfalPrepareTransceive>

            /* Calculate when Water Level Interrupt will be triggered */
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 800f258:	2210      	movs	r2, #16
 800f25a:	2110      	movs	r1, #16
 800f25c:	2000      	movs	r0, #0
 800f25e:	f7f5 fc09 	bl	8004a74 <st25r3911CheckReg>
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	d001      	beq.n	800f26c <rfalTransceiveTx+0xbc>
 800f268:	2250      	movs	r2, #80	@ 0x50
 800f26a:	e000      	b.n	800f26e <rfalTransceiveTx+0xbe>
 800f26c:	2240      	movs	r2, #64	@ 0x40
 800f26e:	4b69      	ldr	r3, [pc, #420]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f270:	871a      	strh	r2, [r3, #56]	@ 0x38
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800f272:	4b68      	ldr	r3, [pc, #416]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f274:	785b      	ldrb	r3, [r3, #1]
 800f276:	2b07      	cmp	r3, #7
 800f278:	d003      	beq.n	800f282 <rfalTransceiveTx+0xd2>
 800f27a:	4b66      	ldr	r3, [pc, #408]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f27c:	785b      	ldrb	r3, [r3, #1]
 800f27e:	2b08      	cmp	r3, #8
 800f280:	d150      	bne.n	800f324 <rfalTransceiveTx+0x174>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3911WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
            #endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 800f282:	4b64      	ldr	r3, [pc, #400]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f284:	2200      	movs	r2, #0
 800f286:	f8a3 23c8 	strh.w	r2, [r3, #968]	@ 0x3c8
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800f28a:	4b62      	ldr	r3, [pc, #392]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f28c:	69d8      	ldr	r0, [r3, #28]
 800f28e:	4b61      	ldr	r3, [pc, #388]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f290:	8c1b      	ldrh	r3, [r3, #32]
 800f292:	3307      	adds	r3, #7
 800f294:	08db      	lsrs	r3, r3, #3
 800f296:	b299      	uxth	r1, r3
 800f298:	4b5e      	ldr	r3, [pc, #376]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f29a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f29e:	f003 0301 	and.w	r3, r3, #1
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	bf0c      	ite	eq
 800f2a6:	2301      	moveq	r3, #1
 800f2a8:	2300      	movne	r3, #0
 800f2aa:	b2da      	uxtb	r2, r3
 800f2ac:	4b59      	ldr	r3, [pc, #356]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f2ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f2b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	bf0c      	ite	eq
 800f2ba:	2301      	moveq	r3, #1
 800f2bc:	2300      	movne	r3, #0
 800f2be:	b2dc      	uxtb	r4, r3
 800f2c0:	4b54      	ldr	r3, [pc, #336]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f2c2:	785b      	ldrb	r3, [r3, #1]
 800f2c4:	2b08      	cmp	r3, #8
 800f2c6:	bf0c      	ite	eq
 800f2c8:	2301      	moveq	r3, #1
 800f2ca:	2300      	movne	r3, #0
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	4d52      	ldr	r5, [pc, #328]	@ (800f418 <rfalTransceiveTx+0x268>)
 800f2d0:	9505      	str	r5, [sp, #20]
 800f2d2:	2560      	movs	r5, #96	@ 0x60
 800f2d4:	9504      	str	r5, [sp, #16]
 800f2d6:	4d51      	ldr	r5, [pc, #324]	@ (800f41c <rfalTransceiveTx+0x26c>)
 800f2d8:	9503      	str	r5, [sp, #12]
 800f2da:	4d51      	ldr	r5, [pc, #324]	@ (800f420 <rfalTransceiveTx+0x270>)
 800f2dc:	9502      	str	r5, [sp, #8]
 800f2de:	4d51      	ldr	r5, [pc, #324]	@ (800f424 <rfalTransceiveTx+0x274>)
 800f2e0:	9501      	str	r5, [sp, #4]
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	4623      	mov	r3, r4
 800f2e6:	f7f6 fcb1 	bl	8005c4c <iso15693VCDCode>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3911_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800f2ee:	89fb      	ldrh	r3, [r7, #14]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d009      	beq.n	800f308 <rfalTransceiveTx+0x158>
 800f2f4:	89fb      	ldrh	r3, [r7, #14]
 800f2f6:	2b0d      	cmp	r3, #13
 800f2f8:	d006      	beq.n	800f308 <rfalTransceiveTx+0x158>
                {
                    gRFAL.TxRx.status = ret;
 800f2fa:	4a46      	ldr	r2, [pc, #280]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f2fc:	89fb      	ldrh	r3, [r7, #14]
 800f2fe:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800f300:	4b44      	ldr	r3, [pc, #272]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f302:	2213      	movs	r2, #19
 800f304:	751a      	strb	r2, [r3, #20]
                    break;
 800f306:	e191      	b.n	800f62c <rfalTransceiveTx+0x47c>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 800f308:	4b42      	ldr	r3, [pc, #264]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f30a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800f30c:	00db      	lsls	r3, r3, #3
 800f30e:	4618      	mov	r0, r3
 800f310:	f7f5 fca5 	bl	8004c5e <st25r3911SetNumTxBits>

                /* Load FIFO with coded bytes */
                /* TODO: check bytesWritten does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)gRFAL.fifo.bytesWritten );
 800f314:	4b3f      	ldr	r3, [pc, #252]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f316:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	4619      	mov	r1, r3
 800f31c:	483f      	ldr	r0, [pc, #252]	@ (800f41c <rfalTransceiveTx+0x26c>)
 800f31e:	f7f5 ffd3 	bl	80052c8 <st25r3911WriteFifo>
 800f322:	e01c      	b.n	800f35e <rfalTransceiveTx+0x1ae>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 800f324:	4b3b      	ldr	r3, [pc, #236]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f326:	8c1b      	ldrh	r3, [r3, #32]
 800f328:	3307      	adds	r3, #7
 800f32a:	08db      	lsrs	r3, r3, #3
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	4b39      	ldr	r3, [pc, #228]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f330:	875a      	strh	r2, [r3, #58]	@ 0x3a
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 800f332:	4b38      	ldr	r3, [pc, #224]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f334:	8c1b      	ldrh	r3, [r3, #32]
 800f336:	4618      	mov	r0, r3
 800f338:	f7f5 fc91 	bl	8004c5e <st25r3911SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3911_FIFO_DEPTH );
 800f33c:	4b35      	ldr	r3, [pc, #212]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f33e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800f340:	2b60      	cmp	r3, #96	@ 0x60
 800f342:	bf28      	it	cs
 800f344:	2360      	movcs	r3, #96	@ 0x60
 800f346:	b29a      	uxth	r2, r3
 800f348:	4b32      	ldr	r3, [pc, #200]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f34a:	879a      	strh	r2, [r3, #60]	@ 0x3c
                st25r3911WriteFifo( gRFAL.TxRx.ctx.txBuf, (uint8_t)gRFAL.fifo.bytesWritten );
 800f34c:	4b31      	ldr	r3, [pc, #196]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f34e:	69db      	ldr	r3, [r3, #28]
 800f350:	4a30      	ldr	r2, [pc, #192]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f352:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 800f354:	b2d2      	uxtb	r2, r2
 800f356:	4611      	mov	r1, r2
 800f358:	4618      	mov	r0, r3
 800f35a:	f7f5 ffb5 	bl	80052c8 <st25r3911WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx(); 
 800f35e:	4b2d      	ldr	r3, [pc, #180]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f360:	795b      	ldrb	r3, [r3, #5]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d005      	beq.n	800f372 <rfalTransceiveTx+0x1c2>
 800f366:	4b2b      	ldr	r3, [pc, #172]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f368:	795b      	ldrb	r3, [r3, #5]
 800f36a:	4619      	mov	r1, r3
 800f36c:	2001      	movs	r0, #1
 800f36e:	f7f5 fe69 	bl	8005044 <st25r3911WriteTestRegister>
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 800f372:	4b28      	ldr	r3, [pc, #160]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f376:	f003 0301 	and.w	r3, r3, #1
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d003      	beq.n	800f386 <rfalTransceiveTx+0x1d6>
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITHOUT_CRC );
 800f37e:	20c5      	movs	r0, #197	@ 0xc5
 800f380:	f7f6 f83e 	bl	8005400 <st25r3911ExecuteCommand>
 800f384:	e002      	b.n	800f38c <rfalTransceiveTx+0x1dc>
            }
            else
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITH_CRC );
 800f386:	20c4      	movs	r0, #196	@ 0xc4
 800f388:	f7f6 f83a 	bl	8005400 <st25r3911ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800f38c:	4b21      	ldr	r3, [pc, #132]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f38e:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800f390:	4b20      	ldr	r3, [pc, #128]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f392:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800f394:	429a      	cmp	r2, r3
 800f396:	d201      	bcs.n	800f39c <rfalTransceiveTx+0x1ec>
 800f398:	220f      	movs	r2, #15
 800f39a:	e000      	b.n	800f39e <rfalTransceiveTx+0x1ee>
 800f39c:	2211      	movs	r2, #17
 800f39e:	4b1d      	ldr	r3, [pc, #116]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f3a0:	751a      	strb	r2, [r3, #20]
            break;
 800f3a2:	e143      	b.n	800f62c <rfalTransceiveTx+0x47c>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );            
 800f3a4:	2048      	movs	r0, #72	@ 0x48
 800f3a6:	f7f6 fa0b 	bl	80057c0 <st25r3911GetInterrupt>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	f000 8136 	beq.w	800f622 <rfalTransceiveTx+0x472>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_TXE) == 0U) )
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d008      	beq.n	800f3d2 <rfalTransceiveTx+0x222>
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	f003 0308 	and.w	r3, r3, #8
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d103      	bne.n	800f3d2 <rfalTransceiveTx+0x222>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 800f3ca:	4b12      	ldr	r3, [pc, #72]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f3cc:	2210      	movs	r2, #16
 800f3ce:	751a      	strb	r2, [r3, #20]
 800f3d0:	e006      	b.n	800f3e0 <rfalTransceiveTx+0x230>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800f3d2:	4b10      	ldr	r3, [pc, #64]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f3d4:	2203      	movs	r2, #3
 800f3d6:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800f3d8:	4b0e      	ldr	r3, [pc, #56]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f3da:	2213      	movs	r2, #19
 800f3dc:	751a      	strb	r2, [r3, #20]
                break;
 800f3de:	e125      	b.n	800f62c <rfalTransceiveTx+0x47c>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800f3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f3e2:	785b      	ldrb	r3, [r3, #1]
 800f3e4:	2b07      	cmp	r3, #7
 800f3e6:	d003      	beq.n	800f3f0 <rfalTransceiveTx+0x240>
 800f3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f3ea:	785b      	ldrb	r3, [r3, #1]
 800f3ec:	2b08      	cmp	r3, #8
 800f3ee:	d16e      	bne.n	800f4ce <rfalTransceiveTx+0x31e>
            {
                uint16_t maxLen;
                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 800f3f0:	4b08      	ldr	r3, [pc, #32]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f3f2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	4b07      	ldr	r3, [pc, #28]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f3f8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	4a05      	ldr	r2, [pc, #20]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f3fe:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 800f400:	4293      	cmp	r3, r2
 800f402:	da11      	bge.n	800f428 <rfalTransceiveTx+0x278>
 800f404:	4b03      	ldr	r3, [pc, #12]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f406:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 800f408:	4b02      	ldr	r3, [pc, #8]	@ (800f414 <rfalTransceiveTx+0x264>)
 800f40a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800f40c:	1ad3      	subs	r3, r2, r3
 800f40e:	b29b      	uxth	r3, r3
 800f410:	e00c      	b.n	800f42c <rfalTransceiveTx+0x27c>
 800f412:	bf00      	nop
 800f414:	20000d80 	.word	0x20000d80
 800f418:	20000dbc 	.word	0x20000dbc
 800f41c:	20000f40 	.word	0x20000f40
 800f420:	20001148 	.word	0x20001148
 800f424:	20000dba 	.word	0x20000dba
 800f428:	4b82      	ldr	r3, [pc, #520]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f42a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f42c:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800f42e:	89bb      	ldrh	r3, [r7, #12]
 800f430:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800f434:	bf28      	it	cs
 800f436:	f44f 7302 	movcs.w	r3, #520	@ 0x208
 800f43a:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 800f43c:	2300      	movs	r3, #0
 800f43e:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800f440:	4b7c      	ldr	r3, [pc, #496]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f442:	69d8      	ldr	r0, [r3, #28]
 800f444:	4b7b      	ldr	r3, [pc, #492]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f446:	8c1b      	ldrh	r3, [r3, #32]
 800f448:	3307      	adds	r3, #7
 800f44a:	08db      	lsrs	r3, r3, #3
 800f44c:	b299      	uxth	r1, r3
 800f44e:	4b79      	ldr	r3, [pc, #484]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f450:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f454:	f003 0301 	and.w	r3, r3, #1
 800f458:	2b00      	cmp	r3, #0
 800f45a:	bf0c      	ite	eq
 800f45c:	2301      	moveq	r3, #1
 800f45e:	2300      	movne	r3, #0
 800f460:	b2dc      	uxtb	r4, r3
 800f462:	4b74      	ldr	r3, [pc, #464]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f464:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	bf0c      	ite	eq
 800f470:	2301      	moveq	r3, #1
 800f472:	2300      	movne	r3, #0
 800f474:	b2dd      	uxtb	r5, r3
 800f476:	4b6f      	ldr	r3, [pc, #444]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f478:	785b      	ldrb	r3, [r3, #1]
 800f47a:	2b08      	cmp	r3, #8
 800f47c:	bf0c      	ite	eq
 800f47e:	2301      	moveq	r3, #1
 800f480:	2300      	movne	r3, #0
 800f482:	b2db      	uxtb	r3, r3
 800f484:	1dba      	adds	r2, r7, #6
 800f486:	9205      	str	r2, [sp, #20]
 800f488:	89ba      	ldrh	r2, [r7, #12]
 800f48a:	9204      	str	r2, [sp, #16]
 800f48c:	4a6a      	ldr	r2, [pc, #424]	@ (800f638 <rfalTransceiveTx+0x488>)
 800f48e:	9203      	str	r2, [sp, #12]
 800f490:	4a6a      	ldr	r2, [pc, #424]	@ (800f63c <rfalTransceiveTx+0x48c>)
 800f492:	9202      	str	r2, [sp, #8]
 800f494:	4a6a      	ldr	r2, [pc, #424]	@ (800f640 <rfalTransceiveTx+0x490>)
 800f496:	9201      	str	r2, [sp, #4]
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	462b      	mov	r3, r5
 800f49c:	4622      	mov	r2, r4
 800f49e:	f7f6 fbd5 	bl	8005c4c <iso15693VCDCode>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800f4a6:	89fb      	ldrh	r3, [r7, #14]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d009      	beq.n	800f4c0 <rfalTransceiveTx+0x310>
 800f4ac:	89fb      	ldrh	r3, [r7, #14]
 800f4ae:	2b0d      	cmp	r3, #13
 800f4b0:	d006      	beq.n	800f4c0 <rfalTransceiveTx+0x310>
                {
                    gRFAL.TxRx.status = ret;
 800f4b2:	4a60      	ldr	r2, [pc, #384]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f4b4:	89fb      	ldrh	r3, [r7, #14]
 800f4b6:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800f4b8:	4b5e      	ldr	r3, [pc, #376]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f4ba:	2213      	movs	r2, #19
 800f4bc:	751a      	strb	r2, [r3, #20]
                    break;
 800f4be:	e0b5      	b.n	800f62c <rfalTransceiveTx+0x47c>
                }

                /* Load FIFO with coded bytes */
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)tmp );
 800f4c0:	88fb      	ldrh	r3, [r7, #6]
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	485c      	ldr	r0, [pc, #368]	@ (800f638 <rfalTransceiveTx+0x488>)
 800f4c8:	f7f5 fefe 	bl	80052c8 <st25r3911WriteFifo>
            {
 800f4cc:	e018      	b.n	800f500 <rfalTransceiveTx+0x350>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 800f4ce:	4b59      	ldr	r3, [pc, #356]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f4d0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	4b57      	ldr	r3, [pc, #348]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f4d6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800f4d8:	4619      	mov	r1, r3
 800f4da:	4b56      	ldr	r3, [pc, #344]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f4dc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800f4de:	1acb      	subs	r3, r1, r3
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	bfa8      	it	ge
 800f4e4:	4613      	movge	r3, r2
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	80fb      	strh	r3, [r7, #6]
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], (uint8_t)tmp );
 800f4ea:	4b52      	ldr	r3, [pc, #328]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f4ec:	69db      	ldr	r3, [r3, #28]
 800f4ee:	4a51      	ldr	r2, [pc, #324]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f4f0:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 800f4f2:	4413      	add	r3, r2
 800f4f4:	88fa      	ldrh	r2, [r7, #6]
 800f4f6:	b2d2      	uxtb	r2, r2
 800f4f8:	4611      	mov	r1, r2
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7f5 fee4 	bl	80052c8 <st25r3911WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 800f500:	4b4c      	ldr	r3, [pc, #304]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f502:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800f504:	88fb      	ldrh	r3, [r7, #6]
 800f506:	4413      	add	r3, r2
 800f508:	b29a      	uxth	r2, r3
 800f50a:	4b4a      	ldr	r3, [pc, #296]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f50c:	879a      	strh	r2, [r3, #60]	@ 0x3c
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800f50e:	4b49      	ldr	r3, [pc, #292]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f510:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800f512:	4b48      	ldr	r3, [pc, #288]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f514:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800f516:	429a      	cmp	r2, r3
 800f518:	d201      	bcs.n	800f51e <rfalTransceiveTx+0x36e>
 800f51a:	220f      	movs	r2, #15
 800f51c:	e000      	b.n	800f520 <rfalTransceiveTx+0x370>
 800f51e:	2211      	movs	r2, #17
 800f520:	4b44      	ldr	r3, [pc, #272]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f522:	751a      	strb	r2, [r3, #20]
            break;
 800f524:	e082      	b.n	800f62c <rfalTransceiveTx+0x47c>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );
 800f526:	2048      	movs	r0, #72	@ 0x48
 800f528:	f7f6 f94a 	bl	80057c0 <st25r3911GetInterrupt>
 800f52c:	4603      	mov	r3, r0
 800f52e:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d077      	beq.n	800f626 <rfalTransceiveTx+0x476>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3911_IRQ_MASK_TXE) != 0U )
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	f003 0308 	and.w	r3, r3, #8
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d021      	beq.n	800f584 <rfalTransceiveTx+0x3d4>
            {
                /* In Active comm start SW timer to measure FWT */
                if( rfalIsModeActiveComm( gRFAL.mode) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) ) 
 800f540:	4b3c      	ldr	r3, [pc, #240]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f542:	785b      	ldrb	r3, [r3, #1]
 800f544:	2b09      	cmp	r3, #9
 800f546:	d003      	beq.n	800f550 <rfalTransceiveTx+0x3a0>
 800f548:	4b3a      	ldr	r3, [pc, #232]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f54a:	785b      	ldrb	r3, [r3, #1]
 800f54c:	2b0d      	cmp	r3, #13
 800f54e:	d115      	bne.n	800f57c <rfalTransceiveTx+0x3cc>
 800f550:	4b38      	ldr	r3, [pc, #224]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f558:	d010      	beq.n	800f57c <rfalTransceiveTx+0x3cc>
 800f55a:	4b36      	ldr	r3, [pc, #216]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f55c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d00c      	beq.n	800f57c <rfalTransceiveTx+0x3cc>
                {
                    rfalTimerStart( gRFAL.tmr.FWT, rfalConv1fcToMs( gRFAL.TxRx.ctx.fwt ) );
 800f562:	4b34      	ldr	r3, [pc, #208]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f566:	4a37      	ldr	r2, [pc, #220]	@ (800f644 <rfalTransceiveTx+0x494>)
 800f568:	fba2 2303 	umull	r2, r3, r2, r3
 800f56c:	0b1b      	lsrs	r3, r3, #12
 800f56e:	b29b      	uxth	r3, r3
 800f570:	4618      	mov	r0, r3
 800f572:	f7f6 f9ad 	bl	80058d0 <timerCalculateTimer>
 800f576:	4603      	mov	r3, r0
 800f578:	4a2e      	ldr	r2, [pc, #184]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f57a:	6453      	str	r3, [r2, #68]	@ 0x44
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 800f57c:	4b2d      	ldr	r3, [pc, #180]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f57e:	2212      	movs	r2, #18
 800f580:	751a      	strb	r2, [r3, #20]
 800f582:	e00b      	b.n	800f59c <rfalTransceiveTx+0x3ec>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_FWL) != 0U )
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d14d      	bne.n	800f62a <rfalTransceiveTx+0x47a>
                /*******************************************************************************/
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800f58e:	4b29      	ldr	r3, [pc, #164]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f590:	2203      	movs	r2, #3
 800f592:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800f594:	4b27      	ldr	r3, [pc, #156]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f596:	2213      	movs	r2, #19
 800f598:	751a      	strb	r2, [r3, #20]
               break;
 800f59a:	e047      	b.n	800f62c <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 800f59c:	4b25      	ldr	r3, [pc, #148]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d110      	bne.n	800f5c6 <rfalTransceiveTx+0x416>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 800f5a4:	4b23      	ldr	r3, [pc, #140]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f5a6:	799b      	ldrb	r3, [r3, #6]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d003      	beq.n	800f5b4 <rfalTransceiveTx+0x404>
 800f5ac:	2100      	movs	r1, #0
 800f5ae:	2001      	movs	r0, #1
 800f5b0:	f7f5 fd48 	bl	8005044 <st25r3911WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 800f5b4:	f7ff fd50 	bl	800f058 <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 800f5b8:	4b1e      	ldr	r3, [pc, #120]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 800f5be:	4b1d      	ldr	r3, [pc, #116]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	751a      	strb	r2, [r3, #20]
                break;
 800f5c4:	e032      	b.n	800f62c <rfalTransceiveTx+0x47c>
            }
            
            rfalCheckEnableObsModeRx();
 800f5c6:	4b1b      	ldr	r3, [pc, #108]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f5c8:	799b      	ldrb	r3, [r3, #6]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d005      	beq.n	800f5da <rfalTransceiveTx+0x42a>
 800f5ce:	4b19      	ldr	r3, [pc, #100]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f5d0:	799b      	ldrb	r3, [r3, #6]
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	2001      	movs	r0, #1
 800f5d6:	f7f5 fd35 	bl	8005044 <st25r3911WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 800f5da:	4b16      	ldr	r3, [pc, #88]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f5dc:	2251      	movs	r2, #81	@ 0x51
 800f5de:	751a      	strb	r2, [r3, #20]
            break;
 800f5e0:	e024      	b.n	800f62c <rfalTransceiveTx+0x47c>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800f5e2:	4b14      	ldr	r3, [pc, #80]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f5e4:	8adb      	ldrh	r3, [r3, #22]
 800f5e6:	2b02      	cmp	r3, #2
 800f5e8:	d102      	bne.n	800f5f0 <rfalTransceiveTx+0x440>
            {
                gRFAL.TxRx.status = ERR_SYSTEM;
 800f5ea:	4b12      	ldr	r3, [pc, #72]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f5ec:	2208      	movs	r2, #8
 800f5ee:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800f5f0:	4b10      	ldr	r3, [pc, #64]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f5f2:	799b      	ldrb	r3, [r3, #6]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d003      	beq.n	800f600 <rfalTransceiveTx+0x450>
 800f5f8:	2100      	movs	r1, #0
 800f5fa:	2001      	movs	r0, #1
 800f5fc:	f7f5 fd22 	bl	8005044 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800f600:	f7ff fd2a 	bl	800f058 <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800f604:	4b0b      	ldr	r3, [pc, #44]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f606:	2200      	movs	r2, #0
 800f608:	751a      	strb	r2, [r3, #20]
            break;
 800f60a:	e00f      	b.n	800f62c <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800f60c:	4b09      	ldr	r3, [pc, #36]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f60e:	2208      	movs	r2, #8
 800f610:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800f612:	4b08      	ldr	r3, [pc, #32]	@ (800f634 <rfalTransceiveTx+0x484>)
 800f614:	2213      	movs	r2, #19
 800f616:	751a      	strb	r2, [r3, #20]
            break;
 800f618:	e008      	b.n	800f62c <rfalTransceiveTx+0x47c>
                break;
 800f61a:	bf00      	nop
 800f61c:	e006      	b.n	800f62c <rfalTransceiveTx+0x47c>
                   break;
 800f61e:	bf00      	nop
 800f620:	e004      	b.n	800f62c <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 800f622:	bf00      	nop
 800f624:	e002      	b.n	800f62c <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 800f626:	bf00      	nop
 800f628:	e000      	b.n	800f62c <rfalTransceiveTx+0x47c>
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
 800f62a:	bf00      	nop
    }
}
 800f62c:	bf00      	nop
 800f62e:	3710      	adds	r7, #16
 800f630:	46bd      	mov	sp, r7
 800f632:	bdb0      	pop	{r4, r5, r7, pc}
 800f634:	20000d80 	.word	0x20000d80
 800f638:	20000f40 	.word	0x20000f40
 800f63c:	20001148 	.word	0x20001148
 800f640:	20000dba 	.word	0x20000dba
 800f644:	4d542005 	.word	0x4d542005

0800f648 <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 800f648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f64a:	b089      	sub	sp, #36	@ 0x24
 800f64c:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint8_t           tmp;
    uint8_t           aux;
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 800f64e:	2300      	movs	r3, #0
 800f650:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800f652:	4ba2      	ldr	r3, [pc, #648]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f654:	7d1a      	ldrb	r2, [r3, #20]
 800f656:	4ba1      	ldr	r3, [pc, #644]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f658:	7d5b      	ldrb	r3, [r3, #21]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d003      	beq.n	800f666 <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800f65e:	4b9f      	ldr	r3, [pc, #636]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f660:	7d1a      	ldrb	r2, [r3, #20]
 800f662:	4b9e      	ldr	r3, [pc, #632]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f664:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800f666:	4b9d      	ldr	r3, [pc, #628]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f668:	7d1b      	ldrb	r3, [r3, #20]
 800f66a:	3b51      	subs	r3, #81	@ 0x51
 800f66c:	2b09      	cmp	r3, #9
 800f66e:	f200 831e 	bhi.w	800fcae <rfalTransceiveRx+0x666>
 800f672:	a201      	add	r2, pc, #4	@ (adr r2, 800f678 <rfalTransceiveRx+0x30>)
 800f674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f678:	0800f6a1 	.word	0x0800f6a1
 800f67c:	0800fc2b 	.word	0x0800fc2b
 800f680:	0800f6d9 	.word	0x0800f6d9
 800f684:	0800f7e5 	.word	0x0800f7e5
 800f688:	0800fb69 	.word	0x0800fb69
 800f68c:	0800f839 	.word	0x0800f839
 800f690:	0800f951 	.word	0x0800f951
 800f694:	0800fc65 	.word	0x0800fc65
 800f698:	0800fb41 	.word	0x0800fb41
 800f69c:	0800fc01 	.word	0x0800fc01
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;    // Total bytes written on RxBuffer
 800f6a0:	4b8e      	ldr	r3, [pc, #568]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
            gRFAL.fifo.bytesTotal     = 0;    // Total bytes in FIFO will now be from Rx
 800f6a6:	4b8d      	ldr	r3, [pc, #564]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	875a      	strh	r2, [r3, #58]	@ 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800f6ac:	4b8b      	ldr	r3, [pc, #556]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d003      	beq.n	800f6bc <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 800f6b4:	4b89      	ldr	r3, [pc, #548]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	801a      	strh	r2, [r3, #0]
            }
            
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 800f6bc:	4b87      	ldr	r3, [pc, #540]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6be:	785b      	ldrb	r3, [r3, #1]
 800f6c0:	2b09      	cmp	r3, #9
 800f6c2:	d003      	beq.n	800f6cc <rfalTransceiveRx+0x84>
 800f6c4:	4b85      	ldr	r3, [pc, #532]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6c6:	785b      	ldrb	r3, [r3, #1]
 800f6c8:	2b0d      	cmp	r3, #13
 800f6ca:	d101      	bne.n	800f6d0 <rfalTransceiveRx+0x88>
 800f6cc:	2252      	movs	r2, #82	@ 0x52
 800f6ce:	e000      	b.n	800f6d2 <rfalTransceiveRx+0x8a>
 800f6d0:	2253      	movs	r2, #83	@ 0x53
 800f6d2:	4b82      	ldr	r3, [pc, #520]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6d4:	751a      	strb	r2, [r3, #20]
            break;
 800f6d6:	e2fa      	b.n	800fcce <rfalTransceiveRx+0x686>
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
        
            /*******************************************************************************/
            /* If in Active comm, Check if FWT SW timer has expired */
            if( rfalIsModeActiveComm( gRFAL.mode ) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800f6d8:	4b80      	ldr	r3, [pc, #512]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6da:	785b      	ldrb	r3, [r3, #1]
 800f6dc:	2b09      	cmp	r3, #9
 800f6de:	d003      	beq.n	800f6e8 <rfalTransceiveRx+0xa0>
 800f6e0:	4b7e      	ldr	r3, [pc, #504]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6e2:	785b      	ldrb	r3, [r3, #1]
 800f6e4:	2b0d      	cmp	r3, #13
 800f6e6:	d117      	bne.n	800f718 <rfalTransceiveRx+0xd0>
 800f6e8:	4b7c      	ldr	r3, [pc, #496]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f6f0:	d012      	beq.n	800f718 <rfalTransceiveRx+0xd0>
 800f6f2:	4b7a      	ldr	r3, [pc, #488]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d00e      	beq.n	800f718 <rfalTransceiveRx+0xd0>
            {
                if( rfalTimerisExpired( gRFAL.tmr.FWT ) )  
 800f6fa:	4b78      	ldr	r3, [pc, #480]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f6fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7f6 f8f4 	bl	80058ec <timerIsExpired>
 800f704:	4603      	mov	r3, r0
 800f706:	2b00      	cmp	r3, #0
 800f708:	d006      	beq.n	800f718 <rfalTransceiveRx+0xd0>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800f70a:	4b74      	ldr	r3, [pc, #464]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f70c:	2204      	movs	r2, #4
 800f70e:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f710:	4b72      	ldr	r3, [pc, #456]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f712:	225a      	movs	r2, #90	@ 0x5a
 800f714:	751a      	strb	r2, [r3, #20]
                    break;
 800f716:	e2da      	b.n	800fcce <rfalTransceiveRx+0x686>
                }
            }
            
            /*******************************************************************************/
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_NRE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_RXE) );
 800f718:	f644 0030 	movw	r0, #18480	@ 0x4830
 800f71c:	f7f6 f850 	bl	80057c0 <st25r3911GetInterrupt>
 800f720:	4603      	mov	r3, r0
 800f722:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	2b00      	cmp	r3, #0
 800f728:	f000 82c8 	beq.w	800fcbc <rfalTransceiveRx+0x674>
            /* NRE interrupt may be triggered twice                                        */
            /* Ignore NRE if is detected together with no Rx Start                         */
            /*******************************************************************************/
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode)       */
            if( ((irqs & ST25R3911_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f732:	2b00      	cmp	r3, #0
 800f734:	d00b      	beq.n	800f74e <rfalTransceiveRx+0x106>
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	f003 0320 	and.w	r3, r3, #32
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d106      	bne.n	800f74e <rfalTransceiveRx+0x106>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800f740:	4b66      	ldr	r3, [pc, #408]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f742:	2204      	movs	r2, #4
 800f744:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f746:	4b65      	ldr	r3, [pc, #404]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f748:	225a      	movs	r2, #90	@ 0x5a
 800f74a:	751a      	strb	r2, [r3, #20]
                break;
 800f74c:	e2bf      	b.n	800fcce <rfalTransceiveRx+0x686>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f754:	2b00      	cmp	r3, #0
 800f756:	d015      	beq.n	800f784 <rfalTransceiveRx+0x13c>
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	f003 0320 	and.w	r3, r3, #32
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d110      	bne.n	800f784 <rfalTransceiveRx+0x13c>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800f762:	4b5e      	ldr	r3, [pc, #376]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f764:	785b      	ldrb	r3, [r3, #1]
 800f766:	2b09      	cmp	r3, #9
 800f768:	d003      	beq.n	800f772 <rfalTransceiveRx+0x12a>
 800f76a:	4b5c      	ldr	r3, [pc, #368]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f76c:	785b      	ldrb	r3, [r3, #1]
 800f76e:	2b0d      	cmp	r3, #13
 800f770:	d101      	bne.n	800f776 <rfalTransceiveRx+0x12e>
 800f772:	2204      	movs	r2, #4
 800f774:	e000      	b.n	800f778 <rfalTransceiveRx+0x130>
 800f776:	2225      	movs	r2, #37	@ 0x25
 800f778:	4b58      	ldr	r3, [pc, #352]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f77a:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f77c:	4b57      	ldr	r3, [pc, #348]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f77e:	225a      	movs	r2, #90	@ 0x5a
 800f780:	751a      	strb	r2, [r3, #20]
                break;
 800f782:	e2a4      	b.n	800fcce <rfalTransceiveRx+0x686>
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_RXS) != 0U )
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	f003 0320 	and.w	r3, r3, #32
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d015      	beq.n	800f7ba <rfalTransceiveRx+0x172>
            {
                /* If we got RXS + RXE together, jump directly into RFAL_TXRX_STATE_RX_ERR_CHECK */
                if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	f003 0310 	and.w	r3, r3, #16
 800f794:	2b00      	cmp	r3, #0
 800f796:	d006      	beq.n	800f7a6 <rfalTransceiveRx+0x15e>
                {
                    gRFAL.TxRx.rxse  = true;
 800f798:	4b50      	ldr	r3, [pc, #320]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f79a:	2201      	movs	r2, #1
 800f79c:	761a      	strb	r2, [r3, #24]
                    gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800f79e:	4b4f      	ldr	r3, [pc, #316]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f7a0:	2256      	movs	r2, #86	@ 0x56
 800f7a2:	751a      	strb	r2, [r3, #20]
                    break;
 800f7a4:	e293      	b.n	800fcce <rfalTransceiveRx+0x686>
                {
                    /*******************************************************************************/
                    /* REMARK: Silicon workaround ST25R3911 Errata #1.1                            */
                    /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                    /* Use a SW timer to handle an eventual missing RXE                            */
                    rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800f7a6:	200a      	movs	r0, #10
 800f7a8:	f7f6 f892 	bl	80058d0 <timerCalculateTimer>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	4a4b      	ldr	r2, [pc, #300]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f7b0:	6493      	str	r3, [r2, #72]	@ 0x48
                    /*******************************************************************************/
                    
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800f7b2:	4b4a      	ldr	r3, [pc, #296]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f7b4:	2254      	movs	r2, #84	@ 0x54
 800f7b6:	751a      	strb	r2, [r3, #20]
 800f7b8:	e014      	b.n	800f7e4 <rfalTransceiveRx+0x19c>
                }
            }
            else if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	f003 0310 	and.w	r3, r3, #16
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d008      	beq.n	800f7d6 <rfalTransceiveRx+0x18e>
                /* REMARK: Silicon workaround ST25R3911 Errata #1.9                            */
                /* ST25R3911 may indicate RXE without RXS previously, this happens upon some   */
                /* noise or incomplete byte frames with less than 4 bits                       */
                /*******************************************************************************/
                
                gRFAL.TxRx.status = ERR_IO;
 800f7c4:	4b45      	ldr	r3, [pc, #276]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f7c6:	2203      	movs	r2, #3
 800f7c8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f7ca:	4b44      	ldr	r3, [pc, #272]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f7cc:	225a      	movs	r2, #90	@ 0x5a
 800f7ce:	751a      	strb	r2, [r3, #20]
                
                rfalErrorHandling();
 800f7d0:	f7ff fbbe 	bl	800ef50 <rfalErrorHandling>
                break;
 800f7d4:	e27b      	b.n	800fcce <rfalTransceiveRx+0x686>
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800f7d6:	4b41      	ldr	r3, [pc, #260]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f7d8:	2203      	movs	r2, #3
 800f7da:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f7dc:	4b3f      	ldr	r3, [pc, #252]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f7de:	225a      	movs	r2, #90	@ 0x5a
 800f7e0:	751a      	strb	r2, [r3, #20]
               break;
 800f7e2:	e274      	b.n	800fcce <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_RXE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_EOF) );
 800f7e4:	f44f 6005 	mov.w	r0, #2128	@ 0x850
 800f7e8:	f7f5 ffea 	bl	80057c0 <st25r3911GetInterrupt>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d10f      	bne.n	800f816 <rfalTransceiveRx+0x1ce>
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
                /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
                /* corrupted frames.                                                           */
                /* SW timer is used to timeout upon a missing RXE                              */
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 800f7f6:	4b39      	ldr	r3, [pc, #228]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f7f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7f6 f876 	bl	80058ec <timerIsExpired>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	f000 825c 	beq.w	800fcc0 <rfalTransceiveRx+0x678>
                {
                    gRFAL.TxRx.status = ERR_FRAMING;
 800f808:	4b34      	ldr	r3, [pc, #208]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f80a:	2209      	movs	r2, #9
 800f80c:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f80e:	4b33      	ldr	r3, [pc, #204]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f810:	225a      	movs	r2, #90	@ 0x5a
 800f812:	751a      	strb	r2, [r3, #20]
                }
                /*******************************************************************************/
                    
                break;  /* No interrupt to process */
 800f814:	e254      	b.n	800fcc0 <rfalTransceiveRx+0x678>
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d008      	beq.n	800f832 <rfalTransceiveRx+0x1ea>
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	f003 0310 	and.w	r3, r3, #16
 800f826:	2b00      	cmp	r3, #0
 800f828:	d103      	bne.n	800f832 <rfalTransceiveRx+0x1ea>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 800f82a:	4b2c      	ldr	r3, [pc, #176]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f82c:	2255      	movs	r2, #85	@ 0x55
 800f82e:	751a      	strb	r2, [r3, #20]
                break;
 800f830:	e24d      	b.n	800fcce <rfalTransceiveRx+0x686>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800f832:	4b2a      	ldr	r3, [pc, #168]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f834:	2256      	movs	r2, #86	@ 0x56
 800f836:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
        
            /* Retrieve and check for any error irqs */
            irqs |= st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR1 | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_COL) );
 800f838:	4829      	ldr	r0, [pc, #164]	@ (800f8e0 <rfalTransceiveRx+0x298>)
 800f83a:	f7f5 ffc1 	bl	80057c0 <st25r3911GetInterrupt>
 800f83e:	4602      	mov	r2, r0
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	4313      	orrs	r3, r2
 800f844:	60bb      	str	r3, [r7, #8]
        
            if( (irqs & ST25R3911_IRQ_MASK_ERR1) != 0U )
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d008      	beq.n	800f862 <rfalTransceiveRx+0x21a>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800f850:	4b22      	ldr	r3, [pc, #136]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f852:	2209      	movs	r2, #9
 800f854:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f856:	4b21      	ldr	r3, [pc, #132]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f858:	2257      	movs	r2, #87	@ 0x57
 800f85a:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f85c:	f7ff fb78 	bl	800ef50 <rfalErrorHandling>
                break;
 800f860:	e235      	b.n	800fcce <rfalTransceiveRx+0x686>
            }
            /* Discard Soft Framing errors if not in EMVCo error handling */
            else if( ((irqs & ST25R3911_IRQ_MASK_ERR2) != 0U) && (gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO) )
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d00c      	beq.n	800f886 <rfalTransceiveRx+0x23e>
 800f86c:	4b1b      	ldr	r3, [pc, #108]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f86e:	79db      	ldrb	r3, [r3, #7]
 800f870:	2b02      	cmp	r3, #2
 800f872:	d108      	bne.n	800f886 <rfalTransceiveRx+0x23e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800f874:	4b19      	ldr	r3, [pc, #100]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f876:	2209      	movs	r2, #9
 800f878:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f87a:	4b18      	ldr	r3, [pc, #96]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f87c:	2257      	movs	r2, #87	@ 0x57
 800f87e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f880:	f7ff fb66 	bl	800ef50 <rfalErrorHandling>
                break;
 800f884:	e223      	b.n	800fcce <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_PAR) != 0U )
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d008      	beq.n	800f8a2 <rfalTransceiveRx+0x25a>
            {
                gRFAL.TxRx.status = ERR_PAR;
 800f890:	4b12      	ldr	r3, [pc, #72]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f892:	221b      	movs	r2, #27
 800f894:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f896:	4b11      	ldr	r3, [pc, #68]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f898:	2257      	movs	r2, #87	@ 0x57
 800f89a:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f89c:	f7ff fb58 	bl	800ef50 <rfalErrorHandling>
                break;
 800f8a0:	e215      	b.n	800fcce <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_CRC) != 0U )
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d008      	beq.n	800f8be <rfalTransceiveRx+0x276>
            {
                gRFAL.TxRx.status = ERR_CRC;
 800f8ac:	4b0b      	ldr	r3, [pc, #44]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f8ae:	2215      	movs	r2, #21
 800f8b0:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f8b4:	2257      	movs	r2, #87	@ 0x57
 800f8b6:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f8b8:	f7ff fb4a 	bl	800ef50 <rfalErrorHandling>
                break;
 800f8bc:	e207      	b.n	800fcce <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_COL) != 0U )
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	f003 0304 	and.w	r3, r3, #4
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d00d      	beq.n	800f8e4 <rfalTransceiveRx+0x29c>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800f8c8:	4b04      	ldr	r3, [pc, #16]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f8ca:	221d      	movs	r2, #29
 800f8cc:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800f8ce:	4b03      	ldr	r3, [pc, #12]	@ (800f8dc <rfalTransceiveRx+0x294>)
 800f8d0:	2257      	movs	r2, #87	@ 0x57
 800f8d2:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800f8d4:	f7ff fb3c 	bl	800ef50 <rfalErrorHandling>
                break;
 800f8d8:	e1f9      	b.n	800fcce <rfalTransceiveRx+0x686>
 800f8da:	bf00      	nop
 800f8dc:	20000d80 	.word	0x20000d80
 800f8e0:	00f00004 	.word	0x00f00004
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00b      	beq.n	800f906 <rfalTransceiveRx+0x2be>
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	f003 0310 	and.w	r3, r3, #16
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d106      	bne.n	800f906 <rfalTransceiveRx+0x2be>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800f8f8:	4b9a      	ldr	r3, [pc, #616]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f8fa:	2225      	movs	r2, #37	@ 0x25
 800f8fc:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f8fe:	4b99      	ldr	r3, [pc, #612]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f900:	225a      	movs	r2, #90	@ 0x5a
 800f902:	751a      	strb	r2, [r3, #20]
                 break;
 800f904:	e1e3      	b.n	800fcce <rfalTransceiveRx+0x686>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) || (gRFAL.TxRx.rxse) )
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	f003 0310 	and.w	r3, r3, #16
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d103      	bne.n	800f918 <rfalTransceiveRx+0x2d0>
 800f910:	4b94      	ldr	r3, [pc, #592]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f912:	7e1b      	ldrb	r3, [r3, #24]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d014      	beq.n	800f942 <rfalTransceiveRx+0x2fa>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 800f918:	f000 fa0c 	bl	800fd34 <rfalFIFOStatusIsIncompleteByte>
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d003      	beq.n	800f92a <rfalTransceiveRx+0x2e2>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800f922:	4b90      	ldr	r3, [pc, #576]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f924:	2228      	movs	r2, #40	@ 0x28
 800f926:	82da      	strh	r2, [r3, #22]
 800f928:	e007      	b.n	800f93a <rfalTransceiveRx+0x2f2>
                }
                /* Check if the reception ends with missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 800f92a:	f000 fa15 	bl	800fd58 <rfalFIFOStatusIsMissingPar>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d002      	beq.n	800f93a <rfalTransceiveRx+0x2f2>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 800f934:	4b8b      	ldr	r3, [pc, #556]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f936:	2209      	movs	r2, #9
 800f938:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 800f93a:	4b8a      	ldr	r3, [pc, #552]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f93c:	2257      	movs	r2, #87	@ 0x57
 800f93e:	751a      	strb	r2, [r3, #20]
 800f940:	e006      	b.n	800f950 <rfalTransceiveRx+0x308>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800f942:	4b88      	ldr	r3, [pc, #544]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f944:	2203      	movs	r2, #3
 800f946:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f948:	4b86      	ldr	r3, [pc, #536]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f94a:	225a      	movs	r2, #90	@ 0x5a
 800f94c:	751a      	strb	r2, [r3, #20]
                break;
 800f94e:	e1be      	b.n	800fcce <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                        
            tmp = rfalFIFOStatusGetNumBytes();
 800f950:	f000 f9e4 	bl	800fd1c <rfalFIFOStatusGetNumBytes>
 800f954:	4603      	mov	r3, r0
 800f956:	73fb      	strb	r3, [r7, #15]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800f958:	4b82      	ldr	r3, [pc, #520]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f95c:	f003 0302 	and.w	r3, r3, #2
 800f960:	2b00      	cmp	r3, #0
 800f962:	d11f      	bne.n	800f9a4 <rfalTransceiveRx+0x35c>
            {
                /* Check if CRC is being placed into the FIFO and if received frame was bigger than CRC */
                if( st25r3911IsCRCinFIFO() && ((gRFAL.fifo.bytesTotal + tmp) > 0U) )
 800f964:	2240      	movs	r2, #64	@ 0x40
 800f966:	2140      	movs	r1, #64	@ 0x40
 800f968:	2009      	movs	r0, #9
 800f96a:	f7f5 f883 	bl	8004a74 <st25r3911CheckReg>
 800f96e:	4603      	mov	r3, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	d017      	beq.n	800f9a4 <rfalTransceiveRx+0x35c>
 800f974:	4b7b      	ldr	r3, [pc, #492]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f976:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800f978:	461a      	mov	r2, r3
 800f97a:	7bfb      	ldrb	r3, [r7, #15]
 800f97c:	4413      	add	r3, r2
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d010      	beq.n	800f9a4 <rfalTransceiveRx+0x35c>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > (uint8_t)RFAL_CRC_LEN) )  
 800f982:	7bfb      	ldrb	r3, [r7, #15]
 800f984:	2b02      	cmp	r3, #2
 800f986:	d903      	bls.n	800f990 <rfalTransceiveRx+0x348>
                    {
                        tmp -= (uint8_t)RFAL_CRC_LEN;
 800f988:	7bfb      	ldrb	r3, [r7, #15]
 800f98a:	3b02      	subs	r3, #2
 800f98c:	73fb      	strb	r3, [r7, #15]
 800f98e:	e009      	b.n	800f9a4 <rfalTransceiveRx+0x35c>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > (uint16_t)RFAL_CRC_LEN)                       
 800f990:	4b74      	ldr	r3, [pc, #464]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f992:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800f994:	2b02      	cmp	r3, #2
 800f996:	d905      	bls.n	800f9a4 <rfalTransceiveRx+0x35c>
                    {                        
                        gRFAL.fifo.bytesTotal -= (uint16_t)RFAL_CRC_LEN;
 800f998:	4b72      	ldr	r3, [pc, #456]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f99a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800f99c:	3b02      	subs	r3, #2
 800f99e:	b29a      	uxth	r2, r3
 800f9a0:	4b70      	ldr	r3, [pc, #448]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9a2:	875a      	strh	r2, [r3, #58]	@ 0x3a
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 800f9a4:	4b6f      	ldr	r3, [pc, #444]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9a6:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 800f9a8:	7bfb      	ldrb	r3, [r7, #15]
 800f9aa:	b29b      	uxth	r3, r3
 800f9ac:	4413      	add	r3, r2
 800f9ae:	b29a      	uxth	r2, r3
 800f9b0:	4b6c      	ldr	r3, [pc, #432]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9b2:	875a      	strh	r2, [r3, #58]	@ 0x3a
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 800f9b4:	4b6b      	ldr	r3, [pc, #428]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9b6:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 800f9b8:	4b6a      	ldr	r3, [pc, #424]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9bc:	3307      	adds	r3, #7
 800f9be:	08db      	lsrs	r3, r3, #3
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d90f      	bls.n	800f9e6 <rfalTransceiveRx+0x39e>
            {
                tmp = (uint8_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 800f9c6:	4b67      	ldr	r3, [pc, #412]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9ca:	3307      	adds	r3, #7
 800f9cc:	08db      	lsrs	r3, r3, #3
 800f9ce:	b2da      	uxtb	r2, r3
 800f9d0:	4b64      	ldr	r3, [pc, #400]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9d2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	1ad3      	subs	r3, r2, r3
 800f9d8:	73fb      	strb	r3, [r7, #15]
                
                gRFAL.TxRx.status = ERR_NOMEM;
 800f9da:	4b62      	ldr	r3, [pc, #392]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9dc:	2201      	movs	r2, #1
 800f9de:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f9e0:	4b60      	ldr	r3, [pc, #384]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9e2:	225a      	movs	r2, #90	@ 0x5a
 800f9e4:	751a      	strb	r2, [r3, #20]
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 800f9e6:	4b5f      	ldr	r3, [pc, #380]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9ea:	4a5e      	ldr	r2, [pc, #376]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9ec:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 800f9ee:	4413      	add	r3, r2
 800f9f0:	7bfa      	ldrb	r2, [r7, #15]
 800f9f2:	4611      	mov	r1, r2
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7f5 fcb5 	bl	8005364 <st25r3911ReadFifo>
            if( (gRFAL.TxRx.ctx.rxRcvdLen != NULL) )
 800f9fa:	4b5a      	ldr	r3, [pc, #360]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800f9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d019      	beq.n	800fa36 <rfalTransceiveRx+0x3ee>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800fa02:	4b58      	ldr	r3, [pc, #352]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa04:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 800fa06:	4b57      	ldr	r3, [pc, #348]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa0a:	00d2      	lsls	r2, r2, #3
 800fa0c:	b292      	uxth	r2, r2
 800fa0e:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 800fa10:	f000 f990 	bl	800fd34 <rfalFIFOStatusIsIncompleteByte>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00d      	beq.n	800fa36 <rfalTransceiveRx+0x3ee>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800fa1a:	f000 f9af 	bl	800fd7c <rfalFIFOGetNumIncompleteBits>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	f1c3 0208 	rsb	r2, r3, #8
 800fa24:	4b4f      	ldr	r3, [pc, #316]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa28:	8819      	ldrh	r1, [r3, #0]
 800fa2a:	b292      	uxth	r2, r2
 800fa2c:	4b4d      	ldr	r3, [pc, #308]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa30:	1a8a      	subs	r2, r1, r2
 800fa32:	b292      	uxth	r2, r2
 800fa34:	801a      	strh	r2, [r3, #0]
            }
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800fa36:	4b4b      	ldr	r3, [pc, #300]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa38:	785b      	ldrb	r3, [r3, #1]
 800fa3a:	2b07      	cmp	r3, #7
 800fa3c:	d003      	beq.n	800fa46 <rfalTransceiveRx+0x3fe>
 800fa3e:	4b49      	ldr	r3, [pc, #292]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa40:	785b      	ldrb	r3, [r3, #1]
 800fa42:	2b08      	cmp	r3, #8
 800fa44:	d165      	bne.n	800fb12 <rfalTransceiveRx+0x4ca>
 800fa46:	4b47      	ldr	r3, [pc, #284]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa48:	8adb      	ldrh	r3, [r3, #22]
 800fa4a:	2b02      	cmp	r3, #2
 800fa4c:	d161      	bne.n	800fb12 <rfalTransceiveRx+0x4ca>
            {
                ReturnCode ret;
                uint16_t offset = 0;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	80fb      	strh	r3, [r7, #6]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800fa52:	4b44      	ldr	r3, [pc, #272]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa54:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800fa56:	4b43      	ldr	r3, [pc, #268]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa58:	8f5c      	ldrh	r4, [r3, #58]	@ 0x3a
 800fa5a:	4b42      	ldr	r3, [pc, #264]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa5c:	f8d3 53d4 	ldr.w	r5, [r3, #980]	@ 0x3d4
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 800fa60:	4b40      	ldr	r3, [pc, #256]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa62:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800fa66:	3307      	adds	r3, #7
 800fa68:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800fa6a:	b29e      	uxth	r6, r3
 800fa6c:	4b3d      	ldr	r3, [pc, #244]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa72:	4a3c      	ldr	r2, [pc, #240]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa74:	f8b2 23e8 	ldrh.w	r2, [r2, #1000]	@ 0x3e8
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 800fa78:	493a      	ldr	r1, [pc, #232]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fa7a:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800fa7c:	2908      	cmp	r1, #8
 800fa7e:	bf0c      	ite	eq
 800fa80:	2101      	moveq	r1, #1
 800fa82:	2100      	movne	r1, #0
 800fa84:	b2c9      	uxtb	r1, r1
 800fa86:	9103      	str	r1, [sp, #12]
 800fa88:	9202      	str	r2, [sp, #8]
 800fa8a:	9301      	str	r3, [sp, #4]
 800fa8c:	1dbb      	adds	r3, r7, #6
 800fa8e:	9300      	str	r3, [sp, #0]
 800fa90:	4633      	mov	r3, r6
 800fa92:	462a      	mov	r2, r5
 800fa94:	4621      	mov	r1, r4
 800fa96:	f7f6 fa4d 	bl	8005f34 <iso15693VICCDecode>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	81bb      	strh	r3, [r7, #12]

                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 800fa9e:	89bb      	ldrh	r3, [r7, #12]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d002      	beq.n	800faaa <rfalTransceiveRx+0x462>
 800faa4:	89bb      	ldrh	r3, [r7, #12]
 800faa6:	2b15      	cmp	r3, #21
 800faa8:	d11f      	bne.n	800faea <rfalTransceiveRx+0x4a2>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800faaa:	4b2e      	ldr	r3, [pc, #184]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800faac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fab0:	f003 0302 	and.w	r3, r3, #2
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d118      	bne.n	800faea <rfalTransceiveRx+0x4a2>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800fab8:	4b2a      	ldr	r3, [pc, #168]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800faba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fabe:	881b      	ldrh	r3, [r3, #0]
 800fac0:	f003 0307 	and.w	r3, r3, #7
 800fac4:	b29b      	uxth	r3, r3
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d10f      	bne.n	800faea <rfalTransceiveRx+0x4a2>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800faca:	4b26      	ldr	r3, [pc, #152]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800facc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fad0:	881b      	ldrh	r3, [r3, #0]
 800fad2:	2b0f      	cmp	r3, #15
 800fad4:	d909      	bls.n	800faea <rfalTransceiveRx+0x4a2>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800fad6:	4b23      	ldr	r3, [pc, #140]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fad8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fadc:	881a      	ldrh	r2, [r3, #0]
 800fade:	4b21      	ldr	r3, [pc, #132]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fae0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fae4:	3a10      	subs	r2, #16
 800fae6:	b292      	uxth	r2, r2
 800fae8:	801a      	strh	r2, [r3, #0]
                }
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800faea:	4a1e      	ldr	r2, [pc, #120]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800faec:	4b1d      	ldr	r3, [pc, #116]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800faee:	f102 041c 	add.w	r4, r2, #28
 800faf2:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800faf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fafa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fafe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800fb02:	89bb      	ldrh	r3, [r7, #12]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d001      	beq.n	800fb0c <rfalTransceiveRx+0x4c4>
 800fb08:	89bb      	ldrh	r3, [r7, #12]
 800fb0a:	e000      	b.n	800fb0e <rfalTransceiveRx+0x4c6>
 800fb0c:	2302      	movs	r3, #2
 800fb0e:	4a15      	ldr	r2, [pc, #84]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fb10:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 800fb12:	4b14      	ldr	r3, [pc, #80]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fb14:	8adb      	ldrh	r3, [r3, #22]
 800fb16:	2b02      	cmp	r3, #2
 800fb18:	d003      	beq.n	800fb22 <rfalTransceiveRx+0x4da>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 800fb1a:	4b12      	ldr	r3, [pc, #72]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fb1c:	225a      	movs	r2, #90	@ 0x5a
 800fb1e:	751a      	strb	r2, [r3, #20]
                break;
 800fb20:	e0d5      	b.n	800fcce <rfalTransceiveRx+0x686>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 800fb22:	4b10      	ldr	r3, [pc, #64]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fb24:	785b      	ldrb	r3, [r3, #1]
 800fb26:	2b09      	cmp	r3, #9
 800fb28:	d003      	beq.n	800fb32 <rfalTransceiveRx+0x4ea>
 800fb2a:	4b0e      	ldr	r3, [pc, #56]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fb2c:	785b      	ldrb	r3, [r3, #1]
 800fb2e:	2b0d      	cmp	r3, #13
 800fb30:	d103      	bne.n	800fb3a <rfalTransceiveRx+0x4f2>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800fb32:	4b0c      	ldr	r3, [pc, #48]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fb34:	2258      	movs	r2, #88	@ 0x58
 800fb36:	751a      	strb	r2, [r3, #20]
                break;
 800fb38:	e0c9      	b.n	800fcce <rfalTransceiveRx+0x686>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800fb3a:	4b0a      	ldr	r3, [pc, #40]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fb3c:	2259      	movs	r2, #89	@ 0x59
 800fb3e:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800fb40:	4b08      	ldr	r3, [pc, #32]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fb42:	799b      	ldrb	r3, [r3, #6]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d003      	beq.n	800fb50 <rfalTransceiveRx+0x508>
 800fb48:	2100      	movs	r1, #0
 800fb4a:	2001      	movs	r0, #1
 800fb4c:	f7f5 fa7a 	bl	8005044 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800fb50:	f7ff fa82 	bl	800f058 <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 800fb54:	4b03      	ldr	r3, [pc, #12]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fb56:	2200      	movs	r2, #0
 800fb58:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 800fb5a:	4b02      	ldr	r3, [pc, #8]	@ (800fb64 <rfalTransceiveRx+0x51c>)
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	751a      	strb	r2, [r3, #20]
            break;
 800fb60:	e0b5      	b.n	800fcce <rfalTransceiveRx+0x686>
 800fb62:	bf00      	nop
 800fb64:	20000d80 	.word	0x20000d80
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
            /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
            /* corrupted frames.                                                           */
            /* Re-Start SW timer to handle an eventual missing RXE                         */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800fb68:	200a      	movs	r0, #10
 800fb6a:	f7f5 feb1 	bl	80058d0 <timerCalculateTimer>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	4a59      	ldr	r2, [pc, #356]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fb72:	6493      	str	r3, [r2, #72]	@ 0x48
            /*******************************************************************************/        
                    
        
            tmp = rfalFIFOStatusGetNumBytes();
 800fb74:	f000 f8d2 	bl	800fd1c <rfalFIFOStatusGetNumBytes>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	73fb      	strb	r3, [r7, #15]
            gRFAL.fifo.bytesTotal += tmp;
 800fb7c:	4b56      	ldr	r3, [pc, #344]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fb7e:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 800fb80:	7bfb      	ldrb	r3, [r7, #15]
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	4413      	add	r3, r2
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	4b53      	ldr	r3, [pc, #332]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fb8a:	875a      	strh	r2, [r3, #58]	@ 0x3a
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800fb8c:	4b52      	ldr	r3, [pc, #328]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fb8e:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 800fb90:	4b51      	ldr	r3, [pc, #324]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fb92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb94:	3307      	adds	r3, #7
 800fb96:	08db      	lsrs	r3, r3, #3
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d90a      	bls.n	800fbb4 <rfalTransceiveRx+0x56c>
 800fb9e:	4b4e      	ldr	r3, [pc, #312]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fba2:	3307      	adds	r3, #7
 800fba4:	08db      	lsrs	r3, r3, #3
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	4b4b      	ldr	r3, [pc, #300]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fbaa:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	1ad3      	subs	r3, r2, r3
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	e000      	b.n	800fbb6 <rfalTransceiveRx+0x56e>
 800fbb4:	7bfb      	ldrb	r3, [r7, #15]
 800fbb6:	73bb      	strb	r3, [r7, #14]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800fbb8:	4b47      	ldr	r3, [pc, #284]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fbba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbbc:	4a46      	ldr	r2, [pc, #280]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fbbe:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 800fbc0:	4413      	add	r3, r2
 800fbc2:	7bba      	ldrb	r2, [r7, #14]
 800fbc4:	4611      	mov	r1, r2
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7f5 fbcc 	bl	8005364 <st25r3911ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800fbcc:	4b42      	ldr	r3, [pc, #264]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fbce:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800fbd0:	7bbb      	ldrb	r3, [r7, #14]
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	4413      	add	r3, r2
 800fbd6:	b29a      	uxth	r2, r3
 800fbd8:	4b3f      	ldr	r3, [pc, #252]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fbda:	879a      	strh	r2, [r3, #60]	@ 0x3c
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 800fbdc:	7bba      	ldrb	r2, [r7, #14]
 800fbde:	7bfb      	ldrb	r3, [r7, #15]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d207      	bcs.n	800fbf4 <rfalTransceiveRx+0x5ac>
            {
                st25r3911ReadFifo( NULL, (tmp - aux) );
 800fbe4:	7bfa      	ldrb	r2, [r7, #15]
 800fbe6:	7bbb      	ldrb	r3, [r7, #14]
 800fbe8:	1ad3      	subs	r3, r2, r3
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	4619      	mov	r1, r3
 800fbee:	2000      	movs	r0, #0
 800fbf0:	f7f5 fbb8 	bl	8005364 <st25r3911ReadFifo>
            }
            
            rfalFIFOStatusClear();
 800fbf4:	f000 f884 	bl	800fd00 <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800fbf8:	4b37      	ldr	r3, [pc, #220]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fbfa:	2254      	movs	r2, #84	@ 0x54
 800fbfc:	751a      	strb	r2, [r3, #20]
            break;
 800fbfe:	e066      	b.n	800fcce <rfalTransceiveRx+0x686>
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800fc00:	4b35      	ldr	r3, [pc, #212]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fc02:	799b      	ldrb	r3, [r3, #6]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d003      	beq.n	800fc10 <rfalTransceiveRx+0x5c8>
 800fc08:	2100      	movs	r1, #0
 800fc0a:	2001      	movs	r0, #1
 800fc0c:	f7f5 fa1a 	bl	8005044 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800fc10:	f7ff fa22 	bl	800f058 <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800fc14:	4b30      	ldr	r3, [pc, #192]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fc16:	8adb      	ldrh	r3, [r3, #22]
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	d102      	bne.n	800fc22 <rfalTransceiveRx+0x5da>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800fc1c:	4b2e      	ldr	r3, [pc, #184]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fc1e:	2208      	movs	r2, #8
 800fc20:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800fc22:	4b2d      	ldr	r3, [pc, #180]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fc24:	2200      	movs	r2, #0
 800fc26:	751a      	strb	r2, [r3, #20]
            break;
 800fc28:	e051      	b.n	800fcce <rfalTransceiveRx+0x686>
        
        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_NRE) );
 800fc2a:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 800fc2e:	f7f5 fdc7 	bl	80057c0 <st25r3911GetInterrupt>
 800fc32:	4603      	mov	r3, r0
 800fc34:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d043      	beq.n	800fcc4 <rfalTransceiveRx+0x67c>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d002      	beq.n	800fc4c <rfalTransceiveRx+0x604>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800fc46:	4b24      	ldr	r3, [pc, #144]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fc48:	2253      	movs	r2, #83	@ 0x53
 800fc4a:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NRE) != 0U )
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d038      	beq.n	800fcc8 <rfalTransceiveRx+0x680>
            {
                /* ST25R3911 uses the NRT to measure other device's Field On max time: Tadt + (n x Trfw)  */
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 800fc56:	4b20      	ldr	r3, [pc, #128]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fc58:	2225      	movs	r2, #37	@ 0x25
 800fc5a:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800fc5c:	4b1e      	ldr	r3, [pc, #120]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fc5e:	225a      	movs	r2, #90	@ 0x5a
 800fc60:	751a      	strb	r2, [r3, #20]
            }
            break;
 800fc62:	e031      	b.n	800fcc8 <rfalTransceiveRx+0x680>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC) );
 800fc64:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 800fc68:	f7f5 fdaa 	bl	80057c0 <st25r3911GetInterrupt>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d02a      	beq.n	800fccc <rfalTransceiveRx+0x684>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_CAT) != 0U )
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d003      	beq.n	800fc88 <rfalTransceiveRx+0x640>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800fc80:	4b15      	ldr	r3, [pc, #84]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fc82:	2259      	movs	r2, #89	@ 0x59
 800fc84:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 800fc86:	e022      	b.n	800fcce <rfalTransceiveRx+0x686>
            else if( (irqs & ST25R3911_IRQ_MASK_CAC) != 0U )
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d006      	beq.n	800fca0 <rfalTransceiveRx+0x658>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800fc92:	4b11      	ldr	r3, [pc, #68]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fc94:	221d      	movs	r2, #29
 800fc96:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800fc98:	4b0f      	ldr	r3, [pc, #60]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fc9a:	225a      	movs	r2, #90	@ 0x5a
 800fc9c:	751a      	strb	r2, [r3, #20]
            break;
 800fc9e:	e016      	b.n	800fcce <rfalTransceiveRx+0x686>
               gRFAL.TxRx.status = ERR_IO;
 800fca0:	4b0d      	ldr	r3, [pc, #52]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fca2:	2203      	movs	r2, #3
 800fca4:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800fca6:	4b0c      	ldr	r3, [pc, #48]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fca8:	225a      	movs	r2, #90	@ 0x5a
 800fcaa:	751a      	strb	r2, [r3, #20]
            break;
 800fcac:	e00f      	b.n	800fcce <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800fcae:	4b0a      	ldr	r3, [pc, #40]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fcb0:	2208      	movs	r2, #8
 800fcb2:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800fcb4:	4b08      	ldr	r3, [pc, #32]	@ (800fcd8 <rfalTransceiveRx+0x690>)
 800fcb6:	225a      	movs	r2, #90	@ 0x5a
 800fcb8:	751a      	strb	r2, [r3, #20]
            break;           
 800fcba:	e008      	b.n	800fcce <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 800fcbc:	bf00      	nop
 800fcbe:	e006      	b.n	800fcce <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 800fcc0:	bf00      	nop
 800fcc2:	e004      	b.n	800fcce <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 800fcc4:	bf00      	nop
 800fcc6:	e002      	b.n	800fcce <rfalTransceiveRx+0x686>
            break;
 800fcc8:	bf00      	nop
 800fcca:	e000      	b.n	800fcce <rfalTransceiveRx+0x686>
               break;  /* No interrupt to process */
 800fccc:	bf00      	nop
    }    
}
 800fcce:	bf00      	nop
 800fcd0:	3714      	adds	r7, #20
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	20000d80 	.word	0x20000d80

0800fcdc <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800fce0:	4b05      	ldr	r3, [pc, #20]	@ (800fcf8 <rfalFIFOStatusUpdate+0x1c>)
 800fce2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fce6:	2bff      	cmp	r3, #255	@ 0xff
 800fce8:	d104      	bne.n	800fcf4 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 800fcea:	2202      	movs	r2, #2
 800fcec:	4903      	ldr	r1, [pc, #12]	@ (800fcfc <rfalFIFOStatusUpdate+0x20>)
 800fcee:	201a      	movs	r0, #26
 800fcf0:	f7f5 f904 	bl	8004efc <st25r3911ReadMultipleRegisters>
    }
}
 800fcf4:	bf00      	nop
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	20000d80 	.word	0x20000d80
 800fcfc:	20000dbe 	.word	0x20000dbe

0800fd00 <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 800fd00:	b480      	push	{r7}
 800fd02:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800fd04:	4b04      	ldr	r3, [pc, #16]	@ (800fd18 <rfalFIFOStatusClear+0x18>)
 800fd06:	22ff      	movs	r2, #255	@ 0xff
 800fd08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
}
 800fd0c:	bf00      	nop
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	20000d80 	.word	0x20000d80

0800fd1c <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint8_t rfalFIFOStatusGetNumBytes( void )
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800fd20:	f7ff ffdc 	bl	800fcdc <rfalFIFOStatusUpdate>
    
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 800fd24:	4b02      	ldr	r3, [pc, #8]	@ (800fd30 <rfalFIFOStatusGetNumBytes+0x14>)
 800fd26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
   
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	20000d80 	.word	0x20000d80

0800fd34 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800fd38:	f7ff ffd0 	bl	800fcdc <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 800fd3c:	4b05      	ldr	r3, [pc, #20]	@ (800fd54 <rfalFIFOStatusIsIncompleteByte+0x20>)
 800fd3e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fd42:	f003 031e 	and.w	r3, r3, #30
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	bf14      	ite	ne
 800fd4a:	2301      	movne	r3, #1
 800fd4c:	2300      	moveq	r3, #0
 800fd4e:	b2db      	uxtb	r3, r3
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	bd80      	pop	{r7, pc}
 800fd54:	20000d80 	.word	0x20000d80

0800fd58 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800fd5c:	f7ff ffbe 	bl	800fcdc <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_np_lb) != 0U);
 800fd60:	4b05      	ldr	r3, [pc, #20]	@ (800fd78 <rfalFIFOStatusIsMissingPar+0x20>)
 800fd62:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fd66:	f003 0301 	and.w	r3, r3, #1
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	bf14      	ite	ne
 800fd6e:	2301      	movne	r3, #1
 800fd70:	2300      	moveq	r3, #0
 800fd72:	b2db      	uxtb	r3, r3
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	bd80      	pop	{r7, pc}
 800fd78:	20000d80 	.word	0x20000d80

0800fd7c <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800fd80:	f7ff ffac 	bl	800fcdc <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb) >> ST25R3911_REG_FIFO_RX_STATUS2_shift_fifo_lb);
 800fd84:	4b04      	ldr	r3, [pc, #16]	@ (800fd98 <rfalFIFOGetNumIncompleteBits+0x1c>)
 800fd86:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fd8a:	085b      	lsrs	r3, r3, #1
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	f003 0307 	and.w	r3, r3, #7
 800fd92:	b2db      	uxtb	r3, r3
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	bd80      	pop	{r7, pc}
 800fd98:	20000d80 	.word	0x20000d80

0800fd9c <rfalISO14443ATransceiveShortFrame>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveShortFrame( rfal14443AShortFrameCmd txCmd, uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* rxRcvdLen, uint32_t fwt )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b086      	sub	sp, #24
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60b9      	str	r1, [r7, #8]
 800fda4:	607b      	str	r3, [r7, #4]
 800fda6:	4603      	mov	r3, r0
 800fda8:	73fb      	strb	r3, [r7, #15]
 800fdaa:	4613      	mov	r3, r2
 800fdac:	73bb      	strb	r3, [r7, #14]
    ReturnCode ret;
    uint8_t    directCmd;

    /* Check if RFAL is properly initialized */
    if( !st25r3911IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 800fdae:	2208      	movs	r2, #8
 800fdb0:	2108      	movs	r1, #8
 800fdb2:	2002      	movs	r0, #2
 800fdb4:	f7f4 fe5e 	bl	8004a74 <st25r3911CheckReg>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	f083 0301 	eor.w	r3, r3, #1
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d10b      	bne.n	800fddc <rfalISO14443ATransceiveShortFrame+0x40>
 800fdc4:	4b70      	ldr	r3, [pc, #448]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d907      	bls.n	800fddc <rfalISO14443ATransceiveShortFrame+0x40>
 800fdcc:	4b6e      	ldr	r3, [pc, #440]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fdce:	785b      	ldrb	r3, [r3, #1]
 800fdd0:	2b01      	cmp	r3, #1
 800fdd2:	d005      	beq.n	800fde0 <rfalISO14443ATransceiveShortFrame+0x44>
 800fdd4:	4b6c      	ldr	r3, [pc, #432]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fdd6:	785b      	ldrb	r3, [r3, #1]
 800fdd8:	2b02      	cmp	r3, #2
 800fdda:	d001      	beq.n	800fde0 <rfalISO14443ATransceiveShortFrame+0x44>
    {
        return ERR_WRONG_STATE;
 800fddc:	2321      	movs	r3, #33	@ 0x21
 800fdde:	e0cf      	b.n	800ff80 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }    
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d006      	beq.n	800fdf4 <rfalISO14443ATransceiveShortFrame+0x58>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d003      	beq.n	800fdf4 <rfalISO14443ATransceiveShortFrame+0x58>
 800fdec:	6a3b      	ldr	r3, [r7, #32]
 800fdee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fdf2:	d101      	bne.n	800fdf8 <rfalISO14443ATransceiveShortFrame+0x5c>
    {
        return ERR_PARAM;
 800fdf4:	2307      	movs	r3, #7
 800fdf6:	e0c3      	b.n	800ff80 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    /*******************************************************************************/
    /* Select the Direct Command to be performed                                   */
    switch (txCmd)
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
 800fdfa:	2b26      	cmp	r3, #38	@ 0x26
 800fdfc:	d004      	beq.n	800fe08 <rfalISO14443ATransceiveShortFrame+0x6c>
 800fdfe:	2b52      	cmp	r3, #82	@ 0x52
 800fe00:	d105      	bne.n	800fe0e <rfalISO14443ATransceiveShortFrame+0x72>
    {
        case RFAL_14443A_SHORTFRAME_CMD_WUPA:
            directCmd = ST25R3911_CMD_TRANSMIT_WUPA;
 800fe02:	23c7      	movs	r3, #199	@ 0xc7
 800fe04:	757b      	strb	r3, [r7, #21]
            break;
 800fe06:	e004      	b.n	800fe12 <rfalISO14443ATransceiveShortFrame+0x76>
            
        case RFAL_14443A_SHORTFRAME_CMD_REQA:
            directCmd = ST25R3911_CMD_TRANSMIT_REQA;
 800fe08:	23c6      	movs	r3, #198	@ 0xc6
 800fe0a:	757b      	strb	r3, [r7, #21]
            break;
 800fe0c:	e001      	b.n	800fe12 <rfalISO14443ATransceiveShortFrame+0x76>
            
        default:
            return ERR_PARAM;
 800fe0e:	2307      	movs	r3, #7
 800fe10:	e0b6      	b.n	800ff80 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl);
 800fe12:	2101      	movs	r1, #1
 800fe14:	2005      	movs	r0, #5
 800fe16:	f7f5 f9d0 	bl	80051ba <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving since ATQA has no CRC included */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800fe1a:	2180      	movs	r1, #128	@ 0x80
 800fe1c:	2009      	movs	r0, #9
 800fe1e:	f7f5 f9cc 	bl	80051ba <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Wait for GT and FDT */
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 800fe22:	bf00      	nop
 800fe24:	f7fe fdc8 	bl	800e9b8 <rfalIsGTExpired>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	f083 0301 	eor.w	r3, r3, #1
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1f7      	bne.n	800fe24 <rfalISO14443ATransceiveShortFrame+0x88>
    while( st25r3911IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 800fe34:	bf00      	nop
 800fe36:	2204      	movs	r2, #4
 800fe38:	2104      	movs	r1, #4
 800fe3a:	202b      	movs	r0, #43	@ 0x2b
 800fe3c:	f7f4 fe1a 	bl	8004a74 <st25r3911CheckReg>
 800fe40:	4603      	mov	r3, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1f7      	bne.n	800fe36 <rfalISO14443ATransceiveShortFrame+0x9a>
    
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800fe46:	4b50      	ldr	r3, [pc, #320]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fe48:	2200      	movs	r2, #0
 800fe4a:	641a      	str	r2, [r3, #64]	@ 0x40

    
    /*******************************************************************************/
    /* Prepare for Transceive, Receive only (bypass Tx states) */
    gRFAL.TxRx.ctx.flags     = ((uint32_t) RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 800fe4c:	4b4e      	ldr	r3, [pc, #312]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fe4e:	2203      	movs	r2, #3
 800fe50:	631a      	str	r2, [r3, #48]	@ 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 800fe52:	4a4d      	ldr	r2, [pc, #308]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	6253      	str	r3, [r2, #36]	@ 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 800fe58:	7bbb      	ldrb	r3, [r7, #14]
 800fe5a:	b29a      	uxth	r2, r3
 800fe5c:	4b4a      	ldr	r3, [pc, #296]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fe5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 800fe60:	4a49      	ldr	r2, [pc, #292]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    
    /*******************************************************************************/
    /* Load NRT with FWT */
    st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3911_NRT_MAX_1FC ) ) );
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800fe6c:	4a47      	ldr	r2, [pc, #284]	@ (800ff8c <rfalISO14443ATransceiveShortFrame+0x1f0>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	bf28      	it	cs
 800fe72:	4613      	movcs	r3, r2
 800fe74:	099b      	lsrs	r3, r3, #6
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7f4 fe3e 	bl	8004af8 <st25r3911SetNoResponseTime_64fcs>
    
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800fe7c:	4b42      	ldr	r3, [pc, #264]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fe7e:	68db      	ldr	r3, [r3, #12]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d010      	beq.n	800fea6 <rfalISO14443ATransceiveShortFrame+0x10a>
    {
        /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 800fe84:	4b40      	ldr	r3, [pc, #256]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800fe8c:	d306      	bcc.n	800fe9c <rfalISO14443ATransceiveShortFrame+0x100>
 800fe8e:	4b3e      	ldr	r3, [pc, #248]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fe90:	68db      	ldr	r3, [r3, #12]
 800fe92:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800fe96:	099b      	lsrs	r3, r3, #6
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	e000      	b.n	800fe9e <rfalISO14443ATransceiveShortFrame+0x102>
 800fe9c:	2304      	movs	r3, #4
 800fe9e:	4619      	mov	r1, r3
 800fea0:	200e      	movs	r0, #14
 800fea2:	f7f5 f919 	bl	80050d8 <st25r3911WriteRegister>
    }
    
    /* In Passive communications General Purpose Timer is used to measure FDT Poll */
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800fea6:	4b38      	ldr	r3, [pc, #224]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d014      	beq.n	800fed8 <rfalISO14443ATransceiveShortFrame+0x13c>
    {
        /* Configure GPT to start at RX end */
        st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 800feae:	4b36      	ldr	r3, [pc, #216]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800feb0:	691b      	ldr	r3, [r3, #16]
 800feb2:	f240 423b 	movw	r2, #1083	@ 0x43b
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d804      	bhi.n	800fec4 <rfalISO14443ATransceiveShortFrame+0x128>
 800feba:	4b33      	ldr	r3, [pc, #204]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800febc:	691b      	ldr	r3, [r3, #16]
 800febe:	08db      	lsrs	r3, r3, #3
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	e005      	b.n	800fed0 <rfalISO14443ATransceiveShortFrame+0x134>
 800fec4:	4b30      	ldr	r3, [pc, #192]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 800fecc:	08db      	lsrs	r3, r3, #3
 800fece:	b29b      	uxth	r3, r3
 800fed0:	2120      	movs	r1, #32
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7f4 fd9a 	bl	8004a0c <st25r3911StartGPTimer_8fcs>
    }
    
    /*******************************************************************************/
    rfalPrepareTransceive();
 800fed8:	f7ff f8d4 	bl	800f084 <rfalPrepareTransceive>
    
    /* Also enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 800fedc:	2004      	movs	r0, #4
 800fede:	f7f5 fc6f 	bl	80057c0 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 800fee2:	2004      	movs	r0, #4
 800fee4:	f7f5 fca8 	bl	8005838 <st25r3911EnableInterrupts>
    
    /*Check if Observation Mode is enabled and set it on ST25R391x */
    rfalCheckEnableObsModeTx();
 800fee8:	4b27      	ldr	r3, [pc, #156]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800feea:	795b      	ldrb	r3, [r3, #5]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d005      	beq.n	800fefc <rfalISO14443ATransceiveShortFrame+0x160>
 800fef0:	4b25      	ldr	r3, [pc, #148]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800fef2:	795b      	ldrb	r3, [r3, #5]
 800fef4:	4619      	mov	r1, r3
 800fef6:	2001      	movs	r0, #1
 800fef8:	f7f5 f8a4 	bl	8005044 <st25r3911WriteTestRegister>
    
    /*******************************************************************************/
    /* Chip bug: Clear nbtx bits before sending WUPA/REQA - otherwise ST25R3911 will report parity error */
    st25r3911WriteRegister( ST25R3911_REG_NUM_TX_BYTES2, 0);
 800fefc:	2100      	movs	r1, #0
 800fefe:	201e      	movs	r0, #30
 800ff00:	f7f5 f8ea 	bl	80050d8 <st25r3911WriteRegister>

    /* Send either WUPA or REQA. All affected tags will backscatter ATQA and change to READY state */
    st25r3911ExecuteCommand( directCmd );
 800ff04:	7d7b      	ldrb	r3, [r7, #21]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7f5 fa7a 	bl	8005400 <st25r3911ExecuteCommand>
    
    /* Wait for TXE */
    if( st25r3911WaitForInterruptsTimed( ST25R3911_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3911_SW_TMR_MIN_1MS ) ) == 0U)
 800ff0c:	6a3b      	ldr	r3, [r7, #32]
 800ff0e:	f646 12ef 	movw	r2, #27119	@ 0x69ef
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d906      	bls.n	800ff24 <rfalISO14443ATransceiveShortFrame+0x188>
 800ff16:	6a3b      	ldr	r3, [r7, #32]
 800ff18:	4a1d      	ldr	r2, [pc, #116]	@ (800ff90 <rfalISO14443ATransceiveShortFrame+0x1f4>)
 800ff1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ff1e:	0b1b      	lsrs	r3, r3, #12
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	e000      	b.n	800ff26 <rfalISO14443ATransceiveShortFrame+0x18a>
 800ff24:	2301      	movs	r3, #1
 800ff26:	4619      	mov	r1, r3
 800ff28:	2008      	movs	r0, #8
 800ff2a:	f7f5 fbf5 	bl	8005718 <st25r3911WaitForInterruptsTimed>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d102      	bne.n	800ff3a <rfalISO14443ATransceiveShortFrame+0x19e>
    {
        ret = ERR_IO;
 800ff34:	2303      	movs	r3, #3
 800ff36:	82fb      	strh	r3, [r7, #22]
 800ff38:	e016      	b.n	800ff68 <rfalISO14443ATransceiveShortFrame+0x1cc>
    }
    else
    {
        /*Check if Observation Mode is enabled and set it on ST25R391x */
        rfalCheckEnableObsModeRx();
 800ff3a:	4b13      	ldr	r3, [pc, #76]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800ff3c:	799b      	ldrb	r3, [r3, #6]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d005      	beq.n	800ff4e <rfalISO14443ATransceiveShortFrame+0x1b2>
 800ff42:	4b11      	ldr	r3, [pc, #68]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800ff44:	799b      	ldrb	r3, [r3, #6]
 800ff46:	4619      	mov	r1, r3
 800ff48:	2001      	movs	r0, #1
 800ff4a:	f7f5 f87b 	bl	8005044 <st25r3911WriteTestRegister>
        
        /* Jump into a transceive Rx state for reception (bypass Tx states) */
        gRFAL.state       = RFAL_STATE_TXRX;
 800ff4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800ff50:	2203      	movs	r2, #3
 800ff52:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800ff54:	4b0c      	ldr	r3, [pc, #48]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800ff56:	2251      	movs	r2, #81	@ 0x51
 800ff58:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800ff5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ff88 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800ff5c:	2202      	movs	r2, #2
 800ff5e:	82da      	strh	r2, [r3, #22]
        
        /* Execute Transceive Rx blocking */
        ret = rfalTransceiveBlockingRx();
 800ff60:	f7fe ff5e 	bl	800ee20 <rfalTransceiveBlockingRx>
 800ff64:	4603      	mov	r3, r0
 800ff66:	82fb      	strh	r3, [r7, #22]
    }
    
    
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 800ff68:	2004      	movs	r0, #4
 800ff6a:	f7f5 fc71 	bl	8005850 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 800ff6e:	2101      	movs	r1, #1
 800ff70:	2005      	movs	r0, #5
 800ff72:	f7f5 f8ff 	bl	8005174 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits(ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800ff76:	2180      	movs	r1, #128	@ 0x80
 800ff78:	2009      	movs	r0, #9
 800ff7a:	f7f5 f8fb 	bl	8005174 <st25r3911ClrRegisterBits>
    
    return ret;
 800ff7e:	8afb      	ldrh	r3, [r7, #22]
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3718      	adds	r7, #24
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	20000d80 	.word	0x20000d80
 800ff8c:	0ffff000 	.word	0x0ffff000
 800ff90:	4d542005 	.word	0x4d542005

0800ff94 <rfalISO14443ATransceiveAnticollisionFrame>:

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveAnticollisionFrame( uint8_t *buf, uint8_t *bytesToSend, uint8_t *bitsToSend, uint16_t *rxLength, uint32_t fwt )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b08e      	sub	sp, #56	@ 0x38
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	607a      	str	r2, [r7, #4]
 800ffa0:	603b      	str	r3, [r7, #0]
    rfalTransceiveContext ctx;
    uint8_t               collByte;
    uint8_t               collData;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 800ffa2:	4b76      	ldr	r3, [pc, #472]	@ (801017c <rfalISO14443ATransceiveAnticollisionFrame+0x1e8>)
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d903      	bls.n	800ffb2 <rfalISO14443ATransceiveAnticollisionFrame+0x1e>
 800ffaa:	4b74      	ldr	r3, [pc, #464]	@ (801017c <rfalISO14443ATransceiveAnticollisionFrame+0x1e8>)
 800ffac:	785b      	ldrb	r3, [r3, #1]
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d001      	beq.n	800ffb6 <rfalISO14443ATransceiveAnticollisionFrame+0x22>
    {
        return ERR_WRONG_STATE;
 800ffb2:	2321      	movs	r3, #33	@ 0x21
 800ffb4:	e0dd      	b.n	8010172 <rfalISO14443ATransceiveAnticollisionFrame+0x1de>
    }
    
    /* Check for valid parameters */
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d008      	beq.n	800ffce <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d005      	beq.n	800ffce <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d002      	beq.n	800ffce <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d101      	bne.n	800ffd2 <rfalISO14443ATransceiveAnticollisionFrame+0x3e>
    {
        return ERR_PARAM;
 800ffce:	2307      	movs	r3, #7
 800ffd0:	e0cf      	b.n	8010172 <rfalISO14443ATransceiveAnticollisionFrame+0x1de>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800ffd2:	f240 1003 	movw	r0, #259	@ 0x103
 800ffd6:	f7f5 fcb5 	bl	8005944 <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 800ffda:	2101      	movs	r1, #1
 800ffdc:	2005      	movs	r0, #5
 800ffde:	f7f5 f8ec 	bl	80051ba <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800ffe2:	2180      	movs	r1, #128	@ 0x80
 800ffe4:	2009      	movs	r0, #9
 800ffe6:	f7f5 f8e8 	bl	80051ba <st25r3911SetRegisterBits>
    
    
    
    /*******************************************************************************/
    /* Prepare for Transceive                                                      */
    ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF );  /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800ffea:	230b      	movs	r3, #11
 800ffec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ctx.txBuf     = buf;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	61bb      	str	r3, [r7, #24]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	781b      	ldrb	r3, [r3, #0]
 800fff6:	00db      	lsls	r3, r3, #3
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	7812      	ldrb	r2, [r2, #0]
 800fffe:	4413      	add	r3, r2
 8010000:	b29b      	uxth	r3, r3
 8010002:	83bb      	strh	r3, [r7, #28]
    ctx.rxBuf     = &buf[*bytesToSend];
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	461a      	mov	r2, r3
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	4413      	add	r3, r2
 801000e:	623b      	str	r3, [r7, #32]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 8010010:	2328      	movs	r3, #40	@ 0x28
 8010012:	84bb      	strh	r3, [r7, #36]	@ 0x24
    ctx.rxRcvdLen = rxLength;
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	62bb      	str	r3, [r7, #40]	@ 0x28
    ctx.fwt       = fwt;
 8010018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801001a:	633b      	str	r3, [r7, #48]	@ 0x30
    
    rfalStartTransceive( &ctx );
 801001c:	f107 0318 	add.w	r3, r7, #24
 8010020:	4618      	mov	r0, r3
 8010022:	f7fe fd59 	bl	800ead8 <rfalStartTransceive>
    
    /* Additionally enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 8010026:	2004      	movs	r0, #4
 8010028:	f7f5 fbca 	bl	80057c0 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 801002c:	2004      	movs	r0, #4
 801002e:	f7f5 fc03 	bl	8005838 <st25r3911EnableInterrupts>
    
    /*******************************************************************************/
    collByte = 0;
 8010032:	2300      	movs	r3, #0
 8010034:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    
    /* save the collision byte */
    if ((*bitsToSend) > 0U)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d02d      	beq.n	801009c <rfalISO14443ATransceiveAnticollisionFrame+0x108>
    {
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	461a      	mov	r2, r3
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	4413      	add	r3, r2
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	461a      	mov	r2, r3
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	f1c3 0308 	rsb	r3, r3, #8
 8010056:	409a      	lsls	r2, r3
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	4619      	mov	r1, r3
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	440b      	add	r3, r1
 8010062:	b2d2      	uxtb	r2, r2
 8010064:	701a      	strb	r2, [r3, #0]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	461a      	mov	r2, r3
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	4413      	add	r3, r2
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	461a      	mov	r2, r3
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	f1c3 0308 	rsb	r3, r3, #8
 801007c:	411a      	asrs	r2, r3
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	4619      	mov	r1, r3
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	440b      	add	r3, r1
 8010088:	b2d2      	uxtb	r2, r2
 801008a:	701a      	strb	r2, [r3, #0]
        collByte = buf[(*bytesToSend)];
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	461a      	mov	r2, r3
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	4413      	add	r3, r2
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }
    
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 801009c:	f7fe fea3 	bl	800ede6 <rfalTransceiveRunBlockingTx>
 80100a0:	4603      	mov	r3, r0
 80100a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    if( ret == ERR_NONE)
 80100a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d14f      	bne.n	801014a <rfalISO14443ATransceiveAnticollisionFrame+0x1b6>
    {
       ret = rfalTransceiveBlockingRx();
 80100aa:	f7fe feb9 	bl	800ee20 <rfalTransceiveBlockingRx>
 80100ae:	4603      	mov	r3, r0
 80100b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    
       /*******************************************************************************/
       if ((*bitsToSend) > 0U)
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d031      	beq.n	801011e <rfalISO14443ATransceiveAnticollisionFrame+0x18a>
       {
           buf[(*bytesToSend)] >>= (*bitsToSend);
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	461a      	mov	r2, r3
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	4413      	add	r3, r2
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	461a      	mov	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	411a      	asrs	r2, r3
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	4619      	mov	r1, r3
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	440b      	add	r3, r1
 80100d8:	b2d2      	uxtb	r2, r2
 80100da:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] <<= (*bitsToSend);
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	461a      	mov	r2, r3
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	4413      	add	r3, r2
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	461a      	mov	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	409a      	lsls	r2, r3
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	4619      	mov	r1, r3
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	440b      	add	r3, r1
 80100fa:	b2d2      	uxtb	r2, r2
 80100fc:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] |= collByte;
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	461a      	mov	r2, r3
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	4413      	add	r3, r2
 8010108:	7819      	ldrb	r1, [r3, #0]
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	461a      	mov	r2, r3
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	4413      	add	r3, r2
 8010114:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8010118:	430a      	orrs	r2, r1
 801011a:	b2d2      	uxtb	r2, r2
 801011c:	701a      	strb	r2, [r3, #0]
       }
       
       if( (ERR_RF_COLLISION == ret) )
 801011e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010120:	2b1d      	cmp	r3, #29
 8010122:	d112      	bne.n	801014a <rfalISO14443ATransceiveAnticollisionFrame+0x1b6>
       {
           /* read out collision register */
           st25r3911ReadRegister( ST25R3911_REG_COLLISION_STATUS, &collData);
 8010124:	f107 0317 	add.w	r3, r7, #23
 8010128:	4619      	mov	r1, r3
 801012a:	201c      	movs	r0, #28
 801012c:	f7f4 fe96 	bl	8004e5c <st25r3911ReadRegister>

           (*bytesToSend) = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_byte) & 0x0FU); // 4-bits Byte information
 8010130:	7dfb      	ldrb	r3, [r7, #23]
 8010132:	091b      	lsrs	r3, r3, #4
 8010134:	b2da      	uxtb	r2, r3
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	701a      	strb	r2, [r3, #0]
           (*bitsToSend)  = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_bit)  & 0x07U); // 3-bits bit information
 801013a:	7dfb      	ldrb	r3, [r7, #23]
 801013c:	085b      	lsrs	r3, r3, #1
 801013e:	b2db      	uxtb	r3, r3
 8010140:	f003 0307 	and.w	r3, r3, #7
 8010144:	b2da      	uxtb	r2, r3
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	701a      	strb	r2, [r3, #0]
    }
    
   
    /*******************************************************************************/
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 801014a:	2004      	movs	r0, #4
 801014c:	f7f5 fb80 	bl	8005850 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 8010150:	2101      	movs	r1, #1
 8010152:	2005      	movs	r0, #5
 8010154:	f7f5 f80e 	bl	8005174 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 8010158:	2180      	movs	r1, #128	@ 0x80
 801015a:	2009      	movs	r0, #9
 801015c:	f7f5 f80a 	bl	8005174 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8010160:	f240 1001 	movw	r0, #257	@ 0x101
 8010164:	f7f5 fbee 	bl	8005944 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8010168:	f44f 7081 	mov.w	r0, #258	@ 0x102
 801016c:	f7f5 fbea 	bl	8005944 <rfalSetAnalogConfig>
    
    return ret;
 8010170:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8010172:	4618      	mov	r0, r3
 8010174:	3738      	adds	r7, #56	@ 0x38
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	20000d80 	.word	0x20000d80

08010180 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b08c      	sub	sp, #48	@ 0x30
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	607a      	str	r2, [r7, #4]
 801018a:	461a      	mov	r2, r3
 801018c:	460b      	mov	r3, r1
 801018e:	72fb      	strb	r3, [r7, #11]
 8010190:	4613      	mov	r3, r2
 8010192:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8010194:	4b29      	ldr	r3, [pc, #164]	@ (801023c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	2b01      	cmp	r3, #1
 801019a:	d903      	bls.n	80101a4 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 801019c:	4b27      	ldr	r3, [pc, #156]	@ (801023c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801019e:	785b      	ldrb	r3, [r3, #1]
 80101a0:	2b07      	cmp	r3, #7
 80101a2:	d001      	beq.n	80101a8 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 80101a4:	2321      	movs	r3, #33	@ 0x21
 80101a6:	e045      	b.n	8010234 <rfalISO15693TransceiveAnticollisionFrame+0xb4>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 80101a8:	f241 0003 	movw	r0, #4099	@ 0x1003
 80101ac:	f7f5 fbca 	bl	8005944 <rfalSetAnalogConfig>

    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 80101b0:	4b22      	ldr	r3, [pc, #136]	@ (801023c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 80101b2:	2210      	movs	r2, #16
 80101b4:	f8a3 23e8 	strh.w	r2, [r3, #1000]	@ 0x3e8
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 80101b8:	7afb      	ldrb	r3, [r7, #11]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d101      	bne.n	80101c2 <rfalISO15693TransceiveAnticollisionFrame+0x42>
 80101be:	220b      	movs	r2, #11
 80101c0:	e000      	b.n	80101c4 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 80101c2:	220a      	movs	r2, #10
 80101c4:	7afb      	ldrb	r3, [r7, #11]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d101      	bne.n	80101ce <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 80101ca:	2340      	movs	r3, #64	@ 0x40
 80101cc:	e000      	b.n	80101d0 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 80101ce:	2300      	movs	r3, #0
 80101d0:	4313      	orrs	r3, r2
 80101d2:	627b      	str	r3, [r7, #36]	@ 0x24
    ctx.txBuf     = txBuf;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 80101d8:	7afb      	ldrb	r3, [r7, #11]
 80101da:	b29b      	uxth	r3, r3
 80101dc:	00db      	lsls	r3, r3, #3
 80101de:	b29b      	uxth	r3, r3
 80101e0:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 80101e6:	7abb      	ldrb	r3, [r7, #10]
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	00db      	lsls	r3, r3, #3
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 80101f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101f2:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 80101f4:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 80101f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    rfalStartTransceive( &ctx );
 80101fa:	f107 0310 	add.w	r3, r7, #16
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fe fc6a 	bl	800ead8 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 8010204:	f7fe fdef 	bl	800ede6 <rfalTransceiveRunBlockingTx>
 8010208:	4603      	mov	r3, r0
 801020a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if( ret == ERR_NONE)
 801020c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801020e:	2b00      	cmp	r3, #0
 8010210:	d103      	bne.n	801021a <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 8010212:	f7fe fe05 	bl	800ee20 <rfalTransceiveBlockingRx>
 8010216:	4603      	mov	r3, r0
 8010218:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801021a:	f241 0001 	movw	r0, #4097	@ 0x1001
 801021e:	f7f5 fb91 	bl	8005944 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8010222:	f241 0002 	movw	r0, #4098	@ 0x1002
 8010226:	f7f5 fb8d 	bl	8005944 <rfalSetAnalogConfig>
        
    gRFAL.nfcvData.ignoreBits = 0;
 801022a:	4b04      	ldr	r3, [pc, #16]	@ (801023c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801022c:	2200      	movs	r2, #0
 801022e:	f8a3 23e8 	strh.w	r2, [r3, #1000]	@ 0x3e8
    return ret;
 8010232:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 8010234:	4618      	mov	r0, r3
 8010236:	3730      	adds	r7, #48	@ 0x30
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	20000d80 	.word	0x20000d80

08010240 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b088      	sub	sp, #32
 8010244:	af02      	add	r7, sp, #8
 8010246:	60f8      	str	r0, [r7, #12]
 8010248:	460b      	mov	r3, r1
 801024a:	607a      	str	r2, [r7, #4]
 801024c:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 801024e:	7afa      	ldrb	r2, [r7, #11]
 8010250:	f107 0017 	add.w	r0, r7, #23
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	4613      	mov	r3, r2
 801025a:	68fa      	ldr	r2, [r7, #12]
 801025c:	2100      	movs	r1, #0
 801025e:	f7ff ff8f 	bl	8010180 <rfalISO15693TransceiveAnticollisionFrame>
 8010262:	4603      	mov	r3, r0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3718      	adds	r7, #24
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <rfalISO15693TransceiveEOF>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOF( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b08a      	sub	sp, #40	@ 0x28
 8010270:	af04      	add	r7, sp, #16
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	460b      	mov	r3, r1
 8010276:	607a      	str	r2, [r7, #4]
 8010278:	72fb      	strb	r3, [r7, #11]
    ReturnCode ret;
    uint8_t    dummy;
    
    /* Check if RFAL is properly initialized */
    if( ( gRFAL.state < RFAL_STATE_MODE_SET ) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 801027a:	4b10      	ldr	r3, [pc, #64]	@ (80102bc <rfalISO15693TransceiveEOF+0x50>)
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	2b01      	cmp	r3, #1
 8010280:	d903      	bls.n	801028a <rfalISO15693TransceiveEOF+0x1e>
 8010282:	4b0e      	ldr	r3, [pc, #56]	@ (80102bc <rfalISO15693TransceiveEOF+0x50>)
 8010284:	785b      	ldrb	r3, [r3, #1]
 8010286:	2b07      	cmp	r3, #7
 8010288:	d001      	beq.n	801028e <rfalISO15693TransceiveEOF+0x22>
    {
        return ERR_WRONG_STATE;
 801028a:	2321      	movs	r3, #33	@ 0x21
 801028c:	e012      	b.n	80102b4 <rfalISO15693TransceiveEOF+0x48>
    }
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveBlockingTxRx( &dummy,
 801028e:	7afb      	ldrb	r3, [r7, #11]
 8010290:	b29a      	uxth	r2, r3
 8010292:	f107 0015 	add.w	r0, r7, #21
 8010296:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 801029a:	9302      	str	r3, [sp, #8]
 801029c:	2303      	movs	r3, #3
 801029e:	9301      	str	r3, [sp, #4]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	9300      	str	r3, [sp, #0]
 80102a4:	4613      	mov	r3, r2
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	2100      	movs	r1, #0
 80102aa:	f7fe fdcf 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 80102ae:	4603      	mov	r3, r0
 80102b0:	82fb      	strh	r3, [r7, #22]
                                      rxBuf,
                                      rxBufLen,
                                      actLen,
                                      ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP |(uint32_t)RFAL_TXRX_FLAGS_AGC_ON ),
                                      rfalConv64fcTo1fc(ISO15693_FWT) );
    return ret;
 80102b2:	8afb      	ldrh	r3, [r7, #22]
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3718      	adds	r7, #24
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	20000d80 	.word	0x20000d80

080102c0 <rfalFeliCaPoll>:

#if RFAL_FEATURE_NFCF

/*******************************************************************************/
ReturnCode rfalFeliCaPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes* pollResList, uint8_t pollResListSize, uint8_t *devicesDetected, uint8_t *collisionsDetected )
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b08c      	sub	sp, #48	@ 0x30
 80102c4:	af04      	add	r7, sp, #16
 80102c6:	603b      	str	r3, [r7, #0]
 80102c8:	4603      	mov	r3, r0
 80102ca:	71fb      	strb	r3, [r7, #7]
 80102cc:	460b      	mov	r3, r1
 80102ce:	80bb      	strh	r3, [r7, #4]
 80102d0:	4613      	mov	r3, r2
 80102d2:	71bb      	strb	r3, [r7, #6]
    uint8_t           colDetected;
    rfalEHandling     curHandling;
    uint8_t           nbSlots;
        
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 80102d4:	4b6b      	ldr	r3, [pc, #428]	@ (8010484 <rfalFeliCaPoll+0x1c4>)
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d903      	bls.n	80102e4 <rfalFeliCaPoll+0x24>
 80102dc:	4b69      	ldr	r3, [pc, #420]	@ (8010484 <rfalFeliCaPoll+0x1c4>)
 80102de:	785b      	ldrb	r3, [r3, #1]
 80102e0:	2b06      	cmp	r3, #6
 80102e2:	d001      	beq.n	80102e8 <rfalFeliCaPoll+0x28>
    {
        return ERR_WRONG_STATE;
 80102e4:	2321      	movs	r3, #33	@ 0x21
 80102e6:	e0c9      	b.n	801047c <rfalFeliCaPoll+0x1bc>
    }
    
    frameIdx    = 0;
 80102e8:	2300      	movs	r3, #0
 80102ea:	767b      	strb	r3, [r7, #25]
    colDetected = 0;
 80102ec:	2300      	movs	r3, #0
 80102ee:	773b      	strb	r3, [r7, #28]
    devDetected = 0;
 80102f0:	2300      	movs	r3, #0
 80102f2:	777b      	strb	r3, [r7, #29]
    nbSlots     = (uint8_t)slots;
 80102f4:	79fb      	ldrb	r3, [r7, #7]
 80102f6:	76fb      	strb	r3, [r7, #27]
    
    /*******************************************************************************/
    /* Compute SENSF_REQ frame */
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */
 80102f8:	7e7b      	ldrb	r3, [r7, #25]
 80102fa:	1c5a      	adds	r2, r3, #1
 80102fc:	767a      	strb	r2, [r7, #25]
 80102fe:	3320      	adds	r3, #32
 8010300:	443b      	add	r3, r7
 8010302:	2200      	movs	r2, #0
 8010304:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 8010308:	88bb      	ldrh	r3, [r7, #4]
 801030a:	0a1b      	lsrs	r3, r3, #8
 801030c:	b29a      	uxth	r2, r3
 801030e:	7e7b      	ldrb	r3, [r7, #25]
 8010310:	1c59      	adds	r1, r3, #1
 8010312:	7679      	strb	r1, [r7, #25]
 8010314:	b2d2      	uxtb	r2, r2
 8010316:	3320      	adds	r3, #32
 8010318:	443b      	add	r3, r7
 801031a:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 801031e:	7e7b      	ldrb	r3, [r7, #25]
 8010320:	1c5a      	adds	r2, r3, #1
 8010322:	767a      	strb	r2, [r7, #25]
 8010324:	88ba      	ldrh	r2, [r7, #4]
 8010326:	b2d2      	uxtb	r2, r2
 8010328:	3320      	adds	r3, #32
 801032a:	443b      	add	r3, r7
 801032c:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 8010330:	7e7b      	ldrb	r3, [r7, #25]
 8010332:	1c5a      	adds	r2, r3, #1
 8010334:	767a      	strb	r2, [r7, #25]
 8010336:	3320      	adds	r3, #32
 8010338:	443b      	add	r3, r7
 801033a:	79ba      	ldrb	r2, [r7, #6]
 801033c:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = nbSlots;                     /* TimeSlot (TSN)                      */
 8010340:	7e7b      	ldrb	r3, [r7, #25]
 8010342:	1c5a      	adds	r2, r3, #1
 8010344:	767a      	strb	r2, [r7, #25]
 8010346:	3320      	adds	r3, #32
 8010348:	443b      	add	r3, r7
 801034a:	7efa      	ldrb	r2, [r7, #27]
 801034c:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    
    /*******************************************************************************/
    /* NRT should not stop on reception - Use EMVCo mode to run NRT in nrt_emv     *
     * ERRORHANDLING_EMVCO has no special handling for NFC-F mode                  */
    curHandling = gRFAL.conf.eHandling;
 8010350:	4b4c      	ldr	r3, [pc, #304]	@ (8010484 <rfalFeliCaPoll+0x1c4>)
 8010352:	79db      	ldrb	r3, [r3, #7]
 8010354:	763b      	strb	r3, [r7, #24]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8010356:	2002      	movs	r0, #2
 8010358:	f7fe fade 	bl	800e918 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Run transceive blocking, 
     * Calculate Total Response Time in(64/fc): 
     *                       512 PICC process time + (n * 256 Time Slot duration)  */
    ret = rfalTransceiveBlockingTx( frame, 
 801035c:	7e7b      	ldrb	r3, [r7, #25]
 801035e:	b299      	uxth	r1, r3
                                    (uint16_t)frameIdx, 
                                    (uint8_t*)gRFAL.nfcfData.pollResponses, 
                                    RFAL_FELICA_POLL_RES_LEN, 
                                    &actLen,
                                    (RFAL_TXRX_FLAGS_DEFAULT),
                                    rfalConv64fcTo1fc( RFAL_FELICA_POLL_DELAY_TIME + (RFAL_FELICA_POLL_SLOT_TIME * ((uint32_t)nbSlots + 1U)) ) );
 8010360:	7efb      	ldrb	r3, [r7, #27]
 8010362:	3303      	adds	r3, #3
    ret = rfalTransceiveBlockingTx( frame, 
 8010364:	039b      	lsls	r3, r3, #14
 8010366:	f107 0010 	add.w	r0, r7, #16
 801036a:	9302      	str	r3, [sp, #8]
 801036c:	2300      	movs	r3, #0
 801036e:	9301      	str	r3, [sp, #4]
 8010370:	f107 030e 	add.w	r3, r7, #14
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	2314      	movs	r3, #20
 8010378:	4a43      	ldr	r2, [pc, #268]	@ (8010488 <rfalFeliCaPoll+0x1c8>)
 801037a:	f7fe fd05 	bl	800ed88 <rfalTransceiveBlockingTx>
 801037e:	4603      	mov	r3, r0
 8010380:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* If Tx OK, Wait for all responses, store them as soon as they appear         */
    if( ret == ERR_NONE )
 8010382:	8bfb      	ldrh	r3, [r7, #30]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d145      	bne.n	8010414 <rfalFeliCaPoll+0x154>
    {
        bool timeout;

        do 
        {
            ret = rfalTransceiveBlockingRx();
 8010388:	f7fe fd4a 	bl	800ee20 <rfalTransceiveBlockingRx>
 801038c:	4603      	mov	r3, r0
 801038e:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 8010390:	8bfb      	ldrh	r3, [r7, #30]
 8010392:	2b04      	cmp	r3, #4
 8010394:	d102      	bne.n	801039c <rfalFeliCaPoll+0xdc>
            {
                /* Upon timeout the full Poll Delay + (Slot time)*(nbSlots) has expired */
                timeout = true;
 8010396:	2301      	movs	r3, #1
 8010398:	76bb      	strb	r3, [r7, #26]
 801039a:	e030      	b.n	80103fe <rfalFeliCaPoll+0x13e>
            }
            else
            {
                /* Reception done, reEnabled Rx for following Slot */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 801039c:	20d1      	movs	r0, #209	@ 0xd1
 801039e:	f7f5 f82f 	bl	8005400 <st25r3911ExecuteCommand>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 80103a2:	20d5      	movs	r0, #213	@ 0xd5
 80103a4:	f7f5 f82c 	bl	8005400 <st25r3911ExecuteCommand>
                
                /* If the reception was OK, new device found */
                if( ret == ERR_NONE )
 80103a8:	8bfb      	ldrh	r3, [r7, #30]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d10e      	bne.n	80103cc <rfalFeliCaPoll+0x10c>
                {
                   devDetected++;
 80103ae:	7f7b      	ldrb	r3, [r7, #29]
 80103b0:	3301      	adds	r3, #1
 80103b2:	777b      	strb	r3, [r7, #29]
                   
                   /* Overwrite the Transceive context for the next reception */
                   gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[devDetected];
 80103b4:	7f7a      	ldrb	r2, [r7, #29]
 80103b6:	4613      	mov	r3, r2
 80103b8:	009b      	lsls	r3, r3, #2
 80103ba:	4413      	add	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	3378      	adds	r3, #120	@ 0x78
 80103c0:	4a30      	ldr	r2, [pc, #192]	@ (8010484 <rfalFeliCaPoll+0x1c4>)
 80103c2:	4413      	add	r3, r2
 80103c4:	3306      	adds	r3, #6
 80103c6:	4a2f      	ldr	r2, [pc, #188]	@ (8010484 <rfalFeliCaPoll+0x1c4>)
 80103c8:	6253      	str	r3, [r2, #36]	@ 0x24
 80103ca:	e002      	b.n	80103d2 <rfalFeliCaPoll+0x112>
                }
                /* If the reception was not OK, mark as collision */
                else
                {
                    colDetected++;
 80103cc:	7f3b      	ldrb	r3, [r7, #28]
 80103ce:	3301      	adds	r3, #1
 80103d0:	773b      	strb	r3, [r7, #28]
                }
                
                /* Check whether NRT has expired meanwhile  */
                timeout = st25r3911CheckReg( ST25R3911_REG_REGULATOR_RESULT, ST25R3911_REG_REGULATOR_RESULT_nrt_on, 0x00 );
 80103d2:	2200      	movs	r2, #0
 80103d4:	2102      	movs	r1, #2
 80103d6:	202b      	movs	r0, #43	@ 0x2b
 80103d8:	f7f4 fb4c 	bl	8004a74 <st25r3911CheckReg>
 80103dc:	4603      	mov	r3, r0
 80103de:	76bb      	strb	r3, [r7, #26]
                if( !timeout )
 80103e0:	7ebb      	ldrb	r3, [r7, #26]
 80103e2:	f083 0301 	eor.w	r3, r3, #1
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d008      	beq.n	80103fe <rfalFeliCaPoll+0x13e>
                {
                    /* Jump again into transceive Rx state for the following reception */
                    gRFAL.TxRx.status = ERR_BUSY;
 80103ec:	4b25      	ldr	r3, [pc, #148]	@ (8010484 <rfalFeliCaPoll+0x1c4>)
 80103ee:	2202      	movs	r2, #2
 80103f0:	82da      	strh	r2, [r3, #22]
                    gRFAL.state       = RFAL_STATE_TXRX;
 80103f2:	4b24      	ldr	r3, [pc, #144]	@ (8010484 <rfalFeliCaPoll+0x1c4>)
 80103f4:	2203      	movs	r2, #3
 80103f6:	701a      	strb	r2, [r3, #0]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 80103f8:	4b22      	ldr	r3, [pc, #136]	@ (8010484 <rfalFeliCaPoll+0x1c4>)
 80103fa:	2251      	movs	r2, #81	@ 0x51
 80103fc:	751a      	strb	r2, [r3, #20]
                }
            }
        }while( ((nbSlots--) != 0U) && !timeout );
 80103fe:	7efb      	ldrb	r3, [r7, #27]
 8010400:	1e5a      	subs	r2, r3, #1
 8010402:	76fa      	strb	r2, [r7, #27]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d005      	beq.n	8010414 <rfalFeliCaPoll+0x154>
 8010408:	7ebb      	ldrb	r3, [r7, #26]
 801040a:	f083 0301 	eor.w	r3, r3, #1
 801040e:	b2db      	uxtb	r3, r3
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1b9      	bne.n	8010388 <rfalFeliCaPoll+0xc8>
    }
    
    /*******************************************************************************/
    /* Restore NRT to normal mode - back to previous error handling */
    rfalSetErrorHandling( curHandling );
 8010414:	7e3b      	ldrb	r3, [r7, #24]
 8010416:	4618      	mov	r0, r3
 8010418:	f7fe fa7e 	bl	800e918 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Assign output parameters if requested                                       */
    
    if( (pollResList != NULL) && (pollResListSize > 0U) && (devDetected > 0U) )
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d017      	beq.n	8010452 <rfalFeliCaPoll+0x192>
 8010422:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010426:	2b00      	cmp	r3, #0
 8010428:	d013      	beq.n	8010452 <rfalFeliCaPoll+0x192>
 801042a:	7f7b      	ldrb	r3, [r7, #29]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d010      	beq.n	8010452 <rfalFeliCaPoll+0x192>
    {
        ST_MEMCPY( pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)MIN(pollResListSize, devDetected) ) );
 8010430:	7f7a      	ldrb	r2, [r7, #29]
 8010432:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010436:	4293      	cmp	r3, r2
 8010438:	bf28      	it	cs
 801043a:	4613      	movcs	r3, r2
 801043c:	b2db      	uxtb	r3, r3
 801043e:	461a      	mov	r2, r3
 8010440:	4613      	mov	r3, r2
 8010442:	009b      	lsls	r3, r3, #2
 8010444:	4413      	add	r3, r2
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	461a      	mov	r2, r3
 801044a:	490f      	ldr	r1, [pc, #60]	@ (8010488 <rfalFeliCaPoll+0x1c8>)
 801044c:	6838      	ldr	r0, [r7, #0]
 801044e:	f001 f8d3 	bl	80115f8 <memcpy>
    }
    
    if( devicesDetected != NULL )
 8010452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010454:	2b00      	cmp	r3, #0
 8010456:	d002      	beq.n	801045e <rfalFeliCaPoll+0x19e>
    {
        *devicesDetected = devDetected;
 8010458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801045a:	7f7a      	ldrb	r2, [r7, #29]
 801045c:	701a      	strb	r2, [r3, #0]
    }
    
    if( collisionsDetected != NULL )
 801045e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010460:	2b00      	cmp	r3, #0
 8010462:	d002      	beq.n	801046a <rfalFeliCaPoll+0x1aa>
    {
        *collisionsDetected = colDetected;
 8010464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010466:	7f3a      	ldrb	r2, [r7, #28]
 8010468:	701a      	strb	r2, [r3, #0]
    }
    
    return (( (colDetected != 0U) || (devDetected != 0U)) ? ERR_NONE : ret);
 801046a:	7f3b      	ldrb	r3, [r7, #28]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d104      	bne.n	801047a <rfalFeliCaPoll+0x1ba>
 8010470:	7f7b      	ldrb	r3, [r7, #29]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d101      	bne.n	801047a <rfalFeliCaPoll+0x1ba>
 8010476:	8bfb      	ldrh	r3, [r7, #30]
 8010478:	e000      	b.n	801047c <rfalFeliCaPoll+0x1bc>
 801047a:	2300      	movs	r3, #0
}
 801047c:	4618      	mov	r0, r3
 801047e:	3720      	adds	r7, #32
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}
 8010484:	20000d80 	.word	0x20000d80
 8010488:	20000dfe 	.word	0x20000dfe

0801048c <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 801048c:	b580      	push	{r7, lr}
 801048e:	af00      	add	r7, sp, #0
    return st25r3911IsExtFieldOn();
 8010490:	2240      	movs	r2, #64	@ 0x40
 8010492:	2140      	movs	r1, #64	@ 0x40
 8010494:	2030      	movs	r0, #48	@ 0x30
 8010496:	f7f4 faed 	bl	8004a74 <st25r3911CheckReg>
 801049a:	4603      	mov	r3, r0
}
 801049c:	4618      	mov	r0, r3
 801049e:	bd80      	pop	{r7, pc}

080104a0 <rfalListenStart>:

#if RFAL_FEATURE_LISTEN_MODE

/*******************************************************************************/
ReturnCode rfalListenStart( uint32_t lmMask, const rfalLmConfPA *confA, const rfalLmConfPB *confB, const rfalLmConfPF *confF, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	607a      	str	r2, [r7, #4]
 80104ac:	603b      	str	r3, [r7, #0]
    NO_WARNING(confA);
    NO_WARNING(confB);
    NO_WARNING(confF);
    
    
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 80104ae:	4b29      	ldr	r3, [pc, #164]	@ (8010554 <rfalListenStart+0xb4>)
 80104b0:	2200      	movs	r2, #0
 80104b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    
    
    /*******************************************************************************/
    if( ((lmMask & RFAL_LM_MASK_NFCA) != 0U) || ((lmMask & RFAL_LM_MASK_NFCB) != 0U) || ((lmMask & RFAL_LM_MASK_NFCF) != 0U) )
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d109      	bne.n	80104d4 <rfalListenStart+0x34>
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d104      	bne.n	80104d4 <rfalListenStart+0x34>
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d001      	beq.n	80104d8 <rfalListenStart+0x38>
    {
        return ERR_NOTSUPP;
 80104d4:	2318      	movs	r3, #24
 80104d6:	e038      	b.n	801054a <rfalListenStart+0xaa>
    }
    
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d032      	beq.n	8010548 <rfalListenStart+0xa8>
    {
        gRFAL.state       = RFAL_STATE_LM;
 80104e2:	4b1c      	ldr	r3, [pc, #112]	@ (8010554 <rfalListenStart+0xb4>)
 80104e4:	2204      	movs	r2, #4
 80104e6:	701a      	strb	r2, [r3, #0]
       
        gRFAL.Lm.rxBuf    = rxBuf;
 80104e8:	4a1a      	ldr	r2, [pc, #104]	@ (8010554 <rfalListenStart+0xb4>)
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	6593      	str	r3, [r2, #88]	@ 0x58
        gRFAL.Lm.rxBufLen = rxBufLen;
 80104ee:	4a19      	ldr	r2, [pc, #100]	@ (8010554 <rfalListenStart+0xb4>)
 80104f0:	8bbb      	ldrh	r3, [r7, #28]
 80104f2:	f8a2 305c 	strh.w	r3, [r2, #92]	@ 0x5c
        gRFAL.Lm.rxLen    = rxLen;
 80104f6:	4a17      	ldr	r2, [pc, #92]	@ (8010554 <rfalListenStart+0xb4>)
 80104f8:	6a3b      	ldr	r3, [r7, #32]
 80104fa:	6613      	str	r3, [r2, #96]	@ 0x60
        *gRFAL.Lm.rxLen   = 0;
 80104fc:	4b15      	ldr	r3, [pc, #84]	@ (8010554 <rfalListenStart+0xb4>)
 80104fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010500:	2200      	movs	r2, #0
 8010502:	801a      	strh	r2, [r3, #0]
        gRFAL.Lm.dataFlag = false;
 8010504:	4b13      	ldr	r3, [pc, #76]	@ (8010554 <rfalListenStart+0xb4>)
 8010506:	2200      	movs	r2, #0
 8010508:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        
        /* Disable GPT trigger source */
        st25r3911ChangeRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_gptc_mask, ST25R3911_REG_GPT_CONTROL_gptc_no_trigger );
 801050c:	2200      	movs	r2, #0
 801050e:	21e0      	movs	r1, #224	@ 0xe0
 8010510:	2011      	movs	r0, #17
 8010512:	f7f4 fe70 	bl	80051f6 <st25r3911ChangeRegisterBits>
      
        /* On Bit Rate Detection Mode ST25R391x will filter incoming frames during MRT time starting on External Field On event, use 512/fc steps */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo512fc( RFAL_LM_GT ) );
 8010516:	2102      	movs	r1, #2
 8010518:	200e      	movs	r0, #14
 801051a:	f7f4 fddd 	bl	80050d8 <st25r3911WriteRegister>
        
        /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
        st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 801051e:	21e0      	movs	r1, #224	@ 0xe0
 8010520:	2005      	movs	r0, #5
 8010522:	f7f4 fe27 	bl	8005174 <st25r3911ClrRegisterBits>
        
        /* Enable External Field Detector */
        st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8010526:	2110      	movs	r1, #16
 8010528:	2009      	movs	r0, #9
 801052a:	f7f4 fe46 	bl	80051ba <st25r3911SetRegisterBits>
      
        /* Enable Receiver */
        st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_rx_en, ST25R3911_REG_OP_CONTROL_rx_en );
 801052e:	2240      	movs	r2, #64	@ 0x40
 8010530:	2140      	movs	r1, #64	@ 0x40
 8010532:	2002      	movs	r0, #2
 8010534:	f7f4 fe5f 	bl	80051f6 <st25r3911ChangeRegisterBits>
        
        /* Set Analog configurations for generic Listen mode */
        /* Not on SetState(POWER OFF) as otherwise would be applied on every Field Event */
        rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_ON) );
 8010538:	2006      	movs	r0, #6
 801053a:	f7f5 fa03 	bl	8005944 <rfalSetAnalogConfig>
        
        /* Initialize as POWER_OFF and set proper mode in RF Chip */
        rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 801053e:	2001      	movs	r0, #1
 8010540:	f000 f960 	bl	8010804 <rfalListenSetState>
    else
    {
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
    }
    
    return ERR_NONE;
 8010544:	2300      	movs	r3, #0
 8010546:	e000      	b.n	801054a <rfalListenStart+0xaa>
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
 8010548:	2305      	movs	r3, #5
}
 801054a:	4618      	mov	r0, r3
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	20000d80 	.word	0x20000d80

08010558 <rfalRunListenModeWorker>:



/*******************************************************************************/
static ReturnCode rfalRunListenModeWorker( void )
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
    volatile uint32_t irqs;
    uint8_t           tmp;
    
    if( gRFAL.state != RFAL_STATE_LM )
 801055e:	4b81      	ldr	r3, [pc, #516]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	2b04      	cmp	r3, #4
 8010564:	d001      	beq.n	801056a <rfalRunListenModeWorker+0x12>
    {
        return ERR_WRONG_STATE;
 8010566:	2321      	movs	r3, #33	@ 0x21
 8010568:	e0f7      	b.n	801075a <rfalRunListenModeWorker+0x202>
    }
    
    switch( gRFAL.Lm.state )
 801056a:	4b7e      	ldr	r3, [pc, #504]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 801056c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8010570:	3b01      	subs	r3, #1
 8010572:	2b0f      	cmp	r3, #15
 8010574:	f200 80e5 	bhi.w	8010742 <rfalRunListenModeWorker+0x1ea>
 8010578:	a201      	add	r2, pc, #4	@ (adr r2, 8010580 <rfalRunListenModeWorker+0x28>)
 801057a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801057e:	bf00      	nop
 8010580:	080105c1 	.word	0x080105c1
 8010584:	080105e7 	.word	0x080105e7
 8010588:	0801073f 	.word	0x0801073f
 801058c:	08010743 	.word	0x08010743
 8010590:	0801073f 	.word	0x0801073f
 8010594:	0801073f 	.word	0x0801073f
 8010598:	0801073f 	.word	0x0801073f
 801059c:	0801073f 	.word	0x0801073f
 80105a0:	0801073f 	.word	0x0801073f
 80105a4:	08010747 	.word	0x08010747
 80105a8:	08010747 	.word	0x08010747
 80105ac:	0801073f 	.word	0x0801073f
 80105b0:	0801073f 	.word	0x0801073f
 80105b4:	0801073f 	.word	0x0801073f
 80105b8:	0801073f 	.word	0x0801073f
 80105bc:	0801073f 	.word	0x0801073f
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            
            irqs = st25r3911GetInterrupt( (  ST25R3911_IRQ_MASK_EON ) );
 80105c0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80105c4:	f7f5 f8fc 	bl	80057c0 <st25r3911GetInterrupt>
 80105c8:	4603      	mov	r3, r0
 80105ca:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f000 80bb 	beq.w	801074a <rfalRunListenModeWorker+0x1f2>
            {
              break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f000 80b7 	beq.w	801074e <rfalRunListenModeWorker+0x1f6>
            {
                rfalListenSetState( RFAL_LM_STATE_IDLE );
 80105e0:	2002      	movs	r0, #2
 80105e2:	f000 f90f 	bl	8010804 <rfalListenSetState>
            
              
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF ) );
 80105e6:	f44f 6011 	mov.w	r0, #2320	@ 0x910
 80105ea:	f7f5 f8e9 	bl	80057c0 <st25r3911GetInterrupt>
 80105ee:	4603      	mov	r3, r0
 80105f0:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	f000 80ac 	beq.w	8010752 <rfalRunListenModeWorker+0x1fa>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NFCT) != 0U )
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010600:	2b00      	cmp	r3, #0
 8010602:	d011      	beq.n	8010628 <rfalRunListenModeWorker+0xd0>
            {
                /* Retrieve detected bitrate */
                uint8_t    newBr;
                st25r3911ReadRegister( ST25R3911_REG_NFCIP1_BIT_RATE, &newBr );
 8010604:	1cbb      	adds	r3, r7, #2
 8010606:	4619      	mov	r1, r3
 8010608:	201f      	movs	r0, #31
 801060a:	f7f4 fc27 	bl	8004e5c <st25r3911ReadRegister>
                newBr >>= ST25R3911_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 801060e:	78bb      	ldrb	r3, [r7, #2]
 8010610:	091b      	lsrs	r3, r3, #4
 8010612:	b2db      	uxtb	r3, r3
 8010614:	70bb      	strb	r3, [r7, #2]

                if (newBr > ST25R3911_REG_BIT_RATE_rxrate_424)
 8010616:	78bb      	ldrb	r3, [r7, #2]
 8010618:	2b02      	cmp	r3, #2
 801061a:	d901      	bls.n	8010620 <rfalRunListenModeWorker+0xc8>
                {
                    newBr = ST25R3911_REG_BIT_RATE_rxrate_424;
 801061c:	2302      	movs	r3, #2
 801061e:	70bb      	strb	r3, [r7, #2]
                }

                gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 8010620:	78ba      	ldrb	r2, [r7, #2]
 8010622:	4b50      	ldr	r3, [pc, #320]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 8010624:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f003 0310 	and.w	r3, r3, #16
 801062e:	2b00      	cmp	r3, #0
 8010630:	d073      	beq.n	801071a <rfalRunListenModeWorker+0x1c2>
 8010632:	4b4c      	ldr	r3, [pc, #304]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 8010634:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8010638:	2bff      	cmp	r3, #255	@ 0xff
 801063a:	d06e      	beq.n	801071a <rfalRunListenModeWorker+0x1c2>
            {
                irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_ERR1 ) );
 801063c:	484a      	ldr	r0, [pc, #296]	@ (8010768 <rfalRunListenModeWorker+0x210>)
 801063e:	f7f5 f8bf 	bl	80057c0 <st25r3911GetInterrupt>
 8010642:	4603      	mov	r3, r0
 8010644:	607b      	str	r3, [r7, #4]
                
                if( ((irqs & ST25R3911_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3911_IRQ_MASK_PAR) != 0U) || ((irqs & ST25R3911_IRQ_MASK_ERR1) != 0U) )
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801064c:	2b00      	cmp	r3, #0
 801064e:	d109      	bne.n	8010664 <rfalRunListenModeWorker+0x10c>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010656:	2b00      	cmp	r3, #0
 8010658:	d104      	bne.n	8010664 <rfalRunListenModeWorker+0x10c>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010660:	2b00      	cmp	r3, #0
 8010662:	d012      	beq.n	801068a <rfalRunListenModeWorker+0x132>
                {
                    /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                    st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8010664:	2101      	movs	r1, #1
 8010666:	2003      	movs	r0, #3
 8010668:	f7f4 fd84 	bl	8005174 <st25r3911ClrRegisterBits>
                    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801066c:	20c2      	movs	r0, #194	@ 0xc2
 801066e:	f7f4 fec7 	bl	8005400 <st25r3911ExecuteCommand>
                    st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8010672:	20d1      	movs	r0, #209	@ 0xd1
 8010674:	f7f4 fec4 	bl	8005400 <st25r3911ExecuteCommand>
                    st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8010678:	2101      	movs	r1, #1
 801067a:	2003      	movs	r0, #3
 801067c:	f7f4 fd9d 	bl	80051ba <st25r3911SetRegisterBits>
                    st25r3911TxOff();
 8010680:	2108      	movs	r1, #8
 8010682:	2002      	movs	r0, #2
 8010684:	f7f4 fd76 	bl	8005174 <st25r3911ClrRegisterBits>
                    break; /* A bad reception occurred, remain in same state */
 8010688:	e066      	b.n	8010758 <rfalRunListenModeWorker+0x200>
                }
                
                /* Retrieve received data */
                st25r3911ReadRegister(ST25R3911_REG_FIFO_RX_STATUS1, &tmp);
 801068a:	1cfb      	adds	r3, r7, #3
 801068c:	4619      	mov	r1, r3
 801068e:	201a      	movs	r0, #26
 8010690:	f7f4 fbe4 	bl	8004e5c <st25r3911ReadRegister>
                *gRFAL.Lm.rxLen = tmp;
 8010694:	78fa      	ldrb	r2, [r7, #3]
 8010696:	4b33      	ldr	r3, [pc, #204]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 8010698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801069a:	801a      	strh	r2, [r3, #0]
                
                st25r3911ReadFifo( gRFAL.Lm.rxBuf, (uint8_t)MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 801069c:	4b31      	ldr	r3, [pc, #196]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 801069e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80106a0:	4b30      	ldr	r3, [pc, #192]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 80106a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106a4:	881a      	ldrh	r2, [r3, #0]
 80106a6:	4b2f      	ldr	r3, [pc, #188]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 80106a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80106ac:	3307      	adds	r3, #7
 80106ae:	08db      	lsrs	r3, r3, #3
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d204      	bcs.n	80106c0 <rfalRunListenModeWorker+0x168>
 80106b6:	4b2b      	ldr	r3, [pc, #172]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 80106b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106ba:	881b      	ldrh	r3, [r3, #0]
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	e005      	b.n	80106cc <rfalRunListenModeWorker+0x174>
 80106c0:	4b28      	ldr	r3, [pc, #160]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 80106c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80106c6:	3307      	adds	r3, #7
 80106c8:	08db      	lsrs	r3, r3, #3
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	4619      	mov	r1, r3
 80106ce:	f7f4 fe49 	bl	8005364 <st25r3911ReadFifo>
                
                /* Check if the data we got has at least the CRC and remove it, otherwise leave at 0 */
                *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 80106d2:	4b24      	ldr	r3, [pc, #144]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 80106d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106d6:	8819      	ldrh	r1, [r3, #0]
 80106d8:	4b22      	ldr	r3, [pc, #136]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 80106da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106dc:	881b      	ldrh	r3, [r3, #0]
 80106de:	2b02      	cmp	r3, #2
 80106e0:	bf28      	it	cs
 80106e2:	2302      	movcs	r3, #2
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	4b1f      	ldr	r3, [pc, #124]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 80106e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106ea:	1a8a      	subs	r2, r1, r2
 80106ec:	b292      	uxth	r2, r2
 80106ee:	801a      	strh	r2, [r3, #0]
                *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 80106f0:	4b1c      	ldr	r3, [pc, #112]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 80106f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106f4:	881a      	ldrh	r2, [r3, #0]
 80106f6:	4b1b      	ldr	r3, [pc, #108]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 80106f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106fa:	00d2      	lsls	r2, r2, #3
 80106fc:	b292      	uxth	r2, r2
 80106fe:	801a      	strh	r2, [r3, #0]
                gRFAL.Lm.dataFlag = true;
 8010700:	4b18      	ldr	r3, [pc, #96]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 8010702:	2201      	movs	r2, #1
 8010704:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
                
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 8010708:	4b16      	ldr	r3, [pc, #88]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 801070a:	799b      	ldrb	r3, [r3, #6]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d015      	beq.n	801073c <rfalRunListenModeWorker+0x1e4>
 8010710:	2100      	movs	r1, #0
 8010712:	2001      	movs	r0, #1
 8010714:	f7f4 fc96 	bl	8005044 <st25r3911WriteTestRegister>
 8010718:	e010      	b.n	801073c <rfalRunListenModeWorker+0x1e4>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && (!gRFAL.Lm.dataFlag) )
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010720:	2b00      	cmp	r3, #0
 8010722:	d018      	beq.n	8010756 <rfalRunListenModeWorker+0x1fe>
 8010724:	4b0f      	ldr	r3, [pc, #60]	@ (8010764 <rfalRunListenModeWorker+0x20c>)
 8010726:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 801072a:	f083 0301 	eor.w	r3, r3, #1
 801072e:	b2db      	uxtb	r3, r3
 8010730:	2b00      	cmp	r3, #0
 8010732:	d010      	beq.n	8010756 <rfalRunListenModeWorker+0x1fe>
            {
                rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8010734:	2001      	movs	r0, #1
 8010736:	f000 f865 	bl	8010804 <rfalListenSetState>
            }
            else
            {
                /* MISRA 15.7 - Empty else */
            }
            break;
 801073a:	e00c      	b.n	8010756 <rfalRunListenModeWorker+0x1fe>
 801073c:	e00b      	b.n	8010756 <rfalRunListenModeWorker+0x1fe>
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_READY_Ax:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
            case RFAL_LM_STATE_CARDEMU_3:
                return ERR_INTERNAL;
 801073e:	230c      	movs	r3, #12
 8010740:	e00b      	b.n	801075a <rfalRunListenModeWorker+0x202>
            case RFAL_LM_STATE_TARGET_A:
                break;
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 8010742:	2321      	movs	r3, #33	@ 0x21
 8010744:	e009      	b.n	801075a <rfalRunListenModeWorker+0x202>
                break;
 8010746:	bf00      	nop
 8010748:	e006      	b.n	8010758 <rfalRunListenModeWorker+0x200>
              break;  /* No interrupt to process */
 801074a:	bf00      	nop
 801074c:	e004      	b.n	8010758 <rfalRunListenModeWorker+0x200>
                break;
 801074e:	bf00      	nop
 8010750:	e002      	b.n	8010758 <rfalRunListenModeWorker+0x200>
                break;  /* No interrupt to process */
 8010752:	bf00      	nop
 8010754:	e000      	b.n	8010758 <rfalRunListenModeWorker+0x200>
            break;
 8010756:	bf00      	nop
    }
    return ERR_NONE;
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3708      	adds	r7, #8
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	20000d80 	.word	0x20000d80
 8010768:	00f00810 	.word	0x00f00810

0801076c <rfalListenStop>:


/*******************************************************************************/
ReturnCode rfalListenStop( void )
{
 801076c:	b580      	push	{r7, lr}
 801076e:	af00      	add	r7, sp, #0
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 8010770:	4b0b      	ldr	r3, [pc, #44]	@ (80107a0 <rfalListenStop+0x34>)
 8010772:	2200      	movs	r2, #0
 8010774:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  
    /*Check if Observation Mode was enabled and disable it on ST25R391x */
    rfalCheckDisableObsMode();
 8010778:	4b09      	ldr	r3, [pc, #36]	@ (80107a0 <rfalListenStop+0x34>)
 801077a:	799b      	ldrb	r3, [r3, #6]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d003      	beq.n	8010788 <rfalListenStop+0x1c>
 8010780:	2100      	movs	r1, #0
 8010782:	2001      	movs	r0, #1
 8010784:	f7f4 fc5e 	bl	8005044 <st25r3911WriteTestRegister>
  
    /* Disable Receiver and Transmitter */
    rfalFieldOff();
 8010788:	f7fe f990 	bl	800eaac <rfalFieldOff>
    
    /* As there's no Off mode, set default value: ISO14443A with automatic RF Collision Avoidance Off */
    st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_om_iso14443a | ST25R3911_REG_MODE_nfc_ar_off) );
 801078c:	2108      	movs	r1, #8
 801078e:	2003      	movs	r0, #3
 8010790:	f7f4 fca2 	bl	80050d8 <st25r3911WriteRegister>
    
    /* Set Analog configurations for Listen Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_OFF) );
 8010794:	2007      	movs	r0, #7
 8010796:	f7f5 f8d5 	bl	8005944 <rfalSetAnalogConfig>
        
    return ERR_NONE;
 801079a:	2300      	movs	r3, #0
}
 801079c:	4618      	mov	r0, r3
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	20000d80 	.word	0x20000d80

080107a4 <rfalListenSleepStart>:


/*******************************************************************************/
/*  PRQA S 3673 1 # MISRA 8.13 - ST25R3911B does not support Listen mode. Implementation for other chips will modify rxBuf and rxLen */
ReturnCode rfalListenSleepStart( rfalLmState sleepSt, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 80107a4:	b480      	push	{r7}
 80107a6:	b085      	sub	sp, #20
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60b9      	str	r1, [r7, #8]
 80107ac:	607b      	str	r3, [r7, #4]
 80107ae:	4603      	mov	r3, r0
 80107b0:	73fb      	strb	r3, [r7, #15]
 80107b2:	4613      	mov	r3, r2
 80107b4:	81bb      	strh	r3, [r7, #12]
    NO_WARNING(sleepSt);
    NO_WARNING(rxBuf);
    NO_WARNING(rxBufLen);
    NO_WARNING(rxLen);
    
    return ERR_NOTSUPP;
 80107b6:	2318      	movs	r3, #24
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3714      	adds	r7, #20
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr

080107c4 <rfalListenGetState>:


/*******************************************************************************/
rfalLmState rfalListenGetState( bool *dataFlag, rfalBitRate *lastBR )
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
    /* Allow state retrieval even if gRFAL.state != RFAL_STATE_LM so  *
     * that this Lm state can be used by caller after activation      */

    if( lastBR != NULL )
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d004      	beq.n	80107de <rfalListenGetState+0x1a>
    {
        *lastBR = gRFAL.Lm.brDetected;
 80107d4:	4b0a      	ldr	r3, [pc, #40]	@ (8010800 <rfalListenGetState+0x3c>)
 80107d6:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	701a      	strb	r2, [r3, #0]
    }
    
    if( dataFlag != NULL )
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d004      	beq.n	80107ee <rfalListenGetState+0x2a>
    {
        *dataFlag = gRFAL.Lm.dataFlag;
 80107e4:	4b06      	ldr	r3, [pc, #24]	@ (8010800 <rfalListenGetState+0x3c>)
 80107e6:	f893 2064 	ldrb.w	r2, [r3, #100]	@ 0x64
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	701a      	strb	r2, [r3, #0]
    }
    
    return gRFAL.Lm.state;
 80107ee:	4b04      	ldr	r3, [pc, #16]	@ (8010800 <rfalListenGetState+0x3c>)
 80107f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	370c      	adds	r7, #12
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr
 8010800:	20000d80 	.word	0x20000d80

08010804 <rfalListenSetState>:


/*******************************************************************************/
ReturnCode rfalListenSetState( rfalLmState newSt )
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	4603      	mov	r3, r0
 801080c:	71fb      	strb	r3, [r7, #7]
    bool        reSetState;
        
    /*rfalLogD( "RFAL: curState: %02X newState: %02X \r\n", gRFAL.Lm.state, newSt );*/
    
    /* SetState clears the Data flag */
    gRFAL.Lm.dataFlag = false;
 801080e:	4b62      	ldr	r3, [pc, #392]	@ (8010998 <rfalListenSetState+0x194>)
 8010810:	2200      	movs	r2, #0
 8010812:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    newState          = newSt;
 8010816:	79fb      	ldrb	r3, [r7, #7]
 8010818:	73fb      	strb	r3, [r7, #15]
    ret               = ERR_NONE;
 801081a:	2300      	movs	r3, #0
 801081c:	81bb      	strh	r3, [r7, #12]
    
    do{
        reSetState = false;
 801081e:	2300      	movs	r3, #0
 8010820:	73bb      	strb	r3, [r7, #14]

        /*******************************************************************************/
        switch( newState )
 8010822:	7bfb      	ldrb	r3, [r7, #15]
 8010824:	3b01      	subs	r3, #1
 8010826:	2b0f      	cmp	r3, #15
 8010828:	f200 80a2 	bhi.w	8010970 <rfalListenSetState+0x16c>
 801082c:	a201      	add	r2, pc, #4	@ (adr r2, 8010834 <rfalListenSetState+0x30>)
 801082e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010832:	bf00      	nop
 8010834:	08010875 	.word	0x08010875
 8010838:	080108d3 	.word	0x080108d3
 801083c:	0801096d 	.word	0x0801096d
 8010840:	08010971 	.word	0x08010971
 8010844:	0801096d 	.word	0x0801096d
 8010848:	0801096d 	.word	0x0801096d
 801084c:	0801096d 	.word	0x0801096d
 8010850:	0801096d 	.word	0x0801096d
 8010854:	0801096d 	.word	0x0801096d
 8010858:	08010975 	.word	0x08010975
 801085c:	08010975 	.word	0x08010975
 8010860:	0801096d 	.word	0x0801096d
 8010864:	0801096d 	.word	0x0801096d
 8010868:	0801096d 	.word	0x0801096d
 801086c:	0801096d 	.word	0x0801096d
 8010870:	0801096d 	.word	0x0801096d
            /*******************************************************************************/
            case RFAL_LM_STATE_POWER_OFF:
                
                /*******************************************************************************/
                /* Disable nfc_ar as RF Collision Avoidance timer may have already started */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8010874:	2101      	movs	r1, #1
 8010876:	2003      	movs	r0, #3
 8010878:	f7f4 fc7c 	bl	8005174 <st25r3911ClrRegisterBits>
                
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801087c:	20c2      	movs	r0, #194	@ 0xc2
 801087e:	f7f4 fdbf 	bl	8005400 <st25r3911ExecuteCommand>
                    
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 8010882:	2108      	movs	r1, #8
 8010884:	2002      	movs	r0, #2
 8010886:	f7f4 fc75 	bl	8005174 <st25r3911ClrRegisterBits>
                
                /*******************************************************************************/
                /* Ensure that the NFCIP1 mode is disabled */
                st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_nfc_f0 );
 801088a:	2120      	movs	r1, #32
 801088c:	2005      	movs	r0, #5
 801088e:	f7f4 fc71 	bl	8005174 <st25r3911ClrRegisterBits>
                
                
                /*******************************************************************************/
                /* Clear and enable required IRQs */
                st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 8010892:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8010896:	f7f4 ffdb 	bl	8005850 <st25r3911DisableInterrupts>
                
                
                st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 801089a:	4840      	ldr	r0, [pc, #256]	@ (801099c <rfalListenSetState+0x198>)
 801089c:	f7f4 ff90 	bl	80057c0 <st25r3911GetInterrupt>
                 * If the interrupt status register is being read when NFCT is trigerred, the  *
                 * IRQ line might go low and NFCT is not signalled on the status register.     *
                 * For initial bitrate detection, mask RXS, only wait for NFCT and RXE.        */
                /*******************************************************************************/
                
                st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 80108a0:	483f      	ldr	r0, [pc, #252]	@ (80109a0 <rfalListenSetState+0x19c>)
 80108a2:	f7f4 ffc9 	bl	8005838 <st25r3911EnableInterrupts>
                                            ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_RXE ) );
                
                /*******************************************************************************/
                /* Clear the bitRate previously detected */
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 80108a6:	4b3c      	ldr	r3, [pc, #240]	@ (8010998 <rfalListenSetState+0x194>)
 80108a8:	22ff      	movs	r2, #255	@ 0xff
 80108aa:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
                
                
                /*******************************************************************************/
                /* Apply the BitRate detection mode mode */
                st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_bit_rate_detection | ST25R3911_REG_MODE_nfc_ar_on)  );
 80108ae:	2181      	movs	r1, #129	@ 0x81
 80108b0:	2003      	movs	r0, #3
 80108b2:	f7f4 fc11 	bl	80050d8 <st25r3911WriteRegister>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.3                            */
                /* Even though bitrate is going to be detected the bitrate must be set to      *
                 * 106kbps to get correct 106kbps parity                                       */
                st25r3911WriteRegister( ST25R3911_REG_BIT_RATE, (ST25R3911_REG_BIT_RATE_txrate_106 | ST25R3911_REG_BIT_RATE_rxrate_106) );
 80108b6:	2100      	movs	r1, #0
 80108b8:	2004      	movs	r0, #4
 80108ba:	f7f4 fc0d 	bl	80050d8 <st25r3911WriteRegister>
                /*******************************************************************************/
                
                
                /*******************************************************************************/
                /* Check if external Field is already On */
                if( rfalIsExtFieldOn() )
 80108be:	f7ff fde5 	bl	801048c <rfalIsExtFieldOn>
 80108c2:	4603      	mov	r3, r0
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d057      	beq.n	8010978 <rfalListenSetState+0x174>
                {
                    reSetState = true;
 80108c8:	2301      	movs	r3, #1
 80108ca:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_IDLE;                         /* Set IDLE state */
 80108cc:	2302      	movs	r3, #2
 80108ce:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80108d0:	e052      	b.n	8010978 <rfalListenSetState+0x174>
                 *      
                 * Ensure that when upper layer calls SetState(IDLE), it restores initial 
                 * configuration and that check whether an external Field is still present     */
                 
                /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 80108d2:	2101      	movs	r1, #1
 80108d4:	2003      	movs	r0, #3
 80108d6:	f7f4 fc4d 	bl	8005174 <st25r3911ClrRegisterBits>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 80108da:	20c2      	movs	r0, #194	@ 0xc2
 80108dc:	f7f4 fd90 	bl	8005400 <st25r3911ExecuteCommand>
                st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 80108e0:	2101      	movs	r1, #1
 80108e2:	2003      	movs	r0, #3
 80108e4:	f7f4 fc69 	bl	80051ba <st25r3911SetRegisterBits>
                
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 80108e8:	2108      	movs	r1, #8
 80108ea:	2002      	movs	r0, #2
 80108ec:	f7f4 fc42 	bl	8005174 <st25r3911ClrRegisterBits>

                
                /* Load 2nd/3rd stage gain setting from registers into the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 80108f0:	20d5      	movs	r0, #213	@ 0xd5
 80108f2:	f7f4 fd85 	bl	8005400 <st25r3911ExecuteCommand>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.4                            */
                /* Enable; disable; enable mixer to make sure the digital decoder is in        *
                 * high state. This also switches the demodulator to mixer mode.               */
                st25r3911ReadRegister( ST25R3911_REG_RX_CONF1, &tmp );
 80108f6:	f107 030b 	add.w	r3, r7, #11
 80108fa:	4619      	mov	r1, r3
 80108fc:	200a      	movs	r0, #10
 80108fe:	f7f4 faad 	bl	8004e5c <st25r3911ReadRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 8010902:	7afb      	ldrb	r3, [r7, #11]
 8010904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010908:	b2db      	uxtb	r3, r3
 801090a:	4619      	mov	r1, r3
 801090c:	200a      	movs	r0, #10
 801090e:	f7f4 fbe3 	bl	80050d8 <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (uint8_t)(tmp & ~ST25R3911_REG_RX_CONF1_amd_sel) );
 8010912:	7afb      	ldrb	r3, [r7, #11]
 8010914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010918:	b2db      	uxtb	r3, r3
 801091a:	4619      	mov	r1, r3
 801091c:	200a      	movs	r0, #10
 801091e:	f7f4 fbdb 	bl	80050d8 <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 8010922:	7afb      	ldrb	r3, [r7, #11]
 8010924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010928:	b2db      	uxtb	r3, r3
 801092a:	4619      	mov	r1, r3
 801092c:	200a      	movs	r0, #10
 801092e:	f7f4 fbd3 	bl	80050d8 <st25r3911WriteRegister>
                /*******************************************************************************/
                
                /* ReEnable the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8010932:	20d1      	movs	r0, #209	@ 0xd1
 8010934:	f7f4 fd64 	bl	8005400 <st25r3911ExecuteCommand>
                
                
                /* If external Field is no longer detected go back to POWER_OFF */
                if( !st25r3911IsExtFieldOn() )
 8010938:	2240      	movs	r2, #64	@ 0x40
 801093a:	2140      	movs	r1, #64	@ 0x40
 801093c:	2030      	movs	r0, #48	@ 0x30
 801093e:	f7f4 f899 	bl	8004a74 <st25r3911CheckReg>
 8010942:	4603      	mov	r3, r0
 8010944:	f083 0301 	eor.w	r3, r3, #1
 8010948:	b2db      	uxtb	r3, r3
 801094a:	2b00      	cmp	r3, #0
 801094c:	d003      	beq.n	8010956 <rfalListenSetState+0x152>
                {
                    reSetState = true;
 801094e:	2301      	movs	r3, #1
 8010950:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_POWER_OFF;                    /* Set POWER_OFF state */
 8010952:	2301      	movs	r3, #1
 8010954:	73fb      	strb	r3, [r7, #15]
                }

                /*******************************************************************************/
                /*Check if Observation Mode is enabled and set it on ST25R391x */
                rfalCheckEnableObsModeRx();
 8010956:	4b10      	ldr	r3, [pc, #64]	@ (8010998 <rfalListenSetState+0x194>)
 8010958:	799b      	ldrb	r3, [r3, #6]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00e      	beq.n	801097c <rfalListenSetState+0x178>
 801095e:	4b0e      	ldr	r3, [pc, #56]	@ (8010998 <rfalListenSetState+0x194>)
 8010960:	799b      	ldrb	r3, [r3, #6]
 8010962:	4619      	mov	r1, r3
 8010964:	2001      	movs	r0, #1
 8010966:	f7f4 fb6d 	bl	8005044 <st25r3911WriteTestRegister>
                break;
 801096a:	e007      	b.n	801097c <rfalListenSetState+0x178>
            case RFAL_LM_STATE_SLEEP_A:
            case RFAL_LM_STATE_SLEEP_B:
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
                return ERR_NOTSUPP;
 801096c:	2318      	movs	r3, #24
 801096e:	e00f      	b.n	8010990 <rfalListenSetState+0x18c>
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 8010970:	2321      	movs	r3, #33	@ 0x21
 8010972:	e00d      	b.n	8010990 <rfalListenSetState+0x18c>
                break;
 8010974:	bf00      	nop
 8010976:	e002      	b.n	801097e <rfalListenSetState+0x17a>
                break;
 8010978:	bf00      	nop
 801097a:	e000      	b.n	801097e <rfalListenSetState+0x17a>
                break;
 801097c:	bf00      	nop
        }
    }
    while( reSetState );
 801097e:	7bbb      	ldrb	r3, [r7, #14]
 8010980:	2b00      	cmp	r3, #0
 8010982:	f47f af4c 	bne.w	801081e <rfalListenSetState+0x1a>
    
    gRFAL.Lm.state = newState;
 8010986:	4a04      	ldr	r2, [pc, #16]	@ (8010998 <rfalListenSetState+0x194>)
 8010988:	7bfb      	ldrb	r3, [r7, #15]
 801098a:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
    
    return ret;
 801098e:	89bb      	ldrh	r3, [r7, #12]
}
 8010990:	4618      	mov	r0, r3
 8010992:	3710      	adds	r7, #16
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	20000d80 	.word	0x20000d80
 801099c:	00f01930 	.word	0x00f01930
 80109a0:	00f01910 	.word	0x00f01910

080109a4 <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 80109a4:	b5b0      	push	{r4, r5, r7, lr}
 80109a6:	b086      	sub	sp, #24
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
    uint8_t                reg;
    uint32_t               irqs;
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d130      	bne.n	8010a14 <rfalWakeUpModeStart+0x70>
    {
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 80109b2:	4bad      	ldr	r3, [pc, #692]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 80109b4:	2214      	movs	r2, #20
 80109b6:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gRFAL.wum.cfg.irqTout     = false;
 80109ba:	4bab      	ldr	r3, [pc, #684]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 80109bc:	2200      	movs	r2, #0
 80109be:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gRFAL.wum.cfg.swTagDetect = false;
 80109c2:	4ba9      	ldr	r3, [pc, #676]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 80109c4:	2200      	movs	r2, #0
 80109c6:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      
        gRFAL.wum.cfg.indAmp.enabled   = true;
 80109ca:	4ba7      	ldr	r3, [pc, #668]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 80109cc:	2201      	movs	r2, #1
 80109ce:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        gRFAL.wum.cfg.indPha.enabled   = true;
 80109d2:	4ba5      	ldr	r3, [pc, #660]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 80109d4:	2201      	movs	r2, #1
 80109d6:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        gRFAL.wum.cfg.cap.enabled      = false;
 80109da:	4ba3      	ldr	r3, [pc, #652]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 80109dc:	2200      	movs	r2, #0
 80109de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 80109e2:	4ba1      	ldr	r3, [pc, #644]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 80109e4:	2202      	movs	r2, #2
 80109e6:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 80109ea:	4b9f      	ldr	r3, [pc, #636]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 80109ec:	22ff      	movs	r2, #255	@ 0xff
 80109ee:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 80109f2:	4b9d      	ldr	r3, [pc, #628]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 80109f4:	2200      	movs	r2, #0
 80109f6:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
        gRFAL.wum.cfg.indPha.delta     = 2U;
 80109fa:	4b9b      	ldr	r3, [pc, #620]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 80109fc:	2202      	movs	r2, #2
 80109fe:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        gRFAL.wum.cfg.indPha.reference = RFAL_WUM_REFERENCE_AUTO;
 8010a02:	4b99      	ldr	r3, [pc, #612]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010a04:	22ff      	movs	r2, #255	@ 0xff
 8010a06:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        gRFAL.wum.cfg.indPha.autoAvg   = false;
 8010a0a:	4b97      	ldr	r3, [pc, #604]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
 8010a12:	e00e      	b.n	8010a32 <rfalWakeUpModeStart+0x8e>
    }
    else
    {
        gRFAL.wum.cfg = *config;
 8010a14:	4b94      	ldr	r3, [pc, #592]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010a16:	687a      	ldr	r2, [r7, #4]
 8010a18:	3369      	adds	r3, #105	@ 0x69
 8010a1a:	6811      	ldr	r1, [r2, #0]
 8010a1c:	6855      	ldr	r5, [r2, #4]
 8010a1e:	6894      	ldr	r4, [r2, #8]
 8010a20:	68d0      	ldr	r0, [r2, #12]
 8010a22:	6019      	str	r1, [r3, #0]
 8010a24:	605d      	str	r5, [r3, #4]
 8010a26:	609c      	str	r4, [r3, #8]
 8010a28:	60d8      	str	r0, [r3, #12]
 8010a2a:	6911      	ldr	r1, [r2, #16]
 8010a2c:	6119      	str	r1, [r3, #16]
 8010a2e:	7d12      	ldrb	r2, [r2, #20]
 8010a30:	751a      	strb	r2, [r3, #20]
    }
    
    
    /* Check for valid configuration */
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 8010a32:	4b8d      	ldr	r3, [pc, #564]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010a34:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d009      	beq.n	8010a50 <rfalWakeUpModeStart+0xac>
 8010a3c:	4b8a      	ldr	r3, [pc, #552]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010a3e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d121      	bne.n	8010a8a <rfalWakeUpModeStart+0xe6>
 8010a46:	4b88      	ldr	r3, [pc, #544]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010a48:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d11c      	bne.n	8010a8a <rfalWakeUpModeStart+0xe6>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 8010a50:	4b85      	ldr	r3, [pc, #532]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010a52:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010a56:	f083 0301 	eor.w	r3, r3, #1
 8010a5a:	b2db      	uxtb	r3, r3
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d00f      	beq.n	8010a80 <rfalWakeUpModeStart+0xdc>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 8010a60:	4b81      	ldr	r3, [pc, #516]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010a62:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8010a66:	f083 0301 	eor.w	r3, r3, #1
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d007      	beq.n	8010a80 <rfalWakeUpModeStart+0xdc>
 8010a70:	4b7d      	ldr	r3, [pc, #500]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010a72:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8010a76:	f083 0301 	eor.w	r3, r3, #1
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d104      	bne.n	8010a8a <rfalWakeUpModeStart+0xe6>
         gRFAL.wum.cfg.swTagDetect                                                                         )
 8010a80:	4b79      	ldr	r3, [pc, #484]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010a82:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d001      	beq.n	8010a8e <rfalWakeUpModeStart+0xea>
    {
        return ERR_PARAM;
 8010a8a:	2307      	movs	r3, #7
 8010a8c:	e14f      	b.n	8010d2e <rfalWakeUpModeStart+0x38a>
    }
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	613b      	str	r3, [r7, #16]
    
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3911TxRxOff();
 8010a92:	f7f3 fe29 	bl	80046e8 <st25r3911TxRxOff>
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8010a96:	2110      	movs	r1, #16
 8010a98:	2009      	movs	r0, #9
 8010a9a:	f7f4 fb6b 	bl	8005174 <st25r3911ClrRegisterBits>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ | ST25R3911_REG_MODE_mask_om), (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_iso14443a) );
 8010a9e:	2208      	movs	r2, #8
 8010aa0:	21f8      	movs	r1, #248	@ 0xf8
 8010aa2:	2003      	movs	r0, #3
 8010aa4:	f7f4 fba7 	bl	80051f6 <st25r3911ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 8010aa8:	2004      	movs	r0, #4
 8010aaa:	f7f4 ff4b 	bl	8005944 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3911_REG_WUP_TIMER_CONTROL_shift_wut);
 8010aae:	4b6e      	ldr	r3, [pc, #440]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010ab0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010ab4:	011b      	lsls	r3, r3, #4
 8010ab6:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3911_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 8010ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010aba:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010abe:	2b0f      	cmp	r3, #15
 8010ac0:	d802      	bhi.n	8010ac8 <rfalWakeUpModeStart+0x124>
 8010ac2:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8010ac6:	e000      	b.n	8010aca <rfalWakeUpModeStart+0x126>
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010ace:	4313      	orrs	r3, r2
 8010ad0:	b25b      	sxtb	r3, r3
 8010ad2:	75fb      	strb	r3, [r7, #23]
    
    if(gRFAL.wum.cfg.irqTout)
 8010ad4:	4b64      	ldr	r3, [pc, #400]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010ad6:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d007      	beq.n	8010aee <rfalWakeUpModeStart+0x14a>
    {
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wto;
 8010ade:	7dfb      	ldrb	r3, [r7, #23]
 8010ae0:	f043 0308 	orr.w	r3, r3, #8
 8010ae4:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WT;
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010aec:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Amplitude is to be performed */
    if( gRFAL.wum.cfg.indAmp.enabled )
 8010aee:	4b5e      	ldr	r3, [pc, #376]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010af0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d04c      	beq.n	8010b92 <rfalWakeUpModeStart+0x1ee>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_d);
 8010af8:	4b5b      	ldr	r3, [pc, #364]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010afa:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8010afe:	011b      	lsls	r3, r3, #4
 8010b00:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 8010b02:	4b59      	ldr	r3, [pc, #356]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010b04:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d001      	beq.n	8010b10 <rfalWakeUpModeStart+0x16c>
 8010b0c:	2208      	movs	r2, #8
 8010b0e:	e000      	b.n	8010b12 <rfalWakeUpModeStart+0x16e>
 8010b10:	2200      	movs	r2, #0
 8010b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b16:	4313      	orrs	r3, r2
 8010b18:	b25b      	sxtb	r3, r3
 8010b1a:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_aew) & ST25R3911_REG_AMPLITUDE_MEASURE_CONF_mask_am_aew);
 8010b1c:	4b52      	ldr	r3, [pc, #328]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010b1e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8010b22:	b25b      	sxtb	r3, r3
 8010b24:	005b      	lsls	r3, r3, #1
 8010b26:	b25b      	sxtb	r3, r3
 8010b28:	f003 0306 	and.w	r3, r3, #6
 8010b2c:	b25a      	sxtb	r2, r3
 8010b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b32:	4313      	orrs	r3, r2
 8010b34:	b25b      	sxtb	r3, r3
 8010b36:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 8010b38:	4b4b      	ldr	r3, [pc, #300]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010b3a:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8010b3e:	b25a      	sxtb	r2, r3
 8010b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b44:	4313      	orrs	r3, r2
 8010b46:	b25b      	sxtb	r3, r3
 8010b48:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_CONF, aux );
 8010b4a:	7bfb      	ldrb	r3, [r7, #15]
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	2032      	movs	r0, #50	@ 0x32
 8010b50:	f7f4 fac2 	bl	80050d8 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indAmp.autoAvg )
 8010b54:	4b44      	ldr	r3, [pc, #272]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010b56:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8010b5a:	f083 0301 	eor.w	r3, r3, #1
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d00e      	beq.n	8010b82 <rfalWakeUpModeStart+0x1de>
        {
            if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 8010b64:	4b40      	ldr	r3, [pc, #256]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010b66:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8010b6a:	2bff      	cmp	r3, #255	@ 0xff
 8010b6c:	d102      	bne.n	8010b74 <rfalWakeUpModeStart+0x1d0>
            {
                st25r3911MeasureAmplitude( &gRFAL.wum.cfg.indAmp.reference );
 8010b6e:	483f      	ldr	r0, [pc, #252]	@ (8010c6c <rfalWakeUpModeStart+0x2c8>)
 8010b70:	f7f3 fe66 	bl	8004840 <st25r3911MeasureAmplitude>
            }
            st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 8010b74:	4b3c      	ldr	r3, [pc, #240]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010b76:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	2033      	movs	r0, #51	@ 0x33
 8010b7e:	f7f4 faab 	bl	80050d8 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wam;
 8010b82:	7dfb      	ldrb	r3, [r7, #23]
 8010b84:	f043 0304 	orr.w	r3, r3, #4
 8010b88:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WAM;
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010b90:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Phase is to be performed */
    if( gRFAL.wum.cfg.indPha.enabled )
 8010b92:	4b35      	ldr	r3, [pc, #212]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010b94:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d04c      	beq.n	8010c36 <rfalWakeUpModeStart+0x292>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_d);
 8010b9c:	4b32      	ldr	r3, [pc, #200]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010b9e:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8010ba2:	011b      	lsls	r3, r3, #4
 8010ba4:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 8010ba6:	4b30      	ldr	r3, [pc, #192]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010ba8:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d001      	beq.n	8010bb4 <rfalWakeUpModeStart+0x210>
 8010bb0:	2208      	movs	r2, #8
 8010bb2:	e000      	b.n	8010bb6 <rfalWakeUpModeStart+0x212>
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bba:	4313      	orrs	r3, r2
 8010bbc:	b25b      	sxtb	r3, r3
 8010bbe:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_aew) & ST25R3911_REG_PHASE_MEASURE_CONF_mask_pm_aew);
 8010bc0:	4b29      	ldr	r3, [pc, #164]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010bc2:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8010bc6:	b25b      	sxtb	r3, r3
 8010bc8:	005b      	lsls	r3, r3, #1
 8010bca:	b25b      	sxtb	r3, r3
 8010bcc:	f003 0306 	and.w	r3, r3, #6
 8010bd0:	b25a      	sxtb	r2, r3
 8010bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	b25b      	sxtb	r3, r3
 8010bda:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8010bdc:	4b22      	ldr	r3, [pc, #136]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010bde:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8010be2:	b25a      	sxtb	r2, r3
 8010be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010be8:	4313      	orrs	r3, r2
 8010bea:	b25b      	sxtb	r3, r3
 8010bec:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_CONF, aux );
 8010bee:	7bfb      	ldrb	r3, [r7, #15]
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	2036      	movs	r0, #54	@ 0x36
 8010bf4:	f7f4 fa70 	bl	80050d8 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indPha.autoAvg )
 8010bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010bfa:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8010bfe:	f083 0301 	eor.w	r3, r3, #1
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d00e      	beq.n	8010c26 <rfalWakeUpModeStart+0x282>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 8010c08:	4b17      	ldr	r3, [pc, #92]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010c0a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010c0e:	2bff      	cmp	r3, #255	@ 0xff
 8010c10:	d102      	bne.n	8010c18 <rfalWakeUpModeStart+0x274>
            {
                st25r3911MeasurePhase( &gRFAL.wum.cfg.indPha.reference );
 8010c12:	4817      	ldr	r0, [pc, #92]	@ (8010c70 <rfalWakeUpModeStart+0x2cc>)
 8010c14:	f7f3 fe22 	bl	800485c <st25r3911MeasurePhase>
            }
            st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 8010c18:	4b13      	ldr	r3, [pc, #76]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010c1a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010c1e:	4619      	mov	r1, r3
 8010c20:	2037      	movs	r0, #55	@ 0x37
 8010c22:	f7f4 fa59 	bl	80050d8 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wph;
 8010c26:	7dfb      	ldrb	r3, [r7, #23]
 8010c28:	f043 0302 	orr.w	r3, r3, #2
 8010c2c:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WPH;
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010c34:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Capacitive is to be performed */
    if( gRFAL.wum.cfg.cap.enabled )
 8010c36:	4b0c      	ldr	r3, [pc, #48]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010c38:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d05a      	beq.n	8010cf6 <rfalWakeUpModeStart+0x352>
    {
        /*******************************************************************************/
        /* Perform Capacitive sensor calibration */
        
        /* Disable Oscillator and Field */
        st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 8010c40:	2188      	movs	r1, #136	@ 0x88
 8010c42:	2002      	movs	r0, #2
 8010c44:	f7f4 fa96 	bl	8005174 <st25r3911ClrRegisterBits>
        
        /* Sensor gain should be configured on Analog Config */
        
        /* Perform calibration procedure */
        st25r3911CalibrateCapacitiveSensor( NULL );
 8010c48:	2000      	movs	r0, #0
 8010c4a:	f7f3 fe31 	bl	80048b0 <st25r3911CalibrateCapacitiveSensor>
        
        
        /*******************************************************************************/
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_d);
 8010c4e:	4b06      	ldr	r3, [pc, #24]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010c50:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010c54:	011b      	lsls	r3, r3, #4
 8010c56:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 8010c58:	4b03      	ldr	r3, [pc, #12]	@ (8010c68 <rfalWakeUpModeStart+0x2c4>)
 8010c5a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d008      	beq.n	8010c74 <rfalWakeUpModeStart+0x2d0>
 8010c62:	2208      	movs	r2, #8
 8010c64:	e007      	b.n	8010c76 <rfalWakeUpModeStart+0x2d2>
 8010c66:	bf00      	nop
 8010c68:	20000d80 	.word	0x20000d80
 8010c6c:	20000dee 	.word	0x20000dee
 8010c70:	20000df4 	.word	0x20000df4
 8010c74:	2200      	movs	r2, #0
 8010c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	b25b      	sxtb	r3, r3
 8010c7e:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_aew) & ST25R3911_REG_CAPACITANCE_MEASURE_CONF_mask_cm_aew);
 8010c80:	4b2d      	ldr	r3, [pc, #180]	@ (8010d38 <rfalWakeUpModeStart+0x394>)
 8010c82:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010c86:	b25b      	sxtb	r3, r3
 8010c88:	005b      	lsls	r3, r3, #1
 8010c8a:	b25b      	sxtb	r3, r3
 8010c8c:	f003 0306 	and.w	r3, r3, #6
 8010c90:	b25a      	sxtb	r2, r3
 8010c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c96:	4313      	orrs	r3, r2
 8010c98:	b25b      	sxtb	r3, r3
 8010c9a:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8010c9c:	4b26      	ldr	r3, [pc, #152]	@ (8010d38 <rfalWakeUpModeStart+0x394>)
 8010c9e:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8010ca2:	b25a      	sxtb	r2, r3
 8010ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	b25b      	sxtb	r3, r3
 8010cac:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_CONF, aux );
 8010cae:	7bfb      	ldrb	r3, [r7, #15]
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	203a      	movs	r0, #58	@ 0x3a
 8010cb4:	f7f4 fa10 	bl	80050d8 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.cap.autoAvg )
 8010cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8010d38 <rfalWakeUpModeStart+0x394>)
 8010cba:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8010cbe:	f083 0301 	eor.w	r3, r3, #1
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d00e      	beq.n	8010ce6 <rfalWakeUpModeStart+0x342>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 8010cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8010d38 <rfalWakeUpModeStart+0x394>)
 8010cca:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010cce:	2bff      	cmp	r3, #255	@ 0xff
 8010cd0:	d102      	bne.n	8010cd8 <rfalWakeUpModeStart+0x334>
            {
                st25r3911MeasureCapacitance( &gRFAL.wum.cfg.cap.reference );
 8010cd2:	481a      	ldr	r0, [pc, #104]	@ (8010d3c <rfalWakeUpModeStart+0x398>)
 8010cd4:	f7f3 fdd0 	bl	8004878 <st25r3911MeasureCapacitance>
            }
            st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_REF, gRFAL.wum.cfg.cap.reference );
 8010cd8:	4b17      	ldr	r3, [pc, #92]	@ (8010d38 <rfalWakeUpModeStart+0x394>)
 8010cda:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8010cde:	4619      	mov	r1, r3
 8010ce0:	203b      	movs	r0, #59	@ 0x3b
 8010ce2:	f7f4 f9f9 	bl	80050d8 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wcap;
 8010ce6:	7dfb      	ldrb	r3, [r7, #23]
 8010ce8:	f043 0301 	orr.w	r3, r3, #1
 8010cec:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WCAP;
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010cf4:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 8010cf6:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8010cfa:	f7f4 fda9 	bl	8005850 <st25r3911DisableInterrupts>
    st25r3911GetInterrupt( irqs );
 8010cfe:	6938      	ldr	r0, [r7, #16]
 8010d00:	f7f4 fd5e 	bl	80057c0 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( irqs );
 8010d04:	6938      	ldr	r0, [r7, #16]
 8010d06:	f7f4 fd97 	bl	8005838 <st25r3911EnableInterrupts>
    
    /* Enable Low Power Wake-Up Mode */
    st25r3911WriteRegister( ST25R3911_REG_WUP_TIMER_CONTROL, reg );
 8010d0a:	7dfb      	ldrb	r3, [r7, #23]
 8010d0c:	4619      	mov	r1, r3
 8010d0e:	2031      	movs	r0, #49	@ 0x31
 8010d10:	f7f4 f9e2 	bl	80050d8 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_wu), ST25R3911_REG_OP_CONTROL_wu );
 8010d14:	2204      	movs	r2, #4
 8010d16:	2184      	movs	r1, #132	@ 0x84
 8010d18:	2002      	movs	r0, #2
 8010d1a:	f7f4 fa6c 	bl	80051f6 <st25r3911ChangeRegisterBits>
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 8010d1e:	4b06      	ldr	r3, [pc, #24]	@ (8010d38 <rfalWakeUpModeStart+0x394>)
 8010d20:	2201      	movs	r2, #1
 8010d22:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    gRFAL.state     = RFAL_STATE_WUM;  
 8010d26:	4b04      	ldr	r3, [pc, #16]	@ (8010d38 <rfalWakeUpModeStart+0x394>)
 8010d28:	2205      	movs	r2, #5
 8010d2a:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3718      	adds	r7, #24
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bdb0      	pop	{r4, r5, r7, pc}
 8010d36:	bf00      	nop
 8010d38:	20000d80 	.word	0x20000d80
 8010d3c:	20000dfa 	.word	0x20000dfa

08010d40 <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 8010d40:	b480      	push	{r7}
 8010d42:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 8010d44:	4b06      	ldr	r3, [pc, #24]	@ (8010d60 <rfalWakeUpModeHasWoke+0x20>)
 8010d46:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	bf8c      	ite	hi
 8010d4e:	2301      	movhi	r3, #1
 8010d50:	2300      	movls	r3, #0
 8010d52:	b2db      	uxtb	r3, r3
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop
 8010d60:	20000d80 	.word	0x20000d80

08010d64 <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
    uint32_t irqs;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 8010d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8010ddc <rfalRunWakeUpModeWorker+0x78>)
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	2b05      	cmp	r3, #5
 8010d70:	d129      	bne.n	8010dc6 <rfalRunWakeUpModeWorker+0x62>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 8010d72:	4b1a      	ldr	r3, [pc, #104]	@ (8010ddc <rfalRunWakeUpModeWorker+0x78>)
 8010d74:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010d78:	3b01      	subs	r3, #1
 8010d7a:	2b01      	cmp	r3, #1
 8010d7c:	d825      	bhi.n	8010dca <rfalRunWakeUpModeWorker+0x66>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 8010d7e:	f44f 2070 	mov.w	r0, #983040	@ 0xf0000
 8010d82:	f7f4 fd1d 	bl	80057c0 <st25r3911GetInterrupt>
 8010d86:	6078      	str	r0, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d01f      	beq.n	8010dce <rfalRunWakeUpModeWorker+0x6a>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d003      	beq.n	8010da0 <rfalRunWakeUpModeWorker+0x3c>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8010d98:	4b10      	ldr	r3, [pc, #64]	@ (8010ddc <rfalRunWakeUpModeWorker+0x78>)
 8010d9a:	2202      	movs	r2, #2
 8010d9c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d003      	beq.n	8010db2 <rfalRunWakeUpModeWorker+0x4e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8010daa:	4b0c      	ldr	r3, [pc, #48]	@ (8010ddc <rfalRunWakeUpModeWorker+0x78>)
 8010dac:	2202      	movs	r2, #2
 8010dae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d00a      	beq.n	8010dd2 <rfalRunWakeUpModeWorker+0x6e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8010dbc:	4b07      	ldr	r3, [pc, #28]	@ (8010ddc <rfalRunWakeUpModeWorker+0x78>)
 8010dbe:	2202      	movs	r2, #2
 8010dc0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            break;
 8010dc4:	e005      	b.n	8010dd2 <rfalRunWakeUpModeWorker+0x6e>
        return;
 8010dc6:	bf00      	nop
 8010dc8:	e004      	b.n	8010dd4 <rfalRunWakeUpModeWorker+0x70>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8010dca:	bf00      	nop
 8010dcc:	e002      	b.n	8010dd4 <rfalRunWakeUpModeWorker+0x70>
               break;  /* No interrupt to process */
 8010dce:	bf00      	nop
 8010dd0:	e000      	b.n	8010dd4 <rfalRunWakeUpModeWorker+0x70>
            break;
 8010dd2:	bf00      	nop
    }
}
 8010dd4:	3708      	adds	r7, #8
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	20000d80 	.word	0x20000d80

08010de0 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	af00      	add	r7, sp, #0
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 8010de4:	4b0f      	ldr	r3, [pc, #60]	@ (8010e24 <rfalWakeUpModeStop+0x44>)
 8010de6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d101      	bne.n	8010df2 <rfalWakeUpModeStop+0x12>
    {
        return ERR_WRONG_STATE;
 8010dee:	2321      	movs	r3, #33	@ 0x21
 8010df0:	e015      	b.n	8010e1e <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8010df2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e24 <rfalWakeUpModeStop+0x44>)
 8010df4:	2200      	movs	r2, #0
 8010df6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    
    /* Re-Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8010dfa:	2110      	movs	r1, #16
 8010dfc:	2009      	movs	r0, #9
 8010dfe:	f7f4 f9dc 	bl	80051ba <st25r3911SetRegisterBits>
    
    /* Disable Wake-Up Mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8010e02:	2104      	movs	r1, #4
 8010e04:	2002      	movs	r0, #2
 8010e06:	f7f4 f9b5 	bl	8005174 <st25r3911ClrRegisterBits>
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP) );
 8010e0a:	f44f 2070 	mov.w	r0, #983040	@ 0xf0000
 8010e0e:	f7f4 fd1f 	bl	8005850 <st25r3911DisableInterrupts>
    
    /* Re-Enable the Oscillator */
    st25r3911OscOn();
 8010e12:	f7f3 fc71 	bl	80046f8 <st25r3911OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 8010e16:	2005      	movs	r0, #5
 8010e18:	f7f4 fd94 	bl	8005944 <rfalSetAnalogConfig>
      
    return ERR_NONE;
 8010e1c:	2300      	movs	r3, #0
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	20000d80 	.word	0x20000d80

08010e28 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	4603      	mov	r3, r0
 8010e30:	80fb      	strh	r3, [r7, #6]
 8010e32:	460b      	mov	r3, r1
 8010e34:	717b      	strb	r3, [r7, #5]
 8010e36:	4613      	mov	r3, r2
 8010e38:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 8010e3a:	88fb      	ldrh	r3, [r7, #6]
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	793a      	ldrb	r2, [r7, #4]
 8010e40:	7979      	ldrb	r1, [r7, #5]
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7f4 f9d7 	bl	80051f6 <st25r3911ChangeRegisterBits>
    return ERR_NONE;
 8010e48:	2300      	movs	r3, #0
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3708      	adds	r7, #8
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}

08010e52 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8010e52:	b580      	push	{r7, lr}
 8010e54:	b082      	sub	sp, #8
 8010e56:	af00      	add	r7, sp, #0
 8010e58:	4603      	mov	r3, r0
 8010e5a:	80fb      	strh	r3, [r7, #6]
 8010e5c:	460b      	mov	r3, r1
 8010e5e:	717b      	strb	r3, [r7, #5]
 8010e60:	4613      	mov	r3, r2
 8010e62:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 8010e64:	88fb      	ldrh	r3, [r7, #6]
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	793a      	ldrb	r2, [r7, #4]
 8010e6a:	7979      	ldrb	r1, [r7, #5]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7f4 fa01 	bl	8005274 <st25r3911ChangeTestRegisterBits>
    return ERR_NONE;
 8010e72:	2300      	movs	r3, #0
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <rfalSt25tbPollerDoCollisionResolution>:
******************************************************************************
*/


static bool rfalSt25tbPollerDoCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b086      	sub	sp, #24
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	4603      	mov	r3, r0
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	607a      	str	r2, [r7, #4]
 8010e88:	73fb      	strb	r3, [r7, #15]
    uint8_t    i;
    uint8_t    chipId;
    ReturnCode ret;
    bool col;

    col = false;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	74fb      	strb	r3, [r7, #19]
    
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 8010e8e:	2300      	movs	r3, #0
 8010e90:	75fb      	strb	r3, [r7, #23]
 8010e92:	e072      	b.n	8010f7a <rfalSt25tbPollerDoCollisionResolution+0xfe>
    {
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 8010e94:	2001      	movs	r0, #1
 8010e96:	f7f0 fc09 	bl	80016ac <HAL_Delay>
        
        if( i==0U )
 8010e9a:	7dfb      	ldrb	r3, [r7, #23]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d107      	bne.n	8010eb0 <rfalSt25tbPollerDoCollisionResolution+0x34>
        {
            /* Step 2: Send Pcall16 */
            ret = rfalSt25tbPollerPcall( &chipId );
 8010ea0:	f107 0312 	add.w	r3, r7, #18
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f000 f8c6 	bl	8011036 <rfalSt25tbPollerPcall>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	82bb      	strh	r3, [r7, #20]
 8010eae:	e008      	b.n	8010ec2 <rfalSt25tbPollerDoCollisionResolution+0x46>
        }
        else
        {
            /* Step 3-17: Send Pcall16 */
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 8010eb0:	f107 0212 	add.w	r2, r7, #18
 8010eb4:	7dfb      	ldrb	r3, [r7, #23]
 8010eb6:	4611      	mov	r1, r2
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f000 f8e2 	bl	8011082 <rfalSt25tbPollerSlotMarker>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	82bb      	strh	r3, [r7, #20]
        }
        
        if( ret == ERR_NONE )
 8010ec2:	8abb      	ldrh	r3, [r7, #20]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d148      	bne.n	8010f5a <rfalSt25tbPollerDoCollisionResolution+0xde>
        {
            /* Found another device */
            st25tbDevList[*devCnt].chipID       = chipId;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	461a      	mov	r2, r3
 8010ece:	4613      	mov	r3, r2
 8010ed0:	009b      	lsls	r3, r3, #2
 8010ed2:	4413      	add	r3, r2
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	4413      	add	r3, r2
 8010edc:	7cba      	ldrb	r2, [r7, #18]
 8010ede:	701a      	strb	r2, [r3, #0]
            st25tbDevList[*devCnt].isDeselected = false;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	461a      	mov	r2, r3
 8010ee6:	4613      	mov	r3, r2
 8010ee8:	009b      	lsls	r3, r3, #2
 8010eea:	4413      	add	r3, r2
 8010eec:	005b      	lsls	r3, r3, #1
 8010eee:	461a      	mov	r2, r3
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	4413      	add	r3, r2
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	725a      	strb	r2, [r3, #9]
            
            /* Select Device, retrieve its UID  */
            ret = rfalSt25tbPollerSelect( chipId );
 8010ef8:	7cbb      	ldrb	r3, [r7, #18]
 8010efa:	4618      	mov	r0, r3
 8010efc:	f000 f8f4 	bl	80110e8 <rfalSt25tbPollerSelect>
 8010f00:	4603      	mov	r3, r0
 8010f02:	82bb      	strh	r3, [r7, #20]

            /* By Selecting this device, the previous gets Deselected */
            if( (*devCnt) > 0U )
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d00b      	beq.n	8010f24 <rfalSt25tbPollerDoCollisionResolution+0xa8>
            {
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	461a      	mov	r2, r3
 8010f12:	4613      	mov	r3, r2
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	4413      	add	r3, r2
 8010f18:	005b      	lsls	r3, r3, #1
 8010f1a:	3b0a      	subs	r3, #10
 8010f1c:	68ba      	ldr	r2, [r7, #8]
 8010f1e:	4413      	add	r3, r2
 8010f20:	2201      	movs	r2, #1
 8010f22:	725a      	strb	r2, [r3, #9]
            }

            if( ERR_NONE == ret )
 8010f24:	8abb      	ldrh	r3, [r7, #20]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d10d      	bne.n	8010f46 <rfalSt25tbPollerDoCollisionResolution+0xca>
            {
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	781b      	ldrb	r3, [r3, #0]
 8010f2e:	461a      	mov	r2, r3
 8010f30:	4613      	mov	r3, r2
 8010f32:	009b      	lsls	r3, r3, #2
 8010f34:	4413      	add	r3, r2
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	461a      	mov	r2, r3
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	4413      	add	r3, r2
 8010f3e:	3301      	adds	r3, #1
 8010f40:	4618      	mov	r0, r3
 8010f42:	f000 f8fd 	bl	8011140 <rfalSt25tbPollerGetUID>
            }

            if( ERR_NONE == ret )
 8010f46:	8abb      	ldrh	r3, [r7, #20]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d10e      	bne.n	8010f6a <rfalSt25tbPollerDoCollisionResolution+0xee>
            {
                (*devCnt)++;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	3301      	adds	r3, #1
 8010f52:	b2da      	uxtb	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	701a      	strb	r2, [r3, #0]
 8010f58:	e007      	b.n	8010f6a <rfalSt25tbPollerDoCollisionResolution+0xee>
            }
        }
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8010f5a:	8abb      	ldrh	r3, [r7, #20]
 8010f5c:	2b15      	cmp	r3, #21
 8010f5e:	d002      	beq.n	8010f66 <rfalSt25tbPollerDoCollisionResolution+0xea>
 8010f60:	8abb      	ldrh	r3, [r7, #20]
 8010f62:	2b09      	cmp	r3, #9
 8010f64:	d101      	bne.n	8010f6a <rfalSt25tbPollerDoCollisionResolution+0xee>
        {
            col = true;
 8010f66:	2301      	movs	r3, #1
 8010f68:	74fb      	strb	r3, [r7, #19]
        else
        {
            /* MISRA 15.7 - Empty else */
        }
        
        if( *devCnt >= devLimit )
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	7bfa      	ldrb	r2, [r7, #15]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d906      	bls.n	8010f82 <rfalSt25tbPollerDoCollisionResolution+0x106>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 8010f74:	7dfb      	ldrb	r3, [r7, #23]
 8010f76:	3301      	adds	r3, #1
 8010f78:	75fb      	strb	r3, [r7, #23]
 8010f7a:	7dfb      	ldrb	r3, [r7, #23]
 8010f7c:	2b0f      	cmp	r3, #15
 8010f7e:	d989      	bls.n	8010e94 <rfalSt25tbPollerDoCollisionResolution+0x18>
 8010f80:	e000      	b.n	8010f84 <rfalSt25tbPollerDoCollisionResolution+0x108>
        {
            break;
 8010f82:	bf00      	nop
        }
    }
    return col;
 8010f84:	7cfb      	ldrb	r3, [r7, #19]
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3718      	adds	r7, #24
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}

08010f8e <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 8010f8e:	b580      	push	{r7, lr}
 8010f90:	af00      	add	r7, sp, #0
    return rfalNfcbPollerInitialize();
 8010f92:	f7fb ff05 	bl	800cda0 <rfalNfcbPollerInitialize>
 8010f96:	4603      	mov	r3, r0
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <rfalSt25tbPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCheckPresence( uint8_t *chipId )
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    chipIdRes;

    chipIdRes = 0x00;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	737b      	strb	r3, [r7, #13]
   
    /* Send Initiate Request */
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 8010fa8:	f107 030d 	add.w	r3, r7, #13
 8010fac:	4618      	mov	r0, r3
 8010fae:	f000 f815 	bl	8010fdc <rfalSt25tbPollerInitiate>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	81fb      	strh	r3, [r7, #14]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8010fb6:	89fb      	ldrh	r3, [r7, #14]
 8010fb8:	2b15      	cmp	r3, #21
 8010fba:	d002      	beq.n	8010fc2 <rfalSt25tbPollerCheckPresence+0x26>
 8010fbc:	89fb      	ldrh	r3, [r7, #14]
 8010fbe:	2b09      	cmp	r3, #9
 8010fc0:	d101      	bne.n	8010fc6 <rfalSt25tbPollerCheckPresence+0x2a>
    {
        return ERR_NONE;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	e006      	b.n	8010fd4 <rfalSt25tbPollerCheckPresence+0x38>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d002      	beq.n	8010fd2 <rfalSt25tbPollerCheckPresence+0x36>
    {
        *chipId = chipIdRes;
 8010fcc:	7b7a      	ldrb	r2, [r7, #13]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 8010fd2:	89fb      	ldrh	r3, [r7, #14]
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3710      	adds	r7, #16
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <rfalSt25tbPollerInitiate>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitiate( uint8_t *chipId )
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b08a      	sub	sp, #40	@ 0x28
 8010fe0:	af04      	add	r7, sp, #16
 8010fe2:	6078      	str	r0, [r7, #4]
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 8010fe4:	2306      	movs	r3, #6
 8010fe6:	743b      	strb	r3, [r7, #16]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	747b      	strb	r3, [r7, #17]
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010fec:	f107 020c 	add.w	r2, r7, #12
 8010ff0:	f107 0010 	add.w	r0, r7, #16
 8010ff4:	f241 036d 	movw	r3, #4205	@ 0x106d
 8010ff8:	9302      	str	r3, [sp, #8]
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	9301      	str	r3, [sp, #4]
 8010ffe:	f107 0314 	add.w	r3, r7, #20
 8011002:	9300      	str	r3, [sp, #0]
 8011004:	2303      	movs	r3, #3
 8011006:	2102      	movs	r1, #2
 8011008:	f7fd ff20 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 801100c:	4603      	mov	r3, r0
 801100e:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8011010:	8afb      	ldrh	r3, [r7, #22]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d104      	bne.n	8011020 <rfalSt25tbPollerInitiate+0x44>
 8011016:	8abb      	ldrh	r3, [r7, #20]
 8011018:	2b01      	cmp	r3, #1
 801101a:	d001      	beq.n	8011020 <rfalSt25tbPollerInitiate+0x44>
    {
        return ERR_PROTO;
 801101c:	230b      	movs	r3, #11
 801101e:	e006      	b.n	801102e <rfalSt25tbPollerInitiate+0x52>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d002      	beq.n	801102c <rfalSt25tbPollerInitiate+0x50>
    {
        *chipId = *rxBuf;
 8011026:	7b3a      	ldrb	r2, [r7, #12]
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 801102c:	8afb      	ldrh	r3, [r7, #22]
}
 801102e:	4618      	mov	r0, r3
 8011030:	3718      	adds	r7, #24
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}

08011036 <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 8011036:	b580      	push	{r7, lr}
 8011038:	b088      	sub	sp, #32
 801103a:	af04      	add	r7, sp, #16
 801103c:	6078      	str	r0, [r7, #4]
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 801103e:	2306      	movs	r3, #6
 8011040:	723b      	strb	r3, [r7, #8]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
 8011042:	2304      	movs	r3, #4
 8011044:	727b      	strb	r3, [r7, #9]
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8011046:	f107 0008 	add.w	r0, r7, #8
 801104a:	f241 036d 	movw	r3, #4205	@ 0x106d
 801104e:	9302      	str	r3, [sp, #8]
 8011050:	2300      	movs	r3, #0
 8011052:	9301      	str	r3, [sp, #4]
 8011054:	f107 030c 	add.w	r3, r7, #12
 8011058:	9300      	str	r3, [sp, #0]
 801105a:	2301      	movs	r3, #1
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	2102      	movs	r1, #2
 8011060:	f7fd fef4 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 8011064:	4603      	mov	r3, r0
 8011066:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8011068:	89fb      	ldrh	r3, [r7, #14]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d104      	bne.n	8011078 <rfalSt25tbPollerPcall+0x42>
 801106e:	89bb      	ldrh	r3, [r7, #12]
 8011070:	2b01      	cmp	r3, #1
 8011072:	d001      	beq.n	8011078 <rfalSt25tbPollerPcall+0x42>
    {
        return ERR_PROTO;
 8011074:	230b      	movs	r3, #11
 8011076:	e000      	b.n	801107a <rfalSt25tbPollerPcall+0x44>
    }
    
    return ret;
 8011078:	89fb      	ldrh	r3, [r7, #14]
}
 801107a:	4618      	mov	r0, r3
 801107c:	3710      	adds	r7, #16
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}

08011082 <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 8011082:	b580      	push	{r7, lr}
 8011084:	b088      	sub	sp, #32
 8011086:	af04      	add	r7, sp, #16
 8011088:	4603      	mov	r3, r0
 801108a:	6039      	str	r1, [r7, #0]
 801108c:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 801108e:	79fb      	ldrb	r3, [r7, #7]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d002      	beq.n	801109a <rfalSt25tbPollerSlotMarker+0x18>
 8011094:	79fb      	ldrb	r3, [r7, #7]
 8011096:	2b0f      	cmp	r3, #15
 8011098:	d901      	bls.n	801109e <rfalSt25tbPollerSlotMarker+0x1c>
    {
        return ERR_PARAM;
 801109a:	2307      	movs	r3, #7
 801109c:	e020      	b.n	80110e0 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 801109e:	79fb      	ldrb	r3, [r7, #7]
 80110a0:	011b      	lsls	r3, r3, #4
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	f043 0306 	orr.w	r3, r3, #6
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	72fb      	strb	r3, [r7, #11]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 80110ac:	f107 000b 	add.w	r0, r7, #11
 80110b0:	f241 036d 	movw	r3, #4205	@ 0x106d
 80110b4:	9302      	str	r3, [sp, #8]
 80110b6:	2300      	movs	r3, #0
 80110b8:	9301      	str	r3, [sp, #4]
 80110ba:	f107 030c 	add.w	r3, r7, #12
 80110be:	9300      	str	r3, [sp, #0]
 80110c0:	2301      	movs	r3, #1
 80110c2:	683a      	ldr	r2, [r7, #0]
 80110c4:	2101      	movs	r1, #1
 80110c6:	f7fd fec1 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 80110ca:	4603      	mov	r3, r0
 80110cc:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid ChipID Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 80110ce:	89fb      	ldrh	r3, [r7, #14]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d104      	bne.n	80110de <rfalSt25tbPollerSlotMarker+0x5c>
 80110d4:	89bb      	ldrh	r3, [r7, #12]
 80110d6:	2b01      	cmp	r3, #1
 80110d8:	d001      	beq.n	80110de <rfalSt25tbPollerSlotMarker+0x5c>
    {
        return ERR_PROTO;
 80110da:	230b      	movs	r3, #11
 80110dc:	e000      	b.n	80110e0 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    return ret;
 80110de:	89fb      	ldrh	r3, [r7, #14]
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3710      	adds	r7, #16
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b08a      	sub	sp, #40	@ 0x28
 80110ec:	af04      	add	r7, sp, #16
 80110ee:	4603      	mov	r3, r0
 80110f0:	71fb      	strb	r3, [r7, #7]
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 80110f2:	230e      	movs	r3, #14
 80110f4:	743b      	strb	r3, [r7, #16]
    selectReq.chipId = chipId;
 80110f6:	79fb      	ldrb	r3, [r7, #7]
 80110f8:	747b      	strb	r3, [r7, #17]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 80110fa:	f107 020f 	add.w	r2, r7, #15
 80110fe:	f107 0010 	add.w	r0, r7, #16
 8011102:	f241 036d 	movw	r3, #4205	@ 0x106d
 8011106:	9302      	str	r3, [sp, #8]
 8011108:	2300      	movs	r3, #0
 801110a:	9301      	str	r3, [sp, #4]
 801110c:	f107 0314 	add.w	r3, r7, #20
 8011110:	9300      	str	r3, [sp, #0]
 8011112:	2301      	movs	r3, #1
 8011114:	2102      	movs	r1, #2
 8011116:	f7fd fe99 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 801111a:	4603      	mov	r3, r0
 801111c:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 801111e:	8afb      	ldrh	r3, [r7, #22]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d108      	bne.n	8011136 <rfalSt25tbPollerSelect+0x4e>
 8011124:	8abb      	ldrh	r3, [r7, #20]
 8011126:	2b01      	cmp	r3, #1
 8011128:	d103      	bne.n	8011132 <rfalSt25tbPollerSelect+0x4a>
 801112a:	7bfb      	ldrb	r3, [r7, #15]
 801112c:	79fa      	ldrb	r2, [r7, #7]
 801112e:	429a      	cmp	r2, r3
 8011130:	d001      	beq.n	8011136 <rfalSt25tbPollerSelect+0x4e>
    {
        return ERR_PROTO;
 8011132:	230b      	movs	r3, #11
 8011134:	e000      	b.n	8011138 <rfalSt25tbPollerSelect+0x50>
    }
    
    return ret;
 8011136:	8afb      	ldrh	r3, [r7, #22]
}
 8011138:	4618      	mov	r0, r3
 801113a:	3718      	adds	r7, #24
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b088      	sub	sp, #32
 8011144:	af04      	add	r7, sp, #16
 8011146:	6078      	str	r0, [r7, #4]
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 8011148:	230b      	movs	r3, #11
 801114a:	72fb      	strb	r3, [r7, #11]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801114c:	f107 000b 	add.w	r0, r7, #11
 8011150:	f241 036d 	movw	r3, #4205	@ 0x106d
 8011154:	9302      	str	r3, [sp, #8]
 8011156:	2300      	movs	r3, #0
 8011158:	9301      	str	r3, [sp, #4]
 801115a:	f107 030c 	add.w	r3, r7, #12
 801115e:	9300      	str	r3, [sp, #0]
 8011160:	2308      	movs	r3, #8
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	2101      	movs	r1, #1
 8011166:	f7fd fe71 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 801116a:	4603      	mov	r3, r0
 801116c:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid UID Response */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 801116e:	89fb      	ldrh	r3, [r7, #14]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d104      	bne.n	801117e <rfalSt25tbPollerGetUID+0x3e>
 8011174:	89bb      	ldrh	r3, [r7, #12]
 8011176:	2b08      	cmp	r3, #8
 8011178:	d001      	beq.n	801117e <rfalSt25tbPollerGetUID+0x3e>
    {
        return ERR_PROTO;
 801117a:	230b      	movs	r3, #11
 801117c:	e000      	b.n	8011180 <rfalSt25tbPollerGetUID+0x40>
    }
    
    return ret;
 801117e:	89fb      	ldrh	r3, [r7, #14]
}
 8011180:	4618      	mov	r0, r3
 8011182:	3710      	adds	r7, #16
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b086      	sub	sp, #24
 801118c:	af00      	add	r7, sp, #0
 801118e:	4603      	mov	r3, r0
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	607a      	str	r2, [r7, #4]
 8011194:	73fb      	strb	r3, [r7, #15]
    
    uint8_t    chipId;
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d005      	beq.n	80111a8 <rfalSt25tbPollerCollisionResolution+0x20>
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d002      	beq.n	80111a8 <rfalSt25tbPollerCollisionResolution+0x20>
 80111a2:	7bfb      	ldrb	r3, [r7, #15]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d101      	bne.n	80111ac <rfalSt25tbPollerCollisionResolution+0x24>
    {
        return ERR_PARAM;
 80111a8:	2307      	movs	r3, #7
 80111aa:	e05c      	b.n	8011266 <rfalSt25tbPollerCollisionResolution+0xde>
    }
    
    *devCnt = 0;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	701a      	strb	r2, [r3, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 80111b2:	f107 0314 	add.w	r3, r7, #20
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7ff ff10 	bl	8010fdc <rfalSt25tbPollerInitiate>
 80111bc:	4603      	mov	r3, r0
 80111be:	82fb      	strh	r3, [r7, #22]
    if( ret == ERR_NONE )
 80111c0:	8afb      	ldrh	r3, [r7, #22]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d139      	bne.n	801123a <rfalSt25tbPollerCollisionResolution+0xb2>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	461a      	mov	r2, r3
 80111cc:	4613      	mov	r3, r2
 80111ce:	009b      	lsls	r3, r3, #2
 80111d0:	4413      	add	r3, r2
 80111d2:	005b      	lsls	r3, r3, #1
 80111d4:	461a      	mov	r2, r3
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	4413      	add	r3, r2
 80111da:	7d3a      	ldrb	r2, [r7, #20]
 80111dc:	701a      	strb	r2, [r3, #0]
        st25tbDevList[*devCnt].isDeselected = false;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	461a      	mov	r2, r3
 80111e4:	4613      	mov	r3, r2
 80111e6:	009b      	lsls	r3, r3, #2
 80111e8:	4413      	add	r3, r2
 80111ea:	005b      	lsls	r3, r3, #1
 80111ec:	461a      	mov	r2, r3
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	4413      	add	r3, r2
 80111f2:	2200      	movs	r2, #0
 80111f4:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 80111f6:	7d3b      	ldrb	r3, [r7, #20]
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7ff ff75 	bl	80110e8 <rfalSt25tbPollerSelect>
 80111fe:	4603      	mov	r3, r0
 8011200:	82fb      	strh	r3, [r7, #22]
        
        if( ERR_NONE == ret )
 8011202:	8afb      	ldrh	r3, [r7, #22]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d10f      	bne.n	8011228 <rfalSt25tbPollerCollisionResolution+0xa0>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	461a      	mov	r2, r3
 801120e:	4613      	mov	r3, r2
 8011210:	009b      	lsls	r3, r3, #2
 8011212:	4413      	add	r3, r2
 8011214:	005b      	lsls	r3, r3, #1
 8011216:	461a      	mov	r2, r3
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	4413      	add	r3, r2
 801121c:	3301      	adds	r3, #1
 801121e:	4618      	mov	r0, r3
 8011220:	f7ff ff8e 	bl	8011140 <rfalSt25tbPollerGetUID>
 8011224:	4603      	mov	r3, r0
 8011226:	82fb      	strh	r3, [r7, #22]
        }
        
        if( ERR_NONE == ret )
 8011228:	8afb      	ldrh	r3, [r7, #22]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d105      	bne.n	801123a <rfalSt25tbPollerCollisionResolution+0xb2>
        {
            (*devCnt)++;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	3301      	adds	r3, #1
 8011234:	b2da      	uxtb	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	701a      	strb	r2, [r3, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	7bfa      	ldrb	r2, [r7, #15]
 8011240:	429a      	cmp	r2, r3
 8011242:	d90f      	bls.n	8011264 <rfalSt25tbPollerCollisionResolution+0xdc>
    {
        /* Multiple device responses */
        do
        {
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
 8011244:	7bfb      	ldrb	r3, [r7, #15]
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	68b9      	ldr	r1, [r7, #8]
 801124a:	4618      	mov	r0, r3
 801124c:	f7ff fe16 	bl	8010e7c <rfalSt25tbPollerDoCollisionResolution>
 8011250:	4603      	mov	r3, r0
 8011252:	757b      	strb	r3, [r7, #21]
        }
        while( (detected == true) && (*devCnt < devLimit) );
 8011254:	7d7b      	ldrb	r3, [r7, #21]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d004      	beq.n	8011264 <rfalSt25tbPollerCollisionResolution+0xdc>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	781b      	ldrb	r3, [r3, #0]
 801125e:	7bfa      	ldrb	r2, [r7, #15]
 8011260:	429a      	cmp	r2, r3
 8011262:	d8ef      	bhi.n	8011244 <rfalSt25tbPollerCollisionResolution+0xbc>
    }

    return ERR_NONE;
 8011264:	2300      	movs	r3, #0
}
 8011266:	4618      	mov	r0, r3
 8011268:	3718      	adds	r7, #24
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}

0801126e <rfalT1TPollerInitialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode rfalT1TPollerInitialize( void )
{
 801126e:	b580      	push	{r7, lr}
 8011270:	b082      	sub	sp, #8
 8011272:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 8011274:	2200      	movs	r2, #0
 8011276:	2100      	movs	r1, #0
 8011278:	2002      	movs	r0, #2
 801127a:	f7fc ffc9 	bl	800e210 <rfalSetMode>
 801127e:	4603      	mov	r3, r0
 8011280:	80fb      	strh	r3, [r7, #6]
 8011282:	88fb      	ldrh	r3, [r7, #6]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d001      	beq.n	801128c <rfalT1TPollerInitialize+0x1e>
 8011288:	88fb      	ldrh	r3, [r7, #6]
 801128a:	e00e      	b.n	80112aa <rfalT1TPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801128c:	2001      	movs	r0, #1
 801128e:	f7fd fb43 	bl	800e918 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 8011292:	2000      	movs	r0, #0
 8011294:	f7fd fb7a 	bl	800e98c <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 8011298:	f240 4094 	movw	r0, #1172	@ 0x494
 801129c:	f7fd fb62 	bl	800e964 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 80112a0:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80112a4:	f7fd fb48 	bl	800e938 <rfalSetFDTPoll>
    
    return ERR_NONE;
 80112a8:	2300      	movs	r3, #0
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3708      	adds	r7, #8
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}

080112b2 <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 80112b2:	b580      	push	{r7, lr}
 80112b4:	b08a      	sub	sp, #40	@ 0x28
 80112b6:	af04      	add	r7, sp, #16
 80112b8:	6078      	str	r0, [r7, #4]
    ReturnCode     ret;
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d101      	bne.n	80112c4 <rfalT1TPollerRid+0x12>
    {
        return ERR_PARAM;
 80112c0:	2307      	movs	r3, #7
 80112c2:	e02a      	b.n	801131a <rfalT1TPollerRid+0x68>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 80112c4:	f107 030c 	add.w	r3, r7, #12
 80112c8:	2207      	movs	r2, #7
 80112ca:	2100      	movs	r1, #0
 80112cc:	4618      	mov	r0, r3
 80112ce:	f000 f94f 	bl	8011570 <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 80112d2:	2378      	movs	r3, #120	@ 0x78
 80112d4:	733b      	strb	r3, [r7, #12]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 80112d6:	f107 000c 	add.w	r0, r7, #12
 80112da:	f640 13a8 	movw	r3, #2472	@ 0x9a8
 80112de:	9302      	str	r3, [sp, #8]
 80112e0:	2300      	movs	r3, #0
 80112e2:	9301      	str	r3, [sp, #4]
 80112e4:	f107 030a 	add.w	r3, r7, #10
 80112e8:	9300      	str	r3, [sp, #0]
 80112ea:	2306      	movs	r3, #6
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	2107      	movs	r1, #7
 80112f0:	f7fd fdac 	bl	800ee4c <rfalTransceiveBlockingTxRx>
 80112f4:	4603      	mov	r3, r0
 80112f6:	82fb      	strh	r3, [r7, #22]
 80112f8:	8afb      	ldrh	r3, [r7, #22]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d001      	beq.n	8011302 <rfalT1TPollerRid+0x50>
 80112fe:	8afb      	ldrh	r3, [r7, #22]
 8011300:	e00b      	b.n	801131a <rfalT1TPollerRid+0x68>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 8011302:	897b      	ldrh	r3, [r7, #10]
 8011304:	2b06      	cmp	r3, #6
 8011306:	d105      	bne.n	8011314 <rfalT1TPollerRid+0x62>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011310:	2b10      	cmp	r3, #16
 8011312:	d001      	beq.n	8011318 <rfalT1TPollerRid+0x66>
    {
        return ERR_PROTO;
 8011314:	230b      	movs	r3, #11
 8011316:	e000      	b.n	801131a <rfalT1TPollerRid+0x68>
    }
    
    return ERR_NONE;
 8011318:	2300      	movs	r3, #0
}
 801131a:	4618      	mov	r0, r3
 801131c:	3718      	adds	r7, #24
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
	...

08011324 <free>:
 8011324:	4b02      	ldr	r3, [pc, #8]	@ (8011330 <free+0xc>)
 8011326:	4601      	mov	r1, r0
 8011328:	6818      	ldr	r0, [r3, #0]
 801132a:	f000 b973 	b.w	8011614 <_free_r>
 801132e:	bf00      	nop
 8011330:	2000013c 	.word	0x2000013c

08011334 <sbrk_aligned>:
 8011334:	b570      	push	{r4, r5, r6, lr}
 8011336:	4e0f      	ldr	r6, [pc, #60]	@ (8011374 <sbrk_aligned+0x40>)
 8011338:	460c      	mov	r4, r1
 801133a:	6831      	ldr	r1, [r6, #0]
 801133c:	4605      	mov	r5, r0
 801133e:	b911      	cbnz	r1, 8011346 <sbrk_aligned+0x12>
 8011340:	f000 f91e 	bl	8011580 <_sbrk_r>
 8011344:	6030      	str	r0, [r6, #0]
 8011346:	4621      	mov	r1, r4
 8011348:	4628      	mov	r0, r5
 801134a:	f000 f919 	bl	8011580 <_sbrk_r>
 801134e:	1c43      	adds	r3, r0, #1
 8011350:	d103      	bne.n	801135a <sbrk_aligned+0x26>
 8011352:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011356:	4620      	mov	r0, r4
 8011358:	bd70      	pop	{r4, r5, r6, pc}
 801135a:	1cc4      	adds	r4, r0, #3
 801135c:	f024 0403 	bic.w	r4, r4, #3
 8011360:	42a0      	cmp	r0, r4
 8011362:	d0f8      	beq.n	8011356 <sbrk_aligned+0x22>
 8011364:	1a21      	subs	r1, r4, r0
 8011366:	4628      	mov	r0, r5
 8011368:	f000 f90a 	bl	8011580 <_sbrk_r>
 801136c:	3001      	adds	r0, #1
 801136e:	d1f2      	bne.n	8011356 <sbrk_aligned+0x22>
 8011370:	e7ef      	b.n	8011352 <sbrk_aligned+0x1e>
 8011372:	bf00      	nop
 8011374:	2000116c 	.word	0x2000116c

08011378 <_malloc_r>:
 8011378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801137c:	1ccd      	adds	r5, r1, #3
 801137e:	f025 0503 	bic.w	r5, r5, #3
 8011382:	3508      	adds	r5, #8
 8011384:	2d0c      	cmp	r5, #12
 8011386:	bf38      	it	cc
 8011388:	250c      	movcc	r5, #12
 801138a:	2d00      	cmp	r5, #0
 801138c:	4606      	mov	r6, r0
 801138e:	db01      	blt.n	8011394 <_malloc_r+0x1c>
 8011390:	42a9      	cmp	r1, r5
 8011392:	d904      	bls.n	801139e <_malloc_r+0x26>
 8011394:	230c      	movs	r3, #12
 8011396:	6033      	str	r3, [r6, #0]
 8011398:	2000      	movs	r0, #0
 801139a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801139e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011474 <_malloc_r+0xfc>
 80113a2:	f000 f869 	bl	8011478 <__malloc_lock>
 80113a6:	f8d8 3000 	ldr.w	r3, [r8]
 80113aa:	461c      	mov	r4, r3
 80113ac:	bb44      	cbnz	r4, 8011400 <_malloc_r+0x88>
 80113ae:	4629      	mov	r1, r5
 80113b0:	4630      	mov	r0, r6
 80113b2:	f7ff ffbf 	bl	8011334 <sbrk_aligned>
 80113b6:	1c43      	adds	r3, r0, #1
 80113b8:	4604      	mov	r4, r0
 80113ba:	d158      	bne.n	801146e <_malloc_r+0xf6>
 80113bc:	f8d8 4000 	ldr.w	r4, [r8]
 80113c0:	4627      	mov	r7, r4
 80113c2:	2f00      	cmp	r7, #0
 80113c4:	d143      	bne.n	801144e <_malloc_r+0xd6>
 80113c6:	2c00      	cmp	r4, #0
 80113c8:	d04b      	beq.n	8011462 <_malloc_r+0xea>
 80113ca:	6823      	ldr	r3, [r4, #0]
 80113cc:	4639      	mov	r1, r7
 80113ce:	4630      	mov	r0, r6
 80113d0:	eb04 0903 	add.w	r9, r4, r3
 80113d4:	f000 f8d4 	bl	8011580 <_sbrk_r>
 80113d8:	4581      	cmp	r9, r0
 80113da:	d142      	bne.n	8011462 <_malloc_r+0xea>
 80113dc:	6821      	ldr	r1, [r4, #0]
 80113de:	1a6d      	subs	r5, r5, r1
 80113e0:	4629      	mov	r1, r5
 80113e2:	4630      	mov	r0, r6
 80113e4:	f7ff ffa6 	bl	8011334 <sbrk_aligned>
 80113e8:	3001      	adds	r0, #1
 80113ea:	d03a      	beq.n	8011462 <_malloc_r+0xea>
 80113ec:	6823      	ldr	r3, [r4, #0]
 80113ee:	442b      	add	r3, r5
 80113f0:	6023      	str	r3, [r4, #0]
 80113f2:	f8d8 3000 	ldr.w	r3, [r8]
 80113f6:	685a      	ldr	r2, [r3, #4]
 80113f8:	bb62      	cbnz	r2, 8011454 <_malloc_r+0xdc>
 80113fa:	f8c8 7000 	str.w	r7, [r8]
 80113fe:	e00f      	b.n	8011420 <_malloc_r+0xa8>
 8011400:	6822      	ldr	r2, [r4, #0]
 8011402:	1b52      	subs	r2, r2, r5
 8011404:	d420      	bmi.n	8011448 <_malloc_r+0xd0>
 8011406:	2a0b      	cmp	r2, #11
 8011408:	d917      	bls.n	801143a <_malloc_r+0xc2>
 801140a:	1961      	adds	r1, r4, r5
 801140c:	42a3      	cmp	r3, r4
 801140e:	6025      	str	r5, [r4, #0]
 8011410:	bf18      	it	ne
 8011412:	6059      	strne	r1, [r3, #4]
 8011414:	6863      	ldr	r3, [r4, #4]
 8011416:	bf08      	it	eq
 8011418:	f8c8 1000 	streq.w	r1, [r8]
 801141c:	5162      	str	r2, [r4, r5]
 801141e:	604b      	str	r3, [r1, #4]
 8011420:	4630      	mov	r0, r6
 8011422:	f000 f82f 	bl	8011484 <__malloc_unlock>
 8011426:	f104 000b 	add.w	r0, r4, #11
 801142a:	1d23      	adds	r3, r4, #4
 801142c:	f020 0007 	bic.w	r0, r0, #7
 8011430:	1ac2      	subs	r2, r0, r3
 8011432:	bf1c      	itt	ne
 8011434:	1a1b      	subne	r3, r3, r0
 8011436:	50a3      	strne	r3, [r4, r2]
 8011438:	e7af      	b.n	801139a <_malloc_r+0x22>
 801143a:	6862      	ldr	r2, [r4, #4]
 801143c:	42a3      	cmp	r3, r4
 801143e:	bf0c      	ite	eq
 8011440:	f8c8 2000 	streq.w	r2, [r8]
 8011444:	605a      	strne	r2, [r3, #4]
 8011446:	e7eb      	b.n	8011420 <_malloc_r+0xa8>
 8011448:	4623      	mov	r3, r4
 801144a:	6864      	ldr	r4, [r4, #4]
 801144c:	e7ae      	b.n	80113ac <_malloc_r+0x34>
 801144e:	463c      	mov	r4, r7
 8011450:	687f      	ldr	r7, [r7, #4]
 8011452:	e7b6      	b.n	80113c2 <_malloc_r+0x4a>
 8011454:	461a      	mov	r2, r3
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	42a3      	cmp	r3, r4
 801145a:	d1fb      	bne.n	8011454 <_malloc_r+0xdc>
 801145c:	2300      	movs	r3, #0
 801145e:	6053      	str	r3, [r2, #4]
 8011460:	e7de      	b.n	8011420 <_malloc_r+0xa8>
 8011462:	230c      	movs	r3, #12
 8011464:	6033      	str	r3, [r6, #0]
 8011466:	4630      	mov	r0, r6
 8011468:	f000 f80c 	bl	8011484 <__malloc_unlock>
 801146c:	e794      	b.n	8011398 <_malloc_r+0x20>
 801146e:	6005      	str	r5, [r0, #0]
 8011470:	e7d6      	b.n	8011420 <_malloc_r+0xa8>
 8011472:	bf00      	nop
 8011474:	20001170 	.word	0x20001170

08011478 <__malloc_lock>:
 8011478:	4801      	ldr	r0, [pc, #4]	@ (8011480 <__malloc_lock+0x8>)
 801147a:	f000 b8bb 	b.w	80115f4 <__retarget_lock_acquire_recursive>
 801147e:	bf00      	nop
 8011480:	200012b0 	.word	0x200012b0

08011484 <__malloc_unlock>:
 8011484:	4801      	ldr	r0, [pc, #4]	@ (801148c <__malloc_unlock+0x8>)
 8011486:	f000 b8b6 	b.w	80115f6 <__retarget_lock_release_recursive>
 801148a:	bf00      	nop
 801148c:	200012b0 	.word	0x200012b0

08011490 <asiprintf>:
 8011490:	b40e      	push	{r1, r2, r3}
 8011492:	b530      	push	{r4, r5, lr}
 8011494:	b09c      	sub	sp, #112	@ 0x70
 8011496:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011498:	4605      	mov	r5, r0
 801149a:	490d      	ldr	r1, [pc, #52]	@ (80114d0 <asiprintf+0x40>)
 801149c:	480d      	ldr	r0, [pc, #52]	@ (80114d4 <asiprintf+0x44>)
 801149e:	f853 2b04 	ldr.w	r2, [r3], #4
 80114a2:	6800      	ldr	r0, [r0, #0]
 80114a4:	9301      	str	r3, [sp, #4]
 80114a6:	2400      	movs	r4, #0
 80114a8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80114ac:	a902      	add	r1, sp, #8
 80114ae:	9402      	str	r4, [sp, #8]
 80114b0:	9404      	str	r4, [sp, #16]
 80114b2:	9407      	str	r4, [sp, #28]
 80114b4:	f000 f954 	bl	8011760 <_svfiprintf_r>
 80114b8:	2800      	cmp	r0, #0
 80114ba:	bfa1      	itttt	ge
 80114bc:	9b02      	ldrge	r3, [sp, #8]
 80114be:	701c      	strbge	r4, [r3, #0]
 80114c0:	9b06      	ldrge	r3, [sp, #24]
 80114c2:	602b      	strge	r3, [r5, #0]
 80114c4:	b01c      	add	sp, #112	@ 0x70
 80114c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114ca:	b003      	add	sp, #12
 80114cc:	4770      	bx	lr
 80114ce:	bf00      	nop
 80114d0:	ffff0288 	.word	0xffff0288
 80114d4:	2000013c 	.word	0x2000013c

080114d8 <_vasiprintf_r>:
 80114d8:	b530      	push	{r4, r5, lr}
 80114da:	460d      	mov	r5, r1
 80114dc:	4909      	ldr	r1, [pc, #36]	@ (8011504 <_vasiprintf_r+0x2c>)
 80114de:	b09b      	sub	sp, #108	@ 0x6c
 80114e0:	2400      	movs	r4, #0
 80114e2:	e9cd 1403 	strd	r1, r4, [sp, #12]
 80114e6:	4669      	mov	r1, sp
 80114e8:	9400      	str	r4, [sp, #0]
 80114ea:	9402      	str	r4, [sp, #8]
 80114ec:	9405      	str	r4, [sp, #20]
 80114ee:	f000 f937 	bl	8011760 <_svfiprintf_r>
 80114f2:	2800      	cmp	r0, #0
 80114f4:	bfa1      	itttt	ge
 80114f6:	9b00      	ldrge	r3, [sp, #0]
 80114f8:	701c      	strbge	r4, [r3, #0]
 80114fa:	9b04      	ldrge	r3, [sp, #16]
 80114fc:	602b      	strge	r3, [r5, #0]
 80114fe:	b01b      	add	sp, #108	@ 0x6c
 8011500:	bd30      	pop	{r4, r5, pc}
 8011502:	bf00      	nop
 8011504:	ffff0288 	.word	0xffff0288

08011508 <vasiprintf>:
 8011508:	4613      	mov	r3, r2
 801150a:	460a      	mov	r2, r1
 801150c:	4601      	mov	r1, r0
 801150e:	4802      	ldr	r0, [pc, #8]	@ (8011518 <vasiprintf+0x10>)
 8011510:	6800      	ldr	r0, [r0, #0]
 8011512:	f7ff bfe1 	b.w	80114d8 <_vasiprintf_r>
 8011516:	bf00      	nop
 8011518:	2000013c 	.word	0x2000013c

0801151c <memcmp>:
 801151c:	b510      	push	{r4, lr}
 801151e:	3901      	subs	r1, #1
 8011520:	4402      	add	r2, r0
 8011522:	4290      	cmp	r0, r2
 8011524:	d101      	bne.n	801152a <memcmp+0xe>
 8011526:	2000      	movs	r0, #0
 8011528:	e005      	b.n	8011536 <memcmp+0x1a>
 801152a:	7803      	ldrb	r3, [r0, #0]
 801152c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011530:	42a3      	cmp	r3, r4
 8011532:	d001      	beq.n	8011538 <memcmp+0x1c>
 8011534:	1b18      	subs	r0, r3, r4
 8011536:	bd10      	pop	{r4, pc}
 8011538:	3001      	adds	r0, #1
 801153a:	e7f2      	b.n	8011522 <memcmp+0x6>

0801153c <memmove>:
 801153c:	4288      	cmp	r0, r1
 801153e:	b510      	push	{r4, lr}
 8011540:	eb01 0402 	add.w	r4, r1, r2
 8011544:	d902      	bls.n	801154c <memmove+0x10>
 8011546:	4284      	cmp	r4, r0
 8011548:	4623      	mov	r3, r4
 801154a:	d807      	bhi.n	801155c <memmove+0x20>
 801154c:	1e43      	subs	r3, r0, #1
 801154e:	42a1      	cmp	r1, r4
 8011550:	d008      	beq.n	8011564 <memmove+0x28>
 8011552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011556:	f803 2f01 	strb.w	r2, [r3, #1]!
 801155a:	e7f8      	b.n	801154e <memmove+0x12>
 801155c:	4402      	add	r2, r0
 801155e:	4601      	mov	r1, r0
 8011560:	428a      	cmp	r2, r1
 8011562:	d100      	bne.n	8011566 <memmove+0x2a>
 8011564:	bd10      	pop	{r4, pc}
 8011566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801156a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801156e:	e7f7      	b.n	8011560 <memmove+0x24>

08011570 <memset>:
 8011570:	4402      	add	r2, r0
 8011572:	4603      	mov	r3, r0
 8011574:	4293      	cmp	r3, r2
 8011576:	d100      	bne.n	801157a <memset+0xa>
 8011578:	4770      	bx	lr
 801157a:	f803 1b01 	strb.w	r1, [r3], #1
 801157e:	e7f9      	b.n	8011574 <memset+0x4>

08011580 <_sbrk_r>:
 8011580:	b538      	push	{r3, r4, r5, lr}
 8011582:	4d06      	ldr	r5, [pc, #24]	@ (801159c <_sbrk_r+0x1c>)
 8011584:	2300      	movs	r3, #0
 8011586:	4604      	mov	r4, r0
 8011588:	4608      	mov	r0, r1
 801158a:	602b      	str	r3, [r5, #0]
 801158c:	f7ef ff20 	bl	80013d0 <_sbrk>
 8011590:	1c43      	adds	r3, r0, #1
 8011592:	d102      	bne.n	801159a <_sbrk_r+0x1a>
 8011594:	682b      	ldr	r3, [r5, #0]
 8011596:	b103      	cbz	r3, 801159a <_sbrk_r+0x1a>
 8011598:	6023      	str	r3, [r4, #0]
 801159a:	bd38      	pop	{r3, r4, r5, pc}
 801159c:	200012ac 	.word	0x200012ac

080115a0 <__errno>:
 80115a0:	4b01      	ldr	r3, [pc, #4]	@ (80115a8 <__errno+0x8>)
 80115a2:	6818      	ldr	r0, [r3, #0]
 80115a4:	4770      	bx	lr
 80115a6:	bf00      	nop
 80115a8:	2000013c 	.word	0x2000013c

080115ac <__libc_init_array>:
 80115ac:	b570      	push	{r4, r5, r6, lr}
 80115ae:	4d0d      	ldr	r5, [pc, #52]	@ (80115e4 <__libc_init_array+0x38>)
 80115b0:	4c0d      	ldr	r4, [pc, #52]	@ (80115e8 <__libc_init_array+0x3c>)
 80115b2:	1b64      	subs	r4, r4, r5
 80115b4:	10a4      	asrs	r4, r4, #2
 80115b6:	2600      	movs	r6, #0
 80115b8:	42a6      	cmp	r6, r4
 80115ba:	d109      	bne.n	80115d0 <__libc_init_array+0x24>
 80115bc:	4d0b      	ldr	r5, [pc, #44]	@ (80115ec <__libc_init_array+0x40>)
 80115be:	4c0c      	ldr	r4, [pc, #48]	@ (80115f0 <__libc_init_array+0x44>)
 80115c0:	f000 fb8e 	bl	8011ce0 <_init>
 80115c4:	1b64      	subs	r4, r4, r5
 80115c6:	10a4      	asrs	r4, r4, #2
 80115c8:	2600      	movs	r6, #0
 80115ca:	42a6      	cmp	r6, r4
 80115cc:	d105      	bne.n	80115da <__libc_init_array+0x2e>
 80115ce:	bd70      	pop	{r4, r5, r6, pc}
 80115d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80115d4:	4798      	blx	r3
 80115d6:	3601      	adds	r6, #1
 80115d8:	e7ee      	b.n	80115b8 <__libc_init_array+0xc>
 80115da:	f855 3b04 	ldr.w	r3, [r5], #4
 80115de:	4798      	blx	r3
 80115e0:	3601      	adds	r6, #1
 80115e2:	e7f2      	b.n	80115ca <__libc_init_array+0x1e>
 80115e4:	08012458 	.word	0x08012458
 80115e8:	08012458 	.word	0x08012458
 80115ec:	08012458 	.word	0x08012458
 80115f0:	0801245c 	.word	0x0801245c

080115f4 <__retarget_lock_acquire_recursive>:
 80115f4:	4770      	bx	lr

080115f6 <__retarget_lock_release_recursive>:
 80115f6:	4770      	bx	lr

080115f8 <memcpy>:
 80115f8:	440a      	add	r2, r1
 80115fa:	4291      	cmp	r1, r2
 80115fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011600:	d100      	bne.n	8011604 <memcpy+0xc>
 8011602:	4770      	bx	lr
 8011604:	b510      	push	{r4, lr}
 8011606:	f811 4b01 	ldrb.w	r4, [r1], #1
 801160a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801160e:	4291      	cmp	r1, r2
 8011610:	d1f9      	bne.n	8011606 <memcpy+0xe>
 8011612:	bd10      	pop	{r4, pc}

08011614 <_free_r>:
 8011614:	b538      	push	{r3, r4, r5, lr}
 8011616:	4605      	mov	r5, r0
 8011618:	2900      	cmp	r1, #0
 801161a:	d041      	beq.n	80116a0 <_free_r+0x8c>
 801161c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011620:	1f0c      	subs	r4, r1, #4
 8011622:	2b00      	cmp	r3, #0
 8011624:	bfb8      	it	lt
 8011626:	18e4      	addlt	r4, r4, r3
 8011628:	f7ff ff26 	bl	8011478 <__malloc_lock>
 801162c:	4a1d      	ldr	r2, [pc, #116]	@ (80116a4 <_free_r+0x90>)
 801162e:	6813      	ldr	r3, [r2, #0]
 8011630:	b933      	cbnz	r3, 8011640 <_free_r+0x2c>
 8011632:	6063      	str	r3, [r4, #4]
 8011634:	6014      	str	r4, [r2, #0]
 8011636:	4628      	mov	r0, r5
 8011638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801163c:	f7ff bf22 	b.w	8011484 <__malloc_unlock>
 8011640:	42a3      	cmp	r3, r4
 8011642:	d908      	bls.n	8011656 <_free_r+0x42>
 8011644:	6820      	ldr	r0, [r4, #0]
 8011646:	1821      	adds	r1, r4, r0
 8011648:	428b      	cmp	r3, r1
 801164a:	bf01      	itttt	eq
 801164c:	6819      	ldreq	r1, [r3, #0]
 801164e:	685b      	ldreq	r3, [r3, #4]
 8011650:	1809      	addeq	r1, r1, r0
 8011652:	6021      	streq	r1, [r4, #0]
 8011654:	e7ed      	b.n	8011632 <_free_r+0x1e>
 8011656:	461a      	mov	r2, r3
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	b10b      	cbz	r3, 8011660 <_free_r+0x4c>
 801165c:	42a3      	cmp	r3, r4
 801165e:	d9fa      	bls.n	8011656 <_free_r+0x42>
 8011660:	6811      	ldr	r1, [r2, #0]
 8011662:	1850      	adds	r0, r2, r1
 8011664:	42a0      	cmp	r0, r4
 8011666:	d10b      	bne.n	8011680 <_free_r+0x6c>
 8011668:	6820      	ldr	r0, [r4, #0]
 801166a:	4401      	add	r1, r0
 801166c:	1850      	adds	r0, r2, r1
 801166e:	4283      	cmp	r3, r0
 8011670:	6011      	str	r1, [r2, #0]
 8011672:	d1e0      	bne.n	8011636 <_free_r+0x22>
 8011674:	6818      	ldr	r0, [r3, #0]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	6053      	str	r3, [r2, #4]
 801167a:	4408      	add	r0, r1
 801167c:	6010      	str	r0, [r2, #0]
 801167e:	e7da      	b.n	8011636 <_free_r+0x22>
 8011680:	d902      	bls.n	8011688 <_free_r+0x74>
 8011682:	230c      	movs	r3, #12
 8011684:	602b      	str	r3, [r5, #0]
 8011686:	e7d6      	b.n	8011636 <_free_r+0x22>
 8011688:	6820      	ldr	r0, [r4, #0]
 801168a:	1821      	adds	r1, r4, r0
 801168c:	428b      	cmp	r3, r1
 801168e:	bf04      	itt	eq
 8011690:	6819      	ldreq	r1, [r3, #0]
 8011692:	685b      	ldreq	r3, [r3, #4]
 8011694:	6063      	str	r3, [r4, #4]
 8011696:	bf04      	itt	eq
 8011698:	1809      	addeq	r1, r1, r0
 801169a:	6021      	streq	r1, [r4, #0]
 801169c:	6054      	str	r4, [r2, #4]
 801169e:	e7ca      	b.n	8011636 <_free_r+0x22>
 80116a0:	bd38      	pop	{r3, r4, r5, pc}
 80116a2:	bf00      	nop
 80116a4:	20001170 	.word	0x20001170

080116a8 <__ssputs_r>:
 80116a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116ac:	688e      	ldr	r6, [r1, #8]
 80116ae:	461f      	mov	r7, r3
 80116b0:	42be      	cmp	r6, r7
 80116b2:	680b      	ldr	r3, [r1, #0]
 80116b4:	4682      	mov	sl, r0
 80116b6:	460c      	mov	r4, r1
 80116b8:	4690      	mov	r8, r2
 80116ba:	d82d      	bhi.n	8011718 <__ssputs_r+0x70>
 80116bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80116c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80116c4:	d026      	beq.n	8011714 <__ssputs_r+0x6c>
 80116c6:	6965      	ldr	r5, [r4, #20]
 80116c8:	6909      	ldr	r1, [r1, #16]
 80116ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116ce:	eba3 0901 	sub.w	r9, r3, r1
 80116d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80116d6:	1c7b      	adds	r3, r7, #1
 80116d8:	444b      	add	r3, r9
 80116da:	106d      	asrs	r5, r5, #1
 80116dc:	429d      	cmp	r5, r3
 80116de:	bf38      	it	cc
 80116e0:	461d      	movcc	r5, r3
 80116e2:	0553      	lsls	r3, r2, #21
 80116e4:	d527      	bpl.n	8011736 <__ssputs_r+0x8e>
 80116e6:	4629      	mov	r1, r5
 80116e8:	f7ff fe46 	bl	8011378 <_malloc_r>
 80116ec:	4606      	mov	r6, r0
 80116ee:	b360      	cbz	r0, 801174a <__ssputs_r+0xa2>
 80116f0:	6921      	ldr	r1, [r4, #16]
 80116f2:	464a      	mov	r2, r9
 80116f4:	f7ff ff80 	bl	80115f8 <memcpy>
 80116f8:	89a3      	ldrh	r3, [r4, #12]
 80116fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80116fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011702:	81a3      	strh	r3, [r4, #12]
 8011704:	6126      	str	r6, [r4, #16]
 8011706:	6165      	str	r5, [r4, #20]
 8011708:	444e      	add	r6, r9
 801170a:	eba5 0509 	sub.w	r5, r5, r9
 801170e:	6026      	str	r6, [r4, #0]
 8011710:	60a5      	str	r5, [r4, #8]
 8011712:	463e      	mov	r6, r7
 8011714:	42be      	cmp	r6, r7
 8011716:	d900      	bls.n	801171a <__ssputs_r+0x72>
 8011718:	463e      	mov	r6, r7
 801171a:	6820      	ldr	r0, [r4, #0]
 801171c:	4632      	mov	r2, r6
 801171e:	4641      	mov	r1, r8
 8011720:	f7ff ff0c 	bl	801153c <memmove>
 8011724:	68a3      	ldr	r3, [r4, #8]
 8011726:	1b9b      	subs	r3, r3, r6
 8011728:	60a3      	str	r3, [r4, #8]
 801172a:	6823      	ldr	r3, [r4, #0]
 801172c:	4433      	add	r3, r6
 801172e:	6023      	str	r3, [r4, #0]
 8011730:	2000      	movs	r0, #0
 8011732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011736:	462a      	mov	r2, r5
 8011738:	f000 fa9c 	bl	8011c74 <_realloc_r>
 801173c:	4606      	mov	r6, r0
 801173e:	2800      	cmp	r0, #0
 8011740:	d1e0      	bne.n	8011704 <__ssputs_r+0x5c>
 8011742:	6921      	ldr	r1, [r4, #16]
 8011744:	4650      	mov	r0, sl
 8011746:	f7ff ff65 	bl	8011614 <_free_r>
 801174a:	230c      	movs	r3, #12
 801174c:	f8ca 3000 	str.w	r3, [sl]
 8011750:	89a3      	ldrh	r3, [r4, #12]
 8011752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011756:	81a3      	strh	r3, [r4, #12]
 8011758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801175c:	e7e9      	b.n	8011732 <__ssputs_r+0x8a>
	...

08011760 <_svfiprintf_r>:
 8011760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011764:	4698      	mov	r8, r3
 8011766:	898b      	ldrh	r3, [r1, #12]
 8011768:	061b      	lsls	r3, r3, #24
 801176a:	b09d      	sub	sp, #116	@ 0x74
 801176c:	4607      	mov	r7, r0
 801176e:	460d      	mov	r5, r1
 8011770:	4614      	mov	r4, r2
 8011772:	d510      	bpl.n	8011796 <_svfiprintf_r+0x36>
 8011774:	690b      	ldr	r3, [r1, #16]
 8011776:	b973      	cbnz	r3, 8011796 <_svfiprintf_r+0x36>
 8011778:	2140      	movs	r1, #64	@ 0x40
 801177a:	f7ff fdfd 	bl	8011378 <_malloc_r>
 801177e:	6028      	str	r0, [r5, #0]
 8011780:	6128      	str	r0, [r5, #16]
 8011782:	b930      	cbnz	r0, 8011792 <_svfiprintf_r+0x32>
 8011784:	230c      	movs	r3, #12
 8011786:	603b      	str	r3, [r7, #0]
 8011788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801178c:	b01d      	add	sp, #116	@ 0x74
 801178e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011792:	2340      	movs	r3, #64	@ 0x40
 8011794:	616b      	str	r3, [r5, #20]
 8011796:	2300      	movs	r3, #0
 8011798:	9309      	str	r3, [sp, #36]	@ 0x24
 801179a:	2320      	movs	r3, #32
 801179c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80117a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80117a4:	2330      	movs	r3, #48	@ 0x30
 80117a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011944 <_svfiprintf_r+0x1e4>
 80117aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80117ae:	f04f 0901 	mov.w	r9, #1
 80117b2:	4623      	mov	r3, r4
 80117b4:	469a      	mov	sl, r3
 80117b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117ba:	b10a      	cbz	r2, 80117c0 <_svfiprintf_r+0x60>
 80117bc:	2a25      	cmp	r2, #37	@ 0x25
 80117be:	d1f9      	bne.n	80117b4 <_svfiprintf_r+0x54>
 80117c0:	ebba 0b04 	subs.w	fp, sl, r4
 80117c4:	d00b      	beq.n	80117de <_svfiprintf_r+0x7e>
 80117c6:	465b      	mov	r3, fp
 80117c8:	4622      	mov	r2, r4
 80117ca:	4629      	mov	r1, r5
 80117cc:	4638      	mov	r0, r7
 80117ce:	f7ff ff6b 	bl	80116a8 <__ssputs_r>
 80117d2:	3001      	adds	r0, #1
 80117d4:	f000 80a7 	beq.w	8011926 <_svfiprintf_r+0x1c6>
 80117d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80117da:	445a      	add	r2, fp
 80117dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80117de:	f89a 3000 	ldrb.w	r3, [sl]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	f000 809f 	beq.w	8011926 <_svfiprintf_r+0x1c6>
 80117e8:	2300      	movs	r3, #0
 80117ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80117ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117f2:	f10a 0a01 	add.w	sl, sl, #1
 80117f6:	9304      	str	r3, [sp, #16]
 80117f8:	9307      	str	r3, [sp, #28]
 80117fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80117fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8011800:	4654      	mov	r4, sl
 8011802:	2205      	movs	r2, #5
 8011804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011808:	484e      	ldr	r0, [pc, #312]	@ (8011944 <_svfiprintf_r+0x1e4>)
 801180a:	f7ee fce9 	bl	80001e0 <memchr>
 801180e:	9a04      	ldr	r2, [sp, #16]
 8011810:	b9d8      	cbnz	r0, 801184a <_svfiprintf_r+0xea>
 8011812:	06d0      	lsls	r0, r2, #27
 8011814:	bf44      	itt	mi
 8011816:	2320      	movmi	r3, #32
 8011818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801181c:	0711      	lsls	r1, r2, #28
 801181e:	bf44      	itt	mi
 8011820:	232b      	movmi	r3, #43	@ 0x2b
 8011822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011826:	f89a 3000 	ldrb.w	r3, [sl]
 801182a:	2b2a      	cmp	r3, #42	@ 0x2a
 801182c:	d015      	beq.n	801185a <_svfiprintf_r+0xfa>
 801182e:	9a07      	ldr	r2, [sp, #28]
 8011830:	4654      	mov	r4, sl
 8011832:	2000      	movs	r0, #0
 8011834:	f04f 0c0a 	mov.w	ip, #10
 8011838:	4621      	mov	r1, r4
 801183a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801183e:	3b30      	subs	r3, #48	@ 0x30
 8011840:	2b09      	cmp	r3, #9
 8011842:	d94b      	bls.n	80118dc <_svfiprintf_r+0x17c>
 8011844:	b1b0      	cbz	r0, 8011874 <_svfiprintf_r+0x114>
 8011846:	9207      	str	r2, [sp, #28]
 8011848:	e014      	b.n	8011874 <_svfiprintf_r+0x114>
 801184a:	eba0 0308 	sub.w	r3, r0, r8
 801184e:	fa09 f303 	lsl.w	r3, r9, r3
 8011852:	4313      	orrs	r3, r2
 8011854:	9304      	str	r3, [sp, #16]
 8011856:	46a2      	mov	sl, r4
 8011858:	e7d2      	b.n	8011800 <_svfiprintf_r+0xa0>
 801185a:	9b03      	ldr	r3, [sp, #12]
 801185c:	1d19      	adds	r1, r3, #4
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	9103      	str	r1, [sp, #12]
 8011862:	2b00      	cmp	r3, #0
 8011864:	bfbb      	ittet	lt
 8011866:	425b      	neglt	r3, r3
 8011868:	f042 0202 	orrlt.w	r2, r2, #2
 801186c:	9307      	strge	r3, [sp, #28]
 801186e:	9307      	strlt	r3, [sp, #28]
 8011870:	bfb8      	it	lt
 8011872:	9204      	strlt	r2, [sp, #16]
 8011874:	7823      	ldrb	r3, [r4, #0]
 8011876:	2b2e      	cmp	r3, #46	@ 0x2e
 8011878:	d10a      	bne.n	8011890 <_svfiprintf_r+0x130>
 801187a:	7863      	ldrb	r3, [r4, #1]
 801187c:	2b2a      	cmp	r3, #42	@ 0x2a
 801187e:	d132      	bne.n	80118e6 <_svfiprintf_r+0x186>
 8011880:	9b03      	ldr	r3, [sp, #12]
 8011882:	1d1a      	adds	r2, r3, #4
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	9203      	str	r2, [sp, #12]
 8011888:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801188c:	3402      	adds	r4, #2
 801188e:	9305      	str	r3, [sp, #20]
 8011890:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011954 <_svfiprintf_r+0x1f4>
 8011894:	7821      	ldrb	r1, [r4, #0]
 8011896:	2203      	movs	r2, #3
 8011898:	4650      	mov	r0, sl
 801189a:	f7ee fca1 	bl	80001e0 <memchr>
 801189e:	b138      	cbz	r0, 80118b0 <_svfiprintf_r+0x150>
 80118a0:	9b04      	ldr	r3, [sp, #16]
 80118a2:	eba0 000a 	sub.w	r0, r0, sl
 80118a6:	2240      	movs	r2, #64	@ 0x40
 80118a8:	4082      	lsls	r2, r0
 80118aa:	4313      	orrs	r3, r2
 80118ac:	3401      	adds	r4, #1
 80118ae:	9304      	str	r3, [sp, #16]
 80118b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118b4:	4824      	ldr	r0, [pc, #144]	@ (8011948 <_svfiprintf_r+0x1e8>)
 80118b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80118ba:	2206      	movs	r2, #6
 80118bc:	f7ee fc90 	bl	80001e0 <memchr>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d036      	beq.n	8011932 <_svfiprintf_r+0x1d2>
 80118c4:	4b21      	ldr	r3, [pc, #132]	@ (801194c <_svfiprintf_r+0x1ec>)
 80118c6:	bb1b      	cbnz	r3, 8011910 <_svfiprintf_r+0x1b0>
 80118c8:	9b03      	ldr	r3, [sp, #12]
 80118ca:	3307      	adds	r3, #7
 80118cc:	f023 0307 	bic.w	r3, r3, #7
 80118d0:	3308      	adds	r3, #8
 80118d2:	9303      	str	r3, [sp, #12]
 80118d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118d6:	4433      	add	r3, r6
 80118d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80118da:	e76a      	b.n	80117b2 <_svfiprintf_r+0x52>
 80118dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80118e0:	460c      	mov	r4, r1
 80118e2:	2001      	movs	r0, #1
 80118e4:	e7a8      	b.n	8011838 <_svfiprintf_r+0xd8>
 80118e6:	2300      	movs	r3, #0
 80118e8:	3401      	adds	r4, #1
 80118ea:	9305      	str	r3, [sp, #20]
 80118ec:	4619      	mov	r1, r3
 80118ee:	f04f 0c0a 	mov.w	ip, #10
 80118f2:	4620      	mov	r0, r4
 80118f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118f8:	3a30      	subs	r2, #48	@ 0x30
 80118fa:	2a09      	cmp	r2, #9
 80118fc:	d903      	bls.n	8011906 <_svfiprintf_r+0x1a6>
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d0c6      	beq.n	8011890 <_svfiprintf_r+0x130>
 8011902:	9105      	str	r1, [sp, #20]
 8011904:	e7c4      	b.n	8011890 <_svfiprintf_r+0x130>
 8011906:	fb0c 2101 	mla	r1, ip, r1, r2
 801190a:	4604      	mov	r4, r0
 801190c:	2301      	movs	r3, #1
 801190e:	e7f0      	b.n	80118f2 <_svfiprintf_r+0x192>
 8011910:	ab03      	add	r3, sp, #12
 8011912:	9300      	str	r3, [sp, #0]
 8011914:	462a      	mov	r2, r5
 8011916:	4b0e      	ldr	r3, [pc, #56]	@ (8011950 <_svfiprintf_r+0x1f0>)
 8011918:	a904      	add	r1, sp, #16
 801191a:	4638      	mov	r0, r7
 801191c:	f3af 8000 	nop.w
 8011920:	1c42      	adds	r2, r0, #1
 8011922:	4606      	mov	r6, r0
 8011924:	d1d6      	bne.n	80118d4 <_svfiprintf_r+0x174>
 8011926:	89ab      	ldrh	r3, [r5, #12]
 8011928:	065b      	lsls	r3, r3, #25
 801192a:	f53f af2d 	bmi.w	8011788 <_svfiprintf_r+0x28>
 801192e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011930:	e72c      	b.n	801178c <_svfiprintf_r+0x2c>
 8011932:	ab03      	add	r3, sp, #12
 8011934:	9300      	str	r3, [sp, #0]
 8011936:	462a      	mov	r2, r5
 8011938:	4b05      	ldr	r3, [pc, #20]	@ (8011950 <_svfiprintf_r+0x1f0>)
 801193a:	a904      	add	r1, sp, #16
 801193c:	4638      	mov	r0, r7
 801193e:	f000 f879 	bl	8011a34 <_printf_i>
 8011942:	e7ed      	b.n	8011920 <_svfiprintf_r+0x1c0>
 8011944:	0801241a 	.word	0x0801241a
 8011948:	08012424 	.word	0x08012424
 801194c:	00000000 	.word	0x00000000
 8011950:	080116a9 	.word	0x080116a9
 8011954:	08012420 	.word	0x08012420

08011958 <_printf_common>:
 8011958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801195c:	4616      	mov	r6, r2
 801195e:	4698      	mov	r8, r3
 8011960:	688a      	ldr	r2, [r1, #8]
 8011962:	690b      	ldr	r3, [r1, #16]
 8011964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011968:	4293      	cmp	r3, r2
 801196a:	bfb8      	it	lt
 801196c:	4613      	movlt	r3, r2
 801196e:	6033      	str	r3, [r6, #0]
 8011970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011974:	4607      	mov	r7, r0
 8011976:	460c      	mov	r4, r1
 8011978:	b10a      	cbz	r2, 801197e <_printf_common+0x26>
 801197a:	3301      	adds	r3, #1
 801197c:	6033      	str	r3, [r6, #0]
 801197e:	6823      	ldr	r3, [r4, #0]
 8011980:	0699      	lsls	r1, r3, #26
 8011982:	bf42      	ittt	mi
 8011984:	6833      	ldrmi	r3, [r6, #0]
 8011986:	3302      	addmi	r3, #2
 8011988:	6033      	strmi	r3, [r6, #0]
 801198a:	6825      	ldr	r5, [r4, #0]
 801198c:	f015 0506 	ands.w	r5, r5, #6
 8011990:	d106      	bne.n	80119a0 <_printf_common+0x48>
 8011992:	f104 0a19 	add.w	sl, r4, #25
 8011996:	68e3      	ldr	r3, [r4, #12]
 8011998:	6832      	ldr	r2, [r6, #0]
 801199a:	1a9b      	subs	r3, r3, r2
 801199c:	42ab      	cmp	r3, r5
 801199e:	dc26      	bgt.n	80119ee <_printf_common+0x96>
 80119a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80119a4:	6822      	ldr	r2, [r4, #0]
 80119a6:	3b00      	subs	r3, #0
 80119a8:	bf18      	it	ne
 80119aa:	2301      	movne	r3, #1
 80119ac:	0692      	lsls	r2, r2, #26
 80119ae:	d42b      	bmi.n	8011a08 <_printf_common+0xb0>
 80119b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80119b4:	4641      	mov	r1, r8
 80119b6:	4638      	mov	r0, r7
 80119b8:	47c8      	blx	r9
 80119ba:	3001      	adds	r0, #1
 80119bc:	d01e      	beq.n	80119fc <_printf_common+0xa4>
 80119be:	6823      	ldr	r3, [r4, #0]
 80119c0:	6922      	ldr	r2, [r4, #16]
 80119c2:	f003 0306 	and.w	r3, r3, #6
 80119c6:	2b04      	cmp	r3, #4
 80119c8:	bf02      	ittt	eq
 80119ca:	68e5      	ldreq	r5, [r4, #12]
 80119cc:	6833      	ldreq	r3, [r6, #0]
 80119ce:	1aed      	subeq	r5, r5, r3
 80119d0:	68a3      	ldr	r3, [r4, #8]
 80119d2:	bf0c      	ite	eq
 80119d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80119d8:	2500      	movne	r5, #0
 80119da:	4293      	cmp	r3, r2
 80119dc:	bfc4      	itt	gt
 80119de:	1a9b      	subgt	r3, r3, r2
 80119e0:	18ed      	addgt	r5, r5, r3
 80119e2:	2600      	movs	r6, #0
 80119e4:	341a      	adds	r4, #26
 80119e6:	42b5      	cmp	r5, r6
 80119e8:	d11a      	bne.n	8011a20 <_printf_common+0xc8>
 80119ea:	2000      	movs	r0, #0
 80119ec:	e008      	b.n	8011a00 <_printf_common+0xa8>
 80119ee:	2301      	movs	r3, #1
 80119f0:	4652      	mov	r2, sl
 80119f2:	4641      	mov	r1, r8
 80119f4:	4638      	mov	r0, r7
 80119f6:	47c8      	blx	r9
 80119f8:	3001      	adds	r0, #1
 80119fa:	d103      	bne.n	8011a04 <_printf_common+0xac>
 80119fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a04:	3501      	adds	r5, #1
 8011a06:	e7c6      	b.n	8011996 <_printf_common+0x3e>
 8011a08:	18e1      	adds	r1, r4, r3
 8011a0a:	1c5a      	adds	r2, r3, #1
 8011a0c:	2030      	movs	r0, #48	@ 0x30
 8011a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011a12:	4422      	add	r2, r4
 8011a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011a1c:	3302      	adds	r3, #2
 8011a1e:	e7c7      	b.n	80119b0 <_printf_common+0x58>
 8011a20:	2301      	movs	r3, #1
 8011a22:	4622      	mov	r2, r4
 8011a24:	4641      	mov	r1, r8
 8011a26:	4638      	mov	r0, r7
 8011a28:	47c8      	blx	r9
 8011a2a:	3001      	adds	r0, #1
 8011a2c:	d0e6      	beq.n	80119fc <_printf_common+0xa4>
 8011a2e:	3601      	adds	r6, #1
 8011a30:	e7d9      	b.n	80119e6 <_printf_common+0x8e>
	...

08011a34 <_printf_i>:
 8011a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a38:	7e0f      	ldrb	r7, [r1, #24]
 8011a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011a3c:	2f78      	cmp	r7, #120	@ 0x78
 8011a3e:	4691      	mov	r9, r2
 8011a40:	4680      	mov	r8, r0
 8011a42:	460c      	mov	r4, r1
 8011a44:	469a      	mov	sl, r3
 8011a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011a4a:	d807      	bhi.n	8011a5c <_printf_i+0x28>
 8011a4c:	2f62      	cmp	r7, #98	@ 0x62
 8011a4e:	d80a      	bhi.n	8011a66 <_printf_i+0x32>
 8011a50:	2f00      	cmp	r7, #0
 8011a52:	f000 80d2 	beq.w	8011bfa <_printf_i+0x1c6>
 8011a56:	2f58      	cmp	r7, #88	@ 0x58
 8011a58:	f000 80b9 	beq.w	8011bce <_printf_i+0x19a>
 8011a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011a64:	e03a      	b.n	8011adc <_printf_i+0xa8>
 8011a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011a6a:	2b15      	cmp	r3, #21
 8011a6c:	d8f6      	bhi.n	8011a5c <_printf_i+0x28>
 8011a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8011a74 <_printf_i+0x40>)
 8011a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011a74:	08011acd 	.word	0x08011acd
 8011a78:	08011ae1 	.word	0x08011ae1
 8011a7c:	08011a5d 	.word	0x08011a5d
 8011a80:	08011a5d 	.word	0x08011a5d
 8011a84:	08011a5d 	.word	0x08011a5d
 8011a88:	08011a5d 	.word	0x08011a5d
 8011a8c:	08011ae1 	.word	0x08011ae1
 8011a90:	08011a5d 	.word	0x08011a5d
 8011a94:	08011a5d 	.word	0x08011a5d
 8011a98:	08011a5d 	.word	0x08011a5d
 8011a9c:	08011a5d 	.word	0x08011a5d
 8011aa0:	08011be1 	.word	0x08011be1
 8011aa4:	08011b0b 	.word	0x08011b0b
 8011aa8:	08011b9b 	.word	0x08011b9b
 8011aac:	08011a5d 	.word	0x08011a5d
 8011ab0:	08011a5d 	.word	0x08011a5d
 8011ab4:	08011c03 	.word	0x08011c03
 8011ab8:	08011a5d 	.word	0x08011a5d
 8011abc:	08011b0b 	.word	0x08011b0b
 8011ac0:	08011a5d 	.word	0x08011a5d
 8011ac4:	08011a5d 	.word	0x08011a5d
 8011ac8:	08011ba3 	.word	0x08011ba3
 8011acc:	6833      	ldr	r3, [r6, #0]
 8011ace:	1d1a      	adds	r2, r3, #4
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	6032      	str	r2, [r6, #0]
 8011ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011adc:	2301      	movs	r3, #1
 8011ade:	e09d      	b.n	8011c1c <_printf_i+0x1e8>
 8011ae0:	6833      	ldr	r3, [r6, #0]
 8011ae2:	6820      	ldr	r0, [r4, #0]
 8011ae4:	1d19      	adds	r1, r3, #4
 8011ae6:	6031      	str	r1, [r6, #0]
 8011ae8:	0606      	lsls	r6, r0, #24
 8011aea:	d501      	bpl.n	8011af0 <_printf_i+0xbc>
 8011aec:	681d      	ldr	r5, [r3, #0]
 8011aee:	e003      	b.n	8011af8 <_printf_i+0xc4>
 8011af0:	0645      	lsls	r5, r0, #25
 8011af2:	d5fb      	bpl.n	8011aec <_printf_i+0xb8>
 8011af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011af8:	2d00      	cmp	r5, #0
 8011afa:	da03      	bge.n	8011b04 <_printf_i+0xd0>
 8011afc:	232d      	movs	r3, #45	@ 0x2d
 8011afe:	426d      	negs	r5, r5
 8011b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011b04:	4859      	ldr	r0, [pc, #356]	@ (8011c6c <_printf_i+0x238>)
 8011b06:	230a      	movs	r3, #10
 8011b08:	e011      	b.n	8011b2e <_printf_i+0xfa>
 8011b0a:	6821      	ldr	r1, [r4, #0]
 8011b0c:	6833      	ldr	r3, [r6, #0]
 8011b0e:	0608      	lsls	r0, r1, #24
 8011b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8011b14:	d402      	bmi.n	8011b1c <_printf_i+0xe8>
 8011b16:	0649      	lsls	r1, r1, #25
 8011b18:	bf48      	it	mi
 8011b1a:	b2ad      	uxthmi	r5, r5
 8011b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8011b1e:	4853      	ldr	r0, [pc, #332]	@ (8011c6c <_printf_i+0x238>)
 8011b20:	6033      	str	r3, [r6, #0]
 8011b22:	bf14      	ite	ne
 8011b24:	230a      	movne	r3, #10
 8011b26:	2308      	moveq	r3, #8
 8011b28:	2100      	movs	r1, #0
 8011b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011b2e:	6866      	ldr	r6, [r4, #4]
 8011b30:	60a6      	str	r6, [r4, #8]
 8011b32:	2e00      	cmp	r6, #0
 8011b34:	bfa2      	ittt	ge
 8011b36:	6821      	ldrge	r1, [r4, #0]
 8011b38:	f021 0104 	bicge.w	r1, r1, #4
 8011b3c:	6021      	strge	r1, [r4, #0]
 8011b3e:	b90d      	cbnz	r5, 8011b44 <_printf_i+0x110>
 8011b40:	2e00      	cmp	r6, #0
 8011b42:	d04b      	beq.n	8011bdc <_printf_i+0x1a8>
 8011b44:	4616      	mov	r6, r2
 8011b46:	fbb5 f1f3 	udiv	r1, r5, r3
 8011b4a:	fb03 5711 	mls	r7, r3, r1, r5
 8011b4e:	5dc7      	ldrb	r7, [r0, r7]
 8011b50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011b54:	462f      	mov	r7, r5
 8011b56:	42bb      	cmp	r3, r7
 8011b58:	460d      	mov	r5, r1
 8011b5a:	d9f4      	bls.n	8011b46 <_printf_i+0x112>
 8011b5c:	2b08      	cmp	r3, #8
 8011b5e:	d10b      	bne.n	8011b78 <_printf_i+0x144>
 8011b60:	6823      	ldr	r3, [r4, #0]
 8011b62:	07df      	lsls	r7, r3, #31
 8011b64:	d508      	bpl.n	8011b78 <_printf_i+0x144>
 8011b66:	6923      	ldr	r3, [r4, #16]
 8011b68:	6861      	ldr	r1, [r4, #4]
 8011b6a:	4299      	cmp	r1, r3
 8011b6c:	bfde      	ittt	le
 8011b6e:	2330      	movle	r3, #48	@ 0x30
 8011b70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011b74:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011b78:	1b92      	subs	r2, r2, r6
 8011b7a:	6122      	str	r2, [r4, #16]
 8011b7c:	f8cd a000 	str.w	sl, [sp]
 8011b80:	464b      	mov	r3, r9
 8011b82:	aa03      	add	r2, sp, #12
 8011b84:	4621      	mov	r1, r4
 8011b86:	4640      	mov	r0, r8
 8011b88:	f7ff fee6 	bl	8011958 <_printf_common>
 8011b8c:	3001      	adds	r0, #1
 8011b8e:	d14a      	bne.n	8011c26 <_printf_i+0x1f2>
 8011b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b94:	b004      	add	sp, #16
 8011b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b9a:	6823      	ldr	r3, [r4, #0]
 8011b9c:	f043 0320 	orr.w	r3, r3, #32
 8011ba0:	6023      	str	r3, [r4, #0]
 8011ba2:	4833      	ldr	r0, [pc, #204]	@ (8011c70 <_printf_i+0x23c>)
 8011ba4:	2778      	movs	r7, #120	@ 0x78
 8011ba6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011baa:	6823      	ldr	r3, [r4, #0]
 8011bac:	6831      	ldr	r1, [r6, #0]
 8011bae:	061f      	lsls	r7, r3, #24
 8011bb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8011bb4:	d402      	bmi.n	8011bbc <_printf_i+0x188>
 8011bb6:	065f      	lsls	r7, r3, #25
 8011bb8:	bf48      	it	mi
 8011bba:	b2ad      	uxthmi	r5, r5
 8011bbc:	6031      	str	r1, [r6, #0]
 8011bbe:	07d9      	lsls	r1, r3, #31
 8011bc0:	bf44      	itt	mi
 8011bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8011bc6:	6023      	strmi	r3, [r4, #0]
 8011bc8:	b11d      	cbz	r5, 8011bd2 <_printf_i+0x19e>
 8011bca:	2310      	movs	r3, #16
 8011bcc:	e7ac      	b.n	8011b28 <_printf_i+0xf4>
 8011bce:	4827      	ldr	r0, [pc, #156]	@ (8011c6c <_printf_i+0x238>)
 8011bd0:	e7e9      	b.n	8011ba6 <_printf_i+0x172>
 8011bd2:	6823      	ldr	r3, [r4, #0]
 8011bd4:	f023 0320 	bic.w	r3, r3, #32
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	e7f6      	b.n	8011bca <_printf_i+0x196>
 8011bdc:	4616      	mov	r6, r2
 8011bde:	e7bd      	b.n	8011b5c <_printf_i+0x128>
 8011be0:	6833      	ldr	r3, [r6, #0]
 8011be2:	6825      	ldr	r5, [r4, #0]
 8011be4:	6961      	ldr	r1, [r4, #20]
 8011be6:	1d18      	adds	r0, r3, #4
 8011be8:	6030      	str	r0, [r6, #0]
 8011bea:	062e      	lsls	r6, r5, #24
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	d501      	bpl.n	8011bf4 <_printf_i+0x1c0>
 8011bf0:	6019      	str	r1, [r3, #0]
 8011bf2:	e002      	b.n	8011bfa <_printf_i+0x1c6>
 8011bf4:	0668      	lsls	r0, r5, #25
 8011bf6:	d5fb      	bpl.n	8011bf0 <_printf_i+0x1bc>
 8011bf8:	8019      	strh	r1, [r3, #0]
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	6123      	str	r3, [r4, #16]
 8011bfe:	4616      	mov	r6, r2
 8011c00:	e7bc      	b.n	8011b7c <_printf_i+0x148>
 8011c02:	6833      	ldr	r3, [r6, #0]
 8011c04:	1d1a      	adds	r2, r3, #4
 8011c06:	6032      	str	r2, [r6, #0]
 8011c08:	681e      	ldr	r6, [r3, #0]
 8011c0a:	6862      	ldr	r2, [r4, #4]
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	4630      	mov	r0, r6
 8011c10:	f7ee fae6 	bl	80001e0 <memchr>
 8011c14:	b108      	cbz	r0, 8011c1a <_printf_i+0x1e6>
 8011c16:	1b80      	subs	r0, r0, r6
 8011c18:	6060      	str	r0, [r4, #4]
 8011c1a:	6863      	ldr	r3, [r4, #4]
 8011c1c:	6123      	str	r3, [r4, #16]
 8011c1e:	2300      	movs	r3, #0
 8011c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c24:	e7aa      	b.n	8011b7c <_printf_i+0x148>
 8011c26:	6923      	ldr	r3, [r4, #16]
 8011c28:	4632      	mov	r2, r6
 8011c2a:	4649      	mov	r1, r9
 8011c2c:	4640      	mov	r0, r8
 8011c2e:	47d0      	blx	sl
 8011c30:	3001      	adds	r0, #1
 8011c32:	d0ad      	beq.n	8011b90 <_printf_i+0x15c>
 8011c34:	6823      	ldr	r3, [r4, #0]
 8011c36:	079b      	lsls	r3, r3, #30
 8011c38:	d413      	bmi.n	8011c62 <_printf_i+0x22e>
 8011c3a:	68e0      	ldr	r0, [r4, #12]
 8011c3c:	9b03      	ldr	r3, [sp, #12]
 8011c3e:	4298      	cmp	r0, r3
 8011c40:	bfb8      	it	lt
 8011c42:	4618      	movlt	r0, r3
 8011c44:	e7a6      	b.n	8011b94 <_printf_i+0x160>
 8011c46:	2301      	movs	r3, #1
 8011c48:	4632      	mov	r2, r6
 8011c4a:	4649      	mov	r1, r9
 8011c4c:	4640      	mov	r0, r8
 8011c4e:	47d0      	blx	sl
 8011c50:	3001      	adds	r0, #1
 8011c52:	d09d      	beq.n	8011b90 <_printf_i+0x15c>
 8011c54:	3501      	adds	r5, #1
 8011c56:	68e3      	ldr	r3, [r4, #12]
 8011c58:	9903      	ldr	r1, [sp, #12]
 8011c5a:	1a5b      	subs	r3, r3, r1
 8011c5c:	42ab      	cmp	r3, r5
 8011c5e:	dcf2      	bgt.n	8011c46 <_printf_i+0x212>
 8011c60:	e7eb      	b.n	8011c3a <_printf_i+0x206>
 8011c62:	2500      	movs	r5, #0
 8011c64:	f104 0619 	add.w	r6, r4, #25
 8011c68:	e7f5      	b.n	8011c56 <_printf_i+0x222>
 8011c6a:	bf00      	nop
 8011c6c:	0801242b 	.word	0x0801242b
 8011c70:	0801243c 	.word	0x0801243c

08011c74 <_realloc_r>:
 8011c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c78:	4680      	mov	r8, r0
 8011c7a:	4615      	mov	r5, r2
 8011c7c:	460c      	mov	r4, r1
 8011c7e:	b921      	cbnz	r1, 8011c8a <_realloc_r+0x16>
 8011c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c84:	4611      	mov	r1, r2
 8011c86:	f7ff bb77 	b.w	8011378 <_malloc_r>
 8011c8a:	b92a      	cbnz	r2, 8011c98 <_realloc_r+0x24>
 8011c8c:	f7ff fcc2 	bl	8011614 <_free_r>
 8011c90:	2400      	movs	r4, #0
 8011c92:	4620      	mov	r0, r4
 8011c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c98:	f000 f81a 	bl	8011cd0 <_malloc_usable_size_r>
 8011c9c:	4285      	cmp	r5, r0
 8011c9e:	4606      	mov	r6, r0
 8011ca0:	d802      	bhi.n	8011ca8 <_realloc_r+0x34>
 8011ca2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011ca6:	d8f4      	bhi.n	8011c92 <_realloc_r+0x1e>
 8011ca8:	4629      	mov	r1, r5
 8011caa:	4640      	mov	r0, r8
 8011cac:	f7ff fb64 	bl	8011378 <_malloc_r>
 8011cb0:	4607      	mov	r7, r0
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	d0ec      	beq.n	8011c90 <_realloc_r+0x1c>
 8011cb6:	42b5      	cmp	r5, r6
 8011cb8:	462a      	mov	r2, r5
 8011cba:	4621      	mov	r1, r4
 8011cbc:	bf28      	it	cs
 8011cbe:	4632      	movcs	r2, r6
 8011cc0:	f7ff fc9a 	bl	80115f8 <memcpy>
 8011cc4:	4621      	mov	r1, r4
 8011cc6:	4640      	mov	r0, r8
 8011cc8:	f7ff fca4 	bl	8011614 <_free_r>
 8011ccc:	463c      	mov	r4, r7
 8011cce:	e7e0      	b.n	8011c92 <_realloc_r+0x1e>

08011cd0 <_malloc_usable_size_r>:
 8011cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cd4:	1f18      	subs	r0, r3, #4
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	bfbc      	itt	lt
 8011cda:	580b      	ldrlt	r3, [r1, r0]
 8011cdc:	18c0      	addlt	r0, r0, r3
 8011cde:	4770      	bx	lr

08011ce0 <_init>:
 8011ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce2:	bf00      	nop
 8011ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ce6:	bc08      	pop	{r3}
 8011ce8:	469e      	mov	lr, r3
 8011cea:	4770      	bx	lr

08011cec <_fini>:
 8011cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cee:	bf00      	nop
 8011cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cf2:	bc08      	pop	{r3}
 8011cf4:	469e      	mov	lr, r3
 8011cf6:	4770      	bx	lr
