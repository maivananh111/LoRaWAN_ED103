
Example_LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007978  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08007a38  08007a38  00008a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d48  08007d48  000090c4  2**0
                  CONTENTS
  4 .ARM          00000000  08007d48  08007d48  000090c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d48  08007d48  000090c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d48  08007d48  00008d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d4c  08007d4c  00008d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  08007d50  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200000c4  08007e14  000090c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08007e14  000092d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000090c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac18  00000000  00000000  000090ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b6  00000000  00000000  00013d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00015ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083b  00000000  00000000  000169c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001902e  00000000  00000000  000171fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc1c  00000000  00000000  00030229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b759  00000000  00000000  0003be45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d759e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c0  00000000  00000000  000d75e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d9ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c4 	.word	0x200000c4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a20 	.word	0x08007a20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c8 	.word	0x200000c8
 8000104:	08007a20 	.word	0x08007a20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 ff87 	bl	8001144 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fec7 	bl	8000fd4 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 ff79 	bl	8001144 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 ff6f 	bl	8001144 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fef1 	bl	800105c <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fee7 	bl	800105c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_d2uiz>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	2200      	movs	r2, #0
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <__aeabi_d2uiz+0x38>)
 80002a2:	0004      	movs	r4, r0
 80002a4:	000d      	movs	r5, r1
 80002a6:	f7ff ffef 	bl	8000288 <__aeabi_dcmpge>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d104      	bne.n	80002b8 <__aeabi_d2uiz+0x1c>
 80002ae:	0020      	movs	r0, r4
 80002b0:	0029      	movs	r1, r5
 80002b2:	f001 fe1d 	bl	8001ef0 <__aeabi_d2iz>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <__aeabi_d2uiz+0x38>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	0020      	movs	r0, r4
 80002be:	0029      	movs	r1, r5
 80002c0:	f001 fa7a 	bl	80017b8 <__aeabi_dsub>
 80002c4:	f001 fe14 	bl	8001ef0 <__aeabi_d2iz>
 80002c8:	2380      	movs	r3, #128	@ 0x80
 80002ca:	061b      	lsls	r3, r3, #24
 80002cc:	469c      	mov	ip, r3
 80002ce:	4460      	add	r0, ip
 80002d0:	e7f1      	b.n	80002b6 <__aeabi_d2uiz+0x1a>
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	41e00000 	.word	0x41e00000

080002d8 <__aeabi_dadd>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	4657      	mov	r7, sl
 80002dc:	464e      	mov	r6, r9
 80002de:	4645      	mov	r5, r8
 80002e0:	46de      	mov	lr, fp
 80002e2:	b5e0      	push	{r5, r6, r7, lr}
 80002e4:	b083      	sub	sp, #12
 80002e6:	9000      	str	r0, [sp, #0]
 80002e8:	9101      	str	r1, [sp, #4]
 80002ea:	030c      	lsls	r4, r1, #12
 80002ec:	004f      	lsls	r7, r1, #1
 80002ee:	0fce      	lsrs	r6, r1, #31
 80002f0:	0a61      	lsrs	r1, r4, #9
 80002f2:	9c00      	ldr	r4, [sp, #0]
 80002f4:	031d      	lsls	r5, r3, #12
 80002f6:	0f64      	lsrs	r4, r4, #29
 80002f8:	430c      	orrs	r4, r1
 80002fa:	9900      	ldr	r1, [sp, #0]
 80002fc:	9200      	str	r2, [sp, #0]
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	00c8      	lsls	r0, r1, #3
 8000302:	0059      	lsls	r1, r3, #1
 8000304:	0d4b      	lsrs	r3, r1, #21
 8000306:	4699      	mov	r9, r3
 8000308:	9a00      	ldr	r2, [sp, #0]
 800030a:	9b01      	ldr	r3, [sp, #4]
 800030c:	0a6d      	lsrs	r5, r5, #9
 800030e:	0fd9      	lsrs	r1, r3, #31
 8000310:	0f53      	lsrs	r3, r2, #29
 8000312:	432b      	orrs	r3, r5
 8000314:	469a      	mov	sl, r3
 8000316:	9b00      	ldr	r3, [sp, #0]
 8000318:	0d7f      	lsrs	r7, r7, #21
 800031a:	00da      	lsls	r2, r3, #3
 800031c:	4694      	mov	ip, r2
 800031e:	464a      	mov	r2, r9
 8000320:	46b0      	mov	r8, r6
 8000322:	1aba      	subs	r2, r7, r2
 8000324:	428e      	cmp	r6, r1
 8000326:	d100      	bne.n	800032a <__aeabi_dadd+0x52>
 8000328:	e0b0      	b.n	800048c <__aeabi_dadd+0x1b4>
 800032a:	2a00      	cmp	r2, #0
 800032c:	dc00      	bgt.n	8000330 <__aeabi_dadd+0x58>
 800032e:	e078      	b.n	8000422 <__aeabi_dadd+0x14a>
 8000330:	4649      	mov	r1, r9
 8000332:	2900      	cmp	r1, #0
 8000334:	d100      	bne.n	8000338 <__aeabi_dadd+0x60>
 8000336:	e0e9      	b.n	800050c <__aeabi_dadd+0x234>
 8000338:	49c9      	ldr	r1, [pc, #804]	@ (8000660 <__aeabi_dadd+0x388>)
 800033a:	428f      	cmp	r7, r1
 800033c:	d100      	bne.n	8000340 <__aeabi_dadd+0x68>
 800033e:	e195      	b.n	800066c <__aeabi_dadd+0x394>
 8000340:	2501      	movs	r5, #1
 8000342:	2a38      	cmp	r2, #56	@ 0x38
 8000344:	dc16      	bgt.n	8000374 <__aeabi_dadd+0x9c>
 8000346:	2180      	movs	r1, #128	@ 0x80
 8000348:	4653      	mov	r3, sl
 800034a:	0409      	lsls	r1, r1, #16
 800034c:	430b      	orrs	r3, r1
 800034e:	469a      	mov	sl, r3
 8000350:	2a1f      	cmp	r2, #31
 8000352:	dd00      	ble.n	8000356 <__aeabi_dadd+0x7e>
 8000354:	e1e7      	b.n	8000726 <__aeabi_dadd+0x44e>
 8000356:	2120      	movs	r1, #32
 8000358:	4655      	mov	r5, sl
 800035a:	1a8b      	subs	r3, r1, r2
 800035c:	4661      	mov	r1, ip
 800035e:	409d      	lsls	r5, r3
 8000360:	40d1      	lsrs	r1, r2
 8000362:	430d      	orrs	r5, r1
 8000364:	4661      	mov	r1, ip
 8000366:	4099      	lsls	r1, r3
 8000368:	1e4b      	subs	r3, r1, #1
 800036a:	4199      	sbcs	r1, r3
 800036c:	4653      	mov	r3, sl
 800036e:	40d3      	lsrs	r3, r2
 8000370:	430d      	orrs	r5, r1
 8000372:	1ae4      	subs	r4, r4, r3
 8000374:	1b45      	subs	r5, r0, r5
 8000376:	42a8      	cmp	r0, r5
 8000378:	4180      	sbcs	r0, r0
 800037a:	4240      	negs	r0, r0
 800037c:	1a24      	subs	r4, r4, r0
 800037e:	0223      	lsls	r3, r4, #8
 8000380:	d400      	bmi.n	8000384 <__aeabi_dadd+0xac>
 8000382:	e10f      	b.n	80005a4 <__aeabi_dadd+0x2cc>
 8000384:	0264      	lsls	r4, r4, #9
 8000386:	0a64      	lsrs	r4, r4, #9
 8000388:	2c00      	cmp	r4, #0
 800038a:	d100      	bne.n	800038e <__aeabi_dadd+0xb6>
 800038c:	e139      	b.n	8000602 <__aeabi_dadd+0x32a>
 800038e:	0020      	movs	r0, r4
 8000390:	f001 fe3c 	bl	800200c <__clzsi2>
 8000394:	0003      	movs	r3, r0
 8000396:	3b08      	subs	r3, #8
 8000398:	2120      	movs	r1, #32
 800039a:	0028      	movs	r0, r5
 800039c:	1aca      	subs	r2, r1, r3
 800039e:	40d0      	lsrs	r0, r2
 80003a0:	409c      	lsls	r4, r3
 80003a2:	0002      	movs	r2, r0
 80003a4:	409d      	lsls	r5, r3
 80003a6:	4322      	orrs	r2, r4
 80003a8:	429f      	cmp	r7, r3
 80003aa:	dd00      	ble.n	80003ae <__aeabi_dadd+0xd6>
 80003ac:	e173      	b.n	8000696 <__aeabi_dadd+0x3be>
 80003ae:	1bd8      	subs	r0, r3, r7
 80003b0:	3001      	adds	r0, #1
 80003b2:	1a09      	subs	r1, r1, r0
 80003b4:	002c      	movs	r4, r5
 80003b6:	408d      	lsls	r5, r1
 80003b8:	40c4      	lsrs	r4, r0
 80003ba:	1e6b      	subs	r3, r5, #1
 80003bc:	419d      	sbcs	r5, r3
 80003be:	0013      	movs	r3, r2
 80003c0:	40c2      	lsrs	r2, r0
 80003c2:	408b      	lsls	r3, r1
 80003c4:	4325      	orrs	r5, r4
 80003c6:	2700      	movs	r7, #0
 80003c8:	0014      	movs	r4, r2
 80003ca:	431d      	orrs	r5, r3
 80003cc:	076b      	lsls	r3, r5, #29
 80003ce:	d009      	beq.n	80003e4 <__aeabi_dadd+0x10c>
 80003d0:	230f      	movs	r3, #15
 80003d2:	402b      	ands	r3, r5
 80003d4:	2b04      	cmp	r3, #4
 80003d6:	d005      	beq.n	80003e4 <__aeabi_dadd+0x10c>
 80003d8:	1d2b      	adds	r3, r5, #4
 80003da:	42ab      	cmp	r3, r5
 80003dc:	41ad      	sbcs	r5, r5
 80003de:	426d      	negs	r5, r5
 80003e0:	1964      	adds	r4, r4, r5
 80003e2:	001d      	movs	r5, r3
 80003e4:	0223      	lsls	r3, r4, #8
 80003e6:	d400      	bmi.n	80003ea <__aeabi_dadd+0x112>
 80003e8:	e12d      	b.n	8000646 <__aeabi_dadd+0x36e>
 80003ea:	4a9d      	ldr	r2, [pc, #628]	@ (8000660 <__aeabi_dadd+0x388>)
 80003ec:	3701      	adds	r7, #1
 80003ee:	4297      	cmp	r7, r2
 80003f0:	d100      	bne.n	80003f4 <__aeabi_dadd+0x11c>
 80003f2:	e0d3      	b.n	800059c <__aeabi_dadd+0x2c4>
 80003f4:	4646      	mov	r6, r8
 80003f6:	499b      	ldr	r1, [pc, #620]	@ (8000664 <__aeabi_dadd+0x38c>)
 80003f8:	08ed      	lsrs	r5, r5, #3
 80003fa:	4021      	ands	r1, r4
 80003fc:	074a      	lsls	r2, r1, #29
 80003fe:	432a      	orrs	r2, r5
 8000400:	057c      	lsls	r4, r7, #21
 8000402:	024d      	lsls	r5, r1, #9
 8000404:	0b2d      	lsrs	r5, r5, #12
 8000406:	0d64      	lsrs	r4, r4, #21
 8000408:	0524      	lsls	r4, r4, #20
 800040a:	432c      	orrs	r4, r5
 800040c:	07f6      	lsls	r6, r6, #31
 800040e:	4334      	orrs	r4, r6
 8000410:	0010      	movs	r0, r2
 8000412:	0021      	movs	r1, r4
 8000414:	b003      	add	sp, #12
 8000416:	bcf0      	pop	{r4, r5, r6, r7}
 8000418:	46bb      	mov	fp, r7
 800041a:	46b2      	mov	sl, r6
 800041c:	46a9      	mov	r9, r5
 800041e:	46a0      	mov	r8, r4
 8000420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000422:	2a00      	cmp	r2, #0
 8000424:	d100      	bne.n	8000428 <__aeabi_dadd+0x150>
 8000426:	e084      	b.n	8000532 <__aeabi_dadd+0x25a>
 8000428:	464a      	mov	r2, r9
 800042a:	1bd2      	subs	r2, r2, r7
 800042c:	2f00      	cmp	r7, #0
 800042e:	d000      	beq.n	8000432 <__aeabi_dadd+0x15a>
 8000430:	e16d      	b.n	800070e <__aeabi_dadd+0x436>
 8000432:	0025      	movs	r5, r4
 8000434:	4305      	orrs	r5, r0
 8000436:	d100      	bne.n	800043a <__aeabi_dadd+0x162>
 8000438:	e127      	b.n	800068a <__aeabi_dadd+0x3b2>
 800043a:	1e56      	subs	r6, r2, #1
 800043c:	2a01      	cmp	r2, #1
 800043e:	d100      	bne.n	8000442 <__aeabi_dadd+0x16a>
 8000440:	e23b      	b.n	80008ba <__aeabi_dadd+0x5e2>
 8000442:	4d87      	ldr	r5, [pc, #540]	@ (8000660 <__aeabi_dadd+0x388>)
 8000444:	42aa      	cmp	r2, r5
 8000446:	d100      	bne.n	800044a <__aeabi_dadd+0x172>
 8000448:	e26a      	b.n	8000920 <__aeabi_dadd+0x648>
 800044a:	2501      	movs	r5, #1
 800044c:	2e38      	cmp	r6, #56	@ 0x38
 800044e:	dc12      	bgt.n	8000476 <__aeabi_dadd+0x19e>
 8000450:	0032      	movs	r2, r6
 8000452:	2a1f      	cmp	r2, #31
 8000454:	dd00      	ble.n	8000458 <__aeabi_dadd+0x180>
 8000456:	e1f8      	b.n	800084a <__aeabi_dadd+0x572>
 8000458:	2620      	movs	r6, #32
 800045a:	0025      	movs	r5, r4
 800045c:	1ab6      	subs	r6, r6, r2
 800045e:	0007      	movs	r7, r0
 8000460:	4653      	mov	r3, sl
 8000462:	40b0      	lsls	r0, r6
 8000464:	40d4      	lsrs	r4, r2
 8000466:	40b5      	lsls	r5, r6
 8000468:	40d7      	lsrs	r7, r2
 800046a:	1e46      	subs	r6, r0, #1
 800046c:	41b0      	sbcs	r0, r6
 800046e:	1b1b      	subs	r3, r3, r4
 8000470:	469a      	mov	sl, r3
 8000472:	433d      	orrs	r5, r7
 8000474:	4305      	orrs	r5, r0
 8000476:	4662      	mov	r2, ip
 8000478:	1b55      	subs	r5, r2, r5
 800047a:	45ac      	cmp	ip, r5
 800047c:	4192      	sbcs	r2, r2
 800047e:	4653      	mov	r3, sl
 8000480:	4252      	negs	r2, r2
 8000482:	000e      	movs	r6, r1
 8000484:	464f      	mov	r7, r9
 8000486:	4688      	mov	r8, r1
 8000488:	1a9c      	subs	r4, r3, r2
 800048a:	e778      	b.n	800037e <__aeabi_dadd+0xa6>
 800048c:	2a00      	cmp	r2, #0
 800048e:	dc00      	bgt.n	8000492 <__aeabi_dadd+0x1ba>
 8000490:	e08e      	b.n	80005b0 <__aeabi_dadd+0x2d8>
 8000492:	4649      	mov	r1, r9
 8000494:	2900      	cmp	r1, #0
 8000496:	d175      	bne.n	8000584 <__aeabi_dadd+0x2ac>
 8000498:	4661      	mov	r1, ip
 800049a:	4653      	mov	r3, sl
 800049c:	4319      	orrs	r1, r3
 800049e:	d100      	bne.n	80004a2 <__aeabi_dadd+0x1ca>
 80004a0:	e0f6      	b.n	8000690 <__aeabi_dadd+0x3b8>
 80004a2:	1e51      	subs	r1, r2, #1
 80004a4:	2a01      	cmp	r2, #1
 80004a6:	d100      	bne.n	80004aa <__aeabi_dadd+0x1d2>
 80004a8:	e191      	b.n	80007ce <__aeabi_dadd+0x4f6>
 80004aa:	4d6d      	ldr	r5, [pc, #436]	@ (8000660 <__aeabi_dadd+0x388>)
 80004ac:	42aa      	cmp	r2, r5
 80004ae:	d100      	bne.n	80004b2 <__aeabi_dadd+0x1da>
 80004b0:	e0dc      	b.n	800066c <__aeabi_dadd+0x394>
 80004b2:	2501      	movs	r5, #1
 80004b4:	2938      	cmp	r1, #56	@ 0x38
 80004b6:	dc14      	bgt.n	80004e2 <__aeabi_dadd+0x20a>
 80004b8:	000a      	movs	r2, r1
 80004ba:	2a1f      	cmp	r2, #31
 80004bc:	dd00      	ble.n	80004c0 <__aeabi_dadd+0x1e8>
 80004be:	e1a2      	b.n	8000806 <__aeabi_dadd+0x52e>
 80004c0:	2120      	movs	r1, #32
 80004c2:	4653      	mov	r3, sl
 80004c4:	1a89      	subs	r1, r1, r2
 80004c6:	408b      	lsls	r3, r1
 80004c8:	001d      	movs	r5, r3
 80004ca:	4663      	mov	r3, ip
 80004cc:	40d3      	lsrs	r3, r2
 80004ce:	431d      	orrs	r5, r3
 80004d0:	4663      	mov	r3, ip
 80004d2:	408b      	lsls	r3, r1
 80004d4:	0019      	movs	r1, r3
 80004d6:	1e4b      	subs	r3, r1, #1
 80004d8:	4199      	sbcs	r1, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	40d3      	lsrs	r3, r2
 80004de:	430d      	orrs	r5, r1
 80004e0:	18e4      	adds	r4, r4, r3
 80004e2:	182d      	adds	r5, r5, r0
 80004e4:	4285      	cmp	r5, r0
 80004e6:	4180      	sbcs	r0, r0
 80004e8:	4240      	negs	r0, r0
 80004ea:	1824      	adds	r4, r4, r0
 80004ec:	0223      	lsls	r3, r4, #8
 80004ee:	d559      	bpl.n	80005a4 <__aeabi_dadd+0x2cc>
 80004f0:	4b5b      	ldr	r3, [pc, #364]	@ (8000660 <__aeabi_dadd+0x388>)
 80004f2:	3701      	adds	r7, #1
 80004f4:	429f      	cmp	r7, r3
 80004f6:	d051      	beq.n	800059c <__aeabi_dadd+0x2c4>
 80004f8:	2101      	movs	r1, #1
 80004fa:	4b5a      	ldr	r3, [pc, #360]	@ (8000664 <__aeabi_dadd+0x38c>)
 80004fc:	086a      	lsrs	r2, r5, #1
 80004fe:	401c      	ands	r4, r3
 8000500:	4029      	ands	r1, r5
 8000502:	430a      	orrs	r2, r1
 8000504:	07e5      	lsls	r5, r4, #31
 8000506:	4315      	orrs	r5, r2
 8000508:	0864      	lsrs	r4, r4, #1
 800050a:	e75f      	b.n	80003cc <__aeabi_dadd+0xf4>
 800050c:	4661      	mov	r1, ip
 800050e:	4653      	mov	r3, sl
 8000510:	4319      	orrs	r1, r3
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0x23e>
 8000514:	e0bc      	b.n	8000690 <__aeabi_dadd+0x3b8>
 8000516:	1e51      	subs	r1, r2, #1
 8000518:	2a01      	cmp	r2, #1
 800051a:	d100      	bne.n	800051e <__aeabi_dadd+0x246>
 800051c:	e164      	b.n	80007e8 <__aeabi_dadd+0x510>
 800051e:	4d50      	ldr	r5, [pc, #320]	@ (8000660 <__aeabi_dadd+0x388>)
 8000520:	42aa      	cmp	r2, r5
 8000522:	d100      	bne.n	8000526 <__aeabi_dadd+0x24e>
 8000524:	e16a      	b.n	80007fc <__aeabi_dadd+0x524>
 8000526:	2501      	movs	r5, #1
 8000528:	2938      	cmp	r1, #56	@ 0x38
 800052a:	dd00      	ble.n	800052e <__aeabi_dadd+0x256>
 800052c:	e722      	b.n	8000374 <__aeabi_dadd+0x9c>
 800052e:	000a      	movs	r2, r1
 8000530:	e70e      	b.n	8000350 <__aeabi_dadd+0x78>
 8000532:	4a4d      	ldr	r2, [pc, #308]	@ (8000668 <__aeabi_dadd+0x390>)
 8000534:	1c7d      	adds	r5, r7, #1
 8000536:	4215      	tst	r5, r2
 8000538:	d000      	beq.n	800053c <__aeabi_dadd+0x264>
 800053a:	e0d0      	b.n	80006de <__aeabi_dadd+0x406>
 800053c:	0025      	movs	r5, r4
 800053e:	4662      	mov	r2, ip
 8000540:	4653      	mov	r3, sl
 8000542:	4305      	orrs	r5, r0
 8000544:	431a      	orrs	r2, r3
 8000546:	2f00      	cmp	r7, #0
 8000548:	d000      	beq.n	800054c <__aeabi_dadd+0x274>
 800054a:	e137      	b.n	80007bc <__aeabi_dadd+0x4e4>
 800054c:	2d00      	cmp	r5, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_dadd+0x27a>
 8000550:	e1a8      	b.n	80008a4 <__aeabi_dadd+0x5cc>
 8000552:	2a00      	cmp	r2, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_dadd+0x280>
 8000556:	e16a      	b.n	800082e <__aeabi_dadd+0x556>
 8000558:	4663      	mov	r3, ip
 800055a:	1ac5      	subs	r5, r0, r3
 800055c:	4653      	mov	r3, sl
 800055e:	1ae2      	subs	r2, r4, r3
 8000560:	42a8      	cmp	r0, r5
 8000562:	419b      	sbcs	r3, r3
 8000564:	425b      	negs	r3, r3
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	021a      	lsls	r2, r3, #8
 800056a:	d400      	bmi.n	800056e <__aeabi_dadd+0x296>
 800056c:	e203      	b.n	8000976 <__aeabi_dadd+0x69e>
 800056e:	4663      	mov	r3, ip
 8000570:	1a1d      	subs	r5, r3, r0
 8000572:	45ac      	cmp	ip, r5
 8000574:	4192      	sbcs	r2, r2
 8000576:	4653      	mov	r3, sl
 8000578:	4252      	negs	r2, r2
 800057a:	1b1c      	subs	r4, r3, r4
 800057c:	000e      	movs	r6, r1
 800057e:	4688      	mov	r8, r1
 8000580:	1aa4      	subs	r4, r4, r2
 8000582:	e723      	b.n	80003cc <__aeabi_dadd+0xf4>
 8000584:	4936      	ldr	r1, [pc, #216]	@ (8000660 <__aeabi_dadd+0x388>)
 8000586:	428f      	cmp	r7, r1
 8000588:	d070      	beq.n	800066c <__aeabi_dadd+0x394>
 800058a:	2501      	movs	r5, #1
 800058c:	2a38      	cmp	r2, #56	@ 0x38
 800058e:	dca8      	bgt.n	80004e2 <__aeabi_dadd+0x20a>
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	4653      	mov	r3, sl
 8000594:	0409      	lsls	r1, r1, #16
 8000596:	430b      	orrs	r3, r1
 8000598:	469a      	mov	sl, r3
 800059a:	e78e      	b.n	80004ba <__aeabi_dadd+0x1e2>
 800059c:	003c      	movs	r4, r7
 800059e:	2500      	movs	r5, #0
 80005a0:	2200      	movs	r2, #0
 80005a2:	e731      	b.n	8000408 <__aeabi_dadd+0x130>
 80005a4:	2307      	movs	r3, #7
 80005a6:	402b      	ands	r3, r5
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_dadd+0x2d6>
 80005ac:	e710      	b.n	80003d0 <__aeabi_dadd+0xf8>
 80005ae:	e093      	b.n	80006d8 <__aeabi_dadd+0x400>
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	d074      	beq.n	800069e <__aeabi_dadd+0x3c6>
 80005b4:	464a      	mov	r2, r9
 80005b6:	1bd2      	subs	r2, r2, r7
 80005b8:	2f00      	cmp	r7, #0
 80005ba:	d100      	bne.n	80005be <__aeabi_dadd+0x2e6>
 80005bc:	e0c7      	b.n	800074e <__aeabi_dadd+0x476>
 80005be:	4928      	ldr	r1, [pc, #160]	@ (8000660 <__aeabi_dadd+0x388>)
 80005c0:	4589      	cmp	r9, r1
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x2ee>
 80005c4:	e185      	b.n	80008d2 <__aeabi_dadd+0x5fa>
 80005c6:	2501      	movs	r5, #1
 80005c8:	2a38      	cmp	r2, #56	@ 0x38
 80005ca:	dc12      	bgt.n	80005f2 <__aeabi_dadd+0x31a>
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	0409      	lsls	r1, r1, #16
 80005d0:	430c      	orrs	r4, r1
 80005d2:	2a1f      	cmp	r2, #31
 80005d4:	dd00      	ble.n	80005d8 <__aeabi_dadd+0x300>
 80005d6:	e1ab      	b.n	8000930 <__aeabi_dadd+0x658>
 80005d8:	2120      	movs	r1, #32
 80005da:	0025      	movs	r5, r4
 80005dc:	1a89      	subs	r1, r1, r2
 80005de:	0007      	movs	r7, r0
 80005e0:	4088      	lsls	r0, r1
 80005e2:	408d      	lsls	r5, r1
 80005e4:	40d7      	lsrs	r7, r2
 80005e6:	1e41      	subs	r1, r0, #1
 80005e8:	4188      	sbcs	r0, r1
 80005ea:	40d4      	lsrs	r4, r2
 80005ec:	433d      	orrs	r5, r7
 80005ee:	4305      	orrs	r5, r0
 80005f0:	44a2      	add	sl, r4
 80005f2:	4465      	add	r5, ip
 80005f4:	4565      	cmp	r5, ip
 80005f6:	4192      	sbcs	r2, r2
 80005f8:	4252      	negs	r2, r2
 80005fa:	4452      	add	r2, sl
 80005fc:	0014      	movs	r4, r2
 80005fe:	464f      	mov	r7, r9
 8000600:	e774      	b.n	80004ec <__aeabi_dadd+0x214>
 8000602:	0028      	movs	r0, r5
 8000604:	f001 fd02 	bl	800200c <__clzsi2>
 8000608:	0003      	movs	r3, r0
 800060a:	3318      	adds	r3, #24
 800060c:	2b1f      	cmp	r3, #31
 800060e:	dc00      	bgt.n	8000612 <__aeabi_dadd+0x33a>
 8000610:	e6c2      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000612:	002a      	movs	r2, r5
 8000614:	3808      	subs	r0, #8
 8000616:	4082      	lsls	r2, r0
 8000618:	429f      	cmp	r7, r3
 800061a:	dd00      	ble.n	800061e <__aeabi_dadd+0x346>
 800061c:	e0a9      	b.n	8000772 <__aeabi_dadd+0x49a>
 800061e:	1bdb      	subs	r3, r3, r7
 8000620:	1c58      	adds	r0, r3, #1
 8000622:	281f      	cmp	r0, #31
 8000624:	dc00      	bgt.n	8000628 <__aeabi_dadd+0x350>
 8000626:	e1ac      	b.n	8000982 <__aeabi_dadd+0x6aa>
 8000628:	0015      	movs	r5, r2
 800062a:	3b1f      	subs	r3, #31
 800062c:	40dd      	lsrs	r5, r3
 800062e:	2820      	cmp	r0, #32
 8000630:	d005      	beq.n	800063e <__aeabi_dadd+0x366>
 8000632:	2340      	movs	r3, #64	@ 0x40
 8000634:	1a1b      	subs	r3, r3, r0
 8000636:	409a      	lsls	r2, r3
 8000638:	1e53      	subs	r3, r2, #1
 800063a:	419a      	sbcs	r2, r3
 800063c:	4315      	orrs	r5, r2
 800063e:	2307      	movs	r3, #7
 8000640:	2700      	movs	r7, #0
 8000642:	402b      	ands	r3, r5
 8000644:	e7b0      	b.n	80005a8 <__aeabi_dadd+0x2d0>
 8000646:	08ed      	lsrs	r5, r5, #3
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <__aeabi_dadd+0x388>)
 800064a:	0762      	lsls	r2, r4, #29
 800064c:	432a      	orrs	r2, r5
 800064e:	08e4      	lsrs	r4, r4, #3
 8000650:	429f      	cmp	r7, r3
 8000652:	d00f      	beq.n	8000674 <__aeabi_dadd+0x39c>
 8000654:	0324      	lsls	r4, r4, #12
 8000656:	0b25      	lsrs	r5, r4, #12
 8000658:	057c      	lsls	r4, r7, #21
 800065a:	0d64      	lsrs	r4, r4, #21
 800065c:	e6d4      	b.n	8000408 <__aeabi_dadd+0x130>
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	000007ff 	.word	0x000007ff
 8000664:	ff7fffff 	.word	0xff7fffff
 8000668:	000007fe 	.word	0x000007fe
 800066c:	08c0      	lsrs	r0, r0, #3
 800066e:	0762      	lsls	r2, r4, #29
 8000670:	4302      	orrs	r2, r0
 8000672:	08e4      	lsrs	r4, r4, #3
 8000674:	0013      	movs	r3, r2
 8000676:	4323      	orrs	r3, r4
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x3a4>
 800067a:	e186      	b.n	800098a <__aeabi_dadd+0x6b2>
 800067c:	2580      	movs	r5, #128	@ 0x80
 800067e:	032d      	lsls	r5, r5, #12
 8000680:	4325      	orrs	r5, r4
 8000682:	032d      	lsls	r5, r5, #12
 8000684:	4cc3      	ldr	r4, [pc, #780]	@ (8000994 <__aeabi_dadd+0x6bc>)
 8000686:	0b2d      	lsrs	r5, r5, #12
 8000688:	e6be      	b.n	8000408 <__aeabi_dadd+0x130>
 800068a:	4660      	mov	r0, ip
 800068c:	4654      	mov	r4, sl
 800068e:	000e      	movs	r6, r1
 8000690:	0017      	movs	r7, r2
 8000692:	08c5      	lsrs	r5, r0, #3
 8000694:	e7d8      	b.n	8000648 <__aeabi_dadd+0x370>
 8000696:	4cc0      	ldr	r4, [pc, #768]	@ (8000998 <__aeabi_dadd+0x6c0>)
 8000698:	1aff      	subs	r7, r7, r3
 800069a:	4014      	ands	r4, r2
 800069c:	e696      	b.n	80003cc <__aeabi_dadd+0xf4>
 800069e:	4abf      	ldr	r2, [pc, #764]	@ (800099c <__aeabi_dadd+0x6c4>)
 80006a0:	1c79      	adds	r1, r7, #1
 80006a2:	4211      	tst	r1, r2
 80006a4:	d16b      	bne.n	800077e <__aeabi_dadd+0x4a6>
 80006a6:	0022      	movs	r2, r4
 80006a8:	4302      	orrs	r2, r0
 80006aa:	2f00      	cmp	r7, #0
 80006ac:	d000      	beq.n	80006b0 <__aeabi_dadd+0x3d8>
 80006ae:	e0db      	b.n	8000868 <__aeabi_dadd+0x590>
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x3de>
 80006b4:	e12d      	b.n	8000912 <__aeabi_dadd+0x63a>
 80006b6:	4662      	mov	r2, ip
 80006b8:	4653      	mov	r3, sl
 80006ba:	431a      	orrs	r2, r3
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x3e8>
 80006be:	e0b6      	b.n	800082e <__aeabi_dadd+0x556>
 80006c0:	4663      	mov	r3, ip
 80006c2:	18c5      	adds	r5, r0, r3
 80006c4:	4285      	cmp	r5, r0
 80006c6:	4180      	sbcs	r0, r0
 80006c8:	4454      	add	r4, sl
 80006ca:	4240      	negs	r0, r0
 80006cc:	1824      	adds	r4, r4, r0
 80006ce:	0223      	lsls	r3, r4, #8
 80006d0:	d502      	bpl.n	80006d8 <__aeabi_dadd+0x400>
 80006d2:	000f      	movs	r7, r1
 80006d4:	4bb0      	ldr	r3, [pc, #704]	@ (8000998 <__aeabi_dadd+0x6c0>)
 80006d6:	401c      	ands	r4, r3
 80006d8:	003a      	movs	r2, r7
 80006da:	0028      	movs	r0, r5
 80006dc:	e7d8      	b.n	8000690 <__aeabi_dadd+0x3b8>
 80006de:	4662      	mov	r2, ip
 80006e0:	1a85      	subs	r5, r0, r2
 80006e2:	42a8      	cmp	r0, r5
 80006e4:	4192      	sbcs	r2, r2
 80006e6:	4653      	mov	r3, sl
 80006e8:	4252      	negs	r2, r2
 80006ea:	4691      	mov	r9, r2
 80006ec:	1ae3      	subs	r3, r4, r3
 80006ee:	001a      	movs	r2, r3
 80006f0:	464b      	mov	r3, r9
 80006f2:	1ad2      	subs	r2, r2, r3
 80006f4:	0013      	movs	r3, r2
 80006f6:	4691      	mov	r9, r2
 80006f8:	021a      	lsls	r2, r3, #8
 80006fa:	d454      	bmi.n	80007a6 <__aeabi_dadd+0x4ce>
 80006fc:	464a      	mov	r2, r9
 80006fe:	464c      	mov	r4, r9
 8000700:	432a      	orrs	r2, r5
 8000702:	d000      	beq.n	8000706 <__aeabi_dadd+0x42e>
 8000704:	e640      	b.n	8000388 <__aeabi_dadd+0xb0>
 8000706:	2600      	movs	r6, #0
 8000708:	2400      	movs	r4, #0
 800070a:	2500      	movs	r5, #0
 800070c:	e67c      	b.n	8000408 <__aeabi_dadd+0x130>
 800070e:	4da1      	ldr	r5, [pc, #644]	@ (8000994 <__aeabi_dadd+0x6bc>)
 8000710:	45a9      	cmp	r9, r5
 8000712:	d100      	bne.n	8000716 <__aeabi_dadd+0x43e>
 8000714:	e090      	b.n	8000838 <__aeabi_dadd+0x560>
 8000716:	2501      	movs	r5, #1
 8000718:	2a38      	cmp	r2, #56	@ 0x38
 800071a:	dd00      	ble.n	800071e <__aeabi_dadd+0x446>
 800071c:	e6ab      	b.n	8000476 <__aeabi_dadd+0x19e>
 800071e:	2580      	movs	r5, #128	@ 0x80
 8000720:	042d      	lsls	r5, r5, #16
 8000722:	432c      	orrs	r4, r5
 8000724:	e695      	b.n	8000452 <__aeabi_dadd+0x17a>
 8000726:	0011      	movs	r1, r2
 8000728:	4655      	mov	r5, sl
 800072a:	3920      	subs	r1, #32
 800072c:	40cd      	lsrs	r5, r1
 800072e:	46a9      	mov	r9, r5
 8000730:	2a20      	cmp	r2, #32
 8000732:	d006      	beq.n	8000742 <__aeabi_dadd+0x46a>
 8000734:	2140      	movs	r1, #64	@ 0x40
 8000736:	4653      	mov	r3, sl
 8000738:	1a8a      	subs	r2, r1, r2
 800073a:	4093      	lsls	r3, r2
 800073c:	4662      	mov	r2, ip
 800073e:	431a      	orrs	r2, r3
 8000740:	4694      	mov	ip, r2
 8000742:	4665      	mov	r5, ip
 8000744:	1e6b      	subs	r3, r5, #1
 8000746:	419d      	sbcs	r5, r3
 8000748:	464b      	mov	r3, r9
 800074a:	431d      	orrs	r5, r3
 800074c:	e612      	b.n	8000374 <__aeabi_dadd+0x9c>
 800074e:	0021      	movs	r1, r4
 8000750:	4301      	orrs	r1, r0
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x47e>
 8000754:	e0c4      	b.n	80008e0 <__aeabi_dadd+0x608>
 8000756:	1e51      	subs	r1, r2, #1
 8000758:	2a01      	cmp	r2, #1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x486>
 800075c:	e0fb      	b.n	8000956 <__aeabi_dadd+0x67e>
 800075e:	4d8d      	ldr	r5, [pc, #564]	@ (8000994 <__aeabi_dadd+0x6bc>)
 8000760:	42aa      	cmp	r2, r5
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x48e>
 8000764:	e0b5      	b.n	80008d2 <__aeabi_dadd+0x5fa>
 8000766:	2501      	movs	r5, #1
 8000768:	2938      	cmp	r1, #56	@ 0x38
 800076a:	dd00      	ble.n	800076e <__aeabi_dadd+0x496>
 800076c:	e741      	b.n	80005f2 <__aeabi_dadd+0x31a>
 800076e:	000a      	movs	r2, r1
 8000770:	e72f      	b.n	80005d2 <__aeabi_dadd+0x2fa>
 8000772:	4c89      	ldr	r4, [pc, #548]	@ (8000998 <__aeabi_dadd+0x6c0>)
 8000774:	1aff      	subs	r7, r7, r3
 8000776:	4014      	ands	r4, r2
 8000778:	0762      	lsls	r2, r4, #29
 800077a:	08e4      	lsrs	r4, r4, #3
 800077c:	e76a      	b.n	8000654 <__aeabi_dadd+0x37c>
 800077e:	4a85      	ldr	r2, [pc, #532]	@ (8000994 <__aeabi_dadd+0x6bc>)
 8000780:	4291      	cmp	r1, r2
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x4ae>
 8000784:	e0e3      	b.n	800094e <__aeabi_dadd+0x676>
 8000786:	4663      	mov	r3, ip
 8000788:	18c2      	adds	r2, r0, r3
 800078a:	4282      	cmp	r2, r0
 800078c:	4180      	sbcs	r0, r0
 800078e:	0023      	movs	r3, r4
 8000790:	4240      	negs	r0, r0
 8000792:	4453      	add	r3, sl
 8000794:	181b      	adds	r3, r3, r0
 8000796:	07dd      	lsls	r5, r3, #31
 8000798:	085c      	lsrs	r4, r3, #1
 800079a:	2307      	movs	r3, #7
 800079c:	0852      	lsrs	r2, r2, #1
 800079e:	4315      	orrs	r5, r2
 80007a0:	000f      	movs	r7, r1
 80007a2:	402b      	ands	r3, r5
 80007a4:	e700      	b.n	80005a8 <__aeabi_dadd+0x2d0>
 80007a6:	4663      	mov	r3, ip
 80007a8:	1a1d      	subs	r5, r3, r0
 80007aa:	45ac      	cmp	ip, r5
 80007ac:	4192      	sbcs	r2, r2
 80007ae:	4653      	mov	r3, sl
 80007b0:	4252      	negs	r2, r2
 80007b2:	1b1c      	subs	r4, r3, r4
 80007b4:	000e      	movs	r6, r1
 80007b6:	4688      	mov	r8, r1
 80007b8:	1aa4      	subs	r4, r4, r2
 80007ba:	e5e5      	b.n	8000388 <__aeabi_dadd+0xb0>
 80007bc:	2d00      	cmp	r5, #0
 80007be:	d000      	beq.n	80007c2 <__aeabi_dadd+0x4ea>
 80007c0:	e091      	b.n	80008e6 <__aeabi_dadd+0x60e>
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d138      	bne.n	8000838 <__aeabi_dadd+0x560>
 80007c6:	2480      	movs	r4, #128	@ 0x80
 80007c8:	2600      	movs	r6, #0
 80007ca:	0324      	lsls	r4, r4, #12
 80007cc:	e756      	b.n	800067c <__aeabi_dadd+0x3a4>
 80007ce:	4663      	mov	r3, ip
 80007d0:	18c5      	adds	r5, r0, r3
 80007d2:	4285      	cmp	r5, r0
 80007d4:	4180      	sbcs	r0, r0
 80007d6:	4454      	add	r4, sl
 80007d8:	4240      	negs	r0, r0
 80007da:	1824      	adds	r4, r4, r0
 80007dc:	2701      	movs	r7, #1
 80007de:	0223      	lsls	r3, r4, #8
 80007e0:	d400      	bmi.n	80007e4 <__aeabi_dadd+0x50c>
 80007e2:	e6df      	b.n	80005a4 <__aeabi_dadd+0x2cc>
 80007e4:	2702      	movs	r7, #2
 80007e6:	e687      	b.n	80004f8 <__aeabi_dadd+0x220>
 80007e8:	4663      	mov	r3, ip
 80007ea:	1ac5      	subs	r5, r0, r3
 80007ec:	42a8      	cmp	r0, r5
 80007ee:	4180      	sbcs	r0, r0
 80007f0:	4653      	mov	r3, sl
 80007f2:	4240      	negs	r0, r0
 80007f4:	1ae4      	subs	r4, r4, r3
 80007f6:	2701      	movs	r7, #1
 80007f8:	1a24      	subs	r4, r4, r0
 80007fa:	e5c0      	b.n	800037e <__aeabi_dadd+0xa6>
 80007fc:	0762      	lsls	r2, r4, #29
 80007fe:	08c0      	lsrs	r0, r0, #3
 8000800:	4302      	orrs	r2, r0
 8000802:	08e4      	lsrs	r4, r4, #3
 8000804:	e736      	b.n	8000674 <__aeabi_dadd+0x39c>
 8000806:	0011      	movs	r1, r2
 8000808:	4653      	mov	r3, sl
 800080a:	3920      	subs	r1, #32
 800080c:	40cb      	lsrs	r3, r1
 800080e:	4699      	mov	r9, r3
 8000810:	2a20      	cmp	r2, #32
 8000812:	d006      	beq.n	8000822 <__aeabi_dadd+0x54a>
 8000814:	2140      	movs	r1, #64	@ 0x40
 8000816:	4653      	mov	r3, sl
 8000818:	1a8a      	subs	r2, r1, r2
 800081a:	4093      	lsls	r3, r2
 800081c:	4662      	mov	r2, ip
 800081e:	431a      	orrs	r2, r3
 8000820:	4694      	mov	ip, r2
 8000822:	4665      	mov	r5, ip
 8000824:	1e6b      	subs	r3, r5, #1
 8000826:	419d      	sbcs	r5, r3
 8000828:	464b      	mov	r3, r9
 800082a:	431d      	orrs	r5, r3
 800082c:	e659      	b.n	80004e2 <__aeabi_dadd+0x20a>
 800082e:	0762      	lsls	r2, r4, #29
 8000830:	08c0      	lsrs	r0, r0, #3
 8000832:	4302      	orrs	r2, r0
 8000834:	08e4      	lsrs	r4, r4, #3
 8000836:	e70d      	b.n	8000654 <__aeabi_dadd+0x37c>
 8000838:	4653      	mov	r3, sl
 800083a:	075a      	lsls	r2, r3, #29
 800083c:	4663      	mov	r3, ip
 800083e:	08d8      	lsrs	r0, r3, #3
 8000840:	4653      	mov	r3, sl
 8000842:	000e      	movs	r6, r1
 8000844:	4302      	orrs	r2, r0
 8000846:	08dc      	lsrs	r4, r3, #3
 8000848:	e714      	b.n	8000674 <__aeabi_dadd+0x39c>
 800084a:	0015      	movs	r5, r2
 800084c:	0026      	movs	r6, r4
 800084e:	3d20      	subs	r5, #32
 8000850:	40ee      	lsrs	r6, r5
 8000852:	2a20      	cmp	r2, #32
 8000854:	d003      	beq.n	800085e <__aeabi_dadd+0x586>
 8000856:	2540      	movs	r5, #64	@ 0x40
 8000858:	1aaa      	subs	r2, r5, r2
 800085a:	4094      	lsls	r4, r2
 800085c:	4320      	orrs	r0, r4
 800085e:	1e42      	subs	r2, r0, #1
 8000860:	4190      	sbcs	r0, r2
 8000862:	0005      	movs	r5, r0
 8000864:	4335      	orrs	r5, r6
 8000866:	e606      	b.n	8000476 <__aeabi_dadd+0x19e>
 8000868:	2a00      	cmp	r2, #0
 800086a:	d07c      	beq.n	8000966 <__aeabi_dadd+0x68e>
 800086c:	4662      	mov	r2, ip
 800086e:	4653      	mov	r3, sl
 8000870:	08c0      	lsrs	r0, r0, #3
 8000872:	431a      	orrs	r2, r3
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x5a0>
 8000876:	e6fa      	b.n	800066e <__aeabi_dadd+0x396>
 8000878:	0762      	lsls	r2, r4, #29
 800087a:	4310      	orrs	r0, r2
 800087c:	2280      	movs	r2, #128	@ 0x80
 800087e:	08e4      	lsrs	r4, r4, #3
 8000880:	0312      	lsls	r2, r2, #12
 8000882:	4214      	tst	r4, r2
 8000884:	d008      	beq.n	8000898 <__aeabi_dadd+0x5c0>
 8000886:	08d9      	lsrs	r1, r3, #3
 8000888:	4211      	tst	r1, r2
 800088a:	d105      	bne.n	8000898 <__aeabi_dadd+0x5c0>
 800088c:	4663      	mov	r3, ip
 800088e:	08d8      	lsrs	r0, r3, #3
 8000890:	4653      	mov	r3, sl
 8000892:	000c      	movs	r4, r1
 8000894:	075b      	lsls	r3, r3, #29
 8000896:	4318      	orrs	r0, r3
 8000898:	0f42      	lsrs	r2, r0, #29
 800089a:	00c0      	lsls	r0, r0, #3
 800089c:	08c0      	lsrs	r0, r0, #3
 800089e:	0752      	lsls	r2, r2, #29
 80008a0:	4302      	orrs	r2, r0
 80008a2:	e6e7      	b.n	8000674 <__aeabi_dadd+0x39c>
 80008a4:	2a00      	cmp	r2, #0
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0x5d2>
 80008a8:	e72d      	b.n	8000706 <__aeabi_dadd+0x42e>
 80008aa:	4663      	mov	r3, ip
 80008ac:	08d8      	lsrs	r0, r3, #3
 80008ae:	4653      	mov	r3, sl
 80008b0:	075a      	lsls	r2, r3, #29
 80008b2:	000e      	movs	r6, r1
 80008b4:	4302      	orrs	r2, r0
 80008b6:	08dc      	lsrs	r4, r3, #3
 80008b8:	e6cc      	b.n	8000654 <__aeabi_dadd+0x37c>
 80008ba:	4663      	mov	r3, ip
 80008bc:	1a1d      	subs	r5, r3, r0
 80008be:	45ac      	cmp	ip, r5
 80008c0:	4192      	sbcs	r2, r2
 80008c2:	4653      	mov	r3, sl
 80008c4:	4252      	negs	r2, r2
 80008c6:	1b1c      	subs	r4, r3, r4
 80008c8:	000e      	movs	r6, r1
 80008ca:	4688      	mov	r8, r1
 80008cc:	1aa4      	subs	r4, r4, r2
 80008ce:	3701      	adds	r7, #1
 80008d0:	e555      	b.n	800037e <__aeabi_dadd+0xa6>
 80008d2:	4663      	mov	r3, ip
 80008d4:	08d9      	lsrs	r1, r3, #3
 80008d6:	4653      	mov	r3, sl
 80008d8:	075a      	lsls	r2, r3, #29
 80008da:	430a      	orrs	r2, r1
 80008dc:	08dc      	lsrs	r4, r3, #3
 80008de:	e6c9      	b.n	8000674 <__aeabi_dadd+0x39c>
 80008e0:	4660      	mov	r0, ip
 80008e2:	4654      	mov	r4, sl
 80008e4:	e6d4      	b.n	8000690 <__aeabi_dadd+0x3b8>
 80008e6:	08c0      	lsrs	r0, r0, #3
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x616>
 80008ec:	e6bf      	b.n	800066e <__aeabi_dadd+0x396>
 80008ee:	0762      	lsls	r2, r4, #29
 80008f0:	4310      	orrs	r0, r2
 80008f2:	2280      	movs	r2, #128	@ 0x80
 80008f4:	08e4      	lsrs	r4, r4, #3
 80008f6:	0312      	lsls	r2, r2, #12
 80008f8:	4214      	tst	r4, r2
 80008fa:	d0cd      	beq.n	8000898 <__aeabi_dadd+0x5c0>
 80008fc:	08dd      	lsrs	r5, r3, #3
 80008fe:	4215      	tst	r5, r2
 8000900:	d1ca      	bne.n	8000898 <__aeabi_dadd+0x5c0>
 8000902:	4663      	mov	r3, ip
 8000904:	08d8      	lsrs	r0, r3, #3
 8000906:	4653      	mov	r3, sl
 8000908:	075b      	lsls	r3, r3, #29
 800090a:	000e      	movs	r6, r1
 800090c:	002c      	movs	r4, r5
 800090e:	4318      	orrs	r0, r3
 8000910:	e7c2      	b.n	8000898 <__aeabi_dadd+0x5c0>
 8000912:	4663      	mov	r3, ip
 8000914:	08d9      	lsrs	r1, r3, #3
 8000916:	4653      	mov	r3, sl
 8000918:	075a      	lsls	r2, r3, #29
 800091a:	430a      	orrs	r2, r1
 800091c:	08dc      	lsrs	r4, r3, #3
 800091e:	e699      	b.n	8000654 <__aeabi_dadd+0x37c>
 8000920:	4663      	mov	r3, ip
 8000922:	08d8      	lsrs	r0, r3, #3
 8000924:	4653      	mov	r3, sl
 8000926:	075a      	lsls	r2, r3, #29
 8000928:	000e      	movs	r6, r1
 800092a:	4302      	orrs	r2, r0
 800092c:	08dc      	lsrs	r4, r3, #3
 800092e:	e6a1      	b.n	8000674 <__aeabi_dadd+0x39c>
 8000930:	0011      	movs	r1, r2
 8000932:	0027      	movs	r7, r4
 8000934:	3920      	subs	r1, #32
 8000936:	40cf      	lsrs	r7, r1
 8000938:	2a20      	cmp	r2, #32
 800093a:	d003      	beq.n	8000944 <__aeabi_dadd+0x66c>
 800093c:	2140      	movs	r1, #64	@ 0x40
 800093e:	1a8a      	subs	r2, r1, r2
 8000940:	4094      	lsls	r4, r2
 8000942:	4320      	orrs	r0, r4
 8000944:	1e42      	subs	r2, r0, #1
 8000946:	4190      	sbcs	r0, r2
 8000948:	0005      	movs	r5, r0
 800094a:	433d      	orrs	r5, r7
 800094c:	e651      	b.n	80005f2 <__aeabi_dadd+0x31a>
 800094e:	000c      	movs	r4, r1
 8000950:	2500      	movs	r5, #0
 8000952:	2200      	movs	r2, #0
 8000954:	e558      	b.n	8000408 <__aeabi_dadd+0x130>
 8000956:	4460      	add	r0, ip
 8000958:	4560      	cmp	r0, ip
 800095a:	4192      	sbcs	r2, r2
 800095c:	4454      	add	r4, sl
 800095e:	4252      	negs	r2, r2
 8000960:	0005      	movs	r5, r0
 8000962:	18a4      	adds	r4, r4, r2
 8000964:	e73a      	b.n	80007dc <__aeabi_dadd+0x504>
 8000966:	4653      	mov	r3, sl
 8000968:	075a      	lsls	r2, r3, #29
 800096a:	4663      	mov	r3, ip
 800096c:	08d9      	lsrs	r1, r3, #3
 800096e:	4653      	mov	r3, sl
 8000970:	430a      	orrs	r2, r1
 8000972:	08dc      	lsrs	r4, r3, #3
 8000974:	e67e      	b.n	8000674 <__aeabi_dadd+0x39c>
 8000976:	001a      	movs	r2, r3
 8000978:	001c      	movs	r4, r3
 800097a:	432a      	orrs	r2, r5
 800097c:	d000      	beq.n	8000980 <__aeabi_dadd+0x6a8>
 800097e:	e6ab      	b.n	80006d8 <__aeabi_dadd+0x400>
 8000980:	e6c1      	b.n	8000706 <__aeabi_dadd+0x42e>
 8000982:	2120      	movs	r1, #32
 8000984:	2500      	movs	r5, #0
 8000986:	1a09      	subs	r1, r1, r0
 8000988:	e519      	b.n	80003be <__aeabi_dadd+0xe6>
 800098a:	2200      	movs	r2, #0
 800098c:	2500      	movs	r5, #0
 800098e:	4c01      	ldr	r4, [pc, #4]	@ (8000994 <__aeabi_dadd+0x6bc>)
 8000990:	e53a      	b.n	8000408 <__aeabi_dadd+0x130>
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	000007ff 	.word	0x000007ff
 8000998:	ff7fffff 	.word	0xff7fffff
 800099c:	000007fe 	.word	0x000007fe

080009a0 <__aeabi_ddiv>:
 80009a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a2:	46de      	mov	lr, fp
 80009a4:	4645      	mov	r5, r8
 80009a6:	4657      	mov	r7, sl
 80009a8:	464e      	mov	r6, r9
 80009aa:	b5e0      	push	{r5, r6, r7, lr}
 80009ac:	b087      	sub	sp, #28
 80009ae:	9200      	str	r2, [sp, #0]
 80009b0:	9301      	str	r3, [sp, #4]
 80009b2:	030b      	lsls	r3, r1, #12
 80009b4:	0b1b      	lsrs	r3, r3, #12
 80009b6:	469b      	mov	fp, r3
 80009b8:	0fca      	lsrs	r2, r1, #31
 80009ba:	004b      	lsls	r3, r1, #1
 80009bc:	0004      	movs	r4, r0
 80009be:	4680      	mov	r8, r0
 80009c0:	0d5b      	lsrs	r3, r3, #21
 80009c2:	9202      	str	r2, [sp, #8]
 80009c4:	d100      	bne.n	80009c8 <__aeabi_ddiv+0x28>
 80009c6:	e16a      	b.n	8000c9e <__aeabi_ddiv+0x2fe>
 80009c8:	4ad4      	ldr	r2, [pc, #848]	@ (8000d1c <__aeabi_ddiv+0x37c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d100      	bne.n	80009d0 <__aeabi_ddiv+0x30>
 80009ce:	e18c      	b.n	8000cea <__aeabi_ddiv+0x34a>
 80009d0:	4659      	mov	r1, fp
 80009d2:	0f42      	lsrs	r2, r0, #29
 80009d4:	00c9      	lsls	r1, r1, #3
 80009d6:	430a      	orrs	r2, r1
 80009d8:	2180      	movs	r1, #128	@ 0x80
 80009da:	0409      	lsls	r1, r1, #16
 80009dc:	4311      	orrs	r1, r2
 80009de:	00c2      	lsls	r2, r0, #3
 80009e0:	4690      	mov	r8, r2
 80009e2:	4acf      	ldr	r2, [pc, #828]	@ (8000d20 <__aeabi_ddiv+0x380>)
 80009e4:	4689      	mov	r9, r1
 80009e6:	4692      	mov	sl, r2
 80009e8:	449a      	add	sl, r3
 80009ea:	2300      	movs	r3, #0
 80009ec:	2400      	movs	r4, #0
 80009ee:	9303      	str	r3, [sp, #12]
 80009f0:	9e00      	ldr	r6, [sp, #0]
 80009f2:	9f01      	ldr	r7, [sp, #4]
 80009f4:	033b      	lsls	r3, r7, #12
 80009f6:	0b1b      	lsrs	r3, r3, #12
 80009f8:	469b      	mov	fp, r3
 80009fa:	007b      	lsls	r3, r7, #1
 80009fc:	0030      	movs	r0, r6
 80009fe:	0d5b      	lsrs	r3, r3, #21
 8000a00:	0ffd      	lsrs	r5, r7, #31
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d100      	bne.n	8000a08 <__aeabi_ddiv+0x68>
 8000a06:	e128      	b.n	8000c5a <__aeabi_ddiv+0x2ba>
 8000a08:	4ac4      	ldr	r2, [pc, #784]	@ (8000d1c <__aeabi_ddiv+0x37c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_ddiv+0x70>
 8000a0e:	e177      	b.n	8000d00 <__aeabi_ddiv+0x360>
 8000a10:	4659      	mov	r1, fp
 8000a12:	0f72      	lsrs	r2, r6, #29
 8000a14:	00c9      	lsls	r1, r1, #3
 8000a16:	430a      	orrs	r2, r1
 8000a18:	2180      	movs	r1, #128	@ 0x80
 8000a1a:	0409      	lsls	r1, r1, #16
 8000a1c:	4311      	orrs	r1, r2
 8000a1e:	468b      	mov	fp, r1
 8000a20:	49bf      	ldr	r1, [pc, #764]	@ (8000d20 <__aeabi_ddiv+0x380>)
 8000a22:	00f2      	lsls	r2, r6, #3
 8000a24:	468c      	mov	ip, r1
 8000a26:	4651      	mov	r1, sl
 8000a28:	4463      	add	r3, ip
 8000a2a:	1acb      	subs	r3, r1, r3
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	2300      	movs	r3, #0
 8000a30:	9e02      	ldr	r6, [sp, #8]
 8000a32:	406e      	eors	r6, r5
 8000a34:	2c0f      	cmp	r4, #15
 8000a36:	d827      	bhi.n	8000a88 <__aeabi_ddiv+0xe8>
 8000a38:	49ba      	ldr	r1, [pc, #744]	@ (8000d24 <__aeabi_ddiv+0x384>)
 8000a3a:	00a4      	lsls	r4, r4, #2
 8000a3c:	5909      	ldr	r1, [r1, r4]
 8000a3e:	468f      	mov	pc, r1
 8000a40:	46cb      	mov	fp, r9
 8000a42:	4642      	mov	r2, r8
 8000a44:	9e02      	ldr	r6, [sp, #8]
 8000a46:	9b03      	ldr	r3, [sp, #12]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d016      	beq.n	8000a7a <__aeabi_ddiv+0xda>
 8000a4c:	2b03      	cmp	r3, #3
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_ddiv+0xb2>
 8000a50:	e2a6      	b.n	8000fa0 <__aeabi_ddiv+0x600>
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d000      	beq.n	8000a58 <__aeabi_ddiv+0xb8>
 8000a56:	e0df      	b.n	8000c18 <__aeabi_ddiv+0x278>
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	2400      	movs	r4, #0
 8000a5e:	4690      	mov	r8, r2
 8000a60:	051b      	lsls	r3, r3, #20
 8000a62:	4323      	orrs	r3, r4
 8000a64:	07f6      	lsls	r6, r6, #31
 8000a66:	4333      	orrs	r3, r6
 8000a68:	4640      	mov	r0, r8
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	b007      	add	sp, #28
 8000a6e:	bcf0      	pop	{r4, r5, r6, r7}
 8000a70:	46bb      	mov	fp, r7
 8000a72:	46b2      	mov	sl, r6
 8000a74:	46a9      	mov	r9, r5
 8000a76:	46a0      	mov	r8, r4
 8000a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	4690      	mov	r8, r2
 8000a80:	4ba6      	ldr	r3, [pc, #664]	@ (8000d1c <__aeabi_ddiv+0x37c>)
 8000a82:	e7ed      	b.n	8000a60 <__aeabi_ddiv+0xc0>
 8000a84:	002e      	movs	r6, r5
 8000a86:	e7df      	b.n	8000a48 <__aeabi_ddiv+0xa8>
 8000a88:	45cb      	cmp	fp, r9
 8000a8a:	d200      	bcs.n	8000a8e <__aeabi_ddiv+0xee>
 8000a8c:	e1d4      	b.n	8000e38 <__aeabi_ddiv+0x498>
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_ddiv+0xf2>
 8000a90:	e1cf      	b.n	8000e32 <__aeabi_ddiv+0x492>
 8000a92:	2301      	movs	r3, #1
 8000a94:	425b      	negs	r3, r3
 8000a96:	469c      	mov	ip, r3
 8000a98:	4644      	mov	r4, r8
 8000a9a:	4648      	mov	r0, r9
 8000a9c:	2700      	movs	r7, #0
 8000a9e:	44e2      	add	sl, ip
 8000aa0:	465b      	mov	r3, fp
 8000aa2:	0e15      	lsrs	r5, r2, #24
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	431d      	orrs	r5, r3
 8000aa8:	0c19      	lsrs	r1, r3, #16
 8000aaa:	042b      	lsls	r3, r5, #16
 8000aac:	0212      	lsls	r2, r2, #8
 8000aae:	9500      	str	r5, [sp, #0]
 8000ab0:	0c1d      	lsrs	r5, r3, #16
 8000ab2:	4691      	mov	r9, r2
 8000ab4:	9102      	str	r1, [sp, #8]
 8000ab6:	9503      	str	r5, [sp, #12]
 8000ab8:	f7ff fbac 	bl	8000214 <__aeabi_uidivmod>
 8000abc:	0002      	movs	r2, r0
 8000abe:	436a      	muls	r2, r5
 8000ac0:	040b      	lsls	r3, r1, #16
 8000ac2:	0c21      	lsrs	r1, r4, #16
 8000ac4:	4680      	mov	r8, r0
 8000ac6:	4319      	orrs	r1, r3
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	d909      	bls.n	8000ae0 <__aeabi_ddiv+0x140>
 8000acc:	9d00      	ldr	r5, [sp, #0]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	46ac      	mov	ip, r5
 8000ad2:	425b      	negs	r3, r3
 8000ad4:	4461      	add	r1, ip
 8000ad6:	469c      	mov	ip, r3
 8000ad8:	44e0      	add	r8, ip
 8000ada:	428d      	cmp	r5, r1
 8000adc:	d800      	bhi.n	8000ae0 <__aeabi_ddiv+0x140>
 8000ade:	e1fb      	b.n	8000ed8 <__aeabi_ddiv+0x538>
 8000ae0:	1a88      	subs	r0, r1, r2
 8000ae2:	9902      	ldr	r1, [sp, #8]
 8000ae4:	f7ff fb96 	bl	8000214 <__aeabi_uidivmod>
 8000ae8:	9a03      	ldr	r2, [sp, #12]
 8000aea:	0424      	lsls	r4, r4, #16
 8000aec:	4342      	muls	r2, r0
 8000aee:	0409      	lsls	r1, r1, #16
 8000af0:	0c24      	lsrs	r4, r4, #16
 8000af2:	0003      	movs	r3, r0
 8000af4:	430c      	orrs	r4, r1
 8000af6:	42a2      	cmp	r2, r4
 8000af8:	d906      	bls.n	8000b08 <__aeabi_ddiv+0x168>
 8000afa:	9900      	ldr	r1, [sp, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	468c      	mov	ip, r1
 8000b00:	4464      	add	r4, ip
 8000b02:	42a1      	cmp	r1, r4
 8000b04:	d800      	bhi.n	8000b08 <__aeabi_ddiv+0x168>
 8000b06:	e1e1      	b.n	8000ecc <__aeabi_ddiv+0x52c>
 8000b08:	1aa0      	subs	r0, r4, r2
 8000b0a:	4642      	mov	r2, r8
 8000b0c:	0412      	lsls	r2, r2, #16
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	4693      	mov	fp, r2
 8000b12:	464b      	mov	r3, r9
 8000b14:	4659      	mov	r1, fp
 8000b16:	0c1b      	lsrs	r3, r3, #16
 8000b18:	001d      	movs	r5, r3
 8000b1a:	9304      	str	r3, [sp, #16]
 8000b1c:	040b      	lsls	r3, r1, #16
 8000b1e:	4649      	mov	r1, r9
 8000b20:	0409      	lsls	r1, r1, #16
 8000b22:	0c09      	lsrs	r1, r1, #16
 8000b24:	000c      	movs	r4, r1
 8000b26:	0c1b      	lsrs	r3, r3, #16
 8000b28:	435c      	muls	r4, r3
 8000b2a:	0c12      	lsrs	r2, r2, #16
 8000b2c:	436b      	muls	r3, r5
 8000b2e:	4688      	mov	r8, r1
 8000b30:	4351      	muls	r1, r2
 8000b32:	436a      	muls	r2, r5
 8000b34:	0c25      	lsrs	r5, r4, #16
 8000b36:	46ac      	mov	ip, r5
 8000b38:	185b      	adds	r3, r3, r1
 8000b3a:	4463      	add	r3, ip
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d903      	bls.n	8000b48 <__aeabi_ddiv+0x1a8>
 8000b40:	2180      	movs	r1, #128	@ 0x80
 8000b42:	0249      	lsls	r1, r1, #9
 8000b44:	468c      	mov	ip, r1
 8000b46:	4462      	add	r2, ip
 8000b48:	0c19      	lsrs	r1, r3, #16
 8000b4a:	0424      	lsls	r4, r4, #16
 8000b4c:	041b      	lsls	r3, r3, #16
 8000b4e:	0c24      	lsrs	r4, r4, #16
 8000b50:	188a      	adds	r2, r1, r2
 8000b52:	191c      	adds	r4, r3, r4
 8000b54:	4290      	cmp	r0, r2
 8000b56:	d302      	bcc.n	8000b5e <__aeabi_ddiv+0x1be>
 8000b58:	d116      	bne.n	8000b88 <__aeabi_ddiv+0x1e8>
 8000b5a:	42a7      	cmp	r7, r4
 8000b5c:	d214      	bcs.n	8000b88 <__aeabi_ddiv+0x1e8>
 8000b5e:	465b      	mov	r3, fp
 8000b60:	9d00      	ldr	r5, [sp, #0]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	444f      	add	r7, r9
 8000b66:	9305      	str	r3, [sp, #20]
 8000b68:	454f      	cmp	r7, r9
 8000b6a:	419b      	sbcs	r3, r3
 8000b6c:	46ac      	mov	ip, r5
 8000b6e:	425b      	negs	r3, r3
 8000b70:	4463      	add	r3, ip
 8000b72:	18c0      	adds	r0, r0, r3
 8000b74:	4285      	cmp	r5, r0
 8000b76:	d300      	bcc.n	8000b7a <__aeabi_ddiv+0x1da>
 8000b78:	e1a1      	b.n	8000ebe <__aeabi_ddiv+0x51e>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	d900      	bls.n	8000b80 <__aeabi_ddiv+0x1e0>
 8000b7e:	e1f6      	b.n	8000f6e <__aeabi_ddiv+0x5ce>
 8000b80:	d100      	bne.n	8000b84 <__aeabi_ddiv+0x1e4>
 8000b82:	e1f1      	b.n	8000f68 <__aeabi_ddiv+0x5c8>
 8000b84:	9b05      	ldr	r3, [sp, #20]
 8000b86:	469b      	mov	fp, r3
 8000b88:	1b3c      	subs	r4, r7, r4
 8000b8a:	42a7      	cmp	r7, r4
 8000b8c:	41bf      	sbcs	r7, r7
 8000b8e:	9d00      	ldr	r5, [sp, #0]
 8000b90:	1a80      	subs	r0, r0, r2
 8000b92:	427f      	negs	r7, r7
 8000b94:	1bc0      	subs	r0, r0, r7
 8000b96:	4285      	cmp	r5, r0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_ddiv+0x1fc>
 8000b9a:	e1d0      	b.n	8000f3e <__aeabi_ddiv+0x59e>
 8000b9c:	9902      	ldr	r1, [sp, #8]
 8000b9e:	f7ff fb39 	bl	8000214 <__aeabi_uidivmod>
 8000ba2:	9a03      	ldr	r2, [sp, #12]
 8000ba4:	040b      	lsls	r3, r1, #16
 8000ba6:	4342      	muls	r2, r0
 8000ba8:	0c21      	lsrs	r1, r4, #16
 8000baa:	0007      	movs	r7, r0
 8000bac:	4319      	orrs	r1, r3
 8000bae:	428a      	cmp	r2, r1
 8000bb0:	d900      	bls.n	8000bb4 <__aeabi_ddiv+0x214>
 8000bb2:	e178      	b.n	8000ea6 <__aeabi_ddiv+0x506>
 8000bb4:	1a88      	subs	r0, r1, r2
 8000bb6:	9902      	ldr	r1, [sp, #8]
 8000bb8:	f7ff fb2c 	bl	8000214 <__aeabi_uidivmod>
 8000bbc:	9a03      	ldr	r2, [sp, #12]
 8000bbe:	0424      	lsls	r4, r4, #16
 8000bc0:	4342      	muls	r2, r0
 8000bc2:	0409      	lsls	r1, r1, #16
 8000bc4:	0c24      	lsrs	r4, r4, #16
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	430c      	orrs	r4, r1
 8000bca:	42a2      	cmp	r2, r4
 8000bcc:	d900      	bls.n	8000bd0 <__aeabi_ddiv+0x230>
 8000bce:	e15d      	b.n	8000e8c <__aeabi_ddiv+0x4ec>
 8000bd0:	4641      	mov	r1, r8
 8000bd2:	1aa4      	subs	r4, r4, r2
 8000bd4:	043a      	lsls	r2, r7, #16
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	9d04      	ldr	r5, [sp, #16]
 8000bda:	0413      	lsls	r3, r2, #16
 8000bdc:	0c1b      	lsrs	r3, r3, #16
 8000bde:	4359      	muls	r1, r3
 8000be0:	4647      	mov	r7, r8
 8000be2:	436b      	muls	r3, r5
 8000be4:	469c      	mov	ip, r3
 8000be6:	0c10      	lsrs	r0, r2, #16
 8000be8:	4347      	muls	r7, r0
 8000bea:	0c0b      	lsrs	r3, r1, #16
 8000bec:	44bc      	add	ip, r7
 8000bee:	4463      	add	r3, ip
 8000bf0:	4368      	muls	r0, r5
 8000bf2:	429f      	cmp	r7, r3
 8000bf4:	d903      	bls.n	8000bfe <__aeabi_ddiv+0x25e>
 8000bf6:	2580      	movs	r5, #128	@ 0x80
 8000bf8:	026d      	lsls	r5, r5, #9
 8000bfa:	46ac      	mov	ip, r5
 8000bfc:	4460      	add	r0, ip
 8000bfe:	0c1f      	lsrs	r7, r3, #16
 8000c00:	0409      	lsls	r1, r1, #16
 8000c02:	041b      	lsls	r3, r3, #16
 8000c04:	0c09      	lsrs	r1, r1, #16
 8000c06:	183f      	adds	r7, r7, r0
 8000c08:	185b      	adds	r3, r3, r1
 8000c0a:	42bc      	cmp	r4, r7
 8000c0c:	d200      	bcs.n	8000c10 <__aeabi_ddiv+0x270>
 8000c0e:	e102      	b.n	8000e16 <__aeabi_ddiv+0x476>
 8000c10:	d100      	bne.n	8000c14 <__aeabi_ddiv+0x274>
 8000c12:	e0fd      	b.n	8000e10 <__aeabi_ddiv+0x470>
 8000c14:	2301      	movs	r3, #1
 8000c16:	431a      	orrs	r2, r3
 8000c18:	4b43      	ldr	r3, [pc, #268]	@ (8000d28 <__aeabi_ddiv+0x388>)
 8000c1a:	4453      	add	r3, sl
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	dc00      	bgt.n	8000c22 <__aeabi_ddiv+0x282>
 8000c20:	e0ae      	b.n	8000d80 <__aeabi_ddiv+0x3e0>
 8000c22:	0751      	lsls	r1, r2, #29
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0x288>
 8000c26:	e198      	b.n	8000f5a <__aeabi_ddiv+0x5ba>
 8000c28:	4659      	mov	r1, fp
 8000c2a:	01c9      	lsls	r1, r1, #7
 8000c2c:	d506      	bpl.n	8000c3c <__aeabi_ddiv+0x29c>
 8000c2e:	4659      	mov	r1, fp
 8000c30:	4b3e      	ldr	r3, [pc, #248]	@ (8000d2c <__aeabi_ddiv+0x38c>)
 8000c32:	4019      	ands	r1, r3
 8000c34:	2380      	movs	r3, #128	@ 0x80
 8000c36:	468b      	mov	fp, r1
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	4453      	add	r3, sl
 8000c3c:	493c      	ldr	r1, [pc, #240]	@ (8000d30 <__aeabi_ddiv+0x390>)
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	dd00      	ble.n	8000c44 <__aeabi_ddiv+0x2a4>
 8000c42:	e71a      	b.n	8000a7a <__aeabi_ddiv+0xda>
 8000c44:	4659      	mov	r1, fp
 8000c46:	08d2      	lsrs	r2, r2, #3
 8000c48:	0749      	lsls	r1, r1, #29
 8000c4a:	4311      	orrs	r1, r2
 8000c4c:	465a      	mov	r2, fp
 8000c4e:	055b      	lsls	r3, r3, #21
 8000c50:	0254      	lsls	r4, r2, #9
 8000c52:	4688      	mov	r8, r1
 8000c54:	0b24      	lsrs	r4, r4, #12
 8000c56:	0d5b      	lsrs	r3, r3, #21
 8000c58:	e702      	b.n	8000a60 <__aeabi_ddiv+0xc0>
 8000c5a:	465a      	mov	r2, fp
 8000c5c:	9b00      	ldr	r3, [sp, #0]
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0x2c4>
 8000c62:	e07e      	b.n	8000d62 <__aeabi_ddiv+0x3c2>
 8000c64:	465b      	mov	r3, fp
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_ddiv+0x2cc>
 8000c6a:	e100      	b.n	8000e6e <__aeabi_ddiv+0x4ce>
 8000c6c:	4658      	mov	r0, fp
 8000c6e:	f001 f9cd 	bl	800200c <__clzsi2>
 8000c72:	0002      	movs	r2, r0
 8000c74:	0003      	movs	r3, r0
 8000c76:	3a0b      	subs	r2, #11
 8000c78:	271d      	movs	r7, #29
 8000c7a:	9e00      	ldr	r6, [sp, #0]
 8000c7c:	1aba      	subs	r2, r7, r2
 8000c7e:	0019      	movs	r1, r3
 8000c80:	4658      	mov	r0, fp
 8000c82:	40d6      	lsrs	r6, r2
 8000c84:	3908      	subs	r1, #8
 8000c86:	4088      	lsls	r0, r1
 8000c88:	0032      	movs	r2, r6
 8000c8a:	4302      	orrs	r2, r0
 8000c8c:	4693      	mov	fp, r2
 8000c8e:	9a00      	ldr	r2, [sp, #0]
 8000c90:	408a      	lsls	r2, r1
 8000c92:	4928      	ldr	r1, [pc, #160]	@ (8000d34 <__aeabi_ddiv+0x394>)
 8000c94:	4453      	add	r3, sl
 8000c96:	468a      	mov	sl, r1
 8000c98:	449a      	add	sl, r3
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e6c8      	b.n	8000a30 <__aeabi_ddiv+0x90>
 8000c9e:	465b      	mov	r3, fp
 8000ca0:	4303      	orrs	r3, r0
 8000ca2:	4699      	mov	r9, r3
 8000ca4:	d056      	beq.n	8000d54 <__aeabi_ddiv+0x3b4>
 8000ca6:	465b      	mov	r3, fp
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d100      	bne.n	8000cae <__aeabi_ddiv+0x30e>
 8000cac:	e0cd      	b.n	8000e4a <__aeabi_ddiv+0x4aa>
 8000cae:	4658      	mov	r0, fp
 8000cb0:	f001 f9ac 	bl	800200c <__clzsi2>
 8000cb4:	230b      	movs	r3, #11
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	469c      	mov	ip, r3
 8000cba:	0002      	movs	r2, r0
 8000cbc:	4484      	add	ip, r0
 8000cbe:	4666      	mov	r6, ip
 8000cc0:	231d      	movs	r3, #29
 8000cc2:	1b9b      	subs	r3, r3, r6
 8000cc4:	0026      	movs	r6, r4
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	4658      	mov	r0, fp
 8000cca:	40de      	lsrs	r6, r3
 8000ccc:	3908      	subs	r1, #8
 8000cce:	4088      	lsls	r0, r1
 8000cd0:	0033      	movs	r3, r6
 8000cd2:	4303      	orrs	r3, r0
 8000cd4:	4699      	mov	r9, r3
 8000cd6:	0023      	movs	r3, r4
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	4698      	mov	r8, r3
 8000cdc:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <__aeabi_ddiv+0x398>)
 8000cde:	2400      	movs	r4, #0
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	469a      	mov	sl, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9303      	str	r3, [sp, #12]
 8000ce8:	e682      	b.n	80009f0 <__aeabi_ddiv+0x50>
 8000cea:	465a      	mov	r2, fp
 8000cec:	4302      	orrs	r2, r0
 8000cee:	4691      	mov	r9, r2
 8000cf0:	d12a      	bne.n	8000d48 <__aeabi_ddiv+0x3a8>
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	469a      	mov	sl, r3
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2408      	movs	r4, #8
 8000cfc:	9303      	str	r3, [sp, #12]
 8000cfe:	e677      	b.n	80009f0 <__aeabi_ddiv+0x50>
 8000d00:	465a      	mov	r2, fp
 8000d02:	9b00      	ldr	r3, [sp, #0]
 8000d04:	431a      	orrs	r2, r3
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <__aeabi_ddiv+0x39c>)
 8000d08:	469c      	mov	ip, r3
 8000d0a:	44e2      	add	sl, ip
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	d117      	bne.n	8000d40 <__aeabi_ddiv+0x3a0>
 8000d10:	2302      	movs	r3, #2
 8000d12:	431c      	orrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	469b      	mov	fp, r3
 8000d18:	3302      	adds	r3, #2
 8000d1a:	e689      	b.n	8000a30 <__aeabi_ddiv+0x90>
 8000d1c:	000007ff 	.word	0x000007ff
 8000d20:	fffffc01 	.word	0xfffffc01
 8000d24:	08007b80 	.word	0x08007b80
 8000d28:	000003ff 	.word	0x000003ff
 8000d2c:	feffffff 	.word	0xfeffffff
 8000d30:	000007fe 	.word	0x000007fe
 8000d34:	000003f3 	.word	0x000003f3
 8000d38:	fffffc0d 	.word	0xfffffc0d
 8000d3c:	fffff801 	.word	0xfffff801
 8000d40:	2303      	movs	r3, #3
 8000d42:	0032      	movs	r2, r6
 8000d44:	431c      	orrs	r4, r3
 8000d46:	e673      	b.n	8000a30 <__aeabi_ddiv+0x90>
 8000d48:	469a      	mov	sl, r3
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	46d9      	mov	r9, fp
 8000d4e:	240c      	movs	r4, #12
 8000d50:	9303      	str	r3, [sp, #12]
 8000d52:	e64d      	b.n	80009f0 <__aeabi_ddiv+0x50>
 8000d54:	2300      	movs	r3, #0
 8000d56:	4698      	mov	r8, r3
 8000d58:	469a      	mov	sl, r3
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	2404      	movs	r4, #4
 8000d5e:	9303      	str	r3, [sp, #12]
 8000d60:	e646      	b.n	80009f0 <__aeabi_ddiv+0x50>
 8000d62:	2301      	movs	r3, #1
 8000d64:	431c      	orrs	r4, r3
 8000d66:	2300      	movs	r3, #0
 8000d68:	469b      	mov	fp, r3
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	e660      	b.n	8000a30 <__aeabi_ddiv+0x90>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2480      	movs	r4, #128	@ 0x80
 8000d72:	4698      	mov	r8, r3
 8000d74:	2600      	movs	r6, #0
 8000d76:	4b92      	ldr	r3, [pc, #584]	@ (8000fc0 <__aeabi_ddiv+0x620>)
 8000d78:	0324      	lsls	r4, r4, #12
 8000d7a:	e671      	b.n	8000a60 <__aeabi_ddiv+0xc0>
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4252      	negs	r2, r2
 8000d80:	2101      	movs	r1, #1
 8000d82:	1ac9      	subs	r1, r1, r3
 8000d84:	2938      	cmp	r1, #56	@ 0x38
 8000d86:	dd00      	ble.n	8000d8a <__aeabi_ddiv+0x3ea>
 8000d88:	e666      	b.n	8000a58 <__aeabi_ddiv+0xb8>
 8000d8a:	291f      	cmp	r1, #31
 8000d8c:	dc00      	bgt.n	8000d90 <__aeabi_ddiv+0x3f0>
 8000d8e:	e0ab      	b.n	8000ee8 <__aeabi_ddiv+0x548>
 8000d90:	201f      	movs	r0, #31
 8000d92:	4240      	negs	r0, r0
 8000d94:	1ac3      	subs	r3, r0, r3
 8000d96:	4658      	mov	r0, fp
 8000d98:	40d8      	lsrs	r0, r3
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	2920      	cmp	r1, #32
 8000d9e:	d004      	beq.n	8000daa <__aeabi_ddiv+0x40a>
 8000da0:	4658      	mov	r0, fp
 8000da2:	4988      	ldr	r1, [pc, #544]	@ (8000fc4 <__aeabi_ddiv+0x624>)
 8000da4:	4451      	add	r1, sl
 8000da6:	4088      	lsls	r0, r1
 8000da8:	4302      	orrs	r2, r0
 8000daa:	1e51      	subs	r1, r2, #1
 8000dac:	418a      	sbcs	r2, r1
 8000dae:	431a      	orrs	r2, r3
 8000db0:	2307      	movs	r3, #7
 8000db2:	0019      	movs	r1, r3
 8000db4:	2400      	movs	r4, #0
 8000db6:	4011      	ands	r1, r2
 8000db8:	4213      	tst	r3, r2
 8000dba:	d00c      	beq.n	8000dd6 <__aeabi_ddiv+0x436>
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0x426>
 8000dc4:	e0f9      	b.n	8000fba <__aeabi_ddiv+0x61a>
 8000dc6:	1d11      	adds	r1, r2, #4
 8000dc8:	4291      	cmp	r1, r2
 8000dca:	419b      	sbcs	r3, r3
 8000dcc:	000a      	movs	r2, r1
 8000dce:	425b      	negs	r3, r3
 8000dd0:	0759      	lsls	r1, r3, #29
 8000dd2:	025b      	lsls	r3, r3, #9
 8000dd4:	0b1c      	lsrs	r4, r3, #12
 8000dd6:	08d2      	lsrs	r2, r2, #3
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	4690      	mov	r8, r2
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e63f      	b.n	8000a60 <__aeabi_ddiv+0xc0>
 8000de0:	2480      	movs	r4, #128	@ 0x80
 8000de2:	464b      	mov	r3, r9
 8000de4:	0324      	lsls	r4, r4, #12
 8000de6:	4223      	tst	r3, r4
 8000de8:	d009      	beq.n	8000dfe <__aeabi_ddiv+0x45e>
 8000dea:	465b      	mov	r3, fp
 8000dec:	4223      	tst	r3, r4
 8000dee:	d106      	bne.n	8000dfe <__aeabi_ddiv+0x45e>
 8000df0:	431c      	orrs	r4, r3
 8000df2:	0324      	lsls	r4, r4, #12
 8000df4:	002e      	movs	r6, r5
 8000df6:	4690      	mov	r8, r2
 8000df8:	4b71      	ldr	r3, [pc, #452]	@ (8000fc0 <__aeabi_ddiv+0x620>)
 8000dfa:	0b24      	lsrs	r4, r4, #12
 8000dfc:	e630      	b.n	8000a60 <__aeabi_ddiv+0xc0>
 8000dfe:	2480      	movs	r4, #128	@ 0x80
 8000e00:	464b      	mov	r3, r9
 8000e02:	0324      	lsls	r4, r4, #12
 8000e04:	431c      	orrs	r4, r3
 8000e06:	0324      	lsls	r4, r4, #12
 8000e08:	9e02      	ldr	r6, [sp, #8]
 8000e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8000fc0 <__aeabi_ddiv+0x620>)
 8000e0c:	0b24      	lsrs	r4, r4, #12
 8000e0e:	e627      	b.n	8000a60 <__aeabi_ddiv+0xc0>
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d100      	bne.n	8000e16 <__aeabi_ddiv+0x476>
 8000e14:	e700      	b.n	8000c18 <__aeabi_ddiv+0x278>
 8000e16:	9800      	ldr	r0, [sp, #0]
 8000e18:	1e51      	subs	r1, r2, #1
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	4464      	add	r4, ip
 8000e1e:	4284      	cmp	r4, r0
 8000e20:	d200      	bcs.n	8000e24 <__aeabi_ddiv+0x484>
 8000e22:	e084      	b.n	8000f2e <__aeabi_ddiv+0x58e>
 8000e24:	42bc      	cmp	r4, r7
 8000e26:	d200      	bcs.n	8000e2a <__aeabi_ddiv+0x48a>
 8000e28:	e0ae      	b.n	8000f88 <__aeabi_ddiv+0x5e8>
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_ddiv+0x48e>
 8000e2c:	e0c1      	b.n	8000fb2 <__aeabi_ddiv+0x612>
 8000e2e:	000a      	movs	r2, r1
 8000e30:	e6f0      	b.n	8000c14 <__aeabi_ddiv+0x274>
 8000e32:	4542      	cmp	r2, r8
 8000e34:	d900      	bls.n	8000e38 <__aeabi_ddiv+0x498>
 8000e36:	e62c      	b.n	8000a92 <__aeabi_ddiv+0xf2>
 8000e38:	464b      	mov	r3, r9
 8000e3a:	07dc      	lsls	r4, r3, #31
 8000e3c:	0858      	lsrs	r0, r3, #1
 8000e3e:	4643      	mov	r3, r8
 8000e40:	085b      	lsrs	r3, r3, #1
 8000e42:	431c      	orrs	r4, r3
 8000e44:	4643      	mov	r3, r8
 8000e46:	07df      	lsls	r7, r3, #31
 8000e48:	e62a      	b.n	8000aa0 <__aeabi_ddiv+0x100>
 8000e4a:	f001 f8df 	bl	800200c <__clzsi2>
 8000e4e:	2315      	movs	r3, #21
 8000e50:	469c      	mov	ip, r3
 8000e52:	4484      	add	ip, r0
 8000e54:	0002      	movs	r2, r0
 8000e56:	4663      	mov	r3, ip
 8000e58:	3220      	adds	r2, #32
 8000e5a:	2b1c      	cmp	r3, #28
 8000e5c:	dc00      	bgt.n	8000e60 <__aeabi_ddiv+0x4c0>
 8000e5e:	e72e      	b.n	8000cbe <__aeabi_ddiv+0x31e>
 8000e60:	0023      	movs	r3, r4
 8000e62:	3808      	subs	r0, #8
 8000e64:	4083      	lsls	r3, r0
 8000e66:	4699      	mov	r9, r3
 8000e68:	2300      	movs	r3, #0
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	e736      	b.n	8000cdc <__aeabi_ddiv+0x33c>
 8000e6e:	f001 f8cd 	bl	800200c <__clzsi2>
 8000e72:	0002      	movs	r2, r0
 8000e74:	0003      	movs	r3, r0
 8000e76:	3215      	adds	r2, #21
 8000e78:	3320      	adds	r3, #32
 8000e7a:	2a1c      	cmp	r2, #28
 8000e7c:	dc00      	bgt.n	8000e80 <__aeabi_ddiv+0x4e0>
 8000e7e:	e6fb      	b.n	8000c78 <__aeabi_ddiv+0x2d8>
 8000e80:	9900      	ldr	r1, [sp, #0]
 8000e82:	3808      	subs	r0, #8
 8000e84:	4081      	lsls	r1, r0
 8000e86:	2200      	movs	r2, #0
 8000e88:	468b      	mov	fp, r1
 8000e8a:	e702      	b.n	8000c92 <__aeabi_ddiv+0x2f2>
 8000e8c:	9900      	ldr	r1, [sp, #0]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	468c      	mov	ip, r1
 8000e92:	4464      	add	r4, ip
 8000e94:	42a1      	cmp	r1, r4
 8000e96:	d900      	bls.n	8000e9a <__aeabi_ddiv+0x4fa>
 8000e98:	e69a      	b.n	8000bd0 <__aeabi_ddiv+0x230>
 8000e9a:	42a2      	cmp	r2, r4
 8000e9c:	d800      	bhi.n	8000ea0 <__aeabi_ddiv+0x500>
 8000e9e:	e697      	b.n	8000bd0 <__aeabi_ddiv+0x230>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	4464      	add	r4, ip
 8000ea4:	e694      	b.n	8000bd0 <__aeabi_ddiv+0x230>
 8000ea6:	46ac      	mov	ip, r5
 8000ea8:	4461      	add	r1, ip
 8000eaa:	3f01      	subs	r7, #1
 8000eac:	428d      	cmp	r5, r1
 8000eae:	d900      	bls.n	8000eb2 <__aeabi_ddiv+0x512>
 8000eb0:	e680      	b.n	8000bb4 <__aeabi_ddiv+0x214>
 8000eb2:	428a      	cmp	r2, r1
 8000eb4:	d800      	bhi.n	8000eb8 <__aeabi_ddiv+0x518>
 8000eb6:	e67d      	b.n	8000bb4 <__aeabi_ddiv+0x214>
 8000eb8:	1e87      	subs	r7, r0, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e67a      	b.n	8000bb4 <__aeabi_ddiv+0x214>
 8000ebe:	4285      	cmp	r5, r0
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_ddiv+0x524>
 8000ec2:	e65f      	b.n	8000b84 <__aeabi_ddiv+0x1e4>
 8000ec4:	45b9      	cmp	r9, r7
 8000ec6:	d900      	bls.n	8000eca <__aeabi_ddiv+0x52a>
 8000ec8:	e65c      	b.n	8000b84 <__aeabi_ddiv+0x1e4>
 8000eca:	e656      	b.n	8000b7a <__aeabi_ddiv+0x1da>
 8000ecc:	42a2      	cmp	r2, r4
 8000ece:	d800      	bhi.n	8000ed2 <__aeabi_ddiv+0x532>
 8000ed0:	e61a      	b.n	8000b08 <__aeabi_ddiv+0x168>
 8000ed2:	1e83      	subs	r3, r0, #2
 8000ed4:	4464      	add	r4, ip
 8000ed6:	e617      	b.n	8000b08 <__aeabi_ddiv+0x168>
 8000ed8:	428a      	cmp	r2, r1
 8000eda:	d800      	bhi.n	8000ede <__aeabi_ddiv+0x53e>
 8000edc:	e600      	b.n	8000ae0 <__aeabi_ddiv+0x140>
 8000ede:	46ac      	mov	ip, r5
 8000ee0:	1e83      	subs	r3, r0, #2
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	4461      	add	r1, ip
 8000ee6:	e5fb      	b.n	8000ae0 <__aeabi_ddiv+0x140>
 8000ee8:	4837      	ldr	r0, [pc, #220]	@ (8000fc8 <__aeabi_ddiv+0x628>)
 8000eea:	0014      	movs	r4, r2
 8000eec:	4450      	add	r0, sl
 8000eee:	4082      	lsls	r2, r0
 8000ef0:	465b      	mov	r3, fp
 8000ef2:	0017      	movs	r7, r2
 8000ef4:	4083      	lsls	r3, r0
 8000ef6:	40cc      	lsrs	r4, r1
 8000ef8:	1e7a      	subs	r2, r7, #1
 8000efa:	4197      	sbcs	r7, r2
 8000efc:	4323      	orrs	r3, r4
 8000efe:	433b      	orrs	r3, r7
 8000f00:	001a      	movs	r2, r3
 8000f02:	465b      	mov	r3, fp
 8000f04:	40cb      	lsrs	r3, r1
 8000f06:	0751      	lsls	r1, r2, #29
 8000f08:	d009      	beq.n	8000f1e <__aeabi_ddiv+0x57e>
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	4011      	ands	r1, r2
 8000f0e:	2904      	cmp	r1, #4
 8000f10:	d005      	beq.n	8000f1e <__aeabi_ddiv+0x57e>
 8000f12:	1d11      	adds	r1, r2, #4
 8000f14:	4291      	cmp	r1, r2
 8000f16:	4192      	sbcs	r2, r2
 8000f18:	4252      	negs	r2, r2
 8000f1a:	189b      	adds	r3, r3, r2
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	0219      	lsls	r1, r3, #8
 8000f20:	d400      	bmi.n	8000f24 <__aeabi_ddiv+0x584>
 8000f22:	e755      	b.n	8000dd0 <__aeabi_ddiv+0x430>
 8000f24:	2200      	movs	r2, #0
 8000f26:	2301      	movs	r3, #1
 8000f28:	2400      	movs	r4, #0
 8000f2a:	4690      	mov	r8, r2
 8000f2c:	e598      	b.n	8000a60 <__aeabi_ddiv+0xc0>
 8000f2e:	000a      	movs	r2, r1
 8000f30:	42bc      	cmp	r4, r7
 8000f32:	d000      	beq.n	8000f36 <__aeabi_ddiv+0x596>
 8000f34:	e66e      	b.n	8000c14 <__aeabi_ddiv+0x274>
 8000f36:	454b      	cmp	r3, r9
 8000f38:	d000      	beq.n	8000f3c <__aeabi_ddiv+0x59c>
 8000f3a:	e66b      	b.n	8000c14 <__aeabi_ddiv+0x274>
 8000f3c:	e66c      	b.n	8000c18 <__aeabi_ddiv+0x278>
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <__aeabi_ddiv+0x62c>)
 8000f40:	4a23      	ldr	r2, [pc, #140]	@ (8000fd0 <__aeabi_ddiv+0x630>)
 8000f42:	4453      	add	r3, sl
 8000f44:	4592      	cmp	sl, r2
 8000f46:	da00      	bge.n	8000f4a <__aeabi_ddiv+0x5aa>
 8000f48:	e718      	b.n	8000d7c <__aeabi_ddiv+0x3dc>
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4249      	negs	r1, r1
 8000f4e:	1d0a      	adds	r2, r1, #4
 8000f50:	428a      	cmp	r2, r1
 8000f52:	4189      	sbcs	r1, r1
 8000f54:	4249      	negs	r1, r1
 8000f56:	448b      	add	fp, r1
 8000f58:	e666      	b.n	8000c28 <__aeabi_ddiv+0x288>
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	4011      	ands	r1, r2
 8000f5e:	2904      	cmp	r1, #4
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x5c4>
 8000f62:	e661      	b.n	8000c28 <__aeabi_ddiv+0x288>
 8000f64:	0011      	movs	r1, r2
 8000f66:	e7f2      	b.n	8000f4e <__aeabi_ddiv+0x5ae>
 8000f68:	42bc      	cmp	r4, r7
 8000f6a:	d800      	bhi.n	8000f6e <__aeabi_ddiv+0x5ce>
 8000f6c:	e60a      	b.n	8000b84 <__aeabi_ddiv+0x1e4>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	425b      	negs	r3, r3
 8000f72:	469c      	mov	ip, r3
 8000f74:	9900      	ldr	r1, [sp, #0]
 8000f76:	444f      	add	r7, r9
 8000f78:	454f      	cmp	r7, r9
 8000f7a:	419b      	sbcs	r3, r3
 8000f7c:	44e3      	add	fp, ip
 8000f7e:	468c      	mov	ip, r1
 8000f80:	425b      	negs	r3, r3
 8000f82:	4463      	add	r3, ip
 8000f84:	18c0      	adds	r0, r0, r3
 8000f86:	e5ff      	b.n	8000b88 <__aeabi_ddiv+0x1e8>
 8000f88:	4649      	mov	r1, r9
 8000f8a:	9d00      	ldr	r5, [sp, #0]
 8000f8c:	0048      	lsls	r0, r1, #1
 8000f8e:	4548      	cmp	r0, r9
 8000f90:	4189      	sbcs	r1, r1
 8000f92:	46ac      	mov	ip, r5
 8000f94:	4249      	negs	r1, r1
 8000f96:	4461      	add	r1, ip
 8000f98:	4681      	mov	r9, r0
 8000f9a:	3a02      	subs	r2, #2
 8000f9c:	1864      	adds	r4, r4, r1
 8000f9e:	e7c7      	b.n	8000f30 <__aeabi_ddiv+0x590>
 8000fa0:	2480      	movs	r4, #128	@ 0x80
 8000fa2:	465b      	mov	r3, fp
 8000fa4:	0324      	lsls	r4, r4, #12
 8000fa6:	431c      	orrs	r4, r3
 8000fa8:	0324      	lsls	r4, r4, #12
 8000faa:	4690      	mov	r8, r2
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <__aeabi_ddiv+0x620>)
 8000fae:	0b24      	lsrs	r4, r4, #12
 8000fb0:	e556      	b.n	8000a60 <__aeabi_ddiv+0xc0>
 8000fb2:	4599      	cmp	r9, r3
 8000fb4:	d3e8      	bcc.n	8000f88 <__aeabi_ddiv+0x5e8>
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	e7bd      	b.n	8000f36 <__aeabi_ddiv+0x596>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e708      	b.n	8000dd0 <__aeabi_ddiv+0x430>
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	000007ff 	.word	0x000007ff
 8000fc4:	0000043e 	.word	0x0000043e
 8000fc8:	0000041e 	.word	0x0000041e
 8000fcc:	000003ff 	.word	0x000003ff
 8000fd0:	fffffc02 	.word	0xfffffc02

08000fd4 <__eqdf2>:
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	4657      	mov	r7, sl
 8000fd8:	46de      	mov	lr, fp
 8000fda:	464e      	mov	r6, r9
 8000fdc:	4645      	mov	r5, r8
 8000fde:	b5e0      	push	{r5, r6, r7, lr}
 8000fe0:	000d      	movs	r5, r1
 8000fe2:	0004      	movs	r4, r0
 8000fe4:	0fe8      	lsrs	r0, r5, #31
 8000fe6:	4683      	mov	fp, r0
 8000fe8:	0309      	lsls	r1, r1, #12
 8000fea:	0fd8      	lsrs	r0, r3, #31
 8000fec:	0b09      	lsrs	r1, r1, #12
 8000fee:	4682      	mov	sl, r0
 8000ff0:	4819      	ldr	r0, [pc, #100]	@ (8001058 <__eqdf2+0x84>)
 8000ff2:	468c      	mov	ip, r1
 8000ff4:	031f      	lsls	r7, r3, #12
 8000ff6:	0069      	lsls	r1, r5, #1
 8000ff8:	005e      	lsls	r6, r3, #1
 8000ffa:	0d49      	lsrs	r1, r1, #21
 8000ffc:	0b3f      	lsrs	r7, r7, #12
 8000ffe:	0d76      	lsrs	r6, r6, #21
 8001000:	4281      	cmp	r1, r0
 8001002:	d018      	beq.n	8001036 <__eqdf2+0x62>
 8001004:	4286      	cmp	r6, r0
 8001006:	d00f      	beq.n	8001028 <__eqdf2+0x54>
 8001008:	2001      	movs	r0, #1
 800100a:	42b1      	cmp	r1, r6
 800100c:	d10d      	bne.n	800102a <__eqdf2+0x56>
 800100e:	45bc      	cmp	ip, r7
 8001010:	d10b      	bne.n	800102a <__eqdf2+0x56>
 8001012:	4294      	cmp	r4, r2
 8001014:	d109      	bne.n	800102a <__eqdf2+0x56>
 8001016:	45d3      	cmp	fp, sl
 8001018:	d01c      	beq.n	8001054 <__eqdf2+0x80>
 800101a:	2900      	cmp	r1, #0
 800101c:	d105      	bne.n	800102a <__eqdf2+0x56>
 800101e:	4660      	mov	r0, ip
 8001020:	4320      	orrs	r0, r4
 8001022:	1e43      	subs	r3, r0, #1
 8001024:	4198      	sbcs	r0, r3
 8001026:	e000      	b.n	800102a <__eqdf2+0x56>
 8001028:	2001      	movs	r0, #1
 800102a:	bcf0      	pop	{r4, r5, r6, r7}
 800102c:	46bb      	mov	fp, r7
 800102e:	46b2      	mov	sl, r6
 8001030:	46a9      	mov	r9, r5
 8001032:	46a0      	mov	r8, r4
 8001034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001036:	2001      	movs	r0, #1
 8001038:	428e      	cmp	r6, r1
 800103a:	d1f6      	bne.n	800102a <__eqdf2+0x56>
 800103c:	4661      	mov	r1, ip
 800103e:	4339      	orrs	r1, r7
 8001040:	000f      	movs	r7, r1
 8001042:	4317      	orrs	r7, r2
 8001044:	4327      	orrs	r7, r4
 8001046:	d1f0      	bne.n	800102a <__eqdf2+0x56>
 8001048:	465b      	mov	r3, fp
 800104a:	4652      	mov	r2, sl
 800104c:	1a98      	subs	r0, r3, r2
 800104e:	1e43      	subs	r3, r0, #1
 8001050:	4198      	sbcs	r0, r3
 8001052:	e7ea      	b.n	800102a <__eqdf2+0x56>
 8001054:	2000      	movs	r0, #0
 8001056:	e7e8      	b.n	800102a <__eqdf2+0x56>
 8001058:	000007ff 	.word	0x000007ff

0800105c <__gedf2>:
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	4657      	mov	r7, sl
 8001060:	464e      	mov	r6, r9
 8001062:	4645      	mov	r5, r8
 8001064:	46de      	mov	lr, fp
 8001066:	b5e0      	push	{r5, r6, r7, lr}
 8001068:	000d      	movs	r5, r1
 800106a:	030f      	lsls	r7, r1, #12
 800106c:	0b39      	lsrs	r1, r7, #12
 800106e:	b083      	sub	sp, #12
 8001070:	0004      	movs	r4, r0
 8001072:	4680      	mov	r8, r0
 8001074:	9101      	str	r1, [sp, #4]
 8001076:	0058      	lsls	r0, r3, #1
 8001078:	0fe9      	lsrs	r1, r5, #31
 800107a:	4f31      	ldr	r7, [pc, #196]	@ (8001140 <__gedf2+0xe4>)
 800107c:	0d40      	lsrs	r0, r0, #21
 800107e:	468c      	mov	ip, r1
 8001080:	006e      	lsls	r6, r5, #1
 8001082:	0319      	lsls	r1, r3, #12
 8001084:	4682      	mov	sl, r0
 8001086:	4691      	mov	r9, r2
 8001088:	0d76      	lsrs	r6, r6, #21
 800108a:	0b09      	lsrs	r1, r1, #12
 800108c:	0fd8      	lsrs	r0, r3, #31
 800108e:	42be      	cmp	r6, r7
 8001090:	d01f      	beq.n	80010d2 <__gedf2+0x76>
 8001092:	45ba      	cmp	sl, r7
 8001094:	d00f      	beq.n	80010b6 <__gedf2+0x5a>
 8001096:	2e00      	cmp	r6, #0
 8001098:	d12f      	bne.n	80010fa <__gedf2+0x9e>
 800109a:	4655      	mov	r5, sl
 800109c:	9e01      	ldr	r6, [sp, #4]
 800109e:	4334      	orrs	r4, r6
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d127      	bne.n	80010f4 <__gedf2+0x98>
 80010a4:	430a      	orrs	r2, r1
 80010a6:	d03a      	beq.n	800111e <__gedf2+0xc2>
 80010a8:	2c00      	cmp	r4, #0
 80010aa:	d145      	bne.n	8001138 <__gedf2+0xdc>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d11a      	bne.n	80010e6 <__gedf2+0x8a>
 80010b0:	2001      	movs	r0, #1
 80010b2:	4240      	negs	r0, r0
 80010b4:	e017      	b.n	80010e6 <__gedf2+0x8a>
 80010b6:	4311      	orrs	r1, r2
 80010b8:	d13b      	bne.n	8001132 <__gedf2+0xd6>
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d102      	bne.n	80010c4 <__gedf2+0x68>
 80010be:	9f01      	ldr	r7, [sp, #4]
 80010c0:	4327      	orrs	r7, r4
 80010c2:	d0f3      	beq.n	80010ac <__gedf2+0x50>
 80010c4:	4584      	cmp	ip, r0
 80010c6:	d109      	bne.n	80010dc <__gedf2+0x80>
 80010c8:	4663      	mov	r3, ip
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <__gedf2+0x54>
 80010ce:	4660      	mov	r0, ip
 80010d0:	e009      	b.n	80010e6 <__gedf2+0x8a>
 80010d2:	9f01      	ldr	r7, [sp, #4]
 80010d4:	4327      	orrs	r7, r4
 80010d6:	d12c      	bne.n	8001132 <__gedf2+0xd6>
 80010d8:	45b2      	cmp	sl, r6
 80010da:	d024      	beq.n	8001126 <__gedf2+0xca>
 80010dc:	4663      	mov	r3, ip
 80010de:	2002      	movs	r0, #2
 80010e0:	3b01      	subs	r3, #1
 80010e2:	4018      	ands	r0, r3
 80010e4:	3801      	subs	r0, #1
 80010e6:	b003      	add	sp, #12
 80010e8:	bcf0      	pop	{r4, r5, r6, r7}
 80010ea:	46bb      	mov	fp, r7
 80010ec:	46b2      	mov	sl, r6
 80010ee:	46a9      	mov	r9, r5
 80010f0:	46a0      	mov	r8, r4
 80010f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f4:	2c00      	cmp	r4, #0
 80010f6:	d0d9      	beq.n	80010ac <__gedf2+0x50>
 80010f8:	e7e4      	b.n	80010c4 <__gedf2+0x68>
 80010fa:	4654      	mov	r4, sl
 80010fc:	2c00      	cmp	r4, #0
 80010fe:	d0ed      	beq.n	80010dc <__gedf2+0x80>
 8001100:	4584      	cmp	ip, r0
 8001102:	d1eb      	bne.n	80010dc <__gedf2+0x80>
 8001104:	4556      	cmp	r6, sl
 8001106:	dce9      	bgt.n	80010dc <__gedf2+0x80>
 8001108:	dbde      	blt.n	80010c8 <__gedf2+0x6c>
 800110a:	9b01      	ldr	r3, [sp, #4]
 800110c:	428b      	cmp	r3, r1
 800110e:	d8e5      	bhi.n	80010dc <__gedf2+0x80>
 8001110:	d1da      	bne.n	80010c8 <__gedf2+0x6c>
 8001112:	45c8      	cmp	r8, r9
 8001114:	d8e2      	bhi.n	80010dc <__gedf2+0x80>
 8001116:	2000      	movs	r0, #0
 8001118:	45c8      	cmp	r8, r9
 800111a:	d2e4      	bcs.n	80010e6 <__gedf2+0x8a>
 800111c:	e7d4      	b.n	80010c8 <__gedf2+0x6c>
 800111e:	2000      	movs	r0, #0
 8001120:	2c00      	cmp	r4, #0
 8001122:	d0e0      	beq.n	80010e6 <__gedf2+0x8a>
 8001124:	e7da      	b.n	80010dc <__gedf2+0x80>
 8001126:	4311      	orrs	r1, r2
 8001128:	d103      	bne.n	8001132 <__gedf2+0xd6>
 800112a:	4584      	cmp	ip, r0
 800112c:	d1d6      	bne.n	80010dc <__gedf2+0x80>
 800112e:	2000      	movs	r0, #0
 8001130:	e7d9      	b.n	80010e6 <__gedf2+0x8a>
 8001132:	2002      	movs	r0, #2
 8001134:	4240      	negs	r0, r0
 8001136:	e7d6      	b.n	80010e6 <__gedf2+0x8a>
 8001138:	4584      	cmp	ip, r0
 800113a:	d0e6      	beq.n	800110a <__gedf2+0xae>
 800113c:	e7ce      	b.n	80010dc <__gedf2+0x80>
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	000007ff 	.word	0x000007ff

08001144 <__ledf2>:
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	4657      	mov	r7, sl
 8001148:	464e      	mov	r6, r9
 800114a:	4645      	mov	r5, r8
 800114c:	46de      	mov	lr, fp
 800114e:	b5e0      	push	{r5, r6, r7, lr}
 8001150:	000d      	movs	r5, r1
 8001152:	030f      	lsls	r7, r1, #12
 8001154:	0004      	movs	r4, r0
 8001156:	4680      	mov	r8, r0
 8001158:	0fe8      	lsrs	r0, r5, #31
 800115a:	0b39      	lsrs	r1, r7, #12
 800115c:	4684      	mov	ip, r0
 800115e:	b083      	sub	sp, #12
 8001160:	0058      	lsls	r0, r3, #1
 8001162:	4f30      	ldr	r7, [pc, #192]	@ (8001224 <__ledf2+0xe0>)
 8001164:	0d40      	lsrs	r0, r0, #21
 8001166:	9101      	str	r1, [sp, #4]
 8001168:	031e      	lsls	r6, r3, #12
 800116a:	0069      	lsls	r1, r5, #1
 800116c:	4682      	mov	sl, r0
 800116e:	4691      	mov	r9, r2
 8001170:	0d49      	lsrs	r1, r1, #21
 8001172:	0b36      	lsrs	r6, r6, #12
 8001174:	0fd8      	lsrs	r0, r3, #31
 8001176:	42b9      	cmp	r1, r7
 8001178:	d020      	beq.n	80011bc <__ledf2+0x78>
 800117a:	45ba      	cmp	sl, r7
 800117c:	d00f      	beq.n	800119e <__ledf2+0x5a>
 800117e:	2900      	cmp	r1, #0
 8001180:	d12b      	bne.n	80011da <__ledf2+0x96>
 8001182:	9901      	ldr	r1, [sp, #4]
 8001184:	430c      	orrs	r4, r1
 8001186:	4651      	mov	r1, sl
 8001188:	2900      	cmp	r1, #0
 800118a:	d137      	bne.n	80011fc <__ledf2+0xb8>
 800118c:	4332      	orrs	r2, r6
 800118e:	d038      	beq.n	8001202 <__ledf2+0xbe>
 8001190:	2c00      	cmp	r4, #0
 8001192:	d144      	bne.n	800121e <__ledf2+0xda>
 8001194:	2800      	cmp	r0, #0
 8001196:	d119      	bne.n	80011cc <__ledf2+0x88>
 8001198:	2001      	movs	r0, #1
 800119a:	4240      	negs	r0, r0
 800119c:	e016      	b.n	80011cc <__ledf2+0x88>
 800119e:	4316      	orrs	r6, r2
 80011a0:	d113      	bne.n	80011ca <__ledf2+0x86>
 80011a2:	2900      	cmp	r1, #0
 80011a4:	d102      	bne.n	80011ac <__ledf2+0x68>
 80011a6:	9f01      	ldr	r7, [sp, #4]
 80011a8:	4327      	orrs	r7, r4
 80011aa:	d0f3      	beq.n	8001194 <__ledf2+0x50>
 80011ac:	4584      	cmp	ip, r0
 80011ae:	d020      	beq.n	80011f2 <__ledf2+0xae>
 80011b0:	4663      	mov	r3, ip
 80011b2:	2002      	movs	r0, #2
 80011b4:	3b01      	subs	r3, #1
 80011b6:	4018      	ands	r0, r3
 80011b8:	3801      	subs	r0, #1
 80011ba:	e007      	b.n	80011cc <__ledf2+0x88>
 80011bc:	9f01      	ldr	r7, [sp, #4]
 80011be:	4327      	orrs	r7, r4
 80011c0:	d103      	bne.n	80011ca <__ledf2+0x86>
 80011c2:	458a      	cmp	sl, r1
 80011c4:	d1f4      	bne.n	80011b0 <__ledf2+0x6c>
 80011c6:	4316      	orrs	r6, r2
 80011c8:	d01f      	beq.n	800120a <__ledf2+0xc6>
 80011ca:	2002      	movs	r0, #2
 80011cc:	b003      	add	sp, #12
 80011ce:	bcf0      	pop	{r4, r5, r6, r7}
 80011d0:	46bb      	mov	fp, r7
 80011d2:	46b2      	mov	sl, r6
 80011d4:	46a9      	mov	r9, r5
 80011d6:	46a0      	mov	r8, r4
 80011d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011da:	4654      	mov	r4, sl
 80011dc:	2c00      	cmp	r4, #0
 80011de:	d0e7      	beq.n	80011b0 <__ledf2+0x6c>
 80011e0:	4584      	cmp	ip, r0
 80011e2:	d1e5      	bne.n	80011b0 <__ledf2+0x6c>
 80011e4:	4551      	cmp	r1, sl
 80011e6:	dce3      	bgt.n	80011b0 <__ledf2+0x6c>
 80011e8:	db03      	blt.n	80011f2 <__ledf2+0xae>
 80011ea:	9b01      	ldr	r3, [sp, #4]
 80011ec:	42b3      	cmp	r3, r6
 80011ee:	d8df      	bhi.n	80011b0 <__ledf2+0x6c>
 80011f0:	d00f      	beq.n	8001212 <__ledf2+0xce>
 80011f2:	4663      	mov	r3, ip
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0cf      	beq.n	8001198 <__ledf2+0x54>
 80011f8:	4660      	mov	r0, ip
 80011fa:	e7e7      	b.n	80011cc <__ledf2+0x88>
 80011fc:	2c00      	cmp	r4, #0
 80011fe:	d0c9      	beq.n	8001194 <__ledf2+0x50>
 8001200:	e7d4      	b.n	80011ac <__ledf2+0x68>
 8001202:	2000      	movs	r0, #0
 8001204:	2c00      	cmp	r4, #0
 8001206:	d0e1      	beq.n	80011cc <__ledf2+0x88>
 8001208:	e7d2      	b.n	80011b0 <__ledf2+0x6c>
 800120a:	4584      	cmp	ip, r0
 800120c:	d1d0      	bne.n	80011b0 <__ledf2+0x6c>
 800120e:	2000      	movs	r0, #0
 8001210:	e7dc      	b.n	80011cc <__ledf2+0x88>
 8001212:	45c8      	cmp	r8, r9
 8001214:	d8cc      	bhi.n	80011b0 <__ledf2+0x6c>
 8001216:	2000      	movs	r0, #0
 8001218:	45c8      	cmp	r8, r9
 800121a:	d2d7      	bcs.n	80011cc <__ledf2+0x88>
 800121c:	e7e9      	b.n	80011f2 <__ledf2+0xae>
 800121e:	4584      	cmp	ip, r0
 8001220:	d0e3      	beq.n	80011ea <__ledf2+0xa6>
 8001222:	e7c5      	b.n	80011b0 <__ledf2+0x6c>
 8001224:	000007ff 	.word	0x000007ff

08001228 <__aeabi_dmul>:
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	4657      	mov	r7, sl
 800122c:	46de      	mov	lr, fp
 800122e:	464e      	mov	r6, r9
 8001230:	4645      	mov	r5, r8
 8001232:	b5e0      	push	{r5, r6, r7, lr}
 8001234:	001f      	movs	r7, r3
 8001236:	030b      	lsls	r3, r1, #12
 8001238:	0b1b      	lsrs	r3, r3, #12
 800123a:	0016      	movs	r6, r2
 800123c:	469a      	mov	sl, r3
 800123e:	0fca      	lsrs	r2, r1, #31
 8001240:	004b      	lsls	r3, r1, #1
 8001242:	0004      	movs	r4, r0
 8001244:	4693      	mov	fp, r2
 8001246:	b087      	sub	sp, #28
 8001248:	0d5b      	lsrs	r3, r3, #21
 800124a:	d100      	bne.n	800124e <__aeabi_dmul+0x26>
 800124c:	e0d5      	b.n	80013fa <__aeabi_dmul+0x1d2>
 800124e:	4abb      	ldr	r2, [pc, #748]	@ (800153c <__aeabi_dmul+0x314>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d100      	bne.n	8001256 <__aeabi_dmul+0x2e>
 8001254:	e0f8      	b.n	8001448 <__aeabi_dmul+0x220>
 8001256:	4651      	mov	r1, sl
 8001258:	0f42      	lsrs	r2, r0, #29
 800125a:	00c9      	lsls	r1, r1, #3
 800125c:	430a      	orrs	r2, r1
 800125e:	2180      	movs	r1, #128	@ 0x80
 8001260:	0409      	lsls	r1, r1, #16
 8001262:	4311      	orrs	r1, r2
 8001264:	00c2      	lsls	r2, r0, #3
 8001266:	4691      	mov	r9, r2
 8001268:	4ab5      	ldr	r2, [pc, #724]	@ (8001540 <__aeabi_dmul+0x318>)
 800126a:	468a      	mov	sl, r1
 800126c:	189d      	adds	r5, r3, r2
 800126e:	2300      	movs	r3, #0
 8001270:	4698      	mov	r8, r3
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	033c      	lsls	r4, r7, #12
 8001276:	007b      	lsls	r3, r7, #1
 8001278:	0ffa      	lsrs	r2, r7, #31
 800127a:	0030      	movs	r0, r6
 800127c:	0b24      	lsrs	r4, r4, #12
 800127e:	0d5b      	lsrs	r3, r3, #21
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	d100      	bne.n	8001286 <__aeabi_dmul+0x5e>
 8001284:	e096      	b.n	80013b4 <__aeabi_dmul+0x18c>
 8001286:	4aad      	ldr	r2, [pc, #692]	@ (800153c <__aeabi_dmul+0x314>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d031      	beq.n	80012f0 <__aeabi_dmul+0xc8>
 800128c:	0f72      	lsrs	r2, r6, #29
 800128e:	00e4      	lsls	r4, r4, #3
 8001290:	4322      	orrs	r2, r4
 8001292:	2480      	movs	r4, #128	@ 0x80
 8001294:	0424      	lsls	r4, r4, #16
 8001296:	4314      	orrs	r4, r2
 8001298:	4aa9      	ldr	r2, [pc, #676]	@ (8001540 <__aeabi_dmul+0x318>)
 800129a:	00f0      	lsls	r0, r6, #3
 800129c:	4694      	mov	ip, r2
 800129e:	4463      	add	r3, ip
 80012a0:	195b      	adds	r3, r3, r5
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	9201      	str	r2, [sp, #4]
 80012a6:	4642      	mov	r2, r8
 80012a8:	2600      	movs	r6, #0
 80012aa:	2a0a      	cmp	r2, #10
 80012ac:	dc42      	bgt.n	8001334 <__aeabi_dmul+0x10c>
 80012ae:	465a      	mov	r2, fp
 80012b0:	9900      	ldr	r1, [sp, #0]
 80012b2:	404a      	eors	r2, r1
 80012b4:	4693      	mov	fp, r2
 80012b6:	4642      	mov	r2, r8
 80012b8:	2a02      	cmp	r2, #2
 80012ba:	dc32      	bgt.n	8001322 <__aeabi_dmul+0xfa>
 80012bc:	3a01      	subs	r2, #1
 80012be:	2a01      	cmp	r2, #1
 80012c0:	d900      	bls.n	80012c4 <__aeabi_dmul+0x9c>
 80012c2:	e149      	b.n	8001558 <__aeabi_dmul+0x330>
 80012c4:	2e02      	cmp	r6, #2
 80012c6:	d100      	bne.n	80012ca <__aeabi_dmul+0xa2>
 80012c8:	e0ca      	b.n	8001460 <__aeabi_dmul+0x238>
 80012ca:	2e01      	cmp	r6, #1
 80012cc:	d13d      	bne.n	800134a <__aeabi_dmul+0x122>
 80012ce:	2300      	movs	r3, #0
 80012d0:	2400      	movs	r4, #0
 80012d2:	2200      	movs	r2, #0
 80012d4:	0010      	movs	r0, r2
 80012d6:	465a      	mov	r2, fp
 80012d8:	051b      	lsls	r3, r3, #20
 80012da:	4323      	orrs	r3, r4
 80012dc:	07d2      	lsls	r2, r2, #31
 80012de:	4313      	orrs	r3, r2
 80012e0:	0019      	movs	r1, r3
 80012e2:	b007      	add	sp, #28
 80012e4:	bcf0      	pop	{r4, r5, r6, r7}
 80012e6:	46bb      	mov	fp, r7
 80012e8:	46b2      	mov	sl, r6
 80012ea:	46a9      	mov	r9, r5
 80012ec:	46a0      	mov	r8, r4
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f0:	4b92      	ldr	r3, [pc, #584]	@ (800153c <__aeabi_dmul+0x314>)
 80012f2:	4326      	orrs	r6, r4
 80012f4:	18eb      	adds	r3, r5, r3
 80012f6:	2e00      	cmp	r6, #0
 80012f8:	d100      	bne.n	80012fc <__aeabi_dmul+0xd4>
 80012fa:	e0bb      	b.n	8001474 <__aeabi_dmul+0x24c>
 80012fc:	2203      	movs	r2, #3
 80012fe:	4641      	mov	r1, r8
 8001300:	4311      	orrs	r1, r2
 8001302:	465a      	mov	r2, fp
 8001304:	4688      	mov	r8, r1
 8001306:	9900      	ldr	r1, [sp, #0]
 8001308:	404a      	eors	r2, r1
 800130a:	2180      	movs	r1, #128	@ 0x80
 800130c:	0109      	lsls	r1, r1, #4
 800130e:	468c      	mov	ip, r1
 8001310:	0029      	movs	r1, r5
 8001312:	4461      	add	r1, ip
 8001314:	9101      	str	r1, [sp, #4]
 8001316:	4641      	mov	r1, r8
 8001318:	290a      	cmp	r1, #10
 800131a:	dd00      	ble.n	800131e <__aeabi_dmul+0xf6>
 800131c:	e233      	b.n	8001786 <__aeabi_dmul+0x55e>
 800131e:	4693      	mov	fp, r2
 8001320:	2603      	movs	r6, #3
 8001322:	4642      	mov	r2, r8
 8001324:	2701      	movs	r7, #1
 8001326:	4097      	lsls	r7, r2
 8001328:	21a6      	movs	r1, #166	@ 0xa6
 800132a:	003a      	movs	r2, r7
 800132c:	00c9      	lsls	r1, r1, #3
 800132e:	400a      	ands	r2, r1
 8001330:	420f      	tst	r7, r1
 8001332:	d031      	beq.n	8001398 <__aeabi_dmul+0x170>
 8001334:	9e02      	ldr	r6, [sp, #8]
 8001336:	2e02      	cmp	r6, #2
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x114>
 800133a:	e235      	b.n	80017a8 <__aeabi_dmul+0x580>
 800133c:	2e03      	cmp	r6, #3
 800133e:	d100      	bne.n	8001342 <__aeabi_dmul+0x11a>
 8001340:	e1d2      	b.n	80016e8 <__aeabi_dmul+0x4c0>
 8001342:	4654      	mov	r4, sl
 8001344:	4648      	mov	r0, r9
 8001346:	2e01      	cmp	r6, #1
 8001348:	d0c1      	beq.n	80012ce <__aeabi_dmul+0xa6>
 800134a:	9a01      	ldr	r2, [sp, #4]
 800134c:	4b7d      	ldr	r3, [pc, #500]	@ (8001544 <__aeabi_dmul+0x31c>)
 800134e:	4694      	mov	ip, r2
 8001350:	4463      	add	r3, ip
 8001352:	2b00      	cmp	r3, #0
 8001354:	dc00      	bgt.n	8001358 <__aeabi_dmul+0x130>
 8001356:	e0c0      	b.n	80014da <__aeabi_dmul+0x2b2>
 8001358:	0742      	lsls	r2, r0, #29
 800135a:	d009      	beq.n	8001370 <__aeabi_dmul+0x148>
 800135c:	220f      	movs	r2, #15
 800135e:	4002      	ands	r2, r0
 8001360:	2a04      	cmp	r2, #4
 8001362:	d005      	beq.n	8001370 <__aeabi_dmul+0x148>
 8001364:	1d02      	adds	r2, r0, #4
 8001366:	4282      	cmp	r2, r0
 8001368:	4180      	sbcs	r0, r0
 800136a:	4240      	negs	r0, r0
 800136c:	1824      	adds	r4, r4, r0
 800136e:	0010      	movs	r0, r2
 8001370:	01e2      	lsls	r2, r4, #7
 8001372:	d506      	bpl.n	8001382 <__aeabi_dmul+0x15a>
 8001374:	4b74      	ldr	r3, [pc, #464]	@ (8001548 <__aeabi_dmul+0x320>)
 8001376:	9a01      	ldr	r2, [sp, #4]
 8001378:	401c      	ands	r4, r3
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	4694      	mov	ip, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4463      	add	r3, ip
 8001382:	4a72      	ldr	r2, [pc, #456]	@ (800154c <__aeabi_dmul+0x324>)
 8001384:	4293      	cmp	r3, r2
 8001386:	dc6b      	bgt.n	8001460 <__aeabi_dmul+0x238>
 8001388:	0762      	lsls	r2, r4, #29
 800138a:	08c0      	lsrs	r0, r0, #3
 800138c:	0264      	lsls	r4, r4, #9
 800138e:	055b      	lsls	r3, r3, #21
 8001390:	4302      	orrs	r2, r0
 8001392:	0b24      	lsrs	r4, r4, #12
 8001394:	0d5b      	lsrs	r3, r3, #21
 8001396:	e79d      	b.n	80012d4 <__aeabi_dmul+0xac>
 8001398:	2190      	movs	r1, #144	@ 0x90
 800139a:	0089      	lsls	r1, r1, #2
 800139c:	420f      	tst	r7, r1
 800139e:	d163      	bne.n	8001468 <__aeabi_dmul+0x240>
 80013a0:	2288      	movs	r2, #136	@ 0x88
 80013a2:	423a      	tst	r2, r7
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dmul+0x180>
 80013a6:	e0d7      	b.n	8001558 <__aeabi_dmul+0x330>
 80013a8:	9b00      	ldr	r3, [sp, #0]
 80013aa:	46a2      	mov	sl, r4
 80013ac:	469b      	mov	fp, r3
 80013ae:	4681      	mov	r9, r0
 80013b0:	9602      	str	r6, [sp, #8]
 80013b2:	e7bf      	b.n	8001334 <__aeabi_dmul+0x10c>
 80013b4:	0023      	movs	r3, r4
 80013b6:	4333      	orrs	r3, r6
 80013b8:	d100      	bne.n	80013bc <__aeabi_dmul+0x194>
 80013ba:	e07f      	b.n	80014bc <__aeabi_dmul+0x294>
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d100      	bne.n	80013c2 <__aeabi_dmul+0x19a>
 80013c0:	e1ad      	b.n	800171e <__aeabi_dmul+0x4f6>
 80013c2:	0020      	movs	r0, r4
 80013c4:	f000 fe22 	bl	800200c <__clzsi2>
 80013c8:	0002      	movs	r2, r0
 80013ca:	0003      	movs	r3, r0
 80013cc:	3a0b      	subs	r2, #11
 80013ce:	201d      	movs	r0, #29
 80013d0:	0019      	movs	r1, r3
 80013d2:	1a82      	subs	r2, r0, r2
 80013d4:	0030      	movs	r0, r6
 80013d6:	3908      	subs	r1, #8
 80013d8:	40d0      	lsrs	r0, r2
 80013da:	408c      	lsls	r4, r1
 80013dc:	4304      	orrs	r4, r0
 80013de:	0030      	movs	r0, r6
 80013e0:	4088      	lsls	r0, r1
 80013e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001550 <__aeabi_dmul+0x328>)
 80013e4:	1aeb      	subs	r3, r5, r3
 80013e6:	4694      	mov	ip, r2
 80013e8:	4463      	add	r3, ip
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	9201      	str	r2, [sp, #4]
 80013ee:	4642      	mov	r2, r8
 80013f0:	2600      	movs	r6, #0
 80013f2:	2a0a      	cmp	r2, #10
 80013f4:	dc00      	bgt.n	80013f8 <__aeabi_dmul+0x1d0>
 80013f6:	e75a      	b.n	80012ae <__aeabi_dmul+0x86>
 80013f8:	e79c      	b.n	8001334 <__aeabi_dmul+0x10c>
 80013fa:	4653      	mov	r3, sl
 80013fc:	4303      	orrs	r3, r0
 80013fe:	4699      	mov	r9, r3
 8001400:	d054      	beq.n	80014ac <__aeabi_dmul+0x284>
 8001402:	4653      	mov	r3, sl
 8001404:	2b00      	cmp	r3, #0
 8001406:	d100      	bne.n	800140a <__aeabi_dmul+0x1e2>
 8001408:	e177      	b.n	80016fa <__aeabi_dmul+0x4d2>
 800140a:	4650      	mov	r0, sl
 800140c:	f000 fdfe 	bl	800200c <__clzsi2>
 8001410:	230b      	movs	r3, #11
 8001412:	425b      	negs	r3, r3
 8001414:	469c      	mov	ip, r3
 8001416:	0002      	movs	r2, r0
 8001418:	4484      	add	ip, r0
 800141a:	0011      	movs	r1, r2
 800141c:	4650      	mov	r0, sl
 800141e:	3908      	subs	r1, #8
 8001420:	4088      	lsls	r0, r1
 8001422:	231d      	movs	r3, #29
 8001424:	4680      	mov	r8, r0
 8001426:	4660      	mov	r0, ip
 8001428:	1a1b      	subs	r3, r3, r0
 800142a:	0020      	movs	r0, r4
 800142c:	40d8      	lsrs	r0, r3
 800142e:	0003      	movs	r3, r0
 8001430:	4640      	mov	r0, r8
 8001432:	4303      	orrs	r3, r0
 8001434:	469a      	mov	sl, r3
 8001436:	0023      	movs	r3, r4
 8001438:	408b      	lsls	r3, r1
 800143a:	4699      	mov	r9, r3
 800143c:	2300      	movs	r3, #0
 800143e:	4d44      	ldr	r5, [pc, #272]	@ (8001550 <__aeabi_dmul+0x328>)
 8001440:	4698      	mov	r8, r3
 8001442:	1aad      	subs	r5, r5, r2
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	e715      	b.n	8001274 <__aeabi_dmul+0x4c>
 8001448:	4652      	mov	r2, sl
 800144a:	4302      	orrs	r2, r0
 800144c:	4691      	mov	r9, r2
 800144e:	d126      	bne.n	800149e <__aeabi_dmul+0x276>
 8001450:	2200      	movs	r2, #0
 8001452:	001d      	movs	r5, r3
 8001454:	2302      	movs	r3, #2
 8001456:	4692      	mov	sl, r2
 8001458:	3208      	adds	r2, #8
 800145a:	4690      	mov	r8, r2
 800145c:	9302      	str	r3, [sp, #8]
 800145e:	e709      	b.n	8001274 <__aeabi_dmul+0x4c>
 8001460:	2400      	movs	r4, #0
 8001462:	2200      	movs	r2, #0
 8001464:	4b35      	ldr	r3, [pc, #212]	@ (800153c <__aeabi_dmul+0x314>)
 8001466:	e735      	b.n	80012d4 <__aeabi_dmul+0xac>
 8001468:	2300      	movs	r3, #0
 800146a:	2480      	movs	r4, #128	@ 0x80
 800146c:	469b      	mov	fp, r3
 800146e:	0324      	lsls	r4, r4, #12
 8001470:	4b32      	ldr	r3, [pc, #200]	@ (800153c <__aeabi_dmul+0x314>)
 8001472:	e72f      	b.n	80012d4 <__aeabi_dmul+0xac>
 8001474:	2202      	movs	r2, #2
 8001476:	4641      	mov	r1, r8
 8001478:	4311      	orrs	r1, r2
 800147a:	2280      	movs	r2, #128	@ 0x80
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	4694      	mov	ip, r2
 8001480:	002a      	movs	r2, r5
 8001482:	4462      	add	r2, ip
 8001484:	4688      	mov	r8, r1
 8001486:	9201      	str	r2, [sp, #4]
 8001488:	290a      	cmp	r1, #10
 800148a:	dd00      	ble.n	800148e <__aeabi_dmul+0x266>
 800148c:	e752      	b.n	8001334 <__aeabi_dmul+0x10c>
 800148e:	465a      	mov	r2, fp
 8001490:	2000      	movs	r0, #0
 8001492:	9900      	ldr	r1, [sp, #0]
 8001494:	0004      	movs	r4, r0
 8001496:	404a      	eors	r2, r1
 8001498:	4693      	mov	fp, r2
 800149a:	2602      	movs	r6, #2
 800149c:	e70b      	b.n	80012b6 <__aeabi_dmul+0x8e>
 800149e:	220c      	movs	r2, #12
 80014a0:	001d      	movs	r5, r3
 80014a2:	2303      	movs	r3, #3
 80014a4:	4681      	mov	r9, r0
 80014a6:	4690      	mov	r8, r2
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	e6e3      	b.n	8001274 <__aeabi_dmul+0x4c>
 80014ac:	2300      	movs	r3, #0
 80014ae:	469a      	mov	sl, r3
 80014b0:	3304      	adds	r3, #4
 80014b2:	4698      	mov	r8, r3
 80014b4:	3b03      	subs	r3, #3
 80014b6:	2500      	movs	r5, #0
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	e6db      	b.n	8001274 <__aeabi_dmul+0x4c>
 80014bc:	4642      	mov	r2, r8
 80014be:	3301      	adds	r3, #1
 80014c0:	431a      	orrs	r2, r3
 80014c2:	002b      	movs	r3, r5
 80014c4:	4690      	mov	r8, r2
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	9201      	str	r2, [sp, #4]
 80014ca:	4642      	mov	r2, r8
 80014cc:	2400      	movs	r4, #0
 80014ce:	2000      	movs	r0, #0
 80014d0:	2601      	movs	r6, #1
 80014d2:	2a0a      	cmp	r2, #10
 80014d4:	dc00      	bgt.n	80014d8 <__aeabi_dmul+0x2b0>
 80014d6:	e6ea      	b.n	80012ae <__aeabi_dmul+0x86>
 80014d8:	e72c      	b.n	8001334 <__aeabi_dmul+0x10c>
 80014da:	2201      	movs	r2, #1
 80014dc:	1ad2      	subs	r2, r2, r3
 80014de:	2a38      	cmp	r2, #56	@ 0x38
 80014e0:	dd00      	ble.n	80014e4 <__aeabi_dmul+0x2bc>
 80014e2:	e6f4      	b.n	80012ce <__aeabi_dmul+0xa6>
 80014e4:	2a1f      	cmp	r2, #31
 80014e6:	dc00      	bgt.n	80014ea <__aeabi_dmul+0x2c2>
 80014e8:	e12a      	b.n	8001740 <__aeabi_dmul+0x518>
 80014ea:	211f      	movs	r1, #31
 80014ec:	4249      	negs	r1, r1
 80014ee:	1acb      	subs	r3, r1, r3
 80014f0:	0021      	movs	r1, r4
 80014f2:	40d9      	lsrs	r1, r3
 80014f4:	000b      	movs	r3, r1
 80014f6:	2a20      	cmp	r2, #32
 80014f8:	d005      	beq.n	8001506 <__aeabi_dmul+0x2de>
 80014fa:	4a16      	ldr	r2, [pc, #88]	@ (8001554 <__aeabi_dmul+0x32c>)
 80014fc:	9d01      	ldr	r5, [sp, #4]
 80014fe:	4694      	mov	ip, r2
 8001500:	4465      	add	r5, ip
 8001502:	40ac      	lsls	r4, r5
 8001504:	4320      	orrs	r0, r4
 8001506:	1e42      	subs	r2, r0, #1
 8001508:	4190      	sbcs	r0, r2
 800150a:	4318      	orrs	r0, r3
 800150c:	2307      	movs	r3, #7
 800150e:	0019      	movs	r1, r3
 8001510:	2400      	movs	r4, #0
 8001512:	4001      	ands	r1, r0
 8001514:	4203      	tst	r3, r0
 8001516:	d00c      	beq.n	8001532 <__aeabi_dmul+0x30a>
 8001518:	230f      	movs	r3, #15
 800151a:	4003      	ands	r3, r0
 800151c:	2b04      	cmp	r3, #4
 800151e:	d100      	bne.n	8001522 <__aeabi_dmul+0x2fa>
 8001520:	e140      	b.n	80017a4 <__aeabi_dmul+0x57c>
 8001522:	1d03      	adds	r3, r0, #4
 8001524:	4283      	cmp	r3, r0
 8001526:	41a4      	sbcs	r4, r4
 8001528:	0018      	movs	r0, r3
 800152a:	4264      	negs	r4, r4
 800152c:	0761      	lsls	r1, r4, #29
 800152e:	0264      	lsls	r4, r4, #9
 8001530:	0b24      	lsrs	r4, r4, #12
 8001532:	08c2      	lsrs	r2, r0, #3
 8001534:	2300      	movs	r3, #0
 8001536:	430a      	orrs	r2, r1
 8001538:	e6cc      	b.n	80012d4 <__aeabi_dmul+0xac>
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	000007ff 	.word	0x000007ff
 8001540:	fffffc01 	.word	0xfffffc01
 8001544:	000003ff 	.word	0x000003ff
 8001548:	feffffff 	.word	0xfeffffff
 800154c:	000007fe 	.word	0x000007fe
 8001550:	fffffc0d 	.word	0xfffffc0d
 8001554:	0000043e 	.word	0x0000043e
 8001558:	4649      	mov	r1, r9
 800155a:	464a      	mov	r2, r9
 800155c:	0409      	lsls	r1, r1, #16
 800155e:	0c09      	lsrs	r1, r1, #16
 8001560:	000d      	movs	r5, r1
 8001562:	0c16      	lsrs	r6, r2, #16
 8001564:	0c02      	lsrs	r2, r0, #16
 8001566:	0400      	lsls	r0, r0, #16
 8001568:	0c00      	lsrs	r0, r0, #16
 800156a:	4345      	muls	r5, r0
 800156c:	46ac      	mov	ip, r5
 800156e:	0005      	movs	r5, r0
 8001570:	4375      	muls	r5, r6
 8001572:	46a8      	mov	r8, r5
 8001574:	0015      	movs	r5, r2
 8001576:	000f      	movs	r7, r1
 8001578:	4375      	muls	r5, r6
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	9502      	str	r5, [sp, #8]
 800157e:	002a      	movs	r2, r5
 8001580:	9d00      	ldr	r5, [sp, #0]
 8001582:	436f      	muls	r7, r5
 8001584:	4665      	mov	r5, ip
 8001586:	0c2d      	lsrs	r5, r5, #16
 8001588:	46a9      	mov	r9, r5
 800158a:	4447      	add	r7, r8
 800158c:	444f      	add	r7, r9
 800158e:	45b8      	cmp	r8, r7
 8001590:	d905      	bls.n	800159e <__aeabi_dmul+0x376>
 8001592:	0015      	movs	r5, r2
 8001594:	2280      	movs	r2, #128	@ 0x80
 8001596:	0252      	lsls	r2, r2, #9
 8001598:	4690      	mov	r8, r2
 800159a:	4445      	add	r5, r8
 800159c:	9502      	str	r5, [sp, #8]
 800159e:	0c3d      	lsrs	r5, r7, #16
 80015a0:	9503      	str	r5, [sp, #12]
 80015a2:	4665      	mov	r5, ip
 80015a4:	042d      	lsls	r5, r5, #16
 80015a6:	043f      	lsls	r7, r7, #16
 80015a8:	0c2d      	lsrs	r5, r5, #16
 80015aa:	46ac      	mov	ip, r5
 80015ac:	003d      	movs	r5, r7
 80015ae:	4465      	add	r5, ip
 80015b0:	9504      	str	r5, [sp, #16]
 80015b2:	0c25      	lsrs	r5, r4, #16
 80015b4:	0424      	lsls	r4, r4, #16
 80015b6:	0c24      	lsrs	r4, r4, #16
 80015b8:	46ac      	mov	ip, r5
 80015ba:	0025      	movs	r5, r4
 80015bc:	4375      	muls	r5, r6
 80015be:	46a8      	mov	r8, r5
 80015c0:	4665      	mov	r5, ip
 80015c2:	000f      	movs	r7, r1
 80015c4:	4369      	muls	r1, r5
 80015c6:	4441      	add	r1, r8
 80015c8:	4689      	mov	r9, r1
 80015ca:	4367      	muls	r7, r4
 80015cc:	0c39      	lsrs	r1, r7, #16
 80015ce:	4449      	add	r1, r9
 80015d0:	436e      	muls	r6, r5
 80015d2:	4588      	cmp	r8, r1
 80015d4:	d903      	bls.n	80015de <__aeabi_dmul+0x3b6>
 80015d6:	2280      	movs	r2, #128	@ 0x80
 80015d8:	0252      	lsls	r2, r2, #9
 80015da:	4690      	mov	r8, r2
 80015dc:	4446      	add	r6, r8
 80015de:	0c0d      	lsrs	r5, r1, #16
 80015e0:	46a8      	mov	r8, r5
 80015e2:	0035      	movs	r5, r6
 80015e4:	4445      	add	r5, r8
 80015e6:	9505      	str	r5, [sp, #20]
 80015e8:	9d03      	ldr	r5, [sp, #12]
 80015ea:	043f      	lsls	r7, r7, #16
 80015ec:	46a8      	mov	r8, r5
 80015ee:	0c3f      	lsrs	r7, r7, #16
 80015f0:	0409      	lsls	r1, r1, #16
 80015f2:	19c9      	adds	r1, r1, r7
 80015f4:	4488      	add	r8, r1
 80015f6:	4645      	mov	r5, r8
 80015f8:	9503      	str	r5, [sp, #12]
 80015fa:	4655      	mov	r5, sl
 80015fc:	042e      	lsls	r6, r5, #16
 80015fe:	0c36      	lsrs	r6, r6, #16
 8001600:	0c2f      	lsrs	r7, r5, #16
 8001602:	0035      	movs	r5, r6
 8001604:	4345      	muls	r5, r0
 8001606:	4378      	muls	r0, r7
 8001608:	4681      	mov	r9, r0
 800160a:	0038      	movs	r0, r7
 800160c:	46a8      	mov	r8, r5
 800160e:	0c2d      	lsrs	r5, r5, #16
 8001610:	46aa      	mov	sl, r5
 8001612:	9a00      	ldr	r2, [sp, #0]
 8001614:	4350      	muls	r0, r2
 8001616:	4372      	muls	r2, r6
 8001618:	444a      	add	r2, r9
 800161a:	4452      	add	r2, sl
 800161c:	4591      	cmp	r9, r2
 800161e:	d903      	bls.n	8001628 <__aeabi_dmul+0x400>
 8001620:	2580      	movs	r5, #128	@ 0x80
 8001622:	026d      	lsls	r5, r5, #9
 8001624:	46a9      	mov	r9, r5
 8001626:	4448      	add	r0, r9
 8001628:	0c15      	lsrs	r5, r2, #16
 800162a:	46a9      	mov	r9, r5
 800162c:	4645      	mov	r5, r8
 800162e:	042d      	lsls	r5, r5, #16
 8001630:	0c2d      	lsrs	r5, r5, #16
 8001632:	46a8      	mov	r8, r5
 8001634:	4665      	mov	r5, ip
 8001636:	437d      	muls	r5, r7
 8001638:	0412      	lsls	r2, r2, #16
 800163a:	4448      	add	r0, r9
 800163c:	4490      	add	r8, r2
 800163e:	46a9      	mov	r9, r5
 8001640:	0032      	movs	r2, r6
 8001642:	4665      	mov	r5, ip
 8001644:	4362      	muls	r2, r4
 8001646:	436e      	muls	r6, r5
 8001648:	437c      	muls	r4, r7
 800164a:	0c17      	lsrs	r7, r2, #16
 800164c:	1936      	adds	r6, r6, r4
 800164e:	19bf      	adds	r7, r7, r6
 8001650:	42bc      	cmp	r4, r7
 8001652:	d903      	bls.n	800165c <__aeabi_dmul+0x434>
 8001654:	2480      	movs	r4, #128	@ 0x80
 8001656:	0264      	lsls	r4, r4, #9
 8001658:	46a4      	mov	ip, r4
 800165a:	44e1      	add	r9, ip
 800165c:	9c02      	ldr	r4, [sp, #8]
 800165e:	9e03      	ldr	r6, [sp, #12]
 8001660:	46a4      	mov	ip, r4
 8001662:	9d05      	ldr	r5, [sp, #20]
 8001664:	4466      	add	r6, ip
 8001666:	428e      	cmp	r6, r1
 8001668:	4189      	sbcs	r1, r1
 800166a:	46ac      	mov	ip, r5
 800166c:	0412      	lsls	r2, r2, #16
 800166e:	043c      	lsls	r4, r7, #16
 8001670:	0c12      	lsrs	r2, r2, #16
 8001672:	18a2      	adds	r2, r4, r2
 8001674:	4462      	add	r2, ip
 8001676:	4249      	negs	r1, r1
 8001678:	1854      	adds	r4, r2, r1
 800167a:	4446      	add	r6, r8
 800167c:	46a4      	mov	ip, r4
 800167e:	4546      	cmp	r6, r8
 8001680:	41a4      	sbcs	r4, r4
 8001682:	4682      	mov	sl, r0
 8001684:	4264      	negs	r4, r4
 8001686:	46a0      	mov	r8, r4
 8001688:	42aa      	cmp	r2, r5
 800168a:	4192      	sbcs	r2, r2
 800168c:	458c      	cmp	ip, r1
 800168e:	4189      	sbcs	r1, r1
 8001690:	44e2      	add	sl, ip
 8001692:	44d0      	add	r8, sl
 8001694:	4249      	negs	r1, r1
 8001696:	4252      	negs	r2, r2
 8001698:	430a      	orrs	r2, r1
 800169a:	45a0      	cmp	r8, r4
 800169c:	41a4      	sbcs	r4, r4
 800169e:	4582      	cmp	sl, r0
 80016a0:	4189      	sbcs	r1, r1
 80016a2:	4264      	negs	r4, r4
 80016a4:	4249      	negs	r1, r1
 80016a6:	430c      	orrs	r4, r1
 80016a8:	4641      	mov	r1, r8
 80016aa:	0c3f      	lsrs	r7, r7, #16
 80016ac:	19d2      	adds	r2, r2, r7
 80016ae:	1912      	adds	r2, r2, r4
 80016b0:	0dcc      	lsrs	r4, r1, #23
 80016b2:	9904      	ldr	r1, [sp, #16]
 80016b4:	0270      	lsls	r0, r6, #9
 80016b6:	4308      	orrs	r0, r1
 80016b8:	1e41      	subs	r1, r0, #1
 80016ba:	4188      	sbcs	r0, r1
 80016bc:	4641      	mov	r1, r8
 80016be:	444a      	add	r2, r9
 80016c0:	0df6      	lsrs	r6, r6, #23
 80016c2:	0252      	lsls	r2, r2, #9
 80016c4:	4330      	orrs	r0, r6
 80016c6:	0249      	lsls	r1, r1, #9
 80016c8:	4314      	orrs	r4, r2
 80016ca:	4308      	orrs	r0, r1
 80016cc:	01d2      	lsls	r2, r2, #7
 80016ce:	d535      	bpl.n	800173c <__aeabi_dmul+0x514>
 80016d0:	2201      	movs	r2, #1
 80016d2:	0843      	lsrs	r3, r0, #1
 80016d4:	4002      	ands	r2, r0
 80016d6:	4313      	orrs	r3, r2
 80016d8:	07e0      	lsls	r0, r4, #31
 80016da:	4318      	orrs	r0, r3
 80016dc:	0864      	lsrs	r4, r4, #1
 80016de:	e634      	b.n	800134a <__aeabi_dmul+0x122>
 80016e0:	9b00      	ldr	r3, [sp, #0]
 80016e2:	46a2      	mov	sl, r4
 80016e4:	469b      	mov	fp, r3
 80016e6:	4681      	mov	r9, r0
 80016e8:	2480      	movs	r4, #128	@ 0x80
 80016ea:	4653      	mov	r3, sl
 80016ec:	0324      	lsls	r4, r4, #12
 80016ee:	431c      	orrs	r4, r3
 80016f0:	0324      	lsls	r4, r4, #12
 80016f2:	464a      	mov	r2, r9
 80016f4:	4b2e      	ldr	r3, [pc, #184]	@ (80017b0 <__aeabi_dmul+0x588>)
 80016f6:	0b24      	lsrs	r4, r4, #12
 80016f8:	e5ec      	b.n	80012d4 <__aeabi_dmul+0xac>
 80016fa:	f000 fc87 	bl	800200c <__clzsi2>
 80016fe:	2315      	movs	r3, #21
 8001700:	469c      	mov	ip, r3
 8001702:	4484      	add	ip, r0
 8001704:	0002      	movs	r2, r0
 8001706:	4663      	mov	r3, ip
 8001708:	3220      	adds	r2, #32
 800170a:	2b1c      	cmp	r3, #28
 800170c:	dc00      	bgt.n	8001710 <__aeabi_dmul+0x4e8>
 800170e:	e684      	b.n	800141a <__aeabi_dmul+0x1f2>
 8001710:	2300      	movs	r3, #0
 8001712:	4699      	mov	r9, r3
 8001714:	0023      	movs	r3, r4
 8001716:	3808      	subs	r0, #8
 8001718:	4083      	lsls	r3, r0
 800171a:	469a      	mov	sl, r3
 800171c:	e68e      	b.n	800143c <__aeabi_dmul+0x214>
 800171e:	f000 fc75 	bl	800200c <__clzsi2>
 8001722:	0002      	movs	r2, r0
 8001724:	0003      	movs	r3, r0
 8001726:	3215      	adds	r2, #21
 8001728:	3320      	adds	r3, #32
 800172a:	2a1c      	cmp	r2, #28
 800172c:	dc00      	bgt.n	8001730 <__aeabi_dmul+0x508>
 800172e:	e64e      	b.n	80013ce <__aeabi_dmul+0x1a6>
 8001730:	0002      	movs	r2, r0
 8001732:	0034      	movs	r4, r6
 8001734:	3a08      	subs	r2, #8
 8001736:	2000      	movs	r0, #0
 8001738:	4094      	lsls	r4, r2
 800173a:	e652      	b.n	80013e2 <__aeabi_dmul+0x1ba>
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	e604      	b.n	800134a <__aeabi_dmul+0x122>
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <__aeabi_dmul+0x58c>)
 8001742:	0021      	movs	r1, r4
 8001744:	469c      	mov	ip, r3
 8001746:	0003      	movs	r3, r0
 8001748:	9d01      	ldr	r5, [sp, #4]
 800174a:	40d3      	lsrs	r3, r2
 800174c:	4465      	add	r5, ip
 800174e:	40a9      	lsls	r1, r5
 8001750:	4319      	orrs	r1, r3
 8001752:	0003      	movs	r3, r0
 8001754:	40ab      	lsls	r3, r5
 8001756:	1e58      	subs	r0, r3, #1
 8001758:	4183      	sbcs	r3, r0
 800175a:	4319      	orrs	r1, r3
 800175c:	0008      	movs	r0, r1
 800175e:	40d4      	lsrs	r4, r2
 8001760:	074b      	lsls	r3, r1, #29
 8001762:	d009      	beq.n	8001778 <__aeabi_dmul+0x550>
 8001764:	230f      	movs	r3, #15
 8001766:	400b      	ands	r3, r1
 8001768:	2b04      	cmp	r3, #4
 800176a:	d005      	beq.n	8001778 <__aeabi_dmul+0x550>
 800176c:	1d0b      	adds	r3, r1, #4
 800176e:	428b      	cmp	r3, r1
 8001770:	4180      	sbcs	r0, r0
 8001772:	4240      	negs	r0, r0
 8001774:	1824      	adds	r4, r4, r0
 8001776:	0018      	movs	r0, r3
 8001778:	0223      	lsls	r3, r4, #8
 800177a:	d400      	bmi.n	800177e <__aeabi_dmul+0x556>
 800177c:	e6d6      	b.n	800152c <__aeabi_dmul+0x304>
 800177e:	2301      	movs	r3, #1
 8001780:	2400      	movs	r4, #0
 8001782:	2200      	movs	r2, #0
 8001784:	e5a6      	b.n	80012d4 <__aeabi_dmul+0xac>
 8001786:	290f      	cmp	r1, #15
 8001788:	d1aa      	bne.n	80016e0 <__aeabi_dmul+0x4b8>
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	4652      	mov	r2, sl
 800178e:	031b      	lsls	r3, r3, #12
 8001790:	421a      	tst	r2, r3
 8001792:	d0a9      	beq.n	80016e8 <__aeabi_dmul+0x4c0>
 8001794:	421c      	tst	r4, r3
 8001796:	d1a7      	bne.n	80016e8 <__aeabi_dmul+0x4c0>
 8001798:	431c      	orrs	r4, r3
 800179a:	9b00      	ldr	r3, [sp, #0]
 800179c:	0002      	movs	r2, r0
 800179e:	469b      	mov	fp, r3
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <__aeabi_dmul+0x588>)
 80017a2:	e597      	b.n	80012d4 <__aeabi_dmul+0xac>
 80017a4:	2400      	movs	r4, #0
 80017a6:	e6c1      	b.n	800152c <__aeabi_dmul+0x304>
 80017a8:	2400      	movs	r4, #0
 80017aa:	4b01      	ldr	r3, [pc, #4]	@ (80017b0 <__aeabi_dmul+0x588>)
 80017ac:	0022      	movs	r2, r4
 80017ae:	e591      	b.n	80012d4 <__aeabi_dmul+0xac>
 80017b0:	000007ff 	.word	0x000007ff
 80017b4:	0000041e 	.word	0x0000041e

080017b8 <__aeabi_dsub>:
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	464e      	mov	r6, r9
 80017bc:	4645      	mov	r5, r8
 80017be:	46de      	mov	lr, fp
 80017c0:	4657      	mov	r7, sl
 80017c2:	b5e0      	push	{r5, r6, r7, lr}
 80017c4:	b085      	sub	sp, #20
 80017c6:	9000      	str	r0, [sp, #0]
 80017c8:	9101      	str	r1, [sp, #4]
 80017ca:	030c      	lsls	r4, r1, #12
 80017cc:	004f      	lsls	r7, r1, #1
 80017ce:	0fce      	lsrs	r6, r1, #31
 80017d0:	0a61      	lsrs	r1, r4, #9
 80017d2:	9c00      	ldr	r4, [sp, #0]
 80017d4:	46b0      	mov	r8, r6
 80017d6:	0f64      	lsrs	r4, r4, #29
 80017d8:	430c      	orrs	r4, r1
 80017da:	9900      	ldr	r1, [sp, #0]
 80017dc:	0d7f      	lsrs	r7, r7, #21
 80017de:	00c8      	lsls	r0, r1, #3
 80017e0:	0011      	movs	r1, r2
 80017e2:	001a      	movs	r2, r3
 80017e4:	031b      	lsls	r3, r3, #12
 80017e6:	469c      	mov	ip, r3
 80017e8:	9100      	str	r1, [sp, #0]
 80017ea:	9201      	str	r2, [sp, #4]
 80017ec:	0051      	lsls	r1, r2, #1
 80017ee:	0d4b      	lsrs	r3, r1, #21
 80017f0:	4699      	mov	r9, r3
 80017f2:	9b01      	ldr	r3, [sp, #4]
 80017f4:	9d00      	ldr	r5, [sp, #0]
 80017f6:	0fd9      	lsrs	r1, r3, #31
 80017f8:	4663      	mov	r3, ip
 80017fa:	0f6a      	lsrs	r2, r5, #29
 80017fc:	0a5b      	lsrs	r3, r3, #9
 80017fe:	4313      	orrs	r3, r2
 8001800:	00ea      	lsls	r2, r5, #3
 8001802:	4694      	mov	ip, r2
 8001804:	4693      	mov	fp, r2
 8001806:	4ac1      	ldr	r2, [pc, #772]	@ (8001b0c <__aeabi_dsub+0x354>)
 8001808:	9003      	str	r0, [sp, #12]
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	4591      	cmp	r9, r2
 800180e:	d100      	bne.n	8001812 <__aeabi_dsub+0x5a>
 8001810:	e0cd      	b.n	80019ae <__aeabi_dsub+0x1f6>
 8001812:	2501      	movs	r5, #1
 8001814:	4069      	eors	r1, r5
 8001816:	464d      	mov	r5, r9
 8001818:	1b7d      	subs	r5, r7, r5
 800181a:	46aa      	mov	sl, r5
 800181c:	428e      	cmp	r6, r1
 800181e:	d100      	bne.n	8001822 <__aeabi_dsub+0x6a>
 8001820:	e080      	b.n	8001924 <__aeabi_dsub+0x16c>
 8001822:	2d00      	cmp	r5, #0
 8001824:	dc00      	bgt.n	8001828 <__aeabi_dsub+0x70>
 8001826:	e335      	b.n	8001e94 <__aeabi_dsub+0x6dc>
 8001828:	4649      	mov	r1, r9
 800182a:	2900      	cmp	r1, #0
 800182c:	d100      	bne.n	8001830 <__aeabi_dsub+0x78>
 800182e:	e0df      	b.n	80019f0 <__aeabi_dsub+0x238>
 8001830:	4297      	cmp	r7, r2
 8001832:	d100      	bne.n	8001836 <__aeabi_dsub+0x7e>
 8001834:	e194      	b.n	8001b60 <__aeabi_dsub+0x3a8>
 8001836:	4652      	mov	r2, sl
 8001838:	2501      	movs	r5, #1
 800183a:	2a38      	cmp	r2, #56	@ 0x38
 800183c:	dc19      	bgt.n	8001872 <__aeabi_dsub+0xba>
 800183e:	2280      	movs	r2, #128	@ 0x80
 8001840:	9b02      	ldr	r3, [sp, #8]
 8001842:	0412      	lsls	r2, r2, #16
 8001844:	4313      	orrs	r3, r2
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	4652      	mov	r2, sl
 800184a:	2a1f      	cmp	r2, #31
 800184c:	dd00      	ble.n	8001850 <__aeabi_dsub+0x98>
 800184e:	e1e3      	b.n	8001c18 <__aeabi_dsub+0x460>
 8001850:	4653      	mov	r3, sl
 8001852:	2220      	movs	r2, #32
 8001854:	4661      	mov	r1, ip
 8001856:	9d02      	ldr	r5, [sp, #8]
 8001858:	1ad2      	subs	r2, r2, r3
 800185a:	4095      	lsls	r5, r2
 800185c:	40d9      	lsrs	r1, r3
 800185e:	430d      	orrs	r5, r1
 8001860:	4661      	mov	r1, ip
 8001862:	4091      	lsls	r1, r2
 8001864:	000a      	movs	r2, r1
 8001866:	1e51      	subs	r1, r2, #1
 8001868:	418a      	sbcs	r2, r1
 800186a:	4315      	orrs	r5, r2
 800186c:	9a02      	ldr	r2, [sp, #8]
 800186e:	40da      	lsrs	r2, r3
 8001870:	1aa4      	subs	r4, r4, r2
 8001872:	1b45      	subs	r5, r0, r5
 8001874:	42a8      	cmp	r0, r5
 8001876:	4180      	sbcs	r0, r0
 8001878:	4240      	negs	r0, r0
 800187a:	1a24      	subs	r4, r4, r0
 800187c:	0223      	lsls	r3, r4, #8
 800187e:	d400      	bmi.n	8001882 <__aeabi_dsub+0xca>
 8001880:	e13d      	b.n	8001afe <__aeabi_dsub+0x346>
 8001882:	0264      	lsls	r4, r4, #9
 8001884:	0a64      	lsrs	r4, r4, #9
 8001886:	2c00      	cmp	r4, #0
 8001888:	d100      	bne.n	800188c <__aeabi_dsub+0xd4>
 800188a:	e147      	b.n	8001b1c <__aeabi_dsub+0x364>
 800188c:	0020      	movs	r0, r4
 800188e:	f000 fbbd 	bl	800200c <__clzsi2>
 8001892:	0003      	movs	r3, r0
 8001894:	3b08      	subs	r3, #8
 8001896:	2120      	movs	r1, #32
 8001898:	0028      	movs	r0, r5
 800189a:	1aca      	subs	r2, r1, r3
 800189c:	40d0      	lsrs	r0, r2
 800189e:	409c      	lsls	r4, r3
 80018a0:	0002      	movs	r2, r0
 80018a2:	409d      	lsls	r5, r3
 80018a4:	4322      	orrs	r2, r4
 80018a6:	429f      	cmp	r7, r3
 80018a8:	dd00      	ble.n	80018ac <__aeabi_dsub+0xf4>
 80018aa:	e177      	b.n	8001b9c <__aeabi_dsub+0x3e4>
 80018ac:	1bd8      	subs	r0, r3, r7
 80018ae:	3001      	adds	r0, #1
 80018b0:	1a09      	subs	r1, r1, r0
 80018b2:	002c      	movs	r4, r5
 80018b4:	408d      	lsls	r5, r1
 80018b6:	40c4      	lsrs	r4, r0
 80018b8:	1e6b      	subs	r3, r5, #1
 80018ba:	419d      	sbcs	r5, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	40c2      	lsrs	r2, r0
 80018c0:	408b      	lsls	r3, r1
 80018c2:	4325      	orrs	r5, r4
 80018c4:	2700      	movs	r7, #0
 80018c6:	0014      	movs	r4, r2
 80018c8:	431d      	orrs	r5, r3
 80018ca:	076b      	lsls	r3, r5, #29
 80018cc:	d009      	beq.n	80018e2 <__aeabi_dsub+0x12a>
 80018ce:	230f      	movs	r3, #15
 80018d0:	402b      	ands	r3, r5
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d005      	beq.n	80018e2 <__aeabi_dsub+0x12a>
 80018d6:	1d2b      	adds	r3, r5, #4
 80018d8:	42ab      	cmp	r3, r5
 80018da:	41ad      	sbcs	r5, r5
 80018dc:	426d      	negs	r5, r5
 80018de:	1964      	adds	r4, r4, r5
 80018e0:	001d      	movs	r5, r3
 80018e2:	0223      	lsls	r3, r4, #8
 80018e4:	d400      	bmi.n	80018e8 <__aeabi_dsub+0x130>
 80018e6:	e140      	b.n	8001b6a <__aeabi_dsub+0x3b2>
 80018e8:	4a88      	ldr	r2, [pc, #544]	@ (8001b0c <__aeabi_dsub+0x354>)
 80018ea:	3701      	adds	r7, #1
 80018ec:	4297      	cmp	r7, r2
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dsub+0x13a>
 80018f0:	e101      	b.n	8001af6 <__aeabi_dsub+0x33e>
 80018f2:	2601      	movs	r6, #1
 80018f4:	4643      	mov	r3, r8
 80018f6:	4986      	ldr	r1, [pc, #536]	@ (8001b10 <__aeabi_dsub+0x358>)
 80018f8:	08ed      	lsrs	r5, r5, #3
 80018fa:	4021      	ands	r1, r4
 80018fc:	074a      	lsls	r2, r1, #29
 80018fe:	432a      	orrs	r2, r5
 8001900:	057c      	lsls	r4, r7, #21
 8001902:	024d      	lsls	r5, r1, #9
 8001904:	0b2d      	lsrs	r5, r5, #12
 8001906:	0d64      	lsrs	r4, r4, #21
 8001908:	401e      	ands	r6, r3
 800190a:	0524      	lsls	r4, r4, #20
 800190c:	432c      	orrs	r4, r5
 800190e:	07f6      	lsls	r6, r6, #31
 8001910:	4334      	orrs	r4, r6
 8001912:	0010      	movs	r0, r2
 8001914:	0021      	movs	r1, r4
 8001916:	b005      	add	sp, #20
 8001918:	bcf0      	pop	{r4, r5, r6, r7}
 800191a:	46bb      	mov	fp, r7
 800191c:	46b2      	mov	sl, r6
 800191e:	46a9      	mov	r9, r5
 8001920:	46a0      	mov	r8, r4
 8001922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001924:	2d00      	cmp	r5, #0
 8001926:	dc00      	bgt.n	800192a <__aeabi_dsub+0x172>
 8001928:	e2d0      	b.n	8001ecc <__aeabi_dsub+0x714>
 800192a:	4649      	mov	r1, r9
 800192c:	2900      	cmp	r1, #0
 800192e:	d000      	beq.n	8001932 <__aeabi_dsub+0x17a>
 8001930:	e0d4      	b.n	8001adc <__aeabi_dsub+0x324>
 8001932:	4661      	mov	r1, ip
 8001934:	9b02      	ldr	r3, [sp, #8]
 8001936:	4319      	orrs	r1, r3
 8001938:	d100      	bne.n	800193c <__aeabi_dsub+0x184>
 800193a:	e12b      	b.n	8001b94 <__aeabi_dsub+0x3dc>
 800193c:	1e69      	subs	r1, r5, #1
 800193e:	2d01      	cmp	r5, #1
 8001940:	d100      	bne.n	8001944 <__aeabi_dsub+0x18c>
 8001942:	e1d9      	b.n	8001cf8 <__aeabi_dsub+0x540>
 8001944:	4295      	cmp	r5, r2
 8001946:	d100      	bne.n	800194a <__aeabi_dsub+0x192>
 8001948:	e10a      	b.n	8001b60 <__aeabi_dsub+0x3a8>
 800194a:	2501      	movs	r5, #1
 800194c:	2938      	cmp	r1, #56	@ 0x38
 800194e:	dc17      	bgt.n	8001980 <__aeabi_dsub+0x1c8>
 8001950:	468a      	mov	sl, r1
 8001952:	4653      	mov	r3, sl
 8001954:	2b1f      	cmp	r3, #31
 8001956:	dd00      	ble.n	800195a <__aeabi_dsub+0x1a2>
 8001958:	e1e7      	b.n	8001d2a <__aeabi_dsub+0x572>
 800195a:	2220      	movs	r2, #32
 800195c:	1ad2      	subs	r2, r2, r3
 800195e:	9b02      	ldr	r3, [sp, #8]
 8001960:	4661      	mov	r1, ip
 8001962:	4093      	lsls	r3, r2
 8001964:	001d      	movs	r5, r3
 8001966:	4653      	mov	r3, sl
 8001968:	40d9      	lsrs	r1, r3
 800196a:	4663      	mov	r3, ip
 800196c:	4093      	lsls	r3, r2
 800196e:	001a      	movs	r2, r3
 8001970:	430d      	orrs	r5, r1
 8001972:	1e51      	subs	r1, r2, #1
 8001974:	418a      	sbcs	r2, r1
 8001976:	4653      	mov	r3, sl
 8001978:	4315      	orrs	r5, r2
 800197a:	9a02      	ldr	r2, [sp, #8]
 800197c:	40da      	lsrs	r2, r3
 800197e:	18a4      	adds	r4, r4, r2
 8001980:	182d      	adds	r5, r5, r0
 8001982:	4285      	cmp	r5, r0
 8001984:	4180      	sbcs	r0, r0
 8001986:	4240      	negs	r0, r0
 8001988:	1824      	adds	r4, r4, r0
 800198a:	0223      	lsls	r3, r4, #8
 800198c:	d400      	bmi.n	8001990 <__aeabi_dsub+0x1d8>
 800198e:	e0b6      	b.n	8001afe <__aeabi_dsub+0x346>
 8001990:	4b5e      	ldr	r3, [pc, #376]	@ (8001b0c <__aeabi_dsub+0x354>)
 8001992:	3701      	adds	r7, #1
 8001994:	429f      	cmp	r7, r3
 8001996:	d100      	bne.n	800199a <__aeabi_dsub+0x1e2>
 8001998:	e0ad      	b.n	8001af6 <__aeabi_dsub+0x33e>
 800199a:	2101      	movs	r1, #1
 800199c:	4b5c      	ldr	r3, [pc, #368]	@ (8001b10 <__aeabi_dsub+0x358>)
 800199e:	086a      	lsrs	r2, r5, #1
 80019a0:	401c      	ands	r4, r3
 80019a2:	4029      	ands	r1, r5
 80019a4:	430a      	orrs	r2, r1
 80019a6:	07e5      	lsls	r5, r4, #31
 80019a8:	4315      	orrs	r5, r2
 80019aa:	0864      	lsrs	r4, r4, #1
 80019ac:	e78d      	b.n	80018ca <__aeabi_dsub+0x112>
 80019ae:	4a59      	ldr	r2, [pc, #356]	@ (8001b14 <__aeabi_dsub+0x35c>)
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4692      	mov	sl, r2
 80019b4:	4662      	mov	r2, ip
 80019b6:	44ba      	add	sl, r7
 80019b8:	431a      	orrs	r2, r3
 80019ba:	d02c      	beq.n	8001a16 <__aeabi_dsub+0x25e>
 80019bc:	428e      	cmp	r6, r1
 80019be:	d02e      	beq.n	8001a1e <__aeabi_dsub+0x266>
 80019c0:	4652      	mov	r2, sl
 80019c2:	2a00      	cmp	r2, #0
 80019c4:	d060      	beq.n	8001a88 <__aeabi_dsub+0x2d0>
 80019c6:	2f00      	cmp	r7, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x214>
 80019ca:	e0db      	b.n	8001b84 <__aeabi_dsub+0x3cc>
 80019cc:	4663      	mov	r3, ip
 80019ce:	000e      	movs	r6, r1
 80019d0:	9c02      	ldr	r4, [sp, #8]
 80019d2:	08d8      	lsrs	r0, r3, #3
 80019d4:	0762      	lsls	r2, r4, #29
 80019d6:	4302      	orrs	r2, r0
 80019d8:	08e4      	lsrs	r4, r4, #3
 80019da:	0013      	movs	r3, r2
 80019dc:	4323      	orrs	r3, r4
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x22a>
 80019e0:	e254      	b.n	8001e8c <__aeabi_dsub+0x6d4>
 80019e2:	2580      	movs	r5, #128	@ 0x80
 80019e4:	032d      	lsls	r5, r5, #12
 80019e6:	4325      	orrs	r5, r4
 80019e8:	032d      	lsls	r5, r5, #12
 80019ea:	4c48      	ldr	r4, [pc, #288]	@ (8001b0c <__aeabi_dsub+0x354>)
 80019ec:	0b2d      	lsrs	r5, r5, #12
 80019ee:	e78c      	b.n	800190a <__aeabi_dsub+0x152>
 80019f0:	4661      	mov	r1, ip
 80019f2:	9b02      	ldr	r3, [sp, #8]
 80019f4:	4319      	orrs	r1, r3
 80019f6:	d100      	bne.n	80019fa <__aeabi_dsub+0x242>
 80019f8:	e0cc      	b.n	8001b94 <__aeabi_dsub+0x3dc>
 80019fa:	0029      	movs	r1, r5
 80019fc:	3901      	subs	r1, #1
 80019fe:	2d01      	cmp	r5, #1
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x24c>
 8001a02:	e188      	b.n	8001d16 <__aeabi_dsub+0x55e>
 8001a04:	4295      	cmp	r5, r2
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dsub+0x252>
 8001a08:	e0aa      	b.n	8001b60 <__aeabi_dsub+0x3a8>
 8001a0a:	2501      	movs	r5, #1
 8001a0c:	2938      	cmp	r1, #56	@ 0x38
 8001a0e:	dd00      	ble.n	8001a12 <__aeabi_dsub+0x25a>
 8001a10:	e72f      	b.n	8001872 <__aeabi_dsub+0xba>
 8001a12:	468a      	mov	sl, r1
 8001a14:	e718      	b.n	8001848 <__aeabi_dsub+0x90>
 8001a16:	2201      	movs	r2, #1
 8001a18:	4051      	eors	r1, r2
 8001a1a:	428e      	cmp	r6, r1
 8001a1c:	d1d0      	bne.n	80019c0 <__aeabi_dsub+0x208>
 8001a1e:	4653      	mov	r3, sl
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dsub+0x26e>
 8001a24:	e0be      	b.n	8001ba4 <__aeabi_dsub+0x3ec>
 8001a26:	2f00      	cmp	r7, #0
 8001a28:	d000      	beq.n	8001a2c <__aeabi_dsub+0x274>
 8001a2a:	e138      	b.n	8001c9e <__aeabi_dsub+0x4e6>
 8001a2c:	46ca      	mov	sl, r9
 8001a2e:	0022      	movs	r2, r4
 8001a30:	4302      	orrs	r2, r0
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dsub+0x27e>
 8001a34:	e1e2      	b.n	8001dfc <__aeabi_dsub+0x644>
 8001a36:	4653      	mov	r3, sl
 8001a38:	1e59      	subs	r1, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x288>
 8001a3e:	e20d      	b.n	8001e5c <__aeabi_dsub+0x6a4>
 8001a40:	4a32      	ldr	r2, [pc, #200]	@ (8001b0c <__aeabi_dsub+0x354>)
 8001a42:	4592      	cmp	sl, r2
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x290>
 8001a46:	e1d2      	b.n	8001dee <__aeabi_dsub+0x636>
 8001a48:	2701      	movs	r7, #1
 8001a4a:	2938      	cmp	r1, #56	@ 0x38
 8001a4c:	dc13      	bgt.n	8001a76 <__aeabi_dsub+0x2be>
 8001a4e:	291f      	cmp	r1, #31
 8001a50:	dd00      	ble.n	8001a54 <__aeabi_dsub+0x29c>
 8001a52:	e1ee      	b.n	8001e32 <__aeabi_dsub+0x67a>
 8001a54:	2220      	movs	r2, #32
 8001a56:	9b02      	ldr	r3, [sp, #8]
 8001a58:	1a52      	subs	r2, r2, r1
 8001a5a:	0025      	movs	r5, r4
 8001a5c:	0007      	movs	r7, r0
 8001a5e:	469a      	mov	sl, r3
 8001a60:	40cc      	lsrs	r4, r1
 8001a62:	4090      	lsls	r0, r2
 8001a64:	4095      	lsls	r5, r2
 8001a66:	40cf      	lsrs	r7, r1
 8001a68:	44a2      	add	sl, r4
 8001a6a:	1e42      	subs	r2, r0, #1
 8001a6c:	4190      	sbcs	r0, r2
 8001a6e:	4653      	mov	r3, sl
 8001a70:	432f      	orrs	r7, r5
 8001a72:	4307      	orrs	r7, r0
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	003d      	movs	r5, r7
 8001a78:	4465      	add	r5, ip
 8001a7a:	4565      	cmp	r5, ip
 8001a7c:	4192      	sbcs	r2, r2
 8001a7e:	9b02      	ldr	r3, [sp, #8]
 8001a80:	4252      	negs	r2, r2
 8001a82:	464f      	mov	r7, r9
 8001a84:	18d4      	adds	r4, r2, r3
 8001a86:	e780      	b.n	800198a <__aeabi_dsub+0x1d2>
 8001a88:	4a23      	ldr	r2, [pc, #140]	@ (8001b18 <__aeabi_dsub+0x360>)
 8001a8a:	1c7d      	adds	r5, r7, #1
 8001a8c:	4215      	tst	r5, r2
 8001a8e:	d000      	beq.n	8001a92 <__aeabi_dsub+0x2da>
 8001a90:	e0aa      	b.n	8001be8 <__aeabi_dsub+0x430>
 8001a92:	4662      	mov	r2, ip
 8001a94:	0025      	movs	r5, r4
 8001a96:	9b02      	ldr	r3, [sp, #8]
 8001a98:	4305      	orrs	r5, r0
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	2f00      	cmp	r7, #0
 8001a9e:	d000      	beq.n	8001aa2 <__aeabi_dsub+0x2ea>
 8001aa0:	e0f5      	b.n	8001c8e <__aeabi_dsub+0x4d6>
 8001aa2:	2d00      	cmp	r5, #0
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x2f0>
 8001aa6:	e16b      	b.n	8001d80 <__aeabi_dsub+0x5c8>
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dsub+0x2f6>
 8001aac:	e152      	b.n	8001d54 <__aeabi_dsub+0x59c>
 8001aae:	4663      	mov	r3, ip
 8001ab0:	1ac5      	subs	r5, r0, r3
 8001ab2:	9b02      	ldr	r3, [sp, #8]
 8001ab4:	1ae2      	subs	r2, r4, r3
 8001ab6:	42a8      	cmp	r0, r5
 8001ab8:	419b      	sbcs	r3, r3
 8001aba:	425b      	negs	r3, r3
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	021a      	lsls	r2, r3, #8
 8001ac0:	d400      	bmi.n	8001ac4 <__aeabi_dsub+0x30c>
 8001ac2:	e1d5      	b.n	8001e70 <__aeabi_dsub+0x6b8>
 8001ac4:	4663      	mov	r3, ip
 8001ac6:	1a1d      	subs	r5, r3, r0
 8001ac8:	45ac      	cmp	ip, r5
 8001aca:	4192      	sbcs	r2, r2
 8001acc:	2601      	movs	r6, #1
 8001ace:	9b02      	ldr	r3, [sp, #8]
 8001ad0:	4252      	negs	r2, r2
 8001ad2:	1b1c      	subs	r4, r3, r4
 8001ad4:	4688      	mov	r8, r1
 8001ad6:	1aa4      	subs	r4, r4, r2
 8001ad8:	400e      	ands	r6, r1
 8001ada:	e6f6      	b.n	80018ca <__aeabi_dsub+0x112>
 8001adc:	4297      	cmp	r7, r2
 8001ade:	d03f      	beq.n	8001b60 <__aeabi_dsub+0x3a8>
 8001ae0:	4652      	mov	r2, sl
 8001ae2:	2501      	movs	r5, #1
 8001ae4:	2a38      	cmp	r2, #56	@ 0x38
 8001ae6:	dd00      	ble.n	8001aea <__aeabi_dsub+0x332>
 8001ae8:	e74a      	b.n	8001980 <__aeabi_dsub+0x1c8>
 8001aea:	2280      	movs	r2, #128	@ 0x80
 8001aec:	9b02      	ldr	r3, [sp, #8]
 8001aee:	0412      	lsls	r2, r2, #16
 8001af0:	4313      	orrs	r3, r2
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	e72d      	b.n	8001952 <__aeabi_dsub+0x19a>
 8001af6:	003c      	movs	r4, r7
 8001af8:	2500      	movs	r5, #0
 8001afa:	2200      	movs	r2, #0
 8001afc:	e705      	b.n	800190a <__aeabi_dsub+0x152>
 8001afe:	2307      	movs	r3, #7
 8001b00:	402b      	ands	r3, r5
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d000      	beq.n	8001b08 <__aeabi_dsub+0x350>
 8001b06:	e6e2      	b.n	80018ce <__aeabi_dsub+0x116>
 8001b08:	e06b      	b.n	8001be2 <__aeabi_dsub+0x42a>
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	fffff801 	.word	0xfffff801
 8001b18:	000007fe 	.word	0x000007fe
 8001b1c:	0028      	movs	r0, r5
 8001b1e:	f000 fa75 	bl	800200c <__clzsi2>
 8001b22:	0003      	movs	r3, r0
 8001b24:	3318      	adds	r3, #24
 8001b26:	2b1f      	cmp	r3, #31
 8001b28:	dc00      	bgt.n	8001b2c <__aeabi_dsub+0x374>
 8001b2a:	e6b4      	b.n	8001896 <__aeabi_dsub+0xde>
 8001b2c:	002a      	movs	r2, r5
 8001b2e:	3808      	subs	r0, #8
 8001b30:	4082      	lsls	r2, r0
 8001b32:	429f      	cmp	r7, r3
 8001b34:	dd00      	ble.n	8001b38 <__aeabi_dsub+0x380>
 8001b36:	e0b9      	b.n	8001cac <__aeabi_dsub+0x4f4>
 8001b38:	1bdb      	subs	r3, r3, r7
 8001b3a:	1c58      	adds	r0, r3, #1
 8001b3c:	281f      	cmp	r0, #31
 8001b3e:	dc00      	bgt.n	8001b42 <__aeabi_dsub+0x38a>
 8001b40:	e1a0      	b.n	8001e84 <__aeabi_dsub+0x6cc>
 8001b42:	0015      	movs	r5, r2
 8001b44:	3b1f      	subs	r3, #31
 8001b46:	40dd      	lsrs	r5, r3
 8001b48:	2820      	cmp	r0, #32
 8001b4a:	d005      	beq.n	8001b58 <__aeabi_dsub+0x3a0>
 8001b4c:	2340      	movs	r3, #64	@ 0x40
 8001b4e:	1a1b      	subs	r3, r3, r0
 8001b50:	409a      	lsls	r2, r3
 8001b52:	1e53      	subs	r3, r2, #1
 8001b54:	419a      	sbcs	r2, r3
 8001b56:	4315      	orrs	r5, r2
 8001b58:	2307      	movs	r3, #7
 8001b5a:	2700      	movs	r7, #0
 8001b5c:	402b      	ands	r3, r5
 8001b5e:	e7d0      	b.n	8001b02 <__aeabi_dsub+0x34a>
 8001b60:	08c0      	lsrs	r0, r0, #3
 8001b62:	0762      	lsls	r2, r4, #29
 8001b64:	4302      	orrs	r2, r0
 8001b66:	08e4      	lsrs	r4, r4, #3
 8001b68:	e737      	b.n	80019da <__aeabi_dsub+0x222>
 8001b6a:	08ea      	lsrs	r2, r5, #3
 8001b6c:	0763      	lsls	r3, r4, #29
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	4bd3      	ldr	r3, [pc, #844]	@ (8001ec0 <__aeabi_dsub+0x708>)
 8001b72:	08e4      	lsrs	r4, r4, #3
 8001b74:	429f      	cmp	r7, r3
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dsub+0x3c2>
 8001b78:	e72f      	b.n	80019da <__aeabi_dsub+0x222>
 8001b7a:	0324      	lsls	r4, r4, #12
 8001b7c:	0b25      	lsrs	r5, r4, #12
 8001b7e:	057c      	lsls	r4, r7, #21
 8001b80:	0d64      	lsrs	r4, r4, #21
 8001b82:	e6c2      	b.n	800190a <__aeabi_dsub+0x152>
 8001b84:	46ca      	mov	sl, r9
 8001b86:	0022      	movs	r2, r4
 8001b88:	4302      	orrs	r2, r0
 8001b8a:	d158      	bne.n	8001c3e <__aeabi_dsub+0x486>
 8001b8c:	4663      	mov	r3, ip
 8001b8e:	000e      	movs	r6, r1
 8001b90:	9c02      	ldr	r4, [sp, #8]
 8001b92:	9303      	str	r3, [sp, #12]
 8001b94:	9b03      	ldr	r3, [sp, #12]
 8001b96:	4657      	mov	r7, sl
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	e7e7      	b.n	8001b6c <__aeabi_dsub+0x3b4>
 8001b9c:	4cc9      	ldr	r4, [pc, #804]	@ (8001ec4 <__aeabi_dsub+0x70c>)
 8001b9e:	1aff      	subs	r7, r7, r3
 8001ba0:	4014      	ands	r4, r2
 8001ba2:	e692      	b.n	80018ca <__aeabi_dsub+0x112>
 8001ba4:	4dc8      	ldr	r5, [pc, #800]	@ (8001ec8 <__aeabi_dsub+0x710>)
 8001ba6:	1c7a      	adds	r2, r7, #1
 8001ba8:	422a      	tst	r2, r5
 8001baa:	d000      	beq.n	8001bae <__aeabi_dsub+0x3f6>
 8001bac:	e084      	b.n	8001cb8 <__aeabi_dsub+0x500>
 8001bae:	0022      	movs	r2, r4
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	2f00      	cmp	r7, #0
 8001bb4:	d000      	beq.n	8001bb8 <__aeabi_dsub+0x400>
 8001bb6:	e0ef      	b.n	8001d98 <__aeabi_dsub+0x5e0>
 8001bb8:	2a00      	cmp	r2, #0
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x406>
 8001bbc:	e0e5      	b.n	8001d8a <__aeabi_dsub+0x5d2>
 8001bbe:	4662      	mov	r2, ip
 8001bc0:	9902      	ldr	r1, [sp, #8]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x410>
 8001bc6:	e0c5      	b.n	8001d54 <__aeabi_dsub+0x59c>
 8001bc8:	4663      	mov	r3, ip
 8001bca:	18c5      	adds	r5, r0, r3
 8001bcc:	468c      	mov	ip, r1
 8001bce:	4285      	cmp	r5, r0
 8001bd0:	4180      	sbcs	r0, r0
 8001bd2:	4464      	add	r4, ip
 8001bd4:	4240      	negs	r0, r0
 8001bd6:	1824      	adds	r4, r4, r0
 8001bd8:	0223      	lsls	r3, r4, #8
 8001bda:	d502      	bpl.n	8001be2 <__aeabi_dsub+0x42a>
 8001bdc:	4bb9      	ldr	r3, [pc, #740]	@ (8001ec4 <__aeabi_dsub+0x70c>)
 8001bde:	3701      	adds	r7, #1
 8001be0:	401c      	ands	r4, r3
 8001be2:	46ba      	mov	sl, r7
 8001be4:	9503      	str	r5, [sp, #12]
 8001be6:	e7d5      	b.n	8001b94 <__aeabi_dsub+0x3dc>
 8001be8:	4662      	mov	r2, ip
 8001bea:	1a85      	subs	r5, r0, r2
 8001bec:	42a8      	cmp	r0, r5
 8001bee:	4192      	sbcs	r2, r2
 8001bf0:	4252      	negs	r2, r2
 8001bf2:	4691      	mov	r9, r2
 8001bf4:	9b02      	ldr	r3, [sp, #8]
 8001bf6:	1ae3      	subs	r3, r4, r3
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	464b      	mov	r3, r9
 8001bfc:	1ad2      	subs	r2, r2, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	4691      	mov	r9, r2
 8001c02:	021a      	lsls	r2, r3, #8
 8001c04:	d46c      	bmi.n	8001ce0 <__aeabi_dsub+0x528>
 8001c06:	464a      	mov	r2, r9
 8001c08:	464c      	mov	r4, r9
 8001c0a:	432a      	orrs	r2, r5
 8001c0c:	d000      	beq.n	8001c10 <__aeabi_dsub+0x458>
 8001c0e:	e63a      	b.n	8001886 <__aeabi_dsub+0xce>
 8001c10:	2600      	movs	r6, #0
 8001c12:	2400      	movs	r4, #0
 8001c14:	2500      	movs	r5, #0
 8001c16:	e678      	b.n	800190a <__aeabi_dsub+0x152>
 8001c18:	9902      	ldr	r1, [sp, #8]
 8001c1a:	4653      	mov	r3, sl
 8001c1c:	000d      	movs	r5, r1
 8001c1e:	3a20      	subs	r2, #32
 8001c20:	40d5      	lsrs	r5, r2
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d006      	beq.n	8001c34 <__aeabi_dsub+0x47c>
 8001c26:	2240      	movs	r2, #64	@ 0x40
 8001c28:	1ad2      	subs	r2, r2, r3
 8001c2a:	000b      	movs	r3, r1
 8001c2c:	4093      	lsls	r3, r2
 8001c2e:	4662      	mov	r2, ip
 8001c30:	431a      	orrs	r2, r3
 8001c32:	4693      	mov	fp, r2
 8001c34:	465b      	mov	r3, fp
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	4193      	sbcs	r3, r2
 8001c3a:	431d      	orrs	r5, r3
 8001c3c:	e619      	b.n	8001872 <__aeabi_dsub+0xba>
 8001c3e:	4653      	mov	r3, sl
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d100      	bne.n	8001c48 <__aeabi_dsub+0x490>
 8001c46:	e0c6      	b.n	8001dd6 <__aeabi_dsub+0x61e>
 8001c48:	4e9d      	ldr	r6, [pc, #628]	@ (8001ec0 <__aeabi_dsub+0x708>)
 8001c4a:	45b2      	cmp	sl, r6
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x498>
 8001c4e:	e6bd      	b.n	80019cc <__aeabi_dsub+0x214>
 8001c50:	4688      	mov	r8, r1
 8001c52:	000e      	movs	r6, r1
 8001c54:	2501      	movs	r5, #1
 8001c56:	2a38      	cmp	r2, #56	@ 0x38
 8001c58:	dc10      	bgt.n	8001c7c <__aeabi_dsub+0x4c4>
 8001c5a:	2a1f      	cmp	r2, #31
 8001c5c:	dc7f      	bgt.n	8001d5e <__aeabi_dsub+0x5a6>
 8001c5e:	2120      	movs	r1, #32
 8001c60:	0025      	movs	r5, r4
 8001c62:	1a89      	subs	r1, r1, r2
 8001c64:	0007      	movs	r7, r0
 8001c66:	4088      	lsls	r0, r1
 8001c68:	408d      	lsls	r5, r1
 8001c6a:	40d7      	lsrs	r7, r2
 8001c6c:	40d4      	lsrs	r4, r2
 8001c6e:	1e41      	subs	r1, r0, #1
 8001c70:	4188      	sbcs	r0, r1
 8001c72:	9b02      	ldr	r3, [sp, #8]
 8001c74:	433d      	orrs	r5, r7
 8001c76:	1b1b      	subs	r3, r3, r4
 8001c78:	4305      	orrs	r5, r0
 8001c7a:	9302      	str	r3, [sp, #8]
 8001c7c:	4662      	mov	r2, ip
 8001c7e:	1b55      	subs	r5, r2, r5
 8001c80:	45ac      	cmp	ip, r5
 8001c82:	4192      	sbcs	r2, r2
 8001c84:	9b02      	ldr	r3, [sp, #8]
 8001c86:	4252      	negs	r2, r2
 8001c88:	464f      	mov	r7, r9
 8001c8a:	1a9c      	subs	r4, r3, r2
 8001c8c:	e5f6      	b.n	800187c <__aeabi_dsub+0xc4>
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d000      	beq.n	8001c94 <__aeabi_dsub+0x4dc>
 8001c92:	e0b7      	b.n	8001e04 <__aeabi_dsub+0x64c>
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dsub+0x4e2>
 8001c98:	e0f0      	b.n	8001e7c <__aeabi_dsub+0x6c4>
 8001c9a:	2601      	movs	r6, #1
 8001c9c:	400e      	ands	r6, r1
 8001c9e:	4663      	mov	r3, ip
 8001ca0:	9802      	ldr	r0, [sp, #8]
 8001ca2:	08d9      	lsrs	r1, r3, #3
 8001ca4:	0742      	lsls	r2, r0, #29
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	08c4      	lsrs	r4, r0, #3
 8001caa:	e696      	b.n	80019da <__aeabi_dsub+0x222>
 8001cac:	4c85      	ldr	r4, [pc, #532]	@ (8001ec4 <__aeabi_dsub+0x70c>)
 8001cae:	1aff      	subs	r7, r7, r3
 8001cb0:	4014      	ands	r4, r2
 8001cb2:	0762      	lsls	r2, r4, #29
 8001cb4:	08e4      	lsrs	r4, r4, #3
 8001cb6:	e760      	b.n	8001b7a <__aeabi_dsub+0x3c2>
 8001cb8:	4981      	ldr	r1, [pc, #516]	@ (8001ec0 <__aeabi_dsub+0x708>)
 8001cba:	428a      	cmp	r2, r1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x508>
 8001cbe:	e0c9      	b.n	8001e54 <__aeabi_dsub+0x69c>
 8001cc0:	4663      	mov	r3, ip
 8001cc2:	18c1      	adds	r1, r0, r3
 8001cc4:	4281      	cmp	r1, r0
 8001cc6:	4180      	sbcs	r0, r0
 8001cc8:	9b02      	ldr	r3, [sp, #8]
 8001cca:	4240      	negs	r0, r0
 8001ccc:	18e3      	adds	r3, r4, r3
 8001cce:	181b      	adds	r3, r3, r0
 8001cd0:	07dd      	lsls	r5, r3, #31
 8001cd2:	085c      	lsrs	r4, r3, #1
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	0849      	lsrs	r1, r1, #1
 8001cd8:	430d      	orrs	r5, r1
 8001cda:	0017      	movs	r7, r2
 8001cdc:	402b      	ands	r3, r5
 8001cde:	e710      	b.n	8001b02 <__aeabi_dsub+0x34a>
 8001ce0:	4663      	mov	r3, ip
 8001ce2:	1a1d      	subs	r5, r3, r0
 8001ce4:	45ac      	cmp	ip, r5
 8001ce6:	4192      	sbcs	r2, r2
 8001ce8:	2601      	movs	r6, #1
 8001cea:	9b02      	ldr	r3, [sp, #8]
 8001cec:	4252      	negs	r2, r2
 8001cee:	1b1c      	subs	r4, r3, r4
 8001cf0:	4688      	mov	r8, r1
 8001cf2:	1aa4      	subs	r4, r4, r2
 8001cf4:	400e      	ands	r6, r1
 8001cf6:	e5c6      	b.n	8001886 <__aeabi_dsub+0xce>
 8001cf8:	4663      	mov	r3, ip
 8001cfa:	18c5      	adds	r5, r0, r3
 8001cfc:	9b02      	ldr	r3, [sp, #8]
 8001cfe:	4285      	cmp	r5, r0
 8001d00:	4180      	sbcs	r0, r0
 8001d02:	469c      	mov	ip, r3
 8001d04:	4240      	negs	r0, r0
 8001d06:	4464      	add	r4, ip
 8001d08:	1824      	adds	r4, r4, r0
 8001d0a:	2701      	movs	r7, #1
 8001d0c:	0223      	lsls	r3, r4, #8
 8001d0e:	d400      	bmi.n	8001d12 <__aeabi_dsub+0x55a>
 8001d10:	e6f5      	b.n	8001afe <__aeabi_dsub+0x346>
 8001d12:	2702      	movs	r7, #2
 8001d14:	e641      	b.n	800199a <__aeabi_dsub+0x1e2>
 8001d16:	4663      	mov	r3, ip
 8001d18:	1ac5      	subs	r5, r0, r3
 8001d1a:	42a8      	cmp	r0, r5
 8001d1c:	4180      	sbcs	r0, r0
 8001d1e:	9b02      	ldr	r3, [sp, #8]
 8001d20:	4240      	negs	r0, r0
 8001d22:	1ae4      	subs	r4, r4, r3
 8001d24:	2701      	movs	r7, #1
 8001d26:	1a24      	subs	r4, r4, r0
 8001d28:	e5a8      	b.n	800187c <__aeabi_dsub+0xc4>
 8001d2a:	9d02      	ldr	r5, [sp, #8]
 8001d2c:	4652      	mov	r2, sl
 8001d2e:	002b      	movs	r3, r5
 8001d30:	3a20      	subs	r2, #32
 8001d32:	40d3      	lsrs	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	4653      	mov	r3, sl
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d006      	beq.n	8001d4a <__aeabi_dsub+0x592>
 8001d3c:	2240      	movs	r2, #64	@ 0x40
 8001d3e:	1ad2      	subs	r2, r2, r3
 8001d40:	002b      	movs	r3, r5
 8001d42:	4093      	lsls	r3, r2
 8001d44:	4662      	mov	r2, ip
 8001d46:	431a      	orrs	r2, r3
 8001d48:	4693      	mov	fp, r2
 8001d4a:	465d      	mov	r5, fp
 8001d4c:	1e6b      	subs	r3, r5, #1
 8001d4e:	419d      	sbcs	r5, r3
 8001d50:	430d      	orrs	r5, r1
 8001d52:	e615      	b.n	8001980 <__aeabi_dsub+0x1c8>
 8001d54:	0762      	lsls	r2, r4, #29
 8001d56:	08c0      	lsrs	r0, r0, #3
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	08e4      	lsrs	r4, r4, #3
 8001d5c:	e70d      	b.n	8001b7a <__aeabi_dsub+0x3c2>
 8001d5e:	0011      	movs	r1, r2
 8001d60:	0027      	movs	r7, r4
 8001d62:	3920      	subs	r1, #32
 8001d64:	40cf      	lsrs	r7, r1
 8001d66:	2a20      	cmp	r2, #32
 8001d68:	d005      	beq.n	8001d76 <__aeabi_dsub+0x5be>
 8001d6a:	2140      	movs	r1, #64	@ 0x40
 8001d6c:	1a8a      	subs	r2, r1, r2
 8001d6e:	4094      	lsls	r4, r2
 8001d70:	0025      	movs	r5, r4
 8001d72:	4305      	orrs	r5, r0
 8001d74:	9503      	str	r5, [sp, #12]
 8001d76:	9d03      	ldr	r5, [sp, #12]
 8001d78:	1e6a      	subs	r2, r5, #1
 8001d7a:	4195      	sbcs	r5, r2
 8001d7c:	433d      	orrs	r5, r7
 8001d7e:	e77d      	b.n	8001c7c <__aeabi_dsub+0x4c4>
 8001d80:	2a00      	cmp	r2, #0
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x5ce>
 8001d84:	e744      	b.n	8001c10 <__aeabi_dsub+0x458>
 8001d86:	2601      	movs	r6, #1
 8001d88:	400e      	ands	r6, r1
 8001d8a:	4663      	mov	r3, ip
 8001d8c:	08d9      	lsrs	r1, r3, #3
 8001d8e:	9b02      	ldr	r3, [sp, #8]
 8001d90:	075a      	lsls	r2, r3, #29
 8001d92:	430a      	orrs	r2, r1
 8001d94:	08dc      	lsrs	r4, r3, #3
 8001d96:	e6f0      	b.n	8001b7a <__aeabi_dsub+0x3c2>
 8001d98:	2a00      	cmp	r2, #0
 8001d9a:	d028      	beq.n	8001dee <__aeabi_dsub+0x636>
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	9f02      	ldr	r7, [sp, #8]
 8001da0:	08c0      	lsrs	r0, r0, #3
 8001da2:	433a      	orrs	r2, r7
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x5f0>
 8001da6:	e6dc      	b.n	8001b62 <__aeabi_dsub+0x3aa>
 8001da8:	0762      	lsls	r2, r4, #29
 8001daa:	4310      	orrs	r0, r2
 8001dac:	2280      	movs	r2, #128	@ 0x80
 8001dae:	08e4      	lsrs	r4, r4, #3
 8001db0:	0312      	lsls	r2, r2, #12
 8001db2:	4214      	tst	r4, r2
 8001db4:	d009      	beq.n	8001dca <__aeabi_dsub+0x612>
 8001db6:	08fd      	lsrs	r5, r7, #3
 8001db8:	4215      	tst	r5, r2
 8001dba:	d106      	bne.n	8001dca <__aeabi_dsub+0x612>
 8001dbc:	4663      	mov	r3, ip
 8001dbe:	2601      	movs	r6, #1
 8001dc0:	002c      	movs	r4, r5
 8001dc2:	08d8      	lsrs	r0, r3, #3
 8001dc4:	077b      	lsls	r3, r7, #29
 8001dc6:	4318      	orrs	r0, r3
 8001dc8:	400e      	ands	r6, r1
 8001dca:	0f42      	lsrs	r2, r0, #29
 8001dcc:	00c0      	lsls	r0, r0, #3
 8001dce:	08c0      	lsrs	r0, r0, #3
 8001dd0:	0752      	lsls	r2, r2, #29
 8001dd2:	4302      	orrs	r2, r0
 8001dd4:	e601      	b.n	80019da <__aeabi_dsub+0x222>
 8001dd6:	4663      	mov	r3, ip
 8001dd8:	1a1d      	subs	r5, r3, r0
 8001dda:	45ac      	cmp	ip, r5
 8001ddc:	4192      	sbcs	r2, r2
 8001dde:	9b02      	ldr	r3, [sp, #8]
 8001de0:	4252      	negs	r2, r2
 8001de2:	1b1c      	subs	r4, r3, r4
 8001de4:	000e      	movs	r6, r1
 8001de6:	4688      	mov	r8, r1
 8001de8:	2701      	movs	r7, #1
 8001dea:	1aa4      	subs	r4, r4, r2
 8001dec:	e546      	b.n	800187c <__aeabi_dsub+0xc4>
 8001dee:	4663      	mov	r3, ip
 8001df0:	08d9      	lsrs	r1, r3, #3
 8001df2:	9b02      	ldr	r3, [sp, #8]
 8001df4:	075a      	lsls	r2, r3, #29
 8001df6:	430a      	orrs	r2, r1
 8001df8:	08dc      	lsrs	r4, r3, #3
 8001dfa:	e5ee      	b.n	80019da <__aeabi_dsub+0x222>
 8001dfc:	4663      	mov	r3, ip
 8001dfe:	9c02      	ldr	r4, [sp, #8]
 8001e00:	9303      	str	r3, [sp, #12]
 8001e02:	e6c7      	b.n	8001b94 <__aeabi_dsub+0x3dc>
 8001e04:	08c0      	lsrs	r0, r0, #3
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x654>
 8001e0a:	e6aa      	b.n	8001b62 <__aeabi_dsub+0x3aa>
 8001e0c:	0762      	lsls	r2, r4, #29
 8001e0e:	4310      	orrs	r0, r2
 8001e10:	2280      	movs	r2, #128	@ 0x80
 8001e12:	08e4      	lsrs	r4, r4, #3
 8001e14:	0312      	lsls	r2, r2, #12
 8001e16:	4214      	tst	r4, r2
 8001e18:	d0d7      	beq.n	8001dca <__aeabi_dsub+0x612>
 8001e1a:	9f02      	ldr	r7, [sp, #8]
 8001e1c:	08fd      	lsrs	r5, r7, #3
 8001e1e:	4215      	tst	r5, r2
 8001e20:	d1d3      	bne.n	8001dca <__aeabi_dsub+0x612>
 8001e22:	4663      	mov	r3, ip
 8001e24:	2601      	movs	r6, #1
 8001e26:	08d8      	lsrs	r0, r3, #3
 8001e28:	077b      	lsls	r3, r7, #29
 8001e2a:	002c      	movs	r4, r5
 8001e2c:	4318      	orrs	r0, r3
 8001e2e:	400e      	ands	r6, r1
 8001e30:	e7cb      	b.n	8001dca <__aeabi_dsub+0x612>
 8001e32:	000a      	movs	r2, r1
 8001e34:	0027      	movs	r7, r4
 8001e36:	3a20      	subs	r2, #32
 8001e38:	40d7      	lsrs	r7, r2
 8001e3a:	2920      	cmp	r1, #32
 8001e3c:	d005      	beq.n	8001e4a <__aeabi_dsub+0x692>
 8001e3e:	2240      	movs	r2, #64	@ 0x40
 8001e40:	1a52      	subs	r2, r2, r1
 8001e42:	4094      	lsls	r4, r2
 8001e44:	0025      	movs	r5, r4
 8001e46:	4305      	orrs	r5, r0
 8001e48:	9503      	str	r5, [sp, #12]
 8001e4a:	9d03      	ldr	r5, [sp, #12]
 8001e4c:	1e6a      	subs	r2, r5, #1
 8001e4e:	4195      	sbcs	r5, r2
 8001e50:	432f      	orrs	r7, r5
 8001e52:	e610      	b.n	8001a76 <__aeabi_dsub+0x2be>
 8001e54:	0014      	movs	r4, r2
 8001e56:	2500      	movs	r5, #0
 8001e58:	2200      	movs	r2, #0
 8001e5a:	e556      	b.n	800190a <__aeabi_dsub+0x152>
 8001e5c:	9b02      	ldr	r3, [sp, #8]
 8001e5e:	4460      	add	r0, ip
 8001e60:	4699      	mov	r9, r3
 8001e62:	4560      	cmp	r0, ip
 8001e64:	4192      	sbcs	r2, r2
 8001e66:	444c      	add	r4, r9
 8001e68:	4252      	negs	r2, r2
 8001e6a:	0005      	movs	r5, r0
 8001e6c:	18a4      	adds	r4, r4, r2
 8001e6e:	e74c      	b.n	8001d0a <__aeabi_dsub+0x552>
 8001e70:	001a      	movs	r2, r3
 8001e72:	001c      	movs	r4, r3
 8001e74:	432a      	orrs	r2, r5
 8001e76:	d000      	beq.n	8001e7a <__aeabi_dsub+0x6c2>
 8001e78:	e6b3      	b.n	8001be2 <__aeabi_dsub+0x42a>
 8001e7a:	e6c9      	b.n	8001c10 <__aeabi_dsub+0x458>
 8001e7c:	2480      	movs	r4, #128	@ 0x80
 8001e7e:	2600      	movs	r6, #0
 8001e80:	0324      	lsls	r4, r4, #12
 8001e82:	e5ae      	b.n	80019e2 <__aeabi_dsub+0x22a>
 8001e84:	2120      	movs	r1, #32
 8001e86:	2500      	movs	r5, #0
 8001e88:	1a09      	subs	r1, r1, r0
 8001e8a:	e517      	b.n	80018bc <__aeabi_dsub+0x104>
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2500      	movs	r5, #0
 8001e90:	4c0b      	ldr	r4, [pc, #44]	@ (8001ec0 <__aeabi_dsub+0x708>)
 8001e92:	e53a      	b.n	800190a <__aeabi_dsub+0x152>
 8001e94:	2d00      	cmp	r5, #0
 8001e96:	d100      	bne.n	8001e9a <__aeabi_dsub+0x6e2>
 8001e98:	e5f6      	b.n	8001a88 <__aeabi_dsub+0x2d0>
 8001e9a:	464b      	mov	r3, r9
 8001e9c:	1bda      	subs	r2, r3, r7
 8001e9e:	4692      	mov	sl, r2
 8001ea0:	2f00      	cmp	r7, #0
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x6ee>
 8001ea4:	e66f      	b.n	8001b86 <__aeabi_dsub+0x3ce>
 8001ea6:	2a38      	cmp	r2, #56	@ 0x38
 8001ea8:	dc05      	bgt.n	8001eb6 <__aeabi_dsub+0x6fe>
 8001eaa:	2680      	movs	r6, #128	@ 0x80
 8001eac:	0436      	lsls	r6, r6, #16
 8001eae:	4334      	orrs	r4, r6
 8001eb0:	4688      	mov	r8, r1
 8001eb2:	000e      	movs	r6, r1
 8001eb4:	e6d1      	b.n	8001c5a <__aeabi_dsub+0x4a2>
 8001eb6:	4688      	mov	r8, r1
 8001eb8:	000e      	movs	r6, r1
 8001eba:	2501      	movs	r5, #1
 8001ebc:	e6de      	b.n	8001c7c <__aeabi_dsub+0x4c4>
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	000007ff 	.word	0x000007ff
 8001ec4:	ff7fffff 	.word	0xff7fffff
 8001ec8:	000007fe 	.word	0x000007fe
 8001ecc:	2d00      	cmp	r5, #0
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dsub+0x71a>
 8001ed0:	e668      	b.n	8001ba4 <__aeabi_dsub+0x3ec>
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	1bd9      	subs	r1, r3, r7
 8001ed6:	2f00      	cmp	r7, #0
 8001ed8:	d101      	bne.n	8001ede <__aeabi_dsub+0x726>
 8001eda:	468a      	mov	sl, r1
 8001edc:	e5a7      	b.n	8001a2e <__aeabi_dsub+0x276>
 8001ede:	2701      	movs	r7, #1
 8001ee0:	2938      	cmp	r1, #56	@ 0x38
 8001ee2:	dd00      	ble.n	8001ee6 <__aeabi_dsub+0x72e>
 8001ee4:	e5c7      	b.n	8001a76 <__aeabi_dsub+0x2be>
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	0412      	lsls	r2, r2, #16
 8001eea:	4314      	orrs	r4, r2
 8001eec:	e5af      	b.n	8001a4e <__aeabi_dsub+0x296>
 8001eee:	46c0      	nop			@ (mov r8, r8)

08001ef0 <__aeabi_d2iz>:
 8001ef0:	000b      	movs	r3, r1
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	4d16      	ldr	r5, [pc, #88]	@ (8001f50 <__aeabi_d2iz+0x60>)
 8001ef8:	030c      	lsls	r4, r1, #12
 8001efa:	b082      	sub	sp, #8
 8001efc:	0049      	lsls	r1, r1, #1
 8001efe:	2000      	movs	r0, #0
 8001f00:	9200      	str	r2, [sp, #0]
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	0b24      	lsrs	r4, r4, #12
 8001f06:	0d49      	lsrs	r1, r1, #21
 8001f08:	0fde      	lsrs	r6, r3, #31
 8001f0a:	42a9      	cmp	r1, r5
 8001f0c:	dd04      	ble.n	8001f18 <__aeabi_d2iz+0x28>
 8001f0e:	4811      	ldr	r0, [pc, #68]	@ (8001f54 <__aeabi_d2iz+0x64>)
 8001f10:	4281      	cmp	r1, r0
 8001f12:	dd03      	ble.n	8001f1c <__aeabi_d2iz+0x2c>
 8001f14:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <__aeabi_d2iz+0x68>)
 8001f16:	18f0      	adds	r0, r6, r3
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd70      	pop	{r4, r5, r6, pc}
 8001f1c:	2080      	movs	r0, #128	@ 0x80
 8001f1e:	0340      	lsls	r0, r0, #13
 8001f20:	4320      	orrs	r0, r4
 8001f22:	4c0e      	ldr	r4, [pc, #56]	@ (8001f5c <__aeabi_d2iz+0x6c>)
 8001f24:	1a64      	subs	r4, r4, r1
 8001f26:	2c1f      	cmp	r4, #31
 8001f28:	dd08      	ble.n	8001f3c <__aeabi_d2iz+0x4c>
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <__aeabi_d2iz+0x70>)
 8001f2c:	1a5b      	subs	r3, r3, r1
 8001f2e:	40d8      	lsrs	r0, r3
 8001f30:	0003      	movs	r3, r0
 8001f32:	4258      	negs	r0, r3
 8001f34:	2e00      	cmp	r6, #0
 8001f36:	d1ef      	bne.n	8001f18 <__aeabi_d2iz+0x28>
 8001f38:	0018      	movs	r0, r3
 8001f3a:	e7ed      	b.n	8001f18 <__aeabi_d2iz+0x28>
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <__aeabi_d2iz+0x74>)
 8001f3e:	9a00      	ldr	r2, [sp, #0]
 8001f40:	469c      	mov	ip, r3
 8001f42:	0003      	movs	r3, r0
 8001f44:	4461      	add	r1, ip
 8001f46:	408b      	lsls	r3, r1
 8001f48:	40e2      	lsrs	r2, r4
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	e7f1      	b.n	8001f32 <__aeabi_d2iz+0x42>
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	000003fe 	.word	0x000003fe
 8001f54:	0000041d 	.word	0x0000041d
 8001f58:	7fffffff 	.word	0x7fffffff
 8001f5c:	00000433 	.word	0x00000433
 8001f60:	00000413 	.word	0x00000413
 8001f64:	fffffbed 	.word	0xfffffbed

08001f68 <__aeabi_i2d>:
 8001f68:	b570      	push	{r4, r5, r6, lr}
 8001f6a:	2800      	cmp	r0, #0
 8001f6c:	d016      	beq.n	8001f9c <__aeabi_i2d+0x34>
 8001f6e:	17c3      	asrs	r3, r0, #31
 8001f70:	18c5      	adds	r5, r0, r3
 8001f72:	405d      	eors	r5, r3
 8001f74:	0fc4      	lsrs	r4, r0, #31
 8001f76:	0028      	movs	r0, r5
 8001f78:	f000 f848 	bl	800200c <__clzsi2>
 8001f7c:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <__aeabi_i2d+0x58>)
 8001f7e:	1a1b      	subs	r3, r3, r0
 8001f80:	055b      	lsls	r3, r3, #21
 8001f82:	0d5b      	lsrs	r3, r3, #21
 8001f84:	280a      	cmp	r0, #10
 8001f86:	dc14      	bgt.n	8001fb2 <__aeabi_i2d+0x4a>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	002e      	movs	r6, r5
 8001f8c:	3215      	adds	r2, #21
 8001f8e:	4096      	lsls	r6, r2
 8001f90:	220b      	movs	r2, #11
 8001f92:	1a12      	subs	r2, r2, r0
 8001f94:	40d5      	lsrs	r5, r2
 8001f96:	032d      	lsls	r5, r5, #12
 8001f98:	0b2d      	lsrs	r5, r5, #12
 8001f9a:	e003      	b.n	8001fa4 <__aeabi_i2d+0x3c>
 8001f9c:	2400      	movs	r4, #0
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2500      	movs	r5, #0
 8001fa2:	2600      	movs	r6, #0
 8001fa4:	051b      	lsls	r3, r3, #20
 8001fa6:	432b      	orrs	r3, r5
 8001fa8:	07e4      	lsls	r4, r4, #31
 8001faa:	4323      	orrs	r3, r4
 8001fac:	0030      	movs	r0, r6
 8001fae:	0019      	movs	r1, r3
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
 8001fb2:	380b      	subs	r0, #11
 8001fb4:	4085      	lsls	r5, r0
 8001fb6:	032d      	lsls	r5, r5, #12
 8001fb8:	2600      	movs	r6, #0
 8001fba:	0b2d      	lsrs	r5, r5, #12
 8001fbc:	e7f2      	b.n	8001fa4 <__aeabi_i2d+0x3c>
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	0000041e 	.word	0x0000041e

08001fc4 <__aeabi_ui2d>:
 8001fc4:	b510      	push	{r4, lr}
 8001fc6:	1e04      	subs	r4, r0, #0
 8001fc8:	d010      	beq.n	8001fec <__aeabi_ui2d+0x28>
 8001fca:	f000 f81f 	bl	800200c <__clzsi2>
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <__aeabi_ui2d+0x44>)
 8001fd0:	1a1b      	subs	r3, r3, r0
 8001fd2:	055b      	lsls	r3, r3, #21
 8001fd4:	0d5b      	lsrs	r3, r3, #21
 8001fd6:	280a      	cmp	r0, #10
 8001fd8:	dc0f      	bgt.n	8001ffa <__aeabi_ui2d+0x36>
 8001fda:	220b      	movs	r2, #11
 8001fdc:	0021      	movs	r1, r4
 8001fde:	1a12      	subs	r2, r2, r0
 8001fe0:	40d1      	lsrs	r1, r2
 8001fe2:	3015      	adds	r0, #21
 8001fe4:	030a      	lsls	r2, r1, #12
 8001fe6:	4084      	lsls	r4, r0
 8001fe8:	0b12      	lsrs	r2, r2, #12
 8001fea:	e001      	b.n	8001ff0 <__aeabi_ui2d+0x2c>
 8001fec:	2300      	movs	r3, #0
 8001fee:	2200      	movs	r2, #0
 8001ff0:	051b      	lsls	r3, r3, #20
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	0020      	movs	r0, r4
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	bd10      	pop	{r4, pc}
 8001ffa:	0022      	movs	r2, r4
 8001ffc:	380b      	subs	r0, #11
 8001ffe:	4082      	lsls	r2, r0
 8002000:	0312      	lsls	r2, r2, #12
 8002002:	2400      	movs	r4, #0
 8002004:	0b12      	lsrs	r2, r2, #12
 8002006:	e7f3      	b.n	8001ff0 <__aeabi_ui2d+0x2c>
 8002008:	0000041e 	.word	0x0000041e

0800200c <__clzsi2>:
 800200c:	211c      	movs	r1, #28
 800200e:	2301      	movs	r3, #1
 8002010:	041b      	lsls	r3, r3, #16
 8002012:	4298      	cmp	r0, r3
 8002014:	d301      	bcc.n	800201a <__clzsi2+0xe>
 8002016:	0c00      	lsrs	r0, r0, #16
 8002018:	3910      	subs	r1, #16
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	4298      	cmp	r0, r3
 800201e:	d301      	bcc.n	8002024 <__clzsi2+0x18>
 8002020:	0a00      	lsrs	r0, r0, #8
 8002022:	3908      	subs	r1, #8
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	4298      	cmp	r0, r3
 8002028:	d301      	bcc.n	800202e <__clzsi2+0x22>
 800202a:	0900      	lsrs	r0, r0, #4
 800202c:	3904      	subs	r1, #4
 800202e:	a202      	add	r2, pc, #8	@ (adr r2, 8002038 <__clzsi2+0x2c>)
 8002030:	5c10      	ldrb	r0, [r2, r0]
 8002032:	1840      	adds	r0, r0, r1
 8002034:	4770      	bx	lr
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	02020304 	.word	0x02020304
 800203c:	01010101 	.word	0x01010101
	...

08002048 <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b08b      	sub	sp, #44	@ 0x2c
 800204c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204e:	2414      	movs	r4, #20
 8002050:	193b      	adds	r3, r7, r4
 8002052:	0018      	movs	r0, r3
 8002054:	2314      	movs	r3, #20
 8002056:	001a      	movs	r2, r3
 8002058:	2100      	movs	r1, #0
 800205a:	f005 fb37 	bl	80076cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205e:	4b6a      	ldr	r3, [pc, #424]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 8002060:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002062:	4b69      	ldr	r3, [pc, #420]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 8002064:	2104      	movs	r1, #4
 8002066:	430a      	orrs	r2, r1
 8002068:	64da      	str	r2, [r3, #76]	@ 0x4c
 800206a:	4b67      	ldr	r3, [pc, #412]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002076:	4b64      	ldr	r3, [pc, #400]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 8002078:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800207a:	4b63      	ldr	r3, [pc, #396]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 800207c:	2120      	movs	r1, #32
 800207e:	430a      	orrs	r2, r1
 8002080:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002082:	4b61      	ldr	r3, [pc, #388]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	2220      	movs	r2, #32
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	4b5e      	ldr	r3, [pc, #376]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 8002090:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002092:	4b5d      	ldr	r3, [pc, #372]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 8002094:	2101      	movs	r1, #1
 8002096:	430a      	orrs	r2, r1
 8002098:	64da      	str	r2, [r3, #76]	@ 0x4c
 800209a:	4b5b      	ldr	r3, [pc, #364]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	2201      	movs	r2, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	4b58      	ldr	r3, [pc, #352]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 80020a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020aa:	4b57      	ldr	r3, [pc, #348]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 80020ac:	2102      	movs	r1, #2
 80020ae:	430a      	orrs	r2, r1
 80020b0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80020b2:	4b55      	ldr	r3, [pc, #340]	@ (8002208 <MX_GPIO_Init+0x1c0>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	2202      	movs	r2, #2
 80020b8:	4013      	ands	r3, r2
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_CS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 80020be:	2388      	movs	r3, #136	@ 0x88
 80020c0:	0059      	lsls	r1, r3, #1
 80020c2:	23a0      	movs	r3, #160	@ 0xa0
 80020c4:	05db      	lsls	r3, r3, #23
 80020c6:	2201      	movs	r2, #1
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 feef 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020ce:	193b      	adds	r3, r7, r4
 80020d0:	22e0      	movs	r2, #224	@ 0xe0
 80020d2:	0212      	lsls	r2, r2, #8
 80020d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	2203      	movs	r2, #3
 80020da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	193b      	adds	r3, r7, r4
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	4a49      	ldr	r2, [pc, #292]	@ (800220c <MX_GPIO_Init+0x1c4>)
 80020e6:	0019      	movs	r1, r3
 80020e8:	0010      	movs	r0, r2
 80020ea:	f000 fc81 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	220f      	movs	r2, #15
 80020f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f4:	193b      	adds	r3, r7, r4
 80020f6:	2203      	movs	r2, #3
 80020f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002100:	193b      	adds	r3, r7, r4
 8002102:	4a43      	ldr	r2, [pc, #268]	@ (8002210 <MX_GPIO_Init+0x1c8>)
 8002104:	0019      	movs	r1, r3
 8002106:	0010      	movs	r0, r2
 8002108:	f000 fc72 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA10
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800210c:	193b      	adds	r3, r7, r4
 800210e:	4a41      	ldr	r2, [pc, #260]	@ (8002214 <MX_GPIO_Init+0x1cc>)
 8002110:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002112:	193b      	adds	r3, r7, r4
 8002114:	2203      	movs	r2, #3
 8002116:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	193b      	adds	r3, r7, r4
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	193a      	adds	r2, r7, r4
 8002120:	23a0      	movs	r3, #160	@ 0xa0
 8002122:	05db      	lsls	r3, r3, #23
 8002124:	0011      	movs	r1, r2
 8002126:	0018      	movs	r0, r3
 8002128:	f000 fc62 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_INT_Pin;
 800212c:	193b      	adds	r3, r7, r4
 800212e:	2208      	movs	r2, #8
 8002130:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002132:	193b      	adds	r3, r7, r4
 8002134:	2288      	movs	r2, #136	@ 0x88
 8002136:	0352      	lsls	r2, r2, #13
 8002138:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	193b      	adds	r3, r7, r4
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LORA_INT_GPIO_Port, &GPIO_InitStruct);
 8002140:	193a      	adds	r2, r7, r4
 8002142:	23a0      	movs	r3, #160	@ 0xa0
 8002144:	05db      	lsls	r3, r3, #23
 8002146:	0011      	movs	r1, r2
 8002148:	0018      	movs	r0, r3
 800214a:	f000 fc51 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LORA_CS_Pin|LORA_RST_Pin;
 800214e:	0021      	movs	r1, r4
 8002150:	187b      	adds	r3, r7, r1
 8002152:	2288      	movs	r2, #136	@ 0x88
 8002154:	0052      	lsls	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	000c      	movs	r4, r1
 800215a:	193b      	adds	r3, r7, r4
 800215c:	2201      	movs	r2, #1
 800215e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	193b      	adds	r3, r7, r4
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	193b      	adds	r3, r7, r4
 8002168:	2200      	movs	r2, #0
 800216a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	193a      	adds	r2, r7, r4
 800216e:	23a0      	movs	r3, #160	@ 0xa0
 8002170:	05db      	lsls	r3, r3, #23
 8002172:	0011      	movs	r1, r2
 8002174:	0018      	movs	r0, r3
 8002176:	f000 fc3b 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800217a:	193b      	adds	r3, r7, r4
 800217c:	4a26      	ldr	r2, [pc, #152]	@ (8002218 <MX_GPIO_Init+0x1d0>)
 800217e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002180:	193b      	adds	r3, r7, r4
 8002182:	2203      	movs	r2, #3
 8002184:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	193b      	adds	r3, r7, r4
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	193b      	adds	r3, r7, r4
 800218e:	4a23      	ldr	r2, [pc, #140]	@ (800221c <MX_GPIO_Init+0x1d4>)
 8002190:	0019      	movs	r1, r3
 8002192:	0010      	movs	r0, r2
 8002194:	f000 fc2c 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8002198:	193b      	adds	r3, r7, r4
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	2200      	movs	r2, #0
 80021a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 80021ac:	193a      	adds	r2, r7, r4
 80021ae:	23a0      	movs	r3, #160	@ 0xa0
 80021b0:	05db      	lsls	r3, r3, #23
 80021b2:	0011      	movs	r1, r2
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 fc1b 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_WAKE_Pin;
 80021ba:	0021      	movs	r1, r4
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	2280      	movs	r2, #128	@ 0x80
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	2284      	movs	r2, #132	@ 0x84
 80021c8:	0392      	lsls	r2, r2, #14
 80021ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_WAKE_GPIO_Port, &GPIO_InitStruct);
 80021d2:	187a      	adds	r2, r7, r1
 80021d4:	23a0      	movs	r3, #160	@ 0xa0
 80021d6:	05db      	lsls	r3, r3, #23
 80021d8:	0011      	movs	r1, r2
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 fc08 	bl	80029f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	2006      	movs	r0, #6
 80021e6:	f000 fbb9 	bl	800295c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80021ea:	2006      	movs	r0, #6
 80021ec:	f000 fbd6 	bl	800299c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2007      	movs	r0, #7
 80021f6:	f000 fbb1 	bl	800295c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80021fa:	2007      	movs	r0, #7
 80021fc:	f000 fbce 	bl	800299c <HAL_NVIC_EnableIRQ>

}
 8002200:	46c0      	nop			@ (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b00b      	add	sp, #44	@ 0x2c
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	50000800 	.word	0x50000800
 8002210:	50001400 	.word	0x50001400
 8002214:	00009407 	.word	0x00009407
 8002218:	0000ffff 	.word	0x0000ffff
 800221c:	50000400 	.word	0x50000400

08002220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b08b      	sub	sp, #44	@ 0x2c
 8002224:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002226:	f000 fa50 	bl	80026ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800222a:	f000 f86d 	bl	8002308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222e:	f7ff ff0b 	bl	8002048 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002232:	f000 f91f 	bl	8002474 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	RadioEvents.TxDone = OnTxDone;
 8002236:	4b2d      	ldr	r3, [pc, #180]	@ (80022ec <main+0xcc>)
 8002238:	4a2d      	ldr	r2, [pc, #180]	@ (80022f0 <main+0xd0>)
 800223a:	601a      	str	r2, [r3, #0]
	RadioEvents.RxDone = OnRxDone;
 800223c:	4b2b      	ldr	r3, [pc, #172]	@ (80022ec <main+0xcc>)
 800223e:	4a2d      	ldr	r2, [pc, #180]	@ (80022f4 <main+0xd4>)
 8002240:	609a      	str	r2, [r3, #8]
	SX126xIoInit();
 8002242:	f004 fff1 	bl	8007228 <SX126xIoInit>
	Radio.Init(&RadioEvents);
 8002246:	4b2c      	ldr	r3, [pc, #176]	@ (80022f8 <main+0xd8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a28      	ldr	r2, [pc, #160]	@ (80022ec <main+0xcc>)
 800224c:	0010      	movs	r0, r2
 800224e:	4798      	blx	r3

	Radio.SetChannel(RF_FREQUENCY);
 8002250:	4b29      	ldr	r3, [pc, #164]	@ (80022f8 <main+0xd8>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	4a29      	ldr	r2, [pc, #164]	@ (80022fc <main+0xdc>)
 8002256:	0010      	movs	r0, r2
 8002258:	4798      	blx	r3
	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800225a:	4b27      	ldr	r3, [pc, #156]	@ (80022f8 <main+0xd8>)
 800225c:	6a1c      	ldr	r4, [r3, #32]
 800225e:	2300      	movs	r3, #0
 8002260:	9308      	str	r3, [sp, #32]
 8002262:	2300      	movs	r3, #0
 8002264:	9307      	str	r3, [sp, #28]
 8002266:	2300      	movs	r3, #0
 8002268:	9306      	str	r3, [sp, #24]
 800226a:	2300      	movs	r3, #0
 800226c:	9305      	str	r3, [sp, #20]
 800226e:	2301      	movs	r3, #1
 8002270:	9304      	str	r3, [sp, #16]
 8002272:	2300      	movs	r3, #0
 8002274:	9303      	str	r3, [sp, #12]
 8002276:	2308      	movs	r3, #8
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	2301      	movs	r3, #1
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	2307      	movs	r3, #7
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2300      	movs	r3, #0
 8002284:	2200      	movs	r2, #0
 8002286:	2116      	movs	r1, #22
 8002288:	2001      	movs	r0, #1
 800228a:	47a0      	blx	r4
					  LORA_SPREADING_FACTOR, LORA_CODINGRATE,
					  LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
					  true, 0, 0, LORA_IQ_INVERSION_ON, 0);
	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800228c:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <main+0xd8>)
 800228e:	69dc      	ldr	r4, [r3, #28]
 8002290:	2301      	movs	r3, #1
 8002292:	9309      	str	r3, [sp, #36]	@ 0x24
 8002294:	2300      	movs	r3, #0
 8002296:	9308      	str	r3, [sp, #32]
 8002298:	2300      	movs	r3, #0
 800229a:	9307      	str	r3, [sp, #28]
 800229c:	2300      	movs	r3, #0
 800229e:	9306      	str	r3, [sp, #24]
 80022a0:	2301      	movs	r3, #1
 80022a2:	9305      	str	r3, [sp, #20]
 80022a4:	2300      	movs	r3, #0
 80022a6:	9304      	str	r3, [sp, #16]
 80022a8:	2300      	movs	r3, #0
 80022aa:	9303      	str	r3, [sp, #12]
 80022ac:	2300      	movs	r3, #0
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	2308      	movs	r3, #8
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	2300      	movs	r3, #0
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2301      	movs	r3, #1
 80022ba:	2207      	movs	r2, #7
 80022bc:	2100      	movs	r1, #0
 80022be:	2001      	movs	r0, #1
 80022c0:	47a0      	blx	r4
					  LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
					  LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
					  0, true, 0, 0, LORA_IQ_INVERSION_ON, true);
	Radio.Rx(0);
 80022c2:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <main+0xd8>)
 80022c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c6:	2000      	movs	r0, #0
 80022c8:	4798      	blx	r3
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Radio.BgIrqProcess();
 80022ca:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <main+0xd8>)
 80022cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022ce:	4798      	blx	r3

	  if(act_send == 1){
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <main+0xe0>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d1f8      	bne.n	80022ca <main+0xaa>
		  act_send = 0;
 80022d8:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <main+0xe0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
		  Radio.Send((uint8_t *)"Hello world!", strlen("Hello world!"));
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <main+0xd8>)
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	4a08      	ldr	r2, [pc, #32]	@ (8002304 <main+0xe4>)
 80022e4:	210c      	movs	r1, #12
 80022e6:	0010      	movs	r0, r2
 80022e8:	4798      	blx	r3
	  Radio.BgIrqProcess();
 80022ea:	e7ee      	b.n	80022ca <main+0xaa>
 80022ec:	20000000 	.word	0x20000000
 80022f0:	08002411 	.word	0x08002411
 80022f4:	08002429 	.word	0x08002429
 80022f8:	08007c00 	.word	0x08007c00
 80022fc:	3703dcc0 	.word	0x3703dcc0
 8002300:	200000e0 	.word	0x200000e0
 8002304:	08007a38 	.word	0x08007a38

08002308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b097      	sub	sp, #92	@ 0x5c
 800230c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800230e:	2410      	movs	r4, #16
 8002310:	193b      	adds	r3, r7, r4
 8002312:	0018      	movs	r0, r3
 8002314:	2348      	movs	r3, #72	@ 0x48
 8002316:	001a      	movs	r2, r3
 8002318:	2100      	movs	r1, #0
 800231a:	f005 f9d7 	bl	80076cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800231e:	003b      	movs	r3, r7
 8002320:	0018      	movs	r0, r3
 8002322:	2310      	movs	r3, #16
 8002324:	001a      	movs	r2, r3
 8002326:	2100      	movs	r1, #0
 8002328:	f005 f9d0 	bl	80076cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	0018      	movs	r0, r3
 8002332:	f000 fe1f 	bl	8002f74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002336:	0021      	movs	r1, r4
 8002338:	187b      	adds	r3, r7, r1
 800233a:	2210      	movs	r2, #16
 800233c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2201      	movs	r2, #1
 8002342:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002344:	187b      	adds	r3, r7, r1
 8002346:	2200      	movs	r2, #0
 8002348:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800234a:	187b      	adds	r3, r7, r1
 800234c:	22b0      	movs	r2, #176	@ 0xb0
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002350:	187b      	adds	r3, r7, r1
 8002352:	2200      	movs	r2, #0
 8002354:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002356:	187b      	adds	r3, r7, r1
 8002358:	0018      	movs	r0, r3
 800235a:	f000 fe89 	bl	8003070 <HAL_RCC_OscConfig>
 800235e:	1e03      	subs	r3, r0, #0
 8002360:	d001      	beq.n	8002366 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002362:	f000 f877 	bl	8002454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002366:	003b      	movs	r3, r7
 8002368:	2207      	movs	r2, #7
 800236a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800236c:	003b      	movs	r3, r7
 800236e:	2200      	movs	r2, #0
 8002370:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002372:	003b      	movs	r3, r7
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002378:	003b      	movs	r3, r7
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800237e:	003b      	movs	r3, r7
 8002380:	2101      	movs	r1, #1
 8002382:	0018      	movs	r0, r3
 8002384:	f001 fbf8 	bl	8003b78 <HAL_RCC_ClockConfig>
 8002388:	1e03      	subs	r3, r0, #0
 800238a:	d001      	beq.n	8002390 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800238c:	f000 f862 	bl	8002454 <Error_Handler>
  }
}
 8002390:	46c0      	nop			@ (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b017      	add	sp, #92	@ 0x5c
 8002396:	bd90      	pop	{r4, r7, pc}

08002398 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	0002      	movs	r2, r0
 80023a0:	1dbb      	adds	r3, r7, #6
 80023a2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == LORA_INT_Pin){
 80023a4:	1dbb      	adds	r3, r7, #6
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d101      	bne.n	80023b0 <HAL_GPIO_EXTI_Rising_Callback+0x18>
		extern void RadioOnDioIrq(void);
		RadioOnDioIrq();
 80023ac:	f003 fed8 	bl	8006160 <RadioOnDioIrq>
	}
}
 80023b0:	46c0      	nop			@ (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	0002      	movs	r2, r0
 80023c0:	1dbb      	adds	r3, r7, #6
 80023c2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BTN_WAKE_Pin){
 80023c4:	1dbb      	adds	r3, r7, #6
 80023c6:	881a      	ldrh	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d117      	bne.n	8002400 <HAL_GPIO_EXTI_Falling_Callback+0x48>
		for(uint32_t i=0; i<120000; i++) __NOP(); //10ms
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e003      	b.n	80023de <HAL_GPIO_EXTI_Falling_Callback+0x26>
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3301      	adds	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a09      	ldr	r2, [pc, #36]	@ (8002408 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d9f7      	bls.n	80023d6 <HAL_GPIO_EXTI_Falling_Callback+0x1e>
		if(HAL_GPIO_ReadPin(BTN_WAKE_GPIO_Port, BTN_WAKE_Pin) == GPIO_PIN_RESET){
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	011a      	lsls	r2, r3, #4
 80023ea:	23a0      	movs	r3, #160	@ 0xa0
 80023ec:	05db      	lsls	r3, r3, #23
 80023ee:	0011      	movs	r1, r2
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 fd2f 	bl	8002e54 <HAL_GPIO_ReadPin>
 80023f6:	1e03      	subs	r3, r0, #0
 80023f8:	d102      	bne.n	8002400 <HAL_GPIO_EXTI_Falling_Callback+0x48>
			act_send = 1;
 80023fa:	4b04      	ldr	r3, [pc, #16]	@ (800240c <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002400:	46c0      	nop			@ (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b004      	add	sp, #16
 8002406:	bd80      	pop	{r7, pc}
 8002408:	0001d4bf 	.word	0x0001d4bf
 800240c:	200000e0 	.word	0x200000e0

08002410 <OnTxDone>:

void OnTxDone(void){
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	/// LoRa packet transfer done.
	/// TODO: User operations.
	/// *****
	/// Set Radio to Receive mode after transfer packet done.
	Radio.Rx(0); //[Do not remove this function call]
 8002414:	4b03      	ldr	r3, [pc, #12]	@ (8002424 <OnTxDone+0x14>)
 8002416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002418:	2000      	movs	r0, #0
 800241a:	4798      	blx	r3
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	08007c00 	.word	0x08007c00

08002428 <OnRxDone>:

/**@brief Function to be executed on Radio Rx Done event
 */
void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr){
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	000c      	movs	r4, r1
 8002432:	0010      	movs	r0, r2
 8002434:	0019      	movs	r1, r3
 8002436:	230a      	movs	r3, #10
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	1c22      	adds	r2, r4, #0
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	2308      	movs	r3, #8
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	1c02      	adds	r2, r0, #0
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	1c0a      	adds	r2, r1, #0
 800244a:	701a      	strb	r2, [r3, #0]
	/// payload: Received payload.
	/// size: payload size
	/// rssi: Signal RSSI
	/// snr: Signal SNR
	/// ***************************
}
 800244c:	46c0      	nop			@ (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b005      	add	sp, #20
 8002452:	bd90      	pop	{r4, r7, pc}

08002454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002458:	b672      	cpsid	i
}
 800245a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800245c:	46c0      	nop			@ (mov r8, r8)
 800245e:	e7fd      	b.n	800245c <Error_Handler+0x8>

08002460 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002478:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <MX_SPI1_Init+0x74>)
 800247a:	4a1c      	ldr	r2, [pc, #112]	@ (80024ec <MX_SPI1_Init+0x78>)
 800247c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800247e:	4b1a      	ldr	r3, [pc, #104]	@ (80024e8 <MX_SPI1_Init+0x74>)
 8002480:	2282      	movs	r2, #130	@ 0x82
 8002482:	0052      	lsls	r2, r2, #1
 8002484:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002486:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <MX_SPI1_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800248c:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <MX_SPI1_Init+0x74>)
 800248e:	22e0      	movs	r2, #224	@ 0xe0
 8002490:	00d2      	lsls	r2, r2, #3
 8002492:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002494:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <MX_SPI1_Init+0x74>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800249a:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <MX_SPI1_Init+0x74>)
 800249c:	2200      	movs	r2, #0
 800249e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024a0:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <MX_SPI1_Init+0x74>)
 80024a2:	2280      	movs	r2, #128	@ 0x80
 80024a4:	0092      	lsls	r2, r2, #2
 80024a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80024a8:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <MX_SPI1_Init+0x74>)
 80024aa:	2208      	movs	r2, #8
 80024ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <MX_SPI1_Init+0x74>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <MX_SPI1_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <MX_SPI1_Init+0x74>)
 80024bc:	2200      	movs	r2, #0
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024c0:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <MX_SPI1_Init+0x74>)
 80024c2:	2207      	movs	r2, #7
 80024c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024c6:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <MX_SPI1_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <MX_SPI1_Init+0x74>)
 80024ce:	2208      	movs	r2, #8
 80024d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024d2:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <MX_SPI1_Init+0x74>)
 80024d4:	0018      	movs	r0, r3
 80024d6:	f001 fdf1 	bl	80040bc <HAL_SPI_Init>
 80024da:	1e03      	subs	r3, r0, #0
 80024dc:	d001      	beq.n	80024e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024de:	f7ff ffb9 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200000e4 	.word	0x200000e4
 80024ec:	40013000 	.word	0x40013000

080024f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b08b      	sub	sp, #44	@ 0x2c
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	2414      	movs	r4, #20
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	0018      	movs	r0, r3
 80024fe:	2314      	movs	r3, #20
 8002500:	001a      	movs	r2, r3
 8002502:	2100      	movs	r1, #0
 8002504:	f005 f8e2 	bl	80076cc <memset>
  if(spiHandle->Instance==SPI1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1b      	ldr	r2, [pc, #108]	@ (800257c <HAL_SPI_MspInit+0x8c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d130      	bne.n	8002574 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002512:	4b1b      	ldr	r3, [pc, #108]	@ (8002580 <HAL_SPI_MspInit+0x90>)
 8002514:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002516:	4b1a      	ldr	r3, [pc, #104]	@ (8002580 <HAL_SPI_MspInit+0x90>)
 8002518:	2180      	movs	r1, #128	@ 0x80
 800251a:	0149      	lsls	r1, r1, #5
 800251c:	430a      	orrs	r2, r1
 800251e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002520:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <HAL_SPI_MspInit+0x90>)
 8002522:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	015b      	lsls	r3, r3, #5
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <HAL_SPI_MspInit+0x90>)
 8002530:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002532:	4b13      	ldr	r3, [pc, #76]	@ (8002580 <HAL_SPI_MspInit+0x90>)
 8002534:	2101      	movs	r1, #1
 8002536:	430a      	orrs	r2, r1
 8002538:	64da      	str	r2, [r3, #76]	@ 0x4c
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_SPI_MspInit+0x90>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253e:	2201      	movs	r2, #1
 8002540:	4013      	ands	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002546:	0021      	movs	r1, r4
 8002548:	187b      	adds	r3, r7, r1
 800254a:	22e0      	movs	r2, #224	@ 0xe0
 800254c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	187b      	adds	r3, r7, r1
 8002550:	2202      	movs	r2, #2
 8002552:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	187b      	adds	r3, r7, r1
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	187b      	adds	r3, r7, r1
 800255c:	2200      	movs	r2, #0
 800255e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002560:	187b      	adds	r3, r7, r1
 8002562:	2205      	movs	r2, #5
 8002564:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	187a      	adds	r2, r7, r1
 8002568:	23a0      	movs	r3, #160	@ 0xa0
 800256a:	05db      	lsls	r3, r3, #23
 800256c:	0011      	movs	r1, r2
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fa3e 	bl	80029f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b00b      	add	sp, #44	@ 0x2c
 800257a:	bd90      	pop	{r4, r7, pc}
 800257c:	40013000 	.word	0x40013000
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <HAL_MspInit+0x44>)
 800258c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <HAL_MspInit+0x44>)
 8002590:	2180      	movs	r1, #128	@ 0x80
 8002592:	0549      	lsls	r1, r1, #21
 8002594:	430a      	orrs	r2, r1
 8002596:	659a      	str	r2, [r3, #88]	@ 0x58
 8002598:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <HAL_MspInit+0x44>)
 800259a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	055b      	lsls	r3, r3, #21
 80025a0:	4013      	ands	r3, r2
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <HAL_MspInit+0x44>)
 80025a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025aa:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <HAL_MspInit+0x44>)
 80025ac:	2101      	movs	r1, #1
 80025ae:	430a      	orrs	r2, r1
 80025b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80025b2:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_MspInit+0x44>)
 80025b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b6:	2201      	movs	r2, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025be:	46c0      	nop			@ (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	40021000 	.word	0x40021000

080025cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025d0:	46c0      	nop			@ (mov r8, r8)
 80025d2:	e7fd      	b.n	80025d0 <NMI_Handler+0x4>

080025d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d8:	46c0      	nop			@ (mov r8, r8)
 80025da:	e7fd      	b.n	80025d8 <HardFault_Handler+0x4>

080025dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e0:	46c0      	nop			@ (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f4:	f000 f8ca 	bl	800278c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_INT_Pin);
 8002602:	2008      	movs	r0, #8
 8002604:	f000 fc8c 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002608:	46c0      	nop			@ (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_WAKE_Pin);
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	0018      	movs	r0, r3
 8002618:	f000 fc82 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800261c:	46c0      	nop			@ (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <SystemInit+0x4c>)
 800262a:	2280      	movs	r2, #128	@ 0x80
 800262c:	0512      	lsls	r2, r2, #20
 800262e:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8002630:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <SystemInit+0x50>)
 8002632:	2380      	movs	r3, #128	@ 0x80
 8002634:	58d2      	ldr	r2, [r2, r3]
 8002636:	2380      	movs	r3, #128	@ 0x80
 8002638:	025b      	lsls	r3, r3, #9
 800263a:	401a      	ands	r2, r3
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	025b      	lsls	r3, r3, #9
 8002640:	429a      	cmp	r2, r3
 8002642:	d112      	bne.n	800266a <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <SystemInit+0x50>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	22ff      	movs	r2, #255	@ 0xff
 800264a:	4013      	ands	r3, r2
 800264c:	2bcc      	cmp	r3, #204	@ 0xcc
 800264e:	d00c      	beq.n	800266a <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 8002650:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <SystemInit+0x50>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	22ff      	movs	r2, #255	@ 0xff
 8002656:	4013      	ands	r3, r2
 8002658:	2baa      	cmp	r3, #170	@ 0xaa
 800265a:	d006      	beq.n	800266a <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800265c:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <SystemInit+0x50>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <SystemInit+0x50>)
 8002662:	2180      	movs	r1, #128	@ 0x80
 8002664:	02c9      	lsls	r1, r1, #11
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	e000ed00 	.word	0xe000ed00
 8002674:	40022000 	.word	0x40022000

08002678 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002678:	480d      	ldr	r0, [pc, #52]	@ (80026b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800267a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800267c:	f7ff ffd2 	bl	8002624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002680:	480c      	ldr	r0, [pc, #48]	@ (80026b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002682:	490d      	ldr	r1, [pc, #52]	@ (80026b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002684:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <LoopForever+0xe>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002688:	e002      	b.n	8002690 <LoopCopyDataInit>

0800268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268e:	3304      	adds	r3, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002694:	d3f9      	bcc.n	800268a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002696:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002698:	4c0a      	ldr	r4, [pc, #40]	@ (80026c4 <LoopForever+0x16>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800269c:	e001      	b.n	80026a2 <LoopFillZerobss>

0800269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a0:	3204      	adds	r2, #4

080026a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a4:	d3fb      	bcc.n	800269e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026a6:	f005 f819 	bl	80076dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026aa:	f7ff fdb9 	bl	8002220 <main>

080026ae <LoopForever>:

LoopForever:
  b LoopForever
 80026ae:	e7fe      	b.n	80026ae <LoopForever>
  ldr   r0, =_estack
 80026b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b8:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80026bc:	08007d50 	.word	0x08007d50
  ldr r2, =_sbss
 80026c0:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80026c4:	200002d8 	.word	0x200002d8

080026c8 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC_COMP1_IRQHandler>

080026ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026d0:	1dfb      	adds	r3, r7, #7
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026d6:	2003      	movs	r0, #3
 80026d8:	f000 f80e 	bl	80026f8 <HAL_InitTick>
 80026dc:	1e03      	subs	r3, r0, #0
 80026de:	d003      	beq.n	80026e8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80026e0:	1dfb      	adds	r3, r7, #7
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e001      	b.n	80026ec <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026e8:	f7ff ff4c 	bl	8002584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	781b      	ldrb	r3, [r3, #0]
}
 80026f0:	0018      	movs	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002700:	230f      	movs	r3, #15
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8002708:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <HAL_InitTick+0x88>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d02b      	beq.n	8002768 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002710:	4b1c      	ldr	r3, [pc, #112]	@ (8002784 <HAL_InitTick+0x8c>)
 8002712:	681c      	ldr	r4, [r3, #0]
 8002714:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <HAL_InitTick+0x88>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0019      	movs	r1, r3
 800271a:	23fa      	movs	r3, #250	@ 0xfa
 800271c:	0098      	lsls	r0, r3, #2
 800271e:	f7fd fcf3 	bl	8000108 <__udivsi3>
 8002722:	0003      	movs	r3, r0
 8002724:	0019      	movs	r1, r3
 8002726:	0020      	movs	r0, r4
 8002728:	f7fd fcee 	bl	8000108 <__udivsi3>
 800272c:	0003      	movs	r3, r0
 800272e:	0018      	movs	r0, r3
 8002730:	f000 f950 	bl	80029d4 <HAL_SYSTICK_Config>
 8002734:	1e03      	subs	r3, r0, #0
 8002736:	d112      	bne.n	800275e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d80a      	bhi.n	8002754 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	2301      	movs	r3, #1
 8002742:	425b      	negs	r3, r3
 8002744:	2200      	movs	r2, #0
 8002746:	0018      	movs	r0, r3
 8002748:	f000 f908 	bl	800295c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800274c:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <HAL_InitTick+0x90>)
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e00d      	b.n	8002770 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002754:	230f      	movs	r3, #15
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e008      	b.n	8002770 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800275e:	230f      	movs	r3, #15
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e003      	b.n	8002770 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002768:	230f      	movs	r3, #15
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002770:	230f      	movs	r3, #15
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	781b      	ldrb	r3, [r3, #0]
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b005      	add	sp, #20
 800277c:	bd90      	pop	{r4, r7, pc}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	20000028 	.word	0x20000028
 8002784:	20000020 	.word	0x20000020
 8002788:	20000024 	.word	0x20000024

0800278c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002790:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <HAL_IncTick+0x18>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <HAL_IncTick+0x1c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	18d2      	adds	r2, r2, r3
 800279a:	4b02      	ldr	r3, [pc, #8]	@ (80027a4 <HAL_IncTick+0x18>)
 800279c:	601a      	str	r2, [r3, #0]
}
 800279e:	46c0      	nop			@ (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000148 	.word	0x20000148
 80027a8:	20000028 	.word	0x20000028

080027ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  return uwTick;
 80027b0:	4b02      	ldr	r3, [pc, #8]	@ (80027bc <HAL_GetTick+0x10>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			@ (mov r8, r8)
 80027bc:	20000148 	.word	0x20000148

080027c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff fff0 	bl	80027ac <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3301      	adds	r3, #1
 80027d8:	d004      	beq.n	80027e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80027da:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <HAL_Delay+0x40>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	18d3      	adds	r3, r2, r3
 80027e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027e4:	46c0      	nop			@ (mov r8, r8)
 80027e6:	f7ff ffe1 	bl	80027ac <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d8f7      	bhi.n	80027e6 <HAL_Delay+0x26>
  {
  }
}
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	46c0      	nop			@ (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000028 	.word	0x20000028

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	0002      	movs	r2, r0
 800280c:	1dfb      	adds	r3, r7, #7
 800280e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002810:	1dfb      	adds	r3, r7, #7
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b7f      	cmp	r3, #127	@ 0x7f
 8002816:	d809      	bhi.n	800282c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	001a      	movs	r2, r3
 800281e:	231f      	movs	r3, #31
 8002820:	401a      	ands	r2, r3
 8002822:	4b04      	ldr	r3, [pc, #16]	@ (8002834 <__NVIC_EnableIRQ+0x30>)
 8002824:	2101      	movs	r1, #1
 8002826:	4091      	lsls	r1, r2
 8002828:	000a      	movs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800282c:	46c0      	nop			@ (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}
 8002834:	e000e100 	.word	0xe000e100

08002838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	0002      	movs	r2, r0
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	1dfb      	adds	r3, r7, #7
 8002844:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b7f      	cmp	r3, #127	@ 0x7f
 800284c:	d828      	bhi.n	80028a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800284e:	4a2f      	ldr	r2, [pc, #188]	@ (800290c <__NVIC_SetPriority+0xd4>)
 8002850:	1dfb      	adds	r3, r7, #7
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b25b      	sxtb	r3, r3
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	33c0      	adds	r3, #192	@ 0xc0
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	589b      	ldr	r3, [r3, r2]
 800285e:	1dfa      	adds	r2, r7, #7
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	0011      	movs	r1, r2
 8002864:	2203      	movs	r2, #3
 8002866:	400a      	ands	r2, r1
 8002868:	00d2      	lsls	r2, r2, #3
 800286a:	21ff      	movs	r1, #255	@ 0xff
 800286c:	4091      	lsls	r1, r2
 800286e:	000a      	movs	r2, r1
 8002870:	43d2      	mvns	r2, r2
 8002872:	401a      	ands	r2, r3
 8002874:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	019b      	lsls	r3, r3, #6
 800287a:	22ff      	movs	r2, #255	@ 0xff
 800287c:	401a      	ands	r2, r3
 800287e:	1dfb      	adds	r3, r7, #7
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	0018      	movs	r0, r3
 8002884:	2303      	movs	r3, #3
 8002886:	4003      	ands	r3, r0
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800288c:	481f      	ldr	r0, [pc, #124]	@ (800290c <__NVIC_SetPriority+0xd4>)
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b25b      	sxtb	r3, r3
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	430a      	orrs	r2, r1
 8002898:	33c0      	adds	r3, #192	@ 0xc0
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800289e:	e031      	b.n	8002904 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002910 <__NVIC_SetPriority+0xd8>)
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	0019      	movs	r1, r3
 80028a8:	230f      	movs	r3, #15
 80028aa:	400b      	ands	r3, r1
 80028ac:	3b08      	subs	r3, #8
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3306      	adds	r3, #6
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	18d3      	adds	r3, r2, r3
 80028b6:	3304      	adds	r3, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1dfa      	adds	r2, r7, #7
 80028bc:	7812      	ldrb	r2, [r2, #0]
 80028be:	0011      	movs	r1, r2
 80028c0:	2203      	movs	r2, #3
 80028c2:	400a      	ands	r2, r1
 80028c4:	00d2      	lsls	r2, r2, #3
 80028c6:	21ff      	movs	r1, #255	@ 0xff
 80028c8:	4091      	lsls	r1, r2
 80028ca:	000a      	movs	r2, r1
 80028cc:	43d2      	mvns	r2, r2
 80028ce:	401a      	ands	r2, r3
 80028d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	019b      	lsls	r3, r3, #6
 80028d6:	22ff      	movs	r2, #255	@ 0xff
 80028d8:	401a      	ands	r2, r3
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	0018      	movs	r0, r3
 80028e0:	2303      	movs	r3, #3
 80028e2:	4003      	ands	r3, r0
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028e8:	4809      	ldr	r0, [pc, #36]	@ (8002910 <__NVIC_SetPriority+0xd8>)
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	001c      	movs	r4, r3
 80028f0:	230f      	movs	r3, #15
 80028f2:	4023      	ands	r3, r4
 80028f4:	3b08      	subs	r3, #8
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	430a      	orrs	r2, r1
 80028fa:	3306      	adds	r3, #6
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	18c3      	adds	r3, r0, r3
 8002900:	3304      	adds	r3, #4
 8002902:	601a      	str	r2, [r3, #0]
}
 8002904:	46c0      	nop			@ (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b003      	add	sp, #12
 800290a:	bd90      	pop	{r4, r7, pc}
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1e5a      	subs	r2, r3, #1
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	045b      	lsls	r3, r3, #17
 8002924:	429a      	cmp	r2, r3
 8002926:	d301      	bcc.n	800292c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002928:	2301      	movs	r3, #1
 800292a:	e010      	b.n	800294e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <SysTick_Config+0x44>)
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	3a01      	subs	r2, #1
 8002932:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002934:	2301      	movs	r3, #1
 8002936:	425b      	negs	r3, r3
 8002938:	2103      	movs	r1, #3
 800293a:	0018      	movs	r0, r3
 800293c:	f7ff ff7c 	bl	8002838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002940:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <SysTick_Config+0x44>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002946:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <SysTick_Config+0x44>)
 8002948:	2207      	movs	r2, #7
 800294a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800294c:	2300      	movs	r3, #0
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b002      	add	sp, #8
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	e000e010 	.word	0xe000e010

0800295c <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	230f      	movs	r3, #15
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	1c02      	adds	r2, r0, #0
 800296c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d904      	bls.n	800297e <HAL_NVIC_SetPriority+0x22>
 8002974:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <HAL_NVIC_SetPriority+0x3c>)
 8002976:	2187      	movs	r1, #135	@ 0x87
 8002978:	0018      	movs	r0, r3
 800297a:	f7ff fd71 	bl	8002460 <assert_failed>
  NVIC_SetPriority(IRQn, PreemptPriority);
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	230f      	movs	r3, #15
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b25b      	sxtb	r3, r3
 8002988:	0011      	movs	r1, r2
 800298a:	0018      	movs	r0, r3
 800298c:	f7ff ff54 	bl	8002838 <__NVIC_SetPriority>
}
 8002990:	46c0      	nop			@ (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b004      	add	sp, #16
 8002996:	bd80      	pop	{r7, pc}
 8002998:	08007a48 	.word	0x08007a48

0800299c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	0002      	movs	r2, r0
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80029a8:	1dfb      	adds	r3, r7, #7
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80029ae:	d904      	bls.n	80029ba <HAL_NVIC_EnableIRQ+0x1e>
 80029b0:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <HAL_NVIC_EnableIRQ+0x34>)
 80029b2:	2196      	movs	r1, #150	@ 0x96
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7ff fd53 	bl	8002460 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ba:	1dfb      	adds	r3, r7, #7
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff ff1f 	bl	8002804 <__NVIC_EnableIRQ>
}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	08007a48 	.word	0x08007a48

080029d4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	0018      	movs	r0, r3
 80029e0:	f7ff ff98 	bl	8002914 <SysTick_Config>
 80029e4:	0003      	movs	r3, r0
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	23a0      	movs	r3, #160	@ 0xa0
 8002a02:	05db      	lsls	r3, r3, #23
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d014      	beq.n	8002a32 <HAL_GPIO_Init+0x42>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4acf      	ldr	r2, [pc, #828]	@ (8002d48 <HAL_GPIO_Init+0x358>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d010      	beq.n	8002a32 <HAL_GPIO_Init+0x42>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4ace      	ldr	r2, [pc, #824]	@ (8002d4c <HAL_GPIO_Init+0x35c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00c      	beq.n	8002a32 <HAL_GPIO_Init+0x42>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4acd      	ldr	r2, [pc, #820]	@ (8002d50 <HAL_GPIO_Init+0x360>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d008      	beq.n	8002a32 <HAL_GPIO_Init+0x42>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4acc      	ldr	r2, [pc, #816]	@ (8002d54 <HAL_GPIO_Init+0x364>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d004      	beq.n	8002a32 <HAL_GPIO_Init+0x42>
 8002a28:	4bcb      	ldr	r3, [pc, #812]	@ (8002d58 <HAL_GPIO_Init+0x368>)
 8002a2a:	21a3      	movs	r1, #163	@ 0xa3
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7ff fd17 	bl	8002460 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	041b      	lsls	r3, r3, #16
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	d005      	beq.n	8002a48 <HAL_GPIO_Init+0x58>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	@ 0x80
 8002a42:	025b      	lsls	r3, r3, #9
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d304      	bcc.n	8002a52 <HAL_GPIO_Init+0x62>
 8002a48:	4bc3      	ldr	r3, [pc, #780]	@ (8002d58 <HAL_GPIO_Init+0x368>)
 8002a4a:	21a4      	movs	r1, #164	@ 0xa4
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7ff fd07 	bl	8002460 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d100      	bne.n	8002a5c <HAL_GPIO_Init+0x6c>
 8002a5a:	e1ec      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d100      	bne.n	8002a66 <HAL_GPIO_Init+0x76>
 8002a64:	e1e7      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b11      	cmp	r3, #17
 8002a6c:	d100      	bne.n	8002a70 <HAL_GPIO_Init+0x80>
 8002a6e:	e1e2      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d100      	bne.n	8002a7a <HAL_GPIO_Init+0x8a>
 8002a78:	e1dd      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b12      	cmp	r3, #18
 8002a80:	d100      	bne.n	8002a84 <HAL_GPIO_Init+0x94>
 8002a82:	e1d8      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	2388      	movs	r3, #136	@ 0x88
 8002a8a:	035b      	lsls	r3, r3, #13
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d100      	bne.n	8002a92 <HAL_GPIO_Init+0xa2>
 8002a90:	e1d1      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	2384      	movs	r3, #132	@ 0x84
 8002a98:	039b      	lsls	r3, r3, #14
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d100      	bne.n	8002aa0 <HAL_GPIO_Init+0xb0>
 8002a9e:	e1ca      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	23c4      	movs	r3, #196	@ 0xc4
 8002aa6:	039b      	lsls	r3, r3, #14
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d100      	bne.n	8002aae <HAL_GPIO_Init+0xbe>
 8002aac:	e1c3      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	2390      	movs	r3, #144	@ 0x90
 8002ab4:	035b      	lsls	r3, r3, #13
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d100      	bne.n	8002abc <HAL_GPIO_Init+0xcc>
 8002aba:	e1bc      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	2388      	movs	r3, #136	@ 0x88
 8002ac2:	039b      	lsls	r3, r3, #14
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d100      	bne.n	8002aca <HAL_GPIO_Init+0xda>
 8002ac8:	e1b5      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	23c8      	movs	r3, #200	@ 0xc8
 8002ad0:	039b      	lsls	r3, r3, #14
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d100      	bne.n	8002ad8 <HAL_GPIO_Init+0xe8>
 8002ad6:	e1ae      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d100      	bne.n	8002ae2 <HAL_GPIO_Init+0xf2>
 8002ae0:	e1a9      	b.n	8002e36 <HAL_GPIO_Init+0x446>
 8002ae2:	4b9d      	ldr	r3, [pc, #628]	@ (8002d58 <HAL_GPIO_Init+0x368>)
 8002ae4:	21a5      	movs	r1, #165	@ 0xa5
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7ff fcba 	bl	8002460 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aec:	e1a3      	b.n	8002e36 <HAL_GPIO_Init+0x446>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2101      	movs	r1, #1
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4091      	lsls	r1, r2
 8002af8:	000a      	movs	r2, r1
 8002afa:	4013      	ands	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d100      	bne.n	8002b06 <HAL_GPIO_Init+0x116>
 8002b04:	e194      	b.n	8002e30 <HAL_GPIO_Init+0x440>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d005      	beq.n	8002b1e <HAL_GPIO_Init+0x12e>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2203      	movs	r2, #3
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d145      	bne.n	8002baa <HAL_GPIO_Init+0x1ba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_GPIO_Init+0x158>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d00c      	beq.n	8002b48 <HAL_GPIO_Init+0x158>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d008      	beq.n	8002b48 <HAL_GPIO_Init+0x158>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d004      	beq.n	8002b48 <HAL_GPIO_Init+0x158>
 8002b3e:	4b86      	ldr	r3, [pc, #536]	@ (8002d58 <HAL_GPIO_Init+0x368>)
 8002b40:	21b4      	movs	r1, #180	@ 0xb4
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff fc8c 	bl	8002460 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	409a      	lsls	r2, r3
 8002b56:	0013      	movs	r3, r2
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	0013      	movs	r3, r2
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b7e:	2201      	movs	r2, #1
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	409a      	lsls	r2, r3
 8002b84:	0013      	movs	r3, r2
 8002b86:	43da      	mvns	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	2201      	movs	r2, #1
 8002b96:	401a      	ands	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	0013      	movs	r3, r2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d028      	beq.n	8002c08 <HAL_GPIO_Init+0x218>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_GPIO_Init+0x1e8>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d008      	beq.n	8002bd8 <HAL_GPIO_Init+0x1e8>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_GPIO_Init+0x1e8>
 8002bce:	4b62      	ldr	r3, [pc, #392]	@ (8002d58 <HAL_GPIO_Init+0x368>)
 8002bd0:	21c6      	movs	r1, #198	@ 0xc6
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f7ff fc44 	bl	8002460 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2203      	movs	r2, #3
 8002be4:	409a      	lsls	r2, r3
 8002be6:	0013      	movs	r3, r2
 8002be8:	43da      	mvns	r2, r3
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	0013      	movs	r3, r2
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d146      	bne.n	8002ca2 <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	23a0      	movs	r3, #160	@ 0xa0
 8002c18:	05db      	lsls	r3, r3, #23
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d014      	beq.n	8002c48 <HAL_GPIO_Init+0x258>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a49      	ldr	r2, [pc, #292]	@ (8002d48 <HAL_GPIO_Init+0x358>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d010      	beq.n	8002c48 <HAL_GPIO_Init+0x258>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a48      	ldr	r2, [pc, #288]	@ (8002d4c <HAL_GPIO_Init+0x35c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00c      	beq.n	8002c48 <HAL_GPIO_Init+0x258>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a47      	ldr	r2, [pc, #284]	@ (8002d50 <HAL_GPIO_Init+0x360>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d008      	beq.n	8002c48 <HAL_GPIO_Init+0x258>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a46      	ldr	r2, [pc, #280]	@ (8002d54 <HAL_GPIO_Init+0x364>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_GPIO_Init+0x258>
 8002c3e:	4b46      	ldr	r3, [pc, #280]	@ (8002d58 <HAL_GPIO_Init+0x368>)
 8002c40:	21d3      	movs	r1, #211	@ 0xd3
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff fc0c 	bl	8002460 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	d904      	bls.n	8002c5a <HAL_GPIO_Init+0x26a>
 8002c50:	4b41      	ldr	r3, [pc, #260]	@ (8002d58 <HAL_GPIO_Init+0x368>)
 8002c52:	21d4      	movs	r1, #212	@ 0xd4
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7ff fc03 	bl	8002460 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	0092      	lsls	r2, r2, #2
 8002c64:	58d3      	ldr	r3, [r2, r3]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	409a      	lsls	r2, r3
 8002c74:	0013      	movs	r3, r2
 8002c76:	43da      	mvns	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2107      	movs	r1, #7
 8002c86:	400b      	ands	r3, r1
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	0013      	movs	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	08da      	lsrs	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3208      	adds	r2, #8
 8002c9c:	0092      	lsls	r2, r2, #2
 8002c9e:	6939      	ldr	r1, [r7, #16]
 8002ca0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	0013      	movs	r3, r2
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	0013      	movs	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	23c0      	movs	r3, #192	@ 0xc0
 8002cdc:	029b      	lsls	r3, r3, #10
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d100      	bne.n	8002ce4 <HAL_GPIO_Init+0x2f4>
 8002ce2:	e0a5      	b.n	8002e30 <HAL_GPIO_Init+0x440>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d5c <HAL_GPIO_Init+0x36c>)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3318      	adds	r3, #24
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	589b      	ldr	r3, [r3, r2]
 8002cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	0013      	movs	r3, r2
 8002d00:	43da      	mvns	r2, r3
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	23a0      	movs	r3, #160	@ 0xa0
 8002d0c:	05db      	lsls	r3, r3, #23
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d026      	beq.n	8002d60 <HAL_GPIO_Init+0x370>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a0c      	ldr	r2, [pc, #48]	@ (8002d48 <HAL_GPIO_Init+0x358>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0x352>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d4c <HAL_GPIO_Init+0x35c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00d      	beq.n	8002d3e <HAL_GPIO_Init+0x34e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a0a      	ldr	r2, [pc, #40]	@ (8002d50 <HAL_GPIO_Init+0x360>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <HAL_GPIO_Init+0x34a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a09      	ldr	r2, [pc, #36]	@ (8002d54 <HAL_GPIO_Init+0x364>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_GPIO_Init+0x346>
 8002d32:	2305      	movs	r3, #5
 8002d34:	e015      	b.n	8002d62 <HAL_GPIO_Init+0x372>
 8002d36:	2306      	movs	r3, #6
 8002d38:	e013      	b.n	8002d62 <HAL_GPIO_Init+0x372>
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e011      	b.n	8002d62 <HAL_GPIO_Init+0x372>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e00f      	b.n	8002d62 <HAL_GPIO_Init+0x372>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00d      	b.n	8002d62 <HAL_GPIO_Init+0x372>
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	50000400 	.word	0x50000400
 8002d4c:	50000800 	.word	0x50000800
 8002d50:	50000c00 	.word	0x50000c00
 8002d54:	50001400 	.word	0x50001400
 8002d58:	08007a84 	.word	0x08007a84
 8002d5c:	40021800 	.word	0x40021800
 8002d60:	2300      	movs	r3, #0
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	2103      	movs	r1, #3
 8002d66:	400a      	ands	r2, r1
 8002d68:	00d2      	lsls	r2, r2, #3
 8002d6a:	4093      	lsls	r3, r2
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d72:	4937      	ldr	r1, [pc, #220]	@ (8002e50 <HAL_GPIO_Init+0x460>)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	3318      	adds	r3, #24
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d80:	4b33      	ldr	r3, [pc, #204]	@ (8002e50 <HAL_GPIO_Init+0x460>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	035b      	lsls	r3, r3, #13
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x3b4>
        {
          temp |= iocurrent;
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002da4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e50 <HAL_GPIO_Init+0x460>)
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002daa:	4b29      	ldr	r3, [pc, #164]	@ (8002e50 <HAL_GPIO_Init+0x460>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	43da      	mvns	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	2380      	movs	r3, #128	@ 0x80
 8002dc0:	039b      	lsls	r3, r3, #14
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x3de>
        {
          temp |= iocurrent;
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dce:	4b20      	ldr	r3, [pc, #128]	@ (8002e50 <HAL_GPIO_Init+0x460>)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e50 <HAL_GPIO_Init+0x460>)
 8002dd6:	2384      	movs	r3, #132	@ 0x84
 8002dd8:	58d3      	ldr	r3, [r2, r3]
 8002dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	43da      	mvns	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	029b      	lsls	r3, r3, #10
 8002dee:	4013      	ands	r3, r2
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x40a>
        {
          temp |= iocurrent;
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dfa:	4915      	ldr	r1, [pc, #84]	@ (8002e50 <HAL_GPIO_Init+0x460>)
 8002dfc:	2284      	movs	r2, #132	@ 0x84
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002e02:	4a13      	ldr	r2, [pc, #76]	@ (8002e50 <HAL_GPIO_Init+0x460>)
 8002e04:	2380      	movs	r3, #128	@ 0x80
 8002e06:	58d3      	ldr	r3, [r2, r3]
 8002e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	43da      	mvns	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	2380      	movs	r3, #128	@ 0x80
 8002e1a:	025b      	lsls	r3, r3, #9
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e28:	4909      	ldr	r1, [pc, #36]	@ (8002e50 <HAL_GPIO_Init+0x460>)
 8002e2a:	2280      	movs	r2, #128	@ 0x80
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	3301      	adds	r3, #1
 8002e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	40da      	lsrs	r2, r3
 8002e3e:	1e13      	subs	r3, r2, #0
 8002e40:	d000      	beq.n	8002e44 <HAL_GPIO_Init+0x454>
 8002e42:	e654      	b.n	8002aee <HAL_GPIO_Init+0xfe>
  }
}
 8002e44:	46c0      	nop			@ (mov r8, r8)
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b006      	add	sp, #24
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	40021800 	.word	0x40021800

08002e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	000a      	movs	r2, r1
 8002e5e:	1cbb      	adds	r3, r7, #2
 8002e60:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e62:	1cbb      	adds	r3, r7, #2
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d107      	bne.n	8002e7a <HAL_GPIO_ReadPin+0x26>
 8002e6a:	2372      	movs	r3, #114	@ 0x72
 8002e6c:	33ff      	adds	r3, #255	@ 0xff
 8002e6e:	001a      	movs	r2, r3
 8002e70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_GPIO_ReadPin+0x54>)
 8002e72:	0011      	movs	r1, r2
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7ff faf3 	bl	8002460 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	1cba      	adds	r2, r7, #2
 8002e80:	8812      	ldrh	r2, [r2, #0]
 8002e82:	4013      	ands	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_GPIO_ReadPin+0x3c>
  {
    bitstatus = GPIO_PIN_SET;
 8002e86:	230f      	movs	r3, #15
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e003      	b.n	8002e98 <HAL_GPIO_ReadPin+0x44>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e90:	230f      	movs	r3, #15
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002e98:	230f      	movs	r3, #15
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	781b      	ldrb	r3, [r3, #0]
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b004      	add	sp, #16
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	08007a84 	.word	0x08007a84

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	0008      	movs	r0, r1
 8002eb6:	0011      	movs	r1, r2
 8002eb8:	1cbb      	adds	r3, r7, #2
 8002eba:	1c02      	adds	r2, r0, #0
 8002ebc:	801a      	strh	r2, [r3, #0]
 8002ebe:	1c7b      	adds	r3, r7, #1
 8002ec0:	1c0a      	adds	r2, r1, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ec4:	1cbb      	adds	r3, r7, #2
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <HAL_GPIO_WritePin+0x30>
 8002ecc:	2392      	movs	r3, #146	@ 0x92
 8002ece:	33ff      	adds	r3, #255	@ 0xff
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <HAL_GPIO_WritePin+0x70>)
 8002ed4:	0011      	movs	r1, r2
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff fac2 	bl	8002460 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002edc:	1c7b      	adds	r3, r7, #1
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_GPIO_WritePin+0x4e>
 8002ee4:	1c7b      	adds	r3, r7, #1
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d006      	beq.n	8002efa <HAL_GPIO_WritePin+0x4e>
 8002eec:	23c9      	movs	r3, #201	@ 0xc9
 8002eee:	005a      	lsls	r2, r3, #1
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <HAL_GPIO_WritePin+0x70>)
 8002ef2:	0011      	movs	r1, r2
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7ff fab3 	bl	8002460 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002efa:	1c7b      	adds	r3, r7, #1
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <HAL_GPIO_WritePin+0x60>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f02:	1cbb      	adds	r3, r7, #2
 8002f04:	881a      	ldrh	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f0a:	e003      	b.n	8002f14 <HAL_GPIO_WritePin+0x68>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f0c:	1cbb      	adds	r3, r7, #2
 8002f0e:	881a      	ldrh	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	08007a84 	.word	0x08007a84

08002f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	0002      	movs	r2, r0
 8002f28:	1dbb      	adds	r3, r7, #6
 8002f2a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002f2c:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	1dba      	adds	r2, r7, #6
 8002f32:	8812      	ldrh	r2, [r2, #0]
 8002f34:	4013      	ands	r3, r2
 8002f36:	d008      	beq.n	8002f4a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002f38:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002f3a:	1dba      	adds	r2, r7, #6
 8002f3c:	8812      	ldrh	r2, [r2, #0]
 8002f3e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002f40:	1dbb      	adds	r3, r7, #6
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff fa27 	bl	8002398 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002f4a:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	1dba      	adds	r2, r7, #6
 8002f50:	8812      	ldrh	r2, [r2, #0]
 8002f52:	4013      	ands	r3, r2
 8002f54:	d008      	beq.n	8002f68 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002f56:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002f58:	1dba      	adds	r2, r7, #6
 8002f5a:	8812      	ldrh	r2, [r2, #0]
 8002f5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002f5e:	1dbb      	adds	r3, r7, #6
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7ff fa28 	bl	80023b8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002f68:	46c0      	nop			@ (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b002      	add	sp, #8
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021800 	.word	0x40021800

08002f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	2380      	movs	r3, #128	@ 0x80
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d009      	beq.n	8002f9a <HAL_PWREx_ControlVoltageScaling+0x26>
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	2380      	movs	r3, #128	@ 0x80
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d004      	beq.n	8002f9a <HAL_PWREx_ControlVoltageScaling+0x26>
 8002f90:	4b2c      	ldr	r3, [pc, #176]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xd0>)
 8002f92:	21c3      	movs	r1, #195	@ 0xc3
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7ff fa63 	bl	8002460 <assert_failed>

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	2380      	movs	r3, #128	@ 0x80
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d137      	bne.n	8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fa4:	4b28      	ldr	r3, [pc, #160]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	23c0      	movs	r3, #192	@ 0xc0
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	401a      	ands	r2, r3
 8002fae:	2380      	movs	r3, #128	@ 0x80
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d040      	beq.n	8003038 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb6:	4b24      	ldr	r3, [pc, #144]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a24      	ldr	r2, [pc, #144]	@ (800304c <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8002fbc:	401a      	ands	r2, r3
 8002fbe:	4b22      	ldr	r3, [pc, #136]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8002fc0:	2180      	movs	r1, #128	@ 0x80
 8002fc2:	0089      	lsls	r1, r1, #2
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fc8:	4b21      	ldr	r3, [pc, #132]	@ (8003050 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2232      	movs	r2, #50	@ 0x32
 8002fce:	4353      	muls	r3, r2
 8002fd0:	4920      	ldr	r1, [pc, #128]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7fd f898 	bl	8000108 <__udivsi3>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fde:	e002      	b.n	8002fe6 <HAL_PWREx_ControlVoltageScaling+0x72>
      {
        wait_loop_index--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe6:	4b18      	ldr	r3, [pc, #96]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	2380      	movs	r3, #128	@ 0x80
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	2380      	movs	r3, #128	@ 0x80
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d102      	bne.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0x8a>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x6c>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ffe:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	401a      	ands	r2, r3
 8003008:	2380      	movs	r3, #128	@ 0x80
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	429a      	cmp	r2, r3
 800300e:	d113      	bne.n	8003038 <HAL_PWREx_ControlVoltageScaling+0xc4>
      {
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e012      	b.n	800303a <HAL_PWREx_ControlVoltageScaling+0xc6>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003014:	4b0c      	ldr	r3, [pc, #48]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	23c0      	movs	r3, #192	@ 0xc0
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	401a      	ands	r2, r3
 800301e:	2380      	movs	r3, #128	@ 0x80
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	429a      	cmp	r2, r3
 8003024:	d008      	beq.n	8003038 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003026:	4b08      	ldr	r3, [pc, #32]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a08      	ldr	r2, [pc, #32]	@ (800304c <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800302c:	401a      	ands	r2, r3
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8003030:	2180      	movs	r1, #128	@ 0x80
 8003032:	00c9      	lsls	r1, r1, #3
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	08007ac0 	.word	0x08007ac0
 8003048:	40007000 	.word	0x40007000
 800304c:	fffff9ff 	.word	0xfffff9ff
 8003050:	20000020 	.word	0x20000020
 8003054:	000f4240 	.word	0x000f4240

08003058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800305c:	4b03      	ldr	r3, [pc, #12]	@ (800306c <HAL_PWREx_GetVoltageRange+0x14>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	23c0      	movs	r3, #192	@ 0xc0
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4013      	ands	r3, r2
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40007000 	.word	0x40007000

08003070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003070:	b5b0      	push	{r4, r5, r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_RCC_OscConfig+0x1e>
 800307e:	234e      	movs	r3, #78	@ 0x4e
 8003080:	33ff      	adds	r3, #255	@ 0xff
 8003082:	001a      	movs	r2, r3
 8003084:	4bbd      	ldr	r3, [pc, #756]	@ (800337c <HAL_RCC_OscConfig+0x30c>)
 8003086:	0011      	movs	r1, r2
 8003088:	0018      	movs	r0, r3
 800308a:	f7ff f9e9 	bl	8002460 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01f      	beq.n	80030d6 <HAL_RCC_OscConfig+0x66>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	4013      	ands	r3, r2
 800309e:	d11a      	bne.n	80030d6 <HAL_RCC_OscConfig+0x66>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2202      	movs	r2, #2
 80030a6:	4013      	ands	r3, r2
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_OscConfig+0x66>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2210      	movs	r2, #16
 80030b0:	4013      	ands	r3, r2
 80030b2:	d110      	bne.n	80030d6 <HAL_RCC_OscConfig+0x66>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2208      	movs	r2, #8
 80030ba:	4013      	ands	r3, r2
 80030bc:	d10b      	bne.n	80030d6 <HAL_RCC_OscConfig+0x66>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2204      	movs	r2, #4
 80030c4:	4013      	ands	r3, r2
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x66>
 80030c8:	23a7      	movs	r3, #167	@ 0xa7
 80030ca:	005a      	lsls	r2, r3, #1
 80030cc:	4bab      	ldr	r3, [pc, #684]	@ (800337c <HAL_RCC_OscConfig+0x30c>)
 80030ce:	0011      	movs	r1, r2
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff f9c5 	bl	8002460 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d6:	4baa      	ldr	r3, [pc, #680]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2238      	movs	r2, #56	@ 0x38
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e0:	4ba7      	ldr	r3, [pc, #668]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2203      	movs	r2, #3
 80030e6:	4013      	ands	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2210      	movs	r2, #16
 80030f0:	4013      	ands	r3, r2
 80030f2:	d100      	bne.n	80030f6 <HAL_RCC_OscConfig+0x86>
 80030f4:	e14f      	b.n	8003396 <HAL_RCC_OscConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RCC_OscConfig+0xa6>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d007      	beq.n	8003116 <HAL_RCC_OscConfig+0xa6>
 8003106:	2358      	movs	r3, #88	@ 0x58
 8003108:	33ff      	adds	r3, #255	@ 0xff
 800310a:	001a      	movs	r2, r3
 800310c:	4b9b      	ldr	r3, [pc, #620]	@ (800337c <HAL_RCC_OscConfig+0x30c>)
 800310e:	0011      	movs	r1, r2
 8003110:	0018      	movs	r0, r3
 8003112:	f7ff f9a5 	bl	8002460 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	2bff      	cmp	r3, #255	@ 0xff
 800311c:	d906      	bls.n	800312c <HAL_RCC_OscConfig+0xbc>
 800311e:	23ac      	movs	r3, #172	@ 0xac
 8003120:	005a      	lsls	r2, r3, #1
 8003122:	4b96      	ldr	r3, [pc, #600]	@ (800337c <HAL_RCC_OscConfig+0x30c>)
 8003124:	0011      	movs	r1, r2
 8003126:	0018      	movs	r0, r3
 8003128:	f7ff f99a 	bl	8002460 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d033      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	2b10      	cmp	r3, #16
 800313a:	d02f      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	2b20      	cmp	r3, #32
 8003142:	d02b      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	2b30      	cmp	r3, #48	@ 0x30
 800314a:	d027      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	2b40      	cmp	r3, #64	@ 0x40
 8003152:	d023      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	2b50      	cmp	r3, #80	@ 0x50
 800315a:	d01f      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	2b60      	cmp	r3, #96	@ 0x60
 8003162:	d01b      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	2b70      	cmp	r3, #112	@ 0x70
 800316a:	d017      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	2b80      	cmp	r3, #128	@ 0x80
 8003172:	d013      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	2b90      	cmp	r3, #144	@ 0x90
 800317a:	d00f      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	2ba0      	cmp	r3, #160	@ 0xa0
 8003182:	d00b      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	2bb0      	cmp	r3, #176	@ 0xb0
 800318a:	d007      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 800318c:	235a      	movs	r3, #90	@ 0x5a
 800318e:	33ff      	adds	r3, #255	@ 0xff
 8003190:	001a      	movs	r2, r3
 8003192:	4b7a      	ldr	r3, [pc, #488]	@ (800337c <HAL_RCC_OscConfig+0x30c>)
 8003194:	0011      	movs	r1, r2
 8003196:	0018      	movs	r0, r3
 8003198:	f7ff f962 	bl	8002460 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_RCC_OscConfig+0x142>
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b18      	cmp	r3, #24
 80031a6:	d000      	beq.n	80031aa <HAL_RCC_OscConfig+0x13a>
 80031a8:	e093      	b.n	80032d2 <HAL_RCC_OscConfig+0x262>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d000      	beq.n	80031b2 <HAL_RCC_OscConfig+0x142>
 80031b0:	e08f      	b.n	80032d2 <HAL_RCC_OscConfig+0x262>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031b2:	4b73      	ldr	r3, [pc, #460]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2202      	movs	r2, #2
 80031b8:	4013      	ands	r3, r2
 80031ba:	d006      	beq.n	80031ca <HAL_RCC_OscConfig+0x15a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <HAL_RCC_OscConfig+0x15a>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f000 fcbf 	bl	8003b48 <HAL_RCC_OscConfig+0xad8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2108      	movs	r1, #8
 80031d4:	400b      	ands	r3, r1
 80031d6:	d004      	beq.n	80031e2 <HAL_RCC_OscConfig+0x172>
 80031d8:	4b69      	ldr	r3, [pc, #420]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	21f0      	movs	r1, #240	@ 0xf0
 80031de:	400b      	ands	r3, r1
 80031e0:	e005      	b.n	80031ee <HAL_RCC_OscConfig+0x17e>
 80031e2:	4967      	ldr	r1, [pc, #412]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 80031e4:	2394      	movs	r3, #148	@ 0x94
 80031e6:	58cb      	ldr	r3, [r1, r3]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	21f0      	movs	r1, #240	@ 0xf0
 80031ec:	400b      	ands	r3, r1
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d225      	bcs.n	800323e <HAL_RCC_OscConfig+0x1ce>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 fef4 	bl	8003fe4 <RCC_SetFlashLatencyFromMSIRange>
 80031fc:	1e03      	subs	r3, r0, #0
 80031fe:	d002      	beq.n	8003206 <HAL_RCC_OscConfig+0x196>
          {
            return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	f000 fca1 	bl	8003b48 <HAL_RCC_OscConfig+0xad8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003206:	4b5e      	ldr	r3, [pc, #376]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b5d      	ldr	r3, [pc, #372]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 800320c:	2108      	movs	r1, #8
 800320e:	430a      	orrs	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	4b5b      	ldr	r3, [pc, #364]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	22f0      	movs	r2, #240	@ 0xf0
 8003218:	4393      	bics	r3, r2
 800321a:	0019      	movs	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003220:	4b57      	ldr	r3, [pc, #348]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003222:	430a      	orrs	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003226:	4b56      	ldr	r3, [pc, #344]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4a56      	ldr	r2, [pc, #344]	@ (8003384 <HAL_RCC_OscConfig+0x314>)
 800322c:	4013      	ands	r3, r2
 800322e:	0019      	movs	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	021a      	lsls	r2, r3, #8
 8003236:	4b52      	ldr	r3, [pc, #328]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	e027      	b.n	800328e <HAL_RCC_OscConfig+0x21e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800323e:	4b50      	ldr	r3, [pc, #320]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b4f      	ldr	r3, [pc, #316]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003244:	2108      	movs	r1, #8
 8003246:	430a      	orrs	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	4b4d      	ldr	r3, [pc, #308]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	22f0      	movs	r2, #240	@ 0xf0
 8003250:	4393      	bics	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003258:	4b49      	ldr	r3, [pc, #292]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325e:	4b48      	ldr	r3, [pc, #288]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a48      	ldr	r2, [pc, #288]	@ (8003384 <HAL_RCC_OscConfig+0x314>)
 8003264:	4013      	ands	r3, r2
 8003266:	0019      	movs	r1, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	021a      	lsls	r2, r3, #8
 800326e:	4b44      	ldr	r3, [pc, #272]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_RCC_OscConfig+0x21e>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	0018      	movs	r0, r3
 8003280:	f000 feb0 	bl	8003fe4 <RCC_SetFlashLatencyFromMSIRange>
 8003284:	1e03      	subs	r3, r0, #0
 8003286:	d002      	beq.n	800328e <HAL_RCC_OscConfig+0x21e>
            {
              return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f000 fc5d 	bl	8003b48 <HAL_RCC_OscConfig+0xad8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800328e:	f000 fe0d 	bl	8003eac <HAL_RCC_GetSysClockFreq>
 8003292:	0001      	movs	r1, r0
 8003294:	4b3a      	ldr	r3, [pc, #232]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003296:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	220f      	movs	r2, #15
 800329c:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800329e:	4a3a      	ldr	r2, [pc, #232]	@ (8003388 <HAL_RCC_OscConfig+0x318>)
 80032a0:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032a2:	001a      	movs	r2, r3
 80032a4:	231f      	movs	r3, #31
 80032a6:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80032a8:	000a      	movs	r2, r1
 80032aa:	40da      	lsrs	r2, r3
 80032ac:	4b37      	ldr	r3, [pc, #220]	@ (800338c <HAL_RCC_OscConfig+0x31c>)
 80032ae:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032b0:	4b37      	ldr	r3, [pc, #220]	@ (8003390 <HAL_RCC_OscConfig+0x320>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	250f      	movs	r5, #15
 80032b6:	197c      	adds	r4, r7, r5
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7ff fa1d 	bl	80026f8 <HAL_InitTick>
 80032be:	0003      	movs	r3, r0
 80032c0:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 80032c2:	197b      	adds	r3, r7, r5
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d064      	beq.n	8003394 <HAL_RCC_OscConfig+0x324>
        {
          return status;
 80032ca:	197b      	adds	r3, r7, r5
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	f000 fc3b 	bl	8003b48 <HAL_RCC_OscConfig+0xad8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d035      	beq.n	8003346 <HAL_RCC_OscConfig+0x2d6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032da:	4b29      	ldr	r3, [pc, #164]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b28      	ldr	r3, [pc, #160]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 80032e0:	2101      	movs	r1, #1
 80032e2:	430a      	orrs	r2, r1
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e6:	f7ff fa61 	bl	80027ac <HAL_GetTick>
 80032ea:	0003      	movs	r3, r0
 80032ec:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ee:	e009      	b.n	8003304 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80032f0:	f7ff fa5c 	bl	80027ac <HAL_GetTick>
 80032f4:	0002      	movs	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d902      	bls.n	8003304 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	f000 fc22 	bl	8003b48 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003304:	4b1e      	ldr	r3, [pc, #120]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2202      	movs	r2, #2
 800330a:	4013      	ands	r3, r2
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x280>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330e:	4b1c      	ldr	r3, [pc, #112]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b1b      	ldr	r3, [pc, #108]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003314:	2108      	movs	r1, #8
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	4b19      	ldr	r3, [pc, #100]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	22f0      	movs	r2, #240	@ 0xf0
 8003320:	4393      	bics	r3, r2
 8003322:	0019      	movs	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003328:	4b15      	ldr	r3, [pc, #84]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 800332a:	430a      	orrs	r2, r1
 800332c:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800332e:	4b14      	ldr	r3, [pc, #80]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4a14      	ldr	r2, [pc, #80]	@ (8003384 <HAL_RCC_OscConfig+0x314>)
 8003334:	4013      	ands	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	021a      	lsls	r2, r3, #8
 800333e:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	e027      	b.n	8003396 <HAL_RCC_OscConfig+0x326>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003346:	4b0e      	ldr	r3, [pc, #56]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b0d      	ldr	r3, [pc, #52]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 800334c:	2101      	movs	r1, #1
 800334e:	438a      	bics	r2, r1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003352:	f7ff fa2b 	bl	80027ac <HAL_GetTick>
 8003356:	0003      	movs	r3, r0
 8003358:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800335a:	e009      	b.n	8003370 <HAL_RCC_OscConfig+0x300>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 800335c:	f7ff fa26 	bl	80027ac <HAL_GetTick>
 8003360:	0002      	movs	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d902      	bls.n	8003370 <HAL_RCC_OscConfig+0x300>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	f000 fbec 	bl	8003b48 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003370:	4b03      	ldr	r3, [pc, #12]	@ (8003380 <HAL_RCC_OscConfig+0x310>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2202      	movs	r2, #2
 8003376:	4013      	ands	r3, r2
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x2ec>
 800337a:	e00c      	b.n	8003396 <HAL_RCC_OscConfig+0x326>
 800337c:	08007afc 	.word	0x08007afc
 8003380:	40021000 	.word	0x40021000
 8003384:	ffff00ff 	.word	0xffff00ff
 8003388:	08007bc0 	.word	0x08007bc0
 800338c:	20000020 	.word	0x20000020
 8003390:	20000024 	.word	0x20000024
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003394:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2201      	movs	r2, #1
 800339c:	4013      	ands	r3, r2
 800339e:	d100      	bne.n	80033a2 <HAL_RCC_OscConfig+0x332>
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d012      	beq.n	80033d0 <HAL_RCC_OscConfig+0x360>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	2380      	movs	r3, #128	@ 0x80
 80033b0:	025b      	lsls	r3, r3, #9
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d00c      	beq.n	80033d0 <HAL_RCC_OscConfig+0x360>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	23a0      	movs	r3, #160	@ 0xa0
 80033bc:	02db      	lsls	r3, r3, #11
 80033be:	429a      	cmp	r2, r3
 80033c0:	d006      	beq.n	80033d0 <HAL_RCC_OscConfig+0x360>
 80033c2:	23e3      	movs	r3, #227	@ 0xe3
 80033c4:	005a      	lsls	r2, r3, #1
 80033c6:	4bb2      	ldr	r3, [pc, #712]	@ (8003690 <HAL_RCC_OscConfig+0x620>)
 80033c8:	0011      	movs	r1, r2
 80033ca:	0018      	movs	r0, r3
 80033cc:	f7ff f848 	bl	8002460 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d005      	beq.n	80033e2 <HAL_RCC_OscConfig+0x372>
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b18      	cmp	r3, #24
 80033da:	d10f      	bne.n	80033fc <HAL_RCC_OscConfig+0x38c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x38c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e2:	4bac      	ldr	r3, [pc, #688]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	029b      	lsls	r3, r3, #10
 80033ea:	4013      	ands	r3, r2
 80033ec:	d058      	beq.n	80034a0 <HAL_RCC_OscConfig+0x430>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d154      	bne.n	80034a0 <HAL_RCC_OscConfig+0x430>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f000 fba6 	bl	8003b48 <HAL_RCC_OscConfig+0xad8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	2380      	movs	r3, #128	@ 0x80
 8003402:	025b      	lsls	r3, r3, #9
 8003404:	429a      	cmp	r2, r3
 8003406:	d107      	bne.n	8003418 <HAL_RCC_OscConfig+0x3a8>
 8003408:	4ba2      	ldr	r3, [pc, #648]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4ba1      	ldr	r3, [pc, #644]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 800340e:	2180      	movs	r1, #128	@ 0x80
 8003410:	0249      	lsls	r1, r1, #9
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e013      	b.n	8003440 <HAL_RCC_OscConfig+0x3d0>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	23a0      	movs	r3, #160	@ 0xa0
 800341e:	02db      	lsls	r3, r3, #11
 8003420:	429a      	cmp	r2, r3
 8003422:	d107      	bne.n	8003434 <HAL_RCC_OscConfig+0x3c4>
 8003424:	4b9b      	ldr	r3, [pc, #620]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b9a      	ldr	r3, [pc, #616]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 800342a:	21a0      	movs	r1, #160	@ 0xa0
 800342c:	02c9      	lsls	r1, r1, #11
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e005      	b.n	8003440 <HAL_RCC_OscConfig+0x3d0>
 8003434:	4b97      	ldr	r3, [pc, #604]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b96      	ldr	r3, [pc, #600]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 800343a:	4997      	ldr	r1, [pc, #604]	@ (8003698 <HAL_RCC_OscConfig+0x628>)
 800343c:	400a      	ands	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <HAL_RCC_OscConfig+0x404>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7ff f9b0 	bl	80027ac <HAL_GetTick>
 800344c:	0003      	movs	r3, r0
 800344e:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003450:	e009      	b.n	8003466 <HAL_RCC_OscConfig+0x3f6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003452:	f7ff f9ab 	bl	80027ac <HAL_GetTick>
 8003456:	0002      	movs	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b64      	cmp	r3, #100	@ 0x64
 800345e:	d902      	bls.n	8003466 <HAL_RCC_OscConfig+0x3f6>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	f000 fb71 	bl	8003b48 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003466:	4b8b      	ldr	r3, [pc, #556]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	2380      	movs	r3, #128	@ 0x80
 800346c:	029b      	lsls	r3, r3, #10
 800346e:	4013      	ands	r3, r2
 8003470:	d0ef      	beq.n	8003452 <HAL_RCC_OscConfig+0x3e2>
 8003472:	e016      	b.n	80034a2 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7ff f99a 	bl	80027ac <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800347c:	e009      	b.n	8003492 <HAL_RCC_OscConfig+0x422>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800347e:	f7ff f995 	bl	80027ac <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b64      	cmp	r3, #100	@ 0x64
 800348a:	d902      	bls.n	8003492 <HAL_RCC_OscConfig+0x422>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	f000 fb5b 	bl	8003b48 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003492:	4b80      	ldr	r3, [pc, #512]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	2380      	movs	r3, #128	@ 0x80
 8003498:	029b      	lsls	r3, r3, #10
 800349a:	4013      	ands	r3, r2
 800349c:	d1ef      	bne.n	800347e <HAL_RCC_OscConfig+0x40e>
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0x432>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2202      	movs	r2, #2
 80034a8:	4013      	ands	r3, r2
 80034aa:	d100      	bne.n	80034ae <HAL_RCC_OscConfig+0x43e>
 80034ac:	e082      	b.n	80035b4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <HAL_RCC_OscConfig+0x460>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	2380      	movs	r3, #128	@ 0x80
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	429a      	cmp	r2, r3
 80034c0:	d006      	beq.n	80034d0 <HAL_RCC_OscConfig+0x460>
 80034c2:	23fc      	movs	r3, #252	@ 0xfc
 80034c4:	005a      	lsls	r2, r3, #1
 80034c6:	4b72      	ldr	r3, [pc, #456]	@ (8003690 <HAL_RCC_OscConfig+0x620>)
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7fe ffc8 	bl	8002460 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80034d6:	d907      	bls.n	80034e8 <HAL_RCC_OscConfig+0x478>
 80034d8:	23fa      	movs	r3, #250	@ 0xfa
 80034da:	33ff      	adds	r3, #255	@ 0xff
 80034dc:	001a      	movs	r2, r3
 80034de:	4b6c      	ldr	r3, [pc, #432]	@ (8003690 <HAL_RCC_OscConfig+0x620>)
 80034e0:	0011      	movs	r1, r2
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7fe ffbc 	bl	8002460 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x48a>
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b18      	cmp	r3, #24
 80034f2:	d11a      	bne.n	800352a <HAL_RCC_OscConfig+0x4ba>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d117      	bne.n	800352a <HAL_RCC_OscConfig+0x4ba>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fa:	4b66      	ldr	r3, [pc, #408]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	2380      	movs	r3, #128	@ 0x80
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4013      	ands	r3, r2
 8003504:	d005      	beq.n	8003512 <HAL_RCC_OscConfig+0x4a2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCC_OscConfig+0x4a2>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e31a      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003512:	4b60      	ldr	r3, [pc, #384]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4a61      	ldr	r2, [pc, #388]	@ (800369c <HAL_RCC_OscConfig+0x62c>)
 8003518:	4013      	ands	r3, r2
 800351a:	0019      	movs	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	061a      	lsls	r2, r3, #24
 8003522:	4b5c      	ldr	r3, [pc, #368]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003528:	e044      	b.n	80035b4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d026      	beq.n	8003580 <HAL_RCC_OscConfig+0x510>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003532:	4b58      	ldr	r3, [pc, #352]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b57      	ldr	r3, [pc, #348]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003538:	2180      	movs	r1, #128	@ 0x80
 800353a:	0049      	lsls	r1, r1, #1
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7ff f934 	bl	80027ac <HAL_GetTick>
 8003544:	0003      	movs	r3, r0
 8003546:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800354a:	f7ff f92f 	bl	80027ac <HAL_GetTick>
 800354e:	0002      	movs	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x4ec>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e2f5      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800355c:	4b4d      	ldr	r3, [pc, #308]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4013      	ands	r3, r2
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x4da>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003568:	4b4a      	ldr	r3, [pc, #296]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a4b      	ldr	r2, [pc, #300]	@ (800369c <HAL_RCC_OscConfig+0x62c>)
 800356e:	4013      	ands	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	061a      	lsls	r2, r3, #24
 8003578:	4b46      	ldr	r3, [pc, #280]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	e019      	b.n	80035b4 <HAL_RCC_OscConfig+0x544>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003580:	4b44      	ldr	r3, [pc, #272]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b43      	ldr	r3, [pc, #268]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003586:	4946      	ldr	r1, [pc, #280]	@ (80036a0 <HAL_RCC_OscConfig+0x630>)
 8003588:	400a      	ands	r2, r1
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7ff f90e 	bl	80027ac <HAL_GetTick>
 8003590:	0003      	movs	r3, r0
 8003592:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003596:	f7ff f909 	bl	80027ac <HAL_GetTick>
 800359a:	0002      	movs	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e2cf      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2380      	movs	r3, #128	@ 0x80
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4013      	ands	r3, r2
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCC_OscConfig+0x526>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2208      	movs	r2, #8
 80035ba:	4013      	ands	r3, r2
 80035bc:	d100      	bne.n	80035c0 <HAL_RCC_OscConfig+0x550>
 80035be:	e07b      	b.n	80036b8 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d009      	beq.n	80035dc <HAL_RCC_OscConfig+0x56c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_OscConfig+0x56c>
 80035d0:	4a34      	ldr	r2, [pc, #208]	@ (80036a4 <HAL_RCC_OscConfig+0x634>)
 80035d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003690 <HAL_RCC_OscConfig+0x620>)
 80035d4:	0011      	movs	r1, r2
 80035d6:	0018      	movs	r0, r3
 80035d8:	f7fe ff42 	bl	8002460 <assert_failed>
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <HAL_RCC_OscConfig+0x588>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_OscConfig+0x588>
 80035ec:	4a2e      	ldr	r2, [pc, #184]	@ (80036a8 <HAL_RCC_OscConfig+0x638>)
 80035ee:	4b28      	ldr	r3, [pc, #160]	@ (8003690 <HAL_RCC_OscConfig+0x620>)
 80035f0:	0011      	movs	r1, r2
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7fe ff34 	bl	8002460 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d031      	beq.n	8003664 <HAL_RCC_OscConfig+0x5f4>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d108      	bne.n	800361a <HAL_RCC_OscConfig+0x5aa>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8003608:	4a22      	ldr	r2, [pc, #136]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 800360a:	2394      	movs	r3, #148	@ 0x94
 800360c:	58d3      	ldr	r3, [r2, r3]
 800360e:	4921      	ldr	r1, [pc, #132]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003610:	2204      	movs	r2, #4
 8003612:	4393      	bics	r3, r2
 8003614:	2294      	movs	r2, #148	@ 0x94
 8003616:	508b      	str	r3, [r1, r2]
 8003618:	e007      	b.n	800362a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 800361a:	4a1e      	ldr	r2, [pc, #120]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 800361c:	2394      	movs	r3, #148	@ 0x94
 800361e:	58d3      	ldr	r3, [r2, r3]
 8003620:	491c      	ldr	r1, [pc, #112]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003622:	2204      	movs	r2, #4
 8003624:	4313      	orrs	r3, r2
 8003626:	2294      	movs	r2, #148	@ 0x94
 8003628:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362a:	4a1a      	ldr	r2, [pc, #104]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 800362c:	2394      	movs	r3, #148	@ 0x94
 800362e:	58d3      	ldr	r3, [r2, r3]
 8003630:	4918      	ldr	r1, [pc, #96]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003632:	2201      	movs	r2, #1
 8003634:	4313      	orrs	r3, r2
 8003636:	2294      	movs	r2, #148	@ 0x94
 8003638:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7ff f8b7 	bl	80027ac <HAL_GetTick>
 800363e:	0003      	movs	r3, r0
 8003640:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x5e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003644:	f7ff f8b2 	bl	80027ac <HAL_GetTick>
 8003648:	0002      	movs	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b11      	cmp	r3, #17
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x5e6>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e278      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003656:	4a0f      	ldr	r2, [pc, #60]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003658:	2394      	movs	r3, #148	@ 0x94
 800365a:	58d3      	ldr	r3, [r2, r3]
 800365c:	2202      	movs	r2, #2
 800365e:	4013      	ands	r3, r2
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x5d4>
 8003662:	e029      	b.n	80036b8 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003664:	4a0b      	ldr	r2, [pc, #44]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 8003666:	2394      	movs	r3, #148	@ 0x94
 8003668:	58d3      	ldr	r3, [r2, r3]
 800366a:	490a      	ldr	r1, [pc, #40]	@ (8003694 <HAL_RCC_OscConfig+0x624>)
 800366c:	2201      	movs	r2, #1
 800366e:	4393      	bics	r3, r2
 8003670:	2294      	movs	r2, #148	@ 0x94
 8003672:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7ff f89a 	bl	80027ac <HAL_GetTick>
 8003678:	0003      	movs	r3, r0
 800367a:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800367c:	e016      	b.n	80036ac <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800367e:	f7ff f895 	bl	80027ac <HAL_GetTick>
 8003682:	0002      	movs	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b11      	cmp	r3, #17
 800368a:	d90f      	bls.n	80036ac <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e25b      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
 8003690:	08007afc 	.word	0x08007afc
 8003694:	40021000 	.word	0x40021000
 8003698:	fffaffff 	.word	0xfffaffff
 800369c:	80ffffff 	.word	0x80ffffff
 80036a0:	fffffeff 	.word	0xfffffeff
 80036a4:	00000239 	.word	0x00000239
 80036a8:	0000023a 	.word	0x0000023a
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036ac:	4a8c      	ldr	r2, [pc, #560]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80036ae:	2394      	movs	r3, #148	@ 0x94
 80036b0:	58d3      	ldr	r3, [r2, r3]
 80036b2:	2202      	movs	r2, #2
 80036b4:	4013      	ands	r3, r2
 80036b6:	d1e2      	bne.n	800367e <HAL_RCC_OscConfig+0x60e>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2204      	movs	r2, #4
 80036be:	4013      	ands	r3, r2
 80036c0:	d100      	bne.n	80036c4 <HAL_RCC_OscConfig+0x654>
 80036c2:	e127      	b.n	8003914 <HAL_RCC_OscConfig+0x8a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c4:	231f      	movs	r3, #31
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d016      	beq.n	8003702 <HAL_RCC_OscConfig+0x692>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b81      	cmp	r3, #129	@ 0x81
 80036da:	d012      	beq.n	8003702 <HAL_RCC_OscConfig+0x692>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d00e      	beq.n	8003702 <HAL_RCC_OscConfig+0x692>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	d00a      	beq.n	8003702 <HAL_RCC_OscConfig+0x692>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b85      	cmp	r3, #133	@ 0x85
 80036f2:	d006      	beq.n	8003702 <HAL_RCC_OscConfig+0x692>
 80036f4:	239c      	movs	r3, #156	@ 0x9c
 80036f6:	009a      	lsls	r2, r3, #2
 80036f8:	4b7a      	ldr	r3, [pc, #488]	@ (80038e4 <HAL_RCC_OscConfig+0x874>)
 80036fa:	0011      	movs	r1, r2
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fe feaf 	bl	8002460 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8003702:	4b77      	ldr	r3, [pc, #476]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 8003704:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003706:	2380      	movs	r3, #128	@ 0x80
 8003708:	055b      	lsls	r3, r3, #21
 800370a:	4013      	ands	r3, r2
 800370c:	d111      	bne.n	8003732 <HAL_RCC_OscConfig+0x6c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	4b74      	ldr	r3, [pc, #464]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 8003710:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003712:	4b73      	ldr	r3, [pc, #460]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 8003714:	2180      	movs	r1, #128	@ 0x80
 8003716:	0549      	lsls	r1, r1, #21
 8003718:	430a      	orrs	r2, r1
 800371a:	659a      	str	r2, [r3, #88]	@ 0x58
 800371c:	4b70      	ldr	r3, [pc, #448]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 800371e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	055b      	lsls	r3, r3, #21
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372a:	231f      	movs	r3, #31
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003732:	4b6d      	ldr	r3, [pc, #436]	@ (80038e8 <HAL_RCC_OscConfig+0x878>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4013      	ands	r3, r2
 800373c:	d11a      	bne.n	8003774 <HAL_RCC_OscConfig+0x704>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800373e:	4b6a      	ldr	r3, [pc, #424]	@ (80038e8 <HAL_RCC_OscConfig+0x878>)
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b69      	ldr	r3, [pc, #420]	@ (80038e8 <HAL_RCC_OscConfig+0x878>)
 8003744:	2180      	movs	r1, #128	@ 0x80
 8003746:	0049      	lsls	r1, r1, #1
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374c:	f7ff f82e 	bl	80027ac <HAL_GetTick>
 8003750:	0003      	movs	r3, r0
 8003752:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x6f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003756:	f7ff f829 	bl	80027ac <HAL_GetTick>
 800375a:	0002      	movs	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e1ef      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003768:	4b5f      	ldr	r3, [pc, #380]	@ (80038e8 <HAL_RCC_OscConfig+0x878>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4013      	ands	r3, r2
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x6e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2201      	movs	r2, #1
 800377a:	4013      	ands	r3, r2
 800377c:	d01e      	beq.n	80037bc <HAL_RCC_OscConfig+0x74c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2204      	movs	r2, #4
 8003784:	4013      	ands	r3, r2
 8003786:	d010      	beq.n	80037aa <HAL_RCC_OscConfig+0x73a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003788:	4a55      	ldr	r2, [pc, #340]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 800378a:	2390      	movs	r3, #144	@ 0x90
 800378c:	58d3      	ldr	r3, [r2, r3]
 800378e:	4954      	ldr	r1, [pc, #336]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 8003790:	2204      	movs	r2, #4
 8003792:	4313      	orrs	r3, r2
 8003794:	2290      	movs	r2, #144	@ 0x90
 8003796:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003798:	4a51      	ldr	r2, [pc, #324]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 800379a:	2390      	movs	r3, #144	@ 0x90
 800379c:	58d3      	ldr	r3, [r2, r3]
 800379e:	4950      	ldr	r1, [pc, #320]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	4313      	orrs	r3, r2
 80037a4:	2290      	movs	r2, #144	@ 0x90
 80037a6:	508b      	str	r3, [r1, r2]
 80037a8:	e018      	b.n	80037dc <HAL_RCC_OscConfig+0x76c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037aa:	4a4d      	ldr	r2, [pc, #308]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80037ac:	2390      	movs	r3, #144	@ 0x90
 80037ae:	58d3      	ldr	r3, [r2, r3]
 80037b0:	494b      	ldr	r1, [pc, #300]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	4313      	orrs	r3, r2
 80037b6:	2290      	movs	r2, #144	@ 0x90
 80037b8:	508b      	str	r3, [r1, r2]
 80037ba:	e00f      	b.n	80037dc <HAL_RCC_OscConfig+0x76c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037bc:	4a48      	ldr	r2, [pc, #288]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80037be:	2390      	movs	r3, #144	@ 0x90
 80037c0:	58d3      	ldr	r3, [r2, r3]
 80037c2:	4947      	ldr	r1, [pc, #284]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	4393      	bics	r3, r2
 80037c8:	2290      	movs	r2, #144	@ 0x90
 80037ca:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037cc:	4a44      	ldr	r2, [pc, #272]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80037ce:	2390      	movs	r3, #144	@ 0x90
 80037d0:	58d3      	ldr	r3, [r2, r3]
 80037d2:	4943      	ldr	r1, [pc, #268]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80037d4:	2204      	movs	r2, #4
 80037d6:	4393      	bics	r3, r2
 80037d8:	2290      	movs	r2, #144	@ 0x90
 80037da:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d04f      	beq.n	8003884 <HAL_RCC_OscConfig+0x814>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fe ffe2 	bl	80027ac <HAL_GetTick>
 80037e8:	0003      	movs	r3, r0
 80037ea:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ec:	e009      	b.n	8003802 <HAL_RCC_OscConfig+0x792>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ee:	f7fe ffdd 	bl	80027ac <HAL_GetTick>
 80037f2:	0002      	movs	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	4a3c      	ldr	r2, [pc, #240]	@ (80038ec <HAL_RCC_OscConfig+0x87c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x792>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e1a2      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003802:	4a37      	ldr	r2, [pc, #220]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 8003804:	2390      	movs	r3, #144	@ 0x90
 8003806:	58d3      	ldr	r3, [r2, r3]
 8003808:	2202      	movs	r2, #2
 800380a:	4013      	ands	r3, r2
 800380c:	d0ef      	beq.n	80037ee <HAL_RCC_OscConfig+0x77e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2280      	movs	r2, #128	@ 0x80
 8003814:	4013      	ands	r3, r2
 8003816:	d01a      	beq.n	800384e <HAL_RCC_OscConfig+0x7de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003818:	4a31      	ldr	r2, [pc, #196]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 800381a:	2390      	movs	r3, #144	@ 0x90
 800381c:	58d3      	ldr	r3, [r2, r3]
 800381e:	4930      	ldr	r1, [pc, #192]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 8003820:	2280      	movs	r2, #128	@ 0x80
 8003822:	4313      	orrs	r3, r2
 8003824:	2290      	movs	r2, #144	@ 0x90
 8003826:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003828:	e009      	b.n	800383e <HAL_RCC_OscConfig+0x7ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fe ffbf 	bl	80027ac <HAL_GetTick>
 800382e:	0002      	movs	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	4a2d      	ldr	r2, [pc, #180]	@ (80038ec <HAL_RCC_OscConfig+0x87c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x7ce>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e184      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800383e:	4a28      	ldr	r2, [pc, #160]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 8003840:	2390      	movs	r3, #144	@ 0x90
 8003842:	58d2      	ldr	r2, [r2, r3]
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	4013      	ands	r3, r2
 800384a:	d0ee      	beq.n	800382a <HAL_RCC_OscConfig+0x7ba>
 800384c:	e057      	b.n	80038fe <HAL_RCC_OscConfig+0x88e>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800384e:	4a24      	ldr	r2, [pc, #144]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 8003850:	2390      	movs	r3, #144	@ 0x90
 8003852:	58d3      	ldr	r3, [r2, r3]
 8003854:	4922      	ldr	r1, [pc, #136]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 8003856:	2280      	movs	r2, #128	@ 0x80
 8003858:	4393      	bics	r3, r2
 800385a:	2290      	movs	r2, #144	@ 0x90
 800385c:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800385e:	e009      	b.n	8003874 <HAL_RCC_OscConfig+0x804>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fe ffa4 	bl	80027ac <HAL_GetTick>
 8003864:	0002      	movs	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	4a20      	ldr	r2, [pc, #128]	@ (80038ec <HAL_RCC_OscConfig+0x87c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e169      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003874:	4a1a      	ldr	r2, [pc, #104]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 8003876:	2390      	movs	r3, #144	@ 0x90
 8003878:	58d2      	ldr	r2, [r2, r3]
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	4013      	ands	r3, r2
 8003880:	d1ee      	bne.n	8003860 <HAL_RCC_OscConfig+0x7f0>
 8003882:	e03c      	b.n	80038fe <HAL_RCC_OscConfig+0x88e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe ff92 	bl	80027ac <HAL_GetTick>
 8003888:	0003      	movs	r3, r0
 800388a:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800388c:	e009      	b.n	80038a2 <HAL_RCC_OscConfig+0x832>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fe ff8d 	bl	80027ac <HAL_GetTick>
 8003892:	0002      	movs	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	4a14      	ldr	r2, [pc, #80]	@ (80038ec <HAL_RCC_OscConfig+0x87c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x832>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e152      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a2:	4a0f      	ldr	r2, [pc, #60]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80038a4:	2390      	movs	r3, #144	@ 0x90
 80038a6:	58d3      	ldr	r3, [r2, r3]
 80038a8:	2202      	movs	r2, #2
 80038aa:	4013      	ands	r3, r2
 80038ac:	d1ef      	bne.n	800388e <HAL_RCC_OscConfig+0x81e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80038ae:	4a0c      	ldr	r2, [pc, #48]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80038b0:	2390      	movs	r3, #144	@ 0x90
 80038b2:	58d3      	ldr	r3, [r2, r3]
 80038b4:	2280      	movs	r2, #128	@ 0x80
 80038b6:	4013      	ands	r3, r2
 80038b8:	d021      	beq.n	80038fe <HAL_RCC_OscConfig+0x88e>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80038ba:	4a09      	ldr	r2, [pc, #36]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80038bc:	2390      	movs	r3, #144	@ 0x90
 80038be:	58d3      	ldr	r3, [r2, r3]
 80038c0:	4907      	ldr	r1, [pc, #28]	@ (80038e0 <HAL_RCC_OscConfig+0x870>)
 80038c2:	2280      	movs	r2, #128	@ 0x80
 80038c4:	4393      	bics	r3, r2
 80038c6:	2290      	movs	r2, #144	@ 0x90
 80038c8:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038ca:	e011      	b.n	80038f0 <HAL_RCC_OscConfig+0x880>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fe ff6e 	bl	80027ac <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	4a05      	ldr	r2, [pc, #20]	@ (80038ec <HAL_RCC_OscConfig+0x87c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d909      	bls.n	80038f0 <HAL_RCC_OscConfig+0x880>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e133      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08007afc 	.word	0x08007afc
 80038e8:	40007000 	.word	0x40007000
 80038ec:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038f0:	4a97      	ldr	r2, [pc, #604]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 80038f2:	2390      	movs	r3, #144	@ 0x90
 80038f4:	58d2      	ldr	r2, [r2, r3]
 80038f6:	2380      	movs	r3, #128	@ 0x80
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	4013      	ands	r3, r2
 80038fc:	d1e6      	bne.n	80038cc <HAL_RCC_OscConfig+0x85c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038fe:	231f      	movs	r3, #31
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0x8a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b91      	ldr	r3, [pc, #580]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 800390a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800390c:	4b90      	ldr	r3, [pc, #576]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 800390e:	4991      	ldr	r1, [pc, #580]	@ (8003b54 <HAL_RCC_OscConfig+0xae4>)
 8003910:	400a      	ands	r2, r1
 8003912:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00d      	beq.n	8003938 <HAL_RCC_OscConfig+0x8c8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	2b01      	cmp	r3, #1
 8003922:	d009      	beq.n	8003938 <HAL_RCC_OscConfig+0x8c8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	2b02      	cmp	r3, #2
 800392a:	d005      	beq.n	8003938 <HAL_RCC_OscConfig+0x8c8>
 800392c:	4a8a      	ldr	r2, [pc, #552]	@ (8003b58 <HAL_RCC_OscConfig+0xae8>)
 800392e:	4b8b      	ldr	r3, [pc, #556]	@ (8003b5c <HAL_RCC_OscConfig+0xaec>)
 8003930:	0011      	movs	r1, r2
 8003932:	0018      	movs	r0, r3
 8003934:	f7fe fd94 	bl	8002460 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	d100      	bne.n	8003942 <HAL_RCC_OscConfig+0x8d2>
 8003940:	e101      	b.n	8003b46 <HAL_RCC_OscConfig+0xad6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003942:	4b83      	ldr	r3, [pc, #524]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2238      	movs	r2, #56	@ 0x38
 8003948:	4013      	ands	r3, r2
 800394a:	2b18      	cmp	r3, #24
 800394c:	d100      	bne.n	8003950 <HAL_RCC_OscConfig+0x8e0>
 800394e:	e0f8      	b.n	8003b42 <HAL_RCC_OscConfig+0xad2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003954:	2b02      	cmp	r3, #2
 8003956:	d000      	beq.n	800395a <HAL_RCC_OscConfig+0x8ea>
 8003958:	e0d8      	b.n	8003b0c <HAL_RCC_OscConfig+0xa9c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	2b01      	cmp	r3, #1
 8003960:	d012      	beq.n	8003988 <HAL_RCC_OscConfig+0x918>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	2b02      	cmp	r3, #2
 8003968:	d00e      	beq.n	8003988 <HAL_RCC_OscConfig+0x918>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCC_OscConfig+0x918>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	2b03      	cmp	r3, #3
 8003978:	d006      	beq.n	8003988 <HAL_RCC_OscConfig+0x918>
 800397a:	23ca      	movs	r3, #202	@ 0xca
 800397c:	009a      	lsls	r2, r3, #2
 800397e:	4b77      	ldr	r3, [pc, #476]	@ (8003b5c <HAL_RCC_OscConfig+0xaec>)
 8003980:	0011      	movs	r1, r2
 8003982:	0018      	movs	r0, r3
 8003984:	f7fe fd6c 	bl	8002460 <assert_failed>
        assert_param(IS_RCC_PLL_DIVM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	2b00      	cmp	r3, #0
 800398e:	d021      	beq.n	80039d4 <HAL_RCC_OscConfig+0x964>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003994:	2b10      	cmp	r3, #16
 8003996:	d01d      	beq.n	80039d4 <HAL_RCC_OscConfig+0x964>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	2b20      	cmp	r3, #32
 800399e:	d019      	beq.n	80039d4 <HAL_RCC_OscConfig+0x964>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	2b30      	cmp	r3, #48	@ 0x30
 80039a6:	d015      	beq.n	80039d4 <HAL_RCC_OscConfig+0x964>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ac:	2b40      	cmp	r3, #64	@ 0x40
 80039ae:	d011      	beq.n	80039d4 <HAL_RCC_OscConfig+0x964>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b4:	2b50      	cmp	r3, #80	@ 0x50
 80039b6:	d00d      	beq.n	80039d4 <HAL_RCC_OscConfig+0x964>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	2b60      	cmp	r3, #96	@ 0x60
 80039be:	d009      	beq.n	80039d4 <HAL_RCC_OscConfig+0x964>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	2b70      	cmp	r3, #112	@ 0x70
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_OscConfig+0x964>
 80039c8:	4a65      	ldr	r2, [pc, #404]	@ (8003b60 <HAL_RCC_OscConfig+0xaf0>)
 80039ca:	4b64      	ldr	r3, [pc, #400]	@ (8003b5c <HAL_RCC_OscConfig+0xaec>)
 80039cc:	0011      	movs	r1, r2
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7fe fd46 	bl	8002460 <assert_failed>
        assert_param(IS_RCC_PLL_MULN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d903      	bls.n	80039e4 <HAL_RCC_OscConfig+0x974>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80039e2:	d905      	bls.n	80039f0 <HAL_RCC_OscConfig+0x980>
 80039e4:	4a5f      	ldr	r2, [pc, #380]	@ (8003b64 <HAL_RCC_OscConfig+0xaf4>)
 80039e6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b5c <HAL_RCC_OscConfig+0xaec>)
 80039e8:	0011      	movs	r1, r2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7fe fd38 	bl	8002460 <assert_failed>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	029b      	lsls	r3, r3, #10
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d305      	bcc.n	8003a08 <HAL_RCC_OscConfig+0x998>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a00:	23f8      	movs	r3, #248	@ 0xf8
 8003a02:	039b      	lsls	r3, r3, #14
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d905      	bls.n	8003a14 <HAL_RCC_OscConfig+0x9a4>
 8003a08:	4a57      	ldr	r2, [pc, #348]	@ (8003b68 <HAL_RCC_OscConfig+0xaf8>)
 8003a0a:	4b54      	ldr	r3, [pc, #336]	@ (8003b5c <HAL_RCC_OscConfig+0xaec>)
 8003a0c:	0011      	movs	r1, r2
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f7fe fd26 	bl	8002460 <assert_failed>
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	049b      	lsls	r3, r3, #18
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d305      	bcc.n	8003a2c <HAL_RCC_OscConfig+0x9bc>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a24:	23e0      	movs	r3, #224	@ 0xe0
 8003a26:	051b      	lsls	r3, r3, #20
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d906      	bls.n	8003a3a <HAL_RCC_OscConfig+0x9ca>
 8003a2c:	23cb      	movs	r3, #203	@ 0xcb
 8003a2e:	009a      	lsls	r2, r3, #2
 8003a30:	4b4a      	ldr	r3, [pc, #296]	@ (8003b5c <HAL_RCC_OscConfig+0xaec>)
 8003a32:	0011      	movs	r1, r2
 8003a34:	0018      	movs	r0, r3
 8003a36:	f7fe fd13 	bl	8002460 <assert_failed>
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a3e:	2380      	movs	r3, #128	@ 0x80
 8003a40:	059b      	lsls	r3, r3, #22
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d305      	bcc.n	8003a52 <HAL_RCC_OscConfig+0x9e2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a4a:	23e0      	movs	r3, #224	@ 0xe0
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d905      	bls.n	8003a5e <HAL_RCC_OscConfig+0x9ee>
 8003a52:	4a46      	ldr	r2, [pc, #280]	@ (8003b6c <HAL_RCC_OscConfig+0xafc>)
 8003a54:	4b41      	ldr	r3, [pc, #260]	@ (8003b5c <HAL_RCC_OscConfig+0xaec>)
 8003a56:	0011      	movs	r1, r2
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f7fe fd01 	bl	8002460 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b3b      	ldr	r3, [pc, #236]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003a64:	4942      	ldr	r1, [pc, #264]	@ (8003b70 <HAL_RCC_OscConfig+0xb00>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe fe9f 	bl	80027ac <HAL_GetTick>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xa16>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fe fe9a 	bl	80027ac <HAL_GetTick>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xa16>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e060      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a86:	4b32      	ldr	r3, [pc, #200]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	049b      	lsls	r3, r3, #18
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0xa04>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a92:	4b2f      	ldr	r3, [pc, #188]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4a37      	ldr	r2, [pc, #220]	@ (8003b74 <HAL_RCC_OscConfig+0xb04>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	4b23      	ldr	r3, [pc, #140]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8003ac6:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	4b21      	ldr	r3, [pc, #132]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003acc:	2180      	movs	r1, #128	@ 0x80
 8003ace:	0549      	lsls	r1, r1, #21
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003ada:	2180      	movs	r1, #128	@ 0x80
 8003adc:	0449      	lsls	r1, r1, #17
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fe fe63 	bl	80027ac <HAL_GetTick>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xa8e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fe fe5e 	bl	80027ac <HAL_GetTick>
 8003af0:	0002      	movs	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xa8e>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e024      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003afe:	4b14      	ldr	r3, [pc, #80]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	049b      	lsls	r3, r3, #18
 8003b06:	4013      	ands	r3, r2
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xa7c>
 8003b0a:	e01c      	b.n	8003b46 <HAL_RCC_OscConfig+0xad6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0c:	4b10      	ldr	r3, [pc, #64]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b0f      	ldr	r3, [pc, #60]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003b12:	4917      	ldr	r1, [pc, #92]	@ (8003b70 <HAL_RCC_OscConfig+0xb00>)
 8003b14:	400a      	ands	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe fe48 	bl	80027ac <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0xac4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fe fe43 	bl	80027ac <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0xac4>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e009      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_RCC_OscConfig+0xae0>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2380      	movs	r3, #128	@ 0x80
 8003b3a:	049b      	lsls	r3, r3, #18
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d1f0      	bne.n	8003b22 <HAL_RCC_OscConfig+0xab2>
 8003b40:	e001      	b.n	8003b46 <HAL_RCC_OscConfig+0xad6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_RCC_OscConfig+0xad8>
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b008      	add	sp, #32
 8003b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	efffffff 	.word	0xefffffff
 8003b58:	0000031e 	.word	0x0000031e
 8003b5c:	08007afc 	.word	0x08007afc
 8003b60:	00000329 	.word	0x00000329
 8003b64:	0000032a 	.word	0x0000032a
 8003b68:	0000032b 	.word	0x0000032b
 8003b6c:	0000032d 	.word	0x0000032d
 8003b70:	feffffff 	.word	0xfeffffff
 8003b74:	11c1808c 	.word	0x11c1808c

08003b78 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b78:	b5b0      	push	{r4, r5, r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x1e>
 8003b88:	23de      	movs	r3, #222	@ 0xde
 8003b8a:	009a      	lsls	r2, r3, #2
 8003b8c:	4bbb      	ldr	r3, [pc, #748]	@ (8003e7c <HAL_RCC_ClockConfig+0x304>)
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7fe fc65 	bl	8002460 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE((uint8_t)RCC_ClkInitStruct->ClockType));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <HAL_RCC_ClockConfig+0x32>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b1f      	cmp	r3, #31
 8003ba8:	d905      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x3e>
 8003baa:	4ab5      	ldr	r2, [pc, #724]	@ (8003e80 <HAL_RCC_ClockConfig+0x308>)
 8003bac:	4bb3      	ldr	r3, [pc, #716]	@ (8003e7c <HAL_RCC_ClockConfig+0x304>)
 8003bae:	0011      	movs	r1, r2
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7fe fc55 	bl	8002460 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x5c>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x5c>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x5c>
 8003bc8:	4aae      	ldr	r2, [pc, #696]	@ (8003e84 <HAL_RCC_ClockConfig+0x30c>)
 8003bca:	4bac      	ldr	r3, [pc, #688]	@ (8003e7c <HAL_RCC_ClockConfig+0x304>)
 8003bcc:	0011      	movs	r1, r2
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7fe fc46 	bl	8002460 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd4:	4bac      	ldr	r3, [pc, #688]	@ (8003e88 <HAL_RCC_ClockConfig+0x310>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2207      	movs	r2, #7
 8003bda:	4013      	ands	r3, r2
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d911      	bls.n	8003c06 <HAL_RCC_ClockConfig+0x8e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4ba9      	ldr	r3, [pc, #676]	@ (8003e88 <HAL_RCC_ClockConfig+0x310>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2207      	movs	r2, #7
 8003be8:	4393      	bics	r3, r2
 8003bea:	0019      	movs	r1, r3
 8003bec:	4ba6      	ldr	r3, [pc, #664]	@ (8003e88 <HAL_RCC_ClockConfig+0x310>)
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf4:	4ba4      	ldr	r3, [pc, #656]	@ (8003e88 <HAL_RCC_ClockConfig+0x310>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x8e>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e136      	b.n	8003e74 <HAL_RCC_ClockConfig+0x2fc>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d100      	bne.n	8003c12 <HAL_RCC_ClockConfig+0x9a>
 8003c10:	e082      	b.n	8003d18 <HAL_RCC_ClockConfig+0x1a0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d019      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d015      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d011      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d00d      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
 8003c42:	4a92      	ldr	r2, [pc, #584]	@ (8003e8c <HAL_RCC_ClockConfig+0x314>)
 8003c44:	4b8d      	ldr	r3, [pc, #564]	@ (8003e7c <HAL_RCC_ClockConfig+0x304>)
 8003c46:	0011      	movs	r1, r2
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7fe fc09 	bl	8002460 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xee>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c56:	4b8e      	ldr	r3, [pc, #568]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	2380      	movs	r3, #128	@ 0x80
 8003c5c:	049b      	lsls	r3, r3, #18
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d138      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x15c>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e106      	b.n	8003e74 <HAL_RCC_ClockConfig+0x2fc>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0x106>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c6e:	4b88      	ldr	r3, [pc, #544]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	2380      	movs	r3, #128	@ 0x80
 8003c74:	029b      	lsls	r3, r3, #10
 8003c76:	4013      	ands	r3, r2
 8003c78:	d12c      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0fa      	b.n	8003e74 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x11c>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c86:	4b82      	ldr	r3, [pc, #520]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d121      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0ef      	b.n	8003e74 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_ClockConfig+0x134>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2380      	movs	r3, #128	@ 0x80
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d115      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0e3      	b.n	8003e74 <HAL_RCC_ClockConfig+0x2fc>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x14c>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb4:	4a76      	ldr	r2, [pc, #472]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003cb6:	2394      	movs	r3, #148	@ 0x94
 8003cb8:	58d3      	ldr	r3, [r2, r3]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d109      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0d7      	b.n	8003e74 <HAL_RCC_ClockConfig+0x2fc>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc4:	4a72      	ldr	r2, [pc, #456]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003cc6:	2390      	movs	r3, #144	@ 0x90
 8003cc8:	58d3      	ldr	r3, [r2, r3]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0cf      	b.n	8003e74 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cd4:	4b6e      	ldr	r3, [pc, #440]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2207      	movs	r2, #7
 8003cda:	4393      	bics	r3, r2
 8003cdc:	0019      	movs	r1, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	4b6b      	ldr	r3, [pc, #428]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce8:	f7fe fd60 	bl	80027ac <HAL_GetTick>
 8003cec:	0003      	movs	r3, r0
 8003cee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf0:	e009      	b.n	8003d06 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf2:	f7fe fd5b 	bl	80027ac <HAL_GetTick>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	4a65      	ldr	r2, [pc, #404]	@ (8003e94 <HAL_RCC_ClockConfig+0x31c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0b6      	b.n	8003e74 <HAL_RCC_ClockConfig+0x2fc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	4b62      	ldr	r3, [pc, #392]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2238      	movs	r2, #56	@ 0x38
 8003d0c:	401a      	ands	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d1ec      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d044      	beq.n	8003dac <HAL_RCC_ClockConfig+0x234>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d036      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x220>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	2380      	movs	r3, #128	@ 0x80
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d030      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x220>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	2390      	movs	r3, #144	@ 0x90
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d02a      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x220>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	23a0      	movs	r3, #160	@ 0xa0
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d024      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x220>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	23b0      	movs	r3, #176	@ 0xb0
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d01e      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x220>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	23c0      	movs	r3, #192	@ 0xc0
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d018      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x220>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	23d0      	movs	r3, #208	@ 0xd0
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d012      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x220>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	23e0      	movs	r3, #224	@ 0xe0
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d00c      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x220>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	23f0      	movs	r3, #240	@ 0xf0
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d006      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x220>
 8003d8a:	23f8      	movs	r3, #248	@ 0xf8
 8003d8c:	009a      	lsls	r2, r3, #2
 8003d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e7c <HAL_RCC_ClockConfig+0x304>)
 8003d90:	0011      	movs	r1, r2
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7fe fb64 	bl	8002460 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b3d      	ldr	r3, [pc, #244]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4a3e      	ldr	r2, [pc, #248]	@ (8003e98 <HAL_RCC_ClockConfig+0x320>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	4b3a      	ldr	r3, [pc, #232]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dac:	4b36      	ldr	r3, [pc, #216]	@ (8003e88 <HAL_RCC_ClockConfig+0x310>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2207      	movs	r2, #7
 8003db2:	4013      	ands	r3, r2
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d211      	bcs.n	8003dde <HAL_RCC_ClockConfig+0x266>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dba:	4b33      	ldr	r3, [pc, #204]	@ (8003e88 <HAL_RCC_ClockConfig+0x310>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2207      	movs	r2, #7
 8003dc0:	4393      	bics	r3, r2
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	4b30      	ldr	r3, [pc, #192]	@ (8003e88 <HAL_RCC_ClockConfig+0x310>)
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8003e88 <HAL_RCC_ClockConfig+0x310>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d001      	beq.n	8003dde <HAL_RCC_ClockConfig+0x266>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e04a      	b.n	8003e74 <HAL_RCC_ClockConfig+0x2fc>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2204      	movs	r2, #4
 8003de4:	4013      	ands	r3, r2
 8003de6:	d02b      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x2c8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01d      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x2b4>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	2380      	movs	r3, #128	@ 0x80
 8003df6:	01db      	lsls	r3, r3, #7
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d017      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x2b4>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	23a0      	movs	r3, #160	@ 0xa0
 8003e02:	01db      	lsls	r3, r3, #7
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d011      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x2b4>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	23c0      	movs	r3, #192	@ 0xc0
 8003e0e:	01db      	lsls	r3, r3, #7
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d00b      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x2b4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	23e0      	movs	r3, #224	@ 0xe0
 8003e1a:	01db      	lsls	r3, r3, #7
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x2b4>
 8003e20:	4a1e      	ldr	r2, [pc, #120]	@ (8003e9c <HAL_RCC_ClockConfig+0x324>)
 8003e22:	4b16      	ldr	r3, [pc, #88]	@ (8003e7c <HAL_RCC_ClockConfig+0x304>)
 8003e24:	0011      	movs	r1, r2
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7fe fb1a 	bl	8002460 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e2c:	4b18      	ldr	r3, [pc, #96]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea0 <HAL_RCC_ClockConfig+0x328>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	0019      	movs	r1, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8003e40:	f000 f834 	bl	8003eac <HAL_RCC_GetSysClockFreq>
 8003e44:	0001      	movs	r1, r0
 8003e46:	4b12      	ldr	r3, [pc, #72]	@ (8003e90 <HAL_RCC_ClockConfig+0x318>)
 8003e48:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	220f      	movs	r2, #15
 8003e4e:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8003e50:	4a14      	ldr	r2, [pc, #80]	@ (8003ea4 <HAL_RCC_ClockConfig+0x32c>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e54:	001a      	movs	r2, r3
 8003e56:	231f      	movs	r3, #31
 8003e58:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8003e5a:	000a      	movs	r2, r1
 8003e5c:	40da      	lsrs	r2, r3
 8003e5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ea8 <HAL_RCC_ClockConfig+0x330>)
 8003e60:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8003e62:	250b      	movs	r5, #11
 8003e64:	197c      	adds	r4, r7, r5
 8003e66:	2003      	movs	r0, #3
 8003e68:	f7fe fc46 	bl	80026f8 <HAL_InitTick>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8003e70:	197b      	adds	r3, r7, r5
 8003e72:	781b      	ldrb	r3, [r3, #0]
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b004      	add	sp, #16
 8003e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e7c:	08007afc 	.word	0x08007afc
 8003e80:	00000379 	.word	0x00000379
 8003e84:	0000037a 	.word	0x0000037a
 8003e88:	40022000 	.word	0x40022000
 8003e8c:	00000391 	.word	0x00000391
 8003e90:	40021000 	.word	0x40021000
 8003e94:	00001388 	.word	0x00001388
 8003e98:	fffff0ff 	.word	0xfffff0ff
 8003e9c:	000003f5 	.word	0x000003f5
 8003ea0:	ffff8fff 	.word	0xffff8fff
 8003ea4:	08007bc0 	.word	0x08007bc0
 8003ea8:	20000020 	.word	0x20000020

08003eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	@ 0x28
 8003eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eba:	4b46      	ldr	r3, [pc, #280]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2238      	movs	r2, #56	@ 0x38
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec4:	4b43      	ldr	r3, [pc, #268]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	4013      	ands	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b18      	cmp	r3, #24
 8003ed8:	d125      	bne.n	8003f26 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d122      	bne.n	8003f26 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8003eea:	4a3a      	ldr	r2, [pc, #232]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003eec:	2394      	movs	r3, #148	@ 0x94
 8003eee:	58d3      	ldr	r3, [r2, r3]
 8003ef0:	0a1b      	lsrs	r3, r3, #8
 8003ef2:	220f      	movs	r2, #15
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ef8:	e005      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003efa:	4b36      	ldr	r3, [pc, #216]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	220f      	movs	r2, #15
 8003f02:	4013      	ands	r3, r2
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	2b0b      	cmp	r3, #11
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8003f10:	4b31      	ldr	r3, [pc, #196]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f14:	0092      	lsls	r2, r2, #2
 8003f16:	58d3      	ldr	r3, [r2, r3]
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d11b      	bne.n	8003f58 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f24:	e018      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d102      	bne.n	8003f32 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x130>)
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	e012      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d102      	bne.n	8003f3e <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f38:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003f3a:	623b      	str	r3, [r7, #32]
 8003f3c:	e00c      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d103      	bne.n	8003f4c <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003f44:	23fa      	movs	r3, #250	@ 0xfa
 8003f46:	01db      	lsls	r3, r3, #7
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	e005      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b28      	cmp	r3, #40	@ 0x28
 8003f50:	d102      	bne.n	8003f58 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b18      	cmp	r3, #24
 8003f5c:	d135      	bne.n	8003fca <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2203      	movs	r2, #3
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f68:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	2207      	movs	r2, #7
 8003f70:	4013      	ands	r3, r2
 8003f72:	3301      	adds	r3, #1
 8003f74:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d003      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0xd8>
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d003      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0xde>
 8003f82:	e005      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8003f84:	4b15      	ldr	r3, [pc, #84]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x130>)
 8003f86:	61fb      	str	r3, [r7, #28]
        break;
 8003f88:	e005      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8003f8a:	4b15      	ldr	r3, [pc, #84]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003f8c:	61fb      	str	r3, [r7, #28]
        break;
 8003f8e:	e002      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	61fb      	str	r3, [r7, #28]
        break;
 8003f94:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8003f96:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	0a1b      	lsrs	r3, r3, #8
 8003f9c:	227f      	movs	r2, #127	@ 0x7f
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	4353      	muls	r3, r2
 8003fa4:	68f9      	ldr	r1, [r7, #12]
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7fc f8ae 	bl	8000108 <__udivsi3>
 8003fac:	0003      	movs	r3, r0
 8003fae:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003fb0:	4b08      	ldr	r3, [pc, #32]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	0f5b      	lsrs	r3, r3, #29
 8003fb6:	2207      	movs	r2, #7
 8003fb8:	4013      	ands	r3, r2
 8003fba:	3301      	adds	r3, #1
 8003fbc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	68b8      	ldr	r0, [r7, #8]
 8003fc2:	f7fc f8a1 	bl	8000108 <__udivsi3>
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003fca:	6a3b      	ldr	r3, [r7, #32]
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b00a      	add	sp, #40	@ 0x28
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	08007bd0 	.word	0x08007bd0
 8003fdc:	00f42400 	.word	0x00f42400
 8003fe0:	007a1200 	.word	0x007a1200

08003fe4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8003ff2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ff4:	2380      	movs	r3, #128	@ 0x80
 8003ff6:	055b      	lsls	r3, r3, #21
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d004      	beq.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ffc:	f7ff f82c 	bl	8003058 <HAL_PWREx_GetVoltageRange>
 8004000:	0003      	movs	r3, r0
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e017      	b.n	8004036 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	4b2a      	ldr	r3, [pc, #168]	@ (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8004008:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800400a:	4b29      	ldr	r3, [pc, #164]	@ (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800400c:	2180      	movs	r1, #128	@ 0x80
 800400e:	0549      	lsls	r1, r1, #21
 8004010:	430a      	orrs	r2, r1
 8004012:	659a      	str	r2, [r3, #88]	@ 0x58
 8004014:	4b26      	ldr	r3, [pc, #152]	@ (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8004016:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004018:	2380      	movs	r3, #128	@ 0x80
 800401a:	055b      	lsls	r3, r3, #21
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004022:	f7ff f819 	bl	8003058 <HAL_PWREx_GetVoltageRange>
 8004026:	0003      	movs	r3, r0
 8004028:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800402a:	4b21      	ldr	r3, [pc, #132]	@ (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800402c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800402e:	4b20      	ldr	r3, [pc, #128]	@ (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8004030:	4920      	ldr	r1, [pc, #128]	@ (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8004032:	400a      	ands	r2, r1
 8004034:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	2380      	movs	r3, #128	@ 0x80
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	429a      	cmp	r2, r3
 800403e:	d111      	bne.n	8004064 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b80      	cmp	r3, #128	@ 0x80
 8004044:	d91c      	bls.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2bb0      	cmp	r3, #176	@ 0xb0
 800404a:	d902      	bls.n	8004052 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800404c:	2302      	movs	r3, #2
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	e016      	b.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b90      	cmp	r3, #144	@ 0x90
 8004056:	d902      	bls.n	800405e <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004058:	2301      	movs	r3, #1
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	e010      	b.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	e00d      	b.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b7f      	cmp	r3, #127	@ 0x7f
 8004068:	d902      	bls.n	8004070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 800406a:	2302      	movs	r3, #2
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	e007      	b.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b70      	cmp	r3, #112	@ 0x70
 8004074:	d102      	bne.n	800407c <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004076:	2301      	movs	r3, #1
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	e001      	b.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004080:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2207      	movs	r2, #7
 8004086:	4393      	bics	r3, r2
 8004088:	0019      	movs	r1, r3
 800408a:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	430a      	orrs	r2, r1
 8004090:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004092:	4b09      	ldr	r3, [pc, #36]	@ (80040b8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2207      	movs	r2, #7
 8004098:	4013      	ands	r3, r2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b006      	add	sp, #24
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	40021000 	.word	0x40021000
 80040b4:	efffffff 	.word	0xefffffff
 80040b8:	40022000 	.word	0x40022000

080040bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e215      	b.n	80044fa <HAL_SPI_Init+0x43e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4aa9      	ldr	r2, [pc, #676]	@ (8004378 <HAL_SPI_Init+0x2bc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00c      	beq.n	80040f2 <HAL_SPI_Init+0x36>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4aa7      	ldr	r2, [pc, #668]	@ (800437c <HAL_SPI_Init+0x2c0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d007      	beq.n	80040f2 <HAL_SPI_Init+0x36>
 80040e2:	2346      	movs	r3, #70	@ 0x46
 80040e4:	33ff      	adds	r3, #255	@ 0xff
 80040e6:	001a      	movs	r2, r3
 80040e8:	4ba5      	ldr	r3, [pc, #660]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 80040ea:	0011      	movs	r1, r2
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7fe f9b7 	bl	8002460 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <HAL_SPI_Init+0x58>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	2382      	movs	r3, #130	@ 0x82
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	429a      	cmp	r2, r3
 8004104:	d006      	beq.n	8004114 <HAL_SPI_Init+0x58>
 8004106:	23a3      	movs	r3, #163	@ 0xa3
 8004108:	005a      	lsls	r2, r3, #1
 800410a:	4b9d      	ldr	r3, [pc, #628]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 800410c:	0011      	movs	r1, r2
 800410e:	0018      	movs	r0, r3
 8004110:	f7fe f9a6 	bl	8002460 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d013      	beq.n	8004144 <HAL_SPI_Init+0x88>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	2380      	movs	r3, #128	@ 0x80
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	429a      	cmp	r2, r3
 8004126:	d00d      	beq.n	8004144 <HAL_SPI_Init+0x88>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	2380      	movs	r3, #128	@ 0x80
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	429a      	cmp	r2, r3
 8004132:	d007      	beq.n	8004144 <HAL_SPI_Init+0x88>
 8004134:	2348      	movs	r3, #72	@ 0x48
 8004136:	33ff      	adds	r3, #255	@ 0xff
 8004138:	001a      	movs	r2, r3
 800413a:	4b91      	ldr	r3, [pc, #580]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 800413c:	0011      	movs	r1, r2
 800413e:	0018      	movs	r0, r3
 8004140:	f7fe f98e 	bl	8002460 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	23f0      	movs	r3, #240	@ 0xf0
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	429a      	cmp	r2, r3
 800414e:	d04e      	beq.n	80041ee <HAL_SPI_Init+0x132>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	23e0      	movs	r3, #224	@ 0xe0
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	429a      	cmp	r2, r3
 800415a:	d048      	beq.n	80041ee <HAL_SPI_Init+0x132>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	23d0      	movs	r3, #208	@ 0xd0
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	429a      	cmp	r2, r3
 8004166:	d042      	beq.n	80041ee <HAL_SPI_Init+0x132>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	23c0      	movs	r3, #192	@ 0xc0
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	429a      	cmp	r2, r3
 8004172:	d03c      	beq.n	80041ee <HAL_SPI_Init+0x132>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	23b0      	movs	r3, #176	@ 0xb0
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	429a      	cmp	r2, r3
 800417e:	d036      	beq.n	80041ee <HAL_SPI_Init+0x132>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	23a0      	movs	r3, #160	@ 0xa0
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	429a      	cmp	r2, r3
 800418a:	d030      	beq.n	80041ee <HAL_SPI_Init+0x132>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	2390      	movs	r3, #144	@ 0x90
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	429a      	cmp	r2, r3
 8004196:	d02a      	beq.n	80041ee <HAL_SPI_Init+0x132>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d024      	beq.n	80041ee <HAL_SPI_Init+0x132>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	23e0      	movs	r3, #224	@ 0xe0
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d01e      	beq.n	80041ee <HAL_SPI_Init+0x132>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	23c0      	movs	r3, #192	@ 0xc0
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d018      	beq.n	80041ee <HAL_SPI_Init+0x132>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	23a0      	movs	r3, #160	@ 0xa0
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d012      	beq.n	80041ee <HAL_SPI_Init+0x132>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	2380      	movs	r3, #128	@ 0x80
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d00c      	beq.n	80041ee <HAL_SPI_Init+0x132>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	23c0      	movs	r3, #192	@ 0xc0
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d006      	beq.n	80041ee <HAL_SPI_Init+0x132>
 80041e0:	23a4      	movs	r3, #164	@ 0xa4
 80041e2:	005a      	lsls	r2, r3, #1
 80041e4:	4b66      	ldr	r3, [pc, #408]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 80041e6:	0011      	movs	r1, r2
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7fe f939 	bl	8002460 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	2380      	movs	r3, #128	@ 0x80
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d011      	beq.n	800421e <HAL_SPI_Init+0x162>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00d      	beq.n	800421e <HAL_SPI_Init+0x162>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	2380      	movs	r3, #128	@ 0x80
 8004208:	02db      	lsls	r3, r3, #11
 800420a:	429a      	cmp	r2, r3
 800420c:	d007      	beq.n	800421e <HAL_SPI_Init+0x162>
 800420e:	234a      	movs	r3, #74	@ 0x4a
 8004210:	33ff      	adds	r3, #255	@ 0xff
 8004212:	001a      	movs	r2, r3
 8004214:	4b5a      	ldr	r3, [pc, #360]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 8004216:	0011      	movs	r1, r2
 8004218:	0018      	movs	r0, r3
 800421a:	f7fe f921 	bl	8002460 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004222:	2b08      	cmp	r3, #8
 8004224:	d00a      	beq.n	800423c <HAL_SPI_Init+0x180>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <HAL_SPI_Init+0x180>
 800422e:	23a5      	movs	r3, #165	@ 0xa5
 8004230:	005a      	lsls	r2, r3, #1
 8004232:	4b53      	ldr	r3, [pc, #332]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 8004234:	0011      	movs	r1, r2
 8004236:	0018      	movs	r0, r3
 8004238:	f7fe f912 	bl	8002460 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d023      	beq.n	800428c <HAL_SPI_Init+0x1d0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d01f      	beq.n	800428c <HAL_SPI_Init+0x1d0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	2b10      	cmp	r3, #16
 8004252:	d01b      	beq.n	800428c <HAL_SPI_Init+0x1d0>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	2b18      	cmp	r3, #24
 800425a:	d017      	beq.n	800428c <HAL_SPI_Init+0x1d0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	2b20      	cmp	r3, #32
 8004262:	d013      	beq.n	800428c <HAL_SPI_Init+0x1d0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	2b28      	cmp	r3, #40	@ 0x28
 800426a:	d00f      	beq.n	800428c <HAL_SPI_Init+0x1d0>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	2b30      	cmp	r3, #48	@ 0x30
 8004272:	d00b      	beq.n	800428c <HAL_SPI_Init+0x1d0>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	2b38      	cmp	r3, #56	@ 0x38
 800427a:	d007      	beq.n	800428c <HAL_SPI_Init+0x1d0>
 800427c:	234c      	movs	r3, #76	@ 0x4c
 800427e:	33ff      	adds	r3, #255	@ 0xff
 8004280:	001a      	movs	r2, r3
 8004282:	4b3f      	ldr	r3, [pc, #252]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 8004284:	0011      	movs	r1, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fe f8ea 	bl	8002460 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_SPI_Init+0x1ee>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	2b80      	cmp	r3, #128	@ 0x80
 800429a:	d006      	beq.n	80042aa <HAL_SPI_Init+0x1ee>
 800429c:	23a6      	movs	r3, #166	@ 0xa6
 800429e:	005a      	lsls	r2, r3, #1
 80042a0:	4b37      	ldr	r3, [pc, #220]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 80042a2:	0011      	movs	r1, r2
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7fe f8db 	bl	8002460 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <HAL_SPI_Init+0x20e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d007      	beq.n	80042ca <HAL_SPI_Init+0x20e>
 80042ba:	234e      	movs	r3, #78	@ 0x4e
 80042bc:	33ff      	adds	r3, #255	@ 0xff
 80042be:	001a      	movs	r2, r3
 80042c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 80042c2:	0011      	movs	r1, r2
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7fe f8cb 	bl	8002460 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d158      	bne.n	8004384 <HAL_SPI_Init+0x2c8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_SPI_Init+0x234>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d006      	beq.n	80042f0 <HAL_SPI_Init+0x234>
 80042e2:	23a8      	movs	r3, #168	@ 0xa8
 80042e4:	005a      	lsls	r2, r3, #1
 80042e6:	4b26      	ldr	r3, [pc, #152]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 80042e8:	0011      	movs	r1, r2
 80042ea:	0018      	movs	r0, r3
 80042ec:	f7fe f8b8 	bl	8002460 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <HAL_SPI_Init+0x254>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d007      	beq.n	8004310 <HAL_SPI_Init+0x254>
 8004300:	2352      	movs	r3, #82	@ 0x52
 8004302:	33ff      	adds	r3, #255	@ 0xff
 8004304:	001a      	movs	r2, r3
 8004306:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 8004308:	0011      	movs	r1, r2
 800430a:	0018      	movs	r0, r3
 800430c:	f7fe f8a8 	bl	8002460 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	2382      	movs	r3, #130	@ 0x82
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	429a      	cmp	r2, r3
 800431a:	d129      	bne.n	8004370 <HAL_SPI_Init+0x2b4>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d100      	bne.n	8004326 <HAL_SPI_Init+0x26a>
 8004324:	e05c      	b.n	80043e0 <HAL_SPI_Init+0x324>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	2b08      	cmp	r3, #8
 800432c:	d058      	beq.n	80043e0 <HAL_SPI_Init+0x324>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	2b10      	cmp	r3, #16
 8004334:	d054      	beq.n	80043e0 <HAL_SPI_Init+0x324>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	2b18      	cmp	r3, #24
 800433c:	d050      	beq.n	80043e0 <HAL_SPI_Init+0x324>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	2b20      	cmp	r3, #32
 8004344:	d04c      	beq.n	80043e0 <HAL_SPI_Init+0x324>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	2b28      	cmp	r3, #40	@ 0x28
 800434c:	d048      	beq.n	80043e0 <HAL_SPI_Init+0x324>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	2b30      	cmp	r3, #48	@ 0x30
 8004354:	d044      	beq.n	80043e0 <HAL_SPI_Init+0x324>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	2b38      	cmp	r3, #56	@ 0x38
 800435c:	d040      	beq.n	80043e0 <HAL_SPI_Init+0x324>
 800435e:	2356      	movs	r3, #86	@ 0x56
 8004360:	33ff      	adds	r3, #255	@ 0xff
 8004362:	001a      	movs	r2, r3
 8004364:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <HAL_SPI_Init+0x2c4>)
 8004366:	0011      	movs	r1, r2
 8004368:	0018      	movs	r0, r3
 800436a:	f7fe f879 	bl	8002460 <assert_failed>
 800436e:	e037      	b.n	80043e0 <HAL_SPI_Init+0x324>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	61da      	str	r2, [r3, #28]
 8004376:	e033      	b.n	80043e0 <HAL_SPI_Init+0x324>
 8004378:	40013000 	.word	0x40013000
 800437c:	40003800 	.word	0x40003800
 8004380:	08007b34 	.word	0x08007b34
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d023      	beq.n	80043d4 <HAL_SPI_Init+0x318>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d01f      	beq.n	80043d4 <HAL_SPI_Init+0x318>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	2b10      	cmp	r3, #16
 800439a:	d01b      	beq.n	80043d4 <HAL_SPI_Init+0x318>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b18      	cmp	r3, #24
 80043a2:	d017      	beq.n	80043d4 <HAL_SPI_Init+0x318>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d013      	beq.n	80043d4 <HAL_SPI_Init+0x318>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	2b28      	cmp	r3, #40	@ 0x28
 80043b2:	d00f      	beq.n	80043d4 <HAL_SPI_Init+0x318>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b30      	cmp	r3, #48	@ 0x30
 80043ba:	d00b      	beq.n	80043d4 <HAL_SPI_Init+0x318>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	2b38      	cmp	r3, #56	@ 0x38
 80043c2:	d007      	beq.n	80043d4 <HAL_SPI_Init+0x318>
 80043c4:	2360      	movs	r3, #96	@ 0x60
 80043c6:	33ff      	adds	r3, #255	@ 0xff
 80043c8:	001a      	movs	r2, r3
 80043ca:	4b4e      	ldr	r3, [pc, #312]	@ (8004504 <HAL_SPI_Init+0x448>)
 80043cc:	0011      	movs	r1, r2
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7fe f846 	bl	8002460 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	225d      	movs	r2, #93	@ 0x5d
 80043ea:	5c9b      	ldrb	r3, [r3, r2]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d107      	bne.n	8004402 <HAL_SPI_Init+0x346>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	225c      	movs	r2, #92	@ 0x5c
 80043f6:	2100      	movs	r1, #0
 80043f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7fe f877 	bl	80024f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	225d      	movs	r2, #93	@ 0x5d
 8004406:	2102      	movs	r1, #2
 8004408:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2140      	movs	r1, #64	@ 0x40
 8004416:	438a      	bics	r2, r1
 8004418:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	23e0      	movs	r3, #224	@ 0xe0
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	429a      	cmp	r2, r3
 8004424:	d902      	bls.n	800442c <HAL_SPI_Init+0x370>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e002      	b.n	8004432 <HAL_SPI_Init+0x376>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800442c:	2380      	movs	r3, #128	@ 0x80
 800442e:	015b      	lsls	r3, r3, #5
 8004430:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	23f0      	movs	r3, #240	@ 0xf0
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	429a      	cmp	r2, r3
 800443c:	d008      	beq.n	8004450 <HAL_SPI_Init+0x394>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	23e0      	movs	r3, #224	@ 0xe0
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	429a      	cmp	r2, r3
 8004448:	d002      	beq.n	8004450 <HAL_SPI_Init+0x394>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	2382      	movs	r3, #130	@ 0x82
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	401a      	ands	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6899      	ldr	r1, [r3, #8]
 800445e:	2384      	movs	r3, #132	@ 0x84
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	400b      	ands	r3, r1
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2102      	movs	r1, #2
 800446c:	400b      	ands	r3, r1
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	2101      	movs	r1, #1
 8004476:	400b      	ands	r3, r1
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6999      	ldr	r1, [r3, #24]
 800447e:	2380      	movs	r3, #128	@ 0x80
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	400b      	ands	r3, r1
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	2138      	movs	r1, #56	@ 0x38
 800448c:	400b      	ands	r3, r1
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	2180      	movs	r1, #128	@ 0x80
 8004496:	400b      	ands	r3, r1
 8004498:	431a      	orrs	r2, r3
 800449a:	0011      	movs	r1, r2
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044a0:	2380      	movs	r3, #128	@ 0x80
 80044a2:	019b      	lsls	r3, r3, #6
 80044a4:	401a      	ands	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	0c1b      	lsrs	r3, r3, #16
 80044b4:	2204      	movs	r2, #4
 80044b6:	401a      	ands	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	2110      	movs	r1, #16
 80044be:	400b      	ands	r3, r1
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c6:	2108      	movs	r1, #8
 80044c8:	400b      	ands	r3, r1
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68d9      	ldr	r1, [r3, #12]
 80044d0:	23f0      	movs	r3, #240	@ 0xf0
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	400b      	ands	r3, r1
 80044d6:	431a      	orrs	r2, r3
 80044d8:	0011      	movs	r1, r2
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	2380      	movs	r3, #128	@ 0x80
 80044de:	015b      	lsls	r3, r3, #5
 80044e0:	401a      	ands	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	225d      	movs	r2, #93	@ 0x5d
 80044f4:	2101      	movs	r1, #1
 80044f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	0018      	movs	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b004      	add	sp, #16
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	08007b34 	.word	0x08007b34

08004508 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	1dbb      	adds	r3, r7, #6
 8004516:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004518:	231f      	movs	r3, #31
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00c      	beq.n	8004542 <HAL_SPI_Transmit+0x3a>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	2380      	movs	r3, #128	@ 0x80
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	429a      	cmp	r2, r3
 8004532:	d006      	beq.n	8004542 <HAL_SPI_Transmit+0x3a>
 8004534:	23cf      	movs	r3, #207	@ 0xcf
 8004536:	009a      	lsls	r2, r3, #2
 8004538:	4bab      	ldr	r3, [pc, #684]	@ (80047e8 <HAL_SPI_Transmit+0x2e0>)
 800453a:	0011      	movs	r1, r2
 800453c:	0018      	movs	r0, r3
 800453e:	f7fd ff8f 	bl	8002460 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	225c      	movs	r2, #92	@ 0x5c
 8004546:	5c9b      	ldrb	r3, [r3, r2]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_SPI_Transmit+0x48>
 800454c:	2302      	movs	r3, #2
 800454e:	e147      	b.n	80047e0 <HAL_SPI_Transmit+0x2d8>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	225c      	movs	r2, #92	@ 0x5c
 8004554:	2101      	movs	r1, #1
 8004556:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004558:	f7fe f928 	bl	80027ac <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004560:	2316      	movs	r3, #22
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	1dba      	adds	r2, r7, #6
 8004566:	8812      	ldrh	r2, [r2, #0]
 8004568:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	225d      	movs	r2, #93	@ 0x5d
 800456e:	5c9b      	ldrb	r3, [r3, r2]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d004      	beq.n	8004580 <HAL_SPI_Transmit+0x78>
  {
    errorcode = HAL_BUSY;
 8004576:	231f      	movs	r3, #31
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	2202      	movs	r2, #2
 800457c:	701a      	strb	r2, [r3, #0]
    goto error;
 800457e:	e128      	b.n	80047d2 <HAL_SPI_Transmit+0x2ca>
  }

  if ((pData == NULL) || (Size == 0U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_SPI_Transmit+0x86>
 8004586:	1dbb      	adds	r3, r7, #6
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d104      	bne.n	8004598 <HAL_SPI_Transmit+0x90>
  {
    errorcode = HAL_ERROR;
 800458e:	231f      	movs	r3, #31
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
    goto error;
 8004596:	e11c      	b.n	80047d2 <HAL_SPI_Transmit+0x2ca>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	225d      	movs	r2, #93	@ 0x5d
 800459c:	2103      	movs	r1, #3
 800459e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1dba      	adds	r2, r7, #6
 80045b0:	8812      	ldrh	r2, [r2, #0]
 80045b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1dba      	adds	r2, r7, #6
 80045b8:	8812      	ldrh	r2, [r2, #0]
 80045ba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2244      	movs	r2, #68	@ 0x44
 80045c6:	2100      	movs	r1, #0
 80045c8:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2246      	movs	r2, #70	@ 0x46
 80045ce:	2100      	movs	r1, #0
 80045d0:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d110      	bne.n	800460c <HAL_SPI_Transmit+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2140      	movs	r1, #64	@ 0x40
 80045f6:	438a      	bics	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2180      	movs	r1, #128	@ 0x80
 8004606:	01c9      	lsls	r1, r1, #7
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2240      	movs	r2, #64	@ 0x40
 8004614:	4013      	ands	r3, r2
 8004616:	2b40      	cmp	r3, #64	@ 0x40
 8004618:	d007      	beq.n	800462a <HAL_SPI_Transmit+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2140      	movs	r1, #64	@ 0x40
 8004626:	430a      	orrs	r2, r1
 8004628:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	23e0      	movs	r3, #224	@ 0xe0
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	429a      	cmp	r2, r3
 8004634:	d952      	bls.n	80046dc <HAL_SPI_Transmit+0x1d4>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <HAL_SPI_Transmit+0x140>
 800463e:	2316      	movs	r3, #22
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d143      	bne.n	80046d0 <HAL_SPI_Transmit+0x1c8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464c:	881a      	ldrh	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004658:	1c9a      	adds	r2, r3, #2
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800466c:	e030      	b.n	80046d0 <HAL_SPI_Transmit+0x1c8>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2202      	movs	r2, #2
 8004676:	4013      	ands	r3, r2
 8004678:	2b02      	cmp	r3, #2
 800467a:	d112      	bne.n	80046a2 <HAL_SPI_Transmit+0x19a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004680:	881a      	ldrh	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468c:	1c9a      	adds	r2, r3, #2
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046a0:	e016      	b.n	80046d0 <HAL_SPI_Transmit+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a2:	f7fe f883 	bl	80027ac <HAL_GetTick>
 80046a6:	0002      	movs	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d802      	bhi.n	80046b8 <HAL_SPI_Transmit+0x1b0>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	d102      	bne.n	80046be <HAL_SPI_Transmit+0x1b6>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d108      	bne.n	80046d0 <HAL_SPI_Transmit+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80046be:	231f      	movs	r3, #31
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	2203      	movs	r2, #3
 80046c4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	225d      	movs	r2, #93	@ 0x5d
 80046ca:	2101      	movs	r1, #1
 80046cc:	5499      	strb	r1, [r3, r2]
          goto error;
 80046ce:	e080      	b.n	80047d2 <HAL_SPI_Transmit+0x2ca>
    while (hspi->TxXferCount > 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1c9      	bne.n	800466e <HAL_SPI_Transmit+0x166>
 80046da:	e053      	b.n	8004784 <HAL_SPI_Transmit+0x27c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <HAL_SPI_Transmit+0x1e6>
 80046e4:	2316      	movs	r3, #22
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d145      	bne.n	800477a <HAL_SPI_Transmit+0x272>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	7812      	ldrb	r2, [r2, #0]
 80046fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004714:	e031      	b.n	800477a <HAL_SPI_Transmit+0x272>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2202      	movs	r2, #2
 800471e:	4013      	ands	r3, r2
 8004720:	2b02      	cmp	r3, #2
 8004722:	d113      	bne.n	800474c <HAL_SPI_Transmit+0x244>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	330c      	adds	r3, #12
 800472e:	7812      	ldrb	r2, [r2, #0]
 8004730:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800474a:	e016      	b.n	800477a <HAL_SPI_Transmit+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800474c:	f7fe f82e 	bl	80027ac <HAL_GetTick>
 8004750:	0002      	movs	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d802      	bhi.n	8004762 <HAL_SPI_Transmit+0x25a>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	d102      	bne.n	8004768 <HAL_SPI_Transmit+0x260>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d108      	bne.n	800477a <HAL_SPI_Transmit+0x272>
        {
          errorcode = HAL_TIMEOUT;
 8004768:	231f      	movs	r3, #31
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	2203      	movs	r2, #3
 800476e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	225d      	movs	r2, #93	@ 0x5d
 8004774:	2101      	movs	r1, #1
 8004776:	5499      	strb	r1, [r3, r2]
          goto error;
 8004778:	e02b      	b.n	80047d2 <HAL_SPI_Transmit+0x2ca>
    while (hspi->TxXferCount > 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1c8      	bne.n	8004716 <HAL_SPI_Transmit+0x20e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	6839      	ldr	r1, [r7, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	0018      	movs	r0, r3
 800478c:	f000 fcfe 	bl	800518c <SPI_EndRxTxTransaction>
 8004790:	1e03      	subs	r3, r0, #0
 8004792:	d002      	beq.n	800479a <HAL_SPI_Transmit+0x292>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <HAL_SPI_Transmit+0x2b0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d004      	beq.n	80047ca <HAL_SPI_Transmit+0x2c2>
  {
    errorcode = HAL_ERROR;
 80047c0:	231f      	movs	r3, #31
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e003      	b.n	80047d2 <HAL_SPI_Transmit+0x2ca>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	225d      	movs	r2, #93	@ 0x5d
 80047ce:	2101      	movs	r1, #1
 80047d0:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	225c      	movs	r2, #92	@ 0x5c
 80047d6:	2100      	movs	r1, #0
 80047d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80047da:	231f      	movs	r3, #31
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	781b      	ldrb	r3, [r3, #0]
}
 80047e0:	0018      	movs	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b008      	add	sp, #32
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	08007b34 	.word	0x08007b34

080047ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b089      	sub	sp, #36	@ 0x24
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	1dbb      	adds	r3, r7, #6
 80047fa:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047fc:	2117      	movs	r1, #23
 80047fe:	187b      	adds	r3, r7, r1
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	225d      	movs	r2, #93	@ 0x5d
 8004808:	5c9b      	ldrb	r3, [r3, r2]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d003      	beq.n	8004818 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8004810:	187b      	adds	r3, r7, r1
 8004812:	2202      	movs	r2, #2
 8004814:	701a      	strb	r2, [r3, #0]
    goto error;
 8004816:	e12b      	b.n	8004a70 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	2382      	movs	r3, #130	@ 0x82
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	429a      	cmp	r2, r3
 8004822:	d113      	bne.n	800484c <HAL_SPI_Receive+0x60>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10f      	bne.n	800484c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	225d      	movs	r2, #93	@ 0x5d
 8004830:	2104      	movs	r1, #4
 8004832:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004834:	1dbb      	adds	r3, r7, #6
 8004836:	881c      	ldrh	r4, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	0023      	movs	r3, r4
 8004844:	f000 f924 	bl	8004a90 <HAL_SPI_TransmitReceive>
 8004848:	0003      	movs	r3, r0
 800484a:	e118      	b.n	8004a7e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	225c      	movs	r2, #92	@ 0x5c
 8004850:	5c9b      	ldrb	r3, [r3, r2]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_SPI_Receive+0x6e>
 8004856:	2302      	movs	r3, #2
 8004858:	e111      	b.n	8004a7e <HAL_SPI_Receive+0x292>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	225c      	movs	r2, #92	@ 0x5c
 800485e:	2101      	movs	r1, #1
 8004860:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004862:	f7fd ffa3 	bl	80027ac <HAL_GetTick>
 8004866:	0003      	movs	r3, r0
 8004868:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_SPI_Receive+0x8c>
 8004870:	1dbb      	adds	r3, r7, #6
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8004878:	2317      	movs	r3, #23
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	2201      	movs	r2, #1
 800487e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004880:	e0f6      	b.n	8004a70 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	225d      	movs	r2, #93	@ 0x5d
 8004886:	2104      	movs	r1, #4
 8004888:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1dba      	adds	r2, r7, #6
 800489a:	2144      	movs	r1, #68	@ 0x44
 800489c:	8812      	ldrh	r2, [r2, #0]
 800489e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1dba      	adds	r2, r7, #6
 80048a4:	2146      	movs	r1, #70	@ 0x46
 80048a6:	8812      	ldrh	r2, [r2, #0]
 80048a8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	23e0      	movs	r3, #224	@ 0xe0
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d908      	bls.n	80048e6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	496a      	ldr	r1, [pc, #424]	@ (8004a88 <HAL_SPI_Receive+0x29c>)
 80048e0:	400a      	ands	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]
 80048e4:	e008      	b.n	80048f8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2180      	movs	r1, #128	@ 0x80
 80048f2:	0149      	lsls	r1, r1, #5
 80048f4:	430a      	orrs	r2, r1
 80048f6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	2380      	movs	r3, #128	@ 0x80
 80048fe:	021b      	lsls	r3, r3, #8
 8004900:	429a      	cmp	r2, r3
 8004902:	d10f      	bne.n	8004924 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2140      	movs	r1, #64	@ 0x40
 8004910:	438a      	bics	r2, r1
 8004912:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	495b      	ldr	r1, [pc, #364]	@ (8004a8c <HAL_SPI_Receive+0x2a0>)
 8004920:	400a      	ands	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2240      	movs	r2, #64	@ 0x40
 800492c:	4013      	ands	r3, r2
 800492e:	2b40      	cmp	r3, #64	@ 0x40
 8004930:	d007      	beq.n	8004942 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2140      	movs	r1, #64	@ 0x40
 800493e:	430a      	orrs	r2, r1
 8004940:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	23e0      	movs	r3, #224	@ 0xe0
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	429a      	cmp	r2, r3
 800494c:	d900      	bls.n	8004950 <HAL_SPI_Receive+0x164>
 800494e:	e071      	b.n	8004a34 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004950:	e035      	b.n	80049be <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2201      	movs	r2, #1
 800495a:	4013      	ands	r3, r2
 800495c:	2b01      	cmp	r3, #1
 800495e:	d117      	bne.n	8004990 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	001a      	movs	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	7812      	ldrb	r2, [r2, #0]
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2246      	movs	r2, #70	@ 0x46
 8004980:	5a9b      	ldrh	r3, [r3, r2]
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b299      	uxth	r1, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2246      	movs	r2, #70	@ 0x46
 800498c:	5299      	strh	r1, [r3, r2]
 800498e:	e016      	b.n	80049be <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004990:	f7fd ff0c 	bl	80027ac <HAL_GetTick>
 8004994:	0002      	movs	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d802      	bhi.n	80049a6 <HAL_SPI_Receive+0x1ba>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	d102      	bne.n	80049ac <HAL_SPI_Receive+0x1c0>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d108      	bne.n	80049be <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80049ac:	2317      	movs	r3, #23
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	2203      	movs	r2, #3
 80049b2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	225d      	movs	r2, #93	@ 0x5d
 80049b8:	2101      	movs	r1, #1
 80049ba:	5499      	strb	r1, [r3, r2]
          goto error;
 80049bc:	e058      	b.n	8004a70 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2246      	movs	r2, #70	@ 0x46
 80049c2:	5a9b      	ldrh	r3, [r3, r2]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1c3      	bne.n	8004952 <HAL_SPI_Receive+0x166>
 80049ca:	e039      	b.n	8004a40 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2201      	movs	r2, #1
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d115      	bne.n	8004a06 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	b292      	uxth	r2, r2
 80049e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2246      	movs	r2, #70	@ 0x46
 80049f6:	5a9b      	ldrh	r3, [r3, r2]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b299      	uxth	r1, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2246      	movs	r2, #70	@ 0x46
 8004a02:	5299      	strh	r1, [r3, r2]
 8004a04:	e016      	b.n	8004a34 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a06:	f7fd fed1 	bl	80027ac <HAL_GetTick>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d802      	bhi.n	8004a1c <HAL_SPI_Receive+0x230>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	d102      	bne.n	8004a22 <HAL_SPI_Receive+0x236>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d108      	bne.n	8004a34 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8004a22:	2317      	movs	r3, #23
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	2203      	movs	r2, #3
 8004a28:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	225d      	movs	r2, #93	@ 0x5d
 8004a2e:	2101      	movs	r1, #1
 8004a30:	5499      	strb	r1, [r3, r2]
          goto error;
 8004a32:	e01d      	b.n	8004a70 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2246      	movs	r2, #70	@ 0x46
 8004a38:	5a9b      	ldrh	r3, [r3, r2]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1c5      	bne.n	80049cc <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	6839      	ldr	r1, [r7, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	0018      	movs	r0, r3
 8004a48:	f000 fb42 	bl	80050d0 <SPI_EndRxTransaction>
 8004a4c:	1e03      	subs	r3, r0, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8004a5e:	2317      	movs	r3, #23
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	e003      	b.n	8004a70 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	225d      	movs	r2, #93	@ 0x5d
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	225c      	movs	r2, #92	@ 0x5c
 8004a74:	2100      	movs	r1, #0
 8004a76:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a78:	2317      	movs	r3, #23
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	781b      	ldrb	r3, [r3, #0]
}
 8004a7e:	0018      	movs	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b007      	add	sp, #28
 8004a84:	bd90      	pop	{r4, r7, pc}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	ffffefff 	.word	0xffffefff
 8004a8c:	ffffbfff 	.word	0xffffbfff

08004a90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	@ 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	001a      	movs	r2, r3
 8004a9e:	1cbb      	adds	r3, r7, #2
 8004aa0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004aa6:	2323      	movs	r3, #35	@ 0x23
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d006      	beq.n	8004ac4 <HAL_SPI_TransmitReceive+0x34>
 8004ab6:	239d      	movs	r3, #157	@ 0x9d
 8004ab8:	00da      	lsls	r2, r3, #3
 8004aba:	4ba1      	ldr	r3, [pc, #644]	@ (8004d40 <HAL_SPI_TransmitReceive+0x2b0>)
 8004abc:	0011      	movs	r1, r2
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f7fd fcce 	bl	8002460 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	225c      	movs	r2, #92	@ 0x5c
 8004ac8:	5c9b      	ldrb	r3, [r3, r2]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_SPI_TransmitReceive+0x42>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e1c9      	b.n	8004e66 <HAL_SPI_TransmitReceive+0x3d6>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	225c      	movs	r2, #92	@ 0x5c
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ada:	f7fd fe67 	bl	80027ac <HAL_GetTick>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ae2:	201b      	movs	r0, #27
 8004ae4:	183b      	adds	r3, r7, r0
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	215d      	movs	r1, #93	@ 0x5d
 8004aea:	5c52      	ldrb	r2, [r2, r1]
 8004aec:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004af4:	2312      	movs	r3, #18
 8004af6:	18fb      	adds	r3, r7, r3
 8004af8:	1cba      	adds	r2, r7, #2
 8004afa:	8812      	ldrh	r2, [r2, #0]
 8004afc:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004afe:	183b      	adds	r3, r7, r0
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d011      	beq.n	8004b2a <HAL_SPI_TransmitReceive+0x9a>
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	2382      	movs	r3, #130	@ 0x82
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d107      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x90>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d103      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x90>
 8004b18:	183b      	adds	r3, r7, r0
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d004      	beq.n	8004b2a <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_BUSY;
 8004b20:	2323      	movs	r3, #35	@ 0x23
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	2202      	movs	r2, #2
 8004b26:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b28:	e196      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x3c8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d006      	beq.n	8004b3e <HAL_SPI_TransmitReceive+0xae>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_SPI_TransmitReceive+0xae>
 8004b36:	1cbb      	adds	r3, r7, #2
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d104      	bne.n	8004b48 <HAL_SPI_TransmitReceive+0xb8>
  {
    errorcode = HAL_ERROR;
 8004b3e:	2323      	movs	r3, #35	@ 0x23
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b46:	e187      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x3c8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	225d      	movs	r2, #93	@ 0x5d
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d003      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0xcc>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	225d      	movs	r2, #93	@ 0x5d
 8004b58:	2105      	movs	r1, #5
 8004b5a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1cba      	adds	r2, r7, #2
 8004b6c:	2146      	movs	r1, #70	@ 0x46
 8004b6e:	8812      	ldrh	r2, [r2, #0]
 8004b70:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1cba      	adds	r2, r7, #2
 8004b76:	2144      	movs	r1, #68	@ 0x44
 8004b78:	8812      	ldrh	r2, [r2, #0]
 8004b7a:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1cba      	adds	r2, r7, #2
 8004b86:	8812      	ldrh	r2, [r2, #0]
 8004b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	1cba      	adds	r2, r7, #2
 8004b8e:	8812      	ldrh	r2, [r2, #0]
 8004b90:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	23e0      	movs	r3, #224	@ 0xe0
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d908      	bls.n	8004bbc <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4963      	ldr	r1, [pc, #396]	@ (8004d44 <HAL_SPI_TransmitReceive+0x2b4>)
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	e008      	b.n	8004bce <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2180      	movs	r1, #128	@ 0x80
 8004bc8:	0149      	lsls	r1, r1, #5
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2240      	movs	r2, #64	@ 0x40
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b40      	cmp	r3, #64	@ 0x40
 8004bda:	d007      	beq.n	8004bec <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2140      	movs	r1, #64	@ 0x40
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	23e0      	movs	r3, #224	@ 0xe0
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d800      	bhi.n	8004bfa <HAL_SPI_TransmitReceive+0x16a>
 8004bf8:	e083      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x272>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_SPI_TransmitReceive+0x17e>
 8004c02:	2312      	movs	r3, #18
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d000      	beq.n	8004c0e <HAL_SPI_TransmitReceive+0x17e>
 8004c0c:	e06d      	b.n	8004cea <HAL_SPI_TransmitReceive+0x25a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	1c9a      	adds	r2, r3, #2
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c32:	e05a      	b.n	8004cea <HAL_SPI_TransmitReceive+0x25a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d11b      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x1ea>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d016      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0x1ea>
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d113      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c56:	881a      	ldrh	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c62:	1c9a      	adds	r2, r3, #2
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2201      	movs	r2, #1
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d11c      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x232>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2246      	movs	r2, #70	@ 0x46
 8004c8c:	5a9b      	ldrh	r3, [r3, r2]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d016      	beq.n	8004cc2 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	1c9a      	adds	r2, r3, #2
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2246      	movs	r2, #70	@ 0x46
 8004cb0:	5a9b      	ldrh	r3, [r3, r2]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b299      	uxth	r1, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2246      	movs	r2, #70	@ 0x46
 8004cbc:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cc2:	f7fd fd73 	bl	80027ac <HAL_GetTick>
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d80b      	bhi.n	8004cea <HAL_SPI_TransmitReceive+0x25a>
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	d008      	beq.n	8004cea <HAL_SPI_TransmitReceive+0x25a>
      {
        errorcode = HAL_TIMEOUT;
 8004cd8:	2323      	movs	r3, #35	@ 0x23
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	2203      	movs	r2, #3
 8004cde:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	225d      	movs	r2, #93	@ 0x5d
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	5499      	strb	r1, [r3, r2]
        goto error;
 8004ce8:	e0b6      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x3c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d19f      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x1a4>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2246      	movs	r2, #70	@ 0x46
 8004cf8:	5a9b      	ldrh	r3, [r3, r2]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d199      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x1a4>
 8004d00:	e08e      	b.n	8004e20 <HAL_SPI_TransmitReceive+0x390>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x286>
 8004d0a:	2312      	movs	r3, #18
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d000      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x286>
 8004d14:	e079      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x37a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	330c      	adds	r3, #12
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d3c:	e065      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x37a>
 8004d3e:	46c0      	nop			@ (mov r8, r8)
 8004d40:	08007b34 	.word	0x08007b34
 8004d44:	ffffefff 	.word	0xffffefff
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d11c      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x300>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d017      	beq.n	8004d90 <HAL_SPI_TransmitReceive+0x300>
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d114      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x300>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	7812      	ldrb	r2, [r2, #0]
 8004d72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2201      	movs	r2, #1
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d11e      	bne.n	8004ddc <HAL_SPI_TransmitReceive+0x34c>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2246      	movs	r2, #70	@ 0x46
 8004da2:	5a9b      	ldrh	r3, [r3, r2]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d018      	beq.n	8004ddc <HAL_SPI_TransmitReceive+0x34c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	001a      	movs	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	7812      	ldrb	r2, [r2, #0]
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2246      	movs	r2, #70	@ 0x46
 8004dca:	5a9b      	ldrh	r3, [r3, r2]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b299      	uxth	r1, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2246      	movs	r2, #70	@ 0x46
 8004dd6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ddc:	f7fd fce6 	bl	80027ac <HAL_GetTick>
 8004de0:	0002      	movs	r2, r0
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d802      	bhi.n	8004df2 <HAL_SPI_TransmitReceive+0x362>
 8004dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dee:	3301      	adds	r3, #1
 8004df0:	d102      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x368>
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d108      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x37a>
      {
        errorcode = HAL_TIMEOUT;
 8004df8:	2323      	movs	r3, #35	@ 0x23
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	225d      	movs	r2, #93	@ 0x5d
 8004e04:	2101      	movs	r1, #1
 8004e06:	5499      	strb	r1, [r3, r2]
        goto error;
 8004e08:	e026      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x3c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d199      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x2b8>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2246      	movs	r2, #70	@ 0x46
 8004e18:	5a9b      	ldrh	r3, [r3, r2]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d193      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x2b8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	0018      	movs	r0, r3
 8004e28:	f000 f9b0 	bl	800518c <SPI_EndRxTxTransaction>
 8004e2c:	1e03      	subs	r3, r0, #0
 8004e2e:	d006      	beq.n	8004e3e <HAL_SPI_TransmitReceive+0x3ae>
  {
    errorcode = HAL_ERROR;
 8004e30:	2323      	movs	r3, #35	@ 0x23
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d004      	beq.n	8004e50 <HAL_SPI_TransmitReceive+0x3c0>
  {
    errorcode = HAL_ERROR;
 8004e46:	2323      	movs	r3, #35	@ 0x23
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e003      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x3c8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	225d      	movs	r2, #93	@ 0x5d
 8004e54:	2101      	movs	r1, #1
 8004e56:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	225c      	movs	r2, #92	@ 0x5c
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004e60:	2323      	movs	r3, #35	@ 0x23
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	781b      	ldrb	r3, [r3, #0]
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b00a      	add	sp, #40	@ 0x28
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			@ (mov r8, r8)

08004e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	1dfb      	adds	r3, r7, #7
 8004e7e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e80:	f7fd fc94 	bl	80027ac <HAL_GetTick>
 8004e84:	0002      	movs	r2, r0
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	18d3      	adds	r3, r2, r3
 8004e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e90:	f7fd fc8c 	bl	80027ac <HAL_GetTick>
 8004e94:	0003      	movs	r3, r0
 8004e96:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e98:	4b3a      	ldr	r3, [pc, #232]	@ (8004f84 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	015b      	lsls	r3, r3, #5
 8004e9e:	0d1b      	lsrs	r3, r3, #20
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	4353      	muls	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea6:	e058      	b.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	d055      	beq.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eae:	f7fd fc7d 	bl	80027ac <HAL_GetTick>
 8004eb2:	0002      	movs	r2, r0
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d902      	bls.n	8004ec4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d142      	bne.n	8004f4a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	21e0      	movs	r1, #224	@ 0xe0
 8004ed0:	438a      	bics	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	2382      	movs	r3, #130	@ 0x82
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d113      	bne.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	2380      	movs	r3, #128	@ 0x80
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d005      	beq.n	8004ef8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	2380      	movs	r3, #128	@ 0x80
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d107      	bne.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2140      	movs	r1, #64	@ 0x40
 8004f04:	438a      	bics	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f0c:	2380      	movs	r3, #128	@ 0x80
 8004f0e:	019b      	lsls	r3, r3, #6
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d110      	bne.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	491a      	ldr	r1, [pc, #104]	@ (8004f88 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004f20:	400a      	ands	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2180      	movs	r1, #128	@ 0x80
 8004f30:	0189      	lsls	r1, r1, #6
 8004f32:	430a      	orrs	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	225d      	movs	r2, #93	@ 0x5d
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	225c      	movs	r2, #92	@ 0x5c
 8004f42:	2100      	movs	r1, #0
 8004f44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e017      	b.n	8004f7a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	4013      	ands	r3, r2
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	425a      	negs	r2, r3
 8004f6a:	4153      	adcs	r3, r2
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	001a      	movs	r2, r3
 8004f70:	1dfb      	adds	r3, r7, #7
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d197      	bne.n	8004ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b008      	add	sp, #32
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			@ (mov r8, r8)
 8004f84:	20000020 	.word	0x20000020
 8004f88:	ffffdfff 	.word	0xffffdfff

08004f8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	@ 0x28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f9a:	2317      	movs	r3, #23
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fa2:	f7fd fc03 	bl	80027ac <HAL_GetTick>
 8004fa6:	0002      	movs	r2, r0
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	18d3      	adds	r3, r2, r3
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004fb2:	f7fd fbfb 	bl	80027ac <HAL_GetTick>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fc2:	4b41      	ldr	r3, [pc, #260]	@ (80050c8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	0013      	movs	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	00da      	lsls	r2, r3, #3
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	0d1b      	lsrs	r3, r3, #20
 8004fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd4:	4353      	muls	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fd8:	e068      	b.n	80050ac <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	23c0      	movs	r3, #192	@ 0xc0
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d10a      	bne.n	8004ffa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d107      	bne.n	8004ffa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	2117      	movs	r1, #23
 8004ff2:	187b      	adds	r3, r7, r1
 8004ff4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ff6:	187b      	adds	r3, r7, r1
 8004ff8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	d055      	beq.n	80050ac <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005000:	f7fd fbd4 	bl	80027ac <HAL_GetTick>
 8005004:	0002      	movs	r2, r0
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500c:	429a      	cmp	r2, r3
 800500e:	d902      	bls.n	8005016 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d142      	bne.n	800509c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	21e0      	movs	r1, #224	@ 0xe0
 8005022:	438a      	bics	r2, r1
 8005024:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	2382      	movs	r3, #130	@ 0x82
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	429a      	cmp	r2, r3
 8005030:	d113      	bne.n	800505a <SPI_WaitFifoStateUntilTimeout+0xce>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	2380      	movs	r3, #128	@ 0x80
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	429a      	cmp	r2, r3
 800503c:	d005      	beq.n	800504a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	2380      	movs	r3, #128	@ 0x80
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	429a      	cmp	r2, r3
 8005048:	d107      	bne.n	800505a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2140      	movs	r1, #64	@ 0x40
 8005056:	438a      	bics	r2, r1
 8005058:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800505e:	2380      	movs	r3, #128	@ 0x80
 8005060:	019b      	lsls	r3, r3, #6
 8005062:	429a      	cmp	r2, r3
 8005064:	d110      	bne.n	8005088 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4916      	ldr	r1, [pc, #88]	@ (80050cc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005072:	400a      	ands	r2, r1
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2180      	movs	r1, #128	@ 0x80
 8005082:	0189      	lsls	r1, r1, #6
 8005084:	430a      	orrs	r2, r1
 8005086:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	225d      	movs	r2, #93	@ 0x5d
 800508c:	2101      	movs	r1, #1
 800508e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	225c      	movs	r2, #92	@ 0x5c
 8005094:	2100      	movs	r1, #0
 8005096:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e010      	b.n	80050be <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	4013      	ands	r3, r2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d18e      	bne.n	8004fda <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	0018      	movs	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b00a      	add	sp, #40	@ 0x28
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	20000020 	.word	0x20000020
 80050cc:	ffffdfff 	.word	0xffffdfff

080050d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	2382      	movs	r3, #130	@ 0x82
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d113      	bne.n	8005110 <SPI_EndRxTransaction+0x40>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	2380      	movs	r3, #128	@ 0x80
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d005      	beq.n	8005100 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	2380      	movs	r3, #128	@ 0x80
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d107      	bne.n	8005110 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2140      	movs	r1, #64	@ 0x40
 800510c:	438a      	bics	r2, r1
 800510e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	0013      	movs	r3, r2
 800511a:	2200      	movs	r2, #0
 800511c:	2180      	movs	r1, #128	@ 0x80
 800511e:	f7ff fea7 	bl	8004e70 <SPI_WaitFlagStateUntilTimeout>
 8005122:	1e03      	subs	r3, r0, #0
 8005124:	d007      	beq.n	8005136 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800512a:	2220      	movs	r2, #32
 800512c:	431a      	orrs	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e026      	b.n	8005184 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	2382      	movs	r3, #130	@ 0x82
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	429a      	cmp	r2, r3
 8005140:	d11f      	bne.n	8005182 <SPI_EndRxTransaction+0xb2>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	2380      	movs	r3, #128	@ 0x80
 8005148:	021b      	lsls	r3, r3, #8
 800514a:	429a      	cmp	r2, r3
 800514c:	d005      	beq.n	800515a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	2380      	movs	r3, #128	@ 0x80
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	429a      	cmp	r2, r3
 8005158:	d113      	bne.n	8005182 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	23c0      	movs	r3, #192	@ 0xc0
 800515e:	00d9      	lsls	r1, r3, #3
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	0013      	movs	r3, r2
 8005168:	2200      	movs	r2, #0
 800516a:	f7ff ff0f 	bl	8004f8c <SPI_WaitFifoStateUntilTimeout>
 800516e:	1e03      	subs	r3, r0, #0
 8005170:	d007      	beq.n	8005182 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005176:	2220      	movs	r2, #32
 8005178:	431a      	orrs	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e000      	b.n	8005184 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	0018      	movs	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	b004      	add	sp, #16
 800518a:	bd80      	pop	{r7, pc}

0800518c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	23c0      	movs	r3, #192	@ 0xc0
 800519c:	0159      	lsls	r1, r3, #5
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	0013      	movs	r3, r2
 80051a6:	2200      	movs	r2, #0
 80051a8:	f7ff fef0 	bl	8004f8c <SPI_WaitFifoStateUntilTimeout>
 80051ac:	1e03      	subs	r3, r0, #0
 80051ae:	d007      	beq.n	80051c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b4:	2220      	movs	r2, #32
 80051b6:	431a      	orrs	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e027      	b.n	8005210 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	0013      	movs	r3, r2
 80051ca:	2200      	movs	r2, #0
 80051cc:	2180      	movs	r1, #128	@ 0x80
 80051ce:	f7ff fe4f 	bl	8004e70 <SPI_WaitFlagStateUntilTimeout>
 80051d2:	1e03      	subs	r3, r0, #0
 80051d4:	d007      	beq.n	80051e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051da:	2220      	movs	r2, #32
 80051dc:	431a      	orrs	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e014      	b.n	8005210 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	23c0      	movs	r3, #192	@ 0xc0
 80051ea:	00d9      	lsls	r1, r3, #3
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	0013      	movs	r3, r2
 80051f4:	2200      	movs	r2, #0
 80051f6:	f7ff fec9 	bl	8004f8c <SPI_WaitFifoStateUntilTimeout>
 80051fa:	1e03      	subs	r3, r0, #0
 80051fc:	d007      	beq.n	800520e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005202:	2220      	movs	r2, #32
 8005204:	431a      	orrs	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e000      	b.n	8005210 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b004      	add	sp, #16
 8005216:	bd80      	pop	{r7, pc}

08005218 <RadioGetFskBandwidthRegValue>:
 * Returns the known FSK bandwidth registers value
 *
 * @param  bandwidth Bandwidth value in Hz
 * @retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue(uint32_t bandwidth){
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	if (bandwidth == 0){
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <RadioGetFskBandwidthRegValue+0x12>
		return (0x1F);
 8005226:	231f      	movs	r3, #31
 8005228:	e02b      	b.n	8005282 <RadioGetFskBandwidthRegValue+0x6a>
	}

	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++){
 800522a:	230f      	movs	r3, #15
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e020      	b.n	8005276 <RadioGetFskBandwidthRegValue+0x5e>
		if ((bandwidth >= FskBandwidths[i].bandwidth) && (bandwidth < FskBandwidths[i + 1].bandwidth)){
 8005234:	210f      	movs	r1, #15
 8005236:	187b      	adds	r3, r7, r1
 8005238:	781a      	ldrb	r2, [r3, #0]
 800523a:	4b14      	ldr	r3, [pc, #80]	@ (800528c <RadioGetFskBandwidthRegValue+0x74>)
 800523c:	00d2      	lsls	r2, r2, #3
 800523e:	58d3      	ldr	r3, [r2, r3]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d311      	bcc.n	800526a <RadioGetFskBandwidthRegValue+0x52>
 8005246:	187b      	adds	r3, r7, r1
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	4b0f      	ldr	r3, [pc, #60]	@ (800528c <RadioGetFskBandwidthRegValue+0x74>)
 800524e:	00d2      	lsls	r2, r2, #3
 8005250:	58d3      	ldr	r3, [r2, r3]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d208      	bcs.n	800526a <RadioGetFskBandwidthRegValue+0x52>
			return FskBandwidths[i + 1].RegValue;
 8005258:	187b      	adds	r3, r7, r1
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	4a0b      	ldr	r2, [pc, #44]	@ (800528c <RadioGetFskBandwidthRegValue+0x74>)
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	18d3      	adds	r3, r2, r3
 8005264:	3304      	adds	r3, #4
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	e00b      	b.n	8005282 <RadioGetFskBandwidthRegValue+0x6a>
	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++){
 800526a:	210f      	movs	r1, #15
 800526c:	187b      	adds	r3, r7, r1
 800526e:	781a      	ldrb	r2, [r3, #0]
 8005270:	187b      	adds	r3, r7, r1
 8005272:	3201      	adds	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	230f      	movs	r3, #15
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b14      	cmp	r3, #20
 800527e:	d9d9      	bls.n	8005234 <RadioGetFskBandwidthRegValue+0x1c>
		}
	}
	// In case value not found, return bandwidth 0
	return (0x1F);
 8005280:	231f      	movs	r3, #31
}
 8005282:	0018      	movs	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	b004      	add	sp, #16
 8005288:	bd80      	pop	{r7, pc}
 800528a:	46c0      	nop			@ (mov r8, r8)
 800528c:	08007c7c 	.word	0x08007c7c

08005290 <RadioInit>:

void RadioInit(RadioEvents_t *events){
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 8005298:	4b0f      	ldr	r3, [pc, #60]	@ (80052d8 <RadioInit+0x48>)
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
	SX126xInit();
 800529e:	f001 f8fd 	bl	800649c <SX126xInit>
	SX126xSetStandby(STDBY_RC);
 80052a2:	2000      	movs	r0, #0
 80052a4:	f001 fa64 	bl	8006770 <SX126xSetStandby>
	SX126xSetRegulatorMode(USE_LDO);
 80052a8:	2000      	movs	r0, #0
 80052aa:	f001 fb55 	bl	8006958 <SX126xSetRegulatorMode>
	SX126xSetBufferBaseAddress(0x00, 0x00);
 80052ae:	2100      	movs	r1, #0
 80052b0:	2000      	movs	r0, #0
 80052b2:	f001 fed3 	bl	800705c <SX126xSetBufferBaseAddress>
	SX126xSetTxParams(0, RADIO_RAMP_200_US);
 80052b6:	2104      	movs	r1, #4
 80052b8:	2000      	movs	r0, #0
 80052ba:	f001 fcbb 	bl	8006c34 <SX126xSetTxParams>
	SX126xSetDioIrqParams(IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 80052be:	4907      	ldr	r1, [pc, #28]	@ (80052dc <RadioInit+0x4c>)
 80052c0:	4806      	ldr	r0, [pc, #24]	@ (80052dc <RadioInit+0x4c>)
 80052c2:	2300      	movs	r3, #0
 80052c4:	2200      	movs	r2, #0
 80052c6:	f001 fbd9 	bl	8006a7c <SX126xSetDioIrqParams>
//	TxTimeoutTimer.oneShot = true;
//	RxTimeoutTimer.oneShot = true;
//	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
//	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);

	IrqFired = false;
 80052ca:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <RadioInit+0x50>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]
}
 80052d0:	46c0      	nop			@ (mov r8, r8)
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000274 	.word	0x20000274
 80052dc:	0000ffff 	.word	0x0000ffff
 80052e0:	2000026b 	.word	0x2000026b

080052e4 <RadioReInit>:

void RadioReInit(RadioEvents_t *events){
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <RadioReInit+0x20>)
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	601a      	str	r2, [r3, #0]
	SX126xReInit();
 80052f2:	f001 f8e5 	bl	80064c0 <SX126xReInit>
//	TxTimeoutTimer.oneShot = true;
//	RxTimeoutTimer.oneShot = true;
//	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
//	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);

	IrqFired = false;
 80052f6:	4b04      	ldr	r3, [pc, #16]	@ (8005308 <RadioReInit+0x24>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	701a      	strb	r2, [r3, #0]
}
 80052fc:	46c0      	nop			@ (mov r8, r8)
 80052fe:	46bd      	mov	sp, r7
 8005300:	b002      	add	sp, #8
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000274 	.word	0x20000274
 8005308:	2000026b 	.word	0x2000026b

0800530c <RadioGetStatus>:

RadioState_t RadioGetStatus(void){
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
	switch (SX126xGetOperatingMode()){
 8005310:	f001 f8dc 	bl	80064cc <SX126xGetOperatingMode>
 8005314:	0003      	movs	r3, r0
 8005316:	2b07      	cmp	r3, #7
 8005318:	d009      	beq.n	800532e <RadioGetStatus+0x22>
 800531a:	dc0a      	bgt.n	8005332 <RadioGetStatus+0x26>
 800531c:	2b04      	cmp	r3, #4
 800531e:	d002      	beq.n	8005326 <RadioGetStatus+0x1a>
 8005320:	2b05      	cmp	r3, #5
 8005322:	d002      	beq.n	800532a <RadioGetStatus+0x1e>
 8005324:	e005      	b.n	8005332 <RadioGetStatus+0x26>
		case MODE_TX:
		return RF_TX_RUNNING;
 8005326:	2302      	movs	r3, #2
 8005328:	e004      	b.n	8005334 <RadioGetStatus+0x28>
		case MODE_RX:
		return RF_RX_RUNNING;
 800532a:	2301      	movs	r3, #1
 800532c:	e002      	b.n	8005334 <RadioGetStatus+0x28>
		case MODE_CAD:
		return RF_CAD;
 800532e:	2303      	movs	r3, #3
 8005330:	e000      	b.n	8005334 <RadioGetStatus+0x28>
		default:
		return RF_IDLE;
 8005332:	2300      	movs	r3, #0
	}
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <RadioSetModem>:

void RadioSetModem(RadioModems_t modem){
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	0002      	movs	r2, r0
 8005344:	1dfb      	adds	r3, r7, #7
 8005346:	701a      	strb	r2, [r3, #0]
	switch (modem){
 8005348:	1dfb      	adds	r3, r7, #7
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d00a      	beq.n	8005366 <RadioSetModem+0x2a>
		default:
		case MODEM_FSK:
			SX126xSetPacketType(PACKET_TYPE_GFSK);
 8005350:	2000      	movs	r0, #0
 8005352:	f001 fc4f 	bl	8006bf4 <SX126xSetPacketType>
			// When switching to GFSK mode the LoRa SyncWord register value is reset
			// Thus, we also reset the RadioPublicNetwork variable
			RadioPublicNetwork.Current = false;
 8005356:	4b11      	ldr	r3, [pc, #68]	@ (800539c <RadioSetModem+0x60>)
 8005358:	2200      	movs	r2, #0
 800535a:	705a      	strb	r2, [r3, #1]
			_modem = modem;
 800535c:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <RadioSetModem+0x64>)
 800535e:	1dfa      	adds	r2, r7, #7
 8005360:	7812      	ldrb	r2, [r2, #0]
 8005362:	701a      	strb	r2, [r3, #0]
		break;
 8005364:	e016      	b.n	8005394 <RadioSetModem+0x58>
		case MODEM_LORA:
			SX126xSetPacketType(PACKET_TYPE_LORA);
 8005366:	2001      	movs	r0, #1
 8005368:	f001 fc44 	bl	8006bf4 <SX126xSetPacketType>
			// Public/Private network register is reset when switching modems
			if (RadioPublicNetwork.Current != RadioPublicNetwork.Previous){
 800536c:	4b0b      	ldr	r3, [pc, #44]	@ (800539c <RadioSetModem+0x60>)
 800536e:	785a      	ldrb	r2, [r3, #1]
 8005370:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <RadioSetModem+0x60>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d008      	beq.n	800538a <RadioSetModem+0x4e>
				RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 8005378:	4b08      	ldr	r3, [pc, #32]	@ (800539c <RadioSetModem+0x60>)
 800537a:	781a      	ldrb	r2, [r3, #0]
 800537c:	4b07      	ldr	r3, [pc, #28]	@ (800539c <RadioSetModem+0x60>)
 800537e:	705a      	strb	r2, [r3, #1]
				RadioSetPublicNetwork(RadioPublicNetwork.Current);
 8005380:	4b06      	ldr	r3, [pc, #24]	@ (800539c <RadioSetModem+0x60>)
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	0018      	movs	r0, r3
 8005386:	f000 feb1 	bl	80060ec <RadioSetPublicNetwork>
			}
			_modem = modem;
 800538a:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <RadioSetModem+0x64>)
 800538c:	1dfa      	adds	r2, r7, #7
 800538e:	7812      	ldrb	r2, [r2, #0]
 8005390:	701a      	strb	r2, [r3, #0]
		break;
 8005392:	46c0      	nop			@ (mov r8, r8)
	}
}
 8005394:	46c0      	nop			@ (mov r8, r8)
 8005396:	46bd      	mov	sp, r7
 8005398:	b002      	add	sp, #8
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000270 	.word	0x20000270
 80053a0:	2000026e 	.word	0x2000026e

080053a4 <RadioSetChannel>:

void RadioSetChannel(uint32_t freq){
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	SX126xSetRfFrequency(freq);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	0018      	movs	r0, r3
 80053b0:	f001 fbda 	bl	8006b68 <SX126xSetRfFrequency>
}
 80053b4:	46c0      	nop			@ (mov r8, r8)
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b002      	add	sp, #8
 80053ba:	bd80      	pop	{r7, pc}

080053bc <RadioIsChannelFree>:

bool RadioIsChannelFree(RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime){
 80053bc:	b5b0      	push	{r4, r5, r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	0011      	movs	r1, r2
 80053c6:	607b      	str	r3, [r7, #4]
 80053c8:	230f      	movs	r3, #15
 80053ca:	18fb      	adds	r3, r7, r3
 80053cc:	1c02      	adds	r2, r0, #0
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	230c      	movs	r3, #12
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	1c0a      	adds	r2, r1, #0
 80053d6:	801a      	strh	r2, [r3, #0]
	bool status = true;
 80053d8:	2317      	movs	r3, #23
 80053da:	18fb      	adds	r3, r7, r3
 80053dc:	2201      	movs	r2, #1
 80053de:	701a      	strb	r2, [r3, #0]
	int16_t rssi = 0;
 80053e0:	2314      	movs	r3, #20
 80053e2:	18fb      	adds	r3, r7, r3
 80053e4:	2200      	movs	r2, #0
 80053e6:	801a      	strh	r2, [r3, #0]
	uint32_t carrierSenseTime = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]

	if (RadioGetStatus() != RF_IDLE){
 80053ec:	f7ff ff8e 	bl	800530c <RadioGetStatus>
 80053f0:	1e03      	subs	r3, r0, #0
 80053f2:	d001      	beq.n	80053f8 <RadioIsChannelFree+0x3c>
		return false;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e039      	b.n	800546c <RadioIsChannelFree+0xb0>
	}

	RadioSetModem(modem);
 80053f8:	230f      	movs	r3, #15
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	0018      	movs	r0, r3
 8005400:	f7ff ff9c 	bl	800533c <RadioSetModem>
	RadioSetChannel(freq);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	0018      	movs	r0, r3
 8005408:	f7ff ffcc 	bl	80053a4 <RadioSetChannel>
	RadioRx(0);
 800540c:	2000      	movs	r0, #0
 800540e:	f000 fd21 	bl	8005e54 <RadioRx>

	HAL_Delay(1);
 8005412:	2001      	movs	r0, #1
 8005414:	f7fd f9d4 	bl	80027c0 <HAL_Delay>

	carrierSenseTime = HAL_GetTick();
 8005418:	f7fd f9c8 	bl	80027ac <HAL_GetTick>
 800541c:	0003      	movs	r3, r0
 800541e:	613b      	str	r3, [r7, #16]

	while (HAL_GetTick() - carrierSenseTime < maxCarrierSenseTime){
 8005420:	e017      	b.n	8005452 <RadioIsChannelFree+0x96>
		rssi = RadioRssi(modem);
 8005422:	2514      	movs	r5, #20
 8005424:	197c      	adds	r4, r7, r5
 8005426:	230f      	movs	r3, #15
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	0018      	movs	r0, r3
 800542e:	f000 fdc4 	bl	8005fba <RadioRssi>
 8005432:	0003      	movs	r3, r0
 8005434:	8023      	strh	r3, [r4, #0]
		if (rssi > rssiThresh){
 8005436:	197a      	adds	r2, r7, r5
 8005438:	230c      	movs	r3, #12
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	2100      	movs	r1, #0
 800543e:	5e52      	ldrsh	r2, [r2, r1]
 8005440:	2100      	movs	r1, #0
 8005442:	5e5b      	ldrsh	r3, [r3, r1]
 8005444:	429a      	cmp	r2, r3
 8005446:	dd04      	ble.n	8005452 <RadioIsChannelFree+0x96>
			status = false;
 8005448:	2317      	movs	r3, #23
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
			break;
 8005450:	e007      	b.n	8005462 <RadioIsChannelFree+0xa6>
	while (HAL_GetTick() - carrierSenseTime < maxCarrierSenseTime){
 8005452:	f7fd f9ab 	bl	80027ac <HAL_GetTick>
 8005456:	0002      	movs	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	429a      	cmp	r2, r3
 8005460:	d8df      	bhi.n	8005422 <RadioIsChannelFree+0x66>
		}
	}
	RadioSleep();
 8005462:	f000 fcd7 	bl	8005e14 <RadioSleep>
	return status;
 8005466:	2317      	movs	r3, #23
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	781b      	ldrb	r3, [r3, #0]
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	b006      	add	sp, #24
 8005472:	bdb0      	pop	{r4, r5, r7, pc}

08005474 <RadioRandom>:

uint32_t RadioRandom(void){
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
	uint32_t rnd = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
	/*
	 * Radio setup for random number generation
	 */
	// Set LoRa modem ON
	RadioSetModem(MODEM_LORA);
 800547e:	2001      	movs	r0, #1
 8005480:	f7ff ff5c 	bl	800533c <RadioSetModem>
	// Set radio in continuous reception
	SX126xSetRx(0);
 8005484:	2000      	movs	r0, #0
 8005486:	f001 f9b1 	bl	80067ec <SX126xSetRx>

	rnd = SX126xGetRandom();
 800548a:	f001 f93d 	bl	8006708 <SX126xGetRandom>
 800548e:	0003      	movs	r3, r0
 8005490:	607b      	str	r3, [r7, #4]
	RadioSleep();
 8005492:	f000 fcbf 	bl	8005e14 <RadioSleep>

	return rnd;
 8005496:	687b      	ldr	r3, [r7, #4]
}
 8005498:	0018      	movs	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	b002      	add	sp, #8
 800549e:	bd80      	pop	{r7, pc}

080054a0 <RadioSetRxConfig>:
					  uint32_t bandwidthAfc, uint16_t preambleLen,
					  uint16_t symbTimeout, bool fixLen,
					  uint8_t payloadLen,
					  bool crcOn, bool freqHopOn, uint8_t hopPeriod,
					  bool iqInverted, bool rxContinuous)
{
 80054a0:	b5b0      	push	{r4, r5, r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	0019      	movs	r1, r3
 80054ac:	230f      	movs	r3, #15
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	1c02      	adds	r2, r0, #0
 80054b2:	701a      	strb	r2, [r3, #0]
 80054b4:	230e      	movs	r3, #14
 80054b6:	18fb      	adds	r3, r7, r3
 80054b8:	1c0a      	adds	r2, r1, #0
 80054ba:	701a      	strb	r2, [r3, #0]

	RxContinuous = rxContinuous;
 80054bc:	4bc2      	ldr	r3, [pc, #776]	@ (80057c8 <RadioSetRxConfig+0x328>)
 80054be:	2224      	movs	r2, #36	@ 0x24
 80054c0:	2128      	movs	r1, #40	@ 0x28
 80054c2:	1852      	adds	r2, r2, r1
 80054c4:	19d2      	adds	r2, r2, r7
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	701a      	strb	r2, [r3, #0]
	if (rxContinuous == true){
 80054ca:	2324      	movs	r3, #36	@ 0x24
 80054cc:	185b      	adds	r3, r3, r1
 80054ce:	19db      	adds	r3, r3, r7
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <RadioSetRxConfig+0x3e>
		symbTimeout = 0;
 80054d6:	2330      	movs	r3, #48	@ 0x30
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	2200      	movs	r2, #0
 80054dc:	801a      	strh	r2, [r3, #0]
	}
	if (fixLen == true){
 80054de:	2334      	movs	r3, #52	@ 0x34
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <RadioSetRxConfig+0x54>
		MaxPayloadLength = payloadLen;
 80054e8:	4bb8      	ldr	r3, [pc, #736]	@ (80057cc <RadioSetRxConfig+0x32c>)
 80054ea:	2238      	movs	r2, #56	@ 0x38
 80054ec:	18ba      	adds	r2, r7, r2
 80054ee:	7812      	ldrb	r2, [r2, #0]
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	e002      	b.n	80054fa <RadioSetRxConfig+0x5a>
	}
	else{
		MaxPayloadLength = 0xFF;
 80054f4:	4bb5      	ldr	r3, [pc, #724]	@ (80057cc <RadioSetRxConfig+0x32c>)
 80054f6:	22ff      	movs	r2, #255	@ 0xff
 80054f8:	701a      	strb	r2, [r3, #0]
	}

	switch (modem){
 80054fa:	230f      	movs	r3, #15
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <RadioSetRxConfig+0x6c>
 8005504:	2b01      	cmp	r3, #1
 8005506:	d100      	bne.n	800550a <RadioSetRxConfig+0x6a>
 8005508:	e0af      	b.n	800566a <RadioSetRxConfig+0x1ca>
			// WORKAROUND END
			// Timeout Max, Timeout handled directly in SetRx function
			RxTimeout = RXTIMEOUT_LORA_MAX;
		break;
	}
}
 800550a:	e159      	b.n	80057c0 <RadioSetRxConfig+0x320>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 800550c:	2000      	movs	r0, #0
 800550e:	f001 fa03 	bl	8006918 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005512:	4baf      	ldr	r3, [pc, #700]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005514:	2240      	movs	r2, #64	@ 0x40
 8005516:	2100      	movs	r1, #0
 8005518:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800551a:	4bad      	ldr	r3, [pc, #692]	@ (80057d0 <RadioSetRxConfig+0x330>)
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	645a      	str	r2, [r3, #68]	@ 0x44
			SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005520:	4bab      	ldr	r3, [pc, #684]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005522:	224c      	movs	r2, #76	@ 0x4c
 8005524:	210b      	movs	r1, #11
 8005526:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue(bandwidth);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	0018      	movs	r0, r3
 800552c:	f7ff fe74 	bl	8005218 <RadioGetFskBandwidthRegValue>
 8005530:	0003      	movs	r3, r0
 8005532:	0019      	movs	r1, r3
 8005534:	4ba6      	ldr	r3, [pc, #664]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005536:	224d      	movs	r2, #77	@ 0x4d
 8005538:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800553a:	4ba5      	ldr	r3, [pc, #660]	@ (80057d0 <RadioSetRxConfig+0x330>)
 800553c:	2200      	movs	r2, #0
 800553e:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 8005540:	232c      	movs	r3, #44	@ 0x2c
 8005542:	18fb      	adds	r3, r7, r3
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	b29a      	uxth	r2, r3
 800554a:	4ba1      	ldr	r3, [pc, #644]	@ (80057d0 <RadioSetRxConfig+0x330>)
 800554c:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800554e:	4ba0      	ldr	r3, [pc, #640]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005550:	2204      	movs	r2, #4
 8005552:	771a      	strb	r2, [r3, #28]
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8005554:	4b9e      	ldr	r3, [pc, #632]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005556:	2218      	movs	r2, #24
 8005558:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800555a:	4b9d      	ldr	r3, [pc, #628]	@ (80057d0 <RadioSetRxConfig+0x330>)
 800555c:	2200      	movs	r2, #0
 800555e:	779a      	strb	r2, [r3, #30]
			SX126x.PacketParams.Params.Gfsk.HeaderType = (fixLen == true) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005560:	2334      	movs	r3, #52	@ 0x34
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	4053      	eors	r3, r2
 800556a:	b2db      	uxtb	r3, r3
 800556c:	001a      	movs	r2, r3
 800556e:	4b98      	ldr	r3, [pc, #608]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005570:	77da      	strb	r2, [r3, #31]
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005572:	4b96      	ldr	r3, [pc, #600]	@ (80057cc <RadioSetRxConfig+0x32c>)
 8005574:	7819      	ldrb	r1, [r3, #0]
 8005576:	4b96      	ldr	r3, [pc, #600]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005578:	2220      	movs	r2, #32
 800557a:	5499      	strb	r1, [r3, r2]
			if (crcOn == true){
 800557c:	233c      	movs	r3, #60	@ 0x3c
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <RadioSetRxConfig+0xf0>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005586:	4b92      	ldr	r3, [pc, #584]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005588:	2221      	movs	r2, #33	@ 0x21
 800558a:	21f2      	movs	r1, #242	@ 0xf2
 800558c:	5499      	strb	r1, [r3, r2]
 800558e:	e003      	b.n	8005598 <RadioSetRxConfig+0xf8>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005590:	4b8f      	ldr	r3, [pc, #572]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005592:	2221      	movs	r2, #33	@ 0x21
 8005594:	2101      	movs	r1, #1
 8005596:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005598:	4b8d      	ldr	r3, [pc, #564]	@ (80057d0 <RadioSetRxConfig+0x330>)
 800559a:	2222      	movs	r2, #34	@ 0x22
 800559c:	2101      	movs	r1, #1
 800559e:	5499      	strb	r1, [r3, r2]
			RadioStandby();
 80055a0:	f000 fc4f 	bl	8005e42 <RadioStandby>
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 80055a4:	4b8a      	ldr	r3, [pc, #552]	@ (80057d0 <RadioSetRxConfig+0x330>)
 80055a6:	2240      	movs	r2, #64	@ 0x40
 80055a8:	5c9b      	ldrb	r3, [r3, r2]
 80055aa:	1e5a      	subs	r2, r3, #1
 80055ac:	4193      	sbcs	r3, r2
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7ff fec3 	bl	800533c <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 80055b6:	4b87      	ldr	r3, [pc, #540]	@ (80057d4 <RadioSetRxConfig+0x334>)
 80055b8:	0018      	movs	r0, r3
 80055ba:	f001 fbb5 	bl	8006d28 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 80055be:	4b86      	ldr	r3, [pc, #536]	@ (80057d8 <RadioSetRxConfig+0x338>)
 80055c0:	0018      	movs	r0, r3
 80055c2:	f001 fc57 	bl	8006e74 <SX126xSetPacketParams>
			syncWord[0] = 0xC1;
 80055c6:	2110      	movs	r1, #16
 80055c8:	187b      	adds	r3, r7, r1
 80055ca:	22c1      	movs	r2, #193	@ 0xc1
 80055cc:	701a      	strb	r2, [r3, #0]
			syncWord[1] = 0x94;
 80055ce:	187b      	adds	r3, r7, r1
 80055d0:	2294      	movs	r2, #148	@ 0x94
 80055d2:	705a      	strb	r2, [r3, #1]
			syncWord[2] = 0xC1;
 80055d4:	187b      	adds	r3, r7, r1
 80055d6:	22c1      	movs	r2, #193	@ 0xc1
 80055d8:	709a      	strb	r2, [r3, #2]
			syncWord[3] = 0x00;
 80055da:	187b      	adds	r3, r7, r1
 80055dc:	2200      	movs	r2, #0
 80055de:	70da      	strb	r2, [r3, #3]
			syncWord[4] = 0x00;
 80055e0:	187b      	adds	r3, r7, r1
 80055e2:	2200      	movs	r2, #0
 80055e4:	711a      	strb	r2, [r3, #4]
			syncWord[5] = 0x00;
 80055e6:	187b      	adds	r3, r7, r1
 80055e8:	2200      	movs	r2, #0
 80055ea:	715a      	strb	r2, [r3, #5]
			syncWord[6] = 0x00;
 80055ec:	187b      	adds	r3, r7, r1
 80055ee:	2200      	movs	r2, #0
 80055f0:	719a      	strb	r2, [r3, #6]
			syncWord[7] = 0x00;
 80055f2:	187b      	adds	r3, r7, r1
 80055f4:	2200      	movs	r2, #0
 80055f6:	71da      	strb	r2, [r3, #7]
			SX126xSetSyncWord(syncWord);
 80055f8:	187b      	adds	r3, r7, r1
 80055fa:	0018      	movs	r0, r3
 80055fc:	f000 ffe5 	bl	80065ca <SX126xSetSyncWord>
			SX126xSetWhiteningSeed(0x01FF);
 8005600:	4b76      	ldr	r3, [pc, #472]	@ (80057dc <RadioSetRxConfig+0x33c>)
 8005602:	0018      	movs	r0, r3
 8005604:	f001 f83e 	bl	8006684 <SX126xSetWhiteningSeed>
			RxTimeout = (uint32_t)(symbTimeout * ((1.0 / (double)datarate) * 8.0) * 1000);
 8005608:	2330      	movs	r3, #48	@ 0x30
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	0018      	movs	r0, r3
 8005610:	f7fc fcaa 	bl	8001f68 <__aeabi_i2d>
 8005614:	0004      	movs	r4, r0
 8005616:	000d      	movs	r5, r1
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7fc fcd3 	bl	8001fc4 <__aeabi_ui2d>
 800561e:	0002      	movs	r2, r0
 8005620:	000b      	movs	r3, r1
 8005622:	2000      	movs	r0, #0
 8005624:	496e      	ldr	r1, [pc, #440]	@ (80057e0 <RadioSetRxConfig+0x340>)
 8005626:	f7fb f9bb 	bl	80009a0 <__aeabi_ddiv>
 800562a:	0002      	movs	r2, r0
 800562c:	000b      	movs	r3, r1
 800562e:	0010      	movs	r0, r2
 8005630:	0019      	movs	r1, r3
 8005632:	2200      	movs	r2, #0
 8005634:	4b6b      	ldr	r3, [pc, #428]	@ (80057e4 <RadioSetRxConfig+0x344>)
 8005636:	f7fb fdf7 	bl	8001228 <__aeabi_dmul>
 800563a:	0002      	movs	r2, r0
 800563c:	000b      	movs	r3, r1
 800563e:	0020      	movs	r0, r4
 8005640:	0029      	movs	r1, r5
 8005642:	f7fb fdf1 	bl	8001228 <__aeabi_dmul>
 8005646:	0002      	movs	r2, r0
 8005648:	000b      	movs	r3, r1
 800564a:	0010      	movs	r0, r2
 800564c:	0019      	movs	r1, r3
 800564e:	2200      	movs	r2, #0
 8005650:	4b65      	ldr	r3, [pc, #404]	@ (80057e8 <RadioSetRxConfig+0x348>)
 8005652:	f7fb fde9 	bl	8001228 <__aeabi_dmul>
 8005656:	0002      	movs	r2, r0
 8005658:	000b      	movs	r3, r1
 800565a:	0010      	movs	r0, r2
 800565c:	0019      	movs	r1, r3
 800565e:	f7fa fe1d 	bl	800029c <__aeabi_d2uiz>
 8005662:	0002      	movs	r2, r0
 8005664:	4b61      	ldr	r3, [pc, #388]	@ (80057ec <RadioSetRxConfig+0x34c>)
 8005666:	601a      	str	r2, [r3, #0]
		break;
 8005668:	e0aa      	b.n	80057c0 <RadioSetRxConfig+0x320>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 800566a:	2000      	movs	r0, #0
 800566c:	f001 f954 	bl	8006918 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126xSetLoRaSymbNumTimeout(symbTimeout);
 8005670:	2330      	movs	r3, #48	@ 0x30
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	0018      	movs	r0, r3
 800567a:	f001 f95d 	bl	8006938 <SX126xSetLoRaSymbNumTimeout>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800567e:	4b54      	ldr	r3, [pc, #336]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005680:	2240      	movs	r2, #64	@ 0x40
 8005682:	2101      	movs	r1, #1
 8005684:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)datarate;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	b2d9      	uxtb	r1, r3
 800568a:	4b51      	ldr	r3, [pc, #324]	@ (80057d0 <RadioSetRxConfig+0x330>)
 800568c:	2250      	movs	r2, #80	@ 0x50
 800568e:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8005690:	4a57      	ldr	r2, [pc, #348]	@ (80057f0 <RadioSetRxConfig+0x350>)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	18d3      	adds	r3, r2, r3
 8005696:	7819      	ldrb	r1, [r3, #0]
 8005698:	4b4d      	ldr	r3, [pc, #308]	@ (80057d0 <RadioSetRxConfig+0x330>)
 800569a:	2251      	movs	r2, #81	@ 0x51
 800569c:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)coderate;
 800569e:	4b4c      	ldr	r3, [pc, #304]	@ (80057d0 <RadioSetRxConfig+0x330>)
 80056a0:	220e      	movs	r2, #14
 80056a2:	18ba      	adds	r2, r7, r2
 80056a4:	2152      	movs	r1, #82	@ 0x52
 80056a6:	7812      	ldrb	r2, [r2, #0]
 80056a8:	545a      	strb	r2, [r3, r1]
			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12))) ||
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d105      	bne.n	80056bc <RadioSetRxConfig+0x21c>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b0b      	cmp	r3, #11
 80056b4:	d008      	beq.n	80056c8 <RadioSetRxConfig+0x228>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b0c      	cmp	r3, #12
 80056ba:	d005      	beq.n	80056c8 <RadioSetRxConfig+0x228>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d107      	bne.n	80056d2 <RadioSetRxConfig+0x232>
				((bandwidth == 1) && (datarate == 12))){
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	d104      	bne.n	80056d2 <RadioSetRxConfig+0x232>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80056c8:	4b41      	ldr	r3, [pc, #260]	@ (80057d0 <RadioSetRxConfig+0x330>)
 80056ca:	2253      	movs	r2, #83	@ 0x53
 80056cc:	2101      	movs	r1, #1
 80056ce:	5499      	strb	r1, [r3, r2]
 80056d0:	e003      	b.n	80056da <RadioSetRxConfig+0x23a>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80056d2:	4b3f      	ldr	r3, [pc, #252]	@ (80057d0 <RadioSetRxConfig+0x330>)
 80056d4:	2253      	movs	r2, #83	@ 0x53
 80056d6:	2100      	movs	r1, #0
 80056d8:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 80056da:	4b3d      	ldr	r3, [pc, #244]	@ (80057d0 <RadioSetRxConfig+0x330>)
 80056dc:	2201      	movs	r2, #1
 80056de:	761a      	strb	r2, [r3, #24]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 80056e0:	4b3b      	ldr	r3, [pc, #236]	@ (80057d0 <RadioSetRxConfig+0x330>)
 80056e2:	2250      	movs	r2, #80	@ 0x50
 80056e4:	5c9b      	ldrb	r3, [r3, r2]
 80056e6:	2b05      	cmp	r3, #5
 80056e8:	d004      	beq.n	80056f4 <RadioSetRxConfig+0x254>
				(SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6)){
 80056ea:	4b39      	ldr	r3, [pc, #228]	@ (80057d0 <RadioSetRxConfig+0x330>)
 80056ec:	2250      	movs	r2, #80	@ 0x50
 80056ee:	5c9b      	ldrb	r3, [r3, r2]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 80056f0:	2b06      	cmp	r3, #6
 80056f2:	d10e      	bne.n	8005712 <RadioSetRxConfig+0x272>
				if (preambleLen < 12){
 80056f4:	232c      	movs	r3, #44	@ 0x2c
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	2b0b      	cmp	r3, #11
 80056fc:	d803      	bhi.n	8005706 <RadioSetRxConfig+0x266>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 80056fe:	4b34      	ldr	r3, [pc, #208]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005700:	220c      	movs	r2, #12
 8005702:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 8005704:	e00a      	b.n	800571c <RadioSetRxConfig+0x27c>
					SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005706:	4b32      	ldr	r3, [pc, #200]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005708:	222c      	movs	r2, #44	@ 0x2c
 800570a:	18ba      	adds	r2, r7, r2
 800570c:	8812      	ldrh	r2, [r2, #0]
 800570e:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 8005710:	e004      	b.n	800571c <RadioSetRxConfig+0x27c>
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005712:	4b2f      	ldr	r3, [pc, #188]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005714:	222c      	movs	r2, #44	@ 0x2c
 8005716:	18ba      	adds	r2, r7, r2
 8005718:	8812      	ldrh	r2, [r2, #0]
 800571a:	849a      	strh	r2, [r3, #36]	@ 0x24
			SX126x.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t)fixLen;
 800571c:	2334      	movs	r3, #52	@ 0x34
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	7819      	ldrb	r1, [r3, #0]
 8005722:	4b2b      	ldr	r3, [pc, #172]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005724:	2226      	movs	r2, #38	@ 0x26
 8005726:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005728:	4b28      	ldr	r3, [pc, #160]	@ (80057cc <RadioSetRxConfig+0x32c>)
 800572a:	7819      	ldrb	r1, [r3, #0]
 800572c:	4b28      	ldr	r3, [pc, #160]	@ (80057d0 <RadioSetRxConfig+0x330>)
 800572e:	2227      	movs	r2, #39	@ 0x27
 8005730:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t)crcOn;
 8005732:	233c      	movs	r3, #60	@ 0x3c
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	7819      	ldrb	r1, [r3, #0]
 8005738:	4b25      	ldr	r3, [pc, #148]	@ (80057d0 <RadioSetRxConfig+0x330>)
 800573a:	2228      	movs	r2, #40	@ 0x28
 800573c:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.InvertIQ = (RadioLoRaIQModes_t)iqInverted;
 800573e:	2320      	movs	r3, #32
 8005740:	2228      	movs	r2, #40	@ 0x28
 8005742:	189b      	adds	r3, r3, r2
 8005744:	19db      	adds	r3, r3, r7
 8005746:	7819      	ldrb	r1, [r3, #0]
 8005748:	4b21      	ldr	r3, [pc, #132]	@ (80057d0 <RadioSetRxConfig+0x330>)
 800574a:	2229      	movs	r2, #41	@ 0x29
 800574c:	5499      	strb	r1, [r3, r2]
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 800574e:	4b20      	ldr	r3, [pc, #128]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005750:	2240      	movs	r2, #64	@ 0x40
 8005752:	5c9b      	ldrb	r3, [r3, r2]
 8005754:	1e5a      	subs	r2, r3, #1
 8005756:	4193      	sbcs	r3, r2
 8005758:	b2db      	uxtb	r3, r3
 800575a:	0018      	movs	r0, r3
 800575c:	f7ff fdee 	bl	800533c <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 8005760:	4b1c      	ldr	r3, [pc, #112]	@ (80057d4 <RadioSetRxConfig+0x334>)
 8005762:	0018      	movs	r0, r3
 8005764:	f001 fae0 	bl	8006d28 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 8005768:	4b1b      	ldr	r3, [pc, #108]	@ (80057d8 <RadioSetRxConfig+0x338>)
 800576a:	0018      	movs	r0, r3
 800576c:	f001 fb82 	bl	8006e74 <SX126xSetPacketParams>
			if (SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED){
 8005770:	4b17      	ldr	r3, [pc, #92]	@ (80057d0 <RadioSetRxConfig+0x330>)
 8005772:	2229      	movs	r2, #41	@ 0x29
 8005774:	5c9b      	ldrb	r3, [r3, r2]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d10f      	bne.n	800579a <RadioSetRxConfig+0x2fa>
				SX126xWriteRegister(0x0736, SX126xReadRegister(0x0736) & ~(1 << 2));
 800577a:	4b1e      	ldr	r3, [pc, #120]	@ (80057f4 <RadioSetRxConfig+0x354>)
 800577c:	0018      	movs	r0, r3
 800577e:	f001 fee7 	bl	8007550 <SX126xReadRegister>
 8005782:	0003      	movs	r3, r0
 8005784:	001a      	movs	r2, r3
 8005786:	2304      	movs	r3, #4
 8005788:	439a      	bics	r2, r3
 800578a:	0013      	movs	r3, r2
 800578c:	b2db      	uxtb	r3, r3
 800578e:	4a19      	ldr	r2, [pc, #100]	@ (80057f4 <RadioSetRxConfig+0x354>)
 8005790:	0019      	movs	r1, r3
 8005792:	0010      	movs	r0, r2
 8005794:	f001 fe82 	bl	800749c <SX126xWriteRegister>
 8005798:	e00d      	b.n	80057b6 <RadioSetRxConfig+0x316>
				SX126xWriteRegister(0x0736, SX126xReadRegister(0x0736) | (1 << 2));
 800579a:	4b16      	ldr	r3, [pc, #88]	@ (80057f4 <RadioSetRxConfig+0x354>)
 800579c:	0018      	movs	r0, r3
 800579e:	f001 fed7 	bl	8007550 <SX126xReadRegister>
 80057a2:	0003      	movs	r3, r0
 80057a4:	001a      	movs	r2, r3
 80057a6:	2304      	movs	r3, #4
 80057a8:	4313      	orrs	r3, r2
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	4a11      	ldr	r2, [pc, #68]	@ (80057f4 <RadioSetRxConfig+0x354>)
 80057ae:	0019      	movs	r1, r3
 80057b0:	0010      	movs	r0, r2
 80057b2:	f001 fe73 	bl	800749c <SX126xWriteRegister>
			RxTimeout = RXTIMEOUT_LORA_MAX;
 80057b6:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <RadioSetRxConfig+0x34c>)
 80057b8:	22e0      	movs	r2, #224	@ 0xe0
 80057ba:	0092      	lsls	r2, r2, #2
 80057bc:	601a      	str	r2, [r3, #0]
		break;
 80057be:	46c0      	nop			@ (mov r8, r8)
}
 80057c0:	46c0      	nop			@ (mov r8, r8)
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b006      	add	sp, #24
 80057c6:	bdb0      	pop	{r4, r5, r7, pc}
 80057c8:	20000154 	.word	0x20000154
 80057cc:	200000c0 	.word	0x200000c0
 80057d0:	20000278 	.word	0x20000278
 80057d4:	200002b8 	.word	0x200002b8
 80057d8:	20000290 	.word	0x20000290
 80057dc:	000001ff 	.word	0x000001ff
 80057e0:	3ff00000 	.word	0x3ff00000
 80057e4:	40200000 	.word	0x40200000
 80057e8:	408f4000 	.word	0x408f4000
 80057ec:	20000150 	.word	0x20000150
 80057f0:	08007d2c 	.word	0x08007d2c
 80057f4:	00000736 	.word	0x00000736

080057f8 <RadioSetTxConfig>:

void RadioSetTxConfig(RadioModems_t modem, int8_t power, uint32_t fdev,
					  uint32_t bandwidth, uint32_t datarate,
					  uint8_t coderate, uint16_t preambleLen,
					  bool fixLen, bool crcOn, bool freqHopOn,
					  uint8_t hopPeriod, bool iqInverted, uint32_t timeout){
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60ba      	str	r2, [r7, #8]
 8005800:	607b      	str	r3, [r7, #4]
 8005802:	240f      	movs	r4, #15
 8005804:	193b      	adds	r3, r7, r4
 8005806:	1c02      	adds	r2, r0, #0
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	230e      	movs	r3, #14
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	1c0a      	adds	r2, r1, #0
 8005810:	701a      	strb	r2, [r3, #0]

	switch (modem){
 8005812:	193b      	adds	r3, r7, r4
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <RadioSetTxConfig+0x2a>
 800581a:	2b01      	cmp	r3, #1
 800581c:	d100      	bne.n	8005820 <RadioSetTxConfig+0x28>
 800581e:	e07e      	b.n	800591e <RadioSetTxConfig+0x126>
 8005820:	e103      	b.n	8005a2a <RadioSetTxConfig+0x232>
		case MODEM_FSK:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005822:	4b9d      	ldr	r3, [pc, #628]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005824:	2240      	movs	r2, #64	@ 0x40
 8005826:	2100      	movs	r1, #0
 8005828:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800582a:	4b9b      	ldr	r3, [pc, #620]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 800582c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800582e:	645a      	str	r2, [r3, #68]	@ 0x44

			SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005830:	4b99      	ldr	r3, [pc, #612]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005832:	224c      	movs	r2, #76	@ 0x4c
 8005834:	210b      	movs	r1, #11
 8005836:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue(bandwidth);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	0018      	movs	r0, r3
 800583c:	f7ff fcec 	bl	8005218 <RadioGetFskBandwidthRegValue>
 8005840:	0003      	movs	r3, r0
 8005842:	0019      	movs	r1, r3
 8005844:	4b94      	ldr	r3, [pc, #592]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005846:	224d      	movs	r2, #77	@ 0x4d
 8005848:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 800584a:	4b93      	ldr	r3, [pc, #588]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	649a      	str	r2, [r3, #72]	@ 0x48

			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005850:	4b91      	ldr	r3, [pc, #580]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005852:	2200      	movs	r2, #0
 8005854:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 8005856:	2328      	movs	r3, #40	@ 0x28
 8005858:	2108      	movs	r1, #8
 800585a:	185b      	adds	r3, r3, r1
 800585c:	19db      	adds	r3, r3, r7
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	b29a      	uxth	r2, r3
 8005864:	4b8c      	ldr	r3, [pc, #560]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005866:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005868:	4b8b      	ldr	r3, [pc, #556]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 800586a:	2204      	movs	r2, #4
 800586c:	771a      	strb	r2, [r3, #28]
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800586e:	4b8a      	ldr	r3, [pc, #552]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005870:	2218      	movs	r2, #24
 8005872:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005874:	4b88      	ldr	r3, [pc, #544]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005876:	2200      	movs	r2, #0
 8005878:	779a      	strb	r2, [r3, #30]
			SX126x.PacketParams.Params.Gfsk.HeaderType = (fixLen == true) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800587a:	232c      	movs	r3, #44	@ 0x2c
 800587c:	185b      	adds	r3, r3, r1
 800587e:	19db      	adds	r3, r3, r7
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2201      	movs	r2, #1
 8005884:	4053      	eors	r3, r2
 8005886:	b2db      	uxtb	r3, r3
 8005888:	001a      	movs	r2, r3
 800588a:	4b83      	ldr	r3, [pc, #524]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 800588c:	77da      	strb	r2, [r3, #31]

			if (crcOn == true){
 800588e:	2330      	movs	r3, #48	@ 0x30
 8005890:	185b      	adds	r3, r3, r1
 8005892:	19db      	adds	r3, r3, r7
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d004      	beq.n	80058a4 <RadioSetTxConfig+0xac>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800589a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 800589c:	2221      	movs	r2, #33	@ 0x21
 800589e:	21f2      	movs	r1, #242	@ 0xf2
 80058a0:	5499      	strb	r1, [r3, r2]
 80058a2:	e003      	b.n	80058ac <RadioSetTxConfig+0xb4>
			}
			else{
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80058a4:	4b7c      	ldr	r3, [pc, #496]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 80058a6:	2221      	movs	r2, #33	@ 0x21
 80058a8:	2101      	movs	r1, #1
 80058aa:	5499      	strb	r1, [r3, r2]
			}
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80058ac:	4b7a      	ldr	r3, [pc, #488]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 80058ae:	2222      	movs	r2, #34	@ 0x22
 80058b0:	2101      	movs	r1, #1
 80058b2:	5499      	strb	r1, [r3, r2]

			RadioStandby();
 80058b4:	f000 fac5 	bl	8005e42 <RadioStandby>
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 80058b8:	4b77      	ldr	r3, [pc, #476]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 80058ba:	2240      	movs	r2, #64	@ 0x40
 80058bc:	5c9b      	ldrb	r3, [r3, r2]
 80058be:	1e5a      	subs	r2, r3, #1
 80058c0:	4193      	sbcs	r3, r2
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	0018      	movs	r0, r3
 80058c6:	f7ff fd39 	bl	800533c <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 80058ca:	4b74      	ldr	r3, [pc, #464]	@ (8005a9c <RadioSetTxConfig+0x2a4>)
 80058cc:	0018      	movs	r0, r3
 80058ce:	f001 fa2b 	bl	8006d28 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 80058d2:	4b73      	ldr	r3, [pc, #460]	@ (8005aa0 <RadioSetTxConfig+0x2a8>)
 80058d4:	0018      	movs	r0, r3
 80058d6:	f001 facd 	bl	8006e74 <SX126xSetPacketParams>
			uint8_t syncWord[8];
			syncWord[0] = 0xC1;
 80058da:	2110      	movs	r1, #16
 80058dc:	187b      	adds	r3, r7, r1
 80058de:	22c1      	movs	r2, #193	@ 0xc1
 80058e0:	701a      	strb	r2, [r3, #0]
			syncWord[1] = 0x94;
 80058e2:	187b      	adds	r3, r7, r1
 80058e4:	2294      	movs	r2, #148	@ 0x94
 80058e6:	705a      	strb	r2, [r3, #1]
			syncWord[2] = 0xC1;
 80058e8:	187b      	adds	r3, r7, r1
 80058ea:	22c1      	movs	r2, #193	@ 0xc1
 80058ec:	709a      	strb	r2, [r3, #2]
			syncWord[3] = 0x00;
 80058ee:	187b      	adds	r3, r7, r1
 80058f0:	2200      	movs	r2, #0
 80058f2:	70da      	strb	r2, [r3, #3]
			syncWord[4] = 0x00;
 80058f4:	187b      	adds	r3, r7, r1
 80058f6:	2200      	movs	r2, #0
 80058f8:	711a      	strb	r2, [r3, #4]
			syncWord[5] = 0x00;
 80058fa:	187b      	adds	r3, r7, r1
 80058fc:	2200      	movs	r2, #0
 80058fe:	715a      	strb	r2, [r3, #5]
			syncWord[6] = 0x00;
 8005900:	187b      	adds	r3, r7, r1
 8005902:	2200      	movs	r2, #0
 8005904:	719a      	strb	r2, [r3, #6]
			syncWord[7] = 0x00;
 8005906:	187b      	adds	r3, r7, r1
 8005908:	2200      	movs	r2, #0
 800590a:	71da      	strb	r2, [r3, #7]
			SX126xSetSyncWord(syncWord);
 800590c:	187b      	adds	r3, r7, r1
 800590e:	0018      	movs	r0, r3
 8005910:	f000 fe5b 	bl	80065ca <SX126xSetSyncWord>
			// SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
			SX126xSetWhiteningSeed(0x01FF);
 8005914:	4b63      	ldr	r3, [pc, #396]	@ (8005aa4 <RadioSetTxConfig+0x2ac>)
 8005916:	0018      	movs	r0, r3
 8005918:	f000 feb4 	bl	8006684 <SX126xSetWhiteningSeed>
		break;
 800591c:	e085      	b.n	8005a2a <RadioSetTxConfig+0x232>

		case MODEM_LORA:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800591e:	4b5e      	ldr	r3, [pc, #376]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005920:	2240      	movs	r2, #64	@ 0x40
 8005922:	2101      	movs	r1, #1
 8005924:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)datarate;
 8005926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005928:	b2d9      	uxtb	r1, r3
 800592a:	4b5b      	ldr	r3, [pc, #364]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 800592c:	2250      	movs	r2, #80	@ 0x50
 800592e:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8005930:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa8 <RadioSetTxConfig+0x2b0>)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	18d3      	adds	r3, r2, r3
 8005936:	7819      	ldrb	r1, [r3, #0]
 8005938:	4b57      	ldr	r3, [pc, #348]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 800593a:	2251      	movs	r2, #81	@ 0x51
 800593c:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)coderate;
 800593e:	4b56      	ldr	r3, [pc, #344]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005940:	2224      	movs	r2, #36	@ 0x24
 8005942:	2108      	movs	r1, #8
 8005944:	1852      	adds	r2, r2, r1
 8005946:	19d2      	adds	r2, r2, r7
 8005948:	2152      	movs	r1, #82	@ 0x52
 800594a:	7812      	ldrb	r2, [r2, #0]
 800594c:	545a      	strb	r2, [r3, r1]

			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12))) ||
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d105      	bne.n	8005960 <RadioSetTxConfig+0x168>
 8005954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005956:	2b0b      	cmp	r3, #11
 8005958:	d008      	beq.n	800596c <RadioSetTxConfig+0x174>
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	2b0c      	cmp	r3, #12
 800595e:	d005      	beq.n	800596c <RadioSetTxConfig+0x174>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d107      	bne.n	8005976 <RadioSetTxConfig+0x17e>
				((bandwidth == 1) && (datarate == 12))){
 8005966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005968:	2b0c      	cmp	r3, #12
 800596a:	d104      	bne.n	8005976 <RadioSetTxConfig+0x17e>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800596c:	4b4a      	ldr	r3, [pc, #296]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 800596e:	2253      	movs	r2, #83	@ 0x53
 8005970:	2101      	movs	r1, #1
 8005972:	5499      	strb	r1, [r3, r2]
 8005974:	e003      	b.n	800597e <RadioSetTxConfig+0x186>
			}
			else{
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005976:	4b48      	ldr	r3, [pc, #288]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005978:	2253      	movs	r2, #83	@ 0x53
 800597a:	2100      	movs	r1, #0
 800597c:	5499      	strb	r1, [r3, r2]
			}

			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800597e:	4b46      	ldr	r3, [pc, #280]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005980:	2201      	movs	r2, #1
 8005982:	761a      	strb	r2, [r3, #24]

			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 8005984:	4b44      	ldr	r3, [pc, #272]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005986:	2250      	movs	r2, #80	@ 0x50
 8005988:	5c9b      	ldrb	r3, [r3, r2]
 800598a:	2b05      	cmp	r3, #5
 800598c:	d004      	beq.n	8005998 <RadioSetTxConfig+0x1a0>
				(SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6)){
 800598e:	4b42      	ldr	r3, [pc, #264]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005990:	2250      	movs	r2, #80	@ 0x50
 8005992:	5c9b      	ldrb	r3, [r3, r2]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 8005994:	2b06      	cmp	r3, #6
 8005996:	d112      	bne.n	80059be <RadioSetTxConfig+0x1c6>
				if (preambleLen < 12){
 8005998:	2328      	movs	r3, #40	@ 0x28
 800599a:	2208      	movs	r2, #8
 800599c:	189b      	adds	r3, r3, r2
 800599e:	19db      	adds	r3, r3, r7
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	2b0b      	cmp	r3, #11
 80059a4:	d803      	bhi.n	80059ae <RadioSetTxConfig+0x1b6>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 80059a6:	4b3c      	ldr	r3, [pc, #240]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 80059a8:	220c      	movs	r2, #12
 80059aa:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 80059ac:	e00e      	b.n	80059cc <RadioSetTxConfig+0x1d4>
				}
				else{
					SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80059ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 80059b0:	2228      	movs	r2, #40	@ 0x28
 80059b2:	2108      	movs	r1, #8
 80059b4:	1852      	adds	r2, r2, r1
 80059b6:	19d2      	adds	r2, r2, r7
 80059b8:	8812      	ldrh	r2, [r2, #0]
 80059ba:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 80059bc:	e006      	b.n	80059cc <RadioSetTxConfig+0x1d4>
				}
			}
			else{
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80059be:	4b36      	ldr	r3, [pc, #216]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 80059c0:	2228      	movs	r2, #40	@ 0x28
 80059c2:	2108      	movs	r1, #8
 80059c4:	1852      	adds	r2, r2, r1
 80059c6:	19d2      	adds	r2, r2, r7
 80059c8:	8812      	ldrh	r2, [r2, #0]
 80059ca:	849a      	strh	r2, [r3, #36]	@ 0x24
			}

			SX126x.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t)fixLen;
 80059cc:	232c      	movs	r3, #44	@ 0x2c
 80059ce:	2008      	movs	r0, #8
 80059d0:	181b      	adds	r3, r3, r0
 80059d2:	19db      	adds	r3, r3, r7
 80059d4:	7819      	ldrb	r1, [r3, #0]
 80059d6:	4b30      	ldr	r3, [pc, #192]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 80059d8:	2226      	movs	r2, #38	@ 0x26
 80059da:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80059dc:	4b33      	ldr	r3, [pc, #204]	@ (8005aac <RadioSetTxConfig+0x2b4>)
 80059de:	7819      	ldrb	r1, [r3, #0]
 80059e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 80059e2:	2227      	movs	r2, #39	@ 0x27
 80059e4:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t)crcOn;
 80059e6:	2330      	movs	r3, #48	@ 0x30
 80059e8:	181b      	adds	r3, r3, r0
 80059ea:	19db      	adds	r3, r3, r7
 80059ec:	7819      	ldrb	r1, [r3, #0]
 80059ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 80059f0:	2228      	movs	r2, #40	@ 0x28
 80059f2:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.InvertIQ = (RadioLoRaIQModes_t)iqInverted;
 80059f4:	233c      	movs	r3, #60	@ 0x3c
 80059f6:	181b      	adds	r3, r3, r0
 80059f8:	19db      	adds	r3, r3, r7
 80059fa:	7819      	ldrb	r1, [r3, #0]
 80059fc:	4b26      	ldr	r3, [pc, #152]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 80059fe:	2229      	movs	r2, #41	@ 0x29
 8005a00:	5499      	strb	r1, [r3, r2]

			RadioStandby();
 8005a02:	f000 fa1e 	bl	8005e42 <RadioStandby>
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 8005a06:	4b24      	ldr	r3, [pc, #144]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005a08:	2240      	movs	r2, #64	@ 0x40
 8005a0a:	5c9b      	ldrb	r3, [r3, r2]
 8005a0c:	1e5a      	subs	r2, r3, #1
 8005a0e:	4193      	sbcs	r3, r2
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	0018      	movs	r0, r3
 8005a14:	f7ff fc92 	bl	800533c <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 8005a18:	4b20      	ldr	r3, [pc, #128]	@ (8005a9c <RadioSetTxConfig+0x2a4>)
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f001 f984 	bl	8006d28 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 8005a20:	4b1f      	ldr	r3, [pc, #124]	@ (8005aa0 <RadioSetTxConfig+0x2a8>)
 8005a22:	0018      	movs	r0, r3
 8005a24:	f001 fa26 	bl	8006e74 <SX126xSetPacketParams>
		break;
 8005a28:	46c0      	nop			@ (mov r8, r8)
	}

	// WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see DS_SX1261-2_V1.2 datasheet chapter 15.1
	if ((modem == MODEM_LORA) && (SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500)){
 8005a2a:	230f      	movs	r3, #15
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d114      	bne.n	8005a5e <RadioSetTxConfig+0x266>
 8005a34:	4b18      	ldr	r3, [pc, #96]	@ (8005a98 <RadioSetTxConfig+0x2a0>)
 8005a36:	2251      	movs	r2, #81	@ 0x51
 8005a38:	5c9b      	ldrb	r3, [r3, r2]
 8005a3a:	2b06      	cmp	r3, #6
 8005a3c:	d10f      	bne.n	8005a5e <RadioSetTxConfig+0x266>
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) & ~(1 << 2));
 8005a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab0 <RadioSetTxConfig+0x2b8>)
 8005a40:	0018      	movs	r0, r3
 8005a42:	f001 fd85 	bl	8007550 <SX126xReadRegister>
 8005a46:	0003      	movs	r3, r0
 8005a48:	001a      	movs	r2, r3
 8005a4a:	2304      	movs	r3, #4
 8005a4c:	439a      	bics	r2, r3
 8005a4e:	0013      	movs	r3, r2
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	4a17      	ldr	r2, [pc, #92]	@ (8005ab0 <RadioSetTxConfig+0x2b8>)
 8005a54:	0019      	movs	r1, r3
 8005a56:	0010      	movs	r0, r2
 8005a58:	f001 fd20 	bl	800749c <SX126xWriteRegister>
 8005a5c:	e00d      	b.n	8005a7a <RadioSetTxConfig+0x282>
	}
	else{
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) | (1 << 2));
 8005a5e:	4b14      	ldr	r3, [pc, #80]	@ (8005ab0 <RadioSetTxConfig+0x2b8>)
 8005a60:	0018      	movs	r0, r3
 8005a62:	f001 fd75 	bl	8007550 <SX126xReadRegister>
 8005a66:	0003      	movs	r3, r0
 8005a68:	001a      	movs	r2, r3
 8005a6a:	2304      	movs	r3, #4
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	4a0f      	ldr	r2, [pc, #60]	@ (8005ab0 <RadioSetTxConfig+0x2b8>)
 8005a72:	0019      	movs	r1, r3
 8005a74:	0010      	movs	r0, r2
 8005a76:	f001 fd11 	bl	800749c <SX126xWriteRegister>
	}
	// WORKAROUND END
	SX126xSetRfTxPower(power);
 8005a7a:	230e      	movs	r3, #14
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	b25b      	sxtb	r3, r3
 8005a82:	0018      	movs	r0, r3
 8005a84:	f001 fdfe 	bl	8007684 <SX126xSetRfTxPower>
	TxTimeout = timeout;
 8005a88:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab4 <RadioSetTxConfig+0x2bc>)
 8005a8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a8c:	601a      	str	r2, [r3, #0]
}
 8005a8e:	46c0      	nop			@ (mov r8, r8)
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b007      	add	sp, #28
 8005a94:	bd90      	pop	{r4, r7, pc}
 8005a96:	46c0      	nop			@ (mov r8, r8)
 8005a98:	20000278 	.word	0x20000278
 8005a9c:	200002b8 	.word	0x200002b8
 8005aa0:	20000290 	.word	0x20000290
 8005aa4:	000001ff 	.word	0x000001ff
 8005aa8:	08007d2c 	.word	0x08007d2c
 8005aac:	200000c0 	.word	0x200000c0
 8005ab0:	00000889 	.word	0x00000889
 8005ab4:	2000014c 	.word	0x2000014c

08005ab8 <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency(uint32_t frequency){
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	return true;
 8005ac0:	2301      	movs	r3, #1
}
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	b002      	add	sp, #8
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <RadioTimeOnAir>:

uint32_t RadioTimeOnAir(RadioModems_t modem, uint8_t pktLen){
 8005acc:	b5b0      	push	{r4, r5, r7, lr}
 8005ace:	b090      	sub	sp, #64	@ 0x40
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	0002      	movs	r2, r0
 8005ad4:	1dfb      	adds	r3, r7, #7
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	1dbb      	adds	r3, r7, #6
 8005ada:	1c0a      	adds	r2, r1, #0
 8005adc:	701a      	strb	r2, [r3, #0]
	uint32_t airTime = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch (modem){
 8005ae2:	1dfb      	adds	r3, r7, #7
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <RadioTimeOnAir+0x26>
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d100      	bne.n	8005af0 <RadioTimeOnAir+0x24>
 8005aee:	e093      	b.n	8005c18 <RadioTimeOnAir+0x14c>
 8005af0:	e148      	b.n	8005d84 <RadioTimeOnAir+0x2b8>
		case MODEM_FSK:{
			// CRC Length calculation, catering for each type of CRC Calc offered in libary
			uint8_t crcLength = (uint8_t)(SX126x.PacketParams.Params.Gfsk.CrcLength);
 8005af2:	203b      	movs	r0, #59	@ 0x3b
 8005af4:	183b      	adds	r3, r7, r0
 8005af6:	4aa6      	ldr	r2, [pc, #664]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005af8:	2121      	movs	r1, #33	@ 0x21
 8005afa:	5c52      	ldrb	r2, [r2, r1]
 8005afc:	701a      	strb	r2, [r3, #0]
			if ((crcLength == RADIO_CRC_2_BYTES) || (crcLength == RADIO_CRC_2_BYTES_INV) || (crcLength == RADIO_CRC_2_BYTES_IBM) || (crcLength == RADIO_CRC_2_BYTES_CCIT)){
 8005afe:	0002      	movs	r2, r0
 8005b00:	18bb      	adds	r3, r7, r2
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d00b      	beq.n	8005b20 <RadioTimeOnAir+0x54>
 8005b08:	18bb      	adds	r3, r7, r2
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b06      	cmp	r3, #6
 8005b0e:	d007      	beq.n	8005b20 <RadioTimeOnAir+0x54>
 8005b10:	18bb      	adds	r3, r7, r2
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2bf1      	cmp	r3, #241	@ 0xf1
 8005b16:	d003      	beq.n	8005b20 <RadioTimeOnAir+0x54>
 8005b18:	18bb      	adds	r3, r7, r2
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2bf2      	cmp	r3, #242	@ 0xf2
 8005b1e:	d104      	bne.n	8005b2a <RadioTimeOnAir+0x5e>
				crcLength = 2;
 8005b20:	233b      	movs	r3, #59	@ 0x3b
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	2202      	movs	r2, #2
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	e011      	b.n	8005b4e <RadioTimeOnAir+0x82>
			}
			else if ((crcLength == RADIO_CRC_1_BYTES) || (crcLength == RADIO_CRC_1_BYTES_INV)){
 8005b2a:	223b      	movs	r2, #59	@ 0x3b
 8005b2c:	18bb      	adds	r3, r7, r2
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <RadioTimeOnAir+0x70>
 8005b34:	18bb      	adds	r3, r7, r2
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d104      	bne.n	8005b46 <RadioTimeOnAir+0x7a>
				crcLength = 1;
 8005b3c:	233b      	movs	r3, #59	@ 0x3b
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	e003      	b.n	8005b4e <RadioTimeOnAir+0x82>
			}
			else{
				crcLength = 0;
 8005b46:	233b      	movs	r3, #59	@ 0x3b
 8005b48:	18fb      	adds	r3, r7, r3
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
			}
			airTime = rint((8 * (SX126x.PacketParams.Params.Gfsk.PreambleLength + (SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3) + ((SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH) ? 0.0 : 1.0) + pktLen + (crcLength)) /
 8005b4e:	4b90      	ldr	r3, [pc, #576]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005b50:	8b5b      	ldrh	r3, [r3, #26]
 8005b52:	001a      	movs	r2, r3
 8005b54:	4b8e      	ldr	r3, [pc, #568]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005b56:	7f5b      	ldrb	r3, [r3, #29]
 8005b58:	08db      	lsrs	r3, r3, #3
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	18d3      	adds	r3, r2, r3
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f7fc fa02 	bl	8001f68 <__aeabi_i2d>
 8005b64:	0002      	movs	r2, r0
 8005b66:	000b      	movs	r3, r1
 8005b68:	4989      	ldr	r1, [pc, #548]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005b6a:	7fc9      	ldrb	r1, [r1, #31]
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d102      	bne.n	8005b76 <RadioTimeOnAir+0xaa>
 8005b70:	2000      	movs	r0, #0
 8005b72:	2100      	movs	r1, #0
 8005b74:	e001      	b.n	8005b7a <RadioTimeOnAir+0xae>
 8005b76:	2000      	movs	r0, #0
 8005b78:	4986      	ldr	r1, [pc, #536]	@ (8005d94 <RadioTimeOnAir+0x2c8>)
 8005b7a:	f7fa fbad 	bl	80002d8 <__aeabi_dadd>
 8005b7e:	0002      	movs	r2, r0
 8005b80:	000b      	movs	r3, r1
 8005b82:	0014      	movs	r4, r2
 8005b84:	001d      	movs	r5, r3
 8005b86:	1dbb      	adds	r3, r7, #6
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f7fc f9ec 	bl	8001f68 <__aeabi_i2d>
 8005b90:	0002      	movs	r2, r0
 8005b92:	000b      	movs	r3, r1
 8005b94:	0020      	movs	r0, r4
 8005b96:	0029      	movs	r1, r5
 8005b98:	f7fa fb9e 	bl	80002d8 <__aeabi_dadd>
 8005b9c:	0002      	movs	r2, r0
 8005b9e:	000b      	movs	r3, r1
 8005ba0:	0014      	movs	r4, r2
 8005ba2:	001d      	movs	r5, r3
 8005ba4:	233b      	movs	r3, #59	@ 0x3b
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	0018      	movs	r0, r3
 8005bac:	f7fc f9dc 	bl	8001f68 <__aeabi_i2d>
 8005bb0:	0002      	movs	r2, r0
 8005bb2:	000b      	movs	r3, r1
 8005bb4:	0020      	movs	r0, r4
 8005bb6:	0029      	movs	r1, r5
 8005bb8:	f7fa fb8e 	bl	80002d8 <__aeabi_dadd>
 8005bbc:	0002      	movs	r2, r0
 8005bbe:	000b      	movs	r3, r1
 8005bc0:	0010      	movs	r0, r2
 8005bc2:	0019      	movs	r1, r3
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4b74      	ldr	r3, [pc, #464]	@ (8005d98 <RadioTimeOnAir+0x2cc>)
 8005bc8:	f7fb fb2e 	bl	8001228 <__aeabi_dmul>
 8005bcc:	0002      	movs	r2, r0
 8005bce:	000b      	movs	r3, r1
 8005bd0:	0014      	movs	r4, r2
 8005bd2:	001d      	movs	r5, r3
							SX126x.ModulationParams.Params.Gfsk.BitRate) *
 8005bd4:	4b6e      	ldr	r3, [pc, #440]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
			airTime = rint((8 * (SX126x.PacketParams.Params.Gfsk.PreambleLength + (SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3) + ((SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH) ? 0.0 : 1.0) + pktLen + (crcLength)) /
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f7fc f9f3 	bl	8001fc4 <__aeabi_ui2d>
 8005bde:	0002      	movs	r2, r0
 8005be0:	000b      	movs	r3, r1
 8005be2:	0020      	movs	r0, r4
 8005be4:	0029      	movs	r1, r5
 8005be6:	f7fa fedb 	bl	80009a0 <__aeabi_ddiv>
 8005bea:	0002      	movs	r2, r0
 8005bec:	000b      	movs	r3, r1
 8005bee:	0010      	movs	r0, r2
 8005bf0:	0019      	movs	r1, r3
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	4b69      	ldr	r3, [pc, #420]	@ (8005d9c <RadioTimeOnAir+0x2d0>)
 8005bf6:	f7fb fb17 	bl	8001228 <__aeabi_dmul>
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	000b      	movs	r3, r1
 8005bfe:	0010      	movs	r0, r2
 8005c00:	0019      	movs	r1, r3
 8005c02:	f001 fe83 	bl	800790c <rint>
 8005c06:	0002      	movs	r2, r0
 8005c08:	000b      	movs	r3, r1
 8005c0a:	0010      	movs	r0, r2
 8005c0c:	0019      	movs	r1, r3
 8005c0e:	f7fa fb45 	bl	800029c <__aeabi_d2uiz>
 8005c12:	0003      	movs	r3, r0
 8005c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
						   1e3);
		}
		break;
 8005c16:	e0b5      	b.n	8005d84 <RadioTimeOnAir+0x2b8>
		case MODEM_LORA:{
			double ts = RadioLoRaSymbTime[SX126x.ModulationParams.Params.LoRa.Bandwidth - 4][12 - SX126x.ModulationParams.Params.LoRa.SpreadingFactor];
 8005c18:	4b5d      	ldr	r3, [pc, #372]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005c1a:	2251      	movs	r2, #81	@ 0x51
 8005c1c:	5c9b      	ldrb	r3, [r3, r2]
 8005c1e:	1f1a      	subs	r2, r3, #4
 8005c20:	4b5b      	ldr	r3, [pc, #364]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005c22:	2150      	movs	r1, #80	@ 0x50
 8005c24:	5c5b      	ldrb	r3, [r3, r1]
 8005c26:	0019      	movs	r1, r3
 8005c28:	230c      	movs	r3, #12
 8005c2a:	1a58      	subs	r0, r3, r1
 8005c2c:	495c      	ldr	r1, [pc, #368]	@ (8005da0 <RadioTimeOnAir+0x2d4>)
 8005c2e:	0013      	movs	r3, r2
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	189b      	adds	r3, r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	181b      	adds	r3, r3, r0
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	18cb      	adds	r3, r1, r3
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c42:	637b      	str	r3, [r7, #52]	@ 0x34
			// time of preamble
			double tPreamble = (SX126x.PacketParams.Params.LoRa.PreambleLength + 4.25) * ts;
 8005c44:	4b52      	ldr	r3, [pc, #328]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005c46:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7fc f98d 	bl	8001f68 <__aeabi_i2d>
 8005c4e:	2200      	movs	r2, #0
 8005c50:	4b54      	ldr	r3, [pc, #336]	@ (8005da4 <RadioTimeOnAir+0x2d8>)
 8005c52:	f7fa fb41 	bl	80002d8 <__aeabi_dadd>
 8005c56:	0002      	movs	r2, r0
 8005c58:	000b      	movs	r3, r1
 8005c5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c5c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c5e:	f7fb fae3 	bl	8001228 <__aeabi_dmul>
 8005c62:	0002      	movs	r2, r0
 8005c64:	000b      	movs	r3, r1
 8005c66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
			// Symbol length of payload and time
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8005c6a:	1dbb      	adds	r3, r7, #6
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	4a47      	ldr	r2, [pc, #284]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005c72:	2150      	movs	r1, #80	@ 0x50
 8005c74:	5c52      	ldrb	r2, [r2, r1]
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	1dda      	adds	r2, r3, #7
							   28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 8005c7a:	4b45      	ldr	r3, [pc, #276]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005c7c:	2128      	movs	r1, #40	@ 0x28
 8005c7e:	5c5b      	ldrb	r3, [r3, r1]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	18d3      	adds	r3, r2, r3
 8005c84:	009a      	lsls	r2, r3, #2
							   ((SX126x.PacketParams.Params.LoRa.HeaderType == LORA_PACKET_FIXED_LENGTH) ? 20 : 0)) /
 8005c86:	4b42      	ldr	r3, [pc, #264]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005c88:	2126      	movs	r1, #38	@ 0x26
 8005c8a:	5c5b      	ldrb	r3, [r3, r1]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <RadioTimeOnAir+0x1c8>
 8005c90:	2314      	movs	r3, #20
 8005c92:	e000      	b.n	8005c96 <RadioTimeOnAir+0x1ca>
 8005c94:	2300      	movs	r3, #0
							   28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 8005c96:	1ad3      	subs	r3, r2, r3
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f7fc f965 	bl	8001f68 <__aeabi_i2d>
 8005c9e:	0004      	movs	r4, r0
 8005ca0:	000d      	movs	r5, r1
							  (double)(4 * (SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 8005ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005ca4:	2250      	movs	r2, #80	@ 0x50
 8005ca6:	5c9b      	ldrb	r3, [r3, r2]
 8005ca8:	0019      	movs	r1, r3
											((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0) ? 2 : 0)))) *
 8005caa:	4b39      	ldr	r3, [pc, #228]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005cac:	2253      	movs	r2, #83	@ 0x53
 8005cae:	5c9b      	ldrb	r3, [r3, r2]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <RadioTimeOnAir+0x1ec>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e000      	b.n	8005cba <RadioTimeOnAir+0x1ee>
 8005cb8:	2300      	movs	r3, #0
							  (double)(4 * (SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 8005cba:	1acb      	subs	r3, r1, r3
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f7fc f952 	bl	8001f68 <__aeabi_i2d>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	000b      	movs	r3, r1
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8005cc8:	0020      	movs	r0, r4
 8005cca:	0029      	movs	r1, r5
 8005ccc:	f7fa fe68 	bl	80009a0 <__aeabi_ddiv>
 8005cd0:	0002      	movs	r2, r0
 8005cd2:	000b      	movs	r3, r1
 8005cd4:	0010      	movs	r0, r2
 8005cd6:	0019      	movs	r1, r3
 8005cd8:	f001 fd24 	bl	8007724 <ceil>
 8005cdc:	0004      	movs	r4, r0
 8005cde:	000d      	movs	r5, r1
						 ((SX126x.ModulationParams.Params.LoRa.CodingRate % 4) + 4);
 8005ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8005d90 <RadioTimeOnAir+0x2c4>)
 8005ce2:	2252      	movs	r2, #82	@ 0x52
 8005ce4:	5c9b      	ldrb	r3, [r3, r2]
 8005ce6:	001a      	movs	r2, r3
 8005ce8:	2303      	movs	r3, #3
 8005cea:	4013      	ands	r3, r2
 8005cec:	3304      	adds	r3, #4
											((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0) ? 2 : 0)))) *
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f7fc f93a 	bl	8001f68 <__aeabi_i2d>
 8005cf4:	0002      	movs	r2, r0
 8005cf6:	000b      	movs	r3, r1
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 8005cf8:	0020      	movs	r0, r4
 8005cfa:	0029      	movs	r1, r5
 8005cfc:	f7fb fa94 	bl	8001228 <__aeabi_dmul>
 8005d00:	0002      	movs	r2, r0
 8005d02:	000b      	movs	r3, r1
 8005d04:	623a      	str	r2, [r7, #32]
 8005d06:	627b      	str	r3, [r7, #36]	@ 0x24
			double nPayload = 8 + ((tmp > 0) ? tmp : 0);
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	6a38      	ldr	r0, [r7, #32]
 8005d0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d10:	f7fa fab0 	bl	8000274 <__aeabi_dcmpgt>
 8005d14:	1e03      	subs	r3, r0, #0
 8005d16:	d002      	beq.n	8005d1e <RadioTimeOnAir+0x252>
 8005d18:	6a38      	ldr	r0, [r7, #32]
 8005d1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d1c:	e001      	b.n	8005d22 <RadioTimeOnAir+0x256>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	2100      	movs	r1, #0
 8005d22:	2200      	movs	r2, #0
 8005d24:	4b1c      	ldr	r3, [pc, #112]	@ (8005d98 <RadioTimeOnAir+0x2cc>)
 8005d26:	f7fa fad7 	bl	80002d8 <__aeabi_dadd>
 8005d2a:	0002      	movs	r2, r0
 8005d2c:	000b      	movs	r3, r1
 8005d2e:	61ba      	str	r2, [r7, #24]
 8005d30:	61fb      	str	r3, [r7, #28]
			double tPayload = nPayload * ts;
 8005d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d36:	69b8      	ldr	r0, [r7, #24]
 8005d38:	69f9      	ldr	r1, [r7, #28]
 8005d3a:	f7fb fa75 	bl	8001228 <__aeabi_dmul>
 8005d3e:	0002      	movs	r2, r0
 8005d40:	000b      	movs	r3, r1
 8005d42:	613a      	str	r2, [r7, #16]
 8005d44:	617b      	str	r3, [r7, #20]
			// Time on air
			double tOnAir = tPreamble + tPayload;
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d4e:	f7fa fac3 	bl	80002d8 <__aeabi_dadd>
 8005d52:	0002      	movs	r2, r0
 8005d54:	000b      	movs	r3, r1
 8005d56:	60ba      	str	r2, [r7, #8]
 8005d58:	60fb      	str	r3, [r7, #12]
			// return milli seconds
			airTime = floor(tOnAir + 0.999);
 8005d5a:	4a13      	ldr	r2, [pc, #76]	@ (8005da8 <RadioTimeOnAir+0x2dc>)
 8005d5c:	4b13      	ldr	r3, [pc, #76]	@ (8005dac <RadioTimeOnAir+0x2e0>)
 8005d5e:	68b8      	ldr	r0, [r7, #8]
 8005d60:	68f9      	ldr	r1, [r7, #12]
 8005d62:	f7fa fab9 	bl	80002d8 <__aeabi_dadd>
 8005d66:	0002      	movs	r2, r0
 8005d68:	000b      	movs	r3, r1
 8005d6a:	0010      	movs	r0, r2
 8005d6c:	0019      	movs	r1, r3
 8005d6e:	f001 fd51 	bl	8007814 <floor>
 8005d72:	0002      	movs	r2, r0
 8005d74:	000b      	movs	r3, r1
 8005d76:	0010      	movs	r0, r2
 8005d78:	0019      	movs	r1, r3
 8005d7a:	f7fa fa8f 	bl	800029c <__aeabi_d2uiz>
 8005d7e:	0003      	movs	r3, r0
 8005d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		break;
 8005d82:	46c0      	nop			@ (mov r8, r8)
	}

	return airTime;
 8005d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d86:	0018      	movs	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	b010      	add	sp, #64	@ 0x40
 8005d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	20000278 	.word	0x20000278
 8005d94:	3ff00000 	.word	0x3ff00000
 8005d98:	40200000 	.word	0x40200000
 8005d9c:	408f4000 	.word	0x408f4000
 8005da0:	20000030 	.word	0x20000030
 8005da4:	40110000 	.word	0x40110000
 8005da8:	d916872b 	.word	0xd916872b
 8005dac:	3feff7ce 	.word	0x3feff7ce

08005db0 <RadioSend>:
 *        the radio in transmission
 *
 * \param buffer     Buffer pointer
 * \param size       Buffer size
 */
void RadioSend(uint8_t *buffer, uint8_t size){
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	000a      	movs	r2, r1
 8005dba:	1cfb      	adds	r3, r7, #3
 8005dbc:	701a      	strb	r2, [r3, #0]
	SX126xSetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8005dbe:	4912      	ldr	r1, [pc, #72]	@ (8005e08 <RadioSend+0x58>)
 8005dc0:	4811      	ldr	r0, [pc, #68]	@ (8005e08 <RadioSend+0x58>)
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f000 fe59 	bl	8006a7c <SX126xSetDioIrqParams>
						  IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
						  IRQ_RADIO_NONE,
						  IRQ_RADIO_NONE);

	if (SX126xGetPacketType() == PACKET_TYPE_LORA){
 8005dca:	f000 ff29 	bl	8006c20 <SX126xGetPacketType>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d105      	bne.n	8005de0 <RadioSend+0x30>
		SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 8005dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <RadioSend+0x5c>)
 8005dd6:	1cfa      	adds	r2, r7, #3
 8005dd8:	2127      	movs	r1, #39	@ 0x27
 8005dda:	7812      	ldrb	r2, [r2, #0]
 8005ddc:	545a      	strb	r2, [r3, r1]
 8005dde:	e004      	b.n	8005dea <RadioSend+0x3a>
	}
	else{
		SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8005de0:	4b0a      	ldr	r3, [pc, #40]	@ (8005e0c <RadioSend+0x5c>)
 8005de2:	1cfa      	adds	r2, r7, #3
 8005de4:	2120      	movs	r1, #32
 8005de6:	7812      	ldrb	r2, [r2, #0]
 8005de8:	545a      	strb	r2, [r3, r1]
	}
	SX126xSetPacketParams(&SX126x.PacketParams);
 8005dea:	4b09      	ldr	r3, [pc, #36]	@ (8005e10 <RadioSend+0x60>)
 8005dec:	0018      	movs	r0, r3
 8005dee:	f001 f841 	bl	8006e74 <SX126xSetPacketParams>

	SX126xSendPayload(buffer, size, 0);
 8005df2:	1cfb      	adds	r3, r7, #3
 8005df4:	7819      	ldrb	r1, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f000 fbcd 	bl	800659a <SX126xSendPayload>
//	TimerSetValue(&TxTimeoutTimer, TxTimeout);
//	TimerStart(&TxTimeoutTimer);
}
 8005e00:	46c0      	nop			@ (mov r8, r8)
 8005e02:	46bd      	mov	sp, r7
 8005e04:	b002      	add	sp, #8
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	00000201 	.word	0x00000201
 8005e0c:	20000278 	.word	0x20000278
 8005e10:	20000290 	.word	0x20000290

08005e14 <RadioSleep>:

void RadioSleep(void){
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
	SleepParams_t params = {0};
 8005e1a:	1d3b      	adds	r3, r7, #4
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]

	params.Fields.WarmStart = 1;
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	781a      	ldrb	r2, [r3, #0]
 8005e24:	2104      	movs	r1, #4
 8005e26:	430a      	orrs	r2, r1
 8005e28:	701a      	strb	r2, [r3, #0]
	SX126xSetSleep(params);
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	1c18      	adds	r0, r3, #0
 8005e30:	f000 fc8a 	bl	8006748 <SX126xSetSleep>

	HAL_Delay(2);
 8005e34:	2002      	movs	r0, #2
 8005e36:	f7fc fcc3 	bl	80027c0 <HAL_Delay>
}
 8005e3a:	46c0      	nop			@ (mov r8, r8)
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b002      	add	sp, #8
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <RadioStandby>:

void RadioStandby(void){
 8005e42:	b580      	push	{r7, lr}
 8005e44:	af00      	add	r7, sp, #0
	SX126xSetStandby(STDBY_RC);
 8005e46:	2000      	movs	r0, #0
 8005e48:	f000 fc92 	bl	8006770 <SX126xSetStandby>
}
 8005e4c:	46c0      	nop			@ (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <RadioRx>:

void RadioRx(uint32_t timeout){
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	SX126xSetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
 8005e5c:	490c      	ldr	r1, [pc, #48]	@ (8005e90 <RadioRx+0x3c>)
 8005e5e:	480c      	ldr	r0, [pc, #48]	@ (8005e90 <RadioRx+0x3c>)
 8005e60:	2300      	movs	r3, #0
 8005e62:	2200      	movs	r2, #0
 8005e64:	f000 fe0a 	bl	8006a7c <SX126xSetDioIrqParams>

	if (timeout != 0){
//		TimerSetValue(&RxTimeoutTimer, timeout);
//		TimerStart(&RxTimeoutTimer);
	}
	if (RxContinuous == true){
 8005e68:	4b0a      	ldr	r3, [pc, #40]	@ (8005e94 <RadioRx+0x40>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <RadioRx+0x26>
		SX126xSetRx(0xFFFFFF); // Rx Continuous
 8005e70:	4b09      	ldr	r3, [pc, #36]	@ (8005e98 <RadioRx+0x44>)
 8005e72:	0018      	movs	r0, r3
 8005e74:	f000 fcba 	bl	80067ec <SX126xSetRx>
	}
	else{
		SX126xSetRx(RxTimeout << 6);
	}
}
 8005e78:	e005      	b.n	8005e86 <RadioRx+0x32>
		SX126xSetRx(RxTimeout << 6);
 8005e7a:	4b08      	ldr	r3, [pc, #32]	@ (8005e9c <RadioRx+0x48>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	019b      	lsls	r3, r3, #6
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 fcb3 	bl	80067ec <SX126xSetRx>
}
 8005e86:	46c0      	nop			@ (mov r8, r8)
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b002      	add	sp, #8
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	00000262 	.word	0x00000262
 8005e94:	20000154 	.word	0x20000154
 8005e98:	00ffffff 	.word	0x00ffffff
 8005e9c:	20000150 	.word	0x20000150

08005ea0 <RadioRxBoosted>:

void RadioRxBoosted(uint32_t timeout){
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	SX126xSetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
 8005ea8:	490c      	ldr	r1, [pc, #48]	@ (8005edc <RadioRxBoosted+0x3c>)
 8005eaa:	480c      	ldr	r0, [pc, #48]	@ (8005edc <RadioRxBoosted+0x3c>)
 8005eac:	2300      	movs	r3, #0
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f000 fde4 	bl	8006a7c <SX126xSetDioIrqParams>
						  IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
						  IRQ_RADIO_NONE,
						  IRQ_RADIO_NONE);

	if (RxContinuous == true){
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee0 <RadioRxBoosted+0x40>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d004      	beq.n	8005ec6 <RadioRxBoosted+0x26>
		// Even Continous mode is selected, put a timeout here
		if (timeout != 0){
//			TimerSetValue(&RxTimeoutTimer, timeout);
//			TimerStart(&RxTimeoutTimer);
		}
		SX126xSetRxBoosted(0xFFFFFF); // Rx Continuous
 8005ebc:	4b09      	ldr	r3, [pc, #36]	@ (8005ee4 <RadioRxBoosted+0x44>)
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f000 fcbc 	bl	800683c <SX126xSetRxBoosted>
	}
	else{
		SX126xSetRxBoosted(RxTimeout << 6);
	}
}
 8005ec4:	e005      	b.n	8005ed2 <RadioRxBoosted+0x32>
		SX126xSetRxBoosted(RxTimeout << 6);
 8005ec6:	4b08      	ldr	r3, [pc, #32]	@ (8005ee8 <RadioRxBoosted+0x48>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	019b      	lsls	r3, r3, #6
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f000 fcb5 	bl	800683c <SX126xSetRxBoosted>
}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b002      	add	sp, #8
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	46c0      	nop			@ (mov r8, r8)
 8005edc:	00000262 	.word	0x00000262
 8005ee0:	20000154 	.word	0x20000154
 8005ee4:	00ffffff 	.word	0x00ffffff
 8005ee8:	20000150 	.word	0x20000150

08005eec <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime){
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
	SX126xSetDioIrqParams(IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT,
 8005ef6:	4908      	ldr	r1, [pc, #32]	@ (8005f18 <RadioSetRxDutyCycle+0x2c>)
 8005ef8:	4807      	ldr	r0, [pc, #28]	@ (8005f18 <RadioSetRxDutyCycle+0x2c>)
 8005efa:	2300      	movs	r3, #0
 8005efc:	2200      	movs	r2, #0
 8005efe:	f000 fdbd 	bl	8006a7c <SX126xSetDioIrqParams>
						  IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT,
						  IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SX126xSetRxDutyCycle(rxTime, sleepTime);
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	0011      	movs	r1, r2
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f000 fcbf 	bl	800688c <SX126xSetRxDutyCycle>
}
 8005f0e:	46c0      	nop			@ (mov r8, r8)
 8005f10:	46bd      	mov	sp, r7
 8005f12:	b002      	add	sp, #8
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	46c0      	nop			@ (mov r8, r8)
 8005f18:	0000ffff 	.word	0x0000ffff

08005f1c <RadioSetCadParams>:

void RadioSetCadParams(uint8_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, uint8_t cadExitMode, uint32_t cadTimeout){
 8005f1c:	b5b0      	push	{r4, r5, r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	0005      	movs	r5, r0
 8005f24:	000c      	movs	r4, r1
 8005f26:	0010      	movs	r0, r2
 8005f28:	0019      	movs	r1, r3
 8005f2a:	1dfb      	adds	r3, r7, #7
 8005f2c:	1c2a      	adds	r2, r5, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	1dbb      	adds	r3, r7, #6
 8005f32:	1c22      	adds	r2, r4, #0
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	1d7b      	adds	r3, r7, #5
 8005f38:	1c02      	adds	r2, r0, #0
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	1c0a      	adds	r2, r1, #0
 8005f40:	701a      	strb	r2, [r3, #0]
	SX126xSetCadParams((RadioLoRaCadSymbols_t)cadSymbolNum, cadDetPeak, cadDetMin, (RadioCadExitModes_t)cadExitMode, cadTimeout);
 8005f42:	1d3b      	adds	r3, r7, #4
 8005f44:	781c      	ldrb	r4, [r3, #0]
 8005f46:	1d7b      	adds	r3, r7, #5
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	1dbb      	adds	r3, r7, #6
 8005f4c:	7819      	ldrb	r1, [r3, #0]
 8005f4e:	1dfb      	adds	r3, r7, #7
 8005f50:	7818      	ldrb	r0, [r3, #0]
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	0023      	movs	r3, r4
 8005f58:	f001 f83e 	bl	8006fd8 <SX126xSetCadParams>
}
 8005f5c:	46c0      	nop			@ (mov r8, r8)
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b002      	add	sp, #8
 8005f62:	bdb0      	pop	{r4, r5, r7, pc}

08005f64 <RadioStartCad>:

void RadioStartCad(void){
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
	SX126xSetDioIrqParams(IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED,
 8005f68:	23c0      	movs	r3, #192	@ 0xc0
 8005f6a:	0059      	lsls	r1, r3, #1
 8005f6c:	23c0      	movs	r3, #192	@ 0xc0
 8005f6e:	0058      	lsls	r0, r3, #1
 8005f70:	2300      	movs	r3, #0
 8005f72:	2200      	movs	r2, #0
 8005f74:	f000 fd82 	bl	8006a7c <SX126xSetDioIrqParams>
						  IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED,
						  IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SX126xSetCad();
 8005f78:	f000 fcb7 	bl	80068ea <SX126xSetCad>
}
 8005f7c:	46c0      	nop			@ (mov r8, r8)
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <RadioSetTxContinuousWave>:
 *
 * \param freq       Channel RF frequency
 * \param power      Sets the output power [dBm]
 * \param time       Transmission mode timeout [s]
 */
void RadioSetTxContinuousWave(uint32_t freq, int8_t power, uint16_t time){
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	0008      	movs	r0, r1
 8005f8c:	0011      	movs	r1, r2
 8005f8e:	1cfb      	adds	r3, r7, #3
 8005f90:	1c02      	adds	r2, r0, #0
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	003b      	movs	r3, r7
 8005f96:	1c0a      	adds	r2, r1, #0
 8005f98:	801a      	strh	r2, [r3, #0]
	SX126xSetRfFrequency(freq);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f000 fde3 	bl	8006b68 <SX126xSetRfFrequency>
	SX126xSetRfTxPower(power);
 8005fa2:	1cfb      	adds	r3, r7, #3
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	b25b      	sxtb	r3, r3
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f001 fb6b 	bl	8007684 <SX126xSetRfTxPower>
	SX126xSetTxContinuousWave();
 8005fae:	f000 fca9 	bl	8006904 <SX126xSetTxContinuousWave>

//	TimerSetValue(&TxTimeoutTimer, time * 1e3);
//	TimerStart(&TxTimeoutTimer);
}
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b002      	add	sp, #8
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <RadioRssi>:

int16_t RadioRssi(RadioModems_t modem){
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	0002      	movs	r2, r0
 8005fc2:	1dfb      	adds	r3, r7, #7
 8005fc4:	701a      	strb	r2, [r3, #0]
	return SX126xGetRssiInst();
 8005fc6:	f001 f865 	bl	8007094 <SX126xGetRssiInst>
 8005fca:	0003      	movs	r3, r0
}
 8005fcc:	0018      	movs	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b002      	add	sp, #8
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <RadioWrite>:
 * \brief Writes the radio register at the specified address
 *
 * \param  addr Register address
 * \param  data New register value
 */
void RadioWrite(uint16_t addr, uint8_t data){
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	0002      	movs	r2, r0
 8005fdc:	1dbb      	adds	r3, r7, #6
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	1d7b      	adds	r3, r7, #5
 8005fe2:	1c0a      	adds	r2, r1, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegister(addr, data);
 8005fe6:	1d7b      	adds	r3, r7, #5
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	1dbb      	adds	r3, r7, #6
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	0011      	movs	r1, r2
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f001 fa53 	bl	800749c <SX126xWriteRegister>
}
 8005ff6:	46c0      	nop			@ (mov r8, r8)
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b002      	add	sp, #8
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <RadioRead>:
/*!
 * \brief Reads the radio register at the specified address
 *
 * \param  addr Register address
 */
uint8_t RadioRead(uint16_t addr){
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	0002      	movs	r2, r0
 8006006:	1dbb      	adds	r3, r7, #6
 8006008:	801a      	strh	r2, [r3, #0]
	return SX126xReadRegister(addr);
 800600a:	1dbb      	adds	r3, r7, #6
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	0018      	movs	r0, r3
 8006010:	f001 fa9e 	bl	8007550 <SX126xReadRegister>
 8006014:	0003      	movs	r3, r0
}
 8006016:	0018      	movs	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	b002      	add	sp, #8
 800601c:	bd80      	pop	{r7, pc}

0800601e <RadioWriteBuffer>:

void RadioWriteBuffer(uint16_t addr, uint8_t *buffer, uint8_t size){
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6039      	str	r1, [r7, #0]
 8006026:	0011      	movs	r1, r2
 8006028:	1dbb      	adds	r3, r7, #6
 800602a:	1c02      	adds	r2, r0, #0
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	1d7b      	adds	r3, r7, #5
 8006030:	1c0a      	adds	r2, r1, #0
 8006032:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegisters(addr, buffer, size);
 8006034:	1d7b      	adds	r3, r7, #5
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b29a      	uxth	r2, r3
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	1dbb      	adds	r3, r7, #6
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	0018      	movs	r0, r3
 8006042:	f001 f9e7 	bl	8007414 <SX126xWriteRegisters>
}
 8006046:	46c0      	nop			@ (mov r8, r8)
 8006048:	46bd      	mov	sp, r7
 800604a:	b002      	add	sp, #8
 800604c:	bd80      	pop	{r7, pc}

0800604e <RadioReadBuffer>:

void RadioReadBuffer(uint16_t addr, uint8_t *buffer, uint8_t size){
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
 8006054:	6039      	str	r1, [r7, #0]
 8006056:	0011      	movs	r1, r2
 8006058:	1dbb      	adds	r3, r7, #6
 800605a:	1c02      	adds	r2, r0, #0
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	1d7b      	adds	r3, r7, #5
 8006060:	1c0a      	adds	r2, r1, #0
 8006062:	701a      	strb	r2, [r3, #0]
	SX126xReadRegisters(addr, buffer, size);
 8006064:	1d7b      	adds	r3, r7, #5
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	b29a      	uxth	r2, r3
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	1dbb      	adds	r3, r7, #6
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	0018      	movs	r0, r3
 8006072:	f001 fa27 	bl	80074c4 <SX126xReadRegisters>
}
 8006076:	46c0      	nop			@ (mov r8, r8)
 8006078:	46bd      	mov	sp, r7
 800607a:	b002      	add	sp, #8
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <RadioSetMaxPayloadLength>:

void RadioReadFifo(uint8_t *buffer, uint8_t size){
	SX126xReadBuffer(0, buffer, size);
}

void RadioSetMaxPayloadLength(RadioModems_t modem, uint8_t max){
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	0002      	movs	r2, r0
 8006088:	1dfb      	adds	r3, r7, #7
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	1dbb      	adds	r3, r7, #6
 800608e:	1c0a      	adds	r2, r1, #0
 8006090:	701a      	strb	r2, [r3, #0]
	if (modem == MODEM_LORA){
 8006092:	1dfb      	adds	r3, r7, #7
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d10d      	bne.n	80060b6 <RadioSetMaxPayloadLength+0x36>
		SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800609a:	4b11      	ldr	r3, [pc, #68]	@ (80060e0 <RadioSetMaxPayloadLength+0x60>)
 800609c:	1dba      	adds	r2, r7, #6
 800609e:	7812      	ldrb	r2, [r2, #0]
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	4b0f      	ldr	r3, [pc, #60]	@ (80060e0 <RadioSetMaxPayloadLength+0x60>)
 80060a4:	7819      	ldrb	r1, [r3, #0]
 80060a6:	4b0f      	ldr	r3, [pc, #60]	@ (80060e4 <RadioSetMaxPayloadLength+0x64>)
 80060a8:	2227      	movs	r2, #39	@ 0x27
 80060aa:	5499      	strb	r1, [r3, r2]
		SX126xSetPacketParams(&SX126x.PacketParams);
 80060ac:	4b0e      	ldr	r3, [pc, #56]	@ (80060e8 <RadioSetMaxPayloadLength+0x68>)
 80060ae:	0018      	movs	r0, r3
 80060b0:	f000 fee0 	bl	8006e74 <SX126xSetPacketParams>
		if (SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH){
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
			SX126xSetPacketParams(&SX126x.PacketParams);
		}
	}
}
 80060b4:	e010      	b.n	80060d8 <RadioSetMaxPayloadLength+0x58>
		if (SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH){
 80060b6:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <RadioSetMaxPayloadLength+0x64>)
 80060b8:	7fdb      	ldrb	r3, [r3, #31]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d10c      	bne.n	80060d8 <RadioSetMaxPayloadLength+0x58>
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80060be:	4b08      	ldr	r3, [pc, #32]	@ (80060e0 <RadioSetMaxPayloadLength+0x60>)
 80060c0:	1dba      	adds	r2, r7, #6
 80060c2:	7812      	ldrb	r2, [r2, #0]
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	4b06      	ldr	r3, [pc, #24]	@ (80060e0 <RadioSetMaxPayloadLength+0x60>)
 80060c8:	7819      	ldrb	r1, [r3, #0]
 80060ca:	4b06      	ldr	r3, [pc, #24]	@ (80060e4 <RadioSetMaxPayloadLength+0x64>)
 80060cc:	2220      	movs	r2, #32
 80060ce:	5499      	strb	r1, [r3, r2]
			SX126xSetPacketParams(&SX126x.PacketParams);
 80060d0:	4b05      	ldr	r3, [pc, #20]	@ (80060e8 <RadioSetMaxPayloadLength+0x68>)
 80060d2:	0018      	movs	r0, r3
 80060d4:	f000 fece 	bl	8006e74 <SX126xSetPacketParams>
}
 80060d8:	46c0      	nop			@ (mov r8, r8)
 80060da:	46bd      	mov	sp, r7
 80060dc:	b002      	add	sp, #8
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	200000c0 	.word	0x200000c0
 80060e4:	20000278 	.word	0x20000278
 80060e8:	20000290 	.word	0x20000290

080060ec <RadioSetPublicNetwork>:

void RadioSetPublicNetwork(bool enable){
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	0002      	movs	r2, r0
 80060f4:	1dfb      	adds	r3, r7, #7
 80060f6:	701a      	strb	r2, [r3, #0]
	RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 80060f8:	4b14      	ldr	r3, [pc, #80]	@ (800614c <RadioSetPublicNetwork+0x60>)
 80060fa:	1dfa      	adds	r2, r7, #7
 80060fc:	7812      	ldrb	r2, [r2, #0]
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	4b12      	ldr	r3, [pc, #72]	@ (800614c <RadioSetPublicNetwork+0x60>)
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	4b11      	ldr	r3, [pc, #68]	@ (800614c <RadioSetPublicNetwork+0x60>)
 8006106:	705a      	strb	r2, [r3, #1]

	RadioSetModem(MODEM_LORA);
 8006108:	2001      	movs	r0, #1
 800610a:	f7ff f917 	bl	800533c <RadioSetModem>
	if (enable == true){
 800610e:	1dfb      	adds	r3, r7, #7
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00b      	beq.n	800612e <RadioSetPublicNetwork+0x42>
		// Change LoRa modem SyncWord
		SX126xWriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PUBLIC_SYNCWORD >> 8) & 0xFF);
 8006116:	23e8      	movs	r3, #232	@ 0xe8
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	2134      	movs	r1, #52	@ 0x34
 800611c:	0018      	movs	r0, r3
 800611e:	f001 f9bd 	bl	800749c <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF);
 8006122:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <RadioSetPublicNetwork+0x64>)
 8006124:	2144      	movs	r1, #68	@ 0x44
 8006126:	0018      	movs	r0, r3
 8006128:	f001 f9b8 	bl	800749c <SX126xWriteRegister>
	else{
		// Change LoRa modem SyncWord
		SX126xWriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
		SX126xWriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
	}
}
 800612c:	e00a      	b.n	8006144 <RadioSetPublicNetwork+0x58>
		SX126xWriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
 800612e:	23e8      	movs	r3, #232	@ 0xe8
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	2114      	movs	r1, #20
 8006134:	0018      	movs	r0, r3
 8006136:	f001 f9b1 	bl	800749c <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
 800613a:	4b05      	ldr	r3, [pc, #20]	@ (8006150 <RadioSetPublicNetwork+0x64>)
 800613c:	2124      	movs	r1, #36	@ 0x24
 800613e:	0018      	movs	r0, r3
 8006140:	f001 f9ac 	bl	800749c <SX126xWriteRegister>
}
 8006144:	46c0      	nop			@ (mov r8, r8)
 8006146:	46bd      	mov	sp, r7
 8006148:	b002      	add	sp, #8
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000270 	.word	0x20000270
 8006150:	00000741 	.word	0x00000741

08006154 <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime(void){
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
	return (RADIO_WAKEUP_TIME);
 8006158:	2303      	movs	r3, #3
}
 800615a:	0018      	movs	r0, r3
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <RadioOnDioIrq>:
	RadioBgIrqProcess();
	RadioStandby();
	RadioSleep();
}

void RadioOnDioIrq(void){
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006164:	b672      	cpsid	i
}
 8006166:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	IrqFired = true;
 8006168:	4b03      	ldr	r3, [pc, #12]	@ (8006178 <RadioOnDioIrq+0x18>)
 800616a:	2201      	movs	r2, #1
 800616c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800616e:	b662      	cpsie	i
}
 8006170:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	2000026b 	.word	0x2000026b

0800617c <RadioBgIrqProcess>:

void RadioBgIrqProcess(void){
 800617c:	b590      	push	{r4, r7, lr}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
	bool rx_timeout_handled = false;
 8006182:	1dfb      	adds	r3, r7, #7
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
	bool tx_timeout_handled = false;
 8006188:	1dbb      	adds	r3, r7, #6
 800618a:	2200      	movs	r2, #0
 800618c:	701a      	strb	r2, [r3, #0]
	if (IrqFired == true){
 800618e:	4bad      	ldr	r3, [pc, #692]	@ (8006444 <RadioBgIrqProcess+0x2c8>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d100      	bne.n	8006198 <RadioBgIrqProcess+0x1c>
 8006196:	e11a      	b.n	80063ce <RadioBgIrqProcess+0x252>
  __ASM volatile ("cpsid i" : : : "memory");
 8006198:	b672      	cpsid	i
}
 800619a:	46c0      	nop			@ (mov r8, r8)
		__disable_irq();
		IrqFired = false;
 800619c:	4ba9      	ldr	r3, [pc, #676]	@ (8006444 <RadioBgIrqProcess+0x2c8>)
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80061a2:	b662      	cpsie	i
}
 80061a4:	46c0      	nop			@ (mov r8, r8)
		__enable_irq();

		uint16_t irqRegs = SX126xGetIrqStatus();
 80061a6:	1d3c      	adds	r4, r7, #4
 80061a8:	f000 fcb6 	bl	8006b18 <SX126xGetIrqStatus>
 80061ac:	0003      	movs	r3, r0
 80061ae:	8023      	strh	r3, [r4, #0]
		SX126xClearIrqStatus(IRQ_RADIO_ALL);
 80061b0:	4ba5      	ldr	r3, [pc, #660]	@ (8006448 <RadioBgIrqProcess+0x2cc>)
 80061b2:	0018      	movs	r0, r3
 80061b4:	f001 f81a 	bl	80071ec <SX126xClearIrqStatus>

		if ((irqRegs & IRQ_TX_DONE) == IRQ_TX_DONE){
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	2201      	movs	r2, #1
 80061be:	4013      	ands	r3, r2
 80061c0:	d012      	beq.n	80061e8 <RadioBgIrqProcess+0x6c>
			tx_timeout_handled = true;
 80061c2:	1dbb      	adds	r3, r7, #6
 80061c4:	2201      	movs	r2, #1
 80061c6:	701a      	strb	r2, [r3, #0]
//			TimerStop(&TxTimeoutTimer);
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 80061c8:	2001      	movs	r0, #1
 80061ca:	f000 f989 	bl	80064e0 <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->TxDone != NULL)){
 80061ce:	4b9f      	ldr	r3, [pc, #636]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d008      	beq.n	80061e8 <RadioBgIrqProcess+0x6c>
 80061d6:	4b9d      	ldr	r3, [pc, #628]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <RadioBgIrqProcess+0x6c>
				RadioEvents->TxDone();
 80061e0:	4b9a      	ldr	r3, [pc, #616]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4798      	blx	r3
			}
		}

		if ((irqRegs & IRQ_RX_DONE) == IRQ_RX_DONE){
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	2202      	movs	r2, #2
 80061ee:	4013      	ands	r3, r2
 80061f0:	d06a      	beq.n	80062c8 <RadioBgIrqProcess+0x14c>
			uint8_t size;

			rx_timeout_handled = true;
 80061f2:	1dfb      	adds	r3, r7, #7
 80061f4:	2201      	movs	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]
//			TimerStop(&RxTimeoutTimer);
			if (RxContinuous == false){
 80061f8:	4b95      	ldr	r3, [pc, #596]	@ (8006450 <RadioBgIrqProcess+0x2d4>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2201      	movs	r2, #1
 80061fe:	4053      	eors	r3, r2
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d015      	beq.n	8006232 <RadioBgIrqProcess+0xb6>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 8006206:	2001      	movs	r0, #1
 8006208:	f000 f96a 	bl	80064e0 <SX126xSetOperatingMode>

				// WORKAROUND - Implicit Header Mode Timeout Behavior, see DS_SX1261-2_V1.2 datasheet chapter 15.3
				// RegRtcControl = @address 0x0902
				SX126xWriteRegister(0x0902, 0x00);
 800620c:	4b91      	ldr	r3, [pc, #580]	@ (8006454 <RadioBgIrqProcess+0x2d8>)
 800620e:	2100      	movs	r1, #0
 8006210:	0018      	movs	r0, r3
 8006212:	f001 f943 	bl	800749c <SX126xWriteRegister>
				// RegEventMask = @address 0x0944
				SX126xWriteRegister(0x0944, SX126xReadRegister(0x0944) | (1 << 1));
 8006216:	4b90      	ldr	r3, [pc, #576]	@ (8006458 <RadioBgIrqProcess+0x2dc>)
 8006218:	0018      	movs	r0, r3
 800621a:	f001 f999 	bl	8007550 <SX126xReadRegister>
 800621e:	0003      	movs	r3, r0
 8006220:	001a      	movs	r2, r3
 8006222:	2302      	movs	r3, #2
 8006224:	4313      	orrs	r3, r2
 8006226:	b2db      	uxtb	r3, r3
 8006228:	4a8b      	ldr	r2, [pc, #556]	@ (8006458 <RadioBgIrqProcess+0x2dc>)
 800622a:	0019      	movs	r1, r3
 800622c:	0010      	movs	r0, r2
 800622e:	f001 f935 	bl	800749c <SX126xWriteRegister>
				// WORKAROUND END
			}
			memset(RadioRxPayload, 0, 255);
 8006232:	4b8a      	ldr	r3, [pc, #552]	@ (800645c <RadioBgIrqProcess+0x2e0>)
 8006234:	22ff      	movs	r2, #255	@ 0xff
 8006236:	2100      	movs	r1, #0
 8006238:	0018      	movs	r0, r3
 800623a:	f001 fa47 	bl	80076cc <memset>

			if ((irqRegs & IRQ_CRC_ERROR) == IRQ_CRC_ERROR){
 800623e:	1d3b      	adds	r3, r7, #4
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	2240      	movs	r2, #64	@ 0x40
 8006244:	4013      	ands	r3, r2
 8006246:	d01d      	beq.n	8006284 <RadioBgIrqProcess+0x108>
				uint8_t size;
				// Discard buffer
				memset(RadioRxPayload, 0, 255);
 8006248:	4b84      	ldr	r3, [pc, #528]	@ (800645c <RadioBgIrqProcess+0x2e0>)
 800624a:	22ff      	movs	r2, #255	@ 0xff
 800624c:	2100      	movs	r1, #0
 800624e:	0018      	movs	r0, r3
 8006250:	f001 fa3c 	bl	80076cc <memset>
				SX126xGetPayload(RadioRxPayload, &size, 255);
 8006254:	1cb9      	adds	r1, r7, #2
 8006256:	4b81      	ldr	r3, [pc, #516]	@ (800645c <RadioBgIrqProcess+0x2e0>)
 8006258:	22ff      	movs	r2, #255	@ 0xff
 800625a:	0018      	movs	r0, r3
 800625c:	f000 f976 	bl	800654c <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 8006260:	4b7f      	ldr	r3, [pc, #508]	@ (8006460 <RadioBgIrqProcess+0x2e4>)
 8006262:	0018      	movs	r0, r3
 8006264:	f000 ff66 	bl	8007134 <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxError)){
 8006268:	4b78      	ldr	r3, [pc, #480]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d02b      	beq.n	80062c8 <RadioBgIrqProcess+0x14c>
 8006270:	4b76      	ldr	r3, [pc, #472]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d026      	beq.n	80062c8 <RadioBgIrqProcess+0x14c>
					RadioEvents->RxError();
 800627a:	4b74      	ldr	r3, [pc, #464]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	4798      	blx	r3
 8006282:	e021      	b.n	80062c8 <RadioBgIrqProcess+0x14c>
				}
			}
			else{
				SX126xGetPayload(RadioRxPayload, &size, 255);
 8006284:	1cf9      	adds	r1, r7, #3
 8006286:	4b75      	ldr	r3, [pc, #468]	@ (800645c <RadioBgIrqProcess+0x2e0>)
 8006288:	22ff      	movs	r2, #255	@ 0xff
 800628a:	0018      	movs	r0, r3
 800628c:	f000 f95e 	bl	800654c <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 8006290:	4b73      	ldr	r3, [pc, #460]	@ (8006460 <RadioBgIrqProcess+0x2e4>)
 8006292:	0018      	movs	r0, r3
 8006294:	f000 ff4e 	bl	8007134 <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxDone != NULL)){
 8006298:	4b6c      	ldr	r3, [pc, #432]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d013      	beq.n	80062c8 <RadioBgIrqProcess+0x14c>
 80062a0:	4b6a      	ldr	r3, [pc, #424]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00e      	beq.n	80062c8 <RadioBgIrqProcess+0x14c>
					RadioEvents->RxDone(RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt);
 80062aa:	4b68      	ldr	r3, [pc, #416]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689c      	ldr	r4, [r3, #8]
 80062b0:	1cfb      	adds	r3, r7, #3
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	0019      	movs	r1, r3
 80062b6:	4b6a      	ldr	r3, [pc, #424]	@ (8006460 <RadioBgIrqProcess+0x2e4>)
 80062b8:	7b1b      	ldrb	r3, [r3, #12]
 80062ba:	b25b      	sxtb	r3, r3
 80062bc:	001a      	movs	r2, r3
 80062be:	4b68      	ldr	r3, [pc, #416]	@ (8006460 <RadioBgIrqProcess+0x2e4>)
 80062c0:	7b5b      	ldrb	r3, [r3, #13]
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	4865      	ldr	r0, [pc, #404]	@ (800645c <RadioBgIrqProcess+0x2e0>)
 80062c6:	47a0      	blx	r4
				}
			}
		}

		if ((irqRegs & IRQ_CAD_DONE) == IRQ_CAD_DONE){
 80062c8:	1d3b      	adds	r3, r7, #4
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	2280      	movs	r2, #128	@ 0x80
 80062ce:	4013      	ands	r3, r2
 80062d0:	d018      	beq.n	8006304 <RadioBgIrqProcess+0x188>
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 80062d2:	2001      	movs	r0, #1
 80062d4:	f000 f904 	bl	80064e0 <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->CadDone != NULL)){
 80062d8:	4b5c      	ldr	r3, [pc, #368]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d011      	beq.n	8006304 <RadioBgIrqProcess+0x188>
 80062e0:	4b5a      	ldr	r3, [pc, #360]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <RadioBgIrqProcess+0x188>
				RadioEvents->CadDone(((irqRegs & IRQ_CAD_ACTIVITY_DETECTED) == IRQ_CAD_ACTIVITY_DETECTED));
 80062ea:	4b58      	ldr	r3, [pc, #352]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	1d3a      	adds	r2, r7, #4
 80062f2:	8811      	ldrh	r1, [r2, #0]
 80062f4:	2280      	movs	r2, #128	@ 0x80
 80062f6:	0052      	lsls	r2, r2, #1
 80062f8:	400a      	ands	r2, r1
 80062fa:	1e51      	subs	r1, r2, #1
 80062fc:	418a      	sbcs	r2, r1
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	0010      	movs	r0, r2
 8006302:	4798      	blx	r3
			}
		}

		if ((irqRegs & IRQ_RX_TX_TIMEOUT) == IRQ_RX_TX_TIMEOUT){
 8006304:	1d3b      	adds	r3, r7, #4
 8006306:	881a      	ldrh	r2, [r3, #0]
 8006308:	2380      	movs	r3, #128	@ 0x80
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4013      	ands	r3, r2
 800630e:	d030      	beq.n	8006372 <RadioBgIrqProcess+0x1f6>
			if (SX126xGetOperatingMode() == MODE_TX){
 8006310:	f000 f8dc 	bl	80064cc <SX126xGetOperatingMode>
 8006314:	0003      	movs	r3, r0
 8006316:	2b04      	cmp	r3, #4
 8006318:	d113      	bne.n	8006342 <RadioBgIrqProcess+0x1c6>
				tx_timeout_handled = true;
 800631a:	1dbb      	adds	r3, r7, #6
 800631c:	2201      	movs	r2, #1
 800631e:	701a      	strb	r2, [r3, #0]
//				TimerStop(&TxTimeoutTimer);
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 8006320:	2001      	movs	r0, #1
 8006322:	f000 f8dd 	bl	80064e0 <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL)){
 8006326:	4b49      	ldr	r3, [pc, #292]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d021      	beq.n	8006372 <RadioBgIrqProcess+0x1f6>
 800632e:	4b47      	ldr	r3, [pc, #284]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d01c      	beq.n	8006372 <RadioBgIrqProcess+0x1f6>
					RadioEvents->TxTimeout();
 8006338:	4b44      	ldr	r3, [pc, #272]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4798      	blx	r3
 8006340:	e017      	b.n	8006372 <RadioBgIrqProcess+0x1f6>
				}
			}
			else if (SX126xGetOperatingMode() == MODE_RX){
 8006342:	f000 f8c3 	bl	80064cc <SX126xGetOperatingMode>
 8006346:	0003      	movs	r3, r0
 8006348:	2b05      	cmp	r3, #5
 800634a:	d112      	bne.n	8006372 <RadioBgIrqProcess+0x1f6>
				rx_timeout_handled = true;
 800634c:	1dfb      	adds	r3, r7, #7
 800634e:	2201      	movs	r2, #1
 8006350:	701a      	strb	r2, [r3, #0]
//				TimerStop(&RxTimeoutTimer);
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 8006352:	2001      	movs	r0, #1
 8006354:	f000 f8c4 	bl	80064e0 <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)){
 8006358:	4b3c      	ldr	r3, [pc, #240]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <RadioBgIrqProcess+0x1f6>
 8006360:	4b3a      	ldr	r3, [pc, #232]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <RadioBgIrqProcess+0x1f6>
					RadioEvents->RxTimeout();
 800636a:	4b38      	ldr	r3, [pc, #224]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	4798      	blx	r3
				}
			}
		}

		if ((irqRegs & IRQ_PREAMBLE_DETECTED) == IRQ_PREAMBLE_DETECTED){
 8006372:	1d3b      	adds	r3, r7, #4
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	2204      	movs	r2, #4
 8006378:	4013      	ands	r3, r2
 800637a:	d00c      	beq.n	8006396 <RadioBgIrqProcess+0x21a>
			if ((RadioEvents != NULL) && (RadioEvents->PreAmpDetect != NULL)){
 800637c:	4b33      	ldr	r3, [pc, #204]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <RadioBgIrqProcess+0x21a>
 8006384:	4b31      	ldr	r3, [pc, #196]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <RadioBgIrqProcess+0x21a>
				RadioEvents->PreAmpDetect();
 800638e:	4b2f      	ldr	r3, [pc, #188]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	4798      	blx	r3

		if ((irqRegs & IRQ_HEADER_VALID) == IRQ_HEADER_VALID){
			//__NOP( );
		}

		if ((irqRegs & IRQ_HEADER_ERROR) == IRQ_HEADER_ERROR){
 8006396:	1d3b      	adds	r3, r7, #4
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	2220      	movs	r2, #32
 800639c:	4013      	ands	r3, r2
 800639e:	d016      	beq.n	80063ce <RadioBgIrqProcess+0x252>
//			TimerStop(&RxTimeoutTimer);
			if (RxContinuous == false){
 80063a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006450 <RadioBgIrqProcess+0x2d4>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2201      	movs	r2, #1
 80063a6:	4053      	eors	r3, r2
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <RadioBgIrqProcess+0x238>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 80063ae:	2001      	movs	r0, #1
 80063b0:	f000 f896 	bl	80064e0 <SX126xSetOperatingMode>
			}
			if ((RadioEvents != NULL) && (RadioEvents->RxError != NULL)){
 80063b4:	4b25      	ldr	r3, [pc, #148]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <RadioBgIrqProcess+0x252>
 80063bc:	4b23      	ldr	r3, [pc, #140]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <RadioBgIrqProcess+0x252>
				RadioEvents->RxError();
 80063c6:	4b21      	ldr	r3, [pc, #132]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	4798      	blx	r3
			}
		}
	}
	if (TimerRxTimeout){
 80063ce:	4b25      	ldr	r3, [pc, #148]	@ (8006464 <RadioBgIrqProcess+0x2e8>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d016      	beq.n	8006404 <RadioBgIrqProcess+0x288>
		TimerRxTimeout = false;
 80063d6:	4b23      	ldr	r3, [pc, #140]	@ (8006464 <RadioBgIrqProcess+0x2e8>)
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
		if (!rx_timeout_handled){
 80063dc:	1dfb      	adds	r3, r7, #7
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2201      	movs	r2, #1
 80063e2:	4053      	eors	r3, r2
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00c      	beq.n	8006404 <RadioBgIrqProcess+0x288>
//			TimerStop(&RxTimeoutTimer);
			if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)){
 80063ea:	4b18      	ldr	r3, [pc, #96]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d008      	beq.n	8006404 <RadioBgIrqProcess+0x288>
 80063f2:	4b16      	ldr	r3, [pc, #88]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <RadioBgIrqProcess+0x288>
				RadioEvents->RxTimeout();
 80063fc:	4b13      	ldr	r3, [pc, #76]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	4798      	blx	r3
			}
		}
	}
	if (TimerTxTimeout){
 8006404:	4b18      	ldr	r3, [pc, #96]	@ (8006468 <RadioBgIrqProcess+0x2ec>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d016      	beq.n	800643a <RadioBgIrqProcess+0x2be>
		TimerTxTimeout = false;
 800640c:	4b16      	ldr	r3, [pc, #88]	@ (8006468 <RadioBgIrqProcess+0x2ec>)
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
		if (!tx_timeout_handled){
 8006412:	1dbb      	adds	r3, r7, #6
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2201      	movs	r2, #1
 8006418:	4053      	eors	r3, r2
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00c      	beq.n	800643a <RadioBgIrqProcess+0x2be>
//			TimerStop(&TxTimeoutTimer);
			if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL))
 8006420:	4b0a      	ldr	r3, [pc, #40]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d008      	beq.n	800643a <RadioBgIrqProcess+0x2be>
 8006428:	4b08      	ldr	r3, [pc, #32]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <RadioBgIrqProcess+0x2be>
			{
				RadioEvents->TxTimeout();
 8006432:	4b06      	ldr	r3, [pc, #24]	@ (800644c <RadioBgIrqProcess+0x2d0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4798      	blx	r3
			}
		}
	}
}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	46bd      	mov	sp, r7
 800643e:	b003      	add	sp, #12
 8006440:	bd90      	pop	{r4, r7, pc}
 8006442:	46c0      	nop			@ (mov r8, r8)
 8006444:	2000026b 	.word	0x2000026b
 8006448:	0000ffff 	.word	0x0000ffff
 800644c:	20000274 	.word	0x20000274
 8006450:	20000154 	.word	0x20000154
 8006454:	00000902 	.word	0x00000902
 8006458:	00000944 	.word	0x00000944
 800645c:	2000016c 	.word	0x2000016c
 8006460:	20000158 	.word	0x20000158
 8006464:	2000026c 	.word	0x2000026c
 8006468:	2000026d 	.word	0x2000026d

0800646c <RadioIrqProcess>:

void RadioIrqProcess(void){
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
	RadioBgIrqProcess();
 8006470:	f7ff fe84 	bl	800617c <RadioBgIrqProcess>
}
 8006474:	46c0      	nop			@ (mov r8, r8)
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <RadioIrqProcessAfterDeepSleep>:

void RadioIrqProcessAfterDeepSleep(void){
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006480:	b672      	cpsid	i
}
 8006482:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	IrqFired = true;
 8006484:	4b04      	ldr	r3, [pc, #16]	@ (8006498 <RadioIrqProcessAfterDeepSleep+0x1c>)
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800648a:	b662      	cpsie	i
}
 800648c:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
	RadioBgIrqProcess();
 800648e:	f7ff fe75 	bl	800617c <RadioBgIrqProcess>
}
 8006492:	46c0      	nop			@ (mov r8, r8)
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	2000026b 	.word	0x2000026b

0800649c <SX126xInit>:
/*
 * \brief Process the IRQ if handled by the driver
 */
void SX126xProcessIrqs(void);

void SX126xInit(void){
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
	SX126xReset();
 80064a0:	f000 fece 	bl	8007240 <SX126xReset>
	SX126xWakeup();
 80064a4:	f000 ff16 	bl	80072d4 <SX126xWakeup>
	SX126xSetStandby(STDBY_RC);
 80064a8:	2000      	movs	r0, #0
 80064aa:	f000 f961 	bl	8006770 <SX126xSetStandby>

	SX126xSetDio2AsRfSwitchCtrl(true);
 80064ae:	2001      	movs	r0, #1
 80064b0:	f000 fb49 	bl	8006b46 <SX126xSetDio2AsRfSwitchCtrl>

	SX126xSetOperatingMode(MODE_STDBY_RC);
 80064b4:	2001      	movs	r0, #1
 80064b6:	f000 f813 	bl	80064e0 <SX126xSetOperatingMode>
}
 80064ba:	46c0      	nop			@ (mov r8, r8)
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <SX126xReInit>:

void SX126xReInit(void){
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
}
 80064c4:	46c0      	nop			@ (mov r8, r8)
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode(void){
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
	return OperatingMode;
 80064d0:	4b02      	ldr	r3, [pc, #8]	@ (80064dc <SX126xGetOperatingMode+0x10>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
}
 80064d4:	0018      	movs	r0, r3
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	200002cc 	.word	0x200002cc

080064e0 <SX126xSetOperatingMode>:

void SX126xSetOperatingMode(RadioOperatingModes_t mode){
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	0002      	movs	r2, r0
 80064e8:	1dfb      	adds	r3, r7, #7
 80064ea:	701a      	strb	r2, [r3, #0]
	OperatingMode = mode;
 80064ec:	4b03      	ldr	r3, [pc, #12]	@ (80064fc <SX126xSetOperatingMode+0x1c>)
 80064ee:	1dfa      	adds	r2, r7, #7
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	701a      	strb	r2, [r3, #0]
}
 80064f4:	46c0      	nop			@ (mov r8, r8)
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b002      	add	sp, #8
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	200002cc 	.word	0x200002cc

08006500 <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady(void){
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
	if ((SX126xGetOperatingMode() == MODE_SLEEP) || (SX126xGetOperatingMode() == MODE_RX_DC)){
 8006504:	f7ff ffe2 	bl	80064cc <SX126xGetOperatingMode>
 8006508:	1e03      	subs	r3, r0, #0
 800650a:	d004      	beq.n	8006516 <SX126xCheckDeviceReady+0x16>
 800650c:	f7ff ffde 	bl	80064cc <SX126xGetOperatingMode>
 8006510:	0003      	movs	r3, r0
 8006512:	2b06      	cmp	r3, #6
 8006514:	d103      	bne.n	800651e <SX126xCheckDeviceReady+0x1e>
		SX126xWakeup();
 8006516:	f000 fedd 	bl	80072d4 <SX126xWakeup>
		// Switch is turned off when device is in sleep mode and turned on is all other modes
		SX126xAntSwOn();
 800651a:	f001 f8cd 	bl	80076b8 <SX126xAntSwOn>
	}
	SX126xWaitOnBusy();
 800651e:	f000 feaf 	bl	8007280 <SX126xWaitOnBusy>
}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <SX126xSetPayload>:

void SX126xSetPayload(uint8_t *payload, uint8_t size){
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	000a      	movs	r2, r1
 8006532:	1cfb      	adds	r3, r7, #3
 8006534:	701a      	strb	r2, [r3, #0]
	SX126xWriteBuffer(0x00, payload, size);
 8006536:	1cfb      	adds	r3, r7, #3
 8006538:	781a      	ldrb	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	0019      	movs	r1, r3
 800653e:	2000      	movs	r0, #0
 8006540:	f001 f81a 	bl	8007578 <SX126xWriteBuffer>
}
 8006544:	46c0      	nop			@ (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b002      	add	sp, #8
 800654a:	bd80      	pop	{r7, pc}

0800654c <SX126xGetPayload>:

uint8_t SX126xGetPayload(uint8_t *buffer, uint8_t *size, uint8_t maxSize){
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	1dfb      	adds	r3, r7, #7
 8006558:	701a      	strb	r2, [r3, #0]
	uint8_t offset = 0;
 800655a:	2117      	movs	r1, #23
 800655c:	187b      	adds	r3, r7, r1
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]

	SX126xGetRxBufferStatus(size, &offset);
 8006562:	187a      	adds	r2, r7, r1
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	0011      	movs	r1, r2
 8006568:	0018      	movs	r0, r3
 800656a:	f000 fdad 	bl	80070c8 <SX126xGetRxBufferStatus>
	if (*size > maxSize)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	1dfa      	adds	r2, r7, #7
 8006574:	7812      	ldrb	r2, [r2, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d201      	bcs.n	800657e <SX126xGetPayload+0x32>
		return 1;
 800657a:	2301      	movs	r3, #1
 800657c:	e009      	b.n	8006592 <SX126xGetPayload+0x46>
	SX126xReadBuffer(offset, buffer, *size);
 800657e:	2317      	movs	r3, #23
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	7818      	ldrb	r0, [r3, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	0019      	movs	r1, r3
 800658c:	f001 f830 	bl	80075f0 <SX126xReadBuffer>
	return 0;
 8006590:	2300      	movs	r3, #0
}
 8006592:	0018      	movs	r0, r3
 8006594:	46bd      	mov	sp, r7
 8006596:	b006      	add	sp, #24
 8006598:	bd80      	pop	{r7, pc}

0800659a <SX126xSendPayload>:

void SX126xSendPayload(uint8_t *payload, uint8_t size, uint32_t timeout){
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	200b      	movs	r0, #11
 80065a6:	183b      	adds	r3, r7, r0
 80065a8:	1c0a      	adds	r2, r1, #0
 80065aa:	701a      	strb	r2, [r3, #0]
	SX126xSetPayload(payload, size);
 80065ac:	183b      	adds	r3, r7, r0
 80065ae:	781a      	ldrb	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	0011      	movs	r1, r2
 80065b4:	0018      	movs	r0, r3
 80065b6:	f7ff ffb7 	bl	8006528 <SX126xSetPayload>
	SX126xSetTx(timeout);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	0018      	movs	r0, r3
 80065be:	f000 f8f4 	bl	80067aa <SX126xSetTx>
}
 80065c2:	46c0      	nop			@ (mov r8, r8)
 80065c4:	46bd      	mov	sp, r7
 80065c6:	b004      	add	sp, #16
 80065c8:	bd80      	pop	{r7, pc}

080065ca <SX126xSetSyncWord>:

uint8_t SX126xSetSyncWord(uint8_t *syncWord){
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
	SX126xWriteRegisters(REG_LR_SYNCWORDBASEADDRESS, syncWord, 8);
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	23d8      	movs	r3, #216	@ 0xd8
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	2208      	movs	r2, #8
 80065da:	0018      	movs	r0, r3
 80065dc:	f000 ff1a 	bl	8007414 <SX126xWriteRegisters>
	return 0;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	0018      	movs	r0, r3
 80065e4:	46bd      	mov	sp, r7
 80065e6:	b002      	add	sp, #8
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <SX126xSetCrcSeed>:

void SX126xSetCrcSeed(uint16_t seed){
 80065ec:	b590      	push	{r4, r7, lr}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	0002      	movs	r2, r0
 80065f4:	1dbb      	adds	r3, r7, #6
 80065f6:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)((seed >> 8) & 0xFF);
 80065f8:	1dbb      	adds	r3, r7, #6
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	0a1b      	lsrs	r3, r3, #8
 80065fe:	b29b      	uxth	r3, r3
 8006600:	b2da      	uxtb	r2, r3
 8006602:	240c      	movs	r4, #12
 8006604:	193b      	adds	r3, r7, r4
 8006606:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(seed & 0xFF);
 8006608:	1dbb      	adds	r3, r7, #6
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b2da      	uxtb	r2, r3
 800660e:	193b      	adds	r3, r7, r4
 8006610:	705a      	strb	r2, [r3, #1]

	switch (SX126xGetPacketType()){
 8006612:	f000 fb05 	bl	8006c20 <SX126xGetPacketType>
 8006616:	1e03      	subs	r3, r0, #0
 8006618:	d106      	bne.n	8006628 <SX126xSetCrcSeed+0x3c>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCSEEDBASEADDR, buf, 2);
 800661a:	193b      	adds	r3, r7, r4
 800661c:	4805      	ldr	r0, [pc, #20]	@ (8006634 <SX126xSetCrcSeed+0x48>)
 800661e:	2202      	movs	r2, #2
 8006620:	0019      	movs	r1, r3
 8006622:	f000 fef7 	bl	8007414 <SX126xWriteRegisters>
		break;
 8006626:	e000      	b.n	800662a <SX126xSetCrcSeed+0x3e>

		default:
		break;
 8006628:	46c0      	nop			@ (mov r8, r8)
	}
}
 800662a:	46c0      	nop			@ (mov r8, r8)
 800662c:	46bd      	mov	sp, r7
 800662e:	b005      	add	sp, #20
 8006630:	bd90      	pop	{r4, r7, pc}
 8006632:	46c0      	nop			@ (mov r8, r8)
 8006634:	000006bc 	.word	0x000006bc

08006638 <SX126xSetCrcPolynomial>:

void SX126xSetCrcPolynomial(uint16_t polynomial){
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	0002      	movs	r2, r0
 8006640:	1dbb      	adds	r3, r7, #6
 8006642:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)((polynomial >> 8) & 0xFF);
 8006644:	1dbb      	adds	r3, r7, #6
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	0a1b      	lsrs	r3, r3, #8
 800664a:	b29b      	uxth	r3, r3
 800664c:	b2da      	uxtb	r2, r3
 800664e:	240c      	movs	r4, #12
 8006650:	193b      	adds	r3, r7, r4
 8006652:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(polynomial & 0xFF);
 8006654:	1dbb      	adds	r3, r7, #6
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b2da      	uxtb	r2, r3
 800665a:	193b      	adds	r3, r7, r4
 800665c:	705a      	strb	r2, [r3, #1]

	switch (SX126xGetPacketType()){
 800665e:	f000 fadf 	bl	8006c20 <SX126xGetPacketType>
 8006662:	1e03      	subs	r3, r0, #0
 8006664:	d106      	bne.n	8006674 <SX126xSetCrcPolynomial+0x3c>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCPOLYBASEADDR, buf, 2);
 8006666:	193b      	adds	r3, r7, r4
 8006668:	4805      	ldr	r0, [pc, #20]	@ (8006680 <SX126xSetCrcPolynomial+0x48>)
 800666a:	2202      	movs	r2, #2
 800666c:	0019      	movs	r1, r3
 800666e:	f000 fed1 	bl	8007414 <SX126xWriteRegisters>
		break;
 8006672:	e000      	b.n	8006676 <SX126xSetCrcPolynomial+0x3e>

		default:
		break;
 8006674:	46c0      	nop			@ (mov r8, r8)
	}
}
 8006676:	46c0      	nop			@ (mov r8, r8)
 8006678:	46bd      	mov	sp, r7
 800667a:	b005      	add	sp, #20
 800667c:	bd90      	pop	{r4, r7, pc}
 800667e:	46c0      	nop			@ (mov r8, r8)
 8006680:	000006be 	.word	0x000006be

08006684 <SX126xSetWhiteningSeed>:

void SX126xSetWhiteningSeed(uint16_t seed){
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	0002      	movs	r2, r0
 800668c:	1dbb      	adds	r3, r7, #6
 800668e:	801a      	strh	r2, [r3, #0]
	uint8_t regValue = 0;
 8006690:	240f      	movs	r4, #15
 8006692:	193b      	adds	r3, r7, r4
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]

	switch (SX126xGetPacketType()){
 8006698:	f000 fac2 	bl	8006c20 <SX126xGetPacketType>
 800669c:	1e03      	subs	r3, r0, #0
 800669e:	d12c      	bne.n	80066fa <SX126xSetWhiteningSeed+0x76>
		case PACKET_TYPE_GFSK:
			regValue = SX126xReadRegister(REG_LR_WHITSEEDBASEADDR_MSB) & 0xFE;
 80066a0:	23d7      	movs	r3, #215	@ 0xd7
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	0018      	movs	r0, r3
 80066a6:	f000 ff53 	bl	8007550 <SX126xReadRegister>
 80066aa:	0003      	movs	r3, r0
 80066ac:	0019      	movs	r1, r3
 80066ae:	0020      	movs	r0, r4
 80066b0:	183b      	adds	r3, r7, r0
 80066b2:	2201      	movs	r2, #1
 80066b4:	4391      	bics	r1, r2
 80066b6:	000a      	movs	r2, r1
 80066b8:	701a      	strb	r2, [r3, #0]
			regValue = ((seed >> 8) & 0x01) | regValue;
 80066ba:	1dbb      	adds	r3, r7, #6
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	b25b      	sxtb	r3, r3
 80066c4:	2201      	movs	r2, #1
 80066c6:	4013      	ands	r3, r2
 80066c8:	b25a      	sxtb	r2, r3
 80066ca:	183b      	adds	r3, r7, r0
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	b25b      	sxtb	r3, r3
 80066d0:	4313      	orrs	r3, r2
 80066d2:	b25a      	sxtb	r2, r3
 80066d4:	183b      	adds	r3, r7, r0
 80066d6:	701a      	strb	r2, [r3, #0]
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_MSB, regValue); // only 1 bit.
 80066d8:	183b      	adds	r3, r7, r0
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	23d7      	movs	r3, #215	@ 0xd7
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	0011      	movs	r1, r2
 80066e2:	0018      	movs	r0, r3
 80066e4:	f000 feda 	bl	800749c <SX126xWriteRegister>
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed);
 80066e8:	1dbb      	adds	r3, r7, #6
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	4a05      	ldr	r2, [pc, #20]	@ (8006704 <SX126xSetWhiteningSeed+0x80>)
 80066f0:	0019      	movs	r1, r3
 80066f2:	0010      	movs	r0, r2
 80066f4:	f000 fed2 	bl	800749c <SX126xWriteRegister>
		break;
 80066f8:	e000      	b.n	80066fc <SX126xSetWhiteningSeed+0x78>

		default:
		break;
 80066fa:	46c0      	nop			@ (mov r8, r8)
	}
}
 80066fc:	46c0      	nop			@ (mov r8, r8)
 80066fe:	46bd      	mov	sp, r7
 8006700:	b005      	add	sp, #20
 8006702:	bd90      	pop	{r4, r7, pc}
 8006704:	000006b9 	.word	0x000006b9

08006708 <SX126xGetRandom>:

uint32_t SX126xGetRandom(void){
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
	uint8_t buf[] = {0, 0, 0, 0};
 800670e:	1d3b      	adds	r3, r7, #4
 8006710:	2200      	movs	r2, #0
 8006712:	601a      	str	r2, [r3, #0]

	SX126xReadRegisters(RANDOM_NUMBER_GENERATORBASEADDR, buf, 4);
 8006714:	1d3b      	adds	r3, r7, #4
 8006716:	480b      	ldr	r0, [pc, #44]	@ (8006744 <SX126xGetRandom+0x3c>)
 8006718:	2204      	movs	r2, #4
 800671a:	0019      	movs	r1, r3
 800671c:	f000 fed2 	bl	80074c4 <SX126xReadRegisters>

	return (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8006720:	1d3b      	adds	r3, r7, #4
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	061a      	lsls	r2, r3, #24
 8006726:	1d3b      	adds	r3, r7, #4
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	041b      	lsls	r3, r3, #16
 800672c:	431a      	orrs	r2, r3
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	789b      	ldrb	r3, [r3, #2]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	4313      	orrs	r3, r2
 8006736:	1d3a      	adds	r2, r7, #4
 8006738:	78d2      	ldrb	r2, [r2, #3]
 800673a:	4313      	orrs	r3, r2
}
 800673c:	0018      	movs	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	b002      	add	sp, #8
 8006742:	bd80      	pop	{r7, pc}
 8006744:	00000819 	.word	0x00000819

08006748 <SX126xSetSleep>:

void SX126xSetSleep(SleepParams_t sleepConfig){
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	1d3b      	adds	r3, r7, #4
 8006750:	7018      	strb	r0, [r3, #0]
	SX126xAntSwOff();
 8006752:	f000 ffb6 	bl	80076c2 <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_SLEEP, &sleepConfig.Value, 1);
 8006756:	1d3b      	adds	r3, r7, #4
 8006758:	2201      	movs	r2, #1
 800675a:	0019      	movs	r1, r3
 800675c:	2084      	movs	r0, #132	@ 0x84
 800675e:	f000 fde5 	bl	800732c <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_SLEEP);
 8006762:	2000      	movs	r0, #0
 8006764:	f7ff febc 	bl	80064e0 <SX126xSetOperatingMode>
}
 8006768:	46c0      	nop			@ (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}

08006770 <SX126xSetStandby>:

void SX126xSetStandby(RadioStandbyModes_t standbyConfig){
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	0002      	movs	r2, r0
 8006778:	1dfb      	adds	r3, r7, #7
 800677a:	701a      	strb	r2, [r3, #0]
	SX126xAntSwOff();
 800677c:	f000 ffa1 	bl	80076c2 <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_STANDBY, (uint8_t *)&standbyConfig, 1);
 8006780:	1dfb      	adds	r3, r7, #7
 8006782:	2201      	movs	r2, #1
 8006784:	0019      	movs	r1, r3
 8006786:	2080      	movs	r0, #128	@ 0x80
 8006788:	f000 fdd0 	bl	800732c <SX126xWriteCommand>
	if (standbyConfig == STDBY_RC){
 800678c:	1dfb      	adds	r3, r7, #7
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d103      	bne.n	800679c <SX126xSetStandby+0x2c>
		SX126xSetOperatingMode(MODE_STDBY_RC);
 8006794:	2001      	movs	r0, #1
 8006796:	f7ff fea3 	bl	80064e0 <SX126xSetOperatingMode>
	}
	else{
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
	}
}
 800679a:	e002      	b.n	80067a2 <SX126xSetStandby+0x32>
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
 800679c:	2002      	movs	r0, #2
 800679e:	f7ff fe9f 	bl	80064e0 <SX126xSetOperatingMode>
}
 80067a2:	46c0      	nop			@ (mov r8, r8)
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b002      	add	sp, #8
 80067a8:	bd80      	pop	{r7, pc}

080067aa <SX126xSetTx>:
void SX126xSetFs(void){
	SX126xWriteCommand(RADIO_SET_FS, 0, 0);
	SX126xSetOperatingMode(MODE_FS);
}

void SX126xSetTx(uint32_t timeout){
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_TX);
 80067b2:	2004      	movs	r0, #4
 80067b4:	f7ff fe94 	bl	80064e0 <SX126xSetOperatingMode>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	0c1b      	lsrs	r3, r3, #16
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	210c      	movs	r1, #12
 80067c0:	187b      	adds	r3, r7, r1
 80067c2:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	0a1b      	lsrs	r3, r3, #8
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	187b      	adds	r3, r7, r1
 80067cc:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	187b      	adds	r3, r7, r1
 80067d4:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_TX, buf, 3);
 80067d6:	187b      	adds	r3, r7, r1
 80067d8:	2203      	movs	r2, #3
 80067da:	0019      	movs	r1, r3
 80067dc:	2083      	movs	r0, #131	@ 0x83
 80067de:	f000 fda5 	bl	800732c <SX126xWriteCommand>
}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b004      	add	sp, #16
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <SX126xSetRx>:

void SX126xSetRx(uint32_t timeout){
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 80067f4:	2005      	movs	r0, #5
 80067f6:	f7ff fe73 	bl	80064e0 <SX126xSetOperatingMode>

    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 80067fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006838 <SX126xSetRx+0x4c>)
 80067fc:	2194      	movs	r1, #148	@ 0x94
 80067fe:	0018      	movs	r0, r3
 8006800:	f000 fe4c 	bl	800749c <SX126xWriteRegister>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	b2da      	uxtb	r2, r3
 800680a:	210c      	movs	r1, #12
 800680c:	187b      	adds	r3, r7, r1
 800680e:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	b2da      	uxtb	r2, r3
 8006816:	187b      	adds	r3, r7, r1
 8006818:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	b2da      	uxtb	r2, r3
 800681e:	187b      	adds	r3, r7, r1
 8006820:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 8006822:	187b      	adds	r3, r7, r1
 8006824:	2203      	movs	r2, #3
 8006826:	0019      	movs	r1, r3
 8006828:	2082      	movs	r0, #130	@ 0x82
 800682a:	f000 fd7f 	bl	800732c <SX126xWriteCommand>
}
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	46bd      	mov	sp, r7
 8006832:	b004      	add	sp, #16
 8006834:	bd80      	pop	{r7, pc}
 8006836:	46c0      	nop			@ (mov r8, r8)
 8006838:	000008ac 	.word	0x000008ac

0800683c <SX126xSetRxBoosted>:

void SX126xSetRxBoosted(uint32_t timeout){
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 8006844:	2005      	movs	r0, #5
 8006846:	f7ff fe4b 	bl	80064e0 <SX126xSetOperatingMode>

	SX126xWriteRegister(REG_RX_GAIN, 0x96); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 800684a:	4b0f      	ldr	r3, [pc, #60]	@ (8006888 <SX126xSetRxBoosted+0x4c>)
 800684c:	2196      	movs	r1, #150	@ 0x96
 800684e:	0018      	movs	r0, r3
 8006850:	f000 fe24 	bl	800749c <SX126xWriteRegister>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	b2da      	uxtb	r2, r3
 800685a:	210c      	movs	r1, #12
 800685c:	187b      	adds	r3, r7, r1
 800685e:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	0a1b      	lsrs	r3, r3, #8
 8006864:	b2da      	uxtb	r2, r3
 8006866:	187b      	adds	r3, r7, r1
 8006868:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	b2da      	uxtb	r2, r3
 800686e:	187b      	adds	r3, r7, r1
 8006870:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 8006872:	187b      	adds	r3, r7, r1
 8006874:	2203      	movs	r2, #3
 8006876:	0019      	movs	r1, r3
 8006878:	2082      	movs	r0, #130	@ 0x82
 800687a:	f000 fd57 	bl	800732c <SX126xWriteCommand>
}
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	46bd      	mov	sp, r7
 8006882:	b004      	add	sp, #16
 8006884:	bd80      	pop	{r7, pc}
 8006886:	46c0      	nop			@ (mov r8, r8)
 8006888:	000008ac 	.word	0x000008ac

0800688c <SX126xSetRxDutyCycle>:

void SX126xSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime){
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	buf[0] = (uint8_t)((rxTime >> 16) & 0xFF);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	0c1b      	lsrs	r3, r3, #16
 800689a:	b2da      	uxtb	r2, r3
 800689c:	2108      	movs	r1, #8
 800689e:	187b      	adds	r3, r7, r1
 80068a0:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((rxTime >> 8) & 0xFF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	0a1b      	lsrs	r3, r3, #8
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	187b      	adds	r3, r7, r1
 80068aa:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(rxTime & 0xFF);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	187b      	adds	r3, r7, r1
 80068b2:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)((sleepTime >> 16) & 0xFF);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	187b      	adds	r3, r7, r1
 80068bc:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((sleepTime >> 8) & 0xFF);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	0a1b      	lsrs	r3, r3, #8
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	187b      	adds	r3, r7, r1
 80068c6:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)(sleepTime & 0xFF);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	187b      	adds	r3, r7, r1
 80068ce:	715a      	strb	r2, [r3, #5]
	SX126xWriteCommand(RADIO_SET_RXDUTYCYCLE, buf, 6);
 80068d0:	187b      	adds	r3, r7, r1
 80068d2:	2206      	movs	r2, #6
 80068d4:	0019      	movs	r1, r3
 80068d6:	2094      	movs	r0, #148	@ 0x94
 80068d8:	f000 fd28 	bl	800732c <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_RX_DC);
 80068dc:	2006      	movs	r0, #6
 80068de:	f7ff fdff 	bl	80064e0 <SX126xSetOperatingMode>
}
 80068e2:	46c0      	nop			@ (mov r8, r8)
 80068e4:	46bd      	mov	sp, r7
 80068e6:	b004      	add	sp, #16
 80068e8:	bd80      	pop	{r7, pc}

080068ea <SX126xSetCad>:

void SX126xSetCad(void){
 80068ea:	b580      	push	{r7, lr}
 80068ec:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_CAD, 0, 0);
 80068ee:	2200      	movs	r2, #0
 80068f0:	2100      	movs	r1, #0
 80068f2:	20c5      	movs	r0, #197	@ 0xc5
 80068f4:	f000 fd1a 	bl	800732c <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_CAD);
 80068f8:	2007      	movs	r0, #7
 80068fa:	f7ff fdf1 	bl	80064e0 <SX126xSetOperatingMode>
}
 80068fe:	46c0      	nop			@ (mov r8, r8)
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <SX126xSetTxContinuousWave>:

void SX126xSetTxContinuousWave(void){
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSWAVE, 0, 0);
 8006908:	2200      	movs	r2, #0
 800690a:	2100      	movs	r1, #0
 800690c:	20d1      	movs	r0, #209	@ 0xd1
 800690e:	f000 fd0d 	bl	800732c <SX126xWriteCommand>
}
 8006912:	46c0      	nop			@ (mov r8, r8)
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <SX126xSetStopRxTimerOnPreambleDetect>:

void SX126xSetTxInfinitePreamble(void){
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0);
}

void SX126xSetStopRxTimerOnPreambleDetect(bool enable){
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	0002      	movs	r2, r0
 8006920:	1dfb      	adds	r3, r7, #7
 8006922:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_STOPRXTIMERONPREAMBLE, (uint8_t *)&enable, 1);
 8006924:	1dfb      	adds	r3, r7, #7
 8006926:	2201      	movs	r2, #1
 8006928:	0019      	movs	r1, r3
 800692a:	209f      	movs	r0, #159	@ 0x9f
 800692c:	f000 fcfe 	bl	800732c <SX126xWriteCommand>
}
 8006930:	46c0      	nop			@ (mov r8, r8)
 8006932:	46bd      	mov	sp, r7
 8006934:	b002      	add	sp, #8
 8006936:	bd80      	pop	{r7, pc}

08006938 <SX126xSetLoRaSymbNumTimeout>:

void SX126xSetLoRaSymbNumTimeout(uint8_t SymbNum){
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	0002      	movs	r2, r0
 8006940:	1dfb      	adds	r3, r7, #7
 8006942:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_LORASYMBTIMEOUT, &SymbNum, 1);
 8006944:	1dfb      	adds	r3, r7, #7
 8006946:	2201      	movs	r2, #1
 8006948:	0019      	movs	r1, r3
 800694a:	20a0      	movs	r0, #160	@ 0xa0
 800694c:	f000 fcee 	bl	800732c <SX126xWriteCommand>
}
 8006950:	46c0      	nop			@ (mov r8, r8)
 8006952:	46bd      	mov	sp, r7
 8006954:	b002      	add	sp, #8
 8006956:	bd80      	pop	{r7, pc}

08006958 <SX126xSetRegulatorMode>:

void SX126xSetRegulatorMode(RadioRegulatorMode_t mode){
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	0002      	movs	r2, r0
 8006960:	1dfb      	adds	r3, r7, #7
 8006962:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_REGULATORMODE, (uint8_t *)&mode, 1);
 8006964:	1dfb      	adds	r3, r7, #7
 8006966:	2201      	movs	r2, #1
 8006968:	0019      	movs	r1, r3
 800696a:	2096      	movs	r0, #150	@ 0x96
 800696c:	f000 fcde 	bl	800732c <SX126xWriteCommand>
}
 8006970:	46c0      	nop			@ (mov r8, r8)
 8006972:	46bd      	mov	sp, r7
 8006974:	b002      	add	sp, #8
 8006976:	bd80      	pop	{r7, pc}

08006978 <SX126xCalibrateImage>:

void SX126xCalibrate(CalibrationParams_t calibParam){
	SX126xWriteCommand(RADIO_CALIBRATE, (uint8_t *)&calibParam, 1);
}

void SX126xCalibrateImage(uint32_t freq){
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	uint8_t calFreq[2];

	if (freq > 900000000){
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a22      	ldr	r2, [pc, #136]	@ (8006a0c <SX126xCalibrateImage+0x94>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d907      	bls.n	8006998 <SX126xCalibrateImage+0x20>
		calFreq[0] = 0xE1;
 8006988:	210c      	movs	r1, #12
 800698a:	187b      	adds	r3, r7, r1
 800698c:	22e1      	movs	r2, #225	@ 0xe1
 800698e:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xE9;
 8006990:	187b      	adds	r3, r7, r1
 8006992:	22e9      	movs	r2, #233	@ 0xe9
 8006994:	705a      	strb	r2, [r3, #1]
 8006996:	e02e      	b.n	80069f6 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 850000000){
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a10 <SX126xCalibrateImage+0x98>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d907      	bls.n	80069b0 <SX126xCalibrateImage+0x38>
		calFreq[0] = 0xD7;
 80069a0:	210c      	movs	r1, #12
 80069a2:	187b      	adds	r3, r7, r1
 80069a4:	22d7      	movs	r2, #215	@ 0xd7
 80069a6:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xDB;
 80069a8:	187b      	adds	r3, r7, r1
 80069aa:	22db      	movs	r2, #219	@ 0xdb
 80069ac:	705a      	strb	r2, [r3, #1]
 80069ae:	e022      	b.n	80069f6 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 770000000){
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a18      	ldr	r2, [pc, #96]	@ (8006a14 <SX126xCalibrateImage+0x9c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d907      	bls.n	80069c8 <SX126xCalibrateImage+0x50>
		calFreq[0] = 0xC1;
 80069b8:	210c      	movs	r1, #12
 80069ba:	187b      	adds	r3, r7, r1
 80069bc:	22c1      	movs	r2, #193	@ 0xc1
 80069be:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xC5;
 80069c0:	187b      	adds	r3, r7, r1
 80069c2:	22c5      	movs	r2, #197	@ 0xc5
 80069c4:	705a      	strb	r2, [r3, #1]
 80069c6:	e016      	b.n	80069f6 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 460000000){
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a13      	ldr	r2, [pc, #76]	@ (8006a18 <SX126xCalibrateImage+0xa0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d907      	bls.n	80069e0 <SX126xCalibrateImage+0x68>
		calFreq[0] = 0x75;
 80069d0:	210c      	movs	r1, #12
 80069d2:	187b      	adds	r3, r7, r1
 80069d4:	2275      	movs	r2, #117	@ 0x75
 80069d6:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0x81;
 80069d8:	187b      	adds	r3, r7, r1
 80069da:	2281      	movs	r2, #129	@ 0x81
 80069dc:	705a      	strb	r2, [r3, #1]
 80069de:	e00a      	b.n	80069f6 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 425000000){
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a0e      	ldr	r2, [pc, #56]	@ (8006a1c <SX126xCalibrateImage+0xa4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d906      	bls.n	80069f6 <SX126xCalibrateImage+0x7e>
		calFreq[0] = 0x6B;
 80069e8:	210c      	movs	r1, #12
 80069ea:	187b      	adds	r3, r7, r1
 80069ec:	226b      	movs	r2, #107	@ 0x6b
 80069ee:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0x6F;
 80069f0:	187b      	adds	r3, r7, r1
 80069f2:	226f      	movs	r2, #111	@ 0x6f
 80069f4:	705a      	strb	r2, [r3, #1]
	}
	SX126xWriteCommand(RADIO_CALIBRATEIMAGE, calFreq, 2);
 80069f6:	230c      	movs	r3, #12
 80069f8:	18fb      	adds	r3, r7, r3
 80069fa:	2202      	movs	r2, #2
 80069fc:	0019      	movs	r1, r3
 80069fe:	2098      	movs	r0, #152	@ 0x98
 8006a00:	f000 fc94 	bl	800732c <SX126xWriteCommand>
}
 8006a04:	46c0      	nop			@ (mov r8, r8)
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b004      	add	sp, #16
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	35a4e900 	.word	0x35a4e900
 8006a10:	32a9f880 	.word	0x32a9f880
 8006a14:	2de54480 	.word	0x2de54480
 8006a18:	1b6b0b00 	.word	0x1b6b0b00
 8006a1c:	1954fc40 	.word	0x1954fc40

08006a20 <SX126xSetPaConfig>:

void SX126xSetPaConfig(uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut){
 8006a20:	b5b0      	push	{r4, r5, r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	0005      	movs	r5, r0
 8006a28:	000c      	movs	r4, r1
 8006a2a:	0010      	movs	r0, r2
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	1dfb      	adds	r3, r7, #7
 8006a30:	1c2a      	adds	r2, r5, #0
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	1dbb      	adds	r3, r7, #6
 8006a36:	1c22      	adds	r2, r4, #0
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	1d7b      	adds	r3, r7, #5
 8006a3c:	1c02      	adds	r2, r0, #0
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	1d3b      	adds	r3, r7, #4
 8006a42:	1c0a      	adds	r2, r1, #0
 8006a44:	701a      	strb	r2, [r3, #0]
	uint8_t buf[4];

	buf[0] = paDutyCycle;
 8006a46:	210c      	movs	r1, #12
 8006a48:	187b      	adds	r3, r7, r1
 8006a4a:	1dfa      	adds	r2, r7, #7
 8006a4c:	7812      	ldrb	r2, [r2, #0]
 8006a4e:	701a      	strb	r2, [r3, #0]
	buf[1] = hpMax;
 8006a50:	187b      	adds	r3, r7, r1
 8006a52:	1dba      	adds	r2, r7, #6
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	705a      	strb	r2, [r3, #1]
	buf[2] = deviceSel;
 8006a58:	187b      	adds	r3, r7, r1
 8006a5a:	1d7a      	adds	r2, r7, #5
 8006a5c:	7812      	ldrb	r2, [r2, #0]
 8006a5e:	709a      	strb	r2, [r3, #2]
	buf[3] = paLut;
 8006a60:	187b      	adds	r3, r7, r1
 8006a62:	1d3a      	adds	r2, r7, #4
 8006a64:	7812      	ldrb	r2, [r2, #0]
 8006a66:	70da      	strb	r2, [r3, #3]
	SX126xWriteCommand(RADIO_SET_PACONFIG, buf, 4);
 8006a68:	187b      	adds	r3, r7, r1
 8006a6a:	2204      	movs	r2, #4
 8006a6c:	0019      	movs	r1, r3
 8006a6e:	2095      	movs	r0, #149	@ 0x95
 8006a70:	f000 fc5c 	bl	800732c <SX126xWriteCommand>
}
 8006a74:	46c0      	nop			@ (mov r8, r8)
 8006a76:	46bd      	mov	sp, r7
 8006a78:	b004      	add	sp, #16
 8006a7a:	bdb0      	pop	{r4, r5, r7, pc}

08006a7c <SX126xSetDioIrqParams>:

void SX126xSetRxTxFallbackMode(uint8_t fallbackMode){
	SX126xWriteCommand(RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1);
}

void SX126xSetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask){
 8006a7c:	b5b0      	push	{r4, r5, r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	0005      	movs	r5, r0
 8006a84:	000c      	movs	r4, r1
 8006a86:	0010      	movs	r0, r2
 8006a88:	0019      	movs	r1, r3
 8006a8a:	1dbb      	adds	r3, r7, #6
 8006a8c:	1c2a      	adds	r2, r5, #0
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	1d3b      	adds	r3, r7, #4
 8006a92:	1c22      	adds	r2, r4, #0
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	1cbb      	adds	r3, r7, #2
 8006a98:	1c02      	adds	r2, r0, #0
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	003b      	movs	r3, r7
 8006a9e:	1c0a      	adds	r2, r1, #0
 8006aa0:	801a      	strh	r2, [r3, #0]
	uint8_t buf[8];

	buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 8006aa2:	1dbb      	adds	r3, r7, #6
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	0a1b      	lsrs	r3, r3, #8
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	2108      	movs	r1, #8
 8006aae:	187b      	adds	r3, r7, r1
 8006ab0:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(irqMask & 0x00FF);
 8006ab2:	1dbb      	adds	r3, r7, #6
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	187b      	adds	r3, r7, r1
 8006aba:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)((dio1Mask >> 8) & 0x00FF);
 8006abc:	1d3b      	adds	r3, r7, #4
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	0a1b      	lsrs	r3, r3, #8
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	187b      	adds	r3, r7, r1
 8006ac8:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)(dio1Mask & 0x00FF);
 8006aca:	1d3b      	adds	r3, r7, #4
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	187b      	adds	r3, r7, r1
 8006ad2:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((dio2Mask >> 8) & 0x00FF);
 8006ad4:	1cbb      	adds	r3, r7, #2
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	0a1b      	lsrs	r3, r3, #8
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	187b      	adds	r3, r7, r1
 8006ae0:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)(dio2Mask & 0x00FF);
 8006ae2:	1cbb      	adds	r3, r7, #2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	187b      	adds	r3, r7, r1
 8006aea:	715a      	strb	r2, [r3, #5]
	buf[6] = (uint8_t)((dio3Mask >> 8) & 0x00FF);
 8006aec:	003b      	movs	r3, r7
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	187b      	adds	r3, r7, r1
 8006af8:	719a      	strb	r2, [r3, #6]
	buf[7] = (uint8_t)(dio3Mask & 0x00FF);
 8006afa:	003b      	movs	r3, r7
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	187b      	adds	r3, r7, r1
 8006b02:	71da      	strb	r2, [r3, #7]
	SX126xWriteCommand(RADIO_CFG_DIOIRQ, buf, 8);
 8006b04:	187b      	adds	r3, r7, r1
 8006b06:	2208      	movs	r2, #8
 8006b08:	0019      	movs	r1, r3
 8006b0a:	2008      	movs	r0, #8
 8006b0c:	f000 fc0e 	bl	800732c <SX126xWriteCommand>
}
 8006b10:	46c0      	nop			@ (mov r8, r8)
 8006b12:	46bd      	mov	sp, r7
 8006b14:	b004      	add	sp, #16
 8006b16:	bdb0      	pop	{r4, r5, r7, pc}

08006b18 <SX126xGetIrqStatus>:

uint16_t SX126xGetIrqStatus(void){
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
	uint8_t irqStatus[2];

	SX126xReadCommand(RADIO_GET_IRQSTATUS, irqStatus, 2);
 8006b1e:	1d3b      	adds	r3, r7, #4
 8006b20:	2202      	movs	r2, #2
 8006b22:	0019      	movs	r1, r3
 8006b24:	2012      	movs	r0, #18
 8006b26:	f000 fc39 	bl	800739c <SX126xReadCommand>
	return (irqStatus[0] << 8) | irqStatus[1];
 8006b2a:	1d3b      	adds	r3, r7, #4
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	b21a      	sxth	r2, r3
 8006b32:	1d3b      	adds	r3, r7, #4
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	b21b      	sxth	r3, r3
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	b21b      	sxth	r3, r3
 8006b3c:	b29b      	uxth	r3, r3
}
 8006b3e:	0018      	movs	r0, r3
 8006b40:	46bd      	mov	sp, r7
 8006b42:	b002      	add	sp, #8
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <SX126xSetDio2AsRfSwitchCtrl>:

void SX126xSetDio2AsRfSwitchCtrl(uint8_t enable){
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	0002      	movs	r2, r0
 8006b4e:	1dfb      	adds	r3, r7, #7
 8006b50:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_RFSWITCHMODE, &enable, 1);
 8006b52:	1dfb      	adds	r3, r7, #7
 8006b54:	2201      	movs	r2, #1
 8006b56:	0019      	movs	r1, r3
 8006b58:	209d      	movs	r0, #157	@ 0x9d
 8006b5a:	f000 fbe7 	bl	800732c <SX126xWriteCommand>
}
 8006b5e:	46c0      	nop			@ (mov r8, r8)
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <SX126xSetRfFrequency>:
	buf[3] = (uint8_t)(timeout & 0xFF);

	SX126xWriteCommand(RADIO_SET_TCXOMODE, buf, 4);
}

void SX126xSetRfFrequency(uint32_t frequency){
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	uint8_t buf[4];
	uint32_t freq = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]

	if (ImageCalibrated == false){
 8006b74:	4b1d      	ldr	r3, [pc, #116]	@ (8006bec <SX126xSetRfFrequency+0x84>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	4053      	eors	r3, r2
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d006      	beq.n	8006b90 <SX126xSetRfFrequency+0x28>
		SX126xCalibrateImage(frequency);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	0018      	movs	r0, r3
 8006b86:	f7ff fef7 	bl	8006978 <SX126xCalibrateImage>
		ImageCalibrated = true;
 8006b8a:	4b18      	ldr	r3, [pc, #96]	@ (8006bec <SX126xSetRfFrequency+0x84>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	701a      	strb	r2, [r3, #0]
	}

	freq = (uint32_t)((double)frequency / (double)FREQ_STEP);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7fb fa17 	bl	8001fc4 <__aeabi_ui2d>
 8006b96:	2200      	movs	r2, #0
 8006b98:	4b15      	ldr	r3, [pc, #84]	@ (8006bf0 <SX126xSetRfFrequency+0x88>)
 8006b9a:	f7f9 ff01 	bl	80009a0 <__aeabi_ddiv>
 8006b9e:	0002      	movs	r2, r0
 8006ba0:	000b      	movs	r3, r1
 8006ba2:	0010      	movs	r0, r2
 8006ba4:	0019      	movs	r1, r3
 8006ba6:	f7f9 fb79 	bl	800029c <__aeabi_d2uiz>
 8006baa:	0003      	movs	r3, r0
 8006bac:	60fb      	str	r3, [r7, #12]
	buf[0] = (uint8_t)((freq >> 24) & 0xFF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	0e1b      	lsrs	r3, r3, #24
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	2108      	movs	r1, #8
 8006bb6:	187b      	adds	r3, r7, r1
 8006bb8:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((freq >> 16) & 0xFF);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	0c1b      	lsrs	r3, r3, #16
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	187b      	adds	r3, r7, r1
 8006bc2:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)((freq >> 8) & 0xFF);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	187b      	adds	r3, r7, r1
 8006bcc:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)(freq & 0xFF);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	187b      	adds	r3, r7, r1
 8006bd4:	70da      	strb	r2, [r3, #3]
	SX126xWriteCommand(RADIO_SET_RFFREQUENCY, buf, 4);
 8006bd6:	187b      	adds	r3, r7, r1
 8006bd8:	2204      	movs	r2, #4
 8006bda:	0019      	movs	r1, r3
 8006bdc:	2086      	movs	r0, #134	@ 0x86
 8006bde:	f000 fba5 	bl	800732c <SX126xWriteCommand>
}
 8006be2:	46c0      	nop			@ (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b004      	add	sp, #16
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	46c0      	nop			@ (mov r8, r8)
 8006bec:	200002d4 	.word	0x200002d4
 8006bf0:	3fee8480 	.word	0x3fee8480

08006bf4 <SX126xSetPacketType>:

void SX126xSetPacketType(RadioPacketTypes_t packetType){
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	0002      	movs	r2, r0
 8006bfc:	1dfb      	adds	r3, r7, #7
 8006bfe:	701a      	strb	r2, [r3, #0]
	// Save packet type internally to avoid questioning the radio
	PacketType = packetType;
 8006c00:	1dfb      	adds	r3, r7, #7
 8006c02:	781a      	ldrb	r2, [r3, #0]
 8006c04:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <SX126xSetPacketType+0x28>)
 8006c06:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_PACKETTYPE, (uint8_t *)&packetType, 1);
 8006c08:	1dfb      	adds	r3, r7, #7
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	0019      	movs	r1, r3
 8006c0e:	208a      	movs	r0, #138	@ 0x8a
 8006c10:	f000 fb8c 	bl	800732c <SX126xWriteCommand>
}
 8006c14:	46c0      	nop			@ (mov r8, r8)
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b002      	add	sp, #8
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	200002cd 	.word	0x200002cd

08006c20 <SX126xGetPacketType>:

RadioPacketTypes_t SX126xGetPacketType(void){
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
	return PacketType;
 8006c24:	4b02      	ldr	r3, [pc, #8]	@ (8006c30 <SX126xGetPacketType+0x10>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
}
 8006c28:	0018      	movs	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	46c0      	nop			@ (mov r8, r8)
 8006c30:	200002cd 	.word	0x200002cd

08006c34 <SX126xSetTxParams>:

void SX126xSetTxParams(int8_t power, RadioRampTimes_t rampTime){
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	0002      	movs	r2, r0
 8006c3c:	1dfb      	adds	r3, r7, #7
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	1dbb      	adds	r3, r7, #6
 8006c42:	1c0a      	adds	r2, r1, #0
 8006c44:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];

	if (SX126xGetPaSelect(0) == SX1261){
 8006c46:	2000      	movs	r0, #0
 8006c48:	f000 fd2d 	bl	80076a6 <SX126xGetPaSelect>
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d128      	bne.n	8006ca4 <SX126xSetTxParams+0x70>
		if (power == 15){
 8006c52:	1dfb      	adds	r3, r7, #7
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b25b      	sxtb	r3, r3
 8006c58:	2b0f      	cmp	r3, #15
 8006c5a:	d106      	bne.n	8006c6a <SX126xSetTxParams+0x36>
			SX126xSetPaConfig(0x06, 0x00, 0x01, 0x01);
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	2201      	movs	r2, #1
 8006c60:	2100      	movs	r1, #0
 8006c62:	2006      	movs	r0, #6
 8006c64:	f7ff fedc 	bl	8006a20 <SX126xSetPaConfig>
 8006c68:	e005      	b.n	8006c76 <SX126xSetTxParams+0x42>
		}
		else{
			SX126xSetPaConfig(0x04, 0x00, 0x01, 0x01);
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	2100      	movs	r1, #0
 8006c70:	2004      	movs	r0, #4
 8006c72:	f7ff fed5 	bl	8006a20 <SX126xSetPaConfig>
		}
		if (power >= 14){
 8006c76:	1dfb      	adds	r3, r7, #7
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	b25b      	sxtb	r3, r3
 8006c7c:	2b0d      	cmp	r3, #13
 8006c7e:	dd03      	ble.n	8006c88 <SX126xSetTxParams+0x54>
			power = 14;
 8006c80:	1dfb      	adds	r3, r7, #7
 8006c82:	220e      	movs	r2, #14
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e007      	b.n	8006c98 <SX126xSetTxParams+0x64>
		}
		else if (power < -17){
 8006c88:	1dfb      	adds	r3, r7, #7
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	b25b      	sxtb	r3, r3
 8006c8e:	3311      	adds	r3, #17
 8006c90:	da02      	bge.n	8006c98 <SX126xSetTxParams+0x64>
			power = -17;
 8006c92:	1dfb      	adds	r3, r7, #7
 8006c94:	22ef      	movs	r2, #239	@ 0xef
 8006c96:	701a      	strb	r2, [r3, #0]
		}
		SX126xWriteRegister(REG_OCP, 0x18); // current max is 80 mA for the whole device
 8006c98:	4b21      	ldr	r3, [pc, #132]	@ (8006d20 <SX126xSetTxParams+0xec>)
 8006c9a:	2118      	movs	r1, #24
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f000 fbfd 	bl	800749c <SX126xWriteRegister>
 8006ca2:	e029      	b.n	8006cf8 <SX126xSetTxParams+0xc4>
	}
	else {
		// WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
		// RegTxClampConfig = @address 0x08D8
		SX126xWriteRegister(0x08D8, SX126xReadRegister(0x08D8) | (0x0F << 1));
 8006ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8006d24 <SX126xSetTxParams+0xf0>)
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f000 fc52 	bl	8007550 <SX126xReadRegister>
 8006cac:	0003      	movs	r3, r0
 8006cae:	001a      	movs	r2, r3
 8006cb0:	231e      	movs	r3, #30
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8006d24 <SX126xSetTxParams+0xf0>)
 8006cb8:	0019      	movs	r1, r3
 8006cba:	0010      	movs	r0, r2
 8006cbc:	f000 fbee 	bl	800749c <SX126xWriteRegister>
		// WORKAROUND END
		SX126xSetPaConfig(0x04, 0x07, 0x00, 0x01);
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2107      	movs	r1, #7
 8006cc6:	2004      	movs	r0, #4
 8006cc8:	f7ff feaa 	bl	8006a20 <SX126xSetPaConfig>
		if (power > 22){
 8006ccc:	1dfb      	adds	r3, r7, #7
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	b25b      	sxtb	r3, r3
 8006cd2:	2b16      	cmp	r3, #22
 8006cd4:	dd03      	ble.n	8006cde <SX126xSetTxParams+0xaa>
			power = 22;
 8006cd6:	1dfb      	adds	r3, r7, #7
 8006cd8:	2216      	movs	r2, #22
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	e007      	b.n	8006cee <SX126xSetTxParams+0xba>
		}
		else if (power < -9){
 8006cde:	1dfb      	adds	r3, r7, #7
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	b25b      	sxtb	r3, r3
 8006ce4:	3309      	adds	r3, #9
 8006ce6:	da02      	bge.n	8006cee <SX126xSetTxParams+0xba>
			power = -9;
 8006ce8:	1dfb      	adds	r3, r7, #7
 8006cea:	22f7      	movs	r2, #247	@ 0xf7
 8006cec:	701a      	strb	r2, [r3, #0]
		}
		SX126xWriteRegister(REG_OCP, 0x38); // current max 160mA for the whole device
 8006cee:	4b0c      	ldr	r3, [pc, #48]	@ (8006d20 <SX126xSetTxParams+0xec>)
 8006cf0:	2138      	movs	r1, #56	@ 0x38
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f000 fbd2 	bl	800749c <SX126xWriteRegister>
	}
	buf[0] = power;
 8006cf8:	1dfb      	adds	r3, r7, #7
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	210c      	movs	r1, #12
 8006cfe:	187b      	adds	r3, r7, r1
 8006d00:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)rampTime;
 8006d02:	187b      	adds	r3, r7, r1
 8006d04:	1dba      	adds	r2, r7, #6
 8006d06:	7812      	ldrb	r2, [r2, #0]
 8006d08:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8006d0a:	187b      	adds	r3, r7, r1
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	0019      	movs	r1, r3
 8006d10:	208e      	movs	r0, #142	@ 0x8e
 8006d12:	f000 fb0b 	bl	800732c <SX126xWriteCommand>
}
 8006d16:	46c0      	nop			@ (mov r8, r8)
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	b004      	add	sp, #16
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	46c0      	nop			@ (mov r8, r8)
 8006d20:	000008e7 	.word	0x000008e7
 8006d24:	000008d8 	.word	0x000008d8

08006d28 <SX126xSetModulationParams>:

void SX126xSetModulationParams(ModulationParams_t *modulationParams){
 8006d28:	b5b0      	push	{r4, r5, r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint32_t tempVal = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]
	uint8_t buf[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006d34:	2308      	movs	r3, #8
 8006d36:	18fb      	adds	r3, r7, r3
 8006d38:	4a49      	ldr	r2, [pc, #292]	@ (8006e60 <SX126xSetModulationParams+0x138>)
 8006d3a:	ca03      	ldmia	r2!, {r0, r1}
 8006d3c:	c303      	stmia	r3!, {r0, r1}

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != modulationParams->PacketType){
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	4b48      	ldr	r3, [pc, #288]	@ (8006e64 <SX126xSetModulationParams+0x13c>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d004      	beq.n	8006d54 <SX126xSetModulationParams+0x2c>
		SX126xSetPacketType(modulationParams->PacketType);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7ff ff50 	bl	8006bf4 <SX126xSetPacketType>
	}

	switch (modulationParams->PacketType){
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <SX126xSetModulationParams+0x3a>
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d05e      	beq.n	8006e1e <SX126xSetModulationParams+0xf6>

			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
		break;
		case PACKET_TYPE_NONE:
		default:
		return;
 8006d60:	e07b      	b.n	8006e5a <SX126xSetModulationParams+0x132>
			n = 8;
 8006d62:	2513      	movs	r5, #19
 8006d64:	197b      	adds	r3, r7, r5
 8006d66:	2208      	movs	r2, #8
 8006d68:	701a      	strb	r2, [r3, #0]
			tempVal = (uint32_t)(32 * ((double)XTAL_FREQ / (double)modulationParams->Params.Gfsk.BitRate));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f7fb f928 	bl	8001fc4 <__aeabi_ui2d>
 8006d74:	0002      	movs	r2, r0
 8006d76:	000b      	movs	r3, r1
 8006d78:	2000      	movs	r0, #0
 8006d7a:	493b      	ldr	r1, [pc, #236]	@ (8006e68 <SX126xSetModulationParams+0x140>)
 8006d7c:	f7f9 fe10 	bl	80009a0 <__aeabi_ddiv>
 8006d80:	0002      	movs	r2, r0
 8006d82:	000b      	movs	r3, r1
 8006d84:	0010      	movs	r0, r2
 8006d86:	0019      	movs	r1, r3
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4b38      	ldr	r3, [pc, #224]	@ (8006e6c <SX126xSetModulationParams+0x144>)
 8006d8c:	f7fa fa4c 	bl	8001228 <__aeabi_dmul>
 8006d90:	0002      	movs	r2, r0
 8006d92:	000b      	movs	r3, r1
 8006d94:	0010      	movs	r0, r2
 8006d96:	0019      	movs	r1, r3
 8006d98:	f7f9 fa80 	bl	800029c <__aeabi_d2uiz>
 8006d9c:	0003      	movs	r3, r0
 8006d9e:	617b      	str	r3, [r7, #20]
			buf[0] = (tempVal >> 16) & 0xFF;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	0c1b      	lsrs	r3, r3, #16
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	2408      	movs	r4, #8
 8006da8:	193b      	adds	r3, r7, r4
 8006daa:	701a      	strb	r2, [r3, #0]
			buf[1] = (tempVal >> 8) & 0xFF;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	0a1b      	lsrs	r3, r3, #8
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	193b      	adds	r3, r7, r4
 8006db4:	705a      	strb	r2, [r3, #1]
			buf[2] = tempVal & 0xFF;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	193b      	adds	r3, r7, r4
 8006dbc:	709a      	strb	r2, [r3, #2]
			buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7b1a      	ldrb	r2, [r3, #12]
 8006dc2:	193b      	adds	r3, r7, r4
 8006dc4:	70da      	strb	r2, [r3, #3]
			buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7b5a      	ldrb	r2, [r3, #13]
 8006dca:	193b      	adds	r3, r7, r4
 8006dcc:	711a      	strb	r2, [r3, #4]
			tempVal = (uint32_t)((double)modulationParams->Params.Gfsk.Fdev / (double)FREQ_STEP);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f7fb f8f6 	bl	8001fc4 <__aeabi_ui2d>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4b25      	ldr	r3, [pc, #148]	@ (8006e70 <SX126xSetModulationParams+0x148>)
 8006ddc:	f7f9 fde0 	bl	80009a0 <__aeabi_ddiv>
 8006de0:	0002      	movs	r2, r0
 8006de2:	000b      	movs	r3, r1
 8006de4:	0010      	movs	r0, r2
 8006de6:	0019      	movs	r1, r3
 8006de8:	f7f9 fa58 	bl	800029c <__aeabi_d2uiz>
 8006dec:	0003      	movs	r3, r0
 8006dee:	617b      	str	r3, [r7, #20]
			buf[5] = (tempVal >> 16) & 0xFF;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	0c1b      	lsrs	r3, r3, #16
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	193b      	adds	r3, r7, r4
 8006df8:	715a      	strb	r2, [r3, #5]
			buf[6] = (tempVal >> 8) & 0xFF;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	193b      	adds	r3, r7, r4
 8006e02:	719a      	strb	r2, [r3, #6]
			buf[7] = (tempVal & 0xFF);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	193b      	adds	r3, r7, r4
 8006e0a:	71da      	strb	r2, [r3, #7]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 8006e0c:	197b      	adds	r3, r7, r5
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	193b      	adds	r3, r7, r4
 8006e14:	0019      	movs	r1, r3
 8006e16:	208b      	movs	r0, #139	@ 0x8b
 8006e18:	f000 fa88 	bl	800732c <SX126xWriteCommand>
		break;
 8006e1c:	e01d      	b.n	8006e5a <SX126xSetModulationParams+0x132>
			n = 4;
 8006e1e:	2013      	movs	r0, #19
 8006e20:	183b      	adds	r3, r7, r0
 8006e22:	2204      	movs	r2, #4
 8006e24:	701a      	strb	r2, [r3, #0]
			buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	7c1a      	ldrb	r2, [r3, #16]
 8006e2a:	2108      	movs	r1, #8
 8006e2c:	187b      	adds	r3, r7, r1
 8006e2e:	701a      	strb	r2, [r3, #0]
			buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7c5a      	ldrb	r2, [r3, #17]
 8006e34:	187b      	adds	r3, r7, r1
 8006e36:	705a      	strb	r2, [r3, #1]
			buf[2] = modulationParams->Params.LoRa.CodingRate;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	7c9a      	ldrb	r2, [r3, #18]
 8006e3c:	187b      	adds	r3, r7, r1
 8006e3e:	709a      	strb	r2, [r3, #2]
			buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	7cda      	ldrb	r2, [r3, #19]
 8006e44:	187b      	adds	r3, r7, r1
 8006e46:	70da      	strb	r2, [r3, #3]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 8006e48:	183b      	adds	r3, r7, r0
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	187b      	adds	r3, r7, r1
 8006e50:	0019      	movs	r1, r3
 8006e52:	208b      	movs	r0, #139	@ 0x8b
 8006e54:	f000 fa6a 	bl	800732c <SX126xWriteCommand>
		break;
 8006e58:	46c0      	nop			@ (mov r8, r8)
	}
}
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b006      	add	sp, #24
 8006e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8006e60:	08007b6c 	.word	0x08007b6c
 8006e64:	200002cd 	.word	0x200002cd
 8006e68:	417e8480 	.word	0x417e8480
 8006e6c:	40400000 	.word	0x40400000
 8006e70:	3fee8480 	.word	0x3fee8480

08006e74 <SX126xSetPacketParams>:

void SX126xSetPacketParams(PacketParams_t *packetParams){
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint8_t crcVal = 0;
 8006e7c:	2316      	movs	r3, #22
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	2200      	movs	r2, #0
 8006e82:	701a      	strb	r2, [r3, #0]
	uint8_t buf[9] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006e84:	230c      	movs	r3, #12
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	4a4d      	ldr	r2, [pc, #308]	@ (8006fc0 <SX126xSetPacketParams+0x14c>)
 8006e8a:	ca03      	ldmia	r2!, {r0, r1}
 8006e8c:	c303      	stmia	r3!, {r0, r1}
 8006e8e:	7812      	ldrb	r2, [r2, #0]
 8006e90:	701a      	strb	r2, [r3, #0]

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != packetParams->PacketType){
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	781a      	ldrb	r2, [r3, #0]
 8006e96:	4b4b      	ldr	r3, [pc, #300]	@ (8006fc4 <SX126xSetPacketParams+0x150>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d004      	beq.n	8006ea8 <SX126xSetPacketParams+0x34>
		SX126xSetPacketType(packetParams->PacketType);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f7ff fea6 	bl	8006bf4 <SX126xSetPacketType>
	}

	switch (packetParams->PacketType){
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <SX126xSetPacketParams+0x42>
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d056      	beq.n	8006f62 <SX126xSetPacketParams+0xee>
			buf[4] = packetParams->Params.LoRa.CrcMode;
			buf[5] = packetParams->Params.LoRa.InvertIQ;
		break;
		default:
		case PACKET_TYPE_NONE:
		return;
 8006eb4:	e081      	b.n	8006fba <SX126xSetPacketParams+0x146>
			if (packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM){
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7a5b      	ldrb	r3, [r3, #9]
 8006eba:	2bf1      	cmp	r3, #241	@ 0xf1
 8006ebc:	d10c      	bne.n	8006ed8 <SX126xSetPacketParams+0x64>
				SX126xSetCrcSeed(CRC_IBM_SEED);
 8006ebe:	4b42      	ldr	r3, [pc, #264]	@ (8006fc8 <SX126xSetPacketParams+0x154>)
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f7ff fb93 	bl	80065ec <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_IBM);
 8006ec6:	4b41      	ldr	r3, [pc, #260]	@ (8006fcc <SX126xSetPacketParams+0x158>)
 8006ec8:	0018      	movs	r0, r3
 8006eca:	f7ff fbb5 	bl	8006638 <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES;
 8006ece:	2316      	movs	r3, #22
 8006ed0:	18fb      	adds	r3, r7, r3
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	e015      	b.n	8006f04 <SX126xSetPacketParams+0x90>
			else if (packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT){
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7a5b      	ldrb	r3, [r3, #9]
 8006edc:	2bf2      	cmp	r3, #242	@ 0xf2
 8006ede:	d10c      	bne.n	8006efa <SX126xSetPacketParams+0x86>
				SX126xSetCrcSeed(CRC_CCITT_SEED);
 8006ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8006fd0 <SX126xSetPacketParams+0x15c>)
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f7ff fb82 	bl	80065ec <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_CCITT);
 8006ee8:	4b3a      	ldr	r3, [pc, #232]	@ (8006fd4 <SX126xSetPacketParams+0x160>)
 8006eea:	0018      	movs	r0, r3
 8006eec:	f7ff fba4 	bl	8006638 <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES_INV;
 8006ef0:	2316      	movs	r3, #22
 8006ef2:	18fb      	adds	r3, r7, r3
 8006ef4:	2206      	movs	r2, #6
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	e004      	b.n	8006f04 <SX126xSetPacketParams+0x90>
				crcVal = packetParams->Params.Gfsk.CrcLength;
 8006efa:	2316      	movs	r3, #22
 8006efc:	18fb      	adds	r3, r7, r3
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	7a52      	ldrb	r2, [r2, #9]
 8006f02:	701a      	strb	r2, [r3, #0]
			n = 9;
 8006f04:	2317      	movs	r3, #23
 8006f06:	18fb      	adds	r3, r7, r3
 8006f08:	2209      	movs	r2, #9
 8006f0a:	701a      	strb	r2, [r3, #0]
			buf[0] = (packetParams->Params.Gfsk.PreambleLength >> 8) & 0xFF;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	885b      	ldrh	r3, [r3, #2]
 8006f10:	0a1b      	lsrs	r3, r3, #8
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	210c      	movs	r1, #12
 8006f18:	187b      	adds	r3, r7, r1
 8006f1a:	701a      	strb	r2, [r3, #0]
			buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	885b      	ldrh	r3, [r3, #2]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	187b      	adds	r3, r7, r1
 8006f24:	705a      	strb	r2, [r3, #1]
			buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	791a      	ldrb	r2, [r3, #4]
 8006f2a:	187b      	adds	r3, r7, r1
 8006f2c:	709a      	strb	r2, [r3, #2]
			buf[3] = (packetParams->Params.Gfsk.SyncWordLength /*<< 3*/); // convert from byte to bit
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	795a      	ldrb	r2, [r3, #5]
 8006f32:	187b      	adds	r3, r7, r1
 8006f34:	70da      	strb	r2, [r3, #3]
			buf[4] = packetParams->Params.Gfsk.AddrComp;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	799a      	ldrb	r2, [r3, #6]
 8006f3a:	187b      	adds	r3, r7, r1
 8006f3c:	711a      	strb	r2, [r3, #4]
			buf[5] = packetParams->Params.Gfsk.HeaderType;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	79da      	ldrb	r2, [r3, #7]
 8006f42:	187b      	adds	r3, r7, r1
 8006f44:	715a      	strb	r2, [r3, #5]
			buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	7a1a      	ldrb	r2, [r3, #8]
 8006f4a:	187b      	adds	r3, r7, r1
 8006f4c:	719a      	strb	r2, [r3, #6]
			buf[7] = crcVal;
 8006f4e:	187b      	adds	r3, r7, r1
 8006f50:	2216      	movs	r2, #22
 8006f52:	18ba      	adds	r2, r7, r2
 8006f54:	7812      	ldrb	r2, [r2, #0]
 8006f56:	71da      	strb	r2, [r3, #7]
			buf[8] = packetParams->Params.Gfsk.DcFree;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	7a9a      	ldrb	r2, [r3, #10]
 8006f5c:	187b      	adds	r3, r7, r1
 8006f5e:	721a      	strb	r2, [r3, #8]
		break;
 8006f60:	e021      	b.n	8006fa6 <SX126xSetPacketParams+0x132>
			n = 6;
 8006f62:	2317      	movs	r3, #23
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	2206      	movs	r2, #6
 8006f68:	701a      	strb	r2, [r3, #0]
			buf[0] = (packetParams->Params.LoRa.PreambleLength >> 8) & 0xFF;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	899b      	ldrh	r3, [r3, #12]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	210c      	movs	r1, #12
 8006f76:	187b      	adds	r3, r7, r1
 8006f78:	701a      	strb	r2, [r3, #0]
			buf[1] = packetParams->Params.LoRa.PreambleLength;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	899b      	ldrh	r3, [r3, #12]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	187b      	adds	r3, r7, r1
 8006f82:	705a      	strb	r2, [r3, #1]
			buf[2] = packetParams->Params.LoRa.HeaderType;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	7b9a      	ldrb	r2, [r3, #14]
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	709a      	strb	r2, [r3, #2]
			buf[3] = packetParams->Params.LoRa.PayloadLength;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7bda      	ldrb	r2, [r3, #15]
 8006f90:	187b      	adds	r3, r7, r1
 8006f92:	70da      	strb	r2, [r3, #3]
			buf[4] = packetParams->Params.LoRa.CrcMode;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	7c1a      	ldrb	r2, [r3, #16]
 8006f98:	187b      	adds	r3, r7, r1
 8006f9a:	711a      	strb	r2, [r3, #4]
			buf[5] = packetParams->Params.LoRa.InvertIQ;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	7c5a      	ldrb	r2, [r3, #17]
 8006fa0:	187b      	adds	r3, r7, r1
 8006fa2:	715a      	strb	r2, [r3, #5]
		break;
 8006fa4:	46c0      	nop			@ (mov r8, r8)
	}
	SX126xWriteCommand(RADIO_SET_PACKETPARAMS, buf, n);
 8006fa6:	2317      	movs	r3, #23
 8006fa8:	18fb      	adds	r3, r7, r3
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	230c      	movs	r3, #12
 8006fb0:	18fb      	adds	r3, r7, r3
 8006fb2:	0019      	movs	r1, r3
 8006fb4:	208c      	movs	r0, #140	@ 0x8c
 8006fb6:	f000 f9b9 	bl	800732c <SX126xWriteCommand>
}
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b006      	add	sp, #24
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	08007b74 	.word	0x08007b74
 8006fc4:	200002cd 	.word	0x200002cd
 8006fc8:	0000ffff 	.word	0x0000ffff
 8006fcc:	00008005 	.word	0x00008005
 8006fd0:	00001d0f 	.word	0x00001d0f
 8006fd4:	00001021 	.word	0x00001021

08006fd8 <SX126xSetCadParams>:

void SX126xSetCadParams(RadioLoRaCadSymbols_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, RadioCadExitModes_t cadExitMode, uint32_t cadTimeout){
 8006fd8:	b5b0      	push	{r4, r5, r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	0005      	movs	r5, r0
 8006fe0:	000c      	movs	r4, r1
 8006fe2:	0010      	movs	r0, r2
 8006fe4:	0019      	movs	r1, r3
 8006fe6:	1dfb      	adds	r3, r7, #7
 8006fe8:	1c2a      	adds	r2, r5, #0
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	1dbb      	adds	r3, r7, #6
 8006fee:	1c22      	adds	r2, r4, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	1d7b      	adds	r3, r7, #5
 8006ff4:	1c02      	adds	r2, r0, #0
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	1d3b      	adds	r3, r7, #4
 8006ffa:	1c0a      	adds	r2, r1, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
	uint8_t buf[7];

	buf[0] = (uint8_t)cadSymbolNum;
 8006ffe:	2108      	movs	r1, #8
 8007000:	187b      	adds	r3, r7, r1
 8007002:	1dfa      	adds	r2, r7, #7
 8007004:	7812      	ldrb	r2, [r2, #0]
 8007006:	701a      	strb	r2, [r3, #0]
	buf[1] = cadDetPeak;
 8007008:	187b      	adds	r3, r7, r1
 800700a:	1dba      	adds	r2, r7, #6
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	705a      	strb	r2, [r3, #1]
	buf[2] = cadDetMin;
 8007010:	187b      	adds	r3, r7, r1
 8007012:	1d7a      	adds	r2, r7, #5
 8007014:	7812      	ldrb	r2, [r2, #0]
 8007016:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)cadExitMode;
 8007018:	187b      	adds	r3, r7, r1
 800701a:	1d3a      	adds	r2, r7, #4
 800701c:	7812      	ldrb	r2, [r2, #0]
 800701e:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((cadTimeout >> 16) & 0xFF);
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	0c1b      	lsrs	r3, r3, #16
 8007024:	b2da      	uxtb	r2, r3
 8007026:	187b      	adds	r3, r7, r1
 8007028:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)((cadTimeout >> 8) & 0xFF);
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	0a1b      	lsrs	r3, r3, #8
 800702e:	b2da      	uxtb	r2, r3
 8007030:	187b      	adds	r3, r7, r1
 8007032:	715a      	strb	r2, [r3, #5]
	buf[6] = (uint8_t)(cadTimeout & 0xFF);
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	187b      	adds	r3, r7, r1
 800703a:	719a      	strb	r2, [r3, #6]
	SX126xWriteCommand(RADIO_SET_CADPARAMS, buf, 7);
 800703c:	187b      	adds	r3, r7, r1
 800703e:	2207      	movs	r2, #7
 8007040:	0019      	movs	r1, r3
 8007042:	2088      	movs	r0, #136	@ 0x88
 8007044:	f000 f972 	bl	800732c <SX126xWriteCommand>
	OperatingMode = MODE_CAD;
 8007048:	4b03      	ldr	r3, [pc, #12]	@ (8007058 <SX126xSetCadParams+0x80>)
 800704a:	2207      	movs	r2, #7
 800704c:	701a      	strb	r2, [r3, #0]
}
 800704e:	46c0      	nop			@ (mov r8, r8)
 8007050:	46bd      	mov	sp, r7
 8007052:	b004      	add	sp, #16
 8007054:	bdb0      	pop	{r4, r5, r7, pc}
 8007056:	46c0      	nop			@ (mov r8, r8)
 8007058:	200002cc 	.word	0x200002cc

0800705c <SX126xSetBufferBaseAddress>:

void SX126xSetBufferBaseAddress(uint8_t txBaseAddress, uint8_t rxBaseAddress){
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	0002      	movs	r2, r0
 8007064:	1dfb      	adds	r3, r7, #7
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	1dbb      	adds	r3, r7, #6
 800706a:	1c0a      	adds	r2, r1, #0
 800706c:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 800706e:	210c      	movs	r1, #12
 8007070:	187b      	adds	r3, r7, r1
 8007072:	1dfa      	adds	r2, r7, #7
 8007074:	7812      	ldrb	r2, [r2, #0]
 8007076:	701a      	strb	r2, [r3, #0]
	buf[1] = rxBaseAddress;
 8007078:	187b      	adds	r3, r7, r1
 800707a:	1dba      	adds	r2, r7, #6
 800707c:	7812      	ldrb	r2, [r2, #0]
 800707e:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_SET_BUFFERBASEADDRESS, buf, 2);
 8007080:	187b      	adds	r3, r7, r1
 8007082:	2202      	movs	r2, #2
 8007084:	0019      	movs	r1, r3
 8007086:	208f      	movs	r0, #143	@ 0x8f
 8007088:	f000 f950 	bl	800732c <SX126xWriteCommand>
}
 800708c:	46c0      	nop			@ (mov r8, r8)
 800708e:	46bd      	mov	sp, r7
 8007090:	b004      	add	sp, #16
 8007092:	bd80      	pop	{r7, pc}

08007094 <SX126xGetRssiInst>:
	SX126xReadCommand(RADIO_GET_STATUS, (uint8_t *)&stat, 1);
	status.Value = stat;
	return status;
}

int8_t SX126xGetRssiInst(void){
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
	uint8_t buf[1];
	int8_t rssi = 0;
 800709a:	1dfb      	adds	r3, r7, #7
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]

	SX126xReadCommand(RADIO_GET_RSSIINST, buf, 1);
 80070a0:	1d3b      	adds	r3, r7, #4
 80070a2:	2201      	movs	r2, #1
 80070a4:	0019      	movs	r1, r3
 80070a6:	2015      	movs	r0, #21
 80070a8:	f000 f978 	bl	800739c <SX126xReadCommand>
	rssi = -buf[0] >> 1;
 80070ac:	1d3b      	adds	r3, r7, #4
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	425b      	negs	r3, r3
 80070b2:	105a      	asrs	r2, r3, #1
 80070b4:	1dfb      	adds	r3, r7, #7
 80070b6:	701a      	strb	r2, [r3, #0]
	return rssi;
 80070b8:	1dfb      	adds	r3, r7, #7
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	b25b      	sxtb	r3, r3
}
 80070be:	0018      	movs	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b002      	add	sp, #8
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <SX126xGetRxBufferStatus>:

void SX126xGetRxBufferStatus(uint8_t *payloadLength, uint8_t *rxStartBufferPointer){
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	uint8_t status[2];

	SX126xReadCommand(RADIO_GET_RXBUFFERSTATUS, status, 2);
 80070d2:	230c      	movs	r3, #12
 80070d4:	18fb      	adds	r3, r7, r3
 80070d6:	2202      	movs	r2, #2
 80070d8:	0019      	movs	r1, r3
 80070da:	2013      	movs	r0, #19
 80070dc:	f000 f95e 	bl	800739c <SX126xReadCommand>
	// In case of LORA fixed header, the payloadLength is obtained by reading
	// the register REG_LR_PAYLOADLENGTH
	if ((SX126xGetPacketType() == PACKET_TYPE_LORA) && (SX126xReadRegister(REG_LR_PACKETPARAMS) >> 7 == 1)){
 80070e0:	f7ff fd9e 	bl	8006c20 <SX126xGetPacketType>
 80070e4:	0003      	movs	r3, r0
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d111      	bne.n	800710e <SX126xGetRxBufferStatus+0x46>
 80070ea:	4b10      	ldr	r3, [pc, #64]	@ (800712c <SX126xGetRxBufferStatus+0x64>)
 80070ec:	0018      	movs	r0, r3
 80070ee:	f000 fa2f 	bl	8007550 <SX126xReadRegister>
 80070f2:	0003      	movs	r3, r0
 80070f4:	09db      	lsrs	r3, r3, #7
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d108      	bne.n	800710e <SX126xGetRxBufferStatus+0x46>
		*payloadLength = SX126xReadRegister(REG_LR_PAYLOADLENGTH);
 80070fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007130 <SX126xGetRxBufferStatus+0x68>)
 80070fe:	0018      	movs	r0, r3
 8007100:	f000 fa26 	bl	8007550 <SX126xReadRegister>
 8007104:	0003      	movs	r3, r0
 8007106:	001a      	movs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	e004      	b.n	8007118 <SX126xGetRxBufferStatus+0x50>
	}
	else{
		*payloadLength = status[0];
 800710e:	230c      	movs	r3, #12
 8007110:	18fb      	adds	r3, r7, r3
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	701a      	strb	r2, [r3, #0]
	}
	*rxStartBufferPointer = status[1];
 8007118:	230c      	movs	r3, #12
 800711a:	18fb      	adds	r3, r7, r3
 800711c:	785a      	ldrb	r2, [r3, #1]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	701a      	strb	r2, [r3, #0]
}
 8007122:	46c0      	nop			@ (mov r8, r8)
 8007124:	46bd      	mov	sp, r7
 8007126:	b004      	add	sp, #16
 8007128:	bd80      	pop	{r7, pc}
 800712a:	46c0      	nop			@ (mov r8, r8)
 800712c:	00000704 	.word	0x00000704
 8007130:	00000702 	.word	0x00000702

08007134 <SX126xGetPacketStatus>:

void SX126xGetPacketStatus(PacketStatus_t *pktStatus){
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
	uint8_t status[3];

	SX126xReadCommand(RADIO_GET_PACKETSTATUS, status, 3);
 800713c:	230c      	movs	r3, #12
 800713e:	18fb      	adds	r3, r7, r3
 8007140:	2203      	movs	r2, #3
 8007142:	0019      	movs	r1, r3
 8007144:	2014      	movs	r0, #20
 8007146:	f000 f929 	bl	800739c <SX126xReadCommand>

	pktStatus->packetType = SX126xGetPacketType();
 800714a:	f7ff fd69 	bl	8006c20 <SX126xGetPacketType>
 800714e:	0003      	movs	r3, r0
 8007150:	001a      	movs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	701a      	strb	r2, [r3, #0]
	switch (pktStatus->packetType){
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <SX126xGetPacketStatus+0x30>
 800715e:	2b01      	cmp	r3, #1
 8007160:	d017      	beq.n	8007192 <SX126xGetPacketStatus+0x5e>
 8007162:	e032      	b.n	80071ca <SX126xGetPacketStatus+0x96>
		case PACKET_TYPE_GFSK:
			pktStatus->Params.Gfsk.RxStatus = status[0];
 8007164:	210c      	movs	r1, #12
 8007166:	187b      	adds	r3, r7, r1
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	711a      	strb	r2, [r3, #4]
			pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800716e:	187b      	adds	r3, r7, r1
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	425b      	negs	r3, r3
 8007174:	105b      	asrs	r3, r3, #1
 8007176:	b25a      	sxtb	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	719a      	strb	r2, [r3, #6]
			pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800717c:	187b      	adds	r3, r7, r1
 800717e:	789b      	ldrb	r3, [r3, #2]
 8007180:	425b      	negs	r3, r3
 8007182:	105b      	asrs	r3, r3, #1
 8007184:	b25a      	sxtb	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	715a      	strb	r2, [r3, #5]
			pktStatus->Params.Gfsk.FreqError = 0;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	609a      	str	r2, [r3, #8]
			break;
 8007190:	e025      	b.n	80071de <SX126xGetPacketStatus+0xaa>

		case PACKET_TYPE_LORA:
			pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8007192:	210c      	movs	r1, #12
 8007194:	187b      	adds	r3, r7, r1
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	425b      	negs	r3, r3
 800719a:	105b      	asrs	r3, r3, #1
 800719c:	b25a      	sxtb	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	731a      	strb	r2, [r3, #12]
			// Returns SNR value [dB] rounded to the nearest integer value
			pktStatus->Params.LoRa.SnrPkt = (((int8_t)status[1]) + 2) >> 2;
 80071a2:	187b      	adds	r3, r7, r1
 80071a4:	785b      	ldrb	r3, [r3, #1]
 80071a6:	b25b      	sxtb	r3, r3
 80071a8:	3302      	adds	r3, #2
 80071aa:	109b      	asrs	r3, r3, #2
 80071ac:	b25a      	sxtb	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	735a      	strb	r2, [r3, #13]
			pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80071b2:	187b      	adds	r3, r7, r1
 80071b4:	789b      	ldrb	r3, [r3, #2]
 80071b6:	425b      	negs	r3, r3
 80071b8:	105b      	asrs	r3, r3, #1
 80071ba:	b25a      	sxtb	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	739a      	strb	r2, [r3, #14]
			pktStatus->Params.LoRa.FreqError = FrequencyError;
 80071c0:	4b09      	ldr	r3, [pc, #36]	@ (80071e8 <SX126xGetPacketStatus+0xb4>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	611a      	str	r2, [r3, #16]
			break;
 80071c8:	e009      	b.n	80071de <SX126xGetPacketStatus+0xaa>

		default:
		case PACKET_TYPE_NONE:
			// In that specific case, we set everything in the pktStatus to zeros
			// and reset the packet type accordingly
			memset(pktStatus, 0, sizeof(PacketStatus_t));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2214      	movs	r2, #20
 80071ce:	2100      	movs	r1, #0
 80071d0:	0018      	movs	r0, r3
 80071d2:	f000 fa7b 	bl	80076cc <memset>
			pktStatus->packetType = PACKET_TYPE_NONE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	220f      	movs	r2, #15
 80071da:	701a      	strb	r2, [r3, #0]
		break;
 80071dc:	46c0      	nop			@ (mov r8, r8)
	}
}
 80071de:	46c0      	nop			@ (mov r8, r8)
 80071e0:	46bd      	mov	sp, r7
 80071e2:	b004      	add	sp, #16
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	46c0      	nop			@ (mov r8, r8)
 80071e8:	200002d0 	.word	0x200002d0

080071ec <SX126xClearIrqStatus>:
void SX126xClearDeviceErrors(void){
	uint8_t buf[2] = {0x00, 0x00};
	SX126xWriteCommand(RADIO_CLR_ERROR, buf, 2);
}

void SX126xClearIrqStatus(uint16_t irq){
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	0002      	movs	r2, r0
 80071f4:	1dbb      	adds	r3, r7, #6
 80071f6:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)(((uint16_t)irq >> 8) & 0x00FF);
 80071f8:	1dbb      	adds	r3, r7, #6
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	0a1b      	lsrs	r3, r3, #8
 80071fe:	b29b      	uxth	r3, r3
 8007200:	b2da      	uxtb	r2, r3
 8007202:	210c      	movs	r1, #12
 8007204:	187b      	adds	r3, r7, r1
 8007206:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((uint16_t)irq & 0x00FF);
 8007208:	1dbb      	adds	r3, r7, #6
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	187b      	adds	r3, r7, r1
 8007210:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_CLR_IRQSTATUS, buf, 2);
 8007212:	187b      	adds	r3, r7, r1
 8007214:	2202      	movs	r2, #2
 8007216:	0019      	movs	r1, r3
 8007218:	2002      	movs	r0, #2
 800721a:	f000 f887 	bl	800732c <SX126xWriteCommand>
}
 800721e:	46c0      	nop			@ (mov r8, r8)
 8007220:	46bd      	mov	sp, r7
 8007222:	b004      	add	sp, #16
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <SX126xIoInit>:
extern SPI_HandleTypeDef SX1262_SPI;


bool dio3IsOutput = false;

void SX126xIoInit(void){
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 800722c:	4b03      	ldr	r3, [pc, #12]	@ (800723c <SX126xIoInit+0x14>)
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]

	SX126xReset();
 8007232:	f000 f805 	bl	8007240 <SX126xReset>
}
 8007236:	46c0      	nop			@ (mov r8, r8)
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	200002d5 	.word	0x200002d5

08007240 <SX126xReset>:

void SX126xIoDeInit(void){
	dio3IsOutput = false;
}

void SX126xReset(void){
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 8007244:	2380      	movs	r3, #128	@ 0x80
 8007246:	0059      	lsls	r1, r3, #1
 8007248:	23a0      	movs	r3, #160	@ 0xa0
 800724a:	05db      	lsls	r3, r3, #23
 800724c:	2200      	movs	r2, #0
 800724e:	0018      	movs	r0, r3
 8007250:	f7fb fe2c 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8007254:	200a      	movs	r0, #10
 8007256:	f7fb fab3 	bl	80027c0 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 800725a:	2380      	movs	r3, #128	@ 0x80
 800725c:	0059      	lsls	r1, r3, #1
 800725e:	23a0      	movs	r3, #160	@ 0xa0
 8007260:	05db      	lsls	r3, r3, #23
 8007262:	2201      	movs	r2, #1
 8007264:	0018      	movs	r0, r3
 8007266:	f7fb fe21 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800726a:	2014      	movs	r0, #20
 800726c:	f7fb faa8 	bl	80027c0 <HAL_Delay>
	dio3IsOutput = false;
 8007270:	4b02      	ldr	r3, [pc, #8]	@ (800727c <SX126xReset+0x3c>)
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
}
 8007276:	46c0      	nop			@ (mov r8, r8)
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	200002d5 	.word	0x200002d5

08007280 <SX126xWaitOnBusy>:

void SX126xWaitOnBusy(void){
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
	int timeout = 1000;
 8007286:	23fa      	movs	r3, #250	@ 0xfa
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	607b      	str	r3, [r7, #4]
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 800728c:	e010      	b.n	80072b0 <SX126xWaitOnBusy+0x30>
		for(int i=0; i<12000; i++)__NOP();
 800728e:	2300      	movs	r3, #0
 8007290:	603b      	str	r3, [r7, #0]
 8007292:	e003      	b.n	800729c <SX126xWaitOnBusy+0x1c>
 8007294:	46c0      	nop			@ (mov r8, r8)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	3301      	adds	r3, #1
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	4a0c      	ldr	r2, [pc, #48]	@ (80072d0 <SX126xWaitOnBusy+0x50>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	ddf7      	ble.n	8007294 <SX126xWaitOnBusy+0x14>
		timeout -= 1;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	607b      	str	r3, [r7, #4]
		if (timeout < 0){
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	db0b      	blt.n	80072c8 <SX126xWaitOnBusy+0x48>
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 80072b0:	2380      	movs	r3, #128	@ 0x80
 80072b2:	009a      	lsls	r2, r3, #2
 80072b4:	23a0      	movs	r3, #160	@ 0xa0
 80072b6:	05db      	lsls	r3, r3, #23
 80072b8:	0011      	movs	r1, r2
 80072ba:	0018      	movs	r0, r3
 80072bc:	f7fb fdca 	bl	8002e54 <HAL_GPIO_ReadPin>
 80072c0:	0003      	movs	r3, r0
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d0e3      	beq.n	800728e <SX126xWaitOnBusy+0xe>
 80072c6:	e000      	b.n	80072ca <SX126xWaitOnBusy+0x4a>
			return;
 80072c8:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 80072ca:	46bd      	mov	sp, r7
 80072cc:	b002      	add	sp, #8
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	00002edf 	.word	0x00002edf

080072d4 <SX126xWakeup>:

void SX126xWakeup(void){
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 80072da:	4b12      	ldr	r3, [pc, #72]	@ (8007324 <SX126xWakeup+0x50>)
 80072dc:	2200      	movs	r2, #0
 80072de:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80072e0:	b672      	cpsid	i
}
 80072e2:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 80072e4:	23a0      	movs	r3, #160	@ 0xa0
 80072e6:	05db      	lsls	r3, r3, #23
 80072e8:	2200      	movs	r2, #0
 80072ea:	2110      	movs	r1, #16
 80072ec:	0018      	movs	r0, r3
 80072ee:	f7fb fddd 	bl	8002eac <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_GET_STATUS, 0x00};
 80072f2:	1d3b      	adds	r3, r7, #4
 80072f4:	22c0      	movs	r2, #192	@ 0xc0
 80072f6:	801a      	strh	r2, [r3, #0]
	HAL_SPI_Transmit(&SX1262_SPI, buf, 2, 1000);
 80072f8:	23fa      	movs	r3, #250	@ 0xfa
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	1d39      	adds	r1, r7, #4
 80072fe:	480a      	ldr	r0, [pc, #40]	@ (8007328 <SX126xWakeup+0x54>)
 8007300:	2202      	movs	r2, #2
 8007302:	f7fd f901 	bl	8004508 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8007306:	23a0      	movs	r3, #160	@ 0xa0
 8007308:	05db      	lsls	r3, r3, #23
 800730a:	2201      	movs	r2, #1
 800730c:	2110      	movs	r1, #16
 800730e:	0018      	movs	r0, r3
 8007310:	f7fb fdcc 	bl	8002eac <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8007314:	f7ff ffb4 	bl	8007280 <SX126xWaitOnBusy>
  __ASM volatile ("cpsie i" : : : "memory");
 8007318:	b662      	cpsie	i
}
 800731a:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
 800731c:	46c0      	nop			@ (mov r8, r8)
 800731e:	46bd      	mov	sp, r7
 8007320:	b002      	add	sp, #8
 8007322:	bd80      	pop	{r7, pc}
 8007324:	200002d5 	.word	0x200002d5
 8007328:	200000e4 	.word	0x200000e4

0800732c <SX126xWriteCommand>:

void SX126xWriteCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 800732c:	b590      	push	{r4, r7, lr}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6039      	str	r1, [r7, #0]
 8007334:	0011      	movs	r1, r2
 8007336:	1dfb      	adds	r3, r7, #7
 8007338:	1c02      	adds	r2, r0, #0
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	1d3b      	adds	r3, r7, #4
 800733e:	1c0a      	adds	r2, r1, #0
 8007340:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 8007342:	f7ff f8dd 	bl	8006500 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8007346:	23a0      	movs	r3, #160	@ 0xa0
 8007348:	05db      	lsls	r3, r3, #23
 800734a:	2200      	movs	r2, #0
 800734c:	2110      	movs	r1, #16
 800734e:	0018      	movs	r0, r3
 8007350:	f7fb fdac 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SX1262_SPI, (uint8_t *)&command, 1, 1000);
 8007354:	23fa      	movs	r3, #250	@ 0xfa
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	1df9      	adds	r1, r7, #7
 800735a:	480f      	ldr	r0, [pc, #60]	@ (8007398 <SX126xWriteCommand+0x6c>)
 800735c:	2201      	movs	r2, #1
 800735e:	f7fd f8d3 	bl	8004508 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SX1262_SPI, buffer, size, 1000);
 8007362:	23fa      	movs	r3, #250	@ 0xfa
 8007364:	009c      	lsls	r4, r3, #2
 8007366:	1d3b      	adds	r3, r7, #4
 8007368:	881a      	ldrh	r2, [r3, #0]
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	480a      	ldr	r0, [pc, #40]	@ (8007398 <SX126xWriteCommand+0x6c>)
 800736e:	0023      	movs	r3, r4
 8007370:	f7fd f8ca 	bl	8004508 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8007374:	23a0      	movs	r3, #160	@ 0xa0
 8007376:	05db      	lsls	r3, r3, #23
 8007378:	2201      	movs	r2, #1
 800737a:	2110      	movs	r1, #16
 800737c:	0018      	movs	r0, r3
 800737e:	f7fb fd95 	bl	8002eac <HAL_GPIO_WritePin>

	if (command != RADIO_SET_SLEEP)
 8007382:	1dfb      	adds	r3, r7, #7
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b84      	cmp	r3, #132	@ 0x84
 8007388:	d001      	beq.n	800738e <SX126xWriteCommand+0x62>
		SX126xWaitOnBusy();
 800738a:	f7ff ff79 	bl	8007280 <SX126xWaitOnBusy>
}
 800738e:	46c0      	nop			@ (mov r8, r8)
 8007390:	46bd      	mov	sp, r7
 8007392:	b003      	add	sp, #12
 8007394:	bd90      	pop	{r4, r7, pc}
 8007396:	46c0      	nop			@ (mov r8, r8)
 8007398:	200000e4 	.word	0x200000e4

0800739c <SX126xReadCommand>:

void SX126xReadCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 800739c:	b590      	push	{r4, r7, lr}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6039      	str	r1, [r7, #0]
 80073a4:	0011      	movs	r1, r2
 80073a6:	1dfb      	adds	r3, r7, #7
 80073a8:	1c02      	adds	r2, r0, #0
 80073aa:	701a      	strb	r2, [r3, #0]
 80073ac:	1d3b      	adds	r3, r7, #4
 80073ae:	1c0a      	adds	r2, r1, #0
 80073b0:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 80073b2:	f7ff f8a5 	bl	8006500 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 80073b6:	23a0      	movs	r3, #160	@ 0xa0
 80073b8:	05db      	lsls	r3, r3, #23
 80073ba:	2200      	movs	r2, #0
 80073bc:	2110      	movs	r1, #16
 80073be:	0018      	movs	r0, r3
 80073c0:	f7fb fd74 	bl	8002eac <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)command, 0x00};
 80073c4:	210c      	movs	r1, #12
 80073c6:	187b      	adds	r3, r7, r1
 80073c8:	1dfa      	adds	r2, r7, #7
 80073ca:	7812      	ldrb	r2, [r2, #0]
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	187b      	adds	r3, r7, r1
 80073d0:	2200      	movs	r2, #0
 80073d2:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&SX1262_SPI, buf, 2, 1000);
 80073d4:	23fa      	movs	r3, #250	@ 0xfa
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	1879      	adds	r1, r7, r1
 80073da:	480d      	ldr	r0, [pc, #52]	@ (8007410 <SX126xReadCommand+0x74>)
 80073dc:	2202      	movs	r2, #2
 80073de:	f7fd f893 	bl	8004508 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SX1262_SPI, buffer, size, 1000);
 80073e2:	23fa      	movs	r3, #250	@ 0xfa
 80073e4:	009c      	lsls	r4, r3, #2
 80073e6:	1d3b      	adds	r3, r7, #4
 80073e8:	881a      	ldrh	r2, [r3, #0]
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	4808      	ldr	r0, [pc, #32]	@ (8007410 <SX126xReadCommand+0x74>)
 80073ee:	0023      	movs	r3, r4
 80073f0:	f7fd f9fc 	bl	80047ec <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 80073f4:	23a0      	movs	r3, #160	@ 0xa0
 80073f6:	05db      	lsls	r3, r3, #23
 80073f8:	2201      	movs	r2, #1
 80073fa:	2110      	movs	r1, #16
 80073fc:	0018      	movs	r0, r3
 80073fe:	f7fb fd55 	bl	8002eac <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8007402:	f7ff ff3d 	bl	8007280 <SX126xWaitOnBusy>
}
 8007406:	46c0      	nop			@ (mov r8, r8)
 8007408:	46bd      	mov	sp, r7
 800740a:	b005      	add	sp, #20
 800740c:	bd90      	pop	{r4, r7, pc}
 800740e:	46c0      	nop			@ (mov r8, r8)
 8007410:	200000e4 	.word	0x200000e4

08007414 <SX126xWriteRegisters>:

void SX126xWriteRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 8007414:	b590      	push	{r4, r7, lr}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6039      	str	r1, [r7, #0]
 800741c:	0011      	movs	r1, r2
 800741e:	1dbb      	adds	r3, r7, #6
 8007420:	1c02      	adds	r2, r0, #0
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	1d3b      	adds	r3, r7, #4
 8007426:	1c0a      	adds	r2, r1, #0
 8007428:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800742a:	f7ff f869 	bl	8006500 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800742e:	23a0      	movs	r3, #160	@ 0xa0
 8007430:	05db      	lsls	r3, r3, #23
 8007432:	2200      	movs	r2, #0
 8007434:	2110      	movs	r1, #16
 8007436:	0018      	movs	r0, r3
 8007438:	f7fb fd38 	bl	8002eac <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_WRITE_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF)};
 800743c:	210c      	movs	r1, #12
 800743e:	187b      	adds	r3, r7, r1
 8007440:	220d      	movs	r2, #13
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	1dbb      	adds	r3, r7, #6
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	0a1b      	lsrs	r3, r3, #8
 800744a:	b29b      	uxth	r3, r3
 800744c:	b2da      	uxtb	r2, r3
 800744e:	187b      	adds	r3, r7, r1
 8007450:	705a      	strb	r2, [r3, #1]
 8007452:	1dbb      	adds	r3, r7, #6
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b2da      	uxtb	r2, r3
 8007458:	187b      	adds	r3, r7, r1
 800745a:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit(&SX1262_SPI, buf, 3, 1000);
 800745c:	23fa      	movs	r3, #250	@ 0xfa
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	1879      	adds	r1, r7, r1
 8007462:	480d      	ldr	r0, [pc, #52]	@ (8007498 <SX126xWriteRegisters+0x84>)
 8007464:	2203      	movs	r2, #3
 8007466:	f7fd f84f 	bl	8004508 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SX1262_SPI, buffer, size, 1000);
 800746a:	23fa      	movs	r3, #250	@ 0xfa
 800746c:	009c      	lsls	r4, r3, #2
 800746e:	1d3b      	adds	r3, r7, #4
 8007470:	881a      	ldrh	r2, [r3, #0]
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	4808      	ldr	r0, [pc, #32]	@ (8007498 <SX126xWriteRegisters+0x84>)
 8007476:	0023      	movs	r3, r4
 8007478:	f7fd f846 	bl	8004508 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800747c:	23a0      	movs	r3, #160	@ 0xa0
 800747e:	05db      	lsls	r3, r3, #23
 8007480:	2201      	movs	r2, #1
 8007482:	2110      	movs	r1, #16
 8007484:	0018      	movs	r0, r3
 8007486:	f7fb fd11 	bl	8002eac <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800748a:	f7ff fef9 	bl	8007280 <SX126xWaitOnBusy>
}
 800748e:	46c0      	nop			@ (mov r8, r8)
 8007490:	46bd      	mov	sp, r7
 8007492:	b005      	add	sp, #20
 8007494:	bd90      	pop	{r4, r7, pc}
 8007496:	46c0      	nop			@ (mov r8, r8)
 8007498:	200000e4 	.word	0x200000e4

0800749c <SX126xWriteRegister>:

void SX126xWriteRegister(uint16_t address, uint8_t value){
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	0002      	movs	r2, r0
 80074a4:	1dbb      	adds	r3, r7, #6
 80074a6:	801a      	strh	r2, [r3, #0]
 80074a8:	1d7b      	adds	r3, r7, #5
 80074aa:	1c0a      	adds	r2, r1, #0
 80074ac:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegisters(address, &value, 1);
 80074ae:	1d79      	adds	r1, r7, #5
 80074b0:	1dbb      	adds	r3, r7, #6
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	2201      	movs	r2, #1
 80074b6:	0018      	movs	r0, r3
 80074b8:	f7ff ffac 	bl	8007414 <SX126xWriteRegisters>
}
 80074bc:	46c0      	nop			@ (mov r8, r8)
 80074be:	46bd      	mov	sp, r7
 80074c0:	b002      	add	sp, #8
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <SX126xReadRegisters>:

void SX126xReadRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 80074c4:	b590      	push	{r4, r7, lr}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6039      	str	r1, [r7, #0]
 80074cc:	0011      	movs	r1, r2
 80074ce:	1dbb      	adds	r3, r7, #6
 80074d0:	1c02      	adds	r2, r0, #0
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	1d3b      	adds	r3, r7, #4
 80074d6:	1c0a      	adds	r2, r1, #0
 80074d8:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 80074da:	f7ff f811 	bl	8006500 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 80074de:	23a0      	movs	r3, #160	@ 0xa0
 80074e0:	05db      	lsls	r3, r3, #23
 80074e2:	2200      	movs	r2, #0
 80074e4:	2110      	movs	r1, #16
 80074e6:	0018      	movs	r0, r3
 80074e8:	f7fb fce0 	bl	8002eac <HAL_GPIO_WritePin>
	uint8_t buf[4] = {(uint8_t)RADIO_READ_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF), 0x00};
 80074ec:	210c      	movs	r1, #12
 80074ee:	187b      	adds	r3, r7, r1
 80074f0:	221d      	movs	r2, #29
 80074f2:	701a      	strb	r2, [r3, #0]
 80074f4:	1dbb      	adds	r3, r7, #6
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	0a1b      	lsrs	r3, r3, #8
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	187b      	adds	r3, r7, r1
 8007500:	705a      	strb	r2, [r3, #1]
 8007502:	1dbb      	adds	r3, r7, #6
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	b2da      	uxtb	r2, r3
 8007508:	187b      	adds	r3, r7, r1
 800750a:	709a      	strb	r2, [r3, #2]
 800750c:	187b      	adds	r3, r7, r1
 800750e:	2200      	movs	r2, #0
 8007510:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&SX1262_SPI, buf, 4, 1000);
 8007512:	23fa      	movs	r3, #250	@ 0xfa
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	1879      	adds	r1, r7, r1
 8007518:	480c      	ldr	r0, [pc, #48]	@ (800754c <SX126xReadRegisters+0x88>)
 800751a:	2204      	movs	r2, #4
 800751c:	f7fc fff4 	bl	8004508 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SX1262_SPI, buffer, size, 1000);
 8007520:	23fa      	movs	r3, #250	@ 0xfa
 8007522:	009c      	lsls	r4, r3, #2
 8007524:	1d3b      	adds	r3, r7, #4
 8007526:	881a      	ldrh	r2, [r3, #0]
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	4808      	ldr	r0, [pc, #32]	@ (800754c <SX126xReadRegisters+0x88>)
 800752c:	0023      	movs	r3, r4
 800752e:	f7fd f95d 	bl	80047ec <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8007532:	23a0      	movs	r3, #160	@ 0xa0
 8007534:	05db      	lsls	r3, r3, #23
 8007536:	2201      	movs	r2, #1
 8007538:	2110      	movs	r1, #16
 800753a:	0018      	movs	r0, r3
 800753c:	f7fb fcb6 	bl	8002eac <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8007540:	f7ff fe9e 	bl	8007280 <SX126xWaitOnBusy>
}
 8007544:	46c0      	nop			@ (mov r8, r8)
 8007546:	46bd      	mov	sp, r7
 8007548:	b005      	add	sp, #20
 800754a:	bd90      	pop	{r4, r7, pc}
 800754c:	200000e4 	.word	0x200000e4

08007550 <SX126xReadRegister>:

uint8_t SX126xReadRegister(uint16_t address){
 8007550:	b590      	push	{r4, r7, lr}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	0002      	movs	r2, r0
 8007558:	1dbb      	adds	r3, r7, #6
 800755a:	801a      	strh	r2, [r3, #0]
	uint8_t data;
	SX126xReadRegisters(address, &data, 1);
 800755c:	240f      	movs	r4, #15
 800755e:	1939      	adds	r1, r7, r4
 8007560:	1dbb      	adds	r3, r7, #6
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	2201      	movs	r2, #1
 8007566:	0018      	movs	r0, r3
 8007568:	f7ff ffac 	bl	80074c4 <SX126xReadRegisters>
	return data;
 800756c:	193b      	adds	r3, r7, r4
 800756e:	781b      	ldrb	r3, [r3, #0]
}
 8007570:	0018      	movs	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	b005      	add	sp, #20
 8007576:	bd90      	pop	{r4, r7, pc}

08007578 <SX126xWriteBuffer>:

void SX126xWriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6039      	str	r1, [r7, #0]
 8007580:	0011      	movs	r1, r2
 8007582:	1dfb      	adds	r3, r7, #7
 8007584:	1c02      	adds	r2, r0, #0
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	1dbb      	adds	r3, r7, #6
 800758a:	1c0a      	adds	r2, r1, #0
 800758c:	701a      	strb	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800758e:	f7fe ffb7 	bl	8006500 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8007592:	23a0      	movs	r3, #160	@ 0xa0
 8007594:	05db      	lsls	r3, r3, #23
 8007596:	2200      	movs	r2, #0
 8007598:	2110      	movs	r1, #16
 800759a:	0018      	movs	r0, r3
 800759c:	f7fb fc86 	bl	8002eac <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_WRITE_BUFFER, offset};
 80075a0:	210c      	movs	r1, #12
 80075a2:	187b      	adds	r3, r7, r1
 80075a4:	220e      	movs	r2, #14
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	187b      	adds	r3, r7, r1
 80075aa:	1dfa      	adds	r2, r7, #7
 80075ac:	7812      	ldrb	r2, [r2, #0]
 80075ae:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&SX1262_SPI, buf, 2, 1000);
 80075b0:	23fa      	movs	r3, #250	@ 0xfa
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	1879      	adds	r1, r7, r1
 80075b6:	480d      	ldr	r0, [pc, #52]	@ (80075ec <SX126xWriteBuffer+0x74>)
 80075b8:	2202      	movs	r2, #2
 80075ba:	f7fc ffa5 	bl	8004508 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SX1262_SPI, buffer, size, 1000);
 80075be:	1dbb      	adds	r3, r7, #6
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	23fa      	movs	r3, #250	@ 0xfa
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	4808      	ldr	r0, [pc, #32]	@ (80075ec <SX126xWriteBuffer+0x74>)
 80075cc:	f7fc ff9c 	bl	8004508 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 80075d0:	23a0      	movs	r3, #160	@ 0xa0
 80075d2:	05db      	lsls	r3, r3, #23
 80075d4:	2201      	movs	r2, #1
 80075d6:	2110      	movs	r1, #16
 80075d8:	0018      	movs	r0, r3
 80075da:	f7fb fc67 	bl	8002eac <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 80075de:	f7ff fe4f 	bl	8007280 <SX126xWaitOnBusy>
}
 80075e2:	46c0      	nop			@ (mov r8, r8)
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b004      	add	sp, #16
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	46c0      	nop			@ (mov r8, r8)
 80075ec:	200000e4 	.word	0x200000e4

080075f0 <SX126xReadBuffer>:

void SX126xReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6039      	str	r1, [r7, #0]
 80075f8:	0011      	movs	r1, r2
 80075fa:	1dfb      	adds	r3, r7, #7
 80075fc:	1c02      	adds	r2, r0, #0
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	1dbb      	adds	r3, r7, #6
 8007602:	1c0a      	adds	r2, r1, #0
 8007604:	701a      	strb	r2, [r3, #0]
	SX126xCheckDeviceReady();
 8007606:	f7fe ff7b 	bl	8006500 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800760a:	23a0      	movs	r3, #160	@ 0xa0
 800760c:	05db      	lsls	r3, r3, #23
 800760e:	2200      	movs	r2, #0
 8007610:	2110      	movs	r1, #16
 8007612:	0018      	movs	r0, r3
 8007614:	f7fb fc4a 	bl	8002eac <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_READ_BUFFER, offset, 0x00};
 8007618:	210c      	movs	r1, #12
 800761a:	187b      	adds	r3, r7, r1
 800761c:	221e      	movs	r2, #30
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	187b      	adds	r3, r7, r1
 8007622:	1dfa      	adds	r2, r7, #7
 8007624:	7812      	ldrb	r2, [r2, #0]
 8007626:	705a      	strb	r2, [r3, #1]
 8007628:	187b      	adds	r3, r7, r1
 800762a:	2200      	movs	r2, #0
 800762c:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit(&SX1262_SPI, buf, 2, 1000);
 800762e:	23fa      	movs	r3, #250	@ 0xfa
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	1879      	adds	r1, r7, r1
 8007634:	4812      	ldr	r0, [pc, #72]	@ (8007680 <SX126xReadBuffer+0x90>)
 8007636:	2202      	movs	r2, #2
 8007638:	f7fc ff66 	bl	8004508 <HAL_SPI_Transmit>
	uint8_t dummy = 0;
 800763c:	210b      	movs	r1, #11
 800763e:	187b      	adds	r3, r7, r1
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&SX1262_SPI, &dummy, 1, 1000);
 8007644:	23fa      	movs	r3, #250	@ 0xfa
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	1879      	adds	r1, r7, r1
 800764a:	480d      	ldr	r0, [pc, #52]	@ (8007680 <SX126xReadBuffer+0x90>)
 800764c:	2201      	movs	r2, #1
 800764e:	f7fd f8cd 	bl	80047ec <HAL_SPI_Receive>
	HAL_SPI_Receive(&SX1262_SPI, buffer, size, 1000);
 8007652:	1dbb      	adds	r3, r7, #6
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	b29a      	uxth	r2, r3
 8007658:	23fa      	movs	r3, #250	@ 0xfa
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	4808      	ldr	r0, [pc, #32]	@ (8007680 <SX126xReadBuffer+0x90>)
 8007660:	f7fd f8c4 	bl	80047ec <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8007664:	23a0      	movs	r3, #160	@ 0xa0
 8007666:	05db      	lsls	r3, r3, #23
 8007668:	2201      	movs	r2, #1
 800766a:	2110      	movs	r1, #16
 800766c:	0018      	movs	r0, r3
 800766e:	f7fb fc1d 	bl	8002eac <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8007672:	f7ff fe05 	bl	8007280 <SX126xWaitOnBusy>
}
 8007676:	46c0      	nop			@ (mov r8, r8)
 8007678:	46bd      	mov	sp, r7
 800767a:	b004      	add	sp, #16
 800767c:	bd80      	pop	{r7, pc}
 800767e:	46c0      	nop			@ (mov r8, r8)
 8007680:	200000e4 	.word	0x200000e4

08007684 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower(int8_t power){
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	0002      	movs	r2, r0
 800768c:	1dfb      	adds	r3, r7, #7
 800768e:	701a      	strb	r2, [r3, #0]
	SX126xSetTxParams(power, RADIO_RAMP_40_US);
 8007690:	1dfb      	adds	r3, r7, #7
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	b25b      	sxtb	r3, r3
 8007696:	2102      	movs	r1, #2
 8007698:	0018      	movs	r0, r3
 800769a:	f7ff facb 	bl	8006c34 <SX126xSetTxParams>
}
 800769e:	46c0      	nop			@ (mov r8, r8)
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b002      	add	sp, #8
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <SX126xGetPaSelect>:

uint8_t SX126xGetPaSelect(uint32_t channel){
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
	return SX1262;
 80076ae:	2302      	movs	r3, #2
}
 80076b0:	0018      	movs	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	b002      	add	sp, #8
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <SX126xAntSwOn>:
		SPI_LORA.endTransaction();
		digitalWrite(_hwConfig.PIN_LORA_NSS, HIGH);
	}
}
*/
void SX126xAntSwOn(void){
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
}
 80076bc:	46c0      	nop			@ (mov r8, r8)
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <SX126xAntSwOff>:

void SX126xAntSwOff(void){
 80076c2:	b580      	push	{r7, lr}
 80076c4:	af00      	add	r7, sp, #0
}
 80076c6:	46c0      	nop			@ (mov r8, r8)
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <memset>:
 80076cc:	0003      	movs	r3, r0
 80076ce:	1882      	adds	r2, r0, r2
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d100      	bne.n	80076d6 <memset+0xa>
 80076d4:	4770      	bx	lr
 80076d6:	7019      	strb	r1, [r3, #0]
 80076d8:	3301      	adds	r3, #1
 80076da:	e7f9      	b.n	80076d0 <memset+0x4>

080076dc <__libc_init_array>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	2600      	movs	r6, #0
 80076e0:	4c0c      	ldr	r4, [pc, #48]	@ (8007714 <__libc_init_array+0x38>)
 80076e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007718 <__libc_init_array+0x3c>)
 80076e4:	1b64      	subs	r4, r4, r5
 80076e6:	10a4      	asrs	r4, r4, #2
 80076e8:	42a6      	cmp	r6, r4
 80076ea:	d109      	bne.n	8007700 <__libc_init_array+0x24>
 80076ec:	2600      	movs	r6, #0
 80076ee:	f000 f997 	bl	8007a20 <_init>
 80076f2:	4c0a      	ldr	r4, [pc, #40]	@ (800771c <__libc_init_array+0x40>)
 80076f4:	4d0a      	ldr	r5, [pc, #40]	@ (8007720 <__libc_init_array+0x44>)
 80076f6:	1b64      	subs	r4, r4, r5
 80076f8:	10a4      	asrs	r4, r4, #2
 80076fa:	42a6      	cmp	r6, r4
 80076fc:	d105      	bne.n	800770a <__libc_init_array+0x2e>
 80076fe:	bd70      	pop	{r4, r5, r6, pc}
 8007700:	00b3      	lsls	r3, r6, #2
 8007702:	58eb      	ldr	r3, [r5, r3]
 8007704:	4798      	blx	r3
 8007706:	3601      	adds	r6, #1
 8007708:	e7ee      	b.n	80076e8 <__libc_init_array+0xc>
 800770a:	00b3      	lsls	r3, r6, #2
 800770c:	58eb      	ldr	r3, [r5, r3]
 800770e:	4798      	blx	r3
 8007710:	3601      	adds	r6, #1
 8007712:	e7f2      	b.n	80076fa <__libc_init_array+0x1e>
 8007714:	08007d48 	.word	0x08007d48
 8007718:	08007d48 	.word	0x08007d48
 800771c:	08007d4c 	.word	0x08007d4c
 8007720:	08007d48 	.word	0x08007d48

08007724 <ceil>:
 8007724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007726:	004b      	lsls	r3, r1, #1
 8007728:	4a34      	ldr	r2, [pc, #208]	@ (80077fc <ceil+0xd8>)
 800772a:	0d5b      	lsrs	r3, r3, #21
 800772c:	189e      	adds	r6, r3, r2
 800772e:	000d      	movs	r5, r1
 8007730:	0004      	movs	r4, r0
 8007732:	9001      	str	r0, [sp, #4]
 8007734:	2e13      	cmp	r6, #19
 8007736:	dc2e      	bgt.n	8007796 <ceil+0x72>
 8007738:	2e00      	cmp	r6, #0
 800773a:	da11      	bge.n	8007760 <ceil+0x3c>
 800773c:	4a30      	ldr	r2, [pc, #192]	@ (8007800 <ceil+0xdc>)
 800773e:	4b31      	ldr	r3, [pc, #196]	@ (8007804 <ceil+0xe0>)
 8007740:	f7f8 fdca 	bl	80002d8 <__aeabi_dadd>
 8007744:	2200      	movs	r2, #0
 8007746:	2300      	movs	r3, #0
 8007748:	f7f8 fd94 	bl	8000274 <__aeabi_dcmpgt>
 800774c:	2800      	cmp	r0, #0
 800774e:	d01f      	beq.n	8007790 <ceil+0x6c>
 8007750:	2d00      	cmp	r5, #0
 8007752:	db4f      	blt.n	80077f4 <ceil+0xd0>
 8007754:	432c      	orrs	r4, r5
 8007756:	1e25      	subs	r5, r4, #0
 8007758:	d01a      	beq.n	8007790 <ceil+0x6c>
 800775a:	2400      	movs	r4, #0
 800775c:	4d2a      	ldr	r5, [pc, #168]	@ (8007808 <ceil+0xe4>)
 800775e:	e017      	b.n	8007790 <ceil+0x6c>
 8007760:	4f2a      	ldr	r7, [pc, #168]	@ (800780c <ceil+0xe8>)
 8007762:	4137      	asrs	r7, r6
 8007764:	003b      	movs	r3, r7
 8007766:	400b      	ands	r3, r1
 8007768:	4303      	orrs	r3, r0
 800776a:	d01e      	beq.n	80077aa <ceil+0x86>
 800776c:	4a24      	ldr	r2, [pc, #144]	@ (8007800 <ceil+0xdc>)
 800776e:	4b25      	ldr	r3, [pc, #148]	@ (8007804 <ceil+0xe0>)
 8007770:	f7f8 fdb2 	bl	80002d8 <__aeabi_dadd>
 8007774:	2200      	movs	r2, #0
 8007776:	2300      	movs	r3, #0
 8007778:	f7f8 fd7c 	bl	8000274 <__aeabi_dcmpgt>
 800777c:	2800      	cmp	r0, #0
 800777e:	d007      	beq.n	8007790 <ceil+0x6c>
 8007780:	2d00      	cmp	r5, #0
 8007782:	dd03      	ble.n	800778c <ceil+0x68>
 8007784:	2380      	movs	r3, #128	@ 0x80
 8007786:	035b      	lsls	r3, r3, #13
 8007788:	4133      	asrs	r3, r6
 800778a:	18ed      	adds	r5, r5, r3
 800778c:	2400      	movs	r4, #0
 800778e:	43bd      	bics	r5, r7
 8007790:	0029      	movs	r1, r5
 8007792:	0020      	movs	r0, r4
 8007794:	e009      	b.n	80077aa <ceil+0x86>
 8007796:	2e33      	cmp	r6, #51	@ 0x33
 8007798:	dd09      	ble.n	80077ae <ceil+0x8a>
 800779a:	2380      	movs	r3, #128	@ 0x80
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	429e      	cmp	r6, r3
 80077a0:	d103      	bne.n	80077aa <ceil+0x86>
 80077a2:	0002      	movs	r2, r0
 80077a4:	000b      	movs	r3, r1
 80077a6:	f7f8 fd97 	bl	80002d8 <__aeabi_dadd>
 80077aa:	b003      	add	sp, #12
 80077ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ae:	2701      	movs	r7, #1
 80077b0:	4a17      	ldr	r2, [pc, #92]	@ (8007810 <ceil+0xec>)
 80077b2:	427f      	negs	r7, r7
 80077b4:	189b      	adds	r3, r3, r2
 80077b6:	40df      	lsrs	r7, r3
 80077b8:	4207      	tst	r7, r0
 80077ba:	d0f6      	beq.n	80077aa <ceil+0x86>
 80077bc:	4a10      	ldr	r2, [pc, #64]	@ (8007800 <ceil+0xdc>)
 80077be:	4b11      	ldr	r3, [pc, #68]	@ (8007804 <ceil+0xe0>)
 80077c0:	f7f8 fd8a 	bl	80002d8 <__aeabi_dadd>
 80077c4:	2200      	movs	r2, #0
 80077c6:	2300      	movs	r3, #0
 80077c8:	f7f8 fd54 	bl	8000274 <__aeabi_dcmpgt>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d0df      	beq.n	8007790 <ceil+0x6c>
 80077d0:	2d00      	cmp	r5, #0
 80077d2:	dd02      	ble.n	80077da <ceil+0xb6>
 80077d4:	2e14      	cmp	r6, #20
 80077d6:	d102      	bne.n	80077de <ceil+0xba>
 80077d8:	3501      	adds	r5, #1
 80077da:	43bc      	bics	r4, r7
 80077dc:	e7d8      	b.n	8007790 <ceil+0x6c>
 80077de:	2234      	movs	r2, #52	@ 0x34
 80077e0:	2301      	movs	r3, #1
 80077e2:	1b92      	subs	r2, r2, r6
 80077e4:	4093      	lsls	r3, r2
 80077e6:	18e4      	adds	r4, r4, r3
 80077e8:	9b01      	ldr	r3, [sp, #4]
 80077ea:	429c      	cmp	r4, r3
 80077ec:	419b      	sbcs	r3, r3
 80077ee:	425b      	negs	r3, r3
 80077f0:	18ed      	adds	r5, r5, r3
 80077f2:	e7f2      	b.n	80077da <ceil+0xb6>
 80077f4:	2580      	movs	r5, #128	@ 0x80
 80077f6:	2400      	movs	r4, #0
 80077f8:	062d      	lsls	r5, r5, #24
 80077fa:	e7c9      	b.n	8007790 <ceil+0x6c>
 80077fc:	fffffc01 	.word	0xfffffc01
 8007800:	8800759c 	.word	0x8800759c
 8007804:	7e37e43c 	.word	0x7e37e43c
 8007808:	3ff00000 	.word	0x3ff00000
 800780c:	000fffff 	.word	0x000fffff
 8007810:	fffffbed 	.word	0xfffffbed

08007814 <floor>:
 8007814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007816:	004b      	lsls	r3, r1, #1
 8007818:	4a36      	ldr	r2, [pc, #216]	@ (80078f4 <floor+0xe0>)
 800781a:	0d5b      	lsrs	r3, r3, #21
 800781c:	189e      	adds	r6, r3, r2
 800781e:	000c      	movs	r4, r1
 8007820:	0005      	movs	r5, r0
 8007822:	9001      	str	r0, [sp, #4]
 8007824:	2e13      	cmp	r6, #19
 8007826:	dc2f      	bgt.n	8007888 <floor+0x74>
 8007828:	2e00      	cmp	r6, #0
 800782a:	da14      	bge.n	8007856 <floor+0x42>
 800782c:	4a32      	ldr	r2, [pc, #200]	@ (80078f8 <floor+0xe4>)
 800782e:	4b33      	ldr	r3, [pc, #204]	@ (80078fc <floor+0xe8>)
 8007830:	f7f8 fd52 	bl	80002d8 <__aeabi_dadd>
 8007834:	2200      	movs	r2, #0
 8007836:	2300      	movs	r3, #0
 8007838:	f7f8 fd1c 	bl	8000274 <__aeabi_dcmpgt>
 800783c:	2800      	cmp	r0, #0
 800783e:	d007      	beq.n	8007850 <floor+0x3c>
 8007840:	2c00      	cmp	r4, #0
 8007842:	da50      	bge.n	80078e6 <floor+0xd2>
 8007844:	0064      	lsls	r4, r4, #1
 8007846:	0864      	lsrs	r4, r4, #1
 8007848:	4325      	orrs	r5, r4
 800784a:	d14f      	bne.n	80078ec <floor+0xd8>
 800784c:	2480      	movs	r4, #128	@ 0x80
 800784e:	0624      	lsls	r4, r4, #24
 8007850:	0021      	movs	r1, r4
 8007852:	0028      	movs	r0, r5
 8007854:	e022      	b.n	800789c <floor+0x88>
 8007856:	4f2a      	ldr	r7, [pc, #168]	@ (8007900 <floor+0xec>)
 8007858:	4137      	asrs	r7, r6
 800785a:	003b      	movs	r3, r7
 800785c:	400b      	ands	r3, r1
 800785e:	4303      	orrs	r3, r0
 8007860:	d01c      	beq.n	800789c <floor+0x88>
 8007862:	4a25      	ldr	r2, [pc, #148]	@ (80078f8 <floor+0xe4>)
 8007864:	4b25      	ldr	r3, [pc, #148]	@ (80078fc <floor+0xe8>)
 8007866:	f7f8 fd37 	bl	80002d8 <__aeabi_dadd>
 800786a:	2200      	movs	r2, #0
 800786c:	2300      	movs	r3, #0
 800786e:	f7f8 fd01 	bl	8000274 <__aeabi_dcmpgt>
 8007872:	2800      	cmp	r0, #0
 8007874:	d0ec      	beq.n	8007850 <floor+0x3c>
 8007876:	2c00      	cmp	r4, #0
 8007878:	da03      	bge.n	8007882 <floor+0x6e>
 800787a:	2380      	movs	r3, #128	@ 0x80
 800787c:	035b      	lsls	r3, r3, #13
 800787e:	4133      	asrs	r3, r6
 8007880:	18e4      	adds	r4, r4, r3
 8007882:	2500      	movs	r5, #0
 8007884:	43bc      	bics	r4, r7
 8007886:	e7e3      	b.n	8007850 <floor+0x3c>
 8007888:	2e33      	cmp	r6, #51	@ 0x33
 800788a:	dd09      	ble.n	80078a0 <floor+0x8c>
 800788c:	2380      	movs	r3, #128	@ 0x80
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	429e      	cmp	r6, r3
 8007892:	d103      	bne.n	800789c <floor+0x88>
 8007894:	0002      	movs	r2, r0
 8007896:	000b      	movs	r3, r1
 8007898:	f7f8 fd1e 	bl	80002d8 <__aeabi_dadd>
 800789c:	b003      	add	sp, #12
 800789e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078a0:	2701      	movs	r7, #1
 80078a2:	4a18      	ldr	r2, [pc, #96]	@ (8007904 <floor+0xf0>)
 80078a4:	427f      	negs	r7, r7
 80078a6:	189b      	adds	r3, r3, r2
 80078a8:	40df      	lsrs	r7, r3
 80078aa:	4238      	tst	r0, r7
 80078ac:	d0f6      	beq.n	800789c <floor+0x88>
 80078ae:	4a12      	ldr	r2, [pc, #72]	@ (80078f8 <floor+0xe4>)
 80078b0:	4b12      	ldr	r3, [pc, #72]	@ (80078fc <floor+0xe8>)
 80078b2:	f7f8 fd11 	bl	80002d8 <__aeabi_dadd>
 80078b6:	2200      	movs	r2, #0
 80078b8:	2300      	movs	r3, #0
 80078ba:	f7f8 fcdb 	bl	8000274 <__aeabi_dcmpgt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d0c6      	beq.n	8007850 <floor+0x3c>
 80078c2:	2c00      	cmp	r4, #0
 80078c4:	da02      	bge.n	80078cc <floor+0xb8>
 80078c6:	2e14      	cmp	r6, #20
 80078c8:	d102      	bne.n	80078d0 <floor+0xbc>
 80078ca:	3401      	adds	r4, #1
 80078cc:	43bd      	bics	r5, r7
 80078ce:	e7bf      	b.n	8007850 <floor+0x3c>
 80078d0:	2234      	movs	r2, #52	@ 0x34
 80078d2:	2301      	movs	r3, #1
 80078d4:	1b92      	subs	r2, r2, r6
 80078d6:	4093      	lsls	r3, r2
 80078d8:	18ed      	adds	r5, r5, r3
 80078da:	9b01      	ldr	r3, [sp, #4]
 80078dc:	429d      	cmp	r5, r3
 80078de:	419b      	sbcs	r3, r3
 80078e0:	425b      	negs	r3, r3
 80078e2:	18e4      	adds	r4, r4, r3
 80078e4:	e7f2      	b.n	80078cc <floor+0xb8>
 80078e6:	2500      	movs	r5, #0
 80078e8:	002c      	movs	r4, r5
 80078ea:	e7b1      	b.n	8007850 <floor+0x3c>
 80078ec:	2500      	movs	r5, #0
 80078ee:	4c06      	ldr	r4, [pc, #24]	@ (8007908 <floor+0xf4>)
 80078f0:	e7ae      	b.n	8007850 <floor+0x3c>
 80078f2:	46c0      	nop			@ (mov r8, r8)
 80078f4:	fffffc01 	.word	0xfffffc01
 80078f8:	8800759c 	.word	0x8800759c
 80078fc:	7e37e43c 	.word	0x7e37e43c
 8007900:	000fffff 	.word	0x000fffff
 8007904:	fffffbed 	.word	0xfffffbed
 8007908:	bff00000 	.word	0xbff00000

0800790c <rint>:
 800790c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800790e:	004a      	lsls	r2, r1, #1
 8007910:	b085      	sub	sp, #20
 8007912:	0d52      	lsrs	r2, r2, #21
 8007914:	9201      	str	r2, [sp, #4]
 8007916:	9e01      	ldr	r6, [sp, #4]
 8007918:	4a3c      	ldr	r2, [pc, #240]	@ (8007a0c <rint+0x100>)
 800791a:	000d      	movs	r5, r1
 800791c:	18b6      	adds	r6, r6, r2
 800791e:	0003      	movs	r3, r0
 8007920:	0fcc      	lsrs	r4, r1, #31
 8007922:	2e13      	cmp	r6, #19
 8007924:	dc55      	bgt.n	80079d2 <rint+0xc6>
 8007926:	2e00      	cmp	r6, #0
 8007928:	da2a      	bge.n	8007980 <rint+0x74>
 800792a:	004a      	lsls	r2, r1, #1
 800792c:	0852      	lsrs	r2, r2, #1
 800792e:	4302      	orrs	r2, r0
 8007930:	d024      	beq.n	800797c <rint+0x70>
 8007932:	030a      	lsls	r2, r1, #12
 8007934:	0b12      	lsrs	r2, r2, #12
 8007936:	4302      	orrs	r2, r0
 8007938:	4253      	negs	r3, r2
 800793a:	4313      	orrs	r3, r2
 800793c:	2280      	movs	r2, #128	@ 0x80
 800793e:	0c4d      	lsrs	r5, r1, #17
 8007940:	0312      	lsls	r2, r2, #12
 8007942:	0b1b      	lsrs	r3, r3, #12
 8007944:	4013      	ands	r3, r2
 8007946:	046d      	lsls	r5, r5, #17
 8007948:	432b      	orrs	r3, r5
 800794a:	0019      	movs	r1, r3
 800794c:	4b30      	ldr	r3, [pc, #192]	@ (8007a10 <rint+0x104>)
 800794e:	00e2      	lsls	r2, r4, #3
 8007950:	189b      	adds	r3, r3, r2
 8007952:	681e      	ldr	r6, [r3, #0]
 8007954:	685f      	ldr	r7, [r3, #4]
 8007956:	0002      	movs	r2, r0
 8007958:	000b      	movs	r3, r1
 800795a:	0030      	movs	r0, r6
 800795c:	0039      	movs	r1, r7
 800795e:	f7f8 fcbb 	bl	80002d8 <__aeabi_dadd>
 8007962:	9002      	str	r0, [sp, #8]
 8007964:	9103      	str	r1, [sp, #12]
 8007966:	9802      	ldr	r0, [sp, #8]
 8007968:	9903      	ldr	r1, [sp, #12]
 800796a:	003b      	movs	r3, r7
 800796c:	0032      	movs	r2, r6
 800796e:	f7f9 ff23 	bl	80017b8 <__aeabi_dsub>
 8007972:	004b      	lsls	r3, r1, #1
 8007974:	07e4      	lsls	r4, r4, #31
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	431c      	orrs	r4, r3
 800797a:	0021      	movs	r1, r4
 800797c:	b005      	add	sp, #20
 800797e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007980:	4f24      	ldr	r7, [pc, #144]	@ (8007a14 <rint+0x108>)
 8007982:	000a      	movs	r2, r1
 8007984:	4137      	asrs	r7, r6
 8007986:	403a      	ands	r2, r7
 8007988:	4302      	orrs	r2, r0
 800798a:	d0f7      	beq.n	800797c <rint+0x70>
 800798c:	087f      	lsrs	r7, r7, #1
 800798e:	4039      	ands	r1, r7
 8007990:	430b      	orrs	r3, r1
 8007992:	d00a      	beq.n	80079aa <rint+0x9e>
 8007994:	4b20      	ldr	r3, [pc, #128]	@ (8007a18 <rint+0x10c>)
 8007996:	9a01      	ldr	r2, [sp, #4]
 8007998:	43bd      	bics	r5, r7
 800799a:	18d2      	adds	r2, r2, r3
 800799c:	4253      	negs	r3, r2
 800799e:	415a      	adcs	r2, r3
 80079a0:	07d3      	lsls	r3, r2, #31
 80079a2:	2280      	movs	r2, #128	@ 0x80
 80079a4:	02d2      	lsls	r2, r2, #11
 80079a6:	4132      	asrs	r2, r6
 80079a8:	4315      	orrs	r5, r2
 80079aa:	4919      	ldr	r1, [pc, #100]	@ (8007a10 <rint+0x104>)
 80079ac:	00e4      	lsls	r4, r4, #3
 80079ae:	1909      	adds	r1, r1, r4
 80079b0:	001a      	movs	r2, r3
 80079b2:	002b      	movs	r3, r5
 80079b4:	680c      	ldr	r4, [r1, #0]
 80079b6:	684d      	ldr	r5, [r1, #4]
 80079b8:	0020      	movs	r0, r4
 80079ba:	0029      	movs	r1, r5
 80079bc:	f7f8 fc8c 	bl	80002d8 <__aeabi_dadd>
 80079c0:	9002      	str	r0, [sp, #8]
 80079c2:	9103      	str	r1, [sp, #12]
 80079c4:	9802      	ldr	r0, [sp, #8]
 80079c6:	9903      	ldr	r1, [sp, #12]
 80079c8:	0022      	movs	r2, r4
 80079ca:	002b      	movs	r3, r5
 80079cc:	f7f9 fef4 	bl	80017b8 <__aeabi_dsub>
 80079d0:	e7d4      	b.n	800797c <rint+0x70>
 80079d2:	2e33      	cmp	r6, #51	@ 0x33
 80079d4:	dd08      	ble.n	80079e8 <rint+0xdc>
 80079d6:	2380      	movs	r3, #128	@ 0x80
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	429e      	cmp	r6, r3
 80079dc:	d1ce      	bne.n	800797c <rint+0x70>
 80079de:	0002      	movs	r2, r0
 80079e0:	000b      	movs	r3, r1
 80079e2:	f7f8 fc79 	bl	80002d8 <__aeabi_dadd>
 80079e6:	e7c9      	b.n	800797c <rint+0x70>
 80079e8:	9e01      	ldr	r6, [sp, #4]
 80079ea:	4a0c      	ldr	r2, [pc, #48]	@ (8007a1c <rint+0x110>)
 80079ec:	18b2      	adds	r2, r6, r2
 80079ee:	2601      	movs	r6, #1
 80079f0:	4276      	negs	r6, r6
 80079f2:	40d6      	lsrs	r6, r2
 80079f4:	4206      	tst	r6, r0
 80079f6:	d0c1      	beq.n	800797c <rint+0x70>
 80079f8:	0876      	lsrs	r6, r6, #1
 80079fa:	4206      	tst	r6, r0
 80079fc:	d0d5      	beq.n	80079aa <rint+0x9e>
 80079fe:	2180      	movs	r1, #128	@ 0x80
 8007a00:	05c9      	lsls	r1, r1, #23
 8007a02:	4111      	asrs	r1, r2
 8007a04:	43b3      	bics	r3, r6
 8007a06:	430b      	orrs	r3, r1
 8007a08:	e7cf      	b.n	80079aa <rint+0x9e>
 8007a0a:	46c0      	nop			@ (mov r8, r8)
 8007a0c:	fffffc01 	.word	0xfffffc01
 8007a10:	08007d38 	.word	0x08007d38
 8007a14:	000fffff 	.word	0x000fffff
 8007a18:	fffffbee 	.word	0xfffffbee
 8007a1c:	fffffbed 	.word	0xfffffbed

08007a20 <_init>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	46c0      	nop			@ (mov r8, r8)
 8007a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a26:	bc08      	pop	{r3}
 8007a28:	469e      	mov	lr, r3
 8007a2a:	4770      	bx	lr

08007a2c <_fini>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	46c0      	nop			@ (mov r8, r8)
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr
