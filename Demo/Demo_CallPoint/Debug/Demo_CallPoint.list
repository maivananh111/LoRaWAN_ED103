
Demo_CallPoint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d188  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800d248  0800d248  0000e248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da00  0800da00  0000f1ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800da00  0800da00  0000ea00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da08  0800da08  0000f1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da08  0800da08  0000ea08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da0c  0800da0c  0000ea0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ac  20000000  0800da10  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200001ac  0800dbbc  0000f1ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  0800dbbc  0000f68c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162fb  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ef  00000000  00000000  000254cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00028bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e14  00000000  00000000  00029e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c206  00000000  00000000  0002ac2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001652d  00000000  00000000  00046e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac2df  00000000  00000000  0005d35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010963e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004978  00000000  00000000  00109684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010dffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ac 	.word	0x200001ac
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d230 	.word	0x0800d230

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001b0 	.word	0x200001b0
 8000104:	0800d230 	.word	0x0800d230

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 f891 	bl	8001550 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 ffd1 	bl	80013e0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f883 	bl	8001550 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f879 	bl	8001550 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fffb 	bl	8001468 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fff1 	bl	8001468 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__clzsi2>:
 8000494:	211c      	movs	r1, #28
 8000496:	2301      	movs	r3, #1
 8000498:	041b      	lsls	r3, r3, #16
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0xe>
 800049e:	0c00      	lsrs	r0, r0, #16
 80004a0:	3910      	subs	r1, #16
 80004a2:	0a1b      	lsrs	r3, r3, #8
 80004a4:	4298      	cmp	r0, r3
 80004a6:	d301      	bcc.n	80004ac <__clzsi2+0x18>
 80004a8:	0a00      	lsrs	r0, r0, #8
 80004aa:	3908      	subs	r1, #8
 80004ac:	091b      	lsrs	r3, r3, #4
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0x22>
 80004b2:	0900      	lsrs	r0, r0, #4
 80004b4:	3904      	subs	r1, #4
 80004b6:	a202      	add	r2, pc, #8	@ (adr r2, 80004c0 <__clzsi2+0x2c>)
 80004b8:	5c10      	ldrb	r0, [r2, r0]
 80004ba:	1840      	adds	r0, r0, r1
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	02020304 	.word	0x02020304
 80004c4:	01010101 	.word	0x01010101
	...

080004d0 <__aeabi_uldivmod>:
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d111      	bne.n	80004f8 <__aeabi_uldivmod+0x28>
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	d10f      	bne.n	80004f8 <__aeabi_uldivmod+0x28>
 80004d8:	2900      	cmp	r1, #0
 80004da:	d100      	bne.n	80004de <__aeabi_uldivmod+0xe>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d002      	beq.n	80004e6 <__aeabi_uldivmod+0x16>
 80004e0:	2100      	movs	r1, #0
 80004e2:	43c9      	mvns	r1, r1
 80004e4:	0008      	movs	r0, r1
 80004e6:	b407      	push	{r0, r1, r2}
 80004e8:	4802      	ldr	r0, [pc, #8]	@ (80004f4 <__aeabi_uldivmod+0x24>)
 80004ea:	a102      	add	r1, pc, #8	@ (adr r1, 80004f4 <__aeabi_uldivmod+0x24>)
 80004ec:	1840      	adds	r0, r0, r1
 80004ee:	9002      	str	r0, [sp, #8]
 80004f0:	bd03      	pop	{r0, r1, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	ffffff21 	.word	0xffffff21
 80004f8:	b403      	push	{r0, r1}
 80004fa:	4668      	mov	r0, sp
 80004fc:	b501      	push	{r0, lr}
 80004fe:	9802      	ldr	r0, [sp, #8]
 8000500:	f000 f824 	bl	800054c <__udivmoddi4>
 8000504:	9b01      	ldr	r3, [sp, #4]
 8000506:	469e      	mov	lr, r3
 8000508:	b002      	add	sp, #8
 800050a:	bc0c      	pop	{r2, r3}
 800050c:	4770      	bx	lr
 800050e:	46c0      	nop			@ (mov r8, r8)

08000510 <__aeabi_d2uiz>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2200      	movs	r2, #0
 8000514:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <__aeabi_d2uiz+0x38>)
 8000516:	0004      	movs	r4, r0
 8000518:	000d      	movs	r5, r1
 800051a:	f7ff ffb1 	bl	8000480 <__aeabi_dcmpge>
 800051e:	2800      	cmp	r0, #0
 8000520:	d104      	bne.n	800052c <__aeabi_d2uiz+0x1c>
 8000522:	0020      	movs	r0, r4
 8000524:	0029      	movs	r1, r5
 8000526:	f001 fee9 	bl	80022fc <__aeabi_d2iz>
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <__aeabi_d2uiz+0x38>)
 800052e:	2200      	movs	r2, #0
 8000530:	0020      	movs	r0, r4
 8000532:	0029      	movs	r1, r5
 8000534:	f001 fb46 	bl	8001bc4 <__aeabi_dsub>
 8000538:	f001 fee0 	bl	80022fc <__aeabi_d2iz>
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	061b      	lsls	r3, r3, #24
 8000540:	469c      	mov	ip, r3
 8000542:	4460      	add	r0, ip
 8000544:	e7f1      	b.n	800052a <__aeabi_d2uiz+0x1a>
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	41e00000 	.word	0x41e00000

0800054c <__udivmoddi4>:
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	4657      	mov	r7, sl
 8000550:	464e      	mov	r6, r9
 8000552:	4645      	mov	r5, r8
 8000554:	46de      	mov	lr, fp
 8000556:	b5e0      	push	{r5, r6, r7, lr}
 8000558:	0004      	movs	r4, r0
 800055a:	000d      	movs	r5, r1
 800055c:	4692      	mov	sl, r2
 800055e:	4699      	mov	r9, r3
 8000560:	b083      	sub	sp, #12
 8000562:	428b      	cmp	r3, r1
 8000564:	d830      	bhi.n	80005c8 <__udivmoddi4+0x7c>
 8000566:	d02d      	beq.n	80005c4 <__udivmoddi4+0x78>
 8000568:	4649      	mov	r1, r9
 800056a:	4650      	mov	r0, sl
 800056c:	f001 ff54 	bl	8002418 <__clzdi2>
 8000570:	0029      	movs	r1, r5
 8000572:	0006      	movs	r6, r0
 8000574:	0020      	movs	r0, r4
 8000576:	f001 ff4f 	bl	8002418 <__clzdi2>
 800057a:	1a33      	subs	r3, r6, r0
 800057c:	4698      	mov	r8, r3
 800057e:	3b20      	subs	r3, #32
 8000580:	d434      	bmi.n	80005ec <__udivmoddi4+0xa0>
 8000582:	469b      	mov	fp, r3
 8000584:	4653      	mov	r3, sl
 8000586:	465a      	mov	r2, fp
 8000588:	4093      	lsls	r3, r2
 800058a:	4642      	mov	r2, r8
 800058c:	001f      	movs	r7, r3
 800058e:	4653      	mov	r3, sl
 8000590:	4093      	lsls	r3, r2
 8000592:	001e      	movs	r6, r3
 8000594:	42af      	cmp	r7, r5
 8000596:	d83b      	bhi.n	8000610 <__udivmoddi4+0xc4>
 8000598:	42af      	cmp	r7, r5
 800059a:	d100      	bne.n	800059e <__udivmoddi4+0x52>
 800059c:	e079      	b.n	8000692 <__udivmoddi4+0x146>
 800059e:	465b      	mov	r3, fp
 80005a0:	1ba4      	subs	r4, r4, r6
 80005a2:	41bd      	sbcs	r5, r7
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	da00      	bge.n	80005aa <__udivmoddi4+0x5e>
 80005a8:	e076      	b.n	8000698 <__udivmoddi4+0x14c>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	465a      	mov	r2, fp
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2301      	movs	r3, #1
 80005bc:	4642      	mov	r2, r8
 80005be:	4093      	lsls	r3, r2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	e029      	b.n	8000618 <__udivmoddi4+0xcc>
 80005c4:	4282      	cmp	r2, r0
 80005c6:	d9cf      	bls.n	8000568 <__udivmoddi4+0x1c>
 80005c8:	2200      	movs	r2, #0
 80005ca:	2300      	movs	r3, #0
 80005cc:	9200      	str	r2, [sp, #0]
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <__udivmoddi4+0x8e>
 80005d6:	601c      	str	r4, [r3, #0]
 80005d8:	605d      	str	r5, [r3, #4]
 80005da:	9800      	ldr	r0, [sp, #0]
 80005dc:	9901      	ldr	r1, [sp, #4]
 80005de:	b003      	add	sp, #12
 80005e0:	bcf0      	pop	{r4, r5, r6, r7}
 80005e2:	46bb      	mov	fp, r7
 80005e4:	46b2      	mov	sl, r6
 80005e6:	46a9      	mov	r9, r5
 80005e8:	46a0      	mov	r8, r4
 80005ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ec:	4642      	mov	r2, r8
 80005ee:	469b      	mov	fp, r3
 80005f0:	2320      	movs	r3, #32
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	4652      	mov	r2, sl
 80005f6:	40da      	lsrs	r2, r3
 80005f8:	4641      	mov	r1, r8
 80005fa:	0013      	movs	r3, r2
 80005fc:	464a      	mov	r2, r9
 80005fe:	408a      	lsls	r2, r1
 8000600:	0017      	movs	r7, r2
 8000602:	4642      	mov	r2, r8
 8000604:	431f      	orrs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d9c3      	bls.n	8000598 <__udivmoddi4+0x4c>
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	4643      	mov	r3, r8
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0d8      	beq.n	80005d0 <__udivmoddi4+0x84>
 800061e:	07fb      	lsls	r3, r7, #31
 8000620:	0872      	lsrs	r2, r6, #1
 8000622:	431a      	orrs	r2, r3
 8000624:	4646      	mov	r6, r8
 8000626:	087b      	lsrs	r3, r7, #1
 8000628:	e00e      	b.n	8000648 <__udivmoddi4+0xfc>
 800062a:	42ab      	cmp	r3, r5
 800062c:	d101      	bne.n	8000632 <__udivmoddi4+0xe6>
 800062e:	42a2      	cmp	r2, r4
 8000630:	d80c      	bhi.n	800064c <__udivmoddi4+0x100>
 8000632:	1aa4      	subs	r4, r4, r2
 8000634:	419d      	sbcs	r5, r3
 8000636:	2001      	movs	r0, #1
 8000638:	1924      	adds	r4, r4, r4
 800063a:	416d      	adcs	r5, r5
 800063c:	2100      	movs	r1, #0
 800063e:	3e01      	subs	r6, #1
 8000640:	1824      	adds	r4, r4, r0
 8000642:	414d      	adcs	r5, r1
 8000644:	2e00      	cmp	r6, #0
 8000646:	d006      	beq.n	8000656 <__udivmoddi4+0x10a>
 8000648:	42ab      	cmp	r3, r5
 800064a:	d9ee      	bls.n	800062a <__udivmoddi4+0xde>
 800064c:	3e01      	subs	r6, #1
 800064e:	1924      	adds	r4, r4, r4
 8000650:	416d      	adcs	r5, r5
 8000652:	2e00      	cmp	r6, #0
 8000654:	d1f8      	bne.n	8000648 <__udivmoddi4+0xfc>
 8000656:	9800      	ldr	r0, [sp, #0]
 8000658:	9901      	ldr	r1, [sp, #4]
 800065a:	465b      	mov	r3, fp
 800065c:	1900      	adds	r0, r0, r4
 800065e:	4169      	adcs	r1, r5
 8000660:	2b00      	cmp	r3, #0
 8000662:	db24      	blt.n	80006ae <__udivmoddi4+0x162>
 8000664:	002b      	movs	r3, r5
 8000666:	465a      	mov	r2, fp
 8000668:	4644      	mov	r4, r8
 800066a:	40d3      	lsrs	r3, r2
 800066c:	002a      	movs	r2, r5
 800066e:	40e2      	lsrs	r2, r4
 8000670:	001c      	movs	r4, r3
 8000672:	465b      	mov	r3, fp
 8000674:	0015      	movs	r5, r2
 8000676:	2b00      	cmp	r3, #0
 8000678:	db2a      	blt.n	80006d0 <__udivmoddi4+0x184>
 800067a:	0026      	movs	r6, r4
 800067c:	409e      	lsls	r6, r3
 800067e:	0033      	movs	r3, r6
 8000680:	0026      	movs	r6, r4
 8000682:	4647      	mov	r7, r8
 8000684:	40be      	lsls	r6, r7
 8000686:	0032      	movs	r2, r6
 8000688:	1a80      	subs	r0, r0, r2
 800068a:	4199      	sbcs	r1, r3
 800068c:	9000      	str	r0, [sp, #0]
 800068e:	9101      	str	r1, [sp, #4]
 8000690:	e79e      	b.n	80005d0 <__udivmoddi4+0x84>
 8000692:	42a3      	cmp	r3, r4
 8000694:	d8bc      	bhi.n	8000610 <__udivmoddi4+0xc4>
 8000696:	e782      	b.n	800059e <__udivmoddi4+0x52>
 8000698:	4642      	mov	r2, r8
 800069a:	2320      	movs	r3, #32
 800069c:	2100      	movs	r1, #0
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	2200      	movs	r2, #0
 80006a2:	9100      	str	r1, [sp, #0]
 80006a4:	9201      	str	r2, [sp, #4]
 80006a6:	2201      	movs	r2, #1
 80006a8:	40da      	lsrs	r2, r3
 80006aa:	9201      	str	r2, [sp, #4]
 80006ac:	e785      	b.n	80005ba <__udivmoddi4+0x6e>
 80006ae:	4642      	mov	r2, r8
 80006b0:	2320      	movs	r3, #32
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	002a      	movs	r2, r5
 80006b6:	4646      	mov	r6, r8
 80006b8:	409a      	lsls	r2, r3
 80006ba:	0023      	movs	r3, r4
 80006bc:	40f3      	lsrs	r3, r6
 80006be:	4644      	mov	r4, r8
 80006c0:	4313      	orrs	r3, r2
 80006c2:	002a      	movs	r2, r5
 80006c4:	40e2      	lsrs	r2, r4
 80006c6:	001c      	movs	r4, r3
 80006c8:	465b      	mov	r3, fp
 80006ca:	0015      	movs	r5, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dad4      	bge.n	800067a <__udivmoddi4+0x12e>
 80006d0:	4642      	mov	r2, r8
 80006d2:	002f      	movs	r7, r5
 80006d4:	2320      	movs	r3, #32
 80006d6:	0026      	movs	r6, r4
 80006d8:	4097      	lsls	r7, r2
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	40de      	lsrs	r6, r3
 80006de:	003b      	movs	r3, r7
 80006e0:	4333      	orrs	r3, r6
 80006e2:	e7cd      	b.n	8000680 <__udivmoddi4+0x134>

080006e4 <__aeabi_dadd>:
 80006e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e6:	4657      	mov	r7, sl
 80006e8:	464e      	mov	r6, r9
 80006ea:	4645      	mov	r5, r8
 80006ec:	46de      	mov	lr, fp
 80006ee:	b5e0      	push	{r5, r6, r7, lr}
 80006f0:	b083      	sub	sp, #12
 80006f2:	9000      	str	r0, [sp, #0]
 80006f4:	9101      	str	r1, [sp, #4]
 80006f6:	030c      	lsls	r4, r1, #12
 80006f8:	004f      	lsls	r7, r1, #1
 80006fa:	0fce      	lsrs	r6, r1, #31
 80006fc:	0a61      	lsrs	r1, r4, #9
 80006fe:	9c00      	ldr	r4, [sp, #0]
 8000700:	031d      	lsls	r5, r3, #12
 8000702:	0f64      	lsrs	r4, r4, #29
 8000704:	430c      	orrs	r4, r1
 8000706:	9900      	ldr	r1, [sp, #0]
 8000708:	9200      	str	r2, [sp, #0]
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	00c8      	lsls	r0, r1, #3
 800070e:	0059      	lsls	r1, r3, #1
 8000710:	0d4b      	lsrs	r3, r1, #21
 8000712:	4699      	mov	r9, r3
 8000714:	9a00      	ldr	r2, [sp, #0]
 8000716:	9b01      	ldr	r3, [sp, #4]
 8000718:	0a6d      	lsrs	r5, r5, #9
 800071a:	0fd9      	lsrs	r1, r3, #31
 800071c:	0f53      	lsrs	r3, r2, #29
 800071e:	432b      	orrs	r3, r5
 8000720:	469a      	mov	sl, r3
 8000722:	9b00      	ldr	r3, [sp, #0]
 8000724:	0d7f      	lsrs	r7, r7, #21
 8000726:	00da      	lsls	r2, r3, #3
 8000728:	4694      	mov	ip, r2
 800072a:	464a      	mov	r2, r9
 800072c:	46b0      	mov	r8, r6
 800072e:	1aba      	subs	r2, r7, r2
 8000730:	428e      	cmp	r6, r1
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x52>
 8000734:	e0b0      	b.n	8000898 <__aeabi_dadd+0x1b4>
 8000736:	2a00      	cmp	r2, #0
 8000738:	dc00      	bgt.n	800073c <__aeabi_dadd+0x58>
 800073a:	e078      	b.n	800082e <__aeabi_dadd+0x14a>
 800073c:	4649      	mov	r1, r9
 800073e:	2900      	cmp	r1, #0
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x60>
 8000742:	e0e9      	b.n	8000918 <__aeabi_dadd+0x234>
 8000744:	49c9      	ldr	r1, [pc, #804]	@ (8000a6c <__aeabi_dadd+0x388>)
 8000746:	428f      	cmp	r7, r1
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x68>
 800074a:	e195      	b.n	8000a78 <__aeabi_dadd+0x394>
 800074c:	2501      	movs	r5, #1
 800074e:	2a38      	cmp	r2, #56	@ 0x38
 8000750:	dc16      	bgt.n	8000780 <__aeabi_dadd+0x9c>
 8000752:	2180      	movs	r1, #128	@ 0x80
 8000754:	4653      	mov	r3, sl
 8000756:	0409      	lsls	r1, r1, #16
 8000758:	430b      	orrs	r3, r1
 800075a:	469a      	mov	sl, r3
 800075c:	2a1f      	cmp	r2, #31
 800075e:	dd00      	ble.n	8000762 <__aeabi_dadd+0x7e>
 8000760:	e1e7      	b.n	8000b32 <__aeabi_dadd+0x44e>
 8000762:	2120      	movs	r1, #32
 8000764:	4655      	mov	r5, sl
 8000766:	1a8b      	subs	r3, r1, r2
 8000768:	4661      	mov	r1, ip
 800076a:	409d      	lsls	r5, r3
 800076c:	40d1      	lsrs	r1, r2
 800076e:	430d      	orrs	r5, r1
 8000770:	4661      	mov	r1, ip
 8000772:	4099      	lsls	r1, r3
 8000774:	1e4b      	subs	r3, r1, #1
 8000776:	4199      	sbcs	r1, r3
 8000778:	4653      	mov	r3, sl
 800077a:	40d3      	lsrs	r3, r2
 800077c:	430d      	orrs	r5, r1
 800077e:	1ae4      	subs	r4, r4, r3
 8000780:	1b45      	subs	r5, r0, r5
 8000782:	42a8      	cmp	r0, r5
 8000784:	4180      	sbcs	r0, r0
 8000786:	4240      	negs	r0, r0
 8000788:	1a24      	subs	r4, r4, r0
 800078a:	0223      	lsls	r3, r4, #8
 800078c:	d400      	bmi.n	8000790 <__aeabi_dadd+0xac>
 800078e:	e10f      	b.n	80009b0 <__aeabi_dadd+0x2cc>
 8000790:	0264      	lsls	r4, r4, #9
 8000792:	0a64      	lsrs	r4, r4, #9
 8000794:	2c00      	cmp	r4, #0
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0xb6>
 8000798:	e139      	b.n	8000a0e <__aeabi_dadd+0x32a>
 800079a:	0020      	movs	r0, r4
 800079c:	f7ff fe7a 	bl	8000494 <__clzsi2>
 80007a0:	0003      	movs	r3, r0
 80007a2:	3b08      	subs	r3, #8
 80007a4:	2120      	movs	r1, #32
 80007a6:	0028      	movs	r0, r5
 80007a8:	1aca      	subs	r2, r1, r3
 80007aa:	40d0      	lsrs	r0, r2
 80007ac:	409c      	lsls	r4, r3
 80007ae:	0002      	movs	r2, r0
 80007b0:	409d      	lsls	r5, r3
 80007b2:	4322      	orrs	r2, r4
 80007b4:	429f      	cmp	r7, r3
 80007b6:	dd00      	ble.n	80007ba <__aeabi_dadd+0xd6>
 80007b8:	e173      	b.n	8000aa2 <__aeabi_dadd+0x3be>
 80007ba:	1bd8      	subs	r0, r3, r7
 80007bc:	3001      	adds	r0, #1
 80007be:	1a09      	subs	r1, r1, r0
 80007c0:	002c      	movs	r4, r5
 80007c2:	408d      	lsls	r5, r1
 80007c4:	40c4      	lsrs	r4, r0
 80007c6:	1e6b      	subs	r3, r5, #1
 80007c8:	419d      	sbcs	r5, r3
 80007ca:	0013      	movs	r3, r2
 80007cc:	40c2      	lsrs	r2, r0
 80007ce:	408b      	lsls	r3, r1
 80007d0:	4325      	orrs	r5, r4
 80007d2:	2700      	movs	r7, #0
 80007d4:	0014      	movs	r4, r2
 80007d6:	431d      	orrs	r5, r3
 80007d8:	076b      	lsls	r3, r5, #29
 80007da:	d009      	beq.n	80007f0 <__aeabi_dadd+0x10c>
 80007dc:	230f      	movs	r3, #15
 80007de:	402b      	ands	r3, r5
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d005      	beq.n	80007f0 <__aeabi_dadd+0x10c>
 80007e4:	1d2b      	adds	r3, r5, #4
 80007e6:	42ab      	cmp	r3, r5
 80007e8:	41ad      	sbcs	r5, r5
 80007ea:	426d      	negs	r5, r5
 80007ec:	1964      	adds	r4, r4, r5
 80007ee:	001d      	movs	r5, r3
 80007f0:	0223      	lsls	r3, r4, #8
 80007f2:	d400      	bmi.n	80007f6 <__aeabi_dadd+0x112>
 80007f4:	e12d      	b.n	8000a52 <__aeabi_dadd+0x36e>
 80007f6:	4a9d      	ldr	r2, [pc, #628]	@ (8000a6c <__aeabi_dadd+0x388>)
 80007f8:	3701      	adds	r7, #1
 80007fa:	4297      	cmp	r7, r2
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x11c>
 80007fe:	e0d3      	b.n	80009a8 <__aeabi_dadd+0x2c4>
 8000800:	4646      	mov	r6, r8
 8000802:	499b      	ldr	r1, [pc, #620]	@ (8000a70 <__aeabi_dadd+0x38c>)
 8000804:	08ed      	lsrs	r5, r5, #3
 8000806:	4021      	ands	r1, r4
 8000808:	074a      	lsls	r2, r1, #29
 800080a:	432a      	orrs	r2, r5
 800080c:	057c      	lsls	r4, r7, #21
 800080e:	024d      	lsls	r5, r1, #9
 8000810:	0b2d      	lsrs	r5, r5, #12
 8000812:	0d64      	lsrs	r4, r4, #21
 8000814:	0524      	lsls	r4, r4, #20
 8000816:	432c      	orrs	r4, r5
 8000818:	07f6      	lsls	r6, r6, #31
 800081a:	4334      	orrs	r4, r6
 800081c:	0010      	movs	r0, r2
 800081e:	0021      	movs	r1, r4
 8000820:	b003      	add	sp, #12
 8000822:	bcf0      	pop	{r4, r5, r6, r7}
 8000824:	46bb      	mov	fp, r7
 8000826:	46b2      	mov	sl, r6
 8000828:	46a9      	mov	r9, r5
 800082a:	46a0      	mov	r8, r4
 800082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082e:	2a00      	cmp	r2, #0
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x150>
 8000832:	e084      	b.n	800093e <__aeabi_dadd+0x25a>
 8000834:	464a      	mov	r2, r9
 8000836:	1bd2      	subs	r2, r2, r7
 8000838:	2f00      	cmp	r7, #0
 800083a:	d000      	beq.n	800083e <__aeabi_dadd+0x15a>
 800083c:	e16d      	b.n	8000b1a <__aeabi_dadd+0x436>
 800083e:	0025      	movs	r5, r4
 8000840:	4305      	orrs	r5, r0
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x162>
 8000844:	e127      	b.n	8000a96 <__aeabi_dadd+0x3b2>
 8000846:	1e56      	subs	r6, r2, #1
 8000848:	2a01      	cmp	r2, #1
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x16a>
 800084c:	e23b      	b.n	8000cc6 <__aeabi_dadd+0x5e2>
 800084e:	4d87      	ldr	r5, [pc, #540]	@ (8000a6c <__aeabi_dadd+0x388>)
 8000850:	42aa      	cmp	r2, r5
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x172>
 8000854:	e26a      	b.n	8000d2c <__aeabi_dadd+0x648>
 8000856:	2501      	movs	r5, #1
 8000858:	2e38      	cmp	r6, #56	@ 0x38
 800085a:	dc12      	bgt.n	8000882 <__aeabi_dadd+0x19e>
 800085c:	0032      	movs	r2, r6
 800085e:	2a1f      	cmp	r2, #31
 8000860:	dd00      	ble.n	8000864 <__aeabi_dadd+0x180>
 8000862:	e1f8      	b.n	8000c56 <__aeabi_dadd+0x572>
 8000864:	2620      	movs	r6, #32
 8000866:	0025      	movs	r5, r4
 8000868:	1ab6      	subs	r6, r6, r2
 800086a:	0007      	movs	r7, r0
 800086c:	4653      	mov	r3, sl
 800086e:	40b0      	lsls	r0, r6
 8000870:	40d4      	lsrs	r4, r2
 8000872:	40b5      	lsls	r5, r6
 8000874:	40d7      	lsrs	r7, r2
 8000876:	1e46      	subs	r6, r0, #1
 8000878:	41b0      	sbcs	r0, r6
 800087a:	1b1b      	subs	r3, r3, r4
 800087c:	469a      	mov	sl, r3
 800087e:	433d      	orrs	r5, r7
 8000880:	4305      	orrs	r5, r0
 8000882:	4662      	mov	r2, ip
 8000884:	1b55      	subs	r5, r2, r5
 8000886:	45ac      	cmp	ip, r5
 8000888:	4192      	sbcs	r2, r2
 800088a:	4653      	mov	r3, sl
 800088c:	4252      	negs	r2, r2
 800088e:	000e      	movs	r6, r1
 8000890:	464f      	mov	r7, r9
 8000892:	4688      	mov	r8, r1
 8000894:	1a9c      	subs	r4, r3, r2
 8000896:	e778      	b.n	800078a <__aeabi_dadd+0xa6>
 8000898:	2a00      	cmp	r2, #0
 800089a:	dc00      	bgt.n	800089e <__aeabi_dadd+0x1ba>
 800089c:	e08e      	b.n	80009bc <__aeabi_dadd+0x2d8>
 800089e:	4649      	mov	r1, r9
 80008a0:	2900      	cmp	r1, #0
 80008a2:	d175      	bne.n	8000990 <__aeabi_dadd+0x2ac>
 80008a4:	4661      	mov	r1, ip
 80008a6:	4653      	mov	r3, sl
 80008a8:	4319      	orrs	r1, r3
 80008aa:	d100      	bne.n	80008ae <__aeabi_dadd+0x1ca>
 80008ac:	e0f6      	b.n	8000a9c <__aeabi_dadd+0x3b8>
 80008ae:	1e51      	subs	r1, r2, #1
 80008b0:	2a01      	cmp	r2, #1
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dadd+0x1d2>
 80008b4:	e191      	b.n	8000bda <__aeabi_dadd+0x4f6>
 80008b6:	4d6d      	ldr	r5, [pc, #436]	@ (8000a6c <__aeabi_dadd+0x388>)
 80008b8:	42aa      	cmp	r2, r5
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x1da>
 80008bc:	e0dc      	b.n	8000a78 <__aeabi_dadd+0x394>
 80008be:	2501      	movs	r5, #1
 80008c0:	2938      	cmp	r1, #56	@ 0x38
 80008c2:	dc14      	bgt.n	80008ee <__aeabi_dadd+0x20a>
 80008c4:	000a      	movs	r2, r1
 80008c6:	2a1f      	cmp	r2, #31
 80008c8:	dd00      	ble.n	80008cc <__aeabi_dadd+0x1e8>
 80008ca:	e1a2      	b.n	8000c12 <__aeabi_dadd+0x52e>
 80008cc:	2120      	movs	r1, #32
 80008ce:	4653      	mov	r3, sl
 80008d0:	1a89      	subs	r1, r1, r2
 80008d2:	408b      	lsls	r3, r1
 80008d4:	001d      	movs	r5, r3
 80008d6:	4663      	mov	r3, ip
 80008d8:	40d3      	lsrs	r3, r2
 80008da:	431d      	orrs	r5, r3
 80008dc:	4663      	mov	r3, ip
 80008de:	408b      	lsls	r3, r1
 80008e0:	0019      	movs	r1, r3
 80008e2:	1e4b      	subs	r3, r1, #1
 80008e4:	4199      	sbcs	r1, r3
 80008e6:	4653      	mov	r3, sl
 80008e8:	40d3      	lsrs	r3, r2
 80008ea:	430d      	orrs	r5, r1
 80008ec:	18e4      	adds	r4, r4, r3
 80008ee:	182d      	adds	r5, r5, r0
 80008f0:	4285      	cmp	r5, r0
 80008f2:	4180      	sbcs	r0, r0
 80008f4:	4240      	negs	r0, r0
 80008f6:	1824      	adds	r4, r4, r0
 80008f8:	0223      	lsls	r3, r4, #8
 80008fa:	d559      	bpl.n	80009b0 <__aeabi_dadd+0x2cc>
 80008fc:	4b5b      	ldr	r3, [pc, #364]	@ (8000a6c <__aeabi_dadd+0x388>)
 80008fe:	3701      	adds	r7, #1
 8000900:	429f      	cmp	r7, r3
 8000902:	d051      	beq.n	80009a8 <__aeabi_dadd+0x2c4>
 8000904:	2101      	movs	r1, #1
 8000906:	4b5a      	ldr	r3, [pc, #360]	@ (8000a70 <__aeabi_dadd+0x38c>)
 8000908:	086a      	lsrs	r2, r5, #1
 800090a:	401c      	ands	r4, r3
 800090c:	4029      	ands	r1, r5
 800090e:	430a      	orrs	r2, r1
 8000910:	07e5      	lsls	r5, r4, #31
 8000912:	4315      	orrs	r5, r2
 8000914:	0864      	lsrs	r4, r4, #1
 8000916:	e75f      	b.n	80007d8 <__aeabi_dadd+0xf4>
 8000918:	4661      	mov	r1, ip
 800091a:	4653      	mov	r3, sl
 800091c:	4319      	orrs	r1, r3
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x23e>
 8000920:	e0bc      	b.n	8000a9c <__aeabi_dadd+0x3b8>
 8000922:	1e51      	subs	r1, r2, #1
 8000924:	2a01      	cmp	r2, #1
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x246>
 8000928:	e164      	b.n	8000bf4 <__aeabi_dadd+0x510>
 800092a:	4d50      	ldr	r5, [pc, #320]	@ (8000a6c <__aeabi_dadd+0x388>)
 800092c:	42aa      	cmp	r2, r5
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x24e>
 8000930:	e16a      	b.n	8000c08 <__aeabi_dadd+0x524>
 8000932:	2501      	movs	r5, #1
 8000934:	2938      	cmp	r1, #56	@ 0x38
 8000936:	dd00      	ble.n	800093a <__aeabi_dadd+0x256>
 8000938:	e722      	b.n	8000780 <__aeabi_dadd+0x9c>
 800093a:	000a      	movs	r2, r1
 800093c:	e70e      	b.n	800075c <__aeabi_dadd+0x78>
 800093e:	4a4d      	ldr	r2, [pc, #308]	@ (8000a74 <__aeabi_dadd+0x390>)
 8000940:	1c7d      	adds	r5, r7, #1
 8000942:	4215      	tst	r5, r2
 8000944:	d000      	beq.n	8000948 <__aeabi_dadd+0x264>
 8000946:	e0d0      	b.n	8000aea <__aeabi_dadd+0x406>
 8000948:	0025      	movs	r5, r4
 800094a:	4662      	mov	r2, ip
 800094c:	4653      	mov	r3, sl
 800094e:	4305      	orrs	r5, r0
 8000950:	431a      	orrs	r2, r3
 8000952:	2f00      	cmp	r7, #0
 8000954:	d000      	beq.n	8000958 <__aeabi_dadd+0x274>
 8000956:	e137      	b.n	8000bc8 <__aeabi_dadd+0x4e4>
 8000958:	2d00      	cmp	r5, #0
 800095a:	d100      	bne.n	800095e <__aeabi_dadd+0x27a>
 800095c:	e1a8      	b.n	8000cb0 <__aeabi_dadd+0x5cc>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x280>
 8000962:	e16a      	b.n	8000c3a <__aeabi_dadd+0x556>
 8000964:	4663      	mov	r3, ip
 8000966:	1ac5      	subs	r5, r0, r3
 8000968:	4653      	mov	r3, sl
 800096a:	1ae2      	subs	r2, r4, r3
 800096c:	42a8      	cmp	r0, r5
 800096e:	419b      	sbcs	r3, r3
 8000970:	425b      	negs	r3, r3
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	021a      	lsls	r2, r3, #8
 8000976:	d400      	bmi.n	800097a <__aeabi_dadd+0x296>
 8000978:	e203      	b.n	8000d82 <__aeabi_dadd+0x69e>
 800097a:	4663      	mov	r3, ip
 800097c:	1a1d      	subs	r5, r3, r0
 800097e:	45ac      	cmp	ip, r5
 8000980:	4192      	sbcs	r2, r2
 8000982:	4653      	mov	r3, sl
 8000984:	4252      	negs	r2, r2
 8000986:	1b1c      	subs	r4, r3, r4
 8000988:	000e      	movs	r6, r1
 800098a:	4688      	mov	r8, r1
 800098c:	1aa4      	subs	r4, r4, r2
 800098e:	e723      	b.n	80007d8 <__aeabi_dadd+0xf4>
 8000990:	4936      	ldr	r1, [pc, #216]	@ (8000a6c <__aeabi_dadd+0x388>)
 8000992:	428f      	cmp	r7, r1
 8000994:	d070      	beq.n	8000a78 <__aeabi_dadd+0x394>
 8000996:	2501      	movs	r5, #1
 8000998:	2a38      	cmp	r2, #56	@ 0x38
 800099a:	dca8      	bgt.n	80008ee <__aeabi_dadd+0x20a>
 800099c:	2180      	movs	r1, #128	@ 0x80
 800099e:	4653      	mov	r3, sl
 80009a0:	0409      	lsls	r1, r1, #16
 80009a2:	430b      	orrs	r3, r1
 80009a4:	469a      	mov	sl, r3
 80009a6:	e78e      	b.n	80008c6 <__aeabi_dadd+0x1e2>
 80009a8:	003c      	movs	r4, r7
 80009aa:	2500      	movs	r5, #0
 80009ac:	2200      	movs	r2, #0
 80009ae:	e731      	b.n	8000814 <__aeabi_dadd+0x130>
 80009b0:	2307      	movs	r3, #7
 80009b2:	402b      	ands	r3, r5
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d000      	beq.n	80009ba <__aeabi_dadd+0x2d6>
 80009b8:	e710      	b.n	80007dc <__aeabi_dadd+0xf8>
 80009ba:	e093      	b.n	8000ae4 <__aeabi_dadd+0x400>
 80009bc:	2a00      	cmp	r2, #0
 80009be:	d074      	beq.n	8000aaa <__aeabi_dadd+0x3c6>
 80009c0:	464a      	mov	r2, r9
 80009c2:	1bd2      	subs	r2, r2, r7
 80009c4:	2f00      	cmp	r7, #0
 80009c6:	d100      	bne.n	80009ca <__aeabi_dadd+0x2e6>
 80009c8:	e0c7      	b.n	8000b5a <__aeabi_dadd+0x476>
 80009ca:	4928      	ldr	r1, [pc, #160]	@ (8000a6c <__aeabi_dadd+0x388>)
 80009cc:	4589      	cmp	r9, r1
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x2ee>
 80009d0:	e185      	b.n	8000cde <__aeabi_dadd+0x5fa>
 80009d2:	2501      	movs	r5, #1
 80009d4:	2a38      	cmp	r2, #56	@ 0x38
 80009d6:	dc12      	bgt.n	80009fe <__aeabi_dadd+0x31a>
 80009d8:	2180      	movs	r1, #128	@ 0x80
 80009da:	0409      	lsls	r1, r1, #16
 80009dc:	430c      	orrs	r4, r1
 80009de:	2a1f      	cmp	r2, #31
 80009e0:	dd00      	ble.n	80009e4 <__aeabi_dadd+0x300>
 80009e2:	e1ab      	b.n	8000d3c <__aeabi_dadd+0x658>
 80009e4:	2120      	movs	r1, #32
 80009e6:	0025      	movs	r5, r4
 80009e8:	1a89      	subs	r1, r1, r2
 80009ea:	0007      	movs	r7, r0
 80009ec:	4088      	lsls	r0, r1
 80009ee:	408d      	lsls	r5, r1
 80009f0:	40d7      	lsrs	r7, r2
 80009f2:	1e41      	subs	r1, r0, #1
 80009f4:	4188      	sbcs	r0, r1
 80009f6:	40d4      	lsrs	r4, r2
 80009f8:	433d      	orrs	r5, r7
 80009fa:	4305      	orrs	r5, r0
 80009fc:	44a2      	add	sl, r4
 80009fe:	4465      	add	r5, ip
 8000a00:	4565      	cmp	r5, ip
 8000a02:	4192      	sbcs	r2, r2
 8000a04:	4252      	negs	r2, r2
 8000a06:	4452      	add	r2, sl
 8000a08:	0014      	movs	r4, r2
 8000a0a:	464f      	mov	r7, r9
 8000a0c:	e774      	b.n	80008f8 <__aeabi_dadd+0x214>
 8000a0e:	0028      	movs	r0, r5
 8000a10:	f7ff fd40 	bl	8000494 <__clzsi2>
 8000a14:	0003      	movs	r3, r0
 8000a16:	3318      	adds	r3, #24
 8000a18:	2b1f      	cmp	r3, #31
 8000a1a:	dc00      	bgt.n	8000a1e <__aeabi_dadd+0x33a>
 8000a1c:	e6c2      	b.n	80007a4 <__aeabi_dadd+0xc0>
 8000a1e:	002a      	movs	r2, r5
 8000a20:	3808      	subs	r0, #8
 8000a22:	4082      	lsls	r2, r0
 8000a24:	429f      	cmp	r7, r3
 8000a26:	dd00      	ble.n	8000a2a <__aeabi_dadd+0x346>
 8000a28:	e0a9      	b.n	8000b7e <__aeabi_dadd+0x49a>
 8000a2a:	1bdb      	subs	r3, r3, r7
 8000a2c:	1c58      	adds	r0, r3, #1
 8000a2e:	281f      	cmp	r0, #31
 8000a30:	dc00      	bgt.n	8000a34 <__aeabi_dadd+0x350>
 8000a32:	e1ac      	b.n	8000d8e <__aeabi_dadd+0x6aa>
 8000a34:	0015      	movs	r5, r2
 8000a36:	3b1f      	subs	r3, #31
 8000a38:	40dd      	lsrs	r5, r3
 8000a3a:	2820      	cmp	r0, #32
 8000a3c:	d005      	beq.n	8000a4a <__aeabi_dadd+0x366>
 8000a3e:	2340      	movs	r3, #64	@ 0x40
 8000a40:	1a1b      	subs	r3, r3, r0
 8000a42:	409a      	lsls	r2, r3
 8000a44:	1e53      	subs	r3, r2, #1
 8000a46:	419a      	sbcs	r2, r3
 8000a48:	4315      	orrs	r5, r2
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	2700      	movs	r7, #0
 8000a4e:	402b      	ands	r3, r5
 8000a50:	e7b0      	b.n	80009b4 <__aeabi_dadd+0x2d0>
 8000a52:	08ed      	lsrs	r5, r5, #3
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <__aeabi_dadd+0x388>)
 8000a56:	0762      	lsls	r2, r4, #29
 8000a58:	432a      	orrs	r2, r5
 8000a5a:	08e4      	lsrs	r4, r4, #3
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	d00f      	beq.n	8000a80 <__aeabi_dadd+0x39c>
 8000a60:	0324      	lsls	r4, r4, #12
 8000a62:	0b25      	lsrs	r5, r4, #12
 8000a64:	057c      	lsls	r4, r7, #21
 8000a66:	0d64      	lsrs	r4, r4, #21
 8000a68:	e6d4      	b.n	8000814 <__aeabi_dadd+0x130>
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	000007ff 	.word	0x000007ff
 8000a70:	ff7fffff 	.word	0xff7fffff
 8000a74:	000007fe 	.word	0x000007fe
 8000a78:	08c0      	lsrs	r0, r0, #3
 8000a7a:	0762      	lsls	r2, r4, #29
 8000a7c:	4302      	orrs	r2, r0
 8000a7e:	08e4      	lsrs	r4, r4, #3
 8000a80:	0013      	movs	r3, r2
 8000a82:	4323      	orrs	r3, r4
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0x3a4>
 8000a86:	e186      	b.n	8000d96 <__aeabi_dadd+0x6b2>
 8000a88:	2580      	movs	r5, #128	@ 0x80
 8000a8a:	032d      	lsls	r5, r5, #12
 8000a8c:	4325      	orrs	r5, r4
 8000a8e:	032d      	lsls	r5, r5, #12
 8000a90:	4cc3      	ldr	r4, [pc, #780]	@ (8000da0 <__aeabi_dadd+0x6bc>)
 8000a92:	0b2d      	lsrs	r5, r5, #12
 8000a94:	e6be      	b.n	8000814 <__aeabi_dadd+0x130>
 8000a96:	4660      	mov	r0, ip
 8000a98:	4654      	mov	r4, sl
 8000a9a:	000e      	movs	r6, r1
 8000a9c:	0017      	movs	r7, r2
 8000a9e:	08c5      	lsrs	r5, r0, #3
 8000aa0:	e7d8      	b.n	8000a54 <__aeabi_dadd+0x370>
 8000aa2:	4cc0      	ldr	r4, [pc, #768]	@ (8000da4 <__aeabi_dadd+0x6c0>)
 8000aa4:	1aff      	subs	r7, r7, r3
 8000aa6:	4014      	ands	r4, r2
 8000aa8:	e696      	b.n	80007d8 <__aeabi_dadd+0xf4>
 8000aaa:	4abf      	ldr	r2, [pc, #764]	@ (8000da8 <__aeabi_dadd+0x6c4>)
 8000aac:	1c79      	adds	r1, r7, #1
 8000aae:	4211      	tst	r1, r2
 8000ab0:	d16b      	bne.n	8000b8a <__aeabi_dadd+0x4a6>
 8000ab2:	0022      	movs	r2, r4
 8000ab4:	4302      	orrs	r2, r0
 8000ab6:	2f00      	cmp	r7, #0
 8000ab8:	d000      	beq.n	8000abc <__aeabi_dadd+0x3d8>
 8000aba:	e0db      	b.n	8000c74 <__aeabi_dadd+0x590>
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x3de>
 8000ac0:	e12d      	b.n	8000d1e <__aeabi_dadd+0x63a>
 8000ac2:	4662      	mov	r2, ip
 8000ac4:	4653      	mov	r3, sl
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	d100      	bne.n	8000acc <__aeabi_dadd+0x3e8>
 8000aca:	e0b6      	b.n	8000c3a <__aeabi_dadd+0x556>
 8000acc:	4663      	mov	r3, ip
 8000ace:	18c5      	adds	r5, r0, r3
 8000ad0:	4285      	cmp	r5, r0
 8000ad2:	4180      	sbcs	r0, r0
 8000ad4:	4454      	add	r4, sl
 8000ad6:	4240      	negs	r0, r0
 8000ad8:	1824      	adds	r4, r4, r0
 8000ada:	0223      	lsls	r3, r4, #8
 8000adc:	d502      	bpl.n	8000ae4 <__aeabi_dadd+0x400>
 8000ade:	000f      	movs	r7, r1
 8000ae0:	4bb0      	ldr	r3, [pc, #704]	@ (8000da4 <__aeabi_dadd+0x6c0>)
 8000ae2:	401c      	ands	r4, r3
 8000ae4:	003a      	movs	r2, r7
 8000ae6:	0028      	movs	r0, r5
 8000ae8:	e7d8      	b.n	8000a9c <__aeabi_dadd+0x3b8>
 8000aea:	4662      	mov	r2, ip
 8000aec:	1a85      	subs	r5, r0, r2
 8000aee:	42a8      	cmp	r0, r5
 8000af0:	4192      	sbcs	r2, r2
 8000af2:	4653      	mov	r3, sl
 8000af4:	4252      	negs	r2, r2
 8000af6:	4691      	mov	r9, r2
 8000af8:	1ae3      	subs	r3, r4, r3
 8000afa:	001a      	movs	r2, r3
 8000afc:	464b      	mov	r3, r9
 8000afe:	1ad2      	subs	r2, r2, r3
 8000b00:	0013      	movs	r3, r2
 8000b02:	4691      	mov	r9, r2
 8000b04:	021a      	lsls	r2, r3, #8
 8000b06:	d454      	bmi.n	8000bb2 <__aeabi_dadd+0x4ce>
 8000b08:	464a      	mov	r2, r9
 8000b0a:	464c      	mov	r4, r9
 8000b0c:	432a      	orrs	r2, r5
 8000b0e:	d000      	beq.n	8000b12 <__aeabi_dadd+0x42e>
 8000b10:	e640      	b.n	8000794 <__aeabi_dadd+0xb0>
 8000b12:	2600      	movs	r6, #0
 8000b14:	2400      	movs	r4, #0
 8000b16:	2500      	movs	r5, #0
 8000b18:	e67c      	b.n	8000814 <__aeabi_dadd+0x130>
 8000b1a:	4da1      	ldr	r5, [pc, #644]	@ (8000da0 <__aeabi_dadd+0x6bc>)
 8000b1c:	45a9      	cmp	r9, r5
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x43e>
 8000b20:	e090      	b.n	8000c44 <__aeabi_dadd+0x560>
 8000b22:	2501      	movs	r5, #1
 8000b24:	2a38      	cmp	r2, #56	@ 0x38
 8000b26:	dd00      	ble.n	8000b2a <__aeabi_dadd+0x446>
 8000b28:	e6ab      	b.n	8000882 <__aeabi_dadd+0x19e>
 8000b2a:	2580      	movs	r5, #128	@ 0x80
 8000b2c:	042d      	lsls	r5, r5, #16
 8000b2e:	432c      	orrs	r4, r5
 8000b30:	e695      	b.n	800085e <__aeabi_dadd+0x17a>
 8000b32:	0011      	movs	r1, r2
 8000b34:	4655      	mov	r5, sl
 8000b36:	3920      	subs	r1, #32
 8000b38:	40cd      	lsrs	r5, r1
 8000b3a:	46a9      	mov	r9, r5
 8000b3c:	2a20      	cmp	r2, #32
 8000b3e:	d006      	beq.n	8000b4e <__aeabi_dadd+0x46a>
 8000b40:	2140      	movs	r1, #64	@ 0x40
 8000b42:	4653      	mov	r3, sl
 8000b44:	1a8a      	subs	r2, r1, r2
 8000b46:	4093      	lsls	r3, r2
 8000b48:	4662      	mov	r2, ip
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	4665      	mov	r5, ip
 8000b50:	1e6b      	subs	r3, r5, #1
 8000b52:	419d      	sbcs	r5, r3
 8000b54:	464b      	mov	r3, r9
 8000b56:	431d      	orrs	r5, r3
 8000b58:	e612      	b.n	8000780 <__aeabi_dadd+0x9c>
 8000b5a:	0021      	movs	r1, r4
 8000b5c:	4301      	orrs	r1, r0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_dadd+0x47e>
 8000b60:	e0c4      	b.n	8000cec <__aeabi_dadd+0x608>
 8000b62:	1e51      	subs	r1, r2, #1
 8000b64:	2a01      	cmp	r2, #1
 8000b66:	d100      	bne.n	8000b6a <__aeabi_dadd+0x486>
 8000b68:	e0fb      	b.n	8000d62 <__aeabi_dadd+0x67e>
 8000b6a:	4d8d      	ldr	r5, [pc, #564]	@ (8000da0 <__aeabi_dadd+0x6bc>)
 8000b6c:	42aa      	cmp	r2, r5
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x48e>
 8000b70:	e0b5      	b.n	8000cde <__aeabi_dadd+0x5fa>
 8000b72:	2501      	movs	r5, #1
 8000b74:	2938      	cmp	r1, #56	@ 0x38
 8000b76:	dd00      	ble.n	8000b7a <__aeabi_dadd+0x496>
 8000b78:	e741      	b.n	80009fe <__aeabi_dadd+0x31a>
 8000b7a:	000a      	movs	r2, r1
 8000b7c:	e72f      	b.n	80009de <__aeabi_dadd+0x2fa>
 8000b7e:	4c89      	ldr	r4, [pc, #548]	@ (8000da4 <__aeabi_dadd+0x6c0>)
 8000b80:	1aff      	subs	r7, r7, r3
 8000b82:	4014      	ands	r4, r2
 8000b84:	0762      	lsls	r2, r4, #29
 8000b86:	08e4      	lsrs	r4, r4, #3
 8000b88:	e76a      	b.n	8000a60 <__aeabi_dadd+0x37c>
 8000b8a:	4a85      	ldr	r2, [pc, #532]	@ (8000da0 <__aeabi_dadd+0x6bc>)
 8000b8c:	4291      	cmp	r1, r2
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x4ae>
 8000b90:	e0e3      	b.n	8000d5a <__aeabi_dadd+0x676>
 8000b92:	4663      	mov	r3, ip
 8000b94:	18c2      	adds	r2, r0, r3
 8000b96:	4282      	cmp	r2, r0
 8000b98:	4180      	sbcs	r0, r0
 8000b9a:	0023      	movs	r3, r4
 8000b9c:	4240      	negs	r0, r0
 8000b9e:	4453      	add	r3, sl
 8000ba0:	181b      	adds	r3, r3, r0
 8000ba2:	07dd      	lsls	r5, r3, #31
 8000ba4:	085c      	lsrs	r4, r3, #1
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	0852      	lsrs	r2, r2, #1
 8000baa:	4315      	orrs	r5, r2
 8000bac:	000f      	movs	r7, r1
 8000bae:	402b      	ands	r3, r5
 8000bb0:	e700      	b.n	80009b4 <__aeabi_dadd+0x2d0>
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	1a1d      	subs	r5, r3, r0
 8000bb6:	45ac      	cmp	ip, r5
 8000bb8:	4192      	sbcs	r2, r2
 8000bba:	4653      	mov	r3, sl
 8000bbc:	4252      	negs	r2, r2
 8000bbe:	1b1c      	subs	r4, r3, r4
 8000bc0:	000e      	movs	r6, r1
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	1aa4      	subs	r4, r4, r2
 8000bc6:	e5e5      	b.n	8000794 <__aeabi_dadd+0xb0>
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d000      	beq.n	8000bce <__aeabi_dadd+0x4ea>
 8000bcc:	e091      	b.n	8000cf2 <__aeabi_dadd+0x60e>
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d138      	bne.n	8000c44 <__aeabi_dadd+0x560>
 8000bd2:	2480      	movs	r4, #128	@ 0x80
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	0324      	lsls	r4, r4, #12
 8000bd8:	e756      	b.n	8000a88 <__aeabi_dadd+0x3a4>
 8000bda:	4663      	mov	r3, ip
 8000bdc:	18c5      	adds	r5, r0, r3
 8000bde:	4285      	cmp	r5, r0
 8000be0:	4180      	sbcs	r0, r0
 8000be2:	4454      	add	r4, sl
 8000be4:	4240      	negs	r0, r0
 8000be6:	1824      	adds	r4, r4, r0
 8000be8:	2701      	movs	r7, #1
 8000bea:	0223      	lsls	r3, r4, #8
 8000bec:	d400      	bmi.n	8000bf0 <__aeabi_dadd+0x50c>
 8000bee:	e6df      	b.n	80009b0 <__aeabi_dadd+0x2cc>
 8000bf0:	2702      	movs	r7, #2
 8000bf2:	e687      	b.n	8000904 <__aeabi_dadd+0x220>
 8000bf4:	4663      	mov	r3, ip
 8000bf6:	1ac5      	subs	r5, r0, r3
 8000bf8:	42a8      	cmp	r0, r5
 8000bfa:	4180      	sbcs	r0, r0
 8000bfc:	4653      	mov	r3, sl
 8000bfe:	4240      	negs	r0, r0
 8000c00:	1ae4      	subs	r4, r4, r3
 8000c02:	2701      	movs	r7, #1
 8000c04:	1a24      	subs	r4, r4, r0
 8000c06:	e5c0      	b.n	800078a <__aeabi_dadd+0xa6>
 8000c08:	0762      	lsls	r2, r4, #29
 8000c0a:	08c0      	lsrs	r0, r0, #3
 8000c0c:	4302      	orrs	r2, r0
 8000c0e:	08e4      	lsrs	r4, r4, #3
 8000c10:	e736      	b.n	8000a80 <__aeabi_dadd+0x39c>
 8000c12:	0011      	movs	r1, r2
 8000c14:	4653      	mov	r3, sl
 8000c16:	3920      	subs	r1, #32
 8000c18:	40cb      	lsrs	r3, r1
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	2a20      	cmp	r2, #32
 8000c1e:	d006      	beq.n	8000c2e <__aeabi_dadd+0x54a>
 8000c20:	2140      	movs	r1, #64	@ 0x40
 8000c22:	4653      	mov	r3, sl
 8000c24:	1a8a      	subs	r2, r1, r2
 8000c26:	4093      	lsls	r3, r2
 8000c28:	4662      	mov	r2, ip
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	4665      	mov	r5, ip
 8000c30:	1e6b      	subs	r3, r5, #1
 8000c32:	419d      	sbcs	r5, r3
 8000c34:	464b      	mov	r3, r9
 8000c36:	431d      	orrs	r5, r3
 8000c38:	e659      	b.n	80008ee <__aeabi_dadd+0x20a>
 8000c3a:	0762      	lsls	r2, r4, #29
 8000c3c:	08c0      	lsrs	r0, r0, #3
 8000c3e:	4302      	orrs	r2, r0
 8000c40:	08e4      	lsrs	r4, r4, #3
 8000c42:	e70d      	b.n	8000a60 <__aeabi_dadd+0x37c>
 8000c44:	4653      	mov	r3, sl
 8000c46:	075a      	lsls	r2, r3, #29
 8000c48:	4663      	mov	r3, ip
 8000c4a:	08d8      	lsrs	r0, r3, #3
 8000c4c:	4653      	mov	r3, sl
 8000c4e:	000e      	movs	r6, r1
 8000c50:	4302      	orrs	r2, r0
 8000c52:	08dc      	lsrs	r4, r3, #3
 8000c54:	e714      	b.n	8000a80 <__aeabi_dadd+0x39c>
 8000c56:	0015      	movs	r5, r2
 8000c58:	0026      	movs	r6, r4
 8000c5a:	3d20      	subs	r5, #32
 8000c5c:	40ee      	lsrs	r6, r5
 8000c5e:	2a20      	cmp	r2, #32
 8000c60:	d003      	beq.n	8000c6a <__aeabi_dadd+0x586>
 8000c62:	2540      	movs	r5, #64	@ 0x40
 8000c64:	1aaa      	subs	r2, r5, r2
 8000c66:	4094      	lsls	r4, r2
 8000c68:	4320      	orrs	r0, r4
 8000c6a:	1e42      	subs	r2, r0, #1
 8000c6c:	4190      	sbcs	r0, r2
 8000c6e:	0005      	movs	r5, r0
 8000c70:	4335      	orrs	r5, r6
 8000c72:	e606      	b.n	8000882 <__aeabi_dadd+0x19e>
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	d07c      	beq.n	8000d72 <__aeabi_dadd+0x68e>
 8000c78:	4662      	mov	r2, ip
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	08c0      	lsrs	r0, r0, #3
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dadd+0x5a0>
 8000c82:	e6fa      	b.n	8000a7a <__aeabi_dadd+0x396>
 8000c84:	0762      	lsls	r2, r4, #29
 8000c86:	4310      	orrs	r0, r2
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	08e4      	lsrs	r4, r4, #3
 8000c8c:	0312      	lsls	r2, r2, #12
 8000c8e:	4214      	tst	r4, r2
 8000c90:	d008      	beq.n	8000ca4 <__aeabi_dadd+0x5c0>
 8000c92:	08d9      	lsrs	r1, r3, #3
 8000c94:	4211      	tst	r1, r2
 8000c96:	d105      	bne.n	8000ca4 <__aeabi_dadd+0x5c0>
 8000c98:	4663      	mov	r3, ip
 8000c9a:	08d8      	lsrs	r0, r3, #3
 8000c9c:	4653      	mov	r3, sl
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	075b      	lsls	r3, r3, #29
 8000ca2:	4318      	orrs	r0, r3
 8000ca4:	0f42      	lsrs	r2, r0, #29
 8000ca6:	00c0      	lsls	r0, r0, #3
 8000ca8:	08c0      	lsrs	r0, r0, #3
 8000caa:	0752      	lsls	r2, r2, #29
 8000cac:	4302      	orrs	r2, r0
 8000cae:	e6e7      	b.n	8000a80 <__aeabi_dadd+0x39c>
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x5d2>
 8000cb4:	e72d      	b.n	8000b12 <__aeabi_dadd+0x42e>
 8000cb6:	4663      	mov	r3, ip
 8000cb8:	08d8      	lsrs	r0, r3, #3
 8000cba:	4653      	mov	r3, sl
 8000cbc:	075a      	lsls	r2, r3, #29
 8000cbe:	000e      	movs	r6, r1
 8000cc0:	4302      	orrs	r2, r0
 8000cc2:	08dc      	lsrs	r4, r3, #3
 8000cc4:	e6cc      	b.n	8000a60 <__aeabi_dadd+0x37c>
 8000cc6:	4663      	mov	r3, ip
 8000cc8:	1a1d      	subs	r5, r3, r0
 8000cca:	45ac      	cmp	ip, r5
 8000ccc:	4192      	sbcs	r2, r2
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	1b1c      	subs	r4, r3, r4
 8000cd4:	000e      	movs	r6, r1
 8000cd6:	4688      	mov	r8, r1
 8000cd8:	1aa4      	subs	r4, r4, r2
 8000cda:	3701      	adds	r7, #1
 8000cdc:	e555      	b.n	800078a <__aeabi_dadd+0xa6>
 8000cde:	4663      	mov	r3, ip
 8000ce0:	08d9      	lsrs	r1, r3, #3
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	075a      	lsls	r2, r3, #29
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	08dc      	lsrs	r4, r3, #3
 8000cea:	e6c9      	b.n	8000a80 <__aeabi_dadd+0x39c>
 8000cec:	4660      	mov	r0, ip
 8000cee:	4654      	mov	r4, sl
 8000cf0:	e6d4      	b.n	8000a9c <__aeabi_dadd+0x3b8>
 8000cf2:	08c0      	lsrs	r0, r0, #3
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x616>
 8000cf8:	e6bf      	b.n	8000a7a <__aeabi_dadd+0x396>
 8000cfa:	0762      	lsls	r2, r4, #29
 8000cfc:	4310      	orrs	r0, r2
 8000cfe:	2280      	movs	r2, #128	@ 0x80
 8000d00:	08e4      	lsrs	r4, r4, #3
 8000d02:	0312      	lsls	r2, r2, #12
 8000d04:	4214      	tst	r4, r2
 8000d06:	d0cd      	beq.n	8000ca4 <__aeabi_dadd+0x5c0>
 8000d08:	08dd      	lsrs	r5, r3, #3
 8000d0a:	4215      	tst	r5, r2
 8000d0c:	d1ca      	bne.n	8000ca4 <__aeabi_dadd+0x5c0>
 8000d0e:	4663      	mov	r3, ip
 8000d10:	08d8      	lsrs	r0, r3, #3
 8000d12:	4653      	mov	r3, sl
 8000d14:	075b      	lsls	r3, r3, #29
 8000d16:	000e      	movs	r6, r1
 8000d18:	002c      	movs	r4, r5
 8000d1a:	4318      	orrs	r0, r3
 8000d1c:	e7c2      	b.n	8000ca4 <__aeabi_dadd+0x5c0>
 8000d1e:	4663      	mov	r3, ip
 8000d20:	08d9      	lsrs	r1, r3, #3
 8000d22:	4653      	mov	r3, sl
 8000d24:	075a      	lsls	r2, r3, #29
 8000d26:	430a      	orrs	r2, r1
 8000d28:	08dc      	lsrs	r4, r3, #3
 8000d2a:	e699      	b.n	8000a60 <__aeabi_dadd+0x37c>
 8000d2c:	4663      	mov	r3, ip
 8000d2e:	08d8      	lsrs	r0, r3, #3
 8000d30:	4653      	mov	r3, sl
 8000d32:	075a      	lsls	r2, r3, #29
 8000d34:	000e      	movs	r6, r1
 8000d36:	4302      	orrs	r2, r0
 8000d38:	08dc      	lsrs	r4, r3, #3
 8000d3a:	e6a1      	b.n	8000a80 <__aeabi_dadd+0x39c>
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0027      	movs	r7, r4
 8000d40:	3920      	subs	r1, #32
 8000d42:	40cf      	lsrs	r7, r1
 8000d44:	2a20      	cmp	r2, #32
 8000d46:	d003      	beq.n	8000d50 <__aeabi_dadd+0x66c>
 8000d48:	2140      	movs	r1, #64	@ 0x40
 8000d4a:	1a8a      	subs	r2, r1, r2
 8000d4c:	4094      	lsls	r4, r2
 8000d4e:	4320      	orrs	r0, r4
 8000d50:	1e42      	subs	r2, r0, #1
 8000d52:	4190      	sbcs	r0, r2
 8000d54:	0005      	movs	r5, r0
 8000d56:	433d      	orrs	r5, r7
 8000d58:	e651      	b.n	80009fe <__aeabi_dadd+0x31a>
 8000d5a:	000c      	movs	r4, r1
 8000d5c:	2500      	movs	r5, #0
 8000d5e:	2200      	movs	r2, #0
 8000d60:	e558      	b.n	8000814 <__aeabi_dadd+0x130>
 8000d62:	4460      	add	r0, ip
 8000d64:	4560      	cmp	r0, ip
 8000d66:	4192      	sbcs	r2, r2
 8000d68:	4454      	add	r4, sl
 8000d6a:	4252      	negs	r2, r2
 8000d6c:	0005      	movs	r5, r0
 8000d6e:	18a4      	adds	r4, r4, r2
 8000d70:	e73a      	b.n	8000be8 <__aeabi_dadd+0x504>
 8000d72:	4653      	mov	r3, sl
 8000d74:	075a      	lsls	r2, r3, #29
 8000d76:	4663      	mov	r3, ip
 8000d78:	08d9      	lsrs	r1, r3, #3
 8000d7a:	4653      	mov	r3, sl
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	08dc      	lsrs	r4, r3, #3
 8000d80:	e67e      	b.n	8000a80 <__aeabi_dadd+0x39c>
 8000d82:	001a      	movs	r2, r3
 8000d84:	001c      	movs	r4, r3
 8000d86:	432a      	orrs	r2, r5
 8000d88:	d000      	beq.n	8000d8c <__aeabi_dadd+0x6a8>
 8000d8a:	e6ab      	b.n	8000ae4 <__aeabi_dadd+0x400>
 8000d8c:	e6c1      	b.n	8000b12 <__aeabi_dadd+0x42e>
 8000d8e:	2120      	movs	r1, #32
 8000d90:	2500      	movs	r5, #0
 8000d92:	1a09      	subs	r1, r1, r0
 8000d94:	e519      	b.n	80007ca <__aeabi_dadd+0xe6>
 8000d96:	2200      	movs	r2, #0
 8000d98:	2500      	movs	r5, #0
 8000d9a:	4c01      	ldr	r4, [pc, #4]	@ (8000da0 <__aeabi_dadd+0x6bc>)
 8000d9c:	e53a      	b.n	8000814 <__aeabi_dadd+0x130>
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	000007ff 	.word	0x000007ff
 8000da4:	ff7fffff 	.word	0xff7fffff
 8000da8:	000007fe 	.word	0x000007fe

08000dac <__aeabi_ddiv>:
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	46de      	mov	lr, fp
 8000db0:	4645      	mov	r5, r8
 8000db2:	4657      	mov	r7, sl
 8000db4:	464e      	mov	r6, r9
 8000db6:	b5e0      	push	{r5, r6, r7, lr}
 8000db8:	b087      	sub	sp, #28
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	030b      	lsls	r3, r1, #12
 8000dc0:	0b1b      	lsrs	r3, r3, #12
 8000dc2:	469b      	mov	fp, r3
 8000dc4:	0fca      	lsrs	r2, r1, #31
 8000dc6:	004b      	lsls	r3, r1, #1
 8000dc8:	0004      	movs	r4, r0
 8000dca:	4680      	mov	r8, r0
 8000dcc:	0d5b      	lsrs	r3, r3, #21
 8000dce:	9202      	str	r2, [sp, #8]
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_ddiv+0x28>
 8000dd2:	e16a      	b.n	80010aa <__aeabi_ddiv+0x2fe>
 8000dd4:	4ad4      	ldr	r2, [pc, #848]	@ (8001128 <__aeabi_ddiv+0x37c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_ddiv+0x30>
 8000dda:	e18c      	b.n	80010f6 <__aeabi_ddiv+0x34a>
 8000ddc:	4659      	mov	r1, fp
 8000dde:	0f42      	lsrs	r2, r0, #29
 8000de0:	00c9      	lsls	r1, r1, #3
 8000de2:	430a      	orrs	r2, r1
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	0409      	lsls	r1, r1, #16
 8000de8:	4311      	orrs	r1, r2
 8000dea:	00c2      	lsls	r2, r0, #3
 8000dec:	4690      	mov	r8, r2
 8000dee:	4acf      	ldr	r2, [pc, #828]	@ (800112c <__aeabi_ddiv+0x380>)
 8000df0:	4689      	mov	r9, r1
 8000df2:	4692      	mov	sl, r2
 8000df4:	449a      	add	sl, r3
 8000df6:	2300      	movs	r3, #0
 8000df8:	2400      	movs	r4, #0
 8000dfa:	9303      	str	r3, [sp, #12]
 8000dfc:	9e00      	ldr	r6, [sp, #0]
 8000dfe:	9f01      	ldr	r7, [sp, #4]
 8000e00:	033b      	lsls	r3, r7, #12
 8000e02:	0b1b      	lsrs	r3, r3, #12
 8000e04:	469b      	mov	fp, r3
 8000e06:	007b      	lsls	r3, r7, #1
 8000e08:	0030      	movs	r0, r6
 8000e0a:	0d5b      	lsrs	r3, r3, #21
 8000e0c:	0ffd      	lsrs	r5, r7, #31
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d100      	bne.n	8000e14 <__aeabi_ddiv+0x68>
 8000e12:	e128      	b.n	8001066 <__aeabi_ddiv+0x2ba>
 8000e14:	4ac4      	ldr	r2, [pc, #784]	@ (8001128 <__aeabi_ddiv+0x37c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d100      	bne.n	8000e1c <__aeabi_ddiv+0x70>
 8000e1a:	e177      	b.n	800110c <__aeabi_ddiv+0x360>
 8000e1c:	4659      	mov	r1, fp
 8000e1e:	0f72      	lsrs	r2, r6, #29
 8000e20:	00c9      	lsls	r1, r1, #3
 8000e22:	430a      	orrs	r2, r1
 8000e24:	2180      	movs	r1, #128	@ 0x80
 8000e26:	0409      	lsls	r1, r1, #16
 8000e28:	4311      	orrs	r1, r2
 8000e2a:	468b      	mov	fp, r1
 8000e2c:	49bf      	ldr	r1, [pc, #764]	@ (800112c <__aeabi_ddiv+0x380>)
 8000e2e:	00f2      	lsls	r2, r6, #3
 8000e30:	468c      	mov	ip, r1
 8000e32:	4651      	mov	r1, sl
 8000e34:	4463      	add	r3, ip
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	469a      	mov	sl, r3
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9e02      	ldr	r6, [sp, #8]
 8000e3e:	406e      	eors	r6, r5
 8000e40:	2c0f      	cmp	r4, #15
 8000e42:	d827      	bhi.n	8000e94 <__aeabi_ddiv+0xe8>
 8000e44:	49ba      	ldr	r1, [pc, #744]	@ (8001130 <__aeabi_ddiv+0x384>)
 8000e46:	00a4      	lsls	r4, r4, #2
 8000e48:	5909      	ldr	r1, [r1, r4]
 8000e4a:	468f      	mov	pc, r1
 8000e4c:	46cb      	mov	fp, r9
 8000e4e:	4642      	mov	r2, r8
 8000e50:	9e02      	ldr	r6, [sp, #8]
 8000e52:	9b03      	ldr	r3, [sp, #12]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d016      	beq.n	8000e86 <__aeabi_ddiv+0xda>
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_ddiv+0xb2>
 8000e5c:	e2a6      	b.n	80013ac <__aeabi_ddiv+0x600>
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d000      	beq.n	8000e64 <__aeabi_ddiv+0xb8>
 8000e62:	e0df      	b.n	8001024 <__aeabi_ddiv+0x278>
 8000e64:	2200      	movs	r2, #0
 8000e66:	2300      	movs	r3, #0
 8000e68:	2400      	movs	r4, #0
 8000e6a:	4690      	mov	r8, r2
 8000e6c:	051b      	lsls	r3, r3, #20
 8000e6e:	4323      	orrs	r3, r4
 8000e70:	07f6      	lsls	r6, r6, #31
 8000e72:	4333      	orrs	r3, r6
 8000e74:	4640      	mov	r0, r8
 8000e76:	0019      	movs	r1, r3
 8000e78:	b007      	add	sp, #28
 8000e7a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e7c:	46bb      	mov	fp, r7
 8000e7e:	46b2      	mov	sl, r6
 8000e80:	46a9      	mov	r9, r5
 8000e82:	46a0      	mov	r8, r4
 8000e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e86:	2200      	movs	r2, #0
 8000e88:	2400      	movs	r4, #0
 8000e8a:	4690      	mov	r8, r2
 8000e8c:	4ba6      	ldr	r3, [pc, #664]	@ (8001128 <__aeabi_ddiv+0x37c>)
 8000e8e:	e7ed      	b.n	8000e6c <__aeabi_ddiv+0xc0>
 8000e90:	002e      	movs	r6, r5
 8000e92:	e7df      	b.n	8000e54 <__aeabi_ddiv+0xa8>
 8000e94:	45cb      	cmp	fp, r9
 8000e96:	d200      	bcs.n	8000e9a <__aeabi_ddiv+0xee>
 8000e98:	e1d4      	b.n	8001244 <__aeabi_ddiv+0x498>
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0xf2>
 8000e9c:	e1cf      	b.n	800123e <__aeabi_ddiv+0x492>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	425b      	negs	r3, r3
 8000ea2:	469c      	mov	ip, r3
 8000ea4:	4644      	mov	r4, r8
 8000ea6:	4648      	mov	r0, r9
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	44e2      	add	sl, ip
 8000eac:	465b      	mov	r3, fp
 8000eae:	0e15      	lsrs	r5, r2, #24
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	431d      	orrs	r5, r3
 8000eb4:	0c19      	lsrs	r1, r3, #16
 8000eb6:	042b      	lsls	r3, r5, #16
 8000eb8:	0212      	lsls	r2, r2, #8
 8000eba:	9500      	str	r5, [sp, #0]
 8000ebc:	0c1d      	lsrs	r5, r3, #16
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	9102      	str	r1, [sp, #8]
 8000ec2:	9503      	str	r5, [sp, #12]
 8000ec4:	f7ff f9b8 	bl	8000238 <__aeabi_uidivmod>
 8000ec8:	0002      	movs	r2, r0
 8000eca:	436a      	muls	r2, r5
 8000ecc:	040b      	lsls	r3, r1, #16
 8000ece:	0c21      	lsrs	r1, r4, #16
 8000ed0:	4680      	mov	r8, r0
 8000ed2:	4319      	orrs	r1, r3
 8000ed4:	428a      	cmp	r2, r1
 8000ed6:	d909      	bls.n	8000eec <__aeabi_ddiv+0x140>
 8000ed8:	9d00      	ldr	r5, [sp, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	46ac      	mov	ip, r5
 8000ede:	425b      	negs	r3, r3
 8000ee0:	4461      	add	r1, ip
 8000ee2:	469c      	mov	ip, r3
 8000ee4:	44e0      	add	r8, ip
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	d800      	bhi.n	8000eec <__aeabi_ddiv+0x140>
 8000eea:	e1fb      	b.n	80012e4 <__aeabi_ddiv+0x538>
 8000eec:	1a88      	subs	r0, r1, r2
 8000eee:	9902      	ldr	r1, [sp, #8]
 8000ef0:	f7ff f9a2 	bl	8000238 <__aeabi_uidivmod>
 8000ef4:	9a03      	ldr	r2, [sp, #12]
 8000ef6:	0424      	lsls	r4, r4, #16
 8000ef8:	4342      	muls	r2, r0
 8000efa:	0409      	lsls	r1, r1, #16
 8000efc:	0c24      	lsrs	r4, r4, #16
 8000efe:	0003      	movs	r3, r0
 8000f00:	430c      	orrs	r4, r1
 8000f02:	42a2      	cmp	r2, r4
 8000f04:	d906      	bls.n	8000f14 <__aeabi_ddiv+0x168>
 8000f06:	9900      	ldr	r1, [sp, #0]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	468c      	mov	ip, r1
 8000f0c:	4464      	add	r4, ip
 8000f0e:	42a1      	cmp	r1, r4
 8000f10:	d800      	bhi.n	8000f14 <__aeabi_ddiv+0x168>
 8000f12:	e1e1      	b.n	80012d8 <__aeabi_ddiv+0x52c>
 8000f14:	1aa0      	subs	r0, r4, r2
 8000f16:	4642      	mov	r2, r8
 8000f18:	0412      	lsls	r2, r2, #16
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	4693      	mov	fp, r2
 8000f1e:	464b      	mov	r3, r9
 8000f20:	4659      	mov	r1, fp
 8000f22:	0c1b      	lsrs	r3, r3, #16
 8000f24:	001d      	movs	r5, r3
 8000f26:	9304      	str	r3, [sp, #16]
 8000f28:	040b      	lsls	r3, r1, #16
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	0409      	lsls	r1, r1, #16
 8000f2e:	0c09      	lsrs	r1, r1, #16
 8000f30:	000c      	movs	r4, r1
 8000f32:	0c1b      	lsrs	r3, r3, #16
 8000f34:	435c      	muls	r4, r3
 8000f36:	0c12      	lsrs	r2, r2, #16
 8000f38:	436b      	muls	r3, r5
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	4351      	muls	r1, r2
 8000f3e:	436a      	muls	r2, r5
 8000f40:	0c25      	lsrs	r5, r4, #16
 8000f42:	46ac      	mov	ip, r5
 8000f44:	185b      	adds	r3, r3, r1
 8000f46:	4463      	add	r3, ip
 8000f48:	4299      	cmp	r1, r3
 8000f4a:	d903      	bls.n	8000f54 <__aeabi_ddiv+0x1a8>
 8000f4c:	2180      	movs	r1, #128	@ 0x80
 8000f4e:	0249      	lsls	r1, r1, #9
 8000f50:	468c      	mov	ip, r1
 8000f52:	4462      	add	r2, ip
 8000f54:	0c19      	lsrs	r1, r3, #16
 8000f56:	0424      	lsls	r4, r4, #16
 8000f58:	041b      	lsls	r3, r3, #16
 8000f5a:	0c24      	lsrs	r4, r4, #16
 8000f5c:	188a      	adds	r2, r1, r2
 8000f5e:	191c      	adds	r4, r3, r4
 8000f60:	4290      	cmp	r0, r2
 8000f62:	d302      	bcc.n	8000f6a <__aeabi_ddiv+0x1be>
 8000f64:	d116      	bne.n	8000f94 <__aeabi_ddiv+0x1e8>
 8000f66:	42a7      	cmp	r7, r4
 8000f68:	d214      	bcs.n	8000f94 <__aeabi_ddiv+0x1e8>
 8000f6a:	465b      	mov	r3, fp
 8000f6c:	9d00      	ldr	r5, [sp, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	444f      	add	r7, r9
 8000f72:	9305      	str	r3, [sp, #20]
 8000f74:	454f      	cmp	r7, r9
 8000f76:	419b      	sbcs	r3, r3
 8000f78:	46ac      	mov	ip, r5
 8000f7a:	425b      	negs	r3, r3
 8000f7c:	4463      	add	r3, ip
 8000f7e:	18c0      	adds	r0, r0, r3
 8000f80:	4285      	cmp	r5, r0
 8000f82:	d300      	bcc.n	8000f86 <__aeabi_ddiv+0x1da>
 8000f84:	e1a1      	b.n	80012ca <__aeabi_ddiv+0x51e>
 8000f86:	4282      	cmp	r2, r0
 8000f88:	d900      	bls.n	8000f8c <__aeabi_ddiv+0x1e0>
 8000f8a:	e1f6      	b.n	800137a <__aeabi_ddiv+0x5ce>
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_ddiv+0x1e4>
 8000f8e:	e1f1      	b.n	8001374 <__aeabi_ddiv+0x5c8>
 8000f90:	9b05      	ldr	r3, [sp, #20]
 8000f92:	469b      	mov	fp, r3
 8000f94:	1b3c      	subs	r4, r7, r4
 8000f96:	42a7      	cmp	r7, r4
 8000f98:	41bf      	sbcs	r7, r7
 8000f9a:	9d00      	ldr	r5, [sp, #0]
 8000f9c:	1a80      	subs	r0, r0, r2
 8000f9e:	427f      	negs	r7, r7
 8000fa0:	1bc0      	subs	r0, r0, r7
 8000fa2:	4285      	cmp	r5, r0
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_ddiv+0x1fc>
 8000fa6:	e1d0      	b.n	800134a <__aeabi_ddiv+0x59e>
 8000fa8:	9902      	ldr	r1, [sp, #8]
 8000faa:	f7ff f945 	bl	8000238 <__aeabi_uidivmod>
 8000fae:	9a03      	ldr	r2, [sp, #12]
 8000fb0:	040b      	lsls	r3, r1, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0c21      	lsrs	r1, r4, #16
 8000fb6:	0007      	movs	r7, r0
 8000fb8:	4319      	orrs	r1, r3
 8000fba:	428a      	cmp	r2, r1
 8000fbc:	d900      	bls.n	8000fc0 <__aeabi_ddiv+0x214>
 8000fbe:	e178      	b.n	80012b2 <__aeabi_ddiv+0x506>
 8000fc0:	1a88      	subs	r0, r1, r2
 8000fc2:	9902      	ldr	r1, [sp, #8]
 8000fc4:	f7ff f938 	bl	8000238 <__aeabi_uidivmod>
 8000fc8:	9a03      	ldr	r2, [sp, #12]
 8000fca:	0424      	lsls	r4, r4, #16
 8000fcc:	4342      	muls	r2, r0
 8000fce:	0409      	lsls	r1, r1, #16
 8000fd0:	0c24      	lsrs	r4, r4, #16
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	430c      	orrs	r4, r1
 8000fd6:	42a2      	cmp	r2, r4
 8000fd8:	d900      	bls.n	8000fdc <__aeabi_ddiv+0x230>
 8000fda:	e15d      	b.n	8001298 <__aeabi_ddiv+0x4ec>
 8000fdc:	4641      	mov	r1, r8
 8000fde:	1aa4      	subs	r4, r4, r2
 8000fe0:	043a      	lsls	r2, r7, #16
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	9d04      	ldr	r5, [sp, #16]
 8000fe6:	0413      	lsls	r3, r2, #16
 8000fe8:	0c1b      	lsrs	r3, r3, #16
 8000fea:	4359      	muls	r1, r3
 8000fec:	4647      	mov	r7, r8
 8000fee:	436b      	muls	r3, r5
 8000ff0:	469c      	mov	ip, r3
 8000ff2:	0c10      	lsrs	r0, r2, #16
 8000ff4:	4347      	muls	r7, r0
 8000ff6:	0c0b      	lsrs	r3, r1, #16
 8000ff8:	44bc      	add	ip, r7
 8000ffa:	4463      	add	r3, ip
 8000ffc:	4368      	muls	r0, r5
 8000ffe:	429f      	cmp	r7, r3
 8001000:	d903      	bls.n	800100a <__aeabi_ddiv+0x25e>
 8001002:	2580      	movs	r5, #128	@ 0x80
 8001004:	026d      	lsls	r5, r5, #9
 8001006:	46ac      	mov	ip, r5
 8001008:	4460      	add	r0, ip
 800100a:	0c1f      	lsrs	r7, r3, #16
 800100c:	0409      	lsls	r1, r1, #16
 800100e:	041b      	lsls	r3, r3, #16
 8001010:	0c09      	lsrs	r1, r1, #16
 8001012:	183f      	adds	r7, r7, r0
 8001014:	185b      	adds	r3, r3, r1
 8001016:	42bc      	cmp	r4, r7
 8001018:	d200      	bcs.n	800101c <__aeabi_ddiv+0x270>
 800101a:	e102      	b.n	8001222 <__aeabi_ddiv+0x476>
 800101c:	d100      	bne.n	8001020 <__aeabi_ddiv+0x274>
 800101e:	e0fd      	b.n	800121c <__aeabi_ddiv+0x470>
 8001020:	2301      	movs	r3, #1
 8001022:	431a      	orrs	r2, r3
 8001024:	4b43      	ldr	r3, [pc, #268]	@ (8001134 <__aeabi_ddiv+0x388>)
 8001026:	4453      	add	r3, sl
 8001028:	2b00      	cmp	r3, #0
 800102a:	dc00      	bgt.n	800102e <__aeabi_ddiv+0x282>
 800102c:	e0ae      	b.n	800118c <__aeabi_ddiv+0x3e0>
 800102e:	0751      	lsls	r1, r2, #29
 8001030:	d000      	beq.n	8001034 <__aeabi_ddiv+0x288>
 8001032:	e198      	b.n	8001366 <__aeabi_ddiv+0x5ba>
 8001034:	4659      	mov	r1, fp
 8001036:	01c9      	lsls	r1, r1, #7
 8001038:	d506      	bpl.n	8001048 <__aeabi_ddiv+0x29c>
 800103a:	4659      	mov	r1, fp
 800103c:	4b3e      	ldr	r3, [pc, #248]	@ (8001138 <__aeabi_ddiv+0x38c>)
 800103e:	4019      	ands	r1, r3
 8001040:	2380      	movs	r3, #128	@ 0x80
 8001042:	468b      	mov	fp, r1
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4453      	add	r3, sl
 8001048:	493c      	ldr	r1, [pc, #240]	@ (800113c <__aeabi_ddiv+0x390>)
 800104a:	428b      	cmp	r3, r1
 800104c:	dd00      	ble.n	8001050 <__aeabi_ddiv+0x2a4>
 800104e:	e71a      	b.n	8000e86 <__aeabi_ddiv+0xda>
 8001050:	4659      	mov	r1, fp
 8001052:	08d2      	lsrs	r2, r2, #3
 8001054:	0749      	lsls	r1, r1, #29
 8001056:	4311      	orrs	r1, r2
 8001058:	465a      	mov	r2, fp
 800105a:	055b      	lsls	r3, r3, #21
 800105c:	0254      	lsls	r4, r2, #9
 800105e:	4688      	mov	r8, r1
 8001060:	0b24      	lsrs	r4, r4, #12
 8001062:	0d5b      	lsrs	r3, r3, #21
 8001064:	e702      	b.n	8000e6c <__aeabi_ddiv+0xc0>
 8001066:	465a      	mov	r2, fp
 8001068:	9b00      	ldr	r3, [sp, #0]
 800106a:	431a      	orrs	r2, r3
 800106c:	d100      	bne.n	8001070 <__aeabi_ddiv+0x2c4>
 800106e:	e07e      	b.n	800116e <__aeabi_ddiv+0x3c2>
 8001070:	465b      	mov	r3, fp
 8001072:	2b00      	cmp	r3, #0
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x2cc>
 8001076:	e100      	b.n	800127a <__aeabi_ddiv+0x4ce>
 8001078:	4658      	mov	r0, fp
 800107a:	f7ff fa0b 	bl	8000494 <__clzsi2>
 800107e:	0002      	movs	r2, r0
 8001080:	0003      	movs	r3, r0
 8001082:	3a0b      	subs	r2, #11
 8001084:	271d      	movs	r7, #29
 8001086:	9e00      	ldr	r6, [sp, #0]
 8001088:	1aba      	subs	r2, r7, r2
 800108a:	0019      	movs	r1, r3
 800108c:	4658      	mov	r0, fp
 800108e:	40d6      	lsrs	r6, r2
 8001090:	3908      	subs	r1, #8
 8001092:	4088      	lsls	r0, r1
 8001094:	0032      	movs	r2, r6
 8001096:	4302      	orrs	r2, r0
 8001098:	4693      	mov	fp, r2
 800109a:	9a00      	ldr	r2, [sp, #0]
 800109c:	408a      	lsls	r2, r1
 800109e:	4928      	ldr	r1, [pc, #160]	@ (8001140 <__aeabi_ddiv+0x394>)
 80010a0:	4453      	add	r3, sl
 80010a2:	468a      	mov	sl, r1
 80010a4:	449a      	add	sl, r3
 80010a6:	2300      	movs	r3, #0
 80010a8:	e6c8      	b.n	8000e3c <__aeabi_ddiv+0x90>
 80010aa:	465b      	mov	r3, fp
 80010ac:	4303      	orrs	r3, r0
 80010ae:	4699      	mov	r9, r3
 80010b0:	d056      	beq.n	8001160 <__aeabi_ddiv+0x3b4>
 80010b2:	465b      	mov	r3, fp
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0x30e>
 80010b8:	e0cd      	b.n	8001256 <__aeabi_ddiv+0x4aa>
 80010ba:	4658      	mov	r0, fp
 80010bc:	f7ff f9ea 	bl	8000494 <__clzsi2>
 80010c0:	230b      	movs	r3, #11
 80010c2:	425b      	negs	r3, r3
 80010c4:	469c      	mov	ip, r3
 80010c6:	0002      	movs	r2, r0
 80010c8:	4484      	add	ip, r0
 80010ca:	4666      	mov	r6, ip
 80010cc:	231d      	movs	r3, #29
 80010ce:	1b9b      	subs	r3, r3, r6
 80010d0:	0026      	movs	r6, r4
 80010d2:	0011      	movs	r1, r2
 80010d4:	4658      	mov	r0, fp
 80010d6:	40de      	lsrs	r6, r3
 80010d8:	3908      	subs	r1, #8
 80010da:	4088      	lsls	r0, r1
 80010dc:	0033      	movs	r3, r6
 80010de:	4303      	orrs	r3, r0
 80010e0:	4699      	mov	r9, r3
 80010e2:	0023      	movs	r3, r4
 80010e4:	408b      	lsls	r3, r1
 80010e6:	4698      	mov	r8, r3
 80010e8:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <__aeabi_ddiv+0x398>)
 80010ea:	2400      	movs	r4, #0
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	469a      	mov	sl, r3
 80010f0:	2300      	movs	r3, #0
 80010f2:	9303      	str	r3, [sp, #12]
 80010f4:	e682      	b.n	8000dfc <__aeabi_ddiv+0x50>
 80010f6:	465a      	mov	r2, fp
 80010f8:	4302      	orrs	r2, r0
 80010fa:	4691      	mov	r9, r2
 80010fc:	d12a      	bne.n	8001154 <__aeabi_ddiv+0x3a8>
 80010fe:	2200      	movs	r2, #0
 8001100:	469a      	mov	sl, r3
 8001102:	2302      	movs	r3, #2
 8001104:	4690      	mov	r8, r2
 8001106:	2408      	movs	r4, #8
 8001108:	9303      	str	r3, [sp, #12]
 800110a:	e677      	b.n	8000dfc <__aeabi_ddiv+0x50>
 800110c:	465a      	mov	r2, fp
 800110e:	9b00      	ldr	r3, [sp, #0]
 8001110:	431a      	orrs	r2, r3
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <__aeabi_ddiv+0x39c>)
 8001114:	469c      	mov	ip, r3
 8001116:	44e2      	add	sl, ip
 8001118:	2a00      	cmp	r2, #0
 800111a:	d117      	bne.n	800114c <__aeabi_ddiv+0x3a0>
 800111c:	2302      	movs	r3, #2
 800111e:	431c      	orrs	r4, r3
 8001120:	2300      	movs	r3, #0
 8001122:	469b      	mov	fp, r3
 8001124:	3302      	adds	r3, #2
 8001126:	e689      	b.n	8000e3c <__aeabi_ddiv+0x90>
 8001128:	000007ff 	.word	0x000007ff
 800112c:	fffffc01 	.word	0xfffffc01
 8001130:	0800d750 	.word	0x0800d750
 8001134:	000003ff 	.word	0x000003ff
 8001138:	feffffff 	.word	0xfeffffff
 800113c:	000007fe 	.word	0x000007fe
 8001140:	000003f3 	.word	0x000003f3
 8001144:	fffffc0d 	.word	0xfffffc0d
 8001148:	fffff801 	.word	0xfffff801
 800114c:	2303      	movs	r3, #3
 800114e:	0032      	movs	r2, r6
 8001150:	431c      	orrs	r4, r3
 8001152:	e673      	b.n	8000e3c <__aeabi_ddiv+0x90>
 8001154:	469a      	mov	sl, r3
 8001156:	2303      	movs	r3, #3
 8001158:	46d9      	mov	r9, fp
 800115a:	240c      	movs	r4, #12
 800115c:	9303      	str	r3, [sp, #12]
 800115e:	e64d      	b.n	8000dfc <__aeabi_ddiv+0x50>
 8001160:	2300      	movs	r3, #0
 8001162:	4698      	mov	r8, r3
 8001164:	469a      	mov	sl, r3
 8001166:	3301      	adds	r3, #1
 8001168:	2404      	movs	r4, #4
 800116a:	9303      	str	r3, [sp, #12]
 800116c:	e646      	b.n	8000dfc <__aeabi_ddiv+0x50>
 800116e:	2301      	movs	r3, #1
 8001170:	431c      	orrs	r4, r3
 8001172:	2300      	movs	r3, #0
 8001174:	469b      	mov	fp, r3
 8001176:	3301      	adds	r3, #1
 8001178:	e660      	b.n	8000e3c <__aeabi_ddiv+0x90>
 800117a:	2300      	movs	r3, #0
 800117c:	2480      	movs	r4, #128	@ 0x80
 800117e:	4698      	mov	r8, r3
 8001180:	2600      	movs	r6, #0
 8001182:	4b92      	ldr	r3, [pc, #584]	@ (80013cc <__aeabi_ddiv+0x620>)
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	e671      	b.n	8000e6c <__aeabi_ddiv+0xc0>
 8001188:	2201      	movs	r2, #1
 800118a:	4252      	negs	r2, r2
 800118c:	2101      	movs	r1, #1
 800118e:	1ac9      	subs	r1, r1, r3
 8001190:	2938      	cmp	r1, #56	@ 0x38
 8001192:	dd00      	ble.n	8001196 <__aeabi_ddiv+0x3ea>
 8001194:	e666      	b.n	8000e64 <__aeabi_ddiv+0xb8>
 8001196:	291f      	cmp	r1, #31
 8001198:	dc00      	bgt.n	800119c <__aeabi_ddiv+0x3f0>
 800119a:	e0ab      	b.n	80012f4 <__aeabi_ddiv+0x548>
 800119c:	201f      	movs	r0, #31
 800119e:	4240      	negs	r0, r0
 80011a0:	1ac3      	subs	r3, r0, r3
 80011a2:	4658      	mov	r0, fp
 80011a4:	40d8      	lsrs	r0, r3
 80011a6:	0003      	movs	r3, r0
 80011a8:	2920      	cmp	r1, #32
 80011aa:	d004      	beq.n	80011b6 <__aeabi_ddiv+0x40a>
 80011ac:	4658      	mov	r0, fp
 80011ae:	4988      	ldr	r1, [pc, #544]	@ (80013d0 <__aeabi_ddiv+0x624>)
 80011b0:	4451      	add	r1, sl
 80011b2:	4088      	lsls	r0, r1
 80011b4:	4302      	orrs	r2, r0
 80011b6:	1e51      	subs	r1, r2, #1
 80011b8:	418a      	sbcs	r2, r1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	2307      	movs	r3, #7
 80011be:	0019      	movs	r1, r3
 80011c0:	2400      	movs	r4, #0
 80011c2:	4011      	ands	r1, r2
 80011c4:	4213      	tst	r3, r2
 80011c6:	d00c      	beq.n	80011e2 <__aeabi_ddiv+0x436>
 80011c8:	230f      	movs	r3, #15
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d100      	bne.n	80011d2 <__aeabi_ddiv+0x426>
 80011d0:	e0f9      	b.n	80013c6 <__aeabi_ddiv+0x61a>
 80011d2:	1d11      	adds	r1, r2, #4
 80011d4:	4291      	cmp	r1, r2
 80011d6:	419b      	sbcs	r3, r3
 80011d8:	000a      	movs	r2, r1
 80011da:	425b      	negs	r3, r3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	025b      	lsls	r3, r3, #9
 80011e0:	0b1c      	lsrs	r4, r3, #12
 80011e2:	08d2      	lsrs	r2, r2, #3
 80011e4:	430a      	orrs	r2, r1
 80011e6:	4690      	mov	r8, r2
 80011e8:	2300      	movs	r3, #0
 80011ea:	e63f      	b.n	8000e6c <__aeabi_ddiv+0xc0>
 80011ec:	2480      	movs	r4, #128	@ 0x80
 80011ee:	464b      	mov	r3, r9
 80011f0:	0324      	lsls	r4, r4, #12
 80011f2:	4223      	tst	r3, r4
 80011f4:	d009      	beq.n	800120a <__aeabi_ddiv+0x45e>
 80011f6:	465b      	mov	r3, fp
 80011f8:	4223      	tst	r3, r4
 80011fa:	d106      	bne.n	800120a <__aeabi_ddiv+0x45e>
 80011fc:	431c      	orrs	r4, r3
 80011fe:	0324      	lsls	r4, r4, #12
 8001200:	002e      	movs	r6, r5
 8001202:	4690      	mov	r8, r2
 8001204:	4b71      	ldr	r3, [pc, #452]	@ (80013cc <__aeabi_ddiv+0x620>)
 8001206:	0b24      	lsrs	r4, r4, #12
 8001208:	e630      	b.n	8000e6c <__aeabi_ddiv+0xc0>
 800120a:	2480      	movs	r4, #128	@ 0x80
 800120c:	464b      	mov	r3, r9
 800120e:	0324      	lsls	r4, r4, #12
 8001210:	431c      	orrs	r4, r3
 8001212:	0324      	lsls	r4, r4, #12
 8001214:	9e02      	ldr	r6, [sp, #8]
 8001216:	4b6d      	ldr	r3, [pc, #436]	@ (80013cc <__aeabi_ddiv+0x620>)
 8001218:	0b24      	lsrs	r4, r4, #12
 800121a:	e627      	b.n	8000e6c <__aeabi_ddiv+0xc0>
 800121c:	2b00      	cmp	r3, #0
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0x476>
 8001220:	e700      	b.n	8001024 <__aeabi_ddiv+0x278>
 8001222:	9800      	ldr	r0, [sp, #0]
 8001224:	1e51      	subs	r1, r2, #1
 8001226:	4684      	mov	ip, r0
 8001228:	4464      	add	r4, ip
 800122a:	4284      	cmp	r4, r0
 800122c:	d200      	bcs.n	8001230 <__aeabi_ddiv+0x484>
 800122e:	e084      	b.n	800133a <__aeabi_ddiv+0x58e>
 8001230:	42bc      	cmp	r4, r7
 8001232:	d200      	bcs.n	8001236 <__aeabi_ddiv+0x48a>
 8001234:	e0ae      	b.n	8001394 <__aeabi_ddiv+0x5e8>
 8001236:	d100      	bne.n	800123a <__aeabi_ddiv+0x48e>
 8001238:	e0c1      	b.n	80013be <__aeabi_ddiv+0x612>
 800123a:	000a      	movs	r2, r1
 800123c:	e6f0      	b.n	8001020 <__aeabi_ddiv+0x274>
 800123e:	4542      	cmp	r2, r8
 8001240:	d900      	bls.n	8001244 <__aeabi_ddiv+0x498>
 8001242:	e62c      	b.n	8000e9e <__aeabi_ddiv+0xf2>
 8001244:	464b      	mov	r3, r9
 8001246:	07dc      	lsls	r4, r3, #31
 8001248:	0858      	lsrs	r0, r3, #1
 800124a:	4643      	mov	r3, r8
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	431c      	orrs	r4, r3
 8001250:	4643      	mov	r3, r8
 8001252:	07df      	lsls	r7, r3, #31
 8001254:	e62a      	b.n	8000eac <__aeabi_ddiv+0x100>
 8001256:	f7ff f91d 	bl	8000494 <__clzsi2>
 800125a:	2315      	movs	r3, #21
 800125c:	469c      	mov	ip, r3
 800125e:	4484      	add	ip, r0
 8001260:	0002      	movs	r2, r0
 8001262:	4663      	mov	r3, ip
 8001264:	3220      	adds	r2, #32
 8001266:	2b1c      	cmp	r3, #28
 8001268:	dc00      	bgt.n	800126c <__aeabi_ddiv+0x4c0>
 800126a:	e72e      	b.n	80010ca <__aeabi_ddiv+0x31e>
 800126c:	0023      	movs	r3, r4
 800126e:	3808      	subs	r0, #8
 8001270:	4083      	lsls	r3, r0
 8001272:	4699      	mov	r9, r3
 8001274:	2300      	movs	r3, #0
 8001276:	4698      	mov	r8, r3
 8001278:	e736      	b.n	80010e8 <__aeabi_ddiv+0x33c>
 800127a:	f7ff f90b 	bl	8000494 <__clzsi2>
 800127e:	0002      	movs	r2, r0
 8001280:	0003      	movs	r3, r0
 8001282:	3215      	adds	r2, #21
 8001284:	3320      	adds	r3, #32
 8001286:	2a1c      	cmp	r2, #28
 8001288:	dc00      	bgt.n	800128c <__aeabi_ddiv+0x4e0>
 800128a:	e6fb      	b.n	8001084 <__aeabi_ddiv+0x2d8>
 800128c:	9900      	ldr	r1, [sp, #0]
 800128e:	3808      	subs	r0, #8
 8001290:	4081      	lsls	r1, r0
 8001292:	2200      	movs	r2, #0
 8001294:	468b      	mov	fp, r1
 8001296:	e702      	b.n	800109e <__aeabi_ddiv+0x2f2>
 8001298:	9900      	ldr	r1, [sp, #0]
 800129a:	3b01      	subs	r3, #1
 800129c:	468c      	mov	ip, r1
 800129e:	4464      	add	r4, ip
 80012a0:	42a1      	cmp	r1, r4
 80012a2:	d900      	bls.n	80012a6 <__aeabi_ddiv+0x4fa>
 80012a4:	e69a      	b.n	8000fdc <__aeabi_ddiv+0x230>
 80012a6:	42a2      	cmp	r2, r4
 80012a8:	d800      	bhi.n	80012ac <__aeabi_ddiv+0x500>
 80012aa:	e697      	b.n	8000fdc <__aeabi_ddiv+0x230>
 80012ac:	1e83      	subs	r3, r0, #2
 80012ae:	4464      	add	r4, ip
 80012b0:	e694      	b.n	8000fdc <__aeabi_ddiv+0x230>
 80012b2:	46ac      	mov	ip, r5
 80012b4:	4461      	add	r1, ip
 80012b6:	3f01      	subs	r7, #1
 80012b8:	428d      	cmp	r5, r1
 80012ba:	d900      	bls.n	80012be <__aeabi_ddiv+0x512>
 80012bc:	e680      	b.n	8000fc0 <__aeabi_ddiv+0x214>
 80012be:	428a      	cmp	r2, r1
 80012c0:	d800      	bhi.n	80012c4 <__aeabi_ddiv+0x518>
 80012c2:	e67d      	b.n	8000fc0 <__aeabi_ddiv+0x214>
 80012c4:	1e87      	subs	r7, r0, #2
 80012c6:	4461      	add	r1, ip
 80012c8:	e67a      	b.n	8000fc0 <__aeabi_ddiv+0x214>
 80012ca:	4285      	cmp	r5, r0
 80012cc:	d000      	beq.n	80012d0 <__aeabi_ddiv+0x524>
 80012ce:	e65f      	b.n	8000f90 <__aeabi_ddiv+0x1e4>
 80012d0:	45b9      	cmp	r9, r7
 80012d2:	d900      	bls.n	80012d6 <__aeabi_ddiv+0x52a>
 80012d4:	e65c      	b.n	8000f90 <__aeabi_ddiv+0x1e4>
 80012d6:	e656      	b.n	8000f86 <__aeabi_ddiv+0x1da>
 80012d8:	42a2      	cmp	r2, r4
 80012da:	d800      	bhi.n	80012de <__aeabi_ddiv+0x532>
 80012dc:	e61a      	b.n	8000f14 <__aeabi_ddiv+0x168>
 80012de:	1e83      	subs	r3, r0, #2
 80012e0:	4464      	add	r4, ip
 80012e2:	e617      	b.n	8000f14 <__aeabi_ddiv+0x168>
 80012e4:	428a      	cmp	r2, r1
 80012e6:	d800      	bhi.n	80012ea <__aeabi_ddiv+0x53e>
 80012e8:	e600      	b.n	8000eec <__aeabi_ddiv+0x140>
 80012ea:	46ac      	mov	ip, r5
 80012ec:	1e83      	subs	r3, r0, #2
 80012ee:	4698      	mov	r8, r3
 80012f0:	4461      	add	r1, ip
 80012f2:	e5fb      	b.n	8000eec <__aeabi_ddiv+0x140>
 80012f4:	4837      	ldr	r0, [pc, #220]	@ (80013d4 <__aeabi_ddiv+0x628>)
 80012f6:	0014      	movs	r4, r2
 80012f8:	4450      	add	r0, sl
 80012fa:	4082      	lsls	r2, r0
 80012fc:	465b      	mov	r3, fp
 80012fe:	0017      	movs	r7, r2
 8001300:	4083      	lsls	r3, r0
 8001302:	40cc      	lsrs	r4, r1
 8001304:	1e7a      	subs	r2, r7, #1
 8001306:	4197      	sbcs	r7, r2
 8001308:	4323      	orrs	r3, r4
 800130a:	433b      	orrs	r3, r7
 800130c:	001a      	movs	r2, r3
 800130e:	465b      	mov	r3, fp
 8001310:	40cb      	lsrs	r3, r1
 8001312:	0751      	lsls	r1, r2, #29
 8001314:	d009      	beq.n	800132a <__aeabi_ddiv+0x57e>
 8001316:	210f      	movs	r1, #15
 8001318:	4011      	ands	r1, r2
 800131a:	2904      	cmp	r1, #4
 800131c:	d005      	beq.n	800132a <__aeabi_ddiv+0x57e>
 800131e:	1d11      	adds	r1, r2, #4
 8001320:	4291      	cmp	r1, r2
 8001322:	4192      	sbcs	r2, r2
 8001324:	4252      	negs	r2, r2
 8001326:	189b      	adds	r3, r3, r2
 8001328:	000a      	movs	r2, r1
 800132a:	0219      	lsls	r1, r3, #8
 800132c:	d400      	bmi.n	8001330 <__aeabi_ddiv+0x584>
 800132e:	e755      	b.n	80011dc <__aeabi_ddiv+0x430>
 8001330:	2200      	movs	r2, #0
 8001332:	2301      	movs	r3, #1
 8001334:	2400      	movs	r4, #0
 8001336:	4690      	mov	r8, r2
 8001338:	e598      	b.n	8000e6c <__aeabi_ddiv+0xc0>
 800133a:	000a      	movs	r2, r1
 800133c:	42bc      	cmp	r4, r7
 800133e:	d000      	beq.n	8001342 <__aeabi_ddiv+0x596>
 8001340:	e66e      	b.n	8001020 <__aeabi_ddiv+0x274>
 8001342:	454b      	cmp	r3, r9
 8001344:	d000      	beq.n	8001348 <__aeabi_ddiv+0x59c>
 8001346:	e66b      	b.n	8001020 <__aeabi_ddiv+0x274>
 8001348:	e66c      	b.n	8001024 <__aeabi_ddiv+0x278>
 800134a:	4b23      	ldr	r3, [pc, #140]	@ (80013d8 <__aeabi_ddiv+0x62c>)
 800134c:	4a23      	ldr	r2, [pc, #140]	@ (80013dc <__aeabi_ddiv+0x630>)
 800134e:	4453      	add	r3, sl
 8001350:	4592      	cmp	sl, r2
 8001352:	da00      	bge.n	8001356 <__aeabi_ddiv+0x5aa>
 8001354:	e718      	b.n	8001188 <__aeabi_ddiv+0x3dc>
 8001356:	2101      	movs	r1, #1
 8001358:	4249      	negs	r1, r1
 800135a:	1d0a      	adds	r2, r1, #4
 800135c:	428a      	cmp	r2, r1
 800135e:	4189      	sbcs	r1, r1
 8001360:	4249      	negs	r1, r1
 8001362:	448b      	add	fp, r1
 8001364:	e666      	b.n	8001034 <__aeabi_ddiv+0x288>
 8001366:	210f      	movs	r1, #15
 8001368:	4011      	ands	r1, r2
 800136a:	2904      	cmp	r1, #4
 800136c:	d100      	bne.n	8001370 <__aeabi_ddiv+0x5c4>
 800136e:	e661      	b.n	8001034 <__aeabi_ddiv+0x288>
 8001370:	0011      	movs	r1, r2
 8001372:	e7f2      	b.n	800135a <__aeabi_ddiv+0x5ae>
 8001374:	42bc      	cmp	r4, r7
 8001376:	d800      	bhi.n	800137a <__aeabi_ddiv+0x5ce>
 8001378:	e60a      	b.n	8000f90 <__aeabi_ddiv+0x1e4>
 800137a:	2302      	movs	r3, #2
 800137c:	425b      	negs	r3, r3
 800137e:	469c      	mov	ip, r3
 8001380:	9900      	ldr	r1, [sp, #0]
 8001382:	444f      	add	r7, r9
 8001384:	454f      	cmp	r7, r9
 8001386:	419b      	sbcs	r3, r3
 8001388:	44e3      	add	fp, ip
 800138a:	468c      	mov	ip, r1
 800138c:	425b      	negs	r3, r3
 800138e:	4463      	add	r3, ip
 8001390:	18c0      	adds	r0, r0, r3
 8001392:	e5ff      	b.n	8000f94 <__aeabi_ddiv+0x1e8>
 8001394:	4649      	mov	r1, r9
 8001396:	9d00      	ldr	r5, [sp, #0]
 8001398:	0048      	lsls	r0, r1, #1
 800139a:	4548      	cmp	r0, r9
 800139c:	4189      	sbcs	r1, r1
 800139e:	46ac      	mov	ip, r5
 80013a0:	4249      	negs	r1, r1
 80013a2:	4461      	add	r1, ip
 80013a4:	4681      	mov	r9, r0
 80013a6:	3a02      	subs	r2, #2
 80013a8:	1864      	adds	r4, r4, r1
 80013aa:	e7c7      	b.n	800133c <__aeabi_ddiv+0x590>
 80013ac:	2480      	movs	r4, #128	@ 0x80
 80013ae:	465b      	mov	r3, fp
 80013b0:	0324      	lsls	r4, r4, #12
 80013b2:	431c      	orrs	r4, r3
 80013b4:	0324      	lsls	r4, r4, #12
 80013b6:	4690      	mov	r8, r2
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <__aeabi_ddiv+0x620>)
 80013ba:	0b24      	lsrs	r4, r4, #12
 80013bc:	e556      	b.n	8000e6c <__aeabi_ddiv+0xc0>
 80013be:	4599      	cmp	r9, r3
 80013c0:	d3e8      	bcc.n	8001394 <__aeabi_ddiv+0x5e8>
 80013c2:	000a      	movs	r2, r1
 80013c4:	e7bd      	b.n	8001342 <__aeabi_ddiv+0x596>
 80013c6:	2300      	movs	r3, #0
 80013c8:	e708      	b.n	80011dc <__aeabi_ddiv+0x430>
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	000007ff 	.word	0x000007ff
 80013d0:	0000043e 	.word	0x0000043e
 80013d4:	0000041e 	.word	0x0000041e
 80013d8:	000003ff 	.word	0x000003ff
 80013dc:	fffffc02 	.word	0xfffffc02

080013e0 <__eqdf2>:
 80013e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e2:	4657      	mov	r7, sl
 80013e4:	46de      	mov	lr, fp
 80013e6:	464e      	mov	r6, r9
 80013e8:	4645      	mov	r5, r8
 80013ea:	b5e0      	push	{r5, r6, r7, lr}
 80013ec:	000d      	movs	r5, r1
 80013ee:	0004      	movs	r4, r0
 80013f0:	0fe8      	lsrs	r0, r5, #31
 80013f2:	4683      	mov	fp, r0
 80013f4:	0309      	lsls	r1, r1, #12
 80013f6:	0fd8      	lsrs	r0, r3, #31
 80013f8:	0b09      	lsrs	r1, r1, #12
 80013fa:	4682      	mov	sl, r0
 80013fc:	4819      	ldr	r0, [pc, #100]	@ (8001464 <__eqdf2+0x84>)
 80013fe:	468c      	mov	ip, r1
 8001400:	031f      	lsls	r7, r3, #12
 8001402:	0069      	lsls	r1, r5, #1
 8001404:	005e      	lsls	r6, r3, #1
 8001406:	0d49      	lsrs	r1, r1, #21
 8001408:	0b3f      	lsrs	r7, r7, #12
 800140a:	0d76      	lsrs	r6, r6, #21
 800140c:	4281      	cmp	r1, r0
 800140e:	d018      	beq.n	8001442 <__eqdf2+0x62>
 8001410:	4286      	cmp	r6, r0
 8001412:	d00f      	beq.n	8001434 <__eqdf2+0x54>
 8001414:	2001      	movs	r0, #1
 8001416:	42b1      	cmp	r1, r6
 8001418:	d10d      	bne.n	8001436 <__eqdf2+0x56>
 800141a:	45bc      	cmp	ip, r7
 800141c:	d10b      	bne.n	8001436 <__eqdf2+0x56>
 800141e:	4294      	cmp	r4, r2
 8001420:	d109      	bne.n	8001436 <__eqdf2+0x56>
 8001422:	45d3      	cmp	fp, sl
 8001424:	d01c      	beq.n	8001460 <__eqdf2+0x80>
 8001426:	2900      	cmp	r1, #0
 8001428:	d105      	bne.n	8001436 <__eqdf2+0x56>
 800142a:	4660      	mov	r0, ip
 800142c:	4320      	orrs	r0, r4
 800142e:	1e43      	subs	r3, r0, #1
 8001430:	4198      	sbcs	r0, r3
 8001432:	e000      	b.n	8001436 <__eqdf2+0x56>
 8001434:	2001      	movs	r0, #1
 8001436:	bcf0      	pop	{r4, r5, r6, r7}
 8001438:	46bb      	mov	fp, r7
 800143a:	46b2      	mov	sl, r6
 800143c:	46a9      	mov	r9, r5
 800143e:	46a0      	mov	r8, r4
 8001440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001442:	2001      	movs	r0, #1
 8001444:	428e      	cmp	r6, r1
 8001446:	d1f6      	bne.n	8001436 <__eqdf2+0x56>
 8001448:	4661      	mov	r1, ip
 800144a:	4339      	orrs	r1, r7
 800144c:	000f      	movs	r7, r1
 800144e:	4317      	orrs	r7, r2
 8001450:	4327      	orrs	r7, r4
 8001452:	d1f0      	bne.n	8001436 <__eqdf2+0x56>
 8001454:	465b      	mov	r3, fp
 8001456:	4652      	mov	r2, sl
 8001458:	1a98      	subs	r0, r3, r2
 800145a:	1e43      	subs	r3, r0, #1
 800145c:	4198      	sbcs	r0, r3
 800145e:	e7ea      	b.n	8001436 <__eqdf2+0x56>
 8001460:	2000      	movs	r0, #0
 8001462:	e7e8      	b.n	8001436 <__eqdf2+0x56>
 8001464:	000007ff 	.word	0x000007ff

08001468 <__gedf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4657      	mov	r7, sl
 800146c:	464e      	mov	r6, r9
 800146e:	4645      	mov	r5, r8
 8001470:	46de      	mov	lr, fp
 8001472:	b5e0      	push	{r5, r6, r7, lr}
 8001474:	000d      	movs	r5, r1
 8001476:	030f      	lsls	r7, r1, #12
 8001478:	0b39      	lsrs	r1, r7, #12
 800147a:	b083      	sub	sp, #12
 800147c:	0004      	movs	r4, r0
 800147e:	4680      	mov	r8, r0
 8001480:	9101      	str	r1, [sp, #4]
 8001482:	0058      	lsls	r0, r3, #1
 8001484:	0fe9      	lsrs	r1, r5, #31
 8001486:	4f31      	ldr	r7, [pc, #196]	@ (800154c <__gedf2+0xe4>)
 8001488:	0d40      	lsrs	r0, r0, #21
 800148a:	468c      	mov	ip, r1
 800148c:	006e      	lsls	r6, r5, #1
 800148e:	0319      	lsls	r1, r3, #12
 8001490:	4682      	mov	sl, r0
 8001492:	4691      	mov	r9, r2
 8001494:	0d76      	lsrs	r6, r6, #21
 8001496:	0b09      	lsrs	r1, r1, #12
 8001498:	0fd8      	lsrs	r0, r3, #31
 800149a:	42be      	cmp	r6, r7
 800149c:	d01f      	beq.n	80014de <__gedf2+0x76>
 800149e:	45ba      	cmp	sl, r7
 80014a0:	d00f      	beq.n	80014c2 <__gedf2+0x5a>
 80014a2:	2e00      	cmp	r6, #0
 80014a4:	d12f      	bne.n	8001506 <__gedf2+0x9e>
 80014a6:	4655      	mov	r5, sl
 80014a8:	9e01      	ldr	r6, [sp, #4]
 80014aa:	4334      	orrs	r4, r6
 80014ac:	2d00      	cmp	r5, #0
 80014ae:	d127      	bne.n	8001500 <__gedf2+0x98>
 80014b0:	430a      	orrs	r2, r1
 80014b2:	d03a      	beq.n	800152a <__gedf2+0xc2>
 80014b4:	2c00      	cmp	r4, #0
 80014b6:	d145      	bne.n	8001544 <__gedf2+0xdc>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d11a      	bne.n	80014f2 <__gedf2+0x8a>
 80014bc:	2001      	movs	r0, #1
 80014be:	4240      	negs	r0, r0
 80014c0:	e017      	b.n	80014f2 <__gedf2+0x8a>
 80014c2:	4311      	orrs	r1, r2
 80014c4:	d13b      	bne.n	800153e <__gedf2+0xd6>
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d102      	bne.n	80014d0 <__gedf2+0x68>
 80014ca:	9f01      	ldr	r7, [sp, #4]
 80014cc:	4327      	orrs	r7, r4
 80014ce:	d0f3      	beq.n	80014b8 <__gedf2+0x50>
 80014d0:	4584      	cmp	ip, r0
 80014d2:	d109      	bne.n	80014e8 <__gedf2+0x80>
 80014d4:	4663      	mov	r3, ip
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <__gedf2+0x54>
 80014da:	4660      	mov	r0, ip
 80014dc:	e009      	b.n	80014f2 <__gedf2+0x8a>
 80014de:	9f01      	ldr	r7, [sp, #4]
 80014e0:	4327      	orrs	r7, r4
 80014e2:	d12c      	bne.n	800153e <__gedf2+0xd6>
 80014e4:	45b2      	cmp	sl, r6
 80014e6:	d024      	beq.n	8001532 <__gedf2+0xca>
 80014e8:	4663      	mov	r3, ip
 80014ea:	2002      	movs	r0, #2
 80014ec:	3b01      	subs	r3, #1
 80014ee:	4018      	ands	r0, r3
 80014f0:	3801      	subs	r0, #1
 80014f2:	b003      	add	sp, #12
 80014f4:	bcf0      	pop	{r4, r5, r6, r7}
 80014f6:	46bb      	mov	fp, r7
 80014f8:	46b2      	mov	sl, r6
 80014fa:	46a9      	mov	r9, r5
 80014fc:	46a0      	mov	r8, r4
 80014fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001500:	2c00      	cmp	r4, #0
 8001502:	d0d9      	beq.n	80014b8 <__gedf2+0x50>
 8001504:	e7e4      	b.n	80014d0 <__gedf2+0x68>
 8001506:	4654      	mov	r4, sl
 8001508:	2c00      	cmp	r4, #0
 800150a:	d0ed      	beq.n	80014e8 <__gedf2+0x80>
 800150c:	4584      	cmp	ip, r0
 800150e:	d1eb      	bne.n	80014e8 <__gedf2+0x80>
 8001510:	4556      	cmp	r6, sl
 8001512:	dce9      	bgt.n	80014e8 <__gedf2+0x80>
 8001514:	dbde      	blt.n	80014d4 <__gedf2+0x6c>
 8001516:	9b01      	ldr	r3, [sp, #4]
 8001518:	428b      	cmp	r3, r1
 800151a:	d8e5      	bhi.n	80014e8 <__gedf2+0x80>
 800151c:	d1da      	bne.n	80014d4 <__gedf2+0x6c>
 800151e:	45c8      	cmp	r8, r9
 8001520:	d8e2      	bhi.n	80014e8 <__gedf2+0x80>
 8001522:	2000      	movs	r0, #0
 8001524:	45c8      	cmp	r8, r9
 8001526:	d2e4      	bcs.n	80014f2 <__gedf2+0x8a>
 8001528:	e7d4      	b.n	80014d4 <__gedf2+0x6c>
 800152a:	2000      	movs	r0, #0
 800152c:	2c00      	cmp	r4, #0
 800152e:	d0e0      	beq.n	80014f2 <__gedf2+0x8a>
 8001530:	e7da      	b.n	80014e8 <__gedf2+0x80>
 8001532:	4311      	orrs	r1, r2
 8001534:	d103      	bne.n	800153e <__gedf2+0xd6>
 8001536:	4584      	cmp	ip, r0
 8001538:	d1d6      	bne.n	80014e8 <__gedf2+0x80>
 800153a:	2000      	movs	r0, #0
 800153c:	e7d9      	b.n	80014f2 <__gedf2+0x8a>
 800153e:	2002      	movs	r0, #2
 8001540:	4240      	negs	r0, r0
 8001542:	e7d6      	b.n	80014f2 <__gedf2+0x8a>
 8001544:	4584      	cmp	ip, r0
 8001546:	d0e6      	beq.n	8001516 <__gedf2+0xae>
 8001548:	e7ce      	b.n	80014e8 <__gedf2+0x80>
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	000007ff 	.word	0x000007ff

08001550 <__ledf2>:
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	4657      	mov	r7, sl
 8001554:	464e      	mov	r6, r9
 8001556:	4645      	mov	r5, r8
 8001558:	46de      	mov	lr, fp
 800155a:	b5e0      	push	{r5, r6, r7, lr}
 800155c:	000d      	movs	r5, r1
 800155e:	030f      	lsls	r7, r1, #12
 8001560:	0004      	movs	r4, r0
 8001562:	4680      	mov	r8, r0
 8001564:	0fe8      	lsrs	r0, r5, #31
 8001566:	0b39      	lsrs	r1, r7, #12
 8001568:	4684      	mov	ip, r0
 800156a:	b083      	sub	sp, #12
 800156c:	0058      	lsls	r0, r3, #1
 800156e:	4f30      	ldr	r7, [pc, #192]	@ (8001630 <__ledf2+0xe0>)
 8001570:	0d40      	lsrs	r0, r0, #21
 8001572:	9101      	str	r1, [sp, #4]
 8001574:	031e      	lsls	r6, r3, #12
 8001576:	0069      	lsls	r1, r5, #1
 8001578:	4682      	mov	sl, r0
 800157a:	4691      	mov	r9, r2
 800157c:	0d49      	lsrs	r1, r1, #21
 800157e:	0b36      	lsrs	r6, r6, #12
 8001580:	0fd8      	lsrs	r0, r3, #31
 8001582:	42b9      	cmp	r1, r7
 8001584:	d020      	beq.n	80015c8 <__ledf2+0x78>
 8001586:	45ba      	cmp	sl, r7
 8001588:	d00f      	beq.n	80015aa <__ledf2+0x5a>
 800158a:	2900      	cmp	r1, #0
 800158c:	d12b      	bne.n	80015e6 <__ledf2+0x96>
 800158e:	9901      	ldr	r1, [sp, #4]
 8001590:	430c      	orrs	r4, r1
 8001592:	4651      	mov	r1, sl
 8001594:	2900      	cmp	r1, #0
 8001596:	d137      	bne.n	8001608 <__ledf2+0xb8>
 8001598:	4332      	orrs	r2, r6
 800159a:	d038      	beq.n	800160e <__ledf2+0xbe>
 800159c:	2c00      	cmp	r4, #0
 800159e:	d144      	bne.n	800162a <__ledf2+0xda>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d119      	bne.n	80015d8 <__ledf2+0x88>
 80015a4:	2001      	movs	r0, #1
 80015a6:	4240      	negs	r0, r0
 80015a8:	e016      	b.n	80015d8 <__ledf2+0x88>
 80015aa:	4316      	orrs	r6, r2
 80015ac:	d113      	bne.n	80015d6 <__ledf2+0x86>
 80015ae:	2900      	cmp	r1, #0
 80015b0:	d102      	bne.n	80015b8 <__ledf2+0x68>
 80015b2:	9f01      	ldr	r7, [sp, #4]
 80015b4:	4327      	orrs	r7, r4
 80015b6:	d0f3      	beq.n	80015a0 <__ledf2+0x50>
 80015b8:	4584      	cmp	ip, r0
 80015ba:	d020      	beq.n	80015fe <__ledf2+0xae>
 80015bc:	4663      	mov	r3, ip
 80015be:	2002      	movs	r0, #2
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4018      	ands	r0, r3
 80015c4:	3801      	subs	r0, #1
 80015c6:	e007      	b.n	80015d8 <__ledf2+0x88>
 80015c8:	9f01      	ldr	r7, [sp, #4]
 80015ca:	4327      	orrs	r7, r4
 80015cc:	d103      	bne.n	80015d6 <__ledf2+0x86>
 80015ce:	458a      	cmp	sl, r1
 80015d0:	d1f4      	bne.n	80015bc <__ledf2+0x6c>
 80015d2:	4316      	orrs	r6, r2
 80015d4:	d01f      	beq.n	8001616 <__ledf2+0xc6>
 80015d6:	2002      	movs	r0, #2
 80015d8:	b003      	add	sp, #12
 80015da:	bcf0      	pop	{r4, r5, r6, r7}
 80015dc:	46bb      	mov	fp, r7
 80015de:	46b2      	mov	sl, r6
 80015e0:	46a9      	mov	r9, r5
 80015e2:	46a0      	mov	r8, r4
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e6:	4654      	mov	r4, sl
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d0e7      	beq.n	80015bc <__ledf2+0x6c>
 80015ec:	4584      	cmp	ip, r0
 80015ee:	d1e5      	bne.n	80015bc <__ledf2+0x6c>
 80015f0:	4551      	cmp	r1, sl
 80015f2:	dce3      	bgt.n	80015bc <__ledf2+0x6c>
 80015f4:	db03      	blt.n	80015fe <__ledf2+0xae>
 80015f6:	9b01      	ldr	r3, [sp, #4]
 80015f8:	42b3      	cmp	r3, r6
 80015fa:	d8df      	bhi.n	80015bc <__ledf2+0x6c>
 80015fc:	d00f      	beq.n	800161e <__ledf2+0xce>
 80015fe:	4663      	mov	r3, ip
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0cf      	beq.n	80015a4 <__ledf2+0x54>
 8001604:	4660      	mov	r0, ip
 8001606:	e7e7      	b.n	80015d8 <__ledf2+0x88>
 8001608:	2c00      	cmp	r4, #0
 800160a:	d0c9      	beq.n	80015a0 <__ledf2+0x50>
 800160c:	e7d4      	b.n	80015b8 <__ledf2+0x68>
 800160e:	2000      	movs	r0, #0
 8001610:	2c00      	cmp	r4, #0
 8001612:	d0e1      	beq.n	80015d8 <__ledf2+0x88>
 8001614:	e7d2      	b.n	80015bc <__ledf2+0x6c>
 8001616:	4584      	cmp	ip, r0
 8001618:	d1d0      	bne.n	80015bc <__ledf2+0x6c>
 800161a:	2000      	movs	r0, #0
 800161c:	e7dc      	b.n	80015d8 <__ledf2+0x88>
 800161e:	45c8      	cmp	r8, r9
 8001620:	d8cc      	bhi.n	80015bc <__ledf2+0x6c>
 8001622:	2000      	movs	r0, #0
 8001624:	45c8      	cmp	r8, r9
 8001626:	d2d7      	bcs.n	80015d8 <__ledf2+0x88>
 8001628:	e7e9      	b.n	80015fe <__ledf2+0xae>
 800162a:	4584      	cmp	ip, r0
 800162c:	d0e3      	beq.n	80015f6 <__ledf2+0xa6>
 800162e:	e7c5      	b.n	80015bc <__ledf2+0x6c>
 8001630:	000007ff 	.word	0x000007ff

08001634 <__aeabi_dmul>:
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	4657      	mov	r7, sl
 8001638:	46de      	mov	lr, fp
 800163a:	464e      	mov	r6, r9
 800163c:	4645      	mov	r5, r8
 800163e:	b5e0      	push	{r5, r6, r7, lr}
 8001640:	001f      	movs	r7, r3
 8001642:	030b      	lsls	r3, r1, #12
 8001644:	0b1b      	lsrs	r3, r3, #12
 8001646:	0016      	movs	r6, r2
 8001648:	469a      	mov	sl, r3
 800164a:	0fca      	lsrs	r2, r1, #31
 800164c:	004b      	lsls	r3, r1, #1
 800164e:	0004      	movs	r4, r0
 8001650:	4693      	mov	fp, r2
 8001652:	b087      	sub	sp, #28
 8001654:	0d5b      	lsrs	r3, r3, #21
 8001656:	d100      	bne.n	800165a <__aeabi_dmul+0x26>
 8001658:	e0d5      	b.n	8001806 <__aeabi_dmul+0x1d2>
 800165a:	4abb      	ldr	r2, [pc, #748]	@ (8001948 <__aeabi_dmul+0x314>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d100      	bne.n	8001662 <__aeabi_dmul+0x2e>
 8001660:	e0f8      	b.n	8001854 <__aeabi_dmul+0x220>
 8001662:	4651      	mov	r1, sl
 8001664:	0f42      	lsrs	r2, r0, #29
 8001666:	00c9      	lsls	r1, r1, #3
 8001668:	430a      	orrs	r2, r1
 800166a:	2180      	movs	r1, #128	@ 0x80
 800166c:	0409      	lsls	r1, r1, #16
 800166e:	4311      	orrs	r1, r2
 8001670:	00c2      	lsls	r2, r0, #3
 8001672:	4691      	mov	r9, r2
 8001674:	4ab5      	ldr	r2, [pc, #724]	@ (800194c <__aeabi_dmul+0x318>)
 8001676:	468a      	mov	sl, r1
 8001678:	189d      	adds	r5, r3, r2
 800167a:	2300      	movs	r3, #0
 800167c:	4698      	mov	r8, r3
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	033c      	lsls	r4, r7, #12
 8001682:	007b      	lsls	r3, r7, #1
 8001684:	0ffa      	lsrs	r2, r7, #31
 8001686:	0030      	movs	r0, r6
 8001688:	0b24      	lsrs	r4, r4, #12
 800168a:	0d5b      	lsrs	r3, r3, #21
 800168c:	9200      	str	r2, [sp, #0]
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x5e>
 8001690:	e096      	b.n	80017c0 <__aeabi_dmul+0x18c>
 8001692:	4aad      	ldr	r2, [pc, #692]	@ (8001948 <__aeabi_dmul+0x314>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d031      	beq.n	80016fc <__aeabi_dmul+0xc8>
 8001698:	0f72      	lsrs	r2, r6, #29
 800169a:	00e4      	lsls	r4, r4, #3
 800169c:	4322      	orrs	r2, r4
 800169e:	2480      	movs	r4, #128	@ 0x80
 80016a0:	0424      	lsls	r4, r4, #16
 80016a2:	4314      	orrs	r4, r2
 80016a4:	4aa9      	ldr	r2, [pc, #676]	@ (800194c <__aeabi_dmul+0x318>)
 80016a6:	00f0      	lsls	r0, r6, #3
 80016a8:	4694      	mov	ip, r2
 80016aa:	4463      	add	r3, ip
 80016ac:	195b      	adds	r3, r3, r5
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	9201      	str	r2, [sp, #4]
 80016b2:	4642      	mov	r2, r8
 80016b4:	2600      	movs	r6, #0
 80016b6:	2a0a      	cmp	r2, #10
 80016b8:	dc42      	bgt.n	8001740 <__aeabi_dmul+0x10c>
 80016ba:	465a      	mov	r2, fp
 80016bc:	9900      	ldr	r1, [sp, #0]
 80016be:	404a      	eors	r2, r1
 80016c0:	4693      	mov	fp, r2
 80016c2:	4642      	mov	r2, r8
 80016c4:	2a02      	cmp	r2, #2
 80016c6:	dc32      	bgt.n	800172e <__aeabi_dmul+0xfa>
 80016c8:	3a01      	subs	r2, #1
 80016ca:	2a01      	cmp	r2, #1
 80016cc:	d900      	bls.n	80016d0 <__aeabi_dmul+0x9c>
 80016ce:	e149      	b.n	8001964 <__aeabi_dmul+0x330>
 80016d0:	2e02      	cmp	r6, #2
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dmul+0xa2>
 80016d4:	e0ca      	b.n	800186c <__aeabi_dmul+0x238>
 80016d6:	2e01      	cmp	r6, #1
 80016d8:	d13d      	bne.n	8001756 <__aeabi_dmul+0x122>
 80016da:	2300      	movs	r3, #0
 80016dc:	2400      	movs	r4, #0
 80016de:	2200      	movs	r2, #0
 80016e0:	0010      	movs	r0, r2
 80016e2:	465a      	mov	r2, fp
 80016e4:	051b      	lsls	r3, r3, #20
 80016e6:	4323      	orrs	r3, r4
 80016e8:	07d2      	lsls	r2, r2, #31
 80016ea:	4313      	orrs	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	b007      	add	sp, #28
 80016f0:	bcf0      	pop	{r4, r5, r6, r7}
 80016f2:	46bb      	mov	fp, r7
 80016f4:	46b2      	mov	sl, r6
 80016f6:	46a9      	mov	r9, r5
 80016f8:	46a0      	mov	r8, r4
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fc:	4b92      	ldr	r3, [pc, #584]	@ (8001948 <__aeabi_dmul+0x314>)
 80016fe:	4326      	orrs	r6, r4
 8001700:	18eb      	adds	r3, r5, r3
 8001702:	2e00      	cmp	r6, #0
 8001704:	d100      	bne.n	8001708 <__aeabi_dmul+0xd4>
 8001706:	e0bb      	b.n	8001880 <__aeabi_dmul+0x24c>
 8001708:	2203      	movs	r2, #3
 800170a:	4641      	mov	r1, r8
 800170c:	4311      	orrs	r1, r2
 800170e:	465a      	mov	r2, fp
 8001710:	4688      	mov	r8, r1
 8001712:	9900      	ldr	r1, [sp, #0]
 8001714:	404a      	eors	r2, r1
 8001716:	2180      	movs	r1, #128	@ 0x80
 8001718:	0109      	lsls	r1, r1, #4
 800171a:	468c      	mov	ip, r1
 800171c:	0029      	movs	r1, r5
 800171e:	4461      	add	r1, ip
 8001720:	9101      	str	r1, [sp, #4]
 8001722:	4641      	mov	r1, r8
 8001724:	290a      	cmp	r1, #10
 8001726:	dd00      	ble.n	800172a <__aeabi_dmul+0xf6>
 8001728:	e233      	b.n	8001b92 <__aeabi_dmul+0x55e>
 800172a:	4693      	mov	fp, r2
 800172c:	2603      	movs	r6, #3
 800172e:	4642      	mov	r2, r8
 8001730:	2701      	movs	r7, #1
 8001732:	4097      	lsls	r7, r2
 8001734:	21a6      	movs	r1, #166	@ 0xa6
 8001736:	003a      	movs	r2, r7
 8001738:	00c9      	lsls	r1, r1, #3
 800173a:	400a      	ands	r2, r1
 800173c:	420f      	tst	r7, r1
 800173e:	d031      	beq.n	80017a4 <__aeabi_dmul+0x170>
 8001740:	9e02      	ldr	r6, [sp, #8]
 8001742:	2e02      	cmp	r6, #2
 8001744:	d100      	bne.n	8001748 <__aeabi_dmul+0x114>
 8001746:	e235      	b.n	8001bb4 <__aeabi_dmul+0x580>
 8001748:	2e03      	cmp	r6, #3
 800174a:	d100      	bne.n	800174e <__aeabi_dmul+0x11a>
 800174c:	e1d2      	b.n	8001af4 <__aeabi_dmul+0x4c0>
 800174e:	4654      	mov	r4, sl
 8001750:	4648      	mov	r0, r9
 8001752:	2e01      	cmp	r6, #1
 8001754:	d0c1      	beq.n	80016da <__aeabi_dmul+0xa6>
 8001756:	9a01      	ldr	r2, [sp, #4]
 8001758:	4b7d      	ldr	r3, [pc, #500]	@ (8001950 <__aeabi_dmul+0x31c>)
 800175a:	4694      	mov	ip, r2
 800175c:	4463      	add	r3, ip
 800175e:	2b00      	cmp	r3, #0
 8001760:	dc00      	bgt.n	8001764 <__aeabi_dmul+0x130>
 8001762:	e0c0      	b.n	80018e6 <__aeabi_dmul+0x2b2>
 8001764:	0742      	lsls	r2, r0, #29
 8001766:	d009      	beq.n	800177c <__aeabi_dmul+0x148>
 8001768:	220f      	movs	r2, #15
 800176a:	4002      	ands	r2, r0
 800176c:	2a04      	cmp	r2, #4
 800176e:	d005      	beq.n	800177c <__aeabi_dmul+0x148>
 8001770:	1d02      	adds	r2, r0, #4
 8001772:	4282      	cmp	r2, r0
 8001774:	4180      	sbcs	r0, r0
 8001776:	4240      	negs	r0, r0
 8001778:	1824      	adds	r4, r4, r0
 800177a:	0010      	movs	r0, r2
 800177c:	01e2      	lsls	r2, r4, #7
 800177e:	d506      	bpl.n	800178e <__aeabi_dmul+0x15a>
 8001780:	4b74      	ldr	r3, [pc, #464]	@ (8001954 <__aeabi_dmul+0x320>)
 8001782:	9a01      	ldr	r2, [sp, #4]
 8001784:	401c      	ands	r4, r3
 8001786:	2380      	movs	r3, #128	@ 0x80
 8001788:	4694      	mov	ip, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4463      	add	r3, ip
 800178e:	4a72      	ldr	r2, [pc, #456]	@ (8001958 <__aeabi_dmul+0x324>)
 8001790:	4293      	cmp	r3, r2
 8001792:	dc6b      	bgt.n	800186c <__aeabi_dmul+0x238>
 8001794:	0762      	lsls	r2, r4, #29
 8001796:	08c0      	lsrs	r0, r0, #3
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	055b      	lsls	r3, r3, #21
 800179c:	4302      	orrs	r2, r0
 800179e:	0b24      	lsrs	r4, r4, #12
 80017a0:	0d5b      	lsrs	r3, r3, #21
 80017a2:	e79d      	b.n	80016e0 <__aeabi_dmul+0xac>
 80017a4:	2190      	movs	r1, #144	@ 0x90
 80017a6:	0089      	lsls	r1, r1, #2
 80017a8:	420f      	tst	r7, r1
 80017aa:	d163      	bne.n	8001874 <__aeabi_dmul+0x240>
 80017ac:	2288      	movs	r2, #136	@ 0x88
 80017ae:	423a      	tst	r2, r7
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dmul+0x180>
 80017b2:	e0d7      	b.n	8001964 <__aeabi_dmul+0x330>
 80017b4:	9b00      	ldr	r3, [sp, #0]
 80017b6:	46a2      	mov	sl, r4
 80017b8:	469b      	mov	fp, r3
 80017ba:	4681      	mov	r9, r0
 80017bc:	9602      	str	r6, [sp, #8]
 80017be:	e7bf      	b.n	8001740 <__aeabi_dmul+0x10c>
 80017c0:	0023      	movs	r3, r4
 80017c2:	4333      	orrs	r3, r6
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dmul+0x194>
 80017c6:	e07f      	b.n	80018c8 <__aeabi_dmul+0x294>
 80017c8:	2c00      	cmp	r4, #0
 80017ca:	d100      	bne.n	80017ce <__aeabi_dmul+0x19a>
 80017cc:	e1ad      	b.n	8001b2a <__aeabi_dmul+0x4f6>
 80017ce:	0020      	movs	r0, r4
 80017d0:	f7fe fe60 	bl	8000494 <__clzsi2>
 80017d4:	0002      	movs	r2, r0
 80017d6:	0003      	movs	r3, r0
 80017d8:	3a0b      	subs	r2, #11
 80017da:	201d      	movs	r0, #29
 80017dc:	0019      	movs	r1, r3
 80017de:	1a82      	subs	r2, r0, r2
 80017e0:	0030      	movs	r0, r6
 80017e2:	3908      	subs	r1, #8
 80017e4:	40d0      	lsrs	r0, r2
 80017e6:	408c      	lsls	r4, r1
 80017e8:	4304      	orrs	r4, r0
 80017ea:	0030      	movs	r0, r6
 80017ec:	4088      	lsls	r0, r1
 80017ee:	4a5b      	ldr	r2, [pc, #364]	@ (800195c <__aeabi_dmul+0x328>)
 80017f0:	1aeb      	subs	r3, r5, r3
 80017f2:	4694      	mov	ip, r2
 80017f4:	4463      	add	r3, ip
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	9201      	str	r2, [sp, #4]
 80017fa:	4642      	mov	r2, r8
 80017fc:	2600      	movs	r6, #0
 80017fe:	2a0a      	cmp	r2, #10
 8001800:	dc00      	bgt.n	8001804 <__aeabi_dmul+0x1d0>
 8001802:	e75a      	b.n	80016ba <__aeabi_dmul+0x86>
 8001804:	e79c      	b.n	8001740 <__aeabi_dmul+0x10c>
 8001806:	4653      	mov	r3, sl
 8001808:	4303      	orrs	r3, r0
 800180a:	4699      	mov	r9, r3
 800180c:	d054      	beq.n	80018b8 <__aeabi_dmul+0x284>
 800180e:	4653      	mov	r3, sl
 8001810:	2b00      	cmp	r3, #0
 8001812:	d100      	bne.n	8001816 <__aeabi_dmul+0x1e2>
 8001814:	e177      	b.n	8001b06 <__aeabi_dmul+0x4d2>
 8001816:	4650      	mov	r0, sl
 8001818:	f7fe fe3c 	bl	8000494 <__clzsi2>
 800181c:	230b      	movs	r3, #11
 800181e:	425b      	negs	r3, r3
 8001820:	469c      	mov	ip, r3
 8001822:	0002      	movs	r2, r0
 8001824:	4484      	add	ip, r0
 8001826:	0011      	movs	r1, r2
 8001828:	4650      	mov	r0, sl
 800182a:	3908      	subs	r1, #8
 800182c:	4088      	lsls	r0, r1
 800182e:	231d      	movs	r3, #29
 8001830:	4680      	mov	r8, r0
 8001832:	4660      	mov	r0, ip
 8001834:	1a1b      	subs	r3, r3, r0
 8001836:	0020      	movs	r0, r4
 8001838:	40d8      	lsrs	r0, r3
 800183a:	0003      	movs	r3, r0
 800183c:	4640      	mov	r0, r8
 800183e:	4303      	orrs	r3, r0
 8001840:	469a      	mov	sl, r3
 8001842:	0023      	movs	r3, r4
 8001844:	408b      	lsls	r3, r1
 8001846:	4699      	mov	r9, r3
 8001848:	2300      	movs	r3, #0
 800184a:	4d44      	ldr	r5, [pc, #272]	@ (800195c <__aeabi_dmul+0x328>)
 800184c:	4698      	mov	r8, r3
 800184e:	1aad      	subs	r5, r5, r2
 8001850:	9302      	str	r3, [sp, #8]
 8001852:	e715      	b.n	8001680 <__aeabi_dmul+0x4c>
 8001854:	4652      	mov	r2, sl
 8001856:	4302      	orrs	r2, r0
 8001858:	4691      	mov	r9, r2
 800185a:	d126      	bne.n	80018aa <__aeabi_dmul+0x276>
 800185c:	2200      	movs	r2, #0
 800185e:	001d      	movs	r5, r3
 8001860:	2302      	movs	r3, #2
 8001862:	4692      	mov	sl, r2
 8001864:	3208      	adds	r2, #8
 8001866:	4690      	mov	r8, r2
 8001868:	9302      	str	r3, [sp, #8]
 800186a:	e709      	b.n	8001680 <__aeabi_dmul+0x4c>
 800186c:	2400      	movs	r4, #0
 800186e:	2200      	movs	r2, #0
 8001870:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <__aeabi_dmul+0x314>)
 8001872:	e735      	b.n	80016e0 <__aeabi_dmul+0xac>
 8001874:	2300      	movs	r3, #0
 8001876:	2480      	movs	r4, #128	@ 0x80
 8001878:	469b      	mov	fp, r3
 800187a:	0324      	lsls	r4, r4, #12
 800187c:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <__aeabi_dmul+0x314>)
 800187e:	e72f      	b.n	80016e0 <__aeabi_dmul+0xac>
 8001880:	2202      	movs	r2, #2
 8001882:	4641      	mov	r1, r8
 8001884:	4311      	orrs	r1, r2
 8001886:	2280      	movs	r2, #128	@ 0x80
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	4694      	mov	ip, r2
 800188c:	002a      	movs	r2, r5
 800188e:	4462      	add	r2, ip
 8001890:	4688      	mov	r8, r1
 8001892:	9201      	str	r2, [sp, #4]
 8001894:	290a      	cmp	r1, #10
 8001896:	dd00      	ble.n	800189a <__aeabi_dmul+0x266>
 8001898:	e752      	b.n	8001740 <__aeabi_dmul+0x10c>
 800189a:	465a      	mov	r2, fp
 800189c:	2000      	movs	r0, #0
 800189e:	9900      	ldr	r1, [sp, #0]
 80018a0:	0004      	movs	r4, r0
 80018a2:	404a      	eors	r2, r1
 80018a4:	4693      	mov	fp, r2
 80018a6:	2602      	movs	r6, #2
 80018a8:	e70b      	b.n	80016c2 <__aeabi_dmul+0x8e>
 80018aa:	220c      	movs	r2, #12
 80018ac:	001d      	movs	r5, r3
 80018ae:	2303      	movs	r3, #3
 80018b0:	4681      	mov	r9, r0
 80018b2:	4690      	mov	r8, r2
 80018b4:	9302      	str	r3, [sp, #8]
 80018b6:	e6e3      	b.n	8001680 <__aeabi_dmul+0x4c>
 80018b8:	2300      	movs	r3, #0
 80018ba:	469a      	mov	sl, r3
 80018bc:	3304      	adds	r3, #4
 80018be:	4698      	mov	r8, r3
 80018c0:	3b03      	subs	r3, #3
 80018c2:	2500      	movs	r5, #0
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	e6db      	b.n	8001680 <__aeabi_dmul+0x4c>
 80018c8:	4642      	mov	r2, r8
 80018ca:	3301      	adds	r3, #1
 80018cc:	431a      	orrs	r2, r3
 80018ce:	002b      	movs	r3, r5
 80018d0:	4690      	mov	r8, r2
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	9201      	str	r2, [sp, #4]
 80018d6:	4642      	mov	r2, r8
 80018d8:	2400      	movs	r4, #0
 80018da:	2000      	movs	r0, #0
 80018dc:	2601      	movs	r6, #1
 80018de:	2a0a      	cmp	r2, #10
 80018e0:	dc00      	bgt.n	80018e4 <__aeabi_dmul+0x2b0>
 80018e2:	e6ea      	b.n	80016ba <__aeabi_dmul+0x86>
 80018e4:	e72c      	b.n	8001740 <__aeabi_dmul+0x10c>
 80018e6:	2201      	movs	r2, #1
 80018e8:	1ad2      	subs	r2, r2, r3
 80018ea:	2a38      	cmp	r2, #56	@ 0x38
 80018ec:	dd00      	ble.n	80018f0 <__aeabi_dmul+0x2bc>
 80018ee:	e6f4      	b.n	80016da <__aeabi_dmul+0xa6>
 80018f0:	2a1f      	cmp	r2, #31
 80018f2:	dc00      	bgt.n	80018f6 <__aeabi_dmul+0x2c2>
 80018f4:	e12a      	b.n	8001b4c <__aeabi_dmul+0x518>
 80018f6:	211f      	movs	r1, #31
 80018f8:	4249      	negs	r1, r1
 80018fa:	1acb      	subs	r3, r1, r3
 80018fc:	0021      	movs	r1, r4
 80018fe:	40d9      	lsrs	r1, r3
 8001900:	000b      	movs	r3, r1
 8001902:	2a20      	cmp	r2, #32
 8001904:	d005      	beq.n	8001912 <__aeabi_dmul+0x2de>
 8001906:	4a16      	ldr	r2, [pc, #88]	@ (8001960 <__aeabi_dmul+0x32c>)
 8001908:	9d01      	ldr	r5, [sp, #4]
 800190a:	4694      	mov	ip, r2
 800190c:	4465      	add	r5, ip
 800190e:	40ac      	lsls	r4, r5
 8001910:	4320      	orrs	r0, r4
 8001912:	1e42      	subs	r2, r0, #1
 8001914:	4190      	sbcs	r0, r2
 8001916:	4318      	orrs	r0, r3
 8001918:	2307      	movs	r3, #7
 800191a:	0019      	movs	r1, r3
 800191c:	2400      	movs	r4, #0
 800191e:	4001      	ands	r1, r0
 8001920:	4203      	tst	r3, r0
 8001922:	d00c      	beq.n	800193e <__aeabi_dmul+0x30a>
 8001924:	230f      	movs	r3, #15
 8001926:	4003      	ands	r3, r0
 8001928:	2b04      	cmp	r3, #4
 800192a:	d100      	bne.n	800192e <__aeabi_dmul+0x2fa>
 800192c:	e140      	b.n	8001bb0 <__aeabi_dmul+0x57c>
 800192e:	1d03      	adds	r3, r0, #4
 8001930:	4283      	cmp	r3, r0
 8001932:	41a4      	sbcs	r4, r4
 8001934:	0018      	movs	r0, r3
 8001936:	4264      	negs	r4, r4
 8001938:	0761      	lsls	r1, r4, #29
 800193a:	0264      	lsls	r4, r4, #9
 800193c:	0b24      	lsrs	r4, r4, #12
 800193e:	08c2      	lsrs	r2, r0, #3
 8001940:	2300      	movs	r3, #0
 8001942:	430a      	orrs	r2, r1
 8001944:	e6cc      	b.n	80016e0 <__aeabi_dmul+0xac>
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	000007ff 	.word	0x000007ff
 800194c:	fffffc01 	.word	0xfffffc01
 8001950:	000003ff 	.word	0x000003ff
 8001954:	feffffff 	.word	0xfeffffff
 8001958:	000007fe 	.word	0x000007fe
 800195c:	fffffc0d 	.word	0xfffffc0d
 8001960:	0000043e 	.word	0x0000043e
 8001964:	4649      	mov	r1, r9
 8001966:	464a      	mov	r2, r9
 8001968:	0409      	lsls	r1, r1, #16
 800196a:	0c09      	lsrs	r1, r1, #16
 800196c:	000d      	movs	r5, r1
 800196e:	0c16      	lsrs	r6, r2, #16
 8001970:	0c02      	lsrs	r2, r0, #16
 8001972:	0400      	lsls	r0, r0, #16
 8001974:	0c00      	lsrs	r0, r0, #16
 8001976:	4345      	muls	r5, r0
 8001978:	46ac      	mov	ip, r5
 800197a:	0005      	movs	r5, r0
 800197c:	4375      	muls	r5, r6
 800197e:	46a8      	mov	r8, r5
 8001980:	0015      	movs	r5, r2
 8001982:	000f      	movs	r7, r1
 8001984:	4375      	muls	r5, r6
 8001986:	9200      	str	r2, [sp, #0]
 8001988:	9502      	str	r5, [sp, #8]
 800198a:	002a      	movs	r2, r5
 800198c:	9d00      	ldr	r5, [sp, #0]
 800198e:	436f      	muls	r7, r5
 8001990:	4665      	mov	r5, ip
 8001992:	0c2d      	lsrs	r5, r5, #16
 8001994:	46a9      	mov	r9, r5
 8001996:	4447      	add	r7, r8
 8001998:	444f      	add	r7, r9
 800199a:	45b8      	cmp	r8, r7
 800199c:	d905      	bls.n	80019aa <__aeabi_dmul+0x376>
 800199e:	0015      	movs	r5, r2
 80019a0:	2280      	movs	r2, #128	@ 0x80
 80019a2:	0252      	lsls	r2, r2, #9
 80019a4:	4690      	mov	r8, r2
 80019a6:	4445      	add	r5, r8
 80019a8:	9502      	str	r5, [sp, #8]
 80019aa:	0c3d      	lsrs	r5, r7, #16
 80019ac:	9503      	str	r5, [sp, #12]
 80019ae:	4665      	mov	r5, ip
 80019b0:	042d      	lsls	r5, r5, #16
 80019b2:	043f      	lsls	r7, r7, #16
 80019b4:	0c2d      	lsrs	r5, r5, #16
 80019b6:	46ac      	mov	ip, r5
 80019b8:	003d      	movs	r5, r7
 80019ba:	4465      	add	r5, ip
 80019bc:	9504      	str	r5, [sp, #16]
 80019be:	0c25      	lsrs	r5, r4, #16
 80019c0:	0424      	lsls	r4, r4, #16
 80019c2:	0c24      	lsrs	r4, r4, #16
 80019c4:	46ac      	mov	ip, r5
 80019c6:	0025      	movs	r5, r4
 80019c8:	4375      	muls	r5, r6
 80019ca:	46a8      	mov	r8, r5
 80019cc:	4665      	mov	r5, ip
 80019ce:	000f      	movs	r7, r1
 80019d0:	4369      	muls	r1, r5
 80019d2:	4441      	add	r1, r8
 80019d4:	4689      	mov	r9, r1
 80019d6:	4367      	muls	r7, r4
 80019d8:	0c39      	lsrs	r1, r7, #16
 80019da:	4449      	add	r1, r9
 80019dc:	436e      	muls	r6, r5
 80019de:	4588      	cmp	r8, r1
 80019e0:	d903      	bls.n	80019ea <__aeabi_dmul+0x3b6>
 80019e2:	2280      	movs	r2, #128	@ 0x80
 80019e4:	0252      	lsls	r2, r2, #9
 80019e6:	4690      	mov	r8, r2
 80019e8:	4446      	add	r6, r8
 80019ea:	0c0d      	lsrs	r5, r1, #16
 80019ec:	46a8      	mov	r8, r5
 80019ee:	0035      	movs	r5, r6
 80019f0:	4445      	add	r5, r8
 80019f2:	9505      	str	r5, [sp, #20]
 80019f4:	9d03      	ldr	r5, [sp, #12]
 80019f6:	043f      	lsls	r7, r7, #16
 80019f8:	46a8      	mov	r8, r5
 80019fa:	0c3f      	lsrs	r7, r7, #16
 80019fc:	0409      	lsls	r1, r1, #16
 80019fe:	19c9      	adds	r1, r1, r7
 8001a00:	4488      	add	r8, r1
 8001a02:	4645      	mov	r5, r8
 8001a04:	9503      	str	r5, [sp, #12]
 8001a06:	4655      	mov	r5, sl
 8001a08:	042e      	lsls	r6, r5, #16
 8001a0a:	0c36      	lsrs	r6, r6, #16
 8001a0c:	0c2f      	lsrs	r7, r5, #16
 8001a0e:	0035      	movs	r5, r6
 8001a10:	4345      	muls	r5, r0
 8001a12:	4378      	muls	r0, r7
 8001a14:	4681      	mov	r9, r0
 8001a16:	0038      	movs	r0, r7
 8001a18:	46a8      	mov	r8, r5
 8001a1a:	0c2d      	lsrs	r5, r5, #16
 8001a1c:	46aa      	mov	sl, r5
 8001a1e:	9a00      	ldr	r2, [sp, #0]
 8001a20:	4350      	muls	r0, r2
 8001a22:	4372      	muls	r2, r6
 8001a24:	444a      	add	r2, r9
 8001a26:	4452      	add	r2, sl
 8001a28:	4591      	cmp	r9, r2
 8001a2a:	d903      	bls.n	8001a34 <__aeabi_dmul+0x400>
 8001a2c:	2580      	movs	r5, #128	@ 0x80
 8001a2e:	026d      	lsls	r5, r5, #9
 8001a30:	46a9      	mov	r9, r5
 8001a32:	4448      	add	r0, r9
 8001a34:	0c15      	lsrs	r5, r2, #16
 8001a36:	46a9      	mov	r9, r5
 8001a38:	4645      	mov	r5, r8
 8001a3a:	042d      	lsls	r5, r5, #16
 8001a3c:	0c2d      	lsrs	r5, r5, #16
 8001a3e:	46a8      	mov	r8, r5
 8001a40:	4665      	mov	r5, ip
 8001a42:	437d      	muls	r5, r7
 8001a44:	0412      	lsls	r2, r2, #16
 8001a46:	4448      	add	r0, r9
 8001a48:	4490      	add	r8, r2
 8001a4a:	46a9      	mov	r9, r5
 8001a4c:	0032      	movs	r2, r6
 8001a4e:	4665      	mov	r5, ip
 8001a50:	4362      	muls	r2, r4
 8001a52:	436e      	muls	r6, r5
 8001a54:	437c      	muls	r4, r7
 8001a56:	0c17      	lsrs	r7, r2, #16
 8001a58:	1936      	adds	r6, r6, r4
 8001a5a:	19bf      	adds	r7, r7, r6
 8001a5c:	42bc      	cmp	r4, r7
 8001a5e:	d903      	bls.n	8001a68 <__aeabi_dmul+0x434>
 8001a60:	2480      	movs	r4, #128	@ 0x80
 8001a62:	0264      	lsls	r4, r4, #9
 8001a64:	46a4      	mov	ip, r4
 8001a66:	44e1      	add	r9, ip
 8001a68:	9c02      	ldr	r4, [sp, #8]
 8001a6a:	9e03      	ldr	r6, [sp, #12]
 8001a6c:	46a4      	mov	ip, r4
 8001a6e:	9d05      	ldr	r5, [sp, #20]
 8001a70:	4466      	add	r6, ip
 8001a72:	428e      	cmp	r6, r1
 8001a74:	4189      	sbcs	r1, r1
 8001a76:	46ac      	mov	ip, r5
 8001a78:	0412      	lsls	r2, r2, #16
 8001a7a:	043c      	lsls	r4, r7, #16
 8001a7c:	0c12      	lsrs	r2, r2, #16
 8001a7e:	18a2      	adds	r2, r4, r2
 8001a80:	4462      	add	r2, ip
 8001a82:	4249      	negs	r1, r1
 8001a84:	1854      	adds	r4, r2, r1
 8001a86:	4446      	add	r6, r8
 8001a88:	46a4      	mov	ip, r4
 8001a8a:	4546      	cmp	r6, r8
 8001a8c:	41a4      	sbcs	r4, r4
 8001a8e:	4682      	mov	sl, r0
 8001a90:	4264      	negs	r4, r4
 8001a92:	46a0      	mov	r8, r4
 8001a94:	42aa      	cmp	r2, r5
 8001a96:	4192      	sbcs	r2, r2
 8001a98:	458c      	cmp	ip, r1
 8001a9a:	4189      	sbcs	r1, r1
 8001a9c:	44e2      	add	sl, ip
 8001a9e:	44d0      	add	r8, sl
 8001aa0:	4249      	negs	r1, r1
 8001aa2:	4252      	negs	r2, r2
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	45a0      	cmp	r8, r4
 8001aa8:	41a4      	sbcs	r4, r4
 8001aaa:	4582      	cmp	sl, r0
 8001aac:	4189      	sbcs	r1, r1
 8001aae:	4264      	negs	r4, r4
 8001ab0:	4249      	negs	r1, r1
 8001ab2:	430c      	orrs	r4, r1
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	0c3f      	lsrs	r7, r7, #16
 8001ab8:	19d2      	adds	r2, r2, r7
 8001aba:	1912      	adds	r2, r2, r4
 8001abc:	0dcc      	lsrs	r4, r1, #23
 8001abe:	9904      	ldr	r1, [sp, #16]
 8001ac0:	0270      	lsls	r0, r6, #9
 8001ac2:	4308      	orrs	r0, r1
 8001ac4:	1e41      	subs	r1, r0, #1
 8001ac6:	4188      	sbcs	r0, r1
 8001ac8:	4641      	mov	r1, r8
 8001aca:	444a      	add	r2, r9
 8001acc:	0df6      	lsrs	r6, r6, #23
 8001ace:	0252      	lsls	r2, r2, #9
 8001ad0:	4330      	orrs	r0, r6
 8001ad2:	0249      	lsls	r1, r1, #9
 8001ad4:	4314      	orrs	r4, r2
 8001ad6:	4308      	orrs	r0, r1
 8001ad8:	01d2      	lsls	r2, r2, #7
 8001ada:	d535      	bpl.n	8001b48 <__aeabi_dmul+0x514>
 8001adc:	2201      	movs	r2, #1
 8001ade:	0843      	lsrs	r3, r0, #1
 8001ae0:	4002      	ands	r2, r0
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	07e0      	lsls	r0, r4, #31
 8001ae6:	4318      	orrs	r0, r3
 8001ae8:	0864      	lsrs	r4, r4, #1
 8001aea:	e634      	b.n	8001756 <__aeabi_dmul+0x122>
 8001aec:	9b00      	ldr	r3, [sp, #0]
 8001aee:	46a2      	mov	sl, r4
 8001af0:	469b      	mov	fp, r3
 8001af2:	4681      	mov	r9, r0
 8001af4:	2480      	movs	r4, #128	@ 0x80
 8001af6:	4653      	mov	r3, sl
 8001af8:	0324      	lsls	r4, r4, #12
 8001afa:	431c      	orrs	r4, r3
 8001afc:	0324      	lsls	r4, r4, #12
 8001afe:	464a      	mov	r2, r9
 8001b00:	4b2e      	ldr	r3, [pc, #184]	@ (8001bbc <__aeabi_dmul+0x588>)
 8001b02:	0b24      	lsrs	r4, r4, #12
 8001b04:	e5ec      	b.n	80016e0 <__aeabi_dmul+0xac>
 8001b06:	f7fe fcc5 	bl	8000494 <__clzsi2>
 8001b0a:	2315      	movs	r3, #21
 8001b0c:	469c      	mov	ip, r3
 8001b0e:	4484      	add	ip, r0
 8001b10:	0002      	movs	r2, r0
 8001b12:	4663      	mov	r3, ip
 8001b14:	3220      	adds	r2, #32
 8001b16:	2b1c      	cmp	r3, #28
 8001b18:	dc00      	bgt.n	8001b1c <__aeabi_dmul+0x4e8>
 8001b1a:	e684      	b.n	8001826 <__aeabi_dmul+0x1f2>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4699      	mov	r9, r3
 8001b20:	0023      	movs	r3, r4
 8001b22:	3808      	subs	r0, #8
 8001b24:	4083      	lsls	r3, r0
 8001b26:	469a      	mov	sl, r3
 8001b28:	e68e      	b.n	8001848 <__aeabi_dmul+0x214>
 8001b2a:	f7fe fcb3 	bl	8000494 <__clzsi2>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	0003      	movs	r3, r0
 8001b32:	3215      	adds	r2, #21
 8001b34:	3320      	adds	r3, #32
 8001b36:	2a1c      	cmp	r2, #28
 8001b38:	dc00      	bgt.n	8001b3c <__aeabi_dmul+0x508>
 8001b3a:	e64e      	b.n	80017da <__aeabi_dmul+0x1a6>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	0034      	movs	r4, r6
 8001b40:	3a08      	subs	r2, #8
 8001b42:	2000      	movs	r0, #0
 8001b44:	4094      	lsls	r4, r2
 8001b46:	e652      	b.n	80017ee <__aeabi_dmul+0x1ba>
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	e604      	b.n	8001756 <__aeabi_dmul+0x122>
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <__aeabi_dmul+0x58c>)
 8001b4e:	0021      	movs	r1, r4
 8001b50:	469c      	mov	ip, r3
 8001b52:	0003      	movs	r3, r0
 8001b54:	9d01      	ldr	r5, [sp, #4]
 8001b56:	40d3      	lsrs	r3, r2
 8001b58:	4465      	add	r5, ip
 8001b5a:	40a9      	lsls	r1, r5
 8001b5c:	4319      	orrs	r1, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	40ab      	lsls	r3, r5
 8001b62:	1e58      	subs	r0, r3, #1
 8001b64:	4183      	sbcs	r3, r0
 8001b66:	4319      	orrs	r1, r3
 8001b68:	0008      	movs	r0, r1
 8001b6a:	40d4      	lsrs	r4, r2
 8001b6c:	074b      	lsls	r3, r1, #29
 8001b6e:	d009      	beq.n	8001b84 <__aeabi_dmul+0x550>
 8001b70:	230f      	movs	r3, #15
 8001b72:	400b      	ands	r3, r1
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d005      	beq.n	8001b84 <__aeabi_dmul+0x550>
 8001b78:	1d0b      	adds	r3, r1, #4
 8001b7a:	428b      	cmp	r3, r1
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1824      	adds	r4, r4, r0
 8001b82:	0018      	movs	r0, r3
 8001b84:	0223      	lsls	r3, r4, #8
 8001b86:	d400      	bmi.n	8001b8a <__aeabi_dmul+0x556>
 8001b88:	e6d6      	b.n	8001938 <__aeabi_dmul+0x304>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	2400      	movs	r4, #0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	e5a6      	b.n	80016e0 <__aeabi_dmul+0xac>
 8001b92:	290f      	cmp	r1, #15
 8001b94:	d1aa      	bne.n	8001aec <__aeabi_dmul+0x4b8>
 8001b96:	2380      	movs	r3, #128	@ 0x80
 8001b98:	4652      	mov	r2, sl
 8001b9a:	031b      	lsls	r3, r3, #12
 8001b9c:	421a      	tst	r2, r3
 8001b9e:	d0a9      	beq.n	8001af4 <__aeabi_dmul+0x4c0>
 8001ba0:	421c      	tst	r4, r3
 8001ba2:	d1a7      	bne.n	8001af4 <__aeabi_dmul+0x4c0>
 8001ba4:	431c      	orrs	r4, r3
 8001ba6:	9b00      	ldr	r3, [sp, #0]
 8001ba8:	0002      	movs	r2, r0
 8001baa:	469b      	mov	fp, r3
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <__aeabi_dmul+0x588>)
 8001bae:	e597      	b.n	80016e0 <__aeabi_dmul+0xac>
 8001bb0:	2400      	movs	r4, #0
 8001bb2:	e6c1      	b.n	8001938 <__aeabi_dmul+0x304>
 8001bb4:	2400      	movs	r4, #0
 8001bb6:	4b01      	ldr	r3, [pc, #4]	@ (8001bbc <__aeabi_dmul+0x588>)
 8001bb8:	0022      	movs	r2, r4
 8001bba:	e591      	b.n	80016e0 <__aeabi_dmul+0xac>
 8001bbc:	000007ff 	.word	0x000007ff
 8001bc0:	0000041e 	.word	0x0000041e

08001bc4 <__aeabi_dsub>:
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	464e      	mov	r6, r9
 8001bc8:	4645      	mov	r5, r8
 8001bca:	46de      	mov	lr, fp
 8001bcc:	4657      	mov	r7, sl
 8001bce:	b5e0      	push	{r5, r6, r7, lr}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	9000      	str	r0, [sp, #0]
 8001bd4:	9101      	str	r1, [sp, #4]
 8001bd6:	030c      	lsls	r4, r1, #12
 8001bd8:	004f      	lsls	r7, r1, #1
 8001bda:	0fce      	lsrs	r6, r1, #31
 8001bdc:	0a61      	lsrs	r1, r4, #9
 8001bde:	9c00      	ldr	r4, [sp, #0]
 8001be0:	46b0      	mov	r8, r6
 8001be2:	0f64      	lsrs	r4, r4, #29
 8001be4:	430c      	orrs	r4, r1
 8001be6:	9900      	ldr	r1, [sp, #0]
 8001be8:	0d7f      	lsrs	r7, r7, #21
 8001bea:	00c8      	lsls	r0, r1, #3
 8001bec:	0011      	movs	r1, r2
 8001bee:	001a      	movs	r2, r3
 8001bf0:	031b      	lsls	r3, r3, #12
 8001bf2:	469c      	mov	ip, r3
 8001bf4:	9100      	str	r1, [sp, #0]
 8001bf6:	9201      	str	r2, [sp, #4]
 8001bf8:	0051      	lsls	r1, r2, #1
 8001bfa:	0d4b      	lsrs	r3, r1, #21
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	9b01      	ldr	r3, [sp, #4]
 8001c00:	9d00      	ldr	r5, [sp, #0]
 8001c02:	0fd9      	lsrs	r1, r3, #31
 8001c04:	4663      	mov	r3, ip
 8001c06:	0f6a      	lsrs	r2, r5, #29
 8001c08:	0a5b      	lsrs	r3, r3, #9
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	00ea      	lsls	r2, r5, #3
 8001c0e:	4694      	mov	ip, r2
 8001c10:	4693      	mov	fp, r2
 8001c12:	4ac1      	ldr	r2, [pc, #772]	@ (8001f18 <__aeabi_dsub+0x354>)
 8001c14:	9003      	str	r0, [sp, #12]
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	4591      	cmp	r9, r2
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dsub+0x5a>
 8001c1c:	e0cd      	b.n	8001dba <__aeabi_dsub+0x1f6>
 8001c1e:	2501      	movs	r5, #1
 8001c20:	4069      	eors	r1, r5
 8001c22:	464d      	mov	r5, r9
 8001c24:	1b7d      	subs	r5, r7, r5
 8001c26:	46aa      	mov	sl, r5
 8001c28:	428e      	cmp	r6, r1
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x6a>
 8001c2c:	e080      	b.n	8001d30 <__aeabi_dsub+0x16c>
 8001c2e:	2d00      	cmp	r5, #0
 8001c30:	dc00      	bgt.n	8001c34 <__aeabi_dsub+0x70>
 8001c32:	e335      	b.n	80022a0 <__aeabi_dsub+0x6dc>
 8001c34:	4649      	mov	r1, r9
 8001c36:	2900      	cmp	r1, #0
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x78>
 8001c3a:	e0df      	b.n	8001dfc <__aeabi_dsub+0x238>
 8001c3c:	4297      	cmp	r7, r2
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x7e>
 8001c40:	e194      	b.n	8001f6c <__aeabi_dsub+0x3a8>
 8001c42:	4652      	mov	r2, sl
 8001c44:	2501      	movs	r5, #1
 8001c46:	2a38      	cmp	r2, #56	@ 0x38
 8001c48:	dc19      	bgt.n	8001c7e <__aeabi_dsub+0xba>
 8001c4a:	2280      	movs	r2, #128	@ 0x80
 8001c4c:	9b02      	ldr	r3, [sp, #8]
 8001c4e:	0412      	lsls	r2, r2, #16
 8001c50:	4313      	orrs	r3, r2
 8001c52:	9302      	str	r3, [sp, #8]
 8001c54:	4652      	mov	r2, sl
 8001c56:	2a1f      	cmp	r2, #31
 8001c58:	dd00      	ble.n	8001c5c <__aeabi_dsub+0x98>
 8001c5a:	e1e3      	b.n	8002024 <__aeabi_dsub+0x460>
 8001c5c:	4653      	mov	r3, sl
 8001c5e:	2220      	movs	r2, #32
 8001c60:	4661      	mov	r1, ip
 8001c62:	9d02      	ldr	r5, [sp, #8]
 8001c64:	1ad2      	subs	r2, r2, r3
 8001c66:	4095      	lsls	r5, r2
 8001c68:	40d9      	lsrs	r1, r3
 8001c6a:	430d      	orrs	r5, r1
 8001c6c:	4661      	mov	r1, ip
 8001c6e:	4091      	lsls	r1, r2
 8001c70:	000a      	movs	r2, r1
 8001c72:	1e51      	subs	r1, r2, #1
 8001c74:	418a      	sbcs	r2, r1
 8001c76:	4315      	orrs	r5, r2
 8001c78:	9a02      	ldr	r2, [sp, #8]
 8001c7a:	40da      	lsrs	r2, r3
 8001c7c:	1aa4      	subs	r4, r4, r2
 8001c7e:	1b45      	subs	r5, r0, r5
 8001c80:	42a8      	cmp	r0, r5
 8001c82:	4180      	sbcs	r0, r0
 8001c84:	4240      	negs	r0, r0
 8001c86:	1a24      	subs	r4, r4, r0
 8001c88:	0223      	lsls	r3, r4, #8
 8001c8a:	d400      	bmi.n	8001c8e <__aeabi_dsub+0xca>
 8001c8c:	e13d      	b.n	8001f0a <__aeabi_dsub+0x346>
 8001c8e:	0264      	lsls	r4, r4, #9
 8001c90:	0a64      	lsrs	r4, r4, #9
 8001c92:	2c00      	cmp	r4, #0
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0xd4>
 8001c96:	e147      	b.n	8001f28 <__aeabi_dsub+0x364>
 8001c98:	0020      	movs	r0, r4
 8001c9a:	f7fe fbfb 	bl	8000494 <__clzsi2>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	3b08      	subs	r3, #8
 8001ca2:	2120      	movs	r1, #32
 8001ca4:	0028      	movs	r0, r5
 8001ca6:	1aca      	subs	r2, r1, r3
 8001ca8:	40d0      	lsrs	r0, r2
 8001caa:	409c      	lsls	r4, r3
 8001cac:	0002      	movs	r2, r0
 8001cae:	409d      	lsls	r5, r3
 8001cb0:	4322      	orrs	r2, r4
 8001cb2:	429f      	cmp	r7, r3
 8001cb4:	dd00      	ble.n	8001cb8 <__aeabi_dsub+0xf4>
 8001cb6:	e177      	b.n	8001fa8 <__aeabi_dsub+0x3e4>
 8001cb8:	1bd8      	subs	r0, r3, r7
 8001cba:	3001      	adds	r0, #1
 8001cbc:	1a09      	subs	r1, r1, r0
 8001cbe:	002c      	movs	r4, r5
 8001cc0:	408d      	lsls	r5, r1
 8001cc2:	40c4      	lsrs	r4, r0
 8001cc4:	1e6b      	subs	r3, r5, #1
 8001cc6:	419d      	sbcs	r5, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	40c2      	lsrs	r2, r0
 8001ccc:	408b      	lsls	r3, r1
 8001cce:	4325      	orrs	r5, r4
 8001cd0:	2700      	movs	r7, #0
 8001cd2:	0014      	movs	r4, r2
 8001cd4:	431d      	orrs	r5, r3
 8001cd6:	076b      	lsls	r3, r5, #29
 8001cd8:	d009      	beq.n	8001cee <__aeabi_dsub+0x12a>
 8001cda:	230f      	movs	r3, #15
 8001cdc:	402b      	ands	r3, r5
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d005      	beq.n	8001cee <__aeabi_dsub+0x12a>
 8001ce2:	1d2b      	adds	r3, r5, #4
 8001ce4:	42ab      	cmp	r3, r5
 8001ce6:	41ad      	sbcs	r5, r5
 8001ce8:	426d      	negs	r5, r5
 8001cea:	1964      	adds	r4, r4, r5
 8001cec:	001d      	movs	r5, r3
 8001cee:	0223      	lsls	r3, r4, #8
 8001cf0:	d400      	bmi.n	8001cf4 <__aeabi_dsub+0x130>
 8001cf2:	e140      	b.n	8001f76 <__aeabi_dsub+0x3b2>
 8001cf4:	4a88      	ldr	r2, [pc, #544]	@ (8001f18 <__aeabi_dsub+0x354>)
 8001cf6:	3701      	adds	r7, #1
 8001cf8:	4297      	cmp	r7, r2
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x13a>
 8001cfc:	e101      	b.n	8001f02 <__aeabi_dsub+0x33e>
 8001cfe:	2601      	movs	r6, #1
 8001d00:	4643      	mov	r3, r8
 8001d02:	4986      	ldr	r1, [pc, #536]	@ (8001f1c <__aeabi_dsub+0x358>)
 8001d04:	08ed      	lsrs	r5, r5, #3
 8001d06:	4021      	ands	r1, r4
 8001d08:	074a      	lsls	r2, r1, #29
 8001d0a:	432a      	orrs	r2, r5
 8001d0c:	057c      	lsls	r4, r7, #21
 8001d0e:	024d      	lsls	r5, r1, #9
 8001d10:	0b2d      	lsrs	r5, r5, #12
 8001d12:	0d64      	lsrs	r4, r4, #21
 8001d14:	401e      	ands	r6, r3
 8001d16:	0524      	lsls	r4, r4, #20
 8001d18:	432c      	orrs	r4, r5
 8001d1a:	07f6      	lsls	r6, r6, #31
 8001d1c:	4334      	orrs	r4, r6
 8001d1e:	0010      	movs	r0, r2
 8001d20:	0021      	movs	r1, r4
 8001d22:	b005      	add	sp, #20
 8001d24:	bcf0      	pop	{r4, r5, r6, r7}
 8001d26:	46bb      	mov	fp, r7
 8001d28:	46b2      	mov	sl, r6
 8001d2a:	46a9      	mov	r9, r5
 8001d2c:	46a0      	mov	r8, r4
 8001d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d30:	2d00      	cmp	r5, #0
 8001d32:	dc00      	bgt.n	8001d36 <__aeabi_dsub+0x172>
 8001d34:	e2d0      	b.n	80022d8 <__aeabi_dsub+0x714>
 8001d36:	4649      	mov	r1, r9
 8001d38:	2900      	cmp	r1, #0
 8001d3a:	d000      	beq.n	8001d3e <__aeabi_dsub+0x17a>
 8001d3c:	e0d4      	b.n	8001ee8 <__aeabi_dsub+0x324>
 8001d3e:	4661      	mov	r1, ip
 8001d40:	9b02      	ldr	r3, [sp, #8]
 8001d42:	4319      	orrs	r1, r3
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x184>
 8001d46:	e12b      	b.n	8001fa0 <__aeabi_dsub+0x3dc>
 8001d48:	1e69      	subs	r1, r5, #1
 8001d4a:	2d01      	cmp	r5, #1
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x18c>
 8001d4e:	e1d9      	b.n	8002104 <__aeabi_dsub+0x540>
 8001d50:	4295      	cmp	r5, r2
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dsub+0x192>
 8001d54:	e10a      	b.n	8001f6c <__aeabi_dsub+0x3a8>
 8001d56:	2501      	movs	r5, #1
 8001d58:	2938      	cmp	r1, #56	@ 0x38
 8001d5a:	dc17      	bgt.n	8001d8c <__aeabi_dsub+0x1c8>
 8001d5c:	468a      	mov	sl, r1
 8001d5e:	4653      	mov	r3, sl
 8001d60:	2b1f      	cmp	r3, #31
 8001d62:	dd00      	ble.n	8001d66 <__aeabi_dsub+0x1a2>
 8001d64:	e1e7      	b.n	8002136 <__aeabi_dsub+0x572>
 8001d66:	2220      	movs	r2, #32
 8001d68:	1ad2      	subs	r2, r2, r3
 8001d6a:	9b02      	ldr	r3, [sp, #8]
 8001d6c:	4661      	mov	r1, ip
 8001d6e:	4093      	lsls	r3, r2
 8001d70:	001d      	movs	r5, r3
 8001d72:	4653      	mov	r3, sl
 8001d74:	40d9      	lsrs	r1, r3
 8001d76:	4663      	mov	r3, ip
 8001d78:	4093      	lsls	r3, r2
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	430d      	orrs	r5, r1
 8001d7e:	1e51      	subs	r1, r2, #1
 8001d80:	418a      	sbcs	r2, r1
 8001d82:	4653      	mov	r3, sl
 8001d84:	4315      	orrs	r5, r2
 8001d86:	9a02      	ldr	r2, [sp, #8]
 8001d88:	40da      	lsrs	r2, r3
 8001d8a:	18a4      	adds	r4, r4, r2
 8001d8c:	182d      	adds	r5, r5, r0
 8001d8e:	4285      	cmp	r5, r0
 8001d90:	4180      	sbcs	r0, r0
 8001d92:	4240      	negs	r0, r0
 8001d94:	1824      	adds	r4, r4, r0
 8001d96:	0223      	lsls	r3, r4, #8
 8001d98:	d400      	bmi.n	8001d9c <__aeabi_dsub+0x1d8>
 8001d9a:	e0b6      	b.n	8001f0a <__aeabi_dsub+0x346>
 8001d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8001f18 <__aeabi_dsub+0x354>)
 8001d9e:	3701      	adds	r7, #1
 8001da0:	429f      	cmp	r7, r3
 8001da2:	d100      	bne.n	8001da6 <__aeabi_dsub+0x1e2>
 8001da4:	e0ad      	b.n	8001f02 <__aeabi_dsub+0x33e>
 8001da6:	2101      	movs	r1, #1
 8001da8:	4b5c      	ldr	r3, [pc, #368]	@ (8001f1c <__aeabi_dsub+0x358>)
 8001daa:	086a      	lsrs	r2, r5, #1
 8001dac:	401c      	ands	r4, r3
 8001dae:	4029      	ands	r1, r5
 8001db0:	430a      	orrs	r2, r1
 8001db2:	07e5      	lsls	r5, r4, #31
 8001db4:	4315      	orrs	r5, r2
 8001db6:	0864      	lsrs	r4, r4, #1
 8001db8:	e78d      	b.n	8001cd6 <__aeabi_dsub+0x112>
 8001dba:	4a59      	ldr	r2, [pc, #356]	@ (8001f20 <__aeabi_dsub+0x35c>)
 8001dbc:	9b02      	ldr	r3, [sp, #8]
 8001dbe:	4692      	mov	sl, r2
 8001dc0:	4662      	mov	r2, ip
 8001dc2:	44ba      	add	sl, r7
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	d02c      	beq.n	8001e22 <__aeabi_dsub+0x25e>
 8001dc8:	428e      	cmp	r6, r1
 8001dca:	d02e      	beq.n	8001e2a <__aeabi_dsub+0x266>
 8001dcc:	4652      	mov	r2, sl
 8001dce:	2a00      	cmp	r2, #0
 8001dd0:	d060      	beq.n	8001e94 <__aeabi_dsub+0x2d0>
 8001dd2:	2f00      	cmp	r7, #0
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x214>
 8001dd6:	e0db      	b.n	8001f90 <__aeabi_dsub+0x3cc>
 8001dd8:	4663      	mov	r3, ip
 8001dda:	000e      	movs	r6, r1
 8001ddc:	9c02      	ldr	r4, [sp, #8]
 8001dde:	08d8      	lsrs	r0, r3, #3
 8001de0:	0762      	lsls	r2, r4, #29
 8001de2:	4302      	orrs	r2, r0
 8001de4:	08e4      	lsrs	r4, r4, #3
 8001de6:	0013      	movs	r3, r2
 8001de8:	4323      	orrs	r3, r4
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x22a>
 8001dec:	e254      	b.n	8002298 <__aeabi_dsub+0x6d4>
 8001dee:	2580      	movs	r5, #128	@ 0x80
 8001df0:	032d      	lsls	r5, r5, #12
 8001df2:	4325      	orrs	r5, r4
 8001df4:	032d      	lsls	r5, r5, #12
 8001df6:	4c48      	ldr	r4, [pc, #288]	@ (8001f18 <__aeabi_dsub+0x354>)
 8001df8:	0b2d      	lsrs	r5, r5, #12
 8001dfa:	e78c      	b.n	8001d16 <__aeabi_dsub+0x152>
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	9b02      	ldr	r3, [sp, #8]
 8001e00:	4319      	orrs	r1, r3
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dsub+0x242>
 8001e04:	e0cc      	b.n	8001fa0 <__aeabi_dsub+0x3dc>
 8001e06:	0029      	movs	r1, r5
 8001e08:	3901      	subs	r1, #1
 8001e0a:	2d01      	cmp	r5, #1
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x24c>
 8001e0e:	e188      	b.n	8002122 <__aeabi_dsub+0x55e>
 8001e10:	4295      	cmp	r5, r2
 8001e12:	d100      	bne.n	8001e16 <__aeabi_dsub+0x252>
 8001e14:	e0aa      	b.n	8001f6c <__aeabi_dsub+0x3a8>
 8001e16:	2501      	movs	r5, #1
 8001e18:	2938      	cmp	r1, #56	@ 0x38
 8001e1a:	dd00      	ble.n	8001e1e <__aeabi_dsub+0x25a>
 8001e1c:	e72f      	b.n	8001c7e <__aeabi_dsub+0xba>
 8001e1e:	468a      	mov	sl, r1
 8001e20:	e718      	b.n	8001c54 <__aeabi_dsub+0x90>
 8001e22:	2201      	movs	r2, #1
 8001e24:	4051      	eors	r1, r2
 8001e26:	428e      	cmp	r6, r1
 8001e28:	d1d0      	bne.n	8001dcc <__aeabi_dsub+0x208>
 8001e2a:	4653      	mov	r3, sl
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_dsub+0x26e>
 8001e30:	e0be      	b.n	8001fb0 <__aeabi_dsub+0x3ec>
 8001e32:	2f00      	cmp	r7, #0
 8001e34:	d000      	beq.n	8001e38 <__aeabi_dsub+0x274>
 8001e36:	e138      	b.n	80020aa <__aeabi_dsub+0x4e6>
 8001e38:	46ca      	mov	sl, r9
 8001e3a:	0022      	movs	r2, r4
 8001e3c:	4302      	orrs	r2, r0
 8001e3e:	d100      	bne.n	8001e42 <__aeabi_dsub+0x27e>
 8001e40:	e1e2      	b.n	8002208 <__aeabi_dsub+0x644>
 8001e42:	4653      	mov	r3, sl
 8001e44:	1e59      	subs	r1, r3, #1
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x288>
 8001e4a:	e20d      	b.n	8002268 <__aeabi_dsub+0x6a4>
 8001e4c:	4a32      	ldr	r2, [pc, #200]	@ (8001f18 <__aeabi_dsub+0x354>)
 8001e4e:	4592      	cmp	sl, r2
 8001e50:	d100      	bne.n	8001e54 <__aeabi_dsub+0x290>
 8001e52:	e1d2      	b.n	80021fa <__aeabi_dsub+0x636>
 8001e54:	2701      	movs	r7, #1
 8001e56:	2938      	cmp	r1, #56	@ 0x38
 8001e58:	dc13      	bgt.n	8001e82 <__aeabi_dsub+0x2be>
 8001e5a:	291f      	cmp	r1, #31
 8001e5c:	dd00      	ble.n	8001e60 <__aeabi_dsub+0x29c>
 8001e5e:	e1ee      	b.n	800223e <__aeabi_dsub+0x67a>
 8001e60:	2220      	movs	r2, #32
 8001e62:	9b02      	ldr	r3, [sp, #8]
 8001e64:	1a52      	subs	r2, r2, r1
 8001e66:	0025      	movs	r5, r4
 8001e68:	0007      	movs	r7, r0
 8001e6a:	469a      	mov	sl, r3
 8001e6c:	40cc      	lsrs	r4, r1
 8001e6e:	4090      	lsls	r0, r2
 8001e70:	4095      	lsls	r5, r2
 8001e72:	40cf      	lsrs	r7, r1
 8001e74:	44a2      	add	sl, r4
 8001e76:	1e42      	subs	r2, r0, #1
 8001e78:	4190      	sbcs	r0, r2
 8001e7a:	4653      	mov	r3, sl
 8001e7c:	432f      	orrs	r7, r5
 8001e7e:	4307      	orrs	r7, r0
 8001e80:	9302      	str	r3, [sp, #8]
 8001e82:	003d      	movs	r5, r7
 8001e84:	4465      	add	r5, ip
 8001e86:	4565      	cmp	r5, ip
 8001e88:	4192      	sbcs	r2, r2
 8001e8a:	9b02      	ldr	r3, [sp, #8]
 8001e8c:	4252      	negs	r2, r2
 8001e8e:	464f      	mov	r7, r9
 8001e90:	18d4      	adds	r4, r2, r3
 8001e92:	e780      	b.n	8001d96 <__aeabi_dsub+0x1d2>
 8001e94:	4a23      	ldr	r2, [pc, #140]	@ (8001f24 <__aeabi_dsub+0x360>)
 8001e96:	1c7d      	adds	r5, r7, #1
 8001e98:	4215      	tst	r5, r2
 8001e9a:	d000      	beq.n	8001e9e <__aeabi_dsub+0x2da>
 8001e9c:	e0aa      	b.n	8001ff4 <__aeabi_dsub+0x430>
 8001e9e:	4662      	mov	r2, ip
 8001ea0:	0025      	movs	r5, r4
 8001ea2:	9b02      	ldr	r3, [sp, #8]
 8001ea4:	4305      	orrs	r5, r0
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	2f00      	cmp	r7, #0
 8001eaa:	d000      	beq.n	8001eae <__aeabi_dsub+0x2ea>
 8001eac:	e0f5      	b.n	800209a <__aeabi_dsub+0x4d6>
 8001eae:	2d00      	cmp	r5, #0
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x2f0>
 8001eb2:	e16b      	b.n	800218c <__aeabi_dsub+0x5c8>
 8001eb4:	2a00      	cmp	r2, #0
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x2f6>
 8001eb8:	e152      	b.n	8002160 <__aeabi_dsub+0x59c>
 8001eba:	4663      	mov	r3, ip
 8001ebc:	1ac5      	subs	r5, r0, r3
 8001ebe:	9b02      	ldr	r3, [sp, #8]
 8001ec0:	1ae2      	subs	r2, r4, r3
 8001ec2:	42a8      	cmp	r0, r5
 8001ec4:	419b      	sbcs	r3, r3
 8001ec6:	425b      	negs	r3, r3
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	021a      	lsls	r2, r3, #8
 8001ecc:	d400      	bmi.n	8001ed0 <__aeabi_dsub+0x30c>
 8001ece:	e1d5      	b.n	800227c <__aeabi_dsub+0x6b8>
 8001ed0:	4663      	mov	r3, ip
 8001ed2:	1a1d      	subs	r5, r3, r0
 8001ed4:	45ac      	cmp	ip, r5
 8001ed6:	4192      	sbcs	r2, r2
 8001ed8:	2601      	movs	r6, #1
 8001eda:	9b02      	ldr	r3, [sp, #8]
 8001edc:	4252      	negs	r2, r2
 8001ede:	1b1c      	subs	r4, r3, r4
 8001ee0:	4688      	mov	r8, r1
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	400e      	ands	r6, r1
 8001ee6:	e6f6      	b.n	8001cd6 <__aeabi_dsub+0x112>
 8001ee8:	4297      	cmp	r7, r2
 8001eea:	d03f      	beq.n	8001f6c <__aeabi_dsub+0x3a8>
 8001eec:	4652      	mov	r2, sl
 8001eee:	2501      	movs	r5, #1
 8001ef0:	2a38      	cmp	r2, #56	@ 0x38
 8001ef2:	dd00      	ble.n	8001ef6 <__aeabi_dsub+0x332>
 8001ef4:	e74a      	b.n	8001d8c <__aeabi_dsub+0x1c8>
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	9b02      	ldr	r3, [sp, #8]
 8001efa:	0412      	lsls	r2, r2, #16
 8001efc:	4313      	orrs	r3, r2
 8001efe:	9302      	str	r3, [sp, #8]
 8001f00:	e72d      	b.n	8001d5e <__aeabi_dsub+0x19a>
 8001f02:	003c      	movs	r4, r7
 8001f04:	2500      	movs	r5, #0
 8001f06:	2200      	movs	r2, #0
 8001f08:	e705      	b.n	8001d16 <__aeabi_dsub+0x152>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	402b      	ands	r3, r5
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d000      	beq.n	8001f14 <__aeabi_dsub+0x350>
 8001f12:	e6e2      	b.n	8001cda <__aeabi_dsub+0x116>
 8001f14:	e06b      	b.n	8001fee <__aeabi_dsub+0x42a>
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	000007ff 	.word	0x000007ff
 8001f1c:	ff7fffff 	.word	0xff7fffff
 8001f20:	fffff801 	.word	0xfffff801
 8001f24:	000007fe 	.word	0x000007fe
 8001f28:	0028      	movs	r0, r5
 8001f2a:	f7fe fab3 	bl	8000494 <__clzsi2>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	3318      	adds	r3, #24
 8001f32:	2b1f      	cmp	r3, #31
 8001f34:	dc00      	bgt.n	8001f38 <__aeabi_dsub+0x374>
 8001f36:	e6b4      	b.n	8001ca2 <__aeabi_dsub+0xde>
 8001f38:	002a      	movs	r2, r5
 8001f3a:	3808      	subs	r0, #8
 8001f3c:	4082      	lsls	r2, r0
 8001f3e:	429f      	cmp	r7, r3
 8001f40:	dd00      	ble.n	8001f44 <__aeabi_dsub+0x380>
 8001f42:	e0b9      	b.n	80020b8 <__aeabi_dsub+0x4f4>
 8001f44:	1bdb      	subs	r3, r3, r7
 8001f46:	1c58      	adds	r0, r3, #1
 8001f48:	281f      	cmp	r0, #31
 8001f4a:	dc00      	bgt.n	8001f4e <__aeabi_dsub+0x38a>
 8001f4c:	e1a0      	b.n	8002290 <__aeabi_dsub+0x6cc>
 8001f4e:	0015      	movs	r5, r2
 8001f50:	3b1f      	subs	r3, #31
 8001f52:	40dd      	lsrs	r5, r3
 8001f54:	2820      	cmp	r0, #32
 8001f56:	d005      	beq.n	8001f64 <__aeabi_dsub+0x3a0>
 8001f58:	2340      	movs	r3, #64	@ 0x40
 8001f5a:	1a1b      	subs	r3, r3, r0
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	1e53      	subs	r3, r2, #1
 8001f60:	419a      	sbcs	r2, r3
 8001f62:	4315      	orrs	r5, r2
 8001f64:	2307      	movs	r3, #7
 8001f66:	2700      	movs	r7, #0
 8001f68:	402b      	ands	r3, r5
 8001f6a:	e7d0      	b.n	8001f0e <__aeabi_dsub+0x34a>
 8001f6c:	08c0      	lsrs	r0, r0, #3
 8001f6e:	0762      	lsls	r2, r4, #29
 8001f70:	4302      	orrs	r2, r0
 8001f72:	08e4      	lsrs	r4, r4, #3
 8001f74:	e737      	b.n	8001de6 <__aeabi_dsub+0x222>
 8001f76:	08ea      	lsrs	r2, r5, #3
 8001f78:	0763      	lsls	r3, r4, #29
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	4bd3      	ldr	r3, [pc, #844]	@ (80022cc <__aeabi_dsub+0x708>)
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	429f      	cmp	r7, r3
 8001f82:	d100      	bne.n	8001f86 <__aeabi_dsub+0x3c2>
 8001f84:	e72f      	b.n	8001de6 <__aeabi_dsub+0x222>
 8001f86:	0324      	lsls	r4, r4, #12
 8001f88:	0b25      	lsrs	r5, r4, #12
 8001f8a:	057c      	lsls	r4, r7, #21
 8001f8c:	0d64      	lsrs	r4, r4, #21
 8001f8e:	e6c2      	b.n	8001d16 <__aeabi_dsub+0x152>
 8001f90:	46ca      	mov	sl, r9
 8001f92:	0022      	movs	r2, r4
 8001f94:	4302      	orrs	r2, r0
 8001f96:	d158      	bne.n	800204a <__aeabi_dsub+0x486>
 8001f98:	4663      	mov	r3, ip
 8001f9a:	000e      	movs	r6, r1
 8001f9c:	9c02      	ldr	r4, [sp, #8]
 8001f9e:	9303      	str	r3, [sp, #12]
 8001fa0:	9b03      	ldr	r3, [sp, #12]
 8001fa2:	4657      	mov	r7, sl
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	e7e7      	b.n	8001f78 <__aeabi_dsub+0x3b4>
 8001fa8:	4cc9      	ldr	r4, [pc, #804]	@ (80022d0 <__aeabi_dsub+0x70c>)
 8001faa:	1aff      	subs	r7, r7, r3
 8001fac:	4014      	ands	r4, r2
 8001fae:	e692      	b.n	8001cd6 <__aeabi_dsub+0x112>
 8001fb0:	4dc8      	ldr	r5, [pc, #800]	@ (80022d4 <__aeabi_dsub+0x710>)
 8001fb2:	1c7a      	adds	r2, r7, #1
 8001fb4:	422a      	tst	r2, r5
 8001fb6:	d000      	beq.n	8001fba <__aeabi_dsub+0x3f6>
 8001fb8:	e084      	b.n	80020c4 <__aeabi_dsub+0x500>
 8001fba:	0022      	movs	r2, r4
 8001fbc:	4302      	orrs	r2, r0
 8001fbe:	2f00      	cmp	r7, #0
 8001fc0:	d000      	beq.n	8001fc4 <__aeabi_dsub+0x400>
 8001fc2:	e0ef      	b.n	80021a4 <__aeabi_dsub+0x5e0>
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	d100      	bne.n	8001fca <__aeabi_dsub+0x406>
 8001fc8:	e0e5      	b.n	8002196 <__aeabi_dsub+0x5d2>
 8001fca:	4662      	mov	r2, ip
 8001fcc:	9902      	ldr	r1, [sp, #8]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	d100      	bne.n	8001fd4 <__aeabi_dsub+0x410>
 8001fd2:	e0c5      	b.n	8002160 <__aeabi_dsub+0x59c>
 8001fd4:	4663      	mov	r3, ip
 8001fd6:	18c5      	adds	r5, r0, r3
 8001fd8:	468c      	mov	ip, r1
 8001fda:	4285      	cmp	r5, r0
 8001fdc:	4180      	sbcs	r0, r0
 8001fde:	4464      	add	r4, ip
 8001fe0:	4240      	negs	r0, r0
 8001fe2:	1824      	adds	r4, r4, r0
 8001fe4:	0223      	lsls	r3, r4, #8
 8001fe6:	d502      	bpl.n	8001fee <__aeabi_dsub+0x42a>
 8001fe8:	4bb9      	ldr	r3, [pc, #740]	@ (80022d0 <__aeabi_dsub+0x70c>)
 8001fea:	3701      	adds	r7, #1
 8001fec:	401c      	ands	r4, r3
 8001fee:	46ba      	mov	sl, r7
 8001ff0:	9503      	str	r5, [sp, #12]
 8001ff2:	e7d5      	b.n	8001fa0 <__aeabi_dsub+0x3dc>
 8001ff4:	4662      	mov	r2, ip
 8001ff6:	1a85      	subs	r5, r0, r2
 8001ff8:	42a8      	cmp	r0, r5
 8001ffa:	4192      	sbcs	r2, r2
 8001ffc:	4252      	negs	r2, r2
 8001ffe:	4691      	mov	r9, r2
 8002000:	9b02      	ldr	r3, [sp, #8]
 8002002:	1ae3      	subs	r3, r4, r3
 8002004:	001a      	movs	r2, r3
 8002006:	464b      	mov	r3, r9
 8002008:	1ad2      	subs	r2, r2, r3
 800200a:	0013      	movs	r3, r2
 800200c:	4691      	mov	r9, r2
 800200e:	021a      	lsls	r2, r3, #8
 8002010:	d46c      	bmi.n	80020ec <__aeabi_dsub+0x528>
 8002012:	464a      	mov	r2, r9
 8002014:	464c      	mov	r4, r9
 8002016:	432a      	orrs	r2, r5
 8002018:	d000      	beq.n	800201c <__aeabi_dsub+0x458>
 800201a:	e63a      	b.n	8001c92 <__aeabi_dsub+0xce>
 800201c:	2600      	movs	r6, #0
 800201e:	2400      	movs	r4, #0
 8002020:	2500      	movs	r5, #0
 8002022:	e678      	b.n	8001d16 <__aeabi_dsub+0x152>
 8002024:	9902      	ldr	r1, [sp, #8]
 8002026:	4653      	mov	r3, sl
 8002028:	000d      	movs	r5, r1
 800202a:	3a20      	subs	r2, #32
 800202c:	40d5      	lsrs	r5, r2
 800202e:	2b20      	cmp	r3, #32
 8002030:	d006      	beq.n	8002040 <__aeabi_dsub+0x47c>
 8002032:	2240      	movs	r2, #64	@ 0x40
 8002034:	1ad2      	subs	r2, r2, r3
 8002036:	000b      	movs	r3, r1
 8002038:	4093      	lsls	r3, r2
 800203a:	4662      	mov	r2, ip
 800203c:	431a      	orrs	r2, r3
 800203e:	4693      	mov	fp, r2
 8002040:	465b      	mov	r3, fp
 8002042:	1e5a      	subs	r2, r3, #1
 8002044:	4193      	sbcs	r3, r2
 8002046:	431d      	orrs	r5, r3
 8002048:	e619      	b.n	8001c7e <__aeabi_dsub+0xba>
 800204a:	4653      	mov	r3, sl
 800204c:	1e5a      	subs	r2, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x490>
 8002052:	e0c6      	b.n	80021e2 <__aeabi_dsub+0x61e>
 8002054:	4e9d      	ldr	r6, [pc, #628]	@ (80022cc <__aeabi_dsub+0x708>)
 8002056:	45b2      	cmp	sl, r6
 8002058:	d100      	bne.n	800205c <__aeabi_dsub+0x498>
 800205a:	e6bd      	b.n	8001dd8 <__aeabi_dsub+0x214>
 800205c:	4688      	mov	r8, r1
 800205e:	000e      	movs	r6, r1
 8002060:	2501      	movs	r5, #1
 8002062:	2a38      	cmp	r2, #56	@ 0x38
 8002064:	dc10      	bgt.n	8002088 <__aeabi_dsub+0x4c4>
 8002066:	2a1f      	cmp	r2, #31
 8002068:	dc7f      	bgt.n	800216a <__aeabi_dsub+0x5a6>
 800206a:	2120      	movs	r1, #32
 800206c:	0025      	movs	r5, r4
 800206e:	1a89      	subs	r1, r1, r2
 8002070:	0007      	movs	r7, r0
 8002072:	4088      	lsls	r0, r1
 8002074:	408d      	lsls	r5, r1
 8002076:	40d7      	lsrs	r7, r2
 8002078:	40d4      	lsrs	r4, r2
 800207a:	1e41      	subs	r1, r0, #1
 800207c:	4188      	sbcs	r0, r1
 800207e:	9b02      	ldr	r3, [sp, #8]
 8002080:	433d      	orrs	r5, r7
 8002082:	1b1b      	subs	r3, r3, r4
 8002084:	4305      	orrs	r5, r0
 8002086:	9302      	str	r3, [sp, #8]
 8002088:	4662      	mov	r2, ip
 800208a:	1b55      	subs	r5, r2, r5
 800208c:	45ac      	cmp	ip, r5
 800208e:	4192      	sbcs	r2, r2
 8002090:	9b02      	ldr	r3, [sp, #8]
 8002092:	4252      	negs	r2, r2
 8002094:	464f      	mov	r7, r9
 8002096:	1a9c      	subs	r4, r3, r2
 8002098:	e5f6      	b.n	8001c88 <__aeabi_dsub+0xc4>
 800209a:	2d00      	cmp	r5, #0
 800209c:	d000      	beq.n	80020a0 <__aeabi_dsub+0x4dc>
 800209e:	e0b7      	b.n	8002210 <__aeabi_dsub+0x64c>
 80020a0:	2a00      	cmp	r2, #0
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x4e2>
 80020a4:	e0f0      	b.n	8002288 <__aeabi_dsub+0x6c4>
 80020a6:	2601      	movs	r6, #1
 80020a8:	400e      	ands	r6, r1
 80020aa:	4663      	mov	r3, ip
 80020ac:	9802      	ldr	r0, [sp, #8]
 80020ae:	08d9      	lsrs	r1, r3, #3
 80020b0:	0742      	lsls	r2, r0, #29
 80020b2:	430a      	orrs	r2, r1
 80020b4:	08c4      	lsrs	r4, r0, #3
 80020b6:	e696      	b.n	8001de6 <__aeabi_dsub+0x222>
 80020b8:	4c85      	ldr	r4, [pc, #532]	@ (80022d0 <__aeabi_dsub+0x70c>)
 80020ba:	1aff      	subs	r7, r7, r3
 80020bc:	4014      	ands	r4, r2
 80020be:	0762      	lsls	r2, r4, #29
 80020c0:	08e4      	lsrs	r4, r4, #3
 80020c2:	e760      	b.n	8001f86 <__aeabi_dsub+0x3c2>
 80020c4:	4981      	ldr	r1, [pc, #516]	@ (80022cc <__aeabi_dsub+0x708>)
 80020c6:	428a      	cmp	r2, r1
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x508>
 80020ca:	e0c9      	b.n	8002260 <__aeabi_dsub+0x69c>
 80020cc:	4663      	mov	r3, ip
 80020ce:	18c1      	adds	r1, r0, r3
 80020d0:	4281      	cmp	r1, r0
 80020d2:	4180      	sbcs	r0, r0
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4240      	negs	r0, r0
 80020d8:	18e3      	adds	r3, r4, r3
 80020da:	181b      	adds	r3, r3, r0
 80020dc:	07dd      	lsls	r5, r3, #31
 80020de:	085c      	lsrs	r4, r3, #1
 80020e0:	2307      	movs	r3, #7
 80020e2:	0849      	lsrs	r1, r1, #1
 80020e4:	430d      	orrs	r5, r1
 80020e6:	0017      	movs	r7, r2
 80020e8:	402b      	ands	r3, r5
 80020ea:	e710      	b.n	8001f0e <__aeabi_dsub+0x34a>
 80020ec:	4663      	mov	r3, ip
 80020ee:	1a1d      	subs	r5, r3, r0
 80020f0:	45ac      	cmp	ip, r5
 80020f2:	4192      	sbcs	r2, r2
 80020f4:	2601      	movs	r6, #1
 80020f6:	9b02      	ldr	r3, [sp, #8]
 80020f8:	4252      	negs	r2, r2
 80020fa:	1b1c      	subs	r4, r3, r4
 80020fc:	4688      	mov	r8, r1
 80020fe:	1aa4      	subs	r4, r4, r2
 8002100:	400e      	ands	r6, r1
 8002102:	e5c6      	b.n	8001c92 <__aeabi_dsub+0xce>
 8002104:	4663      	mov	r3, ip
 8002106:	18c5      	adds	r5, r0, r3
 8002108:	9b02      	ldr	r3, [sp, #8]
 800210a:	4285      	cmp	r5, r0
 800210c:	4180      	sbcs	r0, r0
 800210e:	469c      	mov	ip, r3
 8002110:	4240      	negs	r0, r0
 8002112:	4464      	add	r4, ip
 8002114:	1824      	adds	r4, r4, r0
 8002116:	2701      	movs	r7, #1
 8002118:	0223      	lsls	r3, r4, #8
 800211a:	d400      	bmi.n	800211e <__aeabi_dsub+0x55a>
 800211c:	e6f5      	b.n	8001f0a <__aeabi_dsub+0x346>
 800211e:	2702      	movs	r7, #2
 8002120:	e641      	b.n	8001da6 <__aeabi_dsub+0x1e2>
 8002122:	4663      	mov	r3, ip
 8002124:	1ac5      	subs	r5, r0, r3
 8002126:	42a8      	cmp	r0, r5
 8002128:	4180      	sbcs	r0, r0
 800212a:	9b02      	ldr	r3, [sp, #8]
 800212c:	4240      	negs	r0, r0
 800212e:	1ae4      	subs	r4, r4, r3
 8002130:	2701      	movs	r7, #1
 8002132:	1a24      	subs	r4, r4, r0
 8002134:	e5a8      	b.n	8001c88 <__aeabi_dsub+0xc4>
 8002136:	9d02      	ldr	r5, [sp, #8]
 8002138:	4652      	mov	r2, sl
 800213a:	002b      	movs	r3, r5
 800213c:	3a20      	subs	r2, #32
 800213e:	40d3      	lsrs	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	4653      	mov	r3, sl
 8002144:	2b20      	cmp	r3, #32
 8002146:	d006      	beq.n	8002156 <__aeabi_dsub+0x592>
 8002148:	2240      	movs	r2, #64	@ 0x40
 800214a:	1ad2      	subs	r2, r2, r3
 800214c:	002b      	movs	r3, r5
 800214e:	4093      	lsls	r3, r2
 8002150:	4662      	mov	r2, ip
 8002152:	431a      	orrs	r2, r3
 8002154:	4693      	mov	fp, r2
 8002156:	465d      	mov	r5, fp
 8002158:	1e6b      	subs	r3, r5, #1
 800215a:	419d      	sbcs	r5, r3
 800215c:	430d      	orrs	r5, r1
 800215e:	e615      	b.n	8001d8c <__aeabi_dsub+0x1c8>
 8002160:	0762      	lsls	r2, r4, #29
 8002162:	08c0      	lsrs	r0, r0, #3
 8002164:	4302      	orrs	r2, r0
 8002166:	08e4      	lsrs	r4, r4, #3
 8002168:	e70d      	b.n	8001f86 <__aeabi_dsub+0x3c2>
 800216a:	0011      	movs	r1, r2
 800216c:	0027      	movs	r7, r4
 800216e:	3920      	subs	r1, #32
 8002170:	40cf      	lsrs	r7, r1
 8002172:	2a20      	cmp	r2, #32
 8002174:	d005      	beq.n	8002182 <__aeabi_dsub+0x5be>
 8002176:	2140      	movs	r1, #64	@ 0x40
 8002178:	1a8a      	subs	r2, r1, r2
 800217a:	4094      	lsls	r4, r2
 800217c:	0025      	movs	r5, r4
 800217e:	4305      	orrs	r5, r0
 8002180:	9503      	str	r5, [sp, #12]
 8002182:	9d03      	ldr	r5, [sp, #12]
 8002184:	1e6a      	subs	r2, r5, #1
 8002186:	4195      	sbcs	r5, r2
 8002188:	433d      	orrs	r5, r7
 800218a:	e77d      	b.n	8002088 <__aeabi_dsub+0x4c4>
 800218c:	2a00      	cmp	r2, #0
 800218e:	d100      	bne.n	8002192 <__aeabi_dsub+0x5ce>
 8002190:	e744      	b.n	800201c <__aeabi_dsub+0x458>
 8002192:	2601      	movs	r6, #1
 8002194:	400e      	ands	r6, r1
 8002196:	4663      	mov	r3, ip
 8002198:	08d9      	lsrs	r1, r3, #3
 800219a:	9b02      	ldr	r3, [sp, #8]
 800219c:	075a      	lsls	r2, r3, #29
 800219e:	430a      	orrs	r2, r1
 80021a0:	08dc      	lsrs	r4, r3, #3
 80021a2:	e6f0      	b.n	8001f86 <__aeabi_dsub+0x3c2>
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	d028      	beq.n	80021fa <__aeabi_dsub+0x636>
 80021a8:	4662      	mov	r2, ip
 80021aa:	9f02      	ldr	r7, [sp, #8]
 80021ac:	08c0      	lsrs	r0, r0, #3
 80021ae:	433a      	orrs	r2, r7
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x5f0>
 80021b2:	e6dc      	b.n	8001f6e <__aeabi_dsub+0x3aa>
 80021b4:	0762      	lsls	r2, r4, #29
 80021b6:	4310      	orrs	r0, r2
 80021b8:	2280      	movs	r2, #128	@ 0x80
 80021ba:	08e4      	lsrs	r4, r4, #3
 80021bc:	0312      	lsls	r2, r2, #12
 80021be:	4214      	tst	r4, r2
 80021c0:	d009      	beq.n	80021d6 <__aeabi_dsub+0x612>
 80021c2:	08fd      	lsrs	r5, r7, #3
 80021c4:	4215      	tst	r5, r2
 80021c6:	d106      	bne.n	80021d6 <__aeabi_dsub+0x612>
 80021c8:	4663      	mov	r3, ip
 80021ca:	2601      	movs	r6, #1
 80021cc:	002c      	movs	r4, r5
 80021ce:	08d8      	lsrs	r0, r3, #3
 80021d0:	077b      	lsls	r3, r7, #29
 80021d2:	4318      	orrs	r0, r3
 80021d4:	400e      	ands	r6, r1
 80021d6:	0f42      	lsrs	r2, r0, #29
 80021d8:	00c0      	lsls	r0, r0, #3
 80021da:	08c0      	lsrs	r0, r0, #3
 80021dc:	0752      	lsls	r2, r2, #29
 80021de:	4302      	orrs	r2, r0
 80021e0:	e601      	b.n	8001de6 <__aeabi_dsub+0x222>
 80021e2:	4663      	mov	r3, ip
 80021e4:	1a1d      	subs	r5, r3, r0
 80021e6:	45ac      	cmp	ip, r5
 80021e8:	4192      	sbcs	r2, r2
 80021ea:	9b02      	ldr	r3, [sp, #8]
 80021ec:	4252      	negs	r2, r2
 80021ee:	1b1c      	subs	r4, r3, r4
 80021f0:	000e      	movs	r6, r1
 80021f2:	4688      	mov	r8, r1
 80021f4:	2701      	movs	r7, #1
 80021f6:	1aa4      	subs	r4, r4, r2
 80021f8:	e546      	b.n	8001c88 <__aeabi_dsub+0xc4>
 80021fa:	4663      	mov	r3, ip
 80021fc:	08d9      	lsrs	r1, r3, #3
 80021fe:	9b02      	ldr	r3, [sp, #8]
 8002200:	075a      	lsls	r2, r3, #29
 8002202:	430a      	orrs	r2, r1
 8002204:	08dc      	lsrs	r4, r3, #3
 8002206:	e5ee      	b.n	8001de6 <__aeabi_dsub+0x222>
 8002208:	4663      	mov	r3, ip
 800220a:	9c02      	ldr	r4, [sp, #8]
 800220c:	9303      	str	r3, [sp, #12]
 800220e:	e6c7      	b.n	8001fa0 <__aeabi_dsub+0x3dc>
 8002210:	08c0      	lsrs	r0, r0, #3
 8002212:	2a00      	cmp	r2, #0
 8002214:	d100      	bne.n	8002218 <__aeabi_dsub+0x654>
 8002216:	e6aa      	b.n	8001f6e <__aeabi_dsub+0x3aa>
 8002218:	0762      	lsls	r2, r4, #29
 800221a:	4310      	orrs	r0, r2
 800221c:	2280      	movs	r2, #128	@ 0x80
 800221e:	08e4      	lsrs	r4, r4, #3
 8002220:	0312      	lsls	r2, r2, #12
 8002222:	4214      	tst	r4, r2
 8002224:	d0d7      	beq.n	80021d6 <__aeabi_dsub+0x612>
 8002226:	9f02      	ldr	r7, [sp, #8]
 8002228:	08fd      	lsrs	r5, r7, #3
 800222a:	4215      	tst	r5, r2
 800222c:	d1d3      	bne.n	80021d6 <__aeabi_dsub+0x612>
 800222e:	4663      	mov	r3, ip
 8002230:	2601      	movs	r6, #1
 8002232:	08d8      	lsrs	r0, r3, #3
 8002234:	077b      	lsls	r3, r7, #29
 8002236:	002c      	movs	r4, r5
 8002238:	4318      	orrs	r0, r3
 800223a:	400e      	ands	r6, r1
 800223c:	e7cb      	b.n	80021d6 <__aeabi_dsub+0x612>
 800223e:	000a      	movs	r2, r1
 8002240:	0027      	movs	r7, r4
 8002242:	3a20      	subs	r2, #32
 8002244:	40d7      	lsrs	r7, r2
 8002246:	2920      	cmp	r1, #32
 8002248:	d005      	beq.n	8002256 <__aeabi_dsub+0x692>
 800224a:	2240      	movs	r2, #64	@ 0x40
 800224c:	1a52      	subs	r2, r2, r1
 800224e:	4094      	lsls	r4, r2
 8002250:	0025      	movs	r5, r4
 8002252:	4305      	orrs	r5, r0
 8002254:	9503      	str	r5, [sp, #12]
 8002256:	9d03      	ldr	r5, [sp, #12]
 8002258:	1e6a      	subs	r2, r5, #1
 800225a:	4195      	sbcs	r5, r2
 800225c:	432f      	orrs	r7, r5
 800225e:	e610      	b.n	8001e82 <__aeabi_dsub+0x2be>
 8002260:	0014      	movs	r4, r2
 8002262:	2500      	movs	r5, #0
 8002264:	2200      	movs	r2, #0
 8002266:	e556      	b.n	8001d16 <__aeabi_dsub+0x152>
 8002268:	9b02      	ldr	r3, [sp, #8]
 800226a:	4460      	add	r0, ip
 800226c:	4699      	mov	r9, r3
 800226e:	4560      	cmp	r0, ip
 8002270:	4192      	sbcs	r2, r2
 8002272:	444c      	add	r4, r9
 8002274:	4252      	negs	r2, r2
 8002276:	0005      	movs	r5, r0
 8002278:	18a4      	adds	r4, r4, r2
 800227a:	e74c      	b.n	8002116 <__aeabi_dsub+0x552>
 800227c:	001a      	movs	r2, r3
 800227e:	001c      	movs	r4, r3
 8002280:	432a      	orrs	r2, r5
 8002282:	d000      	beq.n	8002286 <__aeabi_dsub+0x6c2>
 8002284:	e6b3      	b.n	8001fee <__aeabi_dsub+0x42a>
 8002286:	e6c9      	b.n	800201c <__aeabi_dsub+0x458>
 8002288:	2480      	movs	r4, #128	@ 0x80
 800228a:	2600      	movs	r6, #0
 800228c:	0324      	lsls	r4, r4, #12
 800228e:	e5ae      	b.n	8001dee <__aeabi_dsub+0x22a>
 8002290:	2120      	movs	r1, #32
 8002292:	2500      	movs	r5, #0
 8002294:	1a09      	subs	r1, r1, r0
 8002296:	e517      	b.n	8001cc8 <__aeabi_dsub+0x104>
 8002298:	2200      	movs	r2, #0
 800229a:	2500      	movs	r5, #0
 800229c:	4c0b      	ldr	r4, [pc, #44]	@ (80022cc <__aeabi_dsub+0x708>)
 800229e:	e53a      	b.n	8001d16 <__aeabi_dsub+0x152>
 80022a0:	2d00      	cmp	r5, #0
 80022a2:	d100      	bne.n	80022a6 <__aeabi_dsub+0x6e2>
 80022a4:	e5f6      	b.n	8001e94 <__aeabi_dsub+0x2d0>
 80022a6:	464b      	mov	r3, r9
 80022a8:	1bda      	subs	r2, r3, r7
 80022aa:	4692      	mov	sl, r2
 80022ac:	2f00      	cmp	r7, #0
 80022ae:	d100      	bne.n	80022b2 <__aeabi_dsub+0x6ee>
 80022b0:	e66f      	b.n	8001f92 <__aeabi_dsub+0x3ce>
 80022b2:	2a38      	cmp	r2, #56	@ 0x38
 80022b4:	dc05      	bgt.n	80022c2 <__aeabi_dsub+0x6fe>
 80022b6:	2680      	movs	r6, #128	@ 0x80
 80022b8:	0436      	lsls	r6, r6, #16
 80022ba:	4334      	orrs	r4, r6
 80022bc:	4688      	mov	r8, r1
 80022be:	000e      	movs	r6, r1
 80022c0:	e6d1      	b.n	8002066 <__aeabi_dsub+0x4a2>
 80022c2:	4688      	mov	r8, r1
 80022c4:	000e      	movs	r6, r1
 80022c6:	2501      	movs	r5, #1
 80022c8:	e6de      	b.n	8002088 <__aeabi_dsub+0x4c4>
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	000007ff 	.word	0x000007ff
 80022d0:	ff7fffff 	.word	0xff7fffff
 80022d4:	000007fe 	.word	0x000007fe
 80022d8:	2d00      	cmp	r5, #0
 80022da:	d100      	bne.n	80022de <__aeabi_dsub+0x71a>
 80022dc:	e668      	b.n	8001fb0 <__aeabi_dsub+0x3ec>
 80022de:	464b      	mov	r3, r9
 80022e0:	1bd9      	subs	r1, r3, r7
 80022e2:	2f00      	cmp	r7, #0
 80022e4:	d101      	bne.n	80022ea <__aeabi_dsub+0x726>
 80022e6:	468a      	mov	sl, r1
 80022e8:	e5a7      	b.n	8001e3a <__aeabi_dsub+0x276>
 80022ea:	2701      	movs	r7, #1
 80022ec:	2938      	cmp	r1, #56	@ 0x38
 80022ee:	dd00      	ble.n	80022f2 <__aeabi_dsub+0x72e>
 80022f0:	e5c7      	b.n	8001e82 <__aeabi_dsub+0x2be>
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	0412      	lsls	r2, r2, #16
 80022f6:	4314      	orrs	r4, r2
 80022f8:	e5af      	b.n	8001e5a <__aeabi_dsub+0x296>
 80022fa:	46c0      	nop			@ (mov r8, r8)

080022fc <__aeabi_d2iz>:
 80022fc:	000b      	movs	r3, r1
 80022fe:	0002      	movs	r2, r0
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	4d16      	ldr	r5, [pc, #88]	@ (800235c <__aeabi_d2iz+0x60>)
 8002304:	030c      	lsls	r4, r1, #12
 8002306:	b082      	sub	sp, #8
 8002308:	0049      	lsls	r1, r1, #1
 800230a:	2000      	movs	r0, #0
 800230c:	9200      	str	r2, [sp, #0]
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	0b24      	lsrs	r4, r4, #12
 8002312:	0d49      	lsrs	r1, r1, #21
 8002314:	0fde      	lsrs	r6, r3, #31
 8002316:	42a9      	cmp	r1, r5
 8002318:	dd04      	ble.n	8002324 <__aeabi_d2iz+0x28>
 800231a:	4811      	ldr	r0, [pc, #68]	@ (8002360 <__aeabi_d2iz+0x64>)
 800231c:	4281      	cmp	r1, r0
 800231e:	dd03      	ble.n	8002328 <__aeabi_d2iz+0x2c>
 8002320:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <__aeabi_d2iz+0x68>)
 8002322:	18f0      	adds	r0, r6, r3
 8002324:	b002      	add	sp, #8
 8002326:	bd70      	pop	{r4, r5, r6, pc}
 8002328:	2080      	movs	r0, #128	@ 0x80
 800232a:	0340      	lsls	r0, r0, #13
 800232c:	4320      	orrs	r0, r4
 800232e:	4c0e      	ldr	r4, [pc, #56]	@ (8002368 <__aeabi_d2iz+0x6c>)
 8002330:	1a64      	subs	r4, r4, r1
 8002332:	2c1f      	cmp	r4, #31
 8002334:	dd08      	ble.n	8002348 <__aeabi_d2iz+0x4c>
 8002336:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <__aeabi_d2iz+0x70>)
 8002338:	1a5b      	subs	r3, r3, r1
 800233a:	40d8      	lsrs	r0, r3
 800233c:	0003      	movs	r3, r0
 800233e:	4258      	negs	r0, r3
 8002340:	2e00      	cmp	r6, #0
 8002342:	d1ef      	bne.n	8002324 <__aeabi_d2iz+0x28>
 8002344:	0018      	movs	r0, r3
 8002346:	e7ed      	b.n	8002324 <__aeabi_d2iz+0x28>
 8002348:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <__aeabi_d2iz+0x74>)
 800234a:	9a00      	ldr	r2, [sp, #0]
 800234c:	469c      	mov	ip, r3
 800234e:	0003      	movs	r3, r0
 8002350:	4461      	add	r1, ip
 8002352:	408b      	lsls	r3, r1
 8002354:	40e2      	lsrs	r2, r4
 8002356:	4313      	orrs	r3, r2
 8002358:	e7f1      	b.n	800233e <__aeabi_d2iz+0x42>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	000003fe 	.word	0x000003fe
 8002360:	0000041d 	.word	0x0000041d
 8002364:	7fffffff 	.word	0x7fffffff
 8002368:	00000433 	.word	0x00000433
 800236c:	00000413 	.word	0x00000413
 8002370:	fffffbed 	.word	0xfffffbed

08002374 <__aeabi_i2d>:
 8002374:	b570      	push	{r4, r5, r6, lr}
 8002376:	2800      	cmp	r0, #0
 8002378:	d016      	beq.n	80023a8 <__aeabi_i2d+0x34>
 800237a:	17c3      	asrs	r3, r0, #31
 800237c:	18c5      	adds	r5, r0, r3
 800237e:	405d      	eors	r5, r3
 8002380:	0fc4      	lsrs	r4, r0, #31
 8002382:	0028      	movs	r0, r5
 8002384:	f7fe f886 	bl	8000494 <__clzsi2>
 8002388:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <__aeabi_i2d+0x58>)
 800238a:	1a1b      	subs	r3, r3, r0
 800238c:	055b      	lsls	r3, r3, #21
 800238e:	0d5b      	lsrs	r3, r3, #21
 8002390:	280a      	cmp	r0, #10
 8002392:	dc14      	bgt.n	80023be <__aeabi_i2d+0x4a>
 8002394:	0002      	movs	r2, r0
 8002396:	002e      	movs	r6, r5
 8002398:	3215      	adds	r2, #21
 800239a:	4096      	lsls	r6, r2
 800239c:	220b      	movs	r2, #11
 800239e:	1a12      	subs	r2, r2, r0
 80023a0:	40d5      	lsrs	r5, r2
 80023a2:	032d      	lsls	r5, r5, #12
 80023a4:	0b2d      	lsrs	r5, r5, #12
 80023a6:	e003      	b.n	80023b0 <__aeabi_i2d+0x3c>
 80023a8:	2400      	movs	r4, #0
 80023aa:	2300      	movs	r3, #0
 80023ac:	2500      	movs	r5, #0
 80023ae:	2600      	movs	r6, #0
 80023b0:	051b      	lsls	r3, r3, #20
 80023b2:	432b      	orrs	r3, r5
 80023b4:	07e4      	lsls	r4, r4, #31
 80023b6:	4323      	orrs	r3, r4
 80023b8:	0030      	movs	r0, r6
 80023ba:	0019      	movs	r1, r3
 80023bc:	bd70      	pop	{r4, r5, r6, pc}
 80023be:	380b      	subs	r0, #11
 80023c0:	4085      	lsls	r5, r0
 80023c2:	032d      	lsls	r5, r5, #12
 80023c4:	2600      	movs	r6, #0
 80023c6:	0b2d      	lsrs	r5, r5, #12
 80023c8:	e7f2      	b.n	80023b0 <__aeabi_i2d+0x3c>
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	0000041e 	.word	0x0000041e

080023d0 <__aeabi_ui2d>:
 80023d0:	b510      	push	{r4, lr}
 80023d2:	1e04      	subs	r4, r0, #0
 80023d4:	d010      	beq.n	80023f8 <__aeabi_ui2d+0x28>
 80023d6:	f7fe f85d 	bl	8000494 <__clzsi2>
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <__aeabi_ui2d+0x44>)
 80023dc:	1a1b      	subs	r3, r3, r0
 80023de:	055b      	lsls	r3, r3, #21
 80023e0:	0d5b      	lsrs	r3, r3, #21
 80023e2:	280a      	cmp	r0, #10
 80023e4:	dc0f      	bgt.n	8002406 <__aeabi_ui2d+0x36>
 80023e6:	220b      	movs	r2, #11
 80023e8:	0021      	movs	r1, r4
 80023ea:	1a12      	subs	r2, r2, r0
 80023ec:	40d1      	lsrs	r1, r2
 80023ee:	3015      	adds	r0, #21
 80023f0:	030a      	lsls	r2, r1, #12
 80023f2:	4084      	lsls	r4, r0
 80023f4:	0b12      	lsrs	r2, r2, #12
 80023f6:	e001      	b.n	80023fc <__aeabi_ui2d+0x2c>
 80023f8:	2300      	movs	r3, #0
 80023fa:	2200      	movs	r2, #0
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	4313      	orrs	r3, r2
 8002400:	0020      	movs	r0, r4
 8002402:	0019      	movs	r1, r3
 8002404:	bd10      	pop	{r4, pc}
 8002406:	0022      	movs	r2, r4
 8002408:	380b      	subs	r0, #11
 800240a:	4082      	lsls	r2, r0
 800240c:	0312      	lsls	r2, r2, #12
 800240e:	2400      	movs	r4, #0
 8002410:	0b12      	lsrs	r2, r2, #12
 8002412:	e7f3      	b.n	80023fc <__aeabi_ui2d+0x2c>
 8002414:	0000041e 	.word	0x0000041e

08002418 <__clzdi2>:
 8002418:	b510      	push	{r4, lr}
 800241a:	2900      	cmp	r1, #0
 800241c:	d103      	bne.n	8002426 <__clzdi2+0xe>
 800241e:	f7fe f839 	bl	8000494 <__clzsi2>
 8002422:	3020      	adds	r0, #32
 8002424:	e002      	b.n	800242c <__clzdi2+0x14>
 8002426:	0008      	movs	r0, r1
 8002428:	f7fe f834 	bl	8000494 <__clzsi2>
 800242c:	bd10      	pop	{r4, pc}
 800242e:	46c0      	nop			@ (mov r8, r8)

08002430 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	0018      	movs	r0, r3
 800243a:	230c      	movs	r3, #12
 800243c:	001a      	movs	r2, r3
 800243e:	2100      	movs	r1, #0
 8002440:	f00a f9ac 	bl	800c79c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002444:	4b2d      	ldr	r3, [pc, #180]	@ (80024fc <MX_ADC1_Init+0xcc>)
 8002446:	4a2e      	ldr	r2, [pc, #184]	@ (8002500 <MX_ADC1_Init+0xd0>)
 8002448:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800244a:	4b2c      	ldr	r3, [pc, #176]	@ (80024fc <MX_ADC1_Init+0xcc>)
 800244c:	22c0      	movs	r2, #192	@ 0xc0
 800244e:	0612      	lsls	r2, r2, #24
 8002450:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002452:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <MX_ADC1_Init+0xcc>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002458:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <MX_ADC1_Init+0xcc>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800245e:	4b27      	ldr	r3, [pc, #156]	@ (80024fc <MX_ADC1_Init+0xcc>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002464:	4b25      	ldr	r3, [pc, #148]	@ (80024fc <MX_ADC1_Init+0xcc>)
 8002466:	2204      	movs	r2, #4
 8002468:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800246a:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <MX_ADC1_Init+0xcc>)
 800246c:	2200      	movs	r2, #0
 800246e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002470:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <MX_ADC1_Init+0xcc>)
 8002472:	2200      	movs	r2, #0
 8002474:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002476:	4b21      	ldr	r3, [pc, #132]	@ (80024fc <MX_ADC1_Init+0xcc>)
 8002478:	2200      	movs	r2, #0
 800247a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800247c:	4b1f      	ldr	r3, [pc, #124]	@ (80024fc <MX_ADC1_Init+0xcc>)
 800247e:	2201      	movs	r2, #1
 8002480:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002482:	4b1e      	ldr	r3, [pc, #120]	@ (80024fc <MX_ADC1_Init+0xcc>)
 8002484:	2220      	movs	r2, #32
 8002486:	2100      	movs	r1, #0
 8002488:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800248a:	4b1c      	ldr	r3, [pc, #112]	@ (80024fc <MX_ADC1_Init+0xcc>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002490:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <MX_ADC1_Init+0xcc>)
 8002492:	2200      	movs	r2, #0
 8002494:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002496:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <MX_ADC1_Init+0xcc>)
 8002498:	222c      	movs	r2, #44	@ 0x2c
 800249a:	2100      	movs	r1, #0
 800249c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800249e:	4b17      	ldr	r3, [pc, #92]	@ (80024fc <MX_ADC1_Init+0xcc>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80024a4:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <MX_ADC1_Init+0xcc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80024aa:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <MX_ADC1_Init+0xcc>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80024b0:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <MX_ADC1_Init+0xcc>)
 80024b2:	223c      	movs	r2, #60	@ 0x3c
 80024b4:	2100      	movs	r1, #0
 80024b6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80024b8:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <MX_ADC1_Init+0xcc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024be:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <MX_ADC1_Init+0xcc>)
 80024c0:	0018      	movs	r0, r3
 80024c2:	f001 f9f5 	bl	80038b0 <HAL_ADC_Init>
 80024c6:	1e03      	subs	r3, r0, #0
 80024c8:	d001      	beq.n	80024ce <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80024ca:	f000 fdb9 	bl	8003040 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002504 <MX_ADC1_Init+0xd4>)
 80024d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	2200      	movs	r2, #0
 80024d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024e0:	1d3a      	adds	r2, r7, #4
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <MX_ADC1_Init+0xcc>)
 80024e4:	0011      	movs	r1, r2
 80024e6:	0018      	movs	r0, r3
 80024e8:	f002 f82c 	bl	8004544 <HAL_ADC_ConfigChannel>
 80024ec:	1e03      	subs	r3, r0, #0
 80024ee:	d001      	beq.n	80024f4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80024f0:	f000 fda6 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024f4:	46c0      	nop			@ (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b004      	add	sp, #16
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200001c8 	.word	0x200001c8
 8002500:	40012400 	.word	0x40012400
 8002504:	14000020 	.word	0x14000020

08002508 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b099      	sub	sp, #100	@ 0x64
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	234c      	movs	r3, #76	@ 0x4c
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	0018      	movs	r0, r3
 8002516:	2314      	movs	r3, #20
 8002518:	001a      	movs	r2, r3
 800251a:	2100      	movs	r1, #0
 800251c:	f00a f93e 	bl	800c79c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002520:	2414      	movs	r4, #20
 8002522:	193b      	adds	r3, r7, r4
 8002524:	0018      	movs	r0, r3
 8002526:	2338      	movs	r3, #56	@ 0x38
 8002528:	001a      	movs	r2, r3
 800252a:	2100      	movs	r1, #0
 800252c:	f00a f936 	bl	800c79c <memset>
  if(adcHandle->Instance==ADC1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a20      	ldr	r2, [pc, #128]	@ (80025b8 <HAL_ADC_MspInit+0xb0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d139      	bne.n	80025ae <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800253a:	193b      	adds	r3, r7, r4
 800253c:	2280      	movs	r2, #128	@ 0x80
 800253e:	01d2      	lsls	r2, r2, #7
 8002540:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002542:	193b      	adds	r3, r7, r4
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002548:	193b      	adds	r3, r7, r4
 800254a:	0018      	movs	r0, r3
 800254c:	f004 faf2 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 8002550:	1e03      	subs	r3, r0, #0
 8002552:	d001      	beq.n	8002558 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002554:	f000 fd74 	bl	8003040 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002558:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <HAL_ADC_MspInit+0xb4>)
 800255a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800255c:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <HAL_ADC_MspInit+0xb4>)
 800255e:	2180      	movs	r1, #128	@ 0x80
 8002560:	0349      	lsls	r1, r1, #13
 8002562:	430a      	orrs	r2, r1
 8002564:	661a      	str	r2, [r3, #96]	@ 0x60
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <HAL_ADC_MspInit+0xb4>)
 8002568:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	035b      	lsls	r3, r3, #13
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <HAL_ADC_MspInit+0xb4>)
 8002576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002578:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <HAL_ADC_MspInit+0xb4>)
 800257a:	2101      	movs	r1, #1
 800257c:	430a      	orrs	r2, r1
 800257e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002580:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <HAL_ADC_MspInit+0xb4>)
 8002582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002584:	2201      	movs	r2, #1
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATT_Pin;
 800258c:	214c      	movs	r1, #76	@ 0x4c
 800258e:	187b      	adds	r3, r7, r1
 8002590:	2202      	movs	r2, #2
 8002592:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002594:	187b      	adds	r3, r7, r1
 8002596:	2203      	movs	r2, #3
 8002598:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	187b      	adds	r3, r7, r1
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 80025a0:	187a      	adds	r2, r7, r1
 80025a2:	23a0      	movs	r3, #160	@ 0xa0
 80025a4:	05db      	lsls	r3, r3, #23
 80025a6:	0011      	movs	r1, r2
 80025a8:	0018      	movs	r0, r3
 80025aa:	f002 fe33 	bl	8005214 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b019      	add	sp, #100	@ 0x64
 80025b4:	bd90      	pop	{r4, r7, pc}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	40012400 	.word	0x40012400
 80025bc:	40021000 	.word	0x40021000

080025c0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a09      	ldr	r2, [pc, #36]	@ (80025f4 <HAL_ADC_MspDeInit+0x34>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d10b      	bne.n	80025ea <HAL_ADC_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_ADC_MspDeInit+0x38>)
 80025d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025d6:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <HAL_ADC_MspDeInit+0x38>)
 80025d8:	4908      	ldr	r1, [pc, #32]	@ (80025fc <HAL_ADC_MspDeInit+0x3c>)
 80025da:	400a      	ands	r2, r1
 80025dc:	661a      	str	r2, [r3, #96]	@ 0x60

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN5
    */
    HAL_GPIO_DeInit(BATT_GPIO_Port, BATT_Pin);
 80025de:	23a0      	movs	r3, #160	@ 0xa0
 80025e0:	05db      	lsls	r3, r3, #23
 80025e2:	2102      	movs	r1, #2
 80025e4:	0018      	movs	r0, r3
 80025e6:	f003 f847 	bl	8005678 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b002      	add	sp, #8
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	40012400 	.word	0x40012400
 80025f8:	40021000 	.word	0x40021000
 80025fc:	ffefffff 	.word	0xffefffff

08002600 <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b08b      	sub	sp, #44	@ 0x2c
 8002604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002606:	2414      	movs	r4, #20
 8002608:	193b      	adds	r3, r7, r4
 800260a:	0018      	movs	r0, r3
 800260c:	2314      	movs	r3, #20
 800260e:	001a      	movs	r2, r3
 8002610:	2100      	movs	r1, #0
 8002612:	f00a f8c3 	bl	800c79c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002616:	4b7c      	ldr	r3, [pc, #496]	@ (8002808 <MX_GPIO_Init+0x208>)
 8002618:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800261a:	4b7b      	ldr	r3, [pc, #492]	@ (8002808 <MX_GPIO_Init+0x208>)
 800261c:	2104      	movs	r1, #4
 800261e:	430a      	orrs	r2, r1
 8002620:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002622:	4b79      	ldr	r3, [pc, #484]	@ (8002808 <MX_GPIO_Init+0x208>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002626:	2204      	movs	r2, #4
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800262e:	4b76      	ldr	r3, [pc, #472]	@ (8002808 <MX_GPIO_Init+0x208>)
 8002630:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002632:	4b75      	ldr	r3, [pc, #468]	@ (8002808 <MX_GPIO_Init+0x208>)
 8002634:	2120      	movs	r1, #32
 8002636:	430a      	orrs	r2, r1
 8002638:	64da      	str	r2, [r3, #76]	@ 0x4c
 800263a:	4b73      	ldr	r3, [pc, #460]	@ (8002808 <MX_GPIO_Init+0x208>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263e:	2220      	movs	r2, #32
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	4b70      	ldr	r3, [pc, #448]	@ (8002808 <MX_GPIO_Init+0x208>)
 8002648:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800264a:	4b6f      	ldr	r3, [pc, #444]	@ (8002808 <MX_GPIO_Init+0x208>)
 800264c:	2101      	movs	r1, #1
 800264e:	430a      	orrs	r2, r1
 8002650:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002652:	4b6d      	ldr	r3, [pc, #436]	@ (8002808 <MX_GPIO_Init+0x208>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	4b6a      	ldr	r3, [pc, #424]	@ (8002808 <MX_GPIO_Init+0x208>)
 8002660:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002662:	4b69      	ldr	r3, [pc, #420]	@ (8002808 <MX_GPIO_Init+0x208>)
 8002664:	2102      	movs	r1, #2
 8002666:	430a      	orrs	r2, r1
 8002668:	64da      	str	r2, [r3, #76]	@ 0x4c
 800266a:	4b67      	ldr	r3, [pc, #412]	@ (8002808 <MX_GPIO_Init+0x208>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266e:	2202      	movs	r2, #2
 8002670:	4013      	ands	r3, r2
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_CS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8002676:	2388      	movs	r3, #136	@ 0x88
 8002678:	0059      	lsls	r1, r3, #1
 800267a:	23a0      	movs	r3, #160	@ 0xa0
 800267c:	05db      	lsls	r3, r3, #23
 800267e:	2201      	movs	r2, #1
 8002680:	0018      	movs	r0, r3
 8002682:	f003 f92d 	bl	80058e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_INB_Pin|MOTOR_INA_Pin, GPIO_PIN_RESET);
 8002686:	23c0      	movs	r3, #192	@ 0xc0
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4860      	ldr	r0, [pc, #384]	@ (800280c <MX_GPIO_Init+0x20c>)
 800268c:	2200      	movs	r2, #0
 800268e:	0019      	movs	r1, r3
 8002690:	f003 f926 	bl	80058e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_RESET);
 8002694:	2380      	movs	r3, #128	@ 0x80
 8002696:	00d9      	lsls	r1, r3, #3
 8002698:	23a0      	movs	r3, #160	@ 0xa0
 800269a:	05db      	lsls	r3, r3, #23
 800269c:	2200      	movs	r2, #0
 800269e:	0018      	movs	r0, r3
 80026a0:	f003 f91e 	bl	80058e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80026a4:	193b      	adds	r3, r7, r4
 80026a6:	22e0      	movs	r2, #224	@ 0xe0
 80026a8:	0212      	lsls	r2, r2, #8
 80026aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ac:	193b      	adds	r3, r7, r4
 80026ae:	2203      	movs	r2, #3
 80026b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	4a55      	ldr	r2, [pc, #340]	@ (8002810 <MX_GPIO_Init+0x210>)
 80026bc:	0019      	movs	r1, r3
 80026be:	0010      	movs	r0, r2
 80026c0:	f002 fda8 	bl	8005214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	220f      	movs	r2, #15
 80026c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ca:	193b      	adds	r3, r7, r4
 80026cc:	2203      	movs	r2, #3
 80026ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002814 <MX_GPIO_Init+0x214>)
 80026da:	0019      	movs	r1, r3
 80026dc:	0010      	movs	r0, r2
 80026de:	f002 fd99 	bl	8005214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_15;
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002818 <MX_GPIO_Init+0x218>)
 80026e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	2203      	movs	r2, #3
 80026ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	193a      	adds	r2, r7, r4
 80026f6:	23a0      	movs	r3, #160	@ 0xa0
 80026f8:	05db      	lsls	r3, r3, #23
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f002 fd89 	bl	8005214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_INT_Pin;
 8002702:	193b      	adds	r3, r7, r4
 8002704:	2208      	movs	r2, #8
 8002706:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002708:	193b      	adds	r3, r7, r4
 800270a:	2288      	movs	r2, #136	@ 0x88
 800270c:	0352      	lsls	r2, r2, #13
 800270e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	193b      	adds	r3, r7, r4
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LORA_INT_GPIO_Port, &GPIO_InitStruct);
 8002716:	193a      	adds	r2, r7, r4
 8002718:	23a0      	movs	r3, #160	@ 0xa0
 800271a:	05db      	lsls	r3, r3, #23
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f002 fd78 	bl	8005214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LORA_CS_Pin|LORA_RST_Pin|EN_12V_Pin;
 8002724:	0021      	movs	r1, r4
 8002726:	187b      	adds	r3, r7, r1
 8002728:	22a2      	movs	r2, #162	@ 0xa2
 800272a:	00d2      	lsls	r2, r2, #3
 800272c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272e:	000c      	movs	r4, r1
 8002730:	193b      	adds	r3, r7, r4
 8002732:	2201      	movs	r2, #1
 8002734:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	193b      	adds	r3, r7, r4
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	193b      	adds	r3, r7, r4
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	193a      	adds	r2, r7, r4
 8002744:	23a0      	movs	r3, #160	@ 0xa0
 8002746:	05db      	lsls	r3, r3, #23
 8002748:	0011      	movs	r1, r2
 800274a:	0018      	movs	r0, r3
 800274c:	f002 fd62 	bl	8005214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 8002750:	193b      	adds	r3, r7, r4
 8002752:	4a32      	ldr	r2, [pc, #200]	@ (800281c <MX_GPIO_Init+0x21c>)
 8002754:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002756:	193b      	adds	r3, r7, r4
 8002758:	2203      	movs	r2, #3
 800275a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	193b      	adds	r3, r7, r4
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002762:	193b      	adds	r3, r7, r4
 8002764:	4a29      	ldr	r2, [pc, #164]	@ (800280c <MX_GPIO_Init+0x20c>)
 8002766:	0019      	movs	r1, r3
 8002768:	0010      	movs	r0, r2
 800276a:	f002 fd53 	bl	8005214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_INB_Pin|MOTOR_INA_Pin;
 800276e:	0021      	movs	r1, r4
 8002770:	187b      	adds	r3, r7, r1
 8002772:	22c0      	movs	r2, #192	@ 0xc0
 8002774:	00d2      	lsls	r2, r2, #3
 8002776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	000c      	movs	r4, r1
 800277a:	193b      	adds	r3, r7, r4
 800277c:	2201      	movs	r2, #1
 800277e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	193b      	adds	r3, r7, r4
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	193b      	adds	r3, r7, r4
 8002788:	2200      	movs	r2, #0
 800278a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278c:	193b      	adds	r3, r7, r4
 800278e:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <MX_GPIO_Init+0x20c>)
 8002790:	0019      	movs	r1, r3
 8002792:	0010      	movs	r0, r2
 8002794:	f002 fd3e 	bl	8005214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8002798:	193b      	adds	r3, r7, r4
 800279a:	2280      	movs	r2, #128	@ 0x80
 800279c:	0092      	lsls	r2, r2, #2
 800279e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a0:	193b      	adds	r3, r7, r4
 80027a2:	2200      	movs	r2, #0
 80027a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	193b      	adds	r3, r7, r4
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 80027ac:	193a      	adds	r2, r7, r4
 80027ae:	23a0      	movs	r3, #160	@ 0xa0
 80027b0:	05db      	lsls	r3, r3, #23
 80027b2:	0011      	movs	r1, r2
 80027b4:	0018      	movs	r0, r3
 80027b6:	f002 fd2d 	bl	8005214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_WAKE_Pin;
 80027ba:	0021      	movs	r1, r4
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	2280      	movs	r2, #128	@ 0x80
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2284      	movs	r2, #132	@ 0x84
 80027c8:	0392      	lsls	r2, r2, #14
 80027ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_WAKE_GPIO_Port, &GPIO_InitStruct);
 80027d2:	187a      	adds	r2, r7, r1
 80027d4:	23a0      	movs	r3, #160	@ 0xa0
 80027d6:	05db      	lsls	r3, r3, #23
 80027d8:	0011      	movs	r1, r2
 80027da:	0018      	movs	r0, r3
 80027dc:	f002 fd1a 	bl	8005214 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	2006      	movs	r0, #6
 80027e6:	f002 fccb 	bl	8005180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80027ea:	2006      	movs	r0, #6
 80027ec:	f002 fce8 	bl	80051c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80027f0:	2200      	movs	r2, #0
 80027f2:	2100      	movs	r1, #0
 80027f4:	2007      	movs	r0, #7
 80027f6:	f002 fcc3 	bl	8005180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80027fa:	2007      	movs	r0, #7
 80027fc:	f002 fce0 	bl	80051c0 <HAL_NVIC_EnableIRQ>

}
 8002800:	46c0      	nop			@ (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b00b      	add	sp, #44	@ 0x2c
 8002806:	bd90      	pop	{r4, r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	50000400 	.word	0x50000400
 8002810:	50000800 	.word	0x50000800
 8002814:	50001400 	.word	0x50001400
 8002818:	00009005 	.word	0x00009005
 800281c:	0000f93f 	.word	0x0000f93f

08002820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b08d      	sub	sp, #52	@ 0x34
 8002824:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002826:	f000 fe2c 	bl	8003482 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800282a:	f000 f95b 	bl	8002ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800282e:	f7ff fee7 	bl	8002600 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002832:	f000 fc15 	bl	8003060 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002836:	f000 fd4b 	bl	80032d0 <MX_USART1_UART_Init>
//  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

	log_monitor_init(tracelog);
 800283a:	4b93      	ldr	r3, [pc, #588]	@ (8002a88 <main+0x268>)
 800283c:	0018      	movs	r0, r3
 800283e:	f007 fb59 	bl	8009ef4 <log_monitor_init>

	SX126xIoInit();
 8002842:	f009 fc57 	bl	800c0f4 <SX126xIoInit>
	uint16_t readSyncWord = 0;
 8002846:	1dbb      	adds	r3, r7, #6
 8002848:	2200      	movs	r2, #0
 800284a:	801a      	strh	r2, [r3, #0]
	SX126xReadRegisters(REG_LR_SYNCWORD, (uint8_t *)&readSyncWord, 2);
 800284c:	1db9      	adds	r1, r7, #6
 800284e:	23e8      	movs	r3, #232	@ 0xe8
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	2202      	movs	r2, #2
 8002854:	0018      	movs	r0, r3
 8002856:	f009 fd9b 	bl	800c390 <SX126xReadRegisters>
	LOG_INFO(TAG, "SyncWord = 0x%04x", readSyncWord);
 800285a:	4b8c      	ldr	r3, [pc, #560]	@ (8002a8c <main+0x26c>)
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	1dbb      	adds	r3, r7, #6
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	001a      	movs	r2, r3
 8002864:	4b8a      	ldr	r3, [pc, #552]	@ (8002a90 <main+0x270>)
 8002866:	0019      	movs	r1, r3
 8002868:	f007 fb52 	bl	8009f10 <LOG_INFO>


	RadioEvents.TxDone = OnTxDone;
 800286c:	4b89      	ldr	r3, [pc, #548]	@ (8002a94 <main+0x274>)
 800286e:	4a8a      	ldr	r2, [pc, #552]	@ (8002a98 <main+0x278>)
 8002870:	601a      	str	r2, [r3, #0]
	RadioEvents.RxDone = OnRxDone;
 8002872:	4b88      	ldr	r3, [pc, #544]	@ (8002a94 <main+0x274>)
 8002874:	4a89      	ldr	r2, [pc, #548]	@ (8002a9c <main+0x27c>)
 8002876:	609a      	str	r2, [r3, #8]
	Radio.Init(&RadioEvents);
 8002878:	4b89      	ldr	r3, [pc, #548]	@ (8002aa0 <main+0x280>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a85      	ldr	r2, [pc, #532]	@ (8002a94 <main+0x274>)
 800287e:	0010      	movs	r0, r2
 8002880:	4798      	blx	r3
	Radio.SetChannel(RF_FREQUENCY);
 8002882:	4b87      	ldr	r3, [pc, #540]	@ (8002aa0 <main+0x280>)
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	4a87      	ldr	r2, [pc, #540]	@ (8002aa4 <main+0x284>)
 8002888:	0010      	movs	r0, r2
 800288a:	4798      	blx	r3
	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800288c:	4b84      	ldr	r3, [pc, #528]	@ (8002aa0 <main+0x280>)
 800288e:	6a1c      	ldr	r4, [r3, #32]
 8002890:	2300      	movs	r3, #0
 8002892:	9308      	str	r3, [sp, #32]
 8002894:	2300      	movs	r3, #0
 8002896:	9307      	str	r3, [sp, #28]
 8002898:	2300      	movs	r3, #0
 800289a:	9306      	str	r3, [sp, #24]
 800289c:	2300      	movs	r3, #0
 800289e:	9305      	str	r3, [sp, #20]
 80028a0:	2301      	movs	r3, #1
 80028a2:	9304      	str	r3, [sp, #16]
 80028a4:	2300      	movs	r3, #0
 80028a6:	9303      	str	r3, [sp, #12]
 80028a8:	2308      	movs	r3, #8
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	2301      	movs	r3, #1
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	2307      	movs	r3, #7
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2300      	movs	r3, #0
 80028b6:	2200      	movs	r2, #0
 80028b8:	2116      	movs	r1, #22
 80028ba:	2001      	movs	r0, #1
 80028bc:	47a0      	blx	r4
					  LORA_SPREADING_FACTOR, LORA_CODINGRATE,
					  LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
					  true, 0, 0, LORA_IQ_INVERSION_ON, 0);
	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80028be:	4b78      	ldr	r3, [pc, #480]	@ (8002aa0 <main+0x280>)
 80028c0:	69dc      	ldr	r4, [r3, #28]
 80028c2:	2301      	movs	r3, #1
 80028c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80028c6:	2300      	movs	r3, #0
 80028c8:	9308      	str	r3, [sp, #32]
 80028ca:	2300      	movs	r3, #0
 80028cc:	9307      	str	r3, [sp, #28]
 80028ce:	2300      	movs	r3, #0
 80028d0:	9306      	str	r3, [sp, #24]
 80028d2:	2301      	movs	r3, #1
 80028d4:	9305      	str	r3, [sp, #20]
 80028d6:	2300      	movs	r3, #0
 80028d8:	9304      	str	r3, [sp, #16]
 80028da:	2300      	movs	r3, #0
 80028dc:	9303      	str	r3, [sp, #12]
 80028de:	2300      	movs	r3, #0
 80028e0:	9302      	str	r3, [sp, #8]
 80028e2:	2308      	movs	r3, #8
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	2300      	movs	r3, #0
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2301      	movs	r3, #1
 80028ec:	2207      	movs	r2, #7
 80028ee:	2100      	movs	r1, #0
 80028f0:	2001      	movs	r0, #1
 80028f2:	47a0      	blx	r4
					  LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
					  LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
					  0, true, 0, 0, LORA_IQ_INVERSION_ON, true);
	LOG_INFO(TAG, "Starting CallPoint");
 80028f4:	4b65      	ldr	r3, [pc, #404]	@ (8002a8c <main+0x26c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa8 <main+0x288>)
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f007 fb07 	bl	8009f10 <LOG_INFO>
	Radio.Rx(0);
 8002902:	4b67      	ldr	r3, [pc, #412]	@ (8002aa0 <main+0x280>)
 8002904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002906:	2000      	movs	r0, #0
 8002908:	4798      	blx	r3
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Radio.BgIrqProcess();
 800290a:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <main+0x280>)
 800290c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800290e:	4798      	blx	r3

	  run_motor();
 8002910:	f000 fa20 	bl	8002d54 <run_motor>

	  /// Press button, send first status message and start process
	  if(start_process == 1){
 8002914:	4b65      	ldr	r3, [pc, #404]	@ (8002aac <main+0x28c>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d11f      	bne.n	800295e <main+0x13e>
		  txpkt.deveui = CALLPOINT_DEVEUI;
 800291e:	4b64      	ldr	r3, [pc, #400]	@ (8002ab0 <main+0x290>)
 8002920:	2273      	movs	r2, #115	@ 0x73
 8002922:	701a      	strb	r2, [r3, #0]
		  txpkt.cmd = CMD_STATUS_DAILY;
 8002924:	4b62      	ldr	r3, [pc, #392]	@ (8002ab0 <main+0x290>)
 8002926:	2202      	movs	r2, #2
 8002928:	705a      	strb	r2, [r3, #1]
		  txpkt.value_len = 1;
 800292a:	4b61      	ldr	r3, [pc, #388]	@ (8002ab0 <main+0x290>)
 800292c:	2201      	movs	r2, #1
 800292e:	709a      	strb	r2, [r3, #2]
		  txpkt.value[0] = adc_get_value(ADC_CHANNEL_5);
 8002930:	4b60      	ldr	r3, [pc, #384]	@ (8002ab4 <main+0x294>)
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f95a 	bl	8002bec <adc_get_value>
 8002938:	0003      	movs	r3, r0
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab0 <main+0x290>)
 800293e:	70da      	strb	r2, [r3, #3]
		  txpkt.req_ack = 0;
 8002940:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab0 <main+0x290>)
 8002942:	2200      	movs	r2, #0
 8002944:	72da      	strb	r2, [r3, #11]
		  send_packet();
 8002946:	f000 f9b7 	bl	8002cb8 <send_packet>
		  LOG_EVENT(TAG, "Sent daily status to gateway.");
 800294a:	4b50      	ldr	r3, [pc, #320]	@ (8002a8c <main+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ab8 <main+0x298>)
 8002950:	0011      	movs	r1, r2
 8002952:	0018      	movs	r0, r3
 8002954:	f007 fb78 	bl	800a048 <LOG_EVENT>
		  start_process = 0;
 8002958:	4b54      	ldr	r3, [pc, #336]	@ (8002aac <main+0x28c>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
	  }

	  /// Check ACK timeout
	  if(txpkt.req_ack == 1 && txpkt.resp_ack == 0){
 800295e:	4b54      	ldr	r3, [pc, #336]	@ (8002ab0 <main+0x290>)
 8002960:	7adb      	ldrb	r3, [r3, #11]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d118      	bne.n	8002998 <main+0x178>
 8002966:	4b52      	ldr	r3, [pc, #328]	@ (8002ab0 <main+0x290>)
 8002968:	7b1b      	ldrb	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d114      	bne.n	8002998 <main+0x178>
		  if(HAL_GetTick() - ack_timeout > 5000){
 800296e:	f000 fdf9 	bl	8003564 <HAL_GetTick>
 8002972:	0002      	movs	r2, r0
 8002974:	4b51      	ldr	r3, [pc, #324]	@ (8002abc <main+0x29c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	4a51      	ldr	r2, [pc, #324]	@ (8002ac0 <main+0x2a0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d90b      	bls.n	8002998 <main+0x178>
			  LOG_ERROR(TAG, "gateway not response ACK.", txpkt.deveui);
 8002980:	4b42      	ldr	r3, [pc, #264]	@ (8002a8c <main+0x26c>)
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab0 <main+0x290>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	001a      	movs	r2, r3
 800298a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac4 <main+0x2a4>)
 800298c:	0019      	movs	r1, r3
 800298e:	f007 fb0d 	bl	8009fac <LOG_ERROR>
			  txpkt.req_ack = 0;
 8002992:	4b47      	ldr	r3, [pc, #284]	@ (8002ab0 <main+0x290>)
 8002994:	2200      	movs	r2, #0
 8002996:	72da      	strb	r2, [r3, #11]
		  }
	  }

	  if(rxpkt.recv == 1){
 8002998:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac8 <main+0x2a8>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d1b4      	bne.n	800290a <main+0xea>
		  if(rxpkt.deveui == CALLPOINT_DEVEUI || rxpkt.deveui == ALL_DEVEUI){
 80029a0:	4b49      	ldr	r3, [pc, #292]	@ (8002ac8 <main+0x2a8>)
 80029a2:	2246      	movs	r2, #70	@ 0x46
 80029a4:	5c9b      	ldrb	r3, [r3, r2]
 80029a6:	2b73      	cmp	r3, #115	@ 0x73
 80029a8:	d004      	beq.n	80029b4 <main+0x194>
 80029aa:	4b47      	ldr	r3, [pc, #284]	@ (8002ac8 <main+0x2a8>)
 80029ac:	2246      	movs	r2, #70	@ 0x46
 80029ae:	5c9b      	ldrb	r3, [r3, r2]
 80029b0:	2bff      	cmp	r3, #255	@ 0xff
 80029b2:	d154      	bne.n	8002a5e <main+0x23e>
			  switch(rxpkt.cmd){
 80029b4:	4b44      	ldr	r3, [pc, #272]	@ (8002ac8 <main+0x2a8>)
 80029b6:	2247      	movs	r2, #71	@ 0x47
 80029b8:	5c9b      	ldrb	r3, [r3, r2]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d012      	beq.n	80029e4 <main+0x1c4>
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d12e      	bne.n	8002a20 <main+0x200>
				  case CMD_ACK:
			  		  txpkt.req_ack = 0;
 80029c2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab0 <main+0x290>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	72da      	strb	r2, [r3, #11]
			  		  txpkt.resp_ack = 1;
 80029c8:	4b39      	ldr	r3, [pc, #228]	@ (8002ab0 <main+0x290>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	731a      	strb	r2, [r3, #12]
			  		  LOG_INFO(TAG, "Gateway responsed ACK.", rxpkt.deveui);
 80029ce:	4b2f      	ldr	r3, [pc, #188]	@ (8002a8c <main+0x26c>)
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac8 <main+0x2a8>)
 80029d4:	2246      	movs	r2, #70	@ 0x46
 80029d6:	5c9b      	ldrb	r3, [r3, r2]
 80029d8:	001a      	movs	r2, r3
 80029da:	4b3c      	ldr	r3, [pc, #240]	@ (8002acc <main+0x2ac>)
 80029dc:	0019      	movs	r1, r3
 80029de:	f007 fa97 	bl	8009f10 <LOG_INFO>
				  break;
 80029e2:	e01e      	b.n	8002a22 <main+0x202>
				  case CMD_SET_STANDBY_TIME:
					  standby_time = rxpkt.value[0]*1000;
 80029e4:	4b38      	ldr	r3, [pc, #224]	@ (8002ac8 <main+0x2a8>)
 80029e6:	2249      	movs	r2, #73	@ 0x49
 80029e8:	5c9b      	ldrb	r3, [r3, r2]
 80029ea:	001a      	movs	r2, r3
 80029ec:	0013      	movs	r3, r2
 80029ee:	015b      	lsls	r3, r3, #5
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	189b      	adds	r3, r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	001a      	movs	r2, r3
 80029fa:	4b35      	ldr	r3, [pc, #212]	@ (8002ad0 <main+0x2b0>)
 80029fc:	601a      	str	r2, [r3, #0]
					  LOG_INFO(TAG, "Set standby time to %dms.", standby_time);
 80029fe:	4b23      	ldr	r3, [pc, #140]	@ (8002a8c <main+0x26c>)
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	4b33      	ldr	r3, [pc, #204]	@ (8002ad0 <main+0x2b0>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b33      	ldr	r3, [pc, #204]	@ (8002ad4 <main+0x2b4>)
 8002a08:	0019      	movs	r1, r3
 8002a0a:	f007 fa81 	bl	8009f10 <LOG_INFO>
					  start_motor_process = 1;
 8002a0e:	4b32      	ldr	r3, [pc, #200]	@ (8002ad8 <main+0x2b8>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
					  motor_time = HAL_GetTick();
 8002a14:	f000 fda6 	bl	8003564 <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	4b30      	ldr	r3, [pc, #192]	@ (8002adc <main+0x2bc>)
 8002a1c:	601a      	str	r2, [r3, #0]
				  break;
 8002a1e:	e000      	b.n	8002a22 <main+0x202>
				  default:
				  break;
 8002a20:	46c0      	nop			@ (mov r8, r8)
			  }

			  /// Packet require ACK
			  if(rxpkt.req_ack == 1){
 8002a22:	4b29      	ldr	r3, [pc, #164]	@ (8002ac8 <main+0x2a8>)
 8002a24:	2251      	movs	r2, #81	@ 0x51
 8002a26:	5c9b      	ldrb	r3, [r3, r2]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d118      	bne.n	8002a5e <main+0x23e>
				  txpkt.deveui = rxpkt.deveui;
 8002a2c:	4b26      	ldr	r3, [pc, #152]	@ (8002ac8 <main+0x2a8>)
 8002a2e:	2246      	movs	r2, #70	@ 0x46
 8002a30:	5c9a      	ldrb	r2, [r3, r2]
 8002a32:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab0 <main+0x290>)
 8002a34:	701a      	strb	r2, [r3, #0]
				  txpkt.cmd = CMD_ACK;
 8002a36:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab0 <main+0x290>)
 8002a38:	2204      	movs	r2, #4
 8002a3a:	705a      	strb	r2, [r3, #1]
				  txpkt.value_len = 0;
 8002a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab0 <main+0x290>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	709a      	strb	r2, [r3, #2]
				  txpkt.req_ack = 0;
 8002a42:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab0 <main+0x290>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	72da      	strb	r2, [r3, #11]
				  send_packet();
 8002a48:	f000 f936 	bl	8002cb8 <send_packet>
				  LOG_EVENT(TAG, "Sent ACK to DevEUI 0x%02x.", txpkt.deveui);
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <main+0x26c>)
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	4b17      	ldr	r3, [pc, #92]	@ (8002ab0 <main+0x290>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	001a      	movs	r2, r3
 8002a56:	4b22      	ldr	r3, [pc, #136]	@ (8002ae0 <main+0x2c0>)
 8002a58:	0019      	movs	r1, r3
 8002a5a:	f007 faf5 	bl	800a048 <LOG_EVENT>
			  }
		  }

		  rxpkt.recv = 0;
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <main+0x2a8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
		  rxpkt.recvlen = 0;
 8002a64:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <main+0x2a8>)
 8002a66:	2245      	movs	r2, #69	@ 0x45
 8002a68:	2100      	movs	r1, #0
 8002a6a:	5499      	strb	r1, [r3, r2]
		  rxpkt.deveui = 0;
 8002a6c:	4b16      	ldr	r3, [pc, #88]	@ (8002ac8 <main+0x2a8>)
 8002a6e:	2246      	movs	r2, #70	@ 0x46
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]
		  rxpkt.cmd = CMD_UNKNOWN;
 8002a74:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <main+0x2a8>)
 8002a76:	2247      	movs	r2, #71	@ 0x47
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]
		  rxpkt.value_len = 0;
 8002a7c:	4b12      	ldr	r3, [pc, #72]	@ (8002ac8 <main+0x2a8>)
 8002a7e:	2248      	movs	r2, #72	@ 0x48
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]
	  Radio.BgIrqProcess();
 8002a84:	e741      	b.n	800290a <main+0xea>
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	08002c8d 	.word	0x08002c8d
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	0800d254 	.word	0x0800d254
 8002a94:	2000022c 	.word	0x2000022c
 8002a98:	08002f49 	.word	0x08002f49
 8002a9c:	08002f61 	.word	0x08002f61
 8002aa0:	0800d884 	.word	0x0800d884
 8002aa4:	3703dcc0 	.word	0x3703dcc0
 8002aa8:	0800d268 	.word	0x0800d268
 8002aac:	2000024c 	.word	0x2000024c
 8002ab0:	20000004 	.word	0x20000004
 8002ab4:	14000020 	.word	0x14000020
 8002ab8:	0800d27c 	.word	0x0800d27c
 8002abc:	200002a4 	.word	0x200002a4
 8002ac0:	00001388 	.word	0x00001388
 8002ac4:	0800d29c 	.word	0x0800d29c
 8002ac8:	20000250 	.word	0x20000250
 8002acc:	0800d2b8 	.word	0x0800d2b8
 8002ad0:	200002a8 	.word	0x200002a8
 8002ad4:	0800d2d0 	.word	0x0800d2d0
 8002ad8:	200002b0 	.word	0x200002b0
 8002adc:	200002ac 	.word	0x200002ac
 8002ae0:	0800d2ec 	.word	0x0800d2ec

08002ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b097      	sub	sp, #92	@ 0x5c
 8002ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aea:	2410      	movs	r4, #16
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	0018      	movs	r0, r3
 8002af0:	2348      	movs	r3, #72	@ 0x48
 8002af2:	001a      	movs	r2, r3
 8002af4:	2100      	movs	r1, #0
 8002af6:	f009 fe51 	bl	800c79c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002afa:	003b      	movs	r3, r7
 8002afc:	0018      	movs	r0, r3
 8002afe:	2310      	movs	r3, #16
 8002b00:	001a      	movs	r2, r3
 8002b02:	2100      	movs	r1, #0
 8002b04:	f009 fe4a 	bl	800c79c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b08:	2380      	movs	r3, #128	@ 0x80
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f002 ff4b 	bl	80059a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002b12:	0021      	movs	r1, r4
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	2210      	movs	r2, #16
 8002b18:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b1a:	187b      	adds	r3, r7, r1
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	2200      	movs	r2, #0
 8002b24:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002b26:	187b      	adds	r3, r7, r1
 8002b28:	22b0      	movs	r2, #176	@ 0xb0
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	2200      	movs	r2, #0
 8002b30:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	0018      	movs	r0, r3
 8002b36:	f002 ffb5 	bl	8005aa4 <HAL_RCC_OscConfig>
 8002b3a:	1e03      	subs	r3, r0, #0
 8002b3c:	d001      	beq.n	8002b42 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002b3e:	f000 fa7f 	bl	8003040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b42:	003b      	movs	r3, r7
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002b48:	003b      	movs	r3, r7
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b4e:	003b      	movs	r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b54:	003b      	movs	r3, r7
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b5a:	003b      	movs	r3, r7
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f003 fd24 	bl	80065ac <HAL_RCC_ClockConfig>
 8002b64:	1e03      	subs	r3, r0, #0
 8002b66:	d001      	beq.n	8002b6c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002b68:	f000 fa6a 	bl	8003040 <Error_Handler>
  }
}
 8002b6c:	46c0      	nop			@ (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b017      	add	sp, #92	@ 0x5c
 8002b72:	bd90      	pop	{r4, r7, pc}

08002b74 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	1dbb      	adds	r3, r7, #6
 8002b7e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == LORA_INT_Pin){
 8002b80:	1dbb      	adds	r3, r7, #6
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d101      	bne.n	8002b8c <HAL_GPIO_EXTI_Rising_Callback+0x18>
		extern void RadioOnDioIrq(void);
		RadioOnDioIrq();
 8002b88:	f008 fa50 	bl	800b02c <RadioOnDioIrq>
	}
}
 8002b8c:	46c0      	nop			@ (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	1dbb      	adds	r3, r7, #6
 8002b9e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BTN_WAKE_Pin){
 8002ba0:	1dbb      	adds	r3, r7, #6
 8002ba2:	881a      	ldrh	r2, [r3, #0]
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d117      	bne.n	8002bdc <HAL_GPIO_EXTI_Falling_Callback+0x48>
		for(uint32_t i=0; i<120000; i++) __NOP(); //10ms
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e003      	b.n	8002bba <HAL_GPIO_EXTI_Falling_Callback+0x26>
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a09      	ldr	r2, [pc, #36]	@ (8002be4 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d9f7      	bls.n	8002bb2 <HAL_GPIO_EXTI_Falling_Callback+0x1e>
		if(HAL_GPIO_ReadPin(BTN_WAKE_GPIO_Port, BTN_WAKE_Pin) == GPIO_PIN_RESET){
 8002bc2:	2380      	movs	r3, #128	@ 0x80
 8002bc4:	011a      	lsls	r2, r3, #4
 8002bc6:	23a0      	movs	r3, #160	@ 0xa0
 8002bc8:	05db      	lsls	r3, r3, #23
 8002bca:	0011      	movs	r1, r2
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f002 fe5b 	bl	8005888 <HAL_GPIO_ReadPin>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d102      	bne.n	8002bdc <HAL_GPIO_EXTI_Falling_Callback+0x48>
			start_process = 1;
 8002bd6:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002bdc:	46c0      	nop			@ (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	0001d4bf 	.word	0x0001d4bf
 8002be8:	2000024c 	.word	0x2000024c

08002bec <adc_get_value>:

uint32_t adc_get_value(uint32_t channel){
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	uint32_t ADCxConvertedValues = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	230c      	movs	r3, #12
 8002c00:	001a      	movs	r2, r3
 8002c02:	2100      	movs	r1, #0
 8002c04:	f009 fdca 	bl	800c79c <memset>

	MX_ADC1_Init();
 8002c08:	f7ff fc12 	bl	8002430 <MX_ADC1_Init>
	if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <adc_get_value+0x9c>)
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f002 f902 	bl	8004e18 <HAL_ADCEx_Calibration_Start>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d001      	beq.n	8002c1c <adc_get_value+0x30>
		Error_Handler();
 8002c18:	f000 fa12 	bl	8003040 <Error_Handler>

	sConfig.Channel = channel;
 8002c1c:	2108      	movs	r1, #8
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	2200      	movs	r2, #0
 8002c28:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002c2a:	187b      	adds	r3, r7, r1
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c30:	187a      	adds	r2, r7, r1
 8002c32:	4b15      	ldr	r3, [pc, #84]	@ (8002c88 <adc_get_value+0x9c>)
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f001 fc84 	bl	8004544 <HAL_ADC_ConfigChannel>
 8002c3c:	1e03      	subs	r3, r0, #0
 8002c3e:	d001      	beq.n	8002c44 <adc_get_value+0x58>
		Error_Handler();
 8002c40:	f000 f9fe 	bl	8003040 <Error_Handler>

	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8002c44:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <adc_get_value+0x9c>)
 8002c46:	0018      	movs	r0, r3
 8002c48:	f001 fb10 	bl	800426c <HAL_ADC_Start>
 8002c4c:	1e03      	subs	r3, r0, #0
 8002c4e:	d001      	beq.n	8002c54 <adc_get_value+0x68>
		Error_Handler();
 8002c50:	f000 f9f6 	bl	8003040 <Error_Handler>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002c54:	2301      	movs	r3, #1
 8002c56:	425a      	negs	r2, r3
 8002c58:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <adc_get_value+0x9c>)
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f001 fbb1 	bl	80043c4 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(&hadc1);
 8002c62:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <adc_get_value+0x9c>)
 8002c64:	0018      	movs	r0, r3
 8002c66:	f001 fb61 	bl	800432c <HAL_ADC_Stop>
	ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8002c6a:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <adc_get_value+0x9c>)
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f001 fc4d 	bl	800450c <HAL_ADC_GetValue>
 8002c72:	0003      	movs	r3, r0
 8002c74:	617b      	str	r3, [r7, #20]

	HAL_ADC_DeInit(&hadc1);
 8002c76:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <adc_get_value+0x9c>)
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f001 fa4b 	bl	8004114 <HAL_ADC_DeInit>

	return ADCxConvertedValues;
 8002c7e:	697b      	ldr	r3, [r7, #20]
}
 8002c80:	0018      	movs	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b006      	add	sp, #24
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200001c8 	.word	0x200001c8

08002c8c <tracelog>:





static void tracelog(char *str){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), 1000);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7fd fa36 	bl	8000108 <strlen>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	23fa      	movs	r3, #250	@ 0xfa
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4803      	ldr	r0, [pc, #12]	@ (8002cb4 <tracelog+0x28>)
 8002ca8:	f006 f8e2 	bl	8008e70 <HAL_UART_Transmit>
}
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	2000031c 	.word	0x2000031c

08002cb8 <send_packet>:

void send_packet(void){
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b092      	sub	sp, #72	@ 0x48
 8002cbc:	af00      	add	r7, sp, #0
	uint8_t txbuffer[BUFFER_SIZE];

	txpkt.resp_ack = 0;
 8002cbe:	4b22      	ldr	r3, [pc, #136]	@ (8002d48 <send_packet+0x90>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	731a      	strb	r2, [r3, #12]
	txbuffer[0] = txpkt.deveui;
 8002cc4:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <send_packet+0x90>)
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	701a      	strb	r2, [r3, #0]
	txbuffer[1] = (uint8_t)txpkt.cmd;
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <send_packet+0x90>)
 8002cce:	785a      	ldrb	r2, [r3, #1]
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	705a      	strb	r2, [r3, #1]
	txbuffer[2] = txpkt.req_ack;
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d48 <send_packet+0x90>)
 8002cd6:	7ada      	ldrb	r2, [r3, #11]
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	709a      	strb	r2, [r3, #2]
	txbuffer[3] = txpkt.value_len;
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <send_packet+0x90>)
 8002cde:	789a      	ldrb	r2, [r3, #2]
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	70da      	strb	r2, [r3, #3]
	for(uint8_t i=0; i<txpkt.value_len; i++)
 8002ce4:	2347      	movs	r3, #71	@ 0x47
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e00f      	b.n	8002d0e <send_packet+0x56>
		txbuffer[4+i] = txpkt.value[i];
 8002cee:	2047      	movs	r0, #71	@ 0x47
 8002cf0:	183b      	adds	r3, r7, r0
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	183b      	adds	r3, r7, r0
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	4913      	ldr	r1, [pc, #76]	@ (8002d48 <send_packet+0x90>)
 8002cfc:	188a      	adds	r2, r1, r2
 8002cfe:	78d1      	ldrb	r1, [r2, #3]
 8002d00:	1d3a      	adds	r2, r7, #4
 8002d02:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<txpkt.value_len; i++)
 8002d04:	183b      	adds	r3, r7, r0
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	183b      	adds	r3, r7, r0
 8002d0a:	3201      	adds	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d48 <send_packet+0x90>)
 8002d10:	789b      	ldrb	r3, [r3, #2]
 8002d12:	2247      	movs	r2, #71	@ 0x47
 8002d14:	18ba      	adds	r2, r7, r2
 8002d16:	7812      	ldrb	r2, [r2, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d3e8      	bcc.n	8002cee <send_packet+0x36>

	if(txpkt.req_ack == 1) ack_timeout = HAL_GetTick();
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <send_packet+0x90>)
 8002d1e:	7adb      	ldrb	r3, [r3, #11]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d104      	bne.n	8002d2e <send_packet+0x76>
 8002d24:	f000 fc1e 	bl	8003564 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	4b08      	ldr	r3, [pc, #32]	@ (8002d4c <send_packet+0x94>)
 8002d2c:	601a      	str	r2, [r3, #0]

	Radio.Send(txbuffer, 4+txpkt.value_len);
 8002d2e:	4b08      	ldr	r3, [pc, #32]	@ (8002d50 <send_packet+0x98>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	4a05      	ldr	r2, [pc, #20]	@ (8002d48 <send_packet+0x90>)
 8002d34:	7892      	ldrb	r2, [r2, #2]
 8002d36:	3204      	adds	r2, #4
 8002d38:	b2d1      	uxtb	r1, r2
 8002d3a:	1d3a      	adds	r2, r7, #4
 8002d3c:	0010      	movs	r0, r2
 8002d3e:	4798      	blx	r3
}
 8002d40:	46c0      	nop			@ (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b012      	add	sp, #72	@ 0x48
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000004 	.word	0x20000004
 8002d4c:	200002a4 	.word	0x200002a4
 8002d50:	0800d884 	.word	0x0800d884

08002d54 <run_motor>:

void run_motor(void){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
	static uint8_t motor_state = 0;
	static uint8_t run_motor = 0;

	if(start_motor_process == 1){
 8002d58:	4b70      	ldr	r3, [pc, #448]	@ (8002f1c <run_motor+0x1c8>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d115      	bne.n	8002d8c <run_motor+0x38>
		if(HAL_GetTick() - motor_time > standby_time && run_motor == 0){
 8002d60:	f000 fc00 	bl	8003564 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	4b6e      	ldr	r3, [pc, #440]	@ (8002f20 <run_motor+0x1cc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1ad2      	subs	r2, r2, r3
 8002d6c:	4b6d      	ldr	r3, [pc, #436]	@ (8002f24 <run_motor+0x1d0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d90b      	bls.n	8002d8c <run_motor+0x38>
 8002d74:	4b6c      	ldr	r3, [pc, #432]	@ (8002f28 <run_motor+0x1d4>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d107      	bne.n	8002d8c <run_motor+0x38>
			motor_time = HAL_GetTick();
 8002d7c:	f000 fbf2 	bl	8003564 <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	4b67      	ldr	r3, [pc, #412]	@ (8002f20 <run_motor+0x1cc>)
 8002d84:	601a      	str	r2, [r3, #0]
			run_motor = 1;
 8002d86:	4b68      	ldr	r3, [pc, #416]	@ (8002f28 <run_motor+0x1d4>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(start_motor_process == 1 && run_motor == 1){
 8002d8c:	4b63      	ldr	r3, [pc, #396]	@ (8002f1c <run_motor+0x1c8>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d000      	beq.n	8002d96 <run_motor+0x42>
 8002d94:	e0be      	b.n	8002f14 <run_motor+0x1c0>
 8002d96:	4b64      	ldr	r3, [pc, #400]	@ (8002f28 <run_motor+0x1d4>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d000      	beq.n	8002da0 <run_motor+0x4c>
 8002d9e:	e0b9      	b.n	8002f14 <run_motor+0x1c0>
		HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	00d9      	lsls	r1, r3, #3
 8002da4:	23a0      	movs	r3, #160	@ 0xa0
 8002da6:	05db      	lsls	r3, r3, #23
 8002da8:	2201      	movs	r2, #1
 8002daa:	0018      	movs	r0, r3
 8002dac:	f002 fd98 	bl	80058e0 <HAL_GPIO_WritePin>
		if(HAL_GetTick() - motor_time > 500 && motor_state == 0){
 8002db0:	f000 fbd8 	bl	8003564 <HAL_GetTick>
 8002db4:	0002      	movs	r2, r0
 8002db6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f20 <run_motor+0x1cc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	1ad2      	subs	r2, r2, r3
 8002dbc:	23fa      	movs	r3, #250	@ 0xfa
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d920      	bls.n	8002e06 <run_motor+0xb2>
 8002dc4:	4b59      	ldr	r3, [pc, #356]	@ (8002f2c <run_motor+0x1d8>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d11c      	bne.n	8002e06 <run_motor+0xb2>
			motor_time = HAL_GetTick();
 8002dcc:	f000 fbca 	bl	8003564 <HAL_GetTick>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	4b53      	ldr	r3, [pc, #332]	@ (8002f20 <run_motor+0x1cc>)
 8002dd4:	601a      	str	r2, [r3, #0]
			LOG_INFO(TAG, "RUN MOTOR");
 8002dd6:	4b56      	ldr	r3, [pc, #344]	@ (8002f30 <run_motor+0x1dc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a56      	ldr	r2, [pc, #344]	@ (8002f34 <run_motor+0x1e0>)
 8002ddc:	0011      	movs	r1, r2
 8002dde:	0018      	movs	r0, r3
 8002de0:	f007 f896 	bl	8009f10 <LOG_INFO>
			HAL_GPIO_WritePin(MOTOR_INA_GPIO_Port, MOTOR_INA_Pin, GPIO_PIN_RESET);
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4853      	ldr	r0, [pc, #332]	@ (8002f38 <run_motor+0x1e4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	0019      	movs	r1, r3
 8002dee:	f002 fd77 	bl	80058e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_INB_GPIO_Port, MOTOR_INB_Pin, GPIO_PIN_SET);
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4850      	ldr	r0, [pc, #320]	@ (8002f38 <run_motor+0x1e4>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	f002 fd70 	bl	80058e0 <HAL_GPIO_WritePin>
			motor_state = 1;
 8002e00:	4b4a      	ldr	r3, [pc, #296]	@ (8002f2c <run_motor+0x1d8>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GetTick() - motor_time > 7000 && motor_state == 1){
 8002e06:	f000 fbad 	bl	8003564 <HAL_GetTick>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	4b44      	ldr	r3, [pc, #272]	@ (8002f20 <run_motor+0x1cc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	4a4a      	ldr	r2, [pc, #296]	@ (8002f3c <run_motor+0x1e8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d919      	bls.n	8002e4c <run_motor+0xf8>
 8002e18:	4b44      	ldr	r3, [pc, #272]	@ (8002f2c <run_motor+0x1d8>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d115      	bne.n	8002e4c <run_motor+0xf8>
			motor_time = HAL_GetTick();
 8002e20:	f000 fba0 	bl	8003564 <HAL_GetTick>
 8002e24:	0002      	movs	r2, r0
 8002e26:	4b3e      	ldr	r3, [pc, #248]	@ (8002f20 <run_motor+0x1cc>)
 8002e28:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(MOTOR_INA_GPIO_Port, MOTOR_INA_Pin, GPIO_PIN_RESET);
 8002e2a:	2380      	movs	r3, #128	@ 0x80
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4842      	ldr	r0, [pc, #264]	@ (8002f38 <run_motor+0x1e4>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	0019      	movs	r1, r3
 8002e34:	f002 fd54 	bl	80058e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_INB_GPIO_Port, MOTOR_INB_Pin, GPIO_PIN_RESET);
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	483e      	ldr	r0, [pc, #248]	@ (8002f38 <run_motor+0x1e4>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	0019      	movs	r1, r3
 8002e42:	f002 fd4d 	bl	80058e0 <HAL_GPIO_WritePin>
			motor_state = 2;
 8002e46:	4b39      	ldr	r3, [pc, #228]	@ (8002f2c <run_motor+0x1d8>)
 8002e48:	2202      	movs	r2, #2
 8002e4a:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GetTick() - motor_time > 7000 && motor_state == 2){
 8002e4c:	f000 fb8a 	bl	8003564 <HAL_GetTick>
 8002e50:	0002      	movs	r2, r0
 8002e52:	4b33      	ldr	r3, [pc, #204]	@ (8002f20 <run_motor+0x1cc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	4a38      	ldr	r2, [pc, #224]	@ (8002f3c <run_motor+0x1e8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d919      	bls.n	8002e92 <run_motor+0x13e>
 8002e5e:	4b33      	ldr	r3, [pc, #204]	@ (8002f2c <run_motor+0x1d8>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d115      	bne.n	8002e92 <run_motor+0x13e>
			motor_time = HAL_GetTick();
 8002e66:	f000 fb7d 	bl	8003564 <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f20 <run_motor+0x1cc>)
 8002e6e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(MOTOR_INA_GPIO_Port, MOTOR_INA_Pin, GPIO_PIN_SET);
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4830      	ldr	r0, [pc, #192]	@ (8002f38 <run_motor+0x1e4>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	0019      	movs	r1, r3
 8002e7a:	f002 fd31 	bl	80058e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_INB_GPIO_Port, MOTOR_INB_Pin, GPIO_PIN_RESET);
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	482d      	ldr	r0, [pc, #180]	@ (8002f38 <run_motor+0x1e4>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	0019      	movs	r1, r3
 8002e88:	f002 fd2a 	bl	80058e0 <HAL_GPIO_WritePin>
			motor_state = 3;
 8002e8c:	4b27      	ldr	r3, [pc, #156]	@ (8002f2c <run_motor+0x1d8>)
 8002e8e:	2203      	movs	r2, #3
 8002e90:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GetTick() - motor_time > 7000 && motor_state == 3){
 8002e92:	f000 fb67 	bl	8003564 <HAL_GetTick>
 8002e96:	0002      	movs	r2, r0
 8002e98:	4b21      	ldr	r3, [pc, #132]	@ (8002f20 <run_motor+0x1cc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	4a27      	ldr	r2, [pc, #156]	@ (8002f3c <run_motor+0x1e8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d937      	bls.n	8002f14 <run_motor+0x1c0>
 8002ea4:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <run_motor+0x1d8>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d133      	bne.n	8002f14 <run_motor+0x1c0>
			HAL_GPIO_WritePin(MOTOR_INA_GPIO_Port, MOTOR_INA_Pin, GPIO_PIN_RESET);
 8002eac:	2380      	movs	r3, #128	@ 0x80
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4821      	ldr	r0, [pc, #132]	@ (8002f38 <run_motor+0x1e4>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	f002 fd13 	bl	80058e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR_INB_GPIO_Port, MOTOR_INB_Pin, GPIO_PIN_RESET);
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	481e      	ldr	r0, [pc, #120]	@ (8002f38 <run_motor+0x1e4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	f002 fd0c 	bl	80058e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_RESET);
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	00d9      	lsls	r1, r3, #3
 8002ecc:	23a0      	movs	r3, #160	@ 0xa0
 8002ece:	05db      	lsls	r3, r3, #23
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f002 fd04 	bl	80058e0 <HAL_GPIO_WritePin>
			motor_state = 0;
 8002ed8:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <run_motor+0x1d8>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
			run_motor = 0;
 8002ede:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <run_motor+0x1d4>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
			start_motor_process = 0;
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <run_motor+0x1c8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]

			txpkt.deveui = CALLPOINT_DEVEUI;
 8002eea:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <run_motor+0x1ec>)
 8002eec:	2273      	movs	r2, #115	@ 0x73
 8002eee:	701a      	strb	r2, [r3, #0]
			txpkt.cmd = CMD_STATUS_ENDCALLPOINT;
 8002ef0:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <run_motor+0x1ec>)
 8002ef2:	2206      	movs	r2, #6
 8002ef4:	705a      	strb	r2, [r3, #1]
			txpkt.value_len = 0;
 8002ef6:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <run_motor+0x1ec>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	709a      	strb	r2, [r3, #2]
			txpkt.req_ack = 1;
 8002efc:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <run_motor+0x1ec>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	72da      	strb	r2, [r3, #11]
			send_packet();
 8002f02:	f7ff fed9 	bl	8002cb8 <send_packet>
			LOG_EVENT(TAG, "Sent status end callpoint to gateway.");
 8002f06:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <run_motor+0x1dc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f44 <run_motor+0x1f0>)
 8002f0c:	0011      	movs	r1, r2
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f007 f89a 	bl	800a048 <LOG_EVENT>
		}
	}
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	200002b0 	.word	0x200002b0
 8002f20:	200002ac 	.word	0x200002ac
 8002f24:	200002a8 	.word	0x200002a8
 8002f28:	200002b1 	.word	0x200002b1
 8002f2c:	200002b2 	.word	0x200002b2
 8002f30:	20000000 	.word	0x20000000
 8002f34:	0800d308 	.word	0x0800d308
 8002f38:	50000400 	.word	0x50000400
 8002f3c:	00001b58 	.word	0x00001b58
 8002f40:	20000004 	.word	0x20000004
 8002f44:	0800d314 	.word	0x0800d314

08002f48 <OnTxDone>:

void OnTxDone(void){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
	Radio.Rx(0);
 8002f4c:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <OnTxDone+0x14>)
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f50:	2000      	movs	r0, #0
 8002f52:	4798      	blx	r3
}
 8002f54:	46c0      	nop			@ (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	0800d884 	.word	0x0800d884

08002f60 <OnRxDone>:

/**@brief Function to be executed on Radio Rx Done event
 */
void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr){
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	000c      	movs	r4, r1
 8002f6a:	0010      	movs	r0, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	250a      	movs	r5, #10
 8002f70:	197b      	adds	r3, r7, r5
 8002f72:	1c22      	adds	r2, r4, #0
 8002f74:	801a      	strh	r2, [r3, #0]
 8002f76:	2408      	movs	r4, #8
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	1c02      	adds	r2, r0, #0
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	1c0a      	adds	r2, r1, #0
 8002f82:	701a      	strb	r2, [r3, #0]
	rxpkt.recv = 1;
 8002f84:	4b2c      	ldr	r3, [pc, #176]	@ (8003038 <OnRxDone+0xd8>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]

	rxpkt.rssi = rssi;
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003038 <OnRxDone+0xd8>)
 8002f8c:	193a      	adds	r2, r7, r4
 8002f8e:	8812      	ldrh	r2, [r2, #0]
 8002f90:	805a      	strh	r2, [r3, #2]
	rxpkt.snr = snr;
 8002f92:	4b29      	ldr	r3, [pc, #164]	@ (8003038 <OnRxDone+0xd8>)
 8002f94:	1dfa      	adds	r2, r7, #7
 8002f96:	7812      	ldrb	r2, [r2, #0]
 8002f98:	711a      	strb	r2, [r3, #4]

	rxpkt.recvlen = size;
 8002f9a:	197b      	adds	r3, r7, r5
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b2d9      	uxtb	r1, r3
 8002fa0:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <OnRxDone+0xd8>)
 8002fa2:	2245      	movs	r2, #69	@ 0x45
 8002fa4:	5499      	strb	r1, [r3, r2]
	memset(rxpkt.recvbuffer, 0, BUFFER_SIZE);
 8002fa6:	4b25      	ldr	r3, [pc, #148]	@ (800303c <OnRxDone+0xdc>)
 8002fa8:	2240      	movs	r2, #64	@ 0x40
 8002faa:	2100      	movs	r1, #0
 8002fac:	0018      	movs	r0, r3
 8002fae:	f009 fbf5 	bl	800c79c <memset>
	memcpy(rxpkt.recvbuffer, payload, rxpkt.recvlen);
 8002fb2:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <OnRxDone+0xd8>)
 8002fb4:	2245      	movs	r2, #69	@ 0x45
 8002fb6:	5c9b      	ldrb	r3, [r3, r2]
 8002fb8:	001a      	movs	r2, r3
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800303c <OnRxDone+0xdc>)
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f009 fc32 	bl	800c828 <memcpy>

	rxpkt.deveui = rxpkt.recvbuffer[0];
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8003038 <OnRxDone+0xd8>)
 8002fc6:	7959      	ldrb	r1, [r3, #5]
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <OnRxDone+0xd8>)
 8002fca:	2246      	movs	r2, #70	@ 0x46
 8002fcc:	5499      	strb	r1, [r3, r2]
	rxpkt.cmd = (lora_pktcmd_t)rxpkt.recvbuffer[1];
 8002fce:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <OnRxDone+0xd8>)
 8002fd0:	7999      	ldrb	r1, [r3, #6]
 8002fd2:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <OnRxDone+0xd8>)
 8002fd4:	2247      	movs	r2, #71	@ 0x47
 8002fd6:	5499      	strb	r1, [r3, r2]
	rxpkt.req_ack = rxpkt.recvbuffer[2];
 8002fd8:	4b17      	ldr	r3, [pc, #92]	@ (8003038 <OnRxDone+0xd8>)
 8002fda:	79d9      	ldrb	r1, [r3, #7]
 8002fdc:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <OnRxDone+0xd8>)
 8002fde:	2251      	movs	r2, #81	@ 0x51
 8002fe0:	5499      	strb	r1, [r3, r2]
	rxpkt.value_len = rxpkt.recvbuffer[3];
 8002fe2:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <OnRxDone+0xd8>)
 8002fe4:	7a19      	ldrb	r1, [r3, #8]
 8002fe6:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <OnRxDone+0xd8>)
 8002fe8:	2248      	movs	r2, #72	@ 0x48
 8002fea:	5499      	strb	r1, [r3, r2]
	for(uint8_t i=0; i<rxpkt.value_len; i++)
 8002fec:	2317      	movs	r3, #23
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e013      	b.n	800301e <OnRxDone+0xbe>
		rxpkt.value[i] = rxpkt.recvbuffer[i+4];
 8002ff6:	2417      	movs	r4, #23
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	1d1a      	adds	r2, r3, #4
 8002ffe:	193b      	adds	r3, r7, r4
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	490d      	ldr	r1, [pc, #52]	@ (8003038 <OnRxDone+0xd8>)
 8003004:	188a      	adds	r2, r1, r2
 8003006:	7950      	ldrb	r0, [r2, #5]
 8003008:	4a0b      	ldr	r2, [pc, #44]	@ (8003038 <OnRxDone+0xd8>)
 800300a:	2149      	movs	r1, #73	@ 0x49
 800300c:	18d3      	adds	r3, r2, r3
 800300e:	185b      	adds	r3, r3, r1
 8003010:	1c02      	adds	r2, r0, #0
 8003012:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<rxpkt.value_len; i++)
 8003014:	193b      	adds	r3, r7, r4
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	193b      	adds	r3, r7, r4
 800301a:	3201      	adds	r2, #1
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <OnRxDone+0xd8>)
 8003020:	2248      	movs	r2, #72	@ 0x48
 8003022:	5c9b      	ldrb	r3, [r3, r2]
 8003024:	2217      	movs	r2, #23
 8003026:	18ba      	adds	r2, r7, r2
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d3e3      	bcc.n	8002ff6 <OnRxDone+0x96>
}
 800302e:	46c0      	nop			@ (mov r8, r8)
 8003030:	46c0      	nop			@ (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b006      	add	sp, #24
 8003036:	bdb0      	pop	{r4, r5, r7, pc}
 8003038:	20000250 	.word	0x20000250
 800303c:	20000255 	.word	0x20000255

08003040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003044:	b672      	cpsid	i
}
 8003046:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003048:	46c0      	nop			@ (mov r8, r8)
 800304a:	e7fd      	b.n	8003048 <Error_Handler+0x8>

0800304c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b002      	add	sp, #8
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003064:	4b1b      	ldr	r3, [pc, #108]	@ (80030d4 <MX_SPI1_Init+0x74>)
 8003066:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <MX_SPI1_Init+0x78>)
 8003068:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800306a:	4b1a      	ldr	r3, [pc, #104]	@ (80030d4 <MX_SPI1_Init+0x74>)
 800306c:	2282      	movs	r2, #130	@ 0x82
 800306e:	0052      	lsls	r2, r2, #1
 8003070:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003072:	4b18      	ldr	r3, [pc, #96]	@ (80030d4 <MX_SPI1_Init+0x74>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003078:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <MX_SPI1_Init+0x74>)
 800307a:	22e0      	movs	r2, #224	@ 0xe0
 800307c:	00d2      	lsls	r2, r2, #3
 800307e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003080:	4b14      	ldr	r3, [pc, #80]	@ (80030d4 <MX_SPI1_Init+0x74>)
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003086:	4b13      	ldr	r3, [pc, #76]	@ (80030d4 <MX_SPI1_Init+0x74>)
 8003088:	2200      	movs	r2, #0
 800308a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800308c:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <MX_SPI1_Init+0x74>)
 800308e:	2280      	movs	r2, #128	@ 0x80
 8003090:	0092      	lsls	r2, r2, #2
 8003092:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003094:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <MX_SPI1_Init+0x74>)
 8003096:	2208      	movs	r2, #8
 8003098:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800309a:	4b0e      	ldr	r3, [pc, #56]	@ (80030d4 <MX_SPI1_Init+0x74>)
 800309c:	2200      	movs	r2, #0
 800309e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030a0:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <MX_SPI1_Init+0x74>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a6:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <MX_SPI1_Init+0x74>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030ac:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <MX_SPI1_Init+0x74>)
 80030ae:	2207      	movs	r2, #7
 80030b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030b2:	4b08      	ldr	r3, [pc, #32]	@ (80030d4 <MX_SPI1_Init+0x74>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030b8:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <MX_SPI1_Init+0x74>)
 80030ba:	2208      	movs	r2, #8
 80030bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030be:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <MX_SPI1_Init+0x74>)
 80030c0:	0018      	movs	r0, r3
 80030c2:	f004 fd73 	bl	8007bac <HAL_SPI_Init>
 80030c6:	1e03      	subs	r3, r0, #0
 80030c8:	d001      	beq.n	80030ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80030ca:	f7ff ffb9 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	200002b4 	.word	0x200002b4
 80030d8:	40013000 	.word	0x40013000

080030dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b08b      	sub	sp, #44	@ 0x2c
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	2414      	movs	r4, #20
 80030e6:	193b      	adds	r3, r7, r4
 80030e8:	0018      	movs	r0, r3
 80030ea:	2314      	movs	r3, #20
 80030ec:	001a      	movs	r2, r3
 80030ee:	2100      	movs	r1, #0
 80030f0:	f009 fb54 	bl	800c79c <memset>
  if(spiHandle->Instance==SPI1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003168 <HAL_SPI_MspInit+0x8c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d130      	bne.n	8003160 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030fe:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <HAL_SPI_MspInit+0x90>)
 8003100:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003102:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <HAL_SPI_MspInit+0x90>)
 8003104:	2180      	movs	r1, #128	@ 0x80
 8003106:	0149      	lsls	r1, r1, #5
 8003108:	430a      	orrs	r2, r1
 800310a:	661a      	str	r2, [r3, #96]	@ 0x60
 800310c:	4b17      	ldr	r3, [pc, #92]	@ (800316c <HAL_SPI_MspInit+0x90>)
 800310e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	015b      	lsls	r3, r3, #5
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311a:	4b14      	ldr	r3, [pc, #80]	@ (800316c <HAL_SPI_MspInit+0x90>)
 800311c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800311e:	4b13      	ldr	r3, [pc, #76]	@ (800316c <HAL_SPI_MspInit+0x90>)
 8003120:	2101      	movs	r1, #1
 8003122:	430a      	orrs	r2, r1
 8003124:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003126:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_SPI_MspInit+0x90>)
 8003128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312a:	2201      	movs	r2, #1
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003132:	0021      	movs	r1, r4
 8003134:	187b      	adds	r3, r7, r1
 8003136:	22e0      	movs	r2, #224	@ 0xe0
 8003138:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	187b      	adds	r3, r7, r1
 800313c:	2202      	movs	r2, #2
 800313e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	187b      	adds	r3, r7, r1
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003146:	187b      	adds	r3, r7, r1
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800314c:	187b      	adds	r3, r7, r1
 800314e:	2205      	movs	r2, #5
 8003150:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003152:	187a      	adds	r2, r7, r1
 8003154:	23a0      	movs	r3, #160	@ 0xa0
 8003156:	05db      	lsls	r3, r3, #23
 8003158:	0011      	movs	r1, r2
 800315a:	0018      	movs	r0, r3
 800315c:	f002 f85a 	bl	8005214 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b00b      	add	sp, #44	@ 0x2c
 8003166:	bd90      	pop	{r4, r7, pc}
 8003168:	40013000 	.word	0x40013000
 800316c:	40021000 	.word	0x40021000

08003170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003176:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <HAL_MspInit+0x44>)
 8003178:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800317a:	4b0e      	ldr	r3, [pc, #56]	@ (80031b4 <HAL_MspInit+0x44>)
 800317c:	2180      	movs	r1, #128	@ 0x80
 800317e:	0549      	lsls	r1, r1, #21
 8003180:	430a      	orrs	r2, r1
 8003182:	659a      	str	r2, [r3, #88]	@ 0x58
 8003184:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_MspInit+0x44>)
 8003186:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003188:	2380      	movs	r3, #128	@ 0x80
 800318a:	055b      	lsls	r3, r3, #21
 800318c:	4013      	ands	r3, r2
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <HAL_MspInit+0x44>)
 8003194:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003196:	4b07      	ldr	r3, [pc, #28]	@ (80031b4 <HAL_MspInit+0x44>)
 8003198:	2101      	movs	r1, #1
 800319a:	430a      	orrs	r2, r1
 800319c:	661a      	str	r2, [r3, #96]	@ 0x60
 800319e:	4b05      	ldr	r3, [pc, #20]	@ (80031b4 <HAL_MspInit+0x44>)
 80031a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a2:	2201      	movs	r2, #1
 80031a4:	4013      	ands	r3, r2
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b002      	add	sp, #8
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	40021000 	.word	0x40021000

080031b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031bc:	46c0      	nop			@ (mov r8, r8)
 80031be:	e7fd      	b.n	80031bc <NMI_Handler+0x4>

080031c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	e7fd      	b.n	80031c4 <HardFault_Handler+0x4>

080031c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031e0:	f000 f9b0 	bl	8003544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e4:	46c0      	nop			@ (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_INT_Pin);
 80031ee:	2008      	movs	r0, #8
 80031f0:	f002 fbb0 	bl	8005954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80031f4:	46c0      	nop			@ (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_WAKE_Pin);
 80031fe:	2380      	movs	r3, #128	@ 0x80
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	0018      	movs	r0, r3
 8003204:	f002 fba6 	bl	8005954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003208:	46c0      	nop			@ (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003218:	4a14      	ldr	r2, [pc, #80]	@ (800326c <_sbrk+0x5c>)
 800321a:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <_sbrk+0x60>)
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003224:	4b13      	ldr	r3, [pc, #76]	@ (8003274 <_sbrk+0x64>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d102      	bne.n	8003232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800322c:	4b11      	ldr	r3, [pc, #68]	@ (8003274 <_sbrk+0x64>)
 800322e:	4a12      	ldr	r2, [pc, #72]	@ (8003278 <_sbrk+0x68>)
 8003230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003232:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <_sbrk+0x64>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	18d3      	adds	r3, r2, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	429a      	cmp	r2, r3
 800323e:	d207      	bcs.n	8003250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003240:	f009 fac6 	bl	800c7d0 <__errno>
 8003244:	0003      	movs	r3, r0
 8003246:	220c      	movs	r2, #12
 8003248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800324a:	2301      	movs	r3, #1
 800324c:	425b      	negs	r3, r3
 800324e:	e009      	b.n	8003264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003250:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <_sbrk+0x64>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003256:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <_sbrk+0x64>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	18d2      	adds	r2, r2, r3
 800325e:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <_sbrk+0x64>)
 8003260:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	0018      	movs	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	b006      	add	sp, #24
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20002000 	.word	0x20002000
 8003270:	00000400 	.word	0x00000400
 8003274:	20000318 	.word	0x20000318
 8003278:	20000690 	.word	0x20000690

0800327c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003280:	4b11      	ldr	r3, [pc, #68]	@ (80032c8 <SystemInit+0x4c>)
 8003282:	2280      	movs	r2, #128	@ 0x80
 8003284:	0512      	lsls	r2, r2, #20
 8003286:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8003288:	4a10      	ldr	r2, [pc, #64]	@ (80032cc <SystemInit+0x50>)
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	58d2      	ldr	r2, [r2, r3]
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	025b      	lsls	r3, r3, #9
 8003292:	401a      	ands	r2, r3
 8003294:	2380      	movs	r3, #128	@ 0x80
 8003296:	025b      	lsls	r3, r3, #9
 8003298:	429a      	cmp	r2, r3
 800329a:	d112      	bne.n	80032c2 <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 800329c:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <SystemInit+0x50>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	22ff      	movs	r2, #255	@ 0xff
 80032a2:	4013      	ands	r3, r2
 80032a4:	2bcc      	cmp	r3, #204	@ 0xcc
 80032a6:	d00c      	beq.n	80032c2 <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 80032a8:	4b08      	ldr	r3, [pc, #32]	@ (80032cc <SystemInit+0x50>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	22ff      	movs	r2, #255	@ 0xff
 80032ae:	4013      	ands	r3, r2
 80032b0:	2baa      	cmp	r3, #170	@ 0xaa
 80032b2:	d006      	beq.n	80032c2 <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <SystemInit+0x50>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b04      	ldr	r3, [pc, #16]	@ (80032cc <SystemInit+0x50>)
 80032ba:	2180      	movs	r1, #128	@ 0x80
 80032bc:	02c9      	lsls	r1, r1, #11
 80032be:	430a      	orrs	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	e000ed00 	.word	0xe000ed00
 80032cc:	40022000 	.word	0x40022000

080032d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032d4:	4b23      	ldr	r3, [pc, #140]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 80032d6:	4a24      	ldr	r2, [pc, #144]	@ (8003368 <MX_USART1_UART_Init+0x98>)
 80032d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032da:	4b22      	ldr	r3, [pc, #136]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 80032dc:	22e1      	movs	r2, #225	@ 0xe1
 80032de:	0252      	lsls	r2, r2, #9
 80032e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 80032f6:	220c      	movs	r2, #12
 80032f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003300:	4b18      	ldr	r3, [pc, #96]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 8003302:	2200      	movs	r2, #0
 8003304:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003306:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 8003308:	2200      	movs	r2, #0
 800330a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800330c:	4b15      	ldr	r3, [pc, #84]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003312:	4b14      	ldr	r3, [pc, #80]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 8003314:	2200      	movs	r2, #0
 8003316:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003318:	4b12      	ldr	r3, [pc, #72]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 800331a:	0018      	movs	r0, r3
 800331c:	f005 fcf4 	bl	8008d08 <HAL_UART_Init>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d001      	beq.n	8003328 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003324:	f7ff fe8c 	bl	8003040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003328:	4b0e      	ldr	r3, [pc, #56]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 800332a:	2100      	movs	r1, #0
 800332c:	0018      	movs	r0, r3
 800332e:	f006 fc6f 	bl	8009c10 <HAL_UARTEx_SetTxFifoThreshold>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d001      	beq.n	800333a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003336:	f7ff fe83 	bl	8003040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800333a:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 800333c:	2100      	movs	r1, #0
 800333e:	0018      	movs	r0, r3
 8003340:	f006 fcee 	bl	8009d20 <HAL_UARTEx_SetRxFifoThreshold>
 8003344:	1e03      	subs	r3, r0, #0
 8003346:	d001      	beq.n	800334c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003348:	f7ff fe7a 	bl	8003040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <MX_USART1_UART_Init+0x94>)
 800334e:	0018      	movs	r0, r3
 8003350:	f006 fbfe 	bl	8009b50 <HAL_UARTEx_DisableFifoMode>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d001      	beq.n	800335c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003358:	f7ff fe72 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800335c:	46c0      	nop			@ (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	2000031c 	.word	0x2000031c
 8003368:	40013800 	.word	0x40013800

0800336c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b099      	sub	sp, #100	@ 0x64
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	234c      	movs	r3, #76	@ 0x4c
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	0018      	movs	r0, r3
 800337a:	2314      	movs	r3, #20
 800337c:	001a      	movs	r2, r3
 800337e:	2100      	movs	r1, #0
 8003380:	f009 fa0c 	bl	800c79c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003384:	2414      	movs	r4, #20
 8003386:	193b      	adds	r3, r7, r4
 8003388:	0018      	movs	r0, r3
 800338a:	2338      	movs	r3, #56	@ 0x38
 800338c:	001a      	movs	r2, r3
 800338e:	2100      	movs	r1, #0
 8003390:	f009 fa04 	bl	800c79c <memset>
  if(uartHandle->Instance==USART1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a22      	ldr	r2, [pc, #136]	@ (8003424 <HAL_UART_MspInit+0xb8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d13d      	bne.n	800341a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80033a4:	193b      	adds	r3, r7, r4
 80033a6:	2200      	movs	r2, #0
 80033a8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033aa:	193b      	adds	r3, r7, r4
 80033ac:	0018      	movs	r0, r3
 80033ae:	f003 fbc1 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 80033b2:	1e03      	subs	r3, r0, #0
 80033b4:	d001      	beq.n	80033ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80033b6:	f7ff fe43 	bl	8003040 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <HAL_UART_MspInit+0xbc>)
 80033bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033be:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <HAL_UART_MspInit+0xbc>)
 80033c0:	2180      	movs	r1, #128	@ 0x80
 80033c2:	01c9      	lsls	r1, r1, #7
 80033c4:	430a      	orrs	r2, r1
 80033c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80033c8:	4b17      	ldr	r3, [pc, #92]	@ (8003428 <HAL_UART_MspInit+0xbc>)
 80033ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	01db      	lsls	r3, r3, #7
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d6:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <HAL_UART_MspInit+0xbc>)
 80033d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033da:	4b13      	ldr	r3, [pc, #76]	@ (8003428 <HAL_UART_MspInit+0xbc>)
 80033dc:	2102      	movs	r1, #2
 80033de:	430a      	orrs	r2, r1
 80033e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80033e2:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <HAL_UART_MspInit+0xbc>)
 80033e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e6:	2202      	movs	r2, #2
 80033e8:	4013      	ands	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033ee:	214c      	movs	r1, #76	@ 0x4c
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	22c0      	movs	r2, #192	@ 0xc0
 80033f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	2202      	movs	r2, #2
 80033fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	187b      	adds	r3, r7, r1
 8003404:	2200      	movs	r2, #0
 8003406:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003408:	187b      	adds	r3, r7, r1
 800340a:	2207      	movs	r2, #7
 800340c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340e:	187b      	adds	r3, r7, r1
 8003410:	4a06      	ldr	r2, [pc, #24]	@ (800342c <HAL_UART_MspInit+0xc0>)
 8003412:	0019      	movs	r1, r3
 8003414:	0010      	movs	r0, r2
 8003416:	f001 fefd 	bl	8005214 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b019      	add	sp, #100	@ 0x64
 8003420:	bd90      	pop	{r4, r7, pc}
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	40013800 	.word	0x40013800
 8003428:	40021000 	.word	0x40021000
 800342c:	50000400 	.word	0x50000400

08003430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003430:	480d      	ldr	r0, [pc, #52]	@ (8003468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003434:	f7ff ff22 	bl	800327c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003438:	480c      	ldr	r0, [pc, #48]	@ (800346c <LoopForever+0x6>)
  ldr r1, =_edata
 800343a:	490d      	ldr	r1, [pc, #52]	@ (8003470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800343c:	4a0d      	ldr	r2, [pc, #52]	@ (8003474 <LoopForever+0xe>)
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003440:	e002      	b.n	8003448 <LoopCopyDataInit>

08003442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003446:	3304      	adds	r3, #4

08003448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800344c:	d3f9      	bcc.n	8003442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800344e:	4a0a      	ldr	r2, [pc, #40]	@ (8003478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003450:	4c0a      	ldr	r4, [pc, #40]	@ (800347c <LoopForever+0x16>)
  movs r3, #0
 8003452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003454:	e001      	b.n	800345a <LoopFillZerobss>

08003456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003458:	3204      	adds	r2, #4

0800345a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800345a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800345c:	d3fb      	bcc.n	8003456 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800345e:	f009 f9bd 	bl	800c7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003462:	f7ff f9dd 	bl	8002820 <main>

08003466 <LoopForever>:

LoopForever:
  b LoopForever
 8003466:	e7fe      	b.n	8003466 <LoopForever>
  ldr   r0, =_estack
 8003468:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800346c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003470:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 8003474:	0800da10 	.word	0x0800da10
  ldr r2, =_sbss
 8003478:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 800347c:	2000068c 	.word	0x2000068c

08003480 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003480:	e7fe      	b.n	8003480 <ADC_COMP1_IRQHandler>

08003482 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003488:	1dfb      	adds	r3, r7, #7
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800348e:	2003      	movs	r0, #3
 8003490:	f000 f80e 	bl	80034b0 <HAL_InitTick>
 8003494:	1e03      	subs	r3, r0, #0
 8003496:	d003      	beq.n	80034a0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003498:	1dfb      	adds	r3, r7, #7
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	e001      	b.n	80034a4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034a0:	f7ff fe66 	bl	8003170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034a4:	1dfb      	adds	r3, r7, #7
 80034a6:	781b      	ldrb	r3, [r3, #0]
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034b8:	230f      	movs	r3, #15
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80034c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003538 <HAL_InitTick+0x88>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d02b      	beq.n	8003520 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80034c8:	4b1c      	ldr	r3, [pc, #112]	@ (800353c <HAL_InitTick+0x8c>)
 80034ca:	681c      	ldr	r4, [r3, #0]
 80034cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003538 <HAL_InitTick+0x88>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0019      	movs	r1, r3
 80034d2:	23fa      	movs	r3, #250	@ 0xfa
 80034d4:	0098      	lsls	r0, r3, #2
 80034d6:	f7fc fe29 	bl	800012c <__udivsi3>
 80034da:	0003      	movs	r3, r0
 80034dc:	0019      	movs	r1, r3
 80034de:	0020      	movs	r0, r4
 80034e0:	f7fc fe24 	bl	800012c <__udivsi3>
 80034e4:	0003      	movs	r3, r0
 80034e6:	0018      	movs	r0, r3
 80034e8:	f001 fe86 	bl	80051f8 <HAL_SYSTICK_Config>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d112      	bne.n	8003516 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d80a      	bhi.n	800350c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	2301      	movs	r3, #1
 80034fa:	425b      	negs	r3, r3
 80034fc:	2200      	movs	r2, #0
 80034fe:	0018      	movs	r0, r3
 8003500:	f001 fe3e 	bl	8005180 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003504:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <HAL_InitTick+0x90>)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e00d      	b.n	8003528 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800350c:	230f      	movs	r3, #15
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	e008      	b.n	8003528 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003516:	230f      	movs	r3, #15
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e003      	b.n	8003528 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003520:	230f      	movs	r3, #15
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003528:	230f      	movs	r3, #15
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	781b      	ldrb	r3, [r3, #0]
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b005      	add	sp, #20
 8003534:	bd90      	pop	{r4, r7, pc}
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	2000001c 	.word	0x2000001c
 800353c:	20000014 	.word	0x20000014
 8003540:	20000018 	.word	0x20000018

08003544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003548:	4b04      	ldr	r3, [pc, #16]	@ (800355c <HAL_IncTick+0x18>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4b04      	ldr	r3, [pc, #16]	@ (8003560 <HAL_IncTick+0x1c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	18d2      	adds	r2, r2, r3
 8003552:	4b02      	ldr	r3, [pc, #8]	@ (800355c <HAL_IncTick+0x18>)
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	200003b0 	.word	0x200003b0
 8003560:	2000001c 	.word	0x2000001c

08003564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  return uwTick;
 8003568:	4b02      	ldr	r3, [pc, #8]	@ (8003574 <HAL_GetTick+0x10>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	200003b0 	.word	0x200003b0

08003578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003580:	f7ff fff0 	bl	8003564 <HAL_GetTick>
 8003584:	0003      	movs	r3, r0
 8003586:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3301      	adds	r3, #1
 8003590:	d004      	beq.n	800359c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003592:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <HAL_Delay+0x40>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	18d3      	adds	r3, r2, r3
 800359a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800359c:	46c0      	nop			@ (mov r8, r8)
 800359e:	f7ff ffe1 	bl	8003564 <HAL_GetTick>
 80035a2:	0002      	movs	r2, r0
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d8f7      	bhi.n	800359e <HAL_Delay+0x26>
  {
  }
}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	46c0      	nop			@ (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b004      	add	sp, #16
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	2000001c 	.word	0x2000001c

080035bc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a05      	ldr	r2, [pc, #20]	@ (80035e0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80035cc:	401a      	ands	r2, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	601a      	str	r2, [r3, #0]
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	fe3fffff 	.word	0xfe3fffff

080035e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	23e0      	movs	r3, #224	@ 0xe0
 80035f2:	045b      	lsls	r3, r3, #17
 80035f4:	4013      	ands	r3, r2
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b002      	add	sp, #8
 80035fc:	bd80      	pop	{r7, pc}

080035fe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	2104      	movs	r1, #4
 8003612:	400a      	ands	r2, r1
 8003614:	2107      	movs	r1, #7
 8003616:	4091      	lsls	r1, r2
 8003618:	000a      	movs	r2, r1
 800361a:	43d2      	mvns	r2, r2
 800361c:	401a      	ands	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2104      	movs	r1, #4
 8003622:	400b      	ands	r3, r1
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4099      	lsls	r1, r3
 8003628:	000b      	movs	r3, r1
 800362a:	431a      	orrs	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003630:	46c0      	nop			@ (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b004      	add	sp, #16
 8003636:	bd80      	pop	{r7, pc}

08003638 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	2104      	movs	r1, #4
 800364a:	400a      	ands	r2, r1
 800364c:	2107      	movs	r1, #7
 800364e:	4091      	lsls	r1, r2
 8003650:	000a      	movs	r2, r1
 8003652:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2104      	movs	r1, #4
 8003658:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800365a:	40da      	lsrs	r2, r3
 800365c:	0013      	movs	r3, r2
}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b002      	add	sp, #8
 8003664:	bd80      	pop	{r7, pc}

08003666 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	23c0      	movs	r3, #192	@ 0xc0
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	4013      	ands	r3, r2
 8003678:	d101      	bne.n	800367e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800367e:	2300      	movs	r3, #0
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	b002      	add	sp, #8
 8003686:	bd80      	pop	{r7, pc}

08003688 <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	211f      	movs	r1, #31
 800369c:	400a      	ands	r2, r1
 800369e:	210f      	movs	r1, #15
 80036a0:	4091      	lsls	r1, r2
 80036a2:	000a      	movs	r2, r1
 80036a4:	43d2      	mvns	r2, r2
 80036a6:	401a      	ands	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	0e9b      	lsrs	r3, r3, #26
 80036ac:	210f      	movs	r1, #15
 80036ae:	4019      	ands	r1, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	201f      	movs	r0, #31
 80036b4:	4003      	ands	r3, r0
 80036b6:	4099      	lsls	r1, r3
 80036b8:	000b      	movs	r3, r1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036c0:	46c0      	nop			@ (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b004      	add	sp, #16
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	025b      	lsls	r3, r3, #9
 80036da:	0a5b      	lsrs	r3, r3, #9
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b002      	add	sp, #8
 80036e8:	bd80      	pop	{r7, pc}

080036ea <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	0252      	lsls	r2, r2, #9
 80036fc:	0a52      	lsrs	r2, r2, #9
 80036fe:	43d2      	mvns	r2, r2
 8003700:	401a      	ands	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	0212      	lsls	r2, r2, #8
 8003724:	43d2      	mvns	r2, r2
 8003726:	401a      	ands	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	400b      	ands	r3, r1
 8003730:	4904      	ldr	r1, [pc, #16]	@ (8003744 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003732:	400b      	ands	r3, r1
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	7fffff00 	.word	0x7fffff00

08003748 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a05      	ldr	r2, [pc, #20]	@ (800376c <LL_ADC_EnableInternalRegulator+0x24>)
 8003756:	4013      	ands	r3, r2
 8003758:	2280      	movs	r2, #128	@ 0x80
 800375a:	0552      	lsls	r2, r2, #21
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b002      	add	sp, #8
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	6fffffe8 	.word	0x6fffffe8

08003770 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a03      	ldr	r2, [pc, #12]	@ (800378c <LL_ADC_DisableInternalRegulator+0x1c>)
 800377e:	401a      	ands	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	609a      	str	r2, [r3, #8]
}
 8003784:	46c0      	nop			@ (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}
 800378c:	6fffffe8 	.word	0x6fffffe8

08003790 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	055b      	lsls	r3, r3, #21
 80037a0:	401a      	ands	r2, r3
 80037a2:	2380      	movs	r3, #128	@ 0x80
 80037a4:	055b      	lsls	r3, r3, #21
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d101      	bne.n	80037ae <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b002      	add	sp, #8
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4a04      	ldr	r2, [pc, #16]	@ (80037d8 <LL_ADC_Enable+0x20>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	2201      	movs	r2, #1
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037d0:	46c0      	nop			@ (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	7fffffe8 	.word	0x7fffffe8

080037dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a04      	ldr	r2, [pc, #16]	@ (80037fc <LL_ADC_Disable+0x20>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	2202      	movs	r2, #2
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	7fffffe8 	.word	0x7fffffe8

08003800 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2201      	movs	r2, #1
 800380e:	4013      	ands	r3, r2
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <LL_ADC_IsEnabled+0x18>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <LL_ADC_IsEnabled+0x1a>
 8003818:	2300      	movs	r3, #0
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b002      	add	sp, #8
 8003820:	bd80      	pop	{r7, pc}

08003822 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2202      	movs	r2, #2
 8003830:	4013      	ands	r3, r2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d101      	bne.n	800383a <LL_ADC_IsDisableOngoing+0x18>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <LL_ADC_IsDisableOngoing+0x1a>
 800383a:	2300      	movs	r3, #0
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b002      	add	sp, #8
 8003842:	bd80      	pop	{r7, pc}

08003844 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <LL_ADC_REG_StartConversion+0x20>)
 8003852:	4013      	ands	r3, r2
 8003854:	2204      	movs	r2, #4
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}
 8003864:	7fffffe8 	.word	0x7fffffe8

08003868 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <LL_ADC_REG_StopConversion+0x20>)
 8003876:	4013      	ands	r3, r2
 8003878:	2210      	movs	r2, #16
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}
 8003888:	7fffffe8 	.word	0x7fffffe8

0800388c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2204      	movs	r2, #4
 800389a:	4013      	ands	r3, r2
 800389c:	2b04      	cmp	r3, #4
 800389e:	d101      	bne.n	80038a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b002      	add	sp, #8
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b8:	231f      	movs	r3, #31
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <HAL_ADC_Init+0x28>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f000 fc0f 	bl	80040f6 <HAL_ADC_Init+0x846>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4ac3      	ldr	r2, [pc, #780]	@ (8003bec <HAL_ADC_Init+0x33c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <HAL_ADC_Init+0x42>
 80038e2:	238c      	movs	r3, #140	@ 0x8c
 80038e4:	33ff      	adds	r3, #255	@ 0xff
 80038e6:	001a      	movs	r2, r3
 80038e8:	4bc1      	ldr	r3, [pc, #772]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 80038ea:	0011      	movs	r1, r2
 80038ec:	0018      	movs	r0, r3
 80038ee:	f7ff fbad 	bl	800304c <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	23c0      	movs	r3, #192	@ 0xc0
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d058      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	2380      	movs	r3, #128	@ 0x80
 8003904:	05db      	lsls	r3, r3, #23
 8003906:	429a      	cmp	r2, r3
 8003908:	d052      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	2380      	movs	r3, #128	@ 0x80
 8003910:	061b      	lsls	r3, r3, #24
 8003912:	429a      	cmp	r2, r3
 8003914:	d04c      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d048      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	2380      	movs	r3, #128	@ 0x80
 8003924:	02db      	lsls	r3, r3, #11
 8003926:	429a      	cmp	r2, r3
 8003928:	d042      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	2380      	movs	r3, #128	@ 0x80
 8003930:	031b      	lsls	r3, r3, #12
 8003932:	429a      	cmp	r2, r3
 8003934:	d03c      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	23c0      	movs	r3, #192	@ 0xc0
 800393c:	031b      	lsls	r3, r3, #12
 800393e:	429a      	cmp	r2, r3
 8003940:	d036      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	2380      	movs	r3, #128	@ 0x80
 8003948:	035b      	lsls	r3, r3, #13
 800394a:	429a      	cmp	r2, r3
 800394c:	d030      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	23a0      	movs	r3, #160	@ 0xa0
 8003954:	035b      	lsls	r3, r3, #13
 8003956:	429a      	cmp	r2, r3
 8003958:	d02a      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	23c0      	movs	r3, #192	@ 0xc0
 8003960:	035b      	lsls	r3, r3, #13
 8003962:	429a      	cmp	r2, r3
 8003964:	d024      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	23e0      	movs	r3, #224	@ 0xe0
 800396c:	035b      	lsls	r3, r3, #13
 800396e:	429a      	cmp	r2, r3
 8003970:	d01e      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	039b      	lsls	r3, r3, #14
 800397a:	429a      	cmp	r2, r3
 800397c:	d018      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	2390      	movs	r3, #144	@ 0x90
 8003984:	039b      	lsls	r3, r3, #14
 8003986:	429a      	cmp	r2, r3
 8003988:	d012      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	23a0      	movs	r3, #160	@ 0xa0
 8003990:	039b      	lsls	r3, r3, #14
 8003992:	429a      	cmp	r2, r3
 8003994:	d00c      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	23b0      	movs	r3, #176	@ 0xb0
 800399c:	039b      	lsls	r3, r3, #14
 800399e:	429a      	cmp	r2, r3
 80039a0:	d006      	beq.n	80039b0 <HAL_ADC_Init+0x100>
 80039a2:	23c6      	movs	r3, #198	@ 0xc6
 80039a4:	005a      	lsls	r2, r3, #1
 80039a6:	4b92      	ldr	r3, [pc, #584]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 80039a8:	0011      	movs	r1, r2
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7ff fb4e 	bl	800304c <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_ADC_Init+0x130>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d00f      	beq.n	80039e0 <HAL_ADC_Init+0x130>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d00b      	beq.n	80039e0 <HAL_ADC_Init+0x130>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b18      	cmp	r3, #24
 80039ce:	d007      	beq.n	80039e0 <HAL_ADC_Init+0x130>
 80039d0:	238e      	movs	r3, #142	@ 0x8e
 80039d2:	33ff      	adds	r3, #255	@ 0xff
 80039d4:	001a      	movs	r2, r3
 80039d6:	4b86      	ldr	r3, [pc, #536]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 80039d8:	0011      	movs	r1, r2
 80039da:	0018      	movs	r0, r3
 80039dc:	f7ff fb36 	bl	800304c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_ADC_Init+0x14e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d006      	beq.n	80039fe <HAL_ADC_Init+0x14e>
 80039f0:	23c7      	movs	r3, #199	@ 0xc7
 80039f2:	005a      	lsls	r2, r3, #1
 80039f4:	4b7e      	ldr	r3, [pc, #504]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 80039f6:	0011      	movs	r1, r2
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7ff fb27 	bl	800304c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d018      	beq.n	8003a38 <HAL_ADC_Init+0x188>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	2380      	movs	r3, #128	@ 0x80
 8003a0c:	039b      	lsls	r3, r3, #14
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d012      	beq.n	8003a38 <HAL_ADC_Init+0x188>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d00c      	beq.n	8003a38 <HAL_ADC_Init+0x188>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	4a74      	ldr	r2, [pc, #464]	@ (8003bf4 <HAL_ADC_Init+0x344>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <HAL_ADC_Init+0x188>
 8003a28:	2390      	movs	r3, #144	@ 0x90
 8003a2a:	33ff      	adds	r3, #255	@ 0xff
 8003a2c:	001a      	movs	r2, r3
 8003a2e:	4b70      	ldr	r3, [pc, #448]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 8003a30:	0011      	movs	r1, r2
 8003a32:	0018      	movs	r0, r3
 8003a34:	f7ff fb0a 	bl	800304c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7e9b      	ldrb	r3, [r3, #26]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <HAL_ADC_Init+0x1a6>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	7e9b      	ldrb	r3, [r3, #26]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d006      	beq.n	8003a56 <HAL_ADC_Init+0x1a6>
 8003a48:	23c8      	movs	r3, #200	@ 0xc8
 8003a4a:	005a      	lsls	r2, r3, #1
 8003a4c:	4b68      	ldr	r3, [pc, #416]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 8003a4e:	0011      	movs	r1, r2
 8003a50:	0018      	movs	r0, r3
 8003a52:	f7ff fafb 	bl	800304c <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d019      	beq.n	8003a92 <HAL_ADC_Init+0x1e2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a62:	2380      	movs	r3, #128	@ 0x80
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d013      	beq.n	8003a92 <HAL_ADC_Init+0x1e2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a6e:	2380      	movs	r3, #128	@ 0x80
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d00d      	beq.n	8003a92 <HAL_ADC_Init+0x1e2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a7a:	23c0      	movs	r3, #192	@ 0xc0
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d007      	beq.n	8003a92 <HAL_ADC_Init+0x1e2>
 8003a82:	2392      	movs	r3, #146	@ 0x92
 8003a84:	33ff      	adds	r3, #255	@ 0xff
 8003a86:	001a      	movs	r2, r3
 8003a88:	4b59      	ldr	r3, [pc, #356]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 8003a8a:	0011      	movs	r1, r2
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7ff fadd 	bl	800304c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a96:	2380      	movs	r3, #128	@ 0x80
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d02e      	beq.n	8003afc <HAL_ADC_Init+0x24c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aa2:	2388      	movs	r3, #136	@ 0x88
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d028      	beq.n	8003afc <HAL_ADC_Init+0x24c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aae:	2390      	movs	r3, #144	@ 0x90
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d022      	beq.n	8003afc <HAL_ADC_Init+0x24c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aba:	2398      	movs	r3, #152	@ 0x98
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d01c      	beq.n	8003afc <HAL_ADC_Init+0x24c>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ac6:	23a0      	movs	r3, #160	@ 0xa0
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d016      	beq.n	8003afc <HAL_ADC_Init+0x24c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ad2:	23a8      	movs	r3, #168	@ 0xa8
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d010      	beq.n	8003afc <HAL_ADC_Init+0x24c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ade:	23b8      	movs	r3, #184	@ 0xb8
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d00a      	beq.n	8003afc <HAL_ADC_Init+0x24c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d006      	beq.n	8003afc <HAL_ADC_Init+0x24c>
 8003aee:	23c9      	movs	r3, #201	@ 0xc9
 8003af0:	005a      	lsls	r2, r3, #1
 8003af2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 8003af4:	0011      	movs	r1, r2
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7ff faa8 	bl	800304c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	222c      	movs	r2, #44	@ 0x2c
 8003b00:	5c9b      	ldrb	r3, [r3, r2]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <HAL_ADC_Init+0x270>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	222c      	movs	r2, #44	@ 0x2c
 8003b0a:	5c9b      	ldrb	r3, [r3, r2]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d007      	beq.n	8003b20 <HAL_ADC_Init+0x270>
 8003b10:	2394      	movs	r3, #148	@ 0x94
 8003b12:	33ff      	adds	r3, #255	@ 0xff
 8003b14:	001a      	movs	r2, r3
 8003b16:	4b36      	ldr	r3, [pc, #216]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 8003b18:	0011      	movs	r1, r2
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7ff fa96 	bl	800304c <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d00a      	beq.n	8003b3e <HAL_ADC_Init+0x28e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d006      	beq.n	8003b3e <HAL_ADC_Init+0x28e>
 8003b30:	23ca      	movs	r3, #202	@ 0xca
 8003b32:	005a      	lsls	r2, r3, #1
 8003b34:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 8003b36:	0011      	movs	r1, r2
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f7ff fa87 	bl	800304c <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <HAL_ADC_Init+0x2b2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b4a:	2380      	movs	r3, #128	@ 0x80
 8003b4c:	015b      	lsls	r3, r3, #5
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d007      	beq.n	8003b62 <HAL_ADC_Init+0x2b2>
 8003b52:	2396      	movs	r3, #150	@ 0x96
 8003b54:	33ff      	adds	r3, #255	@ 0xff
 8003b56:	001a      	movs	r2, r3
 8003b58:	4b25      	ldr	r3, [pc, #148]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 8003b5a:	0011      	movs	r1, r2
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff fa75 	bl	800304c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7e1b      	ldrb	r3, [r3, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_ADC_Init+0x2d0>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	7e1b      	ldrb	r3, [r3, #24]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d006      	beq.n	8003b80 <HAL_ADC_Init+0x2d0>
 8003b72:	23cb      	movs	r3, #203	@ 0xcb
 8003b74:	005a      	lsls	r2, r3, #1
 8003b76:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 8003b78:	0011      	movs	r1, r2
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7ff fa66 	bl	800304c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7e5b      	ldrb	r3, [r3, #25]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_ADC_Init+0x2f0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7e5b      	ldrb	r3, [r3, #25]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d007      	beq.n	8003ba0 <HAL_ADC_Init+0x2f0>
 8003b90:	2398      	movs	r3, #152	@ 0x98
 8003b92:	33ff      	adds	r3, #255	@ 0xff
 8003b94:	001a      	movs	r2, r3
 8003b96:	4b16      	ldr	r3, [pc, #88]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 8003b98:	0011      	movs	r1, r2
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f7ff fa56 	bl	800304c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d029      	beq.n	8003bfc <HAL_ADC_Init+0x34c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d025      	beq.n	8003bfc <HAL_ADC_Init+0x34c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d021      	beq.n	8003bfc <HAL_ADC_Init+0x34c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d01d      	beq.n	8003bfc <HAL_ADC_Init+0x34c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d019      	beq.n	8003bfc <HAL_ADC_Init+0x34c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d015      	beq.n	8003bfc <HAL_ADC_Init+0x34c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd4:	2b06      	cmp	r3, #6
 8003bd6:	d011      	beq.n	8003bfc <HAL_ADC_Init+0x34c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bdc:	2b07      	cmp	r3, #7
 8003bde:	d00d      	beq.n	8003bfc <HAL_ADC_Init+0x34c>
 8003be0:	23cc      	movs	r3, #204	@ 0xcc
 8003be2:	005a      	lsls	r2, r3, #1
 8003be4:	4b02      	ldr	r3, [pc, #8]	@ (8003bf0 <HAL_ADC_Init+0x340>)
 8003be6:	0011      	movs	r1, r2
 8003be8:	0018      	movs	r0, r3
 8003bea:	e005      	b.n	8003bf8 <HAL_ADC_Init+0x348>
 8003bec:	40012400 	.word	0x40012400
 8003bf0:	0800d33c 	.word	0x0800d33c
 8003bf4:	80000004 	.word	0x80000004
 8003bf8:	f7ff fa28 	bl	800304c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d023      	beq.n	8003c4c <HAL_ADC_Init+0x39c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d01f      	beq.n	8003c4c <HAL_ADC_Init+0x39c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d01b      	beq.n	8003c4c <HAL_ADC_Init+0x39c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d017      	beq.n	8003c4c <HAL_ADC_Init+0x39c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d013      	beq.n	8003c4c <HAL_ADC_Init+0x39c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c28:	2b05      	cmp	r3, #5
 8003c2a:	d00f      	beq.n	8003c4c <HAL_ADC_Init+0x39c>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c30:	2b06      	cmp	r3, #6
 8003c32:	d00b      	beq.n	8003c4c <HAL_ADC_Init+0x39c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c38:	2b07      	cmp	r3, #7
 8003c3a:	d007      	beq.n	8003c4c <HAL_ADC_Init+0x39c>
 8003c3c:	239a      	movs	r3, #154	@ 0x9a
 8003c3e:	33ff      	adds	r3, #255	@ 0xff
 8003c40:	001a      	movs	r2, r3
 8003c42:	4bb9      	ldr	r3, [pc, #740]	@ (8003f28 <HAL_ADC_Init+0x678>)
 8003c44:	0011      	movs	r1, r2
 8003c46:	0018      	movs	r0, r3
 8003c48:	f7ff fa00 	bl	800304c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	223c      	movs	r2, #60	@ 0x3c
 8003c50:	5c9b      	ldrb	r3, [r3, r2]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_ADC_Init+0x3be>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	223c      	movs	r2, #60	@ 0x3c
 8003c5a:	5c9b      	ldrb	r3, [r3, r2]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d006      	beq.n	8003c6e <HAL_ADC_Init+0x3be>
 8003c60:	23cd      	movs	r3, #205	@ 0xcd
 8003c62:	005a      	lsls	r2, r3, #1
 8003c64:	4bb0      	ldr	r3, [pc, #704]	@ (8003f28 <HAL_ADC_Init+0x678>)
 8003c66:	0011      	movs	r1, r2
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7ff f9ef 	bl	800304c <assert_failed>
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	223c      	movs	r2, #60	@ 0x3c
 8003c72:	5c9b      	ldrb	r3, [r3, r2]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d000      	beq.n	8003c7a <HAL_ADC_Init+0x3ca>
 8003c78:	e066      	b.n	8003d48 <HAL_ADC_Init+0x498>
  {
    assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d023      	beq.n	8003cca <HAL_ADC_Init+0x41a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d01f      	beq.n	8003cca <HAL_ADC_Init+0x41a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d01b      	beq.n	8003cca <HAL_ADC_Init+0x41a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d017      	beq.n	8003cca <HAL_ADC_Init+0x41a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	2b10      	cmp	r3, #16
 8003ca0:	d013      	beq.n	8003cca <HAL_ADC_Init+0x41a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	2b14      	cmp	r3, #20
 8003ca8:	d00f      	beq.n	8003cca <HAL_ADC_Init+0x41a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	2b18      	cmp	r3, #24
 8003cb0:	d00b      	beq.n	8003cca <HAL_ADC_Init+0x41a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	2b1c      	cmp	r3, #28
 8003cb8:	d007      	beq.n	8003cca <HAL_ADC_Init+0x41a>
 8003cba:	239e      	movs	r3, #158	@ 0x9e
 8003cbc:	33ff      	adds	r3, #255	@ 0xff
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	4b99      	ldr	r3, [pc, #612]	@ (8003f28 <HAL_ADC_Init+0x678>)
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7ff f9c1 	bl	800304c <assert_failed>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d028      	beq.n	8003d24 <HAL_ADC_Init+0x474>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d024      	beq.n	8003d24 <HAL_ADC_Init+0x474>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	2b40      	cmp	r3, #64	@ 0x40
 8003ce0:	d020      	beq.n	8003d24 <HAL_ADC_Init+0x474>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	2b60      	cmp	r3, #96	@ 0x60
 8003ce8:	d01c      	beq.n	8003d24 <HAL_ADC_Init+0x474>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	2b80      	cmp	r3, #128	@ 0x80
 8003cf0:	d018      	beq.n	8003d24 <HAL_ADC_Init+0x474>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cf8:	d014      	beq.n	8003d24 <HAL_ADC_Init+0x474>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d00:	d010      	beq.n	8003d24 <HAL_ADC_Init+0x474>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	2be0      	cmp	r3, #224	@ 0xe0
 8003d08:	d00c      	beq.n	8003d24 <HAL_ADC_Init+0x474>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d0e:	2380      	movs	r3, #128	@ 0x80
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d006      	beq.n	8003d24 <HAL_ADC_Init+0x474>
 8003d16:	23cf      	movs	r3, #207	@ 0xcf
 8003d18:	005a      	lsls	r2, r3, #1
 8003d1a:	4b83      	ldr	r3, [pc, #524]	@ (8003f28 <HAL_ADC_Init+0x678>)
 8003d1c:	0011      	movs	r1, r2
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7ff f994 	bl	800304c <assert_failed>
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00d      	beq.n	8003d48 <HAL_ADC_Init+0x498>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d007      	beq.n	8003d48 <HAL_ADC_Init+0x498>
 8003d38:	23a0      	movs	r3, #160	@ 0xa0
 8003d3a:	33ff      	adds	r3, #255	@ 0xff
 8003d3c:	001a      	movs	r2, r3
 8003d3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f28 <HAL_ADC_Init+0x678>)
 8003d40:	0011      	movs	r1, r2
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7ff f982 	bl	800304c <assert_failed>
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <HAL_ADC_Init+0x4bc>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d54:	2380      	movs	r3, #128	@ 0x80
 8003d56:	059b      	lsls	r3, r3, #22
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d007      	beq.n	8003d6c <HAL_ADC_Init+0x4bc>
 8003d5c:	23a2      	movs	r3, #162	@ 0xa2
 8003d5e:	33ff      	adds	r3, #255	@ 0xff
 8003d60:	001a      	movs	r2, r3
 8003d62:	4b71      	ldr	r3, [pc, #452]	@ (8003f28 <HAL_ADC_Init+0x678>)
 8003d64:	0011      	movs	r1, r2
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7ff f970 	bl	800304c <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d027      	beq.n	8003dc4 <HAL_ADC_Init+0x514>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	5c9b      	ldrb	r3, [r3, r2]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00c      	beq.n	8003d98 <HAL_ADC_Init+0x4e8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	5c9b      	ldrb	r3, [r3, r2]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d007      	beq.n	8003d98 <HAL_ADC_Init+0x4e8>
 8003d88:	23a6      	movs	r3, #166	@ 0xa6
 8003d8a:	33ff      	adds	r3, #255	@ 0xff
 8003d8c:	001a      	movs	r2, r3
 8003d8e:	4b66      	ldr	r3, [pc, #408]	@ (8003f28 <HAL_ADC_Init+0x678>)
 8003d90:	0011      	movs	r1, r2
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7ff f95a 	bl	800304c <assert_failed>

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	2380      	movs	r3, #128	@ 0x80
 8003d9e:	039b      	lsls	r3, r3, #14
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d10f      	bne.n	8003dc4 <HAL_ADC_Init+0x514>
    {
      assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_ADC_Init+0x504>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d907      	bls.n	8003dc4 <HAL_ADC_Init+0x514>
 8003db4:	23aa      	movs	r3, #170	@ 0xaa
 8003db6:	33ff      	adds	r3, #255	@ 0xff
 8003db8:	001a      	movs	r2, r3
 8003dba:	4b5b      	ldr	r3, [pc, #364]	@ (8003f28 <HAL_ADC_Init+0x678>)
 8003dbc:	0011      	movs	r1, r2
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7ff f944 	bl	800304c <assert_failed>
    }
  }

  /* ADC group regular discontinuous mode can be enabled only if              */
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	5c9b      	ldrb	r3, [r3, r2]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d10b      	bne.n	8003de6 <HAL_ADC_Init+0x536>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	7e9b      	ldrb	r3, [r3, #26]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d107      	bne.n	8003de6 <HAL_ADC_Init+0x536>
 8003dd6:	23b0      	movs	r3, #176	@ 0xb0
 8003dd8:	33ff      	adds	r3, #255	@ 0xff
 8003dda:	001a      	movs	r2, r3
 8003ddc:	4b52      	ldr	r3, [pc, #328]	@ (8003f28 <HAL_ADC_Init+0x678>)
 8003dde:	0011      	movs	r1, r2
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff f933 	bl	800304c <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <HAL_ADC_Init+0x554>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7fe fb89 	bl	8002508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2254      	movs	r2, #84	@ 0x54
 8003e00:	2100      	movs	r1, #0
 8003e02:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7ff fcc1 	bl	8003790 <LL_ADC_IsInternalRegulatorEnabled>
 8003e0e:	1e03      	subs	r3, r0, #0
 8003e10:	d115      	bne.n	8003e3e <HAL_ADC_Init+0x58e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7ff fc96 	bl	8003748 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e1c:	4b43      	ldr	r3, [pc, #268]	@ (8003f2c <HAL_ADC_Init+0x67c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4943      	ldr	r1, [pc, #268]	@ (8003f30 <HAL_ADC_Init+0x680>)
 8003e22:	0018      	movs	r0, r3
 8003e24:	f7fc f982 	bl	800012c <__udivsi3>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e30:	e002      	b.n	8003e38 <HAL_ADC_Init+0x588>
    {
      wait_loop_index--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f9      	bne.n	8003e32 <HAL_ADC_Init+0x582>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7ff fca4 	bl	8003790 <LL_ADC_IsInternalRegulatorEnabled>
 8003e48:	1e03      	subs	r3, r0, #0
 8003e4a:	d10f      	bne.n	8003e6c <HAL_ADC_Init+0x5bc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	2210      	movs	r2, #16
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e64:	231f      	movs	r3, #31
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7ff fd0b 	bl	800388c <LL_ADC_REG_IsConversionOngoing>
 8003e76:	0003      	movs	r3, r0
 8003e78:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7e:	2210      	movs	r2, #16
 8003e80:	4013      	ands	r3, r2
 8003e82:	d000      	beq.n	8003e86 <HAL_ADC_Init+0x5d6>
 8003e84:	e12a      	b.n	80040dc <HAL_ADC_Init+0x82c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d000      	beq.n	8003e8e <HAL_ADC_Init+0x5de>
 8003e8c:	e126      	b.n	80040dc <HAL_ADC_Init+0x82c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e92:	4a28      	ldr	r2, [pc, #160]	@ (8003f34 <HAL_ADC_Init+0x684>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	2202      	movs	r2, #2
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f7ff fcac 	bl	8003800 <LL_ADC_IsEnabled>
 8003ea8:	1e03      	subs	r3, r0, #0
 8003eaa:	d000      	beq.n	8003eae <HAL_ADC_Init+0x5fe>
 8003eac:	e0b5      	b.n	800401a <HAL_ADC_Init+0x76a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7e1b      	ldrb	r3, [r3, #24]
 8003eb6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003eb8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7e5b      	ldrb	r3, [r3, #25]
 8003ebe:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ec0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7e9b      	ldrb	r3, [r3, #26]
 8003ec6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003ec8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_ADC_Init+0x628>
 8003ed2:	2380      	movs	r3, #128	@ 0x80
 8003ed4:	015b      	lsls	r3, r3, #5
 8003ed6:	e000      	b.n	8003eda <HAL_ADC_Init+0x62a>
 8003ed8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003eda:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ee0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da04      	bge.n	8003ef4 <HAL_ADC_Init+0x644>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	e001      	b.n	8003ef8 <HAL_ADC_Init+0x648>
 8003ef4:	2380      	movs	r3, #128	@ 0x80
 8003ef6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8003ef8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	212c      	movs	r1, #44	@ 0x2c
 8003efe:	5c5b      	ldrb	r3, [r3, r1]
 8003f00:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f02:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	5c9b      	ldrb	r3, [r3, r2]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d11d      	bne.n	8003f50 <HAL_ADC_Init+0x6a0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	7e9b      	ldrb	r3, [r3, #26]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10d      	bne.n	8003f38 <HAL_ADC_Init+0x688>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2280      	movs	r2, #128	@ 0x80
 8003f20:	0252      	lsls	r2, r2, #9
 8003f22:	4313      	orrs	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	e013      	b.n	8003f50 <HAL_ADC_Init+0x6a0>
 8003f28:	0800d33c 	.word	0x0800d33c
 8003f2c:	20000014 	.word	0x20000014
 8003f30:	00030d40 	.word	0x00030d40
 8003f34:	fffffefd 	.word	0xfffffefd
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f48:	2201      	movs	r2, #1
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_ADC_Init+0x6be>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f5c:	23e0      	movs	r3, #224	@ 0xe0
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f66:	4313      	orrs	r3, r2
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4a62      	ldr	r2, [pc, #392]	@ (8004100 <HAL_ADC_Init+0x850>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	0019      	movs	r1, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	0f9b      	lsrs	r3, r3, #30
 8003f8a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f90:	4313      	orrs	r3, r2
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	223c      	movs	r2, #60	@ 0x3c
 8003f9c:	5c9b      	ldrb	r3, [r3, r2]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d111      	bne.n	8003fc6 <HAL_ADC_Init+0x716>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	0f9b      	lsrs	r3, r3, #30
 8003fa8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fae:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8003fb4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8003fba:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8004104 <HAL_ADC_Init+0x854>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	23c0      	movs	r3, #192	@ 0xc0
 8003fe2:	061b      	lsls	r3, r3, #24
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d018      	beq.n	800401a <HAL_ADC_Init+0x76a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003fec:	2380      	movs	r3, #128	@ 0x80
 8003fee:	05db      	lsls	r3, r3, #23
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d012      	beq.n	800401a <HAL_ADC_Init+0x76a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003ff8:	2380      	movs	r3, #128	@ 0x80
 8003ffa:	061b      	lsls	r3, r3, #24
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d00c      	beq.n	800401a <HAL_ADC_Init+0x76a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004000:	4b41      	ldr	r3, [pc, #260]	@ (8004108 <HAL_ADC_Init+0x858>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a41      	ldr	r2, [pc, #260]	@ (800410c <HAL_ADC_Init+0x85c>)
 8004006:	4013      	ands	r3, r2
 8004008:	0019      	movs	r1, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	23f0      	movs	r3, #240	@ 0xf0
 8004010:	039b      	lsls	r3, r3, #14
 8004012:	401a      	ands	r2, r3
 8004014:	4b3c      	ldr	r3, [pc, #240]	@ (8004108 <HAL_ADC_Init+0x858>)
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004022:	001a      	movs	r2, r3
 8004024:	2100      	movs	r1, #0
 8004026:	f7ff faea 	bl	80035fe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004032:	4937      	ldr	r1, [pc, #220]	@ (8004110 <HAL_ADC_Init+0x860>)
 8004034:	001a      	movs	r2, r3
 8004036:	f7ff fae2 	bl	80035fe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_ADC_Init+0x7a6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2110      	movs	r1, #16
 800404e:	4249      	negs	r1, r1
 8004050:	430a      	orrs	r2, r1
 8004052:	629a      	str	r2, [r3, #40]	@ 0x28
 8004054:	e018      	b.n	8004088 <HAL_ADC_Init+0x7d8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	2380      	movs	r3, #128	@ 0x80
 800405c:	039b      	lsls	r3, r3, #14
 800405e:	429a      	cmp	r2, r3
 8004060:	d112      	bne.n	8004088 <HAL_ADC_Init+0x7d8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	3b01      	subs	r3, #1
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	221c      	movs	r2, #28
 8004072:	4013      	ands	r3, r2
 8004074:	2210      	movs	r2, #16
 8004076:	4252      	negs	r2, r2
 8004078:	409a      	lsls	r2, r3
 800407a:	0011      	movs	r1, r2
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2100      	movs	r1, #0
 800408e:	0018      	movs	r0, r3
 8004090:	f7ff fad2 	bl	8003638 <LL_ADC_GetSamplingTimeCommonChannels>
 8004094:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800409a:	429a      	cmp	r2, r3
 800409c:	d10b      	bne.n	80040b6 <HAL_ADC_Init+0x806>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a8:	2203      	movs	r2, #3
 80040aa:	4393      	bics	r3, r2
 80040ac:	2201      	movs	r2, #1
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040b4:	e01c      	b.n	80040f0 <HAL_ADC_Init+0x840>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	2212      	movs	r2, #18
 80040bc:	4393      	bics	r3, r2
 80040be:	2210      	movs	r2, #16
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ca:	2201      	movs	r2, #1
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80040d2:	231f      	movs	r3, #31
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040da:	e009      	b.n	80040f0 <HAL_ADC_Init+0x840>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	2210      	movs	r2, #16
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80040e8:	231f      	movs	r3, #31
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80040f0:	231f      	movs	r3, #31
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	781b      	ldrb	r3, [r3, #0]
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b008      	add	sp, #32
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	ffde0201 	.word	0xffde0201
 8004104:	1ffffc02 	.word	0x1ffffc02
 8004108:	40012708 	.word	0x40012708
 800410c:	ffc3ffff 	.word	0xffc3ffff
 8004110:	7fffff04 	.word	0x7fffff04

08004114 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004114:	b5b0      	push	{r4, r5, r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e08d      	b.n	8004242 <HAL_ADC_DeInit+0x12e>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a48      	ldr	r2, [pc, #288]	@ (800424c <HAL_ADC_DeInit+0x138>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d006      	beq.n	800413e <HAL_ADC_DeInit+0x2a>
 8004130:	23bb      	movs	r3, #187	@ 0xbb
 8004132:	009a      	lsls	r2, r3, #2
 8004134:	4b46      	ldr	r3, [pc, #280]	@ (8004250 <HAL_ADC_DeInit+0x13c>)
 8004136:	0011      	movs	r1, r2
 8004138:	0018      	movs	r0, r3
 800413a:	f7fe ff87 	bl	800304c <assert_failed>

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	2202      	movs	r2, #2
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800414a:	250f      	movs	r5, #15
 800414c:	197c      	adds	r4, r7, r5
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0018      	movs	r0, r3
 8004152:	f000 fc91 	bl	8004a78 <ADC_ConversionStop>
 8004156:	0003      	movs	r3, r0
 8004158:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800415a:	197b      	adds	r3, r7, r5
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d112      	bne.n	8004188 <HAL_ADC_DeInit+0x74>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004162:	197c      	adds	r4, r7, r5
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	0018      	movs	r0, r3
 8004168:	f000 fd60 	bl	8004c2c <ADC_Disable>
 800416c:	0003      	movs	r3, r0
 800416e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004170:	197b      	adds	r3, r7, r5
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <HAL_ADC_DeInit+0x6a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	0018      	movs	r0, r3
 8004184:	f7ff faf4 	bl	8003770 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4930      	ldr	r1, [pc, #192]	@ (8004254 <HAL_ADC_DeInit+0x140>)
 8004194:	400a      	ands	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOCAL | ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2e      	ldr	r2, [pc, #184]	@ (8004258 <HAL_ADC_DeInit+0x144>)
 800419e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	492c      	ldr	r1, [pc, #176]	@ (800425c <HAL_ADC_DeInit+0x148>)
 80041ac:	400a      	ands	r2, r1
 80041ae:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_WAIT | ADC_CFGR1_CONT | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2107      	movs	r1, #7
 80041bc:	438a      	bics	r2, r1
 80041be:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2200      	movs	r2, #0
 80041cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a1a      	ldr	r2, [r3, #32]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4921      	ldr	r1, [pc, #132]	@ (8004260 <HAL_ADC_DeInit+0x14c>)
 80041da:	400a      	ands	r2, r1
 80041dc:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	491d      	ldr	r1, [pc, #116]	@ (8004260 <HAL_ADC_DeInit+0x14c>)
 80041ea:	400a      	ands	r2, r1
 80041ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4919      	ldr	r1, [pc, #100]	@ (8004260 <HAL_ADC_DeInit+0x14c>)
 80041fa:	400a      	ands	r2, r1
 80041fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	0092      	lsls	r2, r2, #2
 800420a:	0892      	lsrs	r2, r2, #2
 800420c:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800420e:	4b15      	ldr	r3, [pc, #84]	@ (8004264 <HAL_ADC_DeInit+0x150>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b14      	ldr	r3, [pc, #80]	@ (8004264 <HAL_ADC_DeInit+0x150>)
 8004214:	4914      	ldr	r1, [pc, #80]	@ (8004268 <HAL_ADC_DeInit+0x154>)
 8004216:	400a      	ands	r2, r1
 8004218:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0018      	movs	r0, r3
 800421e:	f7fe f9cf 	bl	80025c0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2254      	movs	r2, #84	@ 0x54
 8004238:	2100      	movs	r1, #0
 800423a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800423c:	230f      	movs	r3, #15
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	781b      	ldrb	r3, [r3, #0]
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	b004      	add	sp, #16
 8004248:	bdb0      	pop	{r4, r5, r7, pc}
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	40012400 	.word	0x40012400
 8004250:	0800d33c 	.word	0x0800d33c
 8004254:	fffff460 	.word	0xfffff460
 8004258:	00000b9f 	.word	0x00000b9f
 800425c:	831e0200 	.word	0x831e0200
 8004260:	f000f000 	.word	0xf000f000
 8004264:	40012708 	.word	0x40012708
 8004268:	fe03ffff 	.word	0xfe03ffff

0800426c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800426c:	b5b0      	push	{r4, r5, r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a28      	ldr	r2, [pc, #160]	@ (800431c <HAL_ADC_Start+0xb0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d005      	beq.n	800428a <HAL_ADC_Start+0x1e>
 800427e:	4a28      	ldr	r2, [pc, #160]	@ (8004320 <HAL_ADC_Start+0xb4>)
 8004280:	4b28      	ldr	r3, [pc, #160]	@ (8004324 <HAL_ADC_Start+0xb8>)
 8004282:	0011      	movs	r1, r2
 8004284:	0018      	movs	r0, r3
 8004286:	f7fe fee1 	bl	800304c <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0018      	movs	r0, r3
 8004290:	f7ff fafc 	bl	800388c <LL_ADC_REG_IsConversionOngoing>
 8004294:	1e03      	subs	r3, r0, #0
 8004296:	d135      	bne.n	8004304 <HAL_ADC_Start+0x98>
  {
    __HAL_LOCK(hadc);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2254      	movs	r2, #84	@ 0x54
 800429c:	5c9b      	ldrb	r3, [r3, r2]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_ADC_Start+0x3a>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e035      	b.n	8004312 <HAL_ADC_Start+0xa6>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2254      	movs	r2, #84	@ 0x54
 80042aa:	2101      	movs	r1, #1
 80042ac:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80042ae:	250f      	movs	r5, #15
 80042b0:	197c      	adds	r4, r7, r5
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f000 fc33 	bl	8004b20 <ADC_Enable>
 80042ba:	0003      	movs	r3, r0
 80042bc:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80042be:	197b      	adds	r3, r7, r5
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d119      	bne.n	80042fa <HAL_ADC_Start+0x8e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ca:	4a17      	ldr	r2, [pc, #92]	@ (8004328 <HAL_ADC_Start+0xbc>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	2280      	movs	r2, #128	@ 0x80
 80042d0:	0052      	lsls	r2, r2, #1
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	221c      	movs	r2, #28
 80042e4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2254      	movs	r2, #84	@ 0x54
 80042ea:	2100      	movs	r1, #0
 80042ec:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7ff faa6 	bl	8003844 <LL_ADC_REG_StartConversion>
 80042f8:	e008      	b.n	800430c <HAL_ADC_Start+0xa0>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2254      	movs	r2, #84	@ 0x54
 80042fe:	2100      	movs	r1, #0
 8004300:	5499      	strb	r1, [r3, r2]
 8004302:	e003      	b.n	800430c <HAL_ADC_Start+0xa0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004304:	230f      	movs	r3, #15
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	2202      	movs	r2, #2
 800430a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800430c:	230f      	movs	r3, #15
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	781b      	ldrb	r3, [r3, #0]
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b004      	add	sp, #16
 8004318:	bdb0      	pop	{r4, r5, r7, pc}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	40012400 	.word	0x40012400
 8004320:	0000049f 	.word	0x0000049f
 8004324:	0800d33c 	.word	0x0800d33c
 8004328:	fffff0fe 	.word	0xfffff0fe

0800432c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800432c:	b5b0      	push	{r4, r5, r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1e      	ldr	r2, [pc, #120]	@ (80043b4 <HAL_ADC_Stop+0x88>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d005      	beq.n	800434a <HAL_ADC_Stop+0x1e>
 800433e:	4a1e      	ldr	r2, [pc, #120]	@ (80043b8 <HAL_ADC_Stop+0x8c>)
 8004340:	4b1e      	ldr	r3, [pc, #120]	@ (80043bc <HAL_ADC_Stop+0x90>)
 8004342:	0011      	movs	r1, r2
 8004344:	0018      	movs	r0, r3
 8004346:	f7fe fe81 	bl	800304c <assert_failed>

  __HAL_LOCK(hadc);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2254      	movs	r2, #84	@ 0x54
 800434e:	5c9b      	ldrb	r3, [r3, r2]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_ADC_Stop+0x2c>
 8004354:	2302      	movs	r3, #2
 8004356:	e029      	b.n	80043ac <HAL_ADC_Stop+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2254      	movs	r2, #84	@ 0x54
 800435c:	2101      	movs	r1, #1
 800435e:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004360:	250f      	movs	r5, #15
 8004362:	197c      	adds	r4, r7, r5
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	0018      	movs	r0, r3
 8004368:	f000 fb86 	bl	8004a78 <ADC_ConversionStop>
 800436c:	0003      	movs	r3, r0
 800436e:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004370:	197b      	adds	r3, r7, r5
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d112      	bne.n	800439e <HAL_ADC_Stop+0x72>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004378:	197c      	adds	r4, r7, r5
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0018      	movs	r0, r3
 800437e:	f000 fc55 	bl	8004c2c <ADC_Disable>
 8004382:	0003      	movs	r3, r0
 8004384:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004386:	197b      	adds	r3, r7, r5
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d107      	bne.n	800439e <HAL_ADC_Stop+0x72>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004392:	4a0b      	ldr	r2, [pc, #44]	@ (80043c0 <HAL_ADC_Stop+0x94>)
 8004394:	4013      	ands	r3, r2
 8004396:	2201      	movs	r2, #1
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2254      	movs	r2, #84	@ 0x54
 80043a2:	2100      	movs	r1, #0
 80043a4:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80043a6:	230f      	movs	r3, #15
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	781b      	ldrb	r3, [r3, #0]
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b004      	add	sp, #16
 80043b2:	bdb0      	pop	{r4, r5, r7, pc}
 80043b4:	40012400 	.word	0x40012400
 80043b8:	000004e2 	.word	0x000004e2
 80043bc:	0800d33c 	.word	0x0800d33c
 80043c0:	fffffefe 	.word	0xfffffefe

080043c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_flag_end;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a4a      	ldr	r2, [pc, #296]	@ (80044fc <HAL_ADC_PollForConversion+0x138>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d005      	beq.n	80043e4 <HAL_ADC_PollForConversion+0x20>
 80043d8:	4a49      	ldr	r2, [pc, #292]	@ (8004500 <HAL_ADC_PollForConversion+0x13c>)
 80043da:	4b4a      	ldr	r3, [pc, #296]	@ (8004504 <HAL_ADC_PollForConversion+0x140>)
 80043dc:	0011      	movs	r1, r2
 80043de:	0018      	movs	r0, r3
 80043e0:	f7fe fe34 	bl	800304c <assert_failed>

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d102      	bne.n	80043f2 <HAL_ADC_PollForConversion+0x2e>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80043ec:	2308      	movs	r3, #8
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e00f      	b.n	8004412 <HAL_ADC_PollForConversion+0x4e>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	4013      	ands	r3, r2
 80043fc:	d007      	beq.n	800440e <HAL_ADC_PollForConversion+0x4a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	2220      	movs	r2, #32
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e072      	b.n	80044f4 <HAL_ADC_PollForConversion+0x130>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800440e:	2304      	movs	r3, #4
 8004410:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004412:	f7ff f8a7 	bl	8003564 <HAL_GetTick>
 8004416:	0003      	movs	r3, r0
 8004418:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800441a:	e01f      	b.n	800445c <HAL_ADC_PollForConversion+0x98>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	3301      	adds	r3, #1
 8004420:	d01c      	beq.n	800445c <HAL_ADC_PollForConversion+0x98>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004422:	f7ff f89f 	bl	8003564 <HAL_GetTick>
 8004426:	0002      	movs	r2, r0
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d302      	bcc.n	8004438 <HAL_ADC_PollForConversion+0x74>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d111      	bne.n	800445c <HAL_ADC_PollForConversion+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4013      	ands	r3, r2
 8004442:	d10b      	bne.n	800445c <HAL_ADC_PollForConversion+0x98>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004448:	2204      	movs	r2, #4
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2254      	movs	r2, #84	@ 0x54
 8004454:	2100      	movs	r1, #0
 8004456:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e04b      	b.n	80044f4 <HAL_ADC_PollForConversion+0x130>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4013      	ands	r3, r2
 8004466:	d0d9      	beq.n	800441c <HAL_ADC_PollForConversion+0x58>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446c:	2280      	movs	r2, #128	@ 0x80
 800446e:	0092      	lsls	r2, r2, #2
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	0018      	movs	r0, r3
 800447c:	f7ff f8f3 	bl	8003666 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004480:	1e03      	subs	r3, r0, #0
 8004482:	d02e      	beq.n	80044e2 <HAL_ADC_PollForConversion+0x11e>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	7e9b      	ldrb	r3, [r3, #26]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d12a      	bne.n	80044e2 <HAL_ADC_PollForConversion+0x11e>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2208      	movs	r2, #8
 8004494:	4013      	ands	r3, r2
 8004496:	2b08      	cmp	r3, #8
 8004498:	d123      	bne.n	80044e2 <HAL_ADC_PollForConversion+0x11e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	0018      	movs	r0, r3
 80044a0:	f7ff f9f4 	bl	800388c <LL_ADC_REG_IsConversionOngoing>
 80044a4:	1e03      	subs	r3, r0, #0
 80044a6:	d110      	bne.n	80044ca <HAL_ADC_PollForConversion+0x106>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	210c      	movs	r1, #12
 80044b4:	438a      	bics	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044bc:	4a12      	ldr	r2, [pc, #72]	@ (8004508 <HAL_ADC_PollForConversion+0x144>)
 80044be:	4013      	ands	r3, r2
 80044c0:	2201      	movs	r2, #1
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80044c8:	e00b      	b.n	80044e2 <HAL_ADC_PollForConversion+0x11e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ce:	2220      	movs	r2, #32
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044da:	2201      	movs	r2, #1
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	7e1b      	ldrb	r3, [r3, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <HAL_ADC_PollForConversion+0x12e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	220c      	movs	r2, #12
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	0018      	movs	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b004      	add	sp, #16
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40012400 	.word	0x40012400
 8004500:	00000516 	.word	0x00000516
 8004504:	0800d33c 	.word	0x0800d33c
 8004508:	fffffefe 	.word	0xfffffefe

0800450c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a07      	ldr	r2, [pc, #28]	@ (8004538 <HAL_ADC_GetValue+0x2c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d005      	beq.n	800452a <HAL_ADC_GetValue+0x1e>
 800451e:	4a07      	ldr	r2, [pc, #28]	@ (800453c <HAL_ADC_GetValue+0x30>)
 8004520:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <HAL_ADC_GetValue+0x34>)
 8004522:	0011      	movs	r1, r2
 8004524:	0018      	movs	r0, r3
 8004526:	f7fe fd91 	bl	800304c <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004530:	0018      	movs	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	b002      	add	sp, #8
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40012400 	.word	0x40012400
 800453c:	00000755 	.word	0x00000755
 8004540:	0800d33c 	.word	0x0800d33c

08004544 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b08b      	sub	sp, #44	@ 0x2c
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800454e:	2327      	movs	r3, #39	@ 0x27
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4aaa      	ldr	r2, [pc, #680]	@ (8004808 <HAL_ADC_ConfigChannel+0x2c4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d005      	beq.n	8004570 <HAL_ADC_ConfigChannel+0x2c>
 8004564:	4aa9      	ldr	r2, [pc, #676]	@ (800480c <HAL_ADC_ConfigChannel+0x2c8>)
 8004566:	4baa      	ldr	r3, [pc, #680]	@ (8004810 <HAL_ADC_ConfigChannel+0x2cc>)
 8004568:	0011      	movs	r1, r2
 800456a:	0018      	movs	r0, r3
 800456c:	f7fe fd6e 	bl	800304c <assert_failed>
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d100      	bne.n	800457a <HAL_ADC_ConfigChannel+0x36>
 8004578:	e07d      	b.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4aa5      	ldr	r2, [pc, #660]	@ (8004814 <HAL_ADC_ConfigChannel+0x2d0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d100      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x42>
 8004584:	e077      	b.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4aa3      	ldr	r2, [pc, #652]	@ (8004818 <HAL_ADC_ConfigChannel+0x2d4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d100      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x4e>
 8004590:	e071      	b.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4aa1      	ldr	r2, [pc, #644]	@ (800481c <HAL_ADC_ConfigChannel+0x2d8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d100      	bne.n	800459e <HAL_ADC_ConfigChannel+0x5a>
 800459c:	e06b      	b.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a9f      	ldr	r2, [pc, #636]	@ (8004820 <HAL_ADC_ConfigChannel+0x2dc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d100      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x66>
 80045a8:	e065      	b.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a9d      	ldr	r2, [pc, #628]	@ (8004824 <HAL_ADC_ConfigChannel+0x2e0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d100      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x72>
 80045b4:	e05f      	b.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a9b      	ldr	r2, [pc, #620]	@ (8004828 <HAL_ADC_ConfigChannel+0x2e4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d05a      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a99      	ldr	r2, [pc, #612]	@ (800482c <HAL_ADC_ConfigChannel+0x2e8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d055      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a98      	ldr	r2, [pc, #608]	@ (8004830 <HAL_ADC_ConfigChannel+0x2ec>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d050      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a96      	ldr	r2, [pc, #600]	@ (8004834 <HAL_ADC_ConfigChannel+0x2f0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d04b      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a95      	ldr	r2, [pc, #596]	@ (8004838 <HAL_ADC_ConfigChannel+0x2f4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d046      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a93      	ldr	r2, [pc, #588]	@ (800483c <HAL_ADC_ConfigChannel+0x2f8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d041      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a92      	ldr	r2, [pc, #584]	@ (8004840 <HAL_ADC_ConfigChannel+0x2fc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d03c      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a90      	ldr	r2, [pc, #576]	@ (8004844 <HAL_ADC_ConfigChannel+0x300>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d037      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a8f      	ldr	r2, [pc, #572]	@ (8004848 <HAL_ADC_ConfigChannel+0x304>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d032      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a8d      	ldr	r2, [pc, #564]	@ (800484c <HAL_ADC_ConfigChannel+0x308>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d02d      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a8c      	ldr	r2, [pc, #560]	@ (8004850 <HAL_ADC_ConfigChannel+0x30c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d028      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a8a      	ldr	r2, [pc, #552]	@ (8004854 <HAL_ADC_ConfigChannel+0x310>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d023      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a89      	ldr	r2, [pc, #548]	@ (8004858 <HAL_ADC_ConfigChannel+0x314>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d01e      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a87      	ldr	r2, [pc, #540]	@ (800485c <HAL_ADC_ConfigChannel+0x318>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d019      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a86      	ldr	r2, [pc, #536]	@ (8004860 <HAL_ADC_ConfigChannel+0x31c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d014      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a84      	ldr	r2, [pc, #528]	@ (8004864 <HAL_ADC_ConfigChannel+0x320>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00f      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a83      	ldr	r2, [pc, #524]	@ (8004868 <HAL_ADC_ConfigChannel+0x324>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00a      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a81      	ldr	r2, [pc, #516]	@ (800486c <HAL_ADC_ConfigChannel+0x328>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d005      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x132>
 800466a:	4a81      	ldr	r2, [pc, #516]	@ (8004870 <HAL_ADC_ConfigChannel+0x32c>)
 800466c:	4b68      	ldr	r3, [pc, #416]	@ (8004810 <HAL_ADC_ConfigChannel+0x2cc>)
 800466e:	0011      	movs	r1, r2
 8004670:	0018      	movs	r0, r3
 8004672:	f7fe fceb 	bl	800304c <assert_failed>
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_ADC_ConfigChannel+0x150>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	4a7c      	ldr	r2, [pc, #496]	@ (8004874 <HAL_ADC_ConfigChannel+0x330>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d005      	beq.n	8004694 <HAL_ADC_ConfigChannel+0x150>
 8004688:	4a7b      	ldr	r2, [pc, #492]	@ (8004878 <HAL_ADC_ConfigChannel+0x334>)
 800468a:	4b61      	ldr	r3, [pc, #388]	@ (8004810 <HAL_ADC_ConfigChannel+0x2cc>)
 800468c:	0011      	movs	r1, r2
 800468e:	0018      	movs	r0, r3
 8004690:	f7fe fcdc 	bl	800304c <assert_failed>

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	2380      	movs	r3, #128	@ 0x80
 800469a:	061b      	lsls	r3, r3, #24
 800469c:	429a      	cmp	r2, r3
 800469e:	d004      	beq.n	80046aa <HAL_ADC_ConfigChannel+0x166>
      (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046a4:	4a75      	ldr	r2, [pc, #468]	@ (800487c <HAL_ADC_ConfigChannel+0x338>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10e      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x184>
  {
    assert_param(IS_ADC_REGULAR_RANK_SEQ_FIXED(pConfig->Rank));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d03e      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x1ec>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d03a      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x1ec>
 80046ba:	4a71      	ldr	r2, [pc, #452]	@ (8004880 <HAL_ADC_ConfigChannel+0x33c>)
 80046bc:	4b54      	ldr	r3, [pc, #336]	@ (8004810 <HAL_ADC_ConfigChannel+0x2cc>)
 80046be:	0011      	movs	r1, r2
 80046c0:	0018      	movs	r0, r3
 80046c2:	f7fe fcc3 	bl	800304c <assert_failed>
 80046c6:	e033      	b.n	8004730 <HAL_ADC_ConfigChannel+0x1ec>
  }
  else
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_ADC_ConfigChannel+0x194>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d905      	bls.n	80046e4 <HAL_ADC_ConfigChannel+0x1a0>
 80046d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004884 <HAL_ADC_ConfigChannel+0x340>)
 80046da:	4b4d      	ldr	r3, [pc, #308]	@ (8004810 <HAL_ADC_ConfigChannel+0x2cc>)
 80046dc:	0011      	movs	r1, r2
 80046de:	0018      	movs	r0, r3
 80046e0:	f7fe fcb4 	bl	800304c <assert_failed>

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d021      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x1ec>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d01d      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x1ec>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d019      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x1ec>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b0c      	cmp	r3, #12
 8004702:	d015      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x1ec>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b10      	cmp	r3, #16
 800470a:	d011      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x1ec>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b14      	cmp	r3, #20
 8004712:	d00d      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x1ec>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b18      	cmp	r3, #24
 800471a:	d009      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x1ec>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b1c      	cmp	r3, #28
 8004722:	d005      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x1ec>
 8004724:	4a58      	ldr	r2, [pc, #352]	@ (8004888 <HAL_ADC_ConfigChannel+0x344>)
 8004726:	4b3a      	ldr	r3, [pc, #232]	@ (8004810 <HAL_ADC_ConfigChannel+0x2cc>)
 8004728:	0011      	movs	r1, r2
 800472a:	0018      	movs	r0, r3
 800472c:	f7fe fc8e 	bl	800304c <assert_failed>
  }

  __HAL_LOCK(hadc);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2254      	movs	r2, #84	@ 0x54
 8004734:	5c9b      	ldrb	r3, [r3, r2]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_ADC_ConfigChannel+0x1fa>
 800473a:	2302      	movs	r3, #2
 800473c:	e183      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x502>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2254      	movs	r2, #84	@ 0x54
 8004742:	2101      	movs	r1, #1
 8004744:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	0018      	movs	r0, r3
 800474c:	f7ff f89e 	bl	800388c <LL_ADC_REG_IsConversionOngoing>
 8004750:	1e03      	subs	r3, r0, #0
 8004752:	d000      	beq.n	8004756 <HAL_ADC_ConfigChannel+0x212>
 8004754:	e166      	b.n	8004a24 <HAL_ADC_ConfigChannel+0x4e0>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d100      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x21c>
 800475e:	e11a      	b.n	8004996 <HAL_ADC_ConfigChannel+0x452>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	2380      	movs	r3, #128	@ 0x80
 8004766:	061b      	lsls	r3, r3, #24
 8004768:	429a      	cmp	r2, r3
 800476a:	d004      	beq.n	8004776 <HAL_ADC_ConfigChannel+0x232>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004770:	4a42      	ldr	r2, [pc, #264]	@ (800487c <HAL_ADC_ConfigChannel+0x338>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <HAL_ADC_ConfigChannel+0x244>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	0019      	movs	r1, r3
 8004780:	0010      	movs	r0, r2
 8004782:	f7fe ffa1 	bl	80036c8 <LL_ADC_REG_SetSequencerChAdd>
 8004786:	e0a2      	b.n	80048ce <HAL_ADC_ConfigChannel+0x38a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	211f      	movs	r1, #31
 8004792:	400b      	ands	r3, r1
 8004794:	210f      	movs	r1, #15
 8004796:	4099      	lsls	r1, r3
 8004798:	000b      	movs	r3, r1
 800479a:	43db      	mvns	r3, r3
 800479c:	4013      	ands	r3, r2
 800479e:	001c      	movs	r4, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	025b      	lsls	r3, r3, #9
 80047a6:	0a5b      	lsrs	r3, r3, #9
 80047a8:	d105      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x272>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	0e9b      	lsrs	r3, r3, #26
 80047b0:	221f      	movs	r2, #31
 80047b2:	401a      	ands	r2, r3
 80047b4:	e070      	b.n	8004898 <HAL_ADC_ConfigChannel+0x354>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80047bc:	231f      	movs	r3, #31
 80047be:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e00e      	b.n	80047ea <HAL_ADC_ConfigChannel+0x2a6>
    result <<= 1U;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2201      	movs	r2, #1
 80047d6:	4013      	ands	r3, r2
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
    s--;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ed      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x288>
  result <<= s;                        /* shift when v's highest bits are zero */
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	409a      	lsls	r2, r3
 80047f6:	0013      	movs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
  return result;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d143      	bne.n	800488c <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8004804:	2320      	movs	r3, #32
 8004806:	e046      	b.n	8004896 <HAL_ADC_ConfigChannel+0x352>
 8004808:	40012400 	.word	0x40012400
 800480c:	000008e4 	.word	0x000008e4
 8004810:	0800d33c 	.word	0x0800d33c
 8004814:	04000002 	.word	0x04000002
 8004818:	08000004 	.word	0x08000004
 800481c:	0c000008 	.word	0x0c000008
 8004820:	10000010 	.word	0x10000010
 8004824:	14000020 	.word	0x14000020
 8004828:	18000040 	.word	0x18000040
 800482c:	1c000080 	.word	0x1c000080
 8004830:	20000100 	.word	0x20000100
 8004834:	24000200 	.word	0x24000200
 8004838:	28000400 	.word	0x28000400
 800483c:	2c000800 	.word	0x2c000800
 8004840:	30001000 	.word	0x30001000
 8004844:	34002000 	.word	0x34002000
 8004848:	38004000 	.word	0x38004000
 800484c:	3c008000 	.word	0x3c008000
 8004850:	40010000 	.word	0x40010000
 8004854:	44020000 	.word	0x44020000
 8004858:	48040000 	.word	0x48040000
 800485c:	4c080000 	.word	0x4c080000
 8004860:	ac000800 	.word	0xac000800
 8004864:	b0001000 	.word	0xb0001000
 8004868:	b4002000 	.word	0xb4002000
 800486c:	cc080000 	.word	0xcc080000
 8004870:	000008e5 	.word	0x000008e5
 8004874:	7fffff04 	.word	0x7fffff04
 8004878:	000008e6 	.word	0x000008e6
 800487c:	80000004 	.word	0x80000004
 8004880:	000008eb 	.word	0x000008eb
 8004884:	000008ef 	.word	0x000008ef
 8004888:	000008f1 	.word	0x000008f1
  return __builtin_clz(value);
 800488c:	69f8      	ldr	r0, [r7, #28]
 800488e:	f7fb fe01 	bl	8000494 <__clzsi2>
 8004892:	0003      	movs	r3, r0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	001a      	movs	r2, r3
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	211f      	movs	r1, #31
 800489e:	400b      	ands	r3, r1
 80048a0:	409a      	lsls	r2, r3
 80048a2:	0013      	movs	r3, r2
 80048a4:	0022      	movs	r2, r4
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	089b      	lsrs	r3, r3, #2
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d808      	bhi.n	80048ce <HAL_ADC_ConfigChannel+0x38a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	6859      	ldr	r1, [r3, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	001a      	movs	r2, r3
 80048ca:	f7fe fedd 	bl	8003688 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	001a      	movs	r2, r3
 80048dc:	f7fe ff18 	bl	8003710 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	db00      	blt.n	80048ea <HAL_ADC_ConfigChannel+0x3a6>
 80048e8:	e0a6      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x4f4>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048ea:	4b59      	ldr	r3, [pc, #356]	@ (8004a50 <HAL_ADC_ConfigChannel+0x50c>)
 80048ec:	0018      	movs	r0, r3
 80048ee:	f7fe fe79 	bl	80035e4 <LL_ADC_GetCommonPathInternalCh>
 80048f2:	0003      	movs	r3, r0
 80048f4:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a56      	ldr	r2, [pc, #344]	@ (8004a54 <HAL_ADC_ConfigChannel+0x510>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d122      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x402>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004900:	6a3a      	ldr	r2, [r7, #32]
 8004902:	2380      	movs	r3, #128	@ 0x80
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004908:	d11d      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x402>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	2280      	movs	r2, #128	@ 0x80
 800490e:	0412      	lsls	r2, r2, #16
 8004910:	4313      	orrs	r3, r2
 8004912:	4a4f      	ldr	r2, [pc, #316]	@ (8004a50 <HAL_ADC_ConfigChannel+0x50c>)
 8004914:	0019      	movs	r1, r3
 8004916:	0010      	movs	r0, r2
 8004918:	f7fe fe50 	bl	80035bc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800491c:	4b4e      	ldr	r3, [pc, #312]	@ (8004a58 <HAL_ADC_ConfigChannel+0x514>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	494e      	ldr	r1, [pc, #312]	@ (8004a5c <HAL_ADC_ConfigChannel+0x518>)
 8004922:	0018      	movs	r0, r3
 8004924:	f7fb fc02 	bl	800012c <__udivsi3>
 8004928:	0003      	movs	r3, r0
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	0013      	movs	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	189b      	adds	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004936:	e002      	b.n	800493e <HAL_ADC_ConfigChannel+0x3fa>
          {
            wait_loop_index--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3b01      	subs	r3, #1
 800493c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1f9      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x3f4>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004944:	e078      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x4f4>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a45      	ldr	r2, [pc, #276]	@ (8004a60 <HAL_ADC_ConfigChannel+0x51c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d10e      	bne.n	800496e <HAL_ADC_ConfigChannel+0x42a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004950:	6a3a      	ldr	r2, [r7, #32]
 8004952:	2380      	movs	r3, #128	@ 0x80
 8004954:	045b      	lsls	r3, r3, #17
 8004956:	4013      	ands	r3, r2
 8004958:	d109      	bne.n	800496e <HAL_ADC_ConfigChannel+0x42a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	2280      	movs	r2, #128	@ 0x80
 800495e:	0452      	lsls	r2, r2, #17
 8004960:	4313      	orrs	r3, r2
 8004962:	4a3b      	ldr	r2, [pc, #236]	@ (8004a50 <HAL_ADC_ConfigChannel+0x50c>)
 8004964:	0019      	movs	r1, r3
 8004966:	0010      	movs	r0, r2
 8004968:	f7fe fe28 	bl	80035bc <LL_ADC_SetCommonPathInternalCh>
 800496c:	e064      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x4f4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a3c      	ldr	r2, [pc, #240]	@ (8004a64 <HAL_ADC_ConfigChannel+0x520>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d15f      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x4f4>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	2380      	movs	r3, #128	@ 0x80
 800497c:	03db      	lsls	r3, r3, #15
 800497e:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004980:	d15a      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x4f4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	2280      	movs	r2, #128	@ 0x80
 8004986:	03d2      	lsls	r2, r2, #15
 8004988:	4313      	orrs	r3, r2
 800498a:	4a31      	ldr	r2, [pc, #196]	@ (8004a50 <HAL_ADC_ConfigChannel+0x50c>)
 800498c:	0019      	movs	r1, r3
 800498e:	0010      	movs	r0, r2
 8004990:	f7fe fe14 	bl	80035bc <LL_ADC_SetCommonPathInternalCh>
 8004994:	e050      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x4f4>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	2380      	movs	r3, #128	@ 0x80
 800499c:	061b      	lsls	r3, r3, #24
 800499e:	429a      	cmp	r2, r3
 80049a0:	d004      	beq.n	80049ac <HAL_ADC_ConfigChannel+0x468>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049a6:	4a30      	ldr	r2, [pc, #192]	@ (8004a68 <HAL_ADC_ConfigChannel+0x524>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d107      	bne.n	80049bc <HAL_ADC_ConfigChannel+0x478>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0019      	movs	r1, r3
 80049b6:	0010      	movs	r0, r2
 80049b8:	f7fe fe97 	bl	80036ea <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	da39      	bge.n	8004a38 <HAL_ADC_ConfigChannel+0x4f4>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049c4:	4b22      	ldr	r3, [pc, #136]	@ (8004a50 <HAL_ADC_ConfigChannel+0x50c>)
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7fe fe0c 	bl	80035e4 <LL_ADC_GetCommonPathInternalCh>
 80049cc:	0003      	movs	r3, r0
 80049ce:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a54 <HAL_ADC_ConfigChannel+0x510>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d108      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x4a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	4a23      	ldr	r2, [pc, #140]	@ (8004a6c <HAL_ADC_ConfigChannel+0x528>)
 80049de:	4013      	ands	r3, r2
 80049e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a50 <HAL_ADC_ConfigChannel+0x50c>)
 80049e2:	0019      	movs	r1, r3
 80049e4:	0010      	movs	r0, r2
 80049e6:	f7fe fde9 	bl	80035bc <LL_ADC_SetCommonPathInternalCh>
 80049ea:	e025      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x4f4>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a60 <HAL_ADC_ConfigChannel+0x51c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d108      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x4c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a70 <HAL_ADC_ConfigChannel+0x52c>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	4a14      	ldr	r2, [pc, #80]	@ (8004a50 <HAL_ADC_ConfigChannel+0x50c>)
 80049fe:	0019      	movs	r1, r3
 8004a00:	0010      	movs	r0, r2
 8004a02:	f7fe fddb 	bl	80035bc <LL_ADC_SetCommonPathInternalCh>
 8004a06:	e017      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x4f4>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a15      	ldr	r2, [pc, #84]	@ (8004a64 <HAL_ADC_ConfigChannel+0x520>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d112      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x4f4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	4a17      	ldr	r2, [pc, #92]	@ (8004a74 <HAL_ADC_ConfigChannel+0x530>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	4a0d      	ldr	r2, [pc, #52]	@ (8004a50 <HAL_ADC_ConfigChannel+0x50c>)
 8004a1a:	0019      	movs	r1, r3
 8004a1c:	0010      	movs	r0, r2
 8004a1e:	f7fe fdcd 	bl	80035bc <LL_ADC_SetCommonPathInternalCh>
 8004a22:	e009      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x4f4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a28:	2220      	movs	r2, #32
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004a30:	2327      	movs	r3, #39	@ 0x27
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	2201      	movs	r2, #1
 8004a36:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2254      	movs	r2, #84	@ 0x54
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004a40:	2327      	movs	r3, #39	@ 0x27
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	781b      	ldrb	r3, [r3, #0]
}
 8004a46:	0018      	movs	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b00b      	add	sp, #44	@ 0x2c
 8004a4c:	bd90      	pop	{r4, r7, pc}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	40012708 	.word	0x40012708
 8004a54:	ac000800 	.word	0xac000800
 8004a58:	20000014 	.word	0x20000014
 8004a5c:	00030d40 	.word	0x00030d40
 8004a60:	b4002000 	.word	0xb4002000
 8004a64:	b0001000 	.word	0xb0001000
 8004a68:	80000004 	.word	0x80000004
 8004a6c:	ff7fffff 	.word	0xff7fffff
 8004a70:	feffffff 	.word	0xfeffffff
 8004a74:	ffbfffff 	.word	0xffbfffff

08004a78 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a23      	ldr	r2, [pc, #140]	@ (8004b14 <ADC_ConversionStop+0x9c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d005      	beq.n	8004a96 <ADC_ConversionStop+0x1e>
 8004a8a:	4a23      	ldr	r2, [pc, #140]	@ (8004b18 <ADC_ConversionStop+0xa0>)
 8004a8c:	4b23      	ldr	r3, [pc, #140]	@ (8004b1c <ADC_ConversionStop+0xa4>)
 8004a8e:	0011      	movs	r1, r2
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7fe fadb 	bl	800304c <assert_failed>

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7fe fef6 	bl	800388c <LL_ADC_REG_IsConversionOngoing>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d031      	beq.n	8004b08 <ADC_ConversionStop+0x90>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7fe feba 	bl	8003822 <LL_ADC_IsDisableOngoing>
 8004aae:	1e03      	subs	r3, r0, #0
 8004ab0:	d104      	bne.n	8004abc <ADC_ConversionStop+0x44>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f7fe fed6 	bl	8003868 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004abc:	f7fe fd52 	bl	8003564 <HAL_GetTick>
 8004ac0:	0003      	movs	r3, r0
 8004ac2:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004ac4:	e01a      	b.n	8004afc <ADC_ConversionStop+0x84>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004ac6:	f7fe fd4d 	bl	8003564 <HAL_GetTick>
 8004aca:	0002      	movs	r2, r0
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d913      	bls.n	8004afc <ADC_ConversionStop+0x84>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2204      	movs	r2, #4
 8004adc:	4013      	ands	r3, r2
 8004ade:	d00d      	beq.n	8004afc <ADC_ConversionStop+0x84>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae4:	2210      	movs	r2, #16
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af0:	2201      	movs	r2, #1
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e006      	b.n	8004b0a <ADC_ConversionStop+0x92>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2204      	movs	r2, #4
 8004b04:	4013      	ands	r3, r2
 8004b06:	d1de      	bne.n	8004ac6 <ADC_ConversionStop+0x4e>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b004      	add	sp, #16
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	40012400 	.word	0x40012400
 8004b18:	00000ac7 	.word	0x00000ac7
 8004b1c:	0800d33c 	.word	0x0800d33c

08004b20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7fe fe65 	bl	8003800 <LL_ADC_IsEnabled>
 8004b36:	1e03      	subs	r3, r0, #0
 8004b38:	d000      	beq.n	8004b3c <ADC_Enable+0x1c>
 8004b3a:	e069      	b.n	8004c10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	4a36      	ldr	r2, [pc, #216]	@ (8004c1c <ADC_Enable+0xfc>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	d00d      	beq.n	8004b64 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4c:	2210      	movs	r2, #16
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b58:	2201      	movs	r2, #1
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e056      	b.n	8004c12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7fe fe25 	bl	80037b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8004b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c20 <ADC_Enable+0x100>)
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7fe fd37 	bl	80035e4 <LL_ADC_GetCommonPathInternalCh>
 8004b76:	0002      	movs	r2, r0
 8004b78:	2380      	movs	r3, #128	@ 0x80
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d00f      	beq.n	8004ba0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b80:	4b28      	ldr	r3, [pc, #160]	@ (8004c24 <ADC_Enable+0x104>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4928      	ldr	r1, [pc, #160]	@ (8004c28 <ADC_Enable+0x108>)
 8004b86:	0018      	movs	r0, r3
 8004b88:	f7fb fad0 	bl	800012c <__udivsi3>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8004b90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b92:	e002      	b.n	8004b9a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f9      	bne.n	8004b94 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	7e5b      	ldrb	r3, [r3, #25]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d033      	beq.n	8004c10 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004ba8:	f7fe fcdc 	bl	8003564 <HAL_GetTick>
 8004bac:	0003      	movs	r3, r0
 8004bae:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bb0:	e027      	b.n	8004c02 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f7fe fe22 	bl	8003800 <LL_ADC_IsEnabled>
 8004bbc:	1e03      	subs	r3, r0, #0
 8004bbe:	d104      	bne.n	8004bca <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f7fe fdf7 	bl	80037b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004bca:	f7fe fccb 	bl	8003564 <HAL_GetTick>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d914      	bls.n	8004c02 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2201      	movs	r2, #1
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d00d      	beq.n	8004c02 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bea:	2210      	movs	r2, #16
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e007      	b.n	8004c12 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d1d0      	bne.n	8004bb2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b004      	add	sp, #16
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	80000017 	.word	0x80000017
 8004c20:	40012708 	.word	0x40012708
 8004c24:	20000014 	.word	0x20000014
 8004c28:	00030d40 	.word	0x00030d40

08004c2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7fe fdf2 	bl	8003822 <LL_ADC_IsDisableOngoing>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	0018      	movs	r0, r3
 8004c48:	f7fe fdda 	bl	8003800 <LL_ADC_IsEnabled>
 8004c4c:	1e03      	subs	r3, r0, #0
 8004c4e:	d046      	beq.n	8004cde <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d143      	bne.n	8004cde <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2205      	movs	r2, #5
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d10d      	bne.n	8004c80 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7fe fdb7 	bl	80037dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2203      	movs	r2, #3
 8004c74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c76:	f7fe fc75 	bl	8003564 <HAL_GetTick>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c7e:	e028      	b.n	8004cd2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c84:	2210      	movs	r2, #16
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c90:	2201      	movs	r2, #1
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e021      	b.n	8004ce0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c9c:	f7fe fc62 	bl	8003564 <HAL_GetTick>
 8004ca0:	0002      	movs	r2, r0
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d913      	bls.n	8004cd2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d00d      	beq.n	8004cd2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cba:	2210      	movs	r2, #16
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e006      	b.n	8004ce0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d1de      	bne.n	8004c9c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b004      	add	sp, #16
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <LL_ADC_GetCommonClock>:
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	23f0      	movs	r3, #240	@ 0xf0
 8004cf6:	039b      	lsls	r3, r3, #14
 8004cf8:	4013      	ands	r3, r2
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b002      	add	sp, #8
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <LL_ADC_GetClock>:
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	0f9b      	lsrs	r3, r3, #30
 8004d10:	079b      	lsls	r3, r3, #30
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b002      	add	sp, #8
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <LL_ADC_SetCalibrationFactor>:
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	22b4      	movs	r2, #180	@ 0xb4
 8004d28:	589b      	ldr	r3, [r3, r2]
 8004d2a:	227f      	movs	r2, #127	@ 0x7f
 8004d2c:	4393      	bics	r3, r2
 8004d2e:	001a      	movs	r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	21b4      	movs	r1, #180	@ 0xb4
 8004d38:	505a      	str	r2, [r3, r1]
}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b002      	add	sp, #8
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <LL_ADC_GetCalibrationFactor>:
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	22b4      	movs	r2, #180	@ 0xb4
 8004d4e:	589b      	ldr	r3, [r3, r2]
 8004d50:	227f      	movs	r2, #127	@ 0x7f
 8004d52:	4013      	ands	r3, r2
}
 8004d54:	0018      	movs	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b002      	add	sp, #8
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <LL_ADC_Enable>:
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a04      	ldr	r2, [pc, #16]	@ (8004d7c <LL_ADC_Enable+0x20>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	609a      	str	r2, [r3, #8]
}
 8004d74:	46c0      	nop			@ (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	7fffffe8 	.word	0x7fffffe8

08004d80 <LL_ADC_Disable>:
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a04      	ldr	r2, [pc, #16]	@ (8004da0 <LL_ADC_Disable+0x20>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2202      	movs	r2, #2
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	46c0      	nop			@ (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	7fffffe8 	.word	0x7fffffe8

08004da4 <LL_ADC_IsEnabled>:
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2201      	movs	r2, #1
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <LL_ADC_IsEnabled+0x18>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <LL_ADC_IsEnabled+0x1a>
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b002      	add	sp, #8
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <LL_ADC_StartCalibration>:
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4a05      	ldr	r2, [pc, #20]	@ (8004dec <LL_ADC_StartCalibration+0x24>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2280      	movs	r2, #128	@ 0x80
 8004dda:	0612      	lsls	r2, r2, #24
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	609a      	str	r2, [r3, #8]
}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b002      	add	sp, #8
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			@ (mov r8, r8)
 8004dec:	7fffffe8 	.word	0x7fffffe8

08004df0 <LL_ADC_IsCalibrationOnGoing>:
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	0fdb      	lsrs	r3, r3, #31
 8004dfe:	07da      	lsls	r2, r3, #31
 8004e00:	2380      	movs	r3, #128	@ 0x80
 8004e02:	061b      	lsls	r3, r3, #24
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d101      	bne.n	8004e0c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b002      	add	sp, #8
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b08b      	sub	sp, #44	@ 0x2c
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	623b      	str	r3, [r7, #32]
  uint32_t tickstart;
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a78      	ldr	r2, [pc, #480]	@ (8005010 <HAL_ADCEx_Calibration_Start+0x1f8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_ADCEx_Calibration_Start+0x24>
 8004e32:	4b78      	ldr	r3, [pc, #480]	@ (8005014 <HAL_ADCEx_Calibration_Start+0x1fc>)
 8004e34:	2172      	movs	r1, #114	@ 0x72
 8004e36:	0018      	movs	r0, r3
 8004e38:	f7fe f908 	bl	800304c <assert_failed>

  __HAL_LOCK(hadc);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2254      	movs	r2, #84	@ 0x54
 8004e40:	5c9b      	ldrb	r3, [r3, r2]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_ADCEx_Calibration_Start+0x32>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e0de      	b.n	8005008 <HAL_ADCEx_Calibration_Start+0x1f0>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2254      	movs	r2, #84	@ 0x54
 8004e4e:	2101      	movs	r1, #1
 8004e50:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e52:	231f      	movs	r3, #31
 8004e54:	18fc      	adds	r4, r7, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7ff fee7 	bl	8004c2c <ADC_Disable>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	0018      	movs	r0, r3
 8004e68:	f7ff ff9c 	bl	8004da4 <LL_ADC_IsEnabled>
 8004e6c:	1e03      	subs	r3, r0, #0
 8004e6e:	d000      	beq.n	8004e72 <HAL_ADCEx_Calibration_Start+0x5a>
 8004e70:	e0bd      	b.n	8004fee <HAL_ADCEx_Calibration_Start+0x1d6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e76:	4a68      	ldr	r2, [pc, #416]	@ (8005018 <HAL_ADCEx_Calibration_Start+0x200>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4a64      	ldr	r2, [pc, #400]	@ (800501c <HAL_ADCEx_Calibration_Start+0x204>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4961      	ldr	r1, [pc, #388]	@ (8005020 <HAL_ADCEx_Calibration_Start+0x208>)
 8004e9a:	400a      	ands	r2, r1
 8004e9c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea2:	e02e      	b.n	8004f02 <HAL_ADCEx_Calibration_Start+0xea>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f7ff ff8d 	bl	8004dc8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004eae:	e015      	b.n	8004edc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        wait_loop_index++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	23ae      	movs	r3, #174	@ 0xae
 8004eba:	029b      	lsls	r3, r3, #10
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d30d      	bcc.n	8004edc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec4:	2212      	movs	r2, #18
 8004ec6:	4393      	bics	r3, r2
 8004ec8:	2210      	movs	r2, #16
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2254      	movs	r2, #84	@ 0x54
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e095      	b.n	8005008 <HAL_ADCEx_Calibration_Start+0x1f0>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7ff ff85 	bl	8004df0 <LL_ADC_IsCalibrationOnGoing>
 8004ee6:	1e03      	subs	r3, r0, #0
 8004ee8:	d1e2      	bne.n	8004eb0 <HAL_ADCEx_Calibration_Start+0x98>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f7ff ff27 	bl	8004d42 <LL_ADC_GetCalibrationFactor>
 8004ef4:	0002      	movs	r2, r0
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	189b      	adds	r3, r3, r2
 8004efa:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	3301      	adds	r3, #1
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	2b07      	cmp	r3, #7
 8004f06:	d9cd      	bls.n	8004ea4 <HAL_ADCEx_Calibration_Start+0x8c>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004f08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f0a:	6a38      	ldr	r0, [r7, #32]
 8004f0c:	f7fb f90e 	bl	800012c <__udivsi3>
 8004f10:	0003      	movs	r3, r0
 8004f12:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7ff ff1f 	bl	8004d5c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f7ff feed 	bl	8004d02 <LL_ADC_GetClock>
 8004f28:	1e03      	subs	r3, r0, #0
 8004f2a:	d11b      	bne.n	8004f64 <HAL_ADCEx_Calibration_Start+0x14c>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8005024 <HAL_ADCEx_Calibration_Start+0x20c>)
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f7ff feda 	bl	8004ce8 <LL_ADC_GetCommonClock>
 8004f34:	0003      	movs	r3, r0
 8004f36:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	23e0      	movs	r3, #224	@ 0xe0
 8004f3c:	035b      	lsls	r3, r3, #13
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d310      	bcc.n	8004f64 <HAL_ADCEx_Calibration_Start+0x14c>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	0c9b      	lsrs	r3, r3, #18
 8004f46:	3b03      	subs	r3, #3
 8004f48:	2201      	movs	r2, #1
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	0013      	movs	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8004f56:	e002      	b.n	8004f5e <HAL_ADCEx_Calibration_Start+0x146>
        {
          delay_cpu_cycles--;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f9      	bne.n	8004f58 <HAL_ADCEx_Calibration_Start+0x140>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a3a      	ldr	r2, [r7, #32]
 8004f6a:	0011      	movs	r1, r2
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7ff fed4 	bl	8004d1a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	0018      	movs	r0, r3
 8004f78:	f7ff ff02 	bl	8004d80 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f7c:	f7fe faf2 	bl	8003564 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f84:	e01b      	b.n	8004fbe <HAL_ADCEx_Calibration_Start+0x1a6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f86:	f7fe faed 	bl	8003564 <HAL_GetTick>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d914      	bls.n	8004fbe <HAL_ADCEx_Calibration_Start+0x1a6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7ff ff03 	bl	8004da4 <LL_ADC_IsEnabled>
 8004f9e:	1e03      	subs	r3, r0, #0
 8004fa0:	d00d      	beq.n	8004fbe <HAL_ADCEx_Calibration_Start+0x1a6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e024      	b.n	8005008 <HAL_ADCEx_Calibration_Start+0x1f0>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f7ff feee 	bl	8004da4 <LL_ADC_IsEnabled>
 8004fc8:	1e03      	subs	r3, r0, #0
 8004fca:	d1dc      	bne.n	8004f86 <HAL_ADCEx_Calibration_Start+0x16e>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68d9      	ldr	r1, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	4393      	bics	r3, r2
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fec:	e005      	b.n	8004ffa <HAL_ADCEx_Calibration_Start+0x1e2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff2:	2210      	movs	r2, #16
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2254      	movs	r2, #84	@ 0x54
 8004ffe:	2100      	movs	r1, #0
 8005000:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005002:	231f      	movs	r3, #31
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	781b      	ldrb	r3, [r3, #0]
}
 8005008:	0018      	movs	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	b00b      	add	sp, #44	@ 0x2c
 800500e:	bd90      	pop	{r4, r7, pc}
 8005010:	40012400 	.word	0x40012400
 8005014:	0800d374 	.word	0x0800d374
 8005018:	fffffefd 	.word	0xfffffefd
 800501c:	00008003 	.word	0x00008003
 8005020:	ffff7ffc 	.word	0xffff7ffc
 8005024:	40012708 	.word	0x40012708

08005028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	0002      	movs	r2, r0
 8005030:	1dfb      	adds	r3, r7, #7
 8005032:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b7f      	cmp	r3, #127	@ 0x7f
 800503a:	d809      	bhi.n	8005050 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800503c:	1dfb      	adds	r3, r7, #7
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	001a      	movs	r2, r3
 8005042:	231f      	movs	r3, #31
 8005044:	401a      	ands	r2, r3
 8005046:	4b04      	ldr	r3, [pc, #16]	@ (8005058 <__NVIC_EnableIRQ+0x30>)
 8005048:	2101      	movs	r1, #1
 800504a:	4091      	lsls	r1, r2
 800504c:	000a      	movs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005050:	46c0      	nop			@ (mov r8, r8)
 8005052:	46bd      	mov	sp, r7
 8005054:	b002      	add	sp, #8
 8005056:	bd80      	pop	{r7, pc}
 8005058:	e000e100 	.word	0xe000e100

0800505c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	0002      	movs	r2, r0
 8005064:	6039      	str	r1, [r7, #0]
 8005066:	1dfb      	adds	r3, r7, #7
 8005068:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800506a:	1dfb      	adds	r3, r7, #7
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005070:	d828      	bhi.n	80050c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005072:	4a2f      	ldr	r2, [pc, #188]	@ (8005130 <__NVIC_SetPriority+0xd4>)
 8005074:	1dfb      	adds	r3, r7, #7
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	b25b      	sxtb	r3, r3
 800507a:	089b      	lsrs	r3, r3, #2
 800507c:	33c0      	adds	r3, #192	@ 0xc0
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	589b      	ldr	r3, [r3, r2]
 8005082:	1dfa      	adds	r2, r7, #7
 8005084:	7812      	ldrb	r2, [r2, #0]
 8005086:	0011      	movs	r1, r2
 8005088:	2203      	movs	r2, #3
 800508a:	400a      	ands	r2, r1
 800508c:	00d2      	lsls	r2, r2, #3
 800508e:	21ff      	movs	r1, #255	@ 0xff
 8005090:	4091      	lsls	r1, r2
 8005092:	000a      	movs	r2, r1
 8005094:	43d2      	mvns	r2, r2
 8005096:	401a      	ands	r2, r3
 8005098:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	019b      	lsls	r3, r3, #6
 800509e:	22ff      	movs	r2, #255	@ 0xff
 80050a0:	401a      	ands	r2, r3
 80050a2:	1dfb      	adds	r3, r7, #7
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	0018      	movs	r0, r3
 80050a8:	2303      	movs	r3, #3
 80050aa:	4003      	ands	r3, r0
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050b0:	481f      	ldr	r0, [pc, #124]	@ (8005130 <__NVIC_SetPriority+0xd4>)
 80050b2:	1dfb      	adds	r3, r7, #7
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	b25b      	sxtb	r3, r3
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	430a      	orrs	r2, r1
 80050bc:	33c0      	adds	r3, #192	@ 0xc0
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80050c2:	e031      	b.n	8005128 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005134 <__NVIC_SetPriority+0xd8>)
 80050c6:	1dfb      	adds	r3, r7, #7
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	0019      	movs	r1, r3
 80050cc:	230f      	movs	r3, #15
 80050ce:	400b      	ands	r3, r1
 80050d0:	3b08      	subs	r3, #8
 80050d2:	089b      	lsrs	r3, r3, #2
 80050d4:	3306      	adds	r3, #6
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	18d3      	adds	r3, r2, r3
 80050da:	3304      	adds	r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	1dfa      	adds	r2, r7, #7
 80050e0:	7812      	ldrb	r2, [r2, #0]
 80050e2:	0011      	movs	r1, r2
 80050e4:	2203      	movs	r2, #3
 80050e6:	400a      	ands	r2, r1
 80050e8:	00d2      	lsls	r2, r2, #3
 80050ea:	21ff      	movs	r1, #255	@ 0xff
 80050ec:	4091      	lsls	r1, r2
 80050ee:	000a      	movs	r2, r1
 80050f0:	43d2      	mvns	r2, r2
 80050f2:	401a      	ands	r2, r3
 80050f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	019b      	lsls	r3, r3, #6
 80050fa:	22ff      	movs	r2, #255	@ 0xff
 80050fc:	401a      	ands	r2, r3
 80050fe:	1dfb      	adds	r3, r7, #7
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	0018      	movs	r0, r3
 8005104:	2303      	movs	r3, #3
 8005106:	4003      	ands	r3, r0
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800510c:	4809      	ldr	r0, [pc, #36]	@ (8005134 <__NVIC_SetPriority+0xd8>)
 800510e:	1dfb      	adds	r3, r7, #7
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	001c      	movs	r4, r3
 8005114:	230f      	movs	r3, #15
 8005116:	4023      	ands	r3, r4
 8005118:	3b08      	subs	r3, #8
 800511a:	089b      	lsrs	r3, r3, #2
 800511c:	430a      	orrs	r2, r1
 800511e:	3306      	adds	r3, #6
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	18c3      	adds	r3, r0, r3
 8005124:	3304      	adds	r3, #4
 8005126:	601a      	str	r2, [r3, #0]
}
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b003      	add	sp, #12
 800512e:	bd90      	pop	{r4, r7, pc}
 8005130:	e000e100 	.word	0xe000e100
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	1e5a      	subs	r2, r3, #1
 8005144:	2380      	movs	r3, #128	@ 0x80
 8005146:	045b      	lsls	r3, r3, #17
 8005148:	429a      	cmp	r2, r3
 800514a:	d301      	bcc.n	8005150 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800514c:	2301      	movs	r3, #1
 800514e:	e010      	b.n	8005172 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005150:	4b0a      	ldr	r3, [pc, #40]	@ (800517c <SysTick_Config+0x44>)
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	3a01      	subs	r2, #1
 8005156:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005158:	2301      	movs	r3, #1
 800515a:	425b      	negs	r3, r3
 800515c:	2103      	movs	r1, #3
 800515e:	0018      	movs	r0, r3
 8005160:	f7ff ff7c 	bl	800505c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005164:	4b05      	ldr	r3, [pc, #20]	@ (800517c <SysTick_Config+0x44>)
 8005166:	2200      	movs	r2, #0
 8005168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800516a:	4b04      	ldr	r3, [pc, #16]	@ (800517c <SysTick_Config+0x44>)
 800516c:	2207      	movs	r2, #7
 800516e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005170:	2300      	movs	r3, #0
}
 8005172:	0018      	movs	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	b002      	add	sp, #8
 8005178:	bd80      	pop	{r7, pc}
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	e000e010 	.word	0xe000e010

08005180 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
 800518a:	230f      	movs	r3, #15
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	1c02      	adds	r2, r0, #0
 8005190:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d904      	bls.n	80051a2 <HAL_NVIC_SetPriority+0x22>
 8005198:	4b08      	ldr	r3, [pc, #32]	@ (80051bc <HAL_NVIC_SetPriority+0x3c>)
 800519a:	2187      	movs	r1, #135	@ 0x87
 800519c:	0018      	movs	r0, r3
 800519e:	f7fd ff55 	bl	800304c <assert_failed>
  NVIC_SetPriority(IRQn, PreemptPriority);
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	230f      	movs	r3, #15
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	b25b      	sxtb	r3, r3
 80051ac:	0011      	movs	r1, r2
 80051ae:	0018      	movs	r0, r3
 80051b0:	f7ff ff54 	bl	800505c <__NVIC_SetPriority>
}
 80051b4:	46c0      	nop			@ (mov r8, r8)
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b004      	add	sp, #16
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	0800d3b0 	.word	0x0800d3b0

080051c0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	0002      	movs	r2, r0
 80051c8:	1dfb      	adds	r3, r7, #7
 80051ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80051cc:	1dfb      	adds	r3, r7, #7
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80051d2:	d904      	bls.n	80051de <HAL_NVIC_EnableIRQ+0x1e>
 80051d4:	4b07      	ldr	r3, [pc, #28]	@ (80051f4 <HAL_NVIC_EnableIRQ+0x34>)
 80051d6:	2196      	movs	r1, #150	@ 0x96
 80051d8:	0018      	movs	r0, r3
 80051da:	f7fd ff37 	bl	800304c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051de:	1dfb      	adds	r3, r7, #7
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b25b      	sxtb	r3, r3
 80051e4:	0018      	movs	r0, r3
 80051e6:	f7ff ff1f 	bl	8005028 <__NVIC_EnableIRQ>
}
 80051ea:	46c0      	nop			@ (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b002      	add	sp, #8
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	0800d3b0 	.word	0x0800d3b0

080051f8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	0018      	movs	r0, r3
 8005204:	f7ff ff98 	bl	8005138 <SysTick_Config>
 8005208:	0003      	movs	r3, r0
}
 800520a:	0018      	movs	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	b002      	add	sp, #8
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	23a0      	movs	r3, #160	@ 0xa0
 8005226:	05db      	lsls	r3, r3, #23
 8005228:	429a      	cmp	r2, r3
 800522a:	d014      	beq.n	8005256 <HAL_GPIO_Init+0x42>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4acf      	ldr	r2, [pc, #828]	@ (800556c <HAL_GPIO_Init+0x358>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d010      	beq.n	8005256 <HAL_GPIO_Init+0x42>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4ace      	ldr	r2, [pc, #824]	@ (8005570 <HAL_GPIO_Init+0x35c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00c      	beq.n	8005256 <HAL_GPIO_Init+0x42>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4acd      	ldr	r2, [pc, #820]	@ (8005574 <HAL_GPIO_Init+0x360>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d008      	beq.n	8005256 <HAL_GPIO_Init+0x42>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4acc      	ldr	r2, [pc, #816]	@ (8005578 <HAL_GPIO_Init+0x364>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_GPIO_Init+0x42>
 800524c:	4bcb      	ldr	r3, [pc, #812]	@ (800557c <HAL_GPIO_Init+0x368>)
 800524e:	21a3      	movs	r1, #163	@ 0xa3
 8005250:	0018      	movs	r0, r3
 8005252:	f7fd fefb 	bl	800304c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	d005      	beq.n	800526c <HAL_GPIO_Init+0x58>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	2380      	movs	r3, #128	@ 0x80
 8005266:	025b      	lsls	r3, r3, #9
 8005268:	429a      	cmp	r2, r3
 800526a:	d304      	bcc.n	8005276 <HAL_GPIO_Init+0x62>
 800526c:	4bc3      	ldr	r3, [pc, #780]	@ (800557c <HAL_GPIO_Init+0x368>)
 800526e:	21a4      	movs	r1, #164	@ 0xa4
 8005270:	0018      	movs	r0, r3
 8005272:	f7fd feeb 	bl	800304c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d100      	bne.n	8005280 <HAL_GPIO_Init+0x6c>
 800527e:	e1ec      	b.n	800565a <HAL_GPIO_Init+0x446>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d100      	bne.n	800528a <HAL_GPIO_Init+0x76>
 8005288:	e1e7      	b.n	800565a <HAL_GPIO_Init+0x446>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b11      	cmp	r3, #17
 8005290:	d100      	bne.n	8005294 <HAL_GPIO_Init+0x80>
 8005292:	e1e2      	b.n	800565a <HAL_GPIO_Init+0x446>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d100      	bne.n	800529e <HAL_GPIO_Init+0x8a>
 800529c:	e1dd      	b.n	800565a <HAL_GPIO_Init+0x446>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b12      	cmp	r3, #18
 80052a4:	d100      	bne.n	80052a8 <HAL_GPIO_Init+0x94>
 80052a6:	e1d8      	b.n	800565a <HAL_GPIO_Init+0x446>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	2388      	movs	r3, #136	@ 0x88
 80052ae:	035b      	lsls	r3, r3, #13
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d100      	bne.n	80052b6 <HAL_GPIO_Init+0xa2>
 80052b4:	e1d1      	b.n	800565a <HAL_GPIO_Init+0x446>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	2384      	movs	r3, #132	@ 0x84
 80052bc:	039b      	lsls	r3, r3, #14
 80052be:	429a      	cmp	r2, r3
 80052c0:	d100      	bne.n	80052c4 <HAL_GPIO_Init+0xb0>
 80052c2:	e1ca      	b.n	800565a <HAL_GPIO_Init+0x446>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	23c4      	movs	r3, #196	@ 0xc4
 80052ca:	039b      	lsls	r3, r3, #14
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d100      	bne.n	80052d2 <HAL_GPIO_Init+0xbe>
 80052d0:	e1c3      	b.n	800565a <HAL_GPIO_Init+0x446>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	2390      	movs	r3, #144	@ 0x90
 80052d8:	035b      	lsls	r3, r3, #13
 80052da:	429a      	cmp	r2, r3
 80052dc:	d100      	bne.n	80052e0 <HAL_GPIO_Init+0xcc>
 80052de:	e1bc      	b.n	800565a <HAL_GPIO_Init+0x446>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	2388      	movs	r3, #136	@ 0x88
 80052e6:	039b      	lsls	r3, r3, #14
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d100      	bne.n	80052ee <HAL_GPIO_Init+0xda>
 80052ec:	e1b5      	b.n	800565a <HAL_GPIO_Init+0x446>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	23c8      	movs	r3, #200	@ 0xc8
 80052f4:	039b      	lsls	r3, r3, #14
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d100      	bne.n	80052fc <HAL_GPIO_Init+0xe8>
 80052fa:	e1ae      	b.n	800565a <HAL_GPIO_Init+0x446>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b03      	cmp	r3, #3
 8005302:	d100      	bne.n	8005306 <HAL_GPIO_Init+0xf2>
 8005304:	e1a9      	b.n	800565a <HAL_GPIO_Init+0x446>
 8005306:	4b9d      	ldr	r3, [pc, #628]	@ (800557c <HAL_GPIO_Init+0x368>)
 8005308:	21a5      	movs	r1, #165	@ 0xa5
 800530a:	0018      	movs	r0, r3
 800530c:	f7fd fe9e 	bl	800304c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005310:	e1a3      	b.n	800565a <HAL_GPIO_Init+0x446>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2101      	movs	r1, #1
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4091      	lsls	r1, r2
 800531c:	000a      	movs	r2, r1
 800531e:	4013      	ands	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d100      	bne.n	800532a <HAL_GPIO_Init+0x116>
 8005328:	e194      	b.n	8005654 <HAL_GPIO_Init+0x440>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2203      	movs	r2, #3
 8005330:	4013      	ands	r3, r2
 8005332:	2b01      	cmp	r3, #1
 8005334:	d005      	beq.n	8005342 <HAL_GPIO_Init+0x12e>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2203      	movs	r2, #3
 800533c:	4013      	ands	r3, r2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d145      	bne.n	80053ce <HAL_GPIO_Init+0x1ba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d010      	beq.n	800536c <HAL_GPIO_Init+0x158>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d00c      	beq.n	800536c <HAL_GPIO_Init+0x158>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d008      	beq.n	800536c <HAL_GPIO_Init+0x158>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b03      	cmp	r3, #3
 8005360:	d004      	beq.n	800536c <HAL_GPIO_Init+0x158>
 8005362:	4b86      	ldr	r3, [pc, #536]	@ (800557c <HAL_GPIO_Init+0x368>)
 8005364:	21b4      	movs	r1, #180	@ 0xb4
 8005366:	0018      	movs	r0, r3
 8005368:	f7fd fe70 	bl	800304c <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	2203      	movs	r2, #3
 8005378:	409a      	lsls	r2, r3
 800537a:	0013      	movs	r3, r2
 800537c:	43da      	mvns	r2, r3
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4013      	ands	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	409a      	lsls	r2, r3
 800538e:	0013      	movs	r3, r2
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053a2:	2201      	movs	r2, #1
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	409a      	lsls	r2, r3
 80053a8:	0013      	movs	r3, r2
 80053aa:	43da      	mvns	r2, r3
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	091b      	lsrs	r3, r3, #4
 80053b8:	2201      	movs	r2, #1
 80053ba:	401a      	ands	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	409a      	lsls	r2, r3
 80053c0:	0013      	movs	r3, r2
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2203      	movs	r2, #3
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d028      	beq.n	800542c <HAL_GPIO_Init+0x218>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00c      	beq.n	80053fc <HAL_GPIO_Init+0x1e8>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d008      	beq.n	80053fc <HAL_GPIO_Init+0x1e8>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d004      	beq.n	80053fc <HAL_GPIO_Init+0x1e8>
 80053f2:	4b62      	ldr	r3, [pc, #392]	@ (800557c <HAL_GPIO_Init+0x368>)
 80053f4:	21c6      	movs	r1, #198	@ 0xc6
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7fd fe28 	bl	800304c <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	2203      	movs	r2, #3
 8005408:	409a      	lsls	r2, r3
 800540a:	0013      	movs	r3, r2
 800540c:	43da      	mvns	r2, r3
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4013      	ands	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	409a      	lsls	r2, r3
 800541e:	0013      	movs	r3, r2
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2203      	movs	r2, #3
 8005432:	4013      	ands	r3, r2
 8005434:	2b02      	cmp	r3, #2
 8005436:	d146      	bne.n	80054c6 <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	23a0      	movs	r3, #160	@ 0xa0
 800543c:	05db      	lsls	r3, r3, #23
 800543e:	429a      	cmp	r2, r3
 8005440:	d014      	beq.n	800546c <HAL_GPIO_Init+0x258>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a49      	ldr	r2, [pc, #292]	@ (800556c <HAL_GPIO_Init+0x358>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d010      	beq.n	800546c <HAL_GPIO_Init+0x258>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a48      	ldr	r2, [pc, #288]	@ (8005570 <HAL_GPIO_Init+0x35c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00c      	beq.n	800546c <HAL_GPIO_Init+0x258>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a47      	ldr	r2, [pc, #284]	@ (8005574 <HAL_GPIO_Init+0x360>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d008      	beq.n	800546c <HAL_GPIO_Init+0x258>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a46      	ldr	r2, [pc, #280]	@ (8005578 <HAL_GPIO_Init+0x364>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_GPIO_Init+0x258>
 8005462:	4b46      	ldr	r3, [pc, #280]	@ (800557c <HAL_GPIO_Init+0x368>)
 8005464:	21d3      	movs	r1, #211	@ 0xd3
 8005466:	0018      	movs	r0, r3
 8005468:	f7fd fdf0 	bl	800304c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b0f      	cmp	r3, #15
 8005472:	d904      	bls.n	800547e <HAL_GPIO_Init+0x26a>
 8005474:	4b41      	ldr	r3, [pc, #260]	@ (800557c <HAL_GPIO_Init+0x368>)
 8005476:	21d4      	movs	r1, #212	@ 0xd4
 8005478:	0018      	movs	r0, r3
 800547a:	f7fd fde7 	bl	800304c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	08da      	lsrs	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3208      	adds	r2, #8
 8005486:	0092      	lsls	r2, r2, #2
 8005488:	58d3      	ldr	r3, [r2, r3]
 800548a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2207      	movs	r2, #7
 8005490:	4013      	ands	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	220f      	movs	r2, #15
 8005496:	409a      	lsls	r2, r3
 8005498:	0013      	movs	r3, r2
 800549a:	43da      	mvns	r2, r3
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4013      	ands	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2107      	movs	r1, #7
 80054aa:	400b      	ands	r3, r1
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	409a      	lsls	r2, r3
 80054b0:	0013      	movs	r3, r2
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	08da      	lsrs	r2, r3, #3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3208      	adds	r2, #8
 80054c0:	0092      	lsls	r2, r2, #2
 80054c2:	6939      	ldr	r1, [r7, #16]
 80054c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	2203      	movs	r2, #3
 80054d2:	409a      	lsls	r2, r3
 80054d4:	0013      	movs	r3, r2
 80054d6:	43da      	mvns	r2, r3
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4013      	ands	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2203      	movs	r2, #3
 80054e4:	401a      	ands	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	409a      	lsls	r2, r3
 80054ec:	0013      	movs	r3, r2
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	23c0      	movs	r3, #192	@ 0xc0
 8005500:	029b      	lsls	r3, r3, #10
 8005502:	4013      	ands	r3, r2
 8005504:	d100      	bne.n	8005508 <HAL_GPIO_Init+0x2f4>
 8005506:	e0a5      	b.n	8005654 <HAL_GPIO_Init+0x440>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005508:	4a1d      	ldr	r2, [pc, #116]	@ (8005580 <HAL_GPIO_Init+0x36c>)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	089b      	lsrs	r3, r3, #2
 800550e:	3318      	adds	r3, #24
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	589b      	ldr	r3, [r3, r2]
 8005514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2203      	movs	r2, #3
 800551a:	4013      	ands	r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	220f      	movs	r2, #15
 8005520:	409a      	lsls	r2, r3
 8005522:	0013      	movs	r3, r2
 8005524:	43da      	mvns	r2, r3
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	4013      	ands	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	23a0      	movs	r3, #160	@ 0xa0
 8005530:	05db      	lsls	r3, r3, #23
 8005532:	429a      	cmp	r2, r3
 8005534:	d026      	beq.n	8005584 <HAL_GPIO_Init+0x370>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a0c      	ldr	r2, [pc, #48]	@ (800556c <HAL_GPIO_Init+0x358>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d013      	beq.n	8005566 <HAL_GPIO_Init+0x352>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a0b      	ldr	r2, [pc, #44]	@ (8005570 <HAL_GPIO_Init+0x35c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00d      	beq.n	8005562 <HAL_GPIO_Init+0x34e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a0a      	ldr	r2, [pc, #40]	@ (8005574 <HAL_GPIO_Init+0x360>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d007      	beq.n	800555e <HAL_GPIO_Init+0x34a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a09      	ldr	r2, [pc, #36]	@ (8005578 <HAL_GPIO_Init+0x364>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d101      	bne.n	800555a <HAL_GPIO_Init+0x346>
 8005556:	2305      	movs	r3, #5
 8005558:	e015      	b.n	8005586 <HAL_GPIO_Init+0x372>
 800555a:	2306      	movs	r3, #6
 800555c:	e013      	b.n	8005586 <HAL_GPIO_Init+0x372>
 800555e:	2303      	movs	r3, #3
 8005560:	e011      	b.n	8005586 <HAL_GPIO_Init+0x372>
 8005562:	2302      	movs	r3, #2
 8005564:	e00f      	b.n	8005586 <HAL_GPIO_Init+0x372>
 8005566:	2301      	movs	r3, #1
 8005568:	e00d      	b.n	8005586 <HAL_GPIO_Init+0x372>
 800556a:	46c0      	nop			@ (mov r8, r8)
 800556c:	50000400 	.word	0x50000400
 8005570:	50000800 	.word	0x50000800
 8005574:	50000c00 	.word	0x50000c00
 8005578:	50001400 	.word	0x50001400
 800557c:	0800d3ec 	.word	0x0800d3ec
 8005580:	40021800 	.word	0x40021800
 8005584:	2300      	movs	r3, #0
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	2103      	movs	r1, #3
 800558a:	400a      	ands	r2, r1
 800558c:	00d2      	lsls	r2, r2, #3
 800558e:	4093      	lsls	r3, r2
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005596:	4937      	ldr	r1, [pc, #220]	@ (8005674 <HAL_GPIO_Init+0x460>)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	089b      	lsrs	r3, r3, #2
 800559c:	3318      	adds	r3, #24
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055a4:	4b33      	ldr	r3, [pc, #204]	@ (8005674 <HAL_GPIO_Init+0x460>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	43da      	mvns	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	2380      	movs	r3, #128	@ 0x80
 80055ba:	035b      	lsls	r3, r3, #13
 80055bc:	4013      	ands	r3, r2
 80055be:	d003      	beq.n	80055c8 <HAL_GPIO_Init+0x3b4>
        {
          temp |= iocurrent;
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005674 <HAL_GPIO_Init+0x460>)
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80055ce:	4b29      	ldr	r3, [pc, #164]	@ (8005674 <HAL_GPIO_Init+0x460>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	43da      	mvns	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4013      	ands	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	2380      	movs	r3, #128	@ 0x80
 80055e4:	039b      	lsls	r3, r3, #14
 80055e6:	4013      	ands	r3, r2
 80055e8:	d003      	beq.n	80055f2 <HAL_GPIO_Init+0x3de>
        {
          temp |= iocurrent;
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055f2:	4b20      	ldr	r3, [pc, #128]	@ (8005674 <HAL_GPIO_Init+0x460>)
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80055f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005674 <HAL_GPIO_Init+0x460>)
 80055fa:	2384      	movs	r3, #132	@ 0x84
 80055fc:	58d3      	ldr	r3, [r2, r3]
 80055fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	43da      	mvns	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4013      	ands	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	2380      	movs	r3, #128	@ 0x80
 8005610:	029b      	lsls	r3, r3, #10
 8005612:	4013      	ands	r3, r2
 8005614:	d003      	beq.n	800561e <HAL_GPIO_Init+0x40a>
        {
          temp |= iocurrent;
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800561e:	4915      	ldr	r1, [pc, #84]	@ (8005674 <HAL_GPIO_Init+0x460>)
 8005620:	2284      	movs	r2, #132	@ 0x84
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005626:	4a13      	ldr	r2, [pc, #76]	@ (8005674 <HAL_GPIO_Init+0x460>)
 8005628:	2380      	movs	r3, #128	@ 0x80
 800562a:	58d3      	ldr	r3, [r2, r3]
 800562c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	43da      	mvns	r2, r3
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4013      	ands	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	2380      	movs	r3, #128	@ 0x80
 800563e:	025b      	lsls	r3, r3, #9
 8005640:	4013      	ands	r3, r2
 8005642:	d003      	beq.n	800564c <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800564c:	4909      	ldr	r1, [pc, #36]	@ (8005674 <HAL_GPIO_Init+0x460>)
 800564e:	2280      	movs	r2, #128	@ 0x80
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	3301      	adds	r3, #1
 8005658:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	40da      	lsrs	r2, r3
 8005662:	1e13      	subs	r3, r2, #0
 8005664:	d000      	beq.n	8005668 <HAL_GPIO_Init+0x454>
 8005666:	e654      	b.n	8005312 <HAL_GPIO_Init+0xfe>
  }
}
 8005668:	46c0      	nop			@ (mov r8, r8)
 800566a:	46c0      	nop			@ (mov r8, r8)
 800566c:	46bd      	mov	sp, r7
 800566e:	b006      	add	sp, #24
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			@ (mov r8, r8)
 8005674:	40021800 	.word	0x40021800

08005678 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	23a0      	movs	r3, #160	@ 0xa0
 800568a:	05db      	lsls	r3, r3, #23
 800568c:	429a      	cmp	r2, r3
 800568e:	d016      	beq.n	80056be <HAL_GPIO_DeInit+0x46>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a77      	ldr	r2, [pc, #476]	@ (8005870 <HAL_GPIO_DeInit+0x1f8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d012      	beq.n	80056be <HAL_GPIO_DeInit+0x46>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a76      	ldr	r2, [pc, #472]	@ (8005874 <HAL_GPIO_DeInit+0x1fc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00e      	beq.n	80056be <HAL_GPIO_DeInit+0x46>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a75      	ldr	r2, [pc, #468]	@ (8005878 <HAL_GPIO_DeInit+0x200>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00a      	beq.n	80056be <HAL_GPIO_DeInit+0x46>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a74      	ldr	r2, [pc, #464]	@ (800587c <HAL_GPIO_DeInit+0x204>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d006      	beq.n	80056be <HAL_GPIO_DeInit+0x46>
 80056b0:	2391      	movs	r3, #145	@ 0x91
 80056b2:	005a      	lsls	r2, r3, #1
 80056b4:	4b72      	ldr	r3, [pc, #456]	@ (8005880 <HAL_GPIO_DeInit+0x208>)
 80056b6:	0011      	movs	r1, r2
 80056b8:	0018      	movs	r0, r3
 80056ba:	f7fd fcc7 	bl	800304c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	041b      	lsls	r3, r3, #16
 80056c2:	0c1b      	lsrs	r3, r3, #16
 80056c4:	d005      	beq.n	80056d2 <HAL_GPIO_DeInit+0x5a>
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	2380      	movs	r3, #128	@ 0x80
 80056ca:	025b      	lsls	r3, r3, #9
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d200      	bcs.n	80056d2 <HAL_GPIO_DeInit+0x5a>
 80056d0:	e0c3      	b.n	800585a <HAL_GPIO_DeInit+0x1e2>
 80056d2:	2324      	movs	r3, #36	@ 0x24
 80056d4:	33ff      	adds	r3, #255	@ 0xff
 80056d6:	001a      	movs	r2, r3
 80056d8:	4b69      	ldr	r3, [pc, #420]	@ (8005880 <HAL_GPIO_DeInit+0x208>)
 80056da:	0011      	movs	r1, r2
 80056dc:	0018      	movs	r0, r3
 80056de:	f7fd fcb5 	bl	800304c <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80056e2:	e0ba      	b.n	800585a <HAL_GPIO_DeInit+0x1e2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80056e4:	2201      	movs	r2, #1
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	409a      	lsls	r2, r3
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d100      	bne.n	80056f8 <HAL_GPIO_DeInit+0x80>
 80056f6:	e0ad      	b.n	8005854 <HAL_GPIO_DeInit+0x1dc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80056f8:	4a62      	ldr	r2, [pc, #392]	@ (8005884 <HAL_GPIO_DeInit+0x20c>)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	089b      	lsrs	r3, r3, #2
 80056fe:	3318      	adds	r3, #24
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	589b      	ldr	r3, [r3, r2]
 8005704:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2203      	movs	r2, #3
 800570a:	4013      	ands	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	220f      	movs	r2, #15
 8005710:	409a      	lsls	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4013      	ands	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	23a0      	movs	r3, #160	@ 0xa0
 800571c:	05db      	lsls	r3, r3, #23
 800571e:	429a      	cmp	r2, r3
 8005720:	d019      	beq.n	8005756 <HAL_GPIO_DeInit+0xde>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a52      	ldr	r2, [pc, #328]	@ (8005870 <HAL_GPIO_DeInit+0x1f8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_GPIO_DeInit+0xda>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a51      	ldr	r2, [pc, #324]	@ (8005874 <HAL_GPIO_DeInit+0x1fc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00d      	beq.n	800574e <HAL_GPIO_DeInit+0xd6>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a50      	ldr	r2, [pc, #320]	@ (8005878 <HAL_GPIO_DeInit+0x200>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <HAL_GPIO_DeInit+0xd2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a4f      	ldr	r2, [pc, #316]	@ (800587c <HAL_GPIO_DeInit+0x204>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_GPIO_DeInit+0xce>
 8005742:	2305      	movs	r3, #5
 8005744:	e008      	b.n	8005758 <HAL_GPIO_DeInit+0xe0>
 8005746:	2306      	movs	r3, #6
 8005748:	e006      	b.n	8005758 <HAL_GPIO_DeInit+0xe0>
 800574a:	2303      	movs	r3, #3
 800574c:	e004      	b.n	8005758 <HAL_GPIO_DeInit+0xe0>
 800574e:	2302      	movs	r3, #2
 8005750:	e002      	b.n	8005758 <HAL_GPIO_DeInit+0xe0>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <HAL_GPIO_DeInit+0xe0>
 8005756:	2300      	movs	r3, #0
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	2103      	movs	r1, #3
 800575c:	400a      	ands	r2, r1
 800575e:	00d2      	lsls	r2, r2, #3
 8005760:	4093      	lsls	r3, r2
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	429a      	cmp	r2, r3
 8005766:	d136      	bne.n	80057d6 <HAL_GPIO_DeInit+0x15e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005768:	4a46      	ldr	r2, [pc, #280]	@ (8005884 <HAL_GPIO_DeInit+0x20c>)
 800576a:	2380      	movs	r3, #128	@ 0x80
 800576c:	58d3      	ldr	r3, [r2, r3]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	43d2      	mvns	r2, r2
 8005772:	4944      	ldr	r1, [pc, #272]	@ (8005884 <HAL_GPIO_DeInit+0x20c>)
 8005774:	4013      	ands	r3, r2
 8005776:	2280      	movs	r2, #128	@ 0x80
 8005778:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800577a:	4a42      	ldr	r2, [pc, #264]	@ (8005884 <HAL_GPIO_DeInit+0x20c>)
 800577c:	2384      	movs	r3, #132	@ 0x84
 800577e:	58d3      	ldr	r3, [r2, r3]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	43d2      	mvns	r2, r2
 8005784:	493f      	ldr	r1, [pc, #252]	@ (8005884 <HAL_GPIO_DeInit+0x20c>)
 8005786:	4013      	ands	r3, r2
 8005788:	2284      	movs	r2, #132	@ 0x84
 800578a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800578c:	4b3d      	ldr	r3, [pc, #244]	@ (8005884 <HAL_GPIO_DeInit+0x20c>)
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	43d9      	mvns	r1, r3
 8005794:	4b3b      	ldr	r3, [pc, #236]	@ (8005884 <HAL_GPIO_DeInit+0x20c>)
 8005796:	400a      	ands	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800579a:	4b3a      	ldr	r3, [pc, #232]	@ (8005884 <HAL_GPIO_DeInit+0x20c>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	43d9      	mvns	r1, r3
 80057a2:	4b38      	ldr	r3, [pc, #224]	@ (8005884 <HAL_GPIO_DeInit+0x20c>)
 80057a4:	400a      	ands	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2203      	movs	r2, #3
 80057ac:	4013      	ands	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	220f      	movs	r2, #15
 80057b2:	409a      	lsls	r2, r3
 80057b4:	0013      	movs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80057b8:	4a32      	ldr	r2, [pc, #200]	@ (8005884 <HAL_GPIO_DeInit+0x20c>)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	089b      	lsrs	r3, r3, #2
 80057be:	3318      	adds	r3, #24
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	589a      	ldr	r2, [r3, r2]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	43d9      	mvns	r1, r3
 80057c8:	482e      	ldr	r0, [pc, #184]	@ (8005884 <HAL_GPIO_DeInit+0x20c>)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	089b      	lsrs	r3, r3, #2
 80057ce:	400a      	ands	r2, r1
 80057d0:	3318      	adds	r3, #24
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	2103      	movs	r1, #3
 80057e0:	4099      	lsls	r1, r3
 80057e2:	000b      	movs	r3, r1
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	08da      	lsrs	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3208      	adds	r2, #8
 80057f2:	0092      	lsls	r2, r2, #2
 80057f4:	58d3      	ldr	r3, [r2, r3]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	2107      	movs	r1, #7
 80057fa:	400a      	ands	r2, r1
 80057fc:	0092      	lsls	r2, r2, #2
 80057fe:	210f      	movs	r1, #15
 8005800:	4091      	lsls	r1, r2
 8005802:	000a      	movs	r2, r1
 8005804:	43d1      	mvns	r1, r2
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	08d2      	lsrs	r2, r2, #3
 800580a:	4019      	ands	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3208      	adds	r2, #8
 8005810:	0092      	lsls	r2, r2, #2
 8005812:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	0052      	lsls	r2, r2, #1
 800581c:	2103      	movs	r1, #3
 800581e:	4091      	lsls	r1, r2
 8005820:	000a      	movs	r2, r1
 8005822:	43d2      	mvns	r2, r2
 8005824:	401a      	ands	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2101      	movs	r1, #1
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4091      	lsls	r1, r2
 8005834:	000a      	movs	r2, r1
 8005836:	43d2      	mvns	r2, r2
 8005838:	401a      	ands	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	0052      	lsls	r2, r2, #1
 8005846:	2103      	movs	r1, #3
 8005848:	4091      	lsls	r1, r2
 800584a:	000a      	movs	r2, r1
 800584c:	43d2      	mvns	r2, r2
 800584e:	401a      	ands	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	3301      	adds	r3, #1
 8005858:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	40da      	lsrs	r2, r3
 8005860:	1e13      	subs	r3, r2, #0
 8005862:	d000      	beq.n	8005866 <HAL_GPIO_DeInit+0x1ee>
 8005864:	e73e      	b.n	80056e4 <HAL_GPIO_DeInit+0x6c>
  }
}
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	46c0      	nop			@ (mov r8, r8)
 800586a:	46bd      	mov	sp, r7
 800586c:	b006      	add	sp, #24
 800586e:	bd80      	pop	{r7, pc}
 8005870:	50000400 	.word	0x50000400
 8005874:	50000800 	.word	0x50000800
 8005878:	50000c00 	.word	0x50000c00
 800587c:	50001400 	.word	0x50001400
 8005880:	0800d3ec 	.word	0x0800d3ec
 8005884:	40021800 	.word	0x40021800

08005888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	000a      	movs	r2, r1
 8005892:	1cbb      	adds	r3, r7, #2
 8005894:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005896:	1cbb      	adds	r3, r7, #2
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d107      	bne.n	80058ae <HAL_GPIO_ReadPin+0x26>
 800589e:	2372      	movs	r3, #114	@ 0x72
 80058a0:	33ff      	adds	r3, #255	@ 0xff
 80058a2:	001a      	movs	r2, r3
 80058a4:	4b0d      	ldr	r3, [pc, #52]	@ (80058dc <HAL_GPIO_ReadPin+0x54>)
 80058a6:	0011      	movs	r1, r2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7fd fbcf 	bl	800304c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	1cba      	adds	r2, r7, #2
 80058b4:	8812      	ldrh	r2, [r2, #0]
 80058b6:	4013      	ands	r3, r2
 80058b8:	d004      	beq.n	80058c4 <HAL_GPIO_ReadPin+0x3c>
  {
    bitstatus = GPIO_PIN_SET;
 80058ba:	230f      	movs	r3, #15
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	2201      	movs	r2, #1
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	e003      	b.n	80058cc <HAL_GPIO_ReadPin+0x44>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058c4:	230f      	movs	r3, #15
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80058cc:	230f      	movs	r3, #15
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	781b      	ldrb	r3, [r3, #0]
}
 80058d2:	0018      	movs	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b004      	add	sp, #16
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	46c0      	nop			@ (mov r8, r8)
 80058dc:	0800d3ec 	.word	0x0800d3ec

080058e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	0008      	movs	r0, r1
 80058ea:	0011      	movs	r1, r2
 80058ec:	1cbb      	adds	r3, r7, #2
 80058ee:	1c02      	adds	r2, r0, #0
 80058f0:	801a      	strh	r2, [r3, #0]
 80058f2:	1c7b      	adds	r3, r7, #1
 80058f4:	1c0a      	adds	r2, r1, #0
 80058f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80058f8:	1cbb      	adds	r3, r7, #2
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d107      	bne.n	8005910 <HAL_GPIO_WritePin+0x30>
 8005900:	2392      	movs	r3, #146	@ 0x92
 8005902:	33ff      	adds	r3, #255	@ 0xff
 8005904:	001a      	movs	r2, r3
 8005906:	4b12      	ldr	r3, [pc, #72]	@ (8005950 <HAL_GPIO_WritePin+0x70>)
 8005908:	0011      	movs	r1, r2
 800590a:	0018      	movs	r0, r3
 800590c:	f7fd fb9e 	bl	800304c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005910:	1c7b      	adds	r3, r7, #1
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_GPIO_WritePin+0x4e>
 8005918:	1c7b      	adds	r3, r7, #1
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d006      	beq.n	800592e <HAL_GPIO_WritePin+0x4e>
 8005920:	23c9      	movs	r3, #201	@ 0xc9
 8005922:	005a      	lsls	r2, r3, #1
 8005924:	4b0a      	ldr	r3, [pc, #40]	@ (8005950 <HAL_GPIO_WritePin+0x70>)
 8005926:	0011      	movs	r1, r2
 8005928:	0018      	movs	r0, r3
 800592a:	f7fd fb8f 	bl	800304c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800592e:	1c7b      	adds	r3, r7, #1
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <HAL_GPIO_WritePin+0x60>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005936:	1cbb      	adds	r3, r7, #2
 8005938:	881a      	ldrh	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800593e:	e003      	b.n	8005948 <HAL_GPIO_WritePin+0x68>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005940:	1cbb      	adds	r3, r7, #2
 8005942:	881a      	ldrh	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005948:	46c0      	nop			@ (mov r8, r8)
 800594a:	46bd      	mov	sp, r7
 800594c:	b002      	add	sp, #8
 800594e:	bd80      	pop	{r7, pc}
 8005950:	0800d3ec 	.word	0x0800d3ec

08005954 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	0002      	movs	r2, r0
 800595c:	1dbb      	adds	r3, r7, #6
 800595e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005960:	4b10      	ldr	r3, [pc, #64]	@ (80059a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	1dba      	adds	r2, r7, #6
 8005966:	8812      	ldrh	r2, [r2, #0]
 8005968:	4013      	ands	r3, r2
 800596a:	d008      	beq.n	800597e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800596c:	4b0d      	ldr	r3, [pc, #52]	@ (80059a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800596e:	1dba      	adds	r2, r7, #6
 8005970:	8812      	ldrh	r2, [r2, #0]
 8005972:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005974:	1dbb      	adds	r3, r7, #6
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	0018      	movs	r0, r3
 800597a:	f7fd f8fb 	bl	8002b74 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800597e:	4b09      	ldr	r3, [pc, #36]	@ (80059a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	1dba      	adds	r2, r7, #6
 8005984:	8812      	ldrh	r2, [r2, #0]
 8005986:	4013      	ands	r3, r2
 8005988:	d008      	beq.n	800599c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800598a:	4b06      	ldr	r3, [pc, #24]	@ (80059a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800598c:	1dba      	adds	r2, r7, #6
 800598e:	8812      	ldrh	r2, [r2, #0]
 8005990:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005992:	1dbb      	adds	r3, r7, #6
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	0018      	movs	r0, r3
 8005998:	f7fd f8fc 	bl	8002b94 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800599c:	46c0      	nop			@ (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40021800 	.word	0x40021800

080059a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	2380      	movs	r3, #128	@ 0x80
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d009      	beq.n	80059ce <HAL_PWREx_ControlVoltageScaling+0x26>
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	2380      	movs	r3, #128	@ 0x80
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d004      	beq.n	80059ce <HAL_PWREx_ControlVoltageScaling+0x26>
 80059c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005a78 <HAL_PWREx_ControlVoltageScaling+0xd0>)
 80059c6:	21c3      	movs	r1, #195	@ 0xc3
 80059c8:	0018      	movs	r0, r3
 80059ca:	f7fd fb3f 	bl	800304c <assert_failed>

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	2380      	movs	r3, #128	@ 0x80
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d137      	bne.n	8005a48 <HAL_PWREx_ControlVoltageScaling+0xa0>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80059d8:	4b28      	ldr	r3, [pc, #160]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0xd4>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	23c0      	movs	r3, #192	@ 0xc0
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	401a      	ands	r2, r3
 80059e2:	2380      	movs	r3, #128	@ 0x80
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d040      	beq.n	8005a6c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059ea:	4b24      	ldr	r3, [pc, #144]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0xd4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a24      	ldr	r2, [pc, #144]	@ (8005a80 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80059f0:	401a      	ands	r2, r3
 80059f2:	4b22      	ldr	r3, [pc, #136]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0xd4>)
 80059f4:	2180      	movs	r1, #128	@ 0x80
 80059f6:	0089      	lsls	r1, r1, #2
 80059f8:	430a      	orrs	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059fc:	4b21      	ldr	r3, [pc, #132]	@ (8005a84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2232      	movs	r2, #50	@ 0x32
 8005a02:	4353      	muls	r3, r2
 8005a04:	4920      	ldr	r1, [pc, #128]	@ (8005a88 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8005a06:	0018      	movs	r0, r3
 8005a08:	f7fa fb90 	bl	800012c <__udivsi3>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a12:	e002      	b.n	8005a1a <HAL_PWREx_ControlVoltageScaling+0x72>
      {
        wait_loop_index--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a1a:	4b18      	ldr	r3, [pc, #96]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	2380      	movs	r3, #128	@ 0x80
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	401a      	ands	r2, r3
 8005a24:	2380      	movs	r3, #128	@ 0x80
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d102      	bne.n	8005a32 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_PWREx_ControlVoltageScaling+0x6c>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a32:	4b12      	ldr	r3, [pc, #72]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	2380      	movs	r3, #128	@ 0x80
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	401a      	ands	r2, r3
 8005a3c:	2380      	movs	r3, #128	@ 0x80
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d113      	bne.n	8005a6c <HAL_PWREx_ControlVoltageScaling+0xc4>
      {
        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e012      	b.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0xc6>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a48:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	23c0      	movs	r3, #192	@ 0xc0
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	401a      	ands	r2, r3
 8005a52:	2380      	movs	r3, #128	@ 0x80
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d008      	beq.n	8005a6c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a5a:	4b08      	ldr	r3, [pc, #32]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a08      	ldr	r2, [pc, #32]	@ (8005a80 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005a60:	401a      	ands	r2, r3
 8005a62:	4b06      	ldr	r3, [pc, #24]	@ (8005a7c <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8005a64:	2180      	movs	r1, #128	@ 0x80
 8005a66:	00c9      	lsls	r1, r1, #3
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	0018      	movs	r0, r3
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b004      	add	sp, #16
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	46c0      	nop			@ (mov r8, r8)
 8005a78:	0800d428 	.word	0x0800d428
 8005a7c:	40007000 	.word	0x40007000
 8005a80:	fffff9ff 	.word	0xfffff9ff
 8005a84:	20000014 	.word	0x20000014
 8005a88:	000f4240 	.word	0x000f4240

08005a8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005a90:	4b03      	ldr	r3, [pc, #12]	@ (8005aa0 <HAL_PWREx_GetVoltageRange+0x14>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	23c0      	movs	r3, #192	@ 0xc0
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4013      	ands	r3, r2
}
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40007000 	.word	0x40007000

08005aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aa4:	b5b0      	push	{r4, r5, r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d107      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x1e>
 8005ab2:	234e      	movs	r3, #78	@ 0x4e
 8005ab4:	33ff      	adds	r3, #255	@ 0xff
 8005ab6:	001a      	movs	r2, r3
 8005ab8:	4bbd      	ldr	r3, [pc, #756]	@ (8005db0 <HAL_RCC_OscConfig+0x30c>)
 8005aba:	0011      	movs	r1, r2
 8005abc:	0018      	movs	r0, r3
 8005abe:	f7fd fac5 	bl	800304c <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01f      	beq.n	8005b0a <HAL_RCC_OscConfig+0x66>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d11a      	bne.n	8005b0a <HAL_RCC_OscConfig+0x66>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	4013      	ands	r3, r2
 8005adc:	d115      	bne.n	8005b0a <HAL_RCC_OscConfig+0x66>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2210      	movs	r2, #16
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d110      	bne.n	8005b0a <HAL_RCC_OscConfig+0x66>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2208      	movs	r2, #8
 8005aee:	4013      	ands	r3, r2
 8005af0:	d10b      	bne.n	8005b0a <HAL_RCC_OscConfig+0x66>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2204      	movs	r2, #4
 8005af8:	4013      	ands	r3, r2
 8005afa:	d106      	bne.n	8005b0a <HAL_RCC_OscConfig+0x66>
 8005afc:	23a7      	movs	r3, #167	@ 0xa7
 8005afe:	005a      	lsls	r2, r3, #1
 8005b00:	4bab      	ldr	r3, [pc, #684]	@ (8005db0 <HAL_RCC_OscConfig+0x30c>)
 8005b02:	0011      	movs	r1, r2
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7fd faa1 	bl	800304c <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b0a:	4baa      	ldr	r3, [pc, #680]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2238      	movs	r2, #56	@ 0x38
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b14:	4ba7      	ldr	r3, [pc, #668]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2210      	movs	r2, #16
 8005b24:	4013      	ands	r3, r2
 8005b26:	d100      	bne.n	8005b2a <HAL_RCC_OscConfig+0x86>
 8005b28:	e14f      	b.n	8005dca <HAL_RCC_OscConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <HAL_RCC_OscConfig+0xa6>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d007      	beq.n	8005b4a <HAL_RCC_OscConfig+0xa6>
 8005b3a:	2358      	movs	r3, #88	@ 0x58
 8005b3c:	33ff      	adds	r3, #255	@ 0xff
 8005b3e:	001a      	movs	r2, r3
 8005b40:	4b9b      	ldr	r3, [pc, #620]	@ (8005db0 <HAL_RCC_OscConfig+0x30c>)
 8005b42:	0011      	movs	r1, r2
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7fd fa81 	bl	800304c <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	2bff      	cmp	r3, #255	@ 0xff
 8005b50:	d906      	bls.n	8005b60 <HAL_RCC_OscConfig+0xbc>
 8005b52:	23ac      	movs	r3, #172	@ 0xac
 8005b54:	005a      	lsls	r2, r3, #1
 8005b56:	4b96      	ldr	r3, [pc, #600]	@ (8005db0 <HAL_RCC_OscConfig+0x30c>)
 8005b58:	0011      	movs	r1, r2
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f7fd fa76 	bl	800304c <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d033      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d02f      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	d02b      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7c:	2b30      	cmp	r3, #48	@ 0x30
 8005b7e:	d027      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b84:	2b40      	cmp	r3, #64	@ 0x40
 8005b86:	d023      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	2b50      	cmp	r3, #80	@ 0x50
 8005b8e:	d01f      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	2b60      	cmp	r3, #96	@ 0x60
 8005b96:	d01b      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	2b70      	cmp	r3, #112	@ 0x70
 8005b9e:	d017      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba4:	2b80      	cmp	r3, #128	@ 0x80
 8005ba6:	d013      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	2b90      	cmp	r3, #144	@ 0x90
 8005bae:	d00f      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	2ba0      	cmp	r3, #160	@ 0xa0
 8005bb6:	d00b      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	2bb0      	cmp	r3, #176	@ 0xb0
 8005bbe:	d007      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x12c>
 8005bc0:	235a      	movs	r3, #90	@ 0x5a
 8005bc2:	33ff      	adds	r3, #255	@ 0xff
 8005bc4:	001a      	movs	r2, r3
 8005bc6:	4b7a      	ldr	r3, [pc, #488]	@ (8005db0 <HAL_RCC_OscConfig+0x30c>)
 8005bc8:	0011      	movs	r1, r2
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f7fd fa3e 	bl	800304c <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <HAL_RCC_OscConfig+0x142>
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b18      	cmp	r3, #24
 8005bda:	d000      	beq.n	8005bde <HAL_RCC_OscConfig+0x13a>
 8005bdc:	e093      	b.n	8005d06 <HAL_RCC_OscConfig+0x262>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d000      	beq.n	8005be6 <HAL_RCC_OscConfig+0x142>
 8005be4:	e08f      	b.n	8005d06 <HAL_RCC_OscConfig+0x262>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005be6:	4b73      	ldr	r3, [pc, #460]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2202      	movs	r2, #2
 8005bec:	4013      	ands	r3, r2
 8005bee:	d006      	beq.n	8005bfe <HAL_RCC_OscConfig+0x15a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d102      	bne.n	8005bfe <HAL_RCC_OscConfig+0x15a>
      {
        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f000 fcbf 	bl	800657c <HAL_RCC_OscConfig+0xad8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c02:	4b6c      	ldr	r3, [pc, #432]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2108      	movs	r1, #8
 8005c08:	400b      	ands	r3, r1
 8005c0a:	d004      	beq.n	8005c16 <HAL_RCC_OscConfig+0x172>
 8005c0c:	4b69      	ldr	r3, [pc, #420]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	21f0      	movs	r1, #240	@ 0xf0
 8005c12:	400b      	ands	r3, r1
 8005c14:	e005      	b.n	8005c22 <HAL_RCC_OscConfig+0x17e>
 8005c16:	4967      	ldr	r1, [pc, #412]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c18:	2394      	movs	r3, #148	@ 0x94
 8005c1a:	58cb      	ldr	r3, [r1, r3]
 8005c1c:	091b      	lsrs	r3, r3, #4
 8005c1e:	21f0      	movs	r1, #240	@ 0xf0
 8005c20:	400b      	ands	r3, r1
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d225      	bcs.n	8005c72 <HAL_RCC_OscConfig+0x1ce>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 ff16 	bl	8006a5c <RCC_SetFlashLatencyFromMSIRange>
 8005c30:	1e03      	subs	r3, r0, #0
 8005c32:	d002      	beq.n	8005c3a <HAL_RCC_OscConfig+0x196>
          {
            return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f000 fca1 	bl	800657c <HAL_RCC_OscConfig+0xad8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c3a:	4b5e      	ldr	r3, [pc, #376]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c40:	2108      	movs	r1, #8
 8005c42:	430a      	orrs	r2, r1
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	4b5b      	ldr	r3, [pc, #364]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	22f0      	movs	r2, #240	@ 0xf0
 8005c4c:	4393      	bics	r3, r2
 8005c4e:	0019      	movs	r1, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c54:	4b57      	ldr	r3, [pc, #348]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c56:	430a      	orrs	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c5a:	4b56      	ldr	r3, [pc, #344]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	4a56      	ldr	r2, [pc, #344]	@ (8005db8 <HAL_RCC_OscConfig+0x314>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	0019      	movs	r1, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	021a      	lsls	r2, r3, #8
 8005c6a:	4b52      	ldr	r3, [pc, #328]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	e027      	b.n	8005cc2 <HAL_RCC_OscConfig+0x21e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c72:	4b50      	ldr	r3, [pc, #320]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4b4f      	ldr	r3, [pc, #316]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c78:	2108      	movs	r1, #8
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	22f0      	movs	r2, #240	@ 0xf0
 8005c84:	4393      	bics	r3, r2
 8005c86:	0019      	movs	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c8c:	4b49      	ldr	r3, [pc, #292]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c92:	4b48      	ldr	r3, [pc, #288]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	4a48      	ldr	r2, [pc, #288]	@ (8005db8 <HAL_RCC_OscConfig+0x314>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	0019      	movs	r1, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	021a      	lsls	r2, r3, #8
 8005ca2:	4b44      	ldr	r3, [pc, #272]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x21e>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f000 fed2 	bl	8006a5c <RCC_SetFlashLatencyFromMSIRange>
 8005cb8:	1e03      	subs	r3, r0, #0
 8005cba:	d002      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x21e>
            {
              return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f000 fc5d 	bl	800657c <HAL_RCC_OscConfig+0xad8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8005cc2:	f000 fe0d 	bl	80068e0 <HAL_RCC_GetSysClockFreq>
 8005cc6:	0001      	movs	r1, r0
 8005cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005cca:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ccc:	0a1b      	lsrs	r3, r3, #8
 8005cce:	220f      	movs	r2, #15
 8005cd0:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8005cd2:	4a3a      	ldr	r2, [pc, #232]	@ (8005dbc <HAL_RCC_OscConfig+0x318>)
 8005cd4:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cd6:	001a      	movs	r2, r3
 8005cd8:	231f      	movs	r3, #31
 8005cda:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8005cdc:	000a      	movs	r2, r1
 8005cde:	40da      	lsrs	r2, r3
 8005ce0:	4b37      	ldr	r3, [pc, #220]	@ (8005dc0 <HAL_RCC_OscConfig+0x31c>)
 8005ce2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ce4:	4b37      	ldr	r3, [pc, #220]	@ (8005dc4 <HAL_RCC_OscConfig+0x320>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	250f      	movs	r5, #15
 8005cea:	197c      	adds	r4, r7, r5
 8005cec:	0018      	movs	r0, r3
 8005cee:	f7fd fbdf 	bl	80034b0 <HAL_InitTick>
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8005cf6:	197b      	adds	r3, r7, r5
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d064      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x324>
        {
          return status;
 8005cfe:	197b      	adds	r3, r7, r5
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	f000 fc3b 	bl	800657c <HAL_RCC_OscConfig+0xad8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d035      	beq.n	8005d7a <HAL_RCC_OscConfig+0x2d6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d0e:	4b29      	ldr	r3, [pc, #164]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4b28      	ldr	r3, [pc, #160]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005d14:	2101      	movs	r1, #1
 8005d16:	430a      	orrs	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d1a:	f7fd fc23 	bl	8003564 <HAL_GetTick>
 8005d1e:	0003      	movs	r3, r0
 8005d20:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d22:	e009      	b.n	8005d38 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8005d24:	f7fd fc1e 	bl	8003564 <HAL_GetTick>
 8005d28:	0002      	movs	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d902      	bls.n	8005d38 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	f000 fc22 	bl	800657c <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d38:	4b1e      	ldr	r3, [pc, #120]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0x280>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d42:	4b1c      	ldr	r3, [pc, #112]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b1b      	ldr	r3, [pc, #108]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005d48:	2108      	movs	r1, #8
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	4b19      	ldr	r3, [pc, #100]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	22f0      	movs	r2, #240	@ 0xf0
 8005d54:	4393      	bics	r3, r2
 8005d56:	0019      	movs	r1, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d5c:	4b15      	ldr	r3, [pc, #84]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d62:	4b14      	ldr	r3, [pc, #80]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	4a14      	ldr	r2, [pc, #80]	@ (8005db8 <HAL_RCC_OscConfig+0x314>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	0019      	movs	r1, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	021a      	lsls	r2, r3, #8
 8005d72:	4b10      	ldr	r3, [pc, #64]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
 8005d78:	e027      	b.n	8005dca <HAL_RCC_OscConfig+0x326>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005d80:	2101      	movs	r1, #1
 8005d82:	438a      	bics	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d86:	f7fd fbed 	bl	8003564 <HAL_GetTick>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d8e:	e009      	b.n	8005da4 <HAL_RCC_OscConfig+0x300>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8005d90:	f7fd fbe8 	bl	8003564 <HAL_GetTick>
 8005d94:	0002      	movs	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d902      	bls.n	8005da4 <HAL_RCC_OscConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	f000 fbec 	bl	800657c <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005da4:	4b03      	ldr	r3, [pc, #12]	@ (8005db4 <HAL_RCC_OscConfig+0x310>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2202      	movs	r2, #2
 8005daa:	4013      	ands	r3, r2
 8005dac:	d1f0      	bne.n	8005d90 <HAL_RCC_OscConfig+0x2ec>
 8005dae:	e00c      	b.n	8005dca <HAL_RCC_OscConfig+0x326>
 8005db0:	0800d464 	.word	0x0800d464
 8005db4:	40021000 	.word	0x40021000
 8005db8:	ffff00ff 	.word	0xffff00ff
 8005dbc:	0800d790 	.word	0x0800d790
 8005dc0:	20000014 	.word	0x20000014
 8005dc4:	20000018 	.word	0x20000018
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dc8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d100      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x332>
 8005dd4:	e07f      	b.n	8005ed6 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d012      	beq.n	8005e04 <HAL_RCC_OscConfig+0x360>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	2380      	movs	r3, #128	@ 0x80
 8005de4:	025b      	lsls	r3, r3, #9
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d00c      	beq.n	8005e04 <HAL_RCC_OscConfig+0x360>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	23a0      	movs	r3, #160	@ 0xa0
 8005df0:	02db      	lsls	r3, r3, #11
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d006      	beq.n	8005e04 <HAL_RCC_OscConfig+0x360>
 8005df6:	23e3      	movs	r3, #227	@ 0xe3
 8005df8:	005a      	lsls	r2, r3, #1
 8005dfa:	4bb2      	ldr	r3, [pc, #712]	@ (80060c4 <HAL_RCC_OscConfig+0x620>)
 8005dfc:	0011      	movs	r1, r2
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f7fd f924 	bl	800304c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b10      	cmp	r3, #16
 8005e08:	d005      	beq.n	8005e16 <HAL_RCC_OscConfig+0x372>
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b18      	cmp	r3, #24
 8005e0e:	d10f      	bne.n	8005e30 <HAL_RCC_OscConfig+0x38c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d10c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x38c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e16:	4bac      	ldr	r3, [pc, #688]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	2380      	movs	r3, #128	@ 0x80
 8005e1c:	029b      	lsls	r3, r3, #10
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d058      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x430>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d154      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x430>
      {
        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f000 fba6 	bl	800657c <HAL_RCC_OscConfig+0xad8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	2380      	movs	r3, #128	@ 0x80
 8005e36:	025b      	lsls	r3, r3, #9
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d107      	bne.n	8005e4c <HAL_RCC_OscConfig+0x3a8>
 8005e3c:	4ba2      	ldr	r3, [pc, #648]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	4ba1      	ldr	r3, [pc, #644]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005e42:	2180      	movs	r1, #128	@ 0x80
 8005e44:	0249      	lsls	r1, r1, #9
 8005e46:	430a      	orrs	r2, r1
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e013      	b.n	8005e74 <HAL_RCC_OscConfig+0x3d0>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	23a0      	movs	r3, #160	@ 0xa0
 8005e52:	02db      	lsls	r3, r3, #11
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d107      	bne.n	8005e68 <HAL_RCC_OscConfig+0x3c4>
 8005e58:	4b9b      	ldr	r3, [pc, #620]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	4b9a      	ldr	r3, [pc, #616]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005e5e:	21a0      	movs	r1, #160	@ 0xa0
 8005e60:	02c9      	lsls	r1, r1, #11
 8005e62:	430a      	orrs	r2, r1
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	e005      	b.n	8005e74 <HAL_RCC_OscConfig+0x3d0>
 8005e68:	4b97      	ldr	r3, [pc, #604]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4b96      	ldr	r3, [pc, #600]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005e6e:	4997      	ldr	r1, [pc, #604]	@ (80060cc <HAL_RCC_OscConfig+0x628>)
 8005e70:	400a      	ands	r2, r1
 8005e72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d015      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x404>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7c:	f7fd fb72 	bl	8003564 <HAL_GetTick>
 8005e80:	0003      	movs	r3, r0
 8005e82:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e84:	e009      	b.n	8005e9a <HAL_RCC_OscConfig+0x3f6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005e86:	f7fd fb6d 	bl	8003564 <HAL_GetTick>
 8005e8a:	0002      	movs	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b64      	cmp	r3, #100	@ 0x64
 8005e92:	d902      	bls.n	8005e9a <HAL_RCC_OscConfig+0x3f6>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	f000 fb71 	bl	800657c <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e9a:	4b8b      	ldr	r3, [pc, #556]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	2380      	movs	r3, #128	@ 0x80
 8005ea0:	029b      	lsls	r3, r3, #10
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	d0ef      	beq.n	8005e86 <HAL_RCC_OscConfig+0x3e2>
 8005ea6:	e016      	b.n	8005ed6 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea8:	f7fd fb5c 	bl	8003564 <HAL_GetTick>
 8005eac:	0003      	movs	r3, r0
 8005eae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005eb0:	e009      	b.n	8005ec6 <HAL_RCC_OscConfig+0x422>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005eb2:	f7fd fb57 	bl	8003564 <HAL_GetTick>
 8005eb6:	0002      	movs	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b64      	cmp	r3, #100	@ 0x64
 8005ebe:	d902      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x422>
          {
            return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	f000 fb5b 	bl	800657c <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ec6:	4b80      	ldr	r3, [pc, #512]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	2380      	movs	r3, #128	@ 0x80
 8005ecc:	029b      	lsls	r3, r3, #10
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d1ef      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x40e>
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCC_OscConfig+0x432>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2202      	movs	r2, #2
 8005edc:	4013      	ands	r3, r2
 8005ede:	d100      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x43e>
 8005ee0:	e082      	b.n	8005fe8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <HAL_RCC_OscConfig+0x460>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	2380      	movs	r3, #128	@ 0x80
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d006      	beq.n	8005f04 <HAL_RCC_OscConfig+0x460>
 8005ef6:	23fc      	movs	r3, #252	@ 0xfc
 8005ef8:	005a      	lsls	r2, r3, #1
 8005efa:	4b72      	ldr	r3, [pc, #456]	@ (80060c4 <HAL_RCC_OscConfig+0x620>)
 8005efc:	0011      	movs	r1, r2
 8005efe:	0018      	movs	r0, r3
 8005f00:	f7fd f8a4 	bl	800304c <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f0a:	d907      	bls.n	8005f1c <HAL_RCC_OscConfig+0x478>
 8005f0c:	23fa      	movs	r3, #250	@ 0xfa
 8005f0e:	33ff      	adds	r3, #255	@ 0xff
 8005f10:	001a      	movs	r2, r3
 8005f12:	4b6c      	ldr	r3, [pc, #432]	@ (80060c4 <HAL_RCC_OscConfig+0x620>)
 8005f14:	0011      	movs	r1, r2
 8005f16:	0018      	movs	r0, r3
 8005f18:	f7fd f898 	bl	800304c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d005      	beq.n	8005f2e <HAL_RCC_OscConfig+0x48a>
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b18      	cmp	r3, #24
 8005f26:	d11a      	bne.n	8005f5e <HAL_RCC_OscConfig+0x4ba>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d117      	bne.n	8005f5e <HAL_RCC_OscConfig+0x4ba>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f2e:	4b66      	ldr	r3, [pc, #408]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	2380      	movs	r3, #128	@ 0x80
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4013      	ands	r3, r2
 8005f38:	d005      	beq.n	8005f46 <HAL_RCC_OscConfig+0x4a2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_RCC_OscConfig+0x4a2>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e31a      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f46:	4b60      	ldr	r3, [pc, #384]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	4a61      	ldr	r2, [pc, #388]	@ (80060d0 <HAL_RCC_OscConfig+0x62c>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	0019      	movs	r1, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	061a      	lsls	r2, r3, #24
 8005f56:	4b5c      	ldr	r3, [pc, #368]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f5c:	e044      	b.n	8005fe8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d026      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x510>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f66:	4b58      	ldr	r3, [pc, #352]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	4b57      	ldr	r3, [pc, #348]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005f6c:	2180      	movs	r1, #128	@ 0x80
 8005f6e:	0049      	lsls	r1, r1, #1
 8005f70:	430a      	orrs	r2, r1
 8005f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f74:	f7fd faf6 	bl	8003564 <HAL_GetTick>
 8005f78:	0003      	movs	r3, r0
 8005f7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x4ec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005f7e:	f7fd faf1 	bl	8003564 <HAL_GetTick>
 8005f82:	0002      	movs	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x4ec>
          {
            return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e2f5      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f90:	4b4d      	ldr	r3, [pc, #308]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	2380      	movs	r3, #128	@ 0x80
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_RCC_OscConfig+0x4da>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80060d0 <HAL_RCC_OscConfig+0x62c>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	0019      	movs	r1, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	061a      	lsls	r2, r3, #24
 8005fac:	4b46      	ldr	r3, [pc, #280]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	e019      	b.n	8005fe8 <HAL_RCC_OscConfig+0x544>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fb4:	4b44      	ldr	r3, [pc, #272]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b43      	ldr	r3, [pc, #268]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005fba:	4946      	ldr	r1, [pc, #280]	@ (80060d4 <HAL_RCC_OscConfig+0x630>)
 8005fbc:	400a      	ands	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fd fad0 	bl	8003564 <HAL_GetTick>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fc8:	e008      	b.n	8005fdc <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005fca:	f7fd facb 	bl	8003564 <HAL_GetTick>
 8005fce:	0002      	movs	r2, r0
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e2cf      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	2380      	movs	r3, #128	@ 0x80
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	d1f0      	bne.n	8005fca <HAL_RCC_OscConfig+0x526>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2208      	movs	r2, #8
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d100      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x550>
 8005ff2:	e07b      	b.n	80060ec <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <HAL_RCC_OscConfig+0x56c>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d005      	beq.n	8006010 <HAL_RCC_OscConfig+0x56c>
 8006004:	4a34      	ldr	r2, [pc, #208]	@ (80060d8 <HAL_RCC_OscConfig+0x634>)
 8006006:	4b2f      	ldr	r3, [pc, #188]	@ (80060c4 <HAL_RCC_OscConfig+0x620>)
 8006008:	0011      	movs	r1, r2
 800600a:	0018      	movs	r0, r3
 800600c:	f7fd f81e 	bl	800304c <assert_failed>
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d009      	beq.n	800602c <HAL_RCC_OscConfig+0x588>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d005      	beq.n	800602c <HAL_RCC_OscConfig+0x588>
 8006020:	4a2e      	ldr	r2, [pc, #184]	@ (80060dc <HAL_RCC_OscConfig+0x638>)
 8006022:	4b28      	ldr	r3, [pc, #160]	@ (80060c4 <HAL_RCC_OscConfig+0x620>)
 8006024:	0011      	movs	r1, r2
 8006026:	0018      	movs	r0, r3
 8006028:	f7fd f810 	bl	800304c <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d031      	beq.n	8006098 <HAL_RCC_OscConfig+0x5f4>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d108      	bne.n	800604e <HAL_RCC_OscConfig+0x5aa>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 800603c:	4a22      	ldr	r2, [pc, #136]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 800603e:	2394      	movs	r3, #148	@ 0x94
 8006040:	58d3      	ldr	r3, [r2, r3]
 8006042:	4921      	ldr	r1, [pc, #132]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8006044:	2204      	movs	r2, #4
 8006046:	4393      	bics	r3, r2
 8006048:	2294      	movs	r2, #148	@ 0x94
 800604a:	508b      	str	r3, [r1, r2]
 800604c:	e007      	b.n	800605e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 800604e:	4a1e      	ldr	r2, [pc, #120]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8006050:	2394      	movs	r3, #148	@ 0x94
 8006052:	58d3      	ldr	r3, [r2, r3]
 8006054:	491c      	ldr	r1, [pc, #112]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8006056:	2204      	movs	r2, #4
 8006058:	4313      	orrs	r3, r2
 800605a:	2294      	movs	r2, #148	@ 0x94
 800605c:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800605e:	4a1a      	ldr	r2, [pc, #104]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8006060:	2394      	movs	r3, #148	@ 0x94
 8006062:	58d3      	ldr	r3, [r2, r3]
 8006064:	4918      	ldr	r1, [pc, #96]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 8006066:	2201      	movs	r2, #1
 8006068:	4313      	orrs	r3, r2
 800606a:	2294      	movs	r2, #148	@ 0x94
 800606c:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606e:	f7fd fa79 	bl	8003564 <HAL_GetTick>
 8006072:	0003      	movs	r3, r0
 8006074:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x5e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006078:	f7fd fa74 	bl	8003564 <HAL_GetTick>
 800607c:	0002      	movs	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b11      	cmp	r3, #17
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x5e6>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e278      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800608a:	4a0f      	ldr	r2, [pc, #60]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 800608c:	2394      	movs	r3, #148	@ 0x94
 800608e:	58d3      	ldr	r3, [r2, r3]
 8006090:	2202      	movs	r2, #2
 8006092:	4013      	ands	r3, r2
 8006094:	d0f0      	beq.n	8006078 <HAL_RCC_OscConfig+0x5d4>
 8006096:	e029      	b.n	80060ec <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006098:	4a0b      	ldr	r2, [pc, #44]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 800609a:	2394      	movs	r3, #148	@ 0x94
 800609c:	58d3      	ldr	r3, [r2, r3]
 800609e:	490a      	ldr	r1, [pc, #40]	@ (80060c8 <HAL_RCC_OscConfig+0x624>)
 80060a0:	2201      	movs	r2, #1
 80060a2:	4393      	bics	r3, r2
 80060a4:	2294      	movs	r2, #148	@ 0x94
 80060a6:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a8:	f7fd fa5c 	bl	8003564 <HAL_GetTick>
 80060ac:	0003      	movs	r3, r0
 80060ae:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060b0:	e016      	b.n	80060e0 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060b2:	f7fd fa57 	bl	8003564 <HAL_GetTick>
 80060b6:	0002      	movs	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b11      	cmp	r3, #17
 80060be:	d90f      	bls.n	80060e0 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e25b      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
 80060c4:	0800d464 	.word	0x0800d464
 80060c8:	40021000 	.word	0x40021000
 80060cc:	fffaffff 	.word	0xfffaffff
 80060d0:	80ffffff 	.word	0x80ffffff
 80060d4:	fffffeff 	.word	0xfffffeff
 80060d8:	00000239 	.word	0x00000239
 80060dc:	0000023a 	.word	0x0000023a
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060e0:	4a8c      	ldr	r2, [pc, #560]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80060e2:	2394      	movs	r3, #148	@ 0x94
 80060e4:	58d3      	ldr	r3, [r2, r3]
 80060e6:	2202      	movs	r2, #2
 80060e8:	4013      	ands	r3, r2
 80060ea:	d1e2      	bne.n	80060b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2204      	movs	r2, #4
 80060f2:	4013      	ands	r3, r2
 80060f4:	d100      	bne.n	80060f8 <HAL_RCC_OscConfig+0x654>
 80060f6:	e127      	b.n	8006348 <HAL_RCC_OscConfig+0x8a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060f8:	231f      	movs	r3, #31
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d016      	beq.n	8006136 <HAL_RCC_OscConfig+0x692>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b81      	cmp	r3, #129	@ 0x81
 800610e:	d012      	beq.n	8006136 <HAL_RCC_OscConfig+0x692>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d00e      	beq.n	8006136 <HAL_RCC_OscConfig+0x692>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b05      	cmp	r3, #5
 800611e:	d00a      	beq.n	8006136 <HAL_RCC_OscConfig+0x692>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	2b85      	cmp	r3, #133	@ 0x85
 8006126:	d006      	beq.n	8006136 <HAL_RCC_OscConfig+0x692>
 8006128:	239c      	movs	r3, #156	@ 0x9c
 800612a:	009a      	lsls	r2, r3, #2
 800612c:	4b7a      	ldr	r3, [pc, #488]	@ (8006318 <HAL_RCC_OscConfig+0x874>)
 800612e:	0011      	movs	r1, r2
 8006130:	0018      	movs	r0, r3
 8006132:	f7fc ff8b 	bl	800304c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8006136:	4b77      	ldr	r3, [pc, #476]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 8006138:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800613a:	2380      	movs	r3, #128	@ 0x80
 800613c:	055b      	lsls	r3, r3, #21
 800613e:	4013      	ands	r3, r2
 8006140:	d111      	bne.n	8006166 <HAL_RCC_OscConfig+0x6c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006142:	4b74      	ldr	r3, [pc, #464]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 8006144:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006146:	4b73      	ldr	r3, [pc, #460]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 8006148:	2180      	movs	r1, #128	@ 0x80
 800614a:	0549      	lsls	r1, r1, #21
 800614c:	430a      	orrs	r2, r1
 800614e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006150:	4b70      	ldr	r3, [pc, #448]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 8006152:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006154:	2380      	movs	r3, #128	@ 0x80
 8006156:	055b      	lsls	r3, r3, #21
 8006158:	4013      	ands	r3, r2
 800615a:	60bb      	str	r3, [r7, #8]
 800615c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800615e:	231f      	movs	r3, #31
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006166:	4b6d      	ldr	r3, [pc, #436]	@ (800631c <HAL_RCC_OscConfig+0x878>)
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	2380      	movs	r3, #128	@ 0x80
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	4013      	ands	r3, r2
 8006170:	d11a      	bne.n	80061a8 <HAL_RCC_OscConfig+0x704>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006172:	4b6a      	ldr	r3, [pc, #424]	@ (800631c <HAL_RCC_OscConfig+0x878>)
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4b69      	ldr	r3, [pc, #420]	@ (800631c <HAL_RCC_OscConfig+0x878>)
 8006178:	2180      	movs	r1, #128	@ 0x80
 800617a:	0049      	lsls	r1, r1, #1
 800617c:	430a      	orrs	r2, r1
 800617e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006180:	f7fd f9f0 	bl	8003564 <HAL_GetTick>
 8006184:	0003      	movs	r3, r0
 8006186:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x6f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800618a:	f7fd f9eb 	bl	8003564 <HAL_GetTick>
 800618e:	0002      	movs	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e1ef      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800619c:	4b5f      	ldr	r3, [pc, #380]	@ (800631c <HAL_RCC_OscConfig+0x878>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	2380      	movs	r3, #128	@ 0x80
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4013      	ands	r3, r2
 80061a6:	d0f0      	beq.n	800618a <HAL_RCC_OscConfig+0x6e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2201      	movs	r2, #1
 80061ae:	4013      	ands	r3, r2
 80061b0:	d01e      	beq.n	80061f0 <HAL_RCC_OscConfig+0x74c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2204      	movs	r2, #4
 80061b8:	4013      	ands	r3, r2
 80061ba:	d010      	beq.n	80061de <HAL_RCC_OscConfig+0x73a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80061bc:	4a55      	ldr	r2, [pc, #340]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80061be:	2390      	movs	r3, #144	@ 0x90
 80061c0:	58d3      	ldr	r3, [r2, r3]
 80061c2:	4954      	ldr	r1, [pc, #336]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80061c4:	2204      	movs	r2, #4
 80061c6:	4313      	orrs	r3, r2
 80061c8:	2290      	movs	r2, #144	@ 0x90
 80061ca:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061cc:	4a51      	ldr	r2, [pc, #324]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80061ce:	2390      	movs	r3, #144	@ 0x90
 80061d0:	58d3      	ldr	r3, [r2, r3]
 80061d2:	4950      	ldr	r1, [pc, #320]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	4313      	orrs	r3, r2
 80061d8:	2290      	movs	r2, #144	@ 0x90
 80061da:	508b      	str	r3, [r1, r2]
 80061dc:	e018      	b.n	8006210 <HAL_RCC_OscConfig+0x76c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061de:	4a4d      	ldr	r2, [pc, #308]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80061e0:	2390      	movs	r3, #144	@ 0x90
 80061e2:	58d3      	ldr	r3, [r2, r3]
 80061e4:	494b      	ldr	r1, [pc, #300]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	4313      	orrs	r3, r2
 80061ea:	2290      	movs	r2, #144	@ 0x90
 80061ec:	508b      	str	r3, [r1, r2]
 80061ee:	e00f      	b.n	8006210 <HAL_RCC_OscConfig+0x76c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061f0:	4a48      	ldr	r2, [pc, #288]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80061f2:	2390      	movs	r3, #144	@ 0x90
 80061f4:	58d3      	ldr	r3, [r2, r3]
 80061f6:	4947      	ldr	r1, [pc, #284]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	4393      	bics	r3, r2
 80061fc:	2290      	movs	r2, #144	@ 0x90
 80061fe:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006200:	4a44      	ldr	r2, [pc, #272]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 8006202:	2390      	movs	r3, #144	@ 0x90
 8006204:	58d3      	ldr	r3, [r2, r3]
 8006206:	4943      	ldr	r1, [pc, #268]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 8006208:	2204      	movs	r2, #4
 800620a:	4393      	bics	r3, r2
 800620c:	2290      	movs	r2, #144	@ 0x90
 800620e:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d04f      	beq.n	80062b8 <HAL_RCC_OscConfig+0x814>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006218:	f7fd f9a4 	bl	8003564 <HAL_GetTick>
 800621c:	0003      	movs	r3, r0
 800621e:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006220:	e009      	b.n	8006236 <HAL_RCC_OscConfig+0x792>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006222:	f7fd f99f 	bl	8003564 <HAL_GetTick>
 8006226:	0002      	movs	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	4a3c      	ldr	r2, [pc, #240]	@ (8006320 <HAL_RCC_OscConfig+0x87c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x792>
        {
          return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e1a2      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006236:	4a37      	ldr	r2, [pc, #220]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 8006238:	2390      	movs	r3, #144	@ 0x90
 800623a:	58d3      	ldr	r3, [r2, r3]
 800623c:	2202      	movs	r2, #2
 800623e:	4013      	ands	r3, r2
 8006240:	d0ef      	beq.n	8006222 <HAL_RCC_OscConfig+0x77e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2280      	movs	r2, #128	@ 0x80
 8006248:	4013      	ands	r3, r2
 800624a:	d01a      	beq.n	8006282 <HAL_RCC_OscConfig+0x7de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800624c:	4a31      	ldr	r2, [pc, #196]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 800624e:	2390      	movs	r3, #144	@ 0x90
 8006250:	58d3      	ldr	r3, [r2, r3]
 8006252:	4930      	ldr	r1, [pc, #192]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 8006254:	2280      	movs	r2, #128	@ 0x80
 8006256:	4313      	orrs	r3, r2
 8006258:	2290      	movs	r2, #144	@ 0x90
 800625a:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800625c:	e009      	b.n	8006272 <HAL_RCC_OscConfig+0x7ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800625e:	f7fd f981 	bl	8003564 <HAL_GetTick>
 8006262:	0002      	movs	r2, r0
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	4a2d      	ldr	r2, [pc, #180]	@ (8006320 <HAL_RCC_OscConfig+0x87c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x7ce>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e184      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006272:	4a28      	ldr	r2, [pc, #160]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 8006274:	2390      	movs	r3, #144	@ 0x90
 8006276:	58d2      	ldr	r2, [r2, r3]
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	4013      	ands	r3, r2
 800627e:	d0ee      	beq.n	800625e <HAL_RCC_OscConfig+0x7ba>
 8006280:	e057      	b.n	8006332 <HAL_RCC_OscConfig+0x88e>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006282:	4a24      	ldr	r2, [pc, #144]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 8006284:	2390      	movs	r3, #144	@ 0x90
 8006286:	58d3      	ldr	r3, [r2, r3]
 8006288:	4922      	ldr	r1, [pc, #136]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 800628a:	2280      	movs	r2, #128	@ 0x80
 800628c:	4393      	bics	r3, r2
 800628e:	2290      	movs	r2, #144	@ 0x90
 8006290:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006292:	e009      	b.n	80062a8 <HAL_RCC_OscConfig+0x804>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006294:	f7fd f966 	bl	8003564 <HAL_GetTick>
 8006298:	0002      	movs	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	4a20      	ldr	r2, [pc, #128]	@ (8006320 <HAL_RCC_OscConfig+0x87c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e169      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80062aa:	2390      	movs	r3, #144	@ 0x90
 80062ac:	58d2      	ldr	r2, [r2, r3]
 80062ae:	2380      	movs	r3, #128	@ 0x80
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	4013      	ands	r3, r2
 80062b4:	d1ee      	bne.n	8006294 <HAL_RCC_OscConfig+0x7f0>
 80062b6:	e03c      	b.n	8006332 <HAL_RCC_OscConfig+0x88e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b8:	f7fd f954 	bl	8003564 <HAL_GetTick>
 80062bc:	0003      	movs	r3, r0
 80062be:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062c0:	e009      	b.n	80062d6 <HAL_RCC_OscConfig+0x832>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c2:	f7fd f94f 	bl	8003564 <HAL_GetTick>
 80062c6:	0002      	movs	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	4a14      	ldr	r2, [pc, #80]	@ (8006320 <HAL_RCC_OscConfig+0x87c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x832>
        {
          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e152      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80062d8:	2390      	movs	r3, #144	@ 0x90
 80062da:	58d3      	ldr	r3, [r2, r3]
 80062dc:	2202      	movs	r2, #2
 80062de:	4013      	ands	r3, r2
 80062e0:	d1ef      	bne.n	80062c2 <HAL_RCC_OscConfig+0x81e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80062e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80062e4:	2390      	movs	r3, #144	@ 0x90
 80062e6:	58d3      	ldr	r3, [r2, r3]
 80062e8:	2280      	movs	r2, #128	@ 0x80
 80062ea:	4013      	ands	r3, r2
 80062ec:	d021      	beq.n	8006332 <HAL_RCC_OscConfig+0x88e>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80062ee:	4a09      	ldr	r2, [pc, #36]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80062f0:	2390      	movs	r3, #144	@ 0x90
 80062f2:	58d3      	ldr	r3, [r2, r3]
 80062f4:	4907      	ldr	r1, [pc, #28]	@ (8006314 <HAL_RCC_OscConfig+0x870>)
 80062f6:	2280      	movs	r2, #128	@ 0x80
 80062f8:	4393      	bics	r3, r2
 80062fa:	2290      	movs	r2, #144	@ 0x90
 80062fc:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062fe:	e011      	b.n	8006324 <HAL_RCC_OscConfig+0x880>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f7fd f930 	bl	8003564 <HAL_GetTick>
 8006304:	0002      	movs	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	4a05      	ldr	r2, [pc, #20]	@ (8006320 <HAL_RCC_OscConfig+0x87c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d909      	bls.n	8006324 <HAL_RCC_OscConfig+0x880>
          {
            return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e133      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
 8006314:	40021000 	.word	0x40021000
 8006318:	0800d464 	.word	0x0800d464
 800631c:	40007000 	.word	0x40007000
 8006320:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006324:	4a97      	ldr	r2, [pc, #604]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 8006326:	2390      	movs	r3, #144	@ 0x90
 8006328:	58d2      	ldr	r2, [r2, r3]
 800632a:	2380      	movs	r3, #128	@ 0x80
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	4013      	ands	r3, r2
 8006330:	d1e6      	bne.n	8006300 <HAL_RCC_OscConfig+0x85c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006332:	231f      	movs	r3, #31
 8006334:	18fb      	adds	r3, r7, r3
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d105      	bne.n	8006348 <HAL_RCC_OscConfig+0x8a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633c:	4b91      	ldr	r3, [pc, #580]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 800633e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006340:	4b90      	ldr	r3, [pc, #576]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 8006342:	4991      	ldr	r1, [pc, #580]	@ (8006588 <HAL_RCC_OscConfig+0xae4>)
 8006344:	400a      	ands	r2, r1
 8006346:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00d      	beq.n	800636c <HAL_RCC_OscConfig+0x8c8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006354:	2b01      	cmp	r3, #1
 8006356:	d009      	beq.n	800636c <HAL_RCC_OscConfig+0x8c8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635c:	2b02      	cmp	r3, #2
 800635e:	d005      	beq.n	800636c <HAL_RCC_OscConfig+0x8c8>
 8006360:	4a8a      	ldr	r2, [pc, #552]	@ (800658c <HAL_RCC_OscConfig+0xae8>)
 8006362:	4b8b      	ldr	r3, [pc, #556]	@ (8006590 <HAL_RCC_OscConfig+0xaec>)
 8006364:	0011      	movs	r1, r2
 8006366:	0018      	movs	r0, r3
 8006368:	f7fc fe70 	bl	800304c <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	d100      	bne.n	8006376 <HAL_RCC_OscConfig+0x8d2>
 8006374:	e101      	b.n	800657a <HAL_RCC_OscConfig+0xad6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006376:	4b83      	ldr	r3, [pc, #524]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2238      	movs	r2, #56	@ 0x38
 800637c:	4013      	ands	r3, r2
 800637e:	2b18      	cmp	r3, #24
 8006380:	d100      	bne.n	8006384 <HAL_RCC_OscConfig+0x8e0>
 8006382:	e0f8      	b.n	8006576 <HAL_RCC_OscConfig+0xad2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006388:	2b02      	cmp	r3, #2
 800638a:	d000      	beq.n	800638e <HAL_RCC_OscConfig+0x8ea>
 800638c:	e0d8      	b.n	8006540 <HAL_RCC_OscConfig+0xa9c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	2b01      	cmp	r3, #1
 8006394:	d012      	beq.n	80063bc <HAL_RCC_OscConfig+0x918>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	2b02      	cmp	r3, #2
 800639c:	d00e      	beq.n	80063bc <HAL_RCC_OscConfig+0x918>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCC_OscConfig+0x918>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d006      	beq.n	80063bc <HAL_RCC_OscConfig+0x918>
 80063ae:	23ca      	movs	r3, #202	@ 0xca
 80063b0:	009a      	lsls	r2, r3, #2
 80063b2:	4b77      	ldr	r3, [pc, #476]	@ (8006590 <HAL_RCC_OscConfig+0xaec>)
 80063b4:	0011      	movs	r1, r2
 80063b6:	0018      	movs	r0, r3
 80063b8:	f7fc fe48 	bl	800304c <assert_failed>
        assert_param(IS_RCC_PLL_DIVM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d021      	beq.n	8006408 <HAL_RCC_OscConfig+0x964>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	d01d      	beq.n	8006408 <HAL_RCC_OscConfig+0x964>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d019      	beq.n	8006408 <HAL_RCC_OscConfig+0x964>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d8:	2b30      	cmp	r3, #48	@ 0x30
 80063da:	d015      	beq.n	8006408 <HAL_RCC_OscConfig+0x964>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e0:	2b40      	cmp	r3, #64	@ 0x40
 80063e2:	d011      	beq.n	8006408 <HAL_RCC_OscConfig+0x964>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e8:	2b50      	cmp	r3, #80	@ 0x50
 80063ea:	d00d      	beq.n	8006408 <HAL_RCC_OscConfig+0x964>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f0:	2b60      	cmp	r3, #96	@ 0x60
 80063f2:	d009      	beq.n	8006408 <HAL_RCC_OscConfig+0x964>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f8:	2b70      	cmp	r3, #112	@ 0x70
 80063fa:	d005      	beq.n	8006408 <HAL_RCC_OscConfig+0x964>
 80063fc:	4a65      	ldr	r2, [pc, #404]	@ (8006594 <HAL_RCC_OscConfig+0xaf0>)
 80063fe:	4b64      	ldr	r3, [pc, #400]	@ (8006590 <HAL_RCC_OscConfig+0xaec>)
 8006400:	0011      	movs	r1, r2
 8006402:	0018      	movs	r0, r3
 8006404:	f7fc fe22 	bl	800304c <assert_failed>
        assert_param(IS_RCC_PLL_MULN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640c:	2b03      	cmp	r3, #3
 800640e:	d903      	bls.n	8006418 <HAL_RCC_OscConfig+0x974>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006414:	2b7f      	cmp	r3, #127	@ 0x7f
 8006416:	d905      	bls.n	8006424 <HAL_RCC_OscConfig+0x980>
 8006418:	4a5f      	ldr	r2, [pc, #380]	@ (8006598 <HAL_RCC_OscConfig+0xaf4>)
 800641a:	4b5d      	ldr	r3, [pc, #372]	@ (8006590 <HAL_RCC_OscConfig+0xaec>)
 800641c:	0011      	movs	r1, r2
 800641e:	0018      	movs	r0, r3
 8006420:	f7fc fe14 	bl	800304c <assert_failed>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006428:	2380      	movs	r3, #128	@ 0x80
 800642a:	029b      	lsls	r3, r3, #10
 800642c:	429a      	cmp	r2, r3
 800642e:	d305      	bcc.n	800643c <HAL_RCC_OscConfig+0x998>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006434:	23f8      	movs	r3, #248	@ 0xf8
 8006436:	039b      	lsls	r3, r3, #14
 8006438:	429a      	cmp	r2, r3
 800643a:	d905      	bls.n	8006448 <HAL_RCC_OscConfig+0x9a4>
 800643c:	4a57      	ldr	r2, [pc, #348]	@ (800659c <HAL_RCC_OscConfig+0xaf8>)
 800643e:	4b54      	ldr	r3, [pc, #336]	@ (8006590 <HAL_RCC_OscConfig+0xaec>)
 8006440:	0011      	movs	r1, r2
 8006442:	0018      	movs	r0, r3
 8006444:	f7fc fe02 	bl	800304c <assert_failed>
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800644c:	2380      	movs	r3, #128	@ 0x80
 800644e:	049b      	lsls	r3, r3, #18
 8006450:	429a      	cmp	r2, r3
 8006452:	d305      	bcc.n	8006460 <HAL_RCC_OscConfig+0x9bc>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006458:	23e0      	movs	r3, #224	@ 0xe0
 800645a:	051b      	lsls	r3, r3, #20
 800645c:	429a      	cmp	r2, r3
 800645e:	d906      	bls.n	800646e <HAL_RCC_OscConfig+0x9ca>
 8006460:	23cb      	movs	r3, #203	@ 0xcb
 8006462:	009a      	lsls	r2, r3, #2
 8006464:	4b4a      	ldr	r3, [pc, #296]	@ (8006590 <HAL_RCC_OscConfig+0xaec>)
 8006466:	0011      	movs	r1, r2
 8006468:	0018      	movs	r0, r3
 800646a:	f7fc fdef 	bl	800304c <assert_failed>
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006472:	2380      	movs	r3, #128	@ 0x80
 8006474:	059b      	lsls	r3, r3, #22
 8006476:	429a      	cmp	r2, r3
 8006478:	d305      	bcc.n	8006486 <HAL_RCC_OscConfig+0x9e2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800647e:	23e0      	movs	r3, #224	@ 0xe0
 8006480:	061b      	lsls	r3, r3, #24
 8006482:	429a      	cmp	r2, r3
 8006484:	d905      	bls.n	8006492 <HAL_RCC_OscConfig+0x9ee>
 8006486:	4a46      	ldr	r2, [pc, #280]	@ (80065a0 <HAL_RCC_OscConfig+0xafc>)
 8006488:	4b41      	ldr	r3, [pc, #260]	@ (8006590 <HAL_RCC_OscConfig+0xaec>)
 800648a:	0011      	movs	r1, r2
 800648c:	0018      	movs	r0, r3
 800648e:	f7fc fddd 	bl	800304c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006492:	4b3c      	ldr	r3, [pc, #240]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b3b      	ldr	r3, [pc, #236]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 8006498:	4942      	ldr	r1, [pc, #264]	@ (80065a4 <HAL_RCC_OscConfig+0xb00>)
 800649a:	400a      	ands	r2, r1
 800649c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649e:	f7fd f861 	bl	8003564 <HAL_GetTick>
 80064a2:	0003      	movs	r3, r0
 80064a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0xa16>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a8:	f7fd f85c 	bl	8003564 <HAL_GetTick>
 80064ac:	0002      	movs	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0xa16>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e060      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064ba:	4b32      	ldr	r3, [pc, #200]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	2380      	movs	r3, #128	@ 0x80
 80064c0:	049b      	lsls	r3, r3, #18
 80064c2:	4013      	ands	r3, r2
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0xa04>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	4a37      	ldr	r2, [pc, #220]	@ (80065a8 <HAL_RCC_OscConfig+0xb04>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	0019      	movs	r1, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d8:	431a      	orrs	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f2:	431a      	orrs	r2, r3
 80064f4:	4b23      	ldr	r3, [pc, #140]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 80064f6:	430a      	orrs	r2, r1
 80064f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 80064fa:	4b22      	ldr	r3, [pc, #136]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	4b21      	ldr	r3, [pc, #132]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 8006500:	2180      	movs	r1, #128	@ 0x80
 8006502:	0549      	lsls	r1, r1, #21
 8006504:	430a      	orrs	r2, r1
 8006506:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006508:	4b1e      	ldr	r3, [pc, #120]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b1d      	ldr	r3, [pc, #116]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 800650e:	2180      	movs	r1, #128	@ 0x80
 8006510:	0449      	lsls	r1, r1, #17
 8006512:	430a      	orrs	r2, r1
 8006514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006516:	f7fd f825 	bl	8003564 <HAL_GetTick>
 800651a:	0003      	movs	r3, r0
 800651c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0xa8e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006520:	f7fd f820 	bl	8003564 <HAL_GetTick>
 8006524:	0002      	movs	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0xa8e>
          {
            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e024      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006532:	4b14      	ldr	r3, [pc, #80]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	2380      	movs	r3, #128	@ 0x80
 8006538:	049b      	lsls	r3, r3, #18
 800653a:	4013      	ands	r3, r2
 800653c:	d0f0      	beq.n	8006520 <HAL_RCC_OscConfig+0xa7c>
 800653e:	e01c      	b.n	800657a <HAL_RCC_OscConfig+0xad6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006540:	4b10      	ldr	r3, [pc, #64]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	4b0f      	ldr	r3, [pc, #60]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 8006546:	4917      	ldr	r1, [pc, #92]	@ (80065a4 <HAL_RCC_OscConfig+0xb00>)
 8006548:	400a      	ands	r2, r1
 800654a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fd f80a 	bl	8003564 <HAL_GetTick>
 8006550:	0003      	movs	r3, r0
 8006552:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0xac4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006556:	f7fd f805 	bl	8003564 <HAL_GetTick>
 800655a:	0002      	movs	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0xac4>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e009      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006568:	4b06      	ldr	r3, [pc, #24]	@ (8006584 <HAL_RCC_OscConfig+0xae0>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	2380      	movs	r3, #128	@ 0x80
 800656e:	049b      	lsls	r3, r3, #18
 8006570:	4013      	ands	r3, r2
 8006572:	d1f0      	bne.n	8006556 <HAL_RCC_OscConfig+0xab2>
 8006574:	e001      	b.n	800657a <HAL_RCC_OscConfig+0xad6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <HAL_RCC_OscConfig+0xad8>
    }
  }
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	0018      	movs	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	b008      	add	sp, #32
 8006582:	bdb0      	pop	{r4, r5, r7, pc}
 8006584:	40021000 	.word	0x40021000
 8006588:	efffffff 	.word	0xefffffff
 800658c:	0000031e 	.word	0x0000031e
 8006590:	0800d464 	.word	0x0800d464
 8006594:	00000329 	.word	0x00000329
 8006598:	0000032a 	.word	0x0000032a
 800659c:	0000032b 	.word	0x0000032b
 80065a0:	0000032d 	.word	0x0000032d
 80065a4:	feffffff 	.word	0xfeffffff
 80065a8:	11c1808c 	.word	0x11c1808c

080065ac <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 80065ac:	b5b0      	push	{r4, r5, r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d106      	bne.n	80065ca <HAL_RCC_ClockConfig+0x1e>
 80065bc:	23de      	movs	r3, #222	@ 0xde
 80065be:	009a      	lsls	r2, r3, #2
 80065c0:	4bbb      	ldr	r3, [pc, #748]	@ (80068b0 <HAL_RCC_ClockConfig+0x304>)
 80065c2:	0011      	movs	r1, r2
 80065c4:	0018      	movs	r0, r3
 80065c6:	f7fc fd41 	bl	800304c <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE((uint8_t)RCC_ClkInitStruct->ClockType));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <HAL_RCC_ClockConfig+0x32>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b1f      	cmp	r3, #31
 80065dc:	d905      	bls.n	80065ea <HAL_RCC_ClockConfig+0x3e>
 80065de:	4ab5      	ldr	r2, [pc, #724]	@ (80068b4 <HAL_RCC_ClockConfig+0x308>)
 80065e0:	4bb3      	ldr	r3, [pc, #716]	@ (80068b0 <HAL_RCC_ClockConfig+0x304>)
 80065e2:	0011      	movs	r1, r2
 80065e4:	0018      	movs	r0, r3
 80065e6:	f7fc fd31 	bl	800304c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <HAL_RCC_ClockConfig+0x5c>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d008      	beq.n	8006608 <HAL_RCC_ClockConfig+0x5c>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d005      	beq.n	8006608 <HAL_RCC_ClockConfig+0x5c>
 80065fc:	4aae      	ldr	r2, [pc, #696]	@ (80068b8 <HAL_RCC_ClockConfig+0x30c>)
 80065fe:	4bac      	ldr	r3, [pc, #688]	@ (80068b0 <HAL_RCC_ClockConfig+0x304>)
 8006600:	0011      	movs	r1, r2
 8006602:	0018      	movs	r0, r3
 8006604:	f7fc fd22 	bl	800304c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006608:	4bac      	ldr	r3, [pc, #688]	@ (80068bc <HAL_RCC_ClockConfig+0x310>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2207      	movs	r2, #7
 800660e:	4013      	ands	r3, r2
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d911      	bls.n	800663a <HAL_RCC_ClockConfig+0x8e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006616:	4ba9      	ldr	r3, [pc, #676]	@ (80068bc <HAL_RCC_ClockConfig+0x310>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2207      	movs	r2, #7
 800661c:	4393      	bics	r3, r2
 800661e:	0019      	movs	r1, r3
 8006620:	4ba6      	ldr	r3, [pc, #664]	@ (80068bc <HAL_RCC_ClockConfig+0x310>)
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006628:	4ba4      	ldr	r3, [pc, #656]	@ (80068bc <HAL_RCC_ClockConfig+0x310>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2207      	movs	r2, #7
 800662e:	4013      	ands	r3, r2
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d001      	beq.n	800663a <HAL_RCC_ClockConfig+0x8e>
    {
      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e136      	b.n	80068a8 <HAL_RCC_ClockConfig+0x2fc>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2201      	movs	r2, #1
 8006640:	4013      	ands	r3, r2
 8006642:	d100      	bne.n	8006646 <HAL_RCC_ClockConfig+0x9a>
 8006644:	e082      	b.n	800674c <HAL_RCC_ClockConfig+0x1a0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d019      	beq.n	8006682 <HAL_RCC_ClockConfig+0xd6>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d015      	beq.n	8006682 <HAL_RCC_ClockConfig+0xd6>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b02      	cmp	r3, #2
 800665c:	d011      	beq.n	8006682 <HAL_RCC_ClockConfig+0xd6>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b03      	cmp	r3, #3
 8006664:	d00d      	beq.n	8006682 <HAL_RCC_ClockConfig+0xd6>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b04      	cmp	r3, #4
 800666c:	d009      	beq.n	8006682 <HAL_RCC_ClockConfig+0xd6>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b05      	cmp	r3, #5
 8006674:	d005      	beq.n	8006682 <HAL_RCC_ClockConfig+0xd6>
 8006676:	4a92      	ldr	r2, [pc, #584]	@ (80068c0 <HAL_RCC_ClockConfig+0x314>)
 8006678:	4b8d      	ldr	r3, [pc, #564]	@ (80068b0 <HAL_RCC_ClockConfig+0x304>)
 800667a:	0011      	movs	r1, r2
 800667c:	0018      	movs	r0, r3
 800667e:	f7fc fce5 	bl	800304c <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b03      	cmp	r3, #3
 8006688:	d107      	bne.n	800669a <HAL_RCC_ClockConfig+0xee>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800668a:	4b8e      	ldr	r3, [pc, #568]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	2380      	movs	r3, #128	@ 0x80
 8006690:	049b      	lsls	r3, r3, #18
 8006692:	4013      	ands	r3, r2
 8006694:	d138      	bne.n	8006708 <HAL_RCC_ClockConfig+0x15c>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e106      	b.n	80068a8 <HAL_RCC_ClockConfig+0x2fc>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d107      	bne.n	80066b2 <HAL_RCC_ClockConfig+0x106>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066a2:	4b88      	ldr	r3, [pc, #544]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	2380      	movs	r3, #128	@ 0x80
 80066a8:	029b      	lsls	r3, r3, #10
 80066aa:	4013      	ands	r3, r2
 80066ac:	d12c      	bne.n	8006708 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e0fa      	b.n	80068a8 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <HAL_RCC_ClockConfig+0x11c>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066ba:	4b82      	ldr	r3, [pc, #520]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2202      	movs	r2, #2
 80066c0:	4013      	ands	r3, r2
 80066c2:	d121      	bne.n	8006708 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0ef      	b.n	80068a8 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d107      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x134>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066d0:	4b7c      	ldr	r3, [pc, #496]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	2380      	movs	r3, #128	@ 0x80
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	4013      	ands	r3, r2
 80066da:	d115      	bne.n	8006708 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0e3      	b.n	80068a8 <HAL_RCC_ClockConfig+0x2fc>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d107      	bne.n	80066f8 <HAL_RCC_ClockConfig+0x14c>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066e8:	4a76      	ldr	r2, [pc, #472]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 80066ea:	2394      	movs	r3, #148	@ 0x94
 80066ec:	58d3      	ldr	r3, [r2, r3]
 80066ee:	2202      	movs	r2, #2
 80066f0:	4013      	ands	r3, r2
 80066f2:	d109      	bne.n	8006708 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0d7      	b.n	80068a8 <HAL_RCC_ClockConfig+0x2fc>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066f8:	4a72      	ldr	r2, [pc, #456]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 80066fa:	2390      	movs	r3, #144	@ 0x90
 80066fc:	58d3      	ldr	r3, [r2, r3]
 80066fe:	2202      	movs	r2, #2
 8006700:	4013      	ands	r3, r2
 8006702:	d101      	bne.n	8006708 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0cf      	b.n	80068a8 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006708:	4b6e      	ldr	r3, [pc, #440]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2207      	movs	r2, #7
 800670e:	4393      	bics	r3, r2
 8006710:	0019      	movs	r1, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	4b6b      	ldr	r3, [pc, #428]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 8006718:	430a      	orrs	r2, r1
 800671a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800671c:	f7fc ff22 	bl	8003564 <HAL_GetTick>
 8006720:	0003      	movs	r3, r0
 8006722:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006724:	e009      	b.n	800673a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006726:	f7fc ff1d 	bl	8003564 <HAL_GetTick>
 800672a:	0002      	movs	r2, r0
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	4a65      	ldr	r2, [pc, #404]	@ (80068c8 <HAL_RCC_ClockConfig+0x31c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d901      	bls.n	800673a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e0b6      	b.n	80068a8 <HAL_RCC_ClockConfig+0x2fc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800673a:	4b62      	ldr	r3, [pc, #392]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2238      	movs	r2, #56	@ 0x38
 8006740:	401a      	ands	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	429a      	cmp	r2, r3
 800674a:	d1ec      	bne.n	8006726 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2202      	movs	r2, #2
 8006752:	4013      	ands	r3, r2
 8006754:	d044      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x234>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d036      	beq.n	80067cc <HAL_RCC_ClockConfig+0x220>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	2380      	movs	r3, #128	@ 0x80
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	429a      	cmp	r2, r3
 8006768:	d030      	beq.n	80067cc <HAL_RCC_ClockConfig+0x220>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	2390      	movs	r3, #144	@ 0x90
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	429a      	cmp	r2, r3
 8006774:	d02a      	beq.n	80067cc <HAL_RCC_ClockConfig+0x220>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	23a0      	movs	r3, #160	@ 0xa0
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	429a      	cmp	r2, r3
 8006780:	d024      	beq.n	80067cc <HAL_RCC_ClockConfig+0x220>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	23b0      	movs	r3, #176	@ 0xb0
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	429a      	cmp	r2, r3
 800678c:	d01e      	beq.n	80067cc <HAL_RCC_ClockConfig+0x220>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	23c0      	movs	r3, #192	@ 0xc0
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	429a      	cmp	r2, r3
 8006798:	d018      	beq.n	80067cc <HAL_RCC_ClockConfig+0x220>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	23d0      	movs	r3, #208	@ 0xd0
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d012      	beq.n	80067cc <HAL_RCC_ClockConfig+0x220>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	23e0      	movs	r3, #224	@ 0xe0
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d00c      	beq.n	80067cc <HAL_RCC_ClockConfig+0x220>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	23f0      	movs	r3, #240	@ 0xf0
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d006      	beq.n	80067cc <HAL_RCC_ClockConfig+0x220>
 80067be:	23f8      	movs	r3, #248	@ 0xf8
 80067c0:	009a      	lsls	r2, r3, #2
 80067c2:	4b3b      	ldr	r3, [pc, #236]	@ (80068b0 <HAL_RCC_ClockConfig+0x304>)
 80067c4:	0011      	movs	r1, r2
 80067c6:	0018      	movs	r0, r3
 80067c8:	f7fc fc40 	bl	800304c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067cc:	4b3d      	ldr	r3, [pc, #244]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	4a3e      	ldr	r2, [pc, #248]	@ (80068cc <HAL_RCC_ClockConfig+0x320>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	0019      	movs	r1, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	4b3a      	ldr	r3, [pc, #232]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 80067dc:	430a      	orrs	r2, r1
 80067de:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067e0:	4b36      	ldr	r3, [pc, #216]	@ (80068bc <HAL_RCC_ClockConfig+0x310>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2207      	movs	r2, #7
 80067e6:	4013      	ands	r3, r2
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d211      	bcs.n	8006812 <HAL_RCC_ClockConfig+0x266>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ee:	4b33      	ldr	r3, [pc, #204]	@ (80068bc <HAL_RCC_ClockConfig+0x310>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2207      	movs	r2, #7
 80067f4:	4393      	bics	r3, r2
 80067f6:	0019      	movs	r1, r3
 80067f8:	4b30      	ldr	r3, [pc, #192]	@ (80068bc <HAL_RCC_ClockConfig+0x310>)
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006800:	4b2e      	ldr	r3, [pc, #184]	@ (80068bc <HAL_RCC_ClockConfig+0x310>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2207      	movs	r2, #7
 8006806:	4013      	ands	r3, r2
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d001      	beq.n	8006812 <HAL_RCC_ClockConfig+0x266>
    {
      return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e04a      	b.n	80068a8 <HAL_RCC_ClockConfig+0x2fc>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2204      	movs	r2, #4
 8006818:	4013      	ands	r3, r2
 800681a:	d02b      	beq.n	8006874 <HAL_RCC_ClockConfig+0x2c8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01d      	beq.n	8006860 <HAL_RCC_ClockConfig+0x2b4>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	2380      	movs	r3, #128	@ 0x80
 800682a:	01db      	lsls	r3, r3, #7
 800682c:	429a      	cmp	r2, r3
 800682e:	d017      	beq.n	8006860 <HAL_RCC_ClockConfig+0x2b4>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	23a0      	movs	r3, #160	@ 0xa0
 8006836:	01db      	lsls	r3, r3, #7
 8006838:	429a      	cmp	r2, r3
 800683a:	d011      	beq.n	8006860 <HAL_RCC_ClockConfig+0x2b4>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	23c0      	movs	r3, #192	@ 0xc0
 8006842:	01db      	lsls	r3, r3, #7
 8006844:	429a      	cmp	r2, r3
 8006846:	d00b      	beq.n	8006860 <HAL_RCC_ClockConfig+0x2b4>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	23e0      	movs	r3, #224	@ 0xe0
 800684e:	01db      	lsls	r3, r3, #7
 8006850:	429a      	cmp	r2, r3
 8006852:	d005      	beq.n	8006860 <HAL_RCC_ClockConfig+0x2b4>
 8006854:	4a1e      	ldr	r2, [pc, #120]	@ (80068d0 <HAL_RCC_ClockConfig+0x324>)
 8006856:	4b16      	ldr	r3, [pc, #88]	@ (80068b0 <HAL_RCC_ClockConfig+0x304>)
 8006858:	0011      	movs	r1, r2
 800685a:	0018      	movs	r0, r3
 800685c:	f7fc fbf6 	bl	800304c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006860:	4b18      	ldr	r3, [pc, #96]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4a1b      	ldr	r2, [pc, #108]	@ (80068d4 <HAL_RCC_ClockConfig+0x328>)
 8006866:	4013      	ands	r3, r2
 8006868:	0019      	movs	r1, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	4b15      	ldr	r3, [pc, #84]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 8006870:	430a      	orrs	r2, r1
 8006872:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006874:	f000 f834 	bl	80068e0 <HAL_RCC_GetSysClockFreq>
 8006878:	0001      	movs	r1, r0
 800687a:	4b12      	ldr	r3, [pc, #72]	@ (80068c4 <HAL_RCC_ClockConfig+0x318>)
 800687c:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800687e:	0a1b      	lsrs	r3, r3, #8
 8006880:	220f      	movs	r2, #15
 8006882:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006884:	4a14      	ldr	r2, [pc, #80]	@ (80068d8 <HAL_RCC_ClockConfig+0x32c>)
 8006886:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006888:	001a      	movs	r2, r3
 800688a:	231f      	movs	r3, #31
 800688c:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800688e:	000a      	movs	r2, r1
 8006890:	40da      	lsrs	r2, r3
 8006892:	4b12      	ldr	r3, [pc, #72]	@ (80068dc <HAL_RCC_ClockConfig+0x330>)
 8006894:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8006896:	250b      	movs	r5, #11
 8006898:	197c      	adds	r4, r7, r5
 800689a:	2003      	movs	r0, #3
 800689c:	f7fc fe08 	bl	80034b0 <HAL_InitTick>
 80068a0:	0003      	movs	r3, r0
 80068a2:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80068a4:	197b      	adds	r3, r7, r5
 80068a6:	781b      	ldrb	r3, [r3, #0]
}
 80068a8:	0018      	movs	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b004      	add	sp, #16
 80068ae:	bdb0      	pop	{r4, r5, r7, pc}
 80068b0:	0800d464 	.word	0x0800d464
 80068b4:	00000379 	.word	0x00000379
 80068b8:	0000037a 	.word	0x0000037a
 80068bc:	40022000 	.word	0x40022000
 80068c0:	00000391 	.word	0x00000391
 80068c4:	40021000 	.word	0x40021000
 80068c8:	00001388 	.word	0x00001388
 80068cc:	fffff0ff 	.word	0xfffff0ff
 80068d0:	000003f5 	.word	0x000003f5
 80068d4:	ffff8fff 	.word	0xffff8fff
 80068d8:	0800d790 	.word	0x0800d790
 80068dc:	20000014 	.word	0x20000014

080068e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	@ 0x28
 80068e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ee:	4b46      	ldr	r3, [pc, #280]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x128>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2238      	movs	r2, #56	@ 0x38
 80068f4:	4013      	ands	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068f8:	4b43      	ldr	r3, [pc, #268]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x128>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	2203      	movs	r2, #3
 80068fe:	4013      	ands	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCC_GetSysClockFreq+0x34>
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	2b18      	cmp	r3, #24
 800690c:	d125      	bne.n	800695a <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d122      	bne.n	800695a <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006914:	4b3c      	ldr	r3, [pc, #240]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x128>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2208      	movs	r2, #8
 800691a:	4013      	ands	r3, r2
 800691c:	d107      	bne.n	800692e <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 800691e:	4a3a      	ldr	r2, [pc, #232]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x128>)
 8006920:	2394      	movs	r3, #148	@ 0x94
 8006922:	58d3      	ldr	r3, [r2, r3]
 8006924:	0a1b      	lsrs	r3, r3, #8
 8006926:	220f      	movs	r2, #15
 8006928:	4013      	ands	r3, r2
 800692a:	627b      	str	r3, [r7, #36]	@ 0x24
 800692c:	e005      	b.n	800693a <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800692e:	4b36      	ldr	r3, [pc, #216]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x128>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	091b      	lsrs	r3, r3, #4
 8006934:	220f      	movs	r2, #15
 8006936:	4013      	ands	r3, r2
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	2b0b      	cmp	r3, #11
 800693e:	d901      	bls.n	8006944 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8006944:	4b31      	ldr	r3, [pc, #196]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006948:	0092      	lsls	r2, r2, #2
 800694a:	58d3      	ldr	r3, [r2, r3]
 800694c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11b      	bne.n	800698c <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006958:	e018      	b.n	800698c <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d102      	bne.n	8006966 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006960:	4b2b      	ldr	r3, [pc, #172]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x130>)
 8006962:	623b      	str	r3, [r7, #32]
 8006964:	e012      	b.n	800698c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b10      	cmp	r3, #16
 800696a:	d102      	bne.n	8006972 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800696c:	4b29      	ldr	r3, [pc, #164]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x134>)
 800696e:	623b      	str	r3, [r7, #32]
 8006970:	e00c      	b.n	800698c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b20      	cmp	r3, #32
 8006976:	d103      	bne.n	8006980 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006978:	23fa      	movs	r3, #250	@ 0xfa
 800697a:	01db      	lsls	r3, r3, #7
 800697c:	623b      	str	r3, [r7, #32]
 800697e:	e005      	b.n	800698c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	2b28      	cmp	r3, #40	@ 0x28
 8006984:	d102      	bne.n	800698c <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006986:	2380      	movs	r3, #128	@ 0x80
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b18      	cmp	r3, #24
 8006990:	d135      	bne.n	80069fe <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006992:	4b1d      	ldr	r3, [pc, #116]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x128>)
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2203      	movs	r2, #3
 8006998:	4013      	ands	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800699c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x128>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	091b      	lsrs	r3, r3, #4
 80069a2:	2207      	movs	r2, #7
 80069a4:	4013      	ands	r3, r2
 80069a6:	3301      	adds	r3, #1
 80069a8:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d003      	beq.n	80069b8 <HAL_RCC_GetSysClockFreq+0xd8>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d003      	beq.n	80069be <HAL_RCC_GetSysClockFreq+0xde>
 80069b6:	e005      	b.n	80069c4 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80069b8:	4b15      	ldr	r3, [pc, #84]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x130>)
 80069ba:	61fb      	str	r3, [r7, #28]
        break;
 80069bc:	e005      	b.n	80069ca <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80069be:	4b15      	ldr	r3, [pc, #84]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x134>)
 80069c0:	61fb      	str	r3, [r7, #28]
        break;
 80069c2:	e002      	b.n	80069ca <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c6:	61fb      	str	r3, [r7, #28]
        break;
 80069c8:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80069ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x128>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	227f      	movs	r2, #127	@ 0x7f
 80069d2:	4013      	ands	r3, r2
 80069d4:	69fa      	ldr	r2, [r7, #28]
 80069d6:	4353      	muls	r3, r2
 80069d8:	68f9      	ldr	r1, [r7, #12]
 80069da:	0018      	movs	r0, r3
 80069dc:	f7f9 fba6 	bl	800012c <__udivsi3>
 80069e0:	0003      	movs	r3, r0
 80069e2:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80069e4:	4b08      	ldr	r3, [pc, #32]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x128>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	0f5b      	lsrs	r3, r3, #29
 80069ea:	2207      	movs	r2, #7
 80069ec:	4013      	ands	r3, r2
 80069ee:	3301      	adds	r3, #1
 80069f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	68b8      	ldr	r0, [r7, #8]
 80069f6:	f7f9 fb99 	bl	800012c <__udivsi3>
 80069fa:	0003      	movs	r3, r0
 80069fc:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80069fe:	6a3b      	ldr	r3, [r7, #32]
}
 8006a00:	0018      	movs	r0, r3
 8006a02:	46bd      	mov	sp, r7
 8006a04:	b00a      	add	sp, #40	@ 0x28
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	0800d7a8 	.word	0x0800d7a8
 8006a10:	00f42400 	.word	0x00f42400
 8006a14:	007a1200 	.word	0x007a1200

08006a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a1c:	4b02      	ldr	r3, [pc, #8]	@ (8006a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
}
 8006a20:	0018      	movs	r0, r3
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	20000014 	.word	0x20000014

08006a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8006a30:	f7ff fff2 	bl	8006a18 <HAL_RCC_GetHCLKFreq>
 8006a34:	0001      	movs	r1, r0
 8006a36:	4b07      	ldr	r3, [pc, #28]	@ (8006a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	0b1b      	lsrs	r3, r3, #12
 8006a3c:	2207      	movs	r2, #7
 8006a3e:	4013      	ands	r3, r2
 8006a40:	4a05      	ldr	r2, [pc, #20]	@ (8006a58 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006a42:	5cd3      	ldrb	r3, [r2, r3]
 8006a44:	001a      	movs	r2, r3
 8006a46:	231f      	movs	r3, #31
 8006a48:	4013      	ands	r3, r2
 8006a4a:	40d9      	lsrs	r1, r3
 8006a4c:	000b      	movs	r3, r1
}
 8006a4e:	0018      	movs	r0, r3
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40021000 	.word	0x40021000
 8006a58:	0800d7a0 	.word	0x0800d7a0

08006a5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006a64:	2300      	movs	r3, #0
 8006a66:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006a68:	4b2f      	ldr	r3, [pc, #188]	@ (8006b28 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006a6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a6c:	2380      	movs	r3, #128	@ 0x80
 8006a6e:	055b      	lsls	r3, r3, #21
 8006a70:	4013      	ands	r3, r2
 8006a72:	d004      	beq.n	8006a7e <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006a74:	f7ff f80a 	bl	8005a8c <HAL_PWREx_GetVoltageRange>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	e017      	b.n	8006aae <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006b28 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006a80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a82:	4b29      	ldr	r3, [pc, #164]	@ (8006b28 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006a84:	2180      	movs	r1, #128	@ 0x80
 8006a86:	0549      	lsls	r1, r1, #21
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a8c:	4b26      	ldr	r3, [pc, #152]	@ (8006b28 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006a8e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a90:	2380      	movs	r3, #128	@ 0x80
 8006a92:	055b      	lsls	r3, r3, #21
 8006a94:	4013      	ands	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006a9a:	f7fe fff7 	bl	8005a8c <HAL_PWREx_GetVoltageRange>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006aa2:	4b21      	ldr	r3, [pc, #132]	@ (8006b28 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006aa4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006aa6:	4b20      	ldr	r3, [pc, #128]	@ (8006b28 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006aa8:	4920      	ldr	r1, [pc, #128]	@ (8006b2c <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8006aaa:	400a      	ands	r2, r1
 8006aac:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	2380      	movs	r3, #128	@ 0x80
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d111      	bne.n	8006adc <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b80      	cmp	r3, #128	@ 0x80
 8006abc:	d91c      	bls.n	8006af8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2bb0      	cmp	r3, #176	@ 0xb0
 8006ac2:	d902      	bls.n	8006aca <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	e016      	b.n	8006af8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b90      	cmp	r3, #144	@ 0x90
 8006ace:	d902      	bls.n	8006ad6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	e010      	b.n	8006af8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	e00d      	b.n	8006af8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ae0:	d902      	bls.n	8006ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	e007      	b.n	8006af8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b70      	cmp	r3, #112	@ 0x70
 8006aec:	d102      	bne.n	8006af4 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006aee:	2301      	movs	r3, #1
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	e001      	b.n	8006af8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006af4:	2300      	movs	r3, #0
 8006af6:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006af8:	4b0d      	ldr	r3, [pc, #52]	@ (8006b30 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2207      	movs	r2, #7
 8006afe:	4393      	bics	r3, r2
 8006b00:	0019      	movs	r1, r3
 8006b02:	4b0b      	ldr	r3, [pc, #44]	@ (8006b30 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006b0a:	4b09      	ldr	r3, [pc, #36]	@ (8006b30 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2207      	movs	r2, #7
 8006b10:	4013      	ands	r3, r2
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d001      	beq.n	8006b1c <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	0018      	movs	r0, r3
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b006      	add	sp, #24
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	46c0      	nop			@ (mov r8, r8)
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	efffffff 	.word	0xefffffff
 8006b30:	40022000 	.word	0x40022000

08006b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b3c:	2313      	movs	r3, #19
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b44:	2312      	movs	r3, #18
 8006b46:	18fb      	adds	r3, r7, r3
 8006b48:	2200      	movs	r2, #0
 8006b4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a66      	ldr	r2, [pc, #408]	@ (8006cec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	d004      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a65      	ldr	r2, [pc, #404]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	d004      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x36>
 8006b60:	4b64      	ldr	r3, [pc, #400]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006b62:	217a      	movs	r1, #122	@ 0x7a
 8006b64:	0018      	movs	r0, r3
 8006b66:	f7fc fa71 	bl	800304c <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	2380      	movs	r3, #128	@ 0x80
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	4013      	ands	r3, r2
 8006b74:	d100      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006b76:	e0da      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b78:	2311      	movs	r3, #17
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d016      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b8c:	2380      	movs	r3, #128	@ 0x80
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d010      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b98:	2380      	movs	r3, #128	@ 0x80
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d00a      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ba4:	23c0      	movs	r3, #192	@ 0xc0
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d004      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8006bac:	4b51      	ldr	r3, [pc, #324]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006bae:	2182      	movs	r1, #130	@ 0x82
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f7fc fa4b 	bl	800304c <assert_failed>

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bb6:	4b50      	ldr	r3, [pc, #320]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006bb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006bba:	2380      	movs	r3, #128	@ 0x80
 8006bbc:	055b      	lsls	r3, r3, #21
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	d111      	bne.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006bc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006bc8:	2180      	movs	r1, #128	@ 0x80
 8006bca:	0549      	lsls	r1, r1, #21
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	659a      	str	r2, [r3, #88]	@ 0x58
 8006bd0:	4b49      	ldr	r3, [pc, #292]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006bd2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006bd4:	2380      	movs	r3, #128	@ 0x80
 8006bd6:	055b      	lsls	r3, r3, #21
 8006bd8:	4013      	ands	r3, r2
 8006bda:	60bb      	str	r3, [r7, #8]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bde:	2311      	movs	r3, #17
 8006be0:	18fb      	adds	r3, r7, r3
 8006be2:	2201      	movs	r2, #1
 8006be4:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006be6:	4b45      	ldr	r3, [pc, #276]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	4b44      	ldr	r3, [pc, #272]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006bec:	2180      	movs	r1, #128	@ 0x80
 8006bee:	0049      	lsls	r1, r1, #1
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bf4:	f7fc fcb6 	bl	8003564 <HAL_GetTick>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006bfc:	e00b      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bfe:	f7fc fcb1 	bl	8003564 <HAL_GetTick>
 8006c02:	0002      	movs	r2, r0
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d904      	bls.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
      {
        ret = HAL_TIMEOUT;
 8006c0c:	2313      	movs	r3, #19
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	2203      	movs	r2, #3
 8006c12:	701a      	strb	r2, [r3, #0]
        break;
 8006c14:	e005      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xee>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c16:	4b39      	ldr	r3, [pc, #228]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	2380      	movs	r3, #128	@ 0x80
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d0ed      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xca>
      }
    }

    if (ret == HAL_OK)
 8006c22:	2313      	movs	r3, #19
 8006c24:	18fb      	adds	r3, r7, r3
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d000      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006c2c:	e06e      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c2e:	4a32      	ldr	r2, [pc, #200]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006c30:	2390      	movs	r3, #144	@ 0x90
 8006c32:	58d2      	ldr	r2, [r2, r3]
 8006c34:	23c0      	movs	r3, #192	@ 0xc0
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4013      	ands	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d01f      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d01a      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006c4e:	2390      	movs	r3, #144	@ 0x90
 8006c50:	58d3      	ldr	r3, [r2, r3]
 8006c52:	4a2b      	ldr	r2, [pc, #172]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c58:	4a27      	ldr	r2, [pc, #156]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006c5a:	2390      	movs	r3, #144	@ 0x90
 8006c5c:	58d3      	ldr	r3, [r2, r3]
 8006c5e:	4926      	ldr	r1, [pc, #152]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006c60:	2280      	movs	r2, #128	@ 0x80
 8006c62:	0252      	lsls	r2, r2, #9
 8006c64:	4313      	orrs	r3, r2
 8006c66:	2290      	movs	r2, #144	@ 0x90
 8006c68:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c6a:	4a23      	ldr	r2, [pc, #140]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006c6c:	2390      	movs	r3, #144	@ 0x90
 8006c6e:	58d3      	ldr	r3, [r2, r3]
 8006c70:	4921      	ldr	r1, [pc, #132]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006c72:	4a24      	ldr	r2, [pc, #144]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	2290      	movs	r2, #144	@ 0x90
 8006c78:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c7a:	491f      	ldr	r1, [pc, #124]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006c7c:	2290      	movs	r2, #144	@ 0x90
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2201      	movs	r2, #1
 8006c86:	4013      	ands	r3, r2
 8006c88:	d017      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8a:	f7fc fc6b 	bl	8003564 <HAL_GetTick>
 8006c8e:	0003      	movs	r3, r0
 8006c90:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c92:	e00c      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c94:	f7fc fc66 	bl	8003564 <HAL_GetTick>
 8006c98:	0002      	movs	r2, r0
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d904      	bls.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            ret = HAL_TIMEOUT;
 8006ca4:	2313      	movs	r3, #19
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	2203      	movs	r2, #3
 8006caa:	701a      	strb	r2, [r3, #0]
            break;
 8006cac:	e005      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cae:	4a12      	ldr	r2, [pc, #72]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006cb0:	2390      	movs	r3, #144	@ 0x90
 8006cb2:	58d3      	ldr	r3, [r2, r3]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	d0ec      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if (ret == HAL_OK)
 8006cba:	2313      	movs	r3, #19
 8006cbc:	18fb      	adds	r3, r7, r3
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006cc6:	2390      	movs	r3, #144	@ 0x90
 8006cc8:	58d3      	ldr	r3, [r2, r3]
 8006cca:	4a0d      	ldr	r2, [pc, #52]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ccc:	401a      	ands	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd2:	4909      	ldr	r1, [pc, #36]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	2290      	movs	r2, #144	@ 0x90
 8006cd8:	508b      	str	r3, [r1, r2]
 8006cda:	e01d      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cdc:	2312      	movs	r3, #18
 8006cde:	18fb      	adds	r3, r7, r3
 8006ce0:	2213      	movs	r2, #19
 8006ce2:	18ba      	adds	r2, r7, r2
 8006ce4:	7812      	ldrb	r2, [r2, #0]
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	e016      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006cea:	46c0      	nop			@ (mov r8, r8)
 8006cec:	0003edfb 	.word	0x0003edfb
 8006cf0:	fffc1204 	.word	0xfffc1204
 8006cf4:	0800d49c 	.word	0x0800d49c
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	40007000 	.word	0x40007000
 8006d00:	fffffcff 	.word	0xfffffcff
 8006d04:	fffeffff 	.word	0xfffeffff
 8006d08:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0c:	2312      	movs	r3, #18
 8006d0e:	18fb      	adds	r3, r7, r3
 8006d10:	2213      	movs	r2, #19
 8006d12:	18ba      	adds	r2, r7, r2
 8006d14:	7812      	ldrb	r2, [r2, #0]
 8006d16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d18:	2311      	movs	r3, #17
 8006d1a:	18fb      	adds	r3, r7, r3
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d105      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d22:	4bc5      	ldr	r3, [pc, #788]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006d26:	4bc4      	ldr	r3, [pc, #784]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d28:	49c4      	ldr	r1, [pc, #784]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8006d2a:	400a      	ands	r2, r1
 8006d2c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2201      	movs	r2, #1
 8006d34:	4013      	ands	r3, r2
 8006d36:	d020      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d010      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d00c      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d008      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d004      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8006d58:	4bb9      	ldr	r3, [pc, #740]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d5a:	21d7      	movs	r1, #215	@ 0xd7
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f7fc f975 	bl	800304c <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d62:	4ab5      	ldr	r2, [pc, #724]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d64:	2388      	movs	r3, #136	@ 0x88
 8006d66:	58d3      	ldr	r3, [r2, r3]
 8006d68:	2203      	movs	r2, #3
 8006d6a:	4393      	bics	r3, r2
 8006d6c:	001a      	movs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	49b1      	ldr	r1, [pc, #708]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	2288      	movs	r2, #136	@ 0x88
 8006d78:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	4013      	ands	r3, r2
 8006d82:	d020      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d010      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d00c      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d008      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	2b0c      	cmp	r3, #12
 8006da2:	d004      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8006da4:	4ba6      	ldr	r3, [pc, #664]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006da6:	21e1      	movs	r1, #225	@ 0xe1
 8006da8:	0018      	movs	r0, r3
 8006daa:	f7fc f94f 	bl	800304c <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dae:	4aa2      	ldr	r2, [pc, #648]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006db0:	2388      	movs	r3, #136	@ 0x88
 8006db2:	58d3      	ldr	r3, [r2, r3]
 8006db4:	220c      	movs	r2, #12
 8006db6:	4393      	bics	r3, r2
 8006db8:	001a      	movs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	499e      	ldr	r1, [pc, #632]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	2288      	movs	r2, #136	@ 0x88
 8006dc4:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	4013      	ands	r3, r2
 8006dce:	d025      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d016      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691a      	ldr	r2, [r3, #16]
 8006ddc:	2380      	movs	r3, #128	@ 0x80
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d010      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	2380      	movs	r3, #128	@ 0x80
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d00a      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	23c0      	movs	r3, #192	@ 0xc0
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d004      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006dfc:	4b90      	ldr	r3, [pc, #576]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006dfe:	21eb      	movs	r1, #235	@ 0xeb
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7fc f923 	bl	800304c <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e06:	4a8c      	ldr	r2, [pc, #560]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e08:	2388      	movs	r3, #136	@ 0x88
 8006e0a:	58d3      	ldr	r3, [r2, r3]
 8006e0c:	4a8d      	ldr	r2, [pc, #564]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006e0e:	401a      	ands	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	4988      	ldr	r1, [pc, #544]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	2288      	movs	r2, #136	@ 0x88
 8006e1a:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2208      	movs	r2, #8
 8006e22:	4013      	ands	r3, r2
 8006e24:	d025      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d016      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68da      	ldr	r2, [r3, #12]
 8006e32:	2380      	movs	r3, #128	@ 0x80
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d010      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	2380      	movs	r3, #128	@ 0x80
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d00a      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	23c0      	movs	r3, #192	@ 0xc0
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d004      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8006e52:	4b7b      	ldr	r3, [pc, #492]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e54:	21f5      	movs	r1, #245	@ 0xf5
 8006e56:	0018      	movs	r0, r3
 8006e58:	f7fc f8f8 	bl	800304c <assert_failed>

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006e5c:	4a76      	ldr	r2, [pc, #472]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e5e:	2388      	movs	r3, #136	@ 0x88
 8006e60:	58d3      	ldr	r3, [r2, r3]
 8006e62:	4a79      	ldr	r2, [pc, #484]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e64:	401a      	ands	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	4973      	ldr	r1, [pc, #460]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	2288      	movs	r2, #136	@ 0x88
 8006e70:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2220      	movs	r2, #32
 8006e78:	4013      	ands	r3, r2
 8006e7a:	d022      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d013      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	695a      	ldr	r2, [r3, #20]
 8006e88:	2380      	movs	r3, #128	@ 0x80
 8006e8a:	015b      	lsls	r3, r3, #5
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d00d      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	695a      	ldr	r2, [r3, #20]
 8006e94:	2380      	movs	r3, #128	@ 0x80
 8006e96:	019b      	lsls	r3, r3, #6
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d007      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006e9c:	230a      	movs	r3, #10
 8006e9e:	33ff      	adds	r3, #255	@ 0xff
 8006ea0:	001a      	movs	r2, r3
 8006ea2:	4b67      	ldr	r3, [pc, #412]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ea4:	0011      	movs	r1, r2
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7fc f8d0 	bl	800304c <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006eac:	4a62      	ldr	r2, [pc, #392]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006eae:	2388      	movs	r3, #136	@ 0x88
 8006eb0:	58d3      	ldr	r3, [r2, r3]
 8006eb2:	4a66      	ldr	r2, [pc, #408]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8006eb4:	401a      	ands	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	495f      	ldr	r1, [pc, #380]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	2288      	movs	r2, #136	@ 0x88
 8006ec0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2240      	movs	r2, #64	@ 0x40
 8006ec8:	4013      	ands	r3, r2
 8006eca:	d022      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d013      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	2380      	movs	r3, #128	@ 0x80
 8006eda:	025b      	lsls	r3, r3, #9
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d00d      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699a      	ldr	r2, [r3, #24]
 8006ee4:	2380      	movs	r3, #128	@ 0x80
 8006ee6:	029b      	lsls	r3, r3, #10
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d007      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8006eec:	2314      	movs	r3, #20
 8006eee:	33ff      	adds	r3, #255	@ 0xff
 8006ef0:	001a      	movs	r2, r3
 8006ef2:	4b53      	ldr	r3, [pc, #332]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ef4:	0011      	movs	r1, r2
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	f7fc f8a8 	bl	800304c <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006efc:	4a4e      	ldr	r2, [pc, #312]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006efe:	2388      	movs	r3, #136	@ 0x88
 8006f00:	58d3      	ldr	r3, [r2, r3]
 8006f02:	4a53      	ldr	r2, [pc, #332]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006f04:	401a      	ands	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	494b      	ldr	r1, [pc, #300]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	2288      	movs	r2, #136	@ 0x88
 8006f10:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2280      	movs	r2, #128	@ 0x80
 8006f18:	4013      	ands	r3, r2
 8006f1a:	d027      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d018      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	2380      	movs	r3, #128	@ 0x80
 8006f2a:	031b      	lsls	r3, r3, #12
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d012      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69da      	ldr	r2, [r3, #28]
 8006f34:	2380      	movs	r3, #128	@ 0x80
 8006f36:	02db      	lsls	r3, r3, #11
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d00c      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	23c0      	movs	r3, #192	@ 0xc0
 8006f42:	031b      	lsls	r3, r3, #12
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d006      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8006f48:	238e      	movs	r3, #142	@ 0x8e
 8006f4a:	005a      	lsls	r2, r3, #1
 8006f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f4e:	0011      	movs	r1, r2
 8006f50:	0018      	movs	r0, r3
 8006f52:	f7fc f87b 	bl	800304c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f56:	4a38      	ldr	r2, [pc, #224]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f58:	2388      	movs	r3, #136	@ 0x88
 8006f5a:	58d3      	ldr	r3, [r2, r3]
 8006f5c:	4a3d      	ldr	r2, [pc, #244]	@ (8007054 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8006f5e:	401a      	ands	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	4934      	ldr	r1, [pc, #208]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	2288      	movs	r2, #136	@ 0x88
 8006f6a:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	2380      	movs	r3, #128	@ 0x80
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	4013      	ands	r3, r2
 8006f76:	d028      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x496>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d019      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1a      	ldr	r2, [r3, #32]
 8006f84:	2380      	movs	r3, #128	@ 0x80
 8006f86:	039b      	lsls	r3, r3, #14
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d013      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1a      	ldr	r2, [r3, #32]
 8006f90:	2380      	movs	r3, #128	@ 0x80
 8006f92:	035b      	lsls	r3, r3, #13
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d00d      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a1a      	ldr	r2, [r3, #32]
 8006f9c:	23c0      	movs	r3, #192	@ 0xc0
 8006f9e:	039b      	lsls	r3, r3, #14
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d007      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006fa4:	2324      	movs	r3, #36	@ 0x24
 8006fa6:	33ff      	adds	r3, #255	@ 0xff
 8006fa8:	001a      	movs	r2, r3
 8006faa:	4b25      	ldr	r3, [pc, #148]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006fac:	0011      	movs	r1, r2
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7fc f84c 	bl	800304c <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fb4:	4a20      	ldr	r2, [pc, #128]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006fb6:	2388      	movs	r3, #136	@ 0x88
 8006fb8:	58d3      	ldr	r3, [r2, r3]
 8006fba:	4a27      	ldr	r2, [pc, #156]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8006fbc:	401a      	ands	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	491d      	ldr	r1, [pc, #116]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	2288      	movs	r2, #136	@ 0x88
 8006fc8:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	2380      	movs	r3, #128	@ 0x80
 8006fd0:	01db      	lsls	r3, r3, #7
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d044      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d012      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe2:	2380      	movs	r3, #128	@ 0x80
 8006fe4:	055b      	lsls	r3, r3, #21
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d00c      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fee:	2380      	movs	r3, #128	@ 0x80
 8006ff0:	059b      	lsls	r3, r3, #22
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d006      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006ff6:	2399      	movs	r3, #153	@ 0x99
 8006ff8:	005a      	lsls	r2, r3, #1
 8006ffa:	4b11      	ldr	r3, [pc, #68]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ffc:	0011      	movs	r1, r2
 8006ffe:	0018      	movs	r0, r3
 8007000:	f7fc f824 	bl	800304c <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007008:	2380      	movs	r3, #128	@ 0x80
 800700a:	055b      	lsls	r3, r3, #21
 800700c:	429a      	cmp	r2, r3
 800700e:	d106      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8007010:	4b09      	ldr	r3, [pc, #36]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	4b08      	ldr	r3, [pc, #32]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007016:	2180      	movs	r1, #128	@ 0x80
 8007018:	0249      	lsls	r1, r1, #9
 800701a:	430a      	orrs	r2, r1
 800701c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800701e:	4a06      	ldr	r2, [pc, #24]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007020:	2388      	movs	r3, #136	@ 0x88
 8007022:	58d3      	ldr	r3, [r2, r3]
 8007024:	4a0d      	ldr	r2, [pc, #52]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8007026:	401a      	ands	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702c:	4902      	ldr	r1, [pc, #8]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800702e:	4313      	orrs	r3, r2
 8007030:	2288      	movs	r2, #136	@ 0x88
 8007032:	508b      	str	r3, [r1, r2]
 8007034:	e014      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007036:	46c0      	nop			@ (mov r8, r8)
 8007038:	40021000 	.word	0x40021000
 800703c:	efffffff 	.word	0xefffffff
 8007040:	0800d49c 	.word	0x0800d49c
 8007044:	fffff3ff 	.word	0xfffff3ff
 8007048:	fffffcff 	.word	0xfffffcff
 800704c:	ffffcfff 	.word	0xffffcfff
 8007050:	fffcffff 	.word	0xfffcffff
 8007054:	fff3ffff 	.word	0xfff3ffff
 8007058:	ffcfffff 	.word	0xffcfffff
 800705c:	cfffffff 	.word	0xcfffffff
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	2380      	movs	r3, #128	@ 0x80
 8007066:	019b      	lsls	r3, r3, #6
 8007068:	4013      	ands	r3, r2
 800706a:	d035      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d019      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007078:	2380      	movs	r3, #128	@ 0x80
 800707a:	04db      	lsls	r3, r3, #19
 800707c:	429a      	cmp	r2, r3
 800707e:	d013      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007084:	2380      	movs	r3, #128	@ 0x80
 8007086:	051b      	lsls	r3, r3, #20
 8007088:	429a      	cmp	r2, r3
 800708a:	d00d      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007090:	23c0      	movs	r3, #192	@ 0xc0
 8007092:	051b      	lsls	r3, r3, #20
 8007094:	429a      	cmp	r2, r3
 8007096:	d007      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8007098:	234e      	movs	r3, #78	@ 0x4e
 800709a:	33ff      	adds	r3, #255	@ 0xff
 800709c:	001a      	movs	r2, r3
 800709e:	4b41      	ldr	r3, [pc, #260]	@ (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x670>)
 80070a0:	0011      	movs	r1, r2
 80070a2:	0018      	movs	r0, r3
 80070a4:	f7fb ffd2 	bl	800304c <assert_failed>
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ac:	2380      	movs	r3, #128	@ 0x80
 80070ae:	051b      	lsls	r3, r3, #20
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d106      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80070b4:	4b3c      	ldr	r3, [pc, #240]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	4b3b      	ldr	r3, [pc, #236]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80070ba:	2180      	movs	r1, #128	@ 0x80
 80070bc:	0449      	lsls	r1, r1, #17
 80070be:	430a      	orrs	r2, r1
 80070c0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070c2:	4a39      	ldr	r2, [pc, #228]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80070c4:	2388      	movs	r3, #136	@ 0x88
 80070c6:	58d3      	ldr	r3, [r2, r3]
 80070c8:	4a38      	ldr	r2, [pc, #224]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80070ca:	401a      	ands	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d0:	4935      	ldr	r1, [pc, #212]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	2288      	movs	r2, #136	@ 0x88
 80070d6:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	2380      	movs	r3, #128	@ 0x80
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	4013      	ands	r3, r2
 80070e2:	d029      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00d      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070f0:	2380      	movs	r3, #128	@ 0x80
 80070f2:	045b      	lsls	r3, r3, #17
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d007      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80070f8:	235c      	movs	r3, #92	@ 0x5c
 80070fa:	33ff      	adds	r3, #255	@ 0xff
 80070fc:	001a      	movs	r2, r3
 80070fe:	4b29      	ldr	r3, [pc, #164]	@ (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x670>)
 8007100:	0011      	movs	r1, r2
 8007102:	0018      	movs	r0, r3
 8007104:	f7fb ffa2 	bl	800304c <assert_failed>
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800710c:	2380      	movs	r3, #128	@ 0x80
 800710e:	045b      	lsls	r3, r3, #17
 8007110:	429a      	cmp	r2, r3
 8007112:	d106      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007114:	4b24      	ldr	r3, [pc, #144]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	4b23      	ldr	r3, [pc, #140]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800711a:	2180      	movs	r1, #128	@ 0x80
 800711c:	0449      	lsls	r1, r1, #17
 800711e:	430a      	orrs	r2, r1
 8007120:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007122:	4a21      	ldr	r2, [pc, #132]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007124:	2388      	movs	r3, #136	@ 0x88
 8007126:	58d3      	ldr	r3, [r2, r3]
 8007128:	4a21      	ldr	r2, [pc, #132]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800712a:	401a      	ands	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007130:	491d      	ldr	r1, [pc, #116]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007132:	4313      	orrs	r3, r2
 8007134:	2288      	movs	r2, #136	@ 0x88
 8007136:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	2380      	movs	r3, #128	@ 0x80
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	4013      	ands	r3, r2
 8007142:	d028      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x662>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00c      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x632>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007150:	2380      	movs	r3, #128	@ 0x80
 8007152:	049b      	lsls	r3, r3, #18
 8007154:	429a      	cmp	r2, r3
 8007156:	d006      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8007158:	23b4      	movs	r3, #180	@ 0xb4
 800715a:	005a      	lsls	r2, r3, #1
 800715c:	4b11      	ldr	r3, [pc, #68]	@ (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x670>)
 800715e:	0011      	movs	r1, r2
 8007160:	0018      	movs	r0, r3
 8007162:	f7fb ff73 	bl	800304c <assert_failed>
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800716a:	2380      	movs	r3, #128	@ 0x80
 800716c:	049b      	lsls	r3, r3, #18
 800716e:	429a      	cmp	r2, r3
 8007170:	d106      	bne.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007172:	4b0d      	ldr	r3, [pc, #52]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	4b0c      	ldr	r3, [pc, #48]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007178:	2180      	movs	r1, #128	@ 0x80
 800717a:	0449      	lsls	r1, r1, #17
 800717c:	430a      	orrs	r2, r1
 800717e:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007180:	4a09      	ldr	r2, [pc, #36]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007182:	2388      	movs	r3, #136	@ 0x88
 8007184:	58d3      	ldr	r3, [r2, r3]
 8007186:	4a0a      	ldr	r2, [pc, #40]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8007188:	401a      	ands	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718e:	4906      	ldr	r1, [pc, #24]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007190:	4313      	orrs	r3, r2
 8007192:	2288      	movs	r2, #136	@ 0x88
 8007194:	508b      	str	r3, [r1, r2]

  }

  return status;
 8007196:	2312      	movs	r3, #18
 8007198:	18fb      	adds	r3, r7, r3
 800719a:	781b      	ldrb	r3, [r3, #0]
}
 800719c:	0018      	movs	r0, r3
 800719e:	46bd      	mov	sp, r7
 80071a0:	b006      	add	sp, #24
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	0800d49c 	.word	0x0800d49c
 80071a8:	40021000 	.word	0x40021000
 80071ac:	f3ffffff 	.word	0xf3ffffff
 80071b0:	feffffff 	.word	0xfeffffff

080071b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071b4:	b590      	push	{r4, r7, lr}
 80071b6:	b089      	sub	sp, #36	@ 0x24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk;    /* no init needed */
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4acd      	ldr	r2, [pc, #820]	@ (80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	d003      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4acc      	ldr	r2, [pc, #816]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	d007      	beq.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 80071d0:	23e6      	movs	r3, #230	@ 0xe6
 80071d2:	33ff      	adds	r3, #255	@ 0xff
 80071d4:	001a      	movs	r2, r3
 80071d6:	4bca      	ldr	r3, [pc, #808]	@ (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80071d8:	0011      	movs	r1, r2
 80071da:	0018      	movs	r0, r3
 80071dc:	f7fb ff36 	bl	800304c <assert_failed>

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	2380      	movs	r3, #128	@ 0x80
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d154      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80071ea:	4ac6      	ldr	r2, [pc, #792]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80071ec:	2390      	movs	r3, #144	@ 0x90
 80071ee:	58d2      	ldr	r2, [r2, r3]
 80071f0:	23c0      	movs	r3, #192	@ 0xc0
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4013      	ands	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	23c0      	movs	r3, #192	@ 0xc0
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	429a      	cmp	r2, r3
 8007200:	d039      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	23c0      	movs	r3, #192	@ 0xc0
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	429a      	cmp	r2, r3
 800720a:	d901      	bls.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 800720c:	f000 fbf9 	bl	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	2380      	movs	r3, #128	@ 0x80
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	429a      	cmp	r2, r3
 8007218:	d006      	beq.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	2380      	movs	r3, #128	@ 0x80
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	429a      	cmp	r2, r3
 8007222:	d00f      	beq.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8007224:	f000 fbed 	bl	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007228:	4ab6      	ldr	r2, [pc, #728]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800722a:	2390      	movs	r3, #144	@ 0x90
 800722c:	58d3      	ldr	r3, [r2, r3]
 800722e:	2202      	movs	r2, #2
 8007230:	4013      	ands	r3, r2
 8007232:	2b02      	cmp	r3, #2
 8007234:	d001      	beq.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 8007236:	f000 fbe6 	bl	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
          frequency = LSE_VALUE;
 800723a:	2380      	movs	r3, #128	@ 0x80
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	61fb      	str	r3, [r7, #28]
        break;
 8007240:	f000 fbe1 	bl	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007244:	4aaf      	ldr	r2, [pc, #700]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8007246:	2394      	movs	r3, #148	@ 0x94
 8007248:	58d3      	ldr	r3, [r2, r3]
 800724a:	2202      	movs	r2, #2
 800724c:	4013      	ands	r3, r2
 800724e:	2b02      	cmp	r3, #2
 8007250:	d001      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8007252:	f000 fbda 	bl	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007256:	4aab      	ldr	r2, [pc, #684]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8007258:	2394      	movs	r3, #148	@ 0x94
 800725a:	58d3      	ldr	r3, [r2, r3]
 800725c:	2204      	movs	r2, #4
 800725e:	4013      	ands	r3, r2
 8007260:	2b04      	cmp	r3, #4
 8007262:	d103      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            frequency = LSI_VALUE / 128U;
 8007264:	23fa      	movs	r3, #250	@ 0xfa
 8007266:	61fb      	str	r3, [r7, #28]
        break;
 8007268:	f000 fbcf 	bl	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
            frequency = LSI_VALUE;
 800726c:	23fa      	movs	r3, #250	@ 0xfa
 800726e:	01db      	lsls	r3, r3, #7
 8007270:	61fb      	str	r3, [r7, #28]
        break;
 8007272:	f000 fbca 	bl	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007276:	4ba3      	ldr	r3, [pc, #652]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	2380      	movs	r3, #128	@ 0x80
 800727c:	029b      	lsls	r3, r3, #10
 800727e:	401a      	ands	r2, r3
 8007280:	2380      	movs	r3, #128	@ 0x80
 8007282:	029b      	lsls	r3, r3, #10
 8007284:	429a      	cmp	r2, r3
 8007286:	d001      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007288:	f000 fbc1 	bl	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          frequency = HSE_VALUE / 32U;
 800728c:	4b9e      	ldr	r3, [pc, #632]	@ (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800728e:	61fb      	str	r3, [r7, #28]
        break;
 8007290:	f000 fbbd 	bl	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	2380      	movs	r3, #128	@ 0x80
 8007298:	029b      	lsls	r3, r3, #10
 800729a:	429a      	cmp	r2, r3
 800729c:	d100      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800729e:	e0f7      	b.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	2380      	movs	r3, #128	@ 0x80
 80072a4:	029b      	lsls	r3, r3, #10
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d901      	bls.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80072aa:	f000 fbb2 	bl	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	2380      	movs	r3, #128	@ 0x80
 80072b2:	025b      	lsls	r3, r3, #9
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d100      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 80072b8:	e0ea      	b.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	2380      	movs	r3, #128	@ 0x80
 80072be:	025b      	lsls	r3, r3, #9
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d901      	bls.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80072c4:	f000 fba5 	bl	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	2380      	movs	r3, #128	@ 0x80
 80072cc:	01db      	lsls	r3, r3, #7
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d100      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80072d2:	e187      	b.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	2380      	movs	r3, #128	@ 0x80
 80072d8:	01db      	lsls	r3, r3, #7
 80072da:	429a      	cmp	r2, r3
 80072dc:	d901      	bls.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 80072de:	f000 fb98 	bl	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	2380      	movs	r3, #128	@ 0x80
 80072e6:	019b      	lsls	r3, r3, #6
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d101      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80072ec:	f000 fb2f 	bl	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	2380      	movs	r3, #128	@ 0x80
 80072f4:	019b      	lsls	r3, r3, #6
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d901      	bls.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80072fa:	f000 fb8a 	bl	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	2380      	movs	r3, #128	@ 0x80
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	429a      	cmp	r2, r3
 8007306:	d100      	bne.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8007308:	e2f6      	b.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	2380      	movs	r3, #128	@ 0x80
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	429a      	cmp	r2, r3
 8007312:	d901      	bls.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8007314:	f000 fb7d 	bl	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	2380      	movs	r3, #128	@ 0x80
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	429a      	cmp	r2, r3
 8007320:	d100      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8007322:	e2be      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	2380      	movs	r3, #128	@ 0x80
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	429a      	cmp	r2, r3
 800732c:	d901      	bls.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800732e:	f000 fb70 	bl	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	2380      	movs	r3, #128	@ 0x80
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	429a      	cmp	r2, r3
 800733a:	d100      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 800733c:	e254      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	2380      	movs	r3, #128	@ 0x80
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	429a      	cmp	r2, r3
 8007346:	d901      	bls.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8007348:	f000 fb63 	bl	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b80      	cmp	r3, #128	@ 0x80
 8007350:	d100      	bne.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8007352:	e1e8      	b.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b80      	cmp	r3, #128	@ 0x80
 8007358:	d901      	bls.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800735a:	f000 fb5a 	bl	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b20      	cmp	r3, #32
 8007362:	d80f      	bhi.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800736a:	f000 fb52 	bl	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b20      	cmp	r3, #32
 8007372:	d901      	bls.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007374:	f000 fb4d 	bl	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	009a      	lsls	r2, r3, #2
 800737c:	4b63      	ldr	r3, [pc, #396]	@ (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800737e:	18d3      	adds	r3, r2, r3
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	469f      	mov	pc, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b40      	cmp	r3, #64	@ 0x40
 8007388:	d100      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800738a:	e198      	b.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            break;
        }
        break;
      }
      default:
        break;
 800738c:	f000 fb41 	bl	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007390:	4a5c      	ldr	r2, [pc, #368]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8007392:	2388      	movs	r3, #136	@ 0x88
 8007394:	58d3      	ldr	r3, [r2, r3]
 8007396:	2203      	movs	r2, #3
 8007398:	4013      	ands	r3, r2
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d025      	beq.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d82d      	bhi.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d013      	beq.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d827      	bhi.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d005      	beq.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x218>
            break;
 80073c0:	e020      	b.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
            frequency = HAL_RCC_GetPCLK1Freq();
 80073c2:	f7ff fb33 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 80073c6:	0003      	movs	r3, r0
 80073c8:	61fb      	str	r3, [r7, #28]
            break;
 80073ca:	e020      	b.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
            frequency = HAL_RCC_GetSysClockFreq();
 80073cc:	f7ff fa88 	bl	80068e0 <HAL_RCC_GetSysClockFreq>
 80073d0:	0003      	movs	r3, r0
 80073d2:	61fb      	str	r3, [r7, #28]
            break;
 80073d4:	e01b      	b.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	2380      	movs	r3, #128	@ 0x80
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	401a      	ands	r2, r3
 80073e0:	2380      	movs	r3, #128	@ 0x80
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d10f      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
              frequency = HSI_VALUE;
 80073e8:	4b49      	ldr	r3, [pc, #292]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80073ea:	61fb      	str	r3, [r7, #28]
            break;
 80073ec:	e00c      	b.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80073ee:	4a45      	ldr	r2, [pc, #276]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80073f0:	2390      	movs	r3, #144	@ 0x90
 80073f2:	58d3      	ldr	r3, [r2, r3]
 80073f4:	2202      	movs	r2, #2
 80073f6:	4013      	ands	r3, r2
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d107      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
              frequency = LSE_VALUE;
 80073fc:	2380      	movs	r3, #128	@ 0x80
 80073fe:	021b      	lsls	r3, r3, #8
 8007400:	61fb      	str	r3, [r7, #28]
            break;
 8007402:	e003      	b.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
            break;
 8007404:	46c0      	nop			@ (mov r8, r8)
 8007406:	e305      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8007408:	46c0      	nop			@ (mov r8, r8)
 800740a:	e303      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 800740c:	46c0      	nop			@ (mov r8, r8)
        break;
 800740e:	e301      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007410:	4a3c      	ldr	r2, [pc, #240]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8007412:	2388      	movs	r3, #136	@ 0x88
 8007414:	58d3      	ldr	r3, [r2, r3]
 8007416:	220c      	movs	r2, #12
 8007418:	4013      	ands	r3, r2
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2b0c      	cmp	r3, #12
 8007420:	d025      	beq.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b0c      	cmp	r3, #12
 8007426:	d82d      	bhi.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b08      	cmp	r3, #8
 800742c:	d013      	beq.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b08      	cmp	r3, #8
 8007432:	d827      	bhi.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b04      	cmp	r3, #4
 800743e:	d005      	beq.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x298>
            break;
 8007440:	e020      	b.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007442:	f7ff faf3 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8007446:	0003      	movs	r3, r0
 8007448:	61fb      	str	r3, [r7, #28]
            break;
 800744a:	e020      	b.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
            frequency = HAL_RCC_GetSysClockFreq();
 800744c:	f7ff fa48 	bl	80068e0 <HAL_RCC_GetSysClockFreq>
 8007450:	0003      	movs	r3, r0
 8007452:	61fb      	str	r3, [r7, #28]
            break;
 8007454:	e01b      	b.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007456:	4b2b      	ldr	r3, [pc, #172]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	2380      	movs	r3, #128	@ 0x80
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	401a      	ands	r2, r3
 8007460:	2380      	movs	r3, #128	@ 0x80
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	429a      	cmp	r2, r3
 8007466:	d10f      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
              frequency = HSI_VALUE;
 8007468:	4b29      	ldr	r3, [pc, #164]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 800746a:	61fb      	str	r3, [r7, #28]
            break;
 800746c:	e00c      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800746e:	4a25      	ldr	r2, [pc, #148]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8007470:	2390      	movs	r3, #144	@ 0x90
 8007472:	58d3      	ldr	r3, [r2, r3]
 8007474:	2202      	movs	r2, #2
 8007476:	4013      	ands	r3, r2
 8007478:	2b02      	cmp	r3, #2
 800747a:	d107      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
              frequency = LSE_VALUE;
 800747c:	2380      	movs	r3, #128	@ 0x80
 800747e:	021b      	lsls	r3, r3, #8
 8007480:	61fb      	str	r3, [r7, #28]
            break;
 8007482:	e003      	b.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
            break;
 8007484:	46c0      	nop			@ (mov r8, r8)
 8007486:	e2c5      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8007488:	46c0      	nop			@ (mov r8, r8)
 800748a:	e2c3      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 800748c:	46c0      	nop			@ (mov r8, r8)
        break;
 800748e:	e2c1      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007490:	f7ff facc 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8007494:	0003      	movs	r3, r0
 8007496:	61fb      	str	r3, [r7, #28]
        break;
 8007498:	e2bc      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800749a:	4a1a      	ldr	r2, [pc, #104]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800749c:	2388      	movs	r3, #136	@ 0x88
 800749e:	58d2      	ldr	r2, [r2, r3]
 80074a0:	23c0      	movs	r3, #192	@ 0xc0
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	4013      	ands	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	23c0      	movs	r3, #192	@ 0xc0
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d03c      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	23c0      	movs	r3, #192	@ 0xc0
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d842      	bhi.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	2380      	movs	r3, #128	@ 0x80
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d026      	beq.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	2380      	movs	r3, #128	@ 0x80
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d838      	bhi.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	2380      	movs	r3, #128	@ 0x80
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	429a      	cmp	r2, r3
 80074de:	d005      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x338>
            break;
 80074e0:	e02f      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
            frequency = HAL_RCC_GetPCLK1Freq();
 80074e2:	f7ff faa3 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 80074e6:	0003      	movs	r3, r0
 80074e8:	61fb      	str	r3, [r7, #28]
            break;
 80074ea:	e02f      	b.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
            frequency = HAL_RCC_GetSysClockFreq();
 80074ec:	f7ff f9f8 	bl	80068e0 <HAL_RCC_GetSysClockFreq>
 80074f0:	0003      	movs	r3, r0
 80074f2:	61fb      	str	r3, [r7, #28]
            break;
 80074f4:	e02a      	b.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80074f6:	46c0      	nop			@ (mov r8, r8)
 80074f8:	0003edfb 	.word	0x0003edfb
 80074fc:	fffc1204 	.word	0xfffc1204
 8007500:	0800d49c 	.word	0x0800d49c
 8007504:	40021000 	.word	0x40021000
 8007508:	0003d090 	.word	0x0003d090
 800750c:	0800d7d8 	.word	0x0800d7d8
 8007510:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007514:	4bb2      	ldr	r3, [pc, #712]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	2380      	movs	r3, #128	@ 0x80
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	401a      	ands	r2, r3
 800751e:	2380      	movs	r3, #128	@ 0x80
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	429a      	cmp	r2, r3
 8007524:	d10f      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
              frequency = HSI_VALUE;
 8007526:	4baf      	ldr	r3, [pc, #700]	@ (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 8007528:	61fb      	str	r3, [r7, #28]
            break;
 800752a:	e00c      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800752c:	4aac      	ldr	r2, [pc, #688]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 800752e:	2390      	movs	r3, #144	@ 0x90
 8007530:	58d3      	ldr	r3, [r2, r3]
 8007532:	2202      	movs	r2, #2
 8007534:	4013      	ands	r3, r2
 8007536:	2b02      	cmp	r3, #2
 8007538:	d107      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
              frequency = LSE_VALUE;
 800753a:	2380      	movs	r3, #128	@ 0x80
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	61fb      	str	r3, [r7, #28]
            break;
 8007540:	e003      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
            break;
 8007542:	46c0      	nop			@ (mov r8, r8)
 8007544:	e266      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8007546:	46c0      	nop			@ (mov r8, r8)
 8007548:	e264      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 800754a:	46c0      	nop			@ (mov r8, r8)
        break;
 800754c:	e262      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 800754e:	4aa4      	ldr	r2, [pc, #656]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8007550:	2388      	movs	r3, #136	@ 0x88
 8007552:	58d2      	ldr	r2, [r2, r3]
 8007554:	23c0      	movs	r3, #192	@ 0xc0
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4013      	ands	r3, r2
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	23c0      	movs	r3, #192	@ 0xc0
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	429a      	cmp	r2, r3
 8007564:	d02d      	beq.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	23c0      	movs	r3, #192	@ 0xc0
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	429a      	cmp	r2, r3
 800756e:	d833      	bhi.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	2380      	movs	r3, #128	@ 0x80
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	429a      	cmp	r2, r3
 8007578:	d017      	beq.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	2380      	movs	r3, #128	@ 0x80
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	429a      	cmp	r2, r3
 8007582:	d829      	bhi.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	2380      	movs	r3, #128	@ 0x80
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	429a      	cmp	r2, r3
 8007592:	d005      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
            break;
 8007594:	e020      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007596:	f7ff fa49 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 800759a:	0003      	movs	r3, r0
 800759c:	61fb      	str	r3, [r7, #28]
            break;
 800759e:	e020      	b.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
            frequency = HAL_RCC_GetSysClockFreq();
 80075a0:	f7ff f99e 	bl	80068e0 <HAL_RCC_GetSysClockFreq>
 80075a4:	0003      	movs	r3, r0
 80075a6:	61fb      	str	r3, [r7, #28]
            break;
 80075a8:	e01b      	b.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075aa:	4b8d      	ldr	r3, [pc, #564]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	2380      	movs	r3, #128	@ 0x80
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	401a      	ands	r2, r3
 80075b4:	2380      	movs	r3, #128	@ 0x80
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d10f      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x428>
              frequency = HSI_VALUE;
 80075bc:	4b89      	ldr	r3, [pc, #548]	@ (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 80075be:	61fb      	str	r3, [r7, #28]
            break;
 80075c0:	e00c      	b.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x428>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075c2:	4a87      	ldr	r2, [pc, #540]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80075c4:	2390      	movs	r3, #144	@ 0x90
 80075c6:	58d3      	ldr	r3, [r2, r3]
 80075c8:	2202      	movs	r2, #2
 80075ca:	4013      	ands	r3, r2
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d107      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
              frequency = LSE_VALUE;
 80075d0:	2380      	movs	r3, #128	@ 0x80
 80075d2:	021b      	lsls	r3, r3, #8
 80075d4:	61fb      	str	r3, [r7, #28]
            break;
 80075d6:	e003      	b.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            break;
 80075d8:	46c0      	nop			@ (mov r8, r8)
 80075da:	e21b      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80075dc:	46c0      	nop			@ (mov r8, r8)
 80075de:	e219      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80075e0:	46c0      	nop			@ (mov r8, r8)
        break;
 80075e2:	e217      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80075e4:	4a7e      	ldr	r2, [pc, #504]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80075e6:	2388      	movs	r3, #136	@ 0x88
 80075e8:	58d2      	ldr	r2, [r2, r3]
 80075ea:	23c0      	movs	r3, #192	@ 0xc0
 80075ec:	059b      	lsls	r3, r3, #22
 80075ee:	4013      	ands	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	2380      	movs	r3, #128	@ 0x80
 80075f6:	059b      	lsls	r3, r3, #22
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d012      	beq.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	2380      	movs	r3, #128	@ 0x80
 8007600:	059b      	lsls	r3, r3, #22
 8007602:	429a      	cmp	r2, r3
 8007604:	d825      	bhi.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	2380      	movs	r3, #128	@ 0x80
 8007610:	055b      	lsls	r3, r3, #21
 8007612:	429a      	cmp	r2, r3
 8007614:	d014      	beq.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
            break;
 8007616:	e01c      	b.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
            frequency = HAL_RCC_GetSysClockFreq();
 8007618:	f7ff f962 	bl	80068e0 <HAL_RCC_GetSysClockFreq>
 800761c:	0003      	movs	r3, r0
 800761e:	61fb      	str	r3, [r7, #28]
            break;
 8007620:	e018      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007622:	4b6f      	ldr	r3, [pc, #444]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	2380      	movs	r3, #128	@ 0x80
 8007628:	00db      	lsls	r3, r3, #3
 800762a:	401a      	ands	r2, r3
 800762c:	2380      	movs	r3, #128	@ 0x80
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	429a      	cmp	r2, r3
 8007632:	d102      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
              frequency = HSI_VALUE;
 8007634:	4b6b      	ldr	r3, [pc, #428]	@ (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 8007636:	61fb      	str	r3, [r7, #28]
            break;
 8007638:	e00c      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
              frequency = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
            break;
 800763e:	e009      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8007640:	2408      	movs	r4, #8
 8007642:	193b      	adds	r3, r7, r4
 8007644:	0018      	movs	r0, r3
 8007646:	f000 f9f3 	bl	8007a30 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 800764a:	193b      	adds	r3, r7, r4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	61fb      	str	r3, [r7, #28]
            break;
 8007650:	e000      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
            break;
 8007652:	46c0      	nop			@ (mov r8, r8)
        break;
 8007654:	e1de      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007656:	4a62      	ldr	r2, [pc, #392]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8007658:	2388      	movs	r3, #136	@ 0x88
 800765a:	58d2      	ldr	r2, [r2, r3]
 800765c:	23c0      	movs	r3, #192	@ 0xc0
 800765e:	019b      	lsls	r3, r3, #6
 8007660:	4013      	ands	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	2380      	movs	r3, #128	@ 0x80
 8007668:	019b      	lsls	r3, r3, #6
 800766a:	429a      	cmp	r2, r3
 800766c:	d017      	beq.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	2380      	movs	r3, #128	@ 0x80
 8007672:	019b      	lsls	r3, r3, #6
 8007674:	429a      	cmp	r2, r3
 8007676:	d81e      	bhi.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	2380      	movs	r3, #128	@ 0x80
 8007682:	015b      	lsls	r3, r3, #5
 8007684:	429a      	cmp	r2, r3
 8007686:	d005      	beq.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
            break;
 8007688:	e015      	b.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            frequency = HAL_RCC_GetPCLK1Freq();
 800768a:	f7ff f9cf 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 800768e:	0003      	movs	r3, r0
 8007690:	61fb      	str	r3, [r7, #28]
            break;
 8007692:	e013      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x508>
            frequency = HAL_RCC_GetSysClockFreq();
 8007694:	f7ff f924 	bl	80068e0 <HAL_RCC_GetSysClockFreq>
 8007698:	0003      	movs	r3, r0
 800769a:	61fb      	str	r3, [r7, #28]
            break;
 800769c:	e00e      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x508>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800769e:	4b50      	ldr	r3, [pc, #320]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	2380      	movs	r3, #128	@ 0x80
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	401a      	ands	r2, r3
 80076a8:	2380      	movs	r3, #128	@ 0x80
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d104      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
              frequency = HSI_VALUE;
 80076b0:	4b4c      	ldr	r3, [pc, #304]	@ (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 80076b2:	61fb      	str	r3, [r7, #28]
            break;
 80076b4:	e001      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
            break;
 80076b6:	46c0      	nop			@ (mov r8, r8)
 80076b8:	e1ac      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80076ba:	46c0      	nop			@ (mov r8, r8)
        break;
 80076bc:	e1aa      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80076be:	4a48      	ldr	r2, [pc, #288]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80076c0:	2388      	movs	r3, #136	@ 0x88
 80076c2:	58d2      	ldr	r2, [r2, r3]
 80076c4:	23c0      	movs	r3, #192	@ 0xc0
 80076c6:	029b      	lsls	r3, r3, #10
 80076c8:	4013      	ands	r3, r2
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	2380      	movs	r3, #128	@ 0x80
 80076d0:	029b      	lsls	r3, r3, #10
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d017      	beq.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	2380      	movs	r3, #128	@ 0x80
 80076da:	029b      	lsls	r3, r3, #10
 80076dc:	429a      	cmp	r2, r3
 80076de:	d81e      	bhi.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	2380      	movs	r3, #128	@ 0x80
 80076ea:	025b      	lsls	r3, r3, #9
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d005      	beq.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 80076f0:	e015      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
            frequency = HAL_RCC_GetPCLK1Freq();
 80076f2:	f7ff f99b 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 80076f6:	0003      	movs	r3, r0
 80076f8:	61fb      	str	r3, [r7, #28]
            break;
 80076fa:	e013      	b.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
            frequency = HAL_RCC_GetSysClockFreq();
 80076fc:	f7ff f8f0 	bl	80068e0 <HAL_RCC_GetSysClockFreq>
 8007700:	0003      	movs	r3, r0
 8007702:	61fb      	str	r3, [r7, #28]
            break;
 8007704:	e00e      	b.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007706:	4b36      	ldr	r3, [pc, #216]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	2380      	movs	r3, #128	@ 0x80
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	401a      	ands	r2, r3
 8007710:	2380      	movs	r3, #128	@ 0x80
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	429a      	cmp	r2, r3
 8007716:	d104      	bne.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
              frequency = HSI_VALUE;
 8007718:	4b32      	ldr	r3, [pc, #200]	@ (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 800771a:	61fb      	str	r3, [r7, #28]
            break;
 800771c:	e001      	b.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
            break;
 800771e:	46c0      	nop			@ (mov r8, r8)
 8007720:	e178      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8007722:	46c0      	nop			@ (mov r8, r8)
        break;
 8007724:	e176      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007726:	4a2e      	ldr	r2, [pc, #184]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8007728:	2388      	movs	r3, #136	@ 0x88
 800772a:	58d2      	ldr	r2, [r2, r3]
 800772c:	23c0      	movs	r3, #192	@ 0xc0
 800772e:	031b      	lsls	r3, r3, #12
 8007730:	4013      	ands	r3, r2
 8007732:	617b      	str	r3, [r7, #20]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	23c0      	movs	r3, #192	@ 0xc0
 8007738:	031b      	lsls	r3, r3, #12
 800773a:	429a      	cmp	r2, r3
 800773c:	d03d      	beq.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	23c0      	movs	r3, #192	@ 0xc0
 8007742:	031b      	lsls	r3, r3, #12
 8007744:	429a      	cmp	r2, r3
 8007746:	d843      	bhi.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	2380      	movs	r3, #128	@ 0x80
 800774c:	031b      	lsls	r3, r3, #12
 800774e:	429a      	cmp	r2, r3
 8007750:	d027      	beq.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	2380      	movs	r3, #128	@ 0x80
 8007756:	031b      	lsls	r3, r3, #12
 8007758:	429a      	cmp	r2, r3
 800775a:	d839      	bhi.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	2380      	movs	r3, #128	@ 0x80
 8007766:	02db      	lsls	r3, r3, #11
 8007768:	429a      	cmp	r2, r3
 800776a:	d005      	beq.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
            break;
 800776c:	e030      	b.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = HAL_RCC_GetPCLK1Freq();
 800776e:	f7ff f95d 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8007772:	0003      	movs	r3, r0
 8007774:	61fb      	str	r3, [r7, #28]
            break;
 8007776:	e032      	b.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007778:	4a19      	ldr	r2, [pc, #100]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 800777a:	2394      	movs	r3, #148	@ 0x94
 800777c:	58d3      	ldr	r3, [r2, r3]
 800777e:	2202      	movs	r2, #2
 8007780:	4013      	ands	r3, r2
 8007782:	2b02      	cmp	r3, #2
 8007784:	d126      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007786:	4a16      	ldr	r2, [pc, #88]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8007788:	2394      	movs	r3, #148	@ 0x94
 800778a:	58d3      	ldr	r3, [r2, r3]
 800778c:	2204      	movs	r2, #4
 800778e:	4013      	ands	r3, r2
 8007790:	2b04      	cmp	r3, #4
 8007792:	d102      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
                frequency = LSI_VALUE / 128U;
 8007794:	23fa      	movs	r3, #250	@ 0xfa
 8007796:	61fb      	str	r3, [r7, #28]
            break;
 8007798:	e01c      	b.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
                frequency = LSI_VALUE;
 800779a:	23fa      	movs	r3, #250	@ 0xfa
 800779c:	01db      	lsls	r3, r3, #7
 800779e:	61fb      	str	r3, [r7, #28]
            break;
 80077a0:	e018      	b.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077a2:	4b0f      	ldr	r3, [pc, #60]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	2380      	movs	r3, #128	@ 0x80
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	401a      	ands	r2, r3
 80077ac:	2380      	movs	r3, #128	@ 0x80
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d111      	bne.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
              frequency = HSI_VALUE;
 80077b4:	4b0b      	ldr	r3, [pc, #44]	@ (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 80077b6:	61fb      	str	r3, [r7, #28]
            break;
 80077b8:	e00e      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80077ba:	4a09      	ldr	r2, [pc, #36]	@ (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80077bc:	2390      	movs	r3, #144	@ 0x90
 80077be:	58d3      	ldr	r3, [r2, r3]
 80077c0:	2202      	movs	r2, #2
 80077c2:	4013      	ands	r3, r2
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d109      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x628>
              frequency = LSE_VALUE;
 80077c8:	2380      	movs	r3, #128	@ 0x80
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	61fb      	str	r3, [r7, #28]
            break;
 80077ce:	e005      	b.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x628>
            break;
 80077d0:	46c0      	nop			@ (mov r8, r8)
 80077d2:	e11f      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80077d4:	46c0      	nop			@ (mov r8, r8)
 80077d6:	e11d      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80077d8:	46c0      	nop			@ (mov r8, r8)
 80077da:	e11b      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80077dc:	46c0      	nop			@ (mov r8, r8)
        break;
 80077de:	e119      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 80077e0:	40021000 	.word	0x40021000
 80077e4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80077e8:	4a8d      	ldr	r2, [pc, #564]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80077ea:	2388      	movs	r3, #136	@ 0x88
 80077ec:	58d2      	ldr	r2, [r2, r3]
 80077ee:	23c0      	movs	r3, #192	@ 0xc0
 80077f0:	039b      	lsls	r3, r3, #14
 80077f2:	4013      	ands	r3, r2
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	23c0      	movs	r3, #192	@ 0xc0
 80077fa:	039b      	lsls	r3, r3, #14
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d03d      	beq.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	23c0      	movs	r3, #192	@ 0xc0
 8007804:	039b      	lsls	r3, r3, #14
 8007806:	429a      	cmp	r2, r3
 8007808:	d843      	bhi.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	2380      	movs	r3, #128	@ 0x80
 800780e:	039b      	lsls	r3, r3, #14
 8007810:	429a      	cmp	r2, r3
 8007812:	d027      	beq.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	2380      	movs	r3, #128	@ 0x80
 8007818:	039b      	lsls	r3, r3, #14
 800781a:	429a      	cmp	r2, r3
 800781c:	d839      	bhi.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	2380      	movs	r3, #128	@ 0x80
 8007828:	035b      	lsls	r3, r3, #13
 800782a:	429a      	cmp	r2, r3
 800782c:	d005      	beq.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
            break;
 800782e:	e030      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007830:	f7ff f8fc 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8007834:	0003      	movs	r3, r0
 8007836:	61fb      	str	r3, [r7, #28]
            break;
 8007838:	e032      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800783a:	4a79      	ldr	r2, [pc, #484]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800783c:	2394      	movs	r3, #148	@ 0x94
 800783e:	58d3      	ldr	r3, [r2, r3]
 8007840:	2202      	movs	r2, #2
 8007842:	4013      	ands	r3, r2
 8007844:	2b02      	cmp	r3, #2
 8007846:	d126      	bne.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007848:	4a75      	ldr	r2, [pc, #468]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800784a:	2394      	movs	r3, #148	@ 0x94
 800784c:	58d3      	ldr	r3, [r2, r3]
 800784e:	2204      	movs	r2, #4
 8007850:	4013      	ands	r3, r2
 8007852:	2b04      	cmp	r3, #4
 8007854:	d102      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
                frequency = LSI_VALUE / 128U;
 8007856:	23fa      	movs	r3, #250	@ 0xfa
 8007858:	61fb      	str	r3, [r7, #28]
            break;
 800785a:	e01c      	b.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
                frequency = LSI_VALUE;
 800785c:	23fa      	movs	r3, #250	@ 0xfa
 800785e:	01db      	lsls	r3, r3, #7
 8007860:	61fb      	str	r3, [r7, #28]
            break;
 8007862:	e018      	b.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007864:	4b6e      	ldr	r3, [pc, #440]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	2380      	movs	r3, #128	@ 0x80
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	401a      	ands	r2, r3
 800786e:	2380      	movs	r3, #128	@ 0x80
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	429a      	cmp	r2, r3
 8007874:	d111      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
              frequency = HSI_VALUE;
 8007876:	4b6b      	ldr	r3, [pc, #428]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x870>)
 8007878:	61fb      	str	r3, [r7, #28]
            break;
 800787a:	e00e      	b.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800787c:	4a68      	ldr	r2, [pc, #416]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800787e:	2390      	movs	r3, #144	@ 0x90
 8007880:	58d3      	ldr	r3, [r2, r3]
 8007882:	2202      	movs	r2, #2
 8007884:	4013      	ands	r3, r2
 8007886:	2b02      	cmp	r3, #2
 8007888:	d109      	bne.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
              frequency = LSE_VALUE;
 800788a:	2380      	movs	r3, #128	@ 0x80
 800788c:	021b      	lsls	r3, r3, #8
 800788e:	61fb      	str	r3, [r7, #28]
            break;
 8007890:	e005      	b.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            break;
 8007892:	46c0      	nop			@ (mov r8, r8)
 8007894:	e0be      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8007896:	46c0      	nop			@ (mov r8, r8)
 8007898:	e0bc      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 800789a:	46c0      	nop			@ (mov r8, r8)
 800789c:	e0ba      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 800789e:	46c0      	nop			@ (mov r8, r8)
        break;
 80078a0:	e0b8      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80078a2:	4a5f      	ldr	r2, [pc, #380]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80078a4:	2388      	movs	r3, #136	@ 0x88
 80078a6:	58d2      	ldr	r2, [r2, r3]
 80078a8:	2380      	movs	r3, #128	@ 0x80
 80078aa:	045b      	lsls	r3, r3, #17
 80078ac:	4013      	ands	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	2380      	movs	r3, #128	@ 0x80
 80078ba:	045b      	lsls	r3, r3, #17
 80078bc:	429a      	cmp	r2, r3
 80078be:	d011      	beq.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
            break;
 80078c0:	e019      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80078c2:	4b57      	ldr	r3, [pc, #348]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80078c4:	689a      	ldr	r2, [r3, #8]
 80078c6:	23e0      	movs	r3, #224	@ 0xe0
 80078c8:	01db      	lsls	r3, r3, #7
 80078ca:	4013      	ands	r3, r2
 80078cc:	d104      	bne.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
              frequency = HAL_RCC_GetPCLK1Freq();
 80078ce:	f7ff f8ad 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 80078d2:	0003      	movs	r3, r0
 80078d4:	61fb      	str	r3, [r7, #28]
            break;
 80078d6:	e00e      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80078d8:	f7ff f8a8 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 80078dc:	0003      	movs	r3, r0
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	61fb      	str	r3, [r7, #28]
            break;
 80078e2:	e008      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80078e4:	2408      	movs	r4, #8
 80078e6:	193b      	adds	r3, r7, r4
 80078e8:	0018      	movs	r0, r3
 80078ea:	f000 f8a1 	bl	8007a30 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80078ee:	193b      	adds	r3, r7, r4
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	61fb      	str	r3, [r7, #28]
            break;
 80078f4:	46c0      	nop			@ (mov r8, r8)
        break;
 80078f6:	e08d      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80078f8:	4a49      	ldr	r2, [pc, #292]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80078fa:	2388      	movs	r3, #136	@ 0x88
 80078fc:	58d2      	ldr	r2, [r2, r3]
 80078fe:	2380      	movs	r3, #128	@ 0x80
 8007900:	049b      	lsls	r3, r3, #18
 8007902:	4013      	ands	r3, r2
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	2380      	movs	r3, #128	@ 0x80
 8007910:	049b      	lsls	r3, r3, #18
 8007912:	429a      	cmp	r2, r3
 8007914:	d011      	beq.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            break;
 8007916:	e019      	b.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8007918:	4b41      	ldr	r3, [pc, #260]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800791a:	689a      	ldr	r2, [r3, #8]
 800791c:	23e0      	movs	r3, #224	@ 0xe0
 800791e:	01db      	lsls	r3, r3, #7
 8007920:	4013      	ands	r3, r2
 8007922:	d104      	bne.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
              frequency = HAL_RCC_GetPCLK1Freq();
 8007924:	f7ff f882 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8007928:	0003      	movs	r3, r0
 800792a:	61fb      	str	r3, [r7, #28]
            break;
 800792c:	e00e      	b.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 800792e:	f7ff f87d 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8007932:	0003      	movs	r3, r0
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	61fb      	str	r3, [r7, #28]
            break;
 8007938:	e008      	b.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800793a:	2408      	movs	r4, #8
 800793c:	193b      	adds	r3, r7, r4
 800793e:	0018      	movs	r0, r3
 8007940:	f000 f876 	bl	8007a30 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8007944:	193b      	adds	r3, r7, r4
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	61fb      	str	r3, [r7, #28]
            break;
 800794a:	46c0      	nop			@ (mov r8, r8)
        break;
 800794c:	e062      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800794e:	4a34      	ldr	r2, [pc, #208]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007950:	2388      	movs	r3, #136	@ 0x88
 8007952:	58d2      	ldr	r2, [r2, r3]
 8007954:	23c0      	movs	r3, #192	@ 0xc0
 8007956:	051b      	lsls	r3, r3, #20
 8007958:	4013      	ands	r3, r2
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	23c0      	movs	r3, #192	@ 0xc0
 8007960:	051b      	lsls	r3, r3, #20
 8007962:	429a      	cmp	r2, r3
 8007964:	d017      	beq.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	23c0      	movs	r3, #192	@ 0xc0
 800796a:	051b      	lsls	r3, r3, #20
 800796c:	429a      	cmp	r2, r3
 800796e:	d844      	bhi.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	2380      	movs	r3, #128	@ 0x80
 8007974:	051b      	lsls	r3, r3, #20
 8007976:	429a      	cmp	r2, r3
 8007978:	d033      	beq.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	2380      	movs	r3, #128	@ 0x80
 800797e:	051b      	lsls	r3, r3, #20
 8007980:	429a      	cmp	r2, r3
 8007982:	d83a      	bhi.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d034      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	2380      	movs	r3, #128	@ 0x80
 800798e:	04db      	lsls	r3, r3, #19
 8007990:	429a      	cmp	r2, r3
 8007992:	d003      	beq.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8007994:	e031      	b.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
            frequency = HSI48_VALUE;
 8007996:	4b24      	ldr	r3, [pc, #144]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 8007998:	61fb      	str	r3, [r7, #28]
            break;
 800799a:	e031      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800799c:	4b20      	ldr	r3, [pc, #128]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2202      	movs	r2, #2
 80079a2:	4013      	ands	r3, r2
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d12a      	bne.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x84a>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80079a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2208      	movs	r2, #8
 80079ae:	4013      	ands	r3, r2
 80079b0:	d005      	beq.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80079b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	091b      	lsrs	r3, r3, #4
 80079b8:	220f      	movs	r2, #15
 80079ba:	4013      	ands	r3, r2
 80079bc:	e005      	b.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80079be:	4a18      	ldr	r2, [pc, #96]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80079c0:	2394      	movs	r3, #148	@ 0x94
 80079c2:	58d3      	ldr	r3, [r2, r3]
 80079c4:	0a1b      	lsrs	r3, r3, #8
 80079c6:	220f      	movs	r2, #15
 80079c8:	4013      	ands	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	2b0b      	cmp	r3, #11
 80079d0:	d901      	bls.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
                msirange = 11U;
 80079d2:	230b      	movs	r3, #11
 80079d4:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80079d6:	4b15      	ldr	r3, [pc, #84]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	0092      	lsls	r2, r2, #2
 80079dc:	58d3      	ldr	r3, [r2, r3]
 80079de:	61fb      	str	r3, [r7, #28]
            break;
 80079e0:	e00d      	b.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x84a>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80079e2:	2408      	movs	r4, #8
 80079e4:	193b      	adds	r3, r7, r4
 80079e6:	0018      	movs	r0, r3
 80079e8:	f000 f822 	bl	8007a30 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80079ec:	193b      	adds	r3, r7, r4
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	61fb      	str	r3, [r7, #28]
            break;
 80079f2:	e005      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            frequency = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61fb      	str	r3, [r7, #28]
            break;
 80079f8:	e002      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 80079fa:	46c0      	nop			@ (mov r8, r8)
 80079fc:	e00a      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80079fe:	46c0      	nop			@ (mov r8, r8)
        break;
 8007a00:	e008      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        break;
 8007a02:	46c0      	nop			@ (mov r8, r8)
 8007a04:	e006      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        break;
 8007a06:	46c0      	nop			@ (mov r8, r8)
 8007a08:	e004      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        break;
 8007a0a:	46c0      	nop			@ (mov r8, r8)
 8007a0c:	e002      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        break;
 8007a0e:	46c0      	nop			@ (mov r8, r8)
 8007a10:	e000      	b.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        break;
 8007a12:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8007a14:	69fb      	ldr	r3, [r7, #28]
}
 8007a16:	0018      	movs	r0, r3
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	b009      	add	sp, #36	@ 0x24
 8007a1c:	bd90      	pop	{r4, r7, pc}
 8007a1e:	46c0      	nop			@ (mov r8, r8)
 8007a20:	40021000 	.word	0x40021000
 8007a24:	00f42400 	.word	0x00f42400
 8007a28:	02dc6c00 	.word	0x02dc6c00
 8007a2c:	0800d7a8 	.word	0x0800d7a8

08007a30 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b088      	sub	sp, #32
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a38:	4b58      	ldr	r3, [pc, #352]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	0a1b      	lsrs	r3, r3, #8
 8007a3e:	227f      	movs	r2, #127	@ 0x7f
 8007a40:	4013      	ands	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007a44:	4b55      	ldr	r3, [pc, #340]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	2203      	movs	r2, #3
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8007a4e:	4b53      	ldr	r3, [pc, #332]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	091b      	lsrs	r3, r3, #4
 8007a54:	2207      	movs	r2, #7
 8007a56:	4013      	ands	r3, r2
 8007a58:	3301      	adds	r3, #1
 8007a5a:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8007a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2208      	movs	r2, #8
 8007a62:	4013      	ands	r3, r2
 8007a64:	d005      	beq.n	8007a72 <HAL_RCCEx_GetPLLClockFreq+0x42>
 8007a66:	4b4d      	ldr	r3, [pc, #308]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	091b      	lsrs	r3, r3, #4
 8007a6c:	220f      	movs	r2, #15
 8007a6e:	4013      	ands	r3, r2
 8007a70:	e005      	b.n	8007a7e <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8007a72:	4a4a      	ldr	r2, [pc, #296]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007a74:	2394      	movs	r3, #148	@ 0x94
 8007a76:	58d3      	ldr	r3, [r2, r3]
 8007a78:	0a1b      	lsrs	r3, r3, #8
 8007a7a:	220f      	movs	r2, #15
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	2b0b      	cmp	r3, #11
 8007a84:	d901      	bls.n	8007a8a <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8007a86:	230b      	movs	r3, #11
 8007a88:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d020      	beq.n	8007ad2 <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d827      	bhi.n	8007ae6 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d00c      	beq.n	8007ab6 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d121      	bne.n	8007ae6 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8007aa2:	68f9      	ldr	r1, [r7, #12]
 8007aa4:	483e      	ldr	r0, [pc, #248]	@ (8007ba0 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8007aa6:	f7f8 fb41 	bl	800012c <__udivsi3>
 8007aaa:	0003      	movs	r3, r0
 8007aac:	001a      	movs	r2, r3
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	4353      	muls	r3, r2
 8007ab2:	61fb      	str	r3, [r7, #28]
      break;
 8007ab4:	e025      	b.n	8007b02 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8007ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8007ba4 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	0092      	lsls	r2, r2, #2
 8007abc:	58d3      	ldr	r3, [r2, r3]
 8007abe:	68f9      	ldr	r1, [r7, #12]
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	f7f8 fb33 	bl	800012c <__udivsi3>
 8007ac6:	0003      	movs	r3, r0
 8007ac8:	001a      	movs	r2, r3
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	4353      	muls	r3, r2
 8007ace:	61fb      	str	r3, [r7, #28]
      break;
 8007ad0:	e017      	b.n	8007b02 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8007ad2:	68f9      	ldr	r1, [r7, #12]
 8007ad4:	4834      	ldr	r0, [pc, #208]	@ (8007ba8 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8007ad6:	f7f8 fb29 	bl	800012c <__udivsi3>
 8007ada:	0003      	movs	r3, r0
 8007adc:	001a      	movs	r2, r3
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	4353      	muls	r3, r2
 8007ae2:	61fb      	str	r3, [r7, #28]
      break;
 8007ae4:	e00d      	b.n	8007b02 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8007ae6:	4b2f      	ldr	r3, [pc, #188]	@ (8007ba4 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	0092      	lsls	r2, r2, #2
 8007aec:	58d3      	ldr	r3, [r2, r3]
 8007aee:	68f9      	ldr	r1, [r7, #12]
 8007af0:	0018      	movs	r0, r3
 8007af2:	f7f8 fb1b 	bl	800012c <__udivsi3>
 8007af6:	0003      	movs	r3, r0
 8007af8:	001a      	movs	r2, r3
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	4353      	muls	r3, r2
 8007afe:	61fb      	str	r3, [r7, #28]
      break;
 8007b00:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8007b02:	4b26      	ldr	r3, [pc, #152]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007b04:	68da      	ldr	r2, [r3, #12]
 8007b06:	2380      	movs	r3, #128	@ 0x80
 8007b08:	025b      	lsls	r3, r3, #9
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	d00e      	beq.n	8007b2c <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8007b0e:	4b23      	ldr	r3, [pc, #140]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007b10:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8007b12:	0c5b      	lsrs	r3, r3, #17
 8007b14:	221f      	movs	r2, #31
 8007b16:	4013      	ands	r3, r2
 8007b18:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8007b1a:	0019      	movs	r1, r3
 8007b1c:	69f8      	ldr	r0, [r7, #28]
 8007b1e:	f7f8 fb05 	bl	800012c <__udivsi3>
 8007b22:	0003      	movs	r3, r0
 8007b24:	001a      	movs	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	e002      	b.n	8007b32 <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8007b32:	4b1a      	ldr	r3, [pc, #104]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	2380      	movs	r3, #128	@ 0x80
 8007b38:	045b      	lsls	r3, r3, #17
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	d00e      	beq.n	8007b5c <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8007b3e:	4b17      	ldr	r3, [pc, #92]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007b40:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8007b42:	0e5b      	lsrs	r3, r3, #25
 8007b44:	2207      	movs	r2, #7
 8007b46:	4013      	ands	r3, r2
 8007b48:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8007b4a:	0019      	movs	r1, r3
 8007b4c:	69f8      	ldr	r0, [r7, #28]
 8007b4e:	f7f8 faed 	bl	800012c <__udivsi3>
 8007b52:	0003      	movs	r3, r0
 8007b54:	001a      	movs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]
 8007b5a:	e002      	b.n	8007b62 <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8007b62:	4b0e      	ldr	r3, [pc, #56]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	2380      	movs	r3, #128	@ 0x80
 8007b68:	055b      	lsls	r3, r3, #21
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	d00e      	beq.n	8007b8c <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8007b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b9c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007b70:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8007b72:	0f5b      	lsrs	r3, r3, #29
 8007b74:	2207      	movs	r2, #7
 8007b76:	4013      	ands	r3, r2
 8007b78:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8007b7a:	0019      	movs	r1, r3
 8007b7c:	69f8      	ldr	r0, [r7, #28]
 8007b7e:	f7f8 fad5 	bl	800012c <__udivsi3>
 8007b82:	0003      	movs	r3, r0
 8007b84:	001a      	movs	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8007b8a:	e002      	b.n	8007b92 <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	609a      	str	r2, [r3, #8]
}
 8007b92:	46c0      	nop			@ (mov r8, r8)
 8007b94:	46bd      	mov	sp, r7
 8007b96:	b008      	add	sp, #32
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	46c0      	nop			@ (mov r8, r8)
 8007b9c:	40021000 	.word	0x40021000
 8007ba0:	00f42400 	.word	0x00f42400
 8007ba4:	0800d7a8 	.word	0x0800d7a8
 8007ba8:	007a1200 	.word	0x007a1200

08007bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e215      	b.n	8007fea <HAL_SPI_Init+0x43e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4aa9      	ldr	r2, [pc, #676]	@ (8007e68 <HAL_SPI_Init+0x2bc>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00c      	beq.n	8007be2 <HAL_SPI_Init+0x36>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4aa7      	ldr	r2, [pc, #668]	@ (8007e6c <HAL_SPI_Init+0x2c0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d007      	beq.n	8007be2 <HAL_SPI_Init+0x36>
 8007bd2:	2346      	movs	r3, #70	@ 0x46
 8007bd4:	33ff      	adds	r3, #255	@ 0xff
 8007bd6:	001a      	movs	r2, r3
 8007bd8:	4ba5      	ldr	r3, [pc, #660]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007bda:	0011      	movs	r1, r2
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f7fb fa35 	bl	800304c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00c      	beq.n	8007c04 <HAL_SPI_Init+0x58>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	2382      	movs	r3, #130	@ 0x82
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d006      	beq.n	8007c04 <HAL_SPI_Init+0x58>
 8007bf6:	23a3      	movs	r3, #163	@ 0xa3
 8007bf8:	005a      	lsls	r2, r3, #1
 8007bfa:	4b9d      	ldr	r3, [pc, #628]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007bfc:	0011      	movs	r1, r2
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f7fb fa24 	bl	800304c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d013      	beq.n	8007c34 <HAL_SPI_Init+0x88>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	2380      	movs	r3, #128	@ 0x80
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d00d      	beq.n	8007c34 <HAL_SPI_Init+0x88>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	2380      	movs	r3, #128	@ 0x80
 8007c1e:	021b      	lsls	r3, r3, #8
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d007      	beq.n	8007c34 <HAL_SPI_Init+0x88>
 8007c24:	2348      	movs	r3, #72	@ 0x48
 8007c26:	33ff      	adds	r3, #255	@ 0xff
 8007c28:	001a      	movs	r2, r3
 8007c2a:	4b91      	ldr	r3, [pc, #580]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007c2c:	0011      	movs	r1, r2
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f7fb fa0c 	bl	800304c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	23f0      	movs	r3, #240	@ 0xf0
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d04e      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	23e0      	movs	r3, #224	@ 0xe0
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d048      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	23d0      	movs	r3, #208	@ 0xd0
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d042      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68da      	ldr	r2, [r3, #12]
 8007c5c:	23c0      	movs	r3, #192	@ 0xc0
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d03c      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	23b0      	movs	r3, #176	@ 0xb0
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d036      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	23a0      	movs	r3, #160	@ 0xa0
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d030      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	2390      	movs	r3, #144	@ 0x90
 8007c82:	011b      	lsls	r3, r3, #4
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d02a      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68da      	ldr	r2, [r3, #12]
 8007c8c:	2380      	movs	r3, #128	@ 0x80
 8007c8e:	011b      	lsls	r3, r3, #4
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d024      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	23e0      	movs	r3, #224	@ 0xe0
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d01e      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	23c0      	movs	r3, #192	@ 0xc0
 8007ca6:	00db      	lsls	r3, r3, #3
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d018      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	23a0      	movs	r3, #160	@ 0xa0
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d012      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	2380      	movs	r3, #128	@ 0x80
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d00c      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	23c0      	movs	r3, #192	@ 0xc0
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d006      	beq.n	8007cde <HAL_SPI_Init+0x132>
 8007cd0:	23a4      	movs	r3, #164	@ 0xa4
 8007cd2:	005a      	lsls	r2, r3, #1
 8007cd4:	4b66      	ldr	r3, [pc, #408]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007cd6:	0011      	movs	r1, r2
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f7fb f9b7 	bl	800304c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699a      	ldr	r2, [r3, #24]
 8007ce2:	2380      	movs	r3, #128	@ 0x80
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d011      	beq.n	8007d0e <HAL_SPI_Init+0x162>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00d      	beq.n	8007d0e <HAL_SPI_Init+0x162>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699a      	ldr	r2, [r3, #24]
 8007cf6:	2380      	movs	r3, #128	@ 0x80
 8007cf8:	02db      	lsls	r3, r3, #11
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d007      	beq.n	8007d0e <HAL_SPI_Init+0x162>
 8007cfe:	234a      	movs	r3, #74	@ 0x4a
 8007d00:	33ff      	adds	r3, #255	@ 0xff
 8007d02:	001a      	movs	r2, r3
 8007d04:	4b5a      	ldr	r3, [pc, #360]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007d06:	0011      	movs	r1, r2
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f7fb f99f 	bl	800304c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d00a      	beq.n	8007d2c <HAL_SPI_Init+0x180>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d006      	beq.n	8007d2c <HAL_SPI_Init+0x180>
 8007d1e:	23a5      	movs	r3, #165	@ 0xa5
 8007d20:	005a      	lsls	r2, r3, #1
 8007d22:	4b53      	ldr	r3, [pc, #332]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007d24:	0011      	movs	r1, r2
 8007d26:	0018      	movs	r0, r3
 8007d28:	f7fb f990 	bl	800304c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	69db      	ldr	r3, [r3, #28]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d023      	beq.n	8007d7c <HAL_SPI_Init+0x1d0>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	d01f      	beq.n	8007d7c <HAL_SPI_Init+0x1d0>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	2b10      	cmp	r3, #16
 8007d42:	d01b      	beq.n	8007d7c <HAL_SPI_Init+0x1d0>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	2b18      	cmp	r3, #24
 8007d4a:	d017      	beq.n	8007d7c <HAL_SPI_Init+0x1d0>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	2b20      	cmp	r3, #32
 8007d52:	d013      	beq.n	8007d7c <HAL_SPI_Init+0x1d0>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	2b28      	cmp	r3, #40	@ 0x28
 8007d5a:	d00f      	beq.n	8007d7c <HAL_SPI_Init+0x1d0>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	2b30      	cmp	r3, #48	@ 0x30
 8007d62:	d00b      	beq.n	8007d7c <HAL_SPI_Init+0x1d0>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	2b38      	cmp	r3, #56	@ 0x38
 8007d6a:	d007      	beq.n	8007d7c <HAL_SPI_Init+0x1d0>
 8007d6c:	234c      	movs	r3, #76	@ 0x4c
 8007d6e:	33ff      	adds	r3, #255	@ 0xff
 8007d70:	001a      	movs	r2, r3
 8007d72:	4b3f      	ldr	r3, [pc, #252]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007d74:	0011      	movs	r1, r2
 8007d76:	0018      	movs	r0, r3
 8007d78:	f7fb f968 	bl	800304c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <HAL_SPI_Init+0x1ee>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	2b80      	cmp	r3, #128	@ 0x80
 8007d8a:	d006      	beq.n	8007d9a <HAL_SPI_Init+0x1ee>
 8007d8c:	23a6      	movs	r3, #166	@ 0xa6
 8007d8e:	005a      	lsls	r2, r3, #1
 8007d90:	4b37      	ldr	r3, [pc, #220]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007d92:	0011      	movs	r1, r2
 8007d94:	0018      	movs	r0, r3
 8007d96:	f7fb f959 	bl	800304c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00b      	beq.n	8007dba <HAL_SPI_Init+0x20e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da6:	2b10      	cmp	r3, #16
 8007da8:	d007      	beq.n	8007dba <HAL_SPI_Init+0x20e>
 8007daa:	234e      	movs	r3, #78	@ 0x4e
 8007dac:	33ff      	adds	r3, #255	@ 0xff
 8007dae:	001a      	movs	r2, r3
 8007db0:	4b2f      	ldr	r3, [pc, #188]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007db2:	0011      	movs	r1, r2
 8007db4:	0018      	movs	r0, r3
 8007db6:	f7fb f949 	bl	800304c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d158      	bne.n	8007e74 <HAL_SPI_Init+0x2c8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <HAL_SPI_Init+0x234>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d006      	beq.n	8007de0 <HAL_SPI_Init+0x234>
 8007dd2:	23a8      	movs	r3, #168	@ 0xa8
 8007dd4:	005a      	lsls	r2, r3, #1
 8007dd6:	4b26      	ldr	r3, [pc, #152]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007dd8:	0011      	movs	r1, r2
 8007dda:	0018      	movs	r0, r3
 8007ddc:	f7fb f936 	bl	800304c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <HAL_SPI_Init+0x254>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d007      	beq.n	8007e00 <HAL_SPI_Init+0x254>
 8007df0:	2352      	movs	r3, #82	@ 0x52
 8007df2:	33ff      	adds	r3, #255	@ 0xff
 8007df4:	001a      	movs	r2, r3
 8007df6:	4b1e      	ldr	r3, [pc, #120]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007df8:	0011      	movs	r1, r2
 8007dfa:	0018      	movs	r0, r3
 8007dfc:	f7fb f926 	bl	800304c <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	2382      	movs	r3, #130	@ 0x82
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d129      	bne.n	8007e60 <HAL_SPI_Init+0x2b4>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d100      	bne.n	8007e16 <HAL_SPI_Init+0x26a>
 8007e14:	e05c      	b.n	8007ed0 <HAL_SPI_Init+0x324>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	d058      	beq.n	8007ed0 <HAL_SPI_Init+0x324>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	d054      	beq.n	8007ed0 <HAL_SPI_Init+0x324>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	2b18      	cmp	r3, #24
 8007e2c:	d050      	beq.n	8007ed0 <HAL_SPI_Init+0x324>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	d04c      	beq.n	8007ed0 <HAL_SPI_Init+0x324>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	2b28      	cmp	r3, #40	@ 0x28
 8007e3c:	d048      	beq.n	8007ed0 <HAL_SPI_Init+0x324>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	2b30      	cmp	r3, #48	@ 0x30
 8007e44:	d044      	beq.n	8007ed0 <HAL_SPI_Init+0x324>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	2b38      	cmp	r3, #56	@ 0x38
 8007e4c:	d040      	beq.n	8007ed0 <HAL_SPI_Init+0x324>
 8007e4e:	2356      	movs	r3, #86	@ 0x56
 8007e50:	33ff      	adds	r3, #255	@ 0xff
 8007e52:	001a      	movs	r2, r3
 8007e54:	4b06      	ldr	r3, [pc, #24]	@ (8007e70 <HAL_SPI_Init+0x2c4>)
 8007e56:	0011      	movs	r1, r2
 8007e58:	0018      	movs	r0, r3
 8007e5a:	f7fb f8f7 	bl	800304c <assert_failed>
 8007e5e:	e037      	b.n	8007ed0 <HAL_SPI_Init+0x324>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	61da      	str	r2, [r3, #28]
 8007e66:	e033      	b.n	8007ed0 <HAL_SPI_Init+0x324>
 8007e68:	40013000 	.word	0x40013000
 8007e6c:	40003800 	.word	0x40003800
 8007e70:	0800d4d8 	.word	0x0800d4d8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d023      	beq.n	8007ec4 <HAL_SPI_Init+0x318>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d01f      	beq.n	8007ec4 <HAL_SPI_Init+0x318>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	2b10      	cmp	r3, #16
 8007e8a:	d01b      	beq.n	8007ec4 <HAL_SPI_Init+0x318>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	2b18      	cmp	r3, #24
 8007e92:	d017      	beq.n	8007ec4 <HAL_SPI_Init+0x318>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d013      	beq.n	8007ec4 <HAL_SPI_Init+0x318>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	2b28      	cmp	r3, #40	@ 0x28
 8007ea2:	d00f      	beq.n	8007ec4 <HAL_SPI_Init+0x318>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	2b30      	cmp	r3, #48	@ 0x30
 8007eaa:	d00b      	beq.n	8007ec4 <HAL_SPI_Init+0x318>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	2b38      	cmp	r3, #56	@ 0x38
 8007eb2:	d007      	beq.n	8007ec4 <HAL_SPI_Init+0x318>
 8007eb4:	2360      	movs	r3, #96	@ 0x60
 8007eb6:	33ff      	adds	r3, #255	@ 0xff
 8007eb8:	001a      	movs	r2, r3
 8007eba:	4b4e      	ldr	r3, [pc, #312]	@ (8007ff4 <HAL_SPI_Init+0x448>)
 8007ebc:	0011      	movs	r1, r2
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f7fb f8c4 	bl	800304c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	225d      	movs	r2, #93	@ 0x5d
 8007eda:	5c9b      	ldrb	r3, [r3, r2]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d107      	bne.n	8007ef2 <HAL_SPI_Init+0x346>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	225c      	movs	r2, #92	@ 0x5c
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	0018      	movs	r0, r3
 8007eee:	f7fb f8f5 	bl	80030dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	225d      	movs	r2, #93	@ 0x5d
 8007ef6:	2102      	movs	r1, #2
 8007ef8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2140      	movs	r1, #64	@ 0x40
 8007f06:	438a      	bics	r2, r1
 8007f08:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	23e0      	movs	r3, #224	@ 0xe0
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d902      	bls.n	8007f1c <HAL_SPI_Init+0x370>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
 8007f1a:	e002      	b.n	8007f22 <HAL_SPI_Init+0x376>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f1c:	2380      	movs	r3, #128	@ 0x80
 8007f1e:	015b      	lsls	r3, r3, #5
 8007f20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	23f0      	movs	r3, #240	@ 0xf0
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d008      	beq.n	8007f40 <HAL_SPI_Init+0x394>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	23e0      	movs	r3, #224	@ 0xe0
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d002      	beq.n	8007f40 <HAL_SPI_Init+0x394>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	2382      	movs	r3, #130	@ 0x82
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	401a      	ands	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6899      	ldr	r1, [r3, #8]
 8007f4e:	2384      	movs	r3, #132	@ 0x84
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	400b      	ands	r3, r1
 8007f54:	431a      	orrs	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	400b      	ands	r3, r1
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	2101      	movs	r1, #1
 8007f66:	400b      	ands	r3, r1
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6999      	ldr	r1, [r3, #24]
 8007f6e:	2380      	movs	r3, #128	@ 0x80
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	400b      	ands	r3, r1
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	2138      	movs	r1, #56	@ 0x38
 8007f7c:	400b      	ands	r3, r1
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	2180      	movs	r1, #128	@ 0x80
 8007f86:	400b      	ands	r3, r1
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	0011      	movs	r1, r2
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f90:	2380      	movs	r3, #128	@ 0x80
 8007f92:	019b      	lsls	r3, r3, #6
 8007f94:	401a      	ands	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	0c1b      	lsrs	r3, r3, #16
 8007fa4:	2204      	movs	r2, #4
 8007fa6:	401a      	ands	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fac:	2110      	movs	r1, #16
 8007fae:	400b      	ands	r3, r1
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb6:	2108      	movs	r1, #8
 8007fb8:	400b      	ands	r3, r1
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68d9      	ldr	r1, [r3, #12]
 8007fc0:	23f0      	movs	r3, #240	@ 0xf0
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	400b      	ands	r3, r1
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	0011      	movs	r1, r2
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	2380      	movs	r3, #128	@ 0x80
 8007fce:	015b      	lsls	r3, r3, #5
 8007fd0:	401a      	ands	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	225d      	movs	r2, #93	@ 0x5d
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	0018      	movs	r0, r3
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b004      	add	sp, #16
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	46c0      	nop			@ (mov r8, r8)
 8007ff4:	0800d4d8 	.word	0x0800d4d8

08007ff8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	603b      	str	r3, [r7, #0]
 8008004:	1dbb      	adds	r3, r7, #6
 8008006:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008008:	231f      	movs	r3, #31
 800800a:	18fb      	adds	r3, r7, r3
 800800c:	2200      	movs	r2, #0
 800800e:	701a      	strb	r2, [r3, #0]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00c      	beq.n	8008032 <HAL_SPI_Transmit+0x3a>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	2380      	movs	r3, #128	@ 0x80
 800801e:	021b      	lsls	r3, r3, #8
 8008020:	429a      	cmp	r2, r3
 8008022:	d006      	beq.n	8008032 <HAL_SPI_Transmit+0x3a>
 8008024:	23cf      	movs	r3, #207	@ 0xcf
 8008026:	009a      	lsls	r2, r3, #2
 8008028:	4bab      	ldr	r3, [pc, #684]	@ (80082d8 <HAL_SPI_Transmit+0x2e0>)
 800802a:	0011      	movs	r1, r2
 800802c:	0018      	movs	r0, r3
 800802e:	f7fb f80d 	bl	800304c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	225c      	movs	r2, #92	@ 0x5c
 8008036:	5c9b      	ldrb	r3, [r3, r2]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_SPI_Transmit+0x48>
 800803c:	2302      	movs	r3, #2
 800803e:	e147      	b.n	80082d0 <HAL_SPI_Transmit+0x2d8>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	225c      	movs	r2, #92	@ 0x5c
 8008044:	2101      	movs	r1, #1
 8008046:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008048:	f7fb fa8c 	bl	8003564 <HAL_GetTick>
 800804c:	0003      	movs	r3, r0
 800804e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008050:	2316      	movs	r3, #22
 8008052:	18fb      	adds	r3, r7, r3
 8008054:	1dba      	adds	r2, r7, #6
 8008056:	8812      	ldrh	r2, [r2, #0]
 8008058:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	225d      	movs	r2, #93	@ 0x5d
 800805e:	5c9b      	ldrb	r3, [r3, r2]
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b01      	cmp	r3, #1
 8008064:	d004      	beq.n	8008070 <HAL_SPI_Transmit+0x78>
  {
    errorcode = HAL_BUSY;
 8008066:	231f      	movs	r3, #31
 8008068:	18fb      	adds	r3, r7, r3
 800806a:	2202      	movs	r2, #2
 800806c:	701a      	strb	r2, [r3, #0]
    goto error;
 800806e:	e128      	b.n	80082c2 <HAL_SPI_Transmit+0x2ca>
  }

  if ((pData == NULL) || (Size == 0U))
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_SPI_Transmit+0x86>
 8008076:	1dbb      	adds	r3, r7, #6
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d104      	bne.n	8008088 <HAL_SPI_Transmit+0x90>
  {
    errorcode = HAL_ERROR;
 800807e:	231f      	movs	r3, #31
 8008080:	18fb      	adds	r3, r7, r3
 8008082:	2201      	movs	r2, #1
 8008084:	701a      	strb	r2, [r3, #0]
    goto error;
 8008086:	e11c      	b.n	80082c2 <HAL_SPI_Transmit+0x2ca>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	225d      	movs	r2, #93	@ 0x5d
 800808c:	2103      	movs	r1, #3
 800808e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	1dba      	adds	r2, r7, #6
 80080a0:	8812      	ldrh	r2, [r2, #0]
 80080a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	1dba      	adds	r2, r7, #6
 80080a8:	8812      	ldrh	r2, [r2, #0]
 80080aa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2244      	movs	r2, #68	@ 0x44
 80080b6:	2100      	movs	r1, #0
 80080b8:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2246      	movs	r2, #70	@ 0x46
 80080be:	2100      	movs	r1, #0
 80080c0:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689a      	ldr	r2, [r3, #8]
 80080d2:	2380      	movs	r3, #128	@ 0x80
 80080d4:	021b      	lsls	r3, r3, #8
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d110      	bne.n	80080fc <HAL_SPI_Transmit+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2140      	movs	r1, #64	@ 0x40
 80080e6:	438a      	bics	r2, r1
 80080e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2180      	movs	r1, #128	@ 0x80
 80080f6:	01c9      	lsls	r1, r1, #7
 80080f8:	430a      	orrs	r2, r1
 80080fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2240      	movs	r2, #64	@ 0x40
 8008104:	4013      	ands	r3, r2
 8008106:	2b40      	cmp	r3, #64	@ 0x40
 8008108:	d007      	beq.n	800811a <HAL_SPI_Transmit+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2140      	movs	r1, #64	@ 0x40
 8008116:	430a      	orrs	r2, r1
 8008118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	23e0      	movs	r3, #224	@ 0xe0
 8008120:	00db      	lsls	r3, r3, #3
 8008122:	429a      	cmp	r2, r3
 8008124:	d952      	bls.n	80081cc <HAL_SPI_Transmit+0x1d4>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d004      	beq.n	8008138 <HAL_SPI_Transmit+0x140>
 800812e:	2316      	movs	r3, #22
 8008130:	18fb      	adds	r3, r7, r3
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d143      	bne.n	80081c0 <HAL_SPI_Transmit+0x1c8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813c:	881a      	ldrh	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008148:	1c9a      	adds	r2, r3, #2
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800815c:	e030      	b.n	80081c0 <HAL_SPI_Transmit+0x1c8>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	2202      	movs	r2, #2
 8008166:	4013      	ands	r3, r2
 8008168:	2b02      	cmp	r3, #2
 800816a:	d112      	bne.n	8008192 <HAL_SPI_Transmit+0x19a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008170:	881a      	ldrh	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817c:	1c9a      	adds	r2, r3, #2
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008186:	b29b      	uxth	r3, r3
 8008188:	3b01      	subs	r3, #1
 800818a:	b29a      	uxth	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008190:	e016      	b.n	80081c0 <HAL_SPI_Transmit+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008192:	f7fb f9e7 	bl	8003564 <HAL_GetTick>
 8008196:	0002      	movs	r2, r0
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d802      	bhi.n	80081a8 <HAL_SPI_Transmit+0x1b0>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	3301      	adds	r3, #1
 80081a6:	d102      	bne.n	80081ae <HAL_SPI_Transmit+0x1b6>
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d108      	bne.n	80081c0 <HAL_SPI_Transmit+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80081ae:	231f      	movs	r3, #31
 80081b0:	18fb      	adds	r3, r7, r3
 80081b2:	2203      	movs	r2, #3
 80081b4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	225d      	movs	r2, #93	@ 0x5d
 80081ba:	2101      	movs	r1, #1
 80081bc:	5499      	strb	r1, [r3, r2]
          goto error;
 80081be:	e080      	b.n	80082c2 <HAL_SPI_Transmit+0x2ca>
    while (hspi->TxXferCount > 0U)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1c9      	bne.n	800815e <HAL_SPI_Transmit+0x166>
 80081ca:	e053      	b.n	8008274 <HAL_SPI_Transmit+0x27c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <HAL_SPI_Transmit+0x1e6>
 80081d4:	2316      	movs	r3, #22
 80081d6:	18fb      	adds	r3, r7, r3
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d145      	bne.n	800826a <HAL_SPI_Transmit+0x272>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	330c      	adds	r3, #12
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b29a      	uxth	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8008204:	e031      	b.n	800826a <HAL_SPI_Transmit+0x272>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	2202      	movs	r2, #2
 800820e:	4013      	ands	r3, r2
 8008210:	2b02      	cmp	r3, #2
 8008212:	d113      	bne.n	800823c <HAL_SPI_Transmit+0x244>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	330c      	adds	r3, #12
 800821e:	7812      	ldrb	r2, [r2, #0]
 8008220:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800823a:	e016      	b.n	800826a <HAL_SPI_Transmit+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800823c:	f7fb f992 	bl	8003564 <HAL_GetTick>
 8008240:	0002      	movs	r2, r0
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d802      	bhi.n	8008252 <HAL_SPI_Transmit+0x25a>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	3301      	adds	r3, #1
 8008250:	d102      	bne.n	8008258 <HAL_SPI_Transmit+0x260>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d108      	bne.n	800826a <HAL_SPI_Transmit+0x272>
        {
          errorcode = HAL_TIMEOUT;
 8008258:	231f      	movs	r3, #31
 800825a:	18fb      	adds	r3, r7, r3
 800825c:	2203      	movs	r2, #3
 800825e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	225d      	movs	r2, #93	@ 0x5d
 8008264:	2101      	movs	r1, #1
 8008266:	5499      	strb	r1, [r3, r2]
          goto error;
 8008268:	e02b      	b.n	80082c2 <HAL_SPI_Transmit+0x2ca>
    while (hspi->TxXferCount > 0U)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800826e:	b29b      	uxth	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1c8      	bne.n	8008206 <HAL_SPI_Transmit+0x20e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	0018      	movs	r0, r3
 800827c:	f000 fcfe 	bl	8008c7c <SPI_EndRxTxTransaction>
 8008280:	1e03      	subs	r3, r0, #0
 8008282:	d002      	beq.n	800828a <HAL_SPI_Transmit+0x292>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2220      	movs	r2, #32
 8008288:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <HAL_SPI_Transmit+0x2b0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	613b      	str	r3, [r7, #16]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	613b      	str	r3, [r7, #16]
 80082a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <HAL_SPI_Transmit+0x2c2>
  {
    errorcode = HAL_ERROR;
 80082b0:	231f      	movs	r3, #31
 80082b2:	18fb      	adds	r3, r7, r3
 80082b4:	2201      	movs	r2, #1
 80082b6:	701a      	strb	r2, [r3, #0]
 80082b8:	e003      	b.n	80082c2 <HAL_SPI_Transmit+0x2ca>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	225d      	movs	r2, #93	@ 0x5d
 80082be:	2101      	movs	r1, #1
 80082c0:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	225c      	movs	r2, #92	@ 0x5c
 80082c6:	2100      	movs	r1, #0
 80082c8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80082ca:	231f      	movs	r3, #31
 80082cc:	18fb      	adds	r3, r7, r3
 80082ce:	781b      	ldrb	r3, [r3, #0]
}
 80082d0:	0018      	movs	r0, r3
 80082d2:	46bd      	mov	sp, r7
 80082d4:	b008      	add	sp, #32
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	0800d4d8 	.word	0x0800d4d8

080082dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082dc:	b590      	push	{r4, r7, lr}
 80082de:	b089      	sub	sp, #36	@ 0x24
 80082e0:	af02      	add	r7, sp, #8
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	1dbb      	adds	r3, r7, #6
 80082ea:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082ec:	2117      	movs	r1, #23
 80082ee:	187b      	adds	r3, r7, r1
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	225d      	movs	r2, #93	@ 0x5d
 80082f8:	5c9b      	ldrb	r3, [r3, r2]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d003      	beq.n	8008308 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8008300:	187b      	adds	r3, r7, r1
 8008302:	2202      	movs	r2, #2
 8008304:	701a      	strb	r2, [r3, #0]
    goto error;
 8008306:	e12b      	b.n	8008560 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	2382      	movs	r3, #130	@ 0x82
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	429a      	cmp	r2, r3
 8008312:	d113      	bne.n	800833c <HAL_SPI_Receive+0x60>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10f      	bne.n	800833c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	225d      	movs	r2, #93	@ 0x5d
 8008320:	2104      	movs	r1, #4
 8008322:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008324:	1dbb      	adds	r3, r7, #6
 8008326:	881c      	ldrh	r4, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	68b9      	ldr	r1, [r7, #8]
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	0023      	movs	r3, r4
 8008334:	f000 f924 	bl	8008580 <HAL_SPI_TransmitReceive>
 8008338:	0003      	movs	r3, r0
 800833a:	e118      	b.n	800856e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	225c      	movs	r2, #92	@ 0x5c
 8008340:	5c9b      	ldrb	r3, [r3, r2]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d101      	bne.n	800834a <HAL_SPI_Receive+0x6e>
 8008346:	2302      	movs	r3, #2
 8008348:	e111      	b.n	800856e <HAL_SPI_Receive+0x292>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	225c      	movs	r2, #92	@ 0x5c
 800834e:	2101      	movs	r1, #1
 8008350:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008352:	f7fb f907 	bl	8003564 <HAL_GetTick>
 8008356:	0003      	movs	r3, r0
 8008358:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <HAL_SPI_Receive+0x8c>
 8008360:	1dbb      	adds	r3, r7, #6
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d104      	bne.n	8008372 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8008368:	2317      	movs	r3, #23
 800836a:	18fb      	adds	r3, r7, r3
 800836c:	2201      	movs	r2, #1
 800836e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008370:	e0f6      	b.n	8008560 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	225d      	movs	r2, #93	@ 0x5d
 8008376:	2104      	movs	r1, #4
 8008378:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	1dba      	adds	r2, r7, #6
 800838a:	2144      	movs	r1, #68	@ 0x44
 800838c:	8812      	ldrh	r2, [r2, #0]
 800838e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	1dba      	adds	r2, r7, #6
 8008394:	2146      	movs	r1, #70	@ 0x46
 8008396:	8812      	ldrh	r2, [r2, #0]
 8008398:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	23e0      	movs	r3, #224	@ 0xe0
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d908      	bls.n	80083d6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	496a      	ldr	r1, [pc, #424]	@ (8008578 <HAL_SPI_Receive+0x29c>)
 80083d0:	400a      	ands	r2, r1
 80083d2:	605a      	str	r2, [r3, #4]
 80083d4:	e008      	b.n	80083e8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2180      	movs	r1, #128	@ 0x80
 80083e2:	0149      	lsls	r1, r1, #5
 80083e4:	430a      	orrs	r2, r1
 80083e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	2380      	movs	r3, #128	@ 0x80
 80083ee:	021b      	lsls	r3, r3, #8
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d10f      	bne.n	8008414 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2140      	movs	r1, #64	@ 0x40
 8008400:	438a      	bics	r2, r1
 8008402:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	495b      	ldr	r1, [pc, #364]	@ (800857c <HAL_SPI_Receive+0x2a0>)
 8008410:	400a      	ands	r2, r1
 8008412:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2240      	movs	r2, #64	@ 0x40
 800841c:	4013      	ands	r3, r2
 800841e:	2b40      	cmp	r3, #64	@ 0x40
 8008420:	d007      	beq.n	8008432 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2140      	movs	r1, #64	@ 0x40
 800842e:	430a      	orrs	r2, r1
 8008430:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	23e0      	movs	r3, #224	@ 0xe0
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	429a      	cmp	r2, r3
 800843c:	d900      	bls.n	8008440 <HAL_SPI_Receive+0x164>
 800843e:	e071      	b.n	8008524 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008440:	e035      	b.n	80084ae <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	2201      	movs	r2, #1
 800844a:	4013      	ands	r3, r2
 800844c:	2b01      	cmp	r3, #1
 800844e:	d117      	bne.n	8008480 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	330c      	adds	r3, #12
 8008456:	001a      	movs	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845c:	7812      	ldrb	r2, [r2, #0]
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2246      	movs	r2, #70	@ 0x46
 8008470:	5a9b      	ldrh	r3, [r3, r2]
 8008472:	b29b      	uxth	r3, r3
 8008474:	3b01      	subs	r3, #1
 8008476:	b299      	uxth	r1, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2246      	movs	r2, #70	@ 0x46
 800847c:	5299      	strh	r1, [r3, r2]
 800847e:	e016      	b.n	80084ae <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008480:	f7fb f870 	bl	8003564 <HAL_GetTick>
 8008484:	0002      	movs	r2, r0
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	429a      	cmp	r2, r3
 800848e:	d802      	bhi.n	8008496 <HAL_SPI_Receive+0x1ba>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	3301      	adds	r3, #1
 8008494:	d102      	bne.n	800849c <HAL_SPI_Receive+0x1c0>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d108      	bne.n	80084ae <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800849c:	2317      	movs	r3, #23
 800849e:	18fb      	adds	r3, r7, r3
 80084a0:	2203      	movs	r2, #3
 80084a2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	225d      	movs	r2, #93	@ 0x5d
 80084a8:	2101      	movs	r1, #1
 80084aa:	5499      	strb	r1, [r3, r2]
          goto error;
 80084ac:	e058      	b.n	8008560 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2246      	movs	r2, #70	@ 0x46
 80084b2:	5a9b      	ldrh	r3, [r3, r2]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1c3      	bne.n	8008442 <HAL_SPI_Receive+0x166>
 80084ba:	e039      	b.n	8008530 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	2201      	movs	r2, #1
 80084c4:	4013      	ands	r3, r2
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d115      	bne.n	80084f6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68da      	ldr	r2, [r3, #12]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d4:	b292      	uxth	r2, r2
 80084d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084dc:	1c9a      	adds	r2, r3, #2
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2246      	movs	r2, #70	@ 0x46
 80084e6:	5a9b      	ldrh	r3, [r3, r2]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b299      	uxth	r1, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2246      	movs	r2, #70	@ 0x46
 80084f2:	5299      	strh	r1, [r3, r2]
 80084f4:	e016      	b.n	8008524 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084f6:	f7fb f835 	bl	8003564 <HAL_GetTick>
 80084fa:	0002      	movs	r2, r0
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d802      	bhi.n	800850c <HAL_SPI_Receive+0x230>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	3301      	adds	r3, #1
 800850a:	d102      	bne.n	8008512 <HAL_SPI_Receive+0x236>
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d108      	bne.n	8008524 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8008512:	2317      	movs	r3, #23
 8008514:	18fb      	adds	r3, r7, r3
 8008516:	2203      	movs	r2, #3
 8008518:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	225d      	movs	r2, #93	@ 0x5d
 800851e:	2101      	movs	r1, #1
 8008520:	5499      	strb	r1, [r3, r2]
          goto error;
 8008522:	e01d      	b.n	8008560 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2246      	movs	r2, #70	@ 0x46
 8008528:	5a9b      	ldrh	r3, [r3, r2]
 800852a:	b29b      	uxth	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1c5      	bne.n	80084bc <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	0018      	movs	r0, r3
 8008538:	f000 fb42 	bl	8008bc0 <SPI_EndRxTransaction>
 800853c:	1e03      	subs	r3, r0, #0
 800853e:	d002      	beq.n	8008546 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2220      	movs	r2, #32
 8008544:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800854e:	2317      	movs	r3, #23
 8008550:	18fb      	adds	r3, r7, r3
 8008552:	2201      	movs	r2, #1
 8008554:	701a      	strb	r2, [r3, #0]
 8008556:	e003      	b.n	8008560 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	225d      	movs	r2, #93	@ 0x5d
 800855c:	2101      	movs	r1, #1
 800855e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	225c      	movs	r2, #92	@ 0x5c
 8008564:	2100      	movs	r1, #0
 8008566:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008568:	2317      	movs	r3, #23
 800856a:	18fb      	adds	r3, r7, r3
 800856c:	781b      	ldrb	r3, [r3, #0]
}
 800856e:	0018      	movs	r0, r3
 8008570:	46bd      	mov	sp, r7
 8008572:	b007      	add	sp, #28
 8008574:	bd90      	pop	{r4, r7, pc}
 8008576:	46c0      	nop			@ (mov r8, r8)
 8008578:	ffffefff 	.word	0xffffefff
 800857c:	ffffbfff 	.word	0xffffbfff

08008580 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08a      	sub	sp, #40	@ 0x28
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	001a      	movs	r2, r3
 800858e:	1cbb      	adds	r3, r7, #2
 8008590:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008592:	2301      	movs	r3, #1
 8008594:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008596:	2323      	movs	r3, #35	@ 0x23
 8008598:	18fb      	adds	r3, r7, r3
 800859a:	2200      	movs	r2, #0
 800859c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d006      	beq.n	80085b4 <HAL_SPI_TransmitReceive+0x34>
 80085a6:	239d      	movs	r3, #157	@ 0x9d
 80085a8:	00da      	lsls	r2, r3, #3
 80085aa:	4ba1      	ldr	r3, [pc, #644]	@ (8008830 <HAL_SPI_TransmitReceive+0x2b0>)
 80085ac:	0011      	movs	r1, r2
 80085ae:	0018      	movs	r0, r3
 80085b0:	f7fa fd4c 	bl	800304c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	225c      	movs	r2, #92	@ 0x5c
 80085b8:	5c9b      	ldrb	r3, [r3, r2]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d101      	bne.n	80085c2 <HAL_SPI_TransmitReceive+0x42>
 80085be:	2302      	movs	r3, #2
 80085c0:	e1c9      	b.n	8008956 <HAL_SPI_TransmitReceive+0x3d6>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	225c      	movs	r2, #92	@ 0x5c
 80085c6:	2101      	movs	r1, #1
 80085c8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085ca:	f7fa ffcb 	bl	8003564 <HAL_GetTick>
 80085ce:	0003      	movs	r3, r0
 80085d0:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085d2:	201b      	movs	r0, #27
 80085d4:	183b      	adds	r3, r7, r0
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	215d      	movs	r1, #93	@ 0x5d
 80085da:	5c52      	ldrb	r2, [r2, r1]
 80085dc:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80085e4:	2312      	movs	r3, #18
 80085e6:	18fb      	adds	r3, r7, r3
 80085e8:	1cba      	adds	r2, r7, #2
 80085ea:	8812      	ldrh	r2, [r2, #0]
 80085ec:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085ee:	183b      	adds	r3, r7, r0
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d011      	beq.n	800861a <HAL_SPI_TransmitReceive+0x9a>
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	2382      	movs	r3, #130	@ 0x82
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d107      	bne.n	8008610 <HAL_SPI_TransmitReceive+0x90>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d103      	bne.n	8008610 <HAL_SPI_TransmitReceive+0x90>
 8008608:	183b      	adds	r3, r7, r0
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b04      	cmp	r3, #4
 800860e:	d004      	beq.n	800861a <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_BUSY;
 8008610:	2323      	movs	r3, #35	@ 0x23
 8008612:	18fb      	adds	r3, r7, r3
 8008614:	2202      	movs	r2, #2
 8008616:	701a      	strb	r2, [r3, #0]
    goto error;
 8008618:	e196      	b.n	8008948 <HAL_SPI_TransmitReceive+0x3c8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d006      	beq.n	800862e <HAL_SPI_TransmitReceive+0xae>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_SPI_TransmitReceive+0xae>
 8008626:	1cbb      	adds	r3, r7, #2
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d104      	bne.n	8008638 <HAL_SPI_TransmitReceive+0xb8>
  {
    errorcode = HAL_ERROR;
 800862e:	2323      	movs	r3, #35	@ 0x23
 8008630:	18fb      	adds	r3, r7, r3
 8008632:	2201      	movs	r2, #1
 8008634:	701a      	strb	r2, [r3, #0]
    goto error;
 8008636:	e187      	b.n	8008948 <HAL_SPI_TransmitReceive+0x3c8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	225d      	movs	r2, #93	@ 0x5d
 800863c:	5c9b      	ldrb	r3, [r3, r2]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b04      	cmp	r3, #4
 8008642:	d003      	beq.n	800864c <HAL_SPI_TransmitReceive+0xcc>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	225d      	movs	r2, #93	@ 0x5d
 8008648:	2105      	movs	r1, #5
 800864a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	1cba      	adds	r2, r7, #2
 800865c:	2146      	movs	r1, #70	@ 0x46
 800865e:	8812      	ldrh	r2, [r2, #0]
 8008660:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	1cba      	adds	r2, r7, #2
 8008666:	2144      	movs	r1, #68	@ 0x44
 8008668:	8812      	ldrh	r2, [r2, #0]
 800866a:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	1cba      	adds	r2, r7, #2
 8008676:	8812      	ldrh	r2, [r2, #0]
 8008678:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	1cba      	adds	r2, r7, #2
 800867e:	8812      	ldrh	r2, [r2, #0]
 8008680:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	23e0      	movs	r3, #224	@ 0xe0
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	429a      	cmp	r2, r3
 8008698:	d908      	bls.n	80086ac <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4963      	ldr	r1, [pc, #396]	@ (8008834 <HAL_SPI_TransmitReceive+0x2b4>)
 80086a6:	400a      	ands	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
 80086aa:	e008      	b.n	80086be <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2180      	movs	r1, #128	@ 0x80
 80086b8:	0149      	lsls	r1, r1, #5
 80086ba:	430a      	orrs	r2, r1
 80086bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2240      	movs	r2, #64	@ 0x40
 80086c6:	4013      	ands	r3, r2
 80086c8:	2b40      	cmp	r3, #64	@ 0x40
 80086ca:	d007      	beq.n	80086dc <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2140      	movs	r1, #64	@ 0x40
 80086d8:	430a      	orrs	r2, r1
 80086da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68da      	ldr	r2, [r3, #12]
 80086e0:	23e0      	movs	r3, #224	@ 0xe0
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d800      	bhi.n	80086ea <HAL_SPI_TransmitReceive+0x16a>
 80086e8:	e083      	b.n	80087f2 <HAL_SPI_TransmitReceive+0x272>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <HAL_SPI_TransmitReceive+0x17e>
 80086f2:	2312      	movs	r3, #18
 80086f4:	18fb      	adds	r3, r7, r3
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d000      	beq.n	80086fe <HAL_SPI_TransmitReceive+0x17e>
 80086fc:	e06d      	b.n	80087da <HAL_SPI_TransmitReceive+0x25a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008702:	881a      	ldrh	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800870e:	1c9a      	adds	r2, r3, #2
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008718:	b29b      	uxth	r3, r3
 800871a:	3b01      	subs	r3, #1
 800871c:	b29a      	uxth	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008722:	e05a      	b.n	80087da <HAL_SPI_TransmitReceive+0x25a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2202      	movs	r2, #2
 800872c:	4013      	ands	r3, r2
 800872e:	2b02      	cmp	r3, #2
 8008730:	d11b      	bne.n	800876a <HAL_SPI_TransmitReceive+0x1ea>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d016      	beq.n	800876a <HAL_SPI_TransmitReceive+0x1ea>
 800873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873e:	2b01      	cmp	r3, #1
 8008740:	d113      	bne.n	800876a <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008746:	881a      	ldrh	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008752:	1c9a      	adds	r2, r3, #2
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800875c:	b29b      	uxth	r3, r3
 800875e:	3b01      	subs	r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	2201      	movs	r2, #1
 8008772:	4013      	ands	r3, r2
 8008774:	2b01      	cmp	r3, #1
 8008776:	d11c      	bne.n	80087b2 <HAL_SPI_TransmitReceive+0x232>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2246      	movs	r2, #70	@ 0x46
 800877c:	5a9b      	ldrh	r3, [r3, r2]
 800877e:	b29b      	uxth	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d016      	beq.n	80087b2 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878e:	b292      	uxth	r2, r2
 8008790:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008796:	1c9a      	adds	r2, r3, #2
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2246      	movs	r2, #70	@ 0x46
 80087a0:	5a9b      	ldrh	r3, [r3, r2]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b299      	uxth	r1, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2246      	movs	r2, #70	@ 0x46
 80087ac:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087ae:	2301      	movs	r3, #1
 80087b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087b2:	f7fa fed7 	bl	8003564 <HAL_GetTick>
 80087b6:	0002      	movs	r2, r0
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087be:	429a      	cmp	r2, r3
 80087c0:	d80b      	bhi.n	80087da <HAL_SPI_TransmitReceive+0x25a>
 80087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c4:	3301      	adds	r3, #1
 80087c6:	d008      	beq.n	80087da <HAL_SPI_TransmitReceive+0x25a>
      {
        errorcode = HAL_TIMEOUT;
 80087c8:	2323      	movs	r3, #35	@ 0x23
 80087ca:	18fb      	adds	r3, r7, r3
 80087cc:	2203      	movs	r2, #3
 80087ce:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	225d      	movs	r2, #93	@ 0x5d
 80087d4:	2101      	movs	r1, #1
 80087d6:	5499      	strb	r1, [r3, r2]
        goto error;
 80087d8:	e0b6      	b.n	8008948 <HAL_SPI_TransmitReceive+0x3c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087de:	b29b      	uxth	r3, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d19f      	bne.n	8008724 <HAL_SPI_TransmitReceive+0x1a4>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2246      	movs	r2, #70	@ 0x46
 80087e8:	5a9b      	ldrh	r3, [r3, r2]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d199      	bne.n	8008724 <HAL_SPI_TransmitReceive+0x1a4>
 80087f0:	e08e      	b.n	8008910 <HAL_SPI_TransmitReceive+0x390>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <HAL_SPI_TransmitReceive+0x286>
 80087fa:	2312      	movs	r3, #18
 80087fc:	18fb      	adds	r3, r7, r3
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d000      	beq.n	8008806 <HAL_SPI_TransmitReceive+0x286>
 8008804:	e079      	b.n	80088fa <HAL_SPI_TransmitReceive+0x37a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	330c      	adds	r3, #12
 8008810:	7812      	ldrb	r2, [r2, #0]
 8008812:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008822:	b29b      	uxth	r3, r3
 8008824:	3b01      	subs	r3, #1
 8008826:	b29a      	uxth	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800882c:	e065      	b.n	80088fa <HAL_SPI_TransmitReceive+0x37a>
 800882e:	46c0      	nop			@ (mov r8, r8)
 8008830:	0800d4d8 	.word	0x0800d4d8
 8008834:	ffffefff 	.word	0xffffefff
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	2202      	movs	r2, #2
 8008840:	4013      	ands	r3, r2
 8008842:	2b02      	cmp	r3, #2
 8008844:	d11c      	bne.n	8008880 <HAL_SPI_TransmitReceive+0x300>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800884a:	b29b      	uxth	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d017      	beq.n	8008880 <HAL_SPI_TransmitReceive+0x300>
 8008850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008852:	2b01      	cmp	r3, #1
 8008854:	d114      	bne.n	8008880 <HAL_SPI_TransmitReceive+0x300>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	330c      	adds	r3, #12
 8008860:	7812      	ldrb	r2, [r2, #0]
 8008862:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008872:	b29b      	uxth	r3, r3
 8008874:	3b01      	subs	r3, #1
 8008876:	b29a      	uxth	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	2201      	movs	r2, #1
 8008888:	4013      	ands	r3, r2
 800888a:	2b01      	cmp	r3, #1
 800888c:	d11e      	bne.n	80088cc <HAL_SPI_TransmitReceive+0x34c>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2246      	movs	r2, #70	@ 0x46
 8008892:	5a9b      	ldrh	r3, [r3, r2]
 8008894:	b29b      	uxth	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d018      	beq.n	80088cc <HAL_SPI_TransmitReceive+0x34c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	330c      	adds	r3, #12
 80088a0:	001a      	movs	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a6:	7812      	ldrb	r2, [r2, #0]
 80088a8:	b2d2      	uxtb	r2, r2
 80088aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2246      	movs	r2, #70	@ 0x46
 80088ba:	5a9b      	ldrh	r3, [r3, r2]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	3b01      	subs	r3, #1
 80088c0:	b299      	uxth	r1, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2246      	movs	r2, #70	@ 0x46
 80088c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088c8:	2301      	movs	r3, #1
 80088ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80088cc:	f7fa fe4a 	bl	8003564 <HAL_GetTick>
 80088d0:	0002      	movs	r2, r0
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088d8:	429a      	cmp	r2, r3
 80088da:	d802      	bhi.n	80088e2 <HAL_SPI_TransmitReceive+0x362>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	3301      	adds	r3, #1
 80088e0:	d102      	bne.n	80088e8 <HAL_SPI_TransmitReceive+0x368>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d108      	bne.n	80088fa <HAL_SPI_TransmitReceive+0x37a>
      {
        errorcode = HAL_TIMEOUT;
 80088e8:	2323      	movs	r3, #35	@ 0x23
 80088ea:	18fb      	adds	r3, r7, r3
 80088ec:	2203      	movs	r2, #3
 80088ee:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	225d      	movs	r2, #93	@ 0x5d
 80088f4:	2101      	movs	r1, #1
 80088f6:	5499      	strb	r1, [r3, r2]
        goto error;
 80088f8:	e026      	b.n	8008948 <HAL_SPI_TransmitReceive+0x3c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088fe:	b29b      	uxth	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d199      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x2b8>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2246      	movs	r2, #70	@ 0x46
 8008908:	5a9b      	ldrh	r3, [r3, r2]
 800890a:	b29b      	uxth	r3, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	d193      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x2b8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	0018      	movs	r0, r3
 8008918:	f000 f9b0 	bl	8008c7c <SPI_EndRxTxTransaction>
 800891c:	1e03      	subs	r3, r0, #0
 800891e:	d006      	beq.n	800892e <HAL_SPI_TransmitReceive+0x3ae>
  {
    errorcode = HAL_ERROR;
 8008920:	2323      	movs	r3, #35	@ 0x23
 8008922:	18fb      	adds	r3, r7, r3
 8008924:	2201      	movs	r2, #1
 8008926:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2220      	movs	r2, #32
 800892c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <HAL_SPI_TransmitReceive+0x3c0>
  {
    errorcode = HAL_ERROR;
 8008936:	2323      	movs	r3, #35	@ 0x23
 8008938:	18fb      	adds	r3, r7, r3
 800893a:	2201      	movs	r2, #1
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	e003      	b.n	8008948 <HAL_SPI_TransmitReceive+0x3c8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	225d      	movs	r2, #93	@ 0x5d
 8008944:	2101      	movs	r1, #1
 8008946:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	225c      	movs	r2, #92	@ 0x5c
 800894c:	2100      	movs	r1, #0
 800894e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008950:	2323      	movs	r3, #35	@ 0x23
 8008952:	18fb      	adds	r3, r7, r3
 8008954:	781b      	ldrb	r3, [r3, #0]
}
 8008956:	0018      	movs	r0, r3
 8008958:	46bd      	mov	sp, r7
 800895a:	b00a      	add	sp, #40	@ 0x28
 800895c:	bd80      	pop	{r7, pc}
 800895e:	46c0      	nop			@ (mov r8, r8)

08008960 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	1dfb      	adds	r3, r7, #7
 800896e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008970:	f7fa fdf8 	bl	8003564 <HAL_GetTick>
 8008974:	0002      	movs	r2, r0
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	1a9b      	subs	r3, r3, r2
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	18d3      	adds	r3, r2, r3
 800897e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008980:	f7fa fdf0 	bl	8003564 <HAL_GetTick>
 8008984:	0003      	movs	r3, r0
 8008986:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008988:	4b3a      	ldr	r3, [pc, #232]	@ (8008a74 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	015b      	lsls	r3, r3, #5
 800898e:	0d1b      	lsrs	r3, r3, #20
 8008990:	69fa      	ldr	r2, [r7, #28]
 8008992:	4353      	muls	r3, r2
 8008994:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008996:	e058      	b.n	8008a4a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	3301      	adds	r3, #1
 800899c:	d055      	beq.n	8008a4a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800899e:	f7fa fde1 	bl	8003564 <HAL_GetTick>
 80089a2:	0002      	movs	r2, r0
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d902      	bls.n	80089b4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d142      	bne.n	8008a3a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	21e0      	movs	r1, #224	@ 0xe0
 80089c0:	438a      	bics	r2, r1
 80089c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	2382      	movs	r3, #130	@ 0x82
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d113      	bne.n	80089f8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	689a      	ldr	r2, [r3, #8]
 80089d4:	2380      	movs	r3, #128	@ 0x80
 80089d6:	021b      	lsls	r3, r3, #8
 80089d8:	429a      	cmp	r2, r3
 80089da:	d005      	beq.n	80089e8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	2380      	movs	r3, #128	@ 0x80
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d107      	bne.n	80089f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2140      	movs	r1, #64	@ 0x40
 80089f4:	438a      	bics	r2, r1
 80089f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089fc:	2380      	movs	r3, #128	@ 0x80
 80089fe:	019b      	lsls	r3, r3, #6
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d110      	bne.n	8008a26 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	491a      	ldr	r1, [pc, #104]	@ (8008a78 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008a10:	400a      	ands	r2, r1
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2180      	movs	r1, #128	@ 0x80
 8008a20:	0189      	lsls	r1, r1, #6
 8008a22:	430a      	orrs	r2, r1
 8008a24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	225d      	movs	r2, #93	@ 0x5d
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	225c      	movs	r2, #92	@ 0x5c
 8008a32:	2100      	movs	r1, #0
 8008a34:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e017      	b.n	8008a6a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	4013      	ands	r3, r2
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	425a      	negs	r2, r3
 8008a5a:	4153      	adcs	r3, r2
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	001a      	movs	r2, r3
 8008a60:	1dfb      	adds	r3, r7, #7
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d197      	bne.n	8008998 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	b008      	add	sp, #32
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	46c0      	nop			@ (mov r8, r8)
 8008a74:	20000014 	.word	0x20000014
 8008a78:	ffffdfff 	.word	0xffffdfff

08008a7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08a      	sub	sp, #40	@ 0x28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008a8a:	2317      	movs	r3, #23
 8008a8c:	18fb      	adds	r3, r7, r3
 8008a8e:	2200      	movs	r2, #0
 8008a90:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a92:	f7fa fd67 	bl	8003564 <HAL_GetTick>
 8008a96:	0002      	movs	r2, r0
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	18d3      	adds	r3, r2, r3
 8008aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008aa2:	f7fa fd5f 	bl	8003564 <HAL_GetTick>
 8008aa6:	0003      	movs	r3, r0
 8008aa8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	330c      	adds	r3, #12
 8008ab0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008ab2:	4b41      	ldr	r3, [pc, #260]	@ (8008bb8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	0013      	movs	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	189b      	adds	r3, r3, r2
 8008abc:	00da      	lsls	r2, r3, #3
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	0d1b      	lsrs	r3, r3, #20
 8008ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac4:	4353      	muls	r3, r2
 8008ac6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008ac8:	e068      	b.n	8008b9c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	23c0      	movs	r3, #192	@ 0xc0
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d10a      	bne.n	8008aea <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d107      	bne.n	8008aea <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	2117      	movs	r1, #23
 8008ae2:	187b      	adds	r3, r7, r1
 8008ae4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008ae6:	187b      	adds	r3, r7, r1
 8008ae8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	3301      	adds	r3, #1
 8008aee:	d055      	beq.n	8008b9c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008af0:	f7fa fd38 	bl	8003564 <HAL_GetTick>
 8008af4:	0002      	movs	r2, r0
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d902      	bls.n	8008b06 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d142      	bne.n	8008b8c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	21e0      	movs	r1, #224	@ 0xe0
 8008b12:	438a      	bics	r2, r1
 8008b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	2382      	movs	r3, #130	@ 0x82
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d113      	bne.n	8008b4a <SPI_WaitFifoStateUntilTimeout+0xce>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	2380      	movs	r3, #128	@ 0x80
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d005      	beq.n	8008b3a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689a      	ldr	r2, [r3, #8]
 8008b32:	2380      	movs	r3, #128	@ 0x80
 8008b34:	00db      	lsls	r3, r3, #3
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d107      	bne.n	8008b4a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2140      	movs	r1, #64	@ 0x40
 8008b46:	438a      	bics	r2, r1
 8008b48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b4e:	2380      	movs	r3, #128	@ 0x80
 8008b50:	019b      	lsls	r3, r3, #6
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d110      	bne.n	8008b78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4916      	ldr	r1, [pc, #88]	@ (8008bbc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008b62:	400a      	ands	r2, r1
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2180      	movs	r1, #128	@ 0x80
 8008b72:	0189      	lsls	r1, r1, #6
 8008b74:	430a      	orrs	r2, r1
 8008b76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	225d      	movs	r2, #93	@ 0x5d
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	225c      	movs	r2, #92	@ 0x5c
 8008b84:	2100      	movs	r1, #0
 8008b86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e010      	b.n	8008bae <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d18e      	bne.n	8008aca <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	0018      	movs	r0, r3
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	b00a      	add	sp, #40	@ 0x28
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	46c0      	nop			@ (mov r8, r8)
 8008bb8:	20000014 	.word	0x20000014
 8008bbc:	ffffdfff 	.word	0xffffdfff

08008bc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	2382      	movs	r3, #130	@ 0x82
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d113      	bne.n	8008c00 <SPI_EndRxTransaction+0x40>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	2380      	movs	r3, #128	@ 0x80
 8008bde:	021b      	lsls	r3, r3, #8
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d005      	beq.n	8008bf0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	2380      	movs	r3, #128	@ 0x80
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d107      	bne.n	8008c00 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2140      	movs	r1, #64	@ 0x40
 8008bfc:	438a      	bics	r2, r1
 8008bfe:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	0013      	movs	r3, r2
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2180      	movs	r1, #128	@ 0x80
 8008c0e:	f7ff fea7 	bl	8008960 <SPI_WaitFlagStateUntilTimeout>
 8008c12:	1e03      	subs	r3, r0, #0
 8008c14:	d007      	beq.n	8008c26 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e026      	b.n	8008c74 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	2382      	movs	r3, #130	@ 0x82
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d11f      	bne.n	8008c72 <SPI_EndRxTransaction+0xb2>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	689a      	ldr	r2, [r3, #8]
 8008c36:	2380      	movs	r3, #128	@ 0x80
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d005      	beq.n	8008c4a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	689a      	ldr	r2, [r3, #8]
 8008c42:	2380      	movs	r3, #128	@ 0x80
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d113      	bne.n	8008c72 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	23c0      	movs	r3, #192	@ 0xc0
 8008c4e:	00d9      	lsls	r1, r3, #3
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	0013      	movs	r3, r2
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f7ff ff0f 	bl	8008a7c <SPI_WaitFifoStateUntilTimeout>
 8008c5e:	1e03      	subs	r3, r0, #0
 8008c60:	d007      	beq.n	8008c72 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c66:	2220      	movs	r2, #32
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e000      	b.n	8008c74 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	0018      	movs	r0, r3
 8008c76:	46bd      	mov	sp, r7
 8008c78:	b004      	add	sp, #16
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af02      	add	r7, sp, #8
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	23c0      	movs	r3, #192	@ 0xc0
 8008c8c:	0159      	lsls	r1, r3, #5
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	0013      	movs	r3, r2
 8008c96:	2200      	movs	r2, #0
 8008c98:	f7ff fef0 	bl	8008a7c <SPI_WaitFifoStateUntilTimeout>
 8008c9c:	1e03      	subs	r3, r0, #0
 8008c9e:	d007      	beq.n	8008cb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e027      	b.n	8008d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	0013      	movs	r3, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2180      	movs	r1, #128	@ 0x80
 8008cbe:	f7ff fe4f 	bl	8008960 <SPI_WaitFlagStateUntilTimeout>
 8008cc2:	1e03      	subs	r3, r0, #0
 8008cc4:	d007      	beq.n	8008cd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cca:	2220      	movs	r2, #32
 8008ccc:	431a      	orrs	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e014      	b.n	8008d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	23c0      	movs	r3, #192	@ 0xc0
 8008cda:	00d9      	lsls	r1, r3, #3
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	0013      	movs	r3, r2
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f7ff fec9 	bl	8008a7c <SPI_WaitFifoStateUntilTimeout>
 8008cea:	1e03      	subs	r3, r0, #0
 8008cec:	d007      	beq.n	8008cfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e000      	b.n	8008d00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	0018      	movs	r0, r3
 8008d02:	46bd      	mov	sp, r7
 8008d04:	b004      	add	sp, #16
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e096      	b.n	8008e48 <HAL_UART_Init+0x140>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d025      	beq.n	8008d6e <HAL_UART_Init+0x66>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a4a      	ldr	r2, [pc, #296]	@ (8008e50 <HAL_UART_Init+0x148>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d046      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a48      	ldr	r2, [pc, #288]	@ (8008e54 <HAL_UART_Init+0x14c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d041      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a47      	ldr	r2, [pc, #284]	@ (8008e58 <HAL_UART_Init+0x150>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d03c      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a45      	ldr	r2, [pc, #276]	@ (8008e5c <HAL_UART_Init+0x154>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d037      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a44      	ldr	r2, [pc, #272]	@ (8008e60 <HAL_UART_Init+0x158>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d032      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a42      	ldr	r2, [pc, #264]	@ (8008e64 <HAL_UART_Init+0x15c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d02d      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008d5e:	23a0      	movs	r3, #160	@ 0xa0
 8008d60:	005a      	lsls	r2, r3, #1
 8008d62:	4b41      	ldr	r3, [pc, #260]	@ (8008e68 <HAL_UART_Init+0x160>)
 8008d64:	0011      	movs	r1, r2
 8008d66:	0018      	movs	r0, r3
 8008d68:	f7fa f970 	bl	800304c <assert_failed>
 8008d6c:	e025      	b.n	8008dba <HAL_UART_Init+0xb2>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a37      	ldr	r2, [pc, #220]	@ (8008e50 <HAL_UART_Init+0x148>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d020      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a35      	ldr	r2, [pc, #212]	@ (8008e54 <HAL_UART_Init+0x14c>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d01b      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a34      	ldr	r2, [pc, #208]	@ (8008e58 <HAL_UART_Init+0x150>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d016      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a32      	ldr	r2, [pc, #200]	@ (8008e5c <HAL_UART_Init+0x154>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d011      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a31      	ldr	r2, [pc, #196]	@ (8008e60 <HAL_UART_Init+0x158>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00c      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a2f      	ldr	r2, [pc, #188]	@ (8008e64 <HAL_UART_Init+0x15c>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d007      	beq.n	8008dba <HAL_UART_Init+0xb2>
 8008daa:	2346      	movs	r3, #70	@ 0x46
 8008dac:	33ff      	adds	r3, #255	@ 0xff
 8008dae:	001a      	movs	r2, r3
 8008db0:	4b2d      	ldr	r3, [pc, #180]	@ (8008e68 <HAL_UART_Init+0x160>)
 8008db2:	0011      	movs	r1, r2
 8008db4:	0018      	movs	r0, r3
 8008db6:	f7fa f949 	bl	800304c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2288      	movs	r2, #136	@ 0x88
 8008dbe:	589b      	ldr	r3, [r3, r2]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d107      	bne.n	8008dd4 <HAL_UART_Init+0xcc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2284      	movs	r2, #132	@ 0x84
 8008dc8:	2100      	movs	r1, #0
 8008dca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	0018      	movs	r0, r3
 8008dd0:	f7fa facc 	bl	800336c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2288      	movs	r2, #136	@ 0x88
 8008dd8:	2124      	movs	r1, #36	@ 0x24
 8008dda:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2101      	movs	r1, #1
 8008de8:	438a      	bics	r2, r1
 8008dea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <HAL_UART_Init+0xf4>
  {
    UART_AdvFeatureConfig(huart);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	0018      	movs	r0, r3
 8008df8:	f000 fba4 	bl	8009544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f000 f8da 	bl	8008fb8 <UART_SetConfig>
 8008e04:	0003      	movs	r3, r0
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d101      	bne.n	8008e0e <HAL_UART_Init+0x106>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e01c      	b.n	8008e48 <HAL_UART_Init+0x140>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4914      	ldr	r1, [pc, #80]	@ (8008e6c <HAL_UART_Init+0x164>)
 8008e1a:	400a      	ands	r2, r1
 8008e1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	212a      	movs	r1, #42	@ 0x2a
 8008e2a:	438a      	bics	r2, r1
 8008e2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2101      	movs	r1, #1
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	0018      	movs	r0, r3
 8008e42:	f000 fd05 	bl	8009850 <UART_CheckIdleState>
 8008e46:	0003      	movs	r3, r0
}
 8008e48:	0018      	movs	r0, r3
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	b002      	add	sp, #8
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	40013800 	.word	0x40013800
 8008e54:	40004400 	.word	0x40004400
 8008e58:	40004800 	.word	0x40004800
 8008e5c:	40004c00 	.word	0x40004c00
 8008e60:	40008000 	.word	0x40008000
 8008e64:	40008400 	.word	0x40008400
 8008e68:	0800d510 	.word	0x0800d510
 8008e6c:	ffffb7ff 	.word	0xffffb7ff

08008e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08a      	sub	sp, #40	@ 0x28
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	1dbb      	adds	r3, r7, #6
 8008e7e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2288      	movs	r2, #136	@ 0x88
 8008e84:	589b      	ldr	r3, [r3, r2]
 8008e86:	2b20      	cmp	r3, #32
 8008e88:	d000      	beq.n	8008e8c <HAL_UART_Transmit+0x1c>
 8008e8a:	e090      	b.n	8008fae <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_UART_Transmit+0x2a>
 8008e92:	1dbb      	adds	r3, r7, #6
 8008e94:	881b      	ldrh	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e088      	b.n	8008fb0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	689a      	ldr	r2, [r3, #8]
 8008ea2:	2380      	movs	r3, #128	@ 0x80
 8008ea4:	015b      	lsls	r3, r3, #5
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d109      	bne.n	8008ebe <HAL_UART_Transmit+0x4e>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d105      	bne.n	8008ebe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	d001      	beq.n	8008ebe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e078      	b.n	8008fb0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2290      	movs	r2, #144	@ 0x90
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2288      	movs	r2, #136	@ 0x88
 8008eca:	2121      	movs	r1, #33	@ 0x21
 8008ecc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ece:	f7fa fb49 	bl	8003564 <HAL_GetTick>
 8008ed2:	0003      	movs	r3, r0
 8008ed4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	1dba      	adds	r2, r7, #6
 8008eda:	2154      	movs	r1, #84	@ 0x54
 8008edc:	8812      	ldrh	r2, [r2, #0]
 8008ede:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	1dba      	adds	r2, r7, #6
 8008ee4:	2156      	movs	r1, #86	@ 0x56
 8008ee6:	8812      	ldrh	r2, [r2, #0]
 8008ee8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	689a      	ldr	r2, [r3, #8]
 8008eee:	2380      	movs	r3, #128	@ 0x80
 8008ef0:	015b      	lsls	r3, r3, #5
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d108      	bne.n	8008f08 <HAL_UART_Transmit+0x98>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d104      	bne.n	8008f08 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	61bb      	str	r3, [r7, #24]
 8008f06:	e003      	b.n	8008f10 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f10:	e030      	b.n	8008f74 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	0013      	movs	r3, r2
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	2180      	movs	r1, #128	@ 0x80
 8008f20:	f000 fd40 	bl	80099a4 <UART_WaitOnFlagUntilTimeout>
 8008f24:	1e03      	subs	r3, r0, #0
 8008f26:	d005      	beq.n	8008f34 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2288      	movs	r2, #136	@ 0x88
 8008f2c:	2120      	movs	r1, #32
 8008f2e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e03d      	b.n	8008fb0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10b      	bne.n	8008f52 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	001a      	movs	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	05d2      	lsls	r2, r2, #23
 8008f46:	0dd2      	lsrs	r2, r2, #23
 8008f48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	3302      	adds	r3, #2
 8008f4e:	61bb      	str	r3, [r7, #24]
 8008f50:	e007      	b.n	8008f62 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2256      	movs	r2, #86	@ 0x56
 8008f66:	5a9b      	ldrh	r3, [r3, r2]
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	b299      	uxth	r1, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2256      	movs	r2, #86	@ 0x56
 8008f72:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2256      	movs	r2, #86	@ 0x56
 8008f78:	5a9b      	ldrh	r3, [r3, r2]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1c8      	bne.n	8008f12 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	0013      	movs	r3, r2
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2140      	movs	r1, #64	@ 0x40
 8008f8e:	f000 fd09 	bl	80099a4 <UART_WaitOnFlagUntilTimeout>
 8008f92:	1e03      	subs	r3, r0, #0
 8008f94:	d005      	beq.n	8008fa2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2288      	movs	r2, #136	@ 0x88
 8008f9a:	2120      	movs	r1, #32
 8008f9c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e006      	b.n	8008fb0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2288      	movs	r2, #136	@ 0x88
 8008fa6:	2120      	movs	r1, #32
 8008fa8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	e000      	b.n	8008fb0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8008fae:	2302      	movs	r3, #2
  }
}
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	b008      	add	sp, #32
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fb8:	b5b0      	push	{r4, r5, r7, lr}
 8008fba:	b092      	sub	sp, #72	@ 0x48
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fc0:	231f      	movs	r3, #31
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	189b      	adds	r3, r3, r2
 8008fc6:	19db      	adds	r3, r3, r7
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	4ab6      	ldr	r2, [pc, #728]	@ (80092ac <UART_SetConfig+0x2f4>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d905      	bls.n	8008fe2 <UART_SetConfig+0x2a>
 8008fd6:	4ab6      	ldr	r2, [pc, #728]	@ (80092b0 <UART_SetConfig+0x2f8>)
 8008fd8:	4bb6      	ldr	r3, [pc, #728]	@ (80092b4 <UART_SetConfig+0x2fc>)
 8008fda:	0011      	movs	r1, r2
 8008fdc:	0018      	movs	r0, r3
 8008fde:	f7fa f835 	bl	800304c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe4:	689a      	ldr	r2, [r3, #8]
 8008fe6:	2380      	movs	r3, #128	@ 0x80
 8008fe8:	055b      	lsls	r3, r3, #21
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d00f      	beq.n	800900e <UART_SetConfig+0x56>
 8008fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00b      	beq.n	800900e <UART_SetConfig+0x56>
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	2380      	movs	r3, #128	@ 0x80
 8008ffc:	015b      	lsls	r3, r3, #5
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d005      	beq.n	800900e <UART_SetConfig+0x56>
 8009002:	4aad      	ldr	r2, [pc, #692]	@ (80092b8 <UART_SetConfig+0x300>)
 8009004:	4bab      	ldr	r3, [pc, #684]	@ (80092b4 <UART_SetConfig+0x2fc>)
 8009006:	0011      	movs	r1, r2
 8009008:	0018      	movs	r0, r3
 800900a:	f7fa f81f 	bl	800304c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800900e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4aaa      	ldr	r2, [pc, #680]	@ (80092bc <UART_SetConfig+0x304>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d004      	beq.n	8009022 <UART_SetConfig+0x6a>
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4aa8      	ldr	r2, [pc, #672]	@ (80092c0 <UART_SetConfig+0x308>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d110      	bne.n	8009044 <UART_SetConfig+0x8c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8009022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d038      	beq.n	800909c <UART_SetConfig+0xe4>
 800902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902c:	68da      	ldr	r2, [r3, #12]
 800902e:	2380      	movs	r3, #128	@ 0x80
 8009030:	019b      	lsls	r3, r3, #6
 8009032:	429a      	cmp	r2, r3
 8009034:	d032      	beq.n	800909c <UART_SetConfig+0xe4>
 8009036:	4aa3      	ldr	r2, [pc, #652]	@ (80092c4 <UART_SetConfig+0x30c>)
 8009038:	4b9e      	ldr	r3, [pc, #632]	@ (80092b4 <UART_SetConfig+0x2fc>)
 800903a:	0011      	movs	r1, r2
 800903c:	0018      	movs	r0, r3
 800903e:	f7fa f805 	bl	800304c <assert_failed>
 8009042:	e02b      	b.n	800909c <UART_SetConfig+0xe4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009046:	68da      	ldr	r2, [r3, #12]
 8009048:	2380      	movs	r3, #128	@ 0x80
 800904a:	015b      	lsls	r3, r3, #5
 800904c:	429a      	cmp	r2, r3
 800904e:	d015      	beq.n	800907c <UART_SetConfig+0xc4>
 8009050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d011      	beq.n	800907c <UART_SetConfig+0xc4>
 8009058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	23c0      	movs	r3, #192	@ 0xc0
 800905e:	019b      	lsls	r3, r3, #6
 8009060:	429a      	cmp	r2, r3
 8009062:	d00b      	beq.n	800907c <UART_SetConfig+0xc4>
 8009064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009066:	68da      	ldr	r2, [r3, #12]
 8009068:	2380      	movs	r3, #128	@ 0x80
 800906a:	019b      	lsls	r3, r3, #6
 800906c:	429a      	cmp	r2, r3
 800906e:	d005      	beq.n	800907c <UART_SetConfig+0xc4>
 8009070:	4a95      	ldr	r2, [pc, #596]	@ (80092c8 <UART_SetConfig+0x310>)
 8009072:	4b90      	ldr	r3, [pc, #576]	@ (80092b4 <UART_SetConfig+0x2fc>)
 8009074:	0011      	movs	r1, r2
 8009076:	0018      	movs	r0, r3
 8009078:	f7f9 ffe8 	bl	800304c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800907c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00b      	beq.n	800909c <UART_SetConfig+0xe4>
 8009084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009086:	6a1a      	ldr	r2, [r3, #32]
 8009088:	2380      	movs	r3, #128	@ 0x80
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	429a      	cmp	r2, r3
 800908e:	d005      	beq.n	800909c <UART_SetConfig+0xe4>
 8009090:	4a8e      	ldr	r2, [pc, #568]	@ (80092cc <UART_SetConfig+0x314>)
 8009092:	4b88      	ldr	r3, [pc, #544]	@ (80092b4 <UART_SetConfig+0x2fc>)
 8009094:	0011      	movs	r1, r2
 8009096:	0018      	movs	r0, r3
 8009098:	f7f9 ffd8 	bl	800304c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800909c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d011      	beq.n	80090c8 <UART_SetConfig+0x110>
 80090a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	2380      	movs	r3, #128	@ 0x80
 80090aa:	00db      	lsls	r3, r3, #3
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d00b      	beq.n	80090c8 <UART_SetConfig+0x110>
 80090b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b2:	691a      	ldr	r2, [r3, #16]
 80090b4:	23c0      	movs	r3, #192	@ 0xc0
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d005      	beq.n	80090c8 <UART_SetConfig+0x110>
 80090bc:	4a84      	ldr	r2, [pc, #528]	@ (80092d0 <UART_SetConfig+0x318>)
 80090be:	4b7d      	ldr	r3, [pc, #500]	@ (80092b4 <UART_SetConfig+0x2fc>)
 80090c0:	0011      	movs	r1, r2
 80090c2:	0018      	movs	r0, r3
 80090c4:	f7f9 ffc2 	bl	800304c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80090c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ca:	695b      	ldr	r3, [r3, #20]
 80090cc:	220c      	movs	r2, #12
 80090ce:	4393      	bics	r3, r2
 80090d0:	d103      	bne.n	80090da <UART_SetConfig+0x122>
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d105      	bne.n	80090e6 <UART_SetConfig+0x12e>
 80090da:	4a7e      	ldr	r2, [pc, #504]	@ (80092d4 <UART_SetConfig+0x31c>)
 80090dc:	4b75      	ldr	r3, [pc, #468]	@ (80092b4 <UART_SetConfig+0x2fc>)
 80090de:	0011      	movs	r1, r2
 80090e0:	0018      	movs	r0, r3
 80090e2:	f7f9 ffb3 	bl	800304c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d017      	beq.n	800911e <UART_SetConfig+0x166>
 80090ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	2380      	movs	r3, #128	@ 0x80
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d011      	beq.n	800911e <UART_SetConfig+0x166>
 80090fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fc:	699a      	ldr	r2, [r3, #24]
 80090fe:	2380      	movs	r3, #128	@ 0x80
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	429a      	cmp	r2, r3
 8009104:	d00b      	beq.n	800911e <UART_SetConfig+0x166>
 8009106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	23c0      	movs	r3, #192	@ 0xc0
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	429a      	cmp	r2, r3
 8009110:	d005      	beq.n	800911e <UART_SetConfig+0x166>
 8009112:	4a71      	ldr	r2, [pc, #452]	@ (80092d8 <UART_SetConfig+0x320>)
 8009114:	4b67      	ldr	r3, [pc, #412]	@ (80092b4 <UART_SetConfig+0x2fc>)
 8009116:	0011      	movs	r1, r2
 8009118:	0018      	movs	r0, r3
 800911a:	f7f9 ff97 	bl	800304c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800911e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00b      	beq.n	800913e <UART_SetConfig+0x186>
 8009126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009128:	69da      	ldr	r2, [r3, #28]
 800912a:	2380      	movs	r3, #128	@ 0x80
 800912c:	021b      	lsls	r3, r3, #8
 800912e:	429a      	cmp	r2, r3
 8009130:	d005      	beq.n	800913e <UART_SetConfig+0x186>
 8009132:	4a6a      	ldr	r2, [pc, #424]	@ (80092dc <UART_SetConfig+0x324>)
 8009134:	4b5f      	ldr	r3, [pc, #380]	@ (80092b4 <UART_SetConfig+0x2fc>)
 8009136:	0011      	movs	r1, r2
 8009138:	0018      	movs	r0, r3
 800913a:	f7f9 ff87 	bl	800304c <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009142:	2b00      	cmp	r3, #0
 8009144:	d031      	beq.n	80091aa <UART_SetConfig+0x1f2>
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914a:	2b01      	cmp	r3, #1
 800914c:	d02d      	beq.n	80091aa <UART_SetConfig+0x1f2>
 800914e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009152:	2b02      	cmp	r3, #2
 8009154:	d029      	beq.n	80091aa <UART_SetConfig+0x1f2>
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915a:	2b03      	cmp	r3, #3
 800915c:	d025      	beq.n	80091aa <UART_SetConfig+0x1f2>
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009162:	2b04      	cmp	r3, #4
 8009164:	d021      	beq.n	80091aa <UART_SetConfig+0x1f2>
 8009166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916a:	2b05      	cmp	r3, #5
 800916c:	d01d      	beq.n	80091aa <UART_SetConfig+0x1f2>
 800916e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009172:	2b06      	cmp	r3, #6
 8009174:	d019      	beq.n	80091aa <UART_SetConfig+0x1f2>
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917a:	2b07      	cmp	r3, #7
 800917c:	d015      	beq.n	80091aa <UART_SetConfig+0x1f2>
 800917e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009182:	2b08      	cmp	r3, #8
 8009184:	d011      	beq.n	80091aa <UART_SetConfig+0x1f2>
 8009186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918a:	2b09      	cmp	r3, #9
 800918c:	d00d      	beq.n	80091aa <UART_SetConfig+0x1f2>
 800918e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009192:	2b0a      	cmp	r3, #10
 8009194:	d009      	beq.n	80091aa <UART_SetConfig+0x1f2>
 8009196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800919a:	2b0b      	cmp	r3, #11
 800919c:	d005      	beq.n	80091aa <UART_SetConfig+0x1f2>
 800919e:	4a50      	ldr	r2, [pc, #320]	@ (80092e0 <UART_SetConfig+0x328>)
 80091a0:	4b44      	ldr	r3, [pc, #272]	@ (80092b4 <UART_SetConfig+0x2fc>)
 80091a2:	0011      	movs	r1, r2
 80091a4:	0018      	movs	r0, r3
 80091a6:	f7f9 ff51 	bl	800304c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	431a      	orrs	r2, r3
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	431a      	orrs	r2, r3
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	4313      	orrs	r3, r2
 80091c0:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a46      	ldr	r2, [pc, #280]	@ (80092e4 <UART_SetConfig+0x32c>)
 80091ca:	4013      	ands	r3, r2
 80091cc:	0019      	movs	r1, r3
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091d4:	430b      	orrs	r3, r1
 80091d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4a42      	ldr	r2, [pc, #264]	@ (80092e8 <UART_SetConfig+0x330>)
 80091e0:	4013      	ands	r3, r2
 80091e2:	0018      	movs	r0, r3
 80091e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e6:	68d9      	ldr	r1, [r3, #12]
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	0003      	movs	r3, r0
 80091ee:	430b      	orrs	r3, r1
 80091f0:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a2f      	ldr	r2, [pc, #188]	@ (80092bc <UART_SetConfig+0x304>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d009      	beq.n	8009216 <UART_SetConfig+0x25e>
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a2e      	ldr	r2, [pc, #184]	@ (80092c0 <UART_SetConfig+0x308>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d004      	beq.n	8009216 <UART_SetConfig+0x25e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009212:	4313      	orrs	r3, r2
 8009214:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	4a33      	ldr	r2, [pc, #204]	@ (80092ec <UART_SetConfig+0x334>)
 800921e:	4013      	ands	r3, r2
 8009220:	0019      	movs	r1, r3
 8009222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009228:	430b      	orrs	r3, r1
 800922a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800922c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009232:	220f      	movs	r2, #15
 8009234:	4393      	bics	r3, r2
 8009236:	0018      	movs	r0, r3
 8009238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	0003      	movs	r3, r0
 8009242:	430b      	orrs	r3, r1
 8009244:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a29      	ldr	r2, [pc, #164]	@ (80092f0 <UART_SetConfig+0x338>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d102      	bne.n	8009256 <UART_SetConfig+0x29e>
 8009250:	2301      	movs	r3, #1
 8009252:	643b      	str	r3, [r7, #64]	@ 0x40
 8009254:	e056      	b.n	8009304 <UART_SetConfig+0x34c>
 8009256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a26      	ldr	r2, [pc, #152]	@ (80092f4 <UART_SetConfig+0x33c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d102      	bne.n	8009266 <UART_SetConfig+0x2ae>
 8009260:	2302      	movs	r3, #2
 8009262:	643b      	str	r3, [r7, #64]	@ 0x40
 8009264:	e04e      	b.n	8009304 <UART_SetConfig+0x34c>
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a23      	ldr	r2, [pc, #140]	@ (80092f8 <UART_SetConfig+0x340>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d103      	bne.n	8009278 <UART_SetConfig+0x2c0>
 8009270:	2380      	movs	r3, #128	@ 0x80
 8009272:	025b      	lsls	r3, r3, #9
 8009274:	643b      	str	r3, [r7, #64]	@ 0x40
 8009276:	e045      	b.n	8009304 <UART_SetConfig+0x34c>
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a1f      	ldr	r2, [pc, #124]	@ (80092fc <UART_SetConfig+0x344>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d103      	bne.n	800928a <UART_SetConfig+0x2d2>
 8009282:	2380      	movs	r3, #128	@ 0x80
 8009284:	029b      	lsls	r3, r3, #10
 8009286:	643b      	str	r3, [r7, #64]	@ 0x40
 8009288:	e03c      	b.n	8009304 <UART_SetConfig+0x34c>
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a0b      	ldr	r2, [pc, #44]	@ (80092bc <UART_SetConfig+0x304>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d102      	bne.n	800929a <UART_SetConfig+0x2e2>
 8009294:	2310      	movs	r3, #16
 8009296:	643b      	str	r3, [r7, #64]	@ 0x40
 8009298:	e034      	b.n	8009304 <UART_SetConfig+0x34c>
 800929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a08      	ldr	r2, [pc, #32]	@ (80092c0 <UART_SetConfig+0x308>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d12d      	bne.n	8009300 <UART_SetConfig+0x348>
 80092a4:	2308      	movs	r3, #8
 80092a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80092a8:	e02c      	b.n	8009304 <UART_SetConfig+0x34c>
 80092aa:	46c0      	nop			@ (mov r8, r8)
 80092ac:	005b8d7f 	.word	0x005b8d7f
 80092b0:	00000c3d 	.word	0x00000c3d
 80092b4:	0800d510 	.word	0x0800d510
 80092b8:	00000c3e 	.word	0x00000c3e
 80092bc:	40008000 	.word	0x40008000
 80092c0:	40008400 	.word	0x40008400
 80092c4:	00000c41 	.word	0x00000c41
 80092c8:	00000c45 	.word	0x00000c45
 80092cc:	00000c46 	.word	0x00000c46
 80092d0:	00000c49 	.word	0x00000c49
 80092d4:	00000c4a 	.word	0x00000c4a
 80092d8:	00000c4b 	.word	0x00000c4b
 80092dc:	00000c4c 	.word	0x00000c4c
 80092e0:	00000c4d 	.word	0x00000c4d
 80092e4:	cfff69f3 	.word	0xcfff69f3
 80092e8:	ffffcfff 	.word	0xffffcfff
 80092ec:	11fff4ff 	.word	0x11fff4ff
 80092f0:	40013800 	.word	0x40013800
 80092f4:	40004400 	.word	0x40004400
 80092f8:	40004800 	.word	0x40004800
 80092fc:	40004c00 	.word	0x40004c00
 8009300:	2300      	movs	r3, #0
 8009302:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a8b      	ldr	r2, [pc, #556]	@ (8009538 <UART_SetConfig+0x580>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d005      	beq.n	800931a <UART_SetConfig+0x362>
 800930e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a8a      	ldr	r2, [pc, #552]	@ (800953c <UART_SetConfig+0x584>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d000      	beq.n	800931a <UART_SetConfig+0x362>
 8009318:	e06f      	b.n	80093fa <UART_SetConfig+0x442>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800931a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800931c:	0018      	movs	r0, r3
 800931e:	f7fd ff49 	bl	80071b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009322:	0003      	movs	r3, r0
 8009324:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8009326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009328:	2b00      	cmp	r3, #0
 800932a:	d100      	bne.n	800932e <UART_SetConfig+0x376>
 800932c:	e0ec      	b.n	8009508 <UART_SetConfig+0x550>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009332:	4b83      	ldr	r3, [pc, #524]	@ (8009540 <UART_SetConfig+0x588>)
 8009334:	0052      	lsls	r2, r2, #1
 8009336:	5ad3      	ldrh	r3, [r2, r3]
 8009338:	0019      	movs	r1, r3
 800933a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800933c:	f7f6 fef6 	bl	800012c <__udivsi3>
 8009340:	0003      	movs	r3, r0
 8009342:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	0013      	movs	r3, r2
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	189b      	adds	r3, r3, r2
 800934e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009350:	429a      	cmp	r2, r3
 8009352:	d305      	bcc.n	8009360 <UART_SetConfig+0x3a8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800935a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800935c:	429a      	cmp	r2, r3
 800935e:	d906      	bls.n	800936e <UART_SetConfig+0x3b6>
      {
        ret = HAL_ERROR;
 8009360:	231f      	movs	r3, #31
 8009362:	2220      	movs	r2, #32
 8009364:	189b      	adds	r3, r3, r2
 8009366:	19db      	adds	r3, r3, r7
 8009368:	2201      	movs	r2, #1
 800936a:	701a      	strb	r2, [r3, #0]
 800936c:	e044      	b.n	80093f8 <UART_SetConfig+0x440>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800936e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009370:	61bb      	str	r3, [r7, #24]
 8009372:	2300      	movs	r3, #0
 8009374:	61fb      	str	r3, [r7, #28]
 8009376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800937a:	4b71      	ldr	r3, [pc, #452]	@ (8009540 <UART_SetConfig+0x588>)
 800937c:	0052      	lsls	r2, r2, #1
 800937e:	5ad3      	ldrh	r3, [r2, r3]
 8009380:	613b      	str	r3, [r7, #16]
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	69b8      	ldr	r0, [r7, #24]
 800938c:	69f9      	ldr	r1, [r7, #28]
 800938e:	f7f7 f89f 	bl	80004d0 <__aeabi_uldivmod>
 8009392:	0002      	movs	r2, r0
 8009394:	000b      	movs	r3, r1
 8009396:	0e11      	lsrs	r1, r2, #24
 8009398:	021d      	lsls	r5, r3, #8
 800939a:	430d      	orrs	r5, r1
 800939c:	0214      	lsls	r4, r2, #8
 800939e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	085b      	lsrs	r3, r3, #1
 80093a4:	60bb      	str	r3, [r7, #8]
 80093a6:	2300      	movs	r3, #0
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	68b8      	ldr	r0, [r7, #8]
 80093ac:	68f9      	ldr	r1, [r7, #12]
 80093ae:	1900      	adds	r0, r0, r4
 80093b0:	4169      	adcs	r1, r5
 80093b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	2300      	movs	r3, #0
 80093ba:	607b      	str	r3, [r7, #4]
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f7f7 f886 	bl	80004d0 <__aeabi_uldivmod>
 80093c4:	0002      	movs	r2, r0
 80093c6:	000b      	movs	r3, r1
 80093c8:	0013      	movs	r3, r2
 80093ca:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093ce:	23c0      	movs	r3, #192	@ 0xc0
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d309      	bcc.n	80093ea <UART_SetConfig+0x432>
 80093d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093d8:	2380      	movs	r3, #128	@ 0x80
 80093da:	035b      	lsls	r3, r3, #13
 80093dc:	429a      	cmp	r2, r3
 80093de:	d204      	bcs.n	80093ea <UART_SetConfig+0x432>
        {
          huart->Instance->BRR = usartdiv;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093e6:	60da      	str	r2, [r3, #12]
 80093e8:	e006      	b.n	80093f8 <UART_SetConfig+0x440>
        }
        else
        {
          ret = HAL_ERROR;
 80093ea:	231f      	movs	r3, #31
 80093ec:	2220      	movs	r2, #32
 80093ee:	189b      	adds	r3, r3, r2
 80093f0:	19db      	adds	r3, r3, r7
 80093f2:	2201      	movs	r2, #1
 80093f4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80093f6:	e087      	b.n	8009508 <UART_SetConfig+0x550>
 80093f8:	e086      	b.n	8009508 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	69da      	ldr	r2, [r3, #28]
 80093fe:	2380      	movs	r3, #128	@ 0x80
 8009400:	021b      	lsls	r3, r3, #8
 8009402:	429a      	cmp	r2, r3
 8009404:	d14c      	bne.n	80094a0 <UART_SetConfig+0x4e8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009408:	0018      	movs	r0, r3
 800940a:	f7fd fed3 	bl	80071b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800940e:	0003      	movs	r3, r0
 8009410:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009414:	2b00      	cmp	r3, #0
 8009416:	d100      	bne.n	800941a <UART_SetConfig+0x462>
 8009418:	e076      	b.n	8009508 <UART_SetConfig+0x550>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800941e:	4b48      	ldr	r3, [pc, #288]	@ (8009540 <UART_SetConfig+0x588>)
 8009420:	0052      	lsls	r2, r2, #1
 8009422:	5ad3      	ldrh	r3, [r2, r3]
 8009424:	0019      	movs	r1, r3
 8009426:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009428:	f7f6 fe80 	bl	800012c <__udivsi3>
 800942c:	0003      	movs	r3, r0
 800942e:	005a      	lsls	r2, r3, #1
 8009430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	085b      	lsrs	r3, r3, #1
 8009436:	18d2      	adds	r2, r2, r3
 8009438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	0019      	movs	r1, r3
 800943e:	0010      	movs	r0, r2
 8009440:	f7f6 fe74 	bl	800012c <__udivsi3>
 8009444:	0003      	movs	r3, r0
 8009446:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800944a:	2b0f      	cmp	r3, #15
 800944c:	d921      	bls.n	8009492 <UART_SetConfig+0x4da>
 800944e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009450:	2380      	movs	r3, #128	@ 0x80
 8009452:	025b      	lsls	r3, r3, #9
 8009454:	429a      	cmp	r2, r3
 8009456:	d21c      	bcs.n	8009492 <UART_SetConfig+0x4da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945a:	b29a      	uxth	r2, r3
 800945c:	2012      	movs	r0, #18
 800945e:	2420      	movs	r4, #32
 8009460:	1903      	adds	r3, r0, r4
 8009462:	19db      	adds	r3, r3, r7
 8009464:	210f      	movs	r1, #15
 8009466:	438a      	bics	r2, r1
 8009468:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800946a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946c:	085b      	lsrs	r3, r3, #1
 800946e:	b29b      	uxth	r3, r3
 8009470:	2207      	movs	r2, #7
 8009472:	4013      	ands	r3, r2
 8009474:	b299      	uxth	r1, r3
 8009476:	1903      	adds	r3, r0, r4
 8009478:	19db      	adds	r3, r3, r7
 800947a:	1902      	adds	r2, r0, r4
 800947c:	19d2      	adds	r2, r2, r7
 800947e:	8812      	ldrh	r2, [r2, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	1902      	adds	r2, r0, r4
 800948a:	19d2      	adds	r2, r2, r7
 800948c:	8812      	ldrh	r2, [r2, #0]
 800948e:	60da      	str	r2, [r3, #12]
 8009490:	e03a      	b.n	8009508 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8009492:	231f      	movs	r3, #31
 8009494:	2220      	movs	r2, #32
 8009496:	189b      	adds	r3, r3, r2
 8009498:	19db      	adds	r3, r3, r7
 800949a:	2201      	movs	r2, #1
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	e033      	b.n	8009508 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80094a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094a2:	0018      	movs	r0, r3
 80094a4:	f7fd fe86 	bl	80071b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80094a8:	0003      	movs	r3, r0
 80094aa:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 80094ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d02a      	beq.n	8009508 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094b6:	4b22      	ldr	r3, [pc, #136]	@ (8009540 <UART_SetConfig+0x588>)
 80094b8:	0052      	lsls	r2, r2, #1
 80094ba:	5ad3      	ldrh	r3, [r2, r3]
 80094bc:	0019      	movs	r1, r3
 80094be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80094c0:	f7f6 fe34 	bl	800012c <__udivsi3>
 80094c4:	0003      	movs	r3, r0
 80094c6:	001a      	movs	r2, r3
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	085b      	lsrs	r3, r3, #1
 80094ce:	18d2      	adds	r2, r2, r3
 80094d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	0019      	movs	r1, r3
 80094d6:	0010      	movs	r0, r2
 80094d8:	f7f6 fe28 	bl	800012c <__udivsi3>
 80094dc:	0003      	movs	r3, r0
 80094de:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094e2:	2b0f      	cmp	r3, #15
 80094e4:	d90a      	bls.n	80094fc <UART_SetConfig+0x544>
 80094e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094e8:	2380      	movs	r3, #128	@ 0x80
 80094ea:	025b      	lsls	r3, r3, #9
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d205      	bcs.n	80094fc <UART_SetConfig+0x544>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60da      	str	r2, [r3, #12]
 80094fa:	e005      	b.n	8009508 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80094fc:	231f      	movs	r3, #31
 80094fe:	2220      	movs	r2, #32
 8009500:	189b      	adds	r3, r3, r2
 8009502:	19db      	adds	r3, r3, r7
 8009504:	2201      	movs	r2, #1
 8009506:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950a:	226a      	movs	r2, #106	@ 0x6a
 800950c:	2101      	movs	r1, #1
 800950e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009512:	2268      	movs	r2, #104	@ 0x68
 8009514:	2101      	movs	r1, #1
 8009516:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	2200      	movs	r2, #0
 800951c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800951e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009520:	2200      	movs	r2, #0
 8009522:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009524:	231f      	movs	r3, #31
 8009526:	2220      	movs	r2, #32
 8009528:	189b      	adds	r3, r3, r2
 800952a:	19db      	adds	r3, r3, r7
 800952c:	781b      	ldrb	r3, [r3, #0]
}
 800952e:	0018      	movs	r0, r3
 8009530:	46bd      	mov	sp, r7
 8009532:	b012      	add	sp, #72	@ 0x48
 8009534:	bdb0      	pop	{r4, r5, r7, pc}
 8009536:	46c0      	nop			@ (mov r8, r8)
 8009538:	40008000 	.word	0x40008000
 800953c:	40008400 	.word	0x40008400
 8009540:	0800d85c 	.word	0x0800d85c

08009544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009550:	2bff      	cmp	r3, #255	@ 0xff
 8009552:	d905      	bls.n	8009560 <UART_AdvFeatureConfig+0x1c>
 8009554:	4aa7      	ldr	r2, [pc, #668]	@ (80097f4 <UART_AdvFeatureConfig+0x2b0>)
 8009556:	4ba8      	ldr	r3, [pc, #672]	@ (80097f8 <UART_AdvFeatureConfig+0x2b4>)
 8009558:	0011      	movs	r1, r2
 800955a:	0018      	movs	r0, r3
 800955c:	f7f9 fd76 	bl	800304c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009564:	2208      	movs	r2, #8
 8009566:	4013      	ands	r3, r2
 8009568:	d01b      	beq.n	80095a2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00b      	beq.n	800958a <UART_AdvFeatureConfig+0x46>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009576:	2380      	movs	r3, #128	@ 0x80
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	429a      	cmp	r2, r3
 800957c:	d005      	beq.n	800958a <UART_AdvFeatureConfig+0x46>
 800957e:	4a9f      	ldr	r2, [pc, #636]	@ (80097fc <UART_AdvFeatureConfig+0x2b8>)
 8009580:	4b9d      	ldr	r3, [pc, #628]	@ (80097f8 <UART_AdvFeatureConfig+0x2b4>)
 8009582:	0011      	movs	r1, r2
 8009584:	0018      	movs	r0, r3
 8009586:	f7f9 fd61 	bl	800304c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4a9b      	ldr	r2, [pc, #620]	@ (8009800 <UART_AdvFeatureConfig+0x2bc>)
 8009592:	4013      	ands	r3, r2
 8009594:	0019      	movs	r1, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a6:	2201      	movs	r2, #1
 80095a8:	4013      	ands	r3, r2
 80095aa:	d01b      	beq.n	80095e4 <UART_AdvFeatureConfig+0xa0>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <UART_AdvFeatureConfig+0x88>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b8:	2380      	movs	r3, #128	@ 0x80
 80095ba:	029b      	lsls	r3, r3, #10
 80095bc:	429a      	cmp	r2, r3
 80095be:	d005      	beq.n	80095cc <UART_AdvFeatureConfig+0x88>
 80095c0:	4a90      	ldr	r2, [pc, #576]	@ (8009804 <UART_AdvFeatureConfig+0x2c0>)
 80095c2:	4b8d      	ldr	r3, [pc, #564]	@ (80097f8 <UART_AdvFeatureConfig+0x2b4>)
 80095c4:	0011      	movs	r1, r2
 80095c6:	0018      	movs	r0, r3
 80095c8:	f7f9 fd40 	bl	800304c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	4a8d      	ldr	r2, [pc, #564]	@ (8009808 <UART_AdvFeatureConfig+0x2c4>)
 80095d4:	4013      	ands	r3, r2
 80095d6:	0019      	movs	r1, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	430a      	orrs	r2, r1
 80095e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e8:	2202      	movs	r2, #2
 80095ea:	4013      	ands	r3, r2
 80095ec:	d01b      	beq.n	8009626 <UART_AdvFeatureConfig+0xe2>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00b      	beq.n	800960e <UART_AdvFeatureConfig+0xca>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095fa:	2380      	movs	r3, #128	@ 0x80
 80095fc:	025b      	lsls	r3, r3, #9
 80095fe:	429a      	cmp	r2, r3
 8009600:	d005      	beq.n	800960e <UART_AdvFeatureConfig+0xca>
 8009602:	4a82      	ldr	r2, [pc, #520]	@ (800980c <UART_AdvFeatureConfig+0x2c8>)
 8009604:	4b7c      	ldr	r3, [pc, #496]	@ (80097f8 <UART_AdvFeatureConfig+0x2b4>)
 8009606:	0011      	movs	r1, r2
 8009608:	0018      	movs	r0, r3
 800960a:	f7f9 fd1f 	bl	800304c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	4a7e      	ldr	r2, [pc, #504]	@ (8009810 <UART_AdvFeatureConfig+0x2cc>)
 8009616:	4013      	ands	r3, r2
 8009618:	0019      	movs	r1, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	430a      	orrs	r2, r1
 8009624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962a:	2204      	movs	r2, #4
 800962c:	4013      	ands	r3, r2
 800962e:	d01b      	beq.n	8009668 <UART_AdvFeatureConfig+0x124>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00b      	beq.n	8009650 <UART_AdvFeatureConfig+0x10c>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800963c:	2380      	movs	r3, #128	@ 0x80
 800963e:	02db      	lsls	r3, r3, #11
 8009640:	429a      	cmp	r2, r3
 8009642:	d005      	beq.n	8009650 <UART_AdvFeatureConfig+0x10c>
 8009644:	4a73      	ldr	r2, [pc, #460]	@ (8009814 <UART_AdvFeatureConfig+0x2d0>)
 8009646:	4b6c      	ldr	r3, [pc, #432]	@ (80097f8 <UART_AdvFeatureConfig+0x2b4>)
 8009648:	0011      	movs	r1, r2
 800964a:	0018      	movs	r0, r3
 800964c:	f7f9 fcfe 	bl	800304c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	4a70      	ldr	r2, [pc, #448]	@ (8009818 <UART_AdvFeatureConfig+0x2d4>)
 8009658:	4013      	ands	r3, r2
 800965a:	0019      	movs	r1, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966c:	2210      	movs	r2, #16
 800966e:	4013      	ands	r3, r2
 8009670:	d01b      	beq.n	80096aa <UART_AdvFeatureConfig+0x166>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00b      	beq.n	8009692 <UART_AdvFeatureConfig+0x14e>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800967e:	2380      	movs	r3, #128	@ 0x80
 8009680:	015b      	lsls	r3, r3, #5
 8009682:	429a      	cmp	r2, r3
 8009684:	d005      	beq.n	8009692 <UART_AdvFeatureConfig+0x14e>
 8009686:	4a65      	ldr	r2, [pc, #404]	@ (800981c <UART_AdvFeatureConfig+0x2d8>)
 8009688:	4b5b      	ldr	r3, [pc, #364]	@ (80097f8 <UART_AdvFeatureConfig+0x2b4>)
 800968a:	0011      	movs	r1, r2
 800968c:	0018      	movs	r0, r3
 800968e:	f7f9 fcdd 	bl	800304c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	4a61      	ldr	r2, [pc, #388]	@ (8009820 <UART_AdvFeatureConfig+0x2dc>)
 800969a:	4013      	ands	r3, r2
 800969c:	0019      	movs	r1, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	430a      	orrs	r2, r1
 80096a8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ae:	2220      	movs	r2, #32
 80096b0:	4013      	ands	r3, r2
 80096b2:	d01b      	beq.n	80096ec <UART_AdvFeatureConfig+0x1a8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00b      	beq.n	80096d4 <UART_AdvFeatureConfig+0x190>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096c0:	2380      	movs	r3, #128	@ 0x80
 80096c2:	019b      	lsls	r3, r3, #6
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d005      	beq.n	80096d4 <UART_AdvFeatureConfig+0x190>
 80096c8:	4a56      	ldr	r2, [pc, #344]	@ (8009824 <UART_AdvFeatureConfig+0x2e0>)
 80096ca:	4b4b      	ldr	r3, [pc, #300]	@ (80097f8 <UART_AdvFeatureConfig+0x2b4>)
 80096cc:	0011      	movs	r1, r2
 80096ce:	0018      	movs	r0, r3
 80096d0:	f7f9 fcbc 	bl	800304c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	4a53      	ldr	r2, [pc, #332]	@ (8009828 <UART_AdvFeatureConfig+0x2e4>)
 80096dc:	4013      	ands	r3, r2
 80096de:	0019      	movs	r1, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	430a      	orrs	r2, r1
 80096ea:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f0:	2240      	movs	r2, #64	@ 0x40
 80096f2:	4013      	ands	r3, r2
 80096f4:	d059      	beq.n	80097aa <UART_AdvFeatureConfig+0x266>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a4c      	ldr	r2, [pc, #304]	@ (800982c <UART_AdvFeatureConfig+0x2e8>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d00a      	beq.n	8009716 <UART_AdvFeatureConfig+0x1d2>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a4a      	ldr	r2, [pc, #296]	@ (8009830 <UART_AdvFeatureConfig+0x2ec>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d005      	beq.n	8009716 <UART_AdvFeatureConfig+0x1d2>
 800970a:	4a4a      	ldr	r2, [pc, #296]	@ (8009834 <UART_AdvFeatureConfig+0x2f0>)
 800970c:	4b3a      	ldr	r3, [pc, #232]	@ (80097f8 <UART_AdvFeatureConfig+0x2b4>)
 800970e:	0011      	movs	r1, r2
 8009710:	0018      	movs	r0, r3
 8009712:	f7f9 fc9b 	bl	800304c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00b      	beq.n	8009736 <UART_AdvFeatureConfig+0x1f2>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009722:	2380      	movs	r3, #128	@ 0x80
 8009724:	035b      	lsls	r3, r3, #13
 8009726:	429a      	cmp	r2, r3
 8009728:	d005      	beq.n	8009736 <UART_AdvFeatureConfig+0x1f2>
 800972a:	4a43      	ldr	r2, [pc, #268]	@ (8009838 <UART_AdvFeatureConfig+0x2f4>)
 800972c:	4b32      	ldr	r3, [pc, #200]	@ (80097f8 <UART_AdvFeatureConfig+0x2b4>)
 800972e:	0011      	movs	r1, r2
 8009730:	0018      	movs	r0, r3
 8009732:	f7f9 fc8b 	bl	800304c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	4a3f      	ldr	r2, [pc, #252]	@ (800983c <UART_AdvFeatureConfig+0x2f8>)
 800973e:	4013      	ands	r3, r2
 8009740:	0019      	movs	r1, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009752:	2380      	movs	r3, #128	@ 0x80
 8009754:	035b      	lsls	r3, r3, #13
 8009756:	429a      	cmp	r2, r3
 8009758:	d127      	bne.n	80097aa <UART_AdvFeatureConfig+0x266>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800975e:	2b00      	cmp	r3, #0
 8009760:	d017      	beq.n	8009792 <UART_AdvFeatureConfig+0x24e>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009766:	2380      	movs	r3, #128	@ 0x80
 8009768:	039b      	lsls	r3, r3, #14
 800976a:	429a      	cmp	r2, r3
 800976c:	d011      	beq.n	8009792 <UART_AdvFeatureConfig+0x24e>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009772:	2380      	movs	r3, #128	@ 0x80
 8009774:	03db      	lsls	r3, r3, #15
 8009776:	429a      	cmp	r2, r3
 8009778:	d00b      	beq.n	8009792 <UART_AdvFeatureConfig+0x24e>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800977e:	23c0      	movs	r3, #192	@ 0xc0
 8009780:	03db      	lsls	r3, r3, #15
 8009782:	429a      	cmp	r2, r3
 8009784:	d005      	beq.n	8009792 <UART_AdvFeatureConfig+0x24e>
 8009786:	4a2e      	ldr	r2, [pc, #184]	@ (8009840 <UART_AdvFeatureConfig+0x2fc>)
 8009788:	4b1b      	ldr	r3, [pc, #108]	@ (80097f8 <UART_AdvFeatureConfig+0x2b4>)
 800978a:	0011      	movs	r1, r2
 800978c:	0018      	movs	r0, r3
 800978e:	f7f9 fc5d 	bl	800304c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	4a2a      	ldr	r2, [pc, #168]	@ (8009844 <UART_AdvFeatureConfig+0x300>)
 800979a:	4013      	ands	r3, r2
 800979c:	0019      	movs	r1, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ae:	2280      	movs	r2, #128	@ 0x80
 80097b0:	4013      	ands	r3, r2
 80097b2:	d01b      	beq.n	80097ec <UART_AdvFeatureConfig+0x2a8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00b      	beq.n	80097d4 <UART_AdvFeatureConfig+0x290>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097c0:	2380      	movs	r3, #128	@ 0x80
 80097c2:	031b      	lsls	r3, r3, #12
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d005      	beq.n	80097d4 <UART_AdvFeatureConfig+0x290>
 80097c8:	4a1f      	ldr	r2, [pc, #124]	@ (8009848 <UART_AdvFeatureConfig+0x304>)
 80097ca:	4b0b      	ldr	r3, [pc, #44]	@ (80097f8 <UART_AdvFeatureConfig+0x2b4>)
 80097cc:	0011      	movs	r1, r2
 80097ce:	0018      	movs	r0, r3
 80097d0:	f7f9 fc3c 	bl	800304c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	4a1c      	ldr	r2, [pc, #112]	@ (800984c <UART_AdvFeatureConfig+0x308>)
 80097dc:	4013      	ands	r3, r2
 80097de:	0019      	movs	r1, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	430a      	orrs	r2, r1
 80097ea:	605a      	str	r2, [r3, #4]
  }
}
 80097ec:	46c0      	nop			@ (mov r8, r8)
 80097ee:	46bd      	mov	sp, r7
 80097f0:	b002      	add	sp, #8
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	00000cd2 	.word	0x00000cd2
 80097f8:	0800d510 	.word	0x0800d510
 80097fc:	00000cd7 	.word	0x00000cd7
 8009800:	ffff7fff 	.word	0xffff7fff
 8009804:	00000cde 	.word	0x00000cde
 8009808:	fffdffff 	.word	0xfffdffff
 800980c:	00000ce5 	.word	0x00000ce5
 8009810:	fffeffff 	.word	0xfffeffff
 8009814:	00000cec 	.word	0x00000cec
 8009818:	fffbffff 	.word	0xfffbffff
 800981c:	00000cf3 	.word	0x00000cf3
 8009820:	ffffefff 	.word	0xffffefff
 8009824:	00000cfb 	.word	0x00000cfb
 8009828:	ffffdfff 	.word	0xffffdfff
 800982c:	40013800 	.word	0x40013800
 8009830:	40004400 	.word	0x40004400
 8009834:	00000d03 	.word	0x00000d03
 8009838:	00000d04 	.word	0x00000d04
 800983c:	ffefffff 	.word	0xffefffff
 8009840:	00000d09 	.word	0x00000d09
 8009844:	ff9fffff 	.word	0xff9fffff
 8009848:	00000d11 	.word	0x00000d11
 800984c:	fff7ffff 	.word	0xfff7ffff

08009850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b092      	sub	sp, #72	@ 0x48
 8009854:	af02      	add	r7, sp, #8
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2290      	movs	r2, #144	@ 0x90
 800985c:	2100      	movs	r1, #0
 800985e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009860:	f7f9 fe80 	bl	8003564 <HAL_GetTick>
 8009864:	0003      	movs	r3, r0
 8009866:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2208      	movs	r2, #8
 8009870:	4013      	ands	r3, r2
 8009872:	2b08      	cmp	r3, #8
 8009874:	d12d      	bne.n	80098d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009878:	2280      	movs	r2, #128	@ 0x80
 800987a:	0391      	lsls	r1, r2, #14
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4a47      	ldr	r2, [pc, #284]	@ (800999c <UART_CheckIdleState+0x14c>)
 8009880:	9200      	str	r2, [sp, #0]
 8009882:	2200      	movs	r2, #0
 8009884:	f000 f88e 	bl	80099a4 <UART_WaitOnFlagUntilTimeout>
 8009888:	1e03      	subs	r3, r0, #0
 800988a:	d022      	beq.n	80098d2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800988c:	f3ef 8310 	mrs	r3, PRIMASK
 8009890:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009894:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009896:	2301      	movs	r3, #1
 8009898:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800989a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989c:	f383 8810 	msr	PRIMASK, r3
}
 80098a0:	46c0      	nop			@ (mov r8, r8)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2180      	movs	r1, #128	@ 0x80
 80098ae:	438a      	bics	r2, r1
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b8:	f383 8810 	msr	PRIMASK, r3
}
 80098bc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2288      	movs	r2, #136	@ 0x88
 80098c2:	2120      	movs	r1, #32
 80098c4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2284      	movs	r2, #132	@ 0x84
 80098ca:	2100      	movs	r1, #0
 80098cc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e060      	b.n	8009994 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2204      	movs	r2, #4
 80098da:	4013      	ands	r3, r2
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d146      	bne.n	800996e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e2:	2280      	movs	r2, #128	@ 0x80
 80098e4:	03d1      	lsls	r1, r2, #15
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	4a2c      	ldr	r2, [pc, #176]	@ (800999c <UART_CheckIdleState+0x14c>)
 80098ea:	9200      	str	r2, [sp, #0]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f000 f859 	bl	80099a4 <UART_WaitOnFlagUntilTimeout>
 80098f2:	1e03      	subs	r3, r0, #0
 80098f4:	d03b      	beq.n	800996e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80098f6:	f3ef 8310 	mrs	r3, PRIMASK
 80098fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80098fc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009900:	2301      	movs	r3, #1
 8009902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	f383 8810 	msr	PRIMASK, r3
}
 800990a:	46c0      	nop			@ (mov r8, r8)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4922      	ldr	r1, [pc, #136]	@ (80099a0 <UART_CheckIdleState+0x150>)
 8009918:	400a      	ands	r2, r1
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800991e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	f383 8810 	msr	PRIMASK, r3
}
 8009926:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009928:	f3ef 8310 	mrs	r3, PRIMASK
 800992c:	61bb      	str	r3, [r7, #24]
  return(result);
 800992e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009930:	633b      	str	r3, [r7, #48]	@ 0x30
 8009932:	2301      	movs	r3, #1
 8009934:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	f383 8810 	msr	PRIMASK, r3
}
 800993c:	46c0      	nop			@ (mov r8, r8)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689a      	ldr	r2, [r3, #8]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2101      	movs	r1, #1
 800994a:	438a      	bics	r2, r1
 800994c:	609a      	str	r2, [r3, #8]
 800994e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009950:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	f383 8810 	msr	PRIMASK, r3
}
 8009958:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	228c      	movs	r2, #140	@ 0x8c
 800995e:	2120      	movs	r1, #32
 8009960:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2284      	movs	r2, #132	@ 0x84
 8009966:	2100      	movs	r1, #0
 8009968:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e012      	b.n	8009994 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2288      	movs	r2, #136	@ 0x88
 8009972:	2120      	movs	r1, #32
 8009974:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	228c      	movs	r2, #140	@ 0x8c
 800997a:	2120      	movs	r1, #32
 800997c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2284      	movs	r2, #132	@ 0x84
 800998e:	2100      	movs	r1, #0
 8009990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	0018      	movs	r0, r3
 8009996:	46bd      	mov	sp, r7
 8009998:	b010      	add	sp, #64	@ 0x40
 800999a:	bd80      	pop	{r7, pc}
 800999c:	01ffffff 	.word	0x01ffffff
 80099a0:	fffffedf 	.word	0xfffffedf

080099a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	1dfb      	adds	r3, r7, #7
 80099b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099b4:	e051      	b.n	8009a5a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	3301      	adds	r3, #1
 80099ba:	d04e      	beq.n	8009a5a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099bc:	f7f9 fdd2 	bl	8003564 <HAL_GetTick>
 80099c0:	0002      	movs	r2, r0
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d302      	bcc.n	80099d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e051      	b.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2204      	movs	r2, #4
 80099de:	4013      	ands	r3, r2
 80099e0:	d03b      	beq.n	8009a5a <UART_WaitOnFlagUntilTimeout+0xb6>
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b80      	cmp	r3, #128	@ 0x80
 80099e6:	d038      	beq.n	8009a5a <UART_WaitOnFlagUntilTimeout+0xb6>
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b40      	cmp	r3, #64	@ 0x40
 80099ec:	d035      	beq.n	8009a5a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	2208      	movs	r2, #8
 80099f6:	4013      	ands	r3, r2
 80099f8:	2b08      	cmp	r3, #8
 80099fa:	d111      	bne.n	8009a20 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2208      	movs	r2, #8
 8009a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	0018      	movs	r0, r3
 8009a08:	f000 f83c 	bl	8009a84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2290      	movs	r2, #144	@ 0x90
 8009a10:	2108      	movs	r1, #8
 8009a12:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2284      	movs	r2, #132	@ 0x84
 8009a18:	2100      	movs	r1, #0
 8009a1a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e02c      	b.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	69da      	ldr	r2, [r3, #28]
 8009a26:	2380      	movs	r3, #128	@ 0x80
 8009a28:	011b      	lsls	r3, r3, #4
 8009a2a:	401a      	ands	r2, r3
 8009a2c:	2380      	movs	r3, #128	@ 0x80
 8009a2e:	011b      	lsls	r3, r3, #4
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d112      	bne.n	8009a5a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2280      	movs	r2, #128	@ 0x80
 8009a3a:	0112      	lsls	r2, r2, #4
 8009a3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	0018      	movs	r0, r3
 8009a42:	f000 f81f 	bl	8009a84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2290      	movs	r2, #144	@ 0x90
 8009a4a:	2120      	movs	r1, #32
 8009a4c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2284      	movs	r2, #132	@ 0x84
 8009a52:	2100      	movs	r1, #0
 8009a54:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e00f      	b.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	4013      	ands	r3, r2
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	425a      	negs	r2, r3
 8009a6a:	4153      	adcs	r3, r2
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	001a      	movs	r2, r3
 8009a70:	1dfb      	adds	r3, r7, #7
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d09e      	beq.n	80099b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	b004      	add	sp, #16
 8009a80:	bd80      	pop	{r7, pc}
	...

08009a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08e      	sub	sp, #56	@ 0x38
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a90:	617b      	str	r3, [r7, #20]
  return(result);
 8009a92:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a96:	2301      	movs	r3, #1
 8009a98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	f383 8810 	msr	PRIMASK, r3
}
 8009aa0:	46c0      	nop			@ (mov r8, r8)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4926      	ldr	r1, [pc, #152]	@ (8009b48 <UART_EndRxTransfer+0xc4>)
 8009aae:	400a      	ands	r2, r1
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	f383 8810 	msr	PRIMASK, r3
}
 8009abc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009abe:	f3ef 8310 	mrs	r3, PRIMASK
 8009ac2:	623b      	str	r3, [r7, #32]
  return(result);
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ac6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ac8:	2301      	movs	r3, #1
 8009aca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ace:	f383 8810 	msr	PRIMASK, r3
}
 8009ad2:	46c0      	nop			@ (mov r8, r8)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689a      	ldr	r2, [r3, #8]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	491b      	ldr	r1, [pc, #108]	@ (8009b4c <UART_EndRxTransfer+0xc8>)
 8009ae0:	400a      	ands	r2, r1
 8009ae2:	609a      	str	r2, [r3, #8]
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aea:	f383 8810 	msr	PRIMASK, r3
}
 8009aee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d118      	bne.n	8009b2a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009af8:	f3ef 8310 	mrs	r3, PRIMASK
 8009afc:	60bb      	str	r3, [r7, #8]
  return(result);
 8009afe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b02:	2301      	movs	r3, #1
 8009b04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f383 8810 	msr	PRIMASK, r3
}
 8009b0c:	46c0      	nop			@ (mov r8, r8)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2110      	movs	r1, #16
 8009b1a:	438a      	bics	r2, r1
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	f383 8810 	msr	PRIMASK, r3
}
 8009b28:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	228c      	movs	r2, #140	@ 0x8c
 8009b2e:	2120      	movs	r1, #32
 8009b30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009b3e:	46c0      	nop			@ (mov r8, r8)
 8009b40:	46bd      	mov	sp, r7
 8009b42:	b00e      	add	sp, #56	@ 0x38
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	46c0      	nop			@ (mov r8, r8)
 8009b48:	fffffedf 	.word	0xfffffedf
 8009b4c:	effffffe 	.word	0xeffffffe

08009b50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a25      	ldr	r2, [pc, #148]	@ (8009bf4 <HAL_UARTEx_DisableFifoMode+0xa4>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d014      	beq.n	8009b8c <HAL_UARTEx_DisableFifoMode+0x3c>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a24      	ldr	r2, [pc, #144]	@ (8009bf8 <HAL_UARTEx_DisableFifoMode+0xa8>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d00f      	beq.n	8009b8c <HAL_UARTEx_DisableFifoMode+0x3c>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a22      	ldr	r2, [pc, #136]	@ (8009bfc <HAL_UARTEx_DisableFifoMode+0xac>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d00a      	beq.n	8009b8c <HAL_UARTEx_DisableFifoMode+0x3c>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a21      	ldr	r2, [pc, #132]	@ (8009c00 <HAL_UARTEx_DisableFifoMode+0xb0>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d005      	beq.n	8009b8c <HAL_UARTEx_DisableFifoMode+0x3c>
 8009b80:	4a20      	ldr	r2, [pc, #128]	@ (8009c04 <HAL_UARTEx_DisableFifoMode+0xb4>)
 8009b82:	4b21      	ldr	r3, [pc, #132]	@ (8009c08 <HAL_UARTEx_DisableFifoMode+0xb8>)
 8009b84:	0011      	movs	r1, r2
 8009b86:	0018      	movs	r0, r3
 8009b88:	f7f9 fa60 	bl	800304c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2284      	movs	r2, #132	@ 0x84
 8009b90:	5c9b      	ldrb	r3, [r3, r2]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d101      	bne.n	8009b9a <HAL_UARTEx_DisableFifoMode+0x4a>
 8009b96:	2302      	movs	r3, #2
 8009b98:	e027      	b.n	8009bea <HAL_UARTEx_DisableFifoMode+0x9a>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2284      	movs	r2, #132	@ 0x84
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2288      	movs	r2, #136	@ 0x88
 8009ba6:	2124      	movs	r1, #36	@ 0x24
 8009ba8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	438a      	bics	r2, r1
 8009bc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	4a11      	ldr	r2, [pc, #68]	@ (8009c0c <HAL_UARTEx_DisableFifoMode+0xbc>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2288      	movs	r2, #136	@ 0x88
 8009bdc:	2120      	movs	r1, #32
 8009bde:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2284      	movs	r2, #132	@ 0x84
 8009be4:	2100      	movs	r1, #0
 8009be6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	0018      	movs	r0, r3
 8009bec:	46bd      	mov	sp, r7
 8009bee:	b004      	add	sp, #16
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	46c0      	nop			@ (mov r8, r8)
 8009bf4:	40013800 	.word	0x40013800
 8009bf8:	40004400 	.word	0x40004400
 8009bfc:	40008000 	.word	0x40008000
 8009c00:	40008400 	.word	0x40008400
 8009c04:	00000236 	.word	0x00000236
 8009c08:	0800d54c 	.word	0x0800d54c
 8009c0c:	dfffffff 	.word	0xdfffffff

08009c10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a3a      	ldr	r2, [pc, #232]	@ (8009d08 <HAL_UARTEx_SetTxFifoThreshold+0xf8>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d015      	beq.n	8009c50 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a38      	ldr	r2, [pc, #224]	@ (8009d0c <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d010      	beq.n	8009c50 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a37      	ldr	r2, [pc, #220]	@ (8009d10 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d00b      	beq.n	8009c50 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a35      	ldr	r2, [pc, #212]	@ (8009d14 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d006      	beq.n	8009c50 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8009c42:	2399      	movs	r3, #153	@ 0x99
 8009c44:	009a      	lsls	r2, r3, #2
 8009c46:	4b34      	ldr	r3, [pc, #208]	@ (8009d18 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 8009c48:	0011      	movs	r1, r2
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	f7f9 f9fe 	bl	800304c <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d01e      	beq.n	8009c94 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	2380      	movs	r3, #128	@ 0x80
 8009c5a:	059b      	lsls	r3, r3, #22
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d019      	beq.n	8009c94 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	2380      	movs	r3, #128	@ 0x80
 8009c64:	05db      	lsls	r3, r3, #23
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d014      	beq.n	8009c94 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	23c0      	movs	r3, #192	@ 0xc0
 8009c6e:	05db      	lsls	r3, r3, #23
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d00f      	beq.n	8009c94 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	2380      	movs	r3, #128	@ 0x80
 8009c78:	061b      	lsls	r3, r3, #24
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d00a      	beq.n	8009c94 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	23a0      	movs	r3, #160	@ 0xa0
 8009c82:	061b      	lsls	r3, r3, #24
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d005      	beq.n	8009c94 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8009c88:	4a24      	ldr	r2, [pc, #144]	@ (8009d1c <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
 8009c8a:	4b23      	ldr	r3, [pc, #140]	@ (8009d18 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 8009c8c:	0011      	movs	r1, r2
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f7f9 f9dc 	bl	800304c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2284      	movs	r2, #132	@ 0x84
 8009c98:	5c9b      	ldrb	r3, [r3, r2]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d101      	bne.n	8009ca2 <HAL_UARTEx_SetTxFifoThreshold+0x92>
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	e02e      	b.n	8009d00 <HAL_UARTEx_SetTxFifoThreshold+0xf0>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2284      	movs	r2, #132	@ 0x84
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2288      	movs	r2, #136	@ 0x88
 8009cae:	2124      	movs	r1, #36	@ 0x24
 8009cb0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	438a      	bics	r2, r1
 8009cc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	08d9      	lsrs	r1, r3, #3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f000 f8a9 	bl	8009e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2288      	movs	r2, #136	@ 0x88
 8009cf2:	2120      	movs	r1, #32
 8009cf4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2284      	movs	r2, #132	@ 0x84
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	0018      	movs	r0, r3
 8009d02:	46bd      	mov	sp, r7
 8009d04:	b004      	add	sp, #16
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	40013800 	.word	0x40013800
 8009d0c:	40004400 	.word	0x40004400
 8009d10:	40008000 	.word	0x40008000
 8009d14:	40008400 	.word	0x40008400
 8009d18:	0800d54c 	.word	0x0800d54c
 8009d1c:	00000265 	.word	0x00000265

08009d20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a3a      	ldr	r2, [pc, #232]	@ (8009e18 <HAL_UARTEx_SetRxFifoThreshold+0xf8>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d014      	beq.n	8009d5e <HAL_UARTEx_SetRxFifoThreshold+0x3e>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a38      	ldr	r2, [pc, #224]	@ (8009e1c <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d00f      	beq.n	8009d5e <HAL_UARTEx_SetRxFifoThreshold+0x3e>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a37      	ldr	r2, [pc, #220]	@ (8009e20 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d00a      	beq.n	8009d5e <HAL_UARTEx_SetRxFifoThreshold+0x3e>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a35      	ldr	r2, [pc, #212]	@ (8009e24 <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d005      	beq.n	8009d5e <HAL_UARTEx_SetRxFifoThreshold+0x3e>
 8009d52:	4a35      	ldr	r2, [pc, #212]	@ (8009e28 <HAL_UARTEx_SetRxFifoThreshold+0x108>)
 8009d54:	4b35      	ldr	r3, [pc, #212]	@ (8009e2c <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 8009d56:	0011      	movs	r1, r2
 8009d58:	0018      	movs	r0, r3
 8009d5a:	f7f9 f977 	bl	800304c <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d01e      	beq.n	8009da2 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	2380      	movs	r3, #128	@ 0x80
 8009d68:	049b      	lsls	r3, r3, #18
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d019      	beq.n	8009da2 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	2380      	movs	r3, #128	@ 0x80
 8009d72:	04db      	lsls	r3, r3, #19
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d014      	beq.n	8009da2 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	23c0      	movs	r3, #192	@ 0xc0
 8009d7c:	04db      	lsls	r3, r3, #19
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d00f      	beq.n	8009da2 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	2380      	movs	r3, #128	@ 0x80
 8009d86:	051b      	lsls	r3, r3, #20
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d00a      	beq.n	8009da2 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	23a0      	movs	r3, #160	@ 0xa0
 8009d90:	051b      	lsls	r3, r3, #20
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d005      	beq.n	8009da2 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8009d96:	4a26      	ldr	r2, [pc, #152]	@ (8009e30 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8009d98:	4b24      	ldr	r3, [pc, #144]	@ (8009e2c <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 8009d9a:	0011      	movs	r1, r2
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	f7f9 f955 	bl	800304c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2284      	movs	r2, #132	@ 0x84
 8009da6:	5c9b      	ldrb	r3, [r3, r2]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_UARTEx_SetRxFifoThreshold+0x90>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e02f      	b.n	8009e10 <HAL_UARTEx_SetRxFifoThreshold+0xf0>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2284      	movs	r2, #132	@ 0x84
 8009db4:	2101      	movs	r1, #1
 8009db6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2288      	movs	r2, #136	@ 0x88
 8009dbc:	2124      	movs	r1, #36	@ 0x24
 8009dbe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	438a      	bics	r2, r1
 8009dd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	4a15      	ldr	r2, [pc, #84]	@ (8009e34 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	0019      	movs	r1, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	0018      	movs	r0, r3
 8009df2:	f000 f821 	bl	8009e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2288      	movs	r2, #136	@ 0x88
 8009e02:	2120      	movs	r1, #32
 8009e04:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2284      	movs	r2, #132	@ 0x84
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	0018      	movs	r0, r3
 8009e12:	46bd      	mov	sp, r7
 8009e14:	b004      	add	sp, #16
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	40013800 	.word	0x40013800
 8009e1c:	40004400 	.word	0x40004400
 8009e20:	40008000 	.word	0x40008000
 8009e24:	40008400 	.word	0x40008400
 8009e28:	00000295 	.word	0x00000295
 8009e2c:	0800d54c 	.word	0x0800d54c
 8009e30:	00000296 	.word	0x00000296
 8009e34:	f1ffffff 	.word	0xf1ffffff

08009e38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d108      	bne.n	8009e5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	226a      	movs	r2, #106	@ 0x6a
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2268      	movs	r2, #104	@ 0x68
 8009e54:	2101      	movs	r1, #1
 8009e56:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e58:	e043      	b.n	8009ee2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e5a:	260f      	movs	r6, #15
 8009e5c:	19bb      	adds	r3, r7, r6
 8009e5e:	2208      	movs	r2, #8
 8009e60:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e62:	200e      	movs	r0, #14
 8009e64:	183b      	adds	r3, r7, r0
 8009e66:	2208      	movs	r2, #8
 8009e68:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	0e5b      	lsrs	r3, r3, #25
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	240d      	movs	r4, #13
 8009e76:	193b      	adds	r3, r7, r4
 8009e78:	2107      	movs	r1, #7
 8009e7a:	400a      	ands	r2, r1
 8009e7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	0f5b      	lsrs	r3, r3, #29
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	250c      	movs	r5, #12
 8009e8a:	197b      	adds	r3, r7, r5
 8009e8c:	2107      	movs	r1, #7
 8009e8e:	400a      	ands	r2, r1
 8009e90:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e92:	183b      	adds	r3, r7, r0
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	197a      	adds	r2, r7, r5
 8009e98:	7812      	ldrb	r2, [r2, #0]
 8009e9a:	4914      	ldr	r1, [pc, #80]	@ (8009eec <UARTEx_SetNbDataToProcess+0xb4>)
 8009e9c:	5c8a      	ldrb	r2, [r1, r2]
 8009e9e:	435a      	muls	r2, r3
 8009ea0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ea2:	197b      	adds	r3, r7, r5
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	4a12      	ldr	r2, [pc, #72]	@ (8009ef0 <UARTEx_SetNbDataToProcess+0xb8>)
 8009ea8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009eaa:	0019      	movs	r1, r3
 8009eac:	f7f6 f9c8 	bl	8000240 <__divsi3>
 8009eb0:	0003      	movs	r3, r0
 8009eb2:	b299      	uxth	r1, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	226a      	movs	r2, #106	@ 0x6a
 8009eb8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eba:	19bb      	adds	r3, r7, r6
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	193a      	adds	r2, r7, r4
 8009ec0:	7812      	ldrb	r2, [r2, #0]
 8009ec2:	490a      	ldr	r1, [pc, #40]	@ (8009eec <UARTEx_SetNbDataToProcess+0xb4>)
 8009ec4:	5c8a      	ldrb	r2, [r1, r2]
 8009ec6:	435a      	muls	r2, r3
 8009ec8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009eca:	193b      	adds	r3, r7, r4
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	4a08      	ldr	r2, [pc, #32]	@ (8009ef0 <UARTEx_SetNbDataToProcess+0xb8>)
 8009ed0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ed2:	0019      	movs	r1, r3
 8009ed4:	f7f6 f9b4 	bl	8000240 <__divsi3>
 8009ed8:	0003      	movs	r3, r0
 8009eda:	b299      	uxth	r1, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2268      	movs	r2, #104	@ 0x68
 8009ee0:	5299      	strh	r1, [r3, r2]
}
 8009ee2:	46c0      	nop			@ (mov r8, r8)
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	b005      	add	sp, #20
 8009ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eea:	46c0      	nop			@ (mov r8, r8)
 8009eec:	0800d874 	.word	0x0800d874
 8009ef0:	0800d87c 	.word	0x0800d87c

08009ef4 <log_monitor_init>:
 *
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_monitor_init(void (*PrintString_Function)(char*)){
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
	plog = PrintString_Function;
 8009efc:	4b03      	ldr	r3, [pc, #12]	@ (8009f0c <log_monitor_init+0x18>)
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	601a      	str	r2, [r3, #0]
}
 8009f02:	46c0      	nop			@ (mov r8, r8)
 8009f04:	46bd      	mov	sp, r7
 8009f06:	b002      	add	sp, #8
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	46c0      	nop			@ (mov r8, r8)
 8009f0c:	200003b4 	.word	0x200003b4

08009f10 <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 8009f10:	b40e      	push	{r1, r2, r3}
 8009f12:	b5b0      	push	{r4, r5, r7, lr}
 8009f14:	b08b      	sub	sp, #44	@ 0x2c
 8009f16:	af04      	add	r7, sp, #16
 8009f18:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8009f1a:	f7f9 fb23 	bl	8003564 <HAL_GetTick>
 8009f1e:	0003      	movs	r3, r0
 8009f20:	617b      	str	r3, [r7, #20]
	char *Temp_buffer = NULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8009f26:	2330      	movs	r3, #48	@ 0x30
 8009f28:	18fb      	adds	r3, r7, r3
 8009f2a:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f30:	2310      	movs	r3, #16
 8009f32:	18fb      	adds	r3, r7, r3
 8009f34:	0018      	movs	r0, r3
 8009f36:	f002 fc25 	bl	800c784 <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 8009f3a:	4b16      	ldr	r3, [pc, #88]	@ (8009f94 <LOG_INFO+0x84>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	001a      	movs	r2, r3
 8009f40:	4b15      	ldr	r3, [pc, #84]	@ (8009f98 <LOG_INFO+0x88>)
 8009f42:	0092      	lsls	r2, r2, #2
 8009f44:	58d4      	ldr	r4, [r2, r3]
 8009f46:	4b15      	ldr	r3, [pc, #84]	@ (8009f9c <LOG_INFO+0x8c>)
 8009f48:	681d      	ldr	r5, [r3, #0]
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	4b14      	ldr	r3, [pc, #80]	@ (8009fa0 <LOG_INFO+0x90>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4914      	ldr	r1, [pc, #80]	@ (8009fa4 <LOG_INFO+0x94>)
 8009f52:	2008      	movs	r0, #8
 8009f54:	1838      	adds	r0, r7, r0
 8009f56:	9303      	str	r3, [sp, #12]
 8009f58:	9202      	str	r2, [sp, #8]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	002b      	movs	r3, r5
 8009f64:	0022      	movs	r2, r4
 8009f66:	f002 fbd3 	bl	800c710 <asiprintf>
	plog(Output_buffer);
 8009f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009fa8 <LOG_INFO+0x98>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	0010      	movs	r0, r2
 8009f72:	4798      	blx	r3

	free(Temp_buffer);
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	0018      	movs	r0, r3
 8009f78:	f002 fb0e 	bl	800c598 <free>
	free(Output_buffer);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	0018      	movs	r0, r3
 8009f80:	f002 fb0a 	bl	800c598 <free>
}
 8009f84:	46c0      	nop			@ (mov r8, r8)
 8009f86:	46bd      	mov	sp, r7
 8009f88:	b007      	add	sp, #28
 8009f8a:	bcb0      	pop	{r4, r5, r7}
 8009f8c:	bc08      	pop	{r3}
 8009f8e:	b003      	add	sp, #12
 8009f90:	4718      	bx	r3
 8009f92:	46c0      	nop			@ (mov r8, r8)
 8009f94:	20000020 	.word	0x20000020
 8009f98:	20000044 	.word	0x20000044
 8009f9c:	20000024 	.word	0x20000024
 8009fa0:	20000040 	.word	0x20000040
 8009fa4:	0800d724 	.word	0x0800d724
 8009fa8:	200003b4 	.word	0x200003b4

08009fac <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 8009fac:	b40e      	push	{r1, r2, r3}
 8009fae:	b5b0      	push	{r4, r5, r7, lr}
 8009fb0:	b08b      	sub	sp, #44	@ 0x2c
 8009fb2:	af04      	add	r7, sp, #16
 8009fb4:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8009fb6:	f7f9 fad5 	bl	8003564 <HAL_GetTick>
 8009fba:	0003      	movs	r3, r0
 8009fbc:	617b      	str	r3, [r7, #20]
	char *Temp_buffer = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8009fc2:	2330      	movs	r3, #48	@ 0x30
 8009fc4:	18fb      	adds	r3, r7, r3
 8009fc6:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fcc:	2310      	movs	r3, #16
 8009fce:	18fb      	adds	r3, r7, r3
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	f002 fbd7 	bl	800c784 <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 8009fd6:	4b16      	ldr	r3, [pc, #88]	@ (800a030 <LOG_ERROR+0x84>)
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	001a      	movs	r2, r3
 8009fdc:	4b15      	ldr	r3, [pc, #84]	@ (800a034 <LOG_ERROR+0x88>)
 8009fde:	0092      	lsls	r2, r2, #2
 8009fe0:	58d4      	ldr	r4, [r2, r3]
 8009fe2:	4b15      	ldr	r3, [pc, #84]	@ (800a038 <LOG_ERROR+0x8c>)
 8009fe4:	689d      	ldr	r5, [r3, #8]
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	4b14      	ldr	r3, [pc, #80]	@ (800a03c <LOG_ERROR+0x90>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4914      	ldr	r1, [pc, #80]	@ (800a040 <LOG_ERROR+0x94>)
 8009fee:	2008      	movs	r0, #8
 8009ff0:	1838      	adds	r0, r7, r0
 8009ff2:	9303      	str	r3, [sp, #12]
 8009ff4:	9202      	str	r2, [sp, #8]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	9301      	str	r3, [sp, #4]
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	002b      	movs	r3, r5
 800a000:	0022      	movs	r2, r4
 800a002:	f002 fb85 	bl	800c710 <asiprintf>
	plog(Output_buffer);
 800a006:	4b0f      	ldr	r3, [pc, #60]	@ (800a044 <LOG_ERROR+0x98>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	0010      	movs	r0, r2
 800a00e:	4798      	blx	r3

	free(Temp_buffer);
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	0018      	movs	r0, r3
 800a014:	f002 fac0 	bl	800c598 <free>
	free(Output_buffer);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	0018      	movs	r0, r3
 800a01c:	f002 fabc 	bl	800c598 <free>
}
 800a020:	46c0      	nop			@ (mov r8, r8)
 800a022:	46bd      	mov	sp, r7
 800a024:	b007      	add	sp, #28
 800a026:	bcb0      	pop	{r4, r5, r7}
 800a028:	bc08      	pop	{r3}
 800a02a:	b003      	add	sp, #12
 800a02c:	4718      	bx	r3
 800a02e:	46c0      	nop			@ (mov r8, r8)
 800a030:	20000021 	.word	0x20000021
 800a034:	20000044 	.word	0x20000044
 800a038:	20000024 	.word	0x20000024
 800a03c:	20000040 	.word	0x20000040
 800a040:	0800d724 	.word	0x0800d724
 800a044:	200003b4 	.word	0x200003b4

0800a048 <LOG_EVENT>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_EVENT(const char *tag,  const char *format, ...){
 800a048:	b40e      	push	{r1, r2, r3}
 800a04a:	b5b0      	push	{r4, r5, r7, lr}
 800a04c:	b08b      	sub	sp, #44	@ 0x2c
 800a04e:	af04      	add	r7, sp, #16
 800a050:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 800a052:	f7f9 fa87 	bl	8003564 <HAL_GetTick>
 800a056:	0003      	movs	r3, r0
 800a058:	617b      	str	r3, [r7, #20]
	char *Temp_buffer = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 800a05e:	2330      	movs	r3, #48	@ 0x30
 800a060:	18fb      	adds	r3, r7, r3
 800a062:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a068:	2310      	movs	r3, #16
 800a06a:	18fb      	adds	r3, r7, r3
 800a06c:	0018      	movs	r0, r3
 800a06e:	f002 fb89 	bl	800c784 <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logv], log_level_str[5], time, tag, Temp_buffer, COLOR_END);
 800a072:	4b16      	ldr	r3, [pc, #88]	@ (800a0cc <LOG_EVENT+0x84>)
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	001a      	movs	r2, r3
 800a078:	4b15      	ldr	r3, [pc, #84]	@ (800a0d0 <LOG_EVENT+0x88>)
 800a07a:	0092      	lsls	r2, r2, #2
 800a07c:	58d4      	ldr	r4, [r2, r3]
 800a07e:	4b15      	ldr	r3, [pc, #84]	@ (800a0d4 <LOG_EVENT+0x8c>)
 800a080:	695d      	ldr	r5, [r3, #20]
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	4b14      	ldr	r3, [pc, #80]	@ (800a0d8 <LOG_EVENT+0x90>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4914      	ldr	r1, [pc, #80]	@ (800a0dc <LOG_EVENT+0x94>)
 800a08a:	2008      	movs	r0, #8
 800a08c:	1838      	adds	r0, r7, r0
 800a08e:	9303      	str	r3, [sp, #12]
 800a090:	9202      	str	r2, [sp, #8]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	9301      	str	r3, [sp, #4]
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	002b      	movs	r3, r5
 800a09c:	0022      	movs	r2, r4
 800a09e:	f002 fb37 	bl	800c710 <asiprintf>
	plog(Output_buffer);
 800a0a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e0 <LOG_EVENT+0x98>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	0010      	movs	r0, r2
 800a0aa:	4798      	blx	r3

	free(Temp_buffer);
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	0018      	movs	r0, r3
 800a0b0:	f002 fa72 	bl	800c598 <free>
	free(Output_buffer);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	f002 fa6e 	bl	800c598 <free>
}
 800a0bc:	46c0      	nop			@ (mov r8, r8)
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	b007      	add	sp, #28
 800a0c2:	bcb0      	pop	{r4, r5, r7}
 800a0c4:	bc08      	pop	{r3}
 800a0c6:	b003      	add	sp, #12
 800a0c8:	4718      	bx	r3
 800a0ca:	46c0      	nop			@ (mov r8, r8)
 800a0cc:	20000022 	.word	0x20000022
 800a0d0:	20000044 	.word	0x20000044
 800a0d4:	20000024 	.word	0x20000024
 800a0d8:	20000040 	.word	0x20000040
 800a0dc:	0800d724 	.word	0x0800d724
 800a0e0:	200003b4 	.word	0x200003b4

0800a0e4 <RadioGetFskBandwidthRegValue>:
 * Returns the known FSK bandwidth registers value
 *
 * @param  bandwidth Bandwidth value in Hz
 * @retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue(uint32_t bandwidth){
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	uint8_t i;

	if (bandwidth == 0){
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d101      	bne.n	800a0f6 <RadioGetFskBandwidthRegValue+0x12>
		return (0x1F);
 800a0f2:	231f      	movs	r3, #31
 800a0f4:	e02b      	b.n	800a14e <RadioGetFskBandwidthRegValue+0x6a>
	}

	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++){
 800a0f6:	230f      	movs	r3, #15
 800a0f8:	18fb      	adds	r3, r7, r3
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	701a      	strb	r2, [r3, #0]
 800a0fe:	e020      	b.n	800a142 <RadioGetFskBandwidthRegValue+0x5e>
		if ((bandwidth >= FskBandwidths[i].bandwidth) && (bandwidth < FskBandwidths[i + 1].bandwidth)){
 800a100:	210f      	movs	r1, #15
 800a102:	187b      	adds	r3, r7, r1
 800a104:	781a      	ldrb	r2, [r3, #0]
 800a106:	4b14      	ldr	r3, [pc, #80]	@ (800a158 <RadioGetFskBandwidthRegValue+0x74>)
 800a108:	00d2      	lsls	r2, r2, #3
 800a10a:	58d3      	ldr	r3, [r2, r3]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d311      	bcc.n	800a136 <RadioGetFskBandwidthRegValue+0x52>
 800a112:	187b      	adds	r3, r7, r1
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	4b0f      	ldr	r3, [pc, #60]	@ (800a158 <RadioGetFskBandwidthRegValue+0x74>)
 800a11a:	00d2      	lsls	r2, r2, #3
 800a11c:	58d3      	ldr	r3, [r2, r3]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	d208      	bcs.n	800a136 <RadioGetFskBandwidthRegValue+0x52>
			return FskBandwidths[i + 1].RegValue;
 800a124:	187b      	adds	r3, r7, r1
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	3301      	adds	r3, #1
 800a12a:	4a0b      	ldr	r2, [pc, #44]	@ (800a158 <RadioGetFskBandwidthRegValue+0x74>)
 800a12c:	00db      	lsls	r3, r3, #3
 800a12e:	18d3      	adds	r3, r2, r3
 800a130:	3304      	adds	r3, #4
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	e00b      	b.n	800a14e <RadioGetFskBandwidthRegValue+0x6a>
	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++){
 800a136:	210f      	movs	r1, #15
 800a138:	187b      	adds	r3, r7, r1
 800a13a:	781a      	ldrb	r2, [r3, #0]
 800a13c:	187b      	adds	r3, r7, r1
 800a13e:	3201      	adds	r2, #1
 800a140:	701a      	strb	r2, [r3, #0]
 800a142:	230f      	movs	r3, #15
 800a144:	18fb      	adds	r3, r7, r3
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	2b14      	cmp	r3, #20
 800a14a:	d9d9      	bls.n	800a100 <RadioGetFskBandwidthRegValue+0x1c>
		}
	}
	// In case value not found, return bandwidth 0
	return (0x1F);
 800a14c:	231f      	movs	r3, #31
}
 800a14e:	0018      	movs	r0, r3
 800a150:	46bd      	mov	sp, r7
 800a152:	b004      	add	sp, #16
 800a154:	bd80      	pop	{r7, pc}
 800a156:	46c0      	nop			@ (mov r8, r8)
 800a158:	0800d900 	.word	0x0800d900

0800a15c <RadioInit>:

void RadioInit(RadioEvents_t *events){
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 800a164:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a4 <RadioInit+0x48>)
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	601a      	str	r2, [r3, #0]
	SX126xInit();
 800a16a:	f001 f8fd 	bl	800b368 <SX126xInit>
	SX126xSetStandby(STDBY_RC);
 800a16e:	2000      	movs	r0, #0
 800a170:	f001 fa64 	bl	800b63c <SX126xSetStandby>
	if(LORA_USE_LDO){
		SX126xSetRegulatorMode(USE_LDO);
 800a174:	2000      	movs	r0, #0
 800a176:	f001 fb55 	bl	800b824 <SX126xSetRegulatorMode>
	}
	else{
		SX126xSetRegulatorMode(USE_DCDC);
	}

	SX126xSetBufferBaseAddress(0x00, 0x00);
 800a17a:	2100      	movs	r1, #0
 800a17c:	2000      	movs	r0, #0
 800a17e:	f001 fed3 	bl	800bf28 <SX126xSetBufferBaseAddress>
	SX126xSetTxParams(0, RADIO_RAMP_200_US);
 800a182:	2104      	movs	r1, #4
 800a184:	2000      	movs	r0, #0
 800a186:	f001 fcbb 	bl	800bb00 <SX126xSetTxParams>
	SX126xSetDioIrqParams(IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 800a18a:	4907      	ldr	r1, [pc, #28]	@ (800a1a8 <RadioInit+0x4c>)
 800a18c:	4806      	ldr	r0, [pc, #24]	@ (800a1a8 <RadioInit+0x4c>)
 800a18e:	2300      	movs	r3, #0
 800a190:	2200      	movs	r2, #0
 800a192:	f001 fbd9 	bl	800b948 <SX126xSetDioIrqParams>
//	TxTimeoutTimer.oneShot = true;
//	RxTimeoutTimer.oneShot = true;
//	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
//	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);

	IrqFired = false;
 800a196:	4b05      	ldr	r3, [pc, #20]	@ (800a1ac <RadioInit+0x50>)
 800a198:	2200      	movs	r2, #0
 800a19a:	701a      	strb	r2, [r3, #0]
}
 800a19c:	46c0      	nop			@ (mov r8, r8)
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	b002      	add	sp, #8
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	200004e0 	.word	0x200004e0
 800a1a8:	0000ffff 	.word	0x0000ffff
 800a1ac:	200004d7 	.word	0x200004d7

0800a1b0 <RadioReInit>:

void RadioReInit(RadioEvents_t *events){
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 800a1b8:	4b05      	ldr	r3, [pc, #20]	@ (800a1d0 <RadioReInit+0x20>)
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	601a      	str	r2, [r3, #0]
	SX126xReInit();
 800a1be:	f001 f8e5 	bl	800b38c <SX126xReInit>
//	TxTimeoutTimer.oneShot = true;
//	RxTimeoutTimer.oneShot = true;
//	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
//	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);

	IrqFired = false;
 800a1c2:	4b04      	ldr	r3, [pc, #16]	@ (800a1d4 <RadioReInit+0x24>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	701a      	strb	r2, [r3, #0]
}
 800a1c8:	46c0      	nop			@ (mov r8, r8)
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	b002      	add	sp, #8
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	200004e0 	.word	0x200004e0
 800a1d4:	200004d7 	.word	0x200004d7

0800a1d8 <RadioGetStatus>:

RadioState_t RadioGetStatus(void){
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
	switch (SX126xGetOperatingMode()){
 800a1dc:	f001 f8dc 	bl	800b398 <SX126xGetOperatingMode>
 800a1e0:	0003      	movs	r3, r0
 800a1e2:	2b07      	cmp	r3, #7
 800a1e4:	d009      	beq.n	800a1fa <RadioGetStatus+0x22>
 800a1e6:	dc0a      	bgt.n	800a1fe <RadioGetStatus+0x26>
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	d002      	beq.n	800a1f2 <RadioGetStatus+0x1a>
 800a1ec:	2b05      	cmp	r3, #5
 800a1ee:	d002      	beq.n	800a1f6 <RadioGetStatus+0x1e>
 800a1f0:	e005      	b.n	800a1fe <RadioGetStatus+0x26>
		case MODE_TX:
		return RF_TX_RUNNING;
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	e004      	b.n	800a200 <RadioGetStatus+0x28>
		case MODE_RX:
		return RF_RX_RUNNING;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e002      	b.n	800a200 <RadioGetStatus+0x28>
		case MODE_CAD:
		return RF_CAD;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e000      	b.n	800a200 <RadioGetStatus+0x28>
		default:
		return RF_IDLE;
 800a1fe:	2300      	movs	r3, #0
	}
}
 800a200:	0018      	movs	r0, r3
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <RadioSetModem>:

void RadioSetModem(RadioModems_t modem){
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	0002      	movs	r2, r0
 800a210:	1dfb      	adds	r3, r7, #7
 800a212:	701a      	strb	r2, [r3, #0]
	switch (modem){
 800a214:	1dfb      	adds	r3, r7, #7
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d00a      	beq.n	800a232 <RadioSetModem+0x2a>
		default:
		case MODEM_FSK:
			SX126xSetPacketType(PACKET_TYPE_GFSK);
 800a21c:	2000      	movs	r0, #0
 800a21e:	f001 fc4f 	bl	800bac0 <SX126xSetPacketType>
			// When switching to GFSK mode the LoRa SyncWord register value is reset
			// Thus, we also reset the RadioPublicNetwork variable
			RadioPublicNetwork.Current = false;
 800a222:	4b11      	ldr	r3, [pc, #68]	@ (800a268 <RadioSetModem+0x60>)
 800a224:	2200      	movs	r2, #0
 800a226:	705a      	strb	r2, [r3, #1]
			_modem = modem;
 800a228:	4b10      	ldr	r3, [pc, #64]	@ (800a26c <RadioSetModem+0x64>)
 800a22a:	1dfa      	adds	r2, r7, #7
 800a22c:	7812      	ldrb	r2, [r2, #0]
 800a22e:	701a      	strb	r2, [r3, #0]
		break;
 800a230:	e016      	b.n	800a260 <RadioSetModem+0x58>
		case MODEM_LORA:
			SX126xSetPacketType(PACKET_TYPE_LORA);
 800a232:	2001      	movs	r0, #1
 800a234:	f001 fc44 	bl	800bac0 <SX126xSetPacketType>
			// Public/Private network register is reset when switching modems
			if (RadioPublicNetwork.Current != RadioPublicNetwork.Previous){
 800a238:	4b0b      	ldr	r3, [pc, #44]	@ (800a268 <RadioSetModem+0x60>)
 800a23a:	785a      	ldrb	r2, [r3, #1]
 800a23c:	4b0a      	ldr	r3, [pc, #40]	@ (800a268 <RadioSetModem+0x60>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	429a      	cmp	r2, r3
 800a242:	d008      	beq.n	800a256 <RadioSetModem+0x4e>
				RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 800a244:	4b08      	ldr	r3, [pc, #32]	@ (800a268 <RadioSetModem+0x60>)
 800a246:	781a      	ldrb	r2, [r3, #0]
 800a248:	4b07      	ldr	r3, [pc, #28]	@ (800a268 <RadioSetModem+0x60>)
 800a24a:	705a      	strb	r2, [r3, #1]
				RadioSetPublicNetwork(RadioPublicNetwork.Current);
 800a24c:	4b06      	ldr	r3, [pc, #24]	@ (800a268 <RadioSetModem+0x60>)
 800a24e:	785b      	ldrb	r3, [r3, #1]
 800a250:	0018      	movs	r0, r3
 800a252:	f000 feb1 	bl	800afb8 <RadioSetPublicNetwork>
			}
			_modem = modem;
 800a256:	4b05      	ldr	r3, [pc, #20]	@ (800a26c <RadioSetModem+0x64>)
 800a258:	1dfa      	adds	r2, r7, #7
 800a25a:	7812      	ldrb	r2, [r2, #0]
 800a25c:	701a      	strb	r2, [r3, #0]
		break;
 800a25e:	46c0      	nop			@ (mov r8, r8)
	}
}
 800a260:	46c0      	nop			@ (mov r8, r8)
 800a262:	46bd      	mov	sp, r7
 800a264:	b002      	add	sp, #8
 800a266:	bd80      	pop	{r7, pc}
 800a268:	200004dc 	.word	0x200004dc
 800a26c:	200004da 	.word	0x200004da

0800a270 <RadioSetChannel>:

void RadioSetChannel(uint32_t freq){
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
	SX126xSetRfFrequency(freq);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	0018      	movs	r0, r3
 800a27c:	f001 fbda 	bl	800ba34 <SX126xSetRfFrequency>
}
 800a280:	46c0      	nop			@ (mov r8, r8)
 800a282:	46bd      	mov	sp, r7
 800a284:	b002      	add	sp, #8
 800a286:	bd80      	pop	{r7, pc}

0800a288 <RadioIsChannelFree>:

bool RadioIsChannelFree(RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime){
 800a288:	b5b0      	push	{r4, r5, r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	0011      	movs	r1, r2
 800a292:	607b      	str	r3, [r7, #4]
 800a294:	230f      	movs	r3, #15
 800a296:	18fb      	adds	r3, r7, r3
 800a298:	1c02      	adds	r2, r0, #0
 800a29a:	701a      	strb	r2, [r3, #0]
 800a29c:	230c      	movs	r3, #12
 800a29e:	18fb      	adds	r3, r7, r3
 800a2a0:	1c0a      	adds	r2, r1, #0
 800a2a2:	801a      	strh	r2, [r3, #0]
	bool status = true;
 800a2a4:	2317      	movs	r3, #23
 800a2a6:	18fb      	adds	r3, r7, r3
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	701a      	strb	r2, [r3, #0]
	int16_t rssi = 0;
 800a2ac:	2314      	movs	r3, #20
 800a2ae:	18fb      	adds	r3, r7, r3
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	801a      	strh	r2, [r3, #0]
	uint32_t carrierSenseTime = 0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	613b      	str	r3, [r7, #16]

	if (RadioGetStatus() != RF_IDLE){
 800a2b8:	f7ff ff8e 	bl	800a1d8 <RadioGetStatus>
 800a2bc:	1e03      	subs	r3, r0, #0
 800a2be:	d001      	beq.n	800a2c4 <RadioIsChannelFree+0x3c>
		return false;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e039      	b.n	800a338 <RadioIsChannelFree+0xb0>
	}

	RadioSetModem(modem);
 800a2c4:	230f      	movs	r3, #15
 800a2c6:	18fb      	adds	r3, r7, r3
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	0018      	movs	r0, r3
 800a2cc:	f7ff ff9c 	bl	800a208 <RadioSetModem>
	RadioSetChannel(freq);
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	0018      	movs	r0, r3
 800a2d4:	f7ff ffcc 	bl	800a270 <RadioSetChannel>
	RadioRx(0);
 800a2d8:	2000      	movs	r0, #0
 800a2da:	f000 fd21 	bl	800ad20 <RadioRx>

	HAL_Delay(1);
 800a2de:	2001      	movs	r0, #1
 800a2e0:	f7f9 f94a 	bl	8003578 <HAL_Delay>

	carrierSenseTime = HAL_GetTick();
 800a2e4:	f7f9 f93e 	bl	8003564 <HAL_GetTick>
 800a2e8:	0003      	movs	r3, r0
 800a2ea:	613b      	str	r3, [r7, #16]

	while (HAL_GetTick() - carrierSenseTime < maxCarrierSenseTime){
 800a2ec:	e017      	b.n	800a31e <RadioIsChannelFree+0x96>
		rssi = RadioRssi(modem);
 800a2ee:	2514      	movs	r5, #20
 800a2f0:	197c      	adds	r4, r7, r5
 800a2f2:	230f      	movs	r3, #15
 800a2f4:	18fb      	adds	r3, r7, r3
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	f000 fdc4 	bl	800ae86 <RadioRssi>
 800a2fe:	0003      	movs	r3, r0
 800a300:	8023      	strh	r3, [r4, #0]
		if (rssi > rssiThresh){
 800a302:	197a      	adds	r2, r7, r5
 800a304:	230c      	movs	r3, #12
 800a306:	18fb      	adds	r3, r7, r3
 800a308:	2100      	movs	r1, #0
 800a30a:	5e52      	ldrsh	r2, [r2, r1]
 800a30c:	2100      	movs	r1, #0
 800a30e:	5e5b      	ldrsh	r3, [r3, r1]
 800a310:	429a      	cmp	r2, r3
 800a312:	dd04      	ble.n	800a31e <RadioIsChannelFree+0x96>
			status = false;
 800a314:	2317      	movs	r3, #23
 800a316:	18fb      	adds	r3, r7, r3
 800a318:	2200      	movs	r2, #0
 800a31a:	701a      	strb	r2, [r3, #0]
			break;
 800a31c:	e007      	b.n	800a32e <RadioIsChannelFree+0xa6>
	while (HAL_GetTick() - carrierSenseTime < maxCarrierSenseTime){
 800a31e:	f7f9 f921 	bl	8003564 <HAL_GetTick>
 800a322:	0002      	movs	r2, r0
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d8df      	bhi.n	800a2ee <RadioIsChannelFree+0x66>
		}
	}
	RadioSleep();
 800a32e:	f000 fcd7 	bl	800ace0 <RadioSleep>
	return status;
 800a332:	2317      	movs	r3, #23
 800a334:	18fb      	adds	r3, r7, r3
 800a336:	781b      	ldrb	r3, [r3, #0]
}
 800a338:	0018      	movs	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	b006      	add	sp, #24
 800a33e:	bdb0      	pop	{r4, r5, r7, pc}

0800a340 <RadioRandom>:

uint32_t RadioRandom(void){
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
	uint32_t rnd = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	607b      	str	r3, [r7, #4]
	/*
	 * Radio setup for random number generation
	 */
	// Set LoRa modem ON
	RadioSetModem(MODEM_LORA);
 800a34a:	2001      	movs	r0, #1
 800a34c:	f7ff ff5c 	bl	800a208 <RadioSetModem>
	// Set radio in continuous reception
	SX126xSetRx(0);
 800a350:	2000      	movs	r0, #0
 800a352:	f001 f9b1 	bl	800b6b8 <SX126xSetRx>

	rnd = SX126xGetRandom();
 800a356:	f001 f93d 	bl	800b5d4 <SX126xGetRandom>
 800a35a:	0003      	movs	r3, r0
 800a35c:	607b      	str	r3, [r7, #4]
	RadioSleep();
 800a35e:	f000 fcbf 	bl	800ace0 <RadioSleep>

	return rnd;
 800a362:	687b      	ldr	r3, [r7, #4]
}
 800a364:	0018      	movs	r0, r3
 800a366:	46bd      	mov	sp, r7
 800a368:	b002      	add	sp, #8
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <RadioSetRxConfig>:
					  uint32_t bandwidthAfc, uint16_t preambleLen,
					  uint16_t symbTimeout, bool fixLen,
					  uint8_t payloadLen,
					  bool crcOn, bool freqHopOn, uint8_t hopPeriod,
					  bool iqInverted, bool rxContinuous)
{
 800a36c:	b5b0      	push	{r4, r5, r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
 800a372:	60b9      	str	r1, [r7, #8]
 800a374:	607a      	str	r2, [r7, #4]
 800a376:	0019      	movs	r1, r3
 800a378:	230f      	movs	r3, #15
 800a37a:	18fb      	adds	r3, r7, r3
 800a37c:	1c02      	adds	r2, r0, #0
 800a37e:	701a      	strb	r2, [r3, #0]
 800a380:	230e      	movs	r3, #14
 800a382:	18fb      	adds	r3, r7, r3
 800a384:	1c0a      	adds	r2, r1, #0
 800a386:	701a      	strb	r2, [r3, #0]

	RxContinuous = rxContinuous;
 800a388:	4bc2      	ldr	r3, [pc, #776]	@ (800a694 <RadioSetRxConfig+0x328>)
 800a38a:	2224      	movs	r2, #36	@ 0x24
 800a38c:	2128      	movs	r1, #40	@ 0x28
 800a38e:	1852      	adds	r2, r2, r1
 800a390:	19d2      	adds	r2, r2, r7
 800a392:	7812      	ldrb	r2, [r2, #0]
 800a394:	701a      	strb	r2, [r3, #0]
	if (rxContinuous == true){
 800a396:	2324      	movs	r3, #36	@ 0x24
 800a398:	185b      	adds	r3, r3, r1
 800a39a:	19db      	adds	r3, r3, r7
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <RadioSetRxConfig+0x3e>
		symbTimeout = 0;
 800a3a2:	2330      	movs	r3, #48	@ 0x30
 800a3a4:	18fb      	adds	r3, r7, r3
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	801a      	strh	r2, [r3, #0]
	}
	if (fixLen == true){
 800a3aa:	2334      	movs	r3, #52	@ 0x34
 800a3ac:	18fb      	adds	r3, r7, r3
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d005      	beq.n	800a3c0 <RadioSetRxConfig+0x54>
		MaxPayloadLength = payloadLen;
 800a3b4:	4bb8      	ldr	r3, [pc, #736]	@ (800a698 <RadioSetRxConfig+0x32c>)
 800a3b6:	2238      	movs	r2, #56	@ 0x38
 800a3b8:	18ba      	adds	r2, r7, r2
 800a3ba:	7812      	ldrb	r2, [r2, #0]
 800a3bc:	701a      	strb	r2, [r3, #0]
 800a3be:	e002      	b.n	800a3c6 <RadioSetRxConfig+0x5a>
	}
	else{
		MaxPayloadLength = 0xFF;
 800a3c0:	4bb5      	ldr	r3, [pc, #724]	@ (800a698 <RadioSetRxConfig+0x32c>)
 800a3c2:	22ff      	movs	r2, #255	@ 0xff
 800a3c4:	701a      	strb	r2, [r3, #0]
	}

	switch (modem){
 800a3c6:	230f      	movs	r3, #15
 800a3c8:	18fb      	adds	r3, r7, r3
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <RadioSetRxConfig+0x6c>
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d100      	bne.n	800a3d6 <RadioSetRxConfig+0x6a>
 800a3d4:	e0af      	b.n	800a536 <RadioSetRxConfig+0x1ca>
			// WORKAROUND END
			// Timeout Max, Timeout handled directly in SetRx function
			RxTimeout = RXTIMEOUT_LORA_MAX;
		break;
	}
}
 800a3d6:	e159      	b.n	800a68c <RadioSetRxConfig+0x320>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 800a3d8:	2000      	movs	r0, #0
 800a3da:	f001 fa03 	bl	800b7e4 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a3de:	4baf      	ldr	r3, [pc, #700]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a3e0:	2240      	movs	r2, #64	@ 0x40
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800a3e6:	4bad      	ldr	r3, [pc, #692]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	645a      	str	r2, [r3, #68]	@ 0x44
			SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800a3ec:	4bab      	ldr	r3, [pc, #684]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a3ee:	224c      	movs	r2, #76	@ 0x4c
 800a3f0:	210b      	movs	r1, #11
 800a3f2:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue(bandwidth);
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	0018      	movs	r0, r3
 800a3f8:	f7ff fe74 	bl	800a0e4 <RadioGetFskBandwidthRegValue>
 800a3fc:	0003      	movs	r3, r0
 800a3fe:	0019      	movs	r1, r3
 800a400:	4ba6      	ldr	r3, [pc, #664]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a402:	224d      	movs	r2, #77	@ 0x4d
 800a404:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a406:	4ba5      	ldr	r3, [pc, #660]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a408:	2200      	movs	r2, #0
 800a40a:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 800a40c:	232c      	movs	r3, #44	@ 0x2c
 800a40e:	18fb      	adds	r3, r7, r3
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	00db      	lsls	r3, r3, #3
 800a414:	b29a      	uxth	r2, r3
 800a416:	4ba1      	ldr	r3, [pc, #644]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a418:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800a41a:	4ba0      	ldr	r3, [pc, #640]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a41c:	2204      	movs	r2, #4
 800a41e:	771a      	strb	r2, [r3, #28]
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800a420:	4b9e      	ldr	r3, [pc, #632]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a422:	2218      	movs	r2, #24
 800a424:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800a426:	4b9d      	ldr	r3, [pc, #628]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a428:	2200      	movs	r2, #0
 800a42a:	779a      	strb	r2, [r3, #30]
			SX126x.PacketParams.Params.Gfsk.HeaderType = (fixLen == true) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800a42c:	2334      	movs	r3, #52	@ 0x34
 800a42e:	18fb      	adds	r3, r7, r3
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2201      	movs	r2, #1
 800a434:	4053      	eors	r3, r2
 800a436:	b2db      	uxtb	r3, r3
 800a438:	001a      	movs	r2, r3
 800a43a:	4b98      	ldr	r3, [pc, #608]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a43c:	77da      	strb	r2, [r3, #31]
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800a43e:	4b96      	ldr	r3, [pc, #600]	@ (800a698 <RadioSetRxConfig+0x32c>)
 800a440:	7819      	ldrb	r1, [r3, #0]
 800a442:	4b96      	ldr	r3, [pc, #600]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a444:	2220      	movs	r2, #32
 800a446:	5499      	strb	r1, [r3, r2]
			if (crcOn == true){
 800a448:	233c      	movs	r3, #60	@ 0x3c
 800a44a:	18fb      	adds	r3, r7, r3
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d004      	beq.n	800a45c <RadioSetRxConfig+0xf0>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800a452:	4b92      	ldr	r3, [pc, #584]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a454:	2221      	movs	r2, #33	@ 0x21
 800a456:	21f2      	movs	r1, #242	@ 0xf2
 800a458:	5499      	strb	r1, [r3, r2]
 800a45a:	e003      	b.n	800a464 <RadioSetRxConfig+0xf8>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800a45c:	4b8f      	ldr	r3, [pc, #572]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a45e:	2221      	movs	r2, #33	@ 0x21
 800a460:	2101      	movs	r1, #1
 800a462:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800a464:	4b8d      	ldr	r3, [pc, #564]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a466:	2222      	movs	r2, #34	@ 0x22
 800a468:	2101      	movs	r1, #1
 800a46a:	5499      	strb	r1, [r3, r2]
			RadioStandby();
 800a46c:	f000 fc4f 	bl	800ad0e <RadioStandby>
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 800a470:	4b8a      	ldr	r3, [pc, #552]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a472:	2240      	movs	r2, #64	@ 0x40
 800a474:	5c9b      	ldrb	r3, [r3, r2]
 800a476:	1e5a      	subs	r2, r3, #1
 800a478:	4193      	sbcs	r3, r2
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	0018      	movs	r0, r3
 800a47e:	f7ff fec3 	bl	800a208 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 800a482:	4b87      	ldr	r3, [pc, #540]	@ (800a6a0 <RadioSetRxConfig+0x334>)
 800a484:	0018      	movs	r0, r3
 800a486:	f001 fbb5 	bl	800bbf4 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 800a48a:	4b86      	ldr	r3, [pc, #536]	@ (800a6a4 <RadioSetRxConfig+0x338>)
 800a48c:	0018      	movs	r0, r3
 800a48e:	f001 fc57 	bl	800bd40 <SX126xSetPacketParams>
			syncWord[0] = 0xC1;
 800a492:	2110      	movs	r1, #16
 800a494:	187b      	adds	r3, r7, r1
 800a496:	22c1      	movs	r2, #193	@ 0xc1
 800a498:	701a      	strb	r2, [r3, #0]
			syncWord[1] = 0x94;
 800a49a:	187b      	adds	r3, r7, r1
 800a49c:	2294      	movs	r2, #148	@ 0x94
 800a49e:	705a      	strb	r2, [r3, #1]
			syncWord[2] = 0xC1;
 800a4a0:	187b      	adds	r3, r7, r1
 800a4a2:	22c1      	movs	r2, #193	@ 0xc1
 800a4a4:	709a      	strb	r2, [r3, #2]
			syncWord[3] = 0x00;
 800a4a6:	187b      	adds	r3, r7, r1
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	70da      	strb	r2, [r3, #3]
			syncWord[4] = 0x00;
 800a4ac:	187b      	adds	r3, r7, r1
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	711a      	strb	r2, [r3, #4]
			syncWord[5] = 0x00;
 800a4b2:	187b      	adds	r3, r7, r1
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	715a      	strb	r2, [r3, #5]
			syncWord[6] = 0x00;
 800a4b8:	187b      	adds	r3, r7, r1
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	719a      	strb	r2, [r3, #6]
			syncWord[7] = 0x00;
 800a4be:	187b      	adds	r3, r7, r1
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	71da      	strb	r2, [r3, #7]
			SX126xSetSyncWord(syncWord);
 800a4c4:	187b      	adds	r3, r7, r1
 800a4c6:	0018      	movs	r0, r3
 800a4c8:	f000 ffe5 	bl	800b496 <SX126xSetSyncWord>
			SX126xSetWhiteningSeed(0x01FF);
 800a4cc:	4b76      	ldr	r3, [pc, #472]	@ (800a6a8 <RadioSetRxConfig+0x33c>)
 800a4ce:	0018      	movs	r0, r3
 800a4d0:	f001 f83e 	bl	800b550 <SX126xSetWhiteningSeed>
			RxTimeout = (uint32_t)(symbTimeout * ((1.0 / (double)datarate) * 8.0) * 1000);
 800a4d4:	2330      	movs	r3, #48	@ 0x30
 800a4d6:	18fb      	adds	r3, r7, r3
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	0018      	movs	r0, r3
 800a4dc:	f7f7 ff4a 	bl	8002374 <__aeabi_i2d>
 800a4e0:	0004      	movs	r4, r0
 800a4e2:	000d      	movs	r5, r1
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7f7 ff73 	bl	80023d0 <__aeabi_ui2d>
 800a4ea:	0002      	movs	r2, r0
 800a4ec:	000b      	movs	r3, r1
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	496e      	ldr	r1, [pc, #440]	@ (800a6ac <RadioSetRxConfig+0x340>)
 800a4f2:	f7f6 fc5b 	bl	8000dac <__aeabi_ddiv>
 800a4f6:	0002      	movs	r2, r0
 800a4f8:	000b      	movs	r3, r1
 800a4fa:	0010      	movs	r0, r2
 800a4fc:	0019      	movs	r1, r3
 800a4fe:	2200      	movs	r2, #0
 800a500:	4b6b      	ldr	r3, [pc, #428]	@ (800a6b0 <RadioSetRxConfig+0x344>)
 800a502:	f7f7 f897 	bl	8001634 <__aeabi_dmul>
 800a506:	0002      	movs	r2, r0
 800a508:	000b      	movs	r3, r1
 800a50a:	0020      	movs	r0, r4
 800a50c:	0029      	movs	r1, r5
 800a50e:	f7f7 f891 	bl	8001634 <__aeabi_dmul>
 800a512:	0002      	movs	r2, r0
 800a514:	000b      	movs	r3, r1
 800a516:	0010      	movs	r0, r2
 800a518:	0019      	movs	r1, r3
 800a51a:	2200      	movs	r2, #0
 800a51c:	4b65      	ldr	r3, [pc, #404]	@ (800a6b4 <RadioSetRxConfig+0x348>)
 800a51e:	f7f7 f889 	bl	8001634 <__aeabi_dmul>
 800a522:	0002      	movs	r2, r0
 800a524:	000b      	movs	r3, r1
 800a526:	0010      	movs	r0, r2
 800a528:	0019      	movs	r1, r3
 800a52a:	f7f5 fff1 	bl	8000510 <__aeabi_d2uiz>
 800a52e:	0002      	movs	r2, r0
 800a530:	4b61      	ldr	r3, [pc, #388]	@ (800a6b8 <RadioSetRxConfig+0x34c>)
 800a532:	601a      	str	r2, [r3, #0]
		break;
 800a534:	e0aa      	b.n	800a68c <RadioSetRxConfig+0x320>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 800a536:	2000      	movs	r0, #0
 800a538:	f001 f954 	bl	800b7e4 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126xSetLoRaSymbNumTimeout(symbTimeout);
 800a53c:	2330      	movs	r3, #48	@ 0x30
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	b2db      	uxtb	r3, r3
 800a544:	0018      	movs	r0, r3
 800a546:	f001 f95d 	bl	800b804 <SX126xSetLoRaSymbNumTimeout>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a54a:	4b54      	ldr	r3, [pc, #336]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a54c:	2240      	movs	r2, #64	@ 0x40
 800a54e:	2101      	movs	r1, #1
 800a550:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)datarate;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	b2d9      	uxtb	r1, r3
 800a556:	4b51      	ldr	r3, [pc, #324]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a558:	2250      	movs	r2, #80	@ 0x50
 800a55a:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800a55c:	4a57      	ldr	r2, [pc, #348]	@ (800a6bc <RadioSetRxConfig+0x350>)
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	18d3      	adds	r3, r2, r3
 800a562:	7819      	ldrb	r1, [r3, #0]
 800a564:	4b4d      	ldr	r3, [pc, #308]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a566:	2251      	movs	r2, #81	@ 0x51
 800a568:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)coderate;
 800a56a:	4b4c      	ldr	r3, [pc, #304]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a56c:	220e      	movs	r2, #14
 800a56e:	18ba      	adds	r2, r7, r2
 800a570:	2152      	movs	r1, #82	@ 0x52
 800a572:	7812      	ldrb	r2, [r2, #0]
 800a574:	545a      	strb	r2, [r3, r1]
			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12))) ||
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d105      	bne.n	800a588 <RadioSetRxConfig+0x21c>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b0b      	cmp	r3, #11
 800a580:	d008      	beq.n	800a594 <RadioSetRxConfig+0x228>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b0c      	cmp	r3, #12
 800a586:	d005      	beq.n	800a594 <RadioSetRxConfig+0x228>
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d107      	bne.n	800a59e <RadioSetRxConfig+0x232>
				((bandwidth == 1) && (datarate == 12))){
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b0c      	cmp	r3, #12
 800a592:	d104      	bne.n	800a59e <RadioSetRxConfig+0x232>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800a594:	4b41      	ldr	r3, [pc, #260]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a596:	2253      	movs	r2, #83	@ 0x53
 800a598:	2101      	movs	r1, #1
 800a59a:	5499      	strb	r1, [r3, r2]
 800a59c:	e003      	b.n	800a5a6 <RadioSetRxConfig+0x23a>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800a59e:	4b3f      	ldr	r3, [pc, #252]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a5a0:	2253      	movs	r2, #83	@ 0x53
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a5a6:	4b3d      	ldr	r3, [pc, #244]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	761a      	strb	r2, [r3, #24]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 800a5ac:	4b3b      	ldr	r3, [pc, #236]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a5ae:	2250      	movs	r2, #80	@ 0x50
 800a5b0:	5c9b      	ldrb	r3, [r3, r2]
 800a5b2:	2b05      	cmp	r3, #5
 800a5b4:	d004      	beq.n	800a5c0 <RadioSetRxConfig+0x254>
				(SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6)){
 800a5b6:	4b39      	ldr	r3, [pc, #228]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a5b8:	2250      	movs	r2, #80	@ 0x50
 800a5ba:	5c9b      	ldrb	r3, [r3, r2]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 800a5bc:	2b06      	cmp	r3, #6
 800a5be:	d10e      	bne.n	800a5de <RadioSetRxConfig+0x272>
				if (preambleLen < 12){
 800a5c0:	232c      	movs	r3, #44	@ 0x2c
 800a5c2:	18fb      	adds	r3, r7, r3
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	2b0b      	cmp	r3, #11
 800a5c8:	d803      	bhi.n	800a5d2 <RadioSetRxConfig+0x266>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800a5ca:	4b34      	ldr	r3, [pc, #208]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a5cc:	220c      	movs	r2, #12
 800a5ce:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 800a5d0:	e00a      	b.n	800a5e8 <RadioSetRxConfig+0x27c>
					SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a5d2:	4b32      	ldr	r3, [pc, #200]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a5d4:	222c      	movs	r2, #44	@ 0x2c
 800a5d6:	18ba      	adds	r2, r7, r2
 800a5d8:	8812      	ldrh	r2, [r2, #0]
 800a5da:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 800a5dc:	e004      	b.n	800a5e8 <RadioSetRxConfig+0x27c>
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a5de:	4b2f      	ldr	r3, [pc, #188]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a5e0:	222c      	movs	r2, #44	@ 0x2c
 800a5e2:	18ba      	adds	r2, r7, r2
 800a5e4:	8812      	ldrh	r2, [r2, #0]
 800a5e6:	849a      	strh	r2, [r3, #36]	@ 0x24
			SX126x.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t)fixLen;
 800a5e8:	2334      	movs	r3, #52	@ 0x34
 800a5ea:	18fb      	adds	r3, r7, r3
 800a5ec:	7819      	ldrb	r1, [r3, #0]
 800a5ee:	4b2b      	ldr	r3, [pc, #172]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a5f0:	2226      	movs	r2, #38	@ 0x26
 800a5f2:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a5f4:	4b28      	ldr	r3, [pc, #160]	@ (800a698 <RadioSetRxConfig+0x32c>)
 800a5f6:	7819      	ldrb	r1, [r3, #0]
 800a5f8:	4b28      	ldr	r3, [pc, #160]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a5fa:	2227      	movs	r2, #39	@ 0x27
 800a5fc:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t)crcOn;
 800a5fe:	233c      	movs	r3, #60	@ 0x3c
 800a600:	18fb      	adds	r3, r7, r3
 800a602:	7819      	ldrb	r1, [r3, #0]
 800a604:	4b25      	ldr	r3, [pc, #148]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a606:	2228      	movs	r2, #40	@ 0x28
 800a608:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.InvertIQ = (RadioLoRaIQModes_t)iqInverted;
 800a60a:	2320      	movs	r3, #32
 800a60c:	2228      	movs	r2, #40	@ 0x28
 800a60e:	189b      	adds	r3, r3, r2
 800a610:	19db      	adds	r3, r3, r7
 800a612:	7819      	ldrb	r1, [r3, #0]
 800a614:	4b21      	ldr	r3, [pc, #132]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a616:	2229      	movs	r2, #41	@ 0x29
 800a618:	5499      	strb	r1, [r3, r2]
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 800a61a:	4b20      	ldr	r3, [pc, #128]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a61c:	2240      	movs	r2, #64	@ 0x40
 800a61e:	5c9b      	ldrb	r3, [r3, r2]
 800a620:	1e5a      	subs	r2, r3, #1
 800a622:	4193      	sbcs	r3, r2
 800a624:	b2db      	uxtb	r3, r3
 800a626:	0018      	movs	r0, r3
 800a628:	f7ff fdee 	bl	800a208 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 800a62c:	4b1c      	ldr	r3, [pc, #112]	@ (800a6a0 <RadioSetRxConfig+0x334>)
 800a62e:	0018      	movs	r0, r3
 800a630:	f001 fae0 	bl	800bbf4 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 800a634:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a4 <RadioSetRxConfig+0x338>)
 800a636:	0018      	movs	r0, r3
 800a638:	f001 fb82 	bl	800bd40 <SX126xSetPacketParams>
			if (SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED){
 800a63c:	4b17      	ldr	r3, [pc, #92]	@ (800a69c <RadioSetRxConfig+0x330>)
 800a63e:	2229      	movs	r2, #41	@ 0x29
 800a640:	5c9b      	ldrb	r3, [r3, r2]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d10f      	bne.n	800a666 <RadioSetRxConfig+0x2fa>
				SX126xWriteRegister(0x0736, SX126xReadRegister(0x0736) & ~(1 << 2));
 800a646:	4b1e      	ldr	r3, [pc, #120]	@ (800a6c0 <RadioSetRxConfig+0x354>)
 800a648:	0018      	movs	r0, r3
 800a64a:	f001 fee7 	bl	800c41c <SX126xReadRegister>
 800a64e:	0003      	movs	r3, r0
 800a650:	001a      	movs	r2, r3
 800a652:	2304      	movs	r3, #4
 800a654:	439a      	bics	r2, r3
 800a656:	0013      	movs	r3, r2
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	4a19      	ldr	r2, [pc, #100]	@ (800a6c0 <RadioSetRxConfig+0x354>)
 800a65c:	0019      	movs	r1, r3
 800a65e:	0010      	movs	r0, r2
 800a660:	f001 fe82 	bl	800c368 <SX126xWriteRegister>
 800a664:	e00d      	b.n	800a682 <RadioSetRxConfig+0x316>
				SX126xWriteRegister(0x0736, SX126xReadRegister(0x0736) | (1 << 2));
 800a666:	4b16      	ldr	r3, [pc, #88]	@ (800a6c0 <RadioSetRxConfig+0x354>)
 800a668:	0018      	movs	r0, r3
 800a66a:	f001 fed7 	bl	800c41c <SX126xReadRegister>
 800a66e:	0003      	movs	r3, r0
 800a670:	001a      	movs	r2, r3
 800a672:	2304      	movs	r3, #4
 800a674:	4313      	orrs	r3, r2
 800a676:	b2db      	uxtb	r3, r3
 800a678:	4a11      	ldr	r2, [pc, #68]	@ (800a6c0 <RadioSetRxConfig+0x354>)
 800a67a:	0019      	movs	r1, r3
 800a67c:	0010      	movs	r0, r2
 800a67e:	f001 fe73 	bl	800c368 <SX126xWriteRegister>
			RxTimeout = RXTIMEOUT_LORA_MAX;
 800a682:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b8 <RadioSetRxConfig+0x34c>)
 800a684:	22e0      	movs	r2, #224	@ 0xe0
 800a686:	0092      	lsls	r2, r2, #2
 800a688:	601a      	str	r2, [r3, #0]
		break;
 800a68a:	46c0      	nop			@ (mov r8, r8)
}
 800a68c:	46c0      	nop			@ (mov r8, r8)
 800a68e:	46bd      	mov	sp, r7
 800a690:	b006      	add	sp, #24
 800a692:	bdb0      	pop	{r4, r5, r7, pc}
 800a694:	200003c0 	.word	0x200003c0
 800a698:	20000158 	.word	0x20000158
 800a69c:	200004e4 	.word	0x200004e4
 800a6a0:	20000524 	.word	0x20000524
 800a6a4:	200004fc 	.word	0x200004fc
 800a6a8:	000001ff 	.word	0x000001ff
 800a6ac:	3ff00000 	.word	0x3ff00000
 800a6b0:	40200000 	.word	0x40200000
 800a6b4:	408f4000 	.word	0x408f4000
 800a6b8:	200003bc 	.word	0x200003bc
 800a6bc:	0800d9b0 	.word	0x0800d9b0
 800a6c0:	00000736 	.word	0x00000736

0800a6c4 <RadioSetTxConfig>:

void RadioSetTxConfig(RadioModems_t modem, int8_t power, uint32_t fdev,
					  uint32_t bandwidth, uint32_t datarate,
					  uint8_t coderate, uint16_t preambleLen,
					  bool fixLen, bool crcOn, bool freqHopOn,
					  uint8_t hopPeriod, bool iqInverted, uint32_t timeout){
 800a6c4:	b590      	push	{r4, r7, lr}
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60ba      	str	r2, [r7, #8]
 800a6cc:	607b      	str	r3, [r7, #4]
 800a6ce:	240f      	movs	r4, #15
 800a6d0:	193b      	adds	r3, r7, r4
 800a6d2:	1c02      	adds	r2, r0, #0
 800a6d4:	701a      	strb	r2, [r3, #0]
 800a6d6:	230e      	movs	r3, #14
 800a6d8:	18fb      	adds	r3, r7, r3
 800a6da:	1c0a      	adds	r2, r1, #0
 800a6dc:	701a      	strb	r2, [r3, #0]

	switch (modem){
 800a6de:	193b      	adds	r3, r7, r4
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <RadioSetTxConfig+0x2a>
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d100      	bne.n	800a6ec <RadioSetTxConfig+0x28>
 800a6ea:	e07e      	b.n	800a7ea <RadioSetTxConfig+0x126>
 800a6ec:	e103      	b.n	800a8f6 <RadioSetTxConfig+0x232>
		case MODEM_FSK:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a6ee:	4b9d      	ldr	r3, [pc, #628]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a6f0:	2240      	movs	r2, #64	@ 0x40
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800a6f6:	4b9b      	ldr	r3, [pc, #620]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a6f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6fa:	645a      	str	r2, [r3, #68]	@ 0x44

			SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800a6fc:	4b99      	ldr	r3, [pc, #612]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a6fe:	224c      	movs	r2, #76	@ 0x4c
 800a700:	210b      	movs	r1, #11
 800a702:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue(bandwidth);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	0018      	movs	r0, r3
 800a708:	f7ff fcec 	bl	800a0e4 <RadioGetFskBandwidthRegValue>
 800a70c:	0003      	movs	r3, r0
 800a70e:	0019      	movs	r1, r3
 800a710:	4b94      	ldr	r3, [pc, #592]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a712:	224d      	movs	r2, #77	@ 0x4d
 800a714:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 800a716:	4b93      	ldr	r3, [pc, #588]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	649a      	str	r2, [r3, #72]	@ 0x48

			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a71c:	4b91      	ldr	r3, [pc, #580]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a71e:	2200      	movs	r2, #0
 800a720:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 800a722:	2328      	movs	r3, #40	@ 0x28
 800a724:	2108      	movs	r1, #8
 800a726:	185b      	adds	r3, r3, r1
 800a728:	19db      	adds	r3, r3, r7
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	b29a      	uxth	r2, r3
 800a730:	4b8c      	ldr	r3, [pc, #560]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a732:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800a734:	4b8b      	ldr	r3, [pc, #556]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a736:	2204      	movs	r2, #4
 800a738:	771a      	strb	r2, [r3, #28]
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800a73a:	4b8a      	ldr	r3, [pc, #552]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a73c:	2218      	movs	r2, #24
 800a73e:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800a740:	4b88      	ldr	r3, [pc, #544]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a742:	2200      	movs	r2, #0
 800a744:	779a      	strb	r2, [r3, #30]
			SX126x.PacketParams.Params.Gfsk.HeaderType = (fixLen == true) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800a746:	232c      	movs	r3, #44	@ 0x2c
 800a748:	185b      	adds	r3, r3, r1
 800a74a:	19db      	adds	r3, r3, r7
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	2201      	movs	r2, #1
 800a750:	4053      	eors	r3, r2
 800a752:	b2db      	uxtb	r3, r3
 800a754:	001a      	movs	r2, r3
 800a756:	4b83      	ldr	r3, [pc, #524]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a758:	77da      	strb	r2, [r3, #31]

			if (crcOn == true){
 800a75a:	2330      	movs	r3, #48	@ 0x30
 800a75c:	185b      	adds	r3, r3, r1
 800a75e:	19db      	adds	r3, r3, r7
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d004      	beq.n	800a770 <RadioSetTxConfig+0xac>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800a766:	4b7f      	ldr	r3, [pc, #508]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a768:	2221      	movs	r2, #33	@ 0x21
 800a76a:	21f2      	movs	r1, #242	@ 0xf2
 800a76c:	5499      	strb	r1, [r3, r2]
 800a76e:	e003      	b.n	800a778 <RadioSetTxConfig+0xb4>
			}
			else{
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800a770:	4b7c      	ldr	r3, [pc, #496]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a772:	2221      	movs	r2, #33	@ 0x21
 800a774:	2101      	movs	r1, #1
 800a776:	5499      	strb	r1, [r3, r2]
			}
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800a778:	4b7a      	ldr	r3, [pc, #488]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a77a:	2222      	movs	r2, #34	@ 0x22
 800a77c:	2101      	movs	r1, #1
 800a77e:	5499      	strb	r1, [r3, r2]

			RadioStandby();
 800a780:	f000 fac5 	bl	800ad0e <RadioStandby>
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 800a784:	4b77      	ldr	r3, [pc, #476]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a786:	2240      	movs	r2, #64	@ 0x40
 800a788:	5c9b      	ldrb	r3, [r3, r2]
 800a78a:	1e5a      	subs	r2, r3, #1
 800a78c:	4193      	sbcs	r3, r2
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	0018      	movs	r0, r3
 800a792:	f7ff fd39 	bl	800a208 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 800a796:	4b74      	ldr	r3, [pc, #464]	@ (800a968 <RadioSetTxConfig+0x2a4>)
 800a798:	0018      	movs	r0, r3
 800a79a:	f001 fa2b 	bl	800bbf4 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 800a79e:	4b73      	ldr	r3, [pc, #460]	@ (800a96c <RadioSetTxConfig+0x2a8>)
 800a7a0:	0018      	movs	r0, r3
 800a7a2:	f001 facd 	bl	800bd40 <SX126xSetPacketParams>
			uint8_t syncWord[8];
			syncWord[0] = 0xC1;
 800a7a6:	2110      	movs	r1, #16
 800a7a8:	187b      	adds	r3, r7, r1
 800a7aa:	22c1      	movs	r2, #193	@ 0xc1
 800a7ac:	701a      	strb	r2, [r3, #0]
			syncWord[1] = 0x94;
 800a7ae:	187b      	adds	r3, r7, r1
 800a7b0:	2294      	movs	r2, #148	@ 0x94
 800a7b2:	705a      	strb	r2, [r3, #1]
			syncWord[2] = 0xC1;
 800a7b4:	187b      	adds	r3, r7, r1
 800a7b6:	22c1      	movs	r2, #193	@ 0xc1
 800a7b8:	709a      	strb	r2, [r3, #2]
			syncWord[3] = 0x00;
 800a7ba:	187b      	adds	r3, r7, r1
 800a7bc:	2200      	movs	r2, #0
 800a7be:	70da      	strb	r2, [r3, #3]
			syncWord[4] = 0x00;
 800a7c0:	187b      	adds	r3, r7, r1
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	711a      	strb	r2, [r3, #4]
			syncWord[5] = 0x00;
 800a7c6:	187b      	adds	r3, r7, r1
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	715a      	strb	r2, [r3, #5]
			syncWord[6] = 0x00;
 800a7cc:	187b      	adds	r3, r7, r1
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	719a      	strb	r2, [r3, #6]
			syncWord[7] = 0x00;
 800a7d2:	187b      	adds	r3, r7, r1
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	71da      	strb	r2, [r3, #7]
			SX126xSetSyncWord(syncWord);
 800a7d8:	187b      	adds	r3, r7, r1
 800a7da:	0018      	movs	r0, r3
 800a7dc:	f000 fe5b 	bl	800b496 <SX126xSetSyncWord>
			// SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
			SX126xSetWhiteningSeed(0x01FF);
 800a7e0:	4b63      	ldr	r3, [pc, #396]	@ (800a970 <RadioSetTxConfig+0x2ac>)
 800a7e2:	0018      	movs	r0, r3
 800a7e4:	f000 feb4 	bl	800b550 <SX126xSetWhiteningSeed>
		break;
 800a7e8:	e085      	b.n	800a8f6 <RadioSetTxConfig+0x232>

		case MODEM_LORA:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a7ea:	4b5e      	ldr	r3, [pc, #376]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a7ec:	2240      	movs	r2, #64	@ 0x40
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)datarate;
 800a7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f4:	b2d9      	uxtb	r1, r3
 800a7f6:	4b5b      	ldr	r3, [pc, #364]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a7f8:	2250      	movs	r2, #80	@ 0x50
 800a7fa:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800a7fc:	4a5d      	ldr	r2, [pc, #372]	@ (800a974 <RadioSetTxConfig+0x2b0>)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	18d3      	adds	r3, r2, r3
 800a802:	7819      	ldrb	r1, [r3, #0]
 800a804:	4b57      	ldr	r3, [pc, #348]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a806:	2251      	movs	r2, #81	@ 0x51
 800a808:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)coderate;
 800a80a:	4b56      	ldr	r3, [pc, #344]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a80c:	2224      	movs	r2, #36	@ 0x24
 800a80e:	2108      	movs	r1, #8
 800a810:	1852      	adds	r2, r2, r1
 800a812:	19d2      	adds	r2, r2, r7
 800a814:	2152      	movs	r1, #82	@ 0x52
 800a816:	7812      	ldrb	r2, [r2, #0]
 800a818:	545a      	strb	r2, [r3, r1]

			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12))) ||
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d105      	bne.n	800a82c <RadioSetTxConfig+0x168>
 800a820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a822:	2b0b      	cmp	r3, #11
 800a824:	d008      	beq.n	800a838 <RadioSetTxConfig+0x174>
 800a826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a828:	2b0c      	cmp	r3, #12
 800a82a:	d005      	beq.n	800a838 <RadioSetTxConfig+0x174>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d107      	bne.n	800a842 <RadioSetTxConfig+0x17e>
				((bandwidth == 1) && (datarate == 12))){
 800a832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a834:	2b0c      	cmp	r3, #12
 800a836:	d104      	bne.n	800a842 <RadioSetTxConfig+0x17e>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800a838:	4b4a      	ldr	r3, [pc, #296]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a83a:	2253      	movs	r2, #83	@ 0x53
 800a83c:	2101      	movs	r1, #1
 800a83e:	5499      	strb	r1, [r3, r2]
 800a840:	e003      	b.n	800a84a <RadioSetTxConfig+0x186>
			}
			else{
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800a842:	4b48      	ldr	r3, [pc, #288]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a844:	2253      	movs	r2, #83	@ 0x53
 800a846:	2100      	movs	r1, #0
 800a848:	5499      	strb	r1, [r3, r2]
			}

			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a84a:	4b46      	ldr	r3, [pc, #280]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a84c:	2201      	movs	r2, #1
 800a84e:	761a      	strb	r2, [r3, #24]

			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 800a850:	4b44      	ldr	r3, [pc, #272]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a852:	2250      	movs	r2, #80	@ 0x50
 800a854:	5c9b      	ldrb	r3, [r3, r2]
 800a856:	2b05      	cmp	r3, #5
 800a858:	d004      	beq.n	800a864 <RadioSetTxConfig+0x1a0>
				(SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6)){
 800a85a:	4b42      	ldr	r3, [pc, #264]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a85c:	2250      	movs	r2, #80	@ 0x50
 800a85e:	5c9b      	ldrb	r3, [r3, r2]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5) ||
 800a860:	2b06      	cmp	r3, #6
 800a862:	d112      	bne.n	800a88a <RadioSetTxConfig+0x1c6>
				if (preambleLen < 12){
 800a864:	2328      	movs	r3, #40	@ 0x28
 800a866:	2208      	movs	r2, #8
 800a868:	189b      	adds	r3, r3, r2
 800a86a:	19db      	adds	r3, r3, r7
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	2b0b      	cmp	r3, #11
 800a870:	d803      	bhi.n	800a87a <RadioSetTxConfig+0x1b6>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800a872:	4b3c      	ldr	r3, [pc, #240]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a874:	220c      	movs	r2, #12
 800a876:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 800a878:	e00e      	b.n	800a898 <RadioSetTxConfig+0x1d4>
				}
				else{
					SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a87a:	4b3a      	ldr	r3, [pc, #232]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a87c:	2228      	movs	r2, #40	@ 0x28
 800a87e:	2108      	movs	r1, #8
 800a880:	1852      	adds	r2, r2, r1
 800a882:	19d2      	adds	r2, r2, r7
 800a884:	8812      	ldrh	r2, [r2, #0]
 800a886:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12){
 800a888:	e006      	b.n	800a898 <RadioSetTxConfig+0x1d4>
				}
			}
			else{
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a88a:	4b36      	ldr	r3, [pc, #216]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a88c:	2228      	movs	r2, #40	@ 0x28
 800a88e:	2108      	movs	r1, #8
 800a890:	1852      	adds	r2, r2, r1
 800a892:	19d2      	adds	r2, r2, r7
 800a894:	8812      	ldrh	r2, [r2, #0]
 800a896:	849a      	strh	r2, [r3, #36]	@ 0x24
			}

			SX126x.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t)fixLen;
 800a898:	232c      	movs	r3, #44	@ 0x2c
 800a89a:	2008      	movs	r0, #8
 800a89c:	181b      	adds	r3, r3, r0
 800a89e:	19db      	adds	r3, r3, r7
 800a8a0:	7819      	ldrb	r1, [r3, #0]
 800a8a2:	4b30      	ldr	r3, [pc, #192]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a8a4:	2226      	movs	r2, #38	@ 0x26
 800a8a6:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a8a8:	4b33      	ldr	r3, [pc, #204]	@ (800a978 <RadioSetTxConfig+0x2b4>)
 800a8aa:	7819      	ldrb	r1, [r3, #0]
 800a8ac:	4b2d      	ldr	r3, [pc, #180]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a8ae:	2227      	movs	r2, #39	@ 0x27
 800a8b0:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t)crcOn;
 800a8b2:	2330      	movs	r3, #48	@ 0x30
 800a8b4:	181b      	adds	r3, r3, r0
 800a8b6:	19db      	adds	r3, r3, r7
 800a8b8:	7819      	ldrb	r1, [r3, #0]
 800a8ba:	4b2a      	ldr	r3, [pc, #168]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a8bc:	2228      	movs	r2, #40	@ 0x28
 800a8be:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.InvertIQ = (RadioLoRaIQModes_t)iqInverted;
 800a8c0:	233c      	movs	r3, #60	@ 0x3c
 800a8c2:	181b      	adds	r3, r3, r0
 800a8c4:	19db      	adds	r3, r3, r7
 800a8c6:	7819      	ldrb	r1, [r3, #0]
 800a8c8:	4b26      	ldr	r3, [pc, #152]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a8ca:	2229      	movs	r2, #41	@ 0x29
 800a8cc:	5499      	strb	r1, [r3, r2]

			RadioStandby();
 800a8ce:	f000 fa1e 	bl	800ad0e <RadioStandby>
			RadioSetModem((SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA);
 800a8d2:	4b24      	ldr	r3, [pc, #144]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a8d4:	2240      	movs	r2, #64	@ 0x40
 800a8d6:	5c9b      	ldrb	r3, [r3, r2]
 800a8d8:	1e5a      	subs	r2, r3, #1
 800a8da:	4193      	sbcs	r3, r2
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	0018      	movs	r0, r3
 800a8e0:	f7ff fc92 	bl	800a208 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 800a8e4:	4b20      	ldr	r3, [pc, #128]	@ (800a968 <RadioSetTxConfig+0x2a4>)
 800a8e6:	0018      	movs	r0, r3
 800a8e8:	f001 f984 	bl	800bbf4 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 800a8ec:	4b1f      	ldr	r3, [pc, #124]	@ (800a96c <RadioSetTxConfig+0x2a8>)
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	f001 fa26 	bl	800bd40 <SX126xSetPacketParams>
		break;
 800a8f4:	46c0      	nop			@ (mov r8, r8)
	}

	// WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see DS_SX1261-2_V1.2 datasheet chapter 15.1
	if ((modem == MODEM_LORA) && (SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500)){
 800a8f6:	230f      	movs	r3, #15
 800a8f8:	18fb      	adds	r3, r7, r3
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d114      	bne.n	800a92a <RadioSetTxConfig+0x266>
 800a900:	4b18      	ldr	r3, [pc, #96]	@ (800a964 <RadioSetTxConfig+0x2a0>)
 800a902:	2251      	movs	r2, #81	@ 0x51
 800a904:	5c9b      	ldrb	r3, [r3, r2]
 800a906:	2b06      	cmp	r3, #6
 800a908:	d10f      	bne.n	800a92a <RadioSetTxConfig+0x266>
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) & ~(1 << 2));
 800a90a:	4b1c      	ldr	r3, [pc, #112]	@ (800a97c <RadioSetTxConfig+0x2b8>)
 800a90c:	0018      	movs	r0, r3
 800a90e:	f001 fd85 	bl	800c41c <SX126xReadRegister>
 800a912:	0003      	movs	r3, r0
 800a914:	001a      	movs	r2, r3
 800a916:	2304      	movs	r3, #4
 800a918:	439a      	bics	r2, r3
 800a91a:	0013      	movs	r3, r2
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	4a17      	ldr	r2, [pc, #92]	@ (800a97c <RadioSetTxConfig+0x2b8>)
 800a920:	0019      	movs	r1, r3
 800a922:	0010      	movs	r0, r2
 800a924:	f001 fd20 	bl	800c368 <SX126xWriteRegister>
 800a928:	e00d      	b.n	800a946 <RadioSetTxConfig+0x282>
	}
	else{
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) | (1 << 2));
 800a92a:	4b14      	ldr	r3, [pc, #80]	@ (800a97c <RadioSetTxConfig+0x2b8>)
 800a92c:	0018      	movs	r0, r3
 800a92e:	f001 fd75 	bl	800c41c <SX126xReadRegister>
 800a932:	0003      	movs	r3, r0
 800a934:	001a      	movs	r2, r3
 800a936:	2304      	movs	r3, #4
 800a938:	4313      	orrs	r3, r2
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	4a0f      	ldr	r2, [pc, #60]	@ (800a97c <RadioSetTxConfig+0x2b8>)
 800a93e:	0019      	movs	r1, r3
 800a940:	0010      	movs	r0, r2
 800a942:	f001 fd11 	bl	800c368 <SX126xWriteRegister>
	}
	// WORKAROUND END
	SX126xSetRfTxPower(power);
 800a946:	230e      	movs	r3, #14
 800a948:	18fb      	adds	r3, r7, r3
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	b25b      	sxtb	r3, r3
 800a94e:	0018      	movs	r0, r3
 800a950:	f001 fdfe 	bl	800c550 <SX126xSetRfTxPower>
	TxTimeout = timeout;
 800a954:	4b0a      	ldr	r3, [pc, #40]	@ (800a980 <RadioSetTxConfig+0x2bc>)
 800a956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a958:	601a      	str	r2, [r3, #0]
}
 800a95a:	46c0      	nop			@ (mov r8, r8)
 800a95c:	46bd      	mov	sp, r7
 800a95e:	b007      	add	sp, #28
 800a960:	bd90      	pop	{r4, r7, pc}
 800a962:	46c0      	nop			@ (mov r8, r8)
 800a964:	200004e4 	.word	0x200004e4
 800a968:	20000524 	.word	0x20000524
 800a96c:	200004fc 	.word	0x200004fc
 800a970:	000001ff 	.word	0x000001ff
 800a974:	0800d9b0 	.word	0x0800d9b0
 800a978:	20000158 	.word	0x20000158
 800a97c:	00000889 	.word	0x00000889
 800a980:	200003b8 	.word	0x200003b8

0800a984 <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency(uint32_t frequency){
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
	return true;
 800a98c:	2301      	movs	r3, #1
}
 800a98e:	0018      	movs	r0, r3
 800a990:	46bd      	mov	sp, r7
 800a992:	b002      	add	sp, #8
 800a994:	bd80      	pop	{r7, pc}
	...

0800a998 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir(RadioModems_t modem, uint8_t pktLen){
 800a998:	b5b0      	push	{r4, r5, r7, lr}
 800a99a:	b090      	sub	sp, #64	@ 0x40
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	0002      	movs	r2, r0
 800a9a0:	1dfb      	adds	r3, r7, #7
 800a9a2:	701a      	strb	r2, [r3, #0]
 800a9a4:	1dbb      	adds	r3, r7, #6
 800a9a6:	1c0a      	adds	r2, r1, #0
 800a9a8:	701a      	strb	r2, [r3, #0]
	uint32_t airTime = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch (modem){
 800a9ae:	1dfb      	adds	r3, r7, #7
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d003      	beq.n	800a9be <RadioTimeOnAir+0x26>
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d100      	bne.n	800a9bc <RadioTimeOnAir+0x24>
 800a9ba:	e093      	b.n	800aae4 <RadioTimeOnAir+0x14c>
 800a9bc:	e148      	b.n	800ac50 <RadioTimeOnAir+0x2b8>
		case MODEM_FSK:{
			// CRC Length calculation, catering for each type of CRC Calc offered in libary
			uint8_t crcLength = (uint8_t)(SX126x.PacketParams.Params.Gfsk.CrcLength);
 800a9be:	203b      	movs	r0, #59	@ 0x3b
 800a9c0:	183b      	adds	r3, r7, r0
 800a9c2:	4aa6      	ldr	r2, [pc, #664]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800a9c4:	2121      	movs	r1, #33	@ 0x21
 800a9c6:	5c52      	ldrb	r2, [r2, r1]
 800a9c8:	701a      	strb	r2, [r3, #0]
			if ((crcLength == RADIO_CRC_2_BYTES) || (crcLength == RADIO_CRC_2_BYTES_INV) || (crcLength == RADIO_CRC_2_BYTES_IBM) || (crcLength == RADIO_CRC_2_BYTES_CCIT)){
 800a9ca:	0002      	movs	r2, r0
 800a9cc:	18bb      	adds	r3, r7, r2
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d00b      	beq.n	800a9ec <RadioTimeOnAir+0x54>
 800a9d4:	18bb      	adds	r3, r7, r2
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	2b06      	cmp	r3, #6
 800a9da:	d007      	beq.n	800a9ec <RadioTimeOnAir+0x54>
 800a9dc:	18bb      	adds	r3, r7, r2
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2bf1      	cmp	r3, #241	@ 0xf1
 800a9e2:	d003      	beq.n	800a9ec <RadioTimeOnAir+0x54>
 800a9e4:	18bb      	adds	r3, r7, r2
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	2bf2      	cmp	r3, #242	@ 0xf2
 800a9ea:	d104      	bne.n	800a9f6 <RadioTimeOnAir+0x5e>
				crcLength = 2;
 800a9ec:	233b      	movs	r3, #59	@ 0x3b
 800a9ee:	18fb      	adds	r3, r7, r3
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	701a      	strb	r2, [r3, #0]
 800a9f4:	e011      	b.n	800aa1a <RadioTimeOnAir+0x82>
			}
			else if ((crcLength == RADIO_CRC_1_BYTES) || (crcLength == RADIO_CRC_1_BYTES_INV)){
 800a9f6:	223b      	movs	r2, #59	@ 0x3b
 800a9f8:	18bb      	adds	r3, r7, r2
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d003      	beq.n	800aa08 <RadioTimeOnAir+0x70>
 800aa00:	18bb      	adds	r3, r7, r2
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d104      	bne.n	800aa12 <RadioTimeOnAir+0x7a>
				crcLength = 1;
 800aa08:	233b      	movs	r3, #59	@ 0x3b
 800aa0a:	18fb      	adds	r3, r7, r3
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	701a      	strb	r2, [r3, #0]
 800aa10:	e003      	b.n	800aa1a <RadioTimeOnAir+0x82>
			}
			else{
				crcLength = 0;
 800aa12:	233b      	movs	r3, #59	@ 0x3b
 800aa14:	18fb      	adds	r3, r7, r3
 800aa16:	2200      	movs	r2, #0
 800aa18:	701a      	strb	r2, [r3, #0]
			}
			airTime = rint((8 * (SX126x.PacketParams.Params.Gfsk.PreambleLength + (SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3) + ((SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH) ? 0.0 : 1.0) + pktLen + (crcLength)) /
 800aa1a:	4b90      	ldr	r3, [pc, #576]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800aa1c:	8b5b      	ldrh	r3, [r3, #26]
 800aa1e:	001a      	movs	r2, r3
 800aa20:	4b8e      	ldr	r3, [pc, #568]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800aa22:	7f5b      	ldrb	r3, [r3, #29]
 800aa24:	08db      	lsrs	r3, r3, #3
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	18d3      	adds	r3, r2, r3
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	f7f7 fca2 	bl	8002374 <__aeabi_i2d>
 800aa30:	0002      	movs	r2, r0
 800aa32:	000b      	movs	r3, r1
 800aa34:	4989      	ldr	r1, [pc, #548]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800aa36:	7fc9      	ldrb	r1, [r1, #31]
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	d102      	bne.n	800aa42 <RadioTimeOnAir+0xaa>
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	2100      	movs	r1, #0
 800aa40:	e001      	b.n	800aa46 <RadioTimeOnAir+0xae>
 800aa42:	2000      	movs	r0, #0
 800aa44:	4986      	ldr	r1, [pc, #536]	@ (800ac60 <RadioTimeOnAir+0x2c8>)
 800aa46:	f7f5 fe4d 	bl	80006e4 <__aeabi_dadd>
 800aa4a:	0002      	movs	r2, r0
 800aa4c:	000b      	movs	r3, r1
 800aa4e:	0014      	movs	r4, r2
 800aa50:	001d      	movs	r5, r3
 800aa52:	1dbb      	adds	r3, r7, #6
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	0018      	movs	r0, r3
 800aa58:	f7f7 fc8c 	bl	8002374 <__aeabi_i2d>
 800aa5c:	0002      	movs	r2, r0
 800aa5e:	000b      	movs	r3, r1
 800aa60:	0020      	movs	r0, r4
 800aa62:	0029      	movs	r1, r5
 800aa64:	f7f5 fe3e 	bl	80006e4 <__aeabi_dadd>
 800aa68:	0002      	movs	r2, r0
 800aa6a:	000b      	movs	r3, r1
 800aa6c:	0014      	movs	r4, r2
 800aa6e:	001d      	movs	r5, r3
 800aa70:	233b      	movs	r3, #59	@ 0x3b
 800aa72:	18fb      	adds	r3, r7, r3
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	0018      	movs	r0, r3
 800aa78:	f7f7 fc7c 	bl	8002374 <__aeabi_i2d>
 800aa7c:	0002      	movs	r2, r0
 800aa7e:	000b      	movs	r3, r1
 800aa80:	0020      	movs	r0, r4
 800aa82:	0029      	movs	r1, r5
 800aa84:	f7f5 fe2e 	bl	80006e4 <__aeabi_dadd>
 800aa88:	0002      	movs	r2, r0
 800aa8a:	000b      	movs	r3, r1
 800aa8c:	0010      	movs	r0, r2
 800aa8e:	0019      	movs	r1, r3
 800aa90:	2200      	movs	r2, #0
 800aa92:	4b74      	ldr	r3, [pc, #464]	@ (800ac64 <RadioTimeOnAir+0x2cc>)
 800aa94:	f7f6 fdce 	bl	8001634 <__aeabi_dmul>
 800aa98:	0002      	movs	r2, r0
 800aa9a:	000b      	movs	r3, r1
 800aa9c:	0014      	movs	r4, r2
 800aa9e:	001d      	movs	r5, r3
							SX126x.ModulationParams.Params.Gfsk.BitRate) *
 800aaa0:	4b6e      	ldr	r3, [pc, #440]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800aaa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
			airTime = rint((8 * (SX126x.PacketParams.Params.Gfsk.PreambleLength + (SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3) + ((SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH) ? 0.0 : 1.0) + pktLen + (crcLength)) /
 800aaa4:	0018      	movs	r0, r3
 800aaa6:	f7f7 fc93 	bl	80023d0 <__aeabi_ui2d>
 800aaaa:	0002      	movs	r2, r0
 800aaac:	000b      	movs	r3, r1
 800aaae:	0020      	movs	r0, r4
 800aab0:	0029      	movs	r1, r5
 800aab2:	f7f6 f97b 	bl	8000dac <__aeabi_ddiv>
 800aab6:	0002      	movs	r2, r0
 800aab8:	000b      	movs	r3, r1
 800aaba:	0010      	movs	r0, r2
 800aabc:	0019      	movs	r1, r3
 800aabe:	2200      	movs	r2, #0
 800aac0:	4b69      	ldr	r3, [pc, #420]	@ (800ac68 <RadioTimeOnAir+0x2d0>)
 800aac2:	f7f6 fdb7 	bl	8001634 <__aeabi_dmul>
 800aac6:	0002      	movs	r2, r0
 800aac8:	000b      	movs	r3, r1
 800aaca:	0010      	movs	r0, r2
 800aacc:	0019      	movs	r1, r3
 800aace:	f002 fb25 	bl	800d11c <rint>
 800aad2:	0002      	movs	r2, r0
 800aad4:	000b      	movs	r3, r1
 800aad6:	0010      	movs	r0, r2
 800aad8:	0019      	movs	r1, r3
 800aada:	f7f5 fd19 	bl	8000510 <__aeabi_d2uiz>
 800aade:	0003      	movs	r3, r0
 800aae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
						   1e3);
		}
		break;
 800aae2:	e0b5      	b.n	800ac50 <RadioTimeOnAir+0x2b8>
		case MODEM_LORA:{
			double ts = RadioLoRaSymbTime[SX126x.ModulationParams.Params.LoRa.Bandwidth - 4][12 - SX126x.ModulationParams.Params.LoRa.SpreadingFactor];
 800aae4:	4b5d      	ldr	r3, [pc, #372]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800aae6:	2251      	movs	r2, #81	@ 0x51
 800aae8:	5c9b      	ldrb	r3, [r3, r2]
 800aaea:	1f1a      	subs	r2, r3, #4
 800aaec:	4b5b      	ldr	r3, [pc, #364]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800aaee:	2150      	movs	r1, #80	@ 0x50
 800aaf0:	5c5b      	ldrb	r3, [r3, r1]
 800aaf2:	0019      	movs	r1, r3
 800aaf4:	230c      	movs	r3, #12
 800aaf6:	1a58      	subs	r0, r3, r1
 800aaf8:	495c      	ldr	r1, [pc, #368]	@ (800ac6c <RadioTimeOnAir+0x2d4>)
 800aafa:	0013      	movs	r3, r2
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	189b      	adds	r3, r3, r2
 800ab00:	005b      	lsls	r3, r3, #1
 800ab02:	181b      	adds	r3, r3, r0
 800ab04:	00db      	lsls	r3, r3, #3
 800ab06:	18cb      	adds	r3, r1, r3
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab0e:	637b      	str	r3, [r7, #52]	@ 0x34
			// time of preamble
			double tPreamble = (SX126x.PacketParams.Params.LoRa.PreambleLength + 4.25) * ts;
 800ab10:	4b52      	ldr	r3, [pc, #328]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800ab12:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ab14:	0018      	movs	r0, r3
 800ab16:	f7f7 fc2d 	bl	8002374 <__aeabi_i2d>
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	4b54      	ldr	r3, [pc, #336]	@ (800ac70 <RadioTimeOnAir+0x2d8>)
 800ab1e:	f7f5 fde1 	bl	80006e4 <__aeabi_dadd>
 800ab22:	0002      	movs	r2, r0
 800ab24:	000b      	movs	r3, r1
 800ab26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab28:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ab2a:	f7f6 fd83 	bl	8001634 <__aeabi_dmul>
 800ab2e:	0002      	movs	r2, r0
 800ab30:	000b      	movs	r3, r1
 800ab32:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ab34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			// Symbol length of payload and time
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 800ab36:	1dbb      	adds	r3, r7, #6
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	005b      	lsls	r3, r3, #1
 800ab3c:	4a47      	ldr	r2, [pc, #284]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800ab3e:	2150      	movs	r1, #80	@ 0x50
 800ab40:	5c52      	ldrb	r2, [r2, r1]
 800ab42:	1a9b      	subs	r3, r3, r2
 800ab44:	1dda      	adds	r2, r3, #7
							   28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 800ab46:	4b45      	ldr	r3, [pc, #276]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800ab48:	2128      	movs	r1, #40	@ 0x28
 800ab4a:	5c5b      	ldrb	r3, [r3, r1]
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	18d3      	adds	r3, r2, r3
 800ab50:	009a      	lsls	r2, r3, #2
							   ((SX126x.PacketParams.Params.LoRa.HeaderType == LORA_PACKET_FIXED_LENGTH) ? 20 : 0)) /
 800ab52:	4b42      	ldr	r3, [pc, #264]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800ab54:	2126      	movs	r1, #38	@ 0x26
 800ab56:	5c5b      	ldrb	r3, [r3, r1]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <RadioTimeOnAir+0x1c8>
 800ab5c:	2314      	movs	r3, #20
 800ab5e:	e000      	b.n	800ab62 <RadioTimeOnAir+0x1ca>
 800ab60:	2300      	movs	r3, #0
							   28 + 16 * SX126x.PacketParams.Params.LoRa.CrcMode -
 800ab62:	1ad3      	subs	r3, r2, r3
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 800ab64:	0018      	movs	r0, r3
 800ab66:	f7f7 fc05 	bl	8002374 <__aeabi_i2d>
 800ab6a:	0004      	movs	r4, r0
 800ab6c:	000d      	movs	r5, r1
							  (double)(4 * (SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 800ab6e:	4b3b      	ldr	r3, [pc, #236]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800ab70:	2250      	movs	r2, #80	@ 0x50
 800ab72:	5c9b      	ldrb	r3, [r3, r2]
 800ab74:	0019      	movs	r1, r3
											((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0) ? 2 : 0)))) *
 800ab76:	4b39      	ldr	r3, [pc, #228]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800ab78:	2253      	movs	r2, #83	@ 0x53
 800ab7a:	5c9b      	ldrb	r3, [r3, r2]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <RadioTimeOnAir+0x1ec>
 800ab80:	2302      	movs	r3, #2
 800ab82:	e000      	b.n	800ab86 <RadioTimeOnAir+0x1ee>
 800ab84:	2300      	movs	r3, #0
							  (double)(4 * (SX126x.ModulationParams.Params.LoRa.SpreadingFactor -
 800ab86:	1acb      	subs	r3, r1, r3
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	0018      	movs	r0, r3
 800ab8c:	f7f7 fbf2 	bl	8002374 <__aeabi_i2d>
 800ab90:	0002      	movs	r2, r0
 800ab92:	000b      	movs	r3, r1
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 800ab94:	0020      	movs	r0, r4
 800ab96:	0029      	movs	r1, r5
 800ab98:	f7f6 f908 	bl	8000dac <__aeabi_ddiv>
 800ab9c:	0002      	movs	r2, r0
 800ab9e:	000b      	movs	r3, r1
 800aba0:	0010      	movs	r0, r2
 800aba2:	0019      	movs	r1, r3
 800aba4:	f002 f9c6 	bl	800cf34 <ceil>
 800aba8:	0004      	movs	r4, r0
 800abaa:	000d      	movs	r5, r1
						 ((SX126x.ModulationParams.Params.LoRa.CodingRate % 4) + 4);
 800abac:	4b2b      	ldr	r3, [pc, #172]	@ (800ac5c <RadioTimeOnAir+0x2c4>)
 800abae:	2252      	movs	r2, #82	@ 0x52
 800abb0:	5c9b      	ldrb	r3, [r3, r2]
 800abb2:	001a      	movs	r2, r3
 800abb4:	2303      	movs	r3, #3
 800abb6:	4013      	ands	r3, r2
 800abb8:	3304      	adds	r3, #4
											((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize > 0) ? 2 : 0)))) *
 800abba:	0018      	movs	r0, r3
 800abbc:	f7f7 fbda 	bl	8002374 <__aeabi_i2d>
 800abc0:	0002      	movs	r2, r0
 800abc2:	000b      	movs	r3, r1
			double tmp = ceil((8 * pktLen - 4 * SX126x.ModulationParams.Params.LoRa.SpreadingFactor +
 800abc4:	0020      	movs	r0, r4
 800abc6:	0029      	movs	r1, r5
 800abc8:	f7f6 fd34 	bl	8001634 <__aeabi_dmul>
 800abcc:	0002      	movs	r2, r0
 800abce:	000b      	movs	r3, r1
 800abd0:	623a      	str	r2, [r7, #32]
 800abd2:	627b      	str	r3, [r7, #36]	@ 0x24
			double nPayload = 8 + ((tmp > 0) ? tmp : 0);
 800abd4:	2200      	movs	r2, #0
 800abd6:	2300      	movs	r3, #0
 800abd8:	6a38      	ldr	r0, [r7, #32]
 800abda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800abdc:	f7f5 fc46 	bl	800046c <__aeabi_dcmpgt>
 800abe0:	1e03      	subs	r3, r0, #0
 800abe2:	d002      	beq.n	800abea <RadioTimeOnAir+0x252>
 800abe4:	6a38      	ldr	r0, [r7, #32]
 800abe6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800abe8:	e001      	b.n	800abee <RadioTimeOnAir+0x256>
 800abea:	2000      	movs	r0, #0
 800abec:	2100      	movs	r1, #0
 800abee:	2200      	movs	r2, #0
 800abf0:	4b1c      	ldr	r3, [pc, #112]	@ (800ac64 <RadioTimeOnAir+0x2cc>)
 800abf2:	f7f5 fd77 	bl	80006e4 <__aeabi_dadd>
 800abf6:	0002      	movs	r2, r0
 800abf8:	000b      	movs	r3, r1
 800abfa:	61ba      	str	r2, [r7, #24]
 800abfc:	61fb      	str	r3, [r7, #28]
			double tPayload = nPayload * ts;
 800abfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac02:	69b8      	ldr	r0, [r7, #24]
 800ac04:	69f9      	ldr	r1, [r7, #28]
 800ac06:	f7f6 fd15 	bl	8001634 <__aeabi_dmul>
 800ac0a:	0002      	movs	r2, r0
 800ac0c:	000b      	movs	r3, r1
 800ac0e:	613a      	str	r2, [r7, #16]
 800ac10:	617b      	str	r3, [r7, #20]
			// Time on air
			double tOnAir = tPreamble + tPayload;
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac1a:	f7f5 fd63 	bl	80006e4 <__aeabi_dadd>
 800ac1e:	0002      	movs	r2, r0
 800ac20:	000b      	movs	r3, r1
 800ac22:	60ba      	str	r2, [r7, #8]
 800ac24:	60fb      	str	r3, [r7, #12]
			// return milli seconds
			airTime = floor(tOnAir + 0.999);
 800ac26:	4a13      	ldr	r2, [pc, #76]	@ (800ac74 <RadioTimeOnAir+0x2dc>)
 800ac28:	4b13      	ldr	r3, [pc, #76]	@ (800ac78 <RadioTimeOnAir+0x2e0>)
 800ac2a:	68b8      	ldr	r0, [r7, #8]
 800ac2c:	68f9      	ldr	r1, [r7, #12]
 800ac2e:	f7f5 fd59 	bl	80006e4 <__aeabi_dadd>
 800ac32:	0002      	movs	r2, r0
 800ac34:	000b      	movs	r3, r1
 800ac36:	0010      	movs	r0, r2
 800ac38:	0019      	movs	r1, r3
 800ac3a:	f002 f9f3 	bl	800d024 <floor>
 800ac3e:	0002      	movs	r2, r0
 800ac40:	000b      	movs	r3, r1
 800ac42:	0010      	movs	r0, r2
 800ac44:	0019      	movs	r1, r3
 800ac46:	f7f5 fc63 	bl	8000510 <__aeabi_d2uiz>
 800ac4a:	0003      	movs	r3, r0
 800ac4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		break;
 800ac4e:	46c0      	nop			@ (mov r8, r8)
	}

	return airTime;
 800ac50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ac52:	0018      	movs	r0, r3
 800ac54:	46bd      	mov	sp, r7
 800ac56:	b010      	add	sp, #64	@ 0x40
 800ac58:	bdb0      	pop	{r4, r5, r7, pc}
 800ac5a:	46c0      	nop			@ (mov r8, r8)
 800ac5c:	200004e4 	.word	0x200004e4
 800ac60:	3ff00000 	.word	0x3ff00000
 800ac64:	40200000 	.word	0x40200000
 800ac68:	408f4000 	.word	0x408f4000
 800ac6c:	200000c8 	.word	0x200000c8
 800ac70:	40110000 	.word	0x40110000
 800ac74:	d916872b 	.word	0xd916872b
 800ac78:	3feff7ce 	.word	0x3feff7ce

0800ac7c <RadioSend>:
 *        the radio in transmission
 *
 * \param buffer     Buffer pointer
 * \param size       Buffer size
 */
void RadioSend(uint8_t *buffer, uint8_t size){
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	000a      	movs	r2, r1
 800ac86:	1cfb      	adds	r3, r7, #3
 800ac88:	701a      	strb	r2, [r3, #0]
	SX126xSetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800ac8a:	4912      	ldr	r1, [pc, #72]	@ (800acd4 <RadioSend+0x58>)
 800ac8c:	4811      	ldr	r0, [pc, #68]	@ (800acd4 <RadioSend+0x58>)
 800ac8e:	2300      	movs	r3, #0
 800ac90:	2200      	movs	r2, #0
 800ac92:	f000 fe59 	bl	800b948 <SX126xSetDioIrqParams>
						  IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
						  IRQ_RADIO_NONE,
						  IRQ_RADIO_NONE);

	if (SX126xGetPacketType() == PACKET_TYPE_LORA){
 800ac96:	f000 ff29 	bl	800baec <SX126xGetPacketType>
 800ac9a:	0003      	movs	r3, r0
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d105      	bne.n	800acac <RadioSend+0x30>
		SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 800aca0:	4b0d      	ldr	r3, [pc, #52]	@ (800acd8 <RadioSend+0x5c>)
 800aca2:	1cfa      	adds	r2, r7, #3
 800aca4:	2127      	movs	r1, #39	@ 0x27
 800aca6:	7812      	ldrb	r2, [r2, #0]
 800aca8:	545a      	strb	r2, [r3, r1]
 800acaa:	e004      	b.n	800acb6 <RadioSend+0x3a>
	}
	else{
		SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 800acac:	4b0a      	ldr	r3, [pc, #40]	@ (800acd8 <RadioSend+0x5c>)
 800acae:	1cfa      	adds	r2, r7, #3
 800acb0:	2120      	movs	r1, #32
 800acb2:	7812      	ldrb	r2, [r2, #0]
 800acb4:	545a      	strb	r2, [r3, r1]
	}
	SX126xSetPacketParams(&SX126x.PacketParams);
 800acb6:	4b09      	ldr	r3, [pc, #36]	@ (800acdc <RadioSend+0x60>)
 800acb8:	0018      	movs	r0, r3
 800acba:	f001 f841 	bl	800bd40 <SX126xSetPacketParams>

	SX126xSendPayload(buffer, size, 0);
 800acbe:	1cfb      	adds	r3, r7, #3
 800acc0:	7819      	ldrb	r1, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	0018      	movs	r0, r3
 800acc8:	f000 fbcd 	bl	800b466 <SX126xSendPayload>
//	TimerSetValue(&TxTimeoutTimer, TxTimeout);
//	TimerStart(&TxTimeoutTimer);
}
 800accc:	46c0      	nop			@ (mov r8, r8)
 800acce:	46bd      	mov	sp, r7
 800acd0:	b002      	add	sp, #8
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	00000201 	.word	0x00000201
 800acd8:	200004e4 	.word	0x200004e4
 800acdc:	200004fc 	.word	0x200004fc

0800ace0 <RadioSleep>:

void RadioSleep(void){
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
	SleepParams_t params = {0};
 800ace6:	1d3b      	adds	r3, r7, #4
 800ace8:	2200      	movs	r2, #0
 800acea:	701a      	strb	r2, [r3, #0]

	params.Fields.WarmStart = 1;
 800acec:	1d3b      	adds	r3, r7, #4
 800acee:	781a      	ldrb	r2, [r3, #0]
 800acf0:	2104      	movs	r1, #4
 800acf2:	430a      	orrs	r2, r1
 800acf4:	701a      	strb	r2, [r3, #0]
	SX126xSetSleep(params);
 800acf6:	1d3b      	adds	r3, r7, #4
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	1c18      	adds	r0, r3, #0
 800acfc:	f000 fc8a 	bl	800b614 <SX126xSetSleep>

	HAL_Delay(2);
 800ad00:	2002      	movs	r0, #2
 800ad02:	f7f8 fc39 	bl	8003578 <HAL_Delay>
}
 800ad06:	46c0      	nop			@ (mov r8, r8)
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	b002      	add	sp, #8
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <RadioStandby>:

void RadioStandby(void){
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	af00      	add	r7, sp, #0
	SX126xSetStandby(STDBY_RC);
 800ad12:	2000      	movs	r0, #0
 800ad14:	f000 fc92 	bl	800b63c <SX126xSetStandby>
}
 800ad18:	46c0      	nop			@ (mov r8, r8)
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
	...

0800ad20 <RadioRx>:

void RadioRx(uint32_t timeout){
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
	SX126xSetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
 800ad28:	490c      	ldr	r1, [pc, #48]	@ (800ad5c <RadioRx+0x3c>)
 800ad2a:	480c      	ldr	r0, [pc, #48]	@ (800ad5c <RadioRx+0x3c>)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f000 fe0a 	bl	800b948 <SX126xSetDioIrqParams>

	if (timeout != 0){
//		TimerSetValue(&RxTimeoutTimer, timeout);
//		TimerStart(&RxTimeoutTimer);
	}
	if (RxContinuous == true){
 800ad34:	4b0a      	ldr	r3, [pc, #40]	@ (800ad60 <RadioRx+0x40>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d004      	beq.n	800ad46 <RadioRx+0x26>
		SX126xSetRx(0xFFFFFF); // Rx Continuous
 800ad3c:	4b09      	ldr	r3, [pc, #36]	@ (800ad64 <RadioRx+0x44>)
 800ad3e:	0018      	movs	r0, r3
 800ad40:	f000 fcba 	bl	800b6b8 <SX126xSetRx>
	}
	else{
		SX126xSetRx(RxTimeout << 6);
	}
}
 800ad44:	e005      	b.n	800ad52 <RadioRx+0x32>
		SX126xSetRx(RxTimeout << 6);
 800ad46:	4b08      	ldr	r3, [pc, #32]	@ (800ad68 <RadioRx+0x48>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	019b      	lsls	r3, r3, #6
 800ad4c:	0018      	movs	r0, r3
 800ad4e:	f000 fcb3 	bl	800b6b8 <SX126xSetRx>
}
 800ad52:	46c0      	nop			@ (mov r8, r8)
 800ad54:	46bd      	mov	sp, r7
 800ad56:	b002      	add	sp, #8
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	46c0      	nop			@ (mov r8, r8)
 800ad5c:	00000262 	.word	0x00000262
 800ad60:	200003c0 	.word	0x200003c0
 800ad64:	00ffffff 	.word	0x00ffffff
 800ad68:	200003bc 	.word	0x200003bc

0800ad6c <RadioRxBoosted>:

void RadioRxBoosted(uint32_t timeout){
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
	SX126xSetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
 800ad74:	490c      	ldr	r1, [pc, #48]	@ (800ada8 <RadioRxBoosted+0x3c>)
 800ad76:	480c      	ldr	r0, [pc, #48]	@ (800ada8 <RadioRxBoosted+0x3c>)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f000 fde4 	bl	800b948 <SX126xSetDioIrqParams>
						  IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
						  IRQ_RADIO_NONE,
						  IRQ_RADIO_NONE);

	if (RxContinuous == true){
 800ad80:	4b0a      	ldr	r3, [pc, #40]	@ (800adac <RadioRxBoosted+0x40>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d004      	beq.n	800ad92 <RadioRxBoosted+0x26>
		// Even Continous mode is selected, put a timeout here
		if (timeout != 0){
//			TimerSetValue(&RxTimeoutTimer, timeout);
//			TimerStart(&RxTimeoutTimer);
		}
		SX126xSetRxBoosted(0xFFFFFF); // Rx Continuous
 800ad88:	4b09      	ldr	r3, [pc, #36]	@ (800adb0 <RadioRxBoosted+0x44>)
 800ad8a:	0018      	movs	r0, r3
 800ad8c:	f000 fcbc 	bl	800b708 <SX126xSetRxBoosted>
	}
	else{
		SX126xSetRxBoosted(RxTimeout << 6);
	}
}
 800ad90:	e005      	b.n	800ad9e <RadioRxBoosted+0x32>
		SX126xSetRxBoosted(RxTimeout << 6);
 800ad92:	4b08      	ldr	r3, [pc, #32]	@ (800adb4 <RadioRxBoosted+0x48>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	019b      	lsls	r3, r3, #6
 800ad98:	0018      	movs	r0, r3
 800ad9a:	f000 fcb5 	bl	800b708 <SX126xSetRxBoosted>
}
 800ad9e:	46c0      	nop			@ (mov r8, r8)
 800ada0:	46bd      	mov	sp, r7
 800ada2:	b002      	add	sp, #8
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	46c0      	nop			@ (mov r8, r8)
 800ada8:	00000262 	.word	0x00000262
 800adac:	200003c0 	.word	0x200003c0
 800adb0:	00ffffff 	.word	0x00ffffff
 800adb4:	200003bc 	.word	0x200003bc

0800adb8 <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime){
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
	SX126xSetDioIrqParams(IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT,
 800adc2:	4908      	ldr	r1, [pc, #32]	@ (800ade4 <RadioSetRxDutyCycle+0x2c>)
 800adc4:	4807      	ldr	r0, [pc, #28]	@ (800ade4 <RadioSetRxDutyCycle+0x2c>)
 800adc6:	2300      	movs	r3, #0
 800adc8:	2200      	movs	r2, #0
 800adca:	f000 fdbd 	bl	800b948 <SX126xSetDioIrqParams>
						  IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT,
						  IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SX126xSetRxDutyCycle(rxTime, sleepTime);
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	0011      	movs	r1, r2
 800add4:	0018      	movs	r0, r3
 800add6:	f000 fcbf 	bl	800b758 <SX126xSetRxDutyCycle>
}
 800adda:	46c0      	nop			@ (mov r8, r8)
 800addc:	46bd      	mov	sp, r7
 800adde:	b002      	add	sp, #8
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	46c0      	nop			@ (mov r8, r8)
 800ade4:	0000ffff 	.word	0x0000ffff

0800ade8 <RadioSetCadParams>:

void RadioSetCadParams(uint8_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, uint8_t cadExitMode, uint32_t cadTimeout){
 800ade8:	b5b0      	push	{r4, r5, r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af02      	add	r7, sp, #8
 800adee:	0005      	movs	r5, r0
 800adf0:	000c      	movs	r4, r1
 800adf2:	0010      	movs	r0, r2
 800adf4:	0019      	movs	r1, r3
 800adf6:	1dfb      	adds	r3, r7, #7
 800adf8:	1c2a      	adds	r2, r5, #0
 800adfa:	701a      	strb	r2, [r3, #0]
 800adfc:	1dbb      	adds	r3, r7, #6
 800adfe:	1c22      	adds	r2, r4, #0
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	1d7b      	adds	r3, r7, #5
 800ae04:	1c02      	adds	r2, r0, #0
 800ae06:	701a      	strb	r2, [r3, #0]
 800ae08:	1d3b      	adds	r3, r7, #4
 800ae0a:	1c0a      	adds	r2, r1, #0
 800ae0c:	701a      	strb	r2, [r3, #0]
	SX126xSetCadParams((RadioLoRaCadSymbols_t)cadSymbolNum, cadDetPeak, cadDetMin, (RadioCadExitModes_t)cadExitMode, cadTimeout);
 800ae0e:	1d3b      	adds	r3, r7, #4
 800ae10:	781c      	ldrb	r4, [r3, #0]
 800ae12:	1d7b      	adds	r3, r7, #5
 800ae14:	781a      	ldrb	r2, [r3, #0]
 800ae16:	1dbb      	adds	r3, r7, #6
 800ae18:	7819      	ldrb	r1, [r3, #0]
 800ae1a:	1dfb      	adds	r3, r7, #7
 800ae1c:	7818      	ldrb	r0, [r3, #0]
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	0023      	movs	r3, r4
 800ae24:	f001 f83e 	bl	800bea4 <SX126xSetCadParams>
}
 800ae28:	46c0      	nop			@ (mov r8, r8)
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	b002      	add	sp, #8
 800ae2e:	bdb0      	pop	{r4, r5, r7, pc}

0800ae30 <RadioStartCad>:

void RadioStartCad(void){
 800ae30:	b580      	push	{r7, lr}
 800ae32:	af00      	add	r7, sp, #0
	SX126xSetDioIrqParams(IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED,
 800ae34:	23c0      	movs	r3, #192	@ 0xc0
 800ae36:	0059      	lsls	r1, r3, #1
 800ae38:	23c0      	movs	r3, #192	@ 0xc0
 800ae3a:	0058      	lsls	r0, r3, #1
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f000 fd82 	bl	800b948 <SX126xSetDioIrqParams>
						  IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED,
						  IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SX126xSetCad();
 800ae44:	f000 fcb7 	bl	800b7b6 <SX126xSetCad>
}
 800ae48:	46c0      	nop			@ (mov r8, r8)
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <RadioSetTxContinuousWave>:
 *
 * \param freq       Channel RF frequency
 * \param power      Sets the output power [dBm]
 * \param time       Transmission mode timeout [s]
 */
void RadioSetTxContinuousWave(uint32_t freq, int8_t power, uint16_t time){
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b082      	sub	sp, #8
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	0008      	movs	r0, r1
 800ae58:	0011      	movs	r1, r2
 800ae5a:	1cfb      	adds	r3, r7, #3
 800ae5c:	1c02      	adds	r2, r0, #0
 800ae5e:	701a      	strb	r2, [r3, #0]
 800ae60:	003b      	movs	r3, r7
 800ae62:	1c0a      	adds	r2, r1, #0
 800ae64:	801a      	strh	r2, [r3, #0]
	SX126xSetRfFrequency(freq);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	0018      	movs	r0, r3
 800ae6a:	f000 fde3 	bl	800ba34 <SX126xSetRfFrequency>
	SX126xSetRfTxPower(power);
 800ae6e:	1cfb      	adds	r3, r7, #3
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	b25b      	sxtb	r3, r3
 800ae74:	0018      	movs	r0, r3
 800ae76:	f001 fb6b 	bl	800c550 <SX126xSetRfTxPower>
	SX126xSetTxContinuousWave();
 800ae7a:	f000 fca9 	bl	800b7d0 <SX126xSetTxContinuousWave>

//	TimerSetValue(&TxTimeoutTimer, time * 1e3);
//	TimerStart(&TxTimeoutTimer);
}
 800ae7e:	46c0      	nop			@ (mov r8, r8)
 800ae80:	46bd      	mov	sp, r7
 800ae82:	b002      	add	sp, #8
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <RadioRssi>:

int16_t RadioRssi(RadioModems_t modem){
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b082      	sub	sp, #8
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	0002      	movs	r2, r0
 800ae8e:	1dfb      	adds	r3, r7, #7
 800ae90:	701a      	strb	r2, [r3, #0]
	return SX126xGetRssiInst();
 800ae92:	f001 f865 	bl	800bf60 <SX126xGetRssiInst>
 800ae96:	0003      	movs	r3, r0
}
 800ae98:	0018      	movs	r0, r3
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	b002      	add	sp, #8
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <RadioWrite>:
 * \brief Writes the radio register at the specified address
 *
 * \param  addr Register address
 * \param  data New register value
 */
void RadioWrite(uint16_t addr, uint8_t data){
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	0002      	movs	r2, r0
 800aea8:	1dbb      	adds	r3, r7, #6
 800aeaa:	801a      	strh	r2, [r3, #0]
 800aeac:	1d7b      	adds	r3, r7, #5
 800aeae:	1c0a      	adds	r2, r1, #0
 800aeb0:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegister(addr, data);
 800aeb2:	1d7b      	adds	r3, r7, #5
 800aeb4:	781a      	ldrb	r2, [r3, #0]
 800aeb6:	1dbb      	adds	r3, r7, #6
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	0011      	movs	r1, r2
 800aebc:	0018      	movs	r0, r3
 800aebe:	f001 fa53 	bl	800c368 <SX126xWriteRegister>
}
 800aec2:	46c0      	nop			@ (mov r8, r8)
 800aec4:	46bd      	mov	sp, r7
 800aec6:	b002      	add	sp, #8
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <RadioRead>:
/*!
 * \brief Reads the radio register at the specified address
 *
 * \param  addr Register address
 */
uint8_t RadioRead(uint16_t addr){
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b082      	sub	sp, #8
 800aece:	af00      	add	r7, sp, #0
 800aed0:	0002      	movs	r2, r0
 800aed2:	1dbb      	adds	r3, r7, #6
 800aed4:	801a      	strh	r2, [r3, #0]
	return SX126xReadRegister(addr);
 800aed6:	1dbb      	adds	r3, r7, #6
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	0018      	movs	r0, r3
 800aedc:	f001 fa9e 	bl	800c41c <SX126xReadRegister>
 800aee0:	0003      	movs	r3, r0
}
 800aee2:	0018      	movs	r0, r3
 800aee4:	46bd      	mov	sp, r7
 800aee6:	b002      	add	sp, #8
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <RadioWriteBuffer>:

void RadioWriteBuffer(uint16_t addr, uint8_t *buffer, uint8_t size){
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b082      	sub	sp, #8
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6039      	str	r1, [r7, #0]
 800aef2:	0011      	movs	r1, r2
 800aef4:	1dbb      	adds	r3, r7, #6
 800aef6:	1c02      	adds	r2, r0, #0
 800aef8:	801a      	strh	r2, [r3, #0]
 800aefa:	1d7b      	adds	r3, r7, #5
 800aefc:	1c0a      	adds	r2, r1, #0
 800aefe:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegisters(addr, buffer, size);
 800af00:	1d7b      	adds	r3, r7, #5
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	b29a      	uxth	r2, r3
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	1dbb      	adds	r3, r7, #6
 800af0a:	881b      	ldrh	r3, [r3, #0]
 800af0c:	0018      	movs	r0, r3
 800af0e:	f001 f9e7 	bl	800c2e0 <SX126xWriteRegisters>
}
 800af12:	46c0      	nop			@ (mov r8, r8)
 800af14:	46bd      	mov	sp, r7
 800af16:	b002      	add	sp, #8
 800af18:	bd80      	pop	{r7, pc}

0800af1a <RadioReadBuffer>:

void RadioReadBuffer(uint16_t addr, uint8_t *buffer, uint8_t size){
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6039      	str	r1, [r7, #0]
 800af22:	0011      	movs	r1, r2
 800af24:	1dbb      	adds	r3, r7, #6
 800af26:	1c02      	adds	r2, r0, #0
 800af28:	801a      	strh	r2, [r3, #0]
 800af2a:	1d7b      	adds	r3, r7, #5
 800af2c:	1c0a      	adds	r2, r1, #0
 800af2e:	701a      	strb	r2, [r3, #0]
	SX126xReadRegisters(addr, buffer, size);
 800af30:	1d7b      	adds	r3, r7, #5
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	b29a      	uxth	r2, r3
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	1dbb      	adds	r3, r7, #6
 800af3a:	881b      	ldrh	r3, [r3, #0]
 800af3c:	0018      	movs	r0, r3
 800af3e:	f001 fa27 	bl	800c390 <SX126xReadRegisters>
}
 800af42:	46c0      	nop			@ (mov r8, r8)
 800af44:	46bd      	mov	sp, r7
 800af46:	b002      	add	sp, #8
 800af48:	bd80      	pop	{r7, pc}
	...

0800af4c <RadioSetMaxPayloadLength>:

void RadioReadFifo(uint8_t *buffer, uint8_t size){
	SX126xReadBuffer(0, buffer, size);
}

void RadioSetMaxPayloadLength(RadioModems_t modem, uint8_t max){
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	0002      	movs	r2, r0
 800af54:	1dfb      	adds	r3, r7, #7
 800af56:	701a      	strb	r2, [r3, #0]
 800af58:	1dbb      	adds	r3, r7, #6
 800af5a:	1c0a      	adds	r2, r1, #0
 800af5c:	701a      	strb	r2, [r3, #0]
	if (modem == MODEM_LORA){
 800af5e:	1dfb      	adds	r3, r7, #7
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d10d      	bne.n	800af82 <RadioSetMaxPayloadLength+0x36>
		SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800af66:	4b11      	ldr	r3, [pc, #68]	@ (800afac <RadioSetMaxPayloadLength+0x60>)
 800af68:	1dba      	adds	r2, r7, #6
 800af6a:	7812      	ldrb	r2, [r2, #0]
 800af6c:	701a      	strb	r2, [r3, #0]
 800af6e:	4b0f      	ldr	r3, [pc, #60]	@ (800afac <RadioSetMaxPayloadLength+0x60>)
 800af70:	7819      	ldrb	r1, [r3, #0]
 800af72:	4b0f      	ldr	r3, [pc, #60]	@ (800afb0 <RadioSetMaxPayloadLength+0x64>)
 800af74:	2227      	movs	r2, #39	@ 0x27
 800af76:	5499      	strb	r1, [r3, r2]
		SX126xSetPacketParams(&SX126x.PacketParams);
 800af78:	4b0e      	ldr	r3, [pc, #56]	@ (800afb4 <RadioSetMaxPayloadLength+0x68>)
 800af7a:	0018      	movs	r0, r3
 800af7c:	f000 fee0 	bl	800bd40 <SX126xSetPacketParams>
		if (SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH){
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
			SX126xSetPacketParams(&SX126x.PacketParams);
		}
	}
}
 800af80:	e010      	b.n	800afa4 <RadioSetMaxPayloadLength+0x58>
		if (SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH){
 800af82:	4b0b      	ldr	r3, [pc, #44]	@ (800afb0 <RadioSetMaxPayloadLength+0x64>)
 800af84:	7fdb      	ldrb	r3, [r3, #31]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d10c      	bne.n	800afa4 <RadioSetMaxPayloadLength+0x58>
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800af8a:	4b08      	ldr	r3, [pc, #32]	@ (800afac <RadioSetMaxPayloadLength+0x60>)
 800af8c:	1dba      	adds	r2, r7, #6
 800af8e:	7812      	ldrb	r2, [r2, #0]
 800af90:	701a      	strb	r2, [r3, #0]
 800af92:	4b06      	ldr	r3, [pc, #24]	@ (800afac <RadioSetMaxPayloadLength+0x60>)
 800af94:	7819      	ldrb	r1, [r3, #0]
 800af96:	4b06      	ldr	r3, [pc, #24]	@ (800afb0 <RadioSetMaxPayloadLength+0x64>)
 800af98:	2220      	movs	r2, #32
 800af9a:	5499      	strb	r1, [r3, r2]
			SX126xSetPacketParams(&SX126x.PacketParams);
 800af9c:	4b05      	ldr	r3, [pc, #20]	@ (800afb4 <RadioSetMaxPayloadLength+0x68>)
 800af9e:	0018      	movs	r0, r3
 800afa0:	f000 fece 	bl	800bd40 <SX126xSetPacketParams>
}
 800afa4:	46c0      	nop			@ (mov r8, r8)
 800afa6:	46bd      	mov	sp, r7
 800afa8:	b002      	add	sp, #8
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	20000158 	.word	0x20000158
 800afb0:	200004e4 	.word	0x200004e4
 800afb4:	200004fc 	.word	0x200004fc

0800afb8 <RadioSetPublicNetwork>:

void RadioSetPublicNetwork(bool enable){
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	0002      	movs	r2, r0
 800afc0:	1dfb      	adds	r3, r7, #7
 800afc2:	701a      	strb	r2, [r3, #0]
	RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800afc4:	4b14      	ldr	r3, [pc, #80]	@ (800b018 <RadioSetPublicNetwork+0x60>)
 800afc6:	1dfa      	adds	r2, r7, #7
 800afc8:	7812      	ldrb	r2, [r2, #0]
 800afca:	701a      	strb	r2, [r3, #0]
 800afcc:	4b12      	ldr	r3, [pc, #72]	@ (800b018 <RadioSetPublicNetwork+0x60>)
 800afce:	781a      	ldrb	r2, [r3, #0]
 800afd0:	4b11      	ldr	r3, [pc, #68]	@ (800b018 <RadioSetPublicNetwork+0x60>)
 800afd2:	705a      	strb	r2, [r3, #1]

	RadioSetModem(MODEM_LORA);
 800afd4:	2001      	movs	r0, #1
 800afd6:	f7ff f917 	bl	800a208 <RadioSetModem>
	if (enable == true){
 800afda:	1dfb      	adds	r3, r7, #7
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00b      	beq.n	800affa <RadioSetPublicNetwork+0x42>
		// Change LoRa modem SyncWord
		SX126xWriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PUBLIC_SYNCWORD >> 8) & 0xFF);
 800afe2:	23e8      	movs	r3, #232	@ 0xe8
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	2134      	movs	r1, #52	@ 0x34
 800afe8:	0018      	movs	r0, r3
 800afea:	f001 f9bd 	bl	800c368 <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF);
 800afee:	4b0b      	ldr	r3, [pc, #44]	@ (800b01c <RadioSetPublicNetwork+0x64>)
 800aff0:	2144      	movs	r1, #68	@ 0x44
 800aff2:	0018      	movs	r0, r3
 800aff4:	f001 f9b8 	bl	800c368 <SX126xWriteRegister>
	else{
		// Change LoRa modem SyncWord
		SX126xWriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
		SX126xWriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
	}
}
 800aff8:	e00a      	b.n	800b010 <RadioSetPublicNetwork+0x58>
		SX126xWriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
 800affa:	23e8      	movs	r3, #232	@ 0xe8
 800affc:	00db      	lsls	r3, r3, #3
 800affe:	2114      	movs	r1, #20
 800b000:	0018      	movs	r0, r3
 800b002:	f001 f9b1 	bl	800c368 <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
 800b006:	4b05      	ldr	r3, [pc, #20]	@ (800b01c <RadioSetPublicNetwork+0x64>)
 800b008:	2124      	movs	r1, #36	@ 0x24
 800b00a:	0018      	movs	r0, r3
 800b00c:	f001 f9ac 	bl	800c368 <SX126xWriteRegister>
}
 800b010:	46c0      	nop			@ (mov r8, r8)
 800b012:	46bd      	mov	sp, r7
 800b014:	b002      	add	sp, #8
 800b016:	bd80      	pop	{r7, pc}
 800b018:	200004dc 	.word	0x200004dc
 800b01c:	00000741 	.word	0x00000741

0800b020 <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime(void){
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
	return (RADIO_WAKEUP_TIME);
 800b024:	2303      	movs	r3, #3
}
 800b026:	0018      	movs	r0, r3
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <RadioOnDioIrq>:
	RadioBgIrqProcess();
	RadioStandby();
	RadioSleep();
}

void RadioOnDioIrq(void){
 800b02c:	b580      	push	{r7, lr}
 800b02e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b030:	b672      	cpsid	i
}
 800b032:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	IrqFired = true;
 800b034:	4b03      	ldr	r3, [pc, #12]	@ (800b044 <RadioOnDioIrq+0x18>)
 800b036:	2201      	movs	r2, #1
 800b038:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b03a:	b662      	cpsie	i
}
 800b03c:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
 800b03e:	46c0      	nop			@ (mov r8, r8)
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	200004d7 	.word	0x200004d7

0800b048 <RadioBgIrqProcess>:

void RadioBgIrqProcess(void){
 800b048:	b590      	push	{r4, r7, lr}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
	bool rx_timeout_handled = false;
 800b04e:	1dfb      	adds	r3, r7, #7
 800b050:	2200      	movs	r2, #0
 800b052:	701a      	strb	r2, [r3, #0]
	bool tx_timeout_handled = false;
 800b054:	1dbb      	adds	r3, r7, #6
 800b056:	2200      	movs	r2, #0
 800b058:	701a      	strb	r2, [r3, #0]
	if (IrqFired == true){
 800b05a:	4bad      	ldr	r3, [pc, #692]	@ (800b310 <RadioBgIrqProcess+0x2c8>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d100      	bne.n	800b064 <RadioBgIrqProcess+0x1c>
 800b062:	e11a      	b.n	800b29a <RadioBgIrqProcess+0x252>
  __ASM volatile ("cpsid i" : : : "memory");
 800b064:	b672      	cpsid	i
}
 800b066:	46c0      	nop			@ (mov r8, r8)
		__disable_irq();
		IrqFired = false;
 800b068:	4ba9      	ldr	r3, [pc, #676]	@ (800b310 <RadioBgIrqProcess+0x2c8>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b06e:	b662      	cpsie	i
}
 800b070:	46c0      	nop			@ (mov r8, r8)
		__enable_irq();

		uint16_t irqRegs = SX126xGetIrqStatus();
 800b072:	1d3c      	adds	r4, r7, #4
 800b074:	f000 fcb6 	bl	800b9e4 <SX126xGetIrqStatus>
 800b078:	0003      	movs	r3, r0
 800b07a:	8023      	strh	r3, [r4, #0]
		SX126xClearIrqStatus(IRQ_RADIO_ALL);
 800b07c:	4ba5      	ldr	r3, [pc, #660]	@ (800b314 <RadioBgIrqProcess+0x2cc>)
 800b07e:	0018      	movs	r0, r3
 800b080:	f001 f81a 	bl	800c0b8 <SX126xClearIrqStatus>

		if ((irqRegs & IRQ_TX_DONE) == IRQ_TX_DONE){
 800b084:	1d3b      	adds	r3, r7, #4
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	2201      	movs	r2, #1
 800b08a:	4013      	ands	r3, r2
 800b08c:	d012      	beq.n	800b0b4 <RadioBgIrqProcess+0x6c>
			tx_timeout_handled = true;
 800b08e:	1dbb      	adds	r3, r7, #6
 800b090:	2201      	movs	r2, #1
 800b092:	701a      	strb	r2, [r3, #0]
//			TimerStop(&TxTimeoutTimer);
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 800b094:	2001      	movs	r0, #1
 800b096:	f000 f989 	bl	800b3ac <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->TxDone != NULL)){
 800b09a:	4b9f      	ldr	r3, [pc, #636]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d008      	beq.n	800b0b4 <RadioBgIrqProcess+0x6c>
 800b0a2:	4b9d      	ldr	r3, [pc, #628]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d003      	beq.n	800b0b4 <RadioBgIrqProcess+0x6c>
				RadioEvents->TxDone();
 800b0ac:	4b9a      	ldr	r3, [pc, #616]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4798      	blx	r3
			}
		}

		if ((irqRegs & IRQ_RX_DONE) == IRQ_RX_DONE){
 800b0b4:	1d3b      	adds	r3, r7, #4
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	2202      	movs	r2, #2
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	d06a      	beq.n	800b194 <RadioBgIrqProcess+0x14c>
			uint8_t size;

			rx_timeout_handled = true;
 800b0be:	1dfb      	adds	r3, r7, #7
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	701a      	strb	r2, [r3, #0]
//			TimerStop(&RxTimeoutTimer);
			if (RxContinuous == false){
 800b0c4:	4b95      	ldr	r3, [pc, #596]	@ (800b31c <RadioBgIrqProcess+0x2d4>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	4053      	eors	r3, r2
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d015      	beq.n	800b0fe <RadioBgIrqProcess+0xb6>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 800b0d2:	2001      	movs	r0, #1
 800b0d4:	f000 f96a 	bl	800b3ac <SX126xSetOperatingMode>

				// WORKAROUND - Implicit Header Mode Timeout Behavior, see DS_SX1261-2_V1.2 datasheet chapter 15.3
				// RegRtcControl = @address 0x0902
				SX126xWriteRegister(0x0902, 0x00);
 800b0d8:	4b91      	ldr	r3, [pc, #580]	@ (800b320 <RadioBgIrqProcess+0x2d8>)
 800b0da:	2100      	movs	r1, #0
 800b0dc:	0018      	movs	r0, r3
 800b0de:	f001 f943 	bl	800c368 <SX126xWriteRegister>
				// RegEventMask = @address 0x0944
				SX126xWriteRegister(0x0944, SX126xReadRegister(0x0944) | (1 << 1));
 800b0e2:	4b90      	ldr	r3, [pc, #576]	@ (800b324 <RadioBgIrqProcess+0x2dc>)
 800b0e4:	0018      	movs	r0, r3
 800b0e6:	f001 f999 	bl	800c41c <SX126xReadRegister>
 800b0ea:	0003      	movs	r3, r0
 800b0ec:	001a      	movs	r2, r3
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	4a8b      	ldr	r2, [pc, #556]	@ (800b324 <RadioBgIrqProcess+0x2dc>)
 800b0f6:	0019      	movs	r1, r3
 800b0f8:	0010      	movs	r0, r2
 800b0fa:	f001 f935 	bl	800c368 <SX126xWriteRegister>
				// WORKAROUND END
			}
			memset(RadioRxPayload, 0, 255);
 800b0fe:	4b8a      	ldr	r3, [pc, #552]	@ (800b328 <RadioBgIrqProcess+0x2e0>)
 800b100:	22ff      	movs	r2, #255	@ 0xff
 800b102:	2100      	movs	r1, #0
 800b104:	0018      	movs	r0, r3
 800b106:	f001 fb49 	bl	800c79c <memset>

			if ((irqRegs & IRQ_CRC_ERROR) == IRQ_CRC_ERROR){
 800b10a:	1d3b      	adds	r3, r7, #4
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	2240      	movs	r2, #64	@ 0x40
 800b110:	4013      	ands	r3, r2
 800b112:	d01d      	beq.n	800b150 <RadioBgIrqProcess+0x108>
				uint8_t size;
				// Discard buffer
				memset(RadioRxPayload, 0, 255);
 800b114:	4b84      	ldr	r3, [pc, #528]	@ (800b328 <RadioBgIrqProcess+0x2e0>)
 800b116:	22ff      	movs	r2, #255	@ 0xff
 800b118:	2100      	movs	r1, #0
 800b11a:	0018      	movs	r0, r3
 800b11c:	f001 fb3e 	bl	800c79c <memset>
				SX126xGetPayload(RadioRxPayload, &size, 255);
 800b120:	1cb9      	adds	r1, r7, #2
 800b122:	4b81      	ldr	r3, [pc, #516]	@ (800b328 <RadioBgIrqProcess+0x2e0>)
 800b124:	22ff      	movs	r2, #255	@ 0xff
 800b126:	0018      	movs	r0, r3
 800b128:	f000 f976 	bl	800b418 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 800b12c:	4b7f      	ldr	r3, [pc, #508]	@ (800b32c <RadioBgIrqProcess+0x2e4>)
 800b12e:	0018      	movs	r0, r3
 800b130:	f000 ff66 	bl	800c000 <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxError)){
 800b134:	4b78      	ldr	r3, [pc, #480]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d02b      	beq.n	800b194 <RadioBgIrqProcess+0x14c>
 800b13c:	4b76      	ldr	r3, [pc, #472]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d026      	beq.n	800b194 <RadioBgIrqProcess+0x14c>
					RadioEvents->RxError();
 800b146:	4b74      	ldr	r3, [pc, #464]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	4798      	blx	r3
 800b14e:	e021      	b.n	800b194 <RadioBgIrqProcess+0x14c>
				}
			}
			else{
				SX126xGetPayload(RadioRxPayload, &size, 255);
 800b150:	1cf9      	adds	r1, r7, #3
 800b152:	4b75      	ldr	r3, [pc, #468]	@ (800b328 <RadioBgIrqProcess+0x2e0>)
 800b154:	22ff      	movs	r2, #255	@ 0xff
 800b156:	0018      	movs	r0, r3
 800b158:	f000 f95e 	bl	800b418 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 800b15c:	4b73      	ldr	r3, [pc, #460]	@ (800b32c <RadioBgIrqProcess+0x2e4>)
 800b15e:	0018      	movs	r0, r3
 800b160:	f000 ff4e 	bl	800c000 <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxDone != NULL)){
 800b164:	4b6c      	ldr	r3, [pc, #432]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d013      	beq.n	800b194 <RadioBgIrqProcess+0x14c>
 800b16c:	4b6a      	ldr	r3, [pc, #424]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00e      	beq.n	800b194 <RadioBgIrqProcess+0x14c>
					RadioEvents->RxDone(RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt);
 800b176:	4b68      	ldr	r3, [pc, #416]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	689c      	ldr	r4, [r3, #8]
 800b17c:	1cfb      	adds	r3, r7, #3
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	0019      	movs	r1, r3
 800b182:	4b6a      	ldr	r3, [pc, #424]	@ (800b32c <RadioBgIrqProcess+0x2e4>)
 800b184:	7b1b      	ldrb	r3, [r3, #12]
 800b186:	b25b      	sxtb	r3, r3
 800b188:	001a      	movs	r2, r3
 800b18a:	4b68      	ldr	r3, [pc, #416]	@ (800b32c <RadioBgIrqProcess+0x2e4>)
 800b18c:	7b5b      	ldrb	r3, [r3, #13]
 800b18e:	b25b      	sxtb	r3, r3
 800b190:	4865      	ldr	r0, [pc, #404]	@ (800b328 <RadioBgIrqProcess+0x2e0>)
 800b192:	47a0      	blx	r4
				}
			}
		}

		if ((irqRegs & IRQ_CAD_DONE) == IRQ_CAD_DONE){
 800b194:	1d3b      	adds	r3, r7, #4
 800b196:	881b      	ldrh	r3, [r3, #0]
 800b198:	2280      	movs	r2, #128	@ 0x80
 800b19a:	4013      	ands	r3, r2
 800b19c:	d018      	beq.n	800b1d0 <RadioBgIrqProcess+0x188>
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 800b19e:	2001      	movs	r0, #1
 800b1a0:	f000 f904 	bl	800b3ac <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->CadDone != NULL)){
 800b1a4:	4b5c      	ldr	r3, [pc, #368]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d011      	beq.n	800b1d0 <RadioBgIrqProcess+0x188>
 800b1ac:	4b5a      	ldr	r3, [pc, #360]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	69db      	ldr	r3, [r3, #28]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00c      	beq.n	800b1d0 <RadioBgIrqProcess+0x188>
				RadioEvents->CadDone(((irqRegs & IRQ_CAD_ACTIVITY_DETECTED) == IRQ_CAD_ACTIVITY_DETECTED));
 800b1b6:	4b58      	ldr	r3, [pc, #352]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	69db      	ldr	r3, [r3, #28]
 800b1bc:	1d3a      	adds	r2, r7, #4
 800b1be:	8811      	ldrh	r1, [r2, #0]
 800b1c0:	2280      	movs	r2, #128	@ 0x80
 800b1c2:	0052      	lsls	r2, r2, #1
 800b1c4:	400a      	ands	r2, r1
 800b1c6:	1e51      	subs	r1, r2, #1
 800b1c8:	418a      	sbcs	r2, r1
 800b1ca:	b2d2      	uxtb	r2, r2
 800b1cc:	0010      	movs	r0, r2
 800b1ce:	4798      	blx	r3
			}
		}

		if ((irqRegs & IRQ_RX_TX_TIMEOUT) == IRQ_RX_TX_TIMEOUT){
 800b1d0:	1d3b      	adds	r3, r7, #4
 800b1d2:	881a      	ldrh	r2, [r3, #0]
 800b1d4:	2380      	movs	r3, #128	@ 0x80
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4013      	ands	r3, r2
 800b1da:	d030      	beq.n	800b23e <RadioBgIrqProcess+0x1f6>
			if (SX126xGetOperatingMode() == MODE_TX){
 800b1dc:	f000 f8dc 	bl	800b398 <SX126xGetOperatingMode>
 800b1e0:	0003      	movs	r3, r0
 800b1e2:	2b04      	cmp	r3, #4
 800b1e4:	d113      	bne.n	800b20e <RadioBgIrqProcess+0x1c6>
				tx_timeout_handled = true;
 800b1e6:	1dbb      	adds	r3, r7, #6
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	701a      	strb	r2, [r3, #0]
//				TimerStop(&TxTimeoutTimer);
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	f000 f8dd 	bl	800b3ac <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL)){
 800b1f2:	4b49      	ldr	r3, [pc, #292]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d021      	beq.n	800b23e <RadioBgIrqProcess+0x1f6>
 800b1fa:	4b47      	ldr	r3, [pc, #284]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d01c      	beq.n	800b23e <RadioBgIrqProcess+0x1f6>
					RadioEvents->TxTimeout();
 800b204:	4b44      	ldr	r3, [pc, #272]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	4798      	blx	r3
 800b20c:	e017      	b.n	800b23e <RadioBgIrqProcess+0x1f6>
				}
			}
			else if (SX126xGetOperatingMode() == MODE_RX){
 800b20e:	f000 f8c3 	bl	800b398 <SX126xGetOperatingMode>
 800b212:	0003      	movs	r3, r0
 800b214:	2b05      	cmp	r3, #5
 800b216:	d112      	bne.n	800b23e <RadioBgIrqProcess+0x1f6>
				rx_timeout_handled = true;
 800b218:	1dfb      	adds	r3, r7, #7
 800b21a:	2201      	movs	r2, #1
 800b21c:	701a      	strb	r2, [r3, #0]
//				TimerStop(&RxTimeoutTimer);
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 800b21e:	2001      	movs	r0, #1
 800b220:	f000 f8c4 	bl	800b3ac <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)){
 800b224:	4b3c      	ldr	r3, [pc, #240]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d008      	beq.n	800b23e <RadioBgIrqProcess+0x1f6>
 800b22c:	4b3a      	ldr	r3, [pc, #232]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d003      	beq.n	800b23e <RadioBgIrqProcess+0x1f6>
					RadioEvents->RxTimeout();
 800b236:	4b38      	ldr	r3, [pc, #224]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	4798      	blx	r3
				}
			}
		}

		if ((irqRegs & IRQ_PREAMBLE_DETECTED) == IRQ_PREAMBLE_DETECTED){
 800b23e:	1d3b      	adds	r3, r7, #4
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	2204      	movs	r2, #4
 800b244:	4013      	ands	r3, r2
 800b246:	d00c      	beq.n	800b262 <RadioBgIrqProcess+0x21a>
			if ((RadioEvents != NULL) && (RadioEvents->PreAmpDetect != NULL)){
 800b248:	4b33      	ldr	r3, [pc, #204]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d008      	beq.n	800b262 <RadioBgIrqProcess+0x21a>
 800b250:	4b31      	ldr	r3, [pc, #196]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <RadioBgIrqProcess+0x21a>
				RadioEvents->PreAmpDetect();
 800b25a:	4b2f      	ldr	r3, [pc, #188]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	695b      	ldr	r3, [r3, #20]
 800b260:	4798      	blx	r3

		if ((irqRegs & IRQ_HEADER_VALID) == IRQ_HEADER_VALID){
			//__NOP( );
		}

		if ((irqRegs & IRQ_HEADER_ERROR) == IRQ_HEADER_ERROR){
 800b262:	1d3b      	adds	r3, r7, #4
 800b264:	881b      	ldrh	r3, [r3, #0]
 800b266:	2220      	movs	r2, #32
 800b268:	4013      	ands	r3, r2
 800b26a:	d016      	beq.n	800b29a <RadioBgIrqProcess+0x252>
//			TimerStop(&RxTimeoutTimer);
			if (RxContinuous == false){
 800b26c:	4b2b      	ldr	r3, [pc, #172]	@ (800b31c <RadioBgIrqProcess+0x2d4>)
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	2201      	movs	r2, #1
 800b272:	4053      	eors	r3, r2
 800b274:	b2db      	uxtb	r3, r3
 800b276:	2b00      	cmp	r3, #0
 800b278:	d002      	beq.n	800b280 <RadioBgIrqProcess+0x238>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 800b27a:	2001      	movs	r0, #1
 800b27c:	f000 f896 	bl	800b3ac <SX126xSetOperatingMode>
			}
			if ((RadioEvents != NULL) && (RadioEvents->RxError != NULL)){
 800b280:	4b25      	ldr	r3, [pc, #148]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d008      	beq.n	800b29a <RadioBgIrqProcess+0x252>
 800b288:	4b23      	ldr	r3, [pc, #140]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <RadioBgIrqProcess+0x252>
				RadioEvents->RxError();
 800b292:	4b21      	ldr	r3, [pc, #132]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	4798      	blx	r3
			}
		}
	}
	if (TimerRxTimeout){
 800b29a:	4b25      	ldr	r3, [pc, #148]	@ (800b330 <RadioBgIrqProcess+0x2e8>)
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d016      	beq.n	800b2d0 <RadioBgIrqProcess+0x288>
		TimerRxTimeout = false;
 800b2a2:	4b23      	ldr	r3, [pc, #140]	@ (800b330 <RadioBgIrqProcess+0x2e8>)
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	701a      	strb	r2, [r3, #0]
		if (!rx_timeout_handled){
 800b2a8:	1dfb      	adds	r3, r7, #7
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	4053      	eors	r3, r2
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00c      	beq.n	800b2d0 <RadioBgIrqProcess+0x288>
//			TimerStop(&RxTimeoutTimer);
			if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)){
 800b2b6:	4b18      	ldr	r3, [pc, #96]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d008      	beq.n	800b2d0 <RadioBgIrqProcess+0x288>
 800b2be:	4b16      	ldr	r3, [pc, #88]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <RadioBgIrqProcess+0x288>
				RadioEvents->RxTimeout();
 800b2c8:	4b13      	ldr	r3, [pc, #76]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	4798      	blx	r3
			}
		}
	}
	if (TimerTxTimeout){
 800b2d0:	4b18      	ldr	r3, [pc, #96]	@ (800b334 <RadioBgIrqProcess+0x2ec>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d016      	beq.n	800b306 <RadioBgIrqProcess+0x2be>
		TimerTxTimeout = false;
 800b2d8:	4b16      	ldr	r3, [pc, #88]	@ (800b334 <RadioBgIrqProcess+0x2ec>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	701a      	strb	r2, [r3, #0]
		if (!tx_timeout_handled){
 800b2de:	1dbb      	adds	r3, r7, #6
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	4053      	eors	r3, r2
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00c      	beq.n	800b306 <RadioBgIrqProcess+0x2be>
//			TimerStop(&TxTimeoutTimer);
			if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL))
 800b2ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d008      	beq.n	800b306 <RadioBgIrqProcess+0x2be>
 800b2f4:	4b08      	ldr	r3, [pc, #32]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <RadioBgIrqProcess+0x2be>
			{
				RadioEvents->TxTimeout();
 800b2fe:	4b06      	ldr	r3, [pc, #24]	@ (800b318 <RadioBgIrqProcess+0x2d0>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	4798      	blx	r3
			}
		}
	}
}
 800b306:	46c0      	nop			@ (mov r8, r8)
 800b308:	46bd      	mov	sp, r7
 800b30a:	b003      	add	sp, #12
 800b30c:	bd90      	pop	{r4, r7, pc}
 800b30e:	46c0      	nop			@ (mov r8, r8)
 800b310:	200004d7 	.word	0x200004d7
 800b314:	0000ffff 	.word	0x0000ffff
 800b318:	200004e0 	.word	0x200004e0
 800b31c:	200003c0 	.word	0x200003c0
 800b320:	00000902 	.word	0x00000902
 800b324:	00000944 	.word	0x00000944
 800b328:	200003d8 	.word	0x200003d8
 800b32c:	200003c4 	.word	0x200003c4
 800b330:	200004d8 	.word	0x200004d8
 800b334:	200004d9 	.word	0x200004d9

0800b338 <RadioIrqProcess>:

void RadioIrqProcess(void){
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
	RadioBgIrqProcess();
 800b33c:	f7ff fe84 	bl	800b048 <RadioBgIrqProcess>
}
 800b340:	46c0      	nop			@ (mov r8, r8)
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <RadioIrqProcessAfterDeepSleep>:

void RadioIrqProcessAfterDeepSleep(void){
 800b348:	b580      	push	{r7, lr}
 800b34a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b34c:	b672      	cpsid	i
}
 800b34e:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	IrqFired = true;
 800b350:	4b04      	ldr	r3, [pc, #16]	@ (800b364 <RadioIrqProcessAfterDeepSleep+0x1c>)
 800b352:	2201      	movs	r2, #1
 800b354:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b356:	b662      	cpsie	i
}
 800b358:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
	RadioBgIrqProcess();
 800b35a:	f7ff fe75 	bl	800b048 <RadioBgIrqProcess>
}
 800b35e:	46c0      	nop			@ (mov r8, r8)
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	200004d7 	.word	0x200004d7

0800b368 <SX126xInit>:
/*
 * \brief Process the IRQ if handled by the driver
 */
void SX126xProcessIrqs(void);

void SX126xInit(void){
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
	SX126xReset();
 800b36c:	f000 fece 	bl	800c10c <SX126xReset>
	SX126xWakeup();
 800b370:	f000 ff16 	bl	800c1a0 <SX126xWakeup>
	SX126xSetStandby(STDBY_RC);
 800b374:	2000      	movs	r0, #0
 800b376:	f000 f961 	bl	800b63c <SX126xSetStandby>

	SX126xSetDio2AsRfSwitchCtrl(true);
 800b37a:	2001      	movs	r0, #1
 800b37c:	f000 fb49 	bl	800ba12 <SX126xSetDio2AsRfSwitchCtrl>

	SX126xSetOperatingMode(MODE_STDBY_RC);
 800b380:	2001      	movs	r0, #1
 800b382:	f000 f813 	bl	800b3ac <SX126xSetOperatingMode>
}
 800b386:	46c0      	nop			@ (mov r8, r8)
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <SX126xReInit>:

void SX126xReInit(void){
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
}
 800b390:	46c0      	nop			@ (mov r8, r8)
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
	...

0800b398 <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode(void){
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0
	return OperatingMode;
 800b39c:	4b02      	ldr	r3, [pc, #8]	@ (800b3a8 <SX126xGetOperatingMode+0x10>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
}
 800b3a0:	0018      	movs	r0, r3
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	46c0      	nop			@ (mov r8, r8)
 800b3a8:	20000538 	.word	0x20000538

0800b3ac <SX126xSetOperatingMode>:

void SX126xSetOperatingMode(RadioOperatingModes_t mode){
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	0002      	movs	r2, r0
 800b3b4:	1dfb      	adds	r3, r7, #7
 800b3b6:	701a      	strb	r2, [r3, #0]
	OperatingMode = mode;
 800b3b8:	4b03      	ldr	r3, [pc, #12]	@ (800b3c8 <SX126xSetOperatingMode+0x1c>)
 800b3ba:	1dfa      	adds	r2, r7, #7
 800b3bc:	7812      	ldrb	r2, [r2, #0]
 800b3be:	701a      	strb	r2, [r3, #0]
}
 800b3c0:	46c0      	nop			@ (mov r8, r8)
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	b002      	add	sp, #8
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	20000538 	.word	0x20000538

0800b3cc <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady(void){
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	af00      	add	r7, sp, #0
	if ((SX126xGetOperatingMode() == MODE_SLEEP) || (SX126xGetOperatingMode() == MODE_RX_DC)){
 800b3d0:	f7ff ffe2 	bl	800b398 <SX126xGetOperatingMode>
 800b3d4:	1e03      	subs	r3, r0, #0
 800b3d6:	d004      	beq.n	800b3e2 <SX126xCheckDeviceReady+0x16>
 800b3d8:	f7ff ffde 	bl	800b398 <SX126xGetOperatingMode>
 800b3dc:	0003      	movs	r3, r0
 800b3de:	2b06      	cmp	r3, #6
 800b3e0:	d103      	bne.n	800b3ea <SX126xCheckDeviceReady+0x1e>
		SX126xWakeup();
 800b3e2:	f000 fedd 	bl	800c1a0 <SX126xWakeup>
		// Switch is turned off when device is in sleep mode and turned on is all other modes
		SX126xAntSwOn();
 800b3e6:	f001 f8cd 	bl	800c584 <SX126xAntSwOn>
	}
	SX126xWaitOnBusy();
 800b3ea:	f000 feaf 	bl	800c14c <SX126xWaitOnBusy>
}
 800b3ee:	46c0      	nop			@ (mov r8, r8)
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <SX126xSetPayload>:

void SX126xSetPayload(uint8_t *payload, uint8_t size){
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	000a      	movs	r2, r1
 800b3fe:	1cfb      	adds	r3, r7, #3
 800b400:	701a      	strb	r2, [r3, #0]
	SX126xWriteBuffer(0x00, payload, size);
 800b402:	1cfb      	adds	r3, r7, #3
 800b404:	781a      	ldrb	r2, [r3, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	0019      	movs	r1, r3
 800b40a:	2000      	movs	r0, #0
 800b40c:	f001 f81a 	bl	800c444 <SX126xWriteBuffer>
}
 800b410:	46c0      	nop			@ (mov r8, r8)
 800b412:	46bd      	mov	sp, r7
 800b414:	b002      	add	sp, #8
 800b416:	bd80      	pop	{r7, pc}

0800b418 <SX126xGetPayload>:

uint8_t SX126xGetPayload(uint8_t *buffer, uint8_t *size, uint8_t maxSize){
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	1dfb      	adds	r3, r7, #7
 800b424:	701a      	strb	r2, [r3, #0]
	uint8_t offset = 0;
 800b426:	2117      	movs	r1, #23
 800b428:	187b      	adds	r3, r7, r1
 800b42a:	2200      	movs	r2, #0
 800b42c:	701a      	strb	r2, [r3, #0]

	SX126xGetRxBufferStatus(size, &offset);
 800b42e:	187a      	adds	r2, r7, r1
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	0011      	movs	r1, r2
 800b434:	0018      	movs	r0, r3
 800b436:	f000 fdad 	bl	800bf94 <SX126xGetRxBufferStatus>
	if (*size > maxSize)
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	1dfa      	adds	r2, r7, #7
 800b440:	7812      	ldrb	r2, [r2, #0]
 800b442:	429a      	cmp	r2, r3
 800b444:	d201      	bcs.n	800b44a <SX126xGetPayload+0x32>
		return 1;
 800b446:	2301      	movs	r3, #1
 800b448:	e009      	b.n	800b45e <SX126xGetPayload+0x46>
	SX126xReadBuffer(offset, buffer, *size);
 800b44a:	2317      	movs	r3, #23
 800b44c:	18fb      	adds	r3, r7, r3
 800b44e:	7818      	ldrb	r0, [r3, #0]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	781a      	ldrb	r2, [r3, #0]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	0019      	movs	r1, r3
 800b458:	f001 f830 	bl	800c4bc <SX126xReadBuffer>
	return 0;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	0018      	movs	r0, r3
 800b460:	46bd      	mov	sp, r7
 800b462:	b006      	add	sp, #24
 800b464:	bd80      	pop	{r7, pc}

0800b466 <SX126xSendPayload>:

void SX126xSendPayload(uint8_t *payload, uint8_t size, uint32_t timeout){
 800b466:	b580      	push	{r7, lr}
 800b468:	b084      	sub	sp, #16
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	60f8      	str	r0, [r7, #12]
 800b46e:	607a      	str	r2, [r7, #4]
 800b470:	200b      	movs	r0, #11
 800b472:	183b      	adds	r3, r7, r0
 800b474:	1c0a      	adds	r2, r1, #0
 800b476:	701a      	strb	r2, [r3, #0]
	SX126xSetPayload(payload, size);
 800b478:	183b      	adds	r3, r7, r0
 800b47a:	781a      	ldrb	r2, [r3, #0]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	0011      	movs	r1, r2
 800b480:	0018      	movs	r0, r3
 800b482:	f7ff ffb7 	bl	800b3f4 <SX126xSetPayload>
	SX126xSetTx(timeout);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	0018      	movs	r0, r3
 800b48a:	f000 f8f4 	bl	800b676 <SX126xSetTx>
}
 800b48e:	46c0      	nop			@ (mov r8, r8)
 800b490:	46bd      	mov	sp, r7
 800b492:	b004      	add	sp, #16
 800b494:	bd80      	pop	{r7, pc}

0800b496 <SX126xSetSyncWord>:

uint8_t SX126xSetSyncWord(uint8_t *syncWord){
 800b496:	b580      	push	{r7, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
	SX126xWriteRegisters(REG_LR_SYNCWORDBASEADDRESS, syncWord, 8);
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	23d8      	movs	r3, #216	@ 0xd8
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	2208      	movs	r2, #8
 800b4a6:	0018      	movs	r0, r3
 800b4a8:	f000 ff1a 	bl	800c2e0 <SX126xWriteRegisters>
	return 0;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	0018      	movs	r0, r3
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	b002      	add	sp, #8
 800b4b4:	bd80      	pop	{r7, pc}
	...

0800b4b8 <SX126xSetCrcSeed>:

void SX126xSetCrcSeed(uint16_t seed){
 800b4b8:	b590      	push	{r4, r7, lr}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	0002      	movs	r2, r0
 800b4c0:	1dbb      	adds	r3, r7, #6
 800b4c2:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)((seed >> 8) & 0xFF);
 800b4c4:	1dbb      	adds	r3, r7, #6
 800b4c6:	881b      	ldrh	r3, [r3, #0]
 800b4c8:	0a1b      	lsrs	r3, r3, #8
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	240c      	movs	r4, #12
 800b4d0:	193b      	adds	r3, r7, r4
 800b4d2:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(seed & 0xFF);
 800b4d4:	1dbb      	adds	r3, r7, #6
 800b4d6:	881b      	ldrh	r3, [r3, #0]
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	193b      	adds	r3, r7, r4
 800b4dc:	705a      	strb	r2, [r3, #1]

	switch (SX126xGetPacketType()){
 800b4de:	f000 fb05 	bl	800baec <SX126xGetPacketType>
 800b4e2:	1e03      	subs	r3, r0, #0
 800b4e4:	d106      	bne.n	800b4f4 <SX126xSetCrcSeed+0x3c>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCSEEDBASEADDR, buf, 2);
 800b4e6:	193b      	adds	r3, r7, r4
 800b4e8:	4805      	ldr	r0, [pc, #20]	@ (800b500 <SX126xSetCrcSeed+0x48>)
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	0019      	movs	r1, r3
 800b4ee:	f000 fef7 	bl	800c2e0 <SX126xWriteRegisters>
		break;
 800b4f2:	e000      	b.n	800b4f6 <SX126xSetCrcSeed+0x3e>

		default:
		break;
 800b4f4:	46c0      	nop			@ (mov r8, r8)
	}
}
 800b4f6:	46c0      	nop			@ (mov r8, r8)
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	b005      	add	sp, #20
 800b4fc:	bd90      	pop	{r4, r7, pc}
 800b4fe:	46c0      	nop			@ (mov r8, r8)
 800b500:	000006bc 	.word	0x000006bc

0800b504 <SX126xSetCrcPolynomial>:

void SX126xSetCrcPolynomial(uint16_t polynomial){
 800b504:	b590      	push	{r4, r7, lr}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	0002      	movs	r2, r0
 800b50c:	1dbb      	adds	r3, r7, #6
 800b50e:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)((polynomial >> 8) & 0xFF);
 800b510:	1dbb      	adds	r3, r7, #6
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	0a1b      	lsrs	r3, r3, #8
 800b516:	b29b      	uxth	r3, r3
 800b518:	b2da      	uxtb	r2, r3
 800b51a:	240c      	movs	r4, #12
 800b51c:	193b      	adds	r3, r7, r4
 800b51e:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(polynomial & 0xFF);
 800b520:	1dbb      	adds	r3, r7, #6
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	b2da      	uxtb	r2, r3
 800b526:	193b      	adds	r3, r7, r4
 800b528:	705a      	strb	r2, [r3, #1]

	switch (SX126xGetPacketType()){
 800b52a:	f000 fadf 	bl	800baec <SX126xGetPacketType>
 800b52e:	1e03      	subs	r3, r0, #0
 800b530:	d106      	bne.n	800b540 <SX126xSetCrcPolynomial+0x3c>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCPOLYBASEADDR, buf, 2);
 800b532:	193b      	adds	r3, r7, r4
 800b534:	4805      	ldr	r0, [pc, #20]	@ (800b54c <SX126xSetCrcPolynomial+0x48>)
 800b536:	2202      	movs	r2, #2
 800b538:	0019      	movs	r1, r3
 800b53a:	f000 fed1 	bl	800c2e0 <SX126xWriteRegisters>
		break;
 800b53e:	e000      	b.n	800b542 <SX126xSetCrcPolynomial+0x3e>

		default:
		break;
 800b540:	46c0      	nop			@ (mov r8, r8)
	}
}
 800b542:	46c0      	nop			@ (mov r8, r8)
 800b544:	46bd      	mov	sp, r7
 800b546:	b005      	add	sp, #20
 800b548:	bd90      	pop	{r4, r7, pc}
 800b54a:	46c0      	nop			@ (mov r8, r8)
 800b54c:	000006be 	.word	0x000006be

0800b550 <SX126xSetWhiteningSeed>:

void SX126xSetWhiteningSeed(uint16_t seed){
 800b550:	b590      	push	{r4, r7, lr}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	0002      	movs	r2, r0
 800b558:	1dbb      	adds	r3, r7, #6
 800b55a:	801a      	strh	r2, [r3, #0]
	uint8_t regValue = 0;
 800b55c:	240f      	movs	r4, #15
 800b55e:	193b      	adds	r3, r7, r4
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]

	switch (SX126xGetPacketType()){
 800b564:	f000 fac2 	bl	800baec <SX126xGetPacketType>
 800b568:	1e03      	subs	r3, r0, #0
 800b56a:	d12c      	bne.n	800b5c6 <SX126xSetWhiteningSeed+0x76>
		case PACKET_TYPE_GFSK:
			regValue = SX126xReadRegister(REG_LR_WHITSEEDBASEADDR_MSB) & 0xFE;
 800b56c:	23d7      	movs	r3, #215	@ 0xd7
 800b56e:	00db      	lsls	r3, r3, #3
 800b570:	0018      	movs	r0, r3
 800b572:	f000 ff53 	bl	800c41c <SX126xReadRegister>
 800b576:	0003      	movs	r3, r0
 800b578:	0019      	movs	r1, r3
 800b57a:	0020      	movs	r0, r4
 800b57c:	183b      	adds	r3, r7, r0
 800b57e:	2201      	movs	r2, #1
 800b580:	4391      	bics	r1, r2
 800b582:	000a      	movs	r2, r1
 800b584:	701a      	strb	r2, [r3, #0]
			regValue = ((seed >> 8) & 0x01) | regValue;
 800b586:	1dbb      	adds	r3, r7, #6
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	0a1b      	lsrs	r3, r3, #8
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	b25b      	sxtb	r3, r3
 800b590:	2201      	movs	r2, #1
 800b592:	4013      	ands	r3, r2
 800b594:	b25a      	sxtb	r2, r3
 800b596:	183b      	adds	r3, r7, r0
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	b25b      	sxtb	r3, r3
 800b59c:	4313      	orrs	r3, r2
 800b59e:	b25a      	sxtb	r2, r3
 800b5a0:	183b      	adds	r3, r7, r0
 800b5a2:	701a      	strb	r2, [r3, #0]
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_MSB, regValue); // only 1 bit.
 800b5a4:	183b      	adds	r3, r7, r0
 800b5a6:	781a      	ldrb	r2, [r3, #0]
 800b5a8:	23d7      	movs	r3, #215	@ 0xd7
 800b5aa:	00db      	lsls	r3, r3, #3
 800b5ac:	0011      	movs	r1, r2
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	f000 feda 	bl	800c368 <SX126xWriteRegister>
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed);
 800b5b4:	1dbb      	adds	r3, r7, #6
 800b5b6:	881b      	ldrh	r3, [r3, #0]
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	4a05      	ldr	r2, [pc, #20]	@ (800b5d0 <SX126xSetWhiteningSeed+0x80>)
 800b5bc:	0019      	movs	r1, r3
 800b5be:	0010      	movs	r0, r2
 800b5c0:	f000 fed2 	bl	800c368 <SX126xWriteRegister>
		break;
 800b5c4:	e000      	b.n	800b5c8 <SX126xSetWhiteningSeed+0x78>

		default:
		break;
 800b5c6:	46c0      	nop			@ (mov r8, r8)
	}
}
 800b5c8:	46c0      	nop			@ (mov r8, r8)
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	b005      	add	sp, #20
 800b5ce:	bd90      	pop	{r4, r7, pc}
 800b5d0:	000006b9 	.word	0x000006b9

0800b5d4 <SX126xGetRandom>:

uint32_t SX126xGetRandom(void){
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
	uint8_t buf[] = {0, 0, 0, 0};
 800b5da:	1d3b      	adds	r3, r7, #4
 800b5dc:	2200      	movs	r2, #0
 800b5de:	601a      	str	r2, [r3, #0]

	SX126xReadRegisters(RANDOM_NUMBER_GENERATORBASEADDR, buf, 4);
 800b5e0:	1d3b      	adds	r3, r7, #4
 800b5e2:	480b      	ldr	r0, [pc, #44]	@ (800b610 <SX126xGetRandom+0x3c>)
 800b5e4:	2204      	movs	r2, #4
 800b5e6:	0019      	movs	r1, r3
 800b5e8:	f000 fed2 	bl	800c390 <SX126xReadRegisters>

	return (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 800b5ec:	1d3b      	adds	r3, r7, #4
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	061a      	lsls	r2, r3, #24
 800b5f2:	1d3b      	adds	r3, r7, #4
 800b5f4:	785b      	ldrb	r3, [r3, #1]
 800b5f6:	041b      	lsls	r3, r3, #16
 800b5f8:	431a      	orrs	r2, r3
 800b5fa:	1d3b      	adds	r3, r7, #4
 800b5fc:	789b      	ldrb	r3, [r3, #2]
 800b5fe:	021b      	lsls	r3, r3, #8
 800b600:	4313      	orrs	r3, r2
 800b602:	1d3a      	adds	r2, r7, #4
 800b604:	78d2      	ldrb	r2, [r2, #3]
 800b606:	4313      	orrs	r3, r2
}
 800b608:	0018      	movs	r0, r3
 800b60a:	46bd      	mov	sp, r7
 800b60c:	b002      	add	sp, #8
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	00000819 	.word	0x00000819

0800b614 <SX126xSetSleep>:

void SX126xSetSleep(SleepParams_t sleepConfig){
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	1d3b      	adds	r3, r7, #4
 800b61c:	7018      	strb	r0, [r3, #0]
	SX126xAntSwOff();
 800b61e:	f000 ffb6 	bl	800c58e <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_SLEEP, &sleepConfig.Value, 1);
 800b622:	1d3b      	adds	r3, r7, #4
 800b624:	2201      	movs	r2, #1
 800b626:	0019      	movs	r1, r3
 800b628:	2084      	movs	r0, #132	@ 0x84
 800b62a:	f000 fde5 	bl	800c1f8 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_SLEEP);
 800b62e:	2000      	movs	r0, #0
 800b630:	f7ff febc 	bl	800b3ac <SX126xSetOperatingMode>
}
 800b634:	46c0      	nop			@ (mov r8, r8)
 800b636:	46bd      	mov	sp, r7
 800b638:	b002      	add	sp, #8
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <SX126xSetStandby>:

void SX126xSetStandby(RadioStandbyModes_t standbyConfig){
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	0002      	movs	r2, r0
 800b644:	1dfb      	adds	r3, r7, #7
 800b646:	701a      	strb	r2, [r3, #0]
	SX126xAntSwOff();
 800b648:	f000 ffa1 	bl	800c58e <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_STANDBY, (uint8_t *)&standbyConfig, 1);
 800b64c:	1dfb      	adds	r3, r7, #7
 800b64e:	2201      	movs	r2, #1
 800b650:	0019      	movs	r1, r3
 800b652:	2080      	movs	r0, #128	@ 0x80
 800b654:	f000 fdd0 	bl	800c1f8 <SX126xWriteCommand>
	if (standbyConfig == STDBY_RC){
 800b658:	1dfb      	adds	r3, r7, #7
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d103      	bne.n	800b668 <SX126xSetStandby+0x2c>
		SX126xSetOperatingMode(MODE_STDBY_RC);
 800b660:	2001      	movs	r0, #1
 800b662:	f7ff fea3 	bl	800b3ac <SX126xSetOperatingMode>
	}
	else{
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
	}
}
 800b666:	e002      	b.n	800b66e <SX126xSetStandby+0x32>
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
 800b668:	2002      	movs	r0, #2
 800b66a:	f7ff fe9f 	bl	800b3ac <SX126xSetOperatingMode>
}
 800b66e:	46c0      	nop			@ (mov r8, r8)
 800b670:	46bd      	mov	sp, r7
 800b672:	b002      	add	sp, #8
 800b674:	bd80      	pop	{r7, pc}

0800b676 <SX126xSetTx>:
void SX126xSetFs(void){
	SX126xWriteCommand(RADIO_SET_FS, 0, 0);
	SX126xSetOperatingMode(MODE_FS);
}

void SX126xSetTx(uint32_t timeout){
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_TX);
 800b67e:	2004      	movs	r0, #4
 800b680:	f7ff fe94 	bl	800b3ac <SX126xSetOperatingMode>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	0c1b      	lsrs	r3, r3, #16
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	210c      	movs	r1, #12
 800b68c:	187b      	adds	r3, r7, r1
 800b68e:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	0a1b      	lsrs	r3, r3, #8
 800b694:	b2da      	uxtb	r2, r3
 800b696:	187b      	adds	r3, r7, r1
 800b698:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	b2da      	uxtb	r2, r3
 800b69e:	187b      	adds	r3, r7, r1
 800b6a0:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_TX, buf, 3);
 800b6a2:	187b      	adds	r3, r7, r1
 800b6a4:	2203      	movs	r2, #3
 800b6a6:	0019      	movs	r1, r3
 800b6a8:	2083      	movs	r0, #131	@ 0x83
 800b6aa:	f000 fda5 	bl	800c1f8 <SX126xWriteCommand>
}
 800b6ae:	46c0      	nop			@ (mov r8, r8)
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	b004      	add	sp, #16
 800b6b4:	bd80      	pop	{r7, pc}
	...

0800b6b8 <SX126xSetRx>:

void SX126xSetRx(uint32_t timeout){
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 800b6c0:	2005      	movs	r0, #5
 800b6c2:	f7ff fe73 	bl	800b3ac <SX126xSetOperatingMode>

    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 800b6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b704 <SX126xSetRx+0x4c>)
 800b6c8:	2194      	movs	r1, #148	@ 0x94
 800b6ca:	0018      	movs	r0, r3
 800b6cc:	f000 fe4c 	bl	800c368 <SX126xWriteRegister>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	0c1b      	lsrs	r3, r3, #16
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	210c      	movs	r1, #12
 800b6d8:	187b      	adds	r3, r7, r1
 800b6da:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	0a1b      	lsrs	r3, r3, #8
 800b6e0:	b2da      	uxtb	r2, r3
 800b6e2:	187b      	adds	r3, r7, r1
 800b6e4:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	187b      	adds	r3, r7, r1
 800b6ec:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 800b6ee:	187b      	adds	r3, r7, r1
 800b6f0:	2203      	movs	r2, #3
 800b6f2:	0019      	movs	r1, r3
 800b6f4:	2082      	movs	r0, #130	@ 0x82
 800b6f6:	f000 fd7f 	bl	800c1f8 <SX126xWriteCommand>
}
 800b6fa:	46c0      	nop			@ (mov r8, r8)
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	b004      	add	sp, #16
 800b700:	bd80      	pop	{r7, pc}
 800b702:	46c0      	nop			@ (mov r8, r8)
 800b704:	000008ac 	.word	0x000008ac

0800b708 <SX126xSetRxBoosted>:

void SX126xSetRxBoosted(uint32_t timeout){
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 800b710:	2005      	movs	r0, #5
 800b712:	f7ff fe4b 	bl	800b3ac <SX126xSetOperatingMode>

	SX126xWriteRegister(REG_RX_GAIN, 0x96); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 800b716:	4b0f      	ldr	r3, [pc, #60]	@ (800b754 <SX126xSetRxBoosted+0x4c>)
 800b718:	2196      	movs	r1, #150	@ 0x96
 800b71a:	0018      	movs	r0, r3
 800b71c:	f000 fe24 	bl	800c368 <SX126xWriteRegister>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	0c1b      	lsrs	r3, r3, #16
 800b724:	b2da      	uxtb	r2, r3
 800b726:	210c      	movs	r1, #12
 800b728:	187b      	adds	r3, r7, r1
 800b72a:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	0a1b      	lsrs	r3, r3, #8
 800b730:	b2da      	uxtb	r2, r3
 800b732:	187b      	adds	r3, r7, r1
 800b734:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	187b      	adds	r3, r7, r1
 800b73c:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 800b73e:	187b      	adds	r3, r7, r1
 800b740:	2203      	movs	r2, #3
 800b742:	0019      	movs	r1, r3
 800b744:	2082      	movs	r0, #130	@ 0x82
 800b746:	f000 fd57 	bl	800c1f8 <SX126xWriteCommand>
}
 800b74a:	46c0      	nop			@ (mov r8, r8)
 800b74c:	46bd      	mov	sp, r7
 800b74e:	b004      	add	sp, #16
 800b750:	bd80      	pop	{r7, pc}
 800b752:	46c0      	nop			@ (mov r8, r8)
 800b754:	000008ac 	.word	0x000008ac

0800b758 <SX126xSetRxDutyCycle>:

void SX126xSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime){
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	buf[0] = (uint8_t)((rxTime >> 16) & 0xFF);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	0c1b      	lsrs	r3, r3, #16
 800b766:	b2da      	uxtb	r2, r3
 800b768:	2108      	movs	r1, #8
 800b76a:	187b      	adds	r3, r7, r1
 800b76c:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((rxTime >> 8) & 0xFF);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	0a1b      	lsrs	r3, r3, #8
 800b772:	b2da      	uxtb	r2, r3
 800b774:	187b      	adds	r3, r7, r1
 800b776:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(rxTime & 0xFF);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	b2da      	uxtb	r2, r3
 800b77c:	187b      	adds	r3, r7, r1
 800b77e:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)((sleepTime >> 16) & 0xFF);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	0c1b      	lsrs	r3, r3, #16
 800b784:	b2da      	uxtb	r2, r3
 800b786:	187b      	adds	r3, r7, r1
 800b788:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((sleepTime >> 8) & 0xFF);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	0a1b      	lsrs	r3, r3, #8
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	187b      	adds	r3, r7, r1
 800b792:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)(sleepTime & 0xFF);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	b2da      	uxtb	r2, r3
 800b798:	187b      	adds	r3, r7, r1
 800b79a:	715a      	strb	r2, [r3, #5]
	SX126xWriteCommand(RADIO_SET_RXDUTYCYCLE, buf, 6);
 800b79c:	187b      	adds	r3, r7, r1
 800b79e:	2206      	movs	r2, #6
 800b7a0:	0019      	movs	r1, r3
 800b7a2:	2094      	movs	r0, #148	@ 0x94
 800b7a4:	f000 fd28 	bl	800c1f8 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_RX_DC);
 800b7a8:	2006      	movs	r0, #6
 800b7aa:	f7ff fdff 	bl	800b3ac <SX126xSetOperatingMode>
}
 800b7ae:	46c0      	nop			@ (mov r8, r8)
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	b004      	add	sp, #16
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <SX126xSetCad>:

void SX126xSetCad(void){
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_CAD, 0, 0);
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	2100      	movs	r1, #0
 800b7be:	20c5      	movs	r0, #197	@ 0xc5
 800b7c0:	f000 fd1a 	bl	800c1f8 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_CAD);
 800b7c4:	2007      	movs	r0, #7
 800b7c6:	f7ff fdf1 	bl	800b3ac <SX126xSetOperatingMode>
}
 800b7ca:	46c0      	nop			@ (mov r8, r8)
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <SX126xSetTxContinuousWave>:

void SX126xSetTxContinuousWave(void){
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSWAVE, 0, 0);
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	20d1      	movs	r0, #209	@ 0xd1
 800b7da:	f000 fd0d 	bl	800c1f8 <SX126xWriteCommand>
}
 800b7de:	46c0      	nop			@ (mov r8, r8)
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <SX126xSetStopRxTimerOnPreambleDetect>:

void SX126xSetTxInfinitePreamble(void){
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0);
}

void SX126xSetStopRxTimerOnPreambleDetect(bool enable){
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	0002      	movs	r2, r0
 800b7ec:	1dfb      	adds	r3, r7, #7
 800b7ee:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_STOPRXTIMERONPREAMBLE, (uint8_t *)&enable, 1);
 800b7f0:	1dfb      	adds	r3, r7, #7
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	0019      	movs	r1, r3
 800b7f6:	209f      	movs	r0, #159	@ 0x9f
 800b7f8:	f000 fcfe 	bl	800c1f8 <SX126xWriteCommand>
}
 800b7fc:	46c0      	nop			@ (mov r8, r8)
 800b7fe:	46bd      	mov	sp, r7
 800b800:	b002      	add	sp, #8
 800b802:	bd80      	pop	{r7, pc}

0800b804 <SX126xSetLoRaSymbNumTimeout>:

void SX126xSetLoRaSymbNumTimeout(uint8_t SymbNum){
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	0002      	movs	r2, r0
 800b80c:	1dfb      	adds	r3, r7, #7
 800b80e:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_LORASYMBTIMEOUT, &SymbNum, 1);
 800b810:	1dfb      	adds	r3, r7, #7
 800b812:	2201      	movs	r2, #1
 800b814:	0019      	movs	r1, r3
 800b816:	20a0      	movs	r0, #160	@ 0xa0
 800b818:	f000 fcee 	bl	800c1f8 <SX126xWriteCommand>
}
 800b81c:	46c0      	nop			@ (mov r8, r8)
 800b81e:	46bd      	mov	sp, r7
 800b820:	b002      	add	sp, #8
 800b822:	bd80      	pop	{r7, pc}

0800b824 <SX126xSetRegulatorMode>:

void SX126xSetRegulatorMode(RadioRegulatorMode_t mode){
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	0002      	movs	r2, r0
 800b82c:	1dfb      	adds	r3, r7, #7
 800b82e:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_REGULATORMODE, (uint8_t *)&mode, 1);
 800b830:	1dfb      	adds	r3, r7, #7
 800b832:	2201      	movs	r2, #1
 800b834:	0019      	movs	r1, r3
 800b836:	2096      	movs	r0, #150	@ 0x96
 800b838:	f000 fcde 	bl	800c1f8 <SX126xWriteCommand>
}
 800b83c:	46c0      	nop			@ (mov r8, r8)
 800b83e:	46bd      	mov	sp, r7
 800b840:	b002      	add	sp, #8
 800b842:	bd80      	pop	{r7, pc}

0800b844 <SX126xCalibrateImage>:

void SX126xCalibrate(CalibrationParams_t calibParam){
	SX126xWriteCommand(RADIO_CALIBRATE, (uint8_t *)&calibParam, 1);
}

void SX126xCalibrateImage(uint32_t freq){
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	uint8_t calFreq[2];

	if (freq > 900000000){
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a22      	ldr	r2, [pc, #136]	@ (800b8d8 <SX126xCalibrateImage+0x94>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d907      	bls.n	800b864 <SX126xCalibrateImage+0x20>
		calFreq[0] = 0xE1;
 800b854:	210c      	movs	r1, #12
 800b856:	187b      	adds	r3, r7, r1
 800b858:	22e1      	movs	r2, #225	@ 0xe1
 800b85a:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xE9;
 800b85c:	187b      	adds	r3, r7, r1
 800b85e:	22e9      	movs	r2, #233	@ 0xe9
 800b860:	705a      	strb	r2, [r3, #1]
 800b862:	e02e      	b.n	800b8c2 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 850000000){
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a1d      	ldr	r2, [pc, #116]	@ (800b8dc <SX126xCalibrateImage+0x98>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d907      	bls.n	800b87c <SX126xCalibrateImage+0x38>
		calFreq[0] = 0xD7;
 800b86c:	210c      	movs	r1, #12
 800b86e:	187b      	adds	r3, r7, r1
 800b870:	22d7      	movs	r2, #215	@ 0xd7
 800b872:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xDB;
 800b874:	187b      	adds	r3, r7, r1
 800b876:	22db      	movs	r2, #219	@ 0xdb
 800b878:	705a      	strb	r2, [r3, #1]
 800b87a:	e022      	b.n	800b8c2 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 770000000){
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4a18      	ldr	r2, [pc, #96]	@ (800b8e0 <SX126xCalibrateImage+0x9c>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d907      	bls.n	800b894 <SX126xCalibrateImage+0x50>
		calFreq[0] = 0xC1;
 800b884:	210c      	movs	r1, #12
 800b886:	187b      	adds	r3, r7, r1
 800b888:	22c1      	movs	r2, #193	@ 0xc1
 800b88a:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xC5;
 800b88c:	187b      	adds	r3, r7, r1
 800b88e:	22c5      	movs	r2, #197	@ 0xc5
 800b890:	705a      	strb	r2, [r3, #1]
 800b892:	e016      	b.n	800b8c2 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 460000000){
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	4a13      	ldr	r2, [pc, #76]	@ (800b8e4 <SX126xCalibrateImage+0xa0>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d907      	bls.n	800b8ac <SX126xCalibrateImage+0x68>
		calFreq[0] = 0x75;
 800b89c:	210c      	movs	r1, #12
 800b89e:	187b      	adds	r3, r7, r1
 800b8a0:	2275      	movs	r2, #117	@ 0x75
 800b8a2:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0x81;
 800b8a4:	187b      	adds	r3, r7, r1
 800b8a6:	2281      	movs	r2, #129	@ 0x81
 800b8a8:	705a      	strb	r2, [r3, #1]
 800b8aa:	e00a      	b.n	800b8c2 <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 425000000){
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a0e      	ldr	r2, [pc, #56]	@ (800b8e8 <SX126xCalibrateImage+0xa4>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d906      	bls.n	800b8c2 <SX126xCalibrateImage+0x7e>
		calFreq[0] = 0x6B;
 800b8b4:	210c      	movs	r1, #12
 800b8b6:	187b      	adds	r3, r7, r1
 800b8b8:	226b      	movs	r2, #107	@ 0x6b
 800b8ba:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0x6F;
 800b8bc:	187b      	adds	r3, r7, r1
 800b8be:	226f      	movs	r2, #111	@ 0x6f
 800b8c0:	705a      	strb	r2, [r3, #1]
	}
	SX126xWriteCommand(RADIO_CALIBRATEIMAGE, calFreq, 2);
 800b8c2:	230c      	movs	r3, #12
 800b8c4:	18fb      	adds	r3, r7, r3
 800b8c6:	2202      	movs	r2, #2
 800b8c8:	0019      	movs	r1, r3
 800b8ca:	2098      	movs	r0, #152	@ 0x98
 800b8cc:	f000 fc94 	bl	800c1f8 <SX126xWriteCommand>
}
 800b8d0:	46c0      	nop			@ (mov r8, r8)
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	b004      	add	sp, #16
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	35a4e900 	.word	0x35a4e900
 800b8dc:	32a9f880 	.word	0x32a9f880
 800b8e0:	2de54480 	.word	0x2de54480
 800b8e4:	1b6b0b00 	.word	0x1b6b0b00
 800b8e8:	1954fc40 	.word	0x1954fc40

0800b8ec <SX126xSetPaConfig>:

void SX126xSetPaConfig(uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut){
 800b8ec:	b5b0      	push	{r4, r5, r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	0005      	movs	r5, r0
 800b8f4:	000c      	movs	r4, r1
 800b8f6:	0010      	movs	r0, r2
 800b8f8:	0019      	movs	r1, r3
 800b8fa:	1dfb      	adds	r3, r7, #7
 800b8fc:	1c2a      	adds	r2, r5, #0
 800b8fe:	701a      	strb	r2, [r3, #0]
 800b900:	1dbb      	adds	r3, r7, #6
 800b902:	1c22      	adds	r2, r4, #0
 800b904:	701a      	strb	r2, [r3, #0]
 800b906:	1d7b      	adds	r3, r7, #5
 800b908:	1c02      	adds	r2, r0, #0
 800b90a:	701a      	strb	r2, [r3, #0]
 800b90c:	1d3b      	adds	r3, r7, #4
 800b90e:	1c0a      	adds	r2, r1, #0
 800b910:	701a      	strb	r2, [r3, #0]
	uint8_t buf[4];

	buf[0] = paDutyCycle;
 800b912:	210c      	movs	r1, #12
 800b914:	187b      	adds	r3, r7, r1
 800b916:	1dfa      	adds	r2, r7, #7
 800b918:	7812      	ldrb	r2, [r2, #0]
 800b91a:	701a      	strb	r2, [r3, #0]
	buf[1] = hpMax;
 800b91c:	187b      	adds	r3, r7, r1
 800b91e:	1dba      	adds	r2, r7, #6
 800b920:	7812      	ldrb	r2, [r2, #0]
 800b922:	705a      	strb	r2, [r3, #1]
	buf[2] = deviceSel;
 800b924:	187b      	adds	r3, r7, r1
 800b926:	1d7a      	adds	r2, r7, #5
 800b928:	7812      	ldrb	r2, [r2, #0]
 800b92a:	709a      	strb	r2, [r3, #2]
	buf[3] = paLut;
 800b92c:	187b      	adds	r3, r7, r1
 800b92e:	1d3a      	adds	r2, r7, #4
 800b930:	7812      	ldrb	r2, [r2, #0]
 800b932:	70da      	strb	r2, [r3, #3]
	SX126xWriteCommand(RADIO_SET_PACONFIG, buf, 4);
 800b934:	187b      	adds	r3, r7, r1
 800b936:	2204      	movs	r2, #4
 800b938:	0019      	movs	r1, r3
 800b93a:	2095      	movs	r0, #149	@ 0x95
 800b93c:	f000 fc5c 	bl	800c1f8 <SX126xWriteCommand>
}
 800b940:	46c0      	nop			@ (mov r8, r8)
 800b942:	46bd      	mov	sp, r7
 800b944:	b004      	add	sp, #16
 800b946:	bdb0      	pop	{r4, r5, r7, pc}

0800b948 <SX126xSetDioIrqParams>:

void SX126xSetRxTxFallbackMode(uint8_t fallbackMode){
	SX126xWriteCommand(RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1);
}

void SX126xSetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask){
 800b948:	b5b0      	push	{r4, r5, r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	0005      	movs	r5, r0
 800b950:	000c      	movs	r4, r1
 800b952:	0010      	movs	r0, r2
 800b954:	0019      	movs	r1, r3
 800b956:	1dbb      	adds	r3, r7, #6
 800b958:	1c2a      	adds	r2, r5, #0
 800b95a:	801a      	strh	r2, [r3, #0]
 800b95c:	1d3b      	adds	r3, r7, #4
 800b95e:	1c22      	adds	r2, r4, #0
 800b960:	801a      	strh	r2, [r3, #0]
 800b962:	1cbb      	adds	r3, r7, #2
 800b964:	1c02      	adds	r2, r0, #0
 800b966:	801a      	strh	r2, [r3, #0]
 800b968:	003b      	movs	r3, r7
 800b96a:	1c0a      	adds	r2, r1, #0
 800b96c:	801a      	strh	r2, [r3, #0]
	uint8_t buf[8];

	buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 800b96e:	1dbb      	adds	r3, r7, #6
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	0a1b      	lsrs	r3, r3, #8
 800b974:	b29b      	uxth	r3, r3
 800b976:	b2da      	uxtb	r2, r3
 800b978:	2108      	movs	r1, #8
 800b97a:	187b      	adds	r3, r7, r1
 800b97c:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(irqMask & 0x00FF);
 800b97e:	1dbb      	adds	r3, r7, #6
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	b2da      	uxtb	r2, r3
 800b984:	187b      	adds	r3, r7, r1
 800b986:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)((dio1Mask >> 8) & 0x00FF);
 800b988:	1d3b      	adds	r3, r7, #4
 800b98a:	881b      	ldrh	r3, [r3, #0]
 800b98c:	0a1b      	lsrs	r3, r3, #8
 800b98e:	b29b      	uxth	r3, r3
 800b990:	b2da      	uxtb	r2, r3
 800b992:	187b      	adds	r3, r7, r1
 800b994:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)(dio1Mask & 0x00FF);
 800b996:	1d3b      	adds	r3, r7, #4
 800b998:	881b      	ldrh	r3, [r3, #0]
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	187b      	adds	r3, r7, r1
 800b99e:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((dio2Mask >> 8) & 0x00FF);
 800b9a0:	1cbb      	adds	r3, r7, #2
 800b9a2:	881b      	ldrh	r3, [r3, #0]
 800b9a4:	0a1b      	lsrs	r3, r3, #8
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	187b      	adds	r3, r7, r1
 800b9ac:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)(dio2Mask & 0x00FF);
 800b9ae:	1cbb      	adds	r3, r7, #2
 800b9b0:	881b      	ldrh	r3, [r3, #0]
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	187b      	adds	r3, r7, r1
 800b9b6:	715a      	strb	r2, [r3, #5]
	buf[6] = (uint8_t)((dio3Mask >> 8) & 0x00FF);
 800b9b8:	003b      	movs	r3, r7
 800b9ba:	881b      	ldrh	r3, [r3, #0]
 800b9bc:	0a1b      	lsrs	r3, r3, #8
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	187b      	adds	r3, r7, r1
 800b9c4:	719a      	strb	r2, [r3, #6]
	buf[7] = (uint8_t)(dio3Mask & 0x00FF);
 800b9c6:	003b      	movs	r3, r7
 800b9c8:	881b      	ldrh	r3, [r3, #0]
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	187b      	adds	r3, r7, r1
 800b9ce:	71da      	strb	r2, [r3, #7]
	SX126xWriteCommand(RADIO_CFG_DIOIRQ, buf, 8);
 800b9d0:	187b      	adds	r3, r7, r1
 800b9d2:	2208      	movs	r2, #8
 800b9d4:	0019      	movs	r1, r3
 800b9d6:	2008      	movs	r0, #8
 800b9d8:	f000 fc0e 	bl	800c1f8 <SX126xWriteCommand>
}
 800b9dc:	46c0      	nop			@ (mov r8, r8)
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	b004      	add	sp, #16
 800b9e2:	bdb0      	pop	{r4, r5, r7, pc}

0800b9e4 <SX126xGetIrqStatus>:

uint16_t SX126xGetIrqStatus(void){
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
	uint8_t irqStatus[2];

	SX126xReadCommand(RADIO_GET_IRQSTATUS, irqStatus, 2);
 800b9ea:	1d3b      	adds	r3, r7, #4
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	0019      	movs	r1, r3
 800b9f0:	2012      	movs	r0, #18
 800b9f2:	f000 fc39 	bl	800c268 <SX126xReadCommand>
	return (irqStatus[0] << 8) | irqStatus[1];
 800b9f6:	1d3b      	adds	r3, r7, #4
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	021b      	lsls	r3, r3, #8
 800b9fc:	b21a      	sxth	r2, r3
 800b9fe:	1d3b      	adds	r3, r7, #4
 800ba00:	785b      	ldrb	r3, [r3, #1]
 800ba02:	b21b      	sxth	r3, r3
 800ba04:	4313      	orrs	r3, r2
 800ba06:	b21b      	sxth	r3, r3
 800ba08:	b29b      	uxth	r3, r3
}
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	b002      	add	sp, #8
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <SX126xSetDio2AsRfSwitchCtrl>:

void SX126xSetDio2AsRfSwitchCtrl(uint8_t enable){
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b082      	sub	sp, #8
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	0002      	movs	r2, r0
 800ba1a:	1dfb      	adds	r3, r7, #7
 800ba1c:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_RFSWITCHMODE, &enable, 1);
 800ba1e:	1dfb      	adds	r3, r7, #7
 800ba20:	2201      	movs	r2, #1
 800ba22:	0019      	movs	r1, r3
 800ba24:	209d      	movs	r0, #157	@ 0x9d
 800ba26:	f000 fbe7 	bl	800c1f8 <SX126xWriteCommand>
}
 800ba2a:	46c0      	nop			@ (mov r8, r8)
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	b002      	add	sp, #8
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <SX126xSetRfFrequency>:
	buf[3] = (uint8_t)(timeout & 0xFF);

	SX126xWriteCommand(RADIO_SET_TCXOMODE, buf, 4);
}

void SX126xSetRfFrequency(uint32_t frequency){
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
	uint8_t buf[4];
	uint32_t freq = 0;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	60fb      	str	r3, [r7, #12]

	if (ImageCalibrated == false){
 800ba40:	4b1d      	ldr	r3, [pc, #116]	@ (800bab8 <SX126xSetRfFrequency+0x84>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2201      	movs	r2, #1
 800ba46:	4053      	eors	r3, r2
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d006      	beq.n	800ba5c <SX126xSetRfFrequency+0x28>
		SX126xCalibrateImage(frequency);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	0018      	movs	r0, r3
 800ba52:	f7ff fef7 	bl	800b844 <SX126xCalibrateImage>
		ImageCalibrated = true;
 800ba56:	4b18      	ldr	r3, [pc, #96]	@ (800bab8 <SX126xSetRfFrequency+0x84>)
 800ba58:	2201      	movs	r2, #1
 800ba5a:	701a      	strb	r2, [r3, #0]
	}

	freq = (uint32_t)((double)frequency / (double)FREQ_STEP);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f7f6 fcb7 	bl	80023d0 <__aeabi_ui2d>
 800ba62:	2200      	movs	r2, #0
 800ba64:	4b15      	ldr	r3, [pc, #84]	@ (800babc <SX126xSetRfFrequency+0x88>)
 800ba66:	f7f5 f9a1 	bl	8000dac <__aeabi_ddiv>
 800ba6a:	0002      	movs	r2, r0
 800ba6c:	000b      	movs	r3, r1
 800ba6e:	0010      	movs	r0, r2
 800ba70:	0019      	movs	r1, r3
 800ba72:	f7f4 fd4d 	bl	8000510 <__aeabi_d2uiz>
 800ba76:	0003      	movs	r3, r0
 800ba78:	60fb      	str	r3, [r7, #12]
	buf[0] = (uint8_t)((freq >> 24) & 0xFF);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	0e1b      	lsrs	r3, r3, #24
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	2108      	movs	r1, #8
 800ba82:	187b      	adds	r3, r7, r1
 800ba84:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((freq >> 16) & 0xFF);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	0c1b      	lsrs	r3, r3, #16
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	187b      	adds	r3, r7, r1
 800ba8e:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)((freq >> 8) & 0xFF);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	0a1b      	lsrs	r3, r3, #8
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	187b      	adds	r3, r7, r1
 800ba98:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)(freq & 0xFF);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	187b      	adds	r3, r7, r1
 800baa0:	70da      	strb	r2, [r3, #3]
	SX126xWriteCommand(RADIO_SET_RFFREQUENCY, buf, 4);
 800baa2:	187b      	adds	r3, r7, r1
 800baa4:	2204      	movs	r2, #4
 800baa6:	0019      	movs	r1, r3
 800baa8:	2086      	movs	r0, #134	@ 0x86
 800baaa:	f000 fba5 	bl	800c1f8 <SX126xWriteCommand>
}
 800baae:	46c0      	nop			@ (mov r8, r8)
 800bab0:	46bd      	mov	sp, r7
 800bab2:	b004      	add	sp, #16
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	46c0      	nop			@ (mov r8, r8)
 800bab8:	20000540 	.word	0x20000540
 800babc:	3fee8480 	.word	0x3fee8480

0800bac0 <SX126xSetPacketType>:

void SX126xSetPacketType(RadioPacketTypes_t packetType){
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	0002      	movs	r2, r0
 800bac8:	1dfb      	adds	r3, r7, #7
 800baca:	701a      	strb	r2, [r3, #0]
	// Save packet type internally to avoid questioning the radio
	PacketType = packetType;
 800bacc:	1dfb      	adds	r3, r7, #7
 800bace:	781a      	ldrb	r2, [r3, #0]
 800bad0:	4b05      	ldr	r3, [pc, #20]	@ (800bae8 <SX126xSetPacketType+0x28>)
 800bad2:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_PACKETTYPE, (uint8_t *)&packetType, 1);
 800bad4:	1dfb      	adds	r3, r7, #7
 800bad6:	2201      	movs	r2, #1
 800bad8:	0019      	movs	r1, r3
 800bada:	208a      	movs	r0, #138	@ 0x8a
 800badc:	f000 fb8c 	bl	800c1f8 <SX126xWriteCommand>
}
 800bae0:	46c0      	nop			@ (mov r8, r8)
 800bae2:	46bd      	mov	sp, r7
 800bae4:	b002      	add	sp, #8
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	20000539 	.word	0x20000539

0800baec <SX126xGetPacketType>:

RadioPacketTypes_t SX126xGetPacketType(void){
 800baec:	b580      	push	{r7, lr}
 800baee:	af00      	add	r7, sp, #0
	return PacketType;
 800baf0:	4b02      	ldr	r3, [pc, #8]	@ (800bafc <SX126xGetPacketType+0x10>)
 800baf2:	781b      	ldrb	r3, [r3, #0]
}
 800baf4:	0018      	movs	r0, r3
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	46c0      	nop			@ (mov r8, r8)
 800bafc:	20000539 	.word	0x20000539

0800bb00 <SX126xSetTxParams>:

void SX126xSetTxParams(int8_t power, RadioRampTimes_t rampTime){
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	0002      	movs	r2, r0
 800bb08:	1dfb      	adds	r3, r7, #7
 800bb0a:	701a      	strb	r2, [r3, #0]
 800bb0c:	1dbb      	adds	r3, r7, #6
 800bb0e:	1c0a      	adds	r2, r1, #0
 800bb10:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];

	if (SX126xGetPaSelect(0) == SX1261){
 800bb12:	2000      	movs	r0, #0
 800bb14:	f000 fd2d 	bl	800c572 <SX126xGetPaSelect>
 800bb18:	0003      	movs	r3, r0
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d128      	bne.n	800bb70 <SX126xSetTxParams+0x70>
		if (power == 15){
 800bb1e:	1dfb      	adds	r3, r7, #7
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	b25b      	sxtb	r3, r3
 800bb24:	2b0f      	cmp	r3, #15
 800bb26:	d106      	bne.n	800bb36 <SX126xSetTxParams+0x36>
			SX126xSetPaConfig(0x06, 0x00, 0x01, 0x01);
 800bb28:	2301      	movs	r3, #1
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	2006      	movs	r0, #6
 800bb30:	f7ff fedc 	bl	800b8ec <SX126xSetPaConfig>
 800bb34:	e005      	b.n	800bb42 <SX126xSetTxParams+0x42>
		}
		else{
			SX126xSetPaConfig(0x04, 0x00, 0x01, 0x01);
 800bb36:	2301      	movs	r3, #1
 800bb38:	2201      	movs	r2, #1
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	2004      	movs	r0, #4
 800bb3e:	f7ff fed5 	bl	800b8ec <SX126xSetPaConfig>
		}
		if (power >= 14){
 800bb42:	1dfb      	adds	r3, r7, #7
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	b25b      	sxtb	r3, r3
 800bb48:	2b0d      	cmp	r3, #13
 800bb4a:	dd03      	ble.n	800bb54 <SX126xSetTxParams+0x54>
			power = 14;
 800bb4c:	1dfb      	adds	r3, r7, #7
 800bb4e:	220e      	movs	r2, #14
 800bb50:	701a      	strb	r2, [r3, #0]
 800bb52:	e007      	b.n	800bb64 <SX126xSetTxParams+0x64>
		}
		else if (power < -17){
 800bb54:	1dfb      	adds	r3, r7, #7
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	b25b      	sxtb	r3, r3
 800bb5a:	3311      	adds	r3, #17
 800bb5c:	da02      	bge.n	800bb64 <SX126xSetTxParams+0x64>
			power = -17;
 800bb5e:	1dfb      	adds	r3, r7, #7
 800bb60:	22ef      	movs	r2, #239	@ 0xef
 800bb62:	701a      	strb	r2, [r3, #0]
		}
		SX126xWriteRegister(REG_OCP, 0x18); // current max is 80 mA for the whole device
 800bb64:	4b21      	ldr	r3, [pc, #132]	@ (800bbec <SX126xSetTxParams+0xec>)
 800bb66:	2118      	movs	r1, #24
 800bb68:	0018      	movs	r0, r3
 800bb6a:	f000 fbfd 	bl	800c368 <SX126xWriteRegister>
 800bb6e:	e029      	b.n	800bbc4 <SX126xSetTxParams+0xc4>
	}
	else {
		// WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
		// RegTxClampConfig = @address 0x08D8
		SX126xWriteRegister(0x08D8, SX126xReadRegister(0x08D8) | (0x0F << 1));
 800bb70:	4b1f      	ldr	r3, [pc, #124]	@ (800bbf0 <SX126xSetTxParams+0xf0>)
 800bb72:	0018      	movs	r0, r3
 800bb74:	f000 fc52 	bl	800c41c <SX126xReadRegister>
 800bb78:	0003      	movs	r3, r0
 800bb7a:	001a      	movs	r2, r3
 800bb7c:	231e      	movs	r3, #30
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	4a1b      	ldr	r2, [pc, #108]	@ (800bbf0 <SX126xSetTxParams+0xf0>)
 800bb84:	0019      	movs	r1, r3
 800bb86:	0010      	movs	r0, r2
 800bb88:	f000 fbee 	bl	800c368 <SX126xWriteRegister>
		// WORKAROUND END
		SX126xSetPaConfig(0x04, 0x07, 0x00, 0x01);
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	2200      	movs	r2, #0
 800bb90:	2107      	movs	r1, #7
 800bb92:	2004      	movs	r0, #4
 800bb94:	f7ff feaa 	bl	800b8ec <SX126xSetPaConfig>
		if (power > 22){
 800bb98:	1dfb      	adds	r3, r7, #7
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	b25b      	sxtb	r3, r3
 800bb9e:	2b16      	cmp	r3, #22
 800bba0:	dd03      	ble.n	800bbaa <SX126xSetTxParams+0xaa>
			power = 22;
 800bba2:	1dfb      	adds	r3, r7, #7
 800bba4:	2216      	movs	r2, #22
 800bba6:	701a      	strb	r2, [r3, #0]
 800bba8:	e007      	b.n	800bbba <SX126xSetTxParams+0xba>
		}
		else if (power < -9){
 800bbaa:	1dfb      	adds	r3, r7, #7
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	b25b      	sxtb	r3, r3
 800bbb0:	3309      	adds	r3, #9
 800bbb2:	da02      	bge.n	800bbba <SX126xSetTxParams+0xba>
			power = -9;
 800bbb4:	1dfb      	adds	r3, r7, #7
 800bbb6:	22f7      	movs	r2, #247	@ 0xf7
 800bbb8:	701a      	strb	r2, [r3, #0]
		}
		SX126xWriteRegister(REG_OCP, 0x38); // current max 160mA for the whole device
 800bbba:	4b0c      	ldr	r3, [pc, #48]	@ (800bbec <SX126xSetTxParams+0xec>)
 800bbbc:	2138      	movs	r1, #56	@ 0x38
 800bbbe:	0018      	movs	r0, r3
 800bbc0:	f000 fbd2 	bl	800c368 <SX126xWriteRegister>
	}
	buf[0] = power;
 800bbc4:	1dfb      	adds	r3, r7, #7
 800bbc6:	781a      	ldrb	r2, [r3, #0]
 800bbc8:	210c      	movs	r1, #12
 800bbca:	187b      	adds	r3, r7, r1
 800bbcc:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)rampTime;
 800bbce:	187b      	adds	r3, r7, r1
 800bbd0:	1dba      	adds	r2, r7, #6
 800bbd2:	7812      	ldrb	r2, [r2, #0]
 800bbd4:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800bbd6:	187b      	adds	r3, r7, r1
 800bbd8:	2202      	movs	r2, #2
 800bbda:	0019      	movs	r1, r3
 800bbdc:	208e      	movs	r0, #142	@ 0x8e
 800bbde:	f000 fb0b 	bl	800c1f8 <SX126xWriteCommand>
}
 800bbe2:	46c0      	nop			@ (mov r8, r8)
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	b004      	add	sp, #16
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	46c0      	nop			@ (mov r8, r8)
 800bbec:	000008e7 	.word	0x000008e7
 800bbf0:	000008d8 	.word	0x000008d8

0800bbf4 <SX126xSetModulationParams>:

void SX126xSetModulationParams(ModulationParams_t *modulationParams){
 800bbf4:	b5b0      	push	{r4, r5, r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint32_t tempVal = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	617b      	str	r3, [r7, #20]
	uint8_t buf[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800bc00:	2308      	movs	r3, #8
 800bc02:	18fb      	adds	r3, r7, r3
 800bc04:	4a49      	ldr	r2, [pc, #292]	@ (800bd2c <SX126xSetModulationParams+0x138>)
 800bc06:	ca03      	ldmia	r2!, {r0, r1}
 800bc08:	c303      	stmia	r3!, {r0, r1}

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != modulationParams->PacketType){
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	781a      	ldrb	r2, [r3, #0]
 800bc0e:	4b48      	ldr	r3, [pc, #288]	@ (800bd30 <SX126xSetModulationParams+0x13c>)
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d004      	beq.n	800bc20 <SX126xSetModulationParams+0x2c>
		SX126xSetPacketType(modulationParams->PacketType);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	0018      	movs	r0, r3
 800bc1c:	f7ff ff50 	bl	800bac0 <SX126xSetPacketType>
	}

	switch (modulationParams->PacketType){
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <SX126xSetModulationParams+0x3a>
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d05e      	beq.n	800bcea <SX126xSetModulationParams+0xf6>

			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
		break;
		case PACKET_TYPE_NONE:
		default:
		return;
 800bc2c:	e07b      	b.n	800bd26 <SX126xSetModulationParams+0x132>
			n = 8;
 800bc2e:	2513      	movs	r5, #19
 800bc30:	197b      	adds	r3, r7, r5
 800bc32:	2208      	movs	r2, #8
 800bc34:	701a      	strb	r2, [r3, #0]
			tempVal = (uint32_t)(32 * ((double)XTAL_FREQ / (double)modulationParams->Params.Gfsk.BitRate));
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	0018      	movs	r0, r3
 800bc3c:	f7f6 fbc8 	bl	80023d0 <__aeabi_ui2d>
 800bc40:	0002      	movs	r2, r0
 800bc42:	000b      	movs	r3, r1
 800bc44:	2000      	movs	r0, #0
 800bc46:	493b      	ldr	r1, [pc, #236]	@ (800bd34 <SX126xSetModulationParams+0x140>)
 800bc48:	f7f5 f8b0 	bl	8000dac <__aeabi_ddiv>
 800bc4c:	0002      	movs	r2, r0
 800bc4e:	000b      	movs	r3, r1
 800bc50:	0010      	movs	r0, r2
 800bc52:	0019      	movs	r1, r3
 800bc54:	2200      	movs	r2, #0
 800bc56:	4b38      	ldr	r3, [pc, #224]	@ (800bd38 <SX126xSetModulationParams+0x144>)
 800bc58:	f7f5 fcec 	bl	8001634 <__aeabi_dmul>
 800bc5c:	0002      	movs	r2, r0
 800bc5e:	000b      	movs	r3, r1
 800bc60:	0010      	movs	r0, r2
 800bc62:	0019      	movs	r1, r3
 800bc64:	f7f4 fc54 	bl	8000510 <__aeabi_d2uiz>
 800bc68:	0003      	movs	r3, r0
 800bc6a:	617b      	str	r3, [r7, #20]
			buf[0] = (tempVal >> 16) & 0xFF;
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	0c1b      	lsrs	r3, r3, #16
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	2408      	movs	r4, #8
 800bc74:	193b      	adds	r3, r7, r4
 800bc76:	701a      	strb	r2, [r3, #0]
			buf[1] = (tempVal >> 8) & 0xFF;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	0a1b      	lsrs	r3, r3, #8
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	193b      	adds	r3, r7, r4
 800bc80:	705a      	strb	r2, [r3, #1]
			buf[2] = tempVal & 0xFF;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	b2da      	uxtb	r2, r3
 800bc86:	193b      	adds	r3, r7, r4
 800bc88:	709a      	strb	r2, [r3, #2]
			buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	7b1a      	ldrb	r2, [r3, #12]
 800bc8e:	193b      	adds	r3, r7, r4
 800bc90:	70da      	strb	r2, [r3, #3]
			buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	7b5a      	ldrb	r2, [r3, #13]
 800bc96:	193b      	adds	r3, r7, r4
 800bc98:	711a      	strb	r2, [r3, #4]
			tempVal = (uint32_t)((double)modulationParams->Params.Gfsk.Fdev / (double)FREQ_STEP);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	0018      	movs	r0, r3
 800bca0:	f7f6 fb96 	bl	80023d0 <__aeabi_ui2d>
 800bca4:	2200      	movs	r2, #0
 800bca6:	4b25      	ldr	r3, [pc, #148]	@ (800bd3c <SX126xSetModulationParams+0x148>)
 800bca8:	f7f5 f880 	bl	8000dac <__aeabi_ddiv>
 800bcac:	0002      	movs	r2, r0
 800bcae:	000b      	movs	r3, r1
 800bcb0:	0010      	movs	r0, r2
 800bcb2:	0019      	movs	r1, r3
 800bcb4:	f7f4 fc2c 	bl	8000510 <__aeabi_d2uiz>
 800bcb8:	0003      	movs	r3, r0
 800bcba:	617b      	str	r3, [r7, #20]
			buf[5] = (tempVal >> 16) & 0xFF;
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	0c1b      	lsrs	r3, r3, #16
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	193b      	adds	r3, r7, r4
 800bcc4:	715a      	strb	r2, [r3, #5]
			buf[6] = (tempVal >> 8) & 0xFF;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	0a1b      	lsrs	r3, r3, #8
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	193b      	adds	r3, r7, r4
 800bcce:	719a      	strb	r2, [r3, #6]
			buf[7] = (tempVal & 0xFF);
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	193b      	adds	r3, r7, r4
 800bcd6:	71da      	strb	r2, [r3, #7]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 800bcd8:	197b      	adds	r3, r7, r5
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	193b      	adds	r3, r7, r4
 800bce0:	0019      	movs	r1, r3
 800bce2:	208b      	movs	r0, #139	@ 0x8b
 800bce4:	f000 fa88 	bl	800c1f8 <SX126xWriteCommand>
		break;
 800bce8:	e01d      	b.n	800bd26 <SX126xSetModulationParams+0x132>
			n = 4;
 800bcea:	2013      	movs	r0, #19
 800bcec:	183b      	adds	r3, r7, r0
 800bcee:	2204      	movs	r2, #4
 800bcf0:	701a      	strb	r2, [r3, #0]
			buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	7c1a      	ldrb	r2, [r3, #16]
 800bcf6:	2108      	movs	r1, #8
 800bcf8:	187b      	adds	r3, r7, r1
 800bcfa:	701a      	strb	r2, [r3, #0]
			buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	7c5a      	ldrb	r2, [r3, #17]
 800bd00:	187b      	adds	r3, r7, r1
 800bd02:	705a      	strb	r2, [r3, #1]
			buf[2] = modulationParams->Params.LoRa.CodingRate;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	7c9a      	ldrb	r2, [r3, #18]
 800bd08:	187b      	adds	r3, r7, r1
 800bd0a:	709a      	strb	r2, [r3, #2]
			buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	7cda      	ldrb	r2, [r3, #19]
 800bd10:	187b      	adds	r3, r7, r1
 800bd12:	70da      	strb	r2, [r3, #3]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 800bd14:	183b      	adds	r3, r7, r0
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	187b      	adds	r3, r7, r1
 800bd1c:	0019      	movs	r1, r3
 800bd1e:	208b      	movs	r0, #139	@ 0x8b
 800bd20:	f000 fa6a 	bl	800c1f8 <SX126xWriteCommand>
		break;
 800bd24:	46c0      	nop			@ (mov r8, r8)
	}
}
 800bd26:	46bd      	mov	sp, r7
 800bd28:	b006      	add	sp, #24
 800bd2a:	bdb0      	pop	{r4, r5, r7, pc}
 800bd2c:	0800d73c 	.word	0x0800d73c
 800bd30:	20000539 	.word	0x20000539
 800bd34:	417e8480 	.word	0x417e8480
 800bd38:	40400000 	.word	0x40400000
 800bd3c:	3fee8480 	.word	0x3fee8480

0800bd40 <SX126xSetPacketParams>:

void SX126xSetPacketParams(PacketParams_t *packetParams){
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint8_t crcVal = 0;
 800bd48:	2316      	movs	r3, #22
 800bd4a:	18fb      	adds	r3, r7, r3
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	701a      	strb	r2, [r3, #0]
	uint8_t buf[9] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800bd50:	230c      	movs	r3, #12
 800bd52:	18fb      	adds	r3, r7, r3
 800bd54:	4a4d      	ldr	r2, [pc, #308]	@ (800be8c <SX126xSetPacketParams+0x14c>)
 800bd56:	ca03      	ldmia	r2!, {r0, r1}
 800bd58:	c303      	stmia	r3!, {r0, r1}
 800bd5a:	7812      	ldrb	r2, [r2, #0]
 800bd5c:	701a      	strb	r2, [r3, #0]

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != packetParams->PacketType){
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	781a      	ldrb	r2, [r3, #0]
 800bd62:	4b4b      	ldr	r3, [pc, #300]	@ (800be90 <SX126xSetPacketParams+0x150>)
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d004      	beq.n	800bd74 <SX126xSetPacketParams+0x34>
		SX126xSetPacketType(packetParams->PacketType);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	0018      	movs	r0, r3
 800bd70:	f7ff fea6 	bl	800bac0 <SX126xSetPacketType>
	}

	switch (packetParams->PacketType){
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <SX126xSetPacketParams+0x42>
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d056      	beq.n	800be2e <SX126xSetPacketParams+0xee>
			buf[4] = packetParams->Params.LoRa.CrcMode;
			buf[5] = packetParams->Params.LoRa.InvertIQ;
		break;
		default:
		case PACKET_TYPE_NONE:
		return;
 800bd80:	e081      	b.n	800be86 <SX126xSetPacketParams+0x146>
			if (packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM){
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	7a5b      	ldrb	r3, [r3, #9]
 800bd86:	2bf1      	cmp	r3, #241	@ 0xf1
 800bd88:	d10c      	bne.n	800bda4 <SX126xSetPacketParams+0x64>
				SX126xSetCrcSeed(CRC_IBM_SEED);
 800bd8a:	4b42      	ldr	r3, [pc, #264]	@ (800be94 <SX126xSetPacketParams+0x154>)
 800bd8c:	0018      	movs	r0, r3
 800bd8e:	f7ff fb93 	bl	800b4b8 <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_IBM);
 800bd92:	4b41      	ldr	r3, [pc, #260]	@ (800be98 <SX126xSetPacketParams+0x158>)
 800bd94:	0018      	movs	r0, r3
 800bd96:	f7ff fbb5 	bl	800b504 <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES;
 800bd9a:	2316      	movs	r3, #22
 800bd9c:	18fb      	adds	r3, r7, r3
 800bd9e:	2202      	movs	r2, #2
 800bda0:	701a      	strb	r2, [r3, #0]
 800bda2:	e015      	b.n	800bdd0 <SX126xSetPacketParams+0x90>
			else if (packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT){
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	7a5b      	ldrb	r3, [r3, #9]
 800bda8:	2bf2      	cmp	r3, #242	@ 0xf2
 800bdaa:	d10c      	bne.n	800bdc6 <SX126xSetPacketParams+0x86>
				SX126xSetCrcSeed(CRC_CCITT_SEED);
 800bdac:	4b3b      	ldr	r3, [pc, #236]	@ (800be9c <SX126xSetPacketParams+0x15c>)
 800bdae:	0018      	movs	r0, r3
 800bdb0:	f7ff fb82 	bl	800b4b8 <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_CCITT);
 800bdb4:	4b3a      	ldr	r3, [pc, #232]	@ (800bea0 <SX126xSetPacketParams+0x160>)
 800bdb6:	0018      	movs	r0, r3
 800bdb8:	f7ff fba4 	bl	800b504 <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES_INV;
 800bdbc:	2316      	movs	r3, #22
 800bdbe:	18fb      	adds	r3, r7, r3
 800bdc0:	2206      	movs	r2, #6
 800bdc2:	701a      	strb	r2, [r3, #0]
 800bdc4:	e004      	b.n	800bdd0 <SX126xSetPacketParams+0x90>
				crcVal = packetParams->Params.Gfsk.CrcLength;
 800bdc6:	2316      	movs	r3, #22
 800bdc8:	18fb      	adds	r3, r7, r3
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	7a52      	ldrb	r2, [r2, #9]
 800bdce:	701a      	strb	r2, [r3, #0]
			n = 9;
 800bdd0:	2317      	movs	r3, #23
 800bdd2:	18fb      	adds	r3, r7, r3
 800bdd4:	2209      	movs	r2, #9
 800bdd6:	701a      	strb	r2, [r3, #0]
			buf[0] = (packetParams->Params.Gfsk.PreambleLength >> 8) & 0xFF;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	885b      	ldrh	r3, [r3, #2]
 800bddc:	0a1b      	lsrs	r3, r3, #8
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	210c      	movs	r1, #12
 800bde4:	187b      	adds	r3, r7, r1
 800bde6:	701a      	strb	r2, [r3, #0]
			buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	885b      	ldrh	r3, [r3, #2]
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	187b      	adds	r3, r7, r1
 800bdf0:	705a      	strb	r2, [r3, #1]
			buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	791a      	ldrb	r2, [r3, #4]
 800bdf6:	187b      	adds	r3, r7, r1
 800bdf8:	709a      	strb	r2, [r3, #2]
			buf[3] = (packetParams->Params.Gfsk.SyncWordLength /*<< 3*/); // convert from byte to bit
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	795a      	ldrb	r2, [r3, #5]
 800bdfe:	187b      	adds	r3, r7, r1
 800be00:	70da      	strb	r2, [r3, #3]
			buf[4] = packetParams->Params.Gfsk.AddrComp;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	799a      	ldrb	r2, [r3, #6]
 800be06:	187b      	adds	r3, r7, r1
 800be08:	711a      	strb	r2, [r3, #4]
			buf[5] = packetParams->Params.Gfsk.HeaderType;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	79da      	ldrb	r2, [r3, #7]
 800be0e:	187b      	adds	r3, r7, r1
 800be10:	715a      	strb	r2, [r3, #5]
			buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	7a1a      	ldrb	r2, [r3, #8]
 800be16:	187b      	adds	r3, r7, r1
 800be18:	719a      	strb	r2, [r3, #6]
			buf[7] = crcVal;
 800be1a:	187b      	adds	r3, r7, r1
 800be1c:	2216      	movs	r2, #22
 800be1e:	18ba      	adds	r2, r7, r2
 800be20:	7812      	ldrb	r2, [r2, #0]
 800be22:	71da      	strb	r2, [r3, #7]
			buf[8] = packetParams->Params.Gfsk.DcFree;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7a9a      	ldrb	r2, [r3, #10]
 800be28:	187b      	adds	r3, r7, r1
 800be2a:	721a      	strb	r2, [r3, #8]
		break;
 800be2c:	e021      	b.n	800be72 <SX126xSetPacketParams+0x132>
			n = 6;
 800be2e:	2317      	movs	r3, #23
 800be30:	18fb      	adds	r3, r7, r3
 800be32:	2206      	movs	r2, #6
 800be34:	701a      	strb	r2, [r3, #0]
			buf[0] = (packetParams->Params.LoRa.PreambleLength >> 8) & 0xFF;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	899b      	ldrh	r3, [r3, #12]
 800be3a:	0a1b      	lsrs	r3, r3, #8
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	210c      	movs	r1, #12
 800be42:	187b      	adds	r3, r7, r1
 800be44:	701a      	strb	r2, [r3, #0]
			buf[1] = packetParams->Params.LoRa.PreambleLength;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	899b      	ldrh	r3, [r3, #12]
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	187b      	adds	r3, r7, r1
 800be4e:	705a      	strb	r2, [r3, #1]
			buf[2] = packetParams->Params.LoRa.HeaderType;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	7b9a      	ldrb	r2, [r3, #14]
 800be54:	187b      	adds	r3, r7, r1
 800be56:	709a      	strb	r2, [r3, #2]
			buf[3] = packetParams->Params.LoRa.PayloadLength;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	7bda      	ldrb	r2, [r3, #15]
 800be5c:	187b      	adds	r3, r7, r1
 800be5e:	70da      	strb	r2, [r3, #3]
			buf[4] = packetParams->Params.LoRa.CrcMode;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	7c1a      	ldrb	r2, [r3, #16]
 800be64:	187b      	adds	r3, r7, r1
 800be66:	711a      	strb	r2, [r3, #4]
			buf[5] = packetParams->Params.LoRa.InvertIQ;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	7c5a      	ldrb	r2, [r3, #17]
 800be6c:	187b      	adds	r3, r7, r1
 800be6e:	715a      	strb	r2, [r3, #5]
		break;
 800be70:	46c0      	nop			@ (mov r8, r8)
	}
	SX126xWriteCommand(RADIO_SET_PACKETPARAMS, buf, n);
 800be72:	2317      	movs	r3, #23
 800be74:	18fb      	adds	r3, r7, r3
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	b29a      	uxth	r2, r3
 800be7a:	230c      	movs	r3, #12
 800be7c:	18fb      	adds	r3, r7, r3
 800be7e:	0019      	movs	r1, r3
 800be80:	208c      	movs	r0, #140	@ 0x8c
 800be82:	f000 f9b9 	bl	800c1f8 <SX126xWriteCommand>
}
 800be86:	46bd      	mov	sp, r7
 800be88:	b006      	add	sp, #24
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	0800d744 	.word	0x0800d744
 800be90:	20000539 	.word	0x20000539
 800be94:	0000ffff 	.word	0x0000ffff
 800be98:	00008005 	.word	0x00008005
 800be9c:	00001d0f 	.word	0x00001d0f
 800bea0:	00001021 	.word	0x00001021

0800bea4 <SX126xSetCadParams>:

void SX126xSetCadParams(RadioLoRaCadSymbols_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, RadioCadExitModes_t cadExitMode, uint32_t cadTimeout){
 800bea4:	b5b0      	push	{r4, r5, r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	0005      	movs	r5, r0
 800beac:	000c      	movs	r4, r1
 800beae:	0010      	movs	r0, r2
 800beb0:	0019      	movs	r1, r3
 800beb2:	1dfb      	adds	r3, r7, #7
 800beb4:	1c2a      	adds	r2, r5, #0
 800beb6:	701a      	strb	r2, [r3, #0]
 800beb8:	1dbb      	adds	r3, r7, #6
 800beba:	1c22      	adds	r2, r4, #0
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	1d7b      	adds	r3, r7, #5
 800bec0:	1c02      	adds	r2, r0, #0
 800bec2:	701a      	strb	r2, [r3, #0]
 800bec4:	1d3b      	adds	r3, r7, #4
 800bec6:	1c0a      	adds	r2, r1, #0
 800bec8:	701a      	strb	r2, [r3, #0]
	uint8_t buf[7];

	buf[0] = (uint8_t)cadSymbolNum;
 800beca:	2108      	movs	r1, #8
 800becc:	187b      	adds	r3, r7, r1
 800bece:	1dfa      	adds	r2, r7, #7
 800bed0:	7812      	ldrb	r2, [r2, #0]
 800bed2:	701a      	strb	r2, [r3, #0]
	buf[1] = cadDetPeak;
 800bed4:	187b      	adds	r3, r7, r1
 800bed6:	1dba      	adds	r2, r7, #6
 800bed8:	7812      	ldrb	r2, [r2, #0]
 800beda:	705a      	strb	r2, [r3, #1]
	buf[2] = cadDetMin;
 800bedc:	187b      	adds	r3, r7, r1
 800bede:	1d7a      	adds	r2, r7, #5
 800bee0:	7812      	ldrb	r2, [r2, #0]
 800bee2:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)cadExitMode;
 800bee4:	187b      	adds	r3, r7, r1
 800bee6:	1d3a      	adds	r2, r7, #4
 800bee8:	7812      	ldrb	r2, [r2, #0]
 800beea:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((cadTimeout >> 16) & 0xFF);
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	0c1b      	lsrs	r3, r3, #16
 800bef0:	b2da      	uxtb	r2, r3
 800bef2:	187b      	adds	r3, r7, r1
 800bef4:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)((cadTimeout >> 8) & 0xFF);
 800bef6:	6a3b      	ldr	r3, [r7, #32]
 800bef8:	0a1b      	lsrs	r3, r3, #8
 800befa:	b2da      	uxtb	r2, r3
 800befc:	187b      	adds	r3, r7, r1
 800befe:	715a      	strb	r2, [r3, #5]
	buf[6] = (uint8_t)(cadTimeout & 0xFF);
 800bf00:	6a3b      	ldr	r3, [r7, #32]
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	187b      	adds	r3, r7, r1
 800bf06:	719a      	strb	r2, [r3, #6]
	SX126xWriteCommand(RADIO_SET_CADPARAMS, buf, 7);
 800bf08:	187b      	adds	r3, r7, r1
 800bf0a:	2207      	movs	r2, #7
 800bf0c:	0019      	movs	r1, r3
 800bf0e:	2088      	movs	r0, #136	@ 0x88
 800bf10:	f000 f972 	bl	800c1f8 <SX126xWriteCommand>
	OperatingMode = MODE_CAD;
 800bf14:	4b03      	ldr	r3, [pc, #12]	@ (800bf24 <SX126xSetCadParams+0x80>)
 800bf16:	2207      	movs	r2, #7
 800bf18:	701a      	strb	r2, [r3, #0]
}
 800bf1a:	46c0      	nop			@ (mov r8, r8)
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	b004      	add	sp, #16
 800bf20:	bdb0      	pop	{r4, r5, r7, pc}
 800bf22:	46c0      	nop			@ (mov r8, r8)
 800bf24:	20000538 	.word	0x20000538

0800bf28 <SX126xSetBufferBaseAddress>:

void SX126xSetBufferBaseAddress(uint8_t txBaseAddress, uint8_t rxBaseAddress){
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	0002      	movs	r2, r0
 800bf30:	1dfb      	adds	r3, r7, #7
 800bf32:	701a      	strb	r2, [r3, #0]
 800bf34:	1dbb      	adds	r3, r7, #6
 800bf36:	1c0a      	adds	r2, r1, #0
 800bf38:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 800bf3a:	210c      	movs	r1, #12
 800bf3c:	187b      	adds	r3, r7, r1
 800bf3e:	1dfa      	adds	r2, r7, #7
 800bf40:	7812      	ldrb	r2, [r2, #0]
 800bf42:	701a      	strb	r2, [r3, #0]
	buf[1] = rxBaseAddress;
 800bf44:	187b      	adds	r3, r7, r1
 800bf46:	1dba      	adds	r2, r7, #6
 800bf48:	7812      	ldrb	r2, [r2, #0]
 800bf4a:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_SET_BUFFERBASEADDRESS, buf, 2);
 800bf4c:	187b      	adds	r3, r7, r1
 800bf4e:	2202      	movs	r2, #2
 800bf50:	0019      	movs	r1, r3
 800bf52:	208f      	movs	r0, #143	@ 0x8f
 800bf54:	f000 f950 	bl	800c1f8 <SX126xWriteCommand>
}
 800bf58:	46c0      	nop			@ (mov r8, r8)
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	b004      	add	sp, #16
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <SX126xGetRssiInst>:
	SX126xReadCommand(RADIO_GET_STATUS, (uint8_t *)&stat, 1);
	status.Value = stat;
	return status;
}

int8_t SX126xGetRssiInst(void){
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
	uint8_t buf[1];
	int8_t rssi = 0;
 800bf66:	1dfb      	adds	r3, r7, #7
 800bf68:	2200      	movs	r2, #0
 800bf6a:	701a      	strb	r2, [r3, #0]

	SX126xReadCommand(RADIO_GET_RSSIINST, buf, 1);
 800bf6c:	1d3b      	adds	r3, r7, #4
 800bf6e:	2201      	movs	r2, #1
 800bf70:	0019      	movs	r1, r3
 800bf72:	2015      	movs	r0, #21
 800bf74:	f000 f978 	bl	800c268 <SX126xReadCommand>
	rssi = -buf[0] >> 1;
 800bf78:	1d3b      	adds	r3, r7, #4
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	425b      	negs	r3, r3
 800bf7e:	105a      	asrs	r2, r3, #1
 800bf80:	1dfb      	adds	r3, r7, #7
 800bf82:	701a      	strb	r2, [r3, #0]
	return rssi;
 800bf84:	1dfb      	adds	r3, r7, #7
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	b25b      	sxtb	r3, r3
}
 800bf8a:	0018      	movs	r0, r3
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	b002      	add	sp, #8
 800bf90:	bd80      	pop	{r7, pc}
	...

0800bf94 <SX126xGetRxBufferStatus>:

void SX126xGetRxBufferStatus(uint8_t *payloadLength, uint8_t *rxStartBufferPointer){
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
	uint8_t status[2];

	SX126xReadCommand(RADIO_GET_RXBUFFERSTATUS, status, 2);
 800bf9e:	230c      	movs	r3, #12
 800bfa0:	18fb      	adds	r3, r7, r3
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	0019      	movs	r1, r3
 800bfa6:	2013      	movs	r0, #19
 800bfa8:	f000 f95e 	bl	800c268 <SX126xReadCommand>
	// In case of LORA fixed header, the payloadLength is obtained by reading
	// the register REG_LR_PAYLOADLENGTH
	if ((SX126xGetPacketType() == PACKET_TYPE_LORA) && (SX126xReadRegister(REG_LR_PACKETPARAMS) >> 7 == 1)){
 800bfac:	f7ff fd9e 	bl	800baec <SX126xGetPacketType>
 800bfb0:	0003      	movs	r3, r0
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d111      	bne.n	800bfda <SX126xGetRxBufferStatus+0x46>
 800bfb6:	4b10      	ldr	r3, [pc, #64]	@ (800bff8 <SX126xGetRxBufferStatus+0x64>)
 800bfb8:	0018      	movs	r0, r3
 800bfba:	f000 fa2f 	bl	800c41c <SX126xReadRegister>
 800bfbe:	0003      	movs	r3, r0
 800bfc0:	09db      	lsrs	r3, r3, #7
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d108      	bne.n	800bfda <SX126xGetRxBufferStatus+0x46>
		*payloadLength = SX126xReadRegister(REG_LR_PAYLOADLENGTH);
 800bfc8:	4b0c      	ldr	r3, [pc, #48]	@ (800bffc <SX126xGetRxBufferStatus+0x68>)
 800bfca:	0018      	movs	r0, r3
 800bfcc:	f000 fa26 	bl	800c41c <SX126xReadRegister>
 800bfd0:	0003      	movs	r3, r0
 800bfd2:	001a      	movs	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	701a      	strb	r2, [r3, #0]
 800bfd8:	e004      	b.n	800bfe4 <SX126xGetRxBufferStatus+0x50>
	}
	else{
		*payloadLength = status[0];
 800bfda:	230c      	movs	r3, #12
 800bfdc:	18fb      	adds	r3, r7, r3
 800bfde:	781a      	ldrb	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	701a      	strb	r2, [r3, #0]
	}
	*rxStartBufferPointer = status[1];
 800bfe4:	230c      	movs	r3, #12
 800bfe6:	18fb      	adds	r3, r7, r3
 800bfe8:	785a      	ldrb	r2, [r3, #1]
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	701a      	strb	r2, [r3, #0]
}
 800bfee:	46c0      	nop			@ (mov r8, r8)
 800bff0:	46bd      	mov	sp, r7
 800bff2:	b004      	add	sp, #16
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	46c0      	nop			@ (mov r8, r8)
 800bff8:	00000704 	.word	0x00000704
 800bffc:	00000702 	.word	0x00000702

0800c000 <SX126xGetPacketStatus>:

void SX126xGetPacketStatus(PacketStatus_t *pktStatus){
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
	uint8_t status[3];

	SX126xReadCommand(RADIO_GET_PACKETSTATUS, status, 3);
 800c008:	230c      	movs	r3, #12
 800c00a:	18fb      	adds	r3, r7, r3
 800c00c:	2203      	movs	r2, #3
 800c00e:	0019      	movs	r1, r3
 800c010:	2014      	movs	r0, #20
 800c012:	f000 f929 	bl	800c268 <SX126xReadCommand>

	pktStatus->packetType = SX126xGetPacketType();
 800c016:	f7ff fd69 	bl	800baec <SX126xGetPacketType>
 800c01a:	0003      	movs	r3, r0
 800c01c:	001a      	movs	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	701a      	strb	r2, [r3, #0]
	switch (pktStatus->packetType){
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d002      	beq.n	800c030 <SX126xGetPacketStatus+0x30>
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d017      	beq.n	800c05e <SX126xGetPacketStatus+0x5e>
 800c02e:	e032      	b.n	800c096 <SX126xGetPacketStatus+0x96>
		case PACKET_TYPE_GFSK:
			pktStatus->Params.Gfsk.RxStatus = status[0];
 800c030:	210c      	movs	r1, #12
 800c032:	187b      	adds	r3, r7, r1
 800c034:	781a      	ldrb	r2, [r3, #0]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	711a      	strb	r2, [r3, #4]
			pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800c03a:	187b      	adds	r3, r7, r1
 800c03c:	785b      	ldrb	r3, [r3, #1]
 800c03e:	425b      	negs	r3, r3
 800c040:	105b      	asrs	r3, r3, #1
 800c042:	b25a      	sxtb	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	719a      	strb	r2, [r3, #6]
			pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800c048:	187b      	adds	r3, r7, r1
 800c04a:	789b      	ldrb	r3, [r3, #2]
 800c04c:	425b      	negs	r3, r3
 800c04e:	105b      	asrs	r3, r3, #1
 800c050:	b25a      	sxtb	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	715a      	strb	r2, [r3, #5]
			pktStatus->Params.Gfsk.FreqError = 0;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	609a      	str	r2, [r3, #8]
			break;
 800c05c:	e025      	b.n	800c0aa <SX126xGetPacketStatus+0xaa>

		case PACKET_TYPE_LORA:
			pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800c05e:	210c      	movs	r1, #12
 800c060:	187b      	adds	r3, r7, r1
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	425b      	negs	r3, r3
 800c066:	105b      	asrs	r3, r3, #1
 800c068:	b25a      	sxtb	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	731a      	strb	r2, [r3, #12]
			// Returns SNR value [dB] rounded to the nearest integer value
			pktStatus->Params.LoRa.SnrPkt = (((int8_t)status[1]) + 2) >> 2;
 800c06e:	187b      	adds	r3, r7, r1
 800c070:	785b      	ldrb	r3, [r3, #1]
 800c072:	b25b      	sxtb	r3, r3
 800c074:	3302      	adds	r3, #2
 800c076:	109b      	asrs	r3, r3, #2
 800c078:	b25a      	sxtb	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	735a      	strb	r2, [r3, #13]
			pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800c07e:	187b      	adds	r3, r7, r1
 800c080:	789b      	ldrb	r3, [r3, #2]
 800c082:	425b      	negs	r3, r3
 800c084:	105b      	asrs	r3, r3, #1
 800c086:	b25a      	sxtb	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	739a      	strb	r2, [r3, #14]
			pktStatus->Params.LoRa.FreqError = FrequencyError;
 800c08c:	4b09      	ldr	r3, [pc, #36]	@ (800c0b4 <SX126xGetPacketStatus+0xb4>)
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	611a      	str	r2, [r3, #16]
			break;
 800c094:	e009      	b.n	800c0aa <SX126xGetPacketStatus+0xaa>

		default:
		case PACKET_TYPE_NONE:
			// In that specific case, we set everything in the pktStatus to zeros
			// and reset the packet type accordingly
			memset(pktStatus, 0, sizeof(PacketStatus_t));
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2214      	movs	r2, #20
 800c09a:	2100      	movs	r1, #0
 800c09c:	0018      	movs	r0, r3
 800c09e:	f000 fb7d 	bl	800c79c <memset>
			pktStatus->packetType = PACKET_TYPE_NONE;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	220f      	movs	r2, #15
 800c0a6:	701a      	strb	r2, [r3, #0]
		break;
 800c0a8:	46c0      	nop			@ (mov r8, r8)
	}
}
 800c0aa:	46c0      	nop			@ (mov r8, r8)
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	b004      	add	sp, #16
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	46c0      	nop			@ (mov r8, r8)
 800c0b4:	2000053c 	.word	0x2000053c

0800c0b8 <SX126xClearIrqStatus>:
void SX126xClearDeviceErrors(void){
	uint8_t buf[2] = {0x00, 0x00};
	SX126xWriteCommand(RADIO_CLR_ERROR, buf, 2);
}

void SX126xClearIrqStatus(uint16_t irq){
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	0002      	movs	r2, r0
 800c0c0:	1dbb      	adds	r3, r7, #6
 800c0c2:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)(((uint16_t)irq >> 8) & 0x00FF);
 800c0c4:	1dbb      	adds	r3, r7, #6
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	0a1b      	lsrs	r3, r3, #8
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	210c      	movs	r1, #12
 800c0d0:	187b      	adds	r3, r7, r1
 800c0d2:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((uint16_t)irq & 0x00FF);
 800c0d4:	1dbb      	adds	r3, r7, #6
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	187b      	adds	r3, r7, r1
 800c0dc:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_CLR_IRQSTATUS, buf, 2);
 800c0de:	187b      	adds	r3, r7, r1
 800c0e0:	2202      	movs	r2, #2
 800c0e2:	0019      	movs	r1, r3
 800c0e4:	2002      	movs	r0, #2
 800c0e6:	f000 f887 	bl	800c1f8 <SX126xWriteCommand>
}
 800c0ea:	46c0      	nop			@ (mov r8, r8)
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	b004      	add	sp, #16
 800c0f0:	bd80      	pop	{r7, pc}
	...

0800c0f4 <SX126xIoInit>:
extern SPI_HandleTypeDef hspi1;


bool dio3IsOutput = false;

void SX126xIoInit(void){
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 800c0f8:	4b03      	ldr	r3, [pc, #12]	@ (800c108 <SX126xIoInit+0x14>)
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	701a      	strb	r2, [r3, #0]

	SX126xReset();
 800c0fe:	f000 f805 	bl	800c10c <SX126xReset>
}
 800c102:	46c0      	nop			@ (mov r8, r8)
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	20000541 	.word	0x20000541

0800c10c <SX126xReset>:

void SX126xIoDeInit(void){
	dio3IsOutput = false;
}

void SX126xReset(void){
 800c10c:	b580      	push	{r7, lr}
 800c10e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 800c110:	2380      	movs	r3, #128	@ 0x80
 800c112:	0059      	lsls	r1, r3, #1
 800c114:	23a0      	movs	r3, #160	@ 0xa0
 800c116:	05db      	lsls	r3, r3, #23
 800c118:	2200      	movs	r2, #0
 800c11a:	0018      	movs	r0, r3
 800c11c:	f7f9 fbe0 	bl	80058e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800c120:	200a      	movs	r0, #10
 800c122:	f7f7 fa29 	bl	8003578 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 800c126:	2380      	movs	r3, #128	@ 0x80
 800c128:	0059      	lsls	r1, r3, #1
 800c12a:	23a0      	movs	r3, #160	@ 0xa0
 800c12c:	05db      	lsls	r3, r3, #23
 800c12e:	2201      	movs	r2, #1
 800c130:	0018      	movs	r0, r3
 800c132:	f7f9 fbd5 	bl	80058e0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800c136:	2014      	movs	r0, #20
 800c138:	f7f7 fa1e 	bl	8003578 <HAL_Delay>
	dio3IsOutput = false;
 800c13c:	4b02      	ldr	r3, [pc, #8]	@ (800c148 <SX126xReset+0x3c>)
 800c13e:	2200      	movs	r2, #0
 800c140:	701a      	strb	r2, [r3, #0]
}
 800c142:	46c0      	nop			@ (mov r8, r8)
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	20000541 	.word	0x20000541

0800c14c <SX126xWaitOnBusy>:

void SX126xWaitOnBusy(void){
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
	int timeout = 1000;
 800c152:	23fa      	movs	r3, #250	@ 0xfa
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	607b      	str	r3, [r7, #4]
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 800c158:	e010      	b.n	800c17c <SX126xWaitOnBusy+0x30>
		for(int i=0; i<12000; i++)__NOP();
 800c15a:	2300      	movs	r3, #0
 800c15c:	603b      	str	r3, [r7, #0]
 800c15e:	e003      	b.n	800c168 <SX126xWaitOnBusy+0x1c>
 800c160:	46c0      	nop			@ (mov r8, r8)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	3301      	adds	r3, #1
 800c166:	603b      	str	r3, [r7, #0]
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	4a0c      	ldr	r2, [pc, #48]	@ (800c19c <SX126xWaitOnBusy+0x50>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	ddf7      	ble.n	800c160 <SX126xWaitOnBusy+0x14>
		timeout -= 1;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	3b01      	subs	r3, #1
 800c174:	607b      	str	r3, [r7, #4]
		if (timeout < 0){
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	db0b      	blt.n	800c194 <SX126xWaitOnBusy+0x48>
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 800c17c:	2380      	movs	r3, #128	@ 0x80
 800c17e:	009a      	lsls	r2, r3, #2
 800c180:	23a0      	movs	r3, #160	@ 0xa0
 800c182:	05db      	lsls	r3, r3, #23
 800c184:	0011      	movs	r1, r2
 800c186:	0018      	movs	r0, r3
 800c188:	f7f9 fb7e 	bl	8005888 <HAL_GPIO_ReadPin>
 800c18c:	0003      	movs	r3, r0
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d0e3      	beq.n	800c15a <SX126xWaitOnBusy+0xe>
 800c192:	e000      	b.n	800c196 <SX126xWaitOnBusy+0x4a>
			return;
 800c194:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 800c196:	46bd      	mov	sp, r7
 800c198:	b002      	add	sp, #8
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	00002edf 	.word	0x00002edf

0800c1a0 <SX126xWakeup>:

void SX126xWakeup(void){
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 800c1a6:	4b12      	ldr	r3, [pc, #72]	@ (800c1f0 <SX126xWakeup+0x50>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1ac:	b672      	cpsid	i
}
 800c1ae:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800c1b0:	23a0      	movs	r3, #160	@ 0xa0
 800c1b2:	05db      	lsls	r3, r3, #23
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	2110      	movs	r1, #16
 800c1b8:	0018      	movs	r0, r3
 800c1ba:	f7f9 fb91 	bl	80058e0 <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_GET_STATUS, 0x00};
 800c1be:	1d3b      	adds	r3, r7, #4
 800c1c0:	22c0      	movs	r2, #192	@ 0xc0
 800c1c2:	801a      	strh	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800c1c4:	23fa      	movs	r3, #250	@ 0xfa
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	1d39      	adds	r1, r7, #4
 800c1ca:	480a      	ldr	r0, [pc, #40]	@ (800c1f4 <SX126xWakeup+0x54>)
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	f7fb ff13 	bl	8007ff8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800c1d2:	23a0      	movs	r3, #160	@ 0xa0
 800c1d4:	05db      	lsls	r3, r3, #23
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	2110      	movs	r1, #16
 800c1da:	0018      	movs	r0, r3
 800c1dc:	f7f9 fb80 	bl	80058e0 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800c1e0:	f7ff ffb4 	bl	800c14c <SX126xWaitOnBusy>
  __ASM volatile ("cpsie i" : : : "memory");
 800c1e4:	b662      	cpsie	i
}
 800c1e6:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
 800c1e8:	46c0      	nop			@ (mov r8, r8)
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	b002      	add	sp, #8
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	20000541 	.word	0x20000541
 800c1f4:	200002b4 	.word	0x200002b4

0800c1f8 <SX126xWriteCommand>:

void SX126xWriteCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 800c1f8:	b590      	push	{r4, r7, lr}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6039      	str	r1, [r7, #0]
 800c200:	0011      	movs	r1, r2
 800c202:	1dfb      	adds	r3, r7, #7
 800c204:	1c02      	adds	r2, r0, #0
 800c206:	701a      	strb	r2, [r3, #0]
 800c208:	1d3b      	adds	r3, r7, #4
 800c20a:	1c0a      	adds	r2, r1, #0
 800c20c:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800c20e:	f7ff f8dd 	bl	800b3cc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800c212:	23a0      	movs	r3, #160	@ 0xa0
 800c214:	05db      	lsls	r3, r3, #23
 800c216:	2200      	movs	r2, #0
 800c218:	2110      	movs	r1, #16
 800c21a:	0018      	movs	r0, r3
 800c21c:	f7f9 fb60 	bl	80058e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&command, 1, 1000);
 800c220:	23fa      	movs	r3, #250	@ 0xfa
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	1df9      	adds	r1, r7, #7
 800c226:	480f      	ldr	r0, [pc, #60]	@ (800c264 <SX126xWriteCommand+0x6c>)
 800c228:	2201      	movs	r2, #1
 800c22a:	f7fb fee5 	bl	8007ff8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buffer, size, 1000);
 800c22e:	23fa      	movs	r3, #250	@ 0xfa
 800c230:	009c      	lsls	r4, r3, #2
 800c232:	1d3b      	adds	r3, r7, #4
 800c234:	881a      	ldrh	r2, [r3, #0]
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	480a      	ldr	r0, [pc, #40]	@ (800c264 <SX126xWriteCommand+0x6c>)
 800c23a:	0023      	movs	r3, r4
 800c23c:	f7fb fedc 	bl	8007ff8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800c240:	23a0      	movs	r3, #160	@ 0xa0
 800c242:	05db      	lsls	r3, r3, #23
 800c244:	2201      	movs	r2, #1
 800c246:	2110      	movs	r1, #16
 800c248:	0018      	movs	r0, r3
 800c24a:	f7f9 fb49 	bl	80058e0 <HAL_GPIO_WritePin>

	if (command != RADIO_SET_SLEEP)
 800c24e:	1dfb      	adds	r3, r7, #7
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	2b84      	cmp	r3, #132	@ 0x84
 800c254:	d001      	beq.n	800c25a <SX126xWriteCommand+0x62>
		SX126xWaitOnBusy();
 800c256:	f7ff ff79 	bl	800c14c <SX126xWaitOnBusy>
}
 800c25a:	46c0      	nop			@ (mov r8, r8)
 800c25c:	46bd      	mov	sp, r7
 800c25e:	b003      	add	sp, #12
 800c260:	bd90      	pop	{r4, r7, pc}
 800c262:	46c0      	nop			@ (mov r8, r8)
 800c264:	200002b4 	.word	0x200002b4

0800c268 <SX126xReadCommand>:

void SX126xReadCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 800c268:	b590      	push	{r4, r7, lr}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6039      	str	r1, [r7, #0]
 800c270:	0011      	movs	r1, r2
 800c272:	1dfb      	adds	r3, r7, #7
 800c274:	1c02      	adds	r2, r0, #0
 800c276:	701a      	strb	r2, [r3, #0]
 800c278:	1d3b      	adds	r3, r7, #4
 800c27a:	1c0a      	adds	r2, r1, #0
 800c27c:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800c27e:	f7ff f8a5 	bl	800b3cc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800c282:	23a0      	movs	r3, #160	@ 0xa0
 800c284:	05db      	lsls	r3, r3, #23
 800c286:	2200      	movs	r2, #0
 800c288:	2110      	movs	r1, #16
 800c28a:	0018      	movs	r0, r3
 800c28c:	f7f9 fb28 	bl	80058e0 <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)command, 0x00};
 800c290:	210c      	movs	r1, #12
 800c292:	187b      	adds	r3, r7, r1
 800c294:	1dfa      	adds	r2, r7, #7
 800c296:	7812      	ldrb	r2, [r2, #0]
 800c298:	701a      	strb	r2, [r3, #0]
 800c29a:	187b      	adds	r3, r7, r1
 800c29c:	2200      	movs	r2, #0
 800c29e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800c2a0:	23fa      	movs	r3, #250	@ 0xfa
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	1879      	adds	r1, r7, r1
 800c2a6:	480d      	ldr	r0, [pc, #52]	@ (800c2dc <SX126xReadCommand+0x74>)
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	f7fb fea5 	bl	8007ff8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, size, 1000);
 800c2ae:	23fa      	movs	r3, #250	@ 0xfa
 800c2b0:	009c      	lsls	r4, r3, #2
 800c2b2:	1d3b      	adds	r3, r7, #4
 800c2b4:	881a      	ldrh	r2, [r3, #0]
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	4808      	ldr	r0, [pc, #32]	@ (800c2dc <SX126xReadCommand+0x74>)
 800c2ba:	0023      	movs	r3, r4
 800c2bc:	f7fc f80e 	bl	80082dc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800c2c0:	23a0      	movs	r3, #160	@ 0xa0
 800c2c2:	05db      	lsls	r3, r3, #23
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	2110      	movs	r1, #16
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	f7f9 fb09 	bl	80058e0 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800c2ce:	f7ff ff3d 	bl	800c14c <SX126xWaitOnBusy>
}
 800c2d2:	46c0      	nop			@ (mov r8, r8)
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	b005      	add	sp, #20
 800c2d8:	bd90      	pop	{r4, r7, pc}
 800c2da:	46c0      	nop			@ (mov r8, r8)
 800c2dc:	200002b4 	.word	0x200002b4

0800c2e0 <SX126xWriteRegisters>:

void SX126xWriteRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 800c2e0:	b590      	push	{r4, r7, lr}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6039      	str	r1, [r7, #0]
 800c2e8:	0011      	movs	r1, r2
 800c2ea:	1dbb      	adds	r3, r7, #6
 800c2ec:	1c02      	adds	r2, r0, #0
 800c2ee:	801a      	strh	r2, [r3, #0]
 800c2f0:	1d3b      	adds	r3, r7, #4
 800c2f2:	1c0a      	adds	r2, r1, #0
 800c2f4:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800c2f6:	f7ff f869 	bl	800b3cc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800c2fa:	23a0      	movs	r3, #160	@ 0xa0
 800c2fc:	05db      	lsls	r3, r3, #23
 800c2fe:	2200      	movs	r2, #0
 800c300:	2110      	movs	r1, #16
 800c302:	0018      	movs	r0, r3
 800c304:	f7f9 faec 	bl	80058e0 <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_WRITE_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF)};
 800c308:	210c      	movs	r1, #12
 800c30a:	187b      	adds	r3, r7, r1
 800c30c:	220d      	movs	r2, #13
 800c30e:	701a      	strb	r2, [r3, #0]
 800c310:	1dbb      	adds	r3, r7, #6
 800c312:	881b      	ldrh	r3, [r3, #0]
 800c314:	0a1b      	lsrs	r3, r3, #8
 800c316:	b29b      	uxth	r3, r3
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	187b      	adds	r3, r7, r1
 800c31c:	705a      	strb	r2, [r3, #1]
 800c31e:	1dbb      	adds	r3, r7, #6
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	b2da      	uxtb	r2, r3
 800c324:	187b      	adds	r3, r7, r1
 800c326:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit(&hspi1, buf, 3, 1000);
 800c328:	23fa      	movs	r3, #250	@ 0xfa
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	1879      	adds	r1, r7, r1
 800c32e:	480d      	ldr	r0, [pc, #52]	@ (800c364 <SX126xWriteRegisters+0x84>)
 800c330:	2203      	movs	r2, #3
 800c332:	f7fb fe61 	bl	8007ff8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buffer, size, 1000);
 800c336:	23fa      	movs	r3, #250	@ 0xfa
 800c338:	009c      	lsls	r4, r3, #2
 800c33a:	1d3b      	adds	r3, r7, #4
 800c33c:	881a      	ldrh	r2, [r3, #0]
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	4808      	ldr	r0, [pc, #32]	@ (800c364 <SX126xWriteRegisters+0x84>)
 800c342:	0023      	movs	r3, r4
 800c344:	f7fb fe58 	bl	8007ff8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800c348:	23a0      	movs	r3, #160	@ 0xa0
 800c34a:	05db      	lsls	r3, r3, #23
 800c34c:	2201      	movs	r2, #1
 800c34e:	2110      	movs	r1, #16
 800c350:	0018      	movs	r0, r3
 800c352:	f7f9 fac5 	bl	80058e0 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800c356:	f7ff fef9 	bl	800c14c <SX126xWaitOnBusy>
}
 800c35a:	46c0      	nop			@ (mov r8, r8)
 800c35c:	46bd      	mov	sp, r7
 800c35e:	b005      	add	sp, #20
 800c360:	bd90      	pop	{r4, r7, pc}
 800c362:	46c0      	nop			@ (mov r8, r8)
 800c364:	200002b4 	.word	0x200002b4

0800c368 <SX126xWriteRegister>:

void SX126xWriteRegister(uint16_t address, uint8_t value){
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	0002      	movs	r2, r0
 800c370:	1dbb      	adds	r3, r7, #6
 800c372:	801a      	strh	r2, [r3, #0]
 800c374:	1d7b      	adds	r3, r7, #5
 800c376:	1c0a      	adds	r2, r1, #0
 800c378:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegisters(address, &value, 1);
 800c37a:	1d79      	adds	r1, r7, #5
 800c37c:	1dbb      	adds	r3, r7, #6
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	2201      	movs	r2, #1
 800c382:	0018      	movs	r0, r3
 800c384:	f7ff ffac 	bl	800c2e0 <SX126xWriteRegisters>
}
 800c388:	46c0      	nop			@ (mov r8, r8)
 800c38a:	46bd      	mov	sp, r7
 800c38c:	b002      	add	sp, #8
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <SX126xReadRegisters>:

void SX126xReadRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 800c390:	b590      	push	{r4, r7, lr}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6039      	str	r1, [r7, #0]
 800c398:	0011      	movs	r1, r2
 800c39a:	1dbb      	adds	r3, r7, #6
 800c39c:	1c02      	adds	r2, r0, #0
 800c39e:	801a      	strh	r2, [r3, #0]
 800c3a0:	1d3b      	adds	r3, r7, #4
 800c3a2:	1c0a      	adds	r2, r1, #0
 800c3a4:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800c3a6:	f7ff f811 	bl	800b3cc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800c3aa:	23a0      	movs	r3, #160	@ 0xa0
 800c3ac:	05db      	lsls	r3, r3, #23
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	2110      	movs	r1, #16
 800c3b2:	0018      	movs	r0, r3
 800c3b4:	f7f9 fa94 	bl	80058e0 <HAL_GPIO_WritePin>
	uint8_t buf[4] = {(uint8_t)RADIO_READ_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF), 0x00};
 800c3b8:	210c      	movs	r1, #12
 800c3ba:	187b      	adds	r3, r7, r1
 800c3bc:	221d      	movs	r2, #29
 800c3be:	701a      	strb	r2, [r3, #0]
 800c3c0:	1dbb      	adds	r3, r7, #6
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	0a1b      	lsrs	r3, r3, #8
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	187b      	adds	r3, r7, r1
 800c3cc:	705a      	strb	r2, [r3, #1]
 800c3ce:	1dbb      	adds	r3, r7, #6
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	b2da      	uxtb	r2, r3
 800c3d4:	187b      	adds	r3, r7, r1
 800c3d6:	709a      	strb	r2, [r3, #2]
 800c3d8:	187b      	adds	r3, r7, r1
 800c3da:	2200      	movs	r2, #0
 800c3dc:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, buf, 4, 1000);
 800c3de:	23fa      	movs	r3, #250	@ 0xfa
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	1879      	adds	r1, r7, r1
 800c3e4:	480c      	ldr	r0, [pc, #48]	@ (800c418 <SX126xReadRegisters+0x88>)
 800c3e6:	2204      	movs	r2, #4
 800c3e8:	f7fb fe06 	bl	8007ff8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, size, 1000);
 800c3ec:	23fa      	movs	r3, #250	@ 0xfa
 800c3ee:	009c      	lsls	r4, r3, #2
 800c3f0:	1d3b      	adds	r3, r7, #4
 800c3f2:	881a      	ldrh	r2, [r3, #0]
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	4808      	ldr	r0, [pc, #32]	@ (800c418 <SX126xReadRegisters+0x88>)
 800c3f8:	0023      	movs	r3, r4
 800c3fa:	f7fb ff6f 	bl	80082dc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800c3fe:	23a0      	movs	r3, #160	@ 0xa0
 800c400:	05db      	lsls	r3, r3, #23
 800c402:	2201      	movs	r2, #1
 800c404:	2110      	movs	r1, #16
 800c406:	0018      	movs	r0, r3
 800c408:	f7f9 fa6a 	bl	80058e0 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800c40c:	f7ff fe9e 	bl	800c14c <SX126xWaitOnBusy>
}
 800c410:	46c0      	nop			@ (mov r8, r8)
 800c412:	46bd      	mov	sp, r7
 800c414:	b005      	add	sp, #20
 800c416:	bd90      	pop	{r4, r7, pc}
 800c418:	200002b4 	.word	0x200002b4

0800c41c <SX126xReadRegister>:

uint8_t SX126xReadRegister(uint16_t address){
 800c41c:	b590      	push	{r4, r7, lr}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	0002      	movs	r2, r0
 800c424:	1dbb      	adds	r3, r7, #6
 800c426:	801a      	strh	r2, [r3, #0]
	uint8_t data;
	SX126xReadRegisters(address, &data, 1);
 800c428:	240f      	movs	r4, #15
 800c42a:	1939      	adds	r1, r7, r4
 800c42c:	1dbb      	adds	r3, r7, #6
 800c42e:	881b      	ldrh	r3, [r3, #0]
 800c430:	2201      	movs	r2, #1
 800c432:	0018      	movs	r0, r3
 800c434:	f7ff ffac 	bl	800c390 <SX126xReadRegisters>
	return data;
 800c438:	193b      	adds	r3, r7, r4
 800c43a:	781b      	ldrb	r3, [r3, #0]
}
 800c43c:	0018      	movs	r0, r3
 800c43e:	46bd      	mov	sp, r7
 800c440:	b005      	add	sp, #20
 800c442:	bd90      	pop	{r4, r7, pc}

0800c444 <SX126xWriteBuffer>:

void SX126xWriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6039      	str	r1, [r7, #0]
 800c44c:	0011      	movs	r1, r2
 800c44e:	1dfb      	adds	r3, r7, #7
 800c450:	1c02      	adds	r2, r0, #0
 800c452:	701a      	strb	r2, [r3, #0]
 800c454:	1dbb      	adds	r3, r7, #6
 800c456:	1c0a      	adds	r2, r1, #0
 800c458:	701a      	strb	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800c45a:	f7fe ffb7 	bl	800b3cc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800c45e:	23a0      	movs	r3, #160	@ 0xa0
 800c460:	05db      	lsls	r3, r3, #23
 800c462:	2200      	movs	r2, #0
 800c464:	2110      	movs	r1, #16
 800c466:	0018      	movs	r0, r3
 800c468:	f7f9 fa3a 	bl	80058e0 <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_WRITE_BUFFER, offset};
 800c46c:	210c      	movs	r1, #12
 800c46e:	187b      	adds	r3, r7, r1
 800c470:	220e      	movs	r2, #14
 800c472:	701a      	strb	r2, [r3, #0]
 800c474:	187b      	adds	r3, r7, r1
 800c476:	1dfa      	adds	r2, r7, #7
 800c478:	7812      	ldrb	r2, [r2, #0]
 800c47a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800c47c:	23fa      	movs	r3, #250	@ 0xfa
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	1879      	adds	r1, r7, r1
 800c482:	480d      	ldr	r0, [pc, #52]	@ (800c4b8 <SX126xWriteBuffer+0x74>)
 800c484:	2202      	movs	r2, #2
 800c486:	f7fb fdb7 	bl	8007ff8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buffer, size, 1000);
 800c48a:	1dbb      	adds	r3, r7, #6
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	b29a      	uxth	r2, r3
 800c490:	23fa      	movs	r3, #250	@ 0xfa
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	4808      	ldr	r0, [pc, #32]	@ (800c4b8 <SX126xWriteBuffer+0x74>)
 800c498:	f7fb fdae 	bl	8007ff8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800c49c:	23a0      	movs	r3, #160	@ 0xa0
 800c49e:	05db      	lsls	r3, r3, #23
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	2110      	movs	r1, #16
 800c4a4:	0018      	movs	r0, r3
 800c4a6:	f7f9 fa1b 	bl	80058e0 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800c4aa:	f7ff fe4f 	bl	800c14c <SX126xWaitOnBusy>
}
 800c4ae:	46c0      	nop			@ (mov r8, r8)
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	b004      	add	sp, #16
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	46c0      	nop			@ (mov r8, r8)
 800c4b8:	200002b4 	.word	0x200002b4

0800c4bc <SX126xReadBuffer>:

void SX126xReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6039      	str	r1, [r7, #0]
 800c4c4:	0011      	movs	r1, r2
 800c4c6:	1dfb      	adds	r3, r7, #7
 800c4c8:	1c02      	adds	r2, r0, #0
 800c4ca:	701a      	strb	r2, [r3, #0]
 800c4cc:	1dbb      	adds	r3, r7, #6
 800c4ce:	1c0a      	adds	r2, r1, #0
 800c4d0:	701a      	strb	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800c4d2:	f7fe ff7b 	bl	800b3cc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800c4d6:	23a0      	movs	r3, #160	@ 0xa0
 800c4d8:	05db      	lsls	r3, r3, #23
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2110      	movs	r1, #16
 800c4de:	0018      	movs	r0, r3
 800c4e0:	f7f9 f9fe 	bl	80058e0 <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_READ_BUFFER, offset, 0x00};
 800c4e4:	210c      	movs	r1, #12
 800c4e6:	187b      	adds	r3, r7, r1
 800c4e8:	221e      	movs	r2, #30
 800c4ea:	701a      	strb	r2, [r3, #0]
 800c4ec:	187b      	adds	r3, r7, r1
 800c4ee:	1dfa      	adds	r2, r7, #7
 800c4f0:	7812      	ldrb	r2, [r2, #0]
 800c4f2:	705a      	strb	r2, [r3, #1]
 800c4f4:	187b      	adds	r3, r7, r1
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800c4fa:	23fa      	movs	r3, #250	@ 0xfa
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	1879      	adds	r1, r7, r1
 800c500:	4812      	ldr	r0, [pc, #72]	@ (800c54c <SX126xReadBuffer+0x90>)
 800c502:	2202      	movs	r2, #2
 800c504:	f7fb fd78 	bl	8007ff8 <HAL_SPI_Transmit>
	uint8_t dummy = 0;
 800c508:	210b      	movs	r1, #11
 800c50a:	187b      	adds	r3, r7, r1
 800c50c:	2200      	movs	r2, #0
 800c50e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1, &dummy, 1, 1000);
 800c510:	23fa      	movs	r3, #250	@ 0xfa
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	1879      	adds	r1, r7, r1
 800c516:	480d      	ldr	r0, [pc, #52]	@ (800c54c <SX126xReadBuffer+0x90>)
 800c518:	2201      	movs	r2, #1
 800c51a:	f7fb fedf 	bl	80082dc <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, buffer, size, 1000);
 800c51e:	1dbb      	adds	r3, r7, #6
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	b29a      	uxth	r2, r3
 800c524:	23fa      	movs	r3, #250	@ 0xfa
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	6839      	ldr	r1, [r7, #0]
 800c52a:	4808      	ldr	r0, [pc, #32]	@ (800c54c <SX126xReadBuffer+0x90>)
 800c52c:	f7fb fed6 	bl	80082dc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800c530:	23a0      	movs	r3, #160	@ 0xa0
 800c532:	05db      	lsls	r3, r3, #23
 800c534:	2201      	movs	r2, #1
 800c536:	2110      	movs	r1, #16
 800c538:	0018      	movs	r0, r3
 800c53a:	f7f9 f9d1 	bl	80058e0 <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800c53e:	f7ff fe05 	bl	800c14c <SX126xWaitOnBusy>
}
 800c542:	46c0      	nop			@ (mov r8, r8)
 800c544:	46bd      	mov	sp, r7
 800c546:	b004      	add	sp, #16
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	46c0      	nop			@ (mov r8, r8)
 800c54c:	200002b4 	.word	0x200002b4

0800c550 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower(int8_t power){
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	0002      	movs	r2, r0
 800c558:	1dfb      	adds	r3, r7, #7
 800c55a:	701a      	strb	r2, [r3, #0]
	SX126xSetTxParams(power, RADIO_RAMP_40_US);
 800c55c:	1dfb      	adds	r3, r7, #7
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	b25b      	sxtb	r3, r3
 800c562:	2102      	movs	r1, #2
 800c564:	0018      	movs	r0, r3
 800c566:	f7ff facb 	bl	800bb00 <SX126xSetTxParams>
}
 800c56a:	46c0      	nop			@ (mov r8, r8)
 800c56c:	46bd      	mov	sp, r7
 800c56e:	b002      	add	sp, #8
 800c570:	bd80      	pop	{r7, pc}

0800c572 <SX126xGetPaSelect>:

uint8_t SX126xGetPaSelect(uint32_t channel){
 800c572:	b580      	push	{r7, lr}
 800c574:	b082      	sub	sp, #8
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
	return SX1262;
 800c57a:	2302      	movs	r3, #2
}
 800c57c:	0018      	movs	r0, r3
 800c57e:	46bd      	mov	sp, r7
 800c580:	b002      	add	sp, #8
 800c582:	bd80      	pop	{r7, pc}

0800c584 <SX126xAntSwOn>:
		SPI_LORA.endTransaction();
		digitalWrite(_hwConfig.PIN_LORA_NSS, HIGH);
	}
}
*/
void SX126xAntSwOn(void){
 800c584:	b580      	push	{r7, lr}
 800c586:	af00      	add	r7, sp, #0
}
 800c588:	46c0      	nop			@ (mov r8, r8)
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <SX126xAntSwOff>:

void SX126xAntSwOff(void){
 800c58e:	b580      	push	{r7, lr}
 800c590:	af00      	add	r7, sp, #0
}
 800c592:	46c0      	nop			@ (mov r8, r8)
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <free>:
 800c598:	b510      	push	{r4, lr}
 800c59a:	4b03      	ldr	r3, [pc, #12]	@ (800c5a8 <free+0x10>)
 800c59c:	0001      	movs	r1, r0
 800c59e:	6818      	ldr	r0, [r3, #0]
 800c5a0:	f000 f94c 	bl	800c83c <_free_r>
 800c5a4:	bd10      	pop	{r4, pc}
 800c5a6:	46c0      	nop			@ (mov r8, r8)
 800c5a8:	2000015c 	.word	0x2000015c

0800c5ac <sbrk_aligned>:
 800c5ac:	b570      	push	{r4, r5, r6, lr}
 800c5ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c5ec <sbrk_aligned+0x40>)
 800c5b0:	000d      	movs	r5, r1
 800c5b2:	6831      	ldr	r1, [r6, #0]
 800c5b4:	0004      	movs	r4, r0
 800c5b6:	2900      	cmp	r1, #0
 800c5b8:	d102      	bne.n	800c5c0 <sbrk_aligned+0x14>
 800c5ba:	f000 f8f7 	bl	800c7ac <_sbrk_r>
 800c5be:	6030      	str	r0, [r6, #0]
 800c5c0:	0029      	movs	r1, r5
 800c5c2:	0020      	movs	r0, r4
 800c5c4:	f000 f8f2 	bl	800c7ac <_sbrk_r>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d103      	bne.n	800c5d4 <sbrk_aligned+0x28>
 800c5cc:	2501      	movs	r5, #1
 800c5ce:	426d      	negs	r5, r5
 800c5d0:	0028      	movs	r0, r5
 800c5d2:	bd70      	pop	{r4, r5, r6, pc}
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	1cc5      	adds	r5, r0, #3
 800c5d8:	439d      	bics	r5, r3
 800c5da:	42a8      	cmp	r0, r5
 800c5dc:	d0f8      	beq.n	800c5d0 <sbrk_aligned+0x24>
 800c5de:	1a29      	subs	r1, r5, r0
 800c5e0:	0020      	movs	r0, r4
 800c5e2:	f000 f8e3 	bl	800c7ac <_sbrk_r>
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	d1f2      	bne.n	800c5d0 <sbrk_aligned+0x24>
 800c5ea:	e7ef      	b.n	800c5cc <sbrk_aligned+0x20>
 800c5ec:	20000544 	.word	0x20000544

0800c5f0 <_malloc_r>:
 800c5f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5f2:	2203      	movs	r2, #3
 800c5f4:	1ccb      	adds	r3, r1, #3
 800c5f6:	4393      	bics	r3, r2
 800c5f8:	3308      	adds	r3, #8
 800c5fa:	0005      	movs	r5, r0
 800c5fc:	001f      	movs	r7, r3
 800c5fe:	2b0c      	cmp	r3, #12
 800c600:	d234      	bcs.n	800c66c <_malloc_r+0x7c>
 800c602:	270c      	movs	r7, #12
 800c604:	42b9      	cmp	r1, r7
 800c606:	d833      	bhi.n	800c670 <_malloc_r+0x80>
 800c608:	0028      	movs	r0, r5
 800c60a:	f000 f871 	bl	800c6f0 <__malloc_lock>
 800c60e:	4e37      	ldr	r6, [pc, #220]	@ (800c6ec <_malloc_r+0xfc>)
 800c610:	6833      	ldr	r3, [r6, #0]
 800c612:	001c      	movs	r4, r3
 800c614:	2c00      	cmp	r4, #0
 800c616:	d12f      	bne.n	800c678 <_malloc_r+0x88>
 800c618:	0039      	movs	r1, r7
 800c61a:	0028      	movs	r0, r5
 800c61c:	f7ff ffc6 	bl	800c5ac <sbrk_aligned>
 800c620:	0004      	movs	r4, r0
 800c622:	1c43      	adds	r3, r0, #1
 800c624:	d15f      	bne.n	800c6e6 <_malloc_r+0xf6>
 800c626:	6834      	ldr	r4, [r6, #0]
 800c628:	9400      	str	r4, [sp, #0]
 800c62a:	9b00      	ldr	r3, [sp, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d14a      	bne.n	800c6c6 <_malloc_r+0xd6>
 800c630:	2c00      	cmp	r4, #0
 800c632:	d052      	beq.n	800c6da <_malloc_r+0xea>
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	0028      	movs	r0, r5
 800c638:	18e3      	adds	r3, r4, r3
 800c63a:	9900      	ldr	r1, [sp, #0]
 800c63c:	9301      	str	r3, [sp, #4]
 800c63e:	f000 f8b5 	bl	800c7ac <_sbrk_r>
 800c642:	9b01      	ldr	r3, [sp, #4]
 800c644:	4283      	cmp	r3, r0
 800c646:	d148      	bne.n	800c6da <_malloc_r+0xea>
 800c648:	6823      	ldr	r3, [r4, #0]
 800c64a:	0028      	movs	r0, r5
 800c64c:	1aff      	subs	r7, r7, r3
 800c64e:	0039      	movs	r1, r7
 800c650:	f7ff ffac 	bl	800c5ac <sbrk_aligned>
 800c654:	3001      	adds	r0, #1
 800c656:	d040      	beq.n	800c6da <_malloc_r+0xea>
 800c658:	6823      	ldr	r3, [r4, #0]
 800c65a:	19db      	adds	r3, r3, r7
 800c65c:	6023      	str	r3, [r4, #0]
 800c65e:	6833      	ldr	r3, [r6, #0]
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	2a00      	cmp	r2, #0
 800c664:	d133      	bne.n	800c6ce <_malloc_r+0xde>
 800c666:	9b00      	ldr	r3, [sp, #0]
 800c668:	6033      	str	r3, [r6, #0]
 800c66a:	e019      	b.n	800c6a0 <_malloc_r+0xb0>
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dac9      	bge.n	800c604 <_malloc_r+0x14>
 800c670:	230c      	movs	r3, #12
 800c672:	602b      	str	r3, [r5, #0]
 800c674:	2000      	movs	r0, #0
 800c676:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c678:	6821      	ldr	r1, [r4, #0]
 800c67a:	1bc9      	subs	r1, r1, r7
 800c67c:	d420      	bmi.n	800c6c0 <_malloc_r+0xd0>
 800c67e:	290b      	cmp	r1, #11
 800c680:	d90a      	bls.n	800c698 <_malloc_r+0xa8>
 800c682:	19e2      	adds	r2, r4, r7
 800c684:	6027      	str	r7, [r4, #0]
 800c686:	42a3      	cmp	r3, r4
 800c688:	d104      	bne.n	800c694 <_malloc_r+0xa4>
 800c68a:	6032      	str	r2, [r6, #0]
 800c68c:	6863      	ldr	r3, [r4, #4]
 800c68e:	6011      	str	r1, [r2, #0]
 800c690:	6053      	str	r3, [r2, #4]
 800c692:	e005      	b.n	800c6a0 <_malloc_r+0xb0>
 800c694:	605a      	str	r2, [r3, #4]
 800c696:	e7f9      	b.n	800c68c <_malloc_r+0x9c>
 800c698:	6862      	ldr	r2, [r4, #4]
 800c69a:	42a3      	cmp	r3, r4
 800c69c:	d10e      	bne.n	800c6bc <_malloc_r+0xcc>
 800c69e:	6032      	str	r2, [r6, #0]
 800c6a0:	0028      	movs	r0, r5
 800c6a2:	f000 f82d 	bl	800c700 <__malloc_unlock>
 800c6a6:	0020      	movs	r0, r4
 800c6a8:	2207      	movs	r2, #7
 800c6aa:	300b      	adds	r0, #11
 800c6ac:	1d23      	adds	r3, r4, #4
 800c6ae:	4390      	bics	r0, r2
 800c6b0:	1ac2      	subs	r2, r0, r3
 800c6b2:	4298      	cmp	r0, r3
 800c6b4:	d0df      	beq.n	800c676 <_malloc_r+0x86>
 800c6b6:	1a1b      	subs	r3, r3, r0
 800c6b8:	50a3      	str	r3, [r4, r2]
 800c6ba:	e7dc      	b.n	800c676 <_malloc_r+0x86>
 800c6bc:	605a      	str	r2, [r3, #4]
 800c6be:	e7ef      	b.n	800c6a0 <_malloc_r+0xb0>
 800c6c0:	0023      	movs	r3, r4
 800c6c2:	6864      	ldr	r4, [r4, #4]
 800c6c4:	e7a6      	b.n	800c614 <_malloc_r+0x24>
 800c6c6:	9c00      	ldr	r4, [sp, #0]
 800c6c8:	6863      	ldr	r3, [r4, #4]
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	e7ad      	b.n	800c62a <_malloc_r+0x3a>
 800c6ce:	001a      	movs	r2, r3
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	42a3      	cmp	r3, r4
 800c6d4:	d1fb      	bne.n	800c6ce <_malloc_r+0xde>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e7da      	b.n	800c690 <_malloc_r+0xa0>
 800c6da:	230c      	movs	r3, #12
 800c6dc:	0028      	movs	r0, r5
 800c6de:	602b      	str	r3, [r5, #0]
 800c6e0:	f000 f80e 	bl	800c700 <__malloc_unlock>
 800c6e4:	e7c6      	b.n	800c674 <_malloc_r+0x84>
 800c6e6:	6007      	str	r7, [r0, #0]
 800c6e8:	e7da      	b.n	800c6a0 <_malloc_r+0xb0>
 800c6ea:	46c0      	nop			@ (mov r8, r8)
 800c6ec:	20000548 	.word	0x20000548

0800c6f0 <__malloc_lock>:
 800c6f0:	b510      	push	{r4, lr}
 800c6f2:	4802      	ldr	r0, [pc, #8]	@ (800c6fc <__malloc_lock+0xc>)
 800c6f4:	f000 f896 	bl	800c824 <__retarget_lock_acquire_recursive>
 800c6f8:	bd10      	pop	{r4, pc}
 800c6fa:	46c0      	nop			@ (mov r8, r8)
 800c6fc:	20000688 	.word	0x20000688

0800c700 <__malloc_unlock>:
 800c700:	b510      	push	{r4, lr}
 800c702:	4802      	ldr	r0, [pc, #8]	@ (800c70c <__malloc_unlock+0xc>)
 800c704:	f000 f88f 	bl	800c826 <__retarget_lock_release_recursive>
 800c708:	bd10      	pop	{r4, pc}
 800c70a:	46c0      	nop			@ (mov r8, r8)
 800c70c:	20000688 	.word	0x20000688

0800c710 <asiprintf>:
 800c710:	b40e      	push	{r1, r2, r3}
 800c712:	b530      	push	{r4, r5, lr}
 800c714:	2400      	movs	r4, #0
 800c716:	b09c      	sub	sp, #112	@ 0x70
 800c718:	490c      	ldr	r1, [pc, #48]	@ (800c74c <asiprintf+0x3c>)
 800c71a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c71c:	0005      	movs	r5, r0
 800c71e:	480c      	ldr	r0, [pc, #48]	@ (800c750 <asiprintf+0x40>)
 800c720:	cb04      	ldmia	r3!, {r2}
 800c722:	9105      	str	r1, [sp, #20]
 800c724:	6800      	ldr	r0, [r0, #0]
 800c726:	a902      	add	r1, sp, #8
 800c728:	9402      	str	r4, [sp, #8]
 800c72a:	9404      	str	r4, [sp, #16]
 800c72c:	9406      	str	r4, [sp, #24]
 800c72e:	9407      	str	r4, [sp, #28]
 800c730:	9301      	str	r3, [sp, #4]
 800c732:	f000 f92d 	bl	800c990 <_svfiprintf_r>
 800c736:	42a0      	cmp	r0, r4
 800c738:	db03      	blt.n	800c742 <asiprintf+0x32>
 800c73a:	9b02      	ldr	r3, [sp, #8]
 800c73c:	701c      	strb	r4, [r3, #0]
 800c73e:	9b06      	ldr	r3, [sp, #24]
 800c740:	602b      	str	r3, [r5, #0]
 800c742:	b01c      	add	sp, #112	@ 0x70
 800c744:	bc30      	pop	{r4, r5}
 800c746:	bc08      	pop	{r3}
 800c748:	b003      	add	sp, #12
 800c74a:	4718      	bx	r3
 800c74c:	ffff0288 	.word	0xffff0288
 800c750:	2000015c 	.word	0x2000015c

0800c754 <_vasiprintf_r>:
 800c754:	b530      	push	{r4, r5, lr}
 800c756:	2400      	movs	r4, #0
 800c758:	000d      	movs	r5, r1
 800c75a:	4909      	ldr	r1, [pc, #36]	@ (800c780 <_vasiprintf_r+0x2c>)
 800c75c:	b09b      	sub	sp, #108	@ 0x6c
 800c75e:	9103      	str	r1, [sp, #12]
 800c760:	4669      	mov	r1, sp
 800c762:	9400      	str	r4, [sp, #0]
 800c764:	9402      	str	r4, [sp, #8]
 800c766:	9404      	str	r4, [sp, #16]
 800c768:	9405      	str	r4, [sp, #20]
 800c76a:	f000 f911 	bl	800c990 <_svfiprintf_r>
 800c76e:	42a0      	cmp	r0, r4
 800c770:	db03      	blt.n	800c77a <_vasiprintf_r+0x26>
 800c772:	9b00      	ldr	r3, [sp, #0]
 800c774:	701c      	strb	r4, [r3, #0]
 800c776:	9b04      	ldr	r3, [sp, #16]
 800c778:	602b      	str	r3, [r5, #0]
 800c77a:	b01b      	add	sp, #108	@ 0x6c
 800c77c:	bd30      	pop	{r4, r5, pc}
 800c77e:	46c0      	nop			@ (mov r8, r8)
 800c780:	ffff0288 	.word	0xffff0288

0800c784 <vasiprintf>:
 800c784:	b510      	push	{r4, lr}
 800c786:	4c04      	ldr	r4, [pc, #16]	@ (800c798 <vasiprintf+0x14>)
 800c788:	0013      	movs	r3, r2
 800c78a:	000a      	movs	r2, r1
 800c78c:	0001      	movs	r1, r0
 800c78e:	6820      	ldr	r0, [r4, #0]
 800c790:	f7ff ffe0 	bl	800c754 <_vasiprintf_r>
 800c794:	bd10      	pop	{r4, pc}
 800c796:	46c0      	nop			@ (mov r8, r8)
 800c798:	2000015c 	.word	0x2000015c

0800c79c <memset>:
 800c79c:	0003      	movs	r3, r0
 800c79e:	1882      	adds	r2, r0, r2
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d100      	bne.n	800c7a6 <memset+0xa>
 800c7a4:	4770      	bx	lr
 800c7a6:	7019      	strb	r1, [r3, #0]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	e7f9      	b.n	800c7a0 <memset+0x4>

0800c7ac <_sbrk_r>:
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	b570      	push	{r4, r5, r6, lr}
 800c7b0:	4d06      	ldr	r5, [pc, #24]	@ (800c7cc <_sbrk_r+0x20>)
 800c7b2:	0004      	movs	r4, r0
 800c7b4:	0008      	movs	r0, r1
 800c7b6:	602b      	str	r3, [r5, #0]
 800c7b8:	f7f6 fd2a 	bl	8003210 <_sbrk>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d103      	bne.n	800c7c8 <_sbrk_r+0x1c>
 800c7c0:	682b      	ldr	r3, [r5, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d000      	beq.n	800c7c8 <_sbrk_r+0x1c>
 800c7c6:	6023      	str	r3, [r4, #0]
 800c7c8:	bd70      	pop	{r4, r5, r6, pc}
 800c7ca:	46c0      	nop			@ (mov r8, r8)
 800c7cc:	20000684 	.word	0x20000684

0800c7d0 <__errno>:
 800c7d0:	4b01      	ldr	r3, [pc, #4]	@ (800c7d8 <__errno+0x8>)
 800c7d2:	6818      	ldr	r0, [r3, #0]
 800c7d4:	4770      	bx	lr
 800c7d6:	46c0      	nop			@ (mov r8, r8)
 800c7d8:	2000015c 	.word	0x2000015c

0800c7dc <__libc_init_array>:
 800c7dc:	b570      	push	{r4, r5, r6, lr}
 800c7de:	2600      	movs	r6, #0
 800c7e0:	4c0c      	ldr	r4, [pc, #48]	@ (800c814 <__libc_init_array+0x38>)
 800c7e2:	4d0d      	ldr	r5, [pc, #52]	@ (800c818 <__libc_init_array+0x3c>)
 800c7e4:	1b64      	subs	r4, r4, r5
 800c7e6:	10a4      	asrs	r4, r4, #2
 800c7e8:	42a6      	cmp	r6, r4
 800c7ea:	d109      	bne.n	800c800 <__libc_init_array+0x24>
 800c7ec:	2600      	movs	r6, #0
 800c7ee:	f000 fd1f 	bl	800d230 <_init>
 800c7f2:	4c0a      	ldr	r4, [pc, #40]	@ (800c81c <__libc_init_array+0x40>)
 800c7f4:	4d0a      	ldr	r5, [pc, #40]	@ (800c820 <__libc_init_array+0x44>)
 800c7f6:	1b64      	subs	r4, r4, r5
 800c7f8:	10a4      	asrs	r4, r4, #2
 800c7fa:	42a6      	cmp	r6, r4
 800c7fc:	d105      	bne.n	800c80a <__libc_init_array+0x2e>
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}
 800c800:	00b3      	lsls	r3, r6, #2
 800c802:	58eb      	ldr	r3, [r5, r3]
 800c804:	4798      	blx	r3
 800c806:	3601      	adds	r6, #1
 800c808:	e7ee      	b.n	800c7e8 <__libc_init_array+0xc>
 800c80a:	00b3      	lsls	r3, r6, #2
 800c80c:	58eb      	ldr	r3, [r5, r3]
 800c80e:	4798      	blx	r3
 800c810:	3601      	adds	r6, #1
 800c812:	e7f2      	b.n	800c7fa <__libc_init_array+0x1e>
 800c814:	0800da08 	.word	0x0800da08
 800c818:	0800da08 	.word	0x0800da08
 800c81c:	0800da0c 	.word	0x0800da0c
 800c820:	0800da08 	.word	0x0800da08

0800c824 <__retarget_lock_acquire_recursive>:
 800c824:	4770      	bx	lr

0800c826 <__retarget_lock_release_recursive>:
 800c826:	4770      	bx	lr

0800c828 <memcpy>:
 800c828:	2300      	movs	r3, #0
 800c82a:	b510      	push	{r4, lr}
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d100      	bne.n	800c832 <memcpy+0xa>
 800c830:	bd10      	pop	{r4, pc}
 800c832:	5ccc      	ldrb	r4, [r1, r3]
 800c834:	54c4      	strb	r4, [r0, r3]
 800c836:	3301      	adds	r3, #1
 800c838:	e7f8      	b.n	800c82c <memcpy+0x4>
	...

0800c83c <_free_r>:
 800c83c:	b570      	push	{r4, r5, r6, lr}
 800c83e:	0005      	movs	r5, r0
 800c840:	1e0c      	subs	r4, r1, #0
 800c842:	d010      	beq.n	800c866 <_free_r+0x2a>
 800c844:	3c04      	subs	r4, #4
 800c846:	6823      	ldr	r3, [r4, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	da00      	bge.n	800c84e <_free_r+0x12>
 800c84c:	18e4      	adds	r4, r4, r3
 800c84e:	0028      	movs	r0, r5
 800c850:	f7ff ff4e 	bl	800c6f0 <__malloc_lock>
 800c854:	4a1d      	ldr	r2, [pc, #116]	@ (800c8cc <_free_r+0x90>)
 800c856:	6813      	ldr	r3, [r2, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d105      	bne.n	800c868 <_free_r+0x2c>
 800c85c:	6063      	str	r3, [r4, #4]
 800c85e:	6014      	str	r4, [r2, #0]
 800c860:	0028      	movs	r0, r5
 800c862:	f7ff ff4d 	bl	800c700 <__malloc_unlock>
 800c866:	bd70      	pop	{r4, r5, r6, pc}
 800c868:	42a3      	cmp	r3, r4
 800c86a:	d908      	bls.n	800c87e <_free_r+0x42>
 800c86c:	6820      	ldr	r0, [r4, #0]
 800c86e:	1821      	adds	r1, r4, r0
 800c870:	428b      	cmp	r3, r1
 800c872:	d1f3      	bne.n	800c85c <_free_r+0x20>
 800c874:	6819      	ldr	r1, [r3, #0]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	1809      	adds	r1, r1, r0
 800c87a:	6021      	str	r1, [r4, #0]
 800c87c:	e7ee      	b.n	800c85c <_free_r+0x20>
 800c87e:	001a      	movs	r2, r3
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d001      	beq.n	800c88a <_free_r+0x4e>
 800c886:	42a3      	cmp	r3, r4
 800c888:	d9f9      	bls.n	800c87e <_free_r+0x42>
 800c88a:	6811      	ldr	r1, [r2, #0]
 800c88c:	1850      	adds	r0, r2, r1
 800c88e:	42a0      	cmp	r0, r4
 800c890:	d10b      	bne.n	800c8aa <_free_r+0x6e>
 800c892:	6820      	ldr	r0, [r4, #0]
 800c894:	1809      	adds	r1, r1, r0
 800c896:	1850      	adds	r0, r2, r1
 800c898:	6011      	str	r1, [r2, #0]
 800c89a:	4283      	cmp	r3, r0
 800c89c:	d1e0      	bne.n	800c860 <_free_r+0x24>
 800c89e:	6818      	ldr	r0, [r3, #0]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	1841      	adds	r1, r0, r1
 800c8a4:	6011      	str	r1, [r2, #0]
 800c8a6:	6053      	str	r3, [r2, #4]
 800c8a8:	e7da      	b.n	800c860 <_free_r+0x24>
 800c8aa:	42a0      	cmp	r0, r4
 800c8ac:	d902      	bls.n	800c8b4 <_free_r+0x78>
 800c8ae:	230c      	movs	r3, #12
 800c8b0:	602b      	str	r3, [r5, #0]
 800c8b2:	e7d5      	b.n	800c860 <_free_r+0x24>
 800c8b4:	6820      	ldr	r0, [r4, #0]
 800c8b6:	1821      	adds	r1, r4, r0
 800c8b8:	428b      	cmp	r3, r1
 800c8ba:	d103      	bne.n	800c8c4 <_free_r+0x88>
 800c8bc:	6819      	ldr	r1, [r3, #0]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	1809      	adds	r1, r1, r0
 800c8c2:	6021      	str	r1, [r4, #0]
 800c8c4:	6063      	str	r3, [r4, #4]
 800c8c6:	6054      	str	r4, [r2, #4]
 800c8c8:	e7ca      	b.n	800c860 <_free_r+0x24>
 800c8ca:	46c0      	nop			@ (mov r8, r8)
 800c8cc:	20000548 	.word	0x20000548

0800c8d0 <__ssputs_r>:
 800c8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8d2:	688e      	ldr	r6, [r1, #8]
 800c8d4:	b085      	sub	sp, #20
 800c8d6:	001f      	movs	r7, r3
 800c8d8:	000c      	movs	r4, r1
 800c8da:	680b      	ldr	r3, [r1, #0]
 800c8dc:	9002      	str	r0, [sp, #8]
 800c8de:	9203      	str	r2, [sp, #12]
 800c8e0:	42be      	cmp	r6, r7
 800c8e2:	d830      	bhi.n	800c946 <__ssputs_r+0x76>
 800c8e4:	210c      	movs	r1, #12
 800c8e6:	5e62      	ldrsh	r2, [r4, r1]
 800c8e8:	2190      	movs	r1, #144	@ 0x90
 800c8ea:	00c9      	lsls	r1, r1, #3
 800c8ec:	420a      	tst	r2, r1
 800c8ee:	d028      	beq.n	800c942 <__ssputs_r+0x72>
 800c8f0:	2003      	movs	r0, #3
 800c8f2:	6921      	ldr	r1, [r4, #16]
 800c8f4:	1a5b      	subs	r3, r3, r1
 800c8f6:	9301      	str	r3, [sp, #4]
 800c8f8:	6963      	ldr	r3, [r4, #20]
 800c8fa:	4343      	muls	r3, r0
 800c8fc:	9801      	ldr	r0, [sp, #4]
 800c8fe:	0fdd      	lsrs	r5, r3, #31
 800c900:	18ed      	adds	r5, r5, r3
 800c902:	1c7b      	adds	r3, r7, #1
 800c904:	181b      	adds	r3, r3, r0
 800c906:	106d      	asrs	r5, r5, #1
 800c908:	42ab      	cmp	r3, r5
 800c90a:	d900      	bls.n	800c90e <__ssputs_r+0x3e>
 800c90c:	001d      	movs	r5, r3
 800c90e:	0552      	lsls	r2, r2, #21
 800c910:	d528      	bpl.n	800c964 <__ssputs_r+0x94>
 800c912:	0029      	movs	r1, r5
 800c914:	9802      	ldr	r0, [sp, #8]
 800c916:	f7ff fe6b 	bl	800c5f0 <_malloc_r>
 800c91a:	1e06      	subs	r6, r0, #0
 800c91c:	d02c      	beq.n	800c978 <__ssputs_r+0xa8>
 800c91e:	9a01      	ldr	r2, [sp, #4]
 800c920:	6921      	ldr	r1, [r4, #16]
 800c922:	f7ff ff81 	bl	800c828 <memcpy>
 800c926:	89a2      	ldrh	r2, [r4, #12]
 800c928:	4b18      	ldr	r3, [pc, #96]	@ (800c98c <__ssputs_r+0xbc>)
 800c92a:	401a      	ands	r2, r3
 800c92c:	2380      	movs	r3, #128	@ 0x80
 800c92e:	4313      	orrs	r3, r2
 800c930:	81a3      	strh	r3, [r4, #12]
 800c932:	9b01      	ldr	r3, [sp, #4]
 800c934:	6126      	str	r6, [r4, #16]
 800c936:	18f6      	adds	r6, r6, r3
 800c938:	6026      	str	r6, [r4, #0]
 800c93a:	003e      	movs	r6, r7
 800c93c:	6165      	str	r5, [r4, #20]
 800c93e:	1aed      	subs	r5, r5, r3
 800c940:	60a5      	str	r5, [r4, #8]
 800c942:	42be      	cmp	r6, r7
 800c944:	d900      	bls.n	800c948 <__ssputs_r+0x78>
 800c946:	003e      	movs	r6, r7
 800c948:	0032      	movs	r2, r6
 800c94a:	9903      	ldr	r1, [sp, #12]
 800c94c:	6820      	ldr	r0, [r4, #0]
 800c94e:	f000 fa9b 	bl	800ce88 <memmove>
 800c952:	2000      	movs	r0, #0
 800c954:	68a3      	ldr	r3, [r4, #8]
 800c956:	1b9b      	subs	r3, r3, r6
 800c958:	60a3      	str	r3, [r4, #8]
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	199b      	adds	r3, r3, r6
 800c95e:	6023      	str	r3, [r4, #0]
 800c960:	b005      	add	sp, #20
 800c962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c964:	002a      	movs	r2, r5
 800c966:	9802      	ldr	r0, [sp, #8]
 800c968:	f000 faac 	bl	800cec4 <_realloc_r>
 800c96c:	1e06      	subs	r6, r0, #0
 800c96e:	d1e0      	bne.n	800c932 <__ssputs_r+0x62>
 800c970:	6921      	ldr	r1, [r4, #16]
 800c972:	9802      	ldr	r0, [sp, #8]
 800c974:	f7ff ff62 	bl	800c83c <_free_r>
 800c978:	230c      	movs	r3, #12
 800c97a:	2001      	movs	r0, #1
 800c97c:	9a02      	ldr	r2, [sp, #8]
 800c97e:	4240      	negs	r0, r0
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	89a2      	ldrh	r2, [r4, #12]
 800c984:	3334      	adds	r3, #52	@ 0x34
 800c986:	4313      	orrs	r3, r2
 800c988:	81a3      	strh	r3, [r4, #12]
 800c98a:	e7e9      	b.n	800c960 <__ssputs_r+0x90>
 800c98c:	fffffb7f 	.word	0xfffffb7f

0800c990 <_svfiprintf_r>:
 800c990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c992:	b0a1      	sub	sp, #132	@ 0x84
 800c994:	9003      	str	r0, [sp, #12]
 800c996:	001d      	movs	r5, r3
 800c998:	898b      	ldrh	r3, [r1, #12]
 800c99a:	000f      	movs	r7, r1
 800c99c:	0016      	movs	r6, r2
 800c99e:	061b      	lsls	r3, r3, #24
 800c9a0:	d511      	bpl.n	800c9c6 <_svfiprintf_r+0x36>
 800c9a2:	690b      	ldr	r3, [r1, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10e      	bne.n	800c9c6 <_svfiprintf_r+0x36>
 800c9a8:	2140      	movs	r1, #64	@ 0x40
 800c9aa:	f7ff fe21 	bl	800c5f0 <_malloc_r>
 800c9ae:	6038      	str	r0, [r7, #0]
 800c9b0:	6138      	str	r0, [r7, #16]
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	d105      	bne.n	800c9c2 <_svfiprintf_r+0x32>
 800c9b6:	230c      	movs	r3, #12
 800c9b8:	9a03      	ldr	r2, [sp, #12]
 800c9ba:	6013      	str	r3, [r2, #0]
 800c9bc:	2001      	movs	r0, #1
 800c9be:	4240      	negs	r0, r0
 800c9c0:	e0cf      	b.n	800cb62 <_svfiprintf_r+0x1d2>
 800c9c2:	2340      	movs	r3, #64	@ 0x40
 800c9c4:	617b      	str	r3, [r7, #20]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	ac08      	add	r4, sp, #32
 800c9ca:	6163      	str	r3, [r4, #20]
 800c9cc:	3320      	adds	r3, #32
 800c9ce:	7663      	strb	r3, [r4, #25]
 800c9d0:	3310      	adds	r3, #16
 800c9d2:	76a3      	strb	r3, [r4, #26]
 800c9d4:	9507      	str	r5, [sp, #28]
 800c9d6:	0035      	movs	r5, r6
 800c9d8:	782b      	ldrb	r3, [r5, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d001      	beq.n	800c9e2 <_svfiprintf_r+0x52>
 800c9de:	2b25      	cmp	r3, #37	@ 0x25
 800c9e0:	d148      	bne.n	800ca74 <_svfiprintf_r+0xe4>
 800c9e2:	1bab      	subs	r3, r5, r6
 800c9e4:	9305      	str	r3, [sp, #20]
 800c9e6:	42b5      	cmp	r5, r6
 800c9e8:	d00b      	beq.n	800ca02 <_svfiprintf_r+0x72>
 800c9ea:	0032      	movs	r2, r6
 800c9ec:	0039      	movs	r1, r7
 800c9ee:	9803      	ldr	r0, [sp, #12]
 800c9f0:	f7ff ff6e 	bl	800c8d0 <__ssputs_r>
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	d100      	bne.n	800c9fa <_svfiprintf_r+0x6a>
 800c9f8:	e0ae      	b.n	800cb58 <_svfiprintf_r+0x1c8>
 800c9fa:	6963      	ldr	r3, [r4, #20]
 800c9fc:	9a05      	ldr	r2, [sp, #20]
 800c9fe:	189b      	adds	r3, r3, r2
 800ca00:	6163      	str	r3, [r4, #20]
 800ca02:	782b      	ldrb	r3, [r5, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d100      	bne.n	800ca0a <_svfiprintf_r+0x7a>
 800ca08:	e0a6      	b.n	800cb58 <_svfiprintf_r+0x1c8>
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	4252      	negs	r2, r2
 800ca10:	6062      	str	r2, [r4, #4]
 800ca12:	a904      	add	r1, sp, #16
 800ca14:	3254      	adds	r2, #84	@ 0x54
 800ca16:	1852      	adds	r2, r2, r1
 800ca18:	1c6e      	adds	r6, r5, #1
 800ca1a:	6023      	str	r3, [r4, #0]
 800ca1c:	60e3      	str	r3, [r4, #12]
 800ca1e:	60a3      	str	r3, [r4, #8]
 800ca20:	7013      	strb	r3, [r2, #0]
 800ca22:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ca24:	4b54      	ldr	r3, [pc, #336]	@ (800cb78 <_svfiprintf_r+0x1e8>)
 800ca26:	2205      	movs	r2, #5
 800ca28:	0018      	movs	r0, r3
 800ca2a:	7831      	ldrb	r1, [r6, #0]
 800ca2c:	9305      	str	r3, [sp, #20]
 800ca2e:	f000 fa3e 	bl	800ceae <memchr>
 800ca32:	1c75      	adds	r5, r6, #1
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d11f      	bne.n	800ca78 <_svfiprintf_r+0xe8>
 800ca38:	6822      	ldr	r2, [r4, #0]
 800ca3a:	06d3      	lsls	r3, r2, #27
 800ca3c:	d504      	bpl.n	800ca48 <_svfiprintf_r+0xb8>
 800ca3e:	2353      	movs	r3, #83	@ 0x53
 800ca40:	a904      	add	r1, sp, #16
 800ca42:	185b      	adds	r3, r3, r1
 800ca44:	2120      	movs	r1, #32
 800ca46:	7019      	strb	r1, [r3, #0]
 800ca48:	0713      	lsls	r3, r2, #28
 800ca4a:	d504      	bpl.n	800ca56 <_svfiprintf_r+0xc6>
 800ca4c:	2353      	movs	r3, #83	@ 0x53
 800ca4e:	a904      	add	r1, sp, #16
 800ca50:	185b      	adds	r3, r3, r1
 800ca52:	212b      	movs	r1, #43	@ 0x2b
 800ca54:	7019      	strb	r1, [r3, #0]
 800ca56:	7833      	ldrb	r3, [r6, #0]
 800ca58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca5a:	d016      	beq.n	800ca8a <_svfiprintf_r+0xfa>
 800ca5c:	0035      	movs	r5, r6
 800ca5e:	2100      	movs	r1, #0
 800ca60:	200a      	movs	r0, #10
 800ca62:	68e3      	ldr	r3, [r4, #12]
 800ca64:	782a      	ldrb	r2, [r5, #0]
 800ca66:	1c6e      	adds	r6, r5, #1
 800ca68:	3a30      	subs	r2, #48	@ 0x30
 800ca6a:	2a09      	cmp	r2, #9
 800ca6c:	d950      	bls.n	800cb10 <_svfiprintf_r+0x180>
 800ca6e:	2900      	cmp	r1, #0
 800ca70:	d111      	bne.n	800ca96 <_svfiprintf_r+0x106>
 800ca72:	e017      	b.n	800caa4 <_svfiprintf_r+0x114>
 800ca74:	3501      	adds	r5, #1
 800ca76:	e7af      	b.n	800c9d8 <_svfiprintf_r+0x48>
 800ca78:	9b05      	ldr	r3, [sp, #20]
 800ca7a:	6822      	ldr	r2, [r4, #0]
 800ca7c:	1ac0      	subs	r0, r0, r3
 800ca7e:	2301      	movs	r3, #1
 800ca80:	4083      	lsls	r3, r0
 800ca82:	4313      	orrs	r3, r2
 800ca84:	002e      	movs	r6, r5
 800ca86:	6023      	str	r3, [r4, #0]
 800ca88:	e7cc      	b.n	800ca24 <_svfiprintf_r+0x94>
 800ca8a:	9b07      	ldr	r3, [sp, #28]
 800ca8c:	1d19      	adds	r1, r3, #4
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	9107      	str	r1, [sp, #28]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	db01      	blt.n	800ca9a <_svfiprintf_r+0x10a>
 800ca96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca98:	e004      	b.n	800caa4 <_svfiprintf_r+0x114>
 800ca9a:	425b      	negs	r3, r3
 800ca9c:	60e3      	str	r3, [r4, #12]
 800ca9e:	2302      	movs	r3, #2
 800caa0:	4313      	orrs	r3, r2
 800caa2:	6023      	str	r3, [r4, #0]
 800caa4:	782b      	ldrb	r3, [r5, #0]
 800caa6:	2b2e      	cmp	r3, #46	@ 0x2e
 800caa8:	d10c      	bne.n	800cac4 <_svfiprintf_r+0x134>
 800caaa:	786b      	ldrb	r3, [r5, #1]
 800caac:	2b2a      	cmp	r3, #42	@ 0x2a
 800caae:	d134      	bne.n	800cb1a <_svfiprintf_r+0x18a>
 800cab0:	9b07      	ldr	r3, [sp, #28]
 800cab2:	3502      	adds	r5, #2
 800cab4:	1d1a      	adds	r2, r3, #4
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	9207      	str	r2, [sp, #28]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	da01      	bge.n	800cac2 <_svfiprintf_r+0x132>
 800cabe:	2301      	movs	r3, #1
 800cac0:	425b      	negs	r3, r3
 800cac2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cac4:	4e2d      	ldr	r6, [pc, #180]	@ (800cb7c <_svfiprintf_r+0x1ec>)
 800cac6:	2203      	movs	r2, #3
 800cac8:	0030      	movs	r0, r6
 800caca:	7829      	ldrb	r1, [r5, #0]
 800cacc:	f000 f9ef 	bl	800ceae <memchr>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d006      	beq.n	800cae2 <_svfiprintf_r+0x152>
 800cad4:	2340      	movs	r3, #64	@ 0x40
 800cad6:	1b80      	subs	r0, r0, r6
 800cad8:	4083      	lsls	r3, r0
 800cada:	6822      	ldr	r2, [r4, #0]
 800cadc:	3501      	adds	r5, #1
 800cade:	4313      	orrs	r3, r2
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	7829      	ldrb	r1, [r5, #0]
 800cae4:	2206      	movs	r2, #6
 800cae6:	4826      	ldr	r0, [pc, #152]	@ (800cb80 <_svfiprintf_r+0x1f0>)
 800cae8:	1c6e      	adds	r6, r5, #1
 800caea:	7621      	strb	r1, [r4, #24]
 800caec:	f000 f9df 	bl	800ceae <memchr>
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d038      	beq.n	800cb66 <_svfiprintf_r+0x1d6>
 800caf4:	4b23      	ldr	r3, [pc, #140]	@ (800cb84 <_svfiprintf_r+0x1f4>)
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d122      	bne.n	800cb40 <_svfiprintf_r+0x1b0>
 800cafa:	2207      	movs	r2, #7
 800cafc:	9b07      	ldr	r3, [sp, #28]
 800cafe:	3307      	adds	r3, #7
 800cb00:	4393      	bics	r3, r2
 800cb02:	3308      	adds	r3, #8
 800cb04:	9307      	str	r3, [sp, #28]
 800cb06:	6963      	ldr	r3, [r4, #20]
 800cb08:	9a04      	ldr	r2, [sp, #16]
 800cb0a:	189b      	adds	r3, r3, r2
 800cb0c:	6163      	str	r3, [r4, #20]
 800cb0e:	e762      	b.n	800c9d6 <_svfiprintf_r+0x46>
 800cb10:	4343      	muls	r3, r0
 800cb12:	0035      	movs	r5, r6
 800cb14:	2101      	movs	r1, #1
 800cb16:	189b      	adds	r3, r3, r2
 800cb18:	e7a4      	b.n	800ca64 <_svfiprintf_r+0xd4>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	200a      	movs	r0, #10
 800cb1e:	0019      	movs	r1, r3
 800cb20:	3501      	adds	r5, #1
 800cb22:	6063      	str	r3, [r4, #4]
 800cb24:	782a      	ldrb	r2, [r5, #0]
 800cb26:	1c6e      	adds	r6, r5, #1
 800cb28:	3a30      	subs	r2, #48	@ 0x30
 800cb2a:	2a09      	cmp	r2, #9
 800cb2c:	d903      	bls.n	800cb36 <_svfiprintf_r+0x1a6>
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d0c8      	beq.n	800cac4 <_svfiprintf_r+0x134>
 800cb32:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb34:	e7c6      	b.n	800cac4 <_svfiprintf_r+0x134>
 800cb36:	4341      	muls	r1, r0
 800cb38:	0035      	movs	r5, r6
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	1889      	adds	r1, r1, r2
 800cb3e:	e7f1      	b.n	800cb24 <_svfiprintf_r+0x194>
 800cb40:	aa07      	add	r2, sp, #28
 800cb42:	9200      	str	r2, [sp, #0]
 800cb44:	0021      	movs	r1, r4
 800cb46:	003a      	movs	r2, r7
 800cb48:	4b0f      	ldr	r3, [pc, #60]	@ (800cb88 <_svfiprintf_r+0x1f8>)
 800cb4a:	9803      	ldr	r0, [sp, #12]
 800cb4c:	e000      	b.n	800cb50 <_svfiprintf_r+0x1c0>
 800cb4e:	bf00      	nop
 800cb50:	9004      	str	r0, [sp, #16]
 800cb52:	9b04      	ldr	r3, [sp, #16]
 800cb54:	3301      	adds	r3, #1
 800cb56:	d1d6      	bne.n	800cb06 <_svfiprintf_r+0x176>
 800cb58:	89bb      	ldrh	r3, [r7, #12]
 800cb5a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800cb5c:	065b      	lsls	r3, r3, #25
 800cb5e:	d500      	bpl.n	800cb62 <_svfiprintf_r+0x1d2>
 800cb60:	e72c      	b.n	800c9bc <_svfiprintf_r+0x2c>
 800cb62:	b021      	add	sp, #132	@ 0x84
 800cb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb66:	aa07      	add	r2, sp, #28
 800cb68:	9200      	str	r2, [sp, #0]
 800cb6a:	0021      	movs	r1, r4
 800cb6c:	003a      	movs	r2, r7
 800cb6e:	4b06      	ldr	r3, [pc, #24]	@ (800cb88 <_svfiprintf_r+0x1f8>)
 800cb70:	9803      	ldr	r0, [sp, #12]
 800cb72:	f000 f87b 	bl	800cc6c <_printf_i>
 800cb76:	e7eb      	b.n	800cb50 <_svfiprintf_r+0x1c0>
 800cb78:	0800d9ba 	.word	0x0800d9ba
 800cb7c:	0800d9c0 	.word	0x0800d9c0
 800cb80:	0800d9c4 	.word	0x0800d9c4
 800cb84:	00000000 	.word	0x00000000
 800cb88:	0800c8d1 	.word	0x0800c8d1

0800cb8c <_printf_common>:
 800cb8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb8e:	0016      	movs	r6, r2
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	688a      	ldr	r2, [r1, #8]
 800cb94:	690b      	ldr	r3, [r1, #16]
 800cb96:	000c      	movs	r4, r1
 800cb98:	9000      	str	r0, [sp, #0]
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	da00      	bge.n	800cba0 <_printf_common+0x14>
 800cb9e:	0013      	movs	r3, r2
 800cba0:	0022      	movs	r2, r4
 800cba2:	6033      	str	r3, [r6, #0]
 800cba4:	3243      	adds	r2, #67	@ 0x43
 800cba6:	7812      	ldrb	r2, [r2, #0]
 800cba8:	2a00      	cmp	r2, #0
 800cbaa:	d001      	beq.n	800cbb0 <_printf_common+0x24>
 800cbac:	3301      	adds	r3, #1
 800cbae:	6033      	str	r3, [r6, #0]
 800cbb0:	6823      	ldr	r3, [r4, #0]
 800cbb2:	069b      	lsls	r3, r3, #26
 800cbb4:	d502      	bpl.n	800cbbc <_printf_common+0x30>
 800cbb6:	6833      	ldr	r3, [r6, #0]
 800cbb8:	3302      	adds	r3, #2
 800cbba:	6033      	str	r3, [r6, #0]
 800cbbc:	6822      	ldr	r2, [r4, #0]
 800cbbe:	2306      	movs	r3, #6
 800cbc0:	0015      	movs	r5, r2
 800cbc2:	401d      	ands	r5, r3
 800cbc4:	421a      	tst	r2, r3
 800cbc6:	d027      	beq.n	800cc18 <_printf_common+0x8c>
 800cbc8:	0023      	movs	r3, r4
 800cbca:	3343      	adds	r3, #67	@ 0x43
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	1e5a      	subs	r2, r3, #1
 800cbd0:	4193      	sbcs	r3, r2
 800cbd2:	6822      	ldr	r2, [r4, #0]
 800cbd4:	0692      	lsls	r2, r2, #26
 800cbd6:	d430      	bmi.n	800cc3a <_printf_common+0xae>
 800cbd8:	0022      	movs	r2, r4
 800cbda:	9901      	ldr	r1, [sp, #4]
 800cbdc:	9800      	ldr	r0, [sp, #0]
 800cbde:	9d08      	ldr	r5, [sp, #32]
 800cbe0:	3243      	adds	r2, #67	@ 0x43
 800cbe2:	47a8      	blx	r5
 800cbe4:	3001      	adds	r0, #1
 800cbe6:	d025      	beq.n	800cc34 <_printf_common+0xa8>
 800cbe8:	2206      	movs	r2, #6
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	2500      	movs	r5, #0
 800cbee:	4013      	ands	r3, r2
 800cbf0:	2b04      	cmp	r3, #4
 800cbf2:	d105      	bne.n	800cc00 <_printf_common+0x74>
 800cbf4:	6833      	ldr	r3, [r6, #0]
 800cbf6:	68e5      	ldr	r5, [r4, #12]
 800cbf8:	1aed      	subs	r5, r5, r3
 800cbfa:	43eb      	mvns	r3, r5
 800cbfc:	17db      	asrs	r3, r3, #31
 800cbfe:	401d      	ands	r5, r3
 800cc00:	68a3      	ldr	r3, [r4, #8]
 800cc02:	6922      	ldr	r2, [r4, #16]
 800cc04:	4293      	cmp	r3, r2
 800cc06:	dd01      	ble.n	800cc0c <_printf_common+0x80>
 800cc08:	1a9b      	subs	r3, r3, r2
 800cc0a:	18ed      	adds	r5, r5, r3
 800cc0c:	2600      	movs	r6, #0
 800cc0e:	42b5      	cmp	r5, r6
 800cc10:	d120      	bne.n	800cc54 <_printf_common+0xc8>
 800cc12:	2000      	movs	r0, #0
 800cc14:	e010      	b.n	800cc38 <_printf_common+0xac>
 800cc16:	3501      	adds	r5, #1
 800cc18:	68e3      	ldr	r3, [r4, #12]
 800cc1a:	6832      	ldr	r2, [r6, #0]
 800cc1c:	1a9b      	subs	r3, r3, r2
 800cc1e:	42ab      	cmp	r3, r5
 800cc20:	ddd2      	ble.n	800cbc8 <_printf_common+0x3c>
 800cc22:	0022      	movs	r2, r4
 800cc24:	2301      	movs	r3, #1
 800cc26:	9901      	ldr	r1, [sp, #4]
 800cc28:	9800      	ldr	r0, [sp, #0]
 800cc2a:	9f08      	ldr	r7, [sp, #32]
 800cc2c:	3219      	adds	r2, #25
 800cc2e:	47b8      	blx	r7
 800cc30:	3001      	adds	r0, #1
 800cc32:	d1f0      	bne.n	800cc16 <_printf_common+0x8a>
 800cc34:	2001      	movs	r0, #1
 800cc36:	4240      	negs	r0, r0
 800cc38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc3a:	2030      	movs	r0, #48	@ 0x30
 800cc3c:	18e1      	adds	r1, r4, r3
 800cc3e:	3143      	adds	r1, #67	@ 0x43
 800cc40:	7008      	strb	r0, [r1, #0]
 800cc42:	0021      	movs	r1, r4
 800cc44:	1c5a      	adds	r2, r3, #1
 800cc46:	3145      	adds	r1, #69	@ 0x45
 800cc48:	7809      	ldrb	r1, [r1, #0]
 800cc4a:	18a2      	adds	r2, r4, r2
 800cc4c:	3243      	adds	r2, #67	@ 0x43
 800cc4e:	3302      	adds	r3, #2
 800cc50:	7011      	strb	r1, [r2, #0]
 800cc52:	e7c1      	b.n	800cbd8 <_printf_common+0x4c>
 800cc54:	0022      	movs	r2, r4
 800cc56:	2301      	movs	r3, #1
 800cc58:	9901      	ldr	r1, [sp, #4]
 800cc5a:	9800      	ldr	r0, [sp, #0]
 800cc5c:	9f08      	ldr	r7, [sp, #32]
 800cc5e:	321a      	adds	r2, #26
 800cc60:	47b8      	blx	r7
 800cc62:	3001      	adds	r0, #1
 800cc64:	d0e6      	beq.n	800cc34 <_printf_common+0xa8>
 800cc66:	3601      	adds	r6, #1
 800cc68:	e7d1      	b.n	800cc0e <_printf_common+0x82>
	...

0800cc6c <_printf_i>:
 800cc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc6e:	b08b      	sub	sp, #44	@ 0x2c
 800cc70:	9206      	str	r2, [sp, #24]
 800cc72:	000a      	movs	r2, r1
 800cc74:	3243      	adds	r2, #67	@ 0x43
 800cc76:	9307      	str	r3, [sp, #28]
 800cc78:	9005      	str	r0, [sp, #20]
 800cc7a:	9203      	str	r2, [sp, #12]
 800cc7c:	7e0a      	ldrb	r2, [r1, #24]
 800cc7e:	000c      	movs	r4, r1
 800cc80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cc82:	2a78      	cmp	r2, #120	@ 0x78
 800cc84:	d809      	bhi.n	800cc9a <_printf_i+0x2e>
 800cc86:	2a62      	cmp	r2, #98	@ 0x62
 800cc88:	d80b      	bhi.n	800cca2 <_printf_i+0x36>
 800cc8a:	2a00      	cmp	r2, #0
 800cc8c:	d100      	bne.n	800cc90 <_printf_i+0x24>
 800cc8e:	e0bc      	b.n	800ce0a <_printf_i+0x19e>
 800cc90:	497b      	ldr	r1, [pc, #492]	@ (800ce80 <_printf_i+0x214>)
 800cc92:	9104      	str	r1, [sp, #16]
 800cc94:	2a58      	cmp	r2, #88	@ 0x58
 800cc96:	d100      	bne.n	800cc9a <_printf_i+0x2e>
 800cc98:	e090      	b.n	800cdbc <_printf_i+0x150>
 800cc9a:	0025      	movs	r5, r4
 800cc9c:	3542      	adds	r5, #66	@ 0x42
 800cc9e:	702a      	strb	r2, [r5, #0]
 800cca0:	e022      	b.n	800cce8 <_printf_i+0x7c>
 800cca2:	0010      	movs	r0, r2
 800cca4:	3863      	subs	r0, #99	@ 0x63
 800cca6:	2815      	cmp	r0, #21
 800cca8:	d8f7      	bhi.n	800cc9a <_printf_i+0x2e>
 800ccaa:	f7f3 fa35 	bl	8000118 <__gnu_thumb1_case_shi>
 800ccae:	0016      	.short	0x0016
 800ccb0:	fff6001f 	.word	0xfff6001f
 800ccb4:	fff6fff6 	.word	0xfff6fff6
 800ccb8:	001ffff6 	.word	0x001ffff6
 800ccbc:	fff6fff6 	.word	0xfff6fff6
 800ccc0:	fff6fff6 	.word	0xfff6fff6
 800ccc4:	003600a1 	.word	0x003600a1
 800ccc8:	fff60080 	.word	0xfff60080
 800cccc:	00b2fff6 	.word	0x00b2fff6
 800ccd0:	0036fff6 	.word	0x0036fff6
 800ccd4:	fff6fff6 	.word	0xfff6fff6
 800ccd8:	0084      	.short	0x0084
 800ccda:	0025      	movs	r5, r4
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	3542      	adds	r5, #66	@ 0x42
 800cce0:	1d11      	adds	r1, r2, #4
 800cce2:	6019      	str	r1, [r3, #0]
 800cce4:	6813      	ldr	r3, [r2, #0]
 800cce6:	702b      	strb	r3, [r5, #0]
 800cce8:	2301      	movs	r3, #1
 800ccea:	e0a0      	b.n	800ce2e <_printf_i+0x1c2>
 800ccec:	6818      	ldr	r0, [r3, #0]
 800ccee:	6809      	ldr	r1, [r1, #0]
 800ccf0:	1d02      	adds	r2, r0, #4
 800ccf2:	060d      	lsls	r5, r1, #24
 800ccf4:	d50b      	bpl.n	800cd0e <_printf_i+0xa2>
 800ccf6:	6806      	ldr	r6, [r0, #0]
 800ccf8:	601a      	str	r2, [r3, #0]
 800ccfa:	2e00      	cmp	r6, #0
 800ccfc:	da03      	bge.n	800cd06 <_printf_i+0x9a>
 800ccfe:	232d      	movs	r3, #45	@ 0x2d
 800cd00:	9a03      	ldr	r2, [sp, #12]
 800cd02:	4276      	negs	r6, r6
 800cd04:	7013      	strb	r3, [r2, #0]
 800cd06:	4b5e      	ldr	r3, [pc, #376]	@ (800ce80 <_printf_i+0x214>)
 800cd08:	270a      	movs	r7, #10
 800cd0a:	9304      	str	r3, [sp, #16]
 800cd0c:	e018      	b.n	800cd40 <_printf_i+0xd4>
 800cd0e:	6806      	ldr	r6, [r0, #0]
 800cd10:	601a      	str	r2, [r3, #0]
 800cd12:	0649      	lsls	r1, r1, #25
 800cd14:	d5f1      	bpl.n	800ccfa <_printf_i+0x8e>
 800cd16:	b236      	sxth	r6, r6
 800cd18:	e7ef      	b.n	800ccfa <_printf_i+0x8e>
 800cd1a:	6808      	ldr	r0, [r1, #0]
 800cd1c:	6819      	ldr	r1, [r3, #0]
 800cd1e:	c940      	ldmia	r1!, {r6}
 800cd20:	0605      	lsls	r5, r0, #24
 800cd22:	d402      	bmi.n	800cd2a <_printf_i+0xbe>
 800cd24:	0640      	lsls	r0, r0, #25
 800cd26:	d500      	bpl.n	800cd2a <_printf_i+0xbe>
 800cd28:	b2b6      	uxth	r6, r6
 800cd2a:	6019      	str	r1, [r3, #0]
 800cd2c:	4b54      	ldr	r3, [pc, #336]	@ (800ce80 <_printf_i+0x214>)
 800cd2e:	270a      	movs	r7, #10
 800cd30:	9304      	str	r3, [sp, #16]
 800cd32:	2a6f      	cmp	r2, #111	@ 0x6f
 800cd34:	d100      	bne.n	800cd38 <_printf_i+0xcc>
 800cd36:	3f02      	subs	r7, #2
 800cd38:	0023      	movs	r3, r4
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	3343      	adds	r3, #67	@ 0x43
 800cd3e:	701a      	strb	r2, [r3, #0]
 800cd40:	6863      	ldr	r3, [r4, #4]
 800cd42:	60a3      	str	r3, [r4, #8]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	db03      	blt.n	800cd50 <_printf_i+0xe4>
 800cd48:	2104      	movs	r1, #4
 800cd4a:	6822      	ldr	r2, [r4, #0]
 800cd4c:	438a      	bics	r2, r1
 800cd4e:	6022      	str	r2, [r4, #0]
 800cd50:	2e00      	cmp	r6, #0
 800cd52:	d102      	bne.n	800cd5a <_printf_i+0xee>
 800cd54:	9d03      	ldr	r5, [sp, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00c      	beq.n	800cd74 <_printf_i+0x108>
 800cd5a:	9d03      	ldr	r5, [sp, #12]
 800cd5c:	0030      	movs	r0, r6
 800cd5e:	0039      	movs	r1, r7
 800cd60:	f7f3 fa6a 	bl	8000238 <__aeabi_uidivmod>
 800cd64:	9b04      	ldr	r3, [sp, #16]
 800cd66:	3d01      	subs	r5, #1
 800cd68:	5c5b      	ldrb	r3, [r3, r1]
 800cd6a:	702b      	strb	r3, [r5, #0]
 800cd6c:	0033      	movs	r3, r6
 800cd6e:	0006      	movs	r6, r0
 800cd70:	429f      	cmp	r7, r3
 800cd72:	d9f3      	bls.n	800cd5c <_printf_i+0xf0>
 800cd74:	2f08      	cmp	r7, #8
 800cd76:	d109      	bne.n	800cd8c <_printf_i+0x120>
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	07db      	lsls	r3, r3, #31
 800cd7c:	d506      	bpl.n	800cd8c <_printf_i+0x120>
 800cd7e:	6862      	ldr	r2, [r4, #4]
 800cd80:	6923      	ldr	r3, [r4, #16]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	dc02      	bgt.n	800cd8c <_printf_i+0x120>
 800cd86:	2330      	movs	r3, #48	@ 0x30
 800cd88:	3d01      	subs	r5, #1
 800cd8a:	702b      	strb	r3, [r5, #0]
 800cd8c:	9b03      	ldr	r3, [sp, #12]
 800cd8e:	1b5b      	subs	r3, r3, r5
 800cd90:	6123      	str	r3, [r4, #16]
 800cd92:	9b07      	ldr	r3, [sp, #28]
 800cd94:	0021      	movs	r1, r4
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	9805      	ldr	r0, [sp, #20]
 800cd9a:	9b06      	ldr	r3, [sp, #24]
 800cd9c:	aa09      	add	r2, sp, #36	@ 0x24
 800cd9e:	f7ff fef5 	bl	800cb8c <_printf_common>
 800cda2:	3001      	adds	r0, #1
 800cda4:	d148      	bne.n	800ce38 <_printf_i+0x1cc>
 800cda6:	2001      	movs	r0, #1
 800cda8:	4240      	negs	r0, r0
 800cdaa:	b00b      	add	sp, #44	@ 0x2c
 800cdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdae:	2220      	movs	r2, #32
 800cdb0:	6809      	ldr	r1, [r1, #0]
 800cdb2:	430a      	orrs	r2, r1
 800cdb4:	6022      	str	r2, [r4, #0]
 800cdb6:	2278      	movs	r2, #120	@ 0x78
 800cdb8:	4932      	ldr	r1, [pc, #200]	@ (800ce84 <_printf_i+0x218>)
 800cdba:	9104      	str	r1, [sp, #16]
 800cdbc:	0021      	movs	r1, r4
 800cdbe:	3145      	adds	r1, #69	@ 0x45
 800cdc0:	700a      	strb	r2, [r1, #0]
 800cdc2:	6819      	ldr	r1, [r3, #0]
 800cdc4:	6822      	ldr	r2, [r4, #0]
 800cdc6:	c940      	ldmia	r1!, {r6}
 800cdc8:	0610      	lsls	r0, r2, #24
 800cdca:	d402      	bmi.n	800cdd2 <_printf_i+0x166>
 800cdcc:	0650      	lsls	r0, r2, #25
 800cdce:	d500      	bpl.n	800cdd2 <_printf_i+0x166>
 800cdd0:	b2b6      	uxth	r6, r6
 800cdd2:	6019      	str	r1, [r3, #0]
 800cdd4:	07d3      	lsls	r3, r2, #31
 800cdd6:	d502      	bpl.n	800cdde <_printf_i+0x172>
 800cdd8:	2320      	movs	r3, #32
 800cdda:	4313      	orrs	r3, r2
 800cddc:	6023      	str	r3, [r4, #0]
 800cdde:	2e00      	cmp	r6, #0
 800cde0:	d001      	beq.n	800cde6 <_printf_i+0x17a>
 800cde2:	2710      	movs	r7, #16
 800cde4:	e7a8      	b.n	800cd38 <_printf_i+0xcc>
 800cde6:	2220      	movs	r2, #32
 800cde8:	6823      	ldr	r3, [r4, #0]
 800cdea:	4393      	bics	r3, r2
 800cdec:	6023      	str	r3, [r4, #0]
 800cdee:	e7f8      	b.n	800cde2 <_printf_i+0x176>
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	680d      	ldr	r5, [r1, #0]
 800cdf4:	1d10      	adds	r0, r2, #4
 800cdf6:	6949      	ldr	r1, [r1, #20]
 800cdf8:	6018      	str	r0, [r3, #0]
 800cdfa:	6813      	ldr	r3, [r2, #0]
 800cdfc:	062e      	lsls	r6, r5, #24
 800cdfe:	d501      	bpl.n	800ce04 <_printf_i+0x198>
 800ce00:	6019      	str	r1, [r3, #0]
 800ce02:	e002      	b.n	800ce0a <_printf_i+0x19e>
 800ce04:	066d      	lsls	r5, r5, #25
 800ce06:	d5fb      	bpl.n	800ce00 <_printf_i+0x194>
 800ce08:	8019      	strh	r1, [r3, #0]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	9d03      	ldr	r5, [sp, #12]
 800ce0e:	6123      	str	r3, [r4, #16]
 800ce10:	e7bf      	b.n	800cd92 <_printf_i+0x126>
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	1d11      	adds	r1, r2, #4
 800ce16:	6019      	str	r1, [r3, #0]
 800ce18:	6815      	ldr	r5, [r2, #0]
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	0028      	movs	r0, r5
 800ce1e:	6862      	ldr	r2, [r4, #4]
 800ce20:	f000 f845 	bl	800ceae <memchr>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d001      	beq.n	800ce2c <_printf_i+0x1c0>
 800ce28:	1b40      	subs	r0, r0, r5
 800ce2a:	6060      	str	r0, [r4, #4]
 800ce2c:	6863      	ldr	r3, [r4, #4]
 800ce2e:	6123      	str	r3, [r4, #16]
 800ce30:	2300      	movs	r3, #0
 800ce32:	9a03      	ldr	r2, [sp, #12]
 800ce34:	7013      	strb	r3, [r2, #0]
 800ce36:	e7ac      	b.n	800cd92 <_printf_i+0x126>
 800ce38:	002a      	movs	r2, r5
 800ce3a:	6923      	ldr	r3, [r4, #16]
 800ce3c:	9906      	ldr	r1, [sp, #24]
 800ce3e:	9805      	ldr	r0, [sp, #20]
 800ce40:	9d07      	ldr	r5, [sp, #28]
 800ce42:	47a8      	blx	r5
 800ce44:	3001      	adds	r0, #1
 800ce46:	d0ae      	beq.n	800cda6 <_printf_i+0x13a>
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	079b      	lsls	r3, r3, #30
 800ce4c:	d415      	bmi.n	800ce7a <_printf_i+0x20e>
 800ce4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce50:	68e0      	ldr	r0, [r4, #12]
 800ce52:	4298      	cmp	r0, r3
 800ce54:	daa9      	bge.n	800cdaa <_printf_i+0x13e>
 800ce56:	0018      	movs	r0, r3
 800ce58:	e7a7      	b.n	800cdaa <_printf_i+0x13e>
 800ce5a:	0022      	movs	r2, r4
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	9906      	ldr	r1, [sp, #24]
 800ce60:	9805      	ldr	r0, [sp, #20]
 800ce62:	9e07      	ldr	r6, [sp, #28]
 800ce64:	3219      	adds	r2, #25
 800ce66:	47b0      	blx	r6
 800ce68:	3001      	adds	r0, #1
 800ce6a:	d09c      	beq.n	800cda6 <_printf_i+0x13a>
 800ce6c:	3501      	adds	r5, #1
 800ce6e:	68e3      	ldr	r3, [r4, #12]
 800ce70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce72:	1a9b      	subs	r3, r3, r2
 800ce74:	42ab      	cmp	r3, r5
 800ce76:	dcf0      	bgt.n	800ce5a <_printf_i+0x1ee>
 800ce78:	e7e9      	b.n	800ce4e <_printf_i+0x1e2>
 800ce7a:	2500      	movs	r5, #0
 800ce7c:	e7f7      	b.n	800ce6e <_printf_i+0x202>
 800ce7e:	46c0      	nop			@ (mov r8, r8)
 800ce80:	0800d9cb 	.word	0x0800d9cb
 800ce84:	0800d9dc 	.word	0x0800d9dc

0800ce88 <memmove>:
 800ce88:	b510      	push	{r4, lr}
 800ce8a:	4288      	cmp	r0, r1
 800ce8c:	d806      	bhi.n	800ce9c <memmove+0x14>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d008      	beq.n	800cea6 <memmove+0x1e>
 800ce94:	5ccc      	ldrb	r4, [r1, r3]
 800ce96:	54c4      	strb	r4, [r0, r3]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	e7f9      	b.n	800ce90 <memmove+0x8>
 800ce9c:	188b      	adds	r3, r1, r2
 800ce9e:	4298      	cmp	r0, r3
 800cea0:	d2f5      	bcs.n	800ce8e <memmove+0x6>
 800cea2:	3a01      	subs	r2, #1
 800cea4:	d200      	bcs.n	800cea8 <memmove+0x20>
 800cea6:	bd10      	pop	{r4, pc}
 800cea8:	5c8b      	ldrb	r3, [r1, r2]
 800ceaa:	5483      	strb	r3, [r0, r2]
 800ceac:	e7f9      	b.n	800cea2 <memmove+0x1a>

0800ceae <memchr>:
 800ceae:	b2c9      	uxtb	r1, r1
 800ceb0:	1882      	adds	r2, r0, r2
 800ceb2:	4290      	cmp	r0, r2
 800ceb4:	d101      	bne.n	800ceba <memchr+0xc>
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	4770      	bx	lr
 800ceba:	7803      	ldrb	r3, [r0, #0]
 800cebc:	428b      	cmp	r3, r1
 800cebe:	d0fb      	beq.n	800ceb8 <memchr+0xa>
 800cec0:	3001      	adds	r0, #1
 800cec2:	e7f6      	b.n	800ceb2 <memchr+0x4>

0800cec4 <_realloc_r>:
 800cec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cec6:	0006      	movs	r6, r0
 800cec8:	000c      	movs	r4, r1
 800ceca:	0015      	movs	r5, r2
 800cecc:	2900      	cmp	r1, #0
 800cece:	d105      	bne.n	800cedc <_realloc_r+0x18>
 800ced0:	0011      	movs	r1, r2
 800ced2:	f7ff fb8d 	bl	800c5f0 <_malloc_r>
 800ced6:	0004      	movs	r4, r0
 800ced8:	0020      	movs	r0, r4
 800ceda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cedc:	2a00      	cmp	r2, #0
 800cede:	d103      	bne.n	800cee8 <_realloc_r+0x24>
 800cee0:	f7ff fcac 	bl	800c83c <_free_r>
 800cee4:	2400      	movs	r4, #0
 800cee6:	e7f7      	b.n	800ced8 <_realloc_r+0x14>
 800cee8:	f000 f81b 	bl	800cf22 <_malloc_usable_size_r>
 800ceec:	0007      	movs	r7, r0
 800ceee:	4285      	cmp	r5, r0
 800cef0:	d802      	bhi.n	800cef8 <_realloc_r+0x34>
 800cef2:	0843      	lsrs	r3, r0, #1
 800cef4:	42ab      	cmp	r3, r5
 800cef6:	d3ef      	bcc.n	800ced8 <_realloc_r+0x14>
 800cef8:	0029      	movs	r1, r5
 800cefa:	0030      	movs	r0, r6
 800cefc:	f7ff fb78 	bl	800c5f0 <_malloc_r>
 800cf00:	9001      	str	r0, [sp, #4]
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d0ee      	beq.n	800cee4 <_realloc_r+0x20>
 800cf06:	002a      	movs	r2, r5
 800cf08:	42bd      	cmp	r5, r7
 800cf0a:	d900      	bls.n	800cf0e <_realloc_r+0x4a>
 800cf0c:	003a      	movs	r2, r7
 800cf0e:	0021      	movs	r1, r4
 800cf10:	9801      	ldr	r0, [sp, #4]
 800cf12:	f7ff fc89 	bl	800c828 <memcpy>
 800cf16:	0021      	movs	r1, r4
 800cf18:	0030      	movs	r0, r6
 800cf1a:	f7ff fc8f 	bl	800c83c <_free_r>
 800cf1e:	9c01      	ldr	r4, [sp, #4]
 800cf20:	e7da      	b.n	800ced8 <_realloc_r+0x14>

0800cf22 <_malloc_usable_size_r>:
 800cf22:	1f0b      	subs	r3, r1, #4
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	1f18      	subs	r0, r3, #4
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	da01      	bge.n	800cf30 <_malloc_usable_size_r+0xe>
 800cf2c:	580b      	ldr	r3, [r1, r0]
 800cf2e:	18c0      	adds	r0, r0, r3
 800cf30:	4770      	bx	lr
	...

0800cf34 <ceil>:
 800cf34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf36:	004b      	lsls	r3, r1, #1
 800cf38:	4a34      	ldr	r2, [pc, #208]	@ (800d00c <ceil+0xd8>)
 800cf3a:	0d5b      	lsrs	r3, r3, #21
 800cf3c:	189e      	adds	r6, r3, r2
 800cf3e:	000d      	movs	r5, r1
 800cf40:	0004      	movs	r4, r0
 800cf42:	9001      	str	r0, [sp, #4]
 800cf44:	2e13      	cmp	r6, #19
 800cf46:	dc2e      	bgt.n	800cfa6 <ceil+0x72>
 800cf48:	2e00      	cmp	r6, #0
 800cf4a:	da11      	bge.n	800cf70 <ceil+0x3c>
 800cf4c:	4a30      	ldr	r2, [pc, #192]	@ (800d010 <ceil+0xdc>)
 800cf4e:	4b31      	ldr	r3, [pc, #196]	@ (800d014 <ceil+0xe0>)
 800cf50:	f7f3 fbc8 	bl	80006e4 <__aeabi_dadd>
 800cf54:	2200      	movs	r2, #0
 800cf56:	2300      	movs	r3, #0
 800cf58:	f7f3 fa88 	bl	800046c <__aeabi_dcmpgt>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d01f      	beq.n	800cfa0 <ceil+0x6c>
 800cf60:	2d00      	cmp	r5, #0
 800cf62:	db4f      	blt.n	800d004 <ceil+0xd0>
 800cf64:	432c      	orrs	r4, r5
 800cf66:	1e25      	subs	r5, r4, #0
 800cf68:	d01a      	beq.n	800cfa0 <ceil+0x6c>
 800cf6a:	2400      	movs	r4, #0
 800cf6c:	4d2a      	ldr	r5, [pc, #168]	@ (800d018 <ceil+0xe4>)
 800cf6e:	e017      	b.n	800cfa0 <ceil+0x6c>
 800cf70:	4f2a      	ldr	r7, [pc, #168]	@ (800d01c <ceil+0xe8>)
 800cf72:	4137      	asrs	r7, r6
 800cf74:	003b      	movs	r3, r7
 800cf76:	400b      	ands	r3, r1
 800cf78:	4303      	orrs	r3, r0
 800cf7a:	d01e      	beq.n	800cfba <ceil+0x86>
 800cf7c:	4a24      	ldr	r2, [pc, #144]	@ (800d010 <ceil+0xdc>)
 800cf7e:	4b25      	ldr	r3, [pc, #148]	@ (800d014 <ceil+0xe0>)
 800cf80:	f7f3 fbb0 	bl	80006e4 <__aeabi_dadd>
 800cf84:	2200      	movs	r2, #0
 800cf86:	2300      	movs	r3, #0
 800cf88:	f7f3 fa70 	bl	800046c <__aeabi_dcmpgt>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d007      	beq.n	800cfa0 <ceil+0x6c>
 800cf90:	2d00      	cmp	r5, #0
 800cf92:	dd03      	ble.n	800cf9c <ceil+0x68>
 800cf94:	2380      	movs	r3, #128	@ 0x80
 800cf96:	035b      	lsls	r3, r3, #13
 800cf98:	4133      	asrs	r3, r6
 800cf9a:	18ed      	adds	r5, r5, r3
 800cf9c:	2400      	movs	r4, #0
 800cf9e:	43bd      	bics	r5, r7
 800cfa0:	0029      	movs	r1, r5
 800cfa2:	0020      	movs	r0, r4
 800cfa4:	e009      	b.n	800cfba <ceil+0x86>
 800cfa6:	2e33      	cmp	r6, #51	@ 0x33
 800cfa8:	dd09      	ble.n	800cfbe <ceil+0x8a>
 800cfaa:	2380      	movs	r3, #128	@ 0x80
 800cfac:	00db      	lsls	r3, r3, #3
 800cfae:	429e      	cmp	r6, r3
 800cfb0:	d103      	bne.n	800cfba <ceil+0x86>
 800cfb2:	0002      	movs	r2, r0
 800cfb4:	000b      	movs	r3, r1
 800cfb6:	f7f3 fb95 	bl	80006e4 <__aeabi_dadd>
 800cfba:	b003      	add	sp, #12
 800cfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfbe:	2701      	movs	r7, #1
 800cfc0:	4a17      	ldr	r2, [pc, #92]	@ (800d020 <ceil+0xec>)
 800cfc2:	427f      	negs	r7, r7
 800cfc4:	189b      	adds	r3, r3, r2
 800cfc6:	40df      	lsrs	r7, r3
 800cfc8:	4207      	tst	r7, r0
 800cfca:	d0f6      	beq.n	800cfba <ceil+0x86>
 800cfcc:	4a10      	ldr	r2, [pc, #64]	@ (800d010 <ceil+0xdc>)
 800cfce:	4b11      	ldr	r3, [pc, #68]	@ (800d014 <ceil+0xe0>)
 800cfd0:	f7f3 fb88 	bl	80006e4 <__aeabi_dadd>
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	f7f3 fa48 	bl	800046c <__aeabi_dcmpgt>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d0df      	beq.n	800cfa0 <ceil+0x6c>
 800cfe0:	2d00      	cmp	r5, #0
 800cfe2:	dd02      	ble.n	800cfea <ceil+0xb6>
 800cfe4:	2e14      	cmp	r6, #20
 800cfe6:	d102      	bne.n	800cfee <ceil+0xba>
 800cfe8:	3501      	adds	r5, #1
 800cfea:	43bc      	bics	r4, r7
 800cfec:	e7d8      	b.n	800cfa0 <ceil+0x6c>
 800cfee:	2234      	movs	r2, #52	@ 0x34
 800cff0:	2301      	movs	r3, #1
 800cff2:	1b92      	subs	r2, r2, r6
 800cff4:	4093      	lsls	r3, r2
 800cff6:	18e4      	adds	r4, r4, r3
 800cff8:	9b01      	ldr	r3, [sp, #4]
 800cffa:	429c      	cmp	r4, r3
 800cffc:	419b      	sbcs	r3, r3
 800cffe:	425b      	negs	r3, r3
 800d000:	18ed      	adds	r5, r5, r3
 800d002:	e7f2      	b.n	800cfea <ceil+0xb6>
 800d004:	2580      	movs	r5, #128	@ 0x80
 800d006:	2400      	movs	r4, #0
 800d008:	062d      	lsls	r5, r5, #24
 800d00a:	e7c9      	b.n	800cfa0 <ceil+0x6c>
 800d00c:	fffffc01 	.word	0xfffffc01
 800d010:	8800759c 	.word	0x8800759c
 800d014:	7e37e43c 	.word	0x7e37e43c
 800d018:	3ff00000 	.word	0x3ff00000
 800d01c:	000fffff 	.word	0x000fffff
 800d020:	fffffbed 	.word	0xfffffbed

0800d024 <floor>:
 800d024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d026:	004b      	lsls	r3, r1, #1
 800d028:	4a36      	ldr	r2, [pc, #216]	@ (800d104 <floor+0xe0>)
 800d02a:	0d5b      	lsrs	r3, r3, #21
 800d02c:	189e      	adds	r6, r3, r2
 800d02e:	000c      	movs	r4, r1
 800d030:	0005      	movs	r5, r0
 800d032:	9001      	str	r0, [sp, #4]
 800d034:	2e13      	cmp	r6, #19
 800d036:	dc2f      	bgt.n	800d098 <floor+0x74>
 800d038:	2e00      	cmp	r6, #0
 800d03a:	da14      	bge.n	800d066 <floor+0x42>
 800d03c:	4a32      	ldr	r2, [pc, #200]	@ (800d108 <floor+0xe4>)
 800d03e:	4b33      	ldr	r3, [pc, #204]	@ (800d10c <floor+0xe8>)
 800d040:	f7f3 fb50 	bl	80006e4 <__aeabi_dadd>
 800d044:	2200      	movs	r2, #0
 800d046:	2300      	movs	r3, #0
 800d048:	f7f3 fa10 	bl	800046c <__aeabi_dcmpgt>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	d007      	beq.n	800d060 <floor+0x3c>
 800d050:	2c00      	cmp	r4, #0
 800d052:	da50      	bge.n	800d0f6 <floor+0xd2>
 800d054:	0064      	lsls	r4, r4, #1
 800d056:	0864      	lsrs	r4, r4, #1
 800d058:	4325      	orrs	r5, r4
 800d05a:	d14f      	bne.n	800d0fc <floor+0xd8>
 800d05c:	2480      	movs	r4, #128	@ 0x80
 800d05e:	0624      	lsls	r4, r4, #24
 800d060:	0021      	movs	r1, r4
 800d062:	0028      	movs	r0, r5
 800d064:	e022      	b.n	800d0ac <floor+0x88>
 800d066:	4f2a      	ldr	r7, [pc, #168]	@ (800d110 <floor+0xec>)
 800d068:	4137      	asrs	r7, r6
 800d06a:	003b      	movs	r3, r7
 800d06c:	400b      	ands	r3, r1
 800d06e:	4303      	orrs	r3, r0
 800d070:	d01c      	beq.n	800d0ac <floor+0x88>
 800d072:	4a25      	ldr	r2, [pc, #148]	@ (800d108 <floor+0xe4>)
 800d074:	4b25      	ldr	r3, [pc, #148]	@ (800d10c <floor+0xe8>)
 800d076:	f7f3 fb35 	bl	80006e4 <__aeabi_dadd>
 800d07a:	2200      	movs	r2, #0
 800d07c:	2300      	movs	r3, #0
 800d07e:	f7f3 f9f5 	bl	800046c <__aeabi_dcmpgt>
 800d082:	2800      	cmp	r0, #0
 800d084:	d0ec      	beq.n	800d060 <floor+0x3c>
 800d086:	2c00      	cmp	r4, #0
 800d088:	da03      	bge.n	800d092 <floor+0x6e>
 800d08a:	2380      	movs	r3, #128	@ 0x80
 800d08c:	035b      	lsls	r3, r3, #13
 800d08e:	4133      	asrs	r3, r6
 800d090:	18e4      	adds	r4, r4, r3
 800d092:	2500      	movs	r5, #0
 800d094:	43bc      	bics	r4, r7
 800d096:	e7e3      	b.n	800d060 <floor+0x3c>
 800d098:	2e33      	cmp	r6, #51	@ 0x33
 800d09a:	dd09      	ble.n	800d0b0 <floor+0x8c>
 800d09c:	2380      	movs	r3, #128	@ 0x80
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	429e      	cmp	r6, r3
 800d0a2:	d103      	bne.n	800d0ac <floor+0x88>
 800d0a4:	0002      	movs	r2, r0
 800d0a6:	000b      	movs	r3, r1
 800d0a8:	f7f3 fb1c 	bl	80006e4 <__aeabi_dadd>
 800d0ac:	b003      	add	sp, #12
 800d0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0b0:	2701      	movs	r7, #1
 800d0b2:	4a18      	ldr	r2, [pc, #96]	@ (800d114 <floor+0xf0>)
 800d0b4:	427f      	negs	r7, r7
 800d0b6:	189b      	adds	r3, r3, r2
 800d0b8:	40df      	lsrs	r7, r3
 800d0ba:	4238      	tst	r0, r7
 800d0bc:	d0f6      	beq.n	800d0ac <floor+0x88>
 800d0be:	4a12      	ldr	r2, [pc, #72]	@ (800d108 <floor+0xe4>)
 800d0c0:	4b12      	ldr	r3, [pc, #72]	@ (800d10c <floor+0xe8>)
 800d0c2:	f7f3 fb0f 	bl	80006e4 <__aeabi_dadd>
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f7f3 f9cf 	bl	800046c <__aeabi_dcmpgt>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d0c6      	beq.n	800d060 <floor+0x3c>
 800d0d2:	2c00      	cmp	r4, #0
 800d0d4:	da02      	bge.n	800d0dc <floor+0xb8>
 800d0d6:	2e14      	cmp	r6, #20
 800d0d8:	d102      	bne.n	800d0e0 <floor+0xbc>
 800d0da:	3401      	adds	r4, #1
 800d0dc:	43bd      	bics	r5, r7
 800d0de:	e7bf      	b.n	800d060 <floor+0x3c>
 800d0e0:	2234      	movs	r2, #52	@ 0x34
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	1b92      	subs	r2, r2, r6
 800d0e6:	4093      	lsls	r3, r2
 800d0e8:	18ed      	adds	r5, r5, r3
 800d0ea:	9b01      	ldr	r3, [sp, #4]
 800d0ec:	429d      	cmp	r5, r3
 800d0ee:	419b      	sbcs	r3, r3
 800d0f0:	425b      	negs	r3, r3
 800d0f2:	18e4      	adds	r4, r4, r3
 800d0f4:	e7f2      	b.n	800d0dc <floor+0xb8>
 800d0f6:	2500      	movs	r5, #0
 800d0f8:	002c      	movs	r4, r5
 800d0fa:	e7b1      	b.n	800d060 <floor+0x3c>
 800d0fc:	2500      	movs	r5, #0
 800d0fe:	4c06      	ldr	r4, [pc, #24]	@ (800d118 <floor+0xf4>)
 800d100:	e7ae      	b.n	800d060 <floor+0x3c>
 800d102:	46c0      	nop			@ (mov r8, r8)
 800d104:	fffffc01 	.word	0xfffffc01
 800d108:	8800759c 	.word	0x8800759c
 800d10c:	7e37e43c 	.word	0x7e37e43c
 800d110:	000fffff 	.word	0x000fffff
 800d114:	fffffbed 	.word	0xfffffbed
 800d118:	bff00000 	.word	0xbff00000

0800d11c <rint>:
 800d11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d11e:	004a      	lsls	r2, r1, #1
 800d120:	b085      	sub	sp, #20
 800d122:	0d52      	lsrs	r2, r2, #21
 800d124:	9201      	str	r2, [sp, #4]
 800d126:	9e01      	ldr	r6, [sp, #4]
 800d128:	4a3c      	ldr	r2, [pc, #240]	@ (800d21c <rint+0x100>)
 800d12a:	000d      	movs	r5, r1
 800d12c:	18b6      	adds	r6, r6, r2
 800d12e:	0003      	movs	r3, r0
 800d130:	0fcc      	lsrs	r4, r1, #31
 800d132:	2e13      	cmp	r6, #19
 800d134:	dc55      	bgt.n	800d1e2 <rint+0xc6>
 800d136:	2e00      	cmp	r6, #0
 800d138:	da2a      	bge.n	800d190 <rint+0x74>
 800d13a:	004a      	lsls	r2, r1, #1
 800d13c:	0852      	lsrs	r2, r2, #1
 800d13e:	4302      	orrs	r2, r0
 800d140:	d024      	beq.n	800d18c <rint+0x70>
 800d142:	030a      	lsls	r2, r1, #12
 800d144:	0b12      	lsrs	r2, r2, #12
 800d146:	4302      	orrs	r2, r0
 800d148:	4253      	negs	r3, r2
 800d14a:	4313      	orrs	r3, r2
 800d14c:	2280      	movs	r2, #128	@ 0x80
 800d14e:	0c4d      	lsrs	r5, r1, #17
 800d150:	0312      	lsls	r2, r2, #12
 800d152:	0b1b      	lsrs	r3, r3, #12
 800d154:	4013      	ands	r3, r2
 800d156:	046d      	lsls	r5, r5, #17
 800d158:	432b      	orrs	r3, r5
 800d15a:	0019      	movs	r1, r3
 800d15c:	4b30      	ldr	r3, [pc, #192]	@ (800d220 <rint+0x104>)
 800d15e:	00e2      	lsls	r2, r4, #3
 800d160:	189b      	adds	r3, r3, r2
 800d162:	681e      	ldr	r6, [r3, #0]
 800d164:	685f      	ldr	r7, [r3, #4]
 800d166:	0002      	movs	r2, r0
 800d168:	000b      	movs	r3, r1
 800d16a:	0030      	movs	r0, r6
 800d16c:	0039      	movs	r1, r7
 800d16e:	f7f3 fab9 	bl	80006e4 <__aeabi_dadd>
 800d172:	9002      	str	r0, [sp, #8]
 800d174:	9103      	str	r1, [sp, #12]
 800d176:	9802      	ldr	r0, [sp, #8]
 800d178:	9903      	ldr	r1, [sp, #12]
 800d17a:	003b      	movs	r3, r7
 800d17c:	0032      	movs	r2, r6
 800d17e:	f7f4 fd21 	bl	8001bc4 <__aeabi_dsub>
 800d182:	004b      	lsls	r3, r1, #1
 800d184:	07e4      	lsls	r4, r4, #31
 800d186:	085b      	lsrs	r3, r3, #1
 800d188:	431c      	orrs	r4, r3
 800d18a:	0021      	movs	r1, r4
 800d18c:	b005      	add	sp, #20
 800d18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d190:	4f24      	ldr	r7, [pc, #144]	@ (800d224 <rint+0x108>)
 800d192:	000a      	movs	r2, r1
 800d194:	4137      	asrs	r7, r6
 800d196:	403a      	ands	r2, r7
 800d198:	4302      	orrs	r2, r0
 800d19a:	d0f7      	beq.n	800d18c <rint+0x70>
 800d19c:	087f      	lsrs	r7, r7, #1
 800d19e:	4039      	ands	r1, r7
 800d1a0:	430b      	orrs	r3, r1
 800d1a2:	d00a      	beq.n	800d1ba <rint+0x9e>
 800d1a4:	4b20      	ldr	r3, [pc, #128]	@ (800d228 <rint+0x10c>)
 800d1a6:	9a01      	ldr	r2, [sp, #4]
 800d1a8:	43bd      	bics	r5, r7
 800d1aa:	18d2      	adds	r2, r2, r3
 800d1ac:	4253      	negs	r3, r2
 800d1ae:	415a      	adcs	r2, r3
 800d1b0:	07d3      	lsls	r3, r2, #31
 800d1b2:	2280      	movs	r2, #128	@ 0x80
 800d1b4:	02d2      	lsls	r2, r2, #11
 800d1b6:	4132      	asrs	r2, r6
 800d1b8:	4315      	orrs	r5, r2
 800d1ba:	4919      	ldr	r1, [pc, #100]	@ (800d220 <rint+0x104>)
 800d1bc:	00e4      	lsls	r4, r4, #3
 800d1be:	1909      	adds	r1, r1, r4
 800d1c0:	001a      	movs	r2, r3
 800d1c2:	002b      	movs	r3, r5
 800d1c4:	680c      	ldr	r4, [r1, #0]
 800d1c6:	684d      	ldr	r5, [r1, #4]
 800d1c8:	0020      	movs	r0, r4
 800d1ca:	0029      	movs	r1, r5
 800d1cc:	f7f3 fa8a 	bl	80006e4 <__aeabi_dadd>
 800d1d0:	9002      	str	r0, [sp, #8]
 800d1d2:	9103      	str	r1, [sp, #12]
 800d1d4:	9802      	ldr	r0, [sp, #8]
 800d1d6:	9903      	ldr	r1, [sp, #12]
 800d1d8:	0022      	movs	r2, r4
 800d1da:	002b      	movs	r3, r5
 800d1dc:	f7f4 fcf2 	bl	8001bc4 <__aeabi_dsub>
 800d1e0:	e7d4      	b.n	800d18c <rint+0x70>
 800d1e2:	2e33      	cmp	r6, #51	@ 0x33
 800d1e4:	dd08      	ble.n	800d1f8 <rint+0xdc>
 800d1e6:	2380      	movs	r3, #128	@ 0x80
 800d1e8:	00db      	lsls	r3, r3, #3
 800d1ea:	429e      	cmp	r6, r3
 800d1ec:	d1ce      	bne.n	800d18c <rint+0x70>
 800d1ee:	0002      	movs	r2, r0
 800d1f0:	000b      	movs	r3, r1
 800d1f2:	f7f3 fa77 	bl	80006e4 <__aeabi_dadd>
 800d1f6:	e7c9      	b.n	800d18c <rint+0x70>
 800d1f8:	9e01      	ldr	r6, [sp, #4]
 800d1fa:	4a0c      	ldr	r2, [pc, #48]	@ (800d22c <rint+0x110>)
 800d1fc:	18b2      	adds	r2, r6, r2
 800d1fe:	2601      	movs	r6, #1
 800d200:	4276      	negs	r6, r6
 800d202:	40d6      	lsrs	r6, r2
 800d204:	4206      	tst	r6, r0
 800d206:	d0c1      	beq.n	800d18c <rint+0x70>
 800d208:	0876      	lsrs	r6, r6, #1
 800d20a:	4206      	tst	r6, r0
 800d20c:	d0d5      	beq.n	800d1ba <rint+0x9e>
 800d20e:	2180      	movs	r1, #128	@ 0x80
 800d210:	05c9      	lsls	r1, r1, #23
 800d212:	4111      	asrs	r1, r2
 800d214:	43b3      	bics	r3, r6
 800d216:	430b      	orrs	r3, r1
 800d218:	e7cf      	b.n	800d1ba <rint+0x9e>
 800d21a:	46c0      	nop			@ (mov r8, r8)
 800d21c:	fffffc01 	.word	0xfffffc01
 800d220:	0800d9f0 	.word	0x0800d9f0
 800d224:	000fffff 	.word	0x000fffff
 800d228:	fffffbee 	.word	0xfffffbee
 800d22c:	fffffbed 	.word	0xfffffbed

0800d230 <_init>:
 800d230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d232:	46c0      	nop			@ (mov r8, r8)
 800d234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d236:	bc08      	pop	{r3}
 800d238:	469e      	mov	lr, r3
 800d23a:	4770      	bx	lr

0800d23c <_fini>:
 800d23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23e:	46c0      	nop			@ (mov r8, r8)
 800d240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d242:	bc08      	pop	{r3}
 800d244:	469e      	mov	lr, r3
 800d246:	4770      	bx	lr
