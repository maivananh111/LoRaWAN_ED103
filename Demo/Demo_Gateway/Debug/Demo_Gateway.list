
Demo_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b160  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800b220  0800b220  0000c220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9a0  0800b9a0  0000d1ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9a0  0800b9a0  0000c9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9a8  0800b9a8  0000d1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9a8  0800b9a8  0000c9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9ac  0800b9ac  0000c9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ac  20000000  0800b9b0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  200001ac  0800bb5c  0000d1ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  0800bb5c  0000d61c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e7b  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd7  00000000  00000000  0002004f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00023028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd2  00000000  00000000  00023f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a953  00000000  00000000  00024b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f24  00000000  00000000  0003f4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a23bd  00000000  00000000  000523d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f478e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e70  00000000  00000000  000f47d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f8644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ac 	.word	0x200001ac
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b208 	.word	0x0800b208

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001b0 	.word	0x200001b0
 8000104:	0800b208 	.word	0x0800b208

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 f873 	bl	8001514 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 ffb3 	bl	80013a4 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f865 	bl	8001514 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f85b 	bl	8001514 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffdd 	bl	800142c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffd3 	bl	800142c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_uldivmod>:
 8000494:	2b00      	cmp	r3, #0
 8000496:	d111      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 8000498:	2a00      	cmp	r2, #0
 800049a:	d10f      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 800049c:	2900      	cmp	r1, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_uldivmod+0xe>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d002      	beq.n	80004aa <__aeabi_uldivmod+0x16>
 80004a4:	2100      	movs	r1, #0
 80004a6:	43c9      	mvns	r1, r1
 80004a8:	0008      	movs	r0, r1
 80004aa:	b407      	push	{r0, r1, r2}
 80004ac:	4802      	ldr	r0, [pc, #8]	@ (80004b8 <__aeabi_uldivmod+0x24>)
 80004ae:	a102      	add	r1, pc, #8	@ (adr r1, 80004b8 <__aeabi_uldivmod+0x24>)
 80004b0:	1840      	adds	r0, r0, r1
 80004b2:	9002      	str	r0, [sp, #8]
 80004b4:	bd03      	pop	{r0, r1, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	ffffff5d 	.word	0xffffff5d
 80004bc:	b403      	push	{r0, r1}
 80004be:	4668      	mov	r0, sp
 80004c0:	b501      	push	{r0, lr}
 80004c2:	9802      	ldr	r0, [sp, #8]
 80004c4:	f000 f824 	bl	8000510 <__udivmoddi4>
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	469e      	mov	lr, r3
 80004cc:	b002      	add	sp, #8
 80004ce:	bc0c      	pop	{r2, r3}
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			@ (mov r8, r8)

080004d4 <__aeabi_d2uiz>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	2200      	movs	r2, #0
 80004d8:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <__aeabi_d2uiz+0x38>)
 80004da:	0004      	movs	r4, r0
 80004dc:	000d      	movs	r5, r1
 80004de:	f7ff ffcf 	bl	8000480 <__aeabi_dcmpge>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d104      	bne.n	80004f0 <__aeabi_d2uiz+0x1c>
 80004e6:	0020      	movs	r0, r4
 80004e8:	0029      	movs	r1, r5
 80004ea:	f001 fee9 	bl	80022c0 <__aeabi_d2iz>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	4b06      	ldr	r3, [pc, #24]	@ (800050c <__aeabi_d2uiz+0x38>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0020      	movs	r0, r4
 80004f6:	0029      	movs	r1, r5
 80004f8:	f001 fb46 	bl	8001b88 <__aeabi_dsub>
 80004fc:	f001 fee0 	bl	80022c0 <__aeabi_d2iz>
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	469c      	mov	ip, r3
 8000506:	4460      	add	r0, ip
 8000508:	e7f1      	b.n	80004ee <__aeabi_d2uiz+0x1a>
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	41e00000 	.word	0x41e00000

08000510 <__udivmoddi4>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	4657      	mov	r7, sl
 8000514:	464e      	mov	r6, r9
 8000516:	4645      	mov	r5, r8
 8000518:	46de      	mov	lr, fp
 800051a:	b5e0      	push	{r5, r6, r7, lr}
 800051c:	0004      	movs	r4, r0
 800051e:	000d      	movs	r5, r1
 8000520:	4692      	mov	sl, r2
 8000522:	4699      	mov	r9, r3
 8000524:	b083      	sub	sp, #12
 8000526:	428b      	cmp	r3, r1
 8000528:	d830      	bhi.n	800058c <__udivmoddi4+0x7c>
 800052a:	d02d      	beq.n	8000588 <__udivmoddi4+0x78>
 800052c:	4649      	mov	r1, r9
 800052e:	4650      	mov	r0, sl
 8000530:	f001 ff72 	bl	8002418 <__clzdi2>
 8000534:	0029      	movs	r1, r5
 8000536:	0006      	movs	r6, r0
 8000538:	0020      	movs	r0, r4
 800053a:	f001 ff6d 	bl	8002418 <__clzdi2>
 800053e:	1a33      	subs	r3, r6, r0
 8000540:	4698      	mov	r8, r3
 8000542:	3b20      	subs	r3, #32
 8000544:	d434      	bmi.n	80005b0 <__udivmoddi4+0xa0>
 8000546:	469b      	mov	fp, r3
 8000548:	4653      	mov	r3, sl
 800054a:	465a      	mov	r2, fp
 800054c:	4093      	lsls	r3, r2
 800054e:	4642      	mov	r2, r8
 8000550:	001f      	movs	r7, r3
 8000552:	4653      	mov	r3, sl
 8000554:	4093      	lsls	r3, r2
 8000556:	001e      	movs	r6, r3
 8000558:	42af      	cmp	r7, r5
 800055a:	d83b      	bhi.n	80005d4 <__udivmoddi4+0xc4>
 800055c:	42af      	cmp	r7, r5
 800055e:	d100      	bne.n	8000562 <__udivmoddi4+0x52>
 8000560:	e079      	b.n	8000656 <__udivmoddi4+0x146>
 8000562:	465b      	mov	r3, fp
 8000564:	1ba4      	subs	r4, r4, r6
 8000566:	41bd      	sbcs	r5, r7
 8000568:	2b00      	cmp	r3, #0
 800056a:	da00      	bge.n	800056e <__udivmoddi4+0x5e>
 800056c:	e076      	b.n	800065c <__udivmoddi4+0x14c>
 800056e:	2200      	movs	r2, #0
 8000570:	2300      	movs	r3, #0
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2301      	movs	r3, #1
 8000578:	465a      	mov	r2, fp
 800057a:	4093      	lsls	r3, r2
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2301      	movs	r3, #1
 8000580:	4642      	mov	r2, r8
 8000582:	4093      	lsls	r3, r2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	e029      	b.n	80005dc <__udivmoddi4+0xcc>
 8000588:	4282      	cmp	r2, r0
 800058a:	d9cf      	bls.n	800052c <__udivmoddi4+0x1c>
 800058c:	2200      	movs	r2, #0
 800058e:	2300      	movs	r3, #0
 8000590:	9200      	str	r2, [sp, #0]
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <__udivmoddi4+0x8e>
 800059a:	601c      	str	r4, [r3, #0]
 800059c:	605d      	str	r5, [r3, #4]
 800059e:	9800      	ldr	r0, [sp, #0]
 80005a0:	9901      	ldr	r1, [sp, #4]
 80005a2:	b003      	add	sp, #12
 80005a4:	bcf0      	pop	{r4, r5, r6, r7}
 80005a6:	46bb      	mov	fp, r7
 80005a8:	46b2      	mov	sl, r6
 80005aa:	46a9      	mov	r9, r5
 80005ac:	46a0      	mov	r8, r4
 80005ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b0:	4642      	mov	r2, r8
 80005b2:	469b      	mov	fp, r3
 80005b4:	2320      	movs	r3, #32
 80005b6:	1a9b      	subs	r3, r3, r2
 80005b8:	4652      	mov	r2, sl
 80005ba:	40da      	lsrs	r2, r3
 80005bc:	4641      	mov	r1, r8
 80005be:	0013      	movs	r3, r2
 80005c0:	464a      	mov	r2, r9
 80005c2:	408a      	lsls	r2, r1
 80005c4:	0017      	movs	r7, r2
 80005c6:	4642      	mov	r2, r8
 80005c8:	431f      	orrs	r7, r3
 80005ca:	4653      	mov	r3, sl
 80005cc:	4093      	lsls	r3, r2
 80005ce:	001e      	movs	r6, r3
 80005d0:	42af      	cmp	r7, r5
 80005d2:	d9c3      	bls.n	800055c <__udivmoddi4+0x4c>
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	4643      	mov	r3, r8
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0d8      	beq.n	8000594 <__udivmoddi4+0x84>
 80005e2:	07fb      	lsls	r3, r7, #31
 80005e4:	0872      	lsrs	r2, r6, #1
 80005e6:	431a      	orrs	r2, r3
 80005e8:	4646      	mov	r6, r8
 80005ea:	087b      	lsrs	r3, r7, #1
 80005ec:	e00e      	b.n	800060c <__udivmoddi4+0xfc>
 80005ee:	42ab      	cmp	r3, r5
 80005f0:	d101      	bne.n	80005f6 <__udivmoddi4+0xe6>
 80005f2:	42a2      	cmp	r2, r4
 80005f4:	d80c      	bhi.n	8000610 <__udivmoddi4+0x100>
 80005f6:	1aa4      	subs	r4, r4, r2
 80005f8:	419d      	sbcs	r5, r3
 80005fa:	2001      	movs	r0, #1
 80005fc:	1924      	adds	r4, r4, r4
 80005fe:	416d      	adcs	r5, r5
 8000600:	2100      	movs	r1, #0
 8000602:	3e01      	subs	r6, #1
 8000604:	1824      	adds	r4, r4, r0
 8000606:	414d      	adcs	r5, r1
 8000608:	2e00      	cmp	r6, #0
 800060a:	d006      	beq.n	800061a <__udivmoddi4+0x10a>
 800060c:	42ab      	cmp	r3, r5
 800060e:	d9ee      	bls.n	80005ee <__udivmoddi4+0xde>
 8000610:	3e01      	subs	r6, #1
 8000612:	1924      	adds	r4, r4, r4
 8000614:	416d      	adcs	r5, r5
 8000616:	2e00      	cmp	r6, #0
 8000618:	d1f8      	bne.n	800060c <__udivmoddi4+0xfc>
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	9901      	ldr	r1, [sp, #4]
 800061e:	465b      	mov	r3, fp
 8000620:	1900      	adds	r0, r0, r4
 8000622:	4169      	adcs	r1, r5
 8000624:	2b00      	cmp	r3, #0
 8000626:	db24      	blt.n	8000672 <__udivmoddi4+0x162>
 8000628:	002b      	movs	r3, r5
 800062a:	465a      	mov	r2, fp
 800062c:	4644      	mov	r4, r8
 800062e:	40d3      	lsrs	r3, r2
 8000630:	002a      	movs	r2, r5
 8000632:	40e2      	lsrs	r2, r4
 8000634:	001c      	movs	r4, r3
 8000636:	465b      	mov	r3, fp
 8000638:	0015      	movs	r5, r2
 800063a:	2b00      	cmp	r3, #0
 800063c:	db2a      	blt.n	8000694 <__udivmoddi4+0x184>
 800063e:	0026      	movs	r6, r4
 8000640:	409e      	lsls	r6, r3
 8000642:	0033      	movs	r3, r6
 8000644:	0026      	movs	r6, r4
 8000646:	4647      	mov	r7, r8
 8000648:	40be      	lsls	r6, r7
 800064a:	0032      	movs	r2, r6
 800064c:	1a80      	subs	r0, r0, r2
 800064e:	4199      	sbcs	r1, r3
 8000650:	9000      	str	r0, [sp, #0]
 8000652:	9101      	str	r1, [sp, #4]
 8000654:	e79e      	b.n	8000594 <__udivmoddi4+0x84>
 8000656:	42a3      	cmp	r3, r4
 8000658:	d8bc      	bhi.n	80005d4 <__udivmoddi4+0xc4>
 800065a:	e782      	b.n	8000562 <__udivmoddi4+0x52>
 800065c:	4642      	mov	r2, r8
 800065e:	2320      	movs	r3, #32
 8000660:	2100      	movs	r1, #0
 8000662:	1a9b      	subs	r3, r3, r2
 8000664:	2200      	movs	r2, #0
 8000666:	9100      	str	r1, [sp, #0]
 8000668:	9201      	str	r2, [sp, #4]
 800066a:	2201      	movs	r2, #1
 800066c:	40da      	lsrs	r2, r3
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	e785      	b.n	800057e <__udivmoddi4+0x6e>
 8000672:	4642      	mov	r2, r8
 8000674:	2320      	movs	r3, #32
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	002a      	movs	r2, r5
 800067a:	4646      	mov	r6, r8
 800067c:	409a      	lsls	r2, r3
 800067e:	0023      	movs	r3, r4
 8000680:	40f3      	lsrs	r3, r6
 8000682:	4644      	mov	r4, r8
 8000684:	4313      	orrs	r3, r2
 8000686:	002a      	movs	r2, r5
 8000688:	40e2      	lsrs	r2, r4
 800068a:	001c      	movs	r4, r3
 800068c:	465b      	mov	r3, fp
 800068e:	0015      	movs	r5, r2
 8000690:	2b00      	cmp	r3, #0
 8000692:	dad4      	bge.n	800063e <__udivmoddi4+0x12e>
 8000694:	4642      	mov	r2, r8
 8000696:	002f      	movs	r7, r5
 8000698:	2320      	movs	r3, #32
 800069a:	0026      	movs	r6, r4
 800069c:	4097      	lsls	r7, r2
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	40de      	lsrs	r6, r3
 80006a2:	003b      	movs	r3, r7
 80006a4:	4333      	orrs	r3, r6
 80006a6:	e7cd      	b.n	8000644 <__udivmoddi4+0x134>

080006a8 <__aeabi_dadd>:
 80006a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006aa:	4657      	mov	r7, sl
 80006ac:	464e      	mov	r6, r9
 80006ae:	4645      	mov	r5, r8
 80006b0:	46de      	mov	lr, fp
 80006b2:	b5e0      	push	{r5, r6, r7, lr}
 80006b4:	b083      	sub	sp, #12
 80006b6:	9000      	str	r0, [sp, #0]
 80006b8:	9101      	str	r1, [sp, #4]
 80006ba:	030c      	lsls	r4, r1, #12
 80006bc:	004f      	lsls	r7, r1, #1
 80006be:	0fce      	lsrs	r6, r1, #31
 80006c0:	0a61      	lsrs	r1, r4, #9
 80006c2:	9c00      	ldr	r4, [sp, #0]
 80006c4:	031d      	lsls	r5, r3, #12
 80006c6:	0f64      	lsrs	r4, r4, #29
 80006c8:	430c      	orrs	r4, r1
 80006ca:	9900      	ldr	r1, [sp, #0]
 80006cc:	9200      	str	r2, [sp, #0]
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	00c8      	lsls	r0, r1, #3
 80006d2:	0059      	lsls	r1, r3, #1
 80006d4:	0d4b      	lsrs	r3, r1, #21
 80006d6:	4699      	mov	r9, r3
 80006d8:	9a00      	ldr	r2, [sp, #0]
 80006da:	9b01      	ldr	r3, [sp, #4]
 80006dc:	0a6d      	lsrs	r5, r5, #9
 80006de:	0fd9      	lsrs	r1, r3, #31
 80006e0:	0f53      	lsrs	r3, r2, #29
 80006e2:	432b      	orrs	r3, r5
 80006e4:	469a      	mov	sl, r3
 80006e6:	9b00      	ldr	r3, [sp, #0]
 80006e8:	0d7f      	lsrs	r7, r7, #21
 80006ea:	00da      	lsls	r2, r3, #3
 80006ec:	4694      	mov	ip, r2
 80006ee:	464a      	mov	r2, r9
 80006f0:	46b0      	mov	r8, r6
 80006f2:	1aba      	subs	r2, r7, r2
 80006f4:	428e      	cmp	r6, r1
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x52>
 80006f8:	e0b0      	b.n	800085c <__aeabi_dadd+0x1b4>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	dc00      	bgt.n	8000700 <__aeabi_dadd+0x58>
 80006fe:	e078      	b.n	80007f2 <__aeabi_dadd+0x14a>
 8000700:	4649      	mov	r1, r9
 8000702:	2900      	cmp	r1, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_dadd+0x60>
 8000706:	e0e9      	b.n	80008dc <__aeabi_dadd+0x234>
 8000708:	49c9      	ldr	r1, [pc, #804]	@ (8000a30 <__aeabi_dadd+0x388>)
 800070a:	428f      	cmp	r7, r1
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x68>
 800070e:	e195      	b.n	8000a3c <__aeabi_dadd+0x394>
 8000710:	2501      	movs	r5, #1
 8000712:	2a38      	cmp	r2, #56	@ 0x38
 8000714:	dc16      	bgt.n	8000744 <__aeabi_dadd+0x9c>
 8000716:	2180      	movs	r1, #128	@ 0x80
 8000718:	4653      	mov	r3, sl
 800071a:	0409      	lsls	r1, r1, #16
 800071c:	430b      	orrs	r3, r1
 800071e:	469a      	mov	sl, r3
 8000720:	2a1f      	cmp	r2, #31
 8000722:	dd00      	ble.n	8000726 <__aeabi_dadd+0x7e>
 8000724:	e1e7      	b.n	8000af6 <__aeabi_dadd+0x44e>
 8000726:	2120      	movs	r1, #32
 8000728:	4655      	mov	r5, sl
 800072a:	1a8b      	subs	r3, r1, r2
 800072c:	4661      	mov	r1, ip
 800072e:	409d      	lsls	r5, r3
 8000730:	40d1      	lsrs	r1, r2
 8000732:	430d      	orrs	r5, r1
 8000734:	4661      	mov	r1, ip
 8000736:	4099      	lsls	r1, r3
 8000738:	1e4b      	subs	r3, r1, #1
 800073a:	4199      	sbcs	r1, r3
 800073c:	4653      	mov	r3, sl
 800073e:	40d3      	lsrs	r3, r2
 8000740:	430d      	orrs	r5, r1
 8000742:	1ae4      	subs	r4, r4, r3
 8000744:	1b45      	subs	r5, r0, r5
 8000746:	42a8      	cmp	r0, r5
 8000748:	4180      	sbcs	r0, r0
 800074a:	4240      	negs	r0, r0
 800074c:	1a24      	subs	r4, r4, r0
 800074e:	0223      	lsls	r3, r4, #8
 8000750:	d400      	bmi.n	8000754 <__aeabi_dadd+0xac>
 8000752:	e10f      	b.n	8000974 <__aeabi_dadd+0x2cc>
 8000754:	0264      	lsls	r4, r4, #9
 8000756:	0a64      	lsrs	r4, r4, #9
 8000758:	2c00      	cmp	r4, #0
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0xb6>
 800075c:	e139      	b.n	80009d2 <__aeabi_dadd+0x32a>
 800075e:	0020      	movs	r0, r4
 8000760:	f001 fe3c 	bl	80023dc <__clzsi2>
 8000764:	0003      	movs	r3, r0
 8000766:	3b08      	subs	r3, #8
 8000768:	2120      	movs	r1, #32
 800076a:	0028      	movs	r0, r5
 800076c:	1aca      	subs	r2, r1, r3
 800076e:	40d0      	lsrs	r0, r2
 8000770:	409c      	lsls	r4, r3
 8000772:	0002      	movs	r2, r0
 8000774:	409d      	lsls	r5, r3
 8000776:	4322      	orrs	r2, r4
 8000778:	429f      	cmp	r7, r3
 800077a:	dd00      	ble.n	800077e <__aeabi_dadd+0xd6>
 800077c:	e173      	b.n	8000a66 <__aeabi_dadd+0x3be>
 800077e:	1bd8      	subs	r0, r3, r7
 8000780:	3001      	adds	r0, #1
 8000782:	1a09      	subs	r1, r1, r0
 8000784:	002c      	movs	r4, r5
 8000786:	408d      	lsls	r5, r1
 8000788:	40c4      	lsrs	r4, r0
 800078a:	1e6b      	subs	r3, r5, #1
 800078c:	419d      	sbcs	r5, r3
 800078e:	0013      	movs	r3, r2
 8000790:	40c2      	lsrs	r2, r0
 8000792:	408b      	lsls	r3, r1
 8000794:	4325      	orrs	r5, r4
 8000796:	2700      	movs	r7, #0
 8000798:	0014      	movs	r4, r2
 800079a:	431d      	orrs	r5, r3
 800079c:	076b      	lsls	r3, r5, #29
 800079e:	d009      	beq.n	80007b4 <__aeabi_dadd+0x10c>
 80007a0:	230f      	movs	r3, #15
 80007a2:	402b      	ands	r3, r5
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d005      	beq.n	80007b4 <__aeabi_dadd+0x10c>
 80007a8:	1d2b      	adds	r3, r5, #4
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	41ad      	sbcs	r5, r5
 80007ae:	426d      	negs	r5, r5
 80007b0:	1964      	adds	r4, r4, r5
 80007b2:	001d      	movs	r5, r3
 80007b4:	0223      	lsls	r3, r4, #8
 80007b6:	d400      	bmi.n	80007ba <__aeabi_dadd+0x112>
 80007b8:	e12d      	b.n	8000a16 <__aeabi_dadd+0x36e>
 80007ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000a30 <__aeabi_dadd+0x388>)
 80007bc:	3701      	adds	r7, #1
 80007be:	4297      	cmp	r7, r2
 80007c0:	d100      	bne.n	80007c4 <__aeabi_dadd+0x11c>
 80007c2:	e0d3      	b.n	800096c <__aeabi_dadd+0x2c4>
 80007c4:	4646      	mov	r6, r8
 80007c6:	499b      	ldr	r1, [pc, #620]	@ (8000a34 <__aeabi_dadd+0x38c>)
 80007c8:	08ed      	lsrs	r5, r5, #3
 80007ca:	4021      	ands	r1, r4
 80007cc:	074a      	lsls	r2, r1, #29
 80007ce:	432a      	orrs	r2, r5
 80007d0:	057c      	lsls	r4, r7, #21
 80007d2:	024d      	lsls	r5, r1, #9
 80007d4:	0b2d      	lsrs	r5, r5, #12
 80007d6:	0d64      	lsrs	r4, r4, #21
 80007d8:	0524      	lsls	r4, r4, #20
 80007da:	432c      	orrs	r4, r5
 80007dc:	07f6      	lsls	r6, r6, #31
 80007de:	4334      	orrs	r4, r6
 80007e0:	0010      	movs	r0, r2
 80007e2:	0021      	movs	r1, r4
 80007e4:	b003      	add	sp, #12
 80007e6:	bcf0      	pop	{r4, r5, r6, r7}
 80007e8:	46bb      	mov	fp, r7
 80007ea:	46b2      	mov	sl, r6
 80007ec:	46a9      	mov	r9, r5
 80007ee:	46a0      	mov	r8, r4
 80007f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x150>
 80007f6:	e084      	b.n	8000902 <__aeabi_dadd+0x25a>
 80007f8:	464a      	mov	r2, r9
 80007fa:	1bd2      	subs	r2, r2, r7
 80007fc:	2f00      	cmp	r7, #0
 80007fe:	d000      	beq.n	8000802 <__aeabi_dadd+0x15a>
 8000800:	e16d      	b.n	8000ade <__aeabi_dadd+0x436>
 8000802:	0025      	movs	r5, r4
 8000804:	4305      	orrs	r5, r0
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x162>
 8000808:	e127      	b.n	8000a5a <__aeabi_dadd+0x3b2>
 800080a:	1e56      	subs	r6, r2, #1
 800080c:	2a01      	cmp	r2, #1
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x16a>
 8000810:	e23b      	b.n	8000c8a <__aeabi_dadd+0x5e2>
 8000812:	4d87      	ldr	r5, [pc, #540]	@ (8000a30 <__aeabi_dadd+0x388>)
 8000814:	42aa      	cmp	r2, r5
 8000816:	d100      	bne.n	800081a <__aeabi_dadd+0x172>
 8000818:	e26a      	b.n	8000cf0 <__aeabi_dadd+0x648>
 800081a:	2501      	movs	r5, #1
 800081c:	2e38      	cmp	r6, #56	@ 0x38
 800081e:	dc12      	bgt.n	8000846 <__aeabi_dadd+0x19e>
 8000820:	0032      	movs	r2, r6
 8000822:	2a1f      	cmp	r2, #31
 8000824:	dd00      	ble.n	8000828 <__aeabi_dadd+0x180>
 8000826:	e1f8      	b.n	8000c1a <__aeabi_dadd+0x572>
 8000828:	2620      	movs	r6, #32
 800082a:	0025      	movs	r5, r4
 800082c:	1ab6      	subs	r6, r6, r2
 800082e:	0007      	movs	r7, r0
 8000830:	4653      	mov	r3, sl
 8000832:	40b0      	lsls	r0, r6
 8000834:	40d4      	lsrs	r4, r2
 8000836:	40b5      	lsls	r5, r6
 8000838:	40d7      	lsrs	r7, r2
 800083a:	1e46      	subs	r6, r0, #1
 800083c:	41b0      	sbcs	r0, r6
 800083e:	1b1b      	subs	r3, r3, r4
 8000840:	469a      	mov	sl, r3
 8000842:	433d      	orrs	r5, r7
 8000844:	4305      	orrs	r5, r0
 8000846:	4662      	mov	r2, ip
 8000848:	1b55      	subs	r5, r2, r5
 800084a:	45ac      	cmp	ip, r5
 800084c:	4192      	sbcs	r2, r2
 800084e:	4653      	mov	r3, sl
 8000850:	4252      	negs	r2, r2
 8000852:	000e      	movs	r6, r1
 8000854:	464f      	mov	r7, r9
 8000856:	4688      	mov	r8, r1
 8000858:	1a9c      	subs	r4, r3, r2
 800085a:	e778      	b.n	800074e <__aeabi_dadd+0xa6>
 800085c:	2a00      	cmp	r2, #0
 800085e:	dc00      	bgt.n	8000862 <__aeabi_dadd+0x1ba>
 8000860:	e08e      	b.n	8000980 <__aeabi_dadd+0x2d8>
 8000862:	4649      	mov	r1, r9
 8000864:	2900      	cmp	r1, #0
 8000866:	d175      	bne.n	8000954 <__aeabi_dadd+0x2ac>
 8000868:	4661      	mov	r1, ip
 800086a:	4653      	mov	r3, sl
 800086c:	4319      	orrs	r1, r3
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0x1ca>
 8000870:	e0f6      	b.n	8000a60 <__aeabi_dadd+0x3b8>
 8000872:	1e51      	subs	r1, r2, #1
 8000874:	2a01      	cmp	r2, #1
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1d2>
 8000878:	e191      	b.n	8000b9e <__aeabi_dadd+0x4f6>
 800087a:	4d6d      	ldr	r5, [pc, #436]	@ (8000a30 <__aeabi_dadd+0x388>)
 800087c:	42aa      	cmp	r2, r5
 800087e:	d100      	bne.n	8000882 <__aeabi_dadd+0x1da>
 8000880:	e0dc      	b.n	8000a3c <__aeabi_dadd+0x394>
 8000882:	2501      	movs	r5, #1
 8000884:	2938      	cmp	r1, #56	@ 0x38
 8000886:	dc14      	bgt.n	80008b2 <__aeabi_dadd+0x20a>
 8000888:	000a      	movs	r2, r1
 800088a:	2a1f      	cmp	r2, #31
 800088c:	dd00      	ble.n	8000890 <__aeabi_dadd+0x1e8>
 800088e:	e1a2      	b.n	8000bd6 <__aeabi_dadd+0x52e>
 8000890:	2120      	movs	r1, #32
 8000892:	4653      	mov	r3, sl
 8000894:	1a89      	subs	r1, r1, r2
 8000896:	408b      	lsls	r3, r1
 8000898:	001d      	movs	r5, r3
 800089a:	4663      	mov	r3, ip
 800089c:	40d3      	lsrs	r3, r2
 800089e:	431d      	orrs	r5, r3
 80008a0:	4663      	mov	r3, ip
 80008a2:	408b      	lsls	r3, r1
 80008a4:	0019      	movs	r1, r3
 80008a6:	1e4b      	subs	r3, r1, #1
 80008a8:	4199      	sbcs	r1, r3
 80008aa:	4653      	mov	r3, sl
 80008ac:	40d3      	lsrs	r3, r2
 80008ae:	430d      	orrs	r5, r1
 80008b0:	18e4      	adds	r4, r4, r3
 80008b2:	182d      	adds	r5, r5, r0
 80008b4:	4285      	cmp	r5, r0
 80008b6:	4180      	sbcs	r0, r0
 80008b8:	4240      	negs	r0, r0
 80008ba:	1824      	adds	r4, r4, r0
 80008bc:	0223      	lsls	r3, r4, #8
 80008be:	d559      	bpl.n	8000974 <__aeabi_dadd+0x2cc>
 80008c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000a30 <__aeabi_dadd+0x388>)
 80008c2:	3701      	adds	r7, #1
 80008c4:	429f      	cmp	r7, r3
 80008c6:	d051      	beq.n	800096c <__aeabi_dadd+0x2c4>
 80008c8:	2101      	movs	r1, #1
 80008ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000a34 <__aeabi_dadd+0x38c>)
 80008cc:	086a      	lsrs	r2, r5, #1
 80008ce:	401c      	ands	r4, r3
 80008d0:	4029      	ands	r1, r5
 80008d2:	430a      	orrs	r2, r1
 80008d4:	07e5      	lsls	r5, r4, #31
 80008d6:	4315      	orrs	r5, r2
 80008d8:	0864      	lsrs	r4, r4, #1
 80008da:	e75f      	b.n	800079c <__aeabi_dadd+0xf4>
 80008dc:	4661      	mov	r1, ip
 80008de:	4653      	mov	r3, sl
 80008e0:	4319      	orrs	r1, r3
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x23e>
 80008e4:	e0bc      	b.n	8000a60 <__aeabi_dadd+0x3b8>
 80008e6:	1e51      	subs	r1, r2, #1
 80008e8:	2a01      	cmp	r2, #1
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x246>
 80008ec:	e164      	b.n	8000bb8 <__aeabi_dadd+0x510>
 80008ee:	4d50      	ldr	r5, [pc, #320]	@ (8000a30 <__aeabi_dadd+0x388>)
 80008f0:	42aa      	cmp	r2, r5
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0x24e>
 80008f4:	e16a      	b.n	8000bcc <__aeabi_dadd+0x524>
 80008f6:	2501      	movs	r5, #1
 80008f8:	2938      	cmp	r1, #56	@ 0x38
 80008fa:	dd00      	ble.n	80008fe <__aeabi_dadd+0x256>
 80008fc:	e722      	b.n	8000744 <__aeabi_dadd+0x9c>
 80008fe:	000a      	movs	r2, r1
 8000900:	e70e      	b.n	8000720 <__aeabi_dadd+0x78>
 8000902:	4a4d      	ldr	r2, [pc, #308]	@ (8000a38 <__aeabi_dadd+0x390>)
 8000904:	1c7d      	adds	r5, r7, #1
 8000906:	4215      	tst	r5, r2
 8000908:	d000      	beq.n	800090c <__aeabi_dadd+0x264>
 800090a:	e0d0      	b.n	8000aae <__aeabi_dadd+0x406>
 800090c:	0025      	movs	r5, r4
 800090e:	4662      	mov	r2, ip
 8000910:	4653      	mov	r3, sl
 8000912:	4305      	orrs	r5, r0
 8000914:	431a      	orrs	r2, r3
 8000916:	2f00      	cmp	r7, #0
 8000918:	d000      	beq.n	800091c <__aeabi_dadd+0x274>
 800091a:	e137      	b.n	8000b8c <__aeabi_dadd+0x4e4>
 800091c:	2d00      	cmp	r5, #0
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x27a>
 8000920:	e1a8      	b.n	8000c74 <__aeabi_dadd+0x5cc>
 8000922:	2a00      	cmp	r2, #0
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x280>
 8000926:	e16a      	b.n	8000bfe <__aeabi_dadd+0x556>
 8000928:	4663      	mov	r3, ip
 800092a:	1ac5      	subs	r5, r0, r3
 800092c:	4653      	mov	r3, sl
 800092e:	1ae2      	subs	r2, r4, r3
 8000930:	42a8      	cmp	r0, r5
 8000932:	419b      	sbcs	r3, r3
 8000934:	425b      	negs	r3, r3
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	021a      	lsls	r2, r3, #8
 800093a:	d400      	bmi.n	800093e <__aeabi_dadd+0x296>
 800093c:	e203      	b.n	8000d46 <__aeabi_dadd+0x69e>
 800093e:	4663      	mov	r3, ip
 8000940:	1a1d      	subs	r5, r3, r0
 8000942:	45ac      	cmp	ip, r5
 8000944:	4192      	sbcs	r2, r2
 8000946:	4653      	mov	r3, sl
 8000948:	4252      	negs	r2, r2
 800094a:	1b1c      	subs	r4, r3, r4
 800094c:	000e      	movs	r6, r1
 800094e:	4688      	mov	r8, r1
 8000950:	1aa4      	subs	r4, r4, r2
 8000952:	e723      	b.n	800079c <__aeabi_dadd+0xf4>
 8000954:	4936      	ldr	r1, [pc, #216]	@ (8000a30 <__aeabi_dadd+0x388>)
 8000956:	428f      	cmp	r7, r1
 8000958:	d070      	beq.n	8000a3c <__aeabi_dadd+0x394>
 800095a:	2501      	movs	r5, #1
 800095c:	2a38      	cmp	r2, #56	@ 0x38
 800095e:	dca8      	bgt.n	80008b2 <__aeabi_dadd+0x20a>
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	4653      	mov	r3, sl
 8000964:	0409      	lsls	r1, r1, #16
 8000966:	430b      	orrs	r3, r1
 8000968:	469a      	mov	sl, r3
 800096a:	e78e      	b.n	800088a <__aeabi_dadd+0x1e2>
 800096c:	003c      	movs	r4, r7
 800096e:	2500      	movs	r5, #0
 8000970:	2200      	movs	r2, #0
 8000972:	e731      	b.n	80007d8 <__aeabi_dadd+0x130>
 8000974:	2307      	movs	r3, #7
 8000976:	402b      	ands	r3, r5
 8000978:	2b00      	cmp	r3, #0
 800097a:	d000      	beq.n	800097e <__aeabi_dadd+0x2d6>
 800097c:	e710      	b.n	80007a0 <__aeabi_dadd+0xf8>
 800097e:	e093      	b.n	8000aa8 <__aeabi_dadd+0x400>
 8000980:	2a00      	cmp	r2, #0
 8000982:	d074      	beq.n	8000a6e <__aeabi_dadd+0x3c6>
 8000984:	464a      	mov	r2, r9
 8000986:	1bd2      	subs	r2, r2, r7
 8000988:	2f00      	cmp	r7, #0
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x2e6>
 800098c:	e0c7      	b.n	8000b1e <__aeabi_dadd+0x476>
 800098e:	4928      	ldr	r1, [pc, #160]	@ (8000a30 <__aeabi_dadd+0x388>)
 8000990:	4589      	cmp	r9, r1
 8000992:	d100      	bne.n	8000996 <__aeabi_dadd+0x2ee>
 8000994:	e185      	b.n	8000ca2 <__aeabi_dadd+0x5fa>
 8000996:	2501      	movs	r5, #1
 8000998:	2a38      	cmp	r2, #56	@ 0x38
 800099a:	dc12      	bgt.n	80009c2 <__aeabi_dadd+0x31a>
 800099c:	2180      	movs	r1, #128	@ 0x80
 800099e:	0409      	lsls	r1, r1, #16
 80009a0:	430c      	orrs	r4, r1
 80009a2:	2a1f      	cmp	r2, #31
 80009a4:	dd00      	ble.n	80009a8 <__aeabi_dadd+0x300>
 80009a6:	e1ab      	b.n	8000d00 <__aeabi_dadd+0x658>
 80009a8:	2120      	movs	r1, #32
 80009aa:	0025      	movs	r5, r4
 80009ac:	1a89      	subs	r1, r1, r2
 80009ae:	0007      	movs	r7, r0
 80009b0:	4088      	lsls	r0, r1
 80009b2:	408d      	lsls	r5, r1
 80009b4:	40d7      	lsrs	r7, r2
 80009b6:	1e41      	subs	r1, r0, #1
 80009b8:	4188      	sbcs	r0, r1
 80009ba:	40d4      	lsrs	r4, r2
 80009bc:	433d      	orrs	r5, r7
 80009be:	4305      	orrs	r5, r0
 80009c0:	44a2      	add	sl, r4
 80009c2:	4465      	add	r5, ip
 80009c4:	4565      	cmp	r5, ip
 80009c6:	4192      	sbcs	r2, r2
 80009c8:	4252      	negs	r2, r2
 80009ca:	4452      	add	r2, sl
 80009cc:	0014      	movs	r4, r2
 80009ce:	464f      	mov	r7, r9
 80009d0:	e774      	b.n	80008bc <__aeabi_dadd+0x214>
 80009d2:	0028      	movs	r0, r5
 80009d4:	f001 fd02 	bl	80023dc <__clzsi2>
 80009d8:	0003      	movs	r3, r0
 80009da:	3318      	adds	r3, #24
 80009dc:	2b1f      	cmp	r3, #31
 80009de:	dc00      	bgt.n	80009e2 <__aeabi_dadd+0x33a>
 80009e0:	e6c2      	b.n	8000768 <__aeabi_dadd+0xc0>
 80009e2:	002a      	movs	r2, r5
 80009e4:	3808      	subs	r0, #8
 80009e6:	4082      	lsls	r2, r0
 80009e8:	429f      	cmp	r7, r3
 80009ea:	dd00      	ble.n	80009ee <__aeabi_dadd+0x346>
 80009ec:	e0a9      	b.n	8000b42 <__aeabi_dadd+0x49a>
 80009ee:	1bdb      	subs	r3, r3, r7
 80009f0:	1c58      	adds	r0, r3, #1
 80009f2:	281f      	cmp	r0, #31
 80009f4:	dc00      	bgt.n	80009f8 <__aeabi_dadd+0x350>
 80009f6:	e1ac      	b.n	8000d52 <__aeabi_dadd+0x6aa>
 80009f8:	0015      	movs	r5, r2
 80009fa:	3b1f      	subs	r3, #31
 80009fc:	40dd      	lsrs	r5, r3
 80009fe:	2820      	cmp	r0, #32
 8000a00:	d005      	beq.n	8000a0e <__aeabi_dadd+0x366>
 8000a02:	2340      	movs	r3, #64	@ 0x40
 8000a04:	1a1b      	subs	r3, r3, r0
 8000a06:	409a      	lsls	r2, r3
 8000a08:	1e53      	subs	r3, r2, #1
 8000a0a:	419a      	sbcs	r2, r3
 8000a0c:	4315      	orrs	r5, r2
 8000a0e:	2307      	movs	r3, #7
 8000a10:	2700      	movs	r7, #0
 8000a12:	402b      	ands	r3, r5
 8000a14:	e7b0      	b.n	8000978 <__aeabi_dadd+0x2d0>
 8000a16:	08ed      	lsrs	r5, r5, #3
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <__aeabi_dadd+0x388>)
 8000a1a:	0762      	lsls	r2, r4, #29
 8000a1c:	432a      	orrs	r2, r5
 8000a1e:	08e4      	lsrs	r4, r4, #3
 8000a20:	429f      	cmp	r7, r3
 8000a22:	d00f      	beq.n	8000a44 <__aeabi_dadd+0x39c>
 8000a24:	0324      	lsls	r4, r4, #12
 8000a26:	0b25      	lsrs	r5, r4, #12
 8000a28:	057c      	lsls	r4, r7, #21
 8000a2a:	0d64      	lsrs	r4, r4, #21
 8000a2c:	e6d4      	b.n	80007d8 <__aeabi_dadd+0x130>
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	000007ff 	.word	0x000007ff
 8000a34:	ff7fffff 	.word	0xff7fffff
 8000a38:	000007fe 	.word	0x000007fe
 8000a3c:	08c0      	lsrs	r0, r0, #3
 8000a3e:	0762      	lsls	r2, r4, #29
 8000a40:	4302      	orrs	r2, r0
 8000a42:	08e4      	lsrs	r4, r4, #3
 8000a44:	0013      	movs	r3, r2
 8000a46:	4323      	orrs	r3, r4
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x3a4>
 8000a4a:	e186      	b.n	8000d5a <__aeabi_dadd+0x6b2>
 8000a4c:	2580      	movs	r5, #128	@ 0x80
 8000a4e:	032d      	lsls	r5, r5, #12
 8000a50:	4325      	orrs	r5, r4
 8000a52:	032d      	lsls	r5, r5, #12
 8000a54:	4cc3      	ldr	r4, [pc, #780]	@ (8000d64 <__aeabi_dadd+0x6bc>)
 8000a56:	0b2d      	lsrs	r5, r5, #12
 8000a58:	e6be      	b.n	80007d8 <__aeabi_dadd+0x130>
 8000a5a:	4660      	mov	r0, ip
 8000a5c:	4654      	mov	r4, sl
 8000a5e:	000e      	movs	r6, r1
 8000a60:	0017      	movs	r7, r2
 8000a62:	08c5      	lsrs	r5, r0, #3
 8000a64:	e7d8      	b.n	8000a18 <__aeabi_dadd+0x370>
 8000a66:	4cc0      	ldr	r4, [pc, #768]	@ (8000d68 <__aeabi_dadd+0x6c0>)
 8000a68:	1aff      	subs	r7, r7, r3
 8000a6a:	4014      	ands	r4, r2
 8000a6c:	e696      	b.n	800079c <__aeabi_dadd+0xf4>
 8000a6e:	4abf      	ldr	r2, [pc, #764]	@ (8000d6c <__aeabi_dadd+0x6c4>)
 8000a70:	1c79      	adds	r1, r7, #1
 8000a72:	4211      	tst	r1, r2
 8000a74:	d16b      	bne.n	8000b4e <__aeabi_dadd+0x4a6>
 8000a76:	0022      	movs	r2, r4
 8000a78:	4302      	orrs	r2, r0
 8000a7a:	2f00      	cmp	r7, #0
 8000a7c:	d000      	beq.n	8000a80 <__aeabi_dadd+0x3d8>
 8000a7e:	e0db      	b.n	8000c38 <__aeabi_dadd+0x590>
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dadd+0x3de>
 8000a84:	e12d      	b.n	8000ce2 <__aeabi_dadd+0x63a>
 8000a86:	4662      	mov	r2, ip
 8000a88:	4653      	mov	r3, sl
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x3e8>
 8000a8e:	e0b6      	b.n	8000bfe <__aeabi_dadd+0x556>
 8000a90:	4663      	mov	r3, ip
 8000a92:	18c5      	adds	r5, r0, r3
 8000a94:	4285      	cmp	r5, r0
 8000a96:	4180      	sbcs	r0, r0
 8000a98:	4454      	add	r4, sl
 8000a9a:	4240      	negs	r0, r0
 8000a9c:	1824      	adds	r4, r4, r0
 8000a9e:	0223      	lsls	r3, r4, #8
 8000aa0:	d502      	bpl.n	8000aa8 <__aeabi_dadd+0x400>
 8000aa2:	000f      	movs	r7, r1
 8000aa4:	4bb0      	ldr	r3, [pc, #704]	@ (8000d68 <__aeabi_dadd+0x6c0>)
 8000aa6:	401c      	ands	r4, r3
 8000aa8:	003a      	movs	r2, r7
 8000aaa:	0028      	movs	r0, r5
 8000aac:	e7d8      	b.n	8000a60 <__aeabi_dadd+0x3b8>
 8000aae:	4662      	mov	r2, ip
 8000ab0:	1a85      	subs	r5, r0, r2
 8000ab2:	42a8      	cmp	r0, r5
 8000ab4:	4192      	sbcs	r2, r2
 8000ab6:	4653      	mov	r3, sl
 8000ab8:	4252      	negs	r2, r2
 8000aba:	4691      	mov	r9, r2
 8000abc:	1ae3      	subs	r3, r4, r3
 8000abe:	001a      	movs	r2, r3
 8000ac0:	464b      	mov	r3, r9
 8000ac2:	1ad2      	subs	r2, r2, r3
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	4691      	mov	r9, r2
 8000ac8:	021a      	lsls	r2, r3, #8
 8000aca:	d454      	bmi.n	8000b76 <__aeabi_dadd+0x4ce>
 8000acc:	464a      	mov	r2, r9
 8000ace:	464c      	mov	r4, r9
 8000ad0:	432a      	orrs	r2, r5
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_dadd+0x42e>
 8000ad4:	e640      	b.n	8000758 <__aeabi_dadd+0xb0>
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	2400      	movs	r4, #0
 8000ada:	2500      	movs	r5, #0
 8000adc:	e67c      	b.n	80007d8 <__aeabi_dadd+0x130>
 8000ade:	4da1      	ldr	r5, [pc, #644]	@ (8000d64 <__aeabi_dadd+0x6bc>)
 8000ae0:	45a9      	cmp	r9, r5
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_dadd+0x43e>
 8000ae4:	e090      	b.n	8000c08 <__aeabi_dadd+0x560>
 8000ae6:	2501      	movs	r5, #1
 8000ae8:	2a38      	cmp	r2, #56	@ 0x38
 8000aea:	dd00      	ble.n	8000aee <__aeabi_dadd+0x446>
 8000aec:	e6ab      	b.n	8000846 <__aeabi_dadd+0x19e>
 8000aee:	2580      	movs	r5, #128	@ 0x80
 8000af0:	042d      	lsls	r5, r5, #16
 8000af2:	432c      	orrs	r4, r5
 8000af4:	e695      	b.n	8000822 <__aeabi_dadd+0x17a>
 8000af6:	0011      	movs	r1, r2
 8000af8:	4655      	mov	r5, sl
 8000afa:	3920      	subs	r1, #32
 8000afc:	40cd      	lsrs	r5, r1
 8000afe:	46a9      	mov	r9, r5
 8000b00:	2a20      	cmp	r2, #32
 8000b02:	d006      	beq.n	8000b12 <__aeabi_dadd+0x46a>
 8000b04:	2140      	movs	r1, #64	@ 0x40
 8000b06:	4653      	mov	r3, sl
 8000b08:	1a8a      	subs	r2, r1, r2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	4694      	mov	ip, r2
 8000b12:	4665      	mov	r5, ip
 8000b14:	1e6b      	subs	r3, r5, #1
 8000b16:	419d      	sbcs	r5, r3
 8000b18:	464b      	mov	r3, r9
 8000b1a:	431d      	orrs	r5, r3
 8000b1c:	e612      	b.n	8000744 <__aeabi_dadd+0x9c>
 8000b1e:	0021      	movs	r1, r4
 8000b20:	4301      	orrs	r1, r0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x47e>
 8000b24:	e0c4      	b.n	8000cb0 <__aeabi_dadd+0x608>
 8000b26:	1e51      	subs	r1, r2, #1
 8000b28:	2a01      	cmp	r2, #1
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x486>
 8000b2c:	e0fb      	b.n	8000d26 <__aeabi_dadd+0x67e>
 8000b2e:	4d8d      	ldr	r5, [pc, #564]	@ (8000d64 <__aeabi_dadd+0x6bc>)
 8000b30:	42aa      	cmp	r2, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x48e>
 8000b34:	e0b5      	b.n	8000ca2 <__aeabi_dadd+0x5fa>
 8000b36:	2501      	movs	r5, #1
 8000b38:	2938      	cmp	r1, #56	@ 0x38
 8000b3a:	dd00      	ble.n	8000b3e <__aeabi_dadd+0x496>
 8000b3c:	e741      	b.n	80009c2 <__aeabi_dadd+0x31a>
 8000b3e:	000a      	movs	r2, r1
 8000b40:	e72f      	b.n	80009a2 <__aeabi_dadd+0x2fa>
 8000b42:	4c89      	ldr	r4, [pc, #548]	@ (8000d68 <__aeabi_dadd+0x6c0>)
 8000b44:	1aff      	subs	r7, r7, r3
 8000b46:	4014      	ands	r4, r2
 8000b48:	0762      	lsls	r2, r4, #29
 8000b4a:	08e4      	lsrs	r4, r4, #3
 8000b4c:	e76a      	b.n	8000a24 <__aeabi_dadd+0x37c>
 8000b4e:	4a85      	ldr	r2, [pc, #532]	@ (8000d64 <__aeabi_dadd+0x6bc>)
 8000b50:	4291      	cmp	r1, r2
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0x4ae>
 8000b54:	e0e3      	b.n	8000d1e <__aeabi_dadd+0x676>
 8000b56:	4663      	mov	r3, ip
 8000b58:	18c2      	adds	r2, r0, r3
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	4180      	sbcs	r0, r0
 8000b5e:	0023      	movs	r3, r4
 8000b60:	4240      	negs	r0, r0
 8000b62:	4453      	add	r3, sl
 8000b64:	181b      	adds	r3, r3, r0
 8000b66:	07dd      	lsls	r5, r3, #31
 8000b68:	085c      	lsrs	r4, r3, #1
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	0852      	lsrs	r2, r2, #1
 8000b6e:	4315      	orrs	r5, r2
 8000b70:	000f      	movs	r7, r1
 8000b72:	402b      	ands	r3, r5
 8000b74:	e700      	b.n	8000978 <__aeabi_dadd+0x2d0>
 8000b76:	4663      	mov	r3, ip
 8000b78:	1a1d      	subs	r5, r3, r0
 8000b7a:	45ac      	cmp	ip, r5
 8000b7c:	4192      	sbcs	r2, r2
 8000b7e:	4653      	mov	r3, sl
 8000b80:	4252      	negs	r2, r2
 8000b82:	1b1c      	subs	r4, r3, r4
 8000b84:	000e      	movs	r6, r1
 8000b86:	4688      	mov	r8, r1
 8000b88:	1aa4      	subs	r4, r4, r2
 8000b8a:	e5e5      	b.n	8000758 <__aeabi_dadd+0xb0>
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d000      	beq.n	8000b92 <__aeabi_dadd+0x4ea>
 8000b90:	e091      	b.n	8000cb6 <__aeabi_dadd+0x60e>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d138      	bne.n	8000c08 <__aeabi_dadd+0x560>
 8000b96:	2480      	movs	r4, #128	@ 0x80
 8000b98:	2600      	movs	r6, #0
 8000b9a:	0324      	lsls	r4, r4, #12
 8000b9c:	e756      	b.n	8000a4c <__aeabi_dadd+0x3a4>
 8000b9e:	4663      	mov	r3, ip
 8000ba0:	18c5      	adds	r5, r0, r3
 8000ba2:	4285      	cmp	r5, r0
 8000ba4:	4180      	sbcs	r0, r0
 8000ba6:	4454      	add	r4, sl
 8000ba8:	4240      	negs	r0, r0
 8000baa:	1824      	adds	r4, r4, r0
 8000bac:	2701      	movs	r7, #1
 8000bae:	0223      	lsls	r3, r4, #8
 8000bb0:	d400      	bmi.n	8000bb4 <__aeabi_dadd+0x50c>
 8000bb2:	e6df      	b.n	8000974 <__aeabi_dadd+0x2cc>
 8000bb4:	2702      	movs	r7, #2
 8000bb6:	e687      	b.n	80008c8 <__aeabi_dadd+0x220>
 8000bb8:	4663      	mov	r3, ip
 8000bba:	1ac5      	subs	r5, r0, r3
 8000bbc:	42a8      	cmp	r0, r5
 8000bbe:	4180      	sbcs	r0, r0
 8000bc0:	4653      	mov	r3, sl
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	1ae4      	subs	r4, r4, r3
 8000bc6:	2701      	movs	r7, #1
 8000bc8:	1a24      	subs	r4, r4, r0
 8000bca:	e5c0      	b.n	800074e <__aeabi_dadd+0xa6>
 8000bcc:	0762      	lsls	r2, r4, #29
 8000bce:	08c0      	lsrs	r0, r0, #3
 8000bd0:	4302      	orrs	r2, r0
 8000bd2:	08e4      	lsrs	r4, r4, #3
 8000bd4:	e736      	b.n	8000a44 <__aeabi_dadd+0x39c>
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	4653      	mov	r3, sl
 8000bda:	3920      	subs	r1, #32
 8000bdc:	40cb      	lsrs	r3, r1
 8000bde:	4699      	mov	r9, r3
 8000be0:	2a20      	cmp	r2, #32
 8000be2:	d006      	beq.n	8000bf2 <__aeabi_dadd+0x54a>
 8000be4:	2140      	movs	r1, #64	@ 0x40
 8000be6:	4653      	mov	r3, sl
 8000be8:	1a8a      	subs	r2, r1, r2
 8000bea:	4093      	lsls	r3, r2
 8000bec:	4662      	mov	r2, ip
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	4665      	mov	r5, ip
 8000bf4:	1e6b      	subs	r3, r5, #1
 8000bf6:	419d      	sbcs	r5, r3
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	431d      	orrs	r5, r3
 8000bfc:	e659      	b.n	80008b2 <__aeabi_dadd+0x20a>
 8000bfe:	0762      	lsls	r2, r4, #29
 8000c00:	08c0      	lsrs	r0, r0, #3
 8000c02:	4302      	orrs	r2, r0
 8000c04:	08e4      	lsrs	r4, r4, #3
 8000c06:	e70d      	b.n	8000a24 <__aeabi_dadd+0x37c>
 8000c08:	4653      	mov	r3, sl
 8000c0a:	075a      	lsls	r2, r3, #29
 8000c0c:	4663      	mov	r3, ip
 8000c0e:	08d8      	lsrs	r0, r3, #3
 8000c10:	4653      	mov	r3, sl
 8000c12:	000e      	movs	r6, r1
 8000c14:	4302      	orrs	r2, r0
 8000c16:	08dc      	lsrs	r4, r3, #3
 8000c18:	e714      	b.n	8000a44 <__aeabi_dadd+0x39c>
 8000c1a:	0015      	movs	r5, r2
 8000c1c:	0026      	movs	r6, r4
 8000c1e:	3d20      	subs	r5, #32
 8000c20:	40ee      	lsrs	r6, r5
 8000c22:	2a20      	cmp	r2, #32
 8000c24:	d003      	beq.n	8000c2e <__aeabi_dadd+0x586>
 8000c26:	2540      	movs	r5, #64	@ 0x40
 8000c28:	1aaa      	subs	r2, r5, r2
 8000c2a:	4094      	lsls	r4, r2
 8000c2c:	4320      	orrs	r0, r4
 8000c2e:	1e42      	subs	r2, r0, #1
 8000c30:	4190      	sbcs	r0, r2
 8000c32:	0005      	movs	r5, r0
 8000c34:	4335      	orrs	r5, r6
 8000c36:	e606      	b.n	8000846 <__aeabi_dadd+0x19e>
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	d07c      	beq.n	8000d36 <__aeabi_dadd+0x68e>
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	4653      	mov	r3, sl
 8000c40:	08c0      	lsrs	r0, r0, #3
 8000c42:	431a      	orrs	r2, r3
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dadd+0x5a0>
 8000c46:	e6fa      	b.n	8000a3e <__aeabi_dadd+0x396>
 8000c48:	0762      	lsls	r2, r4, #29
 8000c4a:	4310      	orrs	r0, r2
 8000c4c:	2280      	movs	r2, #128	@ 0x80
 8000c4e:	08e4      	lsrs	r4, r4, #3
 8000c50:	0312      	lsls	r2, r2, #12
 8000c52:	4214      	tst	r4, r2
 8000c54:	d008      	beq.n	8000c68 <__aeabi_dadd+0x5c0>
 8000c56:	08d9      	lsrs	r1, r3, #3
 8000c58:	4211      	tst	r1, r2
 8000c5a:	d105      	bne.n	8000c68 <__aeabi_dadd+0x5c0>
 8000c5c:	4663      	mov	r3, ip
 8000c5e:	08d8      	lsrs	r0, r3, #3
 8000c60:	4653      	mov	r3, sl
 8000c62:	000c      	movs	r4, r1
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4318      	orrs	r0, r3
 8000c68:	0f42      	lsrs	r2, r0, #29
 8000c6a:	00c0      	lsls	r0, r0, #3
 8000c6c:	08c0      	lsrs	r0, r0, #3
 8000c6e:	0752      	lsls	r2, r2, #29
 8000c70:	4302      	orrs	r2, r0
 8000c72:	e6e7      	b.n	8000a44 <__aeabi_dadd+0x39c>
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	d100      	bne.n	8000c7a <__aeabi_dadd+0x5d2>
 8000c78:	e72d      	b.n	8000ad6 <__aeabi_dadd+0x42e>
 8000c7a:	4663      	mov	r3, ip
 8000c7c:	08d8      	lsrs	r0, r3, #3
 8000c7e:	4653      	mov	r3, sl
 8000c80:	075a      	lsls	r2, r3, #29
 8000c82:	000e      	movs	r6, r1
 8000c84:	4302      	orrs	r2, r0
 8000c86:	08dc      	lsrs	r4, r3, #3
 8000c88:	e6cc      	b.n	8000a24 <__aeabi_dadd+0x37c>
 8000c8a:	4663      	mov	r3, ip
 8000c8c:	1a1d      	subs	r5, r3, r0
 8000c8e:	45ac      	cmp	ip, r5
 8000c90:	4192      	sbcs	r2, r2
 8000c92:	4653      	mov	r3, sl
 8000c94:	4252      	negs	r2, r2
 8000c96:	1b1c      	subs	r4, r3, r4
 8000c98:	000e      	movs	r6, r1
 8000c9a:	4688      	mov	r8, r1
 8000c9c:	1aa4      	subs	r4, r4, r2
 8000c9e:	3701      	adds	r7, #1
 8000ca0:	e555      	b.n	800074e <__aeabi_dadd+0xa6>
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	08d9      	lsrs	r1, r3, #3
 8000ca6:	4653      	mov	r3, sl
 8000ca8:	075a      	lsls	r2, r3, #29
 8000caa:	430a      	orrs	r2, r1
 8000cac:	08dc      	lsrs	r4, r3, #3
 8000cae:	e6c9      	b.n	8000a44 <__aeabi_dadd+0x39c>
 8000cb0:	4660      	mov	r0, ip
 8000cb2:	4654      	mov	r4, sl
 8000cb4:	e6d4      	b.n	8000a60 <__aeabi_dadd+0x3b8>
 8000cb6:	08c0      	lsrs	r0, r0, #3
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x616>
 8000cbc:	e6bf      	b.n	8000a3e <__aeabi_dadd+0x396>
 8000cbe:	0762      	lsls	r2, r4, #29
 8000cc0:	4310      	orrs	r0, r2
 8000cc2:	2280      	movs	r2, #128	@ 0x80
 8000cc4:	08e4      	lsrs	r4, r4, #3
 8000cc6:	0312      	lsls	r2, r2, #12
 8000cc8:	4214      	tst	r4, r2
 8000cca:	d0cd      	beq.n	8000c68 <__aeabi_dadd+0x5c0>
 8000ccc:	08dd      	lsrs	r5, r3, #3
 8000cce:	4215      	tst	r5, r2
 8000cd0:	d1ca      	bne.n	8000c68 <__aeabi_dadd+0x5c0>
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	08d8      	lsrs	r0, r3, #3
 8000cd6:	4653      	mov	r3, sl
 8000cd8:	075b      	lsls	r3, r3, #29
 8000cda:	000e      	movs	r6, r1
 8000cdc:	002c      	movs	r4, r5
 8000cde:	4318      	orrs	r0, r3
 8000ce0:	e7c2      	b.n	8000c68 <__aeabi_dadd+0x5c0>
 8000ce2:	4663      	mov	r3, ip
 8000ce4:	08d9      	lsrs	r1, r3, #3
 8000ce6:	4653      	mov	r3, sl
 8000ce8:	075a      	lsls	r2, r3, #29
 8000cea:	430a      	orrs	r2, r1
 8000cec:	08dc      	lsrs	r4, r3, #3
 8000cee:	e699      	b.n	8000a24 <__aeabi_dadd+0x37c>
 8000cf0:	4663      	mov	r3, ip
 8000cf2:	08d8      	lsrs	r0, r3, #3
 8000cf4:	4653      	mov	r3, sl
 8000cf6:	075a      	lsls	r2, r3, #29
 8000cf8:	000e      	movs	r6, r1
 8000cfa:	4302      	orrs	r2, r0
 8000cfc:	08dc      	lsrs	r4, r3, #3
 8000cfe:	e6a1      	b.n	8000a44 <__aeabi_dadd+0x39c>
 8000d00:	0011      	movs	r1, r2
 8000d02:	0027      	movs	r7, r4
 8000d04:	3920      	subs	r1, #32
 8000d06:	40cf      	lsrs	r7, r1
 8000d08:	2a20      	cmp	r2, #32
 8000d0a:	d003      	beq.n	8000d14 <__aeabi_dadd+0x66c>
 8000d0c:	2140      	movs	r1, #64	@ 0x40
 8000d0e:	1a8a      	subs	r2, r1, r2
 8000d10:	4094      	lsls	r4, r2
 8000d12:	4320      	orrs	r0, r4
 8000d14:	1e42      	subs	r2, r0, #1
 8000d16:	4190      	sbcs	r0, r2
 8000d18:	0005      	movs	r5, r0
 8000d1a:	433d      	orrs	r5, r7
 8000d1c:	e651      	b.n	80009c2 <__aeabi_dadd+0x31a>
 8000d1e:	000c      	movs	r4, r1
 8000d20:	2500      	movs	r5, #0
 8000d22:	2200      	movs	r2, #0
 8000d24:	e558      	b.n	80007d8 <__aeabi_dadd+0x130>
 8000d26:	4460      	add	r0, ip
 8000d28:	4560      	cmp	r0, ip
 8000d2a:	4192      	sbcs	r2, r2
 8000d2c:	4454      	add	r4, sl
 8000d2e:	4252      	negs	r2, r2
 8000d30:	0005      	movs	r5, r0
 8000d32:	18a4      	adds	r4, r4, r2
 8000d34:	e73a      	b.n	8000bac <__aeabi_dadd+0x504>
 8000d36:	4653      	mov	r3, sl
 8000d38:	075a      	lsls	r2, r3, #29
 8000d3a:	4663      	mov	r3, ip
 8000d3c:	08d9      	lsrs	r1, r3, #3
 8000d3e:	4653      	mov	r3, sl
 8000d40:	430a      	orrs	r2, r1
 8000d42:	08dc      	lsrs	r4, r3, #3
 8000d44:	e67e      	b.n	8000a44 <__aeabi_dadd+0x39c>
 8000d46:	001a      	movs	r2, r3
 8000d48:	001c      	movs	r4, r3
 8000d4a:	432a      	orrs	r2, r5
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_dadd+0x6a8>
 8000d4e:	e6ab      	b.n	8000aa8 <__aeabi_dadd+0x400>
 8000d50:	e6c1      	b.n	8000ad6 <__aeabi_dadd+0x42e>
 8000d52:	2120      	movs	r1, #32
 8000d54:	2500      	movs	r5, #0
 8000d56:	1a09      	subs	r1, r1, r0
 8000d58:	e519      	b.n	800078e <__aeabi_dadd+0xe6>
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2500      	movs	r5, #0
 8000d5e:	4c01      	ldr	r4, [pc, #4]	@ (8000d64 <__aeabi_dadd+0x6bc>)
 8000d60:	e53a      	b.n	80007d8 <__aeabi_dadd+0x130>
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	000007ff 	.word	0x000007ff
 8000d68:	ff7fffff 	.word	0xff7fffff
 8000d6c:	000007fe 	.word	0x000007fe

08000d70 <__aeabi_ddiv>:
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	46de      	mov	lr, fp
 8000d74:	4645      	mov	r5, r8
 8000d76:	4657      	mov	r7, sl
 8000d78:	464e      	mov	r6, r9
 8000d7a:	b5e0      	push	{r5, r6, r7, lr}
 8000d7c:	b087      	sub	sp, #28
 8000d7e:	9200      	str	r2, [sp, #0]
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	030b      	lsls	r3, r1, #12
 8000d84:	0b1b      	lsrs	r3, r3, #12
 8000d86:	469b      	mov	fp, r3
 8000d88:	0fca      	lsrs	r2, r1, #31
 8000d8a:	004b      	lsls	r3, r1, #1
 8000d8c:	0004      	movs	r4, r0
 8000d8e:	4680      	mov	r8, r0
 8000d90:	0d5b      	lsrs	r3, r3, #21
 8000d92:	9202      	str	r2, [sp, #8]
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x28>
 8000d96:	e16a      	b.n	800106e <__aeabi_ddiv+0x2fe>
 8000d98:	4ad4      	ldr	r2, [pc, #848]	@ (80010ec <__aeabi_ddiv+0x37c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_ddiv+0x30>
 8000d9e:	e18c      	b.n	80010ba <__aeabi_ddiv+0x34a>
 8000da0:	4659      	mov	r1, fp
 8000da2:	0f42      	lsrs	r2, r0, #29
 8000da4:	00c9      	lsls	r1, r1, #3
 8000da6:	430a      	orrs	r2, r1
 8000da8:	2180      	movs	r1, #128	@ 0x80
 8000daa:	0409      	lsls	r1, r1, #16
 8000dac:	4311      	orrs	r1, r2
 8000dae:	00c2      	lsls	r2, r0, #3
 8000db0:	4690      	mov	r8, r2
 8000db2:	4acf      	ldr	r2, [pc, #828]	@ (80010f0 <__aeabi_ddiv+0x380>)
 8000db4:	4689      	mov	r9, r1
 8000db6:	4692      	mov	sl, r2
 8000db8:	449a      	add	sl, r3
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2400      	movs	r4, #0
 8000dbe:	9303      	str	r3, [sp, #12]
 8000dc0:	9e00      	ldr	r6, [sp, #0]
 8000dc2:	9f01      	ldr	r7, [sp, #4]
 8000dc4:	033b      	lsls	r3, r7, #12
 8000dc6:	0b1b      	lsrs	r3, r3, #12
 8000dc8:	469b      	mov	fp, r3
 8000dca:	007b      	lsls	r3, r7, #1
 8000dcc:	0030      	movs	r0, r6
 8000dce:	0d5b      	lsrs	r3, r3, #21
 8000dd0:	0ffd      	lsrs	r5, r7, #31
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_ddiv+0x68>
 8000dd6:	e128      	b.n	800102a <__aeabi_ddiv+0x2ba>
 8000dd8:	4ac4      	ldr	r2, [pc, #784]	@ (80010ec <__aeabi_ddiv+0x37c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x70>
 8000dde:	e177      	b.n	80010d0 <__aeabi_ddiv+0x360>
 8000de0:	4659      	mov	r1, fp
 8000de2:	0f72      	lsrs	r2, r6, #29
 8000de4:	00c9      	lsls	r1, r1, #3
 8000de6:	430a      	orrs	r2, r1
 8000de8:	2180      	movs	r1, #128	@ 0x80
 8000dea:	0409      	lsls	r1, r1, #16
 8000dec:	4311      	orrs	r1, r2
 8000dee:	468b      	mov	fp, r1
 8000df0:	49bf      	ldr	r1, [pc, #764]	@ (80010f0 <__aeabi_ddiv+0x380>)
 8000df2:	00f2      	lsls	r2, r6, #3
 8000df4:	468c      	mov	ip, r1
 8000df6:	4651      	mov	r1, sl
 8000df8:	4463      	add	r3, ip
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	469a      	mov	sl, r3
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9e02      	ldr	r6, [sp, #8]
 8000e02:	406e      	eors	r6, r5
 8000e04:	2c0f      	cmp	r4, #15
 8000e06:	d827      	bhi.n	8000e58 <__aeabi_ddiv+0xe8>
 8000e08:	49ba      	ldr	r1, [pc, #744]	@ (80010f4 <__aeabi_ddiv+0x384>)
 8000e0a:	00a4      	lsls	r4, r4, #2
 8000e0c:	5909      	ldr	r1, [r1, r4]
 8000e0e:	468f      	mov	pc, r1
 8000e10:	46cb      	mov	fp, r9
 8000e12:	4642      	mov	r2, r8
 8000e14:	9e02      	ldr	r6, [sp, #8]
 8000e16:	9b03      	ldr	r3, [sp, #12]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d016      	beq.n	8000e4a <__aeabi_ddiv+0xda>
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_ddiv+0xb2>
 8000e20:	e2a6      	b.n	8001370 <__aeabi_ddiv+0x600>
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d000      	beq.n	8000e28 <__aeabi_ddiv+0xb8>
 8000e26:	e0df      	b.n	8000fe8 <__aeabi_ddiv+0x278>
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	2400      	movs	r4, #0
 8000e2e:	4690      	mov	r8, r2
 8000e30:	051b      	lsls	r3, r3, #20
 8000e32:	4323      	orrs	r3, r4
 8000e34:	07f6      	lsls	r6, r6, #31
 8000e36:	4333      	orrs	r3, r6
 8000e38:	4640      	mov	r0, r8
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	b007      	add	sp, #28
 8000e3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e40:	46bb      	mov	fp, r7
 8000e42:	46b2      	mov	sl, r6
 8000e44:	46a9      	mov	r9, r5
 8000e46:	46a0      	mov	r8, r4
 8000e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	4690      	mov	r8, r2
 8000e50:	4ba6      	ldr	r3, [pc, #664]	@ (80010ec <__aeabi_ddiv+0x37c>)
 8000e52:	e7ed      	b.n	8000e30 <__aeabi_ddiv+0xc0>
 8000e54:	002e      	movs	r6, r5
 8000e56:	e7df      	b.n	8000e18 <__aeabi_ddiv+0xa8>
 8000e58:	45cb      	cmp	fp, r9
 8000e5a:	d200      	bcs.n	8000e5e <__aeabi_ddiv+0xee>
 8000e5c:	e1d4      	b.n	8001208 <__aeabi_ddiv+0x498>
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_ddiv+0xf2>
 8000e60:	e1cf      	b.n	8001202 <__aeabi_ddiv+0x492>
 8000e62:	2301      	movs	r3, #1
 8000e64:	425b      	negs	r3, r3
 8000e66:	469c      	mov	ip, r3
 8000e68:	4644      	mov	r4, r8
 8000e6a:	4648      	mov	r0, r9
 8000e6c:	2700      	movs	r7, #0
 8000e6e:	44e2      	add	sl, ip
 8000e70:	465b      	mov	r3, fp
 8000e72:	0e15      	lsrs	r5, r2, #24
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	431d      	orrs	r5, r3
 8000e78:	0c19      	lsrs	r1, r3, #16
 8000e7a:	042b      	lsls	r3, r5, #16
 8000e7c:	0212      	lsls	r2, r2, #8
 8000e7e:	9500      	str	r5, [sp, #0]
 8000e80:	0c1d      	lsrs	r5, r3, #16
 8000e82:	4691      	mov	r9, r2
 8000e84:	9102      	str	r1, [sp, #8]
 8000e86:	9503      	str	r5, [sp, #12]
 8000e88:	f7ff f9d6 	bl	8000238 <__aeabi_uidivmod>
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	436a      	muls	r2, r5
 8000e90:	040b      	lsls	r3, r1, #16
 8000e92:	0c21      	lsrs	r1, r4, #16
 8000e94:	4680      	mov	r8, r0
 8000e96:	4319      	orrs	r1, r3
 8000e98:	428a      	cmp	r2, r1
 8000e9a:	d909      	bls.n	8000eb0 <__aeabi_ddiv+0x140>
 8000e9c:	9d00      	ldr	r5, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	46ac      	mov	ip, r5
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	4461      	add	r1, ip
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	44e0      	add	r8, ip
 8000eaa:	428d      	cmp	r5, r1
 8000eac:	d800      	bhi.n	8000eb0 <__aeabi_ddiv+0x140>
 8000eae:	e1fb      	b.n	80012a8 <__aeabi_ddiv+0x538>
 8000eb0:	1a88      	subs	r0, r1, r2
 8000eb2:	9902      	ldr	r1, [sp, #8]
 8000eb4:	f7ff f9c0 	bl	8000238 <__aeabi_uidivmod>
 8000eb8:	9a03      	ldr	r2, [sp, #12]
 8000eba:	0424      	lsls	r4, r4, #16
 8000ebc:	4342      	muls	r2, r0
 8000ebe:	0409      	lsls	r1, r1, #16
 8000ec0:	0c24      	lsrs	r4, r4, #16
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	430c      	orrs	r4, r1
 8000ec6:	42a2      	cmp	r2, r4
 8000ec8:	d906      	bls.n	8000ed8 <__aeabi_ddiv+0x168>
 8000eca:	9900      	ldr	r1, [sp, #0]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	468c      	mov	ip, r1
 8000ed0:	4464      	add	r4, ip
 8000ed2:	42a1      	cmp	r1, r4
 8000ed4:	d800      	bhi.n	8000ed8 <__aeabi_ddiv+0x168>
 8000ed6:	e1e1      	b.n	800129c <__aeabi_ddiv+0x52c>
 8000ed8:	1aa0      	subs	r0, r4, r2
 8000eda:	4642      	mov	r2, r8
 8000edc:	0412      	lsls	r2, r2, #16
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	4693      	mov	fp, r2
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	4659      	mov	r1, fp
 8000ee6:	0c1b      	lsrs	r3, r3, #16
 8000ee8:	001d      	movs	r5, r3
 8000eea:	9304      	str	r3, [sp, #16]
 8000eec:	040b      	lsls	r3, r1, #16
 8000eee:	4649      	mov	r1, r9
 8000ef0:	0409      	lsls	r1, r1, #16
 8000ef2:	0c09      	lsrs	r1, r1, #16
 8000ef4:	000c      	movs	r4, r1
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	435c      	muls	r4, r3
 8000efa:	0c12      	lsrs	r2, r2, #16
 8000efc:	436b      	muls	r3, r5
 8000efe:	4688      	mov	r8, r1
 8000f00:	4351      	muls	r1, r2
 8000f02:	436a      	muls	r2, r5
 8000f04:	0c25      	lsrs	r5, r4, #16
 8000f06:	46ac      	mov	ip, r5
 8000f08:	185b      	adds	r3, r3, r1
 8000f0a:	4463      	add	r3, ip
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d903      	bls.n	8000f18 <__aeabi_ddiv+0x1a8>
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	0249      	lsls	r1, r1, #9
 8000f14:	468c      	mov	ip, r1
 8000f16:	4462      	add	r2, ip
 8000f18:	0c19      	lsrs	r1, r3, #16
 8000f1a:	0424      	lsls	r4, r4, #16
 8000f1c:	041b      	lsls	r3, r3, #16
 8000f1e:	0c24      	lsrs	r4, r4, #16
 8000f20:	188a      	adds	r2, r1, r2
 8000f22:	191c      	adds	r4, r3, r4
 8000f24:	4290      	cmp	r0, r2
 8000f26:	d302      	bcc.n	8000f2e <__aeabi_ddiv+0x1be>
 8000f28:	d116      	bne.n	8000f58 <__aeabi_ddiv+0x1e8>
 8000f2a:	42a7      	cmp	r7, r4
 8000f2c:	d214      	bcs.n	8000f58 <__aeabi_ddiv+0x1e8>
 8000f2e:	465b      	mov	r3, fp
 8000f30:	9d00      	ldr	r5, [sp, #0]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	444f      	add	r7, r9
 8000f36:	9305      	str	r3, [sp, #20]
 8000f38:	454f      	cmp	r7, r9
 8000f3a:	419b      	sbcs	r3, r3
 8000f3c:	46ac      	mov	ip, r5
 8000f3e:	425b      	negs	r3, r3
 8000f40:	4463      	add	r3, ip
 8000f42:	18c0      	adds	r0, r0, r3
 8000f44:	4285      	cmp	r5, r0
 8000f46:	d300      	bcc.n	8000f4a <__aeabi_ddiv+0x1da>
 8000f48:	e1a1      	b.n	800128e <__aeabi_ddiv+0x51e>
 8000f4a:	4282      	cmp	r2, r0
 8000f4c:	d900      	bls.n	8000f50 <__aeabi_ddiv+0x1e0>
 8000f4e:	e1f6      	b.n	800133e <__aeabi_ddiv+0x5ce>
 8000f50:	d100      	bne.n	8000f54 <__aeabi_ddiv+0x1e4>
 8000f52:	e1f1      	b.n	8001338 <__aeabi_ddiv+0x5c8>
 8000f54:	9b05      	ldr	r3, [sp, #20]
 8000f56:	469b      	mov	fp, r3
 8000f58:	1b3c      	subs	r4, r7, r4
 8000f5a:	42a7      	cmp	r7, r4
 8000f5c:	41bf      	sbcs	r7, r7
 8000f5e:	9d00      	ldr	r5, [sp, #0]
 8000f60:	1a80      	subs	r0, r0, r2
 8000f62:	427f      	negs	r7, r7
 8000f64:	1bc0      	subs	r0, r0, r7
 8000f66:	4285      	cmp	r5, r0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x1fc>
 8000f6a:	e1d0      	b.n	800130e <__aeabi_ddiv+0x59e>
 8000f6c:	9902      	ldr	r1, [sp, #8]
 8000f6e:	f7ff f963 	bl	8000238 <__aeabi_uidivmod>
 8000f72:	9a03      	ldr	r2, [sp, #12]
 8000f74:	040b      	lsls	r3, r1, #16
 8000f76:	4342      	muls	r2, r0
 8000f78:	0c21      	lsrs	r1, r4, #16
 8000f7a:	0007      	movs	r7, r0
 8000f7c:	4319      	orrs	r1, r3
 8000f7e:	428a      	cmp	r2, r1
 8000f80:	d900      	bls.n	8000f84 <__aeabi_ddiv+0x214>
 8000f82:	e178      	b.n	8001276 <__aeabi_ddiv+0x506>
 8000f84:	1a88      	subs	r0, r1, r2
 8000f86:	9902      	ldr	r1, [sp, #8]
 8000f88:	f7ff f956 	bl	8000238 <__aeabi_uidivmod>
 8000f8c:	9a03      	ldr	r2, [sp, #12]
 8000f8e:	0424      	lsls	r4, r4, #16
 8000f90:	4342      	muls	r2, r0
 8000f92:	0409      	lsls	r1, r1, #16
 8000f94:	0c24      	lsrs	r4, r4, #16
 8000f96:	0003      	movs	r3, r0
 8000f98:	430c      	orrs	r4, r1
 8000f9a:	42a2      	cmp	r2, r4
 8000f9c:	d900      	bls.n	8000fa0 <__aeabi_ddiv+0x230>
 8000f9e:	e15d      	b.n	800125c <__aeabi_ddiv+0x4ec>
 8000fa0:	4641      	mov	r1, r8
 8000fa2:	1aa4      	subs	r4, r4, r2
 8000fa4:	043a      	lsls	r2, r7, #16
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	9d04      	ldr	r5, [sp, #16]
 8000faa:	0413      	lsls	r3, r2, #16
 8000fac:	0c1b      	lsrs	r3, r3, #16
 8000fae:	4359      	muls	r1, r3
 8000fb0:	4647      	mov	r7, r8
 8000fb2:	436b      	muls	r3, r5
 8000fb4:	469c      	mov	ip, r3
 8000fb6:	0c10      	lsrs	r0, r2, #16
 8000fb8:	4347      	muls	r7, r0
 8000fba:	0c0b      	lsrs	r3, r1, #16
 8000fbc:	44bc      	add	ip, r7
 8000fbe:	4463      	add	r3, ip
 8000fc0:	4368      	muls	r0, r5
 8000fc2:	429f      	cmp	r7, r3
 8000fc4:	d903      	bls.n	8000fce <__aeabi_ddiv+0x25e>
 8000fc6:	2580      	movs	r5, #128	@ 0x80
 8000fc8:	026d      	lsls	r5, r5, #9
 8000fca:	46ac      	mov	ip, r5
 8000fcc:	4460      	add	r0, ip
 8000fce:	0c1f      	lsrs	r7, r3, #16
 8000fd0:	0409      	lsls	r1, r1, #16
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	0c09      	lsrs	r1, r1, #16
 8000fd6:	183f      	adds	r7, r7, r0
 8000fd8:	185b      	adds	r3, r3, r1
 8000fda:	42bc      	cmp	r4, r7
 8000fdc:	d200      	bcs.n	8000fe0 <__aeabi_ddiv+0x270>
 8000fde:	e102      	b.n	80011e6 <__aeabi_ddiv+0x476>
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_ddiv+0x274>
 8000fe2:	e0fd      	b.n	80011e0 <__aeabi_ddiv+0x470>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	4b43      	ldr	r3, [pc, #268]	@ (80010f8 <__aeabi_ddiv+0x388>)
 8000fea:	4453      	add	r3, sl
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	dc00      	bgt.n	8000ff2 <__aeabi_ddiv+0x282>
 8000ff0:	e0ae      	b.n	8001150 <__aeabi_ddiv+0x3e0>
 8000ff2:	0751      	lsls	r1, r2, #29
 8000ff4:	d000      	beq.n	8000ff8 <__aeabi_ddiv+0x288>
 8000ff6:	e198      	b.n	800132a <__aeabi_ddiv+0x5ba>
 8000ff8:	4659      	mov	r1, fp
 8000ffa:	01c9      	lsls	r1, r1, #7
 8000ffc:	d506      	bpl.n	800100c <__aeabi_ddiv+0x29c>
 8000ffe:	4659      	mov	r1, fp
 8001000:	4b3e      	ldr	r3, [pc, #248]	@ (80010fc <__aeabi_ddiv+0x38c>)
 8001002:	4019      	ands	r1, r3
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	468b      	mov	fp, r1
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4453      	add	r3, sl
 800100c:	493c      	ldr	r1, [pc, #240]	@ (8001100 <__aeabi_ddiv+0x390>)
 800100e:	428b      	cmp	r3, r1
 8001010:	dd00      	ble.n	8001014 <__aeabi_ddiv+0x2a4>
 8001012:	e71a      	b.n	8000e4a <__aeabi_ddiv+0xda>
 8001014:	4659      	mov	r1, fp
 8001016:	08d2      	lsrs	r2, r2, #3
 8001018:	0749      	lsls	r1, r1, #29
 800101a:	4311      	orrs	r1, r2
 800101c:	465a      	mov	r2, fp
 800101e:	055b      	lsls	r3, r3, #21
 8001020:	0254      	lsls	r4, r2, #9
 8001022:	4688      	mov	r8, r1
 8001024:	0b24      	lsrs	r4, r4, #12
 8001026:	0d5b      	lsrs	r3, r3, #21
 8001028:	e702      	b.n	8000e30 <__aeabi_ddiv+0xc0>
 800102a:	465a      	mov	r2, fp
 800102c:	9b00      	ldr	r3, [sp, #0]
 800102e:	431a      	orrs	r2, r3
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x2c4>
 8001032:	e07e      	b.n	8001132 <__aeabi_ddiv+0x3c2>
 8001034:	465b      	mov	r3, fp
 8001036:	2b00      	cmp	r3, #0
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x2cc>
 800103a:	e100      	b.n	800123e <__aeabi_ddiv+0x4ce>
 800103c:	4658      	mov	r0, fp
 800103e:	f001 f9cd 	bl	80023dc <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	3a0b      	subs	r2, #11
 8001048:	271d      	movs	r7, #29
 800104a:	9e00      	ldr	r6, [sp, #0]
 800104c:	1aba      	subs	r2, r7, r2
 800104e:	0019      	movs	r1, r3
 8001050:	4658      	mov	r0, fp
 8001052:	40d6      	lsrs	r6, r2
 8001054:	3908      	subs	r1, #8
 8001056:	4088      	lsls	r0, r1
 8001058:	0032      	movs	r2, r6
 800105a:	4302      	orrs	r2, r0
 800105c:	4693      	mov	fp, r2
 800105e:	9a00      	ldr	r2, [sp, #0]
 8001060:	408a      	lsls	r2, r1
 8001062:	4928      	ldr	r1, [pc, #160]	@ (8001104 <__aeabi_ddiv+0x394>)
 8001064:	4453      	add	r3, sl
 8001066:	468a      	mov	sl, r1
 8001068:	449a      	add	sl, r3
 800106a:	2300      	movs	r3, #0
 800106c:	e6c8      	b.n	8000e00 <__aeabi_ddiv+0x90>
 800106e:	465b      	mov	r3, fp
 8001070:	4303      	orrs	r3, r0
 8001072:	4699      	mov	r9, r3
 8001074:	d056      	beq.n	8001124 <__aeabi_ddiv+0x3b4>
 8001076:	465b      	mov	r3, fp
 8001078:	2b00      	cmp	r3, #0
 800107a:	d100      	bne.n	800107e <__aeabi_ddiv+0x30e>
 800107c:	e0cd      	b.n	800121a <__aeabi_ddiv+0x4aa>
 800107e:	4658      	mov	r0, fp
 8001080:	f001 f9ac 	bl	80023dc <__clzsi2>
 8001084:	230b      	movs	r3, #11
 8001086:	425b      	negs	r3, r3
 8001088:	469c      	mov	ip, r3
 800108a:	0002      	movs	r2, r0
 800108c:	4484      	add	ip, r0
 800108e:	4666      	mov	r6, ip
 8001090:	231d      	movs	r3, #29
 8001092:	1b9b      	subs	r3, r3, r6
 8001094:	0026      	movs	r6, r4
 8001096:	0011      	movs	r1, r2
 8001098:	4658      	mov	r0, fp
 800109a:	40de      	lsrs	r6, r3
 800109c:	3908      	subs	r1, #8
 800109e:	4088      	lsls	r0, r1
 80010a0:	0033      	movs	r3, r6
 80010a2:	4303      	orrs	r3, r0
 80010a4:	4699      	mov	r9, r3
 80010a6:	0023      	movs	r3, r4
 80010a8:	408b      	lsls	r3, r1
 80010aa:	4698      	mov	r8, r3
 80010ac:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <__aeabi_ddiv+0x398>)
 80010ae:	2400      	movs	r4, #0
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	469a      	mov	sl, r3
 80010b4:	2300      	movs	r3, #0
 80010b6:	9303      	str	r3, [sp, #12]
 80010b8:	e682      	b.n	8000dc0 <__aeabi_ddiv+0x50>
 80010ba:	465a      	mov	r2, fp
 80010bc:	4302      	orrs	r2, r0
 80010be:	4691      	mov	r9, r2
 80010c0:	d12a      	bne.n	8001118 <__aeabi_ddiv+0x3a8>
 80010c2:	2200      	movs	r2, #0
 80010c4:	469a      	mov	sl, r3
 80010c6:	2302      	movs	r3, #2
 80010c8:	4690      	mov	r8, r2
 80010ca:	2408      	movs	r4, #8
 80010cc:	9303      	str	r3, [sp, #12]
 80010ce:	e677      	b.n	8000dc0 <__aeabi_ddiv+0x50>
 80010d0:	465a      	mov	r2, fp
 80010d2:	9b00      	ldr	r3, [sp, #0]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <__aeabi_ddiv+0x39c>)
 80010d8:	469c      	mov	ip, r3
 80010da:	44e2      	add	sl, ip
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d117      	bne.n	8001110 <__aeabi_ddiv+0x3a0>
 80010e0:	2302      	movs	r3, #2
 80010e2:	431c      	orrs	r4, r3
 80010e4:	2300      	movs	r3, #0
 80010e6:	469b      	mov	fp, r3
 80010e8:	3302      	adds	r3, #2
 80010ea:	e689      	b.n	8000e00 <__aeabi_ddiv+0x90>
 80010ec:	000007ff 	.word	0x000007ff
 80010f0:	fffffc01 	.word	0xfffffc01
 80010f4:	0800b6f0 	.word	0x0800b6f0
 80010f8:	000003ff 	.word	0x000003ff
 80010fc:	feffffff 	.word	0xfeffffff
 8001100:	000007fe 	.word	0x000007fe
 8001104:	000003f3 	.word	0x000003f3
 8001108:	fffffc0d 	.word	0xfffffc0d
 800110c:	fffff801 	.word	0xfffff801
 8001110:	2303      	movs	r3, #3
 8001112:	0032      	movs	r2, r6
 8001114:	431c      	orrs	r4, r3
 8001116:	e673      	b.n	8000e00 <__aeabi_ddiv+0x90>
 8001118:	469a      	mov	sl, r3
 800111a:	2303      	movs	r3, #3
 800111c:	46d9      	mov	r9, fp
 800111e:	240c      	movs	r4, #12
 8001120:	9303      	str	r3, [sp, #12]
 8001122:	e64d      	b.n	8000dc0 <__aeabi_ddiv+0x50>
 8001124:	2300      	movs	r3, #0
 8001126:	4698      	mov	r8, r3
 8001128:	469a      	mov	sl, r3
 800112a:	3301      	adds	r3, #1
 800112c:	2404      	movs	r4, #4
 800112e:	9303      	str	r3, [sp, #12]
 8001130:	e646      	b.n	8000dc0 <__aeabi_ddiv+0x50>
 8001132:	2301      	movs	r3, #1
 8001134:	431c      	orrs	r4, r3
 8001136:	2300      	movs	r3, #0
 8001138:	469b      	mov	fp, r3
 800113a:	3301      	adds	r3, #1
 800113c:	e660      	b.n	8000e00 <__aeabi_ddiv+0x90>
 800113e:	2300      	movs	r3, #0
 8001140:	2480      	movs	r4, #128	@ 0x80
 8001142:	4698      	mov	r8, r3
 8001144:	2600      	movs	r6, #0
 8001146:	4b92      	ldr	r3, [pc, #584]	@ (8001390 <__aeabi_ddiv+0x620>)
 8001148:	0324      	lsls	r4, r4, #12
 800114a:	e671      	b.n	8000e30 <__aeabi_ddiv+0xc0>
 800114c:	2201      	movs	r2, #1
 800114e:	4252      	negs	r2, r2
 8001150:	2101      	movs	r1, #1
 8001152:	1ac9      	subs	r1, r1, r3
 8001154:	2938      	cmp	r1, #56	@ 0x38
 8001156:	dd00      	ble.n	800115a <__aeabi_ddiv+0x3ea>
 8001158:	e666      	b.n	8000e28 <__aeabi_ddiv+0xb8>
 800115a:	291f      	cmp	r1, #31
 800115c:	dc00      	bgt.n	8001160 <__aeabi_ddiv+0x3f0>
 800115e:	e0ab      	b.n	80012b8 <__aeabi_ddiv+0x548>
 8001160:	201f      	movs	r0, #31
 8001162:	4240      	negs	r0, r0
 8001164:	1ac3      	subs	r3, r0, r3
 8001166:	4658      	mov	r0, fp
 8001168:	40d8      	lsrs	r0, r3
 800116a:	0003      	movs	r3, r0
 800116c:	2920      	cmp	r1, #32
 800116e:	d004      	beq.n	800117a <__aeabi_ddiv+0x40a>
 8001170:	4658      	mov	r0, fp
 8001172:	4988      	ldr	r1, [pc, #544]	@ (8001394 <__aeabi_ddiv+0x624>)
 8001174:	4451      	add	r1, sl
 8001176:	4088      	lsls	r0, r1
 8001178:	4302      	orrs	r2, r0
 800117a:	1e51      	subs	r1, r2, #1
 800117c:	418a      	sbcs	r2, r1
 800117e:	431a      	orrs	r2, r3
 8001180:	2307      	movs	r3, #7
 8001182:	0019      	movs	r1, r3
 8001184:	2400      	movs	r4, #0
 8001186:	4011      	ands	r1, r2
 8001188:	4213      	tst	r3, r2
 800118a:	d00c      	beq.n	80011a6 <__aeabi_ddiv+0x436>
 800118c:	230f      	movs	r3, #15
 800118e:	4013      	ands	r3, r2
 8001190:	2b04      	cmp	r3, #4
 8001192:	d100      	bne.n	8001196 <__aeabi_ddiv+0x426>
 8001194:	e0f9      	b.n	800138a <__aeabi_ddiv+0x61a>
 8001196:	1d11      	adds	r1, r2, #4
 8001198:	4291      	cmp	r1, r2
 800119a:	419b      	sbcs	r3, r3
 800119c:	000a      	movs	r2, r1
 800119e:	425b      	negs	r3, r3
 80011a0:	0759      	lsls	r1, r3, #29
 80011a2:	025b      	lsls	r3, r3, #9
 80011a4:	0b1c      	lsrs	r4, r3, #12
 80011a6:	08d2      	lsrs	r2, r2, #3
 80011a8:	430a      	orrs	r2, r1
 80011aa:	4690      	mov	r8, r2
 80011ac:	2300      	movs	r3, #0
 80011ae:	e63f      	b.n	8000e30 <__aeabi_ddiv+0xc0>
 80011b0:	2480      	movs	r4, #128	@ 0x80
 80011b2:	464b      	mov	r3, r9
 80011b4:	0324      	lsls	r4, r4, #12
 80011b6:	4223      	tst	r3, r4
 80011b8:	d009      	beq.n	80011ce <__aeabi_ddiv+0x45e>
 80011ba:	465b      	mov	r3, fp
 80011bc:	4223      	tst	r3, r4
 80011be:	d106      	bne.n	80011ce <__aeabi_ddiv+0x45e>
 80011c0:	431c      	orrs	r4, r3
 80011c2:	0324      	lsls	r4, r4, #12
 80011c4:	002e      	movs	r6, r5
 80011c6:	4690      	mov	r8, r2
 80011c8:	4b71      	ldr	r3, [pc, #452]	@ (8001390 <__aeabi_ddiv+0x620>)
 80011ca:	0b24      	lsrs	r4, r4, #12
 80011cc:	e630      	b.n	8000e30 <__aeabi_ddiv+0xc0>
 80011ce:	2480      	movs	r4, #128	@ 0x80
 80011d0:	464b      	mov	r3, r9
 80011d2:	0324      	lsls	r4, r4, #12
 80011d4:	431c      	orrs	r4, r3
 80011d6:	0324      	lsls	r4, r4, #12
 80011d8:	9e02      	ldr	r6, [sp, #8]
 80011da:	4b6d      	ldr	r3, [pc, #436]	@ (8001390 <__aeabi_ddiv+0x620>)
 80011dc:	0b24      	lsrs	r4, r4, #12
 80011de:	e627      	b.n	8000e30 <__aeabi_ddiv+0xc0>
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x476>
 80011e4:	e700      	b.n	8000fe8 <__aeabi_ddiv+0x278>
 80011e6:	9800      	ldr	r0, [sp, #0]
 80011e8:	1e51      	subs	r1, r2, #1
 80011ea:	4684      	mov	ip, r0
 80011ec:	4464      	add	r4, ip
 80011ee:	4284      	cmp	r4, r0
 80011f0:	d200      	bcs.n	80011f4 <__aeabi_ddiv+0x484>
 80011f2:	e084      	b.n	80012fe <__aeabi_ddiv+0x58e>
 80011f4:	42bc      	cmp	r4, r7
 80011f6:	d200      	bcs.n	80011fa <__aeabi_ddiv+0x48a>
 80011f8:	e0ae      	b.n	8001358 <__aeabi_ddiv+0x5e8>
 80011fa:	d100      	bne.n	80011fe <__aeabi_ddiv+0x48e>
 80011fc:	e0c1      	b.n	8001382 <__aeabi_ddiv+0x612>
 80011fe:	000a      	movs	r2, r1
 8001200:	e6f0      	b.n	8000fe4 <__aeabi_ddiv+0x274>
 8001202:	4542      	cmp	r2, r8
 8001204:	d900      	bls.n	8001208 <__aeabi_ddiv+0x498>
 8001206:	e62c      	b.n	8000e62 <__aeabi_ddiv+0xf2>
 8001208:	464b      	mov	r3, r9
 800120a:	07dc      	lsls	r4, r3, #31
 800120c:	0858      	lsrs	r0, r3, #1
 800120e:	4643      	mov	r3, r8
 8001210:	085b      	lsrs	r3, r3, #1
 8001212:	431c      	orrs	r4, r3
 8001214:	4643      	mov	r3, r8
 8001216:	07df      	lsls	r7, r3, #31
 8001218:	e62a      	b.n	8000e70 <__aeabi_ddiv+0x100>
 800121a:	f001 f8df 	bl	80023dc <__clzsi2>
 800121e:	2315      	movs	r3, #21
 8001220:	469c      	mov	ip, r3
 8001222:	4484      	add	ip, r0
 8001224:	0002      	movs	r2, r0
 8001226:	4663      	mov	r3, ip
 8001228:	3220      	adds	r2, #32
 800122a:	2b1c      	cmp	r3, #28
 800122c:	dc00      	bgt.n	8001230 <__aeabi_ddiv+0x4c0>
 800122e:	e72e      	b.n	800108e <__aeabi_ddiv+0x31e>
 8001230:	0023      	movs	r3, r4
 8001232:	3808      	subs	r0, #8
 8001234:	4083      	lsls	r3, r0
 8001236:	4699      	mov	r9, r3
 8001238:	2300      	movs	r3, #0
 800123a:	4698      	mov	r8, r3
 800123c:	e736      	b.n	80010ac <__aeabi_ddiv+0x33c>
 800123e:	f001 f8cd 	bl	80023dc <__clzsi2>
 8001242:	0002      	movs	r2, r0
 8001244:	0003      	movs	r3, r0
 8001246:	3215      	adds	r2, #21
 8001248:	3320      	adds	r3, #32
 800124a:	2a1c      	cmp	r2, #28
 800124c:	dc00      	bgt.n	8001250 <__aeabi_ddiv+0x4e0>
 800124e:	e6fb      	b.n	8001048 <__aeabi_ddiv+0x2d8>
 8001250:	9900      	ldr	r1, [sp, #0]
 8001252:	3808      	subs	r0, #8
 8001254:	4081      	lsls	r1, r0
 8001256:	2200      	movs	r2, #0
 8001258:	468b      	mov	fp, r1
 800125a:	e702      	b.n	8001062 <__aeabi_ddiv+0x2f2>
 800125c:	9900      	ldr	r1, [sp, #0]
 800125e:	3b01      	subs	r3, #1
 8001260:	468c      	mov	ip, r1
 8001262:	4464      	add	r4, ip
 8001264:	42a1      	cmp	r1, r4
 8001266:	d900      	bls.n	800126a <__aeabi_ddiv+0x4fa>
 8001268:	e69a      	b.n	8000fa0 <__aeabi_ddiv+0x230>
 800126a:	42a2      	cmp	r2, r4
 800126c:	d800      	bhi.n	8001270 <__aeabi_ddiv+0x500>
 800126e:	e697      	b.n	8000fa0 <__aeabi_ddiv+0x230>
 8001270:	1e83      	subs	r3, r0, #2
 8001272:	4464      	add	r4, ip
 8001274:	e694      	b.n	8000fa0 <__aeabi_ddiv+0x230>
 8001276:	46ac      	mov	ip, r5
 8001278:	4461      	add	r1, ip
 800127a:	3f01      	subs	r7, #1
 800127c:	428d      	cmp	r5, r1
 800127e:	d900      	bls.n	8001282 <__aeabi_ddiv+0x512>
 8001280:	e680      	b.n	8000f84 <__aeabi_ddiv+0x214>
 8001282:	428a      	cmp	r2, r1
 8001284:	d800      	bhi.n	8001288 <__aeabi_ddiv+0x518>
 8001286:	e67d      	b.n	8000f84 <__aeabi_ddiv+0x214>
 8001288:	1e87      	subs	r7, r0, #2
 800128a:	4461      	add	r1, ip
 800128c:	e67a      	b.n	8000f84 <__aeabi_ddiv+0x214>
 800128e:	4285      	cmp	r5, r0
 8001290:	d000      	beq.n	8001294 <__aeabi_ddiv+0x524>
 8001292:	e65f      	b.n	8000f54 <__aeabi_ddiv+0x1e4>
 8001294:	45b9      	cmp	r9, r7
 8001296:	d900      	bls.n	800129a <__aeabi_ddiv+0x52a>
 8001298:	e65c      	b.n	8000f54 <__aeabi_ddiv+0x1e4>
 800129a:	e656      	b.n	8000f4a <__aeabi_ddiv+0x1da>
 800129c:	42a2      	cmp	r2, r4
 800129e:	d800      	bhi.n	80012a2 <__aeabi_ddiv+0x532>
 80012a0:	e61a      	b.n	8000ed8 <__aeabi_ddiv+0x168>
 80012a2:	1e83      	subs	r3, r0, #2
 80012a4:	4464      	add	r4, ip
 80012a6:	e617      	b.n	8000ed8 <__aeabi_ddiv+0x168>
 80012a8:	428a      	cmp	r2, r1
 80012aa:	d800      	bhi.n	80012ae <__aeabi_ddiv+0x53e>
 80012ac:	e600      	b.n	8000eb0 <__aeabi_ddiv+0x140>
 80012ae:	46ac      	mov	ip, r5
 80012b0:	1e83      	subs	r3, r0, #2
 80012b2:	4698      	mov	r8, r3
 80012b4:	4461      	add	r1, ip
 80012b6:	e5fb      	b.n	8000eb0 <__aeabi_ddiv+0x140>
 80012b8:	4837      	ldr	r0, [pc, #220]	@ (8001398 <__aeabi_ddiv+0x628>)
 80012ba:	0014      	movs	r4, r2
 80012bc:	4450      	add	r0, sl
 80012be:	4082      	lsls	r2, r0
 80012c0:	465b      	mov	r3, fp
 80012c2:	0017      	movs	r7, r2
 80012c4:	4083      	lsls	r3, r0
 80012c6:	40cc      	lsrs	r4, r1
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	4323      	orrs	r3, r4
 80012ce:	433b      	orrs	r3, r7
 80012d0:	001a      	movs	r2, r3
 80012d2:	465b      	mov	r3, fp
 80012d4:	40cb      	lsrs	r3, r1
 80012d6:	0751      	lsls	r1, r2, #29
 80012d8:	d009      	beq.n	80012ee <__aeabi_ddiv+0x57e>
 80012da:	210f      	movs	r1, #15
 80012dc:	4011      	ands	r1, r2
 80012de:	2904      	cmp	r1, #4
 80012e0:	d005      	beq.n	80012ee <__aeabi_ddiv+0x57e>
 80012e2:	1d11      	adds	r1, r2, #4
 80012e4:	4291      	cmp	r1, r2
 80012e6:	4192      	sbcs	r2, r2
 80012e8:	4252      	negs	r2, r2
 80012ea:	189b      	adds	r3, r3, r2
 80012ec:	000a      	movs	r2, r1
 80012ee:	0219      	lsls	r1, r3, #8
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_ddiv+0x584>
 80012f2:	e755      	b.n	80011a0 <__aeabi_ddiv+0x430>
 80012f4:	2200      	movs	r2, #0
 80012f6:	2301      	movs	r3, #1
 80012f8:	2400      	movs	r4, #0
 80012fa:	4690      	mov	r8, r2
 80012fc:	e598      	b.n	8000e30 <__aeabi_ddiv+0xc0>
 80012fe:	000a      	movs	r2, r1
 8001300:	42bc      	cmp	r4, r7
 8001302:	d000      	beq.n	8001306 <__aeabi_ddiv+0x596>
 8001304:	e66e      	b.n	8000fe4 <__aeabi_ddiv+0x274>
 8001306:	454b      	cmp	r3, r9
 8001308:	d000      	beq.n	800130c <__aeabi_ddiv+0x59c>
 800130a:	e66b      	b.n	8000fe4 <__aeabi_ddiv+0x274>
 800130c:	e66c      	b.n	8000fe8 <__aeabi_ddiv+0x278>
 800130e:	4b23      	ldr	r3, [pc, #140]	@ (800139c <__aeabi_ddiv+0x62c>)
 8001310:	4a23      	ldr	r2, [pc, #140]	@ (80013a0 <__aeabi_ddiv+0x630>)
 8001312:	4453      	add	r3, sl
 8001314:	4592      	cmp	sl, r2
 8001316:	da00      	bge.n	800131a <__aeabi_ddiv+0x5aa>
 8001318:	e718      	b.n	800114c <__aeabi_ddiv+0x3dc>
 800131a:	2101      	movs	r1, #1
 800131c:	4249      	negs	r1, r1
 800131e:	1d0a      	adds	r2, r1, #4
 8001320:	428a      	cmp	r2, r1
 8001322:	4189      	sbcs	r1, r1
 8001324:	4249      	negs	r1, r1
 8001326:	448b      	add	fp, r1
 8001328:	e666      	b.n	8000ff8 <__aeabi_ddiv+0x288>
 800132a:	210f      	movs	r1, #15
 800132c:	4011      	ands	r1, r2
 800132e:	2904      	cmp	r1, #4
 8001330:	d100      	bne.n	8001334 <__aeabi_ddiv+0x5c4>
 8001332:	e661      	b.n	8000ff8 <__aeabi_ddiv+0x288>
 8001334:	0011      	movs	r1, r2
 8001336:	e7f2      	b.n	800131e <__aeabi_ddiv+0x5ae>
 8001338:	42bc      	cmp	r4, r7
 800133a:	d800      	bhi.n	800133e <__aeabi_ddiv+0x5ce>
 800133c:	e60a      	b.n	8000f54 <__aeabi_ddiv+0x1e4>
 800133e:	2302      	movs	r3, #2
 8001340:	425b      	negs	r3, r3
 8001342:	469c      	mov	ip, r3
 8001344:	9900      	ldr	r1, [sp, #0]
 8001346:	444f      	add	r7, r9
 8001348:	454f      	cmp	r7, r9
 800134a:	419b      	sbcs	r3, r3
 800134c:	44e3      	add	fp, ip
 800134e:	468c      	mov	ip, r1
 8001350:	425b      	negs	r3, r3
 8001352:	4463      	add	r3, ip
 8001354:	18c0      	adds	r0, r0, r3
 8001356:	e5ff      	b.n	8000f58 <__aeabi_ddiv+0x1e8>
 8001358:	4649      	mov	r1, r9
 800135a:	9d00      	ldr	r5, [sp, #0]
 800135c:	0048      	lsls	r0, r1, #1
 800135e:	4548      	cmp	r0, r9
 8001360:	4189      	sbcs	r1, r1
 8001362:	46ac      	mov	ip, r5
 8001364:	4249      	negs	r1, r1
 8001366:	4461      	add	r1, ip
 8001368:	4681      	mov	r9, r0
 800136a:	3a02      	subs	r2, #2
 800136c:	1864      	adds	r4, r4, r1
 800136e:	e7c7      	b.n	8001300 <__aeabi_ddiv+0x590>
 8001370:	2480      	movs	r4, #128	@ 0x80
 8001372:	465b      	mov	r3, fp
 8001374:	0324      	lsls	r4, r4, #12
 8001376:	431c      	orrs	r4, r3
 8001378:	0324      	lsls	r4, r4, #12
 800137a:	4690      	mov	r8, r2
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <__aeabi_ddiv+0x620>)
 800137e:	0b24      	lsrs	r4, r4, #12
 8001380:	e556      	b.n	8000e30 <__aeabi_ddiv+0xc0>
 8001382:	4599      	cmp	r9, r3
 8001384:	d3e8      	bcc.n	8001358 <__aeabi_ddiv+0x5e8>
 8001386:	000a      	movs	r2, r1
 8001388:	e7bd      	b.n	8001306 <__aeabi_ddiv+0x596>
 800138a:	2300      	movs	r3, #0
 800138c:	e708      	b.n	80011a0 <__aeabi_ddiv+0x430>
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	000007ff 	.word	0x000007ff
 8001394:	0000043e 	.word	0x0000043e
 8001398:	0000041e 	.word	0x0000041e
 800139c:	000003ff 	.word	0x000003ff
 80013a0:	fffffc02 	.word	0xfffffc02

080013a4 <__eqdf2>:
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a6:	4657      	mov	r7, sl
 80013a8:	46de      	mov	lr, fp
 80013aa:	464e      	mov	r6, r9
 80013ac:	4645      	mov	r5, r8
 80013ae:	b5e0      	push	{r5, r6, r7, lr}
 80013b0:	000d      	movs	r5, r1
 80013b2:	0004      	movs	r4, r0
 80013b4:	0fe8      	lsrs	r0, r5, #31
 80013b6:	4683      	mov	fp, r0
 80013b8:	0309      	lsls	r1, r1, #12
 80013ba:	0fd8      	lsrs	r0, r3, #31
 80013bc:	0b09      	lsrs	r1, r1, #12
 80013be:	4682      	mov	sl, r0
 80013c0:	4819      	ldr	r0, [pc, #100]	@ (8001428 <__eqdf2+0x84>)
 80013c2:	468c      	mov	ip, r1
 80013c4:	031f      	lsls	r7, r3, #12
 80013c6:	0069      	lsls	r1, r5, #1
 80013c8:	005e      	lsls	r6, r3, #1
 80013ca:	0d49      	lsrs	r1, r1, #21
 80013cc:	0b3f      	lsrs	r7, r7, #12
 80013ce:	0d76      	lsrs	r6, r6, #21
 80013d0:	4281      	cmp	r1, r0
 80013d2:	d018      	beq.n	8001406 <__eqdf2+0x62>
 80013d4:	4286      	cmp	r6, r0
 80013d6:	d00f      	beq.n	80013f8 <__eqdf2+0x54>
 80013d8:	2001      	movs	r0, #1
 80013da:	42b1      	cmp	r1, r6
 80013dc:	d10d      	bne.n	80013fa <__eqdf2+0x56>
 80013de:	45bc      	cmp	ip, r7
 80013e0:	d10b      	bne.n	80013fa <__eqdf2+0x56>
 80013e2:	4294      	cmp	r4, r2
 80013e4:	d109      	bne.n	80013fa <__eqdf2+0x56>
 80013e6:	45d3      	cmp	fp, sl
 80013e8:	d01c      	beq.n	8001424 <__eqdf2+0x80>
 80013ea:	2900      	cmp	r1, #0
 80013ec:	d105      	bne.n	80013fa <__eqdf2+0x56>
 80013ee:	4660      	mov	r0, ip
 80013f0:	4320      	orrs	r0, r4
 80013f2:	1e43      	subs	r3, r0, #1
 80013f4:	4198      	sbcs	r0, r3
 80013f6:	e000      	b.n	80013fa <__eqdf2+0x56>
 80013f8:	2001      	movs	r0, #1
 80013fa:	bcf0      	pop	{r4, r5, r6, r7}
 80013fc:	46bb      	mov	fp, r7
 80013fe:	46b2      	mov	sl, r6
 8001400:	46a9      	mov	r9, r5
 8001402:	46a0      	mov	r8, r4
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001406:	2001      	movs	r0, #1
 8001408:	428e      	cmp	r6, r1
 800140a:	d1f6      	bne.n	80013fa <__eqdf2+0x56>
 800140c:	4661      	mov	r1, ip
 800140e:	4339      	orrs	r1, r7
 8001410:	000f      	movs	r7, r1
 8001412:	4317      	orrs	r7, r2
 8001414:	4327      	orrs	r7, r4
 8001416:	d1f0      	bne.n	80013fa <__eqdf2+0x56>
 8001418:	465b      	mov	r3, fp
 800141a:	4652      	mov	r2, sl
 800141c:	1a98      	subs	r0, r3, r2
 800141e:	1e43      	subs	r3, r0, #1
 8001420:	4198      	sbcs	r0, r3
 8001422:	e7ea      	b.n	80013fa <__eqdf2+0x56>
 8001424:	2000      	movs	r0, #0
 8001426:	e7e8      	b.n	80013fa <__eqdf2+0x56>
 8001428:	000007ff 	.word	0x000007ff

0800142c <__gedf2>:
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	4657      	mov	r7, sl
 8001430:	464e      	mov	r6, r9
 8001432:	4645      	mov	r5, r8
 8001434:	46de      	mov	lr, fp
 8001436:	b5e0      	push	{r5, r6, r7, lr}
 8001438:	000d      	movs	r5, r1
 800143a:	030f      	lsls	r7, r1, #12
 800143c:	0b39      	lsrs	r1, r7, #12
 800143e:	b083      	sub	sp, #12
 8001440:	0004      	movs	r4, r0
 8001442:	4680      	mov	r8, r0
 8001444:	9101      	str	r1, [sp, #4]
 8001446:	0058      	lsls	r0, r3, #1
 8001448:	0fe9      	lsrs	r1, r5, #31
 800144a:	4f31      	ldr	r7, [pc, #196]	@ (8001510 <__gedf2+0xe4>)
 800144c:	0d40      	lsrs	r0, r0, #21
 800144e:	468c      	mov	ip, r1
 8001450:	006e      	lsls	r6, r5, #1
 8001452:	0319      	lsls	r1, r3, #12
 8001454:	4682      	mov	sl, r0
 8001456:	4691      	mov	r9, r2
 8001458:	0d76      	lsrs	r6, r6, #21
 800145a:	0b09      	lsrs	r1, r1, #12
 800145c:	0fd8      	lsrs	r0, r3, #31
 800145e:	42be      	cmp	r6, r7
 8001460:	d01f      	beq.n	80014a2 <__gedf2+0x76>
 8001462:	45ba      	cmp	sl, r7
 8001464:	d00f      	beq.n	8001486 <__gedf2+0x5a>
 8001466:	2e00      	cmp	r6, #0
 8001468:	d12f      	bne.n	80014ca <__gedf2+0x9e>
 800146a:	4655      	mov	r5, sl
 800146c:	9e01      	ldr	r6, [sp, #4]
 800146e:	4334      	orrs	r4, r6
 8001470:	2d00      	cmp	r5, #0
 8001472:	d127      	bne.n	80014c4 <__gedf2+0x98>
 8001474:	430a      	orrs	r2, r1
 8001476:	d03a      	beq.n	80014ee <__gedf2+0xc2>
 8001478:	2c00      	cmp	r4, #0
 800147a:	d145      	bne.n	8001508 <__gedf2+0xdc>
 800147c:	2800      	cmp	r0, #0
 800147e:	d11a      	bne.n	80014b6 <__gedf2+0x8a>
 8001480:	2001      	movs	r0, #1
 8001482:	4240      	negs	r0, r0
 8001484:	e017      	b.n	80014b6 <__gedf2+0x8a>
 8001486:	4311      	orrs	r1, r2
 8001488:	d13b      	bne.n	8001502 <__gedf2+0xd6>
 800148a:	2e00      	cmp	r6, #0
 800148c:	d102      	bne.n	8001494 <__gedf2+0x68>
 800148e:	9f01      	ldr	r7, [sp, #4]
 8001490:	4327      	orrs	r7, r4
 8001492:	d0f3      	beq.n	800147c <__gedf2+0x50>
 8001494:	4584      	cmp	ip, r0
 8001496:	d109      	bne.n	80014ac <__gedf2+0x80>
 8001498:	4663      	mov	r3, ip
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <__gedf2+0x54>
 800149e:	4660      	mov	r0, ip
 80014a0:	e009      	b.n	80014b6 <__gedf2+0x8a>
 80014a2:	9f01      	ldr	r7, [sp, #4]
 80014a4:	4327      	orrs	r7, r4
 80014a6:	d12c      	bne.n	8001502 <__gedf2+0xd6>
 80014a8:	45b2      	cmp	sl, r6
 80014aa:	d024      	beq.n	80014f6 <__gedf2+0xca>
 80014ac:	4663      	mov	r3, ip
 80014ae:	2002      	movs	r0, #2
 80014b0:	3b01      	subs	r3, #1
 80014b2:	4018      	ands	r0, r3
 80014b4:	3801      	subs	r0, #1
 80014b6:	b003      	add	sp, #12
 80014b8:	bcf0      	pop	{r4, r5, r6, r7}
 80014ba:	46bb      	mov	fp, r7
 80014bc:	46b2      	mov	sl, r6
 80014be:	46a9      	mov	r9, r5
 80014c0:	46a0      	mov	r8, r4
 80014c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d0d9      	beq.n	800147c <__gedf2+0x50>
 80014c8:	e7e4      	b.n	8001494 <__gedf2+0x68>
 80014ca:	4654      	mov	r4, sl
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d0ed      	beq.n	80014ac <__gedf2+0x80>
 80014d0:	4584      	cmp	ip, r0
 80014d2:	d1eb      	bne.n	80014ac <__gedf2+0x80>
 80014d4:	4556      	cmp	r6, sl
 80014d6:	dce9      	bgt.n	80014ac <__gedf2+0x80>
 80014d8:	dbde      	blt.n	8001498 <__gedf2+0x6c>
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	428b      	cmp	r3, r1
 80014de:	d8e5      	bhi.n	80014ac <__gedf2+0x80>
 80014e0:	d1da      	bne.n	8001498 <__gedf2+0x6c>
 80014e2:	45c8      	cmp	r8, r9
 80014e4:	d8e2      	bhi.n	80014ac <__gedf2+0x80>
 80014e6:	2000      	movs	r0, #0
 80014e8:	45c8      	cmp	r8, r9
 80014ea:	d2e4      	bcs.n	80014b6 <__gedf2+0x8a>
 80014ec:	e7d4      	b.n	8001498 <__gedf2+0x6c>
 80014ee:	2000      	movs	r0, #0
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d0e0      	beq.n	80014b6 <__gedf2+0x8a>
 80014f4:	e7da      	b.n	80014ac <__gedf2+0x80>
 80014f6:	4311      	orrs	r1, r2
 80014f8:	d103      	bne.n	8001502 <__gedf2+0xd6>
 80014fa:	4584      	cmp	ip, r0
 80014fc:	d1d6      	bne.n	80014ac <__gedf2+0x80>
 80014fe:	2000      	movs	r0, #0
 8001500:	e7d9      	b.n	80014b6 <__gedf2+0x8a>
 8001502:	2002      	movs	r0, #2
 8001504:	4240      	negs	r0, r0
 8001506:	e7d6      	b.n	80014b6 <__gedf2+0x8a>
 8001508:	4584      	cmp	ip, r0
 800150a:	d0e6      	beq.n	80014da <__gedf2+0xae>
 800150c:	e7ce      	b.n	80014ac <__gedf2+0x80>
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	000007ff 	.word	0x000007ff

08001514 <__ledf2>:
 8001514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001516:	4657      	mov	r7, sl
 8001518:	464e      	mov	r6, r9
 800151a:	4645      	mov	r5, r8
 800151c:	46de      	mov	lr, fp
 800151e:	b5e0      	push	{r5, r6, r7, lr}
 8001520:	000d      	movs	r5, r1
 8001522:	030f      	lsls	r7, r1, #12
 8001524:	0004      	movs	r4, r0
 8001526:	4680      	mov	r8, r0
 8001528:	0fe8      	lsrs	r0, r5, #31
 800152a:	0b39      	lsrs	r1, r7, #12
 800152c:	4684      	mov	ip, r0
 800152e:	b083      	sub	sp, #12
 8001530:	0058      	lsls	r0, r3, #1
 8001532:	4f30      	ldr	r7, [pc, #192]	@ (80015f4 <__ledf2+0xe0>)
 8001534:	0d40      	lsrs	r0, r0, #21
 8001536:	9101      	str	r1, [sp, #4]
 8001538:	031e      	lsls	r6, r3, #12
 800153a:	0069      	lsls	r1, r5, #1
 800153c:	4682      	mov	sl, r0
 800153e:	4691      	mov	r9, r2
 8001540:	0d49      	lsrs	r1, r1, #21
 8001542:	0b36      	lsrs	r6, r6, #12
 8001544:	0fd8      	lsrs	r0, r3, #31
 8001546:	42b9      	cmp	r1, r7
 8001548:	d020      	beq.n	800158c <__ledf2+0x78>
 800154a:	45ba      	cmp	sl, r7
 800154c:	d00f      	beq.n	800156e <__ledf2+0x5a>
 800154e:	2900      	cmp	r1, #0
 8001550:	d12b      	bne.n	80015aa <__ledf2+0x96>
 8001552:	9901      	ldr	r1, [sp, #4]
 8001554:	430c      	orrs	r4, r1
 8001556:	4651      	mov	r1, sl
 8001558:	2900      	cmp	r1, #0
 800155a:	d137      	bne.n	80015cc <__ledf2+0xb8>
 800155c:	4332      	orrs	r2, r6
 800155e:	d038      	beq.n	80015d2 <__ledf2+0xbe>
 8001560:	2c00      	cmp	r4, #0
 8001562:	d144      	bne.n	80015ee <__ledf2+0xda>
 8001564:	2800      	cmp	r0, #0
 8001566:	d119      	bne.n	800159c <__ledf2+0x88>
 8001568:	2001      	movs	r0, #1
 800156a:	4240      	negs	r0, r0
 800156c:	e016      	b.n	800159c <__ledf2+0x88>
 800156e:	4316      	orrs	r6, r2
 8001570:	d113      	bne.n	800159a <__ledf2+0x86>
 8001572:	2900      	cmp	r1, #0
 8001574:	d102      	bne.n	800157c <__ledf2+0x68>
 8001576:	9f01      	ldr	r7, [sp, #4]
 8001578:	4327      	orrs	r7, r4
 800157a:	d0f3      	beq.n	8001564 <__ledf2+0x50>
 800157c:	4584      	cmp	ip, r0
 800157e:	d020      	beq.n	80015c2 <__ledf2+0xae>
 8001580:	4663      	mov	r3, ip
 8001582:	2002      	movs	r0, #2
 8001584:	3b01      	subs	r3, #1
 8001586:	4018      	ands	r0, r3
 8001588:	3801      	subs	r0, #1
 800158a:	e007      	b.n	800159c <__ledf2+0x88>
 800158c:	9f01      	ldr	r7, [sp, #4]
 800158e:	4327      	orrs	r7, r4
 8001590:	d103      	bne.n	800159a <__ledf2+0x86>
 8001592:	458a      	cmp	sl, r1
 8001594:	d1f4      	bne.n	8001580 <__ledf2+0x6c>
 8001596:	4316      	orrs	r6, r2
 8001598:	d01f      	beq.n	80015da <__ledf2+0xc6>
 800159a:	2002      	movs	r0, #2
 800159c:	b003      	add	sp, #12
 800159e:	bcf0      	pop	{r4, r5, r6, r7}
 80015a0:	46bb      	mov	fp, r7
 80015a2:	46b2      	mov	sl, r6
 80015a4:	46a9      	mov	r9, r5
 80015a6:	46a0      	mov	r8, r4
 80015a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015aa:	4654      	mov	r4, sl
 80015ac:	2c00      	cmp	r4, #0
 80015ae:	d0e7      	beq.n	8001580 <__ledf2+0x6c>
 80015b0:	4584      	cmp	ip, r0
 80015b2:	d1e5      	bne.n	8001580 <__ledf2+0x6c>
 80015b4:	4551      	cmp	r1, sl
 80015b6:	dce3      	bgt.n	8001580 <__ledf2+0x6c>
 80015b8:	db03      	blt.n	80015c2 <__ledf2+0xae>
 80015ba:	9b01      	ldr	r3, [sp, #4]
 80015bc:	42b3      	cmp	r3, r6
 80015be:	d8df      	bhi.n	8001580 <__ledf2+0x6c>
 80015c0:	d00f      	beq.n	80015e2 <__ledf2+0xce>
 80015c2:	4663      	mov	r3, ip
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0cf      	beq.n	8001568 <__ledf2+0x54>
 80015c8:	4660      	mov	r0, ip
 80015ca:	e7e7      	b.n	800159c <__ledf2+0x88>
 80015cc:	2c00      	cmp	r4, #0
 80015ce:	d0c9      	beq.n	8001564 <__ledf2+0x50>
 80015d0:	e7d4      	b.n	800157c <__ledf2+0x68>
 80015d2:	2000      	movs	r0, #0
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	d0e1      	beq.n	800159c <__ledf2+0x88>
 80015d8:	e7d2      	b.n	8001580 <__ledf2+0x6c>
 80015da:	4584      	cmp	ip, r0
 80015dc:	d1d0      	bne.n	8001580 <__ledf2+0x6c>
 80015de:	2000      	movs	r0, #0
 80015e0:	e7dc      	b.n	800159c <__ledf2+0x88>
 80015e2:	45c8      	cmp	r8, r9
 80015e4:	d8cc      	bhi.n	8001580 <__ledf2+0x6c>
 80015e6:	2000      	movs	r0, #0
 80015e8:	45c8      	cmp	r8, r9
 80015ea:	d2d7      	bcs.n	800159c <__ledf2+0x88>
 80015ec:	e7e9      	b.n	80015c2 <__ledf2+0xae>
 80015ee:	4584      	cmp	ip, r0
 80015f0:	d0e3      	beq.n	80015ba <__ledf2+0xa6>
 80015f2:	e7c5      	b.n	8001580 <__ledf2+0x6c>
 80015f4:	000007ff 	.word	0x000007ff

080015f8 <__aeabi_dmul>:
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	4657      	mov	r7, sl
 80015fc:	46de      	mov	lr, fp
 80015fe:	464e      	mov	r6, r9
 8001600:	4645      	mov	r5, r8
 8001602:	b5e0      	push	{r5, r6, r7, lr}
 8001604:	001f      	movs	r7, r3
 8001606:	030b      	lsls	r3, r1, #12
 8001608:	0b1b      	lsrs	r3, r3, #12
 800160a:	0016      	movs	r6, r2
 800160c:	469a      	mov	sl, r3
 800160e:	0fca      	lsrs	r2, r1, #31
 8001610:	004b      	lsls	r3, r1, #1
 8001612:	0004      	movs	r4, r0
 8001614:	4693      	mov	fp, r2
 8001616:	b087      	sub	sp, #28
 8001618:	0d5b      	lsrs	r3, r3, #21
 800161a:	d100      	bne.n	800161e <__aeabi_dmul+0x26>
 800161c:	e0d5      	b.n	80017ca <__aeabi_dmul+0x1d2>
 800161e:	4abb      	ldr	r2, [pc, #748]	@ (800190c <__aeabi_dmul+0x314>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d100      	bne.n	8001626 <__aeabi_dmul+0x2e>
 8001624:	e0f8      	b.n	8001818 <__aeabi_dmul+0x220>
 8001626:	4651      	mov	r1, sl
 8001628:	0f42      	lsrs	r2, r0, #29
 800162a:	00c9      	lsls	r1, r1, #3
 800162c:	430a      	orrs	r2, r1
 800162e:	2180      	movs	r1, #128	@ 0x80
 8001630:	0409      	lsls	r1, r1, #16
 8001632:	4311      	orrs	r1, r2
 8001634:	00c2      	lsls	r2, r0, #3
 8001636:	4691      	mov	r9, r2
 8001638:	4ab5      	ldr	r2, [pc, #724]	@ (8001910 <__aeabi_dmul+0x318>)
 800163a:	468a      	mov	sl, r1
 800163c:	189d      	adds	r5, r3, r2
 800163e:	2300      	movs	r3, #0
 8001640:	4698      	mov	r8, r3
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	033c      	lsls	r4, r7, #12
 8001646:	007b      	lsls	r3, r7, #1
 8001648:	0ffa      	lsrs	r2, r7, #31
 800164a:	0030      	movs	r0, r6
 800164c:	0b24      	lsrs	r4, r4, #12
 800164e:	0d5b      	lsrs	r3, r3, #21
 8001650:	9200      	str	r2, [sp, #0]
 8001652:	d100      	bne.n	8001656 <__aeabi_dmul+0x5e>
 8001654:	e096      	b.n	8001784 <__aeabi_dmul+0x18c>
 8001656:	4aad      	ldr	r2, [pc, #692]	@ (800190c <__aeabi_dmul+0x314>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d031      	beq.n	80016c0 <__aeabi_dmul+0xc8>
 800165c:	0f72      	lsrs	r2, r6, #29
 800165e:	00e4      	lsls	r4, r4, #3
 8001660:	4322      	orrs	r2, r4
 8001662:	2480      	movs	r4, #128	@ 0x80
 8001664:	0424      	lsls	r4, r4, #16
 8001666:	4314      	orrs	r4, r2
 8001668:	4aa9      	ldr	r2, [pc, #676]	@ (8001910 <__aeabi_dmul+0x318>)
 800166a:	00f0      	lsls	r0, r6, #3
 800166c:	4694      	mov	ip, r2
 800166e:	4463      	add	r3, ip
 8001670:	195b      	adds	r3, r3, r5
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	9201      	str	r2, [sp, #4]
 8001676:	4642      	mov	r2, r8
 8001678:	2600      	movs	r6, #0
 800167a:	2a0a      	cmp	r2, #10
 800167c:	dc42      	bgt.n	8001704 <__aeabi_dmul+0x10c>
 800167e:	465a      	mov	r2, fp
 8001680:	9900      	ldr	r1, [sp, #0]
 8001682:	404a      	eors	r2, r1
 8001684:	4693      	mov	fp, r2
 8001686:	4642      	mov	r2, r8
 8001688:	2a02      	cmp	r2, #2
 800168a:	dc32      	bgt.n	80016f2 <__aeabi_dmul+0xfa>
 800168c:	3a01      	subs	r2, #1
 800168e:	2a01      	cmp	r2, #1
 8001690:	d900      	bls.n	8001694 <__aeabi_dmul+0x9c>
 8001692:	e149      	b.n	8001928 <__aeabi_dmul+0x330>
 8001694:	2e02      	cmp	r6, #2
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0xa2>
 8001698:	e0ca      	b.n	8001830 <__aeabi_dmul+0x238>
 800169a:	2e01      	cmp	r6, #1
 800169c:	d13d      	bne.n	800171a <__aeabi_dmul+0x122>
 800169e:	2300      	movs	r3, #0
 80016a0:	2400      	movs	r4, #0
 80016a2:	2200      	movs	r2, #0
 80016a4:	0010      	movs	r0, r2
 80016a6:	465a      	mov	r2, fp
 80016a8:	051b      	lsls	r3, r3, #20
 80016aa:	4323      	orrs	r3, r4
 80016ac:	07d2      	lsls	r2, r2, #31
 80016ae:	4313      	orrs	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	b007      	add	sp, #28
 80016b4:	bcf0      	pop	{r4, r5, r6, r7}
 80016b6:	46bb      	mov	fp, r7
 80016b8:	46b2      	mov	sl, r6
 80016ba:	46a9      	mov	r9, r5
 80016bc:	46a0      	mov	r8, r4
 80016be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c0:	4b92      	ldr	r3, [pc, #584]	@ (800190c <__aeabi_dmul+0x314>)
 80016c2:	4326      	orrs	r6, r4
 80016c4:	18eb      	adds	r3, r5, r3
 80016c6:	2e00      	cmp	r6, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0xd4>
 80016ca:	e0bb      	b.n	8001844 <__aeabi_dmul+0x24c>
 80016cc:	2203      	movs	r2, #3
 80016ce:	4641      	mov	r1, r8
 80016d0:	4311      	orrs	r1, r2
 80016d2:	465a      	mov	r2, fp
 80016d4:	4688      	mov	r8, r1
 80016d6:	9900      	ldr	r1, [sp, #0]
 80016d8:	404a      	eors	r2, r1
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	0109      	lsls	r1, r1, #4
 80016de:	468c      	mov	ip, r1
 80016e0:	0029      	movs	r1, r5
 80016e2:	4461      	add	r1, ip
 80016e4:	9101      	str	r1, [sp, #4]
 80016e6:	4641      	mov	r1, r8
 80016e8:	290a      	cmp	r1, #10
 80016ea:	dd00      	ble.n	80016ee <__aeabi_dmul+0xf6>
 80016ec:	e233      	b.n	8001b56 <__aeabi_dmul+0x55e>
 80016ee:	4693      	mov	fp, r2
 80016f0:	2603      	movs	r6, #3
 80016f2:	4642      	mov	r2, r8
 80016f4:	2701      	movs	r7, #1
 80016f6:	4097      	lsls	r7, r2
 80016f8:	21a6      	movs	r1, #166	@ 0xa6
 80016fa:	003a      	movs	r2, r7
 80016fc:	00c9      	lsls	r1, r1, #3
 80016fe:	400a      	ands	r2, r1
 8001700:	420f      	tst	r7, r1
 8001702:	d031      	beq.n	8001768 <__aeabi_dmul+0x170>
 8001704:	9e02      	ldr	r6, [sp, #8]
 8001706:	2e02      	cmp	r6, #2
 8001708:	d100      	bne.n	800170c <__aeabi_dmul+0x114>
 800170a:	e235      	b.n	8001b78 <__aeabi_dmul+0x580>
 800170c:	2e03      	cmp	r6, #3
 800170e:	d100      	bne.n	8001712 <__aeabi_dmul+0x11a>
 8001710:	e1d2      	b.n	8001ab8 <__aeabi_dmul+0x4c0>
 8001712:	4654      	mov	r4, sl
 8001714:	4648      	mov	r0, r9
 8001716:	2e01      	cmp	r6, #1
 8001718:	d0c1      	beq.n	800169e <__aeabi_dmul+0xa6>
 800171a:	9a01      	ldr	r2, [sp, #4]
 800171c:	4b7d      	ldr	r3, [pc, #500]	@ (8001914 <__aeabi_dmul+0x31c>)
 800171e:	4694      	mov	ip, r2
 8001720:	4463      	add	r3, ip
 8001722:	2b00      	cmp	r3, #0
 8001724:	dc00      	bgt.n	8001728 <__aeabi_dmul+0x130>
 8001726:	e0c0      	b.n	80018aa <__aeabi_dmul+0x2b2>
 8001728:	0742      	lsls	r2, r0, #29
 800172a:	d009      	beq.n	8001740 <__aeabi_dmul+0x148>
 800172c:	220f      	movs	r2, #15
 800172e:	4002      	ands	r2, r0
 8001730:	2a04      	cmp	r2, #4
 8001732:	d005      	beq.n	8001740 <__aeabi_dmul+0x148>
 8001734:	1d02      	adds	r2, r0, #4
 8001736:	4282      	cmp	r2, r0
 8001738:	4180      	sbcs	r0, r0
 800173a:	4240      	negs	r0, r0
 800173c:	1824      	adds	r4, r4, r0
 800173e:	0010      	movs	r0, r2
 8001740:	01e2      	lsls	r2, r4, #7
 8001742:	d506      	bpl.n	8001752 <__aeabi_dmul+0x15a>
 8001744:	4b74      	ldr	r3, [pc, #464]	@ (8001918 <__aeabi_dmul+0x320>)
 8001746:	9a01      	ldr	r2, [sp, #4]
 8001748:	401c      	ands	r4, r3
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	4694      	mov	ip, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4463      	add	r3, ip
 8001752:	4a72      	ldr	r2, [pc, #456]	@ (800191c <__aeabi_dmul+0x324>)
 8001754:	4293      	cmp	r3, r2
 8001756:	dc6b      	bgt.n	8001830 <__aeabi_dmul+0x238>
 8001758:	0762      	lsls	r2, r4, #29
 800175a:	08c0      	lsrs	r0, r0, #3
 800175c:	0264      	lsls	r4, r4, #9
 800175e:	055b      	lsls	r3, r3, #21
 8001760:	4302      	orrs	r2, r0
 8001762:	0b24      	lsrs	r4, r4, #12
 8001764:	0d5b      	lsrs	r3, r3, #21
 8001766:	e79d      	b.n	80016a4 <__aeabi_dmul+0xac>
 8001768:	2190      	movs	r1, #144	@ 0x90
 800176a:	0089      	lsls	r1, r1, #2
 800176c:	420f      	tst	r7, r1
 800176e:	d163      	bne.n	8001838 <__aeabi_dmul+0x240>
 8001770:	2288      	movs	r2, #136	@ 0x88
 8001772:	423a      	tst	r2, r7
 8001774:	d100      	bne.n	8001778 <__aeabi_dmul+0x180>
 8001776:	e0d7      	b.n	8001928 <__aeabi_dmul+0x330>
 8001778:	9b00      	ldr	r3, [sp, #0]
 800177a:	46a2      	mov	sl, r4
 800177c:	469b      	mov	fp, r3
 800177e:	4681      	mov	r9, r0
 8001780:	9602      	str	r6, [sp, #8]
 8001782:	e7bf      	b.n	8001704 <__aeabi_dmul+0x10c>
 8001784:	0023      	movs	r3, r4
 8001786:	4333      	orrs	r3, r6
 8001788:	d100      	bne.n	800178c <__aeabi_dmul+0x194>
 800178a:	e07f      	b.n	800188c <__aeabi_dmul+0x294>
 800178c:	2c00      	cmp	r4, #0
 800178e:	d100      	bne.n	8001792 <__aeabi_dmul+0x19a>
 8001790:	e1ad      	b.n	8001aee <__aeabi_dmul+0x4f6>
 8001792:	0020      	movs	r0, r4
 8001794:	f000 fe22 	bl	80023dc <__clzsi2>
 8001798:	0002      	movs	r2, r0
 800179a:	0003      	movs	r3, r0
 800179c:	3a0b      	subs	r2, #11
 800179e:	201d      	movs	r0, #29
 80017a0:	0019      	movs	r1, r3
 80017a2:	1a82      	subs	r2, r0, r2
 80017a4:	0030      	movs	r0, r6
 80017a6:	3908      	subs	r1, #8
 80017a8:	40d0      	lsrs	r0, r2
 80017aa:	408c      	lsls	r4, r1
 80017ac:	4304      	orrs	r4, r0
 80017ae:	0030      	movs	r0, r6
 80017b0:	4088      	lsls	r0, r1
 80017b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001920 <__aeabi_dmul+0x328>)
 80017b4:	1aeb      	subs	r3, r5, r3
 80017b6:	4694      	mov	ip, r2
 80017b8:	4463      	add	r3, ip
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	9201      	str	r2, [sp, #4]
 80017be:	4642      	mov	r2, r8
 80017c0:	2600      	movs	r6, #0
 80017c2:	2a0a      	cmp	r2, #10
 80017c4:	dc00      	bgt.n	80017c8 <__aeabi_dmul+0x1d0>
 80017c6:	e75a      	b.n	800167e <__aeabi_dmul+0x86>
 80017c8:	e79c      	b.n	8001704 <__aeabi_dmul+0x10c>
 80017ca:	4653      	mov	r3, sl
 80017cc:	4303      	orrs	r3, r0
 80017ce:	4699      	mov	r9, r3
 80017d0:	d054      	beq.n	800187c <__aeabi_dmul+0x284>
 80017d2:	4653      	mov	r3, sl
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d100      	bne.n	80017da <__aeabi_dmul+0x1e2>
 80017d8:	e177      	b.n	8001aca <__aeabi_dmul+0x4d2>
 80017da:	4650      	mov	r0, sl
 80017dc:	f000 fdfe 	bl	80023dc <__clzsi2>
 80017e0:	230b      	movs	r3, #11
 80017e2:	425b      	negs	r3, r3
 80017e4:	469c      	mov	ip, r3
 80017e6:	0002      	movs	r2, r0
 80017e8:	4484      	add	ip, r0
 80017ea:	0011      	movs	r1, r2
 80017ec:	4650      	mov	r0, sl
 80017ee:	3908      	subs	r1, #8
 80017f0:	4088      	lsls	r0, r1
 80017f2:	231d      	movs	r3, #29
 80017f4:	4680      	mov	r8, r0
 80017f6:	4660      	mov	r0, ip
 80017f8:	1a1b      	subs	r3, r3, r0
 80017fa:	0020      	movs	r0, r4
 80017fc:	40d8      	lsrs	r0, r3
 80017fe:	0003      	movs	r3, r0
 8001800:	4640      	mov	r0, r8
 8001802:	4303      	orrs	r3, r0
 8001804:	469a      	mov	sl, r3
 8001806:	0023      	movs	r3, r4
 8001808:	408b      	lsls	r3, r1
 800180a:	4699      	mov	r9, r3
 800180c:	2300      	movs	r3, #0
 800180e:	4d44      	ldr	r5, [pc, #272]	@ (8001920 <__aeabi_dmul+0x328>)
 8001810:	4698      	mov	r8, r3
 8001812:	1aad      	subs	r5, r5, r2
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	e715      	b.n	8001644 <__aeabi_dmul+0x4c>
 8001818:	4652      	mov	r2, sl
 800181a:	4302      	orrs	r2, r0
 800181c:	4691      	mov	r9, r2
 800181e:	d126      	bne.n	800186e <__aeabi_dmul+0x276>
 8001820:	2200      	movs	r2, #0
 8001822:	001d      	movs	r5, r3
 8001824:	2302      	movs	r3, #2
 8001826:	4692      	mov	sl, r2
 8001828:	3208      	adds	r2, #8
 800182a:	4690      	mov	r8, r2
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	e709      	b.n	8001644 <__aeabi_dmul+0x4c>
 8001830:	2400      	movs	r4, #0
 8001832:	2200      	movs	r2, #0
 8001834:	4b35      	ldr	r3, [pc, #212]	@ (800190c <__aeabi_dmul+0x314>)
 8001836:	e735      	b.n	80016a4 <__aeabi_dmul+0xac>
 8001838:	2300      	movs	r3, #0
 800183a:	2480      	movs	r4, #128	@ 0x80
 800183c:	469b      	mov	fp, r3
 800183e:	0324      	lsls	r4, r4, #12
 8001840:	4b32      	ldr	r3, [pc, #200]	@ (800190c <__aeabi_dmul+0x314>)
 8001842:	e72f      	b.n	80016a4 <__aeabi_dmul+0xac>
 8001844:	2202      	movs	r2, #2
 8001846:	4641      	mov	r1, r8
 8001848:	4311      	orrs	r1, r2
 800184a:	2280      	movs	r2, #128	@ 0x80
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	4694      	mov	ip, r2
 8001850:	002a      	movs	r2, r5
 8001852:	4462      	add	r2, ip
 8001854:	4688      	mov	r8, r1
 8001856:	9201      	str	r2, [sp, #4]
 8001858:	290a      	cmp	r1, #10
 800185a:	dd00      	ble.n	800185e <__aeabi_dmul+0x266>
 800185c:	e752      	b.n	8001704 <__aeabi_dmul+0x10c>
 800185e:	465a      	mov	r2, fp
 8001860:	2000      	movs	r0, #0
 8001862:	9900      	ldr	r1, [sp, #0]
 8001864:	0004      	movs	r4, r0
 8001866:	404a      	eors	r2, r1
 8001868:	4693      	mov	fp, r2
 800186a:	2602      	movs	r6, #2
 800186c:	e70b      	b.n	8001686 <__aeabi_dmul+0x8e>
 800186e:	220c      	movs	r2, #12
 8001870:	001d      	movs	r5, r3
 8001872:	2303      	movs	r3, #3
 8001874:	4681      	mov	r9, r0
 8001876:	4690      	mov	r8, r2
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	e6e3      	b.n	8001644 <__aeabi_dmul+0x4c>
 800187c:	2300      	movs	r3, #0
 800187e:	469a      	mov	sl, r3
 8001880:	3304      	adds	r3, #4
 8001882:	4698      	mov	r8, r3
 8001884:	3b03      	subs	r3, #3
 8001886:	2500      	movs	r5, #0
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	e6db      	b.n	8001644 <__aeabi_dmul+0x4c>
 800188c:	4642      	mov	r2, r8
 800188e:	3301      	adds	r3, #1
 8001890:	431a      	orrs	r2, r3
 8001892:	002b      	movs	r3, r5
 8001894:	4690      	mov	r8, r2
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	9201      	str	r2, [sp, #4]
 800189a:	4642      	mov	r2, r8
 800189c:	2400      	movs	r4, #0
 800189e:	2000      	movs	r0, #0
 80018a0:	2601      	movs	r6, #1
 80018a2:	2a0a      	cmp	r2, #10
 80018a4:	dc00      	bgt.n	80018a8 <__aeabi_dmul+0x2b0>
 80018a6:	e6ea      	b.n	800167e <__aeabi_dmul+0x86>
 80018a8:	e72c      	b.n	8001704 <__aeabi_dmul+0x10c>
 80018aa:	2201      	movs	r2, #1
 80018ac:	1ad2      	subs	r2, r2, r3
 80018ae:	2a38      	cmp	r2, #56	@ 0x38
 80018b0:	dd00      	ble.n	80018b4 <__aeabi_dmul+0x2bc>
 80018b2:	e6f4      	b.n	800169e <__aeabi_dmul+0xa6>
 80018b4:	2a1f      	cmp	r2, #31
 80018b6:	dc00      	bgt.n	80018ba <__aeabi_dmul+0x2c2>
 80018b8:	e12a      	b.n	8001b10 <__aeabi_dmul+0x518>
 80018ba:	211f      	movs	r1, #31
 80018bc:	4249      	negs	r1, r1
 80018be:	1acb      	subs	r3, r1, r3
 80018c0:	0021      	movs	r1, r4
 80018c2:	40d9      	lsrs	r1, r3
 80018c4:	000b      	movs	r3, r1
 80018c6:	2a20      	cmp	r2, #32
 80018c8:	d005      	beq.n	80018d6 <__aeabi_dmul+0x2de>
 80018ca:	4a16      	ldr	r2, [pc, #88]	@ (8001924 <__aeabi_dmul+0x32c>)
 80018cc:	9d01      	ldr	r5, [sp, #4]
 80018ce:	4694      	mov	ip, r2
 80018d0:	4465      	add	r5, ip
 80018d2:	40ac      	lsls	r4, r5
 80018d4:	4320      	orrs	r0, r4
 80018d6:	1e42      	subs	r2, r0, #1
 80018d8:	4190      	sbcs	r0, r2
 80018da:	4318      	orrs	r0, r3
 80018dc:	2307      	movs	r3, #7
 80018de:	0019      	movs	r1, r3
 80018e0:	2400      	movs	r4, #0
 80018e2:	4001      	ands	r1, r0
 80018e4:	4203      	tst	r3, r0
 80018e6:	d00c      	beq.n	8001902 <__aeabi_dmul+0x30a>
 80018e8:	230f      	movs	r3, #15
 80018ea:	4003      	ands	r3, r0
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dmul+0x2fa>
 80018f0:	e140      	b.n	8001b74 <__aeabi_dmul+0x57c>
 80018f2:	1d03      	adds	r3, r0, #4
 80018f4:	4283      	cmp	r3, r0
 80018f6:	41a4      	sbcs	r4, r4
 80018f8:	0018      	movs	r0, r3
 80018fa:	4264      	negs	r4, r4
 80018fc:	0761      	lsls	r1, r4, #29
 80018fe:	0264      	lsls	r4, r4, #9
 8001900:	0b24      	lsrs	r4, r4, #12
 8001902:	08c2      	lsrs	r2, r0, #3
 8001904:	2300      	movs	r3, #0
 8001906:	430a      	orrs	r2, r1
 8001908:	e6cc      	b.n	80016a4 <__aeabi_dmul+0xac>
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	000007ff 	.word	0x000007ff
 8001910:	fffffc01 	.word	0xfffffc01
 8001914:	000003ff 	.word	0x000003ff
 8001918:	feffffff 	.word	0xfeffffff
 800191c:	000007fe 	.word	0x000007fe
 8001920:	fffffc0d 	.word	0xfffffc0d
 8001924:	0000043e 	.word	0x0000043e
 8001928:	4649      	mov	r1, r9
 800192a:	464a      	mov	r2, r9
 800192c:	0409      	lsls	r1, r1, #16
 800192e:	0c09      	lsrs	r1, r1, #16
 8001930:	000d      	movs	r5, r1
 8001932:	0c16      	lsrs	r6, r2, #16
 8001934:	0c02      	lsrs	r2, r0, #16
 8001936:	0400      	lsls	r0, r0, #16
 8001938:	0c00      	lsrs	r0, r0, #16
 800193a:	4345      	muls	r5, r0
 800193c:	46ac      	mov	ip, r5
 800193e:	0005      	movs	r5, r0
 8001940:	4375      	muls	r5, r6
 8001942:	46a8      	mov	r8, r5
 8001944:	0015      	movs	r5, r2
 8001946:	000f      	movs	r7, r1
 8001948:	4375      	muls	r5, r6
 800194a:	9200      	str	r2, [sp, #0]
 800194c:	9502      	str	r5, [sp, #8]
 800194e:	002a      	movs	r2, r5
 8001950:	9d00      	ldr	r5, [sp, #0]
 8001952:	436f      	muls	r7, r5
 8001954:	4665      	mov	r5, ip
 8001956:	0c2d      	lsrs	r5, r5, #16
 8001958:	46a9      	mov	r9, r5
 800195a:	4447      	add	r7, r8
 800195c:	444f      	add	r7, r9
 800195e:	45b8      	cmp	r8, r7
 8001960:	d905      	bls.n	800196e <__aeabi_dmul+0x376>
 8001962:	0015      	movs	r5, r2
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	0252      	lsls	r2, r2, #9
 8001968:	4690      	mov	r8, r2
 800196a:	4445      	add	r5, r8
 800196c:	9502      	str	r5, [sp, #8]
 800196e:	0c3d      	lsrs	r5, r7, #16
 8001970:	9503      	str	r5, [sp, #12]
 8001972:	4665      	mov	r5, ip
 8001974:	042d      	lsls	r5, r5, #16
 8001976:	043f      	lsls	r7, r7, #16
 8001978:	0c2d      	lsrs	r5, r5, #16
 800197a:	46ac      	mov	ip, r5
 800197c:	003d      	movs	r5, r7
 800197e:	4465      	add	r5, ip
 8001980:	9504      	str	r5, [sp, #16]
 8001982:	0c25      	lsrs	r5, r4, #16
 8001984:	0424      	lsls	r4, r4, #16
 8001986:	0c24      	lsrs	r4, r4, #16
 8001988:	46ac      	mov	ip, r5
 800198a:	0025      	movs	r5, r4
 800198c:	4375      	muls	r5, r6
 800198e:	46a8      	mov	r8, r5
 8001990:	4665      	mov	r5, ip
 8001992:	000f      	movs	r7, r1
 8001994:	4369      	muls	r1, r5
 8001996:	4441      	add	r1, r8
 8001998:	4689      	mov	r9, r1
 800199a:	4367      	muls	r7, r4
 800199c:	0c39      	lsrs	r1, r7, #16
 800199e:	4449      	add	r1, r9
 80019a0:	436e      	muls	r6, r5
 80019a2:	4588      	cmp	r8, r1
 80019a4:	d903      	bls.n	80019ae <__aeabi_dmul+0x3b6>
 80019a6:	2280      	movs	r2, #128	@ 0x80
 80019a8:	0252      	lsls	r2, r2, #9
 80019aa:	4690      	mov	r8, r2
 80019ac:	4446      	add	r6, r8
 80019ae:	0c0d      	lsrs	r5, r1, #16
 80019b0:	46a8      	mov	r8, r5
 80019b2:	0035      	movs	r5, r6
 80019b4:	4445      	add	r5, r8
 80019b6:	9505      	str	r5, [sp, #20]
 80019b8:	9d03      	ldr	r5, [sp, #12]
 80019ba:	043f      	lsls	r7, r7, #16
 80019bc:	46a8      	mov	r8, r5
 80019be:	0c3f      	lsrs	r7, r7, #16
 80019c0:	0409      	lsls	r1, r1, #16
 80019c2:	19c9      	adds	r1, r1, r7
 80019c4:	4488      	add	r8, r1
 80019c6:	4645      	mov	r5, r8
 80019c8:	9503      	str	r5, [sp, #12]
 80019ca:	4655      	mov	r5, sl
 80019cc:	042e      	lsls	r6, r5, #16
 80019ce:	0c36      	lsrs	r6, r6, #16
 80019d0:	0c2f      	lsrs	r7, r5, #16
 80019d2:	0035      	movs	r5, r6
 80019d4:	4345      	muls	r5, r0
 80019d6:	4378      	muls	r0, r7
 80019d8:	4681      	mov	r9, r0
 80019da:	0038      	movs	r0, r7
 80019dc:	46a8      	mov	r8, r5
 80019de:	0c2d      	lsrs	r5, r5, #16
 80019e0:	46aa      	mov	sl, r5
 80019e2:	9a00      	ldr	r2, [sp, #0]
 80019e4:	4350      	muls	r0, r2
 80019e6:	4372      	muls	r2, r6
 80019e8:	444a      	add	r2, r9
 80019ea:	4452      	add	r2, sl
 80019ec:	4591      	cmp	r9, r2
 80019ee:	d903      	bls.n	80019f8 <__aeabi_dmul+0x400>
 80019f0:	2580      	movs	r5, #128	@ 0x80
 80019f2:	026d      	lsls	r5, r5, #9
 80019f4:	46a9      	mov	r9, r5
 80019f6:	4448      	add	r0, r9
 80019f8:	0c15      	lsrs	r5, r2, #16
 80019fa:	46a9      	mov	r9, r5
 80019fc:	4645      	mov	r5, r8
 80019fe:	042d      	lsls	r5, r5, #16
 8001a00:	0c2d      	lsrs	r5, r5, #16
 8001a02:	46a8      	mov	r8, r5
 8001a04:	4665      	mov	r5, ip
 8001a06:	437d      	muls	r5, r7
 8001a08:	0412      	lsls	r2, r2, #16
 8001a0a:	4448      	add	r0, r9
 8001a0c:	4490      	add	r8, r2
 8001a0e:	46a9      	mov	r9, r5
 8001a10:	0032      	movs	r2, r6
 8001a12:	4665      	mov	r5, ip
 8001a14:	4362      	muls	r2, r4
 8001a16:	436e      	muls	r6, r5
 8001a18:	437c      	muls	r4, r7
 8001a1a:	0c17      	lsrs	r7, r2, #16
 8001a1c:	1936      	adds	r6, r6, r4
 8001a1e:	19bf      	adds	r7, r7, r6
 8001a20:	42bc      	cmp	r4, r7
 8001a22:	d903      	bls.n	8001a2c <__aeabi_dmul+0x434>
 8001a24:	2480      	movs	r4, #128	@ 0x80
 8001a26:	0264      	lsls	r4, r4, #9
 8001a28:	46a4      	mov	ip, r4
 8001a2a:	44e1      	add	r9, ip
 8001a2c:	9c02      	ldr	r4, [sp, #8]
 8001a2e:	9e03      	ldr	r6, [sp, #12]
 8001a30:	46a4      	mov	ip, r4
 8001a32:	9d05      	ldr	r5, [sp, #20]
 8001a34:	4466      	add	r6, ip
 8001a36:	428e      	cmp	r6, r1
 8001a38:	4189      	sbcs	r1, r1
 8001a3a:	46ac      	mov	ip, r5
 8001a3c:	0412      	lsls	r2, r2, #16
 8001a3e:	043c      	lsls	r4, r7, #16
 8001a40:	0c12      	lsrs	r2, r2, #16
 8001a42:	18a2      	adds	r2, r4, r2
 8001a44:	4462      	add	r2, ip
 8001a46:	4249      	negs	r1, r1
 8001a48:	1854      	adds	r4, r2, r1
 8001a4a:	4446      	add	r6, r8
 8001a4c:	46a4      	mov	ip, r4
 8001a4e:	4546      	cmp	r6, r8
 8001a50:	41a4      	sbcs	r4, r4
 8001a52:	4682      	mov	sl, r0
 8001a54:	4264      	negs	r4, r4
 8001a56:	46a0      	mov	r8, r4
 8001a58:	42aa      	cmp	r2, r5
 8001a5a:	4192      	sbcs	r2, r2
 8001a5c:	458c      	cmp	ip, r1
 8001a5e:	4189      	sbcs	r1, r1
 8001a60:	44e2      	add	sl, ip
 8001a62:	44d0      	add	r8, sl
 8001a64:	4249      	negs	r1, r1
 8001a66:	4252      	negs	r2, r2
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	45a0      	cmp	r8, r4
 8001a6c:	41a4      	sbcs	r4, r4
 8001a6e:	4582      	cmp	sl, r0
 8001a70:	4189      	sbcs	r1, r1
 8001a72:	4264      	negs	r4, r4
 8001a74:	4249      	negs	r1, r1
 8001a76:	430c      	orrs	r4, r1
 8001a78:	4641      	mov	r1, r8
 8001a7a:	0c3f      	lsrs	r7, r7, #16
 8001a7c:	19d2      	adds	r2, r2, r7
 8001a7e:	1912      	adds	r2, r2, r4
 8001a80:	0dcc      	lsrs	r4, r1, #23
 8001a82:	9904      	ldr	r1, [sp, #16]
 8001a84:	0270      	lsls	r0, r6, #9
 8001a86:	4308      	orrs	r0, r1
 8001a88:	1e41      	subs	r1, r0, #1
 8001a8a:	4188      	sbcs	r0, r1
 8001a8c:	4641      	mov	r1, r8
 8001a8e:	444a      	add	r2, r9
 8001a90:	0df6      	lsrs	r6, r6, #23
 8001a92:	0252      	lsls	r2, r2, #9
 8001a94:	4330      	orrs	r0, r6
 8001a96:	0249      	lsls	r1, r1, #9
 8001a98:	4314      	orrs	r4, r2
 8001a9a:	4308      	orrs	r0, r1
 8001a9c:	01d2      	lsls	r2, r2, #7
 8001a9e:	d535      	bpl.n	8001b0c <__aeabi_dmul+0x514>
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	0843      	lsrs	r3, r0, #1
 8001aa4:	4002      	ands	r2, r0
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	07e0      	lsls	r0, r4, #31
 8001aaa:	4318      	orrs	r0, r3
 8001aac:	0864      	lsrs	r4, r4, #1
 8001aae:	e634      	b.n	800171a <__aeabi_dmul+0x122>
 8001ab0:	9b00      	ldr	r3, [sp, #0]
 8001ab2:	46a2      	mov	sl, r4
 8001ab4:	469b      	mov	fp, r3
 8001ab6:	4681      	mov	r9, r0
 8001ab8:	2480      	movs	r4, #128	@ 0x80
 8001aba:	4653      	mov	r3, sl
 8001abc:	0324      	lsls	r4, r4, #12
 8001abe:	431c      	orrs	r4, r3
 8001ac0:	0324      	lsls	r4, r4, #12
 8001ac2:	464a      	mov	r2, r9
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <__aeabi_dmul+0x588>)
 8001ac6:	0b24      	lsrs	r4, r4, #12
 8001ac8:	e5ec      	b.n	80016a4 <__aeabi_dmul+0xac>
 8001aca:	f000 fc87 	bl	80023dc <__clzsi2>
 8001ace:	2315      	movs	r3, #21
 8001ad0:	469c      	mov	ip, r3
 8001ad2:	4484      	add	ip, r0
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	4663      	mov	r3, ip
 8001ad8:	3220      	adds	r2, #32
 8001ada:	2b1c      	cmp	r3, #28
 8001adc:	dc00      	bgt.n	8001ae0 <__aeabi_dmul+0x4e8>
 8001ade:	e684      	b.n	80017ea <__aeabi_dmul+0x1f2>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	4699      	mov	r9, r3
 8001ae4:	0023      	movs	r3, r4
 8001ae6:	3808      	subs	r0, #8
 8001ae8:	4083      	lsls	r3, r0
 8001aea:	469a      	mov	sl, r3
 8001aec:	e68e      	b.n	800180c <__aeabi_dmul+0x214>
 8001aee:	f000 fc75 	bl	80023dc <__clzsi2>
 8001af2:	0002      	movs	r2, r0
 8001af4:	0003      	movs	r3, r0
 8001af6:	3215      	adds	r2, #21
 8001af8:	3320      	adds	r3, #32
 8001afa:	2a1c      	cmp	r2, #28
 8001afc:	dc00      	bgt.n	8001b00 <__aeabi_dmul+0x508>
 8001afe:	e64e      	b.n	800179e <__aeabi_dmul+0x1a6>
 8001b00:	0002      	movs	r2, r0
 8001b02:	0034      	movs	r4, r6
 8001b04:	3a08      	subs	r2, #8
 8001b06:	2000      	movs	r0, #0
 8001b08:	4094      	lsls	r4, r2
 8001b0a:	e652      	b.n	80017b2 <__aeabi_dmul+0x1ba>
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	e604      	b.n	800171a <__aeabi_dmul+0x122>
 8001b10:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <__aeabi_dmul+0x58c>)
 8001b12:	0021      	movs	r1, r4
 8001b14:	469c      	mov	ip, r3
 8001b16:	0003      	movs	r3, r0
 8001b18:	9d01      	ldr	r5, [sp, #4]
 8001b1a:	40d3      	lsrs	r3, r2
 8001b1c:	4465      	add	r5, ip
 8001b1e:	40a9      	lsls	r1, r5
 8001b20:	4319      	orrs	r1, r3
 8001b22:	0003      	movs	r3, r0
 8001b24:	40ab      	lsls	r3, r5
 8001b26:	1e58      	subs	r0, r3, #1
 8001b28:	4183      	sbcs	r3, r0
 8001b2a:	4319      	orrs	r1, r3
 8001b2c:	0008      	movs	r0, r1
 8001b2e:	40d4      	lsrs	r4, r2
 8001b30:	074b      	lsls	r3, r1, #29
 8001b32:	d009      	beq.n	8001b48 <__aeabi_dmul+0x550>
 8001b34:	230f      	movs	r3, #15
 8001b36:	400b      	ands	r3, r1
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d005      	beq.n	8001b48 <__aeabi_dmul+0x550>
 8001b3c:	1d0b      	adds	r3, r1, #4
 8001b3e:	428b      	cmp	r3, r1
 8001b40:	4180      	sbcs	r0, r0
 8001b42:	4240      	negs	r0, r0
 8001b44:	1824      	adds	r4, r4, r0
 8001b46:	0018      	movs	r0, r3
 8001b48:	0223      	lsls	r3, r4, #8
 8001b4a:	d400      	bmi.n	8001b4e <__aeabi_dmul+0x556>
 8001b4c:	e6d6      	b.n	80018fc <__aeabi_dmul+0x304>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	2400      	movs	r4, #0
 8001b52:	2200      	movs	r2, #0
 8001b54:	e5a6      	b.n	80016a4 <__aeabi_dmul+0xac>
 8001b56:	290f      	cmp	r1, #15
 8001b58:	d1aa      	bne.n	8001ab0 <__aeabi_dmul+0x4b8>
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	4652      	mov	r2, sl
 8001b5e:	031b      	lsls	r3, r3, #12
 8001b60:	421a      	tst	r2, r3
 8001b62:	d0a9      	beq.n	8001ab8 <__aeabi_dmul+0x4c0>
 8001b64:	421c      	tst	r4, r3
 8001b66:	d1a7      	bne.n	8001ab8 <__aeabi_dmul+0x4c0>
 8001b68:	431c      	orrs	r4, r3
 8001b6a:	9b00      	ldr	r3, [sp, #0]
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	469b      	mov	fp, r3
 8001b70:	4b03      	ldr	r3, [pc, #12]	@ (8001b80 <__aeabi_dmul+0x588>)
 8001b72:	e597      	b.n	80016a4 <__aeabi_dmul+0xac>
 8001b74:	2400      	movs	r4, #0
 8001b76:	e6c1      	b.n	80018fc <__aeabi_dmul+0x304>
 8001b78:	2400      	movs	r4, #0
 8001b7a:	4b01      	ldr	r3, [pc, #4]	@ (8001b80 <__aeabi_dmul+0x588>)
 8001b7c:	0022      	movs	r2, r4
 8001b7e:	e591      	b.n	80016a4 <__aeabi_dmul+0xac>
 8001b80:	000007ff 	.word	0x000007ff
 8001b84:	0000041e 	.word	0x0000041e

08001b88 <__aeabi_dsub>:
 8001b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8a:	464e      	mov	r6, r9
 8001b8c:	4645      	mov	r5, r8
 8001b8e:	46de      	mov	lr, fp
 8001b90:	4657      	mov	r7, sl
 8001b92:	b5e0      	push	{r5, r6, r7, lr}
 8001b94:	b085      	sub	sp, #20
 8001b96:	9000      	str	r0, [sp, #0]
 8001b98:	9101      	str	r1, [sp, #4]
 8001b9a:	030c      	lsls	r4, r1, #12
 8001b9c:	004f      	lsls	r7, r1, #1
 8001b9e:	0fce      	lsrs	r6, r1, #31
 8001ba0:	0a61      	lsrs	r1, r4, #9
 8001ba2:	9c00      	ldr	r4, [sp, #0]
 8001ba4:	46b0      	mov	r8, r6
 8001ba6:	0f64      	lsrs	r4, r4, #29
 8001ba8:	430c      	orrs	r4, r1
 8001baa:	9900      	ldr	r1, [sp, #0]
 8001bac:	0d7f      	lsrs	r7, r7, #21
 8001bae:	00c8      	lsls	r0, r1, #3
 8001bb0:	0011      	movs	r1, r2
 8001bb2:	001a      	movs	r2, r3
 8001bb4:	031b      	lsls	r3, r3, #12
 8001bb6:	469c      	mov	ip, r3
 8001bb8:	9100      	str	r1, [sp, #0]
 8001bba:	9201      	str	r2, [sp, #4]
 8001bbc:	0051      	lsls	r1, r2, #1
 8001bbe:	0d4b      	lsrs	r3, r1, #21
 8001bc0:	4699      	mov	r9, r3
 8001bc2:	9b01      	ldr	r3, [sp, #4]
 8001bc4:	9d00      	ldr	r5, [sp, #0]
 8001bc6:	0fd9      	lsrs	r1, r3, #31
 8001bc8:	4663      	mov	r3, ip
 8001bca:	0f6a      	lsrs	r2, r5, #29
 8001bcc:	0a5b      	lsrs	r3, r3, #9
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	00ea      	lsls	r2, r5, #3
 8001bd2:	4694      	mov	ip, r2
 8001bd4:	4693      	mov	fp, r2
 8001bd6:	4ac1      	ldr	r2, [pc, #772]	@ (8001edc <__aeabi_dsub+0x354>)
 8001bd8:	9003      	str	r0, [sp, #12]
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	4591      	cmp	r9, r2
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x5a>
 8001be0:	e0cd      	b.n	8001d7e <__aeabi_dsub+0x1f6>
 8001be2:	2501      	movs	r5, #1
 8001be4:	4069      	eors	r1, r5
 8001be6:	464d      	mov	r5, r9
 8001be8:	1b7d      	subs	r5, r7, r5
 8001bea:	46aa      	mov	sl, r5
 8001bec:	428e      	cmp	r6, r1
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x6a>
 8001bf0:	e080      	b.n	8001cf4 <__aeabi_dsub+0x16c>
 8001bf2:	2d00      	cmp	r5, #0
 8001bf4:	dc00      	bgt.n	8001bf8 <__aeabi_dsub+0x70>
 8001bf6:	e335      	b.n	8002264 <__aeabi_dsub+0x6dc>
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	2900      	cmp	r1, #0
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x78>
 8001bfe:	e0df      	b.n	8001dc0 <__aeabi_dsub+0x238>
 8001c00:	4297      	cmp	r7, r2
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x7e>
 8001c04:	e194      	b.n	8001f30 <__aeabi_dsub+0x3a8>
 8001c06:	4652      	mov	r2, sl
 8001c08:	2501      	movs	r5, #1
 8001c0a:	2a38      	cmp	r2, #56	@ 0x38
 8001c0c:	dc19      	bgt.n	8001c42 <__aeabi_dsub+0xba>
 8001c0e:	2280      	movs	r2, #128	@ 0x80
 8001c10:	9b02      	ldr	r3, [sp, #8]
 8001c12:	0412      	lsls	r2, r2, #16
 8001c14:	4313      	orrs	r3, r2
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	4652      	mov	r2, sl
 8001c1a:	2a1f      	cmp	r2, #31
 8001c1c:	dd00      	ble.n	8001c20 <__aeabi_dsub+0x98>
 8001c1e:	e1e3      	b.n	8001fe8 <__aeabi_dsub+0x460>
 8001c20:	4653      	mov	r3, sl
 8001c22:	2220      	movs	r2, #32
 8001c24:	4661      	mov	r1, ip
 8001c26:	9d02      	ldr	r5, [sp, #8]
 8001c28:	1ad2      	subs	r2, r2, r3
 8001c2a:	4095      	lsls	r5, r2
 8001c2c:	40d9      	lsrs	r1, r3
 8001c2e:	430d      	orrs	r5, r1
 8001c30:	4661      	mov	r1, ip
 8001c32:	4091      	lsls	r1, r2
 8001c34:	000a      	movs	r2, r1
 8001c36:	1e51      	subs	r1, r2, #1
 8001c38:	418a      	sbcs	r2, r1
 8001c3a:	4315      	orrs	r5, r2
 8001c3c:	9a02      	ldr	r2, [sp, #8]
 8001c3e:	40da      	lsrs	r2, r3
 8001c40:	1aa4      	subs	r4, r4, r2
 8001c42:	1b45      	subs	r5, r0, r5
 8001c44:	42a8      	cmp	r0, r5
 8001c46:	4180      	sbcs	r0, r0
 8001c48:	4240      	negs	r0, r0
 8001c4a:	1a24      	subs	r4, r4, r0
 8001c4c:	0223      	lsls	r3, r4, #8
 8001c4e:	d400      	bmi.n	8001c52 <__aeabi_dsub+0xca>
 8001c50:	e13d      	b.n	8001ece <__aeabi_dsub+0x346>
 8001c52:	0264      	lsls	r4, r4, #9
 8001c54:	0a64      	lsrs	r4, r4, #9
 8001c56:	2c00      	cmp	r4, #0
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0xd4>
 8001c5a:	e147      	b.n	8001eec <__aeabi_dsub+0x364>
 8001c5c:	0020      	movs	r0, r4
 8001c5e:	f000 fbbd 	bl	80023dc <__clzsi2>
 8001c62:	0003      	movs	r3, r0
 8001c64:	3b08      	subs	r3, #8
 8001c66:	2120      	movs	r1, #32
 8001c68:	0028      	movs	r0, r5
 8001c6a:	1aca      	subs	r2, r1, r3
 8001c6c:	40d0      	lsrs	r0, r2
 8001c6e:	409c      	lsls	r4, r3
 8001c70:	0002      	movs	r2, r0
 8001c72:	409d      	lsls	r5, r3
 8001c74:	4322      	orrs	r2, r4
 8001c76:	429f      	cmp	r7, r3
 8001c78:	dd00      	ble.n	8001c7c <__aeabi_dsub+0xf4>
 8001c7a:	e177      	b.n	8001f6c <__aeabi_dsub+0x3e4>
 8001c7c:	1bd8      	subs	r0, r3, r7
 8001c7e:	3001      	adds	r0, #1
 8001c80:	1a09      	subs	r1, r1, r0
 8001c82:	002c      	movs	r4, r5
 8001c84:	408d      	lsls	r5, r1
 8001c86:	40c4      	lsrs	r4, r0
 8001c88:	1e6b      	subs	r3, r5, #1
 8001c8a:	419d      	sbcs	r5, r3
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	40c2      	lsrs	r2, r0
 8001c90:	408b      	lsls	r3, r1
 8001c92:	4325      	orrs	r5, r4
 8001c94:	2700      	movs	r7, #0
 8001c96:	0014      	movs	r4, r2
 8001c98:	431d      	orrs	r5, r3
 8001c9a:	076b      	lsls	r3, r5, #29
 8001c9c:	d009      	beq.n	8001cb2 <__aeabi_dsub+0x12a>
 8001c9e:	230f      	movs	r3, #15
 8001ca0:	402b      	ands	r3, r5
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d005      	beq.n	8001cb2 <__aeabi_dsub+0x12a>
 8001ca6:	1d2b      	adds	r3, r5, #4
 8001ca8:	42ab      	cmp	r3, r5
 8001caa:	41ad      	sbcs	r5, r5
 8001cac:	426d      	negs	r5, r5
 8001cae:	1964      	adds	r4, r4, r5
 8001cb0:	001d      	movs	r5, r3
 8001cb2:	0223      	lsls	r3, r4, #8
 8001cb4:	d400      	bmi.n	8001cb8 <__aeabi_dsub+0x130>
 8001cb6:	e140      	b.n	8001f3a <__aeabi_dsub+0x3b2>
 8001cb8:	4a88      	ldr	r2, [pc, #544]	@ (8001edc <__aeabi_dsub+0x354>)
 8001cba:	3701      	adds	r7, #1
 8001cbc:	4297      	cmp	r7, r2
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x13a>
 8001cc0:	e101      	b.n	8001ec6 <__aeabi_dsub+0x33e>
 8001cc2:	2601      	movs	r6, #1
 8001cc4:	4643      	mov	r3, r8
 8001cc6:	4986      	ldr	r1, [pc, #536]	@ (8001ee0 <__aeabi_dsub+0x358>)
 8001cc8:	08ed      	lsrs	r5, r5, #3
 8001cca:	4021      	ands	r1, r4
 8001ccc:	074a      	lsls	r2, r1, #29
 8001cce:	432a      	orrs	r2, r5
 8001cd0:	057c      	lsls	r4, r7, #21
 8001cd2:	024d      	lsls	r5, r1, #9
 8001cd4:	0b2d      	lsrs	r5, r5, #12
 8001cd6:	0d64      	lsrs	r4, r4, #21
 8001cd8:	401e      	ands	r6, r3
 8001cda:	0524      	lsls	r4, r4, #20
 8001cdc:	432c      	orrs	r4, r5
 8001cde:	07f6      	lsls	r6, r6, #31
 8001ce0:	4334      	orrs	r4, r6
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	0021      	movs	r1, r4
 8001ce6:	b005      	add	sp, #20
 8001ce8:	bcf0      	pop	{r4, r5, r6, r7}
 8001cea:	46bb      	mov	fp, r7
 8001cec:	46b2      	mov	sl, r6
 8001cee:	46a9      	mov	r9, r5
 8001cf0:	46a0      	mov	r8, r4
 8001cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf4:	2d00      	cmp	r5, #0
 8001cf6:	dc00      	bgt.n	8001cfa <__aeabi_dsub+0x172>
 8001cf8:	e2d0      	b.n	800229c <__aeabi_dsub+0x714>
 8001cfa:	4649      	mov	r1, r9
 8001cfc:	2900      	cmp	r1, #0
 8001cfe:	d000      	beq.n	8001d02 <__aeabi_dsub+0x17a>
 8001d00:	e0d4      	b.n	8001eac <__aeabi_dsub+0x324>
 8001d02:	4661      	mov	r1, ip
 8001d04:	9b02      	ldr	r3, [sp, #8]
 8001d06:	4319      	orrs	r1, r3
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x184>
 8001d0a:	e12b      	b.n	8001f64 <__aeabi_dsub+0x3dc>
 8001d0c:	1e69      	subs	r1, r5, #1
 8001d0e:	2d01      	cmp	r5, #1
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x18c>
 8001d12:	e1d9      	b.n	80020c8 <__aeabi_dsub+0x540>
 8001d14:	4295      	cmp	r5, r2
 8001d16:	d100      	bne.n	8001d1a <__aeabi_dsub+0x192>
 8001d18:	e10a      	b.n	8001f30 <__aeabi_dsub+0x3a8>
 8001d1a:	2501      	movs	r5, #1
 8001d1c:	2938      	cmp	r1, #56	@ 0x38
 8001d1e:	dc17      	bgt.n	8001d50 <__aeabi_dsub+0x1c8>
 8001d20:	468a      	mov	sl, r1
 8001d22:	4653      	mov	r3, sl
 8001d24:	2b1f      	cmp	r3, #31
 8001d26:	dd00      	ble.n	8001d2a <__aeabi_dsub+0x1a2>
 8001d28:	e1e7      	b.n	80020fa <__aeabi_dsub+0x572>
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	1ad2      	subs	r2, r2, r3
 8001d2e:	9b02      	ldr	r3, [sp, #8]
 8001d30:	4661      	mov	r1, ip
 8001d32:	4093      	lsls	r3, r2
 8001d34:	001d      	movs	r5, r3
 8001d36:	4653      	mov	r3, sl
 8001d38:	40d9      	lsrs	r1, r3
 8001d3a:	4663      	mov	r3, ip
 8001d3c:	4093      	lsls	r3, r2
 8001d3e:	001a      	movs	r2, r3
 8001d40:	430d      	orrs	r5, r1
 8001d42:	1e51      	subs	r1, r2, #1
 8001d44:	418a      	sbcs	r2, r1
 8001d46:	4653      	mov	r3, sl
 8001d48:	4315      	orrs	r5, r2
 8001d4a:	9a02      	ldr	r2, [sp, #8]
 8001d4c:	40da      	lsrs	r2, r3
 8001d4e:	18a4      	adds	r4, r4, r2
 8001d50:	182d      	adds	r5, r5, r0
 8001d52:	4285      	cmp	r5, r0
 8001d54:	4180      	sbcs	r0, r0
 8001d56:	4240      	negs	r0, r0
 8001d58:	1824      	adds	r4, r4, r0
 8001d5a:	0223      	lsls	r3, r4, #8
 8001d5c:	d400      	bmi.n	8001d60 <__aeabi_dsub+0x1d8>
 8001d5e:	e0b6      	b.n	8001ece <__aeabi_dsub+0x346>
 8001d60:	4b5e      	ldr	r3, [pc, #376]	@ (8001edc <__aeabi_dsub+0x354>)
 8001d62:	3701      	adds	r7, #1
 8001d64:	429f      	cmp	r7, r3
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x1e2>
 8001d68:	e0ad      	b.n	8001ec6 <__aeabi_dsub+0x33e>
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ee0 <__aeabi_dsub+0x358>)
 8001d6e:	086a      	lsrs	r2, r5, #1
 8001d70:	401c      	ands	r4, r3
 8001d72:	4029      	ands	r1, r5
 8001d74:	430a      	orrs	r2, r1
 8001d76:	07e5      	lsls	r5, r4, #31
 8001d78:	4315      	orrs	r5, r2
 8001d7a:	0864      	lsrs	r4, r4, #1
 8001d7c:	e78d      	b.n	8001c9a <__aeabi_dsub+0x112>
 8001d7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ee4 <__aeabi_dsub+0x35c>)
 8001d80:	9b02      	ldr	r3, [sp, #8]
 8001d82:	4692      	mov	sl, r2
 8001d84:	4662      	mov	r2, ip
 8001d86:	44ba      	add	sl, r7
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	d02c      	beq.n	8001de6 <__aeabi_dsub+0x25e>
 8001d8c:	428e      	cmp	r6, r1
 8001d8e:	d02e      	beq.n	8001dee <__aeabi_dsub+0x266>
 8001d90:	4652      	mov	r2, sl
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	d060      	beq.n	8001e58 <__aeabi_dsub+0x2d0>
 8001d96:	2f00      	cmp	r7, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dsub+0x214>
 8001d9a:	e0db      	b.n	8001f54 <__aeabi_dsub+0x3cc>
 8001d9c:	4663      	mov	r3, ip
 8001d9e:	000e      	movs	r6, r1
 8001da0:	9c02      	ldr	r4, [sp, #8]
 8001da2:	08d8      	lsrs	r0, r3, #3
 8001da4:	0762      	lsls	r2, r4, #29
 8001da6:	4302      	orrs	r2, r0
 8001da8:	08e4      	lsrs	r4, r4, #3
 8001daa:	0013      	movs	r3, r2
 8001dac:	4323      	orrs	r3, r4
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0x22a>
 8001db0:	e254      	b.n	800225c <__aeabi_dsub+0x6d4>
 8001db2:	2580      	movs	r5, #128	@ 0x80
 8001db4:	032d      	lsls	r5, r5, #12
 8001db6:	4325      	orrs	r5, r4
 8001db8:	032d      	lsls	r5, r5, #12
 8001dba:	4c48      	ldr	r4, [pc, #288]	@ (8001edc <__aeabi_dsub+0x354>)
 8001dbc:	0b2d      	lsrs	r5, r5, #12
 8001dbe:	e78c      	b.n	8001cda <__aeabi_dsub+0x152>
 8001dc0:	4661      	mov	r1, ip
 8001dc2:	9b02      	ldr	r3, [sp, #8]
 8001dc4:	4319      	orrs	r1, r3
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x242>
 8001dc8:	e0cc      	b.n	8001f64 <__aeabi_dsub+0x3dc>
 8001dca:	0029      	movs	r1, r5
 8001dcc:	3901      	subs	r1, #1
 8001dce:	2d01      	cmp	r5, #1
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x24c>
 8001dd2:	e188      	b.n	80020e6 <__aeabi_dsub+0x55e>
 8001dd4:	4295      	cmp	r5, r2
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dsub+0x252>
 8001dd8:	e0aa      	b.n	8001f30 <__aeabi_dsub+0x3a8>
 8001dda:	2501      	movs	r5, #1
 8001ddc:	2938      	cmp	r1, #56	@ 0x38
 8001dde:	dd00      	ble.n	8001de2 <__aeabi_dsub+0x25a>
 8001de0:	e72f      	b.n	8001c42 <__aeabi_dsub+0xba>
 8001de2:	468a      	mov	sl, r1
 8001de4:	e718      	b.n	8001c18 <__aeabi_dsub+0x90>
 8001de6:	2201      	movs	r2, #1
 8001de8:	4051      	eors	r1, r2
 8001dea:	428e      	cmp	r6, r1
 8001dec:	d1d0      	bne.n	8001d90 <__aeabi_dsub+0x208>
 8001dee:	4653      	mov	r3, sl
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x26e>
 8001df4:	e0be      	b.n	8001f74 <__aeabi_dsub+0x3ec>
 8001df6:	2f00      	cmp	r7, #0
 8001df8:	d000      	beq.n	8001dfc <__aeabi_dsub+0x274>
 8001dfa:	e138      	b.n	800206e <__aeabi_dsub+0x4e6>
 8001dfc:	46ca      	mov	sl, r9
 8001dfe:	0022      	movs	r2, r4
 8001e00:	4302      	orrs	r2, r0
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dsub+0x27e>
 8001e04:	e1e2      	b.n	80021cc <__aeabi_dsub+0x644>
 8001e06:	4653      	mov	r3, sl
 8001e08:	1e59      	subs	r1, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x288>
 8001e0e:	e20d      	b.n	800222c <__aeabi_dsub+0x6a4>
 8001e10:	4a32      	ldr	r2, [pc, #200]	@ (8001edc <__aeabi_dsub+0x354>)
 8001e12:	4592      	cmp	sl, r2
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x290>
 8001e16:	e1d2      	b.n	80021be <__aeabi_dsub+0x636>
 8001e18:	2701      	movs	r7, #1
 8001e1a:	2938      	cmp	r1, #56	@ 0x38
 8001e1c:	dc13      	bgt.n	8001e46 <__aeabi_dsub+0x2be>
 8001e1e:	291f      	cmp	r1, #31
 8001e20:	dd00      	ble.n	8001e24 <__aeabi_dsub+0x29c>
 8001e22:	e1ee      	b.n	8002202 <__aeabi_dsub+0x67a>
 8001e24:	2220      	movs	r2, #32
 8001e26:	9b02      	ldr	r3, [sp, #8]
 8001e28:	1a52      	subs	r2, r2, r1
 8001e2a:	0025      	movs	r5, r4
 8001e2c:	0007      	movs	r7, r0
 8001e2e:	469a      	mov	sl, r3
 8001e30:	40cc      	lsrs	r4, r1
 8001e32:	4090      	lsls	r0, r2
 8001e34:	4095      	lsls	r5, r2
 8001e36:	40cf      	lsrs	r7, r1
 8001e38:	44a2      	add	sl, r4
 8001e3a:	1e42      	subs	r2, r0, #1
 8001e3c:	4190      	sbcs	r0, r2
 8001e3e:	4653      	mov	r3, sl
 8001e40:	432f      	orrs	r7, r5
 8001e42:	4307      	orrs	r7, r0
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	003d      	movs	r5, r7
 8001e48:	4465      	add	r5, ip
 8001e4a:	4565      	cmp	r5, ip
 8001e4c:	4192      	sbcs	r2, r2
 8001e4e:	9b02      	ldr	r3, [sp, #8]
 8001e50:	4252      	negs	r2, r2
 8001e52:	464f      	mov	r7, r9
 8001e54:	18d4      	adds	r4, r2, r3
 8001e56:	e780      	b.n	8001d5a <__aeabi_dsub+0x1d2>
 8001e58:	4a23      	ldr	r2, [pc, #140]	@ (8001ee8 <__aeabi_dsub+0x360>)
 8001e5a:	1c7d      	adds	r5, r7, #1
 8001e5c:	4215      	tst	r5, r2
 8001e5e:	d000      	beq.n	8001e62 <__aeabi_dsub+0x2da>
 8001e60:	e0aa      	b.n	8001fb8 <__aeabi_dsub+0x430>
 8001e62:	4662      	mov	r2, ip
 8001e64:	0025      	movs	r5, r4
 8001e66:	9b02      	ldr	r3, [sp, #8]
 8001e68:	4305      	orrs	r5, r0
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	2f00      	cmp	r7, #0
 8001e6e:	d000      	beq.n	8001e72 <__aeabi_dsub+0x2ea>
 8001e70:	e0f5      	b.n	800205e <__aeabi_dsub+0x4d6>
 8001e72:	2d00      	cmp	r5, #0
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x2f0>
 8001e76:	e16b      	b.n	8002150 <__aeabi_dsub+0x5c8>
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d100      	bne.n	8001e7e <__aeabi_dsub+0x2f6>
 8001e7c:	e152      	b.n	8002124 <__aeabi_dsub+0x59c>
 8001e7e:	4663      	mov	r3, ip
 8001e80:	1ac5      	subs	r5, r0, r3
 8001e82:	9b02      	ldr	r3, [sp, #8]
 8001e84:	1ae2      	subs	r2, r4, r3
 8001e86:	42a8      	cmp	r0, r5
 8001e88:	419b      	sbcs	r3, r3
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	021a      	lsls	r2, r3, #8
 8001e90:	d400      	bmi.n	8001e94 <__aeabi_dsub+0x30c>
 8001e92:	e1d5      	b.n	8002240 <__aeabi_dsub+0x6b8>
 8001e94:	4663      	mov	r3, ip
 8001e96:	1a1d      	subs	r5, r3, r0
 8001e98:	45ac      	cmp	ip, r5
 8001e9a:	4192      	sbcs	r2, r2
 8001e9c:	2601      	movs	r6, #1
 8001e9e:	9b02      	ldr	r3, [sp, #8]
 8001ea0:	4252      	negs	r2, r2
 8001ea2:	1b1c      	subs	r4, r3, r4
 8001ea4:	4688      	mov	r8, r1
 8001ea6:	1aa4      	subs	r4, r4, r2
 8001ea8:	400e      	ands	r6, r1
 8001eaa:	e6f6      	b.n	8001c9a <__aeabi_dsub+0x112>
 8001eac:	4297      	cmp	r7, r2
 8001eae:	d03f      	beq.n	8001f30 <__aeabi_dsub+0x3a8>
 8001eb0:	4652      	mov	r2, sl
 8001eb2:	2501      	movs	r5, #1
 8001eb4:	2a38      	cmp	r2, #56	@ 0x38
 8001eb6:	dd00      	ble.n	8001eba <__aeabi_dsub+0x332>
 8001eb8:	e74a      	b.n	8001d50 <__aeabi_dsub+0x1c8>
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	9b02      	ldr	r3, [sp, #8]
 8001ebe:	0412      	lsls	r2, r2, #16
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	e72d      	b.n	8001d22 <__aeabi_dsub+0x19a>
 8001ec6:	003c      	movs	r4, r7
 8001ec8:	2500      	movs	r5, #0
 8001eca:	2200      	movs	r2, #0
 8001ecc:	e705      	b.n	8001cda <__aeabi_dsub+0x152>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	402b      	ands	r3, r5
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d000      	beq.n	8001ed8 <__aeabi_dsub+0x350>
 8001ed6:	e6e2      	b.n	8001c9e <__aeabi_dsub+0x116>
 8001ed8:	e06b      	b.n	8001fb2 <__aeabi_dsub+0x42a>
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	000007ff 	.word	0x000007ff
 8001ee0:	ff7fffff 	.word	0xff7fffff
 8001ee4:	fffff801 	.word	0xfffff801
 8001ee8:	000007fe 	.word	0x000007fe
 8001eec:	0028      	movs	r0, r5
 8001eee:	f000 fa75 	bl	80023dc <__clzsi2>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	3318      	adds	r3, #24
 8001ef6:	2b1f      	cmp	r3, #31
 8001ef8:	dc00      	bgt.n	8001efc <__aeabi_dsub+0x374>
 8001efa:	e6b4      	b.n	8001c66 <__aeabi_dsub+0xde>
 8001efc:	002a      	movs	r2, r5
 8001efe:	3808      	subs	r0, #8
 8001f00:	4082      	lsls	r2, r0
 8001f02:	429f      	cmp	r7, r3
 8001f04:	dd00      	ble.n	8001f08 <__aeabi_dsub+0x380>
 8001f06:	e0b9      	b.n	800207c <__aeabi_dsub+0x4f4>
 8001f08:	1bdb      	subs	r3, r3, r7
 8001f0a:	1c58      	adds	r0, r3, #1
 8001f0c:	281f      	cmp	r0, #31
 8001f0e:	dc00      	bgt.n	8001f12 <__aeabi_dsub+0x38a>
 8001f10:	e1a0      	b.n	8002254 <__aeabi_dsub+0x6cc>
 8001f12:	0015      	movs	r5, r2
 8001f14:	3b1f      	subs	r3, #31
 8001f16:	40dd      	lsrs	r5, r3
 8001f18:	2820      	cmp	r0, #32
 8001f1a:	d005      	beq.n	8001f28 <__aeabi_dsub+0x3a0>
 8001f1c:	2340      	movs	r3, #64	@ 0x40
 8001f1e:	1a1b      	subs	r3, r3, r0
 8001f20:	409a      	lsls	r2, r3
 8001f22:	1e53      	subs	r3, r2, #1
 8001f24:	419a      	sbcs	r2, r3
 8001f26:	4315      	orrs	r5, r2
 8001f28:	2307      	movs	r3, #7
 8001f2a:	2700      	movs	r7, #0
 8001f2c:	402b      	ands	r3, r5
 8001f2e:	e7d0      	b.n	8001ed2 <__aeabi_dsub+0x34a>
 8001f30:	08c0      	lsrs	r0, r0, #3
 8001f32:	0762      	lsls	r2, r4, #29
 8001f34:	4302      	orrs	r2, r0
 8001f36:	08e4      	lsrs	r4, r4, #3
 8001f38:	e737      	b.n	8001daa <__aeabi_dsub+0x222>
 8001f3a:	08ea      	lsrs	r2, r5, #3
 8001f3c:	0763      	lsls	r3, r4, #29
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	4bd3      	ldr	r3, [pc, #844]	@ (8002290 <__aeabi_dsub+0x708>)
 8001f42:	08e4      	lsrs	r4, r4, #3
 8001f44:	429f      	cmp	r7, r3
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dsub+0x3c2>
 8001f48:	e72f      	b.n	8001daa <__aeabi_dsub+0x222>
 8001f4a:	0324      	lsls	r4, r4, #12
 8001f4c:	0b25      	lsrs	r5, r4, #12
 8001f4e:	057c      	lsls	r4, r7, #21
 8001f50:	0d64      	lsrs	r4, r4, #21
 8001f52:	e6c2      	b.n	8001cda <__aeabi_dsub+0x152>
 8001f54:	46ca      	mov	sl, r9
 8001f56:	0022      	movs	r2, r4
 8001f58:	4302      	orrs	r2, r0
 8001f5a:	d158      	bne.n	800200e <__aeabi_dsub+0x486>
 8001f5c:	4663      	mov	r3, ip
 8001f5e:	000e      	movs	r6, r1
 8001f60:	9c02      	ldr	r4, [sp, #8]
 8001f62:	9303      	str	r3, [sp, #12]
 8001f64:	9b03      	ldr	r3, [sp, #12]
 8001f66:	4657      	mov	r7, sl
 8001f68:	08da      	lsrs	r2, r3, #3
 8001f6a:	e7e7      	b.n	8001f3c <__aeabi_dsub+0x3b4>
 8001f6c:	4cc9      	ldr	r4, [pc, #804]	@ (8002294 <__aeabi_dsub+0x70c>)
 8001f6e:	1aff      	subs	r7, r7, r3
 8001f70:	4014      	ands	r4, r2
 8001f72:	e692      	b.n	8001c9a <__aeabi_dsub+0x112>
 8001f74:	4dc8      	ldr	r5, [pc, #800]	@ (8002298 <__aeabi_dsub+0x710>)
 8001f76:	1c7a      	adds	r2, r7, #1
 8001f78:	422a      	tst	r2, r5
 8001f7a:	d000      	beq.n	8001f7e <__aeabi_dsub+0x3f6>
 8001f7c:	e084      	b.n	8002088 <__aeabi_dsub+0x500>
 8001f7e:	0022      	movs	r2, r4
 8001f80:	4302      	orrs	r2, r0
 8001f82:	2f00      	cmp	r7, #0
 8001f84:	d000      	beq.n	8001f88 <__aeabi_dsub+0x400>
 8001f86:	e0ef      	b.n	8002168 <__aeabi_dsub+0x5e0>
 8001f88:	2a00      	cmp	r2, #0
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x406>
 8001f8c:	e0e5      	b.n	800215a <__aeabi_dsub+0x5d2>
 8001f8e:	4662      	mov	r2, ip
 8001f90:	9902      	ldr	r1, [sp, #8]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x410>
 8001f96:	e0c5      	b.n	8002124 <__aeabi_dsub+0x59c>
 8001f98:	4663      	mov	r3, ip
 8001f9a:	18c5      	adds	r5, r0, r3
 8001f9c:	468c      	mov	ip, r1
 8001f9e:	4285      	cmp	r5, r0
 8001fa0:	4180      	sbcs	r0, r0
 8001fa2:	4464      	add	r4, ip
 8001fa4:	4240      	negs	r0, r0
 8001fa6:	1824      	adds	r4, r4, r0
 8001fa8:	0223      	lsls	r3, r4, #8
 8001faa:	d502      	bpl.n	8001fb2 <__aeabi_dsub+0x42a>
 8001fac:	4bb9      	ldr	r3, [pc, #740]	@ (8002294 <__aeabi_dsub+0x70c>)
 8001fae:	3701      	adds	r7, #1
 8001fb0:	401c      	ands	r4, r3
 8001fb2:	46ba      	mov	sl, r7
 8001fb4:	9503      	str	r5, [sp, #12]
 8001fb6:	e7d5      	b.n	8001f64 <__aeabi_dsub+0x3dc>
 8001fb8:	4662      	mov	r2, ip
 8001fba:	1a85      	subs	r5, r0, r2
 8001fbc:	42a8      	cmp	r0, r5
 8001fbe:	4192      	sbcs	r2, r2
 8001fc0:	4252      	negs	r2, r2
 8001fc2:	4691      	mov	r9, r2
 8001fc4:	9b02      	ldr	r3, [sp, #8]
 8001fc6:	1ae3      	subs	r3, r4, r3
 8001fc8:	001a      	movs	r2, r3
 8001fca:	464b      	mov	r3, r9
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	0013      	movs	r3, r2
 8001fd0:	4691      	mov	r9, r2
 8001fd2:	021a      	lsls	r2, r3, #8
 8001fd4:	d46c      	bmi.n	80020b0 <__aeabi_dsub+0x528>
 8001fd6:	464a      	mov	r2, r9
 8001fd8:	464c      	mov	r4, r9
 8001fda:	432a      	orrs	r2, r5
 8001fdc:	d000      	beq.n	8001fe0 <__aeabi_dsub+0x458>
 8001fde:	e63a      	b.n	8001c56 <__aeabi_dsub+0xce>
 8001fe0:	2600      	movs	r6, #0
 8001fe2:	2400      	movs	r4, #0
 8001fe4:	2500      	movs	r5, #0
 8001fe6:	e678      	b.n	8001cda <__aeabi_dsub+0x152>
 8001fe8:	9902      	ldr	r1, [sp, #8]
 8001fea:	4653      	mov	r3, sl
 8001fec:	000d      	movs	r5, r1
 8001fee:	3a20      	subs	r2, #32
 8001ff0:	40d5      	lsrs	r5, r2
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d006      	beq.n	8002004 <__aeabi_dsub+0x47c>
 8001ff6:	2240      	movs	r2, #64	@ 0x40
 8001ff8:	1ad2      	subs	r2, r2, r3
 8001ffa:	000b      	movs	r3, r1
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	4662      	mov	r2, ip
 8002000:	431a      	orrs	r2, r3
 8002002:	4693      	mov	fp, r2
 8002004:	465b      	mov	r3, fp
 8002006:	1e5a      	subs	r2, r3, #1
 8002008:	4193      	sbcs	r3, r2
 800200a:	431d      	orrs	r5, r3
 800200c:	e619      	b.n	8001c42 <__aeabi_dsub+0xba>
 800200e:	4653      	mov	r3, sl
 8002010:	1e5a      	subs	r2, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d100      	bne.n	8002018 <__aeabi_dsub+0x490>
 8002016:	e0c6      	b.n	80021a6 <__aeabi_dsub+0x61e>
 8002018:	4e9d      	ldr	r6, [pc, #628]	@ (8002290 <__aeabi_dsub+0x708>)
 800201a:	45b2      	cmp	sl, r6
 800201c:	d100      	bne.n	8002020 <__aeabi_dsub+0x498>
 800201e:	e6bd      	b.n	8001d9c <__aeabi_dsub+0x214>
 8002020:	4688      	mov	r8, r1
 8002022:	000e      	movs	r6, r1
 8002024:	2501      	movs	r5, #1
 8002026:	2a38      	cmp	r2, #56	@ 0x38
 8002028:	dc10      	bgt.n	800204c <__aeabi_dsub+0x4c4>
 800202a:	2a1f      	cmp	r2, #31
 800202c:	dc7f      	bgt.n	800212e <__aeabi_dsub+0x5a6>
 800202e:	2120      	movs	r1, #32
 8002030:	0025      	movs	r5, r4
 8002032:	1a89      	subs	r1, r1, r2
 8002034:	0007      	movs	r7, r0
 8002036:	4088      	lsls	r0, r1
 8002038:	408d      	lsls	r5, r1
 800203a:	40d7      	lsrs	r7, r2
 800203c:	40d4      	lsrs	r4, r2
 800203e:	1e41      	subs	r1, r0, #1
 8002040:	4188      	sbcs	r0, r1
 8002042:	9b02      	ldr	r3, [sp, #8]
 8002044:	433d      	orrs	r5, r7
 8002046:	1b1b      	subs	r3, r3, r4
 8002048:	4305      	orrs	r5, r0
 800204a:	9302      	str	r3, [sp, #8]
 800204c:	4662      	mov	r2, ip
 800204e:	1b55      	subs	r5, r2, r5
 8002050:	45ac      	cmp	ip, r5
 8002052:	4192      	sbcs	r2, r2
 8002054:	9b02      	ldr	r3, [sp, #8]
 8002056:	4252      	negs	r2, r2
 8002058:	464f      	mov	r7, r9
 800205a:	1a9c      	subs	r4, r3, r2
 800205c:	e5f6      	b.n	8001c4c <__aeabi_dsub+0xc4>
 800205e:	2d00      	cmp	r5, #0
 8002060:	d000      	beq.n	8002064 <__aeabi_dsub+0x4dc>
 8002062:	e0b7      	b.n	80021d4 <__aeabi_dsub+0x64c>
 8002064:	2a00      	cmp	r2, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x4e2>
 8002068:	e0f0      	b.n	800224c <__aeabi_dsub+0x6c4>
 800206a:	2601      	movs	r6, #1
 800206c:	400e      	ands	r6, r1
 800206e:	4663      	mov	r3, ip
 8002070:	9802      	ldr	r0, [sp, #8]
 8002072:	08d9      	lsrs	r1, r3, #3
 8002074:	0742      	lsls	r2, r0, #29
 8002076:	430a      	orrs	r2, r1
 8002078:	08c4      	lsrs	r4, r0, #3
 800207a:	e696      	b.n	8001daa <__aeabi_dsub+0x222>
 800207c:	4c85      	ldr	r4, [pc, #532]	@ (8002294 <__aeabi_dsub+0x70c>)
 800207e:	1aff      	subs	r7, r7, r3
 8002080:	4014      	ands	r4, r2
 8002082:	0762      	lsls	r2, r4, #29
 8002084:	08e4      	lsrs	r4, r4, #3
 8002086:	e760      	b.n	8001f4a <__aeabi_dsub+0x3c2>
 8002088:	4981      	ldr	r1, [pc, #516]	@ (8002290 <__aeabi_dsub+0x708>)
 800208a:	428a      	cmp	r2, r1
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x508>
 800208e:	e0c9      	b.n	8002224 <__aeabi_dsub+0x69c>
 8002090:	4663      	mov	r3, ip
 8002092:	18c1      	adds	r1, r0, r3
 8002094:	4281      	cmp	r1, r0
 8002096:	4180      	sbcs	r0, r0
 8002098:	9b02      	ldr	r3, [sp, #8]
 800209a:	4240      	negs	r0, r0
 800209c:	18e3      	adds	r3, r4, r3
 800209e:	181b      	adds	r3, r3, r0
 80020a0:	07dd      	lsls	r5, r3, #31
 80020a2:	085c      	lsrs	r4, r3, #1
 80020a4:	2307      	movs	r3, #7
 80020a6:	0849      	lsrs	r1, r1, #1
 80020a8:	430d      	orrs	r5, r1
 80020aa:	0017      	movs	r7, r2
 80020ac:	402b      	ands	r3, r5
 80020ae:	e710      	b.n	8001ed2 <__aeabi_dsub+0x34a>
 80020b0:	4663      	mov	r3, ip
 80020b2:	1a1d      	subs	r5, r3, r0
 80020b4:	45ac      	cmp	ip, r5
 80020b6:	4192      	sbcs	r2, r2
 80020b8:	2601      	movs	r6, #1
 80020ba:	9b02      	ldr	r3, [sp, #8]
 80020bc:	4252      	negs	r2, r2
 80020be:	1b1c      	subs	r4, r3, r4
 80020c0:	4688      	mov	r8, r1
 80020c2:	1aa4      	subs	r4, r4, r2
 80020c4:	400e      	ands	r6, r1
 80020c6:	e5c6      	b.n	8001c56 <__aeabi_dsub+0xce>
 80020c8:	4663      	mov	r3, ip
 80020ca:	18c5      	adds	r5, r0, r3
 80020cc:	9b02      	ldr	r3, [sp, #8]
 80020ce:	4285      	cmp	r5, r0
 80020d0:	4180      	sbcs	r0, r0
 80020d2:	469c      	mov	ip, r3
 80020d4:	4240      	negs	r0, r0
 80020d6:	4464      	add	r4, ip
 80020d8:	1824      	adds	r4, r4, r0
 80020da:	2701      	movs	r7, #1
 80020dc:	0223      	lsls	r3, r4, #8
 80020de:	d400      	bmi.n	80020e2 <__aeabi_dsub+0x55a>
 80020e0:	e6f5      	b.n	8001ece <__aeabi_dsub+0x346>
 80020e2:	2702      	movs	r7, #2
 80020e4:	e641      	b.n	8001d6a <__aeabi_dsub+0x1e2>
 80020e6:	4663      	mov	r3, ip
 80020e8:	1ac5      	subs	r5, r0, r3
 80020ea:	42a8      	cmp	r0, r5
 80020ec:	4180      	sbcs	r0, r0
 80020ee:	9b02      	ldr	r3, [sp, #8]
 80020f0:	4240      	negs	r0, r0
 80020f2:	1ae4      	subs	r4, r4, r3
 80020f4:	2701      	movs	r7, #1
 80020f6:	1a24      	subs	r4, r4, r0
 80020f8:	e5a8      	b.n	8001c4c <__aeabi_dsub+0xc4>
 80020fa:	9d02      	ldr	r5, [sp, #8]
 80020fc:	4652      	mov	r2, sl
 80020fe:	002b      	movs	r3, r5
 8002100:	3a20      	subs	r2, #32
 8002102:	40d3      	lsrs	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	4653      	mov	r3, sl
 8002108:	2b20      	cmp	r3, #32
 800210a:	d006      	beq.n	800211a <__aeabi_dsub+0x592>
 800210c:	2240      	movs	r2, #64	@ 0x40
 800210e:	1ad2      	subs	r2, r2, r3
 8002110:	002b      	movs	r3, r5
 8002112:	4093      	lsls	r3, r2
 8002114:	4662      	mov	r2, ip
 8002116:	431a      	orrs	r2, r3
 8002118:	4693      	mov	fp, r2
 800211a:	465d      	mov	r5, fp
 800211c:	1e6b      	subs	r3, r5, #1
 800211e:	419d      	sbcs	r5, r3
 8002120:	430d      	orrs	r5, r1
 8002122:	e615      	b.n	8001d50 <__aeabi_dsub+0x1c8>
 8002124:	0762      	lsls	r2, r4, #29
 8002126:	08c0      	lsrs	r0, r0, #3
 8002128:	4302      	orrs	r2, r0
 800212a:	08e4      	lsrs	r4, r4, #3
 800212c:	e70d      	b.n	8001f4a <__aeabi_dsub+0x3c2>
 800212e:	0011      	movs	r1, r2
 8002130:	0027      	movs	r7, r4
 8002132:	3920      	subs	r1, #32
 8002134:	40cf      	lsrs	r7, r1
 8002136:	2a20      	cmp	r2, #32
 8002138:	d005      	beq.n	8002146 <__aeabi_dsub+0x5be>
 800213a:	2140      	movs	r1, #64	@ 0x40
 800213c:	1a8a      	subs	r2, r1, r2
 800213e:	4094      	lsls	r4, r2
 8002140:	0025      	movs	r5, r4
 8002142:	4305      	orrs	r5, r0
 8002144:	9503      	str	r5, [sp, #12]
 8002146:	9d03      	ldr	r5, [sp, #12]
 8002148:	1e6a      	subs	r2, r5, #1
 800214a:	4195      	sbcs	r5, r2
 800214c:	433d      	orrs	r5, r7
 800214e:	e77d      	b.n	800204c <__aeabi_dsub+0x4c4>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x5ce>
 8002154:	e744      	b.n	8001fe0 <__aeabi_dsub+0x458>
 8002156:	2601      	movs	r6, #1
 8002158:	400e      	ands	r6, r1
 800215a:	4663      	mov	r3, ip
 800215c:	08d9      	lsrs	r1, r3, #3
 800215e:	9b02      	ldr	r3, [sp, #8]
 8002160:	075a      	lsls	r2, r3, #29
 8002162:	430a      	orrs	r2, r1
 8002164:	08dc      	lsrs	r4, r3, #3
 8002166:	e6f0      	b.n	8001f4a <__aeabi_dsub+0x3c2>
 8002168:	2a00      	cmp	r2, #0
 800216a:	d028      	beq.n	80021be <__aeabi_dsub+0x636>
 800216c:	4662      	mov	r2, ip
 800216e:	9f02      	ldr	r7, [sp, #8]
 8002170:	08c0      	lsrs	r0, r0, #3
 8002172:	433a      	orrs	r2, r7
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x5f0>
 8002176:	e6dc      	b.n	8001f32 <__aeabi_dsub+0x3aa>
 8002178:	0762      	lsls	r2, r4, #29
 800217a:	4310      	orrs	r0, r2
 800217c:	2280      	movs	r2, #128	@ 0x80
 800217e:	08e4      	lsrs	r4, r4, #3
 8002180:	0312      	lsls	r2, r2, #12
 8002182:	4214      	tst	r4, r2
 8002184:	d009      	beq.n	800219a <__aeabi_dsub+0x612>
 8002186:	08fd      	lsrs	r5, r7, #3
 8002188:	4215      	tst	r5, r2
 800218a:	d106      	bne.n	800219a <__aeabi_dsub+0x612>
 800218c:	4663      	mov	r3, ip
 800218e:	2601      	movs	r6, #1
 8002190:	002c      	movs	r4, r5
 8002192:	08d8      	lsrs	r0, r3, #3
 8002194:	077b      	lsls	r3, r7, #29
 8002196:	4318      	orrs	r0, r3
 8002198:	400e      	ands	r6, r1
 800219a:	0f42      	lsrs	r2, r0, #29
 800219c:	00c0      	lsls	r0, r0, #3
 800219e:	08c0      	lsrs	r0, r0, #3
 80021a0:	0752      	lsls	r2, r2, #29
 80021a2:	4302      	orrs	r2, r0
 80021a4:	e601      	b.n	8001daa <__aeabi_dsub+0x222>
 80021a6:	4663      	mov	r3, ip
 80021a8:	1a1d      	subs	r5, r3, r0
 80021aa:	45ac      	cmp	ip, r5
 80021ac:	4192      	sbcs	r2, r2
 80021ae:	9b02      	ldr	r3, [sp, #8]
 80021b0:	4252      	negs	r2, r2
 80021b2:	1b1c      	subs	r4, r3, r4
 80021b4:	000e      	movs	r6, r1
 80021b6:	4688      	mov	r8, r1
 80021b8:	2701      	movs	r7, #1
 80021ba:	1aa4      	subs	r4, r4, r2
 80021bc:	e546      	b.n	8001c4c <__aeabi_dsub+0xc4>
 80021be:	4663      	mov	r3, ip
 80021c0:	08d9      	lsrs	r1, r3, #3
 80021c2:	9b02      	ldr	r3, [sp, #8]
 80021c4:	075a      	lsls	r2, r3, #29
 80021c6:	430a      	orrs	r2, r1
 80021c8:	08dc      	lsrs	r4, r3, #3
 80021ca:	e5ee      	b.n	8001daa <__aeabi_dsub+0x222>
 80021cc:	4663      	mov	r3, ip
 80021ce:	9c02      	ldr	r4, [sp, #8]
 80021d0:	9303      	str	r3, [sp, #12]
 80021d2:	e6c7      	b.n	8001f64 <__aeabi_dsub+0x3dc>
 80021d4:	08c0      	lsrs	r0, r0, #3
 80021d6:	2a00      	cmp	r2, #0
 80021d8:	d100      	bne.n	80021dc <__aeabi_dsub+0x654>
 80021da:	e6aa      	b.n	8001f32 <__aeabi_dsub+0x3aa>
 80021dc:	0762      	lsls	r2, r4, #29
 80021de:	4310      	orrs	r0, r2
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	08e4      	lsrs	r4, r4, #3
 80021e4:	0312      	lsls	r2, r2, #12
 80021e6:	4214      	tst	r4, r2
 80021e8:	d0d7      	beq.n	800219a <__aeabi_dsub+0x612>
 80021ea:	9f02      	ldr	r7, [sp, #8]
 80021ec:	08fd      	lsrs	r5, r7, #3
 80021ee:	4215      	tst	r5, r2
 80021f0:	d1d3      	bne.n	800219a <__aeabi_dsub+0x612>
 80021f2:	4663      	mov	r3, ip
 80021f4:	2601      	movs	r6, #1
 80021f6:	08d8      	lsrs	r0, r3, #3
 80021f8:	077b      	lsls	r3, r7, #29
 80021fa:	002c      	movs	r4, r5
 80021fc:	4318      	orrs	r0, r3
 80021fe:	400e      	ands	r6, r1
 8002200:	e7cb      	b.n	800219a <__aeabi_dsub+0x612>
 8002202:	000a      	movs	r2, r1
 8002204:	0027      	movs	r7, r4
 8002206:	3a20      	subs	r2, #32
 8002208:	40d7      	lsrs	r7, r2
 800220a:	2920      	cmp	r1, #32
 800220c:	d005      	beq.n	800221a <__aeabi_dsub+0x692>
 800220e:	2240      	movs	r2, #64	@ 0x40
 8002210:	1a52      	subs	r2, r2, r1
 8002212:	4094      	lsls	r4, r2
 8002214:	0025      	movs	r5, r4
 8002216:	4305      	orrs	r5, r0
 8002218:	9503      	str	r5, [sp, #12]
 800221a:	9d03      	ldr	r5, [sp, #12]
 800221c:	1e6a      	subs	r2, r5, #1
 800221e:	4195      	sbcs	r5, r2
 8002220:	432f      	orrs	r7, r5
 8002222:	e610      	b.n	8001e46 <__aeabi_dsub+0x2be>
 8002224:	0014      	movs	r4, r2
 8002226:	2500      	movs	r5, #0
 8002228:	2200      	movs	r2, #0
 800222a:	e556      	b.n	8001cda <__aeabi_dsub+0x152>
 800222c:	9b02      	ldr	r3, [sp, #8]
 800222e:	4460      	add	r0, ip
 8002230:	4699      	mov	r9, r3
 8002232:	4560      	cmp	r0, ip
 8002234:	4192      	sbcs	r2, r2
 8002236:	444c      	add	r4, r9
 8002238:	4252      	negs	r2, r2
 800223a:	0005      	movs	r5, r0
 800223c:	18a4      	adds	r4, r4, r2
 800223e:	e74c      	b.n	80020da <__aeabi_dsub+0x552>
 8002240:	001a      	movs	r2, r3
 8002242:	001c      	movs	r4, r3
 8002244:	432a      	orrs	r2, r5
 8002246:	d000      	beq.n	800224a <__aeabi_dsub+0x6c2>
 8002248:	e6b3      	b.n	8001fb2 <__aeabi_dsub+0x42a>
 800224a:	e6c9      	b.n	8001fe0 <__aeabi_dsub+0x458>
 800224c:	2480      	movs	r4, #128	@ 0x80
 800224e:	2600      	movs	r6, #0
 8002250:	0324      	lsls	r4, r4, #12
 8002252:	e5ae      	b.n	8001db2 <__aeabi_dsub+0x22a>
 8002254:	2120      	movs	r1, #32
 8002256:	2500      	movs	r5, #0
 8002258:	1a09      	subs	r1, r1, r0
 800225a:	e517      	b.n	8001c8c <__aeabi_dsub+0x104>
 800225c:	2200      	movs	r2, #0
 800225e:	2500      	movs	r5, #0
 8002260:	4c0b      	ldr	r4, [pc, #44]	@ (8002290 <__aeabi_dsub+0x708>)
 8002262:	e53a      	b.n	8001cda <__aeabi_dsub+0x152>
 8002264:	2d00      	cmp	r5, #0
 8002266:	d100      	bne.n	800226a <__aeabi_dsub+0x6e2>
 8002268:	e5f6      	b.n	8001e58 <__aeabi_dsub+0x2d0>
 800226a:	464b      	mov	r3, r9
 800226c:	1bda      	subs	r2, r3, r7
 800226e:	4692      	mov	sl, r2
 8002270:	2f00      	cmp	r7, #0
 8002272:	d100      	bne.n	8002276 <__aeabi_dsub+0x6ee>
 8002274:	e66f      	b.n	8001f56 <__aeabi_dsub+0x3ce>
 8002276:	2a38      	cmp	r2, #56	@ 0x38
 8002278:	dc05      	bgt.n	8002286 <__aeabi_dsub+0x6fe>
 800227a:	2680      	movs	r6, #128	@ 0x80
 800227c:	0436      	lsls	r6, r6, #16
 800227e:	4334      	orrs	r4, r6
 8002280:	4688      	mov	r8, r1
 8002282:	000e      	movs	r6, r1
 8002284:	e6d1      	b.n	800202a <__aeabi_dsub+0x4a2>
 8002286:	4688      	mov	r8, r1
 8002288:	000e      	movs	r6, r1
 800228a:	2501      	movs	r5, #1
 800228c:	e6de      	b.n	800204c <__aeabi_dsub+0x4c4>
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	000007ff 	.word	0x000007ff
 8002294:	ff7fffff 	.word	0xff7fffff
 8002298:	000007fe 	.word	0x000007fe
 800229c:	2d00      	cmp	r5, #0
 800229e:	d100      	bne.n	80022a2 <__aeabi_dsub+0x71a>
 80022a0:	e668      	b.n	8001f74 <__aeabi_dsub+0x3ec>
 80022a2:	464b      	mov	r3, r9
 80022a4:	1bd9      	subs	r1, r3, r7
 80022a6:	2f00      	cmp	r7, #0
 80022a8:	d101      	bne.n	80022ae <__aeabi_dsub+0x726>
 80022aa:	468a      	mov	sl, r1
 80022ac:	e5a7      	b.n	8001dfe <__aeabi_dsub+0x276>
 80022ae:	2701      	movs	r7, #1
 80022b0:	2938      	cmp	r1, #56	@ 0x38
 80022b2:	dd00      	ble.n	80022b6 <__aeabi_dsub+0x72e>
 80022b4:	e5c7      	b.n	8001e46 <__aeabi_dsub+0x2be>
 80022b6:	2280      	movs	r2, #128	@ 0x80
 80022b8:	0412      	lsls	r2, r2, #16
 80022ba:	4314      	orrs	r4, r2
 80022bc:	e5af      	b.n	8001e1e <__aeabi_dsub+0x296>
 80022be:	46c0      	nop			@ (mov r8, r8)

080022c0 <__aeabi_d2iz>:
 80022c0:	000b      	movs	r3, r1
 80022c2:	0002      	movs	r2, r0
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	4d16      	ldr	r5, [pc, #88]	@ (8002320 <__aeabi_d2iz+0x60>)
 80022c8:	030c      	lsls	r4, r1, #12
 80022ca:	b082      	sub	sp, #8
 80022cc:	0049      	lsls	r1, r1, #1
 80022ce:	2000      	movs	r0, #0
 80022d0:	9200      	str	r2, [sp, #0]
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	0d49      	lsrs	r1, r1, #21
 80022d8:	0fde      	lsrs	r6, r3, #31
 80022da:	42a9      	cmp	r1, r5
 80022dc:	dd04      	ble.n	80022e8 <__aeabi_d2iz+0x28>
 80022de:	4811      	ldr	r0, [pc, #68]	@ (8002324 <__aeabi_d2iz+0x64>)
 80022e0:	4281      	cmp	r1, r0
 80022e2:	dd03      	ble.n	80022ec <__aeabi_d2iz+0x2c>
 80022e4:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <__aeabi_d2iz+0x68>)
 80022e6:	18f0      	adds	r0, r6, r3
 80022e8:	b002      	add	sp, #8
 80022ea:	bd70      	pop	{r4, r5, r6, pc}
 80022ec:	2080      	movs	r0, #128	@ 0x80
 80022ee:	0340      	lsls	r0, r0, #13
 80022f0:	4320      	orrs	r0, r4
 80022f2:	4c0e      	ldr	r4, [pc, #56]	@ (800232c <__aeabi_d2iz+0x6c>)
 80022f4:	1a64      	subs	r4, r4, r1
 80022f6:	2c1f      	cmp	r4, #31
 80022f8:	dd08      	ble.n	800230c <__aeabi_d2iz+0x4c>
 80022fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <__aeabi_d2iz+0x70>)
 80022fc:	1a5b      	subs	r3, r3, r1
 80022fe:	40d8      	lsrs	r0, r3
 8002300:	0003      	movs	r3, r0
 8002302:	4258      	negs	r0, r3
 8002304:	2e00      	cmp	r6, #0
 8002306:	d1ef      	bne.n	80022e8 <__aeabi_d2iz+0x28>
 8002308:	0018      	movs	r0, r3
 800230a:	e7ed      	b.n	80022e8 <__aeabi_d2iz+0x28>
 800230c:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <__aeabi_d2iz+0x74>)
 800230e:	9a00      	ldr	r2, [sp, #0]
 8002310:	469c      	mov	ip, r3
 8002312:	0003      	movs	r3, r0
 8002314:	4461      	add	r1, ip
 8002316:	408b      	lsls	r3, r1
 8002318:	40e2      	lsrs	r2, r4
 800231a:	4313      	orrs	r3, r2
 800231c:	e7f1      	b.n	8002302 <__aeabi_d2iz+0x42>
 800231e:	46c0      	nop			@ (mov r8, r8)
 8002320:	000003fe 	.word	0x000003fe
 8002324:	0000041d 	.word	0x0000041d
 8002328:	7fffffff 	.word	0x7fffffff
 800232c:	00000433 	.word	0x00000433
 8002330:	00000413 	.word	0x00000413
 8002334:	fffffbed 	.word	0xfffffbed

08002338 <__aeabi_i2d>:
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	2800      	cmp	r0, #0
 800233c:	d016      	beq.n	800236c <__aeabi_i2d+0x34>
 800233e:	17c3      	asrs	r3, r0, #31
 8002340:	18c5      	adds	r5, r0, r3
 8002342:	405d      	eors	r5, r3
 8002344:	0fc4      	lsrs	r4, r0, #31
 8002346:	0028      	movs	r0, r5
 8002348:	f000 f848 	bl	80023dc <__clzsi2>
 800234c:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <__aeabi_i2d+0x58>)
 800234e:	1a1b      	subs	r3, r3, r0
 8002350:	055b      	lsls	r3, r3, #21
 8002352:	0d5b      	lsrs	r3, r3, #21
 8002354:	280a      	cmp	r0, #10
 8002356:	dc14      	bgt.n	8002382 <__aeabi_i2d+0x4a>
 8002358:	0002      	movs	r2, r0
 800235a:	002e      	movs	r6, r5
 800235c:	3215      	adds	r2, #21
 800235e:	4096      	lsls	r6, r2
 8002360:	220b      	movs	r2, #11
 8002362:	1a12      	subs	r2, r2, r0
 8002364:	40d5      	lsrs	r5, r2
 8002366:	032d      	lsls	r5, r5, #12
 8002368:	0b2d      	lsrs	r5, r5, #12
 800236a:	e003      	b.n	8002374 <__aeabi_i2d+0x3c>
 800236c:	2400      	movs	r4, #0
 800236e:	2300      	movs	r3, #0
 8002370:	2500      	movs	r5, #0
 8002372:	2600      	movs	r6, #0
 8002374:	051b      	lsls	r3, r3, #20
 8002376:	432b      	orrs	r3, r5
 8002378:	07e4      	lsls	r4, r4, #31
 800237a:	4323      	orrs	r3, r4
 800237c:	0030      	movs	r0, r6
 800237e:	0019      	movs	r1, r3
 8002380:	bd70      	pop	{r4, r5, r6, pc}
 8002382:	380b      	subs	r0, #11
 8002384:	4085      	lsls	r5, r0
 8002386:	032d      	lsls	r5, r5, #12
 8002388:	2600      	movs	r6, #0
 800238a:	0b2d      	lsrs	r5, r5, #12
 800238c:	e7f2      	b.n	8002374 <__aeabi_i2d+0x3c>
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	0000041e 	.word	0x0000041e

08002394 <__aeabi_ui2d>:
 8002394:	b510      	push	{r4, lr}
 8002396:	1e04      	subs	r4, r0, #0
 8002398:	d010      	beq.n	80023bc <__aeabi_ui2d+0x28>
 800239a:	f000 f81f 	bl	80023dc <__clzsi2>
 800239e:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <__aeabi_ui2d+0x44>)
 80023a0:	1a1b      	subs	r3, r3, r0
 80023a2:	055b      	lsls	r3, r3, #21
 80023a4:	0d5b      	lsrs	r3, r3, #21
 80023a6:	280a      	cmp	r0, #10
 80023a8:	dc0f      	bgt.n	80023ca <__aeabi_ui2d+0x36>
 80023aa:	220b      	movs	r2, #11
 80023ac:	0021      	movs	r1, r4
 80023ae:	1a12      	subs	r2, r2, r0
 80023b0:	40d1      	lsrs	r1, r2
 80023b2:	3015      	adds	r0, #21
 80023b4:	030a      	lsls	r2, r1, #12
 80023b6:	4084      	lsls	r4, r0
 80023b8:	0b12      	lsrs	r2, r2, #12
 80023ba:	e001      	b.n	80023c0 <__aeabi_ui2d+0x2c>
 80023bc:	2300      	movs	r3, #0
 80023be:	2200      	movs	r2, #0
 80023c0:	051b      	lsls	r3, r3, #20
 80023c2:	4313      	orrs	r3, r2
 80023c4:	0020      	movs	r0, r4
 80023c6:	0019      	movs	r1, r3
 80023c8:	bd10      	pop	{r4, pc}
 80023ca:	0022      	movs	r2, r4
 80023cc:	380b      	subs	r0, #11
 80023ce:	4082      	lsls	r2, r0
 80023d0:	0312      	lsls	r2, r2, #12
 80023d2:	2400      	movs	r4, #0
 80023d4:	0b12      	lsrs	r2, r2, #12
 80023d6:	e7f3      	b.n	80023c0 <__aeabi_ui2d+0x2c>
 80023d8:	0000041e 	.word	0x0000041e

080023dc <__clzsi2>:
 80023dc:	211c      	movs	r1, #28
 80023de:	2301      	movs	r3, #1
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	4298      	cmp	r0, r3
 80023e4:	d301      	bcc.n	80023ea <__clzsi2+0xe>
 80023e6:	0c00      	lsrs	r0, r0, #16
 80023e8:	3910      	subs	r1, #16
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	4298      	cmp	r0, r3
 80023ee:	d301      	bcc.n	80023f4 <__clzsi2+0x18>
 80023f0:	0a00      	lsrs	r0, r0, #8
 80023f2:	3908      	subs	r1, #8
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	4298      	cmp	r0, r3
 80023f8:	d301      	bcc.n	80023fe <__clzsi2+0x22>
 80023fa:	0900      	lsrs	r0, r0, #4
 80023fc:	3904      	subs	r1, #4
 80023fe:	a202      	add	r2, pc, #8	@ (adr r2, 8002408 <__clzsi2+0x2c>)
 8002400:	5c10      	ldrb	r0, [r2, r0]
 8002402:	1840      	adds	r0, r0, r1
 8002404:	4770      	bx	lr
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	02020304 	.word	0x02020304
 800240c:	01010101 	.word	0x01010101
	...

08002418 <__clzdi2>:
 8002418:	b510      	push	{r4, lr}
 800241a:	2900      	cmp	r1, #0
 800241c:	d103      	bne.n	8002426 <__clzdi2+0xe>
 800241e:	f7ff ffdd 	bl	80023dc <__clzsi2>
 8002422:	3020      	adds	r0, #32
 8002424:	e002      	b.n	800242c <__clzdi2+0x14>
 8002426:	0008      	movs	r0, r1
 8002428:	f7ff ffd8 	bl	80023dc <__clzsi2>
 800242c:	bd10      	pop	{r4, pc}
 800242e:	46c0      	nop			@ (mov r8, r8)

08002430 <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b08b      	sub	sp, #44	@ 0x2c
 8002434:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002436:	2414      	movs	r4, #20
 8002438:	193b      	adds	r3, r7, r4
 800243a:	0018      	movs	r0, r3
 800243c:	2314      	movs	r3, #20
 800243e:	001a      	movs	r2, r3
 8002440:	2100      	movs	r1, #0
 8002442:	f008 f997 	bl	800a774 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002446:	4b6a      	ldr	r3, [pc, #424]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 8002448:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800244a:	4b69      	ldr	r3, [pc, #420]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 800244c:	2104      	movs	r1, #4
 800244e:	430a      	orrs	r2, r1
 8002450:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002452:	4b67      	ldr	r3, [pc, #412]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	2204      	movs	r2, #4
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800245e:	4b64      	ldr	r3, [pc, #400]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 8002460:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002462:	4b63      	ldr	r3, [pc, #396]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 8002464:	2120      	movs	r1, #32
 8002466:	430a      	orrs	r2, r1
 8002468:	64da      	str	r2, [r3, #76]	@ 0x4c
 800246a:	4b61      	ldr	r3, [pc, #388]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	2220      	movs	r2, #32
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	4b5e      	ldr	r3, [pc, #376]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 8002478:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800247a:	4b5d      	ldr	r3, [pc, #372]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 800247c:	2101      	movs	r1, #1
 800247e:	430a      	orrs	r2, r1
 8002480:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002482:	4b5b      	ldr	r3, [pc, #364]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	2201      	movs	r2, #1
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800248e:	4b58      	ldr	r3, [pc, #352]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 8002490:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002492:	4b57      	ldr	r3, [pc, #348]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 8002494:	2102      	movs	r1, #2
 8002496:	430a      	orrs	r2, r1
 8002498:	64da      	str	r2, [r3, #76]	@ 0x4c
 800249a:	4b55      	ldr	r3, [pc, #340]	@ (80025f0 <MX_GPIO_Init+0x1c0>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	2202      	movs	r2, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_CS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 80024a6:	2388      	movs	r3, #136	@ 0x88
 80024a8:	0059      	lsls	r1, r3, #1
 80024aa:	23a0      	movs	r3, #160	@ 0xa0
 80024ac:	05db      	lsls	r3, r3, #23
 80024ae:	2201      	movs	r2, #1
 80024b0:	0018      	movs	r0, r3
 80024b2:	f001 f9b3 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	22e0      	movs	r2, #224	@ 0xe0
 80024ba:	0212      	lsls	r2, r2, #8
 80024bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024be:	193b      	adds	r3, r7, r4
 80024c0:	2203      	movs	r2, #3
 80024c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	193b      	adds	r3, r7, r4
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ca:	193b      	adds	r3, r7, r4
 80024cc:	4a49      	ldr	r2, [pc, #292]	@ (80025f4 <MX_GPIO_Init+0x1c4>)
 80024ce:	0019      	movs	r1, r3
 80024d0:	0010      	movs	r0, r2
 80024d2:	f000 ff45 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80024d6:	193b      	adds	r3, r7, r4
 80024d8:	220f      	movs	r2, #15
 80024da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024dc:	193b      	adds	r3, r7, r4
 80024de:	2203      	movs	r2, #3
 80024e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	193b      	adds	r3, r7, r4
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024e8:	193b      	adds	r3, r7, r4
 80024ea:	4a43      	ldr	r2, [pc, #268]	@ (80025f8 <MX_GPIO_Init+0x1c8>)
 80024ec:	0019      	movs	r1, r3
 80024ee:	0010      	movs	r0, r2
 80024f0:	f000 ff36 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA10
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80024f4:	193b      	adds	r3, r7, r4
 80024f6:	4a41      	ldr	r2, [pc, #260]	@ (80025fc <MX_GPIO_Init+0x1cc>)
 80024f8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	2203      	movs	r2, #3
 80024fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	193b      	adds	r3, r7, r4
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	193a      	adds	r2, r7, r4
 8002508:	23a0      	movs	r3, #160	@ 0xa0
 800250a:	05db      	lsls	r3, r3, #23
 800250c:	0011      	movs	r1, r2
 800250e:	0018      	movs	r0, r3
 8002510:	f000 ff26 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_INT_Pin;
 8002514:	193b      	adds	r3, r7, r4
 8002516:	2208      	movs	r2, #8
 8002518:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800251a:	193b      	adds	r3, r7, r4
 800251c:	2288      	movs	r2, #136	@ 0x88
 800251e:	0352      	lsls	r2, r2, #13
 8002520:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	193b      	adds	r3, r7, r4
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LORA_INT_GPIO_Port, &GPIO_InitStruct);
 8002528:	193a      	adds	r2, r7, r4
 800252a:	23a0      	movs	r3, #160	@ 0xa0
 800252c:	05db      	lsls	r3, r3, #23
 800252e:	0011      	movs	r1, r2
 8002530:	0018      	movs	r0, r3
 8002532:	f000 ff15 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LORA_CS_Pin|LORA_RST_Pin;
 8002536:	0021      	movs	r1, r4
 8002538:	187b      	adds	r3, r7, r1
 800253a:	2288      	movs	r2, #136	@ 0x88
 800253c:	0052      	lsls	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002540:	000c      	movs	r4, r1
 8002542:	193b      	adds	r3, r7, r4
 8002544:	2201      	movs	r2, #1
 8002546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	193b      	adds	r3, r7, r4
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	193b      	adds	r3, r7, r4
 8002550:	2200      	movs	r2, #0
 8002552:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	193a      	adds	r2, r7, r4
 8002556:	23a0      	movs	r3, #160	@ 0xa0
 8002558:	05db      	lsls	r3, r3, #23
 800255a:	0011      	movs	r1, r2
 800255c:	0018      	movs	r0, r3
 800255e:	f000 feff 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002562:	193b      	adds	r3, r7, r4
 8002564:	4a26      	ldr	r2, [pc, #152]	@ (8002600 <MX_GPIO_Init+0x1d0>)
 8002566:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002568:	193b      	adds	r3, r7, r4
 800256a:	2203      	movs	r2, #3
 800256c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	193b      	adds	r3, r7, r4
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002574:	193b      	adds	r3, r7, r4
 8002576:	4a23      	ldr	r2, [pc, #140]	@ (8002604 <MX_GPIO_Init+0x1d4>)
 8002578:	0019      	movs	r1, r3
 800257a:	0010      	movs	r0, r2
 800257c:	f000 fef0 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8002580:	193b      	adds	r3, r7, r4
 8002582:	2280      	movs	r2, #128	@ 0x80
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002588:	193b      	adds	r3, r7, r4
 800258a:	2200      	movs	r2, #0
 800258c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	193b      	adds	r3, r7, r4
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002594:	193a      	adds	r2, r7, r4
 8002596:	23a0      	movs	r3, #160	@ 0xa0
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	0011      	movs	r1, r2
 800259c:	0018      	movs	r0, r3
 800259e:	f000 fedf 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_WAKE_Pin;
 80025a2:	0021      	movs	r1, r4
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	2280      	movs	r2, #128	@ 0x80
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	2284      	movs	r2, #132	@ 0x84
 80025b0:	0392      	lsls	r2, r2, #14
 80025b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_WAKE_GPIO_Port, &GPIO_InitStruct);
 80025ba:	187a      	adds	r2, r7, r1
 80025bc:	23a0      	movs	r3, #160	@ 0xa0
 80025be:	05db      	lsls	r3, r3, #23
 80025c0:	0011      	movs	r1, r2
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 fecc 	bl	8003360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	2006      	movs	r0, #6
 80025ce:	f000 fe7d 	bl	80032cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80025d2:	2006      	movs	r0, #6
 80025d4:	f000 fe9a 	bl	800330c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	2007      	movs	r0, #7
 80025de:	f000 fe75 	bl	80032cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80025e2:	2007      	movs	r0, #7
 80025e4:	f000 fe92 	bl	800330c <HAL_NVIC_EnableIRQ>

}
 80025e8:	46c0      	nop			@ (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b00b      	add	sp, #44	@ 0x2c
 80025ee:	bd90      	pop	{r4, r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	50000800 	.word	0x50000800
 80025f8:	50001400 	.word	0x50001400
 80025fc:	00009407 	.word	0x00009407
 8002600:	0000ff3f 	.word	0x0000ff3f
 8002604:	50000400 	.word	0x50000400

08002608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b08d      	sub	sp, #52	@ 0x34
 800260c:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800260e:	f000 fd14 	bl	800303a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002612:	f000 f981 	bl	8002918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002616:	f7ff ff0b 	bl	8002430 <MX_GPIO_Init>
  MX_SPI1_Init();
 800261a:	f000 fafd 	bl	8002c18 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800261e:	f000 fc33 	bl	8002e88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	log_monitor_init(tracelog);
 8002622:	4ba6      	ldr	r3, [pc, #664]	@ (80028bc <main+0x2b4>)
 8002624:	0018      	movs	r0, r3
 8002626:	f005 fc03 	bl	8007e30 <log_monitor_init>

	SX126xIoInit();
 800262a:	f007 fd4f 	bl	800a0cc <SX126xIoInit>
	uint16_t readSyncWord = 0;
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2200      	movs	r2, #0
 8002632:	801a      	strh	r2, [r3, #0]
	SX126xReadRegisters(REG_LR_SYNCWORD, (uint8_t *)&readSyncWord, 2);
 8002634:	1d39      	adds	r1, r7, #4
 8002636:	23e8      	movs	r3, #232	@ 0xe8
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	2202      	movs	r2, #2
 800263c:	0018      	movs	r0, r3
 800263e:	f007 fe93 	bl	800a368 <SX126xReadRegisters>
	LOG_INFO(TAG, "SyncWord = 0x%04x", readSyncWord);
 8002642:	4b9f      	ldr	r3, [pc, #636]	@ (80028c0 <main+0x2b8>)
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	001a      	movs	r2, r3
 800264c:	4b9d      	ldr	r3, [pc, #628]	@ (80028c4 <main+0x2bc>)
 800264e:	0019      	movs	r1, r3
 8002650:	f005 fbfc 	bl	8007e4c <LOG_INFO>


	RadioEvents.TxDone = OnTxDone;
 8002654:	4b9c      	ldr	r3, [pc, #624]	@ (80028c8 <main+0x2c0>)
 8002656:	4a9d      	ldr	r2, [pc, #628]	@ (80028cc <main+0x2c4>)
 8002658:	601a      	str	r2, [r3, #0]
	RadioEvents.RxDone = OnRxDone;
 800265a:	4b9b      	ldr	r3, [pc, #620]	@ (80028c8 <main+0x2c0>)
 800265c:	4a9c      	ldr	r2, [pc, #624]	@ (80028d0 <main+0x2c8>)
 800265e:	609a      	str	r2, [r3, #8]
	Radio.Init(&RadioEvents);
 8002660:	4b9c      	ldr	r3, [pc, #624]	@ (80028d4 <main+0x2cc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a98      	ldr	r2, [pc, #608]	@ (80028c8 <main+0x2c0>)
 8002666:	0010      	movs	r0, r2
 8002668:	4798      	blx	r3
	Radio.SetChannel(RF_FREQUENCY);
 800266a:	4b9a      	ldr	r3, [pc, #616]	@ (80028d4 <main+0x2cc>)
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	4a9a      	ldr	r2, [pc, #616]	@ (80028d8 <main+0x2d0>)
 8002670:	0010      	movs	r0, r2
 8002672:	4798      	blx	r3

	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8002674:	4b97      	ldr	r3, [pc, #604]	@ (80028d4 <main+0x2cc>)
 8002676:	6a1c      	ldr	r4, [r3, #32]
 8002678:	2300      	movs	r3, #0
 800267a:	9308      	str	r3, [sp, #32]
 800267c:	2300      	movs	r3, #0
 800267e:	9307      	str	r3, [sp, #28]
 8002680:	2300      	movs	r3, #0
 8002682:	9306      	str	r3, [sp, #24]
 8002684:	2300      	movs	r3, #0
 8002686:	9305      	str	r3, [sp, #20]
 8002688:	2301      	movs	r3, #1
 800268a:	9304      	str	r3, [sp, #16]
 800268c:	2300      	movs	r3, #0
 800268e:	9303      	str	r3, [sp, #12]
 8002690:	2308      	movs	r3, #8
 8002692:	9302      	str	r3, [sp, #8]
 8002694:	2301      	movs	r3, #1
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	2307      	movs	r3, #7
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2300      	movs	r3, #0
 800269e:	2200      	movs	r2, #0
 80026a0:	2116      	movs	r1, #22
 80026a2:	2001      	movs	r0, #1
 80026a4:	47a0      	blx	r4
					  LORA_SPREADING_FACTOR, LORA_CODINGRATE,
					  LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
					  true, 0, 0, LORA_IQ_INVERSION_ON, 0);
	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80026a6:	4b8b      	ldr	r3, [pc, #556]	@ (80028d4 <main+0x2cc>)
 80026a8:	69dc      	ldr	r4, [r3, #28]
 80026aa:	2301      	movs	r3, #1
 80026ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80026ae:	2300      	movs	r3, #0
 80026b0:	9308      	str	r3, [sp, #32]
 80026b2:	2300      	movs	r3, #0
 80026b4:	9307      	str	r3, [sp, #28]
 80026b6:	2300      	movs	r3, #0
 80026b8:	9306      	str	r3, [sp, #24]
 80026ba:	2301      	movs	r3, #1
 80026bc:	9305      	str	r3, [sp, #20]
 80026be:	2300      	movs	r3, #0
 80026c0:	9304      	str	r3, [sp, #16]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9303      	str	r3, [sp, #12]
 80026c6:	2300      	movs	r3, #0
 80026c8:	9302      	str	r3, [sp, #8]
 80026ca:	2308      	movs	r3, #8
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	2300      	movs	r3, #0
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2301      	movs	r3, #1
 80026d4:	2207      	movs	r2, #7
 80026d6:	2100      	movs	r1, #0
 80026d8:	2001      	movs	r0, #1
 80026da:	47a0      	blx	r4
					  LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
					  LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
					  0, true, 0, 0, LORA_IQ_INVERSION_ON, true);
	LOG_INFO(TAG, "Starting Gateway");
 80026dc:	4b78      	ldr	r3, [pc, #480]	@ (80028c0 <main+0x2b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a7e      	ldr	r2, [pc, #504]	@ (80028dc <main+0x2d4>)
 80026e2:	0011      	movs	r1, r2
 80026e4:	0018      	movs	r0, r3
 80026e6:	f005 fbb1 	bl	8007e4c <LOG_INFO>
	Radio.Rx(0);
 80026ea:	4b7a      	ldr	r3, [pc, #488]	@ (80028d4 <main+0x2cc>)
 80026ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ee:	2000      	movs	r0, #0
 80026f0:	4798      	blx	r3
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Radio.BgIrqProcess();
 80026f2:	4b78      	ldr	r3, [pc, #480]	@ (80028d4 <main+0x2cc>)
 80026f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026f6:	4798      	blx	r3

	  /// Button press
	  if(btn_press == 1){
 80026f8:	4b79      	ldr	r3, [pc, #484]	@ (80028e0 <main+0x2d8>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d135      	bne.n	800276e <main+0x166>
		  btn_press = 0;
 8002702:	4b77      	ldr	r3, [pc, #476]	@ (80028e0 <main+0x2d8>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
		  if(btn_acction == 1){
 8002708:	4b76      	ldr	r3, [pc, #472]	@ (80028e4 <main+0x2dc>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d118      	bne.n	8002744 <main+0x13c>
	  		  /// Send standby time if process was not started.
			  txpkt.deveui = ALL_DEVEUI;
 8002712:	4b75      	ldr	r3, [pc, #468]	@ (80028e8 <main+0x2e0>)
 8002714:	22ff      	movs	r2, #255	@ 0xff
 8002716:	701a      	strb	r2, [r3, #0]
			  txpkt.cmd = CMD_SET_STANDBY_TIME;
 8002718:	4b73      	ldr	r3, [pc, #460]	@ (80028e8 <main+0x2e0>)
 800271a:	2203      	movs	r2, #3
 800271c:	705a      	strb	r2, [r3, #1]
			  txpkt.value_len = 1;
 800271e:	4b72      	ldr	r3, [pc, #456]	@ (80028e8 <main+0x2e0>)
 8002720:	2201      	movs	r2, #1
 8002722:	709a      	strb	r2, [r3, #2]
			  txpkt.value[0] = 10;
 8002724:	4b70      	ldr	r3, [pc, #448]	@ (80028e8 <main+0x2e0>)
 8002726:	220a      	movs	r2, #10
 8002728:	70da      	strb	r2, [r3, #3]
			  txpkt.req_ack = 1;
 800272a:	4b6f      	ldr	r3, [pc, #444]	@ (80028e8 <main+0x2e0>)
 800272c:	2201      	movs	r2, #1
 800272e:	72da      	strb	r2, [r3, #11]
			  send_packet();
 8002730:	f000 f998 	bl	8002a64 <send_packet>
			  LOG_EVENT(TAG, "Sent standby time to all device.");
 8002734:	4b62      	ldr	r3, [pc, #392]	@ (80028c0 <main+0x2b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6c      	ldr	r2, [pc, #432]	@ (80028ec <main+0x2e4>)
 800273a:	0011      	movs	r1, r2
 800273c:	0018      	movs	r0, r3
 800273e:	f005 fc6f 	bl	8008020 <LOG_EVENT>
 8002742:	e014      	b.n	800276e <main+0x166>
		  }
		  else{
			  txpkt.deveui = SENSOR_DEVEUI;
 8002744:	4b68      	ldr	r3, [pc, #416]	@ (80028e8 <main+0x2e0>)
 8002746:	2274      	movs	r2, #116	@ 0x74
 8002748:	701a      	strb	r2, [r3, #0]
			  txpkt.cmd = CMD_STOP_SENSOR;
 800274a:	4b67      	ldr	r3, [pc, #412]	@ (80028e8 <main+0x2e0>)
 800274c:	2205      	movs	r2, #5
 800274e:	705a      	strb	r2, [r3, #1]
			  txpkt.value_len = 0;
 8002750:	4b65      	ldr	r3, [pc, #404]	@ (80028e8 <main+0x2e0>)
 8002752:	2200      	movs	r2, #0
 8002754:	709a      	strb	r2, [r3, #2]
			  txpkt.req_ack = 1;
 8002756:	4b64      	ldr	r3, [pc, #400]	@ (80028e8 <main+0x2e0>)
 8002758:	2201      	movs	r2, #1
 800275a:	72da      	strb	r2, [r3, #11]
			  send_packet();
 800275c:	f000 f982 	bl	8002a64 <send_packet>
			  LOG_EVENT(TAG, "Sent stop measure sensor to light-sound device.");
 8002760:	4b57      	ldr	r3, [pc, #348]	@ (80028c0 <main+0x2b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a62      	ldr	r2, [pc, #392]	@ (80028f0 <main+0x2e8>)
 8002766:	0011      	movs	r1, r2
 8002768:	0018      	movs	r0, r3
 800276a:	f005 fc59 	bl	8008020 <LOG_EVENT>
		  }
	  }

	  /// Check ACK timeout
	  if(txpkt.req_ack == 1 && txpkt.resp_ack == 0){
 800276e:	4b5e      	ldr	r3, [pc, #376]	@ (80028e8 <main+0x2e0>)
 8002770:	7adb      	ldrb	r3, [r3, #11]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d118      	bne.n	80027a8 <main+0x1a0>
 8002776:	4b5c      	ldr	r3, [pc, #368]	@ (80028e8 <main+0x2e0>)
 8002778:	7b1b      	ldrb	r3, [r3, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d114      	bne.n	80027a8 <main+0x1a0>
		  if(HAL_GetTick() - ack_timeout > 5000){
 800277e:	f000 fccd 	bl	800311c <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	4b5b      	ldr	r3, [pc, #364]	@ (80028f4 <main+0x2ec>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	4a5b      	ldr	r2, [pc, #364]	@ (80028f8 <main+0x2f0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d90b      	bls.n	80027a8 <main+0x1a0>
			  LOG_ERROR(TAG, "DevEUI 0x%02x not response ACK.", txpkt.deveui);
 8002790:	4b4b      	ldr	r3, [pc, #300]	@ (80028c0 <main+0x2b8>)
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	4b54      	ldr	r3, [pc, #336]	@ (80028e8 <main+0x2e0>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	001a      	movs	r2, r3
 800279a:	4b58      	ldr	r3, [pc, #352]	@ (80028fc <main+0x2f4>)
 800279c:	0019      	movs	r1, r3
 800279e:	f005 fbf1 	bl	8007f84 <LOG_ERROR>
			  txpkt.req_ack = 0;
 80027a2:	4b51      	ldr	r3, [pc, #324]	@ (80028e8 <main+0x2e0>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	72da      	strb	r2, [r3, #11]
		  }
	  }

	  /// Packet receive from device
	  if(rxpkt.recv == 1){
 80027a8:	4b55      	ldr	r3, [pc, #340]	@ (8002900 <main+0x2f8>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d1a0      	bne.n	80026f2 <main+0xea>
		  switch(rxpkt.cmd){
 80027b0:	4b53      	ldr	r3, [pc, #332]	@ (8002900 <main+0x2f8>)
 80027b2:	2247      	movs	r2, #71	@ 0x47
 80027b4:	5c9b      	ldrb	r3, [r3, r2]
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d044      	beq.n	8002844 <main+0x23c>
 80027ba:	dc4b      	bgt.n	8002854 <main+0x24c>
 80027bc:	2b02      	cmp	r3, #2
 80027be:	dc02      	bgt.n	80027c6 <main+0x1be>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	dc13      	bgt.n	80027ec <main+0x1e4>
		  	  break;
		  	  case CMD_STATUS_ENDCALLPOINT:
		  		  LOG_INFO(TAG, "CallPoint stopped motor.");
		  	  break;
		  	  default:
		  	  break;
 80027c4:	e046      	b.n	8002854 <main+0x24c>
		  switch(rxpkt.cmd){
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d144      	bne.n	8002854 <main+0x24c>
		  		  txpkt.req_ack = 0;
 80027ca:	4b47      	ldr	r3, [pc, #284]	@ (80028e8 <main+0x2e0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	72da      	strb	r2, [r3, #11]
		  		  txpkt.resp_ack = 1;
 80027d0:	4b45      	ldr	r3, [pc, #276]	@ (80028e8 <main+0x2e0>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	731a      	strb	r2, [r3, #12]
		  		  LOG_INFO(TAG, "DevEUI 0x%02x responsed ACK.", rxpkt.deveui);
 80027d6:	4b3a      	ldr	r3, [pc, #232]	@ (80028c0 <main+0x2b8>)
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	4b49      	ldr	r3, [pc, #292]	@ (8002900 <main+0x2f8>)
 80027dc:	2246      	movs	r2, #70	@ 0x46
 80027de:	5c9b      	ldrb	r3, [r3, r2]
 80027e0:	001a      	movs	r2, r3
 80027e2:	4b48      	ldr	r3, [pc, #288]	@ (8002904 <main+0x2fc>)
 80027e4:	0019      	movs	r1, r3
 80027e6:	f005 fb31 	bl	8007e4c <LOG_INFO>
			  break;
 80027ea:	e034      	b.n	8002856 <main+0x24e>
		  		  LOG_WARN(TAG, "DevEUI 0x%02x sent status %d param, payload:", rxpkt.deveui, rxpkt.value_len);
 80027ec:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <main+0x2b8>)
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	4b43      	ldr	r3, [pc, #268]	@ (8002900 <main+0x2f8>)
 80027f2:	2246      	movs	r2, #70	@ 0x46
 80027f4:	5c9b      	ldrb	r3, [r3, r2]
 80027f6:	001c      	movs	r4, r3
 80027f8:	4b41      	ldr	r3, [pc, #260]	@ (8002900 <main+0x2f8>)
 80027fa:	2248      	movs	r2, #72	@ 0x48
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	4942      	ldr	r1, [pc, #264]	@ (8002908 <main+0x300>)
 8002800:	0022      	movs	r2, r4
 8002802:	f005 fb71 	bl	8007ee8 <LOG_WARN>
		  		  for(uint8_t i=0; i<rxpkt.value_len; i++)
 8002806:	1dfb      	adds	r3, r7, #7
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e012      	b.n	8002834 <main+0x22c>
		  			LOG_INFO(TAG, "%d", rxpkt.value[i]);
 800280e:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <main+0x2b8>)
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	4a3a      	ldr	r2, [pc, #232]	@ (8002900 <main+0x2f8>)
 8002818:	2149      	movs	r1, #73	@ 0x49
 800281a:	18d3      	adds	r3, r2, r3
 800281c:	185b      	adds	r3, r3, r1
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	001a      	movs	r2, r3
 8002822:	4b3a      	ldr	r3, [pc, #232]	@ (800290c <main+0x304>)
 8002824:	0019      	movs	r1, r3
 8002826:	f005 fb11 	bl	8007e4c <LOG_INFO>
		  		  for(uint8_t i=0; i<rxpkt.value_len; i++)
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	1dfb      	adds	r3, r7, #7
 8002830:	3201      	adds	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	4b32      	ldr	r3, [pc, #200]	@ (8002900 <main+0x2f8>)
 8002836:	2248      	movs	r2, #72	@ 0x48
 8002838:	5c9b      	ldrb	r3, [r3, r2]
 800283a:	1dfa      	adds	r2, r7, #7
 800283c:	7812      	ldrb	r2, [r2, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d3e5      	bcc.n	800280e <main+0x206>
		  	  break;
 8002842:	e008      	b.n	8002856 <main+0x24e>
		  		  LOG_INFO(TAG, "CallPoint stopped motor.");
 8002844:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <main+0x2b8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a31      	ldr	r2, [pc, #196]	@ (8002910 <main+0x308>)
 800284a:	0011      	movs	r1, r2
 800284c:	0018      	movs	r0, r3
 800284e:	f005 fafd 	bl	8007e4c <LOG_INFO>
		  	  break;
 8002852:	e000      	b.n	8002856 <main+0x24e>
		  	  break;
 8002854:	46c0      	nop			@ (mov r8, r8)
		  }
		  /// Packet require ACK
		  if(rxpkt.req_ack == 1){
 8002856:	4b2a      	ldr	r3, [pc, #168]	@ (8002900 <main+0x2f8>)
 8002858:	2251      	movs	r2, #81	@ 0x51
 800285a:	5c9b      	ldrb	r3, [r3, r2]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d118      	bne.n	8002892 <main+0x28a>
			  txpkt.deveui = rxpkt.deveui;
 8002860:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <main+0x2f8>)
 8002862:	2246      	movs	r2, #70	@ 0x46
 8002864:	5c9a      	ldrb	r2, [r3, r2]
 8002866:	4b20      	ldr	r3, [pc, #128]	@ (80028e8 <main+0x2e0>)
 8002868:	701a      	strb	r2, [r3, #0]
			  txpkt.cmd = CMD_ACK;
 800286a:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <main+0x2e0>)
 800286c:	2204      	movs	r2, #4
 800286e:	705a      	strb	r2, [r3, #1]
			  txpkt.value_len = 0;
 8002870:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <main+0x2e0>)
 8002872:	2200      	movs	r2, #0
 8002874:	709a      	strb	r2, [r3, #2]
			  txpkt.req_ack = 0;
 8002876:	4b1c      	ldr	r3, [pc, #112]	@ (80028e8 <main+0x2e0>)
 8002878:	2200      	movs	r2, #0
 800287a:	72da      	strb	r2, [r3, #11]
			  send_packet();
 800287c:	f000 f8f2 	bl	8002a64 <send_packet>
			  LOG_EVENT(TAG, "Sent ACK to DevEUI 0x%02x.", txpkt.deveui);
 8002880:	4b0f      	ldr	r3, [pc, #60]	@ (80028c0 <main+0x2b8>)
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	4b18      	ldr	r3, [pc, #96]	@ (80028e8 <main+0x2e0>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	001a      	movs	r2, r3
 800288a:	4b22      	ldr	r3, [pc, #136]	@ (8002914 <main+0x30c>)
 800288c:	0019      	movs	r1, r3
 800288e:	f005 fbc7 	bl	8008020 <LOG_EVENT>
		  }

		  rxpkt.recv = 0;
 8002892:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <main+0x2f8>)
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
		  rxpkt.recvlen = 0;
 8002898:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <main+0x2f8>)
 800289a:	2245      	movs	r2, #69	@ 0x45
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]
		  rxpkt.deveui = 0;
 80028a0:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <main+0x2f8>)
 80028a2:	2246      	movs	r2, #70	@ 0x46
 80028a4:	2100      	movs	r1, #0
 80028a6:	5499      	strb	r1, [r3, r2]
		  rxpkt.cmd = CMD_UNKNOWN;
 80028a8:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <main+0x2f8>)
 80028aa:	2247      	movs	r2, #71	@ 0x47
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]
		  rxpkt.value_len = 0;
 80028b0:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <main+0x2f8>)
 80028b2:	2248      	movs	r2, #72	@ 0x48
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]
	  Radio.BgIrqProcess();
 80028b8:	e71b      	b.n	80026f2 <main+0xea>
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	08002a39 	.word	0x08002a39
 80028c0:	20000000 	.word	0x20000000
 80028c4:	0800b228 	.word	0x0800b228
 80028c8:	200001c8 	.word	0x200001c8
 80028cc:	08002b01 	.word	0x08002b01
 80028d0:	08002b19 	.word	0x08002b19
 80028d4:	0800b824 	.word	0x0800b824
 80028d8:	3703dcc0 	.word	0x3703dcc0
 80028dc:	0800b23c 	.word	0x0800b23c
 80028e0:	200001e8 	.word	0x200001e8
 80028e4:	200001e9 	.word	0x200001e9
 80028e8:	20000004 	.word	0x20000004
 80028ec:	0800b250 	.word	0x0800b250
 80028f0:	0800b274 	.word	0x0800b274
 80028f4:	20000240 	.word	0x20000240
 80028f8:	00001388 	.word	0x00001388
 80028fc:	0800b2a4 	.word	0x0800b2a4
 8002900:	200001ec 	.word	0x200001ec
 8002904:	0800b2c4 	.word	0x0800b2c4
 8002908:	0800b2e4 	.word	0x0800b2e4
 800290c:	0800b314 	.word	0x0800b314
 8002910:	0800b318 	.word	0x0800b318
 8002914:	0800b334 	.word	0x0800b334

08002918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b097      	sub	sp, #92	@ 0x5c
 800291c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800291e:	2410      	movs	r4, #16
 8002920:	193b      	adds	r3, r7, r4
 8002922:	0018      	movs	r0, r3
 8002924:	2348      	movs	r3, #72	@ 0x48
 8002926:	001a      	movs	r2, r3
 8002928:	2100      	movs	r1, #0
 800292a:	f007 ff23 	bl	800a774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800292e:	003b      	movs	r3, r7
 8002930:	0018      	movs	r0, r3
 8002932:	2310      	movs	r3, #16
 8002934:	001a      	movs	r2, r3
 8002936:	2100      	movs	r1, #0
 8002938:	f007 ff1c 	bl	800a774 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	0018      	movs	r0, r3
 8002942:	f000 ffcf 	bl	80038e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002946:	0021      	movs	r1, r4
 8002948:	187b      	adds	r3, r7, r1
 800294a:	2210      	movs	r2, #16
 800294c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800294e:	187b      	adds	r3, r7, r1
 8002950:	2201      	movs	r2, #1
 8002952:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002954:	187b      	adds	r3, r7, r1
 8002956:	2200      	movs	r2, #0
 8002958:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800295a:	187b      	adds	r3, r7, r1
 800295c:	22b0      	movs	r2, #176	@ 0xb0
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002960:	187b      	adds	r3, r7, r1
 8002962:	2200      	movs	r2, #0
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002966:	187b      	adds	r3, r7, r1
 8002968:	0018      	movs	r0, r3
 800296a:	f001 f839 	bl	80039e0 <HAL_RCC_OscConfig>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d001      	beq.n	8002976 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002972:	f000 f941 	bl	8002bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002976:	003b      	movs	r3, r7
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800297c:	003b      	movs	r3, r7
 800297e:	2200      	movs	r2, #0
 8002980:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002982:	003b      	movs	r3, r7
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002988:	003b      	movs	r3, r7
 800298a:	2200      	movs	r2, #0
 800298c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800298e:	003b      	movs	r3, r7
 8002990:	2101      	movs	r1, #1
 8002992:	0018      	movs	r0, r3
 8002994:	f001 fda8 	bl	80044e8 <HAL_RCC_ClockConfig>
 8002998:	1e03      	subs	r3, r0, #0
 800299a:	d001      	beq.n	80029a0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800299c:	f000 f92c 	bl	8002bf8 <Error_Handler>
  }
}
 80029a0:	46c0      	nop			@ (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b017      	add	sp, #92	@ 0x5c
 80029a6:	bd90      	pop	{r4, r7, pc}

080029a8 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	0002      	movs	r2, r0
 80029b0:	1dbb      	adds	r3, r7, #6
 80029b2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == LORA_INT_Pin){
 80029b4:	1dbb      	adds	r3, r7, #6
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d101      	bne.n	80029c0 <HAL_GPIO_EXTI_Rising_Callback+0x18>
		extern void RadioOnDioIrq(void);
		RadioOnDioIrq();
 80029bc:	f006 fb22 	bl	8009004 <RadioOnDioIrq>
	}
}
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	0002      	movs	r2, r0
 80029d0:	1dbb      	adds	r3, r7, #6
 80029d2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BTN_WAKE_Pin){
 80029d4:	1dbb      	adds	r3, r7, #6
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	@ 0x80
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	429a      	cmp	r2, r3
 80029de:	d120      	bne.n	8002a22 <HAL_GPIO_EXTI_Falling_Callback+0x5a>
		for(uint32_t i=0; i<120000; i++) __NOP(); //10ms
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e003      	b.n	80029ee <HAL_GPIO_EXTI_Falling_Callback+0x26>
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3301      	adds	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a0e      	ldr	r2, [pc, #56]	@ (8002a2c <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d9f7      	bls.n	80029e6 <HAL_GPIO_EXTI_Falling_Callback+0x1e>
		if(HAL_GPIO_ReadPin(BTN_WAKE_GPIO_Port, BTN_WAKE_Pin) == GPIO_PIN_RESET){
 80029f6:	2380      	movs	r3, #128	@ 0x80
 80029f8:	011a      	lsls	r2, r3, #4
 80029fa:	23a0      	movs	r3, #160	@ 0xa0
 80029fc:	05db      	lsls	r3, r3, #23
 80029fe:	0011      	movs	r1, r2
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 fedf 	bl	80037c4 <HAL_GPIO_ReadPin>
 8002a06:	1e03      	subs	r3, r0, #0
 8002a08:	d10b      	bne.n	8002a22 <HAL_GPIO_EXTI_Falling_Callback+0x5a>
			btn_press = 1;
 8002a0a:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
			btn_acction = !btn_acction;
 8002a10:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	425a      	negs	r2, r3
 8002a18:	4153      	adcs	r3, r2
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8002a20:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b004      	add	sp, #16
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	0001d4bf 	.word	0x0001d4bf
 8002a30:	200001e8 	.word	0x200001e8
 8002a34:	200001e9 	.word	0x200001e9

08002a38 <tracelog>:




static void tracelog(char *str){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), 1000);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f7fd fb60 	bl	8000108 <strlen>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	23fa      	movs	r3, #250	@ 0xfa
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4803      	ldr	r0, [pc, #12]	@ (8002a60 <tracelog+0x28>)
 8002a54:	f004 f9aa 	bl	8006dac <HAL_UART_Transmit>
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200002ac 	.word	0x200002ac

08002a64 <send_packet>:

void send_packet(void){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b092      	sub	sp, #72	@ 0x48
 8002a68:	af00      	add	r7, sp, #0
	uint8_t txbuffer[BUFFER_SIZE];

	txpkt.resp_ack = 0;
 8002a6a:	4b22      	ldr	r3, [pc, #136]	@ (8002af4 <send_packet+0x90>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	731a      	strb	r2, [r3, #12]
	txbuffer[0] = txpkt.deveui;
 8002a70:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <send_packet+0x90>)
 8002a72:	781a      	ldrb	r2, [r3, #0]
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	701a      	strb	r2, [r3, #0]
	txbuffer[1] = (uint8_t)txpkt.cmd;
 8002a78:	4b1e      	ldr	r3, [pc, #120]	@ (8002af4 <send_packet+0x90>)
 8002a7a:	785a      	ldrb	r2, [r3, #1]
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	705a      	strb	r2, [r3, #1]
	txbuffer[2] = txpkt.req_ack;
 8002a80:	4b1c      	ldr	r3, [pc, #112]	@ (8002af4 <send_packet+0x90>)
 8002a82:	7ada      	ldrb	r2, [r3, #11]
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	709a      	strb	r2, [r3, #2]
	txbuffer[3] = txpkt.value_len;
 8002a88:	4b1a      	ldr	r3, [pc, #104]	@ (8002af4 <send_packet+0x90>)
 8002a8a:	789a      	ldrb	r2, [r3, #2]
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	70da      	strb	r2, [r3, #3]
	for(uint8_t i=0; i<txpkt.value_len; i++)
 8002a90:	2347      	movs	r3, #71	@ 0x47
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e00f      	b.n	8002aba <send_packet+0x56>
		txbuffer[4+i] = txpkt.value[i];
 8002a9a:	2047      	movs	r0, #71	@ 0x47
 8002a9c:	183b      	adds	r3, r7, r0
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	183b      	adds	r3, r7, r0
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	4913      	ldr	r1, [pc, #76]	@ (8002af4 <send_packet+0x90>)
 8002aa8:	188a      	adds	r2, r1, r2
 8002aaa:	78d1      	ldrb	r1, [r2, #3]
 8002aac:	1d3a      	adds	r2, r7, #4
 8002aae:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<txpkt.value_len; i++)
 8002ab0:	183b      	adds	r3, r7, r0
 8002ab2:	781a      	ldrb	r2, [r3, #0]
 8002ab4:	183b      	adds	r3, r7, r0
 8002ab6:	3201      	adds	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <send_packet+0x90>)
 8002abc:	789b      	ldrb	r3, [r3, #2]
 8002abe:	2247      	movs	r2, #71	@ 0x47
 8002ac0:	18ba      	adds	r2, r7, r2
 8002ac2:	7812      	ldrb	r2, [r2, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d3e8      	bcc.n	8002a9a <send_packet+0x36>

	if(txpkt.req_ack == 1) ack_timeout = HAL_GetTick();
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <send_packet+0x90>)
 8002aca:	7adb      	ldrb	r3, [r3, #11]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d104      	bne.n	8002ada <send_packet+0x76>
 8002ad0:	f000 fb24 	bl	800311c <HAL_GetTick>
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <send_packet+0x94>)
 8002ad8:	601a      	str	r2, [r3, #0]

	Radio.Send(txbuffer, 4+txpkt.value_len);
 8002ada:	4b08      	ldr	r3, [pc, #32]	@ (8002afc <send_packet+0x98>)
 8002adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ade:	4a05      	ldr	r2, [pc, #20]	@ (8002af4 <send_packet+0x90>)
 8002ae0:	7892      	ldrb	r2, [r2, #2]
 8002ae2:	3204      	adds	r2, #4
 8002ae4:	b2d1      	uxtb	r1, r2
 8002ae6:	1d3a      	adds	r2, r7, #4
 8002ae8:	0010      	movs	r0, r2
 8002aea:	4798      	blx	r3
}
 8002aec:	46c0      	nop			@ (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b012      	add	sp, #72	@ 0x48
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000004 	.word	0x20000004
 8002af8:	20000240 	.word	0x20000240
 8002afc:	0800b824 	.word	0x0800b824

08002b00 <OnTxDone>:


void OnTxDone(void){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	Radio.Rx(0);
 8002b04:	4b03      	ldr	r3, [pc, #12]	@ (8002b14 <OnTxDone+0x14>)
 8002b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b08:	2000      	movs	r0, #0
 8002b0a:	4798      	blx	r3
}
 8002b0c:	46c0      	nop			@ (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	0800b824 	.word	0x0800b824

08002b18 <OnRxDone>:

/**@brief Function to be executed on Radio Rx Done event
 */
void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr){
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	000c      	movs	r4, r1
 8002b22:	0010      	movs	r0, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	250a      	movs	r5, #10
 8002b28:	197b      	adds	r3, r7, r5
 8002b2a:	1c22      	adds	r2, r4, #0
 8002b2c:	801a      	strh	r2, [r3, #0]
 8002b2e:	2408      	movs	r4, #8
 8002b30:	193b      	adds	r3, r7, r4
 8002b32:	1c02      	adds	r2, r0, #0
 8002b34:	801a      	strh	r2, [r3, #0]
 8002b36:	1dfb      	adds	r3, r7, #7
 8002b38:	1c0a      	adds	r2, r1, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
	rxpkt.recv = 1;
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]

	rxpkt.rssi = rssi;
 8002b42:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b44:	193a      	adds	r2, r7, r4
 8002b46:	8812      	ldrh	r2, [r2, #0]
 8002b48:	805a      	strh	r2, [r3, #2]
	rxpkt.snr = snr;
 8002b4a:	4b29      	ldr	r3, [pc, #164]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b4c:	1dfa      	adds	r2, r7, #7
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	711a      	strb	r2, [r3, #4]

	rxpkt.recvlen = size;
 8002b52:	197b      	adds	r3, r7, r5
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	b2d9      	uxtb	r1, r3
 8002b58:	4b25      	ldr	r3, [pc, #148]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b5a:	2245      	movs	r2, #69	@ 0x45
 8002b5c:	5499      	strb	r1, [r3, r2]
	memset(rxpkt.recvbuffer, 0, BUFFER_SIZE);
 8002b5e:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <OnRxDone+0xdc>)
 8002b60:	2240      	movs	r2, #64	@ 0x40
 8002b62:	2100      	movs	r1, #0
 8002b64:	0018      	movs	r0, r3
 8002b66:	f007 fe05 	bl	800a774 <memset>
	memcpy(rxpkt.recvbuffer, payload, rxpkt.recvlen);
 8002b6a:	4b21      	ldr	r3, [pc, #132]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b6c:	2245      	movs	r2, #69	@ 0x45
 8002b6e:	5c9b      	ldrb	r3, [r3, r2]
 8002b70:	001a      	movs	r2, r3
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <OnRxDone+0xdc>)
 8002b76:	0018      	movs	r0, r3
 8002b78:	f007 fe42 	bl	800a800 <memcpy>

	rxpkt.deveui = rxpkt.recvbuffer[0];
 8002b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b7e:	7959      	ldrb	r1, [r3, #5]
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b82:	2246      	movs	r2, #70	@ 0x46
 8002b84:	5499      	strb	r1, [r3, r2]
	rxpkt.cmd = (lora_pktcmd_t)rxpkt.recvbuffer[1];
 8002b86:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b88:	7999      	ldrb	r1, [r3, #6]
 8002b8a:	4b19      	ldr	r3, [pc, #100]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b8c:	2247      	movs	r2, #71	@ 0x47
 8002b8e:	5499      	strb	r1, [r3, r2]
	rxpkt.req_ack = rxpkt.recvbuffer[2];
 8002b90:	4b17      	ldr	r3, [pc, #92]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b92:	79d9      	ldrb	r1, [r3, #7]
 8002b94:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b96:	2251      	movs	r2, #81	@ 0x51
 8002b98:	5499      	strb	r1, [r3, r2]
	rxpkt.value_len = rxpkt.recvbuffer[3];
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <OnRxDone+0xd8>)
 8002b9c:	7a19      	ldrb	r1, [r3, #8]
 8002b9e:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <OnRxDone+0xd8>)
 8002ba0:	2248      	movs	r2, #72	@ 0x48
 8002ba2:	5499      	strb	r1, [r3, r2]
	for(uint8_t i=0; i<rxpkt.value_len; i++)
 8002ba4:	2317      	movs	r3, #23
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e013      	b.n	8002bd6 <OnRxDone+0xbe>
		rxpkt.value[i] = rxpkt.recvbuffer[i+4];
 8002bae:	2417      	movs	r4, #23
 8002bb0:	193b      	adds	r3, r7, r4
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	1d1a      	adds	r2, r3, #4
 8002bb6:	193b      	adds	r3, r7, r4
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	490d      	ldr	r1, [pc, #52]	@ (8002bf0 <OnRxDone+0xd8>)
 8002bbc:	188a      	adds	r2, r1, r2
 8002bbe:	7950      	ldrb	r0, [r2, #5]
 8002bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf0 <OnRxDone+0xd8>)
 8002bc2:	2149      	movs	r1, #73	@ 0x49
 8002bc4:	18d3      	adds	r3, r2, r3
 8002bc6:	185b      	adds	r3, r3, r1
 8002bc8:	1c02      	adds	r2, r0, #0
 8002bca:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<rxpkt.value_len; i++)
 8002bcc:	193b      	adds	r3, r7, r4
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	193b      	adds	r3, r7, r4
 8002bd2:	3201      	adds	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <OnRxDone+0xd8>)
 8002bd8:	2248      	movs	r2, #72	@ 0x48
 8002bda:	5c9b      	ldrb	r3, [r3, r2]
 8002bdc:	2217      	movs	r2, #23
 8002bde:	18ba      	adds	r2, r7, r2
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d3e3      	bcc.n	8002bae <OnRxDone+0x96>
}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	46c0      	nop			@ (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b006      	add	sp, #24
 8002bee:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf0:	200001ec 	.word	0x200001ec
 8002bf4:	200001f1 	.word	0x200001f1

08002bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfc:	b672      	cpsid	i
}
 8002bfe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c00:	46c0      	nop			@ (mov r8, r8)
 8002c02:	e7fd      	b.n	8002c00 <Error_Handler+0x8>

08002c04 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b002      	add	sp, #8
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c90 <MX_SPI1_Init+0x78>)
 8002c20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c22:	4b1a      	ldr	r3, [pc, #104]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c24:	2282      	movs	r2, #130	@ 0x82
 8002c26:	0052      	lsls	r2, r2, #1
 8002c28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c2a:	4b18      	ldr	r3, [pc, #96]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c30:	4b16      	ldr	r3, [pc, #88]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c32:	22e0      	movs	r2, #224	@ 0xe0
 8002c34:	00d2      	lsls	r2, r2, #3
 8002c36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c38:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c3e:	4b13      	ldr	r3, [pc, #76]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c46:	2280      	movs	r2, #128	@ 0x80
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c4e:	2208      	movs	r2, #8
 8002c50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c52:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c66:	2207      	movs	r2, #7
 8002c68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c6a:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c70:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c72:	2208      	movs	r2, #8
 8002c74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c76:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <MX_SPI1_Init+0x74>)
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f002 ff35 	bl	8005ae8 <HAL_SPI_Init>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d001      	beq.n	8002c86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c82:	f7ff ffb9 	bl	8002bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000244 	.word	0x20000244
 8002c90:	40013000 	.word	0x40013000

08002c94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b08b      	sub	sp, #44	@ 0x2c
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	2414      	movs	r4, #20
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	2314      	movs	r3, #20
 8002ca4:	001a      	movs	r2, r3
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	f007 fd64 	bl	800a774 <memset>
  if(spiHandle->Instance==SPI1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d20 <HAL_SPI_MspInit+0x8c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d130      	bne.n	8002d18 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d24 <HAL_SPI_MspInit+0x90>)
 8002cb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cba:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <HAL_SPI_MspInit+0x90>)
 8002cbc:	2180      	movs	r1, #128	@ 0x80
 8002cbe:	0149      	lsls	r1, r1, #5
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	661a      	str	r2, [r3, #96]	@ 0x60
 8002cc4:	4b17      	ldr	r3, [pc, #92]	@ (8002d24 <HAL_SPI_MspInit+0x90>)
 8002cc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cc8:	2380      	movs	r3, #128	@ 0x80
 8002cca:	015b      	lsls	r3, r3, #5
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <HAL_SPI_MspInit+0x90>)
 8002cd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002cd6:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <HAL_SPI_MspInit+0x90>)
 8002cd8:	2101      	movs	r1, #1
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <HAL_SPI_MspInit+0x90>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cea:	0021      	movs	r1, r4
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	22e0      	movs	r2, #224	@ 0xe0
 8002cf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	187b      	adds	r3, r7, r1
 8002d00:	2200      	movs	r2, #0
 8002d02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d04:	187b      	adds	r3, r7, r1
 8002d06:	2205      	movs	r2, #5
 8002d08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	187a      	adds	r2, r7, r1
 8002d0c:	23a0      	movs	r3, #160	@ 0xa0
 8002d0e:	05db      	lsls	r3, r3, #23
 8002d10:	0011      	movs	r1, r2
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 fb24 	bl	8003360 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b00b      	add	sp, #44	@ 0x2c
 8002d1e:	bd90      	pop	{r4, r7, pc}
 8002d20:	40013000 	.word	0x40013000
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d6c <HAL_MspInit+0x44>)
 8002d30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d32:	4b0e      	ldr	r3, [pc, #56]	@ (8002d6c <HAL_MspInit+0x44>)
 8002d34:	2180      	movs	r1, #128	@ 0x80
 8002d36:	0549      	lsls	r1, r1, #21
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <HAL_MspInit+0x44>)
 8002d3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d40:	2380      	movs	r3, #128	@ 0x80
 8002d42:	055b      	lsls	r3, r3, #21
 8002d44:	4013      	ands	r3, r2
 8002d46:	607b      	str	r3, [r7, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	4b08      	ldr	r3, [pc, #32]	@ (8002d6c <HAL_MspInit+0x44>)
 8002d4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d4e:	4b07      	ldr	r3, [pc, #28]	@ (8002d6c <HAL_MspInit+0x44>)
 8002d50:	2101      	movs	r1, #1
 8002d52:	430a      	orrs	r2, r1
 8002d54:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d56:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <HAL_MspInit+0x44>)
 8002d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b002      	add	sp, #8
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	40021000 	.word	0x40021000

08002d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d74:	46c0      	nop			@ (mov r8, r8)
 8002d76:	e7fd      	b.n	8002d74 <NMI_Handler+0x4>

08002d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7c:	46c0      	nop			@ (mov r8, r8)
 8002d7e:	e7fd      	b.n	8002d7c <HardFault_Handler+0x4>

08002d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d84:	46c0      	nop			@ (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d98:	f000 f9b0 	bl	80030fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9c:	46c0      	nop			@ (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_INT_Pin);
 8002da6:	2008      	movs	r0, #8
 8002da8:	f000 fd72 	bl	8003890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002dac:	46c0      	nop			@ (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_WAKE_Pin);
 8002db6:	2380      	movs	r3, #128	@ 0x80
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 fd68 	bl	8003890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd0:	4a14      	ldr	r2, [pc, #80]	@ (8002e24 <_sbrk+0x5c>)
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <_sbrk+0x60>)
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ddc:	4b13      	ldr	r3, [pc, #76]	@ (8002e2c <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <_sbrk+0x64>)
 8002de6:	4a12      	ldr	r2, [pc, #72]	@ (8002e30 <_sbrk+0x68>)
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dea:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <_sbrk+0x64>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	18d3      	adds	r3, r2, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d207      	bcs.n	8002e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002df8:	f007 fcd6 	bl	800a7a8 <__errno>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	220c      	movs	r2, #12
 8002e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	425b      	negs	r3, r3
 8002e06:	e009      	b.n	8002e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e08:	4b08      	ldr	r3, [pc, #32]	@ (8002e2c <_sbrk+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e0e:	4b07      	ldr	r3, [pc, #28]	@ (8002e2c <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	18d2      	adds	r2, r2, r3
 8002e16:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <_sbrk+0x64>)
 8002e18:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b006      	add	sp, #24
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20002000 	.word	0x20002000
 8002e28:	00000400 	.word	0x00000400
 8002e2c:	200002a8 	.word	0x200002a8
 8002e30:	20000620 	.word	0x20000620

08002e34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e38:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <SystemInit+0x4c>)
 8002e3a:	2280      	movs	r2, #128	@ 0x80
 8002e3c:	0512      	lsls	r2, r2, #20
 8002e3e:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8002e40:	4a10      	ldr	r2, [pc, #64]	@ (8002e84 <SystemInit+0x50>)
 8002e42:	2380      	movs	r3, #128	@ 0x80
 8002e44:	58d2      	ldr	r2, [r2, r3]
 8002e46:	2380      	movs	r3, #128	@ 0x80
 8002e48:	025b      	lsls	r3, r3, #9
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	2380      	movs	r3, #128	@ 0x80
 8002e4e:	025b      	lsls	r3, r3, #9
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d112      	bne.n	8002e7a <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 8002e54:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <SystemInit+0x50>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	22ff      	movs	r2, #255	@ 0xff
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2bcc      	cmp	r3, #204	@ 0xcc
 8002e5e:	d00c      	beq.n	8002e7a <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 8002e60:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <SystemInit+0x50>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	22ff      	movs	r2, #255	@ 0xff
 8002e66:	4013      	ands	r3, r2
 8002e68:	2baa      	cmp	r3, #170	@ 0xaa
 8002e6a:	d006      	beq.n	8002e7a <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8002e6c:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <SystemInit+0x50>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <SystemInit+0x50>)
 8002e72:	2180      	movs	r1, #128	@ 0x80
 8002e74:	02c9      	lsls	r1, r1, #11
 8002e76:	430a      	orrs	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	e000ed00 	.word	0xe000ed00
 8002e84:	40022000 	.word	0x40022000

08002e88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e8c:	4b23      	ldr	r3, [pc, #140]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002e8e:	4a24      	ldr	r2, [pc, #144]	@ (8002f20 <MX_USART1_UART_Init+0x98>)
 8002e90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e92:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002e94:	22e1      	movs	r2, #225	@ 0xe1
 8002e96:	0252      	lsls	r2, r2, #9
 8002e98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9a:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eac:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002eae:	220c      	movs	r2, #12
 8002eb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb8:	4b18      	ldr	r3, [pc, #96]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ebe:	4b17      	ldr	r3, [pc, #92]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ec4:	4b15      	ldr	r3, [pc, #84]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eca:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ed0:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f003 feb6 	bl	8006c44 <HAL_UART_Init>
 8002ed8:	1e03      	subs	r3, r0, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002edc:	f7ff fe8c 	bl	8002bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f004 fe31 	bl	8007b4c <HAL_UARTEx_SetTxFifoThreshold>
 8002eea:	1e03      	subs	r3, r0, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002eee:	f7ff fe83 	bl	8002bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f004 feb0 	bl	8007c5c <HAL_UARTEx_SetRxFifoThreshold>
 8002efc:	1e03      	subs	r3, r0, #0
 8002efe:	d001      	beq.n	8002f04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f00:	f7ff fe7a 	bl	8002bf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <MX_USART1_UART_Init+0x94>)
 8002f06:	0018      	movs	r0, r3
 8002f08:	f004 fdc0 	bl	8007a8c <HAL_UARTEx_DisableFifoMode>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f10:	f7ff fe72 	bl	8002bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	200002ac 	.word	0x200002ac
 8002f20:	40013800 	.word	0x40013800

08002f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b099      	sub	sp, #100	@ 0x64
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	234c      	movs	r3, #76	@ 0x4c
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	0018      	movs	r0, r3
 8002f32:	2314      	movs	r3, #20
 8002f34:	001a      	movs	r2, r3
 8002f36:	2100      	movs	r1, #0
 8002f38:	f007 fc1c 	bl	800a774 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f3c:	2414      	movs	r4, #20
 8002f3e:	193b      	adds	r3, r7, r4
 8002f40:	0018      	movs	r0, r3
 8002f42:	2338      	movs	r3, #56	@ 0x38
 8002f44:	001a      	movs	r2, r3
 8002f46:	2100      	movs	r1, #0
 8002f48:	f007 fc14 	bl	800a774 <memset>
  if(uartHandle->Instance==USART1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a22      	ldr	r2, [pc, #136]	@ (8002fdc <HAL_UART_MspInit+0xb8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d13d      	bne.n	8002fd2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f56:	193b      	adds	r3, r7, r4
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f5c:	193b      	adds	r3, r7, r4
 8002f5e:	2200      	movs	r2, #0
 8002f60:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f62:	193b      	adds	r3, r7, r4
 8002f64:	0018      	movs	r0, r3
 8002f66:	f001 fd83 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 8002f6a:	1e03      	subs	r3, r0, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f6e:	f7ff fe43 	bl	8002bf8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f72:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <HAL_UART_MspInit+0xbc>)
 8002f74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f76:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe0 <HAL_UART_MspInit+0xbc>)
 8002f78:	2180      	movs	r1, #128	@ 0x80
 8002f7a:	01c9      	lsls	r1, r1, #7
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f80:	4b17      	ldr	r3, [pc, #92]	@ (8002fe0 <HAL_UART_MspInit+0xbc>)
 8002f82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f84:	2380      	movs	r3, #128	@ 0x80
 8002f86:	01db      	lsls	r3, r3, #7
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8e:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <HAL_UART_MspInit+0xbc>)
 8002f90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f92:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <HAL_UART_MspInit+0xbc>)
 8002f94:	2102      	movs	r1, #2
 8002f96:	430a      	orrs	r2, r1
 8002f98:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f9a:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <HAL_UART_MspInit+0xbc>)
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fa6:	214c      	movs	r1, #76	@ 0x4c
 8002fa8:	187b      	adds	r3, r7, r1
 8002faa:	22c0      	movs	r2, #192	@ 0xc0
 8002fac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	187b      	adds	r3, r7, r1
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	4a06      	ldr	r2, [pc, #24]	@ (8002fe4 <HAL_UART_MspInit+0xc0>)
 8002fca:	0019      	movs	r1, r3
 8002fcc:	0010      	movs	r0, r2
 8002fce:	f000 f9c7 	bl	8003360 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b019      	add	sp, #100	@ 0x64
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	40013800 	.word	0x40013800
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	50000400 	.word	0x50000400

08002fe8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fe8:	480d      	ldr	r0, [pc, #52]	@ (8003020 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fec:	f7ff ff22 	bl	8002e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff0:	480c      	ldr	r0, [pc, #48]	@ (8003024 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ff2:	490d      	ldr	r1, [pc, #52]	@ (8003028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800302c <LoopForever+0xe>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff8:	e002      	b.n	8003000 <LoopCopyDataInit>

08002ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ffe:	3304      	adds	r3, #4

08003000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003004:	d3f9      	bcc.n	8002ffa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003006:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003008:	4c0a      	ldr	r4, [pc, #40]	@ (8003034 <LoopForever+0x16>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800300c:	e001      	b.n	8003012 <LoopFillZerobss>

0800300e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800300e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003010:	3204      	adds	r2, #4

08003012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003014:	d3fb      	bcc.n	800300e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003016:	f007 fbcd 	bl	800a7b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800301a:	f7ff faf5 	bl	8002608 <main>

0800301e <LoopForever>:

LoopForever:
  b LoopForever
 800301e:	e7fe      	b.n	800301e <LoopForever>
  ldr   r0, =_estack
 8003020:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003028:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 800302c:	0800b9b0 	.word	0x0800b9b0
  ldr r2, =_sbss
 8003030:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8003034:	2000061c 	.word	0x2000061c

08003038 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003038:	e7fe      	b.n	8003038 <ADC_COMP1_IRQHandler>

0800303a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003046:	2003      	movs	r0, #3
 8003048:	f000 f80e 	bl	8003068 <HAL_InitTick>
 800304c:	1e03      	subs	r3, r0, #0
 800304e:	d003      	beq.n	8003058 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003050:	1dfb      	adds	r3, r7, #7
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e001      	b.n	800305c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003058:	f7ff fe66 	bl	8002d28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800305c:	1dfb      	adds	r3, r7, #7
 800305e:	781b      	ldrb	r3, [r3, #0]
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003070:	230f      	movs	r3, #15
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8003078:	4b1d      	ldr	r3, [pc, #116]	@ (80030f0 <HAL_InitTick+0x88>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d02b      	beq.n	80030d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003080:	4b1c      	ldr	r3, [pc, #112]	@ (80030f4 <HAL_InitTick+0x8c>)
 8003082:	681c      	ldr	r4, [r3, #0]
 8003084:	4b1a      	ldr	r3, [pc, #104]	@ (80030f0 <HAL_InitTick+0x88>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0019      	movs	r1, r3
 800308a:	23fa      	movs	r3, #250	@ 0xfa
 800308c:	0098      	lsls	r0, r3, #2
 800308e:	f7fd f84d 	bl	800012c <__udivsi3>
 8003092:	0003      	movs	r3, r0
 8003094:	0019      	movs	r1, r3
 8003096:	0020      	movs	r0, r4
 8003098:	f7fd f848 	bl	800012c <__udivsi3>
 800309c:	0003      	movs	r3, r0
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 f950 	bl	8003344 <HAL_SYSTICK_Config>
 80030a4:	1e03      	subs	r3, r0, #0
 80030a6:	d112      	bne.n	80030ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d80a      	bhi.n	80030c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	2301      	movs	r3, #1
 80030b2:	425b      	negs	r3, r3
 80030b4:	2200      	movs	r2, #0
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 f908 	bl	80032cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030bc:	4b0e      	ldr	r3, [pc, #56]	@ (80030f8 <HAL_InitTick+0x90>)
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e00d      	b.n	80030e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80030c4:	230f      	movs	r3, #15
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	e008      	b.n	80030e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030ce:	230f      	movs	r3, #15
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e003      	b.n	80030e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030d8:	230f      	movs	r3, #15
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80030e0:	230f      	movs	r3, #15
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	781b      	ldrb	r3, [r3, #0]
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b005      	add	sp, #20
 80030ec:	bd90      	pop	{r4, r7, pc}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	2000001c 	.word	0x2000001c
 80030f4:	20000014 	.word	0x20000014
 80030f8:	20000018 	.word	0x20000018

080030fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003100:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <HAL_IncTick+0x18>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b04      	ldr	r3, [pc, #16]	@ (8003118 <HAL_IncTick+0x1c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	18d2      	adds	r2, r2, r3
 800310a:	4b02      	ldr	r3, [pc, #8]	@ (8003114 <HAL_IncTick+0x18>)
 800310c:	601a      	str	r2, [r3, #0]
}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000340 	.word	0x20000340
 8003118:	2000001c 	.word	0x2000001c

0800311c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  return uwTick;
 8003120:	4b02      	ldr	r3, [pc, #8]	@ (800312c <HAL_GetTick+0x10>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	0018      	movs	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	20000340 	.word	0x20000340

08003130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003138:	f7ff fff0 	bl	800311c <HAL_GetTick>
 800313c:	0003      	movs	r3, r0
 800313e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3301      	adds	r3, #1
 8003148:	d004      	beq.n	8003154 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800314a:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <HAL_Delay+0x40>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	18d3      	adds	r3, r2, r3
 8003152:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003154:	46c0      	nop			@ (mov r8, r8)
 8003156:	f7ff ffe1 	bl	800311c <HAL_GetTick>
 800315a:	0002      	movs	r2, r0
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	429a      	cmp	r2, r3
 8003164:	d8f7      	bhi.n	8003156 <HAL_Delay+0x26>
  {
  }
}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	46c0      	nop			@ (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b004      	add	sp, #16
 800316e:	bd80      	pop	{r7, pc}
 8003170:	2000001c 	.word	0x2000001c

08003174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	0002      	movs	r2, r0
 800317c:	1dfb      	adds	r3, r7, #7
 800317e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b7f      	cmp	r3, #127	@ 0x7f
 8003186:	d809      	bhi.n	800319c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	001a      	movs	r2, r3
 800318e:	231f      	movs	r3, #31
 8003190:	401a      	ands	r2, r3
 8003192:	4b04      	ldr	r3, [pc, #16]	@ (80031a4 <__NVIC_EnableIRQ+0x30>)
 8003194:	2101      	movs	r1, #1
 8003196:	4091      	lsls	r1, r2
 8003198:	000a      	movs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	0002      	movs	r2, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	1dfb      	adds	r3, r7, #7
 80031b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031b6:	1dfb      	adds	r3, r7, #7
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80031bc:	d828      	bhi.n	8003210 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031be:	4a2f      	ldr	r2, [pc, #188]	@ (800327c <__NVIC_SetPriority+0xd4>)
 80031c0:	1dfb      	adds	r3, r7, #7
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b25b      	sxtb	r3, r3
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	33c0      	adds	r3, #192	@ 0xc0
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	589b      	ldr	r3, [r3, r2]
 80031ce:	1dfa      	adds	r2, r7, #7
 80031d0:	7812      	ldrb	r2, [r2, #0]
 80031d2:	0011      	movs	r1, r2
 80031d4:	2203      	movs	r2, #3
 80031d6:	400a      	ands	r2, r1
 80031d8:	00d2      	lsls	r2, r2, #3
 80031da:	21ff      	movs	r1, #255	@ 0xff
 80031dc:	4091      	lsls	r1, r2
 80031de:	000a      	movs	r2, r1
 80031e0:	43d2      	mvns	r2, r2
 80031e2:	401a      	ands	r2, r3
 80031e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	019b      	lsls	r3, r3, #6
 80031ea:	22ff      	movs	r2, #255	@ 0xff
 80031ec:	401a      	ands	r2, r3
 80031ee:	1dfb      	adds	r3, r7, #7
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	0018      	movs	r0, r3
 80031f4:	2303      	movs	r3, #3
 80031f6:	4003      	ands	r3, r0
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031fc:	481f      	ldr	r0, [pc, #124]	@ (800327c <__NVIC_SetPriority+0xd4>)
 80031fe:	1dfb      	adds	r3, r7, #7
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b25b      	sxtb	r3, r3
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	430a      	orrs	r2, r1
 8003208:	33c0      	adds	r3, #192	@ 0xc0
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800320e:	e031      	b.n	8003274 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003210:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <__NVIC_SetPriority+0xd8>)
 8003212:	1dfb      	adds	r3, r7, #7
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	0019      	movs	r1, r3
 8003218:	230f      	movs	r3, #15
 800321a:	400b      	ands	r3, r1
 800321c:	3b08      	subs	r3, #8
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	3306      	adds	r3, #6
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	18d3      	adds	r3, r2, r3
 8003226:	3304      	adds	r3, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1dfa      	adds	r2, r7, #7
 800322c:	7812      	ldrb	r2, [r2, #0]
 800322e:	0011      	movs	r1, r2
 8003230:	2203      	movs	r2, #3
 8003232:	400a      	ands	r2, r1
 8003234:	00d2      	lsls	r2, r2, #3
 8003236:	21ff      	movs	r1, #255	@ 0xff
 8003238:	4091      	lsls	r1, r2
 800323a:	000a      	movs	r2, r1
 800323c:	43d2      	mvns	r2, r2
 800323e:	401a      	ands	r2, r3
 8003240:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	019b      	lsls	r3, r3, #6
 8003246:	22ff      	movs	r2, #255	@ 0xff
 8003248:	401a      	ands	r2, r3
 800324a:	1dfb      	adds	r3, r7, #7
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	0018      	movs	r0, r3
 8003250:	2303      	movs	r3, #3
 8003252:	4003      	ands	r3, r0
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003258:	4809      	ldr	r0, [pc, #36]	@ (8003280 <__NVIC_SetPriority+0xd8>)
 800325a:	1dfb      	adds	r3, r7, #7
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	001c      	movs	r4, r3
 8003260:	230f      	movs	r3, #15
 8003262:	4023      	ands	r3, r4
 8003264:	3b08      	subs	r3, #8
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	430a      	orrs	r2, r1
 800326a:	3306      	adds	r3, #6
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	18c3      	adds	r3, r0, r3
 8003270:	3304      	adds	r3, #4
 8003272:	601a      	str	r2, [r3, #0]
}
 8003274:	46c0      	nop			@ (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b003      	add	sp, #12
 800327a:	bd90      	pop	{r4, r7, pc}
 800327c:	e000e100 	.word	0xe000e100
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	1e5a      	subs	r2, r3, #1
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	045b      	lsls	r3, r3, #17
 8003294:	429a      	cmp	r2, r3
 8003296:	d301      	bcc.n	800329c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003298:	2301      	movs	r3, #1
 800329a:	e010      	b.n	80032be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800329c:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <SysTick_Config+0x44>)
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	3a01      	subs	r2, #1
 80032a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032a4:	2301      	movs	r3, #1
 80032a6:	425b      	negs	r3, r3
 80032a8:	2103      	movs	r1, #3
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7ff ff7c 	bl	80031a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b0:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <SysTick_Config+0x44>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032b6:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <SysTick_Config+0x44>)
 80032b8:	2207      	movs	r2, #7
 80032ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032bc:	2300      	movs	r3, #0
}
 80032be:	0018      	movs	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b002      	add	sp, #8
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	e000e010 	.word	0xe000e010

080032cc <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	230f      	movs	r3, #15
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	1c02      	adds	r2, r0, #0
 80032dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d904      	bls.n	80032ee <HAL_NVIC_SetPriority+0x22>
 80032e4:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <HAL_NVIC_SetPriority+0x3c>)
 80032e6:	2187      	movs	r1, #135	@ 0x87
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fc8b 	bl	8002c04 <assert_failed>
  NVIC_SetPriority(IRQn, PreemptPriority);
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	230f      	movs	r3, #15
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	b25b      	sxtb	r3, r3
 80032f8:	0011      	movs	r1, r2
 80032fa:	0018      	movs	r0, r3
 80032fc:	f7ff ff54 	bl	80031a8 <__NVIC_SetPriority>
}
 8003300:	46c0      	nop			@ (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}
 8003308:	0800b350 	.word	0x0800b350

0800330c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	0002      	movs	r2, r0
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b7f      	cmp	r3, #127	@ 0x7f
 800331e:	d904      	bls.n	800332a <HAL_NVIC_EnableIRQ+0x1e>
 8003320:	4b07      	ldr	r3, [pc, #28]	@ (8003340 <HAL_NVIC_EnableIRQ+0x34>)
 8003322:	2196      	movs	r1, #150	@ 0x96
 8003324:	0018      	movs	r0, r3
 8003326:	f7ff fc6d 	bl	8002c04 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800332a:	1dfb      	adds	r3, r7, #7
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b25b      	sxtb	r3, r3
 8003330:	0018      	movs	r0, r3
 8003332:	f7ff ff1f 	bl	8003174 <__NVIC_EnableIRQ>
}
 8003336:	46c0      	nop			@ (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	b002      	add	sp, #8
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	0800b350 	.word	0x0800b350

08003344 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	0018      	movs	r0, r3
 8003350:	f7ff ff98 	bl	8003284 <SysTick_Config>
 8003354:	0003      	movs	r3, r0
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b002      	add	sp, #8
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	23a0      	movs	r3, #160	@ 0xa0
 8003372:	05db      	lsls	r3, r3, #23
 8003374:	429a      	cmp	r2, r3
 8003376:	d014      	beq.n	80033a2 <HAL_GPIO_Init+0x42>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4acf      	ldr	r2, [pc, #828]	@ (80036b8 <HAL_GPIO_Init+0x358>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d010      	beq.n	80033a2 <HAL_GPIO_Init+0x42>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4ace      	ldr	r2, [pc, #824]	@ (80036bc <HAL_GPIO_Init+0x35c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00c      	beq.n	80033a2 <HAL_GPIO_Init+0x42>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4acd      	ldr	r2, [pc, #820]	@ (80036c0 <HAL_GPIO_Init+0x360>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d008      	beq.n	80033a2 <HAL_GPIO_Init+0x42>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4acc      	ldr	r2, [pc, #816]	@ (80036c4 <HAL_GPIO_Init+0x364>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <HAL_GPIO_Init+0x42>
 8003398:	4bcb      	ldr	r3, [pc, #812]	@ (80036c8 <HAL_GPIO_Init+0x368>)
 800339a:	21a3      	movs	r1, #163	@ 0xa3
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff fc31 	bl	8002c04 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	041b      	lsls	r3, r3, #16
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	d005      	beq.n	80033b8 <HAL_GPIO_Init+0x58>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2380      	movs	r3, #128	@ 0x80
 80033b2:	025b      	lsls	r3, r3, #9
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d304      	bcc.n	80033c2 <HAL_GPIO_Init+0x62>
 80033b8:	4bc3      	ldr	r3, [pc, #780]	@ (80036c8 <HAL_GPIO_Init+0x368>)
 80033ba:	21a4      	movs	r1, #164	@ 0xa4
 80033bc:	0018      	movs	r0, r3
 80033be:	f7ff fc21 	bl	8002c04 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d100      	bne.n	80033cc <HAL_GPIO_Init+0x6c>
 80033ca:	e1ec      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d100      	bne.n	80033d6 <HAL_GPIO_Init+0x76>
 80033d4:	e1e7      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b11      	cmp	r3, #17
 80033dc:	d100      	bne.n	80033e0 <HAL_GPIO_Init+0x80>
 80033de:	e1e2      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d100      	bne.n	80033ea <HAL_GPIO_Init+0x8a>
 80033e8:	e1dd      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b12      	cmp	r3, #18
 80033f0:	d100      	bne.n	80033f4 <HAL_GPIO_Init+0x94>
 80033f2:	e1d8      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	2388      	movs	r3, #136	@ 0x88
 80033fa:	035b      	lsls	r3, r3, #13
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d100      	bne.n	8003402 <HAL_GPIO_Init+0xa2>
 8003400:	e1d1      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	2384      	movs	r3, #132	@ 0x84
 8003408:	039b      	lsls	r3, r3, #14
 800340a:	429a      	cmp	r2, r3
 800340c:	d100      	bne.n	8003410 <HAL_GPIO_Init+0xb0>
 800340e:	e1ca      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	23c4      	movs	r3, #196	@ 0xc4
 8003416:	039b      	lsls	r3, r3, #14
 8003418:	429a      	cmp	r2, r3
 800341a:	d100      	bne.n	800341e <HAL_GPIO_Init+0xbe>
 800341c:	e1c3      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	2390      	movs	r3, #144	@ 0x90
 8003424:	035b      	lsls	r3, r3, #13
 8003426:	429a      	cmp	r2, r3
 8003428:	d100      	bne.n	800342c <HAL_GPIO_Init+0xcc>
 800342a:	e1bc      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	2388      	movs	r3, #136	@ 0x88
 8003432:	039b      	lsls	r3, r3, #14
 8003434:	429a      	cmp	r2, r3
 8003436:	d100      	bne.n	800343a <HAL_GPIO_Init+0xda>
 8003438:	e1b5      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	23c8      	movs	r3, #200	@ 0xc8
 8003440:	039b      	lsls	r3, r3, #14
 8003442:	429a      	cmp	r2, r3
 8003444:	d100      	bne.n	8003448 <HAL_GPIO_Init+0xe8>
 8003446:	e1ae      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d100      	bne.n	8003452 <HAL_GPIO_Init+0xf2>
 8003450:	e1a9      	b.n	80037a6 <HAL_GPIO_Init+0x446>
 8003452:	4b9d      	ldr	r3, [pc, #628]	@ (80036c8 <HAL_GPIO_Init+0x368>)
 8003454:	21a5      	movs	r1, #165	@ 0xa5
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff fbd4 	bl	8002c04 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800345c:	e1a3      	b.n	80037a6 <HAL_GPIO_Init+0x446>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2101      	movs	r1, #1
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4091      	lsls	r1, r2
 8003468:	000a      	movs	r2, r1
 800346a:	4013      	ands	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d100      	bne.n	8003476 <HAL_GPIO_Init+0x116>
 8003474:	e194      	b.n	80037a0 <HAL_GPIO_Init+0x440>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2203      	movs	r2, #3
 800347c:	4013      	ands	r3, r2
 800347e:	2b01      	cmp	r3, #1
 8003480:	d005      	beq.n	800348e <HAL_GPIO_Init+0x12e>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2203      	movs	r2, #3
 8003488:	4013      	ands	r3, r2
 800348a:	2b02      	cmp	r3, #2
 800348c:	d145      	bne.n	800351a <HAL_GPIO_Init+0x1ba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d010      	beq.n	80034b8 <HAL_GPIO_Init+0x158>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d00c      	beq.n	80034b8 <HAL_GPIO_Init+0x158>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d008      	beq.n	80034b8 <HAL_GPIO_Init+0x158>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d004      	beq.n	80034b8 <HAL_GPIO_Init+0x158>
 80034ae:	4b86      	ldr	r3, [pc, #536]	@ (80036c8 <HAL_GPIO_Init+0x368>)
 80034b0:	21b4      	movs	r1, #180	@ 0xb4
 80034b2:	0018      	movs	r0, r3
 80034b4:	f7ff fba6 	bl	8002c04 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	409a      	lsls	r2, r3
 80034c6:	0013      	movs	r3, r2
 80034c8:	43da      	mvns	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	409a      	lsls	r2, r3
 80034da:	0013      	movs	r3, r2
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ee:	2201      	movs	r2, #1
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	409a      	lsls	r2, r3
 80034f4:	0013      	movs	r3, r2
 80034f6:	43da      	mvns	r2, r3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	2201      	movs	r2, #1
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
 800350c:	0013      	movs	r3, r2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2203      	movs	r2, #3
 8003520:	4013      	ands	r3, r2
 8003522:	2b03      	cmp	r3, #3
 8003524:	d028      	beq.n	8003578 <HAL_GPIO_Init+0x218>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00c      	beq.n	8003548 <HAL_GPIO_Init+0x1e8>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d008      	beq.n	8003548 <HAL_GPIO_Init+0x1e8>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d004      	beq.n	8003548 <HAL_GPIO_Init+0x1e8>
 800353e:	4b62      	ldr	r3, [pc, #392]	@ (80036c8 <HAL_GPIO_Init+0x368>)
 8003540:	21c6      	movs	r1, #198	@ 0xc6
 8003542:	0018      	movs	r0, r3
 8003544:	f7ff fb5e 	bl	8002c04 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	409a      	lsls	r2, r3
 8003556:	0013      	movs	r3, r2
 8003558:	43da      	mvns	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	409a      	lsls	r2, r3
 800356a:	0013      	movs	r3, r2
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2203      	movs	r2, #3
 800357e:	4013      	ands	r3, r2
 8003580:	2b02      	cmp	r3, #2
 8003582:	d146      	bne.n	8003612 <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	23a0      	movs	r3, #160	@ 0xa0
 8003588:	05db      	lsls	r3, r3, #23
 800358a:	429a      	cmp	r2, r3
 800358c:	d014      	beq.n	80035b8 <HAL_GPIO_Init+0x258>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a49      	ldr	r2, [pc, #292]	@ (80036b8 <HAL_GPIO_Init+0x358>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d010      	beq.n	80035b8 <HAL_GPIO_Init+0x258>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a48      	ldr	r2, [pc, #288]	@ (80036bc <HAL_GPIO_Init+0x35c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00c      	beq.n	80035b8 <HAL_GPIO_Init+0x258>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a47      	ldr	r2, [pc, #284]	@ (80036c0 <HAL_GPIO_Init+0x360>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d008      	beq.n	80035b8 <HAL_GPIO_Init+0x258>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a46      	ldr	r2, [pc, #280]	@ (80036c4 <HAL_GPIO_Init+0x364>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_GPIO_Init+0x258>
 80035ae:	4b46      	ldr	r3, [pc, #280]	@ (80036c8 <HAL_GPIO_Init+0x368>)
 80035b0:	21d3      	movs	r1, #211	@ 0xd3
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7ff fb26 	bl	8002c04 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b0f      	cmp	r3, #15
 80035be:	d904      	bls.n	80035ca <HAL_GPIO_Init+0x26a>
 80035c0:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <HAL_GPIO_Init+0x368>)
 80035c2:	21d4      	movs	r1, #212	@ 0xd4
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7ff fb1d 	bl	8002c04 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	08da      	lsrs	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3208      	adds	r2, #8
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	58d3      	ldr	r3, [r2, r3]
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2207      	movs	r2, #7
 80035dc:	4013      	ands	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	220f      	movs	r2, #15
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	43da      	mvns	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2107      	movs	r1, #7
 80035f6:	400b      	ands	r3, r1
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	409a      	lsls	r2, r3
 80035fc:	0013      	movs	r3, r2
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	08da      	lsrs	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3208      	adds	r2, #8
 800360c:	0092      	lsls	r2, r2, #2
 800360e:	6939      	ldr	r1, [r7, #16]
 8003610:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	2203      	movs	r2, #3
 800361e:	409a      	lsls	r2, r3
 8003620:	0013      	movs	r3, r2
 8003622:	43da      	mvns	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2203      	movs	r2, #3
 8003630:	401a      	ands	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	0013      	movs	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	23c0      	movs	r3, #192	@ 0xc0
 800364c:	029b      	lsls	r3, r3, #10
 800364e:	4013      	ands	r3, r2
 8003650:	d100      	bne.n	8003654 <HAL_GPIO_Init+0x2f4>
 8003652:	e0a5      	b.n	80037a0 <HAL_GPIO_Init+0x440>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003654:	4a1d      	ldr	r2, [pc, #116]	@ (80036cc <HAL_GPIO_Init+0x36c>)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	089b      	lsrs	r3, r3, #2
 800365a:	3318      	adds	r3, #24
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	589b      	ldr	r3, [r3, r2]
 8003660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2203      	movs	r2, #3
 8003666:	4013      	ands	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	220f      	movs	r2, #15
 800366c:	409a      	lsls	r2, r3
 800366e:	0013      	movs	r3, r2
 8003670:	43da      	mvns	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	23a0      	movs	r3, #160	@ 0xa0
 800367c:	05db      	lsls	r3, r3, #23
 800367e:	429a      	cmp	r2, r3
 8003680:	d026      	beq.n	80036d0 <HAL_GPIO_Init+0x370>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a0c      	ldr	r2, [pc, #48]	@ (80036b8 <HAL_GPIO_Init+0x358>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_GPIO_Init+0x352>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a0b      	ldr	r2, [pc, #44]	@ (80036bc <HAL_GPIO_Init+0x35c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00d      	beq.n	80036ae <HAL_GPIO_Init+0x34e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a0a      	ldr	r2, [pc, #40]	@ (80036c0 <HAL_GPIO_Init+0x360>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <HAL_GPIO_Init+0x34a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a09      	ldr	r2, [pc, #36]	@ (80036c4 <HAL_GPIO_Init+0x364>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_GPIO_Init+0x346>
 80036a2:	2305      	movs	r3, #5
 80036a4:	e015      	b.n	80036d2 <HAL_GPIO_Init+0x372>
 80036a6:	2306      	movs	r3, #6
 80036a8:	e013      	b.n	80036d2 <HAL_GPIO_Init+0x372>
 80036aa:	2303      	movs	r3, #3
 80036ac:	e011      	b.n	80036d2 <HAL_GPIO_Init+0x372>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e00f      	b.n	80036d2 <HAL_GPIO_Init+0x372>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e00d      	b.n	80036d2 <HAL_GPIO_Init+0x372>
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	50000400 	.word	0x50000400
 80036bc:	50000800 	.word	0x50000800
 80036c0:	50000c00 	.word	0x50000c00
 80036c4:	50001400 	.word	0x50001400
 80036c8:	0800b38c 	.word	0x0800b38c
 80036cc:	40021800 	.word	0x40021800
 80036d0:	2300      	movs	r3, #0
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	2103      	movs	r1, #3
 80036d6:	400a      	ands	r2, r1
 80036d8:	00d2      	lsls	r2, r2, #3
 80036da:	4093      	lsls	r3, r2
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80036e2:	4937      	ldr	r1, [pc, #220]	@ (80037c0 <HAL_GPIO_Init+0x460>)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	3318      	adds	r3, #24
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036f0:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <HAL_GPIO_Init+0x460>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	43da      	mvns	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	2380      	movs	r3, #128	@ 0x80
 8003706:	035b      	lsls	r3, r3, #13
 8003708:	4013      	ands	r3, r2
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x3b4>
        {
          temp |= iocurrent;
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003714:	4b2a      	ldr	r3, [pc, #168]	@ (80037c0 <HAL_GPIO_Init+0x460>)
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800371a:	4b29      	ldr	r3, [pc, #164]	@ (80037c0 <HAL_GPIO_Init+0x460>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	43da      	mvns	r2, r3
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4013      	ands	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	039b      	lsls	r3, r3, #14
 8003732:	4013      	ands	r3, r2
 8003734:	d003      	beq.n	800373e <HAL_GPIO_Init+0x3de>
        {
          temp |= iocurrent;
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800373e:	4b20      	ldr	r3, [pc, #128]	@ (80037c0 <HAL_GPIO_Init+0x460>)
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003744:	4a1e      	ldr	r2, [pc, #120]	@ (80037c0 <HAL_GPIO_Init+0x460>)
 8003746:	2384      	movs	r3, #132	@ 0x84
 8003748:	58d3      	ldr	r3, [r2, r3]
 800374a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	43da      	mvns	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	2380      	movs	r3, #128	@ 0x80
 800375c:	029b      	lsls	r3, r3, #10
 800375e:	4013      	ands	r3, r2
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x40a>
        {
          temp |= iocurrent;
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800376a:	4915      	ldr	r1, [pc, #84]	@ (80037c0 <HAL_GPIO_Init+0x460>)
 800376c:	2284      	movs	r2, #132	@ 0x84
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003772:	4a13      	ldr	r2, [pc, #76]	@ (80037c0 <HAL_GPIO_Init+0x460>)
 8003774:	2380      	movs	r3, #128	@ 0x80
 8003776:	58d3      	ldr	r3, [r2, r3]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	43da      	mvns	r2, r3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	2380      	movs	r3, #128	@ 0x80
 800378a:	025b      	lsls	r3, r3, #9
 800378c:	4013      	ands	r3, r2
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003798:	4909      	ldr	r1, [pc, #36]	@ (80037c0 <HAL_GPIO_Init+0x460>)
 800379a:	2280      	movs	r2, #128	@ 0x80
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	3301      	adds	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	40da      	lsrs	r2, r3
 80037ae:	1e13      	subs	r3, r2, #0
 80037b0:	d000      	beq.n	80037b4 <HAL_GPIO_Init+0x454>
 80037b2:	e654      	b.n	800345e <HAL_GPIO_Init+0xfe>
  }
}
 80037b4:	46c0      	nop			@ (mov r8, r8)
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b006      	add	sp, #24
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	40021800 	.word	0x40021800

080037c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	000a      	movs	r2, r1
 80037ce:	1cbb      	adds	r3, r7, #2
 80037d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80037d2:	1cbb      	adds	r3, r7, #2
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d107      	bne.n	80037ea <HAL_GPIO_ReadPin+0x26>
 80037da:	2372      	movs	r3, #114	@ 0x72
 80037dc:	33ff      	adds	r3, #255	@ 0xff
 80037de:	001a      	movs	r2, r3
 80037e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003818 <HAL_GPIO_ReadPin+0x54>)
 80037e2:	0011      	movs	r1, r2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7ff fa0d 	bl	8002c04 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	1cba      	adds	r2, r7, #2
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	4013      	ands	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_GPIO_ReadPin+0x3c>
  {
    bitstatus = GPIO_PIN_SET;
 80037f6:	230f      	movs	r3, #15
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	e003      	b.n	8003808 <HAL_GPIO_ReadPin+0x44>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003800:	230f      	movs	r3, #15
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003808:	230f      	movs	r3, #15
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	781b      	ldrb	r3, [r3, #0]
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	0800b38c 	.word	0x0800b38c

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	0008      	movs	r0, r1
 8003826:	0011      	movs	r1, r2
 8003828:	1cbb      	adds	r3, r7, #2
 800382a:	1c02      	adds	r2, r0, #0
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	1c7b      	adds	r3, r7, #1
 8003830:	1c0a      	adds	r2, r1, #0
 8003832:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003834:	1cbb      	adds	r3, r7, #2
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d107      	bne.n	800384c <HAL_GPIO_WritePin+0x30>
 800383c:	2392      	movs	r3, #146	@ 0x92
 800383e:	33ff      	adds	r3, #255	@ 0xff
 8003840:	001a      	movs	r2, r3
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_GPIO_WritePin+0x70>)
 8003844:	0011      	movs	r1, r2
 8003846:	0018      	movs	r0, r3
 8003848:	f7ff f9dc 	bl	8002c04 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800384c:	1c7b      	adds	r3, r7, #1
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_GPIO_WritePin+0x4e>
 8003854:	1c7b      	adds	r3, r7, #1
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d006      	beq.n	800386a <HAL_GPIO_WritePin+0x4e>
 800385c:	23c9      	movs	r3, #201	@ 0xc9
 800385e:	005a      	lsls	r2, r3, #1
 8003860:	4b0a      	ldr	r3, [pc, #40]	@ (800388c <HAL_GPIO_WritePin+0x70>)
 8003862:	0011      	movs	r1, r2
 8003864:	0018      	movs	r0, r3
 8003866:	f7ff f9cd 	bl	8002c04 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800386a:	1c7b      	adds	r3, r7, #1
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <HAL_GPIO_WritePin+0x60>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003872:	1cbb      	adds	r3, r7, #2
 8003874:	881a      	ldrh	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800387a:	e003      	b.n	8003884 <HAL_GPIO_WritePin+0x68>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800387c:	1cbb      	adds	r3, r7, #2
 800387e:	881a      	ldrh	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}
 800388c:	0800b38c 	.word	0x0800b38c

08003890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	0002      	movs	r2, r0
 8003898:	1dbb      	adds	r3, r7, #6
 800389a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800389c:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	1dba      	adds	r2, r7, #6
 80038a2:	8812      	ldrh	r2, [r2, #0]
 80038a4:	4013      	ands	r3, r2
 80038a6:	d008      	beq.n	80038ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80038a8:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038aa:	1dba      	adds	r2, r7, #6
 80038ac:	8812      	ldrh	r2, [r2, #0]
 80038ae:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80038b0:	1dbb      	adds	r3, r7, #6
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff f877 	bl	80029a8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80038ba:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	1dba      	adds	r2, r7, #6
 80038c0:	8812      	ldrh	r2, [r2, #0]
 80038c2:	4013      	ands	r3, r2
 80038c4:	d008      	beq.n	80038d8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038c8:	1dba      	adds	r2, r7, #6
 80038ca:	8812      	ldrh	r2, [r2, #0]
 80038cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80038ce:	1dbb      	adds	r3, r7, #6
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7ff f878 	bl	80029c8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021800 	.word	0x40021800

080038e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	2380      	movs	r3, #128	@ 0x80
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d009      	beq.n	800390a <HAL_PWREx_ControlVoltageScaling+0x26>
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	2380      	movs	r3, #128	@ 0x80
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d004      	beq.n	800390a <HAL_PWREx_ControlVoltageScaling+0x26>
 8003900:	4b2c      	ldr	r3, [pc, #176]	@ (80039b4 <HAL_PWREx_ControlVoltageScaling+0xd0>)
 8003902:	21c3      	movs	r1, #195	@ 0xc3
 8003904:	0018      	movs	r0, r3
 8003906:	f7ff f97d 	bl	8002c04 <assert_failed>

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	2380      	movs	r3, #128	@ 0x80
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	429a      	cmp	r2, r3
 8003912:	d137      	bne.n	8003984 <HAL_PWREx_ControlVoltageScaling+0xa0>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003914:	4b28      	ldr	r3, [pc, #160]	@ (80039b8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	23c0      	movs	r3, #192	@ 0xc0
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	401a      	ands	r2, r3
 800391e:	2380      	movs	r3, #128	@ 0x80
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	429a      	cmp	r2, r3
 8003924:	d040      	beq.n	80039a8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003926:	4b24      	ldr	r3, [pc, #144]	@ (80039b8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a24      	ldr	r2, [pc, #144]	@ (80039bc <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800392c:	401a      	ands	r2, r3
 800392e:	4b22      	ldr	r3, [pc, #136]	@ (80039b8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8003930:	2180      	movs	r1, #128	@ 0x80
 8003932:	0089      	lsls	r1, r1, #2
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003938:	4b21      	ldr	r3, [pc, #132]	@ (80039c0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2232      	movs	r2, #50	@ 0x32
 800393e:	4353      	muls	r3, r2
 8003940:	4920      	ldr	r1, [pc, #128]	@ (80039c4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003942:	0018      	movs	r0, r3
 8003944:	f7fc fbf2 	bl	800012c <__udivsi3>
 8003948:	0003      	movs	r3, r0
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800394e:	e002      	b.n	8003956 <HAL_PWREx_ControlVoltageScaling+0x72>
      {
        wait_loop_index--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3b01      	subs	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003956:	4b18      	ldr	r3, [pc, #96]	@ (80039b8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	401a      	ands	r2, r3
 8003960:	2380      	movs	r3, #128	@ 0x80
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	429a      	cmp	r2, r3
 8003966:	d102      	bne.n	800396e <HAL_PWREx_ControlVoltageScaling+0x8a>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x6c>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800396e:	4b12      	ldr	r3, [pc, #72]	@ (80039b8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	2380      	movs	r3, #128	@ 0x80
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	401a      	ands	r2, r3
 8003978:	2380      	movs	r3, #128	@ 0x80
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	429a      	cmp	r2, r3
 800397e:	d113      	bne.n	80039a8 <HAL_PWREx_ControlVoltageScaling+0xc4>
      {
        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e012      	b.n	80039aa <HAL_PWREx_ControlVoltageScaling+0xc6>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	23c0      	movs	r3, #192	@ 0xc0
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	401a      	ands	r2, r3
 800398e:	2380      	movs	r3, #128	@ 0x80
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	429a      	cmp	r2, r3
 8003994:	d008      	beq.n	80039a8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003996:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a08      	ldr	r2, [pc, #32]	@ (80039bc <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800399c:	401a      	ands	r2, r3
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <HAL_PWREx_ControlVoltageScaling+0xd4>)
 80039a0:	2180      	movs	r1, #128	@ 0x80
 80039a2:	00c9      	lsls	r1, r1, #3
 80039a4:	430a      	orrs	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b004      	add	sp, #16
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	0800b3c8 	.word	0x0800b3c8
 80039b8:	40007000 	.word	0x40007000
 80039bc:	fffff9ff 	.word	0xfffff9ff
 80039c0:	20000014 	.word	0x20000014
 80039c4:	000f4240 	.word	0x000f4240

080039c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80039cc:	4b03      	ldr	r3, [pc, #12]	@ (80039dc <HAL_PWREx_GetVoltageRange+0x14>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	23c0      	movs	r3, #192	@ 0xc0
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4013      	ands	r3, r2
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40007000 	.word	0x40007000

080039e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_OscConfig+0x1e>
 80039ee:	234e      	movs	r3, #78	@ 0x4e
 80039f0:	33ff      	adds	r3, #255	@ 0xff
 80039f2:	001a      	movs	r2, r3
 80039f4:	4bbd      	ldr	r3, [pc, #756]	@ (8003cec <HAL_RCC_OscConfig+0x30c>)
 80039f6:	0011      	movs	r1, r2
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7ff f903 	bl	8002c04 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01f      	beq.n	8003a46 <HAL_RCC_OscConfig+0x66>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d11a      	bne.n	8003a46 <HAL_RCC_OscConfig+0x66>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2202      	movs	r2, #2
 8003a16:	4013      	ands	r3, r2
 8003a18:	d115      	bne.n	8003a46 <HAL_RCC_OscConfig+0x66>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2210      	movs	r2, #16
 8003a20:	4013      	ands	r3, r2
 8003a22:	d110      	bne.n	8003a46 <HAL_RCC_OscConfig+0x66>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d10b      	bne.n	8003a46 <HAL_RCC_OscConfig+0x66>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2204      	movs	r2, #4
 8003a34:	4013      	ands	r3, r2
 8003a36:	d106      	bne.n	8003a46 <HAL_RCC_OscConfig+0x66>
 8003a38:	23a7      	movs	r3, #167	@ 0xa7
 8003a3a:	005a      	lsls	r2, r3, #1
 8003a3c:	4bab      	ldr	r3, [pc, #684]	@ (8003cec <HAL_RCC_OscConfig+0x30c>)
 8003a3e:	0011      	movs	r1, r2
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7ff f8df 	bl	8002c04 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a46:	4baa      	ldr	r3, [pc, #680]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2238      	movs	r2, #56	@ 0x38
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a50:	4ba7      	ldr	r3, [pc, #668]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2203      	movs	r2, #3
 8003a56:	4013      	ands	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2210      	movs	r2, #16
 8003a60:	4013      	ands	r3, r2
 8003a62:	d100      	bne.n	8003a66 <HAL_RCC_OscConfig+0x86>
 8003a64:	e14f      	b.n	8003d06 <HAL_RCC_OscConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_RCC_OscConfig+0xa6>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d007      	beq.n	8003a86 <HAL_RCC_OscConfig+0xa6>
 8003a76:	2358      	movs	r3, #88	@ 0x58
 8003a78:	33ff      	adds	r3, #255	@ 0xff
 8003a7a:	001a      	movs	r2, r3
 8003a7c:	4b9b      	ldr	r3, [pc, #620]	@ (8003cec <HAL_RCC_OscConfig+0x30c>)
 8003a7e:	0011      	movs	r1, r2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7ff f8bf 	bl	8002c04 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	2bff      	cmp	r3, #255	@ 0xff
 8003a8c:	d906      	bls.n	8003a9c <HAL_RCC_OscConfig+0xbc>
 8003a8e:	23ac      	movs	r3, #172	@ 0xac
 8003a90:	005a      	lsls	r2, r3, #1
 8003a92:	4b96      	ldr	r3, [pc, #600]	@ (8003cec <HAL_RCC_OscConfig+0x30c>)
 8003a94:	0011      	movs	r1, r2
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7ff f8b4 	bl	8002c04 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d033      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d02f      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d02b      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	2b30      	cmp	r3, #48	@ 0x30
 8003aba:	d027      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	2b40      	cmp	r3, #64	@ 0x40
 8003ac2:	d023      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	2b50      	cmp	r3, #80	@ 0x50
 8003aca:	d01f      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	2b60      	cmp	r3, #96	@ 0x60
 8003ad2:	d01b      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	2b70      	cmp	r3, #112	@ 0x70
 8003ada:	d017      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	2b80      	cmp	r3, #128	@ 0x80
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	2b90      	cmp	r3, #144	@ 0x90
 8003aea:	d00f      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	2ba0      	cmp	r3, #160	@ 0xa0
 8003af2:	d00b      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	2bb0      	cmp	r3, #176	@ 0xb0
 8003afa:	d007      	beq.n	8003b0c <HAL_RCC_OscConfig+0x12c>
 8003afc:	235a      	movs	r3, #90	@ 0x5a
 8003afe:	33ff      	adds	r3, #255	@ 0xff
 8003b00:	001a      	movs	r2, r3
 8003b02:	4b7a      	ldr	r3, [pc, #488]	@ (8003cec <HAL_RCC_OscConfig+0x30c>)
 8003b04:	0011      	movs	r1, r2
 8003b06:	0018      	movs	r0, r3
 8003b08:	f7ff f87c 	bl	8002c04 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_RCC_OscConfig+0x142>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b18      	cmp	r3, #24
 8003b16:	d000      	beq.n	8003b1a <HAL_RCC_OscConfig+0x13a>
 8003b18:	e093      	b.n	8003c42 <HAL_RCC_OscConfig+0x262>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d000      	beq.n	8003b22 <HAL_RCC_OscConfig+0x142>
 8003b20:	e08f      	b.n	8003c42 <HAL_RCC_OscConfig+0x262>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b22:	4b73      	ldr	r3, [pc, #460]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2202      	movs	r2, #2
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d006      	beq.n	8003b3a <HAL_RCC_OscConfig+0x15a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <HAL_RCC_OscConfig+0x15a>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f000 fcbf 	bl	80044b8 <HAL_RCC_OscConfig+0xad8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b3e:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2108      	movs	r1, #8
 8003b44:	400b      	ands	r3, r1
 8003b46:	d004      	beq.n	8003b52 <HAL_RCC_OscConfig+0x172>
 8003b48:	4b69      	ldr	r3, [pc, #420]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	21f0      	movs	r1, #240	@ 0xf0
 8003b4e:	400b      	ands	r3, r1
 8003b50:	e005      	b.n	8003b5e <HAL_RCC_OscConfig+0x17e>
 8003b52:	4967      	ldr	r1, [pc, #412]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003b54:	2394      	movs	r3, #148	@ 0x94
 8003b56:	58cb      	ldr	r3, [r1, r3]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	21f0      	movs	r1, #240	@ 0xf0
 8003b5c:	400b      	ands	r3, r1
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d225      	bcs.n	8003bae <HAL_RCC_OscConfig+0x1ce>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	0018      	movs	r0, r3
 8003b68:	f000 ff16 	bl	8004998 <RCC_SetFlashLatencyFromMSIRange>
 8003b6c:	1e03      	subs	r3, r0, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_RCC_OscConfig+0x196>
          {
            return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f000 fca1 	bl	80044b8 <HAL_RCC_OscConfig+0xad8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b76:	4b5e      	ldr	r3, [pc, #376]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003b7c:	2108      	movs	r1, #8
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	22f0      	movs	r2, #240	@ 0xf0
 8003b88:	4393      	bics	r3, r2
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b90:	4b57      	ldr	r3, [pc, #348]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b96:	4b56      	ldr	r3, [pc, #344]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4a56      	ldr	r2, [pc, #344]	@ (8003cf4 <HAL_RCC_OscConfig+0x314>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	0019      	movs	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	021a      	lsls	r2, r3, #8
 8003ba6:	4b52      	ldr	r3, [pc, #328]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	e027      	b.n	8003bfe <HAL_RCC_OscConfig+0x21e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bae:	4b50      	ldr	r3, [pc, #320]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003bb4:	2108      	movs	r1, #8
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	4b4d      	ldr	r3, [pc, #308]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	22f0      	movs	r2, #240	@ 0xf0
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bc8:	4b49      	ldr	r3, [pc, #292]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bce:	4b48      	ldr	r3, [pc, #288]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a48      	ldr	r2, [pc, #288]	@ (8003cf4 <HAL_RCC_OscConfig+0x314>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	4b44      	ldr	r3, [pc, #272]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_RCC_OscConfig+0x21e>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f000 fed2 	bl	8004998 <RCC_SetFlashLatencyFromMSIRange>
 8003bf4:	1e03      	subs	r3, r0, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_RCC_OscConfig+0x21e>
            {
              return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f000 fc5d 	bl	80044b8 <HAL_RCC_OscConfig+0xad8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8003bfe:	f000 fe0d 	bl	800481c <HAL_RCC_GetSysClockFreq>
 8003c02:	0001      	movs	r1, r0
 8003c04:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003c06:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	220f      	movs	r2, #15
 8003c0c:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8003c0e:	4a3a      	ldr	r2, [pc, #232]	@ (8003cf8 <HAL_RCC_OscConfig+0x318>)
 8003c10:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c12:	001a      	movs	r2, r3
 8003c14:	231f      	movs	r3, #31
 8003c16:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8003c18:	000a      	movs	r2, r1
 8003c1a:	40da      	lsrs	r2, r3
 8003c1c:	4b37      	ldr	r3, [pc, #220]	@ (8003cfc <HAL_RCC_OscConfig+0x31c>)
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c20:	4b37      	ldr	r3, [pc, #220]	@ (8003d00 <HAL_RCC_OscConfig+0x320>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	250f      	movs	r5, #15
 8003c26:	197c      	adds	r4, r7, r5
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7ff fa1d 	bl	8003068 <HAL_InitTick>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8003c32:	197b      	adds	r3, r7, r5
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d064      	beq.n	8003d04 <HAL_RCC_OscConfig+0x324>
        {
          return status;
 8003c3a:	197b      	adds	r3, r7, r5
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	f000 fc3b 	bl	80044b8 <HAL_RCC_OscConfig+0xad8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d035      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x2d6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c4a:	4b29      	ldr	r3, [pc, #164]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b28      	ldr	r3, [pc, #160]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003c50:	2101      	movs	r1, #1
 8003c52:	430a      	orrs	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c56:	f7ff fa61 	bl	800311c <HAL_GetTick>
 8003c5a:	0003      	movs	r3, r0
 8003c5c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c5e:	e009      	b.n	8003c74 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8003c60:	f7ff fa5c 	bl	800311c <HAL_GetTick>
 8003c64:	0002      	movs	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d902      	bls.n	8003c74 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	f000 fc22 	bl	80044b8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c74:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0x280>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003c84:	2108      	movs	r1, #8
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	4b19      	ldr	r3, [pc, #100]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	22f0      	movs	r2, #240	@ 0xf0
 8003c90:	4393      	bics	r3, r2
 8003c92:	0019      	movs	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c98:	4b15      	ldr	r3, [pc, #84]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c9e:	4b14      	ldr	r3, [pc, #80]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4a14      	ldr	r2, [pc, #80]	@ (8003cf4 <HAL_RCC_OscConfig+0x314>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	021a      	lsls	r2, r3, #8
 8003cae:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	e027      	b.n	8003d06 <HAL_RCC_OscConfig+0x326>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	438a      	bics	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cc2:	f7ff fa2b 	bl	800311c <HAL_GetTick>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cca:	e009      	b.n	8003ce0 <HAL_RCC_OscConfig+0x300>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8003ccc:	f7ff fa26 	bl	800311c <HAL_GetTick>
 8003cd0:	0002      	movs	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d902      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	f000 fbec 	bl	80044b8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ce0:	4b03      	ldr	r3, [pc, #12]	@ (8003cf0 <HAL_RCC_OscConfig+0x310>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x2ec>
 8003cea:	e00c      	b.n	8003d06 <HAL_RCC_OscConfig+0x326>
 8003cec:	0800b404 	.word	0x0800b404
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	ffff00ff 	.word	0xffff00ff
 8003cf8:	0800b730 	.word	0x0800b730
 8003cfc:	20000014 	.word	0x20000014
 8003d00:	20000018 	.word	0x20000018
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d04:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d100      	bne.n	8003d12 <HAL_RCC_OscConfig+0x332>
 8003d10:	e07f      	b.n	8003e12 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d012      	beq.n	8003d40 <HAL_RCC_OscConfig+0x360>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	2380      	movs	r3, #128	@ 0x80
 8003d20:	025b      	lsls	r3, r3, #9
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d00c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x360>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	23a0      	movs	r3, #160	@ 0xa0
 8003d2c:	02db      	lsls	r3, r3, #11
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d006      	beq.n	8003d40 <HAL_RCC_OscConfig+0x360>
 8003d32:	23e3      	movs	r3, #227	@ 0xe3
 8003d34:	005a      	lsls	r2, r3, #1
 8003d36:	4bb2      	ldr	r3, [pc, #712]	@ (8004000 <HAL_RCC_OscConfig+0x620>)
 8003d38:	0011      	movs	r1, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7fe ff62 	bl	8002c04 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d005      	beq.n	8003d52 <HAL_RCC_OscConfig+0x372>
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b18      	cmp	r3, #24
 8003d4a:	d10f      	bne.n	8003d6c <HAL_RCC_OscConfig+0x38c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x38c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d52:	4bac      	ldr	r3, [pc, #688]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	2380      	movs	r3, #128	@ 0x80
 8003d58:	029b      	lsls	r3, r3, #10
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d058      	beq.n	8003e10 <HAL_RCC_OscConfig+0x430>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d154      	bne.n	8003e10 <HAL_RCC_OscConfig+0x430>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f000 fba6 	bl	80044b8 <HAL_RCC_OscConfig+0xad8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	2380      	movs	r3, #128	@ 0x80
 8003d72:	025b      	lsls	r3, r3, #9
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_OscConfig+0x3a8>
 8003d78:	4ba2      	ldr	r3, [pc, #648]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4ba1      	ldr	r3, [pc, #644]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003d7e:	2180      	movs	r1, #128	@ 0x80
 8003d80:	0249      	lsls	r1, r1, #9
 8003d82:	430a      	orrs	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e013      	b.n	8003db0 <HAL_RCC_OscConfig+0x3d0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	23a0      	movs	r3, #160	@ 0xa0
 8003d8e:	02db      	lsls	r3, r3, #11
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_OscConfig+0x3c4>
 8003d94:	4b9b      	ldr	r3, [pc, #620]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b9a      	ldr	r3, [pc, #616]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003d9a:	21a0      	movs	r1, #160	@ 0xa0
 8003d9c:	02c9      	lsls	r1, r1, #11
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e005      	b.n	8003db0 <HAL_RCC_OscConfig+0x3d0>
 8003da4:	4b97      	ldr	r3, [pc, #604]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b96      	ldr	r3, [pc, #600]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003daa:	4997      	ldr	r1, [pc, #604]	@ (8004008 <HAL_RCC_OscConfig+0x628>)
 8003dac:	400a      	ands	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <HAL_RCC_OscConfig+0x404>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7ff f9b0 	bl	800311c <HAL_GetTick>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc0:	e009      	b.n	8003dd6 <HAL_RCC_OscConfig+0x3f6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003dc2:	f7ff f9ab 	bl	800311c <HAL_GetTick>
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b64      	cmp	r3, #100	@ 0x64
 8003dce:	d902      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x3f6>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	f000 fb71 	bl	80044b8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dd6:	4b8b      	ldr	r3, [pc, #556]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	2380      	movs	r3, #128	@ 0x80
 8003ddc:	029b      	lsls	r3, r3, #10
 8003dde:	4013      	ands	r3, r2
 8003de0:	d0ef      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x3e2>
 8003de2:	e016      	b.n	8003e12 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7ff f99a 	bl	800311c <HAL_GetTick>
 8003de8:	0003      	movs	r3, r0
 8003dea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dec:	e009      	b.n	8003e02 <HAL_RCC_OscConfig+0x422>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003dee:	f7ff f995 	bl	800311c <HAL_GetTick>
 8003df2:	0002      	movs	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b64      	cmp	r3, #100	@ 0x64
 8003dfa:	d902      	bls.n	8003e02 <HAL_RCC_OscConfig+0x422>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	f000 fb5b 	bl	80044b8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e02:	4b80      	ldr	r3, [pc, #512]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	2380      	movs	r3, #128	@ 0x80
 8003e08:	029b      	lsls	r3, r3, #10
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d1ef      	bne.n	8003dee <HAL_RCC_OscConfig+0x40e>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x432>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2202      	movs	r2, #2
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d100      	bne.n	8003e1e <HAL_RCC_OscConfig+0x43e>
 8003e1c:	e082      	b.n	8003f24 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00c      	beq.n	8003e40 <HAL_RCC_OscConfig+0x460>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d006      	beq.n	8003e40 <HAL_RCC_OscConfig+0x460>
 8003e32:	23fc      	movs	r3, #252	@ 0xfc
 8003e34:	005a      	lsls	r2, r3, #1
 8003e36:	4b72      	ldr	r3, [pc, #456]	@ (8004000 <HAL_RCC_OscConfig+0x620>)
 8003e38:	0011      	movs	r1, r2
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7fe fee2 	bl	8002c04 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e46:	d907      	bls.n	8003e58 <HAL_RCC_OscConfig+0x478>
 8003e48:	23fa      	movs	r3, #250	@ 0xfa
 8003e4a:	33ff      	adds	r3, #255	@ 0xff
 8003e4c:	001a      	movs	r2, r3
 8003e4e:	4b6c      	ldr	r3, [pc, #432]	@ (8004000 <HAL_RCC_OscConfig+0x620>)
 8003e50:	0011      	movs	r1, r2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f7fe fed6 	bl	8002c04 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCC_OscConfig+0x48a>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b18      	cmp	r3, #24
 8003e62:	d11a      	bne.n	8003e9a <HAL_RCC_OscConfig+0x4ba>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d117      	bne.n	8003e9a <HAL_RCC_OscConfig+0x4ba>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e6a:	4b66      	ldr	r3, [pc, #408]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	2380      	movs	r3, #128	@ 0x80
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4013      	ands	r3, r2
 8003e74:	d005      	beq.n	8003e82 <HAL_RCC_OscConfig+0x4a2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x4a2>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e31a      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e82:	4b60      	ldr	r3, [pc, #384]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4a61      	ldr	r2, [pc, #388]	@ (800400c <HAL_RCC_OscConfig+0x62c>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	061a      	lsls	r2, r3, #24
 8003e92:	4b5c      	ldr	r3, [pc, #368]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e98:	e044      	b.n	8003f24 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d026      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x510>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea2:	4b58      	ldr	r3, [pc, #352]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b57      	ldr	r3, [pc, #348]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003ea8:	2180      	movs	r1, #128	@ 0x80
 8003eaa:	0049      	lsls	r1, r1, #1
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7ff f934 	bl	800311c <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x4ec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003eba:	f7ff f92f 	bl	800311c <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x4ec>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e2f5      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	2380      	movs	r3, #128	@ 0x80
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x4da>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4a4b      	ldr	r2, [pc, #300]	@ (800400c <HAL_RCC_OscConfig+0x62c>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	061a      	lsls	r2, r3, #24
 8003ee8:	4b46      	ldr	r3, [pc, #280]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	e019      	b.n	8003f24 <HAL_RCC_OscConfig+0x544>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef0:	4b44      	ldr	r3, [pc, #272]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b43      	ldr	r3, [pc, #268]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003ef6:	4946      	ldr	r1, [pc, #280]	@ (8004010 <HAL_RCC_OscConfig+0x630>)
 8003ef8:	400a      	ands	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7ff f90e 	bl	800311c <HAL_GetTick>
 8003f00:	0003      	movs	r3, r0
 8003f02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f06:	f7ff f909 	bl	800311c <HAL_GetTick>
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e2cf      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f18:	4b3a      	ldr	r3, [pc, #232]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2380      	movs	r3, #128	@ 0x80
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4013      	ands	r3, r2
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_OscConfig+0x526>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2208      	movs	r2, #8
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d100      	bne.n	8003f30 <HAL_RCC_OscConfig+0x550>
 8003f2e:	e07b      	b.n	8004028 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <HAL_RCC_OscConfig+0x56c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_OscConfig+0x56c>
 8003f40:	4a34      	ldr	r2, [pc, #208]	@ (8004014 <HAL_RCC_OscConfig+0x634>)
 8003f42:	4b2f      	ldr	r3, [pc, #188]	@ (8004000 <HAL_RCC_OscConfig+0x620>)
 8003f44:	0011      	movs	r1, r2
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7fe fe5c 	bl	8002c04 <assert_failed>
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <HAL_RCC_OscConfig+0x588>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_OscConfig+0x588>
 8003f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8004018 <HAL_RCC_OscConfig+0x638>)
 8003f5e:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <HAL_RCC_OscConfig+0x620>)
 8003f60:	0011      	movs	r1, r2
 8003f62:	0018      	movs	r0, r3
 8003f64:	f7fe fe4e 	bl	8002c04 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d031      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x5f4>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d108      	bne.n	8003f8a <HAL_RCC_OscConfig+0x5aa>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8003f78:	4a22      	ldr	r2, [pc, #136]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003f7a:	2394      	movs	r3, #148	@ 0x94
 8003f7c:	58d3      	ldr	r3, [r2, r3]
 8003f7e:	4921      	ldr	r1, [pc, #132]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003f80:	2204      	movs	r2, #4
 8003f82:	4393      	bics	r3, r2
 8003f84:	2294      	movs	r2, #148	@ 0x94
 8003f86:	508b      	str	r3, [r1, r2]
 8003f88:	e007      	b.n	8003f9a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8003f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003f8c:	2394      	movs	r3, #148	@ 0x94
 8003f8e:	58d3      	ldr	r3, [r2, r3]
 8003f90:	491c      	ldr	r1, [pc, #112]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003f92:	2204      	movs	r2, #4
 8003f94:	4313      	orrs	r3, r2
 8003f96:	2294      	movs	r2, #148	@ 0x94
 8003f98:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003f9c:	2394      	movs	r3, #148	@ 0x94
 8003f9e:	58d3      	ldr	r3, [r2, r3]
 8003fa0:	4918      	ldr	r1, [pc, #96]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	2294      	movs	r2, #148	@ 0x94
 8003fa8:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003faa:	f7ff f8b7 	bl	800311c <HAL_GetTick>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x5e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb4:	f7ff f8b2 	bl	800311c <HAL_GetTick>
 8003fb8:	0002      	movs	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b11      	cmp	r3, #17
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x5e6>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e278      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003fc8:	2394      	movs	r3, #148	@ 0x94
 8003fca:	58d3      	ldr	r3, [r2, r3]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x5d4>
 8003fd2:	e029      	b.n	8004028 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003fd6:	2394      	movs	r3, #148	@ 0x94
 8003fd8:	58d3      	ldr	r3, [r2, r3]
 8003fda:	490a      	ldr	r1, [pc, #40]	@ (8004004 <HAL_RCC_OscConfig+0x624>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4393      	bics	r3, r2
 8003fe0:	2294      	movs	r2, #148	@ 0x94
 8003fe2:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7ff f89a 	bl	800311c <HAL_GetTick>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fec:	e016      	b.n	800401c <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fee:	f7ff f895 	bl	800311c <HAL_GetTick>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b11      	cmp	r3, #17
 8003ffa:	d90f      	bls.n	800401c <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e25b      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
 8004000:	0800b404 	.word	0x0800b404
 8004004:	40021000 	.word	0x40021000
 8004008:	fffaffff 	.word	0xfffaffff
 800400c:	80ffffff 	.word	0x80ffffff
 8004010:	fffffeff 	.word	0xfffffeff
 8004014:	00000239 	.word	0x00000239
 8004018:	0000023a 	.word	0x0000023a
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800401c:	4a8c      	ldr	r2, [pc, #560]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 800401e:	2394      	movs	r3, #148	@ 0x94
 8004020:	58d3      	ldr	r3, [r2, r3]
 8004022:	2202      	movs	r2, #2
 8004024:	4013      	ands	r3, r2
 8004026:	d1e2      	bne.n	8003fee <HAL_RCC_OscConfig+0x60e>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2204      	movs	r2, #4
 800402e:	4013      	ands	r3, r2
 8004030:	d100      	bne.n	8004034 <HAL_RCC_OscConfig+0x654>
 8004032:	e127      	b.n	8004284 <HAL_RCC_OscConfig+0x8a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004034:	231f      	movs	r3, #31
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d016      	beq.n	8004072 <HAL_RCC_OscConfig+0x692>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b81      	cmp	r3, #129	@ 0x81
 800404a:	d012      	beq.n	8004072 <HAL_RCC_OscConfig+0x692>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d00e      	beq.n	8004072 <HAL_RCC_OscConfig+0x692>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b05      	cmp	r3, #5
 800405a:	d00a      	beq.n	8004072 <HAL_RCC_OscConfig+0x692>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b85      	cmp	r3, #133	@ 0x85
 8004062:	d006      	beq.n	8004072 <HAL_RCC_OscConfig+0x692>
 8004064:	239c      	movs	r3, #156	@ 0x9c
 8004066:	009a      	lsls	r2, r3, #2
 8004068:	4b7a      	ldr	r3, [pc, #488]	@ (8004254 <HAL_RCC_OscConfig+0x874>)
 800406a:	0011      	movs	r1, r2
 800406c:	0018      	movs	r0, r3
 800406e:	f7fe fdc9 	bl	8002c04 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8004072:	4b77      	ldr	r3, [pc, #476]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004074:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	055b      	lsls	r3, r3, #21
 800407a:	4013      	ands	r3, r2
 800407c:	d111      	bne.n	80040a2 <HAL_RCC_OscConfig+0x6c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407e:	4b74      	ldr	r3, [pc, #464]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004080:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004082:	4b73      	ldr	r3, [pc, #460]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004084:	2180      	movs	r1, #128	@ 0x80
 8004086:	0549      	lsls	r1, r1, #21
 8004088:	430a      	orrs	r2, r1
 800408a:	659a      	str	r2, [r3, #88]	@ 0x58
 800408c:	4b70      	ldr	r3, [pc, #448]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 800408e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	055b      	lsls	r3, r3, #21
 8004094:	4013      	ands	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409a:	231f      	movs	r3, #31
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004258 <HAL_RCC_OscConfig+0x878>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	2380      	movs	r3, #128	@ 0x80
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4013      	ands	r3, r2
 80040ac:	d11a      	bne.n	80040e4 <HAL_RCC_OscConfig+0x704>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004258 <HAL_RCC_OscConfig+0x878>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b69      	ldr	r3, [pc, #420]	@ (8004258 <HAL_RCC_OscConfig+0x878>)
 80040b4:	2180      	movs	r1, #128	@ 0x80
 80040b6:	0049      	lsls	r1, r1, #1
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040bc:	f7ff f82e 	bl	800311c <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x6f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c6:	f7ff f829 	bl	800311c <HAL_GetTick>
 80040ca:	0002      	movs	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e1ef      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d8:	4b5f      	ldr	r3, [pc, #380]	@ (8004258 <HAL_RCC_OscConfig+0x878>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	@ 0x80
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4013      	ands	r3, r2
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCC_OscConfig+0x6e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2201      	movs	r2, #1
 80040ea:	4013      	ands	r3, r2
 80040ec:	d01e      	beq.n	800412c <HAL_RCC_OscConfig+0x74c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2204      	movs	r2, #4
 80040f4:	4013      	ands	r3, r2
 80040f6:	d010      	beq.n	800411a <HAL_RCC_OscConfig+0x73a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040f8:	4a55      	ldr	r2, [pc, #340]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 80040fa:	2390      	movs	r3, #144	@ 0x90
 80040fc:	58d3      	ldr	r3, [r2, r3]
 80040fe:	4954      	ldr	r1, [pc, #336]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004100:	2204      	movs	r2, #4
 8004102:	4313      	orrs	r3, r2
 8004104:	2290      	movs	r2, #144	@ 0x90
 8004106:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004108:	4a51      	ldr	r2, [pc, #324]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 800410a:	2390      	movs	r3, #144	@ 0x90
 800410c:	58d3      	ldr	r3, [r2, r3]
 800410e:	4950      	ldr	r1, [pc, #320]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004110:	2201      	movs	r2, #1
 8004112:	4313      	orrs	r3, r2
 8004114:	2290      	movs	r2, #144	@ 0x90
 8004116:	508b      	str	r3, [r1, r2]
 8004118:	e018      	b.n	800414c <HAL_RCC_OscConfig+0x76c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800411a:	4a4d      	ldr	r2, [pc, #308]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 800411c:	2390      	movs	r3, #144	@ 0x90
 800411e:	58d3      	ldr	r3, [r2, r3]
 8004120:	494b      	ldr	r1, [pc, #300]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004122:	2201      	movs	r2, #1
 8004124:	4313      	orrs	r3, r2
 8004126:	2290      	movs	r2, #144	@ 0x90
 8004128:	508b      	str	r3, [r1, r2]
 800412a:	e00f      	b.n	800414c <HAL_RCC_OscConfig+0x76c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800412c:	4a48      	ldr	r2, [pc, #288]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 800412e:	2390      	movs	r3, #144	@ 0x90
 8004130:	58d3      	ldr	r3, [r2, r3]
 8004132:	4947      	ldr	r1, [pc, #284]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004134:	2201      	movs	r2, #1
 8004136:	4393      	bics	r3, r2
 8004138:	2290      	movs	r2, #144	@ 0x90
 800413a:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800413c:	4a44      	ldr	r2, [pc, #272]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 800413e:	2390      	movs	r3, #144	@ 0x90
 8004140:	58d3      	ldr	r3, [r2, r3]
 8004142:	4943      	ldr	r1, [pc, #268]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004144:	2204      	movs	r2, #4
 8004146:	4393      	bics	r3, r2
 8004148:	2290      	movs	r2, #144	@ 0x90
 800414a:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d04f      	beq.n	80041f4 <HAL_RCC_OscConfig+0x814>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fe ffe2 	bl	800311c <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415c:	e009      	b.n	8004172 <HAL_RCC_OscConfig+0x792>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fe ffdd 	bl	800311c <HAL_GetTick>
 8004162:	0002      	movs	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	4a3c      	ldr	r2, [pc, #240]	@ (800425c <HAL_RCC_OscConfig+0x87c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x792>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e1a2      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004172:	4a37      	ldr	r2, [pc, #220]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004174:	2390      	movs	r3, #144	@ 0x90
 8004176:	58d3      	ldr	r3, [r2, r3]
 8004178:	2202      	movs	r2, #2
 800417a:	4013      	ands	r3, r2
 800417c:	d0ef      	beq.n	800415e <HAL_RCC_OscConfig+0x77e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2280      	movs	r2, #128	@ 0x80
 8004184:	4013      	ands	r3, r2
 8004186:	d01a      	beq.n	80041be <HAL_RCC_OscConfig+0x7de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004188:	4a31      	ldr	r2, [pc, #196]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 800418a:	2390      	movs	r3, #144	@ 0x90
 800418c:	58d3      	ldr	r3, [r2, r3]
 800418e:	4930      	ldr	r1, [pc, #192]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004190:	2280      	movs	r2, #128	@ 0x80
 8004192:	4313      	orrs	r3, r2
 8004194:	2290      	movs	r2, #144	@ 0x90
 8004196:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004198:	e009      	b.n	80041ae <HAL_RCC_OscConfig+0x7ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419a:	f7fe ffbf 	bl	800311c <HAL_GetTick>
 800419e:	0002      	movs	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	4a2d      	ldr	r2, [pc, #180]	@ (800425c <HAL_RCC_OscConfig+0x87c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x7ce>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e184      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80041ae:	4a28      	ldr	r2, [pc, #160]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 80041b0:	2390      	movs	r3, #144	@ 0x90
 80041b2:	58d2      	ldr	r2, [r2, r3]
 80041b4:	2380      	movs	r3, #128	@ 0x80
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	4013      	ands	r3, r2
 80041ba:	d0ee      	beq.n	800419a <HAL_RCC_OscConfig+0x7ba>
 80041bc:	e057      	b.n	800426e <HAL_RCC_OscConfig+0x88e>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80041be:	4a24      	ldr	r2, [pc, #144]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 80041c0:	2390      	movs	r3, #144	@ 0x90
 80041c2:	58d3      	ldr	r3, [r2, r3]
 80041c4:	4922      	ldr	r1, [pc, #136]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 80041c6:	2280      	movs	r2, #128	@ 0x80
 80041c8:	4393      	bics	r3, r2
 80041ca:	2290      	movs	r2, #144	@ 0x90
 80041cc:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041ce:	e009      	b.n	80041e4 <HAL_RCC_OscConfig+0x804>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fe ffa4 	bl	800311c <HAL_GetTick>
 80041d4:	0002      	movs	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	4a20      	ldr	r2, [pc, #128]	@ (800425c <HAL_RCC_OscConfig+0x87c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e169      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 80041e6:	2390      	movs	r3, #144	@ 0x90
 80041e8:	58d2      	ldr	r2, [r2, r3]
 80041ea:	2380      	movs	r3, #128	@ 0x80
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	4013      	ands	r3, r2
 80041f0:	d1ee      	bne.n	80041d0 <HAL_RCC_OscConfig+0x7f0>
 80041f2:	e03c      	b.n	800426e <HAL_RCC_OscConfig+0x88e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fe ff92 	bl	800311c <HAL_GetTick>
 80041f8:	0003      	movs	r3, r0
 80041fa:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041fc:	e009      	b.n	8004212 <HAL_RCC_OscConfig+0x832>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fe ff8d 	bl	800311c <HAL_GetTick>
 8004202:	0002      	movs	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	4a14      	ldr	r2, [pc, #80]	@ (800425c <HAL_RCC_OscConfig+0x87c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x832>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e152      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004212:	4a0f      	ldr	r2, [pc, #60]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004214:	2390      	movs	r3, #144	@ 0x90
 8004216:	58d3      	ldr	r3, [r2, r3]
 8004218:	2202      	movs	r2, #2
 800421a:	4013      	ands	r3, r2
 800421c:	d1ef      	bne.n	80041fe <HAL_RCC_OscConfig+0x81e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800421e:	4a0c      	ldr	r2, [pc, #48]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004220:	2390      	movs	r3, #144	@ 0x90
 8004222:	58d3      	ldr	r3, [r2, r3]
 8004224:	2280      	movs	r2, #128	@ 0x80
 8004226:	4013      	ands	r3, r2
 8004228:	d021      	beq.n	800426e <HAL_RCC_OscConfig+0x88e>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800422a:	4a09      	ldr	r2, [pc, #36]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 800422c:	2390      	movs	r3, #144	@ 0x90
 800422e:	58d3      	ldr	r3, [r2, r3]
 8004230:	4907      	ldr	r1, [pc, #28]	@ (8004250 <HAL_RCC_OscConfig+0x870>)
 8004232:	2280      	movs	r2, #128	@ 0x80
 8004234:	4393      	bics	r3, r2
 8004236:	2290      	movs	r2, #144	@ 0x90
 8004238:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800423a:	e011      	b.n	8004260 <HAL_RCC_OscConfig+0x880>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fe ff6e 	bl	800311c <HAL_GetTick>
 8004240:	0002      	movs	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	4a05      	ldr	r2, [pc, #20]	@ (800425c <HAL_RCC_OscConfig+0x87c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d909      	bls.n	8004260 <HAL_RCC_OscConfig+0x880>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e133      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
 8004250:	40021000 	.word	0x40021000
 8004254:	0800b404 	.word	0x0800b404
 8004258:	40007000 	.word	0x40007000
 800425c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004260:	4a97      	ldr	r2, [pc, #604]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 8004262:	2390      	movs	r3, #144	@ 0x90
 8004264:	58d2      	ldr	r2, [r2, r3]
 8004266:	2380      	movs	r3, #128	@ 0x80
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	4013      	ands	r3, r2
 800426c:	d1e6      	bne.n	800423c <HAL_RCC_OscConfig+0x85c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800426e:	231f      	movs	r3, #31
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d105      	bne.n	8004284 <HAL_RCC_OscConfig+0x8a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004278:	4b91      	ldr	r3, [pc, #580]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 800427a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800427c:	4b90      	ldr	r3, [pc, #576]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 800427e:	4991      	ldr	r1, [pc, #580]	@ (80044c4 <HAL_RCC_OscConfig+0xae4>)
 8004280:	400a      	ands	r2, r1
 8004282:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00d      	beq.n	80042a8 <HAL_RCC_OscConfig+0x8c8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	2b01      	cmp	r3, #1
 8004292:	d009      	beq.n	80042a8 <HAL_RCC_OscConfig+0x8c8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	2b02      	cmp	r3, #2
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_OscConfig+0x8c8>
 800429c:	4a8a      	ldr	r2, [pc, #552]	@ (80044c8 <HAL_RCC_OscConfig+0xae8>)
 800429e:	4b8b      	ldr	r3, [pc, #556]	@ (80044cc <HAL_RCC_OscConfig+0xaec>)
 80042a0:	0011      	movs	r1, r2
 80042a2:	0018      	movs	r0, r3
 80042a4:	f7fe fcae 	bl	8002c04 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d100      	bne.n	80042b2 <HAL_RCC_OscConfig+0x8d2>
 80042b0:	e101      	b.n	80044b6 <HAL_RCC_OscConfig+0xad6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b2:	4b83      	ldr	r3, [pc, #524]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2238      	movs	r2, #56	@ 0x38
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b18      	cmp	r3, #24
 80042bc:	d100      	bne.n	80042c0 <HAL_RCC_OscConfig+0x8e0>
 80042be:	e0f8      	b.n	80044b2 <HAL_RCC_OscConfig+0xad2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d000      	beq.n	80042ca <HAL_RCC_OscConfig+0x8ea>
 80042c8:	e0d8      	b.n	800447c <HAL_RCC_OscConfig+0xa9c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d012      	beq.n	80042f8 <HAL_RCC_OscConfig+0x918>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d00e      	beq.n	80042f8 <HAL_RCC_OscConfig+0x918>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCC_OscConfig+0x918>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d006      	beq.n	80042f8 <HAL_RCC_OscConfig+0x918>
 80042ea:	23ca      	movs	r3, #202	@ 0xca
 80042ec:	009a      	lsls	r2, r3, #2
 80042ee:	4b77      	ldr	r3, [pc, #476]	@ (80044cc <HAL_RCC_OscConfig+0xaec>)
 80042f0:	0011      	movs	r1, r2
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7fe fc86 	bl	8002c04 <assert_failed>
        assert_param(IS_RCC_PLL_DIVM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d021      	beq.n	8004344 <HAL_RCC_OscConfig+0x964>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004304:	2b10      	cmp	r3, #16
 8004306:	d01d      	beq.n	8004344 <HAL_RCC_OscConfig+0x964>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430c:	2b20      	cmp	r3, #32
 800430e:	d019      	beq.n	8004344 <HAL_RCC_OscConfig+0x964>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004314:	2b30      	cmp	r3, #48	@ 0x30
 8004316:	d015      	beq.n	8004344 <HAL_RCC_OscConfig+0x964>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431c:	2b40      	cmp	r3, #64	@ 0x40
 800431e:	d011      	beq.n	8004344 <HAL_RCC_OscConfig+0x964>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004324:	2b50      	cmp	r3, #80	@ 0x50
 8004326:	d00d      	beq.n	8004344 <HAL_RCC_OscConfig+0x964>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	2b60      	cmp	r3, #96	@ 0x60
 800432e:	d009      	beq.n	8004344 <HAL_RCC_OscConfig+0x964>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	2b70      	cmp	r3, #112	@ 0x70
 8004336:	d005      	beq.n	8004344 <HAL_RCC_OscConfig+0x964>
 8004338:	4a65      	ldr	r2, [pc, #404]	@ (80044d0 <HAL_RCC_OscConfig+0xaf0>)
 800433a:	4b64      	ldr	r3, [pc, #400]	@ (80044cc <HAL_RCC_OscConfig+0xaec>)
 800433c:	0011      	movs	r1, r2
 800433e:	0018      	movs	r0, r3
 8004340:	f7fe fc60 	bl	8002c04 <assert_failed>
        assert_param(IS_RCC_PLL_MULN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004348:	2b03      	cmp	r3, #3
 800434a:	d903      	bls.n	8004354 <HAL_RCC_OscConfig+0x974>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004350:	2b7f      	cmp	r3, #127	@ 0x7f
 8004352:	d905      	bls.n	8004360 <HAL_RCC_OscConfig+0x980>
 8004354:	4a5f      	ldr	r2, [pc, #380]	@ (80044d4 <HAL_RCC_OscConfig+0xaf4>)
 8004356:	4b5d      	ldr	r3, [pc, #372]	@ (80044cc <HAL_RCC_OscConfig+0xaec>)
 8004358:	0011      	movs	r1, r2
 800435a:	0018      	movs	r0, r3
 800435c:	f7fe fc52 	bl	8002c04 <assert_failed>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	029b      	lsls	r3, r3, #10
 8004368:	429a      	cmp	r2, r3
 800436a:	d305      	bcc.n	8004378 <HAL_RCC_OscConfig+0x998>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004370:	23f8      	movs	r3, #248	@ 0xf8
 8004372:	039b      	lsls	r3, r3, #14
 8004374:	429a      	cmp	r2, r3
 8004376:	d905      	bls.n	8004384 <HAL_RCC_OscConfig+0x9a4>
 8004378:	4a57      	ldr	r2, [pc, #348]	@ (80044d8 <HAL_RCC_OscConfig+0xaf8>)
 800437a:	4b54      	ldr	r3, [pc, #336]	@ (80044cc <HAL_RCC_OscConfig+0xaec>)
 800437c:	0011      	movs	r1, r2
 800437e:	0018      	movs	r0, r3
 8004380:	f7fe fc40 	bl	8002c04 <assert_failed>
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004388:	2380      	movs	r3, #128	@ 0x80
 800438a:	049b      	lsls	r3, r3, #18
 800438c:	429a      	cmp	r2, r3
 800438e:	d305      	bcc.n	800439c <HAL_RCC_OscConfig+0x9bc>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004394:	23e0      	movs	r3, #224	@ 0xe0
 8004396:	051b      	lsls	r3, r3, #20
 8004398:	429a      	cmp	r2, r3
 800439a:	d906      	bls.n	80043aa <HAL_RCC_OscConfig+0x9ca>
 800439c:	23cb      	movs	r3, #203	@ 0xcb
 800439e:	009a      	lsls	r2, r3, #2
 80043a0:	4b4a      	ldr	r3, [pc, #296]	@ (80044cc <HAL_RCC_OscConfig+0xaec>)
 80043a2:	0011      	movs	r1, r2
 80043a4:	0018      	movs	r0, r3
 80043a6:	f7fe fc2d 	bl	8002c04 <assert_failed>
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043ae:	2380      	movs	r3, #128	@ 0x80
 80043b0:	059b      	lsls	r3, r3, #22
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d305      	bcc.n	80043c2 <HAL_RCC_OscConfig+0x9e2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043ba:	23e0      	movs	r3, #224	@ 0xe0
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	429a      	cmp	r2, r3
 80043c0:	d905      	bls.n	80043ce <HAL_RCC_OscConfig+0x9ee>
 80043c2:	4a46      	ldr	r2, [pc, #280]	@ (80044dc <HAL_RCC_OscConfig+0xafc>)
 80043c4:	4b41      	ldr	r3, [pc, #260]	@ (80044cc <HAL_RCC_OscConfig+0xaec>)
 80043c6:	0011      	movs	r1, r2
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7fe fc1b 	bl	8002c04 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ce:	4b3c      	ldr	r3, [pc, #240]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b3b      	ldr	r3, [pc, #236]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 80043d4:	4942      	ldr	r1, [pc, #264]	@ (80044e0 <HAL_RCC_OscConfig+0xb00>)
 80043d6:	400a      	ands	r2, r1
 80043d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fe fe9f 	bl	800311c <HAL_GetTick>
 80043de:	0003      	movs	r3, r0
 80043e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0xa16>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fe fe9a 	bl	800311c <HAL_GetTick>
 80043e8:	0002      	movs	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0xa16>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e060      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f6:	4b32      	ldr	r3, [pc, #200]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	2380      	movs	r3, #128	@ 0x80
 80043fc:	049b      	lsls	r3, r3, #18
 80043fe:	4013      	ands	r3, r2
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0xa04>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004402:	4b2f      	ldr	r3, [pc, #188]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	4a37      	ldr	r2, [pc, #220]	@ (80044e4 <HAL_RCC_OscConfig+0xb04>)
 8004408:	4013      	ands	r3, r2
 800440a:	0019      	movs	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442e:	431a      	orrs	r2, r3
 8004430:	4b23      	ldr	r3, [pc, #140]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 8004432:	430a      	orrs	r2, r1
 8004434:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8004436:	4b22      	ldr	r3, [pc, #136]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	4b21      	ldr	r3, [pc, #132]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 800443c:	2180      	movs	r1, #128	@ 0x80
 800443e:	0549      	lsls	r1, r1, #21
 8004440:	430a      	orrs	r2, r1
 8004442:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004444:	4b1e      	ldr	r3, [pc, #120]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 800444a:	2180      	movs	r1, #128	@ 0x80
 800444c:	0449      	lsls	r1, r1, #17
 800444e:	430a      	orrs	r2, r1
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fe fe63 	bl	800311c <HAL_GetTick>
 8004456:	0003      	movs	r3, r0
 8004458:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xa8e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7fe fe5e 	bl	800311c <HAL_GetTick>
 8004460:	0002      	movs	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xa8e>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e024      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446e:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	2380      	movs	r3, #128	@ 0x80
 8004474:	049b      	lsls	r3, r3, #18
 8004476:	4013      	ands	r3, r2
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0xa7c>
 800447a:	e01c      	b.n	80044b6 <HAL_RCC_OscConfig+0xad6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447c:	4b10      	ldr	r3, [pc, #64]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b0f      	ldr	r3, [pc, #60]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 8004482:	4917      	ldr	r1, [pc, #92]	@ (80044e0 <HAL_RCC_OscConfig+0xb00>)
 8004484:	400a      	ands	r2, r1
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fe fe48 	bl	800311c <HAL_GetTick>
 800448c:	0003      	movs	r3, r0
 800448e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0xac4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004492:	f7fe fe43 	bl	800311c <HAL_GetTick>
 8004496:	0002      	movs	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0xac4>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e009      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a4:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <HAL_RCC_OscConfig+0xae0>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	2380      	movs	r3, #128	@ 0x80
 80044aa:	049b      	lsls	r3, r3, #18
 80044ac:	4013      	ands	r3, r2
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCC_OscConfig+0xab2>
 80044b0:	e001      	b.n	80044b6 <HAL_RCC_OscConfig+0xad6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <HAL_RCC_OscConfig+0xad8>
    }
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b008      	add	sp, #32
 80044be:	bdb0      	pop	{r4, r5, r7, pc}
 80044c0:	40021000 	.word	0x40021000
 80044c4:	efffffff 	.word	0xefffffff
 80044c8:	0000031e 	.word	0x0000031e
 80044cc:	0800b404 	.word	0x0800b404
 80044d0:	00000329 	.word	0x00000329
 80044d4:	0000032a 	.word	0x0000032a
 80044d8:	0000032b 	.word	0x0000032b
 80044dc:	0000032d 	.word	0x0000032d
 80044e0:	feffffff 	.word	0xfeffffff
 80044e4:	11c1808c 	.word	0x11c1808c

080044e8 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e8:	b5b0      	push	{r4, r5, r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <HAL_RCC_ClockConfig+0x1e>
 80044f8:	23de      	movs	r3, #222	@ 0xde
 80044fa:	009a      	lsls	r2, r3, #2
 80044fc:	4bbb      	ldr	r3, [pc, #748]	@ (80047ec <HAL_RCC_ClockConfig+0x304>)
 80044fe:	0011      	movs	r1, r2
 8004500:	0018      	movs	r0, r3
 8004502:	f7fe fb7f 	bl	8002c04 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE((uint8_t)RCC_ClkInitStruct->ClockType));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d004      	beq.n	800451a <HAL_RCC_ClockConfig+0x32>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b1f      	cmp	r3, #31
 8004518:	d905      	bls.n	8004526 <HAL_RCC_ClockConfig+0x3e>
 800451a:	4ab5      	ldr	r2, [pc, #724]	@ (80047f0 <HAL_RCC_ClockConfig+0x308>)
 800451c:	4bb3      	ldr	r3, [pc, #716]	@ (80047ec <HAL_RCC_ClockConfig+0x304>)
 800451e:	0011      	movs	r1, r2
 8004520:	0018      	movs	r0, r3
 8004522:	f7fe fb6f 	bl	8002c04 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00b      	beq.n	8004544 <HAL_RCC_ClockConfig+0x5c>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d008      	beq.n	8004544 <HAL_RCC_ClockConfig+0x5c>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d005      	beq.n	8004544 <HAL_RCC_ClockConfig+0x5c>
 8004538:	4aae      	ldr	r2, [pc, #696]	@ (80047f4 <HAL_RCC_ClockConfig+0x30c>)
 800453a:	4bac      	ldr	r3, [pc, #688]	@ (80047ec <HAL_RCC_ClockConfig+0x304>)
 800453c:	0011      	movs	r1, r2
 800453e:	0018      	movs	r0, r3
 8004540:	f7fe fb60 	bl	8002c04 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004544:	4bac      	ldr	r3, [pc, #688]	@ (80047f8 <HAL_RCC_ClockConfig+0x310>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2207      	movs	r2, #7
 800454a:	4013      	ands	r3, r2
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d911      	bls.n	8004576 <HAL_RCC_ClockConfig+0x8e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4ba9      	ldr	r3, [pc, #676]	@ (80047f8 <HAL_RCC_ClockConfig+0x310>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2207      	movs	r2, #7
 8004558:	4393      	bics	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	4ba6      	ldr	r3, [pc, #664]	@ (80047f8 <HAL_RCC_ClockConfig+0x310>)
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004564:	4ba4      	ldr	r3, [pc, #656]	@ (80047f8 <HAL_RCC_ClockConfig+0x310>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2207      	movs	r2, #7
 800456a:	4013      	ands	r3, r2
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d001      	beq.n	8004576 <HAL_RCC_ClockConfig+0x8e>
    {
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e136      	b.n	80047e4 <HAL_RCC_ClockConfig+0x2fc>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2201      	movs	r2, #1
 800457c:	4013      	ands	r3, r2
 800457e:	d100      	bne.n	8004582 <HAL_RCC_ClockConfig+0x9a>
 8004580:	e082      	b.n	8004688 <HAL_RCC_ClockConfig+0x1a0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d019      	beq.n	80045be <HAL_RCC_ClockConfig+0xd6>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d015      	beq.n	80045be <HAL_RCC_ClockConfig+0xd6>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d011      	beq.n	80045be <HAL_RCC_ClockConfig+0xd6>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d00d      	beq.n	80045be <HAL_RCC_ClockConfig+0xd6>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d009      	beq.n	80045be <HAL_RCC_ClockConfig+0xd6>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d005      	beq.n	80045be <HAL_RCC_ClockConfig+0xd6>
 80045b2:	4a92      	ldr	r2, [pc, #584]	@ (80047fc <HAL_RCC_ClockConfig+0x314>)
 80045b4:	4b8d      	ldr	r3, [pc, #564]	@ (80047ec <HAL_RCC_ClockConfig+0x304>)
 80045b6:	0011      	movs	r1, r2
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fe fb23 	bl	8002c04 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xee>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	4b8e      	ldr	r3, [pc, #568]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	049b      	lsls	r3, r3, #18
 80045ce:	4013      	ands	r3, r2
 80045d0:	d138      	bne.n	8004644 <HAL_RCC_ClockConfig+0x15c>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e106      	b.n	80047e4 <HAL_RCC_ClockConfig+0x2fc>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0x106>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045de:	4b88      	ldr	r3, [pc, #544]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	029b      	lsls	r3, r3, #10
 80045e6:	4013      	ands	r3, r2
 80045e8:	d12c      	bne.n	8004644 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e0fa      	b.n	80047e4 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_RCC_ClockConfig+0x11c>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045f6:	4b82      	ldr	r3, [pc, #520]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2202      	movs	r2, #2
 80045fc:	4013      	ands	r3, r2
 80045fe:	d121      	bne.n	8004644 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0ef      	b.n	80047e4 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d107      	bne.n	800461c <HAL_RCC_ClockConfig+0x134>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800460c:	4b7c      	ldr	r3, [pc, #496]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	2380      	movs	r3, #128	@ 0x80
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4013      	ands	r3, r2
 8004616:	d115      	bne.n	8004644 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0e3      	b.n	80047e4 <HAL_RCC_ClockConfig+0x2fc>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b04      	cmp	r3, #4
 8004622:	d107      	bne.n	8004634 <HAL_RCC_ClockConfig+0x14c>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004624:	4a76      	ldr	r2, [pc, #472]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 8004626:	2394      	movs	r3, #148	@ 0x94
 8004628:	58d3      	ldr	r3, [r2, r3]
 800462a:	2202      	movs	r2, #2
 800462c:	4013      	ands	r3, r2
 800462e:	d109      	bne.n	8004644 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0d7      	b.n	80047e4 <HAL_RCC_ClockConfig+0x2fc>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004634:	4a72      	ldr	r2, [pc, #456]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 8004636:	2390      	movs	r3, #144	@ 0x90
 8004638:	58d3      	ldr	r3, [r2, r3]
 800463a:	2202      	movs	r2, #2
 800463c:	4013      	ands	r3, r2
 800463e:	d101      	bne.n	8004644 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0cf      	b.n	80047e4 <HAL_RCC_ClockConfig+0x2fc>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004644:	4b6e      	ldr	r3, [pc, #440]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2207      	movs	r2, #7
 800464a:	4393      	bics	r3, r2
 800464c:	0019      	movs	r1, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	4b6b      	ldr	r3, [pc, #428]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 8004654:	430a      	orrs	r2, r1
 8004656:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004658:	f7fe fd60 	bl	800311c <HAL_GetTick>
 800465c:	0003      	movs	r3, r0
 800465e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004660:	e009      	b.n	8004676 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004662:	f7fe fd5b 	bl	800311c <HAL_GetTick>
 8004666:	0002      	movs	r2, r0
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	4a65      	ldr	r2, [pc, #404]	@ (8004804 <HAL_RCC_ClockConfig+0x31c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0b6      	b.n	80047e4 <HAL_RCC_ClockConfig+0x2fc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b62      	ldr	r3, [pc, #392]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2238      	movs	r2, #56	@ 0x38
 800467c:	401a      	ands	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	429a      	cmp	r2, r3
 8004686:	d1ec      	bne.n	8004662 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2202      	movs	r2, #2
 800468e:	4013      	ands	r3, r2
 8004690:	d044      	beq.n	800471c <HAL_RCC_ClockConfig+0x234>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d036      	beq.n	8004708 <HAL_RCC_ClockConfig+0x220>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	2380      	movs	r3, #128	@ 0x80
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d030      	beq.n	8004708 <HAL_RCC_ClockConfig+0x220>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	2390      	movs	r3, #144	@ 0x90
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d02a      	beq.n	8004708 <HAL_RCC_ClockConfig+0x220>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	23a0      	movs	r3, #160	@ 0xa0
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d024      	beq.n	8004708 <HAL_RCC_ClockConfig+0x220>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	23b0      	movs	r3, #176	@ 0xb0
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d01e      	beq.n	8004708 <HAL_RCC_ClockConfig+0x220>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	23c0      	movs	r3, #192	@ 0xc0
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d018      	beq.n	8004708 <HAL_RCC_ClockConfig+0x220>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	23d0      	movs	r3, #208	@ 0xd0
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	429a      	cmp	r2, r3
 80046e0:	d012      	beq.n	8004708 <HAL_RCC_ClockConfig+0x220>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	23e0      	movs	r3, #224	@ 0xe0
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d00c      	beq.n	8004708 <HAL_RCC_ClockConfig+0x220>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	23f0      	movs	r3, #240	@ 0xf0
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d006      	beq.n	8004708 <HAL_RCC_ClockConfig+0x220>
 80046fa:	23f8      	movs	r3, #248	@ 0xf8
 80046fc:	009a      	lsls	r2, r3, #2
 80046fe:	4b3b      	ldr	r3, [pc, #236]	@ (80047ec <HAL_RCC_ClockConfig+0x304>)
 8004700:	0011      	movs	r1, r2
 8004702:	0018      	movs	r0, r3
 8004704:	f7fe fa7e 	bl	8002c04 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b3d      	ldr	r3, [pc, #244]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4a3e      	ldr	r2, [pc, #248]	@ (8004808 <HAL_RCC_ClockConfig+0x320>)
 800470e:	4013      	ands	r3, r2
 8004710:	0019      	movs	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	4b3a      	ldr	r3, [pc, #232]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 8004718:	430a      	orrs	r2, r1
 800471a:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800471c:	4b36      	ldr	r3, [pc, #216]	@ (80047f8 <HAL_RCC_ClockConfig+0x310>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2207      	movs	r2, #7
 8004722:	4013      	ands	r3, r2
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d211      	bcs.n	800474e <HAL_RCC_ClockConfig+0x266>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	4b33      	ldr	r3, [pc, #204]	@ (80047f8 <HAL_RCC_ClockConfig+0x310>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2207      	movs	r2, #7
 8004730:	4393      	bics	r3, r2
 8004732:	0019      	movs	r1, r3
 8004734:	4b30      	ldr	r3, [pc, #192]	@ (80047f8 <HAL_RCC_ClockConfig+0x310>)
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800473c:	4b2e      	ldr	r3, [pc, #184]	@ (80047f8 <HAL_RCC_ClockConfig+0x310>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2207      	movs	r2, #7
 8004742:	4013      	ands	r3, r2
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d001      	beq.n	800474e <HAL_RCC_ClockConfig+0x266>
    {
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e04a      	b.n	80047e4 <HAL_RCC_ClockConfig+0x2fc>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2204      	movs	r2, #4
 8004754:	4013      	ands	r3, r2
 8004756:	d02b      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x2c8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01d      	beq.n	800479c <HAL_RCC_ClockConfig+0x2b4>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	2380      	movs	r3, #128	@ 0x80
 8004766:	01db      	lsls	r3, r3, #7
 8004768:	429a      	cmp	r2, r3
 800476a:	d017      	beq.n	800479c <HAL_RCC_ClockConfig+0x2b4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	23a0      	movs	r3, #160	@ 0xa0
 8004772:	01db      	lsls	r3, r3, #7
 8004774:	429a      	cmp	r2, r3
 8004776:	d011      	beq.n	800479c <HAL_RCC_ClockConfig+0x2b4>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	23c0      	movs	r3, #192	@ 0xc0
 800477e:	01db      	lsls	r3, r3, #7
 8004780:	429a      	cmp	r2, r3
 8004782:	d00b      	beq.n	800479c <HAL_RCC_ClockConfig+0x2b4>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	23e0      	movs	r3, #224	@ 0xe0
 800478a:	01db      	lsls	r3, r3, #7
 800478c:	429a      	cmp	r2, r3
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x2b4>
 8004790:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <HAL_RCC_ClockConfig+0x324>)
 8004792:	4b16      	ldr	r3, [pc, #88]	@ (80047ec <HAL_RCC_ClockConfig+0x304>)
 8004794:	0011      	movs	r1, r2
 8004796:	0018      	movs	r0, r3
 8004798:	f7fe fa34 	bl	8002c04 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b18      	ldr	r3, [pc, #96]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004810 <HAL_RCC_ClockConfig+0x328>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	0019      	movs	r1, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	4b15      	ldr	r3, [pc, #84]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 80047ac:	430a      	orrs	r2, r1
 80047ae:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80047b0:	f000 f834 	bl	800481c <HAL_RCC_GetSysClockFreq>
 80047b4:	0001      	movs	r1, r0
 80047b6:	4b12      	ldr	r3, [pc, #72]	@ (8004800 <HAL_RCC_ClockConfig+0x318>)
 80047b8:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	220f      	movs	r2, #15
 80047be:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80047c0:	4a14      	ldr	r2, [pc, #80]	@ (8004814 <HAL_RCC_ClockConfig+0x32c>)
 80047c2:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047c4:	001a      	movs	r2, r3
 80047c6:	231f      	movs	r3, #31
 80047c8:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80047ca:	000a      	movs	r2, r1
 80047cc:	40da      	lsrs	r2, r3
 80047ce:	4b12      	ldr	r3, [pc, #72]	@ (8004818 <HAL_RCC_ClockConfig+0x330>)
 80047d0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80047d2:	250b      	movs	r5, #11
 80047d4:	197c      	adds	r4, r7, r5
 80047d6:	2003      	movs	r0, #3
 80047d8:	f7fe fc46 	bl	8003068 <HAL_InitTick>
 80047dc:	0003      	movs	r3, r0
 80047de:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80047e0:	197b      	adds	r3, r7, r5
 80047e2:	781b      	ldrb	r3, [r3, #0]
}
 80047e4:	0018      	movs	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b004      	add	sp, #16
 80047ea:	bdb0      	pop	{r4, r5, r7, pc}
 80047ec:	0800b404 	.word	0x0800b404
 80047f0:	00000379 	.word	0x00000379
 80047f4:	0000037a 	.word	0x0000037a
 80047f8:	40022000 	.word	0x40022000
 80047fc:	00000391 	.word	0x00000391
 8004800:	40021000 	.word	0x40021000
 8004804:	00001388 	.word	0x00001388
 8004808:	fffff0ff 	.word	0xfffff0ff
 800480c:	000003f5 	.word	0x000003f5
 8004810:	ffff8fff 	.word	0xffff8fff
 8004814:	0800b730 	.word	0x0800b730
 8004818:	20000014 	.word	0x20000014

0800481c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800482a:	4b46      	ldr	r3, [pc, #280]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x128>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2238      	movs	r2, #56	@ 0x38
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004834:	4b43      	ldr	r3, [pc, #268]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x128>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2203      	movs	r2, #3
 800483a:	4013      	ands	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_GetSysClockFreq+0x34>
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b18      	cmp	r3, #24
 8004848:	d125      	bne.n	8004896 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d122      	bne.n	8004896 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004850:	4b3c      	ldr	r3, [pc, #240]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x128>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2208      	movs	r2, #8
 8004856:	4013      	ands	r3, r2
 8004858:	d107      	bne.n	800486a <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 800485a:	4a3a      	ldr	r2, [pc, #232]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x128>)
 800485c:	2394      	movs	r3, #148	@ 0x94
 800485e:	58d3      	ldr	r3, [r2, r3]
 8004860:	0a1b      	lsrs	r3, r3, #8
 8004862:	220f      	movs	r2, #15
 8004864:	4013      	ands	r3, r2
 8004866:	627b      	str	r3, [r7, #36]	@ 0x24
 8004868:	e005      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800486a:	4b36      	ldr	r3, [pc, #216]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x128>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	091b      	lsrs	r3, r3, #4
 8004870:	220f      	movs	r2, #15
 8004872:	4013      	ands	r3, r2
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	2b0b      	cmp	r3, #11
 800487a:	d901      	bls.n	8004880 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8004880:	4b31      	ldr	r3, [pc, #196]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004884:	0092      	lsls	r2, r2, #2
 8004886:	58d3      	ldr	r3, [r2, r3]
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11b      	bne.n	80048c8 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004892:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004894:	e018      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d102      	bne.n	80048a2 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800489c:	4b2b      	ldr	r3, [pc, #172]	@ (800494c <HAL_RCC_GetSysClockFreq+0x130>)
 800489e:	623b      	str	r3, [r7, #32]
 80048a0:	e012      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d102      	bne.n	80048ae <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048a8:	4b29      	ldr	r3, [pc, #164]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x134>)
 80048aa:	623b      	str	r3, [r7, #32]
 80048ac:	e00c      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d103      	bne.n	80048bc <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80048b4:	23fa      	movs	r3, #250	@ 0xfa
 80048b6:	01db      	lsls	r3, r3, #7
 80048b8:	623b      	str	r3, [r7, #32]
 80048ba:	e005      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b28      	cmp	r3, #40	@ 0x28
 80048c0:	d102      	bne.n	80048c8 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80048c2:	2380      	movs	r3, #128	@ 0x80
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b18      	cmp	r3, #24
 80048cc:	d135      	bne.n	800493a <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x128>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2203      	movs	r2, #3
 80048d4:	4013      	ands	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x128>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	2207      	movs	r2, #7
 80048e0:	4013      	ands	r3, r2
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d003      	beq.n	80048f4 <HAL_RCC_GetSysClockFreq+0xd8>
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d003      	beq.n	80048fa <HAL_RCC_GetSysClockFreq+0xde>
 80048f2:	e005      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80048f4:	4b15      	ldr	r3, [pc, #84]	@ (800494c <HAL_RCC_GetSysClockFreq+0x130>)
 80048f6:	61fb      	str	r3, [r7, #28]
        break;
 80048f8:	e005      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80048fa:	4b15      	ldr	r3, [pc, #84]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x134>)
 80048fc:	61fb      	str	r3, [r7, #28]
        break;
 80048fe:	e002      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	61fb      	str	r3, [r7, #28]
        break;
 8004904:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8004906:	4b0f      	ldr	r3, [pc, #60]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x128>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	227f      	movs	r2, #127	@ 0x7f
 800490e:	4013      	ands	r3, r2
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	4353      	muls	r3, r2
 8004914:	68f9      	ldr	r1, [r7, #12]
 8004916:	0018      	movs	r0, r3
 8004918:	f7fb fc08 	bl	800012c <__udivsi3>
 800491c:	0003      	movs	r3, r0
 800491e:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004920:	4b08      	ldr	r3, [pc, #32]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x128>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	0f5b      	lsrs	r3, r3, #29
 8004926:	2207      	movs	r2, #7
 8004928:	4013      	ands	r3, r2
 800492a:	3301      	adds	r3, #1
 800492c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	68b8      	ldr	r0, [r7, #8]
 8004932:	f7fb fbfb 	bl	800012c <__udivsi3>
 8004936:	0003      	movs	r3, r0
 8004938:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800493a:	6a3b      	ldr	r3, [r7, #32]
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	b00a      	add	sp, #40	@ 0x28
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	0800b748 	.word	0x0800b748
 800494c:	00f42400 	.word	0x00f42400
 8004950:	007a1200 	.word	0x007a1200

08004954 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004958:	4b02      	ldr	r3, [pc, #8]	@ (8004964 <HAL_RCC_GetHCLKFreq+0x10>)
 800495a:	681b      	ldr	r3, [r3, #0]
}
 800495c:	0018      	movs	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	20000014 	.word	0x20000014

08004968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 800496c:	f7ff fff2 	bl	8004954 <HAL_RCC_GetHCLKFreq>
 8004970:	0001      	movs	r1, r0
 8004972:	4b07      	ldr	r3, [pc, #28]	@ (8004990 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	0b1b      	lsrs	r3, r3, #12
 8004978:	2207      	movs	r2, #7
 800497a:	4013      	ands	r3, r2
 800497c:	4a05      	ldr	r2, [pc, #20]	@ (8004994 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800497e:	5cd3      	ldrb	r3, [r2, r3]
 8004980:	001a      	movs	r2, r3
 8004982:	231f      	movs	r3, #31
 8004984:	4013      	ands	r3, r2
 8004986:	40d9      	lsrs	r1, r3
 8004988:	000b      	movs	r3, r1
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	0800b740 	.word	0x0800b740

08004998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80049a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049a8:	2380      	movs	r3, #128	@ 0x80
 80049aa:	055b      	lsls	r3, r3, #21
 80049ac:	4013      	ands	r3, r2
 80049ae:	d004      	beq.n	80049ba <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049b0:	f7ff f80a 	bl	80039c8 <HAL_PWREx_GetVoltageRange>
 80049b4:	0003      	movs	r3, r0
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	e017      	b.n	80049ea <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80049bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049be:	4b29      	ldr	r3, [pc, #164]	@ (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80049c0:	2180      	movs	r1, #128	@ 0x80
 80049c2:	0549      	lsls	r1, r1, #21
 80049c4:	430a      	orrs	r2, r1
 80049c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80049c8:	4b26      	ldr	r3, [pc, #152]	@ (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80049ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049cc:	2380      	movs	r3, #128	@ 0x80
 80049ce:	055b      	lsls	r3, r3, #21
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049d6:	f7fe fff7 	bl	80039c8 <HAL_PWREx_GetVoltageRange>
 80049da:	0003      	movs	r3, r0
 80049dc:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049de:	4b21      	ldr	r3, [pc, #132]	@ (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80049e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049e2:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80049e4:	4920      	ldr	r1, [pc, #128]	@ (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80049e6:	400a      	ands	r2, r1
 80049e8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	2380      	movs	r3, #128	@ 0x80
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d111      	bne.n	8004a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b80      	cmp	r3, #128	@ 0x80
 80049f8:	d91c      	bls.n	8004a34 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2bb0      	cmp	r3, #176	@ 0xb0
 80049fe:	d902      	bls.n	8004a06 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a00:	2302      	movs	r3, #2
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	e016      	b.n	8004a34 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b90      	cmp	r3, #144	@ 0x90
 8004a0a:	d902      	bls.n	8004a12 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	e010      	b.n	8004a34 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	e00d      	b.n	8004a34 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a1c:	d902      	bls.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8004a1e:	2302      	movs	r3, #2
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	e007      	b.n	8004a34 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b70      	cmp	r3, #112	@ 0x70
 8004a28:	d102      	bne.n	8004a30 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	e001      	b.n	8004a34 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004a30:	2300      	movs	r3, #0
 8004a32:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a34:	4b0d      	ldr	r3, [pc, #52]	@ (8004a6c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2207      	movs	r2, #7
 8004a3a:	4393      	bics	r3, r2
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a6c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004a46:	4b09      	ldr	r3, [pc, #36]	@ (8004a6c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2207      	movs	r2, #7
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b006      	add	sp, #24
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			@ (mov r8, r8)
 8004a64:	40021000 	.word	0x40021000
 8004a68:	efffffff 	.word	0xefffffff
 8004a6c:	40022000 	.word	0x40022000

08004a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a78:	2313      	movs	r3, #19
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a80:	2312      	movs	r3, #18
 8004a82:	18fb      	adds	r3, r7, r3
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a66      	ldr	r2, [pc, #408]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d004      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a65      	ldr	r2, [pc, #404]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8004a9c:	4b64      	ldr	r3, [pc, #400]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a9e:	217a      	movs	r1, #122	@ 0x7a
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7fe f8af 	bl	8002c04 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	2380      	movs	r3, #128	@ 0x80
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d100      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ab2:	e0da      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab4:	2311      	movs	r3, #17
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d016      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d010      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ad4:	2380      	movs	r3, #128	@ 0x80
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ae0:	23c0      	movs	r3, #192	@ 0xc0
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d004      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004ae8:	4b51      	ldr	r3, [pc, #324]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aea:	2182      	movs	r1, #130	@ 0x82
 8004aec:	0018      	movs	r0, r3
 8004aee:	f7fe f889 	bl	8002c04 <assert_failed>

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af2:	4b50      	ldr	r3, [pc, #320]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004af4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004af6:	2380      	movs	r3, #128	@ 0x80
 8004af8:	055b      	lsls	r3, r3, #21
 8004afa:	4013      	ands	r3, r2
 8004afc:	d111      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afe:	4b4d      	ldr	r3, [pc, #308]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004b00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b02:	4b4c      	ldr	r3, [pc, #304]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004b04:	2180      	movs	r1, #128	@ 0x80
 8004b06:	0549      	lsls	r1, r1, #21
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b0c:	4b49      	ldr	r3, [pc, #292]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004b0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	055b      	lsls	r3, r3, #21
 8004b14:	4013      	ands	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1a:	2311      	movs	r3, #17
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	2201      	movs	r2, #1
 8004b20:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b22:	4b45      	ldr	r3, [pc, #276]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b44      	ldr	r3, [pc, #272]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004b28:	2180      	movs	r1, #128	@ 0x80
 8004b2a:	0049      	lsls	r1, r1, #1
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b30:	f7fe faf4 	bl	800311c <HAL_GetTick>
 8004b34:	0003      	movs	r3, r0
 8004b36:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b38:	e00b      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b3a:	f7fe faef 	bl	800311c <HAL_GetTick>
 8004b3e:	0002      	movs	r2, r0
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d904      	bls.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
      {
        ret = HAL_TIMEOUT;
 8004b48:	2313      	movs	r3, #19
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	701a      	strb	r2, [r3, #0]
        break;
 8004b50:	e005      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xee>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b52:	4b39      	ldr	r3, [pc, #228]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	2380      	movs	r3, #128	@ 0x80
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d0ed      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xca>
      }
    }

    if (ret == HAL_OK)
 8004b5e:	2313      	movs	r3, #19
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d000      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004b68:	e06e      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b6a:	4a32      	ldr	r2, [pc, #200]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004b6c:	2390      	movs	r3, #144	@ 0x90
 8004b6e:	58d2      	ldr	r2, [r2, r3]
 8004b70:	23c0      	movs	r3, #192	@ 0xc0
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4013      	ands	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01f      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d01a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b88:	4a2a      	ldr	r2, [pc, #168]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004b8a:	2390      	movs	r3, #144	@ 0x90
 8004b8c:	58d3      	ldr	r3, [r2, r3]
 8004b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b94:	4a27      	ldr	r2, [pc, #156]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004b96:	2390      	movs	r3, #144	@ 0x90
 8004b98:	58d3      	ldr	r3, [r2, r3]
 8004b9a:	4926      	ldr	r1, [pc, #152]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004b9c:	2280      	movs	r2, #128	@ 0x80
 8004b9e:	0252      	lsls	r2, r2, #9
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	2290      	movs	r2, #144	@ 0x90
 8004ba4:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba6:	4a23      	ldr	r2, [pc, #140]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ba8:	2390      	movs	r3, #144	@ 0x90
 8004baa:	58d3      	ldr	r3, [r2, r3]
 8004bac:	4921      	ldr	r1, [pc, #132]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004bae:	4a24      	ldr	r2, [pc, #144]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2290      	movs	r2, #144	@ 0x90
 8004bb4:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bb6:	491f      	ldr	r1, [pc, #124]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004bb8:	2290      	movs	r2, #144	@ 0x90
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d017      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fe faa9 	bl	800311c <HAL_GetTick>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bce:	e00c      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd0:	f7fe faa4 	bl	800311c <HAL_GetTick>
 8004bd4:	0002      	movs	r2, r0
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	4a1a      	ldr	r2, [pc, #104]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d904      	bls.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            ret = HAL_TIMEOUT;
 8004be0:	2313      	movs	r3, #19
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	2203      	movs	r2, #3
 8004be6:	701a      	strb	r2, [r3, #0]
            break;
 8004be8:	e005      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bea:	4a12      	ldr	r2, [pc, #72]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004bec:	2390      	movs	r3, #144	@ 0x90
 8004bee:	58d3      	ldr	r3, [r2, r3]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d0ec      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if (ret == HAL_OK)
 8004bf6:	2313      	movs	r3, #19
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10b      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c00:	4a0c      	ldr	r2, [pc, #48]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c02:	2390      	movs	r3, #144	@ 0x90
 8004c04:	58d3      	ldr	r3, [r2, r3]
 8004c06:	4a0d      	ldr	r2, [pc, #52]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c08:	401a      	ands	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c0e:	4909      	ldr	r1, [pc, #36]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	2290      	movs	r2, #144	@ 0x90
 8004c14:	508b      	str	r3, [r1, r2]
 8004c16:	e01d      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c18:	2312      	movs	r3, #18
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	2213      	movs	r2, #19
 8004c1e:	18ba      	adds	r2, r7, r2
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	e016      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	0003edfb 	.word	0x0003edfb
 8004c2c:	fffc1204 	.word	0xfffc1204
 8004c30:	0800b43c 	.word	0x0800b43c
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	fffffcff 	.word	0xfffffcff
 8004c40:	fffeffff 	.word	0xfffeffff
 8004c44:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c48:	2312      	movs	r3, #18
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	2213      	movs	r2, #19
 8004c4e:	18ba      	adds	r2, r7, r2
 8004c50:	7812      	ldrb	r2, [r2, #0]
 8004c52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c54:	2311      	movs	r3, #17
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d105      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5e:	4bc5      	ldr	r3, [pc, #788]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c62:	4bc4      	ldr	r3, [pc, #784]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c64:	49c4      	ldr	r1, [pc, #784]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8004c66:	400a      	ands	r2, r1
 8004c68:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	4013      	ands	r3, r2
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d010      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d00c      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d008      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d004      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8004c94:	4bb9      	ldr	r3, [pc, #740]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c96:	21d7      	movs	r1, #215	@ 0xd7
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7fd ffb3 	bl	8002c04 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c9e:	4ab5      	ldr	r2, [pc, #724]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ca0:	2388      	movs	r3, #136	@ 0x88
 8004ca2:	58d3      	ldr	r3, [r2, r3]
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	4393      	bics	r3, r2
 8004ca8:	001a      	movs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	49b1      	ldr	r1, [pc, #708]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	2288      	movs	r2, #136	@ 0x88
 8004cb4:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d020      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d010      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d00c      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d008      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b0c      	cmp	r3, #12
 8004cde:	d004      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004ce0:	4ba6      	ldr	r3, [pc, #664]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ce2:	21e1      	movs	r1, #225	@ 0xe1
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f7fd ff8d 	bl	8002c04 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cea:	4aa2      	ldr	r2, [pc, #648]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004cec:	2388      	movs	r3, #136	@ 0x88
 8004cee:	58d3      	ldr	r3, [r2, r3]
 8004cf0:	220c      	movs	r2, #12
 8004cf2:	4393      	bics	r3, r2
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	499e      	ldr	r1, [pc, #632]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	2288      	movs	r2, #136	@ 0x88
 8004d00:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2210      	movs	r2, #16
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d025      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d016      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	2380      	movs	r3, #128	@ 0x80
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d010      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	2380      	movs	r3, #128	@ 0x80
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	23c0      	movs	r3, #192	@ 0xc0
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d004      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d38:	4b90      	ldr	r3, [pc, #576]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d3a:	21eb      	movs	r1, #235	@ 0xeb
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7fd ff61 	bl	8002c04 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d42:	4a8c      	ldr	r2, [pc, #560]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d44:	2388      	movs	r3, #136	@ 0x88
 8004d46:	58d3      	ldr	r3, [r2, r3]
 8004d48:	4a8d      	ldr	r2, [pc, #564]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	4988      	ldr	r1, [pc, #544]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	2288      	movs	r2, #136	@ 0x88
 8004d56:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d025      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d016      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	2380      	movs	r3, #128	@ 0x80
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d010      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	2380      	movs	r3, #128	@ 0x80
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	23c0      	movs	r3, #192	@ 0xc0
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d004      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004d8e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d90:	21f5      	movs	r1, #245	@ 0xf5
 8004d92:	0018      	movs	r0, r3
 8004d94:	f7fd ff36 	bl	8002c04 <assert_failed>

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004d98:	4a76      	ldr	r2, [pc, #472]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d9a:	2388      	movs	r3, #136	@ 0x88
 8004d9c:	58d3      	ldr	r3, [r2, r3]
 8004d9e:	4a79      	ldr	r2, [pc, #484]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004da0:	401a      	ands	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	4973      	ldr	r1, [pc, #460]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	2288      	movs	r2, #136	@ 0x88
 8004dac:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2220      	movs	r2, #32
 8004db4:	4013      	ands	r3, r2
 8004db6:	d022      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d013      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	2380      	movs	r3, #128	@ 0x80
 8004dc6:	015b      	lsls	r3, r3, #5
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	2380      	movs	r3, #128	@ 0x80
 8004dd2:	019b      	lsls	r3, r3, #6
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d007      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004dd8:	230a      	movs	r3, #10
 8004dda:	33ff      	adds	r3, #255	@ 0xff
 8004ddc:	001a      	movs	r2, r3
 8004dde:	4b67      	ldr	r3, [pc, #412]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004de0:	0011      	movs	r1, r2
 8004de2:	0018      	movs	r0, r3
 8004de4:	f7fd ff0e 	bl	8002c04 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004de8:	4a62      	ldr	r2, [pc, #392]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004dea:	2388      	movs	r3, #136	@ 0x88
 8004dec:	58d3      	ldr	r3, [r2, r3]
 8004dee:	4a66      	ldr	r2, [pc, #408]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x518>)
 8004df0:	401a      	ands	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	495f      	ldr	r1, [pc, #380]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	2288      	movs	r2, #136	@ 0x88
 8004dfc:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2240      	movs	r2, #64	@ 0x40
 8004e04:	4013      	ands	r3, r2
 8004e06:	d022      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d013      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	2380      	movs	r3, #128	@ 0x80
 8004e16:	025b      	lsls	r3, r3, #9
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d00d      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	2380      	movs	r3, #128	@ 0x80
 8004e22:	029b      	lsls	r3, r3, #10
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d007      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8004e28:	2314      	movs	r3, #20
 8004e2a:	33ff      	adds	r3, #255	@ 0xff
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	4b53      	ldr	r3, [pc, #332]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e30:	0011      	movs	r1, r2
 8004e32:	0018      	movs	r0, r3
 8004e34:	f7fd fee6 	bl	8002c04 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e38:	4a4e      	ldr	r2, [pc, #312]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e3a:	2388      	movs	r3, #136	@ 0x88
 8004e3c:	58d3      	ldr	r3, [r2, r3]
 8004e3e:	4a53      	ldr	r2, [pc, #332]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8004e40:	401a      	ands	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	494b      	ldr	r1, [pc, #300]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	2288      	movs	r2, #136	@ 0x88
 8004e4c:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2280      	movs	r2, #128	@ 0x80
 8004e54:	4013      	ands	r3, r2
 8004e56:	d027      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d018      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	2380      	movs	r3, #128	@ 0x80
 8004e66:	031b      	lsls	r3, r3, #12
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d012      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	2380      	movs	r3, #128	@ 0x80
 8004e72:	02db      	lsls	r3, r3, #11
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d00c      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	23c0      	movs	r3, #192	@ 0xc0
 8004e7e:	031b      	lsls	r3, r3, #12
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d006      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8004e84:	238e      	movs	r3, #142	@ 0x8e
 8004e86:	005a      	lsls	r2, r3, #1
 8004e88:	4b3c      	ldr	r3, [pc, #240]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e8a:	0011      	movs	r1, r2
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7fd feb9 	bl	8002c04 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e92:	4a38      	ldr	r2, [pc, #224]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e94:	2388      	movs	r3, #136	@ 0x88
 8004e96:	58d3      	ldr	r3, [r2, r3]
 8004e98:	4a3d      	ldr	r2, [pc, #244]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	4934      	ldr	r1, [pc, #208]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	2288      	movs	r2, #136	@ 0x88
 8004ea6:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	2380      	movs	r3, #128	@ 0x80
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d028      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x496>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d019      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1a      	ldr	r2, [r3, #32]
 8004ec0:	2380      	movs	r3, #128	@ 0x80
 8004ec2:	039b      	lsls	r3, r3, #14
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d013      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1a      	ldr	r2, [r3, #32]
 8004ecc:	2380      	movs	r3, #128	@ 0x80
 8004ece:	035b      	lsls	r3, r3, #13
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d00d      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	23c0      	movs	r3, #192	@ 0xc0
 8004eda:	039b      	lsls	r3, r3, #14
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d007      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004ee0:	2324      	movs	r3, #36	@ 0x24
 8004ee2:	33ff      	adds	r3, #255	@ 0xff
 8004ee4:	001a      	movs	r2, r3
 8004ee6:	4b25      	ldr	r3, [pc, #148]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ee8:	0011      	movs	r1, r2
 8004eea:	0018      	movs	r0, r3
 8004eec:	f7fd fe8a 	bl	8002c04 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ef0:	4a20      	ldr	r2, [pc, #128]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ef2:	2388      	movs	r3, #136	@ 0x88
 8004ef4:	58d3      	ldr	r3, [r2, r3]
 8004ef6:	4a27      	ldr	r2, [pc, #156]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8004ef8:	401a      	ands	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	491d      	ldr	r1, [pc, #116]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	2288      	movs	r2, #136	@ 0x88
 8004f04:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	2380      	movs	r3, #128	@ 0x80
 8004f0c:	01db      	lsls	r3, r3, #7
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d044      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d012      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f1e:	2380      	movs	r3, #128	@ 0x80
 8004f20:	055b      	lsls	r3, r3, #21
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d00c      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f2a:	2380      	movs	r3, #128	@ 0x80
 8004f2c:	059b      	lsls	r3, r3, #22
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d006      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004f32:	2399      	movs	r3, #153	@ 0x99
 8004f34:	005a      	lsls	r2, r3, #1
 8004f36:	4b11      	ldr	r3, [pc, #68]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f38:	0011      	movs	r1, r2
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f7fd fe62 	bl	8002c04 <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f44:	2380      	movs	r3, #128	@ 0x80
 8004f46:	055b      	lsls	r3, r3, #21
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d106      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8004f4c:	4b09      	ldr	r3, [pc, #36]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	4b08      	ldr	r3, [pc, #32]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f52:	2180      	movs	r1, #128	@ 0x80
 8004f54:	0249      	lsls	r1, r1, #9
 8004f56:	430a      	orrs	r2, r1
 8004f58:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f5a:	4a06      	ldr	r2, [pc, #24]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f5c:	2388      	movs	r3, #136	@ 0x88
 8004f5e:	58d3      	ldr	r3, [r2, r3]
 8004f60:	4a0d      	ldr	r2, [pc, #52]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004f62:	401a      	ands	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f68:	4902      	ldr	r1, [pc, #8]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	2288      	movs	r2, #136	@ 0x88
 8004f6e:	508b      	str	r3, [r1, r2]
 8004f70:	e014      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	40021000 	.word	0x40021000
 8004f78:	efffffff 	.word	0xefffffff
 8004f7c:	0800b43c 	.word	0x0800b43c
 8004f80:	fffff3ff 	.word	0xfffff3ff
 8004f84:	fffffcff 	.word	0xfffffcff
 8004f88:	ffffcfff 	.word	0xffffcfff
 8004f8c:	fffcffff 	.word	0xfffcffff
 8004f90:	fff3ffff 	.word	0xfff3ffff
 8004f94:	ffcfffff 	.word	0xffcfffff
 8004f98:	cfffffff 	.word	0xcfffffff
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	2380      	movs	r3, #128	@ 0x80
 8004fa2:	019b      	lsls	r3, r3, #6
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d035      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d019      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb4:	2380      	movs	r3, #128	@ 0x80
 8004fb6:	04db      	lsls	r3, r3, #19
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d013      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc0:	2380      	movs	r3, #128	@ 0x80
 8004fc2:	051b      	lsls	r3, r3, #20
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d00d      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fcc:	23c0      	movs	r3, #192	@ 0xc0
 8004fce:	051b      	lsls	r3, r3, #20
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d007      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8004fd4:	234e      	movs	r3, #78	@ 0x4e
 8004fd6:	33ff      	adds	r3, #255	@ 0xff
 8004fd8:	001a      	movs	r2, r3
 8004fda:	4b41      	ldr	r3, [pc, #260]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x670>)
 8004fdc:	0011      	movs	r1, r2
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7fd fe10 	bl	8002c04 <assert_failed>
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe8:	2380      	movs	r3, #128	@ 0x80
 8004fea:	051b      	lsls	r3, r3, #20
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d106      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x58e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8004ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004ff6:	2180      	movs	r1, #128	@ 0x80
 8004ff8:	0449      	lsls	r1, r1, #17
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ffe:	4a39      	ldr	r2, [pc, #228]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005000:	2388      	movs	r3, #136	@ 0x88
 8005002:	58d3      	ldr	r3, [r2, r3]
 8005004:	4a38      	ldr	r2, [pc, #224]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8005006:	401a      	ands	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	4935      	ldr	r1, [pc, #212]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800500e:	4313      	orrs	r3, r2
 8005010:	2288      	movs	r2, #136	@ 0x88
 8005012:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	2380      	movs	r3, #128	@ 0x80
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4013      	ands	r3, r2
 800501e:	d029      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00d      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800502c:	2380      	movs	r3, #128	@ 0x80
 800502e:	045b      	lsls	r3, r3, #17
 8005030:	429a      	cmp	r2, r3
 8005032:	d007      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005034:	235c      	movs	r3, #92	@ 0x5c
 8005036:	33ff      	adds	r3, #255	@ 0xff
 8005038:	001a      	movs	r2, r3
 800503a:	4b29      	ldr	r3, [pc, #164]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x670>)
 800503c:	0011      	movs	r1, r2
 800503e:	0018      	movs	r0, r3
 8005040:	f7fd fde0 	bl	8002c04 <assert_failed>
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005048:	2380      	movs	r3, #128	@ 0x80
 800504a:	045b      	lsls	r3, r3, #17
 800504c:	429a      	cmp	r2, r3
 800504e:	d106      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8005050:	4b24      	ldr	r3, [pc, #144]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	4b23      	ldr	r3, [pc, #140]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005056:	2180      	movs	r1, #128	@ 0x80
 8005058:	0449      	lsls	r1, r1, #17
 800505a:	430a      	orrs	r2, r1
 800505c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800505e:	4a21      	ldr	r2, [pc, #132]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005060:	2388      	movs	r3, #136	@ 0x88
 8005062:	58d3      	ldr	r3, [r2, r3]
 8005064:	4a21      	ldr	r2, [pc, #132]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005066:	401a      	ands	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	491d      	ldr	r1, [pc, #116]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800506e:	4313      	orrs	r3, r2
 8005070:	2288      	movs	r2, #136	@ 0x88
 8005072:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	2380      	movs	r3, #128	@ 0x80
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	4013      	ands	r3, r2
 800507e:	d028      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00c      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	049b      	lsls	r3, r3, #18
 8005090:	429a      	cmp	r2, r3
 8005092:	d006      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8005094:	23b4      	movs	r3, #180	@ 0xb4
 8005096:	005a      	lsls	r2, r3, #1
 8005098:	4b11      	ldr	r3, [pc, #68]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x670>)
 800509a:	0011      	movs	r1, r2
 800509c:	0018      	movs	r0, r3
 800509e:	f7fd fdb1 	bl	8002c04 <assert_failed>
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050a6:	2380      	movs	r3, #128	@ 0x80
 80050a8:	049b      	lsls	r3, r3, #18
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d106      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80050ae:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	4b0c      	ldr	r3, [pc, #48]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80050b4:	2180      	movs	r1, #128	@ 0x80
 80050b6:	0449      	lsls	r1, r1, #17
 80050b8:	430a      	orrs	r2, r1
 80050ba:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80050bc:	4a09      	ldr	r2, [pc, #36]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80050be:	2388      	movs	r3, #136	@ 0x88
 80050c0:	58d3      	ldr	r3, [r2, r3]
 80050c2:	4a0a      	ldr	r2, [pc, #40]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 80050c4:	401a      	ands	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	4906      	ldr	r1, [pc, #24]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	2288      	movs	r2, #136	@ 0x88
 80050d0:	508b      	str	r3, [r1, r2]

  }

  return status;
 80050d2:	2312      	movs	r3, #18
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	781b      	ldrb	r3, [r3, #0]
}
 80050d8:	0018      	movs	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	b006      	add	sp, #24
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	0800b43c 	.word	0x0800b43c
 80050e4:	40021000 	.word	0x40021000
 80050e8:	f3ffffff 	.word	0xf3ffffff
 80050ec:	feffffff 	.word	0xfeffffff

080050f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050f0:	b590      	push	{r4, r7, lr}
 80050f2:	b089      	sub	sp, #36	@ 0x24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk;    /* no init needed */
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4acd      	ldr	r2, [pc, #820]	@ (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8005100:	4013      	ands	r3, r2
 8005102:	d003      	beq.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4acc      	ldr	r2, [pc, #816]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8005108:	4013      	ands	r3, r2
 800510a:	d007      	beq.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 800510c:	23e6      	movs	r3, #230	@ 0xe6
 800510e:	33ff      	adds	r3, #255	@ 0xff
 8005110:	001a      	movs	r2, r3
 8005112:	4bca      	ldr	r3, [pc, #808]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005114:	0011      	movs	r1, r2
 8005116:	0018      	movs	r0, r3
 8005118:	f7fd fd74 	bl	8002c04 <assert_failed>

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	2380      	movs	r3, #128	@ 0x80
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	429a      	cmp	r2, r3
 8005124:	d154      	bne.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005126:	4ac6      	ldr	r2, [pc, #792]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005128:	2390      	movs	r3, #144	@ 0x90
 800512a:	58d2      	ldr	r2, [r2, r3]
 800512c:	23c0      	movs	r3, #192	@ 0xc0
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4013      	ands	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	23c0      	movs	r3, #192	@ 0xc0
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	429a      	cmp	r2, r3
 800513c:	d039      	beq.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	23c0      	movs	r3, #192	@ 0xc0
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	429a      	cmp	r2, r3
 8005146:	d901      	bls.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8005148:	f000 fbf9 	bl	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	2380      	movs	r3, #128	@ 0x80
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	429a      	cmp	r2, r3
 8005154:	d006      	beq.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	2380      	movs	r3, #128	@ 0x80
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	429a      	cmp	r2, r3
 800515e:	d00f      	beq.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8005160:	f000 fbed 	bl	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005164:	4ab6      	ldr	r2, [pc, #728]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005166:	2390      	movs	r3, #144	@ 0x90
 8005168:	58d3      	ldr	r3, [r2, r3]
 800516a:	2202      	movs	r2, #2
 800516c:	4013      	ands	r3, r2
 800516e:	2b02      	cmp	r3, #2
 8005170:	d001      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 8005172:	f000 fbe6 	bl	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
          frequency = LSE_VALUE;
 8005176:	2380      	movs	r3, #128	@ 0x80
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	61fb      	str	r3, [r7, #28]
        break;
 800517c:	f000 fbe1 	bl	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005180:	4aaf      	ldr	r2, [pc, #700]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005182:	2394      	movs	r3, #148	@ 0x94
 8005184:	58d3      	ldr	r3, [r2, r3]
 8005186:	2202      	movs	r2, #2
 8005188:	4013      	ands	r3, r2
 800518a:	2b02      	cmp	r3, #2
 800518c:	d001      	beq.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800518e:	f000 fbda 	bl	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005192:	4aab      	ldr	r2, [pc, #684]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005194:	2394      	movs	r3, #148	@ 0x94
 8005196:	58d3      	ldr	r3, [r2, r3]
 8005198:	2204      	movs	r2, #4
 800519a:	4013      	ands	r3, r2
 800519c:	2b04      	cmp	r3, #4
 800519e:	d103      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            frequency = LSI_VALUE / 128U;
 80051a0:	23fa      	movs	r3, #250	@ 0xfa
 80051a2:	61fb      	str	r3, [r7, #28]
        break;
 80051a4:	f000 fbcf 	bl	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
            frequency = LSI_VALUE;
 80051a8:	23fa      	movs	r3, #250	@ 0xfa
 80051aa:	01db      	lsls	r3, r3, #7
 80051ac:	61fb      	str	r3, [r7, #28]
        break;
 80051ae:	f000 fbca 	bl	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051b2:	4ba3      	ldr	r3, [pc, #652]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	2380      	movs	r3, #128	@ 0x80
 80051b8:	029b      	lsls	r3, r3, #10
 80051ba:	401a      	ands	r2, r3
 80051bc:	2380      	movs	r3, #128	@ 0x80
 80051be:	029b      	lsls	r3, r3, #10
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80051c4:	f000 fbc1 	bl	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          frequency = HSE_VALUE / 32U;
 80051c8:	4b9e      	ldr	r3, [pc, #632]	@ (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80051ca:	61fb      	str	r3, [r7, #28]
        break;
 80051cc:	f000 fbbd 	bl	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	2380      	movs	r3, #128	@ 0x80
 80051d4:	029b      	lsls	r3, r3, #10
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d100      	bne.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80051da:	e0f7      	b.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	2380      	movs	r3, #128	@ 0x80
 80051e0:	029b      	lsls	r3, r3, #10
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d901      	bls.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80051e6:	f000 fbb2 	bl	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	2380      	movs	r3, #128	@ 0x80
 80051ee:	025b      	lsls	r3, r3, #9
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d100      	bne.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 80051f4:	e0ea      	b.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	2380      	movs	r3, #128	@ 0x80
 80051fa:	025b      	lsls	r3, r3, #9
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d901      	bls.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005200:	f000 fba5 	bl	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	2380      	movs	r3, #128	@ 0x80
 8005208:	01db      	lsls	r3, r3, #7
 800520a:	429a      	cmp	r2, r3
 800520c:	d100      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800520e:	e187      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	2380      	movs	r3, #128	@ 0x80
 8005214:	01db      	lsls	r3, r3, #7
 8005216:	429a      	cmp	r2, r3
 8005218:	d901      	bls.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 800521a:	f000 fb98 	bl	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	2380      	movs	r3, #128	@ 0x80
 8005222:	019b      	lsls	r3, r3, #6
 8005224:	429a      	cmp	r2, r3
 8005226:	d101      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8005228:	f000 fb2f 	bl	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	2380      	movs	r3, #128	@ 0x80
 8005230:	019b      	lsls	r3, r3, #6
 8005232:	429a      	cmp	r2, r3
 8005234:	d901      	bls.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005236:	f000 fb8a 	bl	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	2380      	movs	r3, #128	@ 0x80
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	429a      	cmp	r2, r3
 8005242:	d100      	bne.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8005244:	e2f6      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	2380      	movs	r3, #128	@ 0x80
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	429a      	cmp	r2, r3
 800524e:	d901      	bls.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8005250:	f000 fb7d 	bl	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	2380      	movs	r3, #128	@ 0x80
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	429a      	cmp	r2, r3
 800525c:	d100      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800525e:	e2be      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	2380      	movs	r3, #128	@ 0x80
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	429a      	cmp	r2, r3
 8005268:	d901      	bls.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800526a:	f000 fb70 	bl	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	2380      	movs	r3, #128	@ 0x80
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	429a      	cmp	r2, r3
 8005276:	d100      	bne.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8005278:	e254      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	2380      	movs	r3, #128	@ 0x80
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	429a      	cmp	r2, r3
 8005282:	d901      	bls.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8005284:	f000 fb63 	bl	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b80      	cmp	r3, #128	@ 0x80
 800528c:	d100      	bne.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800528e:	e1e8      	b.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b80      	cmp	r3, #128	@ 0x80
 8005294:	d901      	bls.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005296:	f000 fb5a 	bl	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b20      	cmp	r3, #32
 800529e:	d80f      	bhi.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80052a6:	f000 fb52 	bl	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d901      	bls.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80052b0:	f000 fb4d 	bl	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	009a      	lsls	r2, r3, #2
 80052b8:	4b63      	ldr	r3, [pc, #396]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80052ba:	18d3      	adds	r3, r2, r3
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	469f      	mov	pc, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b40      	cmp	r3, #64	@ 0x40
 80052c4:	d100      	bne.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80052c6:	e198      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            break;
        }
        break;
      }
      default:
        break;
 80052c8:	f000 fb41 	bl	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80052cc:	4a5c      	ldr	r2, [pc, #368]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80052ce:	2388      	movs	r3, #136	@ 0x88
 80052d0:	58d3      	ldr	r3, [r2, r3]
 80052d2:	2203      	movs	r2, #3
 80052d4:	4013      	ands	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d025      	beq.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d82d      	bhi.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d013      	beq.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d827      	bhi.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d005      	beq.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
            break;
 80052fc:	e020      	b.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
            frequency = HAL_RCC_GetPCLK1Freq();
 80052fe:	f7ff fb33 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8005302:	0003      	movs	r3, r0
 8005304:	61fb      	str	r3, [r7, #28]
            break;
 8005306:	e020      	b.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
            frequency = HAL_RCC_GetSysClockFreq();
 8005308:	f7ff fa88 	bl	800481c <HAL_RCC_GetSysClockFreq>
 800530c:	0003      	movs	r3, r0
 800530e:	61fb      	str	r3, [r7, #28]
            break;
 8005310:	e01b      	b.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005312:	4b4b      	ldr	r3, [pc, #300]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	2380      	movs	r3, #128	@ 0x80
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	401a      	ands	r2, r3
 800531c:	2380      	movs	r3, #128	@ 0x80
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	429a      	cmp	r2, r3
 8005322:	d10f      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
              frequency = HSI_VALUE;
 8005324:	4b49      	ldr	r3, [pc, #292]	@ (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8005326:	61fb      	str	r3, [r7, #28]
            break;
 8005328:	e00c      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800532a:	4a45      	ldr	r2, [pc, #276]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800532c:	2390      	movs	r3, #144	@ 0x90
 800532e:	58d3      	ldr	r3, [r2, r3]
 8005330:	2202      	movs	r2, #2
 8005332:	4013      	ands	r3, r2
 8005334:	2b02      	cmp	r3, #2
 8005336:	d107      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
              frequency = LSE_VALUE;
 8005338:	2380      	movs	r3, #128	@ 0x80
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	61fb      	str	r3, [r7, #28]
            break;
 800533e:	e003      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
            break;
 8005340:	46c0      	nop			@ (mov r8, r8)
 8005342:	e305      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8005344:	46c0      	nop			@ (mov r8, r8)
 8005346:	e303      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8005348:	46c0      	nop			@ (mov r8, r8)
        break;
 800534a:	e301      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800534c:	4a3c      	ldr	r2, [pc, #240]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800534e:	2388      	movs	r3, #136	@ 0x88
 8005350:	58d3      	ldr	r3, [r2, r3]
 8005352:	220c      	movs	r2, #12
 8005354:	4013      	ands	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2b0c      	cmp	r3, #12
 800535c:	d025      	beq.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b0c      	cmp	r3, #12
 8005362:	d82d      	bhi.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b08      	cmp	r3, #8
 8005368:	d013      	beq.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d827      	bhi.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b04      	cmp	r3, #4
 800537a:	d005      	beq.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
            break;
 800537c:	e020      	b.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
            frequency = HAL_RCC_GetPCLK1Freq();
 800537e:	f7ff faf3 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8005382:	0003      	movs	r3, r0
 8005384:	61fb      	str	r3, [r7, #28]
            break;
 8005386:	e020      	b.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
            frequency = HAL_RCC_GetSysClockFreq();
 8005388:	f7ff fa48 	bl	800481c <HAL_RCC_GetSysClockFreq>
 800538c:	0003      	movs	r3, r0
 800538e:	61fb      	str	r3, [r7, #28]
            break;
 8005390:	e01b      	b.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005392:	4b2b      	ldr	r3, [pc, #172]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	2380      	movs	r3, #128	@ 0x80
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	401a      	ands	r2, r3
 800539c:	2380      	movs	r3, #128	@ 0x80
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d10f      	bne.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
              frequency = HSI_VALUE;
 80053a4:	4b29      	ldr	r3, [pc, #164]	@ (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80053a6:	61fb      	str	r3, [r7, #28]
            break;
 80053a8:	e00c      	b.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053aa:	4a25      	ldr	r2, [pc, #148]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80053ac:	2390      	movs	r3, #144	@ 0x90
 80053ae:	58d3      	ldr	r3, [r2, r3]
 80053b0:	2202      	movs	r2, #2
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d107      	bne.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
              frequency = LSE_VALUE;
 80053b8:	2380      	movs	r3, #128	@ 0x80
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	61fb      	str	r3, [r7, #28]
            break;
 80053be:	e003      	b.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
            break;
 80053c0:	46c0      	nop			@ (mov r8, r8)
 80053c2:	e2c5      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80053c4:	46c0      	nop			@ (mov r8, r8)
 80053c6:	e2c3      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80053c8:	46c0      	nop			@ (mov r8, r8)
        break;
 80053ca:	e2c1      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        frequency = HAL_RCC_GetPCLK1Freq();
 80053cc:	f7ff facc 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 80053d0:	0003      	movs	r3, r0
 80053d2:	61fb      	str	r3, [r7, #28]
        break;
 80053d4:	e2bc      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80053d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80053d8:	2388      	movs	r3, #136	@ 0x88
 80053da:	58d2      	ldr	r2, [r2, r3]
 80053dc:	23c0      	movs	r3, #192	@ 0xc0
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	4013      	ands	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	23c0      	movs	r3, #192	@ 0xc0
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d03c      	beq.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	23c0      	movs	r3, #192	@ 0xc0
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d842      	bhi.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	2380      	movs	r3, #128	@ 0x80
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	429a      	cmp	r2, r3
 8005400:	d026      	beq.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	429a      	cmp	r2, r3
 800540a:	d838      	bhi.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	429a      	cmp	r2, r3
 800541a:	d005      	beq.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
            break;
 800541c:	e02f      	b.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
            frequency = HAL_RCC_GetPCLK1Freq();
 800541e:	f7ff faa3 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8005422:	0003      	movs	r3, r0
 8005424:	61fb      	str	r3, [r7, #28]
            break;
 8005426:	e02f      	b.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
            frequency = HAL_RCC_GetSysClockFreq();
 8005428:	f7ff f9f8 	bl	800481c <HAL_RCC_GetSysClockFreq>
 800542c:	0003      	movs	r3, r0
 800542e:	61fb      	str	r3, [r7, #28]
            break;
 8005430:	e02a      	b.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	0003edfb 	.word	0x0003edfb
 8005438:	fffc1204 	.word	0xfffc1204
 800543c:	0800b43c 	.word	0x0800b43c
 8005440:	40021000 	.word	0x40021000
 8005444:	0003d090 	.word	0x0003d090
 8005448:	0800b778 	.word	0x0800b778
 800544c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005450:	4bb2      	ldr	r3, [pc, #712]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	2380      	movs	r3, #128	@ 0x80
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	401a      	ands	r2, r3
 800545a:	2380      	movs	r3, #128	@ 0x80
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	429a      	cmp	r2, r3
 8005460:	d10f      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
              frequency = HSI_VALUE;
 8005462:	4baf      	ldr	r3, [pc, #700]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 8005464:	61fb      	str	r3, [r7, #28]
            break;
 8005466:	e00c      	b.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005468:	4aac      	ldr	r2, [pc, #688]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 800546a:	2390      	movs	r3, #144	@ 0x90
 800546c:	58d3      	ldr	r3, [r2, r3]
 800546e:	2202      	movs	r2, #2
 8005470:	4013      	ands	r3, r2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d107      	bne.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
              frequency = LSE_VALUE;
 8005476:	2380      	movs	r3, #128	@ 0x80
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	61fb      	str	r3, [r7, #28]
            break;
 800547c:	e003      	b.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
            break;
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	e266      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8005482:	46c0      	nop			@ (mov r8, r8)
 8005484:	e264      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8005486:	46c0      	nop			@ (mov r8, r8)
        break;
 8005488:	e262      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 800548a:	4aa4      	ldr	r2, [pc, #656]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 800548c:	2388      	movs	r3, #136	@ 0x88
 800548e:	58d2      	ldr	r2, [r2, r3]
 8005490:	23c0      	movs	r3, #192	@ 0xc0
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4013      	ands	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	23c0      	movs	r3, #192	@ 0xc0
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	429a      	cmp	r2, r3
 80054a0:	d02d      	beq.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	23c0      	movs	r3, #192	@ 0xc0
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d833      	bhi.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	2380      	movs	r3, #128	@ 0x80
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d017      	beq.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	2380      	movs	r3, #128	@ 0x80
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	429a      	cmp	r2, r3
 80054be:	d829      	bhi.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	2380      	movs	r3, #128	@ 0x80
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d005      	beq.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
            break;
 80054d0:	e020      	b.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
            frequency = HAL_RCC_GetPCLK1Freq();
 80054d2:	f7ff fa49 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 80054d6:	0003      	movs	r3, r0
 80054d8:	61fb      	str	r3, [r7, #28]
            break;
 80054da:	e020      	b.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
            frequency = HAL_RCC_GetSysClockFreq();
 80054dc:	f7ff f99e 	bl	800481c <HAL_RCC_GetSysClockFreq>
 80054e0:	0003      	movs	r3, r0
 80054e2:	61fb      	str	r3, [r7, #28]
            break;
 80054e4:	e01b      	b.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054e6:	4b8d      	ldr	r3, [pc, #564]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	2380      	movs	r3, #128	@ 0x80
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	401a      	ands	r2, r3
 80054f0:	2380      	movs	r3, #128	@ 0x80
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d10f      	bne.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
              frequency = HSI_VALUE;
 80054f8:	4b89      	ldr	r3, [pc, #548]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 80054fa:	61fb      	str	r3, [r7, #28]
            break;
 80054fc:	e00c      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80054fe:	4a87      	ldr	r2, [pc, #540]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8005500:	2390      	movs	r3, #144	@ 0x90
 8005502:	58d3      	ldr	r3, [r2, r3]
 8005504:	2202      	movs	r2, #2
 8005506:	4013      	ands	r3, r2
 8005508:	2b02      	cmp	r3, #2
 800550a:	d107      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
              frequency = LSE_VALUE;
 800550c:	2380      	movs	r3, #128	@ 0x80
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	61fb      	str	r3, [r7, #28]
            break;
 8005512:	e003      	b.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            break;
 8005514:	46c0      	nop			@ (mov r8, r8)
 8005516:	e21b      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8005518:	46c0      	nop			@ (mov r8, r8)
 800551a:	e219      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 800551c:	46c0      	nop			@ (mov r8, r8)
        break;
 800551e:	e217      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005520:	4a7e      	ldr	r2, [pc, #504]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8005522:	2388      	movs	r3, #136	@ 0x88
 8005524:	58d2      	ldr	r2, [r2, r3]
 8005526:	23c0      	movs	r3, #192	@ 0xc0
 8005528:	059b      	lsls	r3, r3, #22
 800552a:	4013      	ands	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	2380      	movs	r3, #128	@ 0x80
 8005532:	059b      	lsls	r3, r3, #22
 8005534:	429a      	cmp	r2, r3
 8005536:	d012      	beq.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	2380      	movs	r3, #128	@ 0x80
 800553c:	059b      	lsls	r3, r3, #22
 800553e:	429a      	cmp	r2, r3
 8005540:	d825      	bhi.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	2380      	movs	r3, #128	@ 0x80
 800554c:	055b      	lsls	r3, r3, #21
 800554e:	429a      	cmp	r2, r3
 8005550:	d014      	beq.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
            break;
 8005552:	e01c      	b.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
            frequency = HAL_RCC_GetSysClockFreq();
 8005554:	f7ff f962 	bl	800481c <HAL_RCC_GetSysClockFreq>
 8005558:	0003      	movs	r3, r0
 800555a:	61fb      	str	r3, [r7, #28]
            break;
 800555c:	e018      	b.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800555e:	4b6f      	ldr	r3, [pc, #444]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	2380      	movs	r3, #128	@ 0x80
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	401a      	ands	r2, r3
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	429a      	cmp	r2, r3
 800556e:	d102      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
              frequency = HSI_VALUE;
 8005570:	4b6b      	ldr	r3, [pc, #428]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 8005572:	61fb      	str	r3, [r7, #28]
            break;
 8005574:	e00c      	b.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
              frequency = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
            break;
 800557a:	e009      	b.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800557c:	2408      	movs	r4, #8
 800557e:	193b      	adds	r3, r7, r4
 8005580:	0018      	movs	r0, r3
 8005582:	f000 f9f3 	bl	800596c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8005586:	193b      	adds	r3, r7, r4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	61fb      	str	r3, [r7, #28]
            break;
 800558c:	e000      	b.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
            break;
 800558e:	46c0      	nop			@ (mov r8, r8)
        break;
 8005590:	e1de      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005592:	4a62      	ldr	r2, [pc, #392]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8005594:	2388      	movs	r3, #136	@ 0x88
 8005596:	58d2      	ldr	r2, [r2, r3]
 8005598:	23c0      	movs	r3, #192	@ 0xc0
 800559a:	019b      	lsls	r3, r3, #6
 800559c:	4013      	ands	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	2380      	movs	r3, #128	@ 0x80
 80055a4:	019b      	lsls	r3, r3, #6
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d017      	beq.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	2380      	movs	r3, #128	@ 0x80
 80055ae:	019b      	lsls	r3, r3, #6
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d81e      	bhi.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	2380      	movs	r3, #128	@ 0x80
 80055be:	015b      	lsls	r3, r3, #5
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d005      	beq.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
            break;
 80055c4:	e015      	b.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            frequency = HAL_RCC_GetPCLK1Freq();
 80055c6:	f7ff f9cf 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 80055ca:	0003      	movs	r3, r0
 80055cc:	61fb      	str	r3, [r7, #28]
            break;
 80055ce:	e013      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
            frequency = HAL_RCC_GetSysClockFreq();
 80055d0:	f7ff f924 	bl	800481c <HAL_RCC_GetSysClockFreq>
 80055d4:	0003      	movs	r3, r0
 80055d6:	61fb      	str	r3, [r7, #28]
            break;
 80055d8:	e00e      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055da:	4b50      	ldr	r3, [pc, #320]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	2380      	movs	r3, #128	@ 0x80
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	401a      	ands	r2, r3
 80055e4:	2380      	movs	r3, #128	@ 0x80
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d104      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
              frequency = HSI_VALUE;
 80055ec:	4b4c      	ldr	r3, [pc, #304]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 80055ee:	61fb      	str	r3, [r7, #28]
            break;
 80055f0:	e001      	b.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
            break;
 80055f2:	46c0      	nop			@ (mov r8, r8)
 80055f4:	e1ac      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80055f6:	46c0      	nop			@ (mov r8, r8)
        break;
 80055f8:	e1aa      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80055fa:	4a48      	ldr	r2, [pc, #288]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80055fc:	2388      	movs	r3, #136	@ 0x88
 80055fe:	58d2      	ldr	r2, [r2, r3]
 8005600:	23c0      	movs	r3, #192	@ 0xc0
 8005602:	029b      	lsls	r3, r3, #10
 8005604:	4013      	ands	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	2380      	movs	r3, #128	@ 0x80
 800560c:	029b      	lsls	r3, r3, #10
 800560e:	429a      	cmp	r2, r3
 8005610:	d017      	beq.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	2380      	movs	r3, #128	@ 0x80
 8005616:	029b      	lsls	r3, r3, #10
 8005618:	429a      	cmp	r2, r3
 800561a:	d81e      	bhi.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	2380      	movs	r3, #128	@ 0x80
 8005626:	025b      	lsls	r3, r3, #9
 8005628:	429a      	cmp	r2, r3
 800562a:	d005      	beq.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 800562c:	e015      	b.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
            frequency = HAL_RCC_GetPCLK1Freq();
 800562e:	f7ff f99b 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8005632:	0003      	movs	r3, r0
 8005634:	61fb      	str	r3, [r7, #28]
            break;
 8005636:	e013      	b.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
            frequency = HAL_RCC_GetSysClockFreq();
 8005638:	f7ff f8f0 	bl	800481c <HAL_RCC_GetSysClockFreq>
 800563c:	0003      	movs	r3, r0
 800563e:	61fb      	str	r3, [r7, #28]
            break;
 8005640:	e00e      	b.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005642:	4b36      	ldr	r3, [pc, #216]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	2380      	movs	r3, #128	@ 0x80
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	401a      	ands	r2, r3
 800564c:	2380      	movs	r3, #128	@ 0x80
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	429a      	cmp	r2, r3
 8005652:	d104      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
              frequency = HSI_VALUE;
 8005654:	4b32      	ldr	r3, [pc, #200]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 8005656:	61fb      	str	r3, [r7, #28]
            break;
 8005658:	e001      	b.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
            break;
 800565a:	46c0      	nop			@ (mov r8, r8)
 800565c:	e178      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 800565e:	46c0      	nop			@ (mov r8, r8)
        break;
 8005660:	e176      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005662:	4a2e      	ldr	r2, [pc, #184]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8005664:	2388      	movs	r3, #136	@ 0x88
 8005666:	58d2      	ldr	r2, [r2, r3]
 8005668:	23c0      	movs	r3, #192	@ 0xc0
 800566a:	031b      	lsls	r3, r3, #12
 800566c:	4013      	ands	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	23c0      	movs	r3, #192	@ 0xc0
 8005674:	031b      	lsls	r3, r3, #12
 8005676:	429a      	cmp	r2, r3
 8005678:	d03d      	beq.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	23c0      	movs	r3, #192	@ 0xc0
 800567e:	031b      	lsls	r3, r3, #12
 8005680:	429a      	cmp	r2, r3
 8005682:	d843      	bhi.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	2380      	movs	r3, #128	@ 0x80
 8005688:	031b      	lsls	r3, r3, #12
 800568a:	429a      	cmp	r2, r3
 800568c:	d027      	beq.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	2380      	movs	r3, #128	@ 0x80
 8005692:	031b      	lsls	r3, r3, #12
 8005694:	429a      	cmp	r2, r3
 8005696:	d839      	bhi.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	2380      	movs	r3, #128	@ 0x80
 80056a2:	02db      	lsls	r3, r3, #11
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d005      	beq.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
            break;
 80056a8:	e030      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = HAL_RCC_GetPCLK1Freq();
 80056aa:	f7ff f95d 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 80056ae:	0003      	movs	r3, r0
 80056b0:	61fb      	str	r3, [r7, #28]
            break;
 80056b2:	e032      	b.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80056b4:	4a19      	ldr	r2, [pc, #100]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80056b6:	2394      	movs	r3, #148	@ 0x94
 80056b8:	58d3      	ldr	r3, [r2, r3]
 80056ba:	2202      	movs	r2, #2
 80056bc:	4013      	ands	r3, r2
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d126      	bne.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80056c2:	4a16      	ldr	r2, [pc, #88]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80056c4:	2394      	movs	r3, #148	@ 0x94
 80056c6:	58d3      	ldr	r3, [r2, r3]
 80056c8:	2204      	movs	r2, #4
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d102      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
                frequency = LSI_VALUE / 128U;
 80056d0:	23fa      	movs	r3, #250	@ 0xfa
 80056d2:	61fb      	str	r3, [r7, #28]
            break;
 80056d4:	e01c      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
                frequency = LSI_VALUE;
 80056d6:	23fa      	movs	r3, #250	@ 0xfa
 80056d8:	01db      	lsls	r3, r3, #7
 80056da:	61fb      	str	r3, [r7, #28]
            break;
 80056dc:	e018      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056de:	4b0f      	ldr	r3, [pc, #60]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	2380      	movs	r3, #128	@ 0x80
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	401a      	ands	r2, r3
 80056e8:	2380      	movs	r3, #128	@ 0x80
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d111      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
              frequency = HSI_VALUE;
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 80056f2:	61fb      	str	r3, [r7, #28]
            break;
 80056f4:	e00e      	b.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056f6:	4a09      	ldr	r2, [pc, #36]	@ (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80056f8:	2390      	movs	r3, #144	@ 0x90
 80056fa:	58d3      	ldr	r3, [r2, r3]
 80056fc:	2202      	movs	r2, #2
 80056fe:	4013      	ands	r3, r2
 8005700:	2b02      	cmp	r3, #2
 8005702:	d109      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
              frequency = LSE_VALUE;
 8005704:	2380      	movs	r3, #128	@ 0x80
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	61fb      	str	r3, [r7, #28]
            break;
 800570a:	e005      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
            break;
 800570c:	46c0      	nop			@ (mov r8, r8)
 800570e:	e11f      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8005710:	46c0      	nop			@ (mov r8, r8)
 8005712:	e11d      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8005714:	46c0      	nop			@ (mov r8, r8)
 8005716:	e11b      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 8005718:	46c0      	nop			@ (mov r8, r8)
        break;
 800571a:	e119      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 800571c:	40021000 	.word	0x40021000
 8005720:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005724:	4a8d      	ldr	r2, [pc, #564]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005726:	2388      	movs	r3, #136	@ 0x88
 8005728:	58d2      	ldr	r2, [r2, r3]
 800572a:	23c0      	movs	r3, #192	@ 0xc0
 800572c:	039b      	lsls	r3, r3, #14
 800572e:	4013      	ands	r3, r2
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	23c0      	movs	r3, #192	@ 0xc0
 8005736:	039b      	lsls	r3, r3, #14
 8005738:	429a      	cmp	r2, r3
 800573a:	d03d      	beq.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	23c0      	movs	r3, #192	@ 0xc0
 8005740:	039b      	lsls	r3, r3, #14
 8005742:	429a      	cmp	r2, r3
 8005744:	d843      	bhi.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	2380      	movs	r3, #128	@ 0x80
 800574a:	039b      	lsls	r3, r3, #14
 800574c:	429a      	cmp	r2, r3
 800574e:	d027      	beq.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	2380      	movs	r3, #128	@ 0x80
 8005754:	039b      	lsls	r3, r3, #14
 8005756:	429a      	cmp	r2, r3
 8005758:	d839      	bhi.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	2380      	movs	r3, #128	@ 0x80
 8005764:	035b      	lsls	r3, r3, #13
 8005766:	429a      	cmp	r2, r3
 8005768:	d005      	beq.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
            break;
 800576a:	e030      	b.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HAL_RCC_GetPCLK1Freq();
 800576c:	f7ff f8fc 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8005770:	0003      	movs	r3, r0
 8005772:	61fb      	str	r3, [r7, #28]
            break;
 8005774:	e032      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005776:	4a79      	ldr	r2, [pc, #484]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005778:	2394      	movs	r3, #148	@ 0x94
 800577a:	58d3      	ldr	r3, [r2, r3]
 800577c:	2202      	movs	r2, #2
 800577e:	4013      	ands	r3, r2
 8005780:	2b02      	cmp	r3, #2
 8005782:	d126      	bne.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005784:	4a75      	ldr	r2, [pc, #468]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005786:	2394      	movs	r3, #148	@ 0x94
 8005788:	58d3      	ldr	r3, [r2, r3]
 800578a:	2204      	movs	r2, #4
 800578c:	4013      	ands	r3, r2
 800578e:	2b04      	cmp	r3, #4
 8005790:	d102      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
                frequency = LSI_VALUE / 128U;
 8005792:	23fa      	movs	r3, #250	@ 0xfa
 8005794:	61fb      	str	r3, [r7, #28]
            break;
 8005796:	e01c      	b.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
                frequency = LSI_VALUE;
 8005798:	23fa      	movs	r3, #250	@ 0xfa
 800579a:	01db      	lsls	r3, r3, #7
 800579c:	61fb      	str	r3, [r7, #28]
            break;
 800579e:	e018      	b.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057a0:	4b6e      	ldr	r3, [pc, #440]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	2380      	movs	r3, #128	@ 0x80
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	401a      	ands	r2, r3
 80057aa:	2380      	movs	r3, #128	@ 0x80
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d111      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
              frequency = HSI_VALUE;
 80057b2:	4b6b      	ldr	r3, [pc, #428]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x870>)
 80057b4:	61fb      	str	r3, [r7, #28]
            break;
 80057b6:	e00e      	b.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057b8:	4a68      	ldr	r2, [pc, #416]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80057ba:	2390      	movs	r3, #144	@ 0x90
 80057bc:	58d3      	ldr	r3, [r2, r3]
 80057be:	2202      	movs	r2, #2
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d109      	bne.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
              frequency = LSE_VALUE;
 80057c6:	2380      	movs	r3, #128	@ 0x80
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	61fb      	str	r3, [r7, #28]
            break;
 80057cc:	e005      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            break;
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	e0be      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80057d2:	46c0      	nop			@ (mov r8, r8)
 80057d4:	e0bc      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	e0ba      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 80057da:	46c0      	nop			@ (mov r8, r8)
        break;
 80057dc:	e0b8      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80057de:	4a5f      	ldr	r2, [pc, #380]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80057e0:	2388      	movs	r3, #136	@ 0x88
 80057e2:	58d2      	ldr	r2, [r2, r3]
 80057e4:	2380      	movs	r3, #128	@ 0x80
 80057e6:	045b      	lsls	r3, r3, #17
 80057e8:	4013      	ands	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	045b      	lsls	r3, r3, #17
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d011      	beq.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
            break;
 80057fc:	e019      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80057fe:	4b57      	ldr	r3, [pc, #348]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	23e0      	movs	r3, #224	@ 0xe0
 8005804:	01db      	lsls	r3, r3, #7
 8005806:	4013      	ands	r3, r2
 8005808:	d104      	bne.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
              frequency = HAL_RCC_GetPCLK1Freq();
 800580a:	f7ff f8ad 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 800580e:	0003      	movs	r3, r0
 8005810:	61fb      	str	r3, [r7, #28]
            break;
 8005812:	e00e      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8005814:	f7ff f8a8 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8005818:	0003      	movs	r3, r0
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
            break;
 800581e:	e008      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8005820:	2408      	movs	r4, #8
 8005822:	193b      	adds	r3, r7, r4
 8005824:	0018      	movs	r0, r3
 8005826:	f000 f8a1 	bl	800596c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800582a:	193b      	adds	r3, r7, r4
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	61fb      	str	r3, [r7, #28]
            break;
 8005830:	46c0      	nop			@ (mov r8, r8)
        break;
 8005832:	e08d      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8005834:	4a49      	ldr	r2, [pc, #292]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005836:	2388      	movs	r3, #136	@ 0x88
 8005838:	58d2      	ldr	r2, [r2, r3]
 800583a:	2380      	movs	r3, #128	@ 0x80
 800583c:	049b      	lsls	r3, r3, #18
 800583e:	4013      	ands	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	2380      	movs	r3, #128	@ 0x80
 800584c:	049b      	lsls	r3, r3, #18
 800584e:	429a      	cmp	r2, r3
 8005850:	d011      	beq.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            break;
 8005852:	e019      	b.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8005854:	4b41      	ldr	r3, [pc, #260]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	23e0      	movs	r3, #224	@ 0xe0
 800585a:	01db      	lsls	r3, r3, #7
 800585c:	4013      	ands	r3, r2
 800585e:	d104      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
              frequency = HAL_RCC_GetPCLK1Freq();
 8005860:	f7ff f882 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8005864:	0003      	movs	r3, r0
 8005866:	61fb      	str	r3, [r7, #28]
            break;
 8005868:	e00e      	b.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 800586a:	f7ff f87d 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 800586e:	0003      	movs	r3, r0
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
            break;
 8005874:	e008      	b.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8005876:	2408      	movs	r4, #8
 8005878:	193b      	adds	r3, r7, r4
 800587a:	0018      	movs	r0, r3
 800587c:	f000 f876 	bl	800596c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8005880:	193b      	adds	r3, r7, r4
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	61fb      	str	r3, [r7, #28]
            break;
 8005886:	46c0      	nop			@ (mov r8, r8)
        break;
 8005888:	e062      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800588a:	4a34      	ldr	r2, [pc, #208]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800588c:	2388      	movs	r3, #136	@ 0x88
 800588e:	58d2      	ldr	r2, [r2, r3]
 8005890:	23c0      	movs	r3, #192	@ 0xc0
 8005892:	051b      	lsls	r3, r3, #20
 8005894:	4013      	ands	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	23c0      	movs	r3, #192	@ 0xc0
 800589c:	051b      	lsls	r3, r3, #20
 800589e:	429a      	cmp	r2, r3
 80058a0:	d017      	beq.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	23c0      	movs	r3, #192	@ 0xc0
 80058a6:	051b      	lsls	r3, r3, #20
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d844      	bhi.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	2380      	movs	r3, #128	@ 0x80
 80058b0:	051b      	lsls	r3, r3, #20
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d033      	beq.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	2380      	movs	r3, #128	@ 0x80
 80058ba:	051b      	lsls	r3, r3, #20
 80058bc:	429a      	cmp	r2, r3
 80058be:	d83a      	bhi.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d034      	beq.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	2380      	movs	r3, #128	@ 0x80
 80058ca:	04db      	lsls	r3, r3, #19
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d003      	beq.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 80058d0:	e031      	b.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
            frequency = HSI48_VALUE;
 80058d2:	4b24      	ldr	r3, [pc, #144]	@ (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x874>)
 80058d4:	61fb      	str	r3, [r7, #28]
            break;
 80058d6:	e031      	b.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80058d8:	4b20      	ldr	r3, [pc, #128]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2202      	movs	r2, #2
 80058de:	4013      	ands	r3, r2
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d12a      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x84a>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80058e4:	4b1d      	ldr	r3, [pc, #116]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2208      	movs	r2, #8
 80058ea:	4013      	ands	r3, r2
 80058ec:	d005      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80058ee:	4b1b      	ldr	r3, [pc, #108]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	220f      	movs	r2, #15
 80058f6:	4013      	ands	r3, r2
 80058f8:	e005      	b.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80058fa:	4a18      	ldr	r2, [pc, #96]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80058fc:	2394      	movs	r3, #148	@ 0x94
 80058fe:	58d3      	ldr	r3, [r2, r3]
 8005900:	0a1b      	lsrs	r3, r3, #8
 8005902:	220f      	movs	r2, #15
 8005904:	4013      	ands	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b0b      	cmp	r3, #11
 800590c:	d901      	bls.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
                msirange = 11U;
 800590e:	230b      	movs	r3, #11
 8005910:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8005912:	4b15      	ldr	r3, [pc, #84]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	0092      	lsls	r2, r2, #2
 8005918:	58d3      	ldr	r3, [r2, r3]
 800591a:	61fb      	str	r3, [r7, #28]
            break;
 800591c:	e00d      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x84a>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800591e:	2408      	movs	r4, #8
 8005920:	193b      	adds	r3, r7, r4
 8005922:	0018      	movs	r0, r3
 8005924:	f000 f822 	bl	800596c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8005928:	193b      	adds	r3, r7, r4
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	61fb      	str	r3, [r7, #28]
            break;
 800592e:	e005      	b.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            frequency = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]
            break;
 8005934:	e002      	b.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8005936:	46c0      	nop			@ (mov r8, r8)
 8005938:	e00a      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            break;
 800593a:	46c0      	nop			@ (mov r8, r8)
        break;
 800593c:	e008      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        break;
 800593e:	46c0      	nop			@ (mov r8, r8)
 8005940:	e006      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        break;
 8005942:	46c0      	nop			@ (mov r8, r8)
 8005944:	e004      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        break;
 8005946:	46c0      	nop			@ (mov r8, r8)
 8005948:	e002      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        break;
 800594a:	46c0      	nop			@ (mov r8, r8)
 800594c:	e000      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        break;
 800594e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8005950:	69fb      	ldr	r3, [r7, #28]
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b009      	add	sp, #36	@ 0x24
 8005958:	bd90      	pop	{r4, r7, pc}
 800595a:	46c0      	nop			@ (mov r8, r8)
 800595c:	40021000 	.word	0x40021000
 8005960:	00f42400 	.word	0x00f42400
 8005964:	02dc6c00 	.word	0x02dc6c00
 8005968:	0800b748 	.word	0x0800b748

0800596c <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005974:	4b58      	ldr	r3, [pc, #352]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	0a1b      	lsrs	r3, r3, #8
 800597a:	227f      	movs	r2, #127	@ 0x7f
 800597c:	4013      	ands	r3, r2
 800597e:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005980:	4b55      	ldr	r3, [pc, #340]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	2203      	movs	r2, #3
 8005986:	4013      	ands	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800598a:	4b53      	ldr	r3, [pc, #332]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	091b      	lsrs	r3, r3, #4
 8005990:	2207      	movs	r2, #7
 8005992:	4013      	ands	r3, r2
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8005998:	4b4f      	ldr	r3, [pc, #316]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2208      	movs	r2, #8
 800599e:	4013      	ands	r3, r2
 80059a0:	d005      	beq.n	80059ae <HAL_RCCEx_GetPLLClockFreq+0x42>
 80059a2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	091b      	lsrs	r3, r3, #4
 80059a8:	220f      	movs	r2, #15
 80059aa:	4013      	ands	r3, r2
 80059ac:	e005      	b.n	80059ba <HAL_RCCEx_GetPLLClockFreq+0x4e>
 80059ae:	4a4a      	ldr	r2, [pc, #296]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80059b0:	2394      	movs	r3, #148	@ 0x94
 80059b2:	58d3      	ldr	r3, [r2, r3]
 80059b4:	0a1b      	lsrs	r3, r3, #8
 80059b6:	220f      	movs	r2, #15
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b0b      	cmp	r3, #11
 80059c0:	d901      	bls.n	80059c6 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 80059c2:	230b      	movs	r3, #11
 80059c4:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d020      	beq.n	8005a0e <HAL_RCCEx_GetPLLClockFreq+0xa2>
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d827      	bhi.n	8005a22 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d00c      	beq.n	80059f2 <HAL_RCCEx_GetPLLClockFreq+0x86>
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d121      	bne.n	8005a22 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 80059de:	68f9      	ldr	r1, [r7, #12]
 80059e0:	483e      	ldr	r0, [pc, #248]	@ (8005adc <HAL_RCCEx_GetPLLClockFreq+0x170>)
 80059e2:	f7fa fba3 	bl	800012c <__udivsi3>
 80059e6:	0003      	movs	r3, r0
 80059e8:	001a      	movs	r2, r3
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	4353      	muls	r3, r2
 80059ee:	61fb      	str	r3, [r7, #28]
      break;
 80059f0:	e025      	b.n	8005a3e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80059f2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae0 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	0092      	lsls	r2, r2, #2
 80059f8:	58d3      	ldr	r3, [r2, r3]
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	0018      	movs	r0, r3
 80059fe:	f7fa fb95 	bl	800012c <__udivsi3>
 8005a02:	0003      	movs	r3, r0
 8005a04:	001a      	movs	r2, r3
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4353      	muls	r3, r2
 8005a0a:	61fb      	str	r3, [r7, #28]
      break;
 8005a0c:	e017      	b.n	8005a3e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	4834      	ldr	r0, [pc, #208]	@ (8005ae4 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8005a12:	f7fa fb8b 	bl	800012c <__udivsi3>
 8005a16:	0003      	movs	r3, r0
 8005a18:	001a      	movs	r2, r3
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4353      	muls	r3, r2
 8005a1e:	61fb      	str	r3, [r7, #28]
      break;
 8005a20:	e00d      	b.n	8005a3e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8005a22:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae0 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0092      	lsls	r2, r2, #2
 8005a28:	58d3      	ldr	r3, [r2, r3]
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f7fa fb7d 	bl	800012c <__udivsi3>
 8005a32:	0003      	movs	r3, r0
 8005a34:	001a      	movs	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	4353      	muls	r3, r2
 8005a3a:	61fb      	str	r3, [r7, #28]
      break;
 8005a3c:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8005a3e:	4b26      	ldr	r3, [pc, #152]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	2380      	movs	r3, #128	@ 0x80
 8005a44:	025b      	lsls	r3, r3, #9
 8005a46:	4013      	ands	r3, r2
 8005a48:	d00e      	beq.n	8005a68 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8005a4a:	4b23      	ldr	r3, [pc, #140]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005a4c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8005a4e:	0c5b      	lsrs	r3, r3, #17
 8005a50:	221f      	movs	r2, #31
 8005a52:	4013      	ands	r3, r2
 8005a54:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8005a56:	0019      	movs	r1, r3
 8005a58:	69f8      	ldr	r0, [r7, #28]
 8005a5a:	f7fa fb67 	bl	800012c <__udivsi3>
 8005a5e:	0003      	movs	r3, r0
 8005a60:	001a      	movs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	e002      	b.n	8005a6e <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8005a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	2380      	movs	r3, #128	@ 0x80
 8005a74:	045b      	lsls	r3, r3, #17
 8005a76:	4013      	ands	r3, r2
 8005a78:	d00e      	beq.n	8005a98 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8005a7a:	4b17      	ldr	r3, [pc, #92]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005a7c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8005a7e:	0e5b      	lsrs	r3, r3, #25
 8005a80:	2207      	movs	r2, #7
 8005a82:	4013      	ands	r3, r2
 8005a84:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8005a86:	0019      	movs	r1, r3
 8005a88:	69f8      	ldr	r0, [r7, #28]
 8005a8a:	f7fa fb4f 	bl	800012c <__udivsi3>
 8005a8e:	0003      	movs	r3, r0
 8005a90:	001a      	movs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	e002      	b.n	8005a9e <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8005a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	2380      	movs	r3, #128	@ 0x80
 8005aa4:	055b      	lsls	r3, r3, #21
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d00e      	beq.n	8005ac8 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8005aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005aac:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8005aae:	0f5b      	lsrs	r3, r3, #29
 8005ab0:	2207      	movs	r2, #7
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8005ab6:	0019      	movs	r1, r3
 8005ab8:	69f8      	ldr	r0, [r7, #28]
 8005aba:	f7fa fb37 	bl	800012c <__udivsi3>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	001a      	movs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8005ac6:	e002      	b.n	8005ace <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	609a      	str	r2, [r3, #8]
}
 8005ace:	46c0      	nop			@ (mov r8, r8)
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b008      	add	sp, #32
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	00f42400 	.word	0x00f42400
 8005ae0:	0800b748 	.word	0x0800b748
 8005ae4:	007a1200 	.word	0x007a1200

08005ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e215      	b.n	8005f26 <HAL_SPI_Init+0x43e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4aa9      	ldr	r2, [pc, #676]	@ (8005da4 <HAL_SPI_Init+0x2bc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00c      	beq.n	8005b1e <HAL_SPI_Init+0x36>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4aa7      	ldr	r2, [pc, #668]	@ (8005da8 <HAL_SPI_Init+0x2c0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d007      	beq.n	8005b1e <HAL_SPI_Init+0x36>
 8005b0e:	2346      	movs	r3, #70	@ 0x46
 8005b10:	33ff      	adds	r3, #255	@ 0xff
 8005b12:	001a      	movs	r2, r3
 8005b14:	4ba5      	ldr	r3, [pc, #660]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005b16:	0011      	movs	r1, r2
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f7fd f873 	bl	8002c04 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00c      	beq.n	8005b40 <HAL_SPI_Init+0x58>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	2382      	movs	r3, #130	@ 0x82
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d006      	beq.n	8005b40 <HAL_SPI_Init+0x58>
 8005b32:	23a3      	movs	r3, #163	@ 0xa3
 8005b34:	005a      	lsls	r2, r3, #1
 8005b36:	4b9d      	ldr	r3, [pc, #628]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005b38:	0011      	movs	r1, r2
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7fd f862 	bl	8002c04 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d013      	beq.n	8005b70 <HAL_SPI_Init+0x88>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	2380      	movs	r3, #128	@ 0x80
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d00d      	beq.n	8005b70 <HAL_SPI_Init+0x88>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	2380      	movs	r3, #128	@ 0x80
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d007      	beq.n	8005b70 <HAL_SPI_Init+0x88>
 8005b60:	2348      	movs	r3, #72	@ 0x48
 8005b62:	33ff      	adds	r3, #255	@ 0xff
 8005b64:	001a      	movs	r2, r3
 8005b66:	4b91      	ldr	r3, [pc, #580]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005b68:	0011      	movs	r1, r2
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f7fd f84a 	bl	8002c04 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	23f0      	movs	r3, #240	@ 0xf0
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d04e      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	23e0      	movs	r3, #224	@ 0xe0
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d048      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	23d0      	movs	r3, #208	@ 0xd0
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d042      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	23c0      	movs	r3, #192	@ 0xc0
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d03c      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	23b0      	movs	r3, #176	@ 0xb0
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d036      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	23a0      	movs	r3, #160	@ 0xa0
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d030      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	2390      	movs	r3, #144	@ 0x90
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d02a      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	2380      	movs	r3, #128	@ 0x80
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d024      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	23e0      	movs	r3, #224	@ 0xe0
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d01e      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	23c0      	movs	r3, #192	@ 0xc0
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d018      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	23a0      	movs	r3, #160	@ 0xa0
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d012      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	2380      	movs	r3, #128	@ 0x80
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d00c      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	23c0      	movs	r3, #192	@ 0xc0
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d006      	beq.n	8005c1a <HAL_SPI_Init+0x132>
 8005c0c:	23a4      	movs	r3, #164	@ 0xa4
 8005c0e:	005a      	lsls	r2, r3, #1
 8005c10:	4b66      	ldr	r3, [pc, #408]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005c12:	0011      	movs	r1, r2
 8005c14:	0018      	movs	r0, r3
 8005c16:	f7fc fff5 	bl	8002c04 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	2380      	movs	r3, #128	@ 0x80
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d011      	beq.n	8005c4a <HAL_SPI_Init+0x162>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00d      	beq.n	8005c4a <HAL_SPI_Init+0x162>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	2380      	movs	r3, #128	@ 0x80
 8005c34:	02db      	lsls	r3, r3, #11
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d007      	beq.n	8005c4a <HAL_SPI_Init+0x162>
 8005c3a:	234a      	movs	r3, #74	@ 0x4a
 8005c3c:	33ff      	adds	r3, #255	@ 0xff
 8005c3e:	001a      	movs	r2, r3
 8005c40:	4b5a      	ldr	r3, [pc, #360]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005c42:	0011      	movs	r1, r2
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7fc ffdd 	bl	8002c04 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d00a      	beq.n	8005c68 <HAL_SPI_Init+0x180>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d006      	beq.n	8005c68 <HAL_SPI_Init+0x180>
 8005c5a:	23a5      	movs	r3, #165	@ 0xa5
 8005c5c:	005a      	lsls	r2, r3, #1
 8005c5e:	4b53      	ldr	r3, [pc, #332]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005c60:	0011      	movs	r1, r2
 8005c62:	0018      	movs	r0, r3
 8005c64:	f7fc ffce 	bl	8002c04 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d023      	beq.n	8005cb8 <HAL_SPI_Init+0x1d0>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d01f      	beq.n	8005cb8 <HAL_SPI_Init+0x1d0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d01b      	beq.n	8005cb8 <HAL_SPI_Init+0x1d0>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	2b18      	cmp	r3, #24
 8005c86:	d017      	beq.n	8005cb8 <HAL_SPI_Init+0x1d0>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d013      	beq.n	8005cb8 <HAL_SPI_Init+0x1d0>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	2b28      	cmp	r3, #40	@ 0x28
 8005c96:	d00f      	beq.n	8005cb8 <HAL_SPI_Init+0x1d0>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	2b30      	cmp	r3, #48	@ 0x30
 8005c9e:	d00b      	beq.n	8005cb8 <HAL_SPI_Init+0x1d0>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	2b38      	cmp	r3, #56	@ 0x38
 8005ca6:	d007      	beq.n	8005cb8 <HAL_SPI_Init+0x1d0>
 8005ca8:	234c      	movs	r3, #76	@ 0x4c
 8005caa:	33ff      	adds	r3, #255	@ 0xff
 8005cac:	001a      	movs	r2, r3
 8005cae:	4b3f      	ldr	r3, [pc, #252]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005cb0:	0011      	movs	r1, r2
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f7fc ffa6 	bl	8002c04 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_SPI_Init+0x1ee>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	2b80      	cmp	r3, #128	@ 0x80
 8005cc6:	d006      	beq.n	8005cd6 <HAL_SPI_Init+0x1ee>
 8005cc8:	23a6      	movs	r3, #166	@ 0xa6
 8005cca:	005a      	lsls	r2, r3, #1
 8005ccc:	4b37      	ldr	r3, [pc, #220]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005cce:	0011      	movs	r1, r2
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f7fc ff97 	bl	8002c04 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00b      	beq.n	8005cf6 <HAL_SPI_Init+0x20e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d007      	beq.n	8005cf6 <HAL_SPI_Init+0x20e>
 8005ce6:	234e      	movs	r3, #78	@ 0x4e
 8005ce8:	33ff      	adds	r3, #255	@ 0xff
 8005cea:	001a      	movs	r2, r3
 8005cec:	4b2f      	ldr	r3, [pc, #188]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005cee:	0011      	movs	r1, r2
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f7fc ff87 	bl	8002c04 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d158      	bne.n	8005db0 <HAL_SPI_Init+0x2c8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_SPI_Init+0x234>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d006      	beq.n	8005d1c <HAL_SPI_Init+0x234>
 8005d0e:	23a8      	movs	r3, #168	@ 0xa8
 8005d10:	005a      	lsls	r2, r3, #1
 8005d12:	4b26      	ldr	r3, [pc, #152]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005d14:	0011      	movs	r1, r2
 8005d16:	0018      	movs	r0, r3
 8005d18:	f7fc ff74 	bl	8002c04 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <HAL_SPI_Init+0x254>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d007      	beq.n	8005d3c <HAL_SPI_Init+0x254>
 8005d2c:	2352      	movs	r3, #82	@ 0x52
 8005d2e:	33ff      	adds	r3, #255	@ 0xff
 8005d30:	001a      	movs	r2, r3
 8005d32:	4b1e      	ldr	r3, [pc, #120]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005d34:	0011      	movs	r1, r2
 8005d36:	0018      	movs	r0, r3
 8005d38:	f7fc ff64 	bl	8002c04 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	2382      	movs	r3, #130	@ 0x82
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d129      	bne.n	8005d9c <HAL_SPI_Init+0x2b4>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d100      	bne.n	8005d52 <HAL_SPI_Init+0x26a>
 8005d50:	e05c      	b.n	8005e0c <HAL_SPI_Init+0x324>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d058      	beq.n	8005e0c <HAL_SPI_Init+0x324>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d054      	beq.n	8005e0c <HAL_SPI_Init+0x324>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	2b18      	cmp	r3, #24
 8005d68:	d050      	beq.n	8005e0c <HAL_SPI_Init+0x324>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d04c      	beq.n	8005e0c <HAL_SPI_Init+0x324>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	2b28      	cmp	r3, #40	@ 0x28
 8005d78:	d048      	beq.n	8005e0c <HAL_SPI_Init+0x324>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	2b30      	cmp	r3, #48	@ 0x30
 8005d80:	d044      	beq.n	8005e0c <HAL_SPI_Init+0x324>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	2b38      	cmp	r3, #56	@ 0x38
 8005d88:	d040      	beq.n	8005e0c <HAL_SPI_Init+0x324>
 8005d8a:	2356      	movs	r3, #86	@ 0x56
 8005d8c:	33ff      	adds	r3, #255	@ 0xff
 8005d8e:	001a      	movs	r2, r3
 8005d90:	4b06      	ldr	r3, [pc, #24]	@ (8005dac <HAL_SPI_Init+0x2c4>)
 8005d92:	0011      	movs	r1, r2
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7fc ff35 	bl	8002c04 <assert_failed>
 8005d9a:	e037      	b.n	8005e0c <HAL_SPI_Init+0x324>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	61da      	str	r2, [r3, #28]
 8005da2:	e033      	b.n	8005e0c <HAL_SPI_Init+0x324>
 8005da4:	40013000 	.word	0x40013000
 8005da8:	40003800 	.word	0x40003800
 8005dac:	0800b478 	.word	0x0800b478
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d023      	beq.n	8005e00 <HAL_SPI_Init+0x318>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d01f      	beq.n	8005e00 <HAL_SPI_Init+0x318>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	2b10      	cmp	r3, #16
 8005dc6:	d01b      	beq.n	8005e00 <HAL_SPI_Init+0x318>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	2b18      	cmp	r3, #24
 8005dce:	d017      	beq.n	8005e00 <HAL_SPI_Init+0x318>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d013      	beq.n	8005e00 <HAL_SPI_Init+0x318>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	2b28      	cmp	r3, #40	@ 0x28
 8005dde:	d00f      	beq.n	8005e00 <HAL_SPI_Init+0x318>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	2b30      	cmp	r3, #48	@ 0x30
 8005de6:	d00b      	beq.n	8005e00 <HAL_SPI_Init+0x318>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	2b38      	cmp	r3, #56	@ 0x38
 8005dee:	d007      	beq.n	8005e00 <HAL_SPI_Init+0x318>
 8005df0:	2360      	movs	r3, #96	@ 0x60
 8005df2:	33ff      	adds	r3, #255	@ 0xff
 8005df4:	001a      	movs	r2, r3
 8005df6:	4b4e      	ldr	r3, [pc, #312]	@ (8005f30 <HAL_SPI_Init+0x448>)
 8005df8:	0011      	movs	r1, r2
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7fc ff02 	bl	8002c04 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	225d      	movs	r2, #93	@ 0x5d
 8005e16:	5c9b      	ldrb	r3, [r3, r2]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d107      	bne.n	8005e2e <HAL_SPI_Init+0x346>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	225c      	movs	r2, #92	@ 0x5c
 8005e22:	2100      	movs	r1, #0
 8005e24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7fc ff33 	bl	8002c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	225d      	movs	r2, #93	@ 0x5d
 8005e32:	2102      	movs	r1, #2
 8005e34:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2140      	movs	r1, #64	@ 0x40
 8005e42:	438a      	bics	r2, r1
 8005e44:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	23e0      	movs	r3, #224	@ 0xe0
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d902      	bls.n	8005e58 <HAL_SPI_Init+0x370>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	e002      	b.n	8005e5e <HAL_SPI_Init+0x376>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e58:	2380      	movs	r3, #128	@ 0x80
 8005e5a:	015b      	lsls	r3, r3, #5
 8005e5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	23f0      	movs	r3, #240	@ 0xf0
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d008      	beq.n	8005e7c <HAL_SPI_Init+0x394>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	23e0      	movs	r3, #224	@ 0xe0
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d002      	beq.n	8005e7c <HAL_SPI_Init+0x394>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	2382      	movs	r3, #130	@ 0x82
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	401a      	ands	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6899      	ldr	r1, [r3, #8]
 8005e8a:	2384      	movs	r3, #132	@ 0x84
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	400b      	ands	r3, r1
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2102      	movs	r1, #2
 8005e98:	400b      	ands	r3, r1
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	400b      	ands	r3, r1
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6999      	ldr	r1, [r3, #24]
 8005eaa:	2380      	movs	r3, #128	@ 0x80
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	400b      	ands	r3, r1
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	2138      	movs	r1, #56	@ 0x38
 8005eb8:	400b      	ands	r3, r1
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	2180      	movs	r1, #128	@ 0x80
 8005ec2:	400b      	ands	r3, r1
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	0011      	movs	r1, r2
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ecc:	2380      	movs	r3, #128	@ 0x80
 8005ece:	019b      	lsls	r3, r3, #6
 8005ed0:	401a      	ands	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	0c1b      	lsrs	r3, r3, #16
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	401a      	ands	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee8:	2110      	movs	r1, #16
 8005eea:	400b      	ands	r3, r1
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef2:	2108      	movs	r1, #8
 8005ef4:	400b      	ands	r3, r1
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68d9      	ldr	r1, [r3, #12]
 8005efc:	23f0      	movs	r3, #240	@ 0xf0
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	400b      	ands	r3, r1
 8005f02:	431a      	orrs	r2, r3
 8005f04:	0011      	movs	r1, r2
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	2380      	movs	r3, #128	@ 0x80
 8005f0a:	015b      	lsls	r3, r3, #5
 8005f0c:	401a      	ands	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	225d      	movs	r2, #93	@ 0x5d
 8005f20:	2101      	movs	r1, #1
 8005f22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	0018      	movs	r0, r3
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b004      	add	sp, #16
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	46c0      	nop			@ (mov r8, r8)
 8005f30:	0800b478 	.word	0x0800b478

08005f34 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	1dbb      	adds	r3, r7, #6
 8005f42:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f44:	231f      	movs	r3, #31
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	2200      	movs	r2, #0
 8005f4a:	701a      	strb	r2, [r3, #0]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00c      	beq.n	8005f6e <HAL_SPI_Transmit+0x3a>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	2380      	movs	r3, #128	@ 0x80
 8005f5a:	021b      	lsls	r3, r3, #8
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d006      	beq.n	8005f6e <HAL_SPI_Transmit+0x3a>
 8005f60:	23cf      	movs	r3, #207	@ 0xcf
 8005f62:	009a      	lsls	r2, r3, #2
 8005f64:	4bab      	ldr	r3, [pc, #684]	@ (8006214 <HAL_SPI_Transmit+0x2e0>)
 8005f66:	0011      	movs	r1, r2
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f7fc fe4b 	bl	8002c04 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	225c      	movs	r2, #92	@ 0x5c
 8005f72:	5c9b      	ldrb	r3, [r3, r2]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_SPI_Transmit+0x48>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e147      	b.n	800620c <HAL_SPI_Transmit+0x2d8>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	225c      	movs	r2, #92	@ 0x5c
 8005f80:	2101      	movs	r1, #1
 8005f82:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f84:	f7fd f8ca 	bl	800311c <HAL_GetTick>
 8005f88:	0003      	movs	r3, r0
 8005f8a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f8c:	2316      	movs	r3, #22
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	1dba      	adds	r2, r7, #6
 8005f92:	8812      	ldrh	r2, [r2, #0]
 8005f94:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	225d      	movs	r2, #93	@ 0x5d
 8005f9a:	5c9b      	ldrb	r3, [r3, r2]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d004      	beq.n	8005fac <HAL_SPI_Transmit+0x78>
  {
    errorcode = HAL_BUSY;
 8005fa2:	231f      	movs	r3, #31
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	701a      	strb	r2, [r3, #0]
    goto error;
 8005faa:	e128      	b.n	80061fe <HAL_SPI_Transmit+0x2ca>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_SPI_Transmit+0x86>
 8005fb2:	1dbb      	adds	r3, r7, #6
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <HAL_SPI_Transmit+0x90>
  {
    errorcode = HAL_ERROR;
 8005fba:	231f      	movs	r3, #31
 8005fbc:	18fb      	adds	r3, r7, r3
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	701a      	strb	r2, [r3, #0]
    goto error;
 8005fc2:	e11c      	b.n	80061fe <HAL_SPI_Transmit+0x2ca>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	225d      	movs	r2, #93	@ 0x5d
 8005fc8:	2103      	movs	r1, #3
 8005fca:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1dba      	adds	r2, r7, #6
 8005fdc:	8812      	ldrh	r2, [r2, #0]
 8005fde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	1dba      	adds	r2, r7, #6
 8005fe4:	8812      	ldrh	r2, [r2, #0]
 8005fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2244      	movs	r2, #68	@ 0x44
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2246      	movs	r2, #70	@ 0x46
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	2380      	movs	r3, #128	@ 0x80
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	429a      	cmp	r2, r3
 8006014:	d110      	bne.n	8006038 <HAL_SPI_Transmit+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2140      	movs	r1, #64	@ 0x40
 8006022:	438a      	bics	r2, r1
 8006024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2180      	movs	r1, #128	@ 0x80
 8006032:	01c9      	lsls	r1, r1, #7
 8006034:	430a      	orrs	r2, r1
 8006036:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2240      	movs	r2, #64	@ 0x40
 8006040:	4013      	ands	r3, r2
 8006042:	2b40      	cmp	r3, #64	@ 0x40
 8006044:	d007      	beq.n	8006056 <HAL_SPI_Transmit+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2140      	movs	r1, #64	@ 0x40
 8006052:	430a      	orrs	r2, r1
 8006054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	23e0      	movs	r3, #224	@ 0xe0
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	429a      	cmp	r2, r3
 8006060:	d952      	bls.n	8006108 <HAL_SPI_Transmit+0x1d4>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d004      	beq.n	8006074 <HAL_SPI_Transmit+0x140>
 800606a:	2316      	movs	r3, #22
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d143      	bne.n	80060fc <HAL_SPI_Transmit+0x1c8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006078:	881a      	ldrh	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006084:	1c9a      	adds	r2, r3, #2
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006098:	e030      	b.n	80060fc <HAL_SPI_Transmit+0x1c8>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2202      	movs	r2, #2
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d112      	bne.n	80060ce <HAL_SPI_Transmit+0x19a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ac:	881a      	ldrh	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b8:	1c9a      	adds	r2, r3, #2
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060cc:	e016      	b.n	80060fc <HAL_SPI_Transmit+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ce:	f7fd f825 	bl	800311c <HAL_GetTick>
 80060d2:	0002      	movs	r2, r0
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d802      	bhi.n	80060e4 <HAL_SPI_Transmit+0x1b0>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	3301      	adds	r3, #1
 80060e2:	d102      	bne.n	80060ea <HAL_SPI_Transmit+0x1b6>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d108      	bne.n	80060fc <HAL_SPI_Transmit+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80060ea:	231f      	movs	r3, #31
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	2203      	movs	r2, #3
 80060f0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	225d      	movs	r2, #93	@ 0x5d
 80060f6:	2101      	movs	r1, #1
 80060f8:	5499      	strb	r1, [r3, r2]
          goto error;
 80060fa:	e080      	b.n	80061fe <HAL_SPI_Transmit+0x2ca>
    while (hspi->TxXferCount > 0U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1c9      	bne.n	800609a <HAL_SPI_Transmit+0x166>
 8006106:	e053      	b.n	80061b0 <HAL_SPI_Transmit+0x27c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <HAL_SPI_Transmit+0x1e6>
 8006110:	2316      	movs	r3, #22
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d145      	bne.n	80061a6 <HAL_SPI_Transmit+0x272>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006140:	e031      	b.n	80061a6 <HAL_SPI_Transmit+0x272>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2202      	movs	r2, #2
 800614a:	4013      	ands	r3, r2
 800614c:	2b02      	cmp	r3, #2
 800614e:	d113      	bne.n	8006178 <HAL_SPI_Transmit+0x244>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	330c      	adds	r3, #12
 800615a:	7812      	ldrb	r2, [r2, #0]
 800615c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006176:	e016      	b.n	80061a6 <HAL_SPI_Transmit+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006178:	f7fc ffd0 	bl	800311c <HAL_GetTick>
 800617c:	0002      	movs	r2, r0
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d802      	bhi.n	800618e <HAL_SPI_Transmit+0x25a>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	3301      	adds	r3, #1
 800618c:	d102      	bne.n	8006194 <HAL_SPI_Transmit+0x260>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d108      	bne.n	80061a6 <HAL_SPI_Transmit+0x272>
        {
          errorcode = HAL_TIMEOUT;
 8006194:	231f      	movs	r3, #31
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	2203      	movs	r2, #3
 800619a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	225d      	movs	r2, #93	@ 0x5d
 80061a0:	2101      	movs	r1, #1
 80061a2:	5499      	strb	r1, [r3, r2]
          goto error;
 80061a4:	e02b      	b.n	80061fe <HAL_SPI_Transmit+0x2ca>
    while (hspi->TxXferCount > 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1c8      	bne.n	8006142 <HAL_SPI_Transmit+0x20e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	0018      	movs	r0, r3
 80061b8:	f000 fcfe 	bl	8006bb8 <SPI_EndRxTxTransaction>
 80061bc:	1e03      	subs	r3, r0, #0
 80061be:	d002      	beq.n	80061c6 <HAL_SPI_Transmit+0x292>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <HAL_SPI_Transmit+0x2b0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ce:	2300      	movs	r3, #0
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d004      	beq.n	80061f6 <HAL_SPI_Transmit+0x2c2>
  {
    errorcode = HAL_ERROR;
 80061ec:	231f      	movs	r3, #31
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	2201      	movs	r2, #1
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	e003      	b.n	80061fe <HAL_SPI_Transmit+0x2ca>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	225d      	movs	r2, #93	@ 0x5d
 80061fa:	2101      	movs	r1, #1
 80061fc:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	225c      	movs	r2, #92	@ 0x5c
 8006202:	2100      	movs	r1, #0
 8006204:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006206:	231f      	movs	r3, #31
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	781b      	ldrb	r3, [r3, #0]
}
 800620c:	0018      	movs	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	b008      	add	sp, #32
 8006212:	bd80      	pop	{r7, pc}
 8006214:	0800b478 	.word	0x0800b478

08006218 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006218:	b590      	push	{r4, r7, lr}
 800621a:	b089      	sub	sp, #36	@ 0x24
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	1dbb      	adds	r3, r7, #6
 8006226:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006228:	2117      	movs	r1, #23
 800622a:	187b      	adds	r3, r7, r1
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	225d      	movs	r2, #93	@ 0x5d
 8006234:	5c9b      	ldrb	r3, [r3, r2]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	d003      	beq.n	8006244 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800623c:	187b      	adds	r3, r7, r1
 800623e:	2202      	movs	r2, #2
 8006240:	701a      	strb	r2, [r3, #0]
    goto error;
 8006242:	e12b      	b.n	800649c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	2382      	movs	r3, #130	@ 0x82
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	429a      	cmp	r2, r3
 800624e:	d113      	bne.n	8006278 <HAL_SPI_Receive+0x60>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10f      	bne.n	8006278 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	225d      	movs	r2, #93	@ 0x5d
 800625c:	2104      	movs	r1, #4
 800625e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006260:	1dbb      	adds	r3, r7, #6
 8006262:	881c      	ldrh	r4, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	68b9      	ldr	r1, [r7, #8]
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	0023      	movs	r3, r4
 8006270:	f000 f924 	bl	80064bc <HAL_SPI_TransmitReceive>
 8006274:	0003      	movs	r3, r0
 8006276:	e118      	b.n	80064aa <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	225c      	movs	r2, #92	@ 0x5c
 800627c:	5c9b      	ldrb	r3, [r3, r2]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_SPI_Receive+0x6e>
 8006282:	2302      	movs	r3, #2
 8006284:	e111      	b.n	80064aa <HAL_SPI_Receive+0x292>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	225c      	movs	r2, #92	@ 0x5c
 800628a:	2101      	movs	r1, #1
 800628c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800628e:	f7fc ff45 	bl	800311c <HAL_GetTick>
 8006292:	0003      	movs	r3, r0
 8006294:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_SPI_Receive+0x8c>
 800629c:	1dbb      	adds	r3, r7, #6
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d104      	bne.n	80062ae <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80062a4:	2317      	movs	r3, #23
 80062a6:	18fb      	adds	r3, r7, r3
 80062a8:	2201      	movs	r2, #1
 80062aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80062ac:	e0f6      	b.n	800649c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	225d      	movs	r2, #93	@ 0x5d
 80062b2:	2104      	movs	r1, #4
 80062b4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1dba      	adds	r2, r7, #6
 80062c6:	2144      	movs	r1, #68	@ 0x44
 80062c8:	8812      	ldrh	r2, [r2, #0]
 80062ca:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	1dba      	adds	r2, r7, #6
 80062d0:	2146      	movs	r1, #70	@ 0x46
 80062d2:	8812      	ldrh	r2, [r2, #0]
 80062d4:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	23e0      	movs	r3, #224	@ 0xe0
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d908      	bls.n	8006312 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	496a      	ldr	r1, [pc, #424]	@ (80064b4 <HAL_SPI_Receive+0x29c>)
 800630c:	400a      	ands	r2, r1
 800630e:	605a      	str	r2, [r3, #4]
 8006310:	e008      	b.n	8006324 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2180      	movs	r1, #128	@ 0x80
 800631e:	0149      	lsls	r1, r1, #5
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	2380      	movs	r3, #128	@ 0x80
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	429a      	cmp	r2, r3
 800632e:	d10f      	bne.n	8006350 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2140      	movs	r1, #64	@ 0x40
 800633c:	438a      	bics	r2, r1
 800633e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	495b      	ldr	r1, [pc, #364]	@ (80064b8 <HAL_SPI_Receive+0x2a0>)
 800634c:	400a      	ands	r2, r1
 800634e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2240      	movs	r2, #64	@ 0x40
 8006358:	4013      	ands	r3, r2
 800635a:	2b40      	cmp	r3, #64	@ 0x40
 800635c:	d007      	beq.n	800636e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2140      	movs	r1, #64	@ 0x40
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	23e0      	movs	r3, #224	@ 0xe0
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	429a      	cmp	r2, r3
 8006378:	d900      	bls.n	800637c <HAL_SPI_Receive+0x164>
 800637a:	e071      	b.n	8006460 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800637c:	e035      	b.n	80063ea <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2201      	movs	r2, #1
 8006386:	4013      	ands	r3, r2
 8006388:	2b01      	cmp	r3, #1
 800638a:	d117      	bne.n	80063bc <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	001a      	movs	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006398:	7812      	ldrb	r2, [r2, #0]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2246      	movs	r2, #70	@ 0x46
 80063ac:	5a9b      	ldrh	r3, [r3, r2]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b299      	uxth	r1, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2246      	movs	r2, #70	@ 0x46
 80063b8:	5299      	strh	r1, [r3, r2]
 80063ba:	e016      	b.n	80063ea <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063bc:	f7fc feae 	bl	800311c <HAL_GetTick>
 80063c0:	0002      	movs	r2, r0
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d802      	bhi.n	80063d2 <HAL_SPI_Receive+0x1ba>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	3301      	adds	r3, #1
 80063d0:	d102      	bne.n	80063d8 <HAL_SPI_Receive+0x1c0>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d108      	bne.n	80063ea <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80063d8:	2317      	movs	r3, #23
 80063da:	18fb      	adds	r3, r7, r3
 80063dc:	2203      	movs	r2, #3
 80063de:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	225d      	movs	r2, #93	@ 0x5d
 80063e4:	2101      	movs	r1, #1
 80063e6:	5499      	strb	r1, [r3, r2]
          goto error;
 80063e8:	e058      	b.n	800649c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2246      	movs	r2, #70	@ 0x46
 80063ee:	5a9b      	ldrh	r3, [r3, r2]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1c3      	bne.n	800637e <HAL_SPI_Receive+0x166>
 80063f6:	e039      	b.n	800646c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2201      	movs	r2, #1
 8006400:	4013      	ands	r3, r2
 8006402:	2b01      	cmp	r3, #1
 8006404:	d115      	bne.n	8006432 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006410:	b292      	uxth	r2, r2
 8006412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006418:	1c9a      	adds	r2, r3, #2
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2246      	movs	r2, #70	@ 0x46
 8006422:	5a9b      	ldrh	r3, [r3, r2]
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	b299      	uxth	r1, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2246      	movs	r2, #70	@ 0x46
 800642e:	5299      	strh	r1, [r3, r2]
 8006430:	e016      	b.n	8006460 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006432:	f7fc fe73 	bl	800311c <HAL_GetTick>
 8006436:	0002      	movs	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d802      	bhi.n	8006448 <HAL_SPI_Receive+0x230>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	3301      	adds	r3, #1
 8006446:	d102      	bne.n	800644e <HAL_SPI_Receive+0x236>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d108      	bne.n	8006460 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800644e:	2317      	movs	r3, #23
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	2203      	movs	r2, #3
 8006454:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	225d      	movs	r2, #93	@ 0x5d
 800645a:	2101      	movs	r1, #1
 800645c:	5499      	strb	r1, [r3, r2]
          goto error;
 800645e:	e01d      	b.n	800649c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2246      	movs	r2, #70	@ 0x46
 8006464:	5a9b      	ldrh	r3, [r3, r2]
 8006466:	b29b      	uxth	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1c5      	bne.n	80063f8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	0018      	movs	r0, r3
 8006474:	f000 fb42 	bl	8006afc <SPI_EndRxTransaction>
 8006478:	1e03      	subs	r3, r0, #0
 800647a:	d002      	beq.n	8006482 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006486:	2b00      	cmp	r3, #0
 8006488:	d004      	beq.n	8006494 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800648a:	2317      	movs	r3, #23
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	2201      	movs	r2, #1
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	e003      	b.n	800649c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	225d      	movs	r2, #93	@ 0x5d
 8006498:	2101      	movs	r1, #1
 800649a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	225c      	movs	r2, #92	@ 0x5c
 80064a0:	2100      	movs	r1, #0
 80064a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80064a4:	2317      	movs	r3, #23
 80064a6:	18fb      	adds	r3, r7, r3
 80064a8:	781b      	ldrb	r3, [r3, #0]
}
 80064aa:	0018      	movs	r0, r3
 80064ac:	46bd      	mov	sp, r7
 80064ae:	b007      	add	sp, #28
 80064b0:	bd90      	pop	{r4, r7, pc}
 80064b2:	46c0      	nop			@ (mov r8, r8)
 80064b4:	ffffefff 	.word	0xffffefff
 80064b8:	ffffbfff 	.word	0xffffbfff

080064bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	@ 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	001a      	movs	r2, r3
 80064ca:	1cbb      	adds	r3, r7, #2
 80064cc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064ce:	2301      	movs	r3, #1
 80064d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064d2:	2323      	movs	r3, #35	@ 0x23
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <HAL_SPI_TransmitReceive+0x34>
 80064e2:	239d      	movs	r3, #157	@ 0x9d
 80064e4:	00da      	lsls	r2, r3, #3
 80064e6:	4ba1      	ldr	r3, [pc, #644]	@ (800676c <HAL_SPI_TransmitReceive+0x2b0>)
 80064e8:	0011      	movs	r1, r2
 80064ea:	0018      	movs	r0, r3
 80064ec:	f7fc fb8a 	bl	8002c04 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	225c      	movs	r2, #92	@ 0x5c
 80064f4:	5c9b      	ldrb	r3, [r3, r2]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_SPI_TransmitReceive+0x42>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e1c9      	b.n	8006892 <HAL_SPI_TransmitReceive+0x3d6>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	225c      	movs	r2, #92	@ 0x5c
 8006502:	2101      	movs	r1, #1
 8006504:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006506:	f7fc fe09 	bl	800311c <HAL_GetTick>
 800650a:	0003      	movs	r3, r0
 800650c:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800650e:	201b      	movs	r0, #27
 8006510:	183b      	adds	r3, r7, r0
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	215d      	movs	r1, #93	@ 0x5d
 8006516:	5c52      	ldrb	r2, [r2, r1]
 8006518:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006520:	2312      	movs	r3, #18
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	1cba      	adds	r2, r7, #2
 8006526:	8812      	ldrh	r2, [r2, #0]
 8006528:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800652a:	183b      	adds	r3, r7, r0
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d011      	beq.n	8006556 <HAL_SPI_TransmitReceive+0x9a>
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	2382      	movs	r3, #130	@ 0x82
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	429a      	cmp	r2, r3
 800653a:	d107      	bne.n	800654c <HAL_SPI_TransmitReceive+0x90>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <HAL_SPI_TransmitReceive+0x90>
 8006544:	183b      	adds	r3, r7, r0
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b04      	cmp	r3, #4
 800654a:	d004      	beq.n	8006556 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_BUSY;
 800654c:	2323      	movs	r3, #35	@ 0x23
 800654e:	18fb      	adds	r3, r7, r3
 8006550:	2202      	movs	r2, #2
 8006552:	701a      	strb	r2, [r3, #0]
    goto error;
 8006554:	e196      	b.n	8006884 <HAL_SPI_TransmitReceive+0x3c8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d006      	beq.n	800656a <HAL_SPI_TransmitReceive+0xae>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_SPI_TransmitReceive+0xae>
 8006562:	1cbb      	adds	r3, r7, #2
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d104      	bne.n	8006574 <HAL_SPI_TransmitReceive+0xb8>
  {
    errorcode = HAL_ERROR;
 800656a:	2323      	movs	r3, #35	@ 0x23
 800656c:	18fb      	adds	r3, r7, r3
 800656e:	2201      	movs	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
    goto error;
 8006572:	e187      	b.n	8006884 <HAL_SPI_TransmitReceive+0x3c8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	225d      	movs	r2, #93	@ 0x5d
 8006578:	5c9b      	ldrb	r3, [r3, r2]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b04      	cmp	r3, #4
 800657e:	d003      	beq.n	8006588 <HAL_SPI_TransmitReceive+0xcc>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	225d      	movs	r2, #93	@ 0x5d
 8006584:	2105      	movs	r1, #5
 8006586:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	1cba      	adds	r2, r7, #2
 8006598:	2146      	movs	r1, #70	@ 0x46
 800659a:	8812      	ldrh	r2, [r2, #0]
 800659c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1cba      	adds	r2, r7, #2
 80065a2:	2144      	movs	r1, #68	@ 0x44
 80065a4:	8812      	ldrh	r2, [r2, #0]
 80065a6:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1cba      	adds	r2, r7, #2
 80065b2:	8812      	ldrh	r2, [r2, #0]
 80065b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1cba      	adds	r2, r7, #2
 80065ba:	8812      	ldrh	r2, [r2, #0]
 80065bc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	23e0      	movs	r3, #224	@ 0xe0
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d908      	bls.n	80065e8 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4963      	ldr	r1, [pc, #396]	@ (8006770 <HAL_SPI_TransmitReceive+0x2b4>)
 80065e2:	400a      	ands	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
 80065e6:	e008      	b.n	80065fa <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2180      	movs	r1, #128	@ 0x80
 80065f4:	0149      	lsls	r1, r1, #5
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2240      	movs	r2, #64	@ 0x40
 8006602:	4013      	ands	r3, r2
 8006604:	2b40      	cmp	r3, #64	@ 0x40
 8006606:	d007      	beq.n	8006618 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2140      	movs	r1, #64	@ 0x40
 8006614:	430a      	orrs	r2, r1
 8006616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	23e0      	movs	r3, #224	@ 0xe0
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	429a      	cmp	r2, r3
 8006622:	d800      	bhi.n	8006626 <HAL_SPI_TransmitReceive+0x16a>
 8006624:	e083      	b.n	800672e <HAL_SPI_TransmitReceive+0x272>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <HAL_SPI_TransmitReceive+0x17e>
 800662e:	2312      	movs	r3, #18
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d000      	beq.n	800663a <HAL_SPI_TransmitReceive+0x17e>
 8006638:	e06d      	b.n	8006716 <HAL_SPI_TransmitReceive+0x25a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663e:	881a      	ldrh	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664a:	1c9a      	adds	r2, r3, #2
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006654:	b29b      	uxth	r3, r3
 8006656:	3b01      	subs	r3, #1
 8006658:	b29a      	uxth	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800665e:	e05a      	b.n	8006716 <HAL_SPI_TransmitReceive+0x25a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2202      	movs	r2, #2
 8006668:	4013      	ands	r3, r2
 800666a:	2b02      	cmp	r3, #2
 800666c:	d11b      	bne.n	80066a6 <HAL_SPI_TransmitReceive+0x1ea>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d016      	beq.n	80066a6 <HAL_SPI_TransmitReceive+0x1ea>
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	2b01      	cmp	r3, #1
 800667c:	d113      	bne.n	80066a6 <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006682:	881a      	ldrh	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668e:	1c9a      	adds	r2, r3, #2
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2201      	movs	r2, #1
 80066ae:	4013      	ands	r3, r2
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d11c      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x232>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2246      	movs	r2, #70	@ 0x46
 80066b8:	5a9b      	ldrh	r3, [r3, r2]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d016      	beq.n	80066ee <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ca:	b292      	uxth	r2, r2
 80066cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d2:	1c9a      	adds	r2, r3, #2
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2246      	movs	r2, #70	@ 0x46
 80066dc:	5a9b      	ldrh	r3, [r3, r2]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b299      	uxth	r1, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2246      	movs	r2, #70	@ 0x46
 80066e8:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066ea:	2301      	movs	r3, #1
 80066ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066ee:	f7fc fd15 	bl	800311c <HAL_GetTick>
 80066f2:	0002      	movs	r2, r0
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d80b      	bhi.n	8006716 <HAL_SPI_TransmitReceive+0x25a>
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	3301      	adds	r3, #1
 8006702:	d008      	beq.n	8006716 <HAL_SPI_TransmitReceive+0x25a>
      {
        errorcode = HAL_TIMEOUT;
 8006704:	2323      	movs	r3, #35	@ 0x23
 8006706:	18fb      	adds	r3, r7, r3
 8006708:	2203      	movs	r2, #3
 800670a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	225d      	movs	r2, #93	@ 0x5d
 8006710:	2101      	movs	r1, #1
 8006712:	5499      	strb	r1, [r3, r2]
        goto error;
 8006714:	e0b6      	b.n	8006884 <HAL_SPI_TransmitReceive+0x3c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d19f      	bne.n	8006660 <HAL_SPI_TransmitReceive+0x1a4>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2246      	movs	r2, #70	@ 0x46
 8006724:	5a9b      	ldrh	r3, [r3, r2]
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d199      	bne.n	8006660 <HAL_SPI_TransmitReceive+0x1a4>
 800672c:	e08e      	b.n	800684c <HAL_SPI_TransmitReceive+0x390>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x286>
 8006736:	2312      	movs	r3, #18
 8006738:	18fb      	adds	r3, r7, r3
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d000      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x286>
 8006740:	e079      	b.n	8006836 <HAL_SPI_TransmitReceive+0x37a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	330c      	adds	r3, #12
 800674c:	7812      	ldrb	r2, [r2, #0]
 800674e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800675e:	b29b      	uxth	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006768:	e065      	b.n	8006836 <HAL_SPI_TransmitReceive+0x37a>
 800676a:	46c0      	nop			@ (mov r8, r8)
 800676c:	0800b478 	.word	0x0800b478
 8006770:	ffffefff 	.word	0xffffefff
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2202      	movs	r2, #2
 800677c:	4013      	ands	r3, r2
 800677e:	2b02      	cmp	r3, #2
 8006780:	d11c      	bne.n	80067bc <HAL_SPI_TransmitReceive+0x300>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d017      	beq.n	80067bc <HAL_SPI_TransmitReceive+0x300>
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	2b01      	cmp	r3, #1
 8006790:	d114      	bne.n	80067bc <HAL_SPI_TransmitReceive+0x300>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	330c      	adds	r3, #12
 800679c:	7812      	ldrb	r2, [r2, #0]
 800679e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	2201      	movs	r2, #1
 80067c4:	4013      	ands	r3, r2
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d11e      	bne.n	8006808 <HAL_SPI_TransmitReceive+0x34c>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2246      	movs	r2, #70	@ 0x46
 80067ce:	5a9b      	ldrh	r3, [r3, r2]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d018      	beq.n	8006808 <HAL_SPI_TransmitReceive+0x34c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	001a      	movs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	7812      	ldrb	r2, [r2, #0]
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2246      	movs	r2, #70	@ 0x46
 80067f6:	5a9b      	ldrh	r3, [r3, r2]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b299      	uxth	r1, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2246      	movs	r2, #70	@ 0x46
 8006802:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006804:	2301      	movs	r3, #1
 8006806:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006808:	f7fc fc88 	bl	800311c <HAL_GetTick>
 800680c:	0002      	movs	r2, r0
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006814:	429a      	cmp	r2, r3
 8006816:	d802      	bhi.n	800681e <HAL_SPI_TransmitReceive+0x362>
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	3301      	adds	r3, #1
 800681c:	d102      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x368>
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	2b00      	cmp	r3, #0
 8006822:	d108      	bne.n	8006836 <HAL_SPI_TransmitReceive+0x37a>
      {
        errorcode = HAL_TIMEOUT;
 8006824:	2323      	movs	r3, #35	@ 0x23
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	2203      	movs	r2, #3
 800682a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	225d      	movs	r2, #93	@ 0x5d
 8006830:	2101      	movs	r1, #1
 8006832:	5499      	strb	r1, [r3, r2]
        goto error;
 8006834:	e026      	b.n	8006884 <HAL_SPI_TransmitReceive+0x3c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d199      	bne.n	8006774 <HAL_SPI_TransmitReceive+0x2b8>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2246      	movs	r2, #70	@ 0x46
 8006844:	5a9b      	ldrh	r3, [r3, r2]
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d193      	bne.n	8006774 <HAL_SPI_TransmitReceive+0x2b8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800684c:	69fa      	ldr	r2, [r7, #28]
 800684e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	0018      	movs	r0, r3
 8006854:	f000 f9b0 	bl	8006bb8 <SPI_EndRxTxTransaction>
 8006858:	1e03      	subs	r3, r0, #0
 800685a:	d006      	beq.n	800686a <HAL_SPI_TransmitReceive+0x3ae>
  {
    errorcode = HAL_ERROR;
 800685c:	2323      	movs	r3, #35	@ 0x23
 800685e:	18fb      	adds	r3, r7, r3
 8006860:	2201      	movs	r2, #1
 8006862:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2220      	movs	r2, #32
 8006868:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800686e:	2b00      	cmp	r3, #0
 8006870:	d004      	beq.n	800687c <HAL_SPI_TransmitReceive+0x3c0>
  {
    errorcode = HAL_ERROR;
 8006872:	2323      	movs	r3, #35	@ 0x23
 8006874:	18fb      	adds	r3, r7, r3
 8006876:	2201      	movs	r2, #1
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e003      	b.n	8006884 <HAL_SPI_TransmitReceive+0x3c8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	225d      	movs	r2, #93	@ 0x5d
 8006880:	2101      	movs	r1, #1
 8006882:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	225c      	movs	r2, #92	@ 0x5c
 8006888:	2100      	movs	r1, #0
 800688a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800688c:	2323      	movs	r3, #35	@ 0x23
 800688e:	18fb      	adds	r3, r7, r3
 8006890:	781b      	ldrb	r3, [r3, #0]
}
 8006892:	0018      	movs	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	b00a      	add	sp, #40	@ 0x28
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			@ (mov r8, r8)

0800689c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	1dfb      	adds	r3, r7, #7
 80068aa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068ac:	f7fc fc36 	bl	800311c <HAL_GetTick>
 80068b0:	0002      	movs	r2, r0
 80068b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	18d3      	adds	r3, r2, r3
 80068ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068bc:	f7fc fc2e 	bl	800311c <HAL_GetTick>
 80068c0:	0003      	movs	r3, r0
 80068c2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068c4:	4b3a      	ldr	r3, [pc, #232]	@ (80069b0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	015b      	lsls	r3, r3, #5
 80068ca:	0d1b      	lsrs	r3, r3, #20
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	4353      	muls	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068d2:	e058      	b.n	8006986 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	3301      	adds	r3, #1
 80068d8:	d055      	beq.n	8006986 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068da:	f7fc fc1f 	bl	800311c <HAL_GetTick>
 80068de:	0002      	movs	r2, r0
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d902      	bls.n	80068f0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d142      	bne.n	8006976 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	21e0      	movs	r1, #224	@ 0xe0
 80068fc:	438a      	bics	r2, r1
 80068fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	2382      	movs	r3, #130	@ 0x82
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	429a      	cmp	r2, r3
 800690a:	d113      	bne.n	8006934 <SPI_WaitFlagStateUntilTimeout+0x98>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	2380      	movs	r3, #128	@ 0x80
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	429a      	cmp	r2, r3
 8006916:	d005      	beq.n	8006924 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	2380      	movs	r3, #128	@ 0x80
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	429a      	cmp	r2, r3
 8006922:	d107      	bne.n	8006934 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2140      	movs	r1, #64	@ 0x40
 8006930:	438a      	bics	r2, r1
 8006932:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006938:	2380      	movs	r3, #128	@ 0x80
 800693a:	019b      	lsls	r3, r3, #6
 800693c:	429a      	cmp	r2, r3
 800693e:	d110      	bne.n	8006962 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	491a      	ldr	r1, [pc, #104]	@ (80069b4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800694c:	400a      	ands	r2, r1
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2180      	movs	r1, #128	@ 0x80
 800695c:	0189      	lsls	r1, r1, #6
 800695e:	430a      	orrs	r2, r1
 8006960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	225d      	movs	r2, #93	@ 0x5d
 8006966:	2101      	movs	r1, #1
 8006968:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	225c      	movs	r2, #92	@ 0x5c
 800696e:	2100      	movs	r1, #0
 8006970:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e017      	b.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3b01      	subs	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	4013      	ands	r3, r2
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	425a      	negs	r2, r3
 8006996:	4153      	adcs	r3, r2
 8006998:	b2db      	uxtb	r3, r3
 800699a:	001a      	movs	r2, r3
 800699c:	1dfb      	adds	r3, r7, #7
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d197      	bne.n	80068d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	0018      	movs	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b008      	add	sp, #32
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	20000014 	.word	0x20000014
 80069b4:	ffffdfff 	.word	0xffffdfff

080069b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	@ 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069c6:	2317      	movs	r3, #23
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	2200      	movs	r2, #0
 80069cc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80069ce:	f7fc fba5 	bl	800311c <HAL_GetTick>
 80069d2:	0002      	movs	r2, r0
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	18d3      	adds	r3, r2, r3
 80069dc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80069de:	f7fc fb9d 	bl	800311c <HAL_GetTick>
 80069e2:	0003      	movs	r3, r0
 80069e4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	330c      	adds	r3, #12
 80069ec:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80069ee:	4b41      	ldr	r3, [pc, #260]	@ (8006af4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	0013      	movs	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	189b      	adds	r3, r3, r2
 80069f8:	00da      	lsls	r2, r3, #3
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	0d1b      	lsrs	r3, r3, #20
 80069fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a00:	4353      	muls	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a04:	e068      	b.n	8006ad8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	23c0      	movs	r3, #192	@ 0xc0
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d10a      	bne.n	8006a26 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d107      	bne.n	8006a26 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	2117      	movs	r1, #23
 8006a1e:	187b      	adds	r3, r7, r1
 8006a20:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a22:	187b      	adds	r3, r7, r1
 8006a24:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	d055      	beq.n	8006ad8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a2c:	f7fc fb76 	bl	800311c <HAL_GetTick>
 8006a30:	0002      	movs	r2, r0
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d902      	bls.n	8006a42 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d142      	bne.n	8006ac8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	21e0      	movs	r1, #224	@ 0xe0
 8006a4e:	438a      	bics	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	2382      	movs	r3, #130	@ 0x82
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d113      	bne.n	8006a86 <SPI_WaitFifoStateUntilTimeout+0xce>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	2380      	movs	r3, #128	@ 0x80
 8006a64:	021b      	lsls	r3, r3, #8
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d005      	beq.n	8006a76 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	2380      	movs	r3, #128	@ 0x80
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d107      	bne.n	8006a86 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2140      	movs	r1, #64	@ 0x40
 8006a82:	438a      	bics	r2, r1
 8006a84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a8a:	2380      	movs	r3, #128	@ 0x80
 8006a8c:	019b      	lsls	r3, r3, #6
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d110      	bne.n	8006ab4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4916      	ldr	r1, [pc, #88]	@ (8006af8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006a9e:	400a      	ands	r2, r1
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2180      	movs	r1, #128	@ 0x80
 8006aae:	0189      	lsls	r1, r1, #6
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	225d      	movs	r2, #93	@ 0x5d
 8006ab8:	2101      	movs	r1, #1
 8006aba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	225c      	movs	r2, #92	@ 0x5c
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e010      	b.n	8006aea <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d18e      	bne.n	8006a06 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	0018      	movs	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	b00a      	add	sp, #40	@ 0x28
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	46c0      	nop			@ (mov r8, r8)
 8006af4:	20000014 	.word	0x20000014
 8006af8:	ffffdfff 	.word	0xffffdfff

08006afc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	2382      	movs	r3, #130	@ 0x82
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d113      	bne.n	8006b3c <SPI_EndRxTransaction+0x40>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	2380      	movs	r3, #128	@ 0x80
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d005      	beq.n	8006b2c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	2380      	movs	r3, #128	@ 0x80
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d107      	bne.n	8006b3c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2140      	movs	r1, #64	@ 0x40
 8006b38:	438a      	bics	r2, r1
 8006b3a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	0013      	movs	r3, r2
 8006b46:	2200      	movs	r2, #0
 8006b48:	2180      	movs	r1, #128	@ 0x80
 8006b4a:	f7ff fea7 	bl	800689c <SPI_WaitFlagStateUntilTimeout>
 8006b4e:	1e03      	subs	r3, r0, #0
 8006b50:	d007      	beq.n	8006b62 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b56:	2220      	movs	r2, #32
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e026      	b.n	8006bb0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	2382      	movs	r3, #130	@ 0x82
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d11f      	bne.n	8006bae <SPI_EndRxTransaction+0xb2>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	2380      	movs	r3, #128	@ 0x80
 8006b74:	021b      	lsls	r3, r3, #8
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d005      	beq.n	8006b86 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	2380      	movs	r3, #128	@ 0x80
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d113      	bne.n	8006bae <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	23c0      	movs	r3, #192	@ 0xc0
 8006b8a:	00d9      	lsls	r1, r3, #3
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	0013      	movs	r3, r2
 8006b94:	2200      	movs	r2, #0
 8006b96:	f7ff ff0f 	bl	80069b8 <SPI_WaitFifoStateUntilTimeout>
 8006b9a:	1e03      	subs	r3, r0, #0
 8006b9c:	d007      	beq.n	8006bae <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e000      	b.n	8006bb0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b004      	add	sp, #16
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	23c0      	movs	r3, #192	@ 0xc0
 8006bc8:	0159      	lsls	r1, r3, #5
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	0013      	movs	r3, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f7ff fef0 	bl	80069b8 <SPI_WaitFifoStateUntilTimeout>
 8006bd8:	1e03      	subs	r3, r0, #0
 8006bda:	d007      	beq.n	8006bec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be0:	2220      	movs	r2, #32
 8006be2:	431a      	orrs	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e027      	b.n	8006c3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	0013      	movs	r3, r2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2180      	movs	r1, #128	@ 0x80
 8006bfa:	f7ff fe4f 	bl	800689c <SPI_WaitFlagStateUntilTimeout>
 8006bfe:	1e03      	subs	r3, r0, #0
 8006c00:	d007      	beq.n	8006c12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c06:	2220      	movs	r2, #32
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e014      	b.n	8006c3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	23c0      	movs	r3, #192	@ 0xc0
 8006c16:	00d9      	lsls	r1, r3, #3
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	0013      	movs	r3, r2
 8006c20:	2200      	movs	r2, #0
 8006c22:	f7ff fec9 	bl	80069b8 <SPI_WaitFifoStateUntilTimeout>
 8006c26:	1e03      	subs	r3, r0, #0
 8006c28:	d007      	beq.n	8006c3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c2e:	2220      	movs	r2, #32
 8006c30:	431a      	orrs	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e000      	b.n	8006c3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b004      	add	sp, #16
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e096      	b.n	8006d84 <HAL_UART_Init+0x140>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d025      	beq.n	8006caa <HAL_UART_Init+0x66>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a4a      	ldr	r2, [pc, #296]	@ (8006d8c <HAL_UART_Init+0x148>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d046      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a48      	ldr	r2, [pc, #288]	@ (8006d90 <HAL_UART_Init+0x14c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d041      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a47      	ldr	r2, [pc, #284]	@ (8006d94 <HAL_UART_Init+0x150>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d03c      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a45      	ldr	r2, [pc, #276]	@ (8006d98 <HAL_UART_Init+0x154>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d037      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a44      	ldr	r2, [pc, #272]	@ (8006d9c <HAL_UART_Init+0x158>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d032      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a42      	ldr	r2, [pc, #264]	@ (8006da0 <HAL_UART_Init+0x15c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d02d      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006c9a:	23a0      	movs	r3, #160	@ 0xa0
 8006c9c:	005a      	lsls	r2, r3, #1
 8006c9e:	4b41      	ldr	r3, [pc, #260]	@ (8006da4 <HAL_UART_Init+0x160>)
 8006ca0:	0011      	movs	r1, r2
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f7fb ffae 	bl	8002c04 <assert_failed>
 8006ca8:	e025      	b.n	8006cf6 <HAL_UART_Init+0xb2>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a37      	ldr	r2, [pc, #220]	@ (8006d8c <HAL_UART_Init+0x148>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d020      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a35      	ldr	r2, [pc, #212]	@ (8006d90 <HAL_UART_Init+0x14c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01b      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a34      	ldr	r2, [pc, #208]	@ (8006d94 <HAL_UART_Init+0x150>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d016      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a32      	ldr	r2, [pc, #200]	@ (8006d98 <HAL_UART_Init+0x154>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d011      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a31      	ldr	r2, [pc, #196]	@ (8006d9c <HAL_UART_Init+0x158>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00c      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8006da0 <HAL_UART_Init+0x15c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d007      	beq.n	8006cf6 <HAL_UART_Init+0xb2>
 8006ce6:	2346      	movs	r3, #70	@ 0x46
 8006ce8:	33ff      	adds	r3, #255	@ 0xff
 8006cea:	001a      	movs	r2, r3
 8006cec:	4b2d      	ldr	r3, [pc, #180]	@ (8006da4 <HAL_UART_Init+0x160>)
 8006cee:	0011      	movs	r1, r2
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f7fb ff87 	bl	8002c04 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2288      	movs	r2, #136	@ 0x88
 8006cfa:	589b      	ldr	r3, [r3, r2]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d107      	bne.n	8006d10 <HAL_UART_Init+0xcc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2284      	movs	r2, #132	@ 0x84
 8006d04:	2100      	movs	r1, #0
 8006d06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f7fc f90a 	bl	8002f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2288      	movs	r2, #136	@ 0x88
 8006d14:	2124      	movs	r1, #36	@ 0x24
 8006d16:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2101      	movs	r1, #1
 8006d24:	438a      	bics	r2, r1
 8006d26:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_UART_Init+0xf4>
  {
    UART_AdvFeatureConfig(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	0018      	movs	r0, r3
 8006d34:	f000 fba4 	bl	8007480 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	f000 f8da 	bl	8006ef4 <UART_SetConfig>
 8006d40:	0003      	movs	r3, r0
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_UART_Init+0x106>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e01c      	b.n	8006d84 <HAL_UART_Init+0x140>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4914      	ldr	r1, [pc, #80]	@ (8006da8 <HAL_UART_Init+0x164>)
 8006d56:	400a      	ands	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	212a      	movs	r1, #42	@ 0x2a
 8006d66:	438a      	bics	r2, r1
 8006d68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2101      	movs	r1, #1
 8006d76:	430a      	orrs	r2, r1
 8006d78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f000 fd05 	bl	800778c <UART_CheckIdleState>
 8006d82:	0003      	movs	r3, r0
}
 8006d84:	0018      	movs	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b002      	add	sp, #8
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40013800 	.word	0x40013800
 8006d90:	40004400 	.word	0x40004400
 8006d94:	40004800 	.word	0x40004800
 8006d98:	40004c00 	.word	0x40004c00
 8006d9c:	40008000 	.word	0x40008000
 8006da0:	40008400 	.word	0x40008400
 8006da4:	0800b4b0 	.word	0x0800b4b0
 8006da8:	ffffb7ff 	.word	0xffffb7ff

08006dac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	@ 0x28
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	1dbb      	adds	r3, r7, #6
 8006dba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2288      	movs	r2, #136	@ 0x88
 8006dc0:	589b      	ldr	r3, [r3, r2]
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d000      	beq.n	8006dc8 <HAL_UART_Transmit+0x1c>
 8006dc6:	e090      	b.n	8006eea <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_UART_Transmit+0x2a>
 8006dce:	1dbb      	adds	r3, r7, #6
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e088      	b.n	8006eec <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	2380      	movs	r3, #128	@ 0x80
 8006de0:	015b      	lsls	r3, r3, #5
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d109      	bne.n	8006dfa <HAL_UART_Transmit+0x4e>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d105      	bne.n	8006dfa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2201      	movs	r2, #1
 8006df2:	4013      	ands	r3, r2
 8006df4:	d001      	beq.n	8006dfa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e078      	b.n	8006eec <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2290      	movs	r2, #144	@ 0x90
 8006dfe:	2100      	movs	r1, #0
 8006e00:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2288      	movs	r2, #136	@ 0x88
 8006e06:	2121      	movs	r1, #33	@ 0x21
 8006e08:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e0a:	f7fc f987 	bl	800311c <HAL_GetTick>
 8006e0e:	0003      	movs	r3, r0
 8006e10:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	1dba      	adds	r2, r7, #6
 8006e16:	2154      	movs	r1, #84	@ 0x54
 8006e18:	8812      	ldrh	r2, [r2, #0]
 8006e1a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	1dba      	adds	r2, r7, #6
 8006e20:	2156      	movs	r1, #86	@ 0x56
 8006e22:	8812      	ldrh	r2, [r2, #0]
 8006e24:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	2380      	movs	r3, #128	@ 0x80
 8006e2c:	015b      	lsls	r3, r3, #5
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d108      	bne.n	8006e44 <HAL_UART_Transmit+0x98>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d104      	bne.n	8006e44 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	e003      	b.n	8006e4c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e4c:	e030      	b.n	8006eb0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	0013      	movs	r3, r2
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2180      	movs	r1, #128	@ 0x80
 8006e5c:	f000 fd40 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 8006e60:	1e03      	subs	r3, r0, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2288      	movs	r2, #136	@ 0x88
 8006e68:	2120      	movs	r1, #32
 8006e6a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e03d      	b.n	8006eec <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10b      	bne.n	8006e8e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	001a      	movs	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	05d2      	lsls	r2, r2, #23
 8006e82:	0dd2      	lsrs	r2, r2, #23
 8006e84:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	3302      	adds	r3, #2
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	e007      	b.n	8006e9e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2256      	movs	r2, #86	@ 0x56
 8006ea2:	5a9b      	ldrh	r3, [r3, r2]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b299      	uxth	r1, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2256      	movs	r2, #86	@ 0x56
 8006eae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2256      	movs	r2, #86	@ 0x56
 8006eb4:	5a9b      	ldrh	r3, [r3, r2]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1c8      	bne.n	8006e4e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	0013      	movs	r3, r2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2140      	movs	r1, #64	@ 0x40
 8006eca:	f000 fd09 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 8006ece:	1e03      	subs	r3, r0, #0
 8006ed0:	d005      	beq.n	8006ede <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2288      	movs	r2, #136	@ 0x88
 8006ed6:	2120      	movs	r1, #32
 8006ed8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e006      	b.n	8006eec <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2288      	movs	r2, #136	@ 0x88
 8006ee2:	2120      	movs	r1, #32
 8006ee4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e000      	b.n	8006eec <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006eea:	2302      	movs	r3, #2
  }
}
 8006eec:	0018      	movs	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	b008      	add	sp, #32
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ef4:	b5b0      	push	{r4, r5, r7, lr}
 8006ef6:	b092      	sub	sp, #72	@ 0x48
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006efc:	231f      	movs	r3, #31
 8006efe:	2220      	movs	r2, #32
 8006f00:	189b      	adds	r3, r3, r2
 8006f02:	19db      	adds	r3, r3, r7
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	4ab6      	ldr	r2, [pc, #728]	@ (80071e8 <UART_SetConfig+0x2f4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d905      	bls.n	8006f1e <UART_SetConfig+0x2a>
 8006f12:	4ab6      	ldr	r2, [pc, #728]	@ (80071ec <UART_SetConfig+0x2f8>)
 8006f14:	4bb6      	ldr	r3, [pc, #728]	@ (80071f0 <UART_SetConfig+0x2fc>)
 8006f16:	0011      	movs	r1, r2
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f7fb fe73 	bl	8002c04 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	2380      	movs	r3, #128	@ 0x80
 8006f24:	055b      	lsls	r3, r3, #21
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d00f      	beq.n	8006f4a <UART_SetConfig+0x56>
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00b      	beq.n	8006f4a <UART_SetConfig+0x56>
 8006f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	2380      	movs	r3, #128	@ 0x80
 8006f38:	015b      	lsls	r3, r3, #5
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d005      	beq.n	8006f4a <UART_SetConfig+0x56>
 8006f3e:	4aad      	ldr	r2, [pc, #692]	@ (80071f4 <UART_SetConfig+0x300>)
 8006f40:	4bab      	ldr	r3, [pc, #684]	@ (80071f0 <UART_SetConfig+0x2fc>)
 8006f42:	0011      	movs	r1, r2
 8006f44:	0018      	movs	r0, r3
 8006f46:	f7fb fe5d 	bl	8002c04 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4aaa      	ldr	r2, [pc, #680]	@ (80071f8 <UART_SetConfig+0x304>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d004      	beq.n	8006f5e <UART_SetConfig+0x6a>
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4aa8      	ldr	r2, [pc, #672]	@ (80071fc <UART_SetConfig+0x308>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d110      	bne.n	8006f80 <UART_SetConfig+0x8c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d038      	beq.n	8006fd8 <UART_SetConfig+0xe4>
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	2380      	movs	r3, #128	@ 0x80
 8006f6c:	019b      	lsls	r3, r3, #6
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d032      	beq.n	8006fd8 <UART_SetConfig+0xe4>
 8006f72:	4aa3      	ldr	r2, [pc, #652]	@ (8007200 <UART_SetConfig+0x30c>)
 8006f74:	4b9e      	ldr	r3, [pc, #632]	@ (80071f0 <UART_SetConfig+0x2fc>)
 8006f76:	0011      	movs	r1, r2
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f7fb fe43 	bl	8002c04 <assert_failed>
 8006f7e:	e02b      	b.n	8006fd8 <UART_SetConfig+0xe4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	2380      	movs	r3, #128	@ 0x80
 8006f86:	015b      	lsls	r3, r3, #5
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d015      	beq.n	8006fb8 <UART_SetConfig+0xc4>
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d011      	beq.n	8006fb8 <UART_SetConfig+0xc4>
 8006f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	23c0      	movs	r3, #192	@ 0xc0
 8006f9a:	019b      	lsls	r3, r3, #6
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d00b      	beq.n	8006fb8 <UART_SetConfig+0xc4>
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	2380      	movs	r3, #128	@ 0x80
 8006fa6:	019b      	lsls	r3, r3, #6
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d005      	beq.n	8006fb8 <UART_SetConfig+0xc4>
 8006fac:	4a95      	ldr	r2, [pc, #596]	@ (8007204 <UART_SetConfig+0x310>)
 8006fae:	4b90      	ldr	r3, [pc, #576]	@ (80071f0 <UART_SetConfig+0x2fc>)
 8006fb0:	0011      	movs	r1, r2
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f7fb fe26 	bl	8002c04 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <UART_SetConfig+0xe4>
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	6a1a      	ldr	r2, [r3, #32]
 8006fc4:	2380      	movs	r3, #128	@ 0x80
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d005      	beq.n	8006fd8 <UART_SetConfig+0xe4>
 8006fcc:	4a8e      	ldr	r2, [pc, #568]	@ (8007208 <UART_SetConfig+0x314>)
 8006fce:	4b88      	ldr	r3, [pc, #544]	@ (80071f0 <UART_SetConfig+0x2fc>)
 8006fd0:	0011      	movs	r1, r2
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f7fb fe16 	bl	8002c04 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d011      	beq.n	8007004 <UART_SetConfig+0x110>
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	2380      	movs	r3, #128	@ 0x80
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d00b      	beq.n	8007004 <UART_SetConfig+0x110>
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	23c0      	movs	r3, #192	@ 0xc0
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d005      	beq.n	8007004 <UART_SetConfig+0x110>
 8006ff8:	4a84      	ldr	r2, [pc, #528]	@ (800720c <UART_SetConfig+0x318>)
 8006ffa:	4b7d      	ldr	r3, [pc, #500]	@ (80071f0 <UART_SetConfig+0x2fc>)
 8006ffc:	0011      	movs	r1, r2
 8006ffe:	0018      	movs	r0, r3
 8007000:	f7fb fe00 	bl	8002c04 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	220c      	movs	r2, #12
 800700a:	4393      	bics	r3, r2
 800700c:	d103      	bne.n	8007016 <UART_SetConfig+0x122>
 800700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d105      	bne.n	8007022 <UART_SetConfig+0x12e>
 8007016:	4a7e      	ldr	r2, [pc, #504]	@ (8007210 <UART_SetConfig+0x31c>)
 8007018:	4b75      	ldr	r3, [pc, #468]	@ (80071f0 <UART_SetConfig+0x2fc>)
 800701a:	0011      	movs	r1, r2
 800701c:	0018      	movs	r0, r3
 800701e:	f7fb fdf1 	bl	8002c04 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d017      	beq.n	800705a <UART_SetConfig+0x166>
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	2380      	movs	r3, #128	@ 0x80
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	429a      	cmp	r2, r3
 8007034:	d011      	beq.n	800705a <UART_SetConfig+0x166>
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	2380      	movs	r3, #128	@ 0x80
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	429a      	cmp	r2, r3
 8007040:	d00b      	beq.n	800705a <UART_SetConfig+0x166>
 8007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	23c0      	movs	r3, #192	@ 0xc0
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	429a      	cmp	r2, r3
 800704c:	d005      	beq.n	800705a <UART_SetConfig+0x166>
 800704e:	4a71      	ldr	r2, [pc, #452]	@ (8007214 <UART_SetConfig+0x320>)
 8007050:	4b67      	ldr	r3, [pc, #412]	@ (80071f0 <UART_SetConfig+0x2fc>)
 8007052:	0011      	movs	r1, r2
 8007054:	0018      	movs	r0, r3
 8007056:	f7fb fdd5 	bl	8002c04 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <UART_SetConfig+0x186>
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	69da      	ldr	r2, [r3, #28]
 8007066:	2380      	movs	r3, #128	@ 0x80
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	429a      	cmp	r2, r3
 800706c:	d005      	beq.n	800707a <UART_SetConfig+0x186>
 800706e:	4a6a      	ldr	r2, [pc, #424]	@ (8007218 <UART_SetConfig+0x324>)
 8007070:	4b5f      	ldr	r3, [pc, #380]	@ (80071f0 <UART_SetConfig+0x2fc>)
 8007072:	0011      	movs	r1, r2
 8007074:	0018      	movs	r0, r3
 8007076:	f7fb fdc5 	bl	8002c04 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	d031      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007086:	2b01      	cmp	r3, #1
 8007088:	d02d      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 800708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708e:	2b02      	cmp	r3, #2
 8007090:	d029      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	2b03      	cmp	r3, #3
 8007098:	d025      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d021      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 80070a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a6:	2b05      	cmp	r3, #5
 80070a8:	d01d      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ae:	2b06      	cmp	r3, #6
 80070b0:	d019      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b6:	2b07      	cmp	r3, #7
 80070b8:	d015      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d011      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c6:	2b09      	cmp	r3, #9
 80070c8:	d00d      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ce:	2b0a      	cmp	r3, #10
 80070d0:	d009      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d6:	2b0b      	cmp	r3, #11
 80070d8:	d005      	beq.n	80070e6 <UART_SetConfig+0x1f2>
 80070da:	4a50      	ldr	r2, [pc, #320]	@ (800721c <UART_SetConfig+0x328>)
 80070dc:	4b44      	ldr	r3, [pc, #272]	@ (80071f0 <UART_SetConfig+0x2fc>)
 80070de:	0011      	movs	r1, r2
 80070e0:	0018      	movs	r0, r3
 80070e2:	f7fb fd8f 	bl	8002c04 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	431a      	orrs	r2, r3
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a46      	ldr	r2, [pc, #280]	@ (8007220 <UART_SetConfig+0x32c>)
 8007106:	4013      	ands	r3, r2
 8007108:	0019      	movs	r1, r3
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007110:	430b      	orrs	r3, r1
 8007112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	4a42      	ldr	r2, [pc, #264]	@ (8007224 <UART_SetConfig+0x330>)
 800711c:	4013      	ands	r3, r2
 800711e:	0018      	movs	r0, r3
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	68d9      	ldr	r1, [r3, #12]
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	0003      	movs	r3, r0
 800712a:	430b      	orrs	r3, r1
 800712c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a2f      	ldr	r2, [pc, #188]	@ (80071f8 <UART_SetConfig+0x304>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d009      	beq.n	8007152 <UART_SetConfig+0x25e>
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a2e      	ldr	r2, [pc, #184]	@ (80071fc <UART_SetConfig+0x308>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d004      	beq.n	8007152 <UART_SetConfig+0x25e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800714e:	4313      	orrs	r3, r2
 8007150:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	4a33      	ldr	r2, [pc, #204]	@ (8007228 <UART_SetConfig+0x334>)
 800715a:	4013      	ands	r3, r2
 800715c:	0019      	movs	r1, r3
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007164:	430b      	orrs	r3, r1
 8007166:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716e:	220f      	movs	r2, #15
 8007170:	4393      	bics	r3, r2
 8007172:	0018      	movs	r0, r3
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	0003      	movs	r3, r0
 800717e:	430b      	orrs	r3, r1
 8007180:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a29      	ldr	r2, [pc, #164]	@ (800722c <UART_SetConfig+0x338>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d102      	bne.n	8007192 <UART_SetConfig+0x29e>
 800718c:	2301      	movs	r3, #1
 800718e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007190:	e056      	b.n	8007240 <UART_SetConfig+0x34c>
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a26      	ldr	r2, [pc, #152]	@ (8007230 <UART_SetConfig+0x33c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d102      	bne.n	80071a2 <UART_SetConfig+0x2ae>
 800719c:	2302      	movs	r3, #2
 800719e:	643b      	str	r3, [r7, #64]	@ 0x40
 80071a0:	e04e      	b.n	8007240 <UART_SetConfig+0x34c>
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a23      	ldr	r2, [pc, #140]	@ (8007234 <UART_SetConfig+0x340>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d103      	bne.n	80071b4 <UART_SetConfig+0x2c0>
 80071ac:	2380      	movs	r3, #128	@ 0x80
 80071ae:	025b      	lsls	r3, r3, #9
 80071b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80071b2:	e045      	b.n	8007240 <UART_SetConfig+0x34c>
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007238 <UART_SetConfig+0x344>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d103      	bne.n	80071c6 <UART_SetConfig+0x2d2>
 80071be:	2380      	movs	r3, #128	@ 0x80
 80071c0:	029b      	lsls	r3, r3, #10
 80071c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071c4:	e03c      	b.n	8007240 <UART_SetConfig+0x34c>
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a0b      	ldr	r2, [pc, #44]	@ (80071f8 <UART_SetConfig+0x304>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d102      	bne.n	80071d6 <UART_SetConfig+0x2e2>
 80071d0:	2310      	movs	r3, #16
 80071d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071d4:	e034      	b.n	8007240 <UART_SetConfig+0x34c>
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a08      	ldr	r2, [pc, #32]	@ (80071fc <UART_SetConfig+0x308>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d12d      	bne.n	800723c <UART_SetConfig+0x348>
 80071e0:	2308      	movs	r3, #8
 80071e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071e4:	e02c      	b.n	8007240 <UART_SetConfig+0x34c>
 80071e6:	46c0      	nop			@ (mov r8, r8)
 80071e8:	005b8d7f 	.word	0x005b8d7f
 80071ec:	00000c3d 	.word	0x00000c3d
 80071f0:	0800b4b0 	.word	0x0800b4b0
 80071f4:	00000c3e 	.word	0x00000c3e
 80071f8:	40008000 	.word	0x40008000
 80071fc:	40008400 	.word	0x40008400
 8007200:	00000c41 	.word	0x00000c41
 8007204:	00000c45 	.word	0x00000c45
 8007208:	00000c46 	.word	0x00000c46
 800720c:	00000c49 	.word	0x00000c49
 8007210:	00000c4a 	.word	0x00000c4a
 8007214:	00000c4b 	.word	0x00000c4b
 8007218:	00000c4c 	.word	0x00000c4c
 800721c:	00000c4d 	.word	0x00000c4d
 8007220:	cfff69f3 	.word	0xcfff69f3
 8007224:	ffffcfff 	.word	0xffffcfff
 8007228:	11fff4ff 	.word	0x11fff4ff
 800722c:	40013800 	.word	0x40013800
 8007230:	40004400 	.word	0x40004400
 8007234:	40004800 	.word	0x40004800
 8007238:	40004c00 	.word	0x40004c00
 800723c:	2300      	movs	r3, #0
 800723e:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a8b      	ldr	r2, [pc, #556]	@ (8007474 <UART_SetConfig+0x580>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d005      	beq.n	8007256 <UART_SetConfig+0x362>
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a8a      	ldr	r2, [pc, #552]	@ (8007478 <UART_SetConfig+0x584>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d000      	beq.n	8007256 <UART_SetConfig+0x362>
 8007254:	e06f      	b.n	8007336 <UART_SetConfig+0x442>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007258:	0018      	movs	r0, r3
 800725a:	f7fd ff49 	bl	80050f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800725e:	0003      	movs	r3, r0
 8007260:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8007262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007264:	2b00      	cmp	r3, #0
 8007266:	d100      	bne.n	800726a <UART_SetConfig+0x376>
 8007268:	e0ec      	b.n	8007444 <UART_SetConfig+0x550>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800726e:	4b83      	ldr	r3, [pc, #524]	@ (800747c <UART_SetConfig+0x588>)
 8007270:	0052      	lsls	r2, r2, #1
 8007272:	5ad3      	ldrh	r3, [r2, r3]
 8007274:	0019      	movs	r1, r3
 8007276:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007278:	f7f8 ff58 	bl	800012c <__udivsi3>
 800727c:	0003      	movs	r3, r0
 800727e:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	0013      	movs	r3, r2
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	189b      	adds	r3, r3, r2
 800728a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800728c:	429a      	cmp	r2, r3
 800728e:	d305      	bcc.n	800729c <UART_SetConfig+0x3a8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007298:	429a      	cmp	r2, r3
 800729a:	d906      	bls.n	80072aa <UART_SetConfig+0x3b6>
      {
        ret = HAL_ERROR;
 800729c:	231f      	movs	r3, #31
 800729e:	2220      	movs	r2, #32
 80072a0:	189b      	adds	r3, r3, r2
 80072a2:	19db      	adds	r3, r3, r7
 80072a4:	2201      	movs	r2, #1
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	e044      	b.n	8007334 <UART_SetConfig+0x440>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072b6:	4b71      	ldr	r3, [pc, #452]	@ (800747c <UART_SetConfig+0x588>)
 80072b8:	0052      	lsls	r2, r2, #1
 80072ba:	5ad3      	ldrh	r3, [r2, r3]
 80072bc:	613b      	str	r3, [r7, #16]
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	69b8      	ldr	r0, [r7, #24]
 80072c8:	69f9      	ldr	r1, [r7, #28]
 80072ca:	f7f9 f8e3 	bl	8000494 <__aeabi_uldivmod>
 80072ce:	0002      	movs	r2, r0
 80072d0:	000b      	movs	r3, r1
 80072d2:	0e11      	lsrs	r1, r2, #24
 80072d4:	021d      	lsls	r5, r3, #8
 80072d6:	430d      	orrs	r5, r1
 80072d8:	0214      	lsls	r4, r2, #8
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	68b8      	ldr	r0, [r7, #8]
 80072e8:	68f9      	ldr	r1, [r7, #12]
 80072ea:	1900      	adds	r0, r0, r4
 80072ec:	4169      	adcs	r1, r5
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	2300      	movs	r3, #0
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f7f9 f8ca 	bl	8000494 <__aeabi_uldivmod>
 8007300:	0002      	movs	r2, r0
 8007302:	000b      	movs	r3, r1
 8007304:	0013      	movs	r3, r2
 8007306:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007308:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800730a:	23c0      	movs	r3, #192	@ 0xc0
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	429a      	cmp	r2, r3
 8007310:	d309      	bcc.n	8007326 <UART_SetConfig+0x432>
 8007312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007314:	2380      	movs	r3, #128	@ 0x80
 8007316:	035b      	lsls	r3, r3, #13
 8007318:	429a      	cmp	r2, r3
 800731a:	d204      	bcs.n	8007326 <UART_SetConfig+0x432>
        {
          huart->Instance->BRR = usartdiv;
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007322:	60da      	str	r2, [r3, #12]
 8007324:	e006      	b.n	8007334 <UART_SetConfig+0x440>
        }
        else
        {
          ret = HAL_ERROR;
 8007326:	231f      	movs	r3, #31
 8007328:	2220      	movs	r2, #32
 800732a:	189b      	adds	r3, r3, r2
 800732c:	19db      	adds	r3, r3, r7
 800732e:	2201      	movs	r2, #1
 8007330:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8007332:	e087      	b.n	8007444 <UART_SetConfig+0x550>
 8007334:	e086      	b.n	8007444 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	69da      	ldr	r2, [r3, #28]
 800733a:	2380      	movs	r3, #128	@ 0x80
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	429a      	cmp	r2, r3
 8007340:	d14c      	bne.n	80073dc <UART_SetConfig+0x4e8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007344:	0018      	movs	r0, r3
 8007346:	f7fd fed3 	bl	80050f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800734a:	0003      	movs	r3, r0
 800734c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800734e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007350:	2b00      	cmp	r3, #0
 8007352:	d100      	bne.n	8007356 <UART_SetConfig+0x462>
 8007354:	e076      	b.n	8007444 <UART_SetConfig+0x550>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800735a:	4b48      	ldr	r3, [pc, #288]	@ (800747c <UART_SetConfig+0x588>)
 800735c:	0052      	lsls	r2, r2, #1
 800735e:	5ad3      	ldrh	r3, [r2, r3]
 8007360:	0019      	movs	r1, r3
 8007362:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007364:	f7f8 fee2 	bl	800012c <__udivsi3>
 8007368:	0003      	movs	r3, r0
 800736a:	005a      	lsls	r2, r3, #1
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	085b      	lsrs	r3, r3, #1
 8007372:	18d2      	adds	r2, r2, r3
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	0019      	movs	r1, r3
 800737a:	0010      	movs	r0, r2
 800737c:	f7f8 fed6 	bl	800012c <__udivsi3>
 8007380:	0003      	movs	r3, r0
 8007382:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007386:	2b0f      	cmp	r3, #15
 8007388:	d921      	bls.n	80073ce <UART_SetConfig+0x4da>
 800738a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800738c:	2380      	movs	r3, #128	@ 0x80
 800738e:	025b      	lsls	r3, r3, #9
 8007390:	429a      	cmp	r2, r3
 8007392:	d21c      	bcs.n	80073ce <UART_SetConfig+0x4da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007396:	b29a      	uxth	r2, r3
 8007398:	2012      	movs	r0, #18
 800739a:	2420      	movs	r4, #32
 800739c:	1903      	adds	r3, r0, r4
 800739e:	19db      	adds	r3, r3, r7
 80073a0:	210f      	movs	r1, #15
 80073a2:	438a      	bics	r2, r1
 80073a4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a8:	085b      	lsrs	r3, r3, #1
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	2207      	movs	r2, #7
 80073ae:	4013      	ands	r3, r2
 80073b0:	b299      	uxth	r1, r3
 80073b2:	1903      	adds	r3, r0, r4
 80073b4:	19db      	adds	r3, r3, r7
 80073b6:	1902      	adds	r2, r0, r4
 80073b8:	19d2      	adds	r2, r2, r7
 80073ba:	8812      	ldrh	r2, [r2, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	1902      	adds	r2, r0, r4
 80073c6:	19d2      	adds	r2, r2, r7
 80073c8:	8812      	ldrh	r2, [r2, #0]
 80073ca:	60da      	str	r2, [r3, #12]
 80073cc:	e03a      	b.n	8007444 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80073ce:	231f      	movs	r3, #31
 80073d0:	2220      	movs	r2, #32
 80073d2:	189b      	adds	r3, r3, r2
 80073d4:	19db      	adds	r3, r3, r7
 80073d6:	2201      	movs	r2, #1
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	e033      	b.n	8007444 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80073dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073de:	0018      	movs	r0, r3
 80073e0:	f7fd fe86 	bl	80050f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80073e4:	0003      	movs	r3, r0
 80073e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 80073e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d02a      	beq.n	8007444 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073f2:	4b22      	ldr	r3, [pc, #136]	@ (800747c <UART_SetConfig+0x588>)
 80073f4:	0052      	lsls	r2, r2, #1
 80073f6:	5ad3      	ldrh	r3, [r2, r3]
 80073f8:	0019      	movs	r1, r3
 80073fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80073fc:	f7f8 fe96 	bl	800012c <__udivsi3>
 8007400:	0003      	movs	r3, r0
 8007402:	001a      	movs	r2, r3
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	085b      	lsrs	r3, r3, #1
 800740a:	18d2      	adds	r2, r2, r3
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	0019      	movs	r1, r3
 8007412:	0010      	movs	r0, r2
 8007414:	f7f8 fe8a 	bl	800012c <__udivsi3>
 8007418:	0003      	movs	r3, r0
 800741a:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800741c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800741e:	2b0f      	cmp	r3, #15
 8007420:	d90a      	bls.n	8007438 <UART_SetConfig+0x544>
 8007422:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007424:	2380      	movs	r3, #128	@ 0x80
 8007426:	025b      	lsls	r3, r3, #9
 8007428:	429a      	cmp	r2, r3
 800742a:	d205      	bcs.n	8007438 <UART_SetConfig+0x544>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800742c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742e:	b29a      	uxth	r2, r3
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	60da      	str	r2, [r3, #12]
 8007436:	e005      	b.n	8007444 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8007438:	231f      	movs	r3, #31
 800743a:	2220      	movs	r2, #32
 800743c:	189b      	adds	r3, r3, r2
 800743e:	19db      	adds	r3, r3, r7
 8007440:	2201      	movs	r2, #1
 8007442:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007446:	226a      	movs	r2, #106	@ 0x6a
 8007448:	2101      	movs	r1, #1
 800744a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	2268      	movs	r2, #104	@ 0x68
 8007450:	2101      	movs	r1, #1
 8007452:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	2200      	movs	r2, #0
 8007458:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745c:	2200      	movs	r2, #0
 800745e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007460:	231f      	movs	r3, #31
 8007462:	2220      	movs	r2, #32
 8007464:	189b      	adds	r3, r3, r2
 8007466:	19db      	adds	r3, r3, r7
 8007468:	781b      	ldrb	r3, [r3, #0]
}
 800746a:	0018      	movs	r0, r3
 800746c:	46bd      	mov	sp, r7
 800746e:	b012      	add	sp, #72	@ 0x48
 8007470:	bdb0      	pop	{r4, r5, r7, pc}
 8007472:	46c0      	nop			@ (mov r8, r8)
 8007474:	40008000 	.word	0x40008000
 8007478:	40008400 	.word	0x40008400
 800747c:	0800b7fc 	.word	0x0800b7fc

08007480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748c:	2bff      	cmp	r3, #255	@ 0xff
 800748e:	d905      	bls.n	800749c <UART_AdvFeatureConfig+0x1c>
 8007490:	4aa7      	ldr	r2, [pc, #668]	@ (8007730 <UART_AdvFeatureConfig+0x2b0>)
 8007492:	4ba8      	ldr	r3, [pc, #672]	@ (8007734 <UART_AdvFeatureConfig+0x2b4>)
 8007494:	0011      	movs	r1, r2
 8007496:	0018      	movs	r0, r3
 8007498:	f7fb fbb4 	bl	8002c04 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a0:	2208      	movs	r2, #8
 80074a2:	4013      	ands	r3, r2
 80074a4:	d01b      	beq.n	80074de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00b      	beq.n	80074c6 <UART_AdvFeatureConfig+0x46>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074b2:	2380      	movs	r3, #128	@ 0x80
 80074b4:	021b      	lsls	r3, r3, #8
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d005      	beq.n	80074c6 <UART_AdvFeatureConfig+0x46>
 80074ba:	4a9f      	ldr	r2, [pc, #636]	@ (8007738 <UART_AdvFeatureConfig+0x2b8>)
 80074bc:	4b9d      	ldr	r3, [pc, #628]	@ (8007734 <UART_AdvFeatureConfig+0x2b4>)
 80074be:	0011      	movs	r1, r2
 80074c0:	0018      	movs	r0, r3
 80074c2:	f7fb fb9f 	bl	8002c04 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	4a9b      	ldr	r2, [pc, #620]	@ (800773c <UART_AdvFeatureConfig+0x2bc>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	0019      	movs	r1, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e2:	2201      	movs	r2, #1
 80074e4:	4013      	ands	r3, r2
 80074e6:	d01b      	beq.n	8007520 <UART_AdvFeatureConfig+0xa0>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <UART_AdvFeatureConfig+0x88>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f4:	2380      	movs	r3, #128	@ 0x80
 80074f6:	029b      	lsls	r3, r3, #10
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d005      	beq.n	8007508 <UART_AdvFeatureConfig+0x88>
 80074fc:	4a90      	ldr	r2, [pc, #576]	@ (8007740 <UART_AdvFeatureConfig+0x2c0>)
 80074fe:	4b8d      	ldr	r3, [pc, #564]	@ (8007734 <UART_AdvFeatureConfig+0x2b4>)
 8007500:	0011      	movs	r1, r2
 8007502:	0018      	movs	r0, r3
 8007504:	f7fb fb7e 	bl	8002c04 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	4a8d      	ldr	r2, [pc, #564]	@ (8007744 <UART_AdvFeatureConfig+0x2c4>)
 8007510:	4013      	ands	r3, r2
 8007512:	0019      	movs	r1, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007524:	2202      	movs	r2, #2
 8007526:	4013      	ands	r3, r2
 8007528:	d01b      	beq.n	8007562 <UART_AdvFeatureConfig+0xe2>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00b      	beq.n	800754a <UART_AdvFeatureConfig+0xca>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007536:	2380      	movs	r3, #128	@ 0x80
 8007538:	025b      	lsls	r3, r3, #9
 800753a:	429a      	cmp	r2, r3
 800753c:	d005      	beq.n	800754a <UART_AdvFeatureConfig+0xca>
 800753e:	4a82      	ldr	r2, [pc, #520]	@ (8007748 <UART_AdvFeatureConfig+0x2c8>)
 8007540:	4b7c      	ldr	r3, [pc, #496]	@ (8007734 <UART_AdvFeatureConfig+0x2b4>)
 8007542:	0011      	movs	r1, r2
 8007544:	0018      	movs	r0, r3
 8007546:	f7fb fb5d 	bl	8002c04 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	4a7e      	ldr	r2, [pc, #504]	@ (800774c <UART_AdvFeatureConfig+0x2cc>)
 8007552:	4013      	ands	r3, r2
 8007554:	0019      	movs	r1, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007566:	2204      	movs	r2, #4
 8007568:	4013      	ands	r3, r2
 800756a:	d01b      	beq.n	80075a4 <UART_AdvFeatureConfig+0x124>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <UART_AdvFeatureConfig+0x10c>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007578:	2380      	movs	r3, #128	@ 0x80
 800757a:	02db      	lsls	r3, r3, #11
 800757c:	429a      	cmp	r2, r3
 800757e:	d005      	beq.n	800758c <UART_AdvFeatureConfig+0x10c>
 8007580:	4a73      	ldr	r2, [pc, #460]	@ (8007750 <UART_AdvFeatureConfig+0x2d0>)
 8007582:	4b6c      	ldr	r3, [pc, #432]	@ (8007734 <UART_AdvFeatureConfig+0x2b4>)
 8007584:	0011      	movs	r1, r2
 8007586:	0018      	movs	r0, r3
 8007588:	f7fb fb3c 	bl	8002c04 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	4a70      	ldr	r2, [pc, #448]	@ (8007754 <UART_AdvFeatureConfig+0x2d4>)
 8007594:	4013      	ands	r3, r2
 8007596:	0019      	movs	r1, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a8:	2210      	movs	r2, #16
 80075aa:	4013      	ands	r3, r2
 80075ac:	d01b      	beq.n	80075e6 <UART_AdvFeatureConfig+0x166>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <UART_AdvFeatureConfig+0x14e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ba:	2380      	movs	r3, #128	@ 0x80
 80075bc:	015b      	lsls	r3, r3, #5
 80075be:	429a      	cmp	r2, r3
 80075c0:	d005      	beq.n	80075ce <UART_AdvFeatureConfig+0x14e>
 80075c2:	4a65      	ldr	r2, [pc, #404]	@ (8007758 <UART_AdvFeatureConfig+0x2d8>)
 80075c4:	4b5b      	ldr	r3, [pc, #364]	@ (8007734 <UART_AdvFeatureConfig+0x2b4>)
 80075c6:	0011      	movs	r1, r2
 80075c8:	0018      	movs	r0, r3
 80075ca:	f7fb fb1b 	bl	8002c04 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	4a61      	ldr	r2, [pc, #388]	@ (800775c <UART_AdvFeatureConfig+0x2dc>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	0019      	movs	r1, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ea:	2220      	movs	r2, #32
 80075ec:	4013      	ands	r3, r2
 80075ee:	d01b      	beq.n	8007628 <UART_AdvFeatureConfig+0x1a8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <UART_AdvFeatureConfig+0x190>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075fc:	2380      	movs	r3, #128	@ 0x80
 80075fe:	019b      	lsls	r3, r3, #6
 8007600:	429a      	cmp	r2, r3
 8007602:	d005      	beq.n	8007610 <UART_AdvFeatureConfig+0x190>
 8007604:	4a56      	ldr	r2, [pc, #344]	@ (8007760 <UART_AdvFeatureConfig+0x2e0>)
 8007606:	4b4b      	ldr	r3, [pc, #300]	@ (8007734 <UART_AdvFeatureConfig+0x2b4>)
 8007608:	0011      	movs	r1, r2
 800760a:	0018      	movs	r0, r3
 800760c:	f7fb fafa 	bl	8002c04 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	4a53      	ldr	r2, [pc, #332]	@ (8007764 <UART_AdvFeatureConfig+0x2e4>)
 8007618:	4013      	ands	r3, r2
 800761a:	0019      	movs	r1, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762c:	2240      	movs	r2, #64	@ 0x40
 800762e:	4013      	ands	r3, r2
 8007630:	d059      	beq.n	80076e6 <UART_AdvFeatureConfig+0x266>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a4c      	ldr	r2, [pc, #304]	@ (8007768 <UART_AdvFeatureConfig+0x2e8>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00a      	beq.n	8007652 <UART_AdvFeatureConfig+0x1d2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a4a      	ldr	r2, [pc, #296]	@ (800776c <UART_AdvFeatureConfig+0x2ec>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d005      	beq.n	8007652 <UART_AdvFeatureConfig+0x1d2>
 8007646:	4a4a      	ldr	r2, [pc, #296]	@ (8007770 <UART_AdvFeatureConfig+0x2f0>)
 8007648:	4b3a      	ldr	r3, [pc, #232]	@ (8007734 <UART_AdvFeatureConfig+0x2b4>)
 800764a:	0011      	movs	r1, r2
 800764c:	0018      	movs	r0, r3
 800764e:	f7fb fad9 	bl	8002c04 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00b      	beq.n	8007672 <UART_AdvFeatureConfig+0x1f2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800765e:	2380      	movs	r3, #128	@ 0x80
 8007660:	035b      	lsls	r3, r3, #13
 8007662:	429a      	cmp	r2, r3
 8007664:	d005      	beq.n	8007672 <UART_AdvFeatureConfig+0x1f2>
 8007666:	4a43      	ldr	r2, [pc, #268]	@ (8007774 <UART_AdvFeatureConfig+0x2f4>)
 8007668:	4b32      	ldr	r3, [pc, #200]	@ (8007734 <UART_AdvFeatureConfig+0x2b4>)
 800766a:	0011      	movs	r1, r2
 800766c:	0018      	movs	r0, r3
 800766e:	f7fb fac9 	bl	8002c04 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4a3f      	ldr	r2, [pc, #252]	@ (8007778 <UART_AdvFeatureConfig+0x2f8>)
 800767a:	4013      	ands	r3, r2
 800767c:	0019      	movs	r1, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800768e:	2380      	movs	r3, #128	@ 0x80
 8007690:	035b      	lsls	r3, r3, #13
 8007692:	429a      	cmp	r2, r3
 8007694:	d127      	bne.n	80076e6 <UART_AdvFeatureConfig+0x266>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800769a:	2b00      	cmp	r3, #0
 800769c:	d017      	beq.n	80076ce <UART_AdvFeatureConfig+0x24e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076a2:	2380      	movs	r3, #128	@ 0x80
 80076a4:	039b      	lsls	r3, r3, #14
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d011      	beq.n	80076ce <UART_AdvFeatureConfig+0x24e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076ae:	2380      	movs	r3, #128	@ 0x80
 80076b0:	03db      	lsls	r3, r3, #15
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d00b      	beq.n	80076ce <UART_AdvFeatureConfig+0x24e>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076ba:	23c0      	movs	r3, #192	@ 0xc0
 80076bc:	03db      	lsls	r3, r3, #15
 80076be:	429a      	cmp	r2, r3
 80076c0:	d005      	beq.n	80076ce <UART_AdvFeatureConfig+0x24e>
 80076c2:	4a2e      	ldr	r2, [pc, #184]	@ (800777c <UART_AdvFeatureConfig+0x2fc>)
 80076c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007734 <UART_AdvFeatureConfig+0x2b4>)
 80076c6:	0011      	movs	r1, r2
 80076c8:	0018      	movs	r0, r3
 80076ca:	f7fb fa9b 	bl	8002c04 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007780 <UART_AdvFeatureConfig+0x300>)
 80076d6:	4013      	ands	r3, r2
 80076d8:	0019      	movs	r1, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ea:	2280      	movs	r2, #128	@ 0x80
 80076ec:	4013      	ands	r3, r2
 80076ee:	d01b      	beq.n	8007728 <UART_AdvFeatureConfig+0x2a8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <UART_AdvFeatureConfig+0x290>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076fc:	2380      	movs	r3, #128	@ 0x80
 80076fe:	031b      	lsls	r3, r3, #12
 8007700:	429a      	cmp	r2, r3
 8007702:	d005      	beq.n	8007710 <UART_AdvFeatureConfig+0x290>
 8007704:	4a1f      	ldr	r2, [pc, #124]	@ (8007784 <UART_AdvFeatureConfig+0x304>)
 8007706:	4b0b      	ldr	r3, [pc, #44]	@ (8007734 <UART_AdvFeatureConfig+0x2b4>)
 8007708:	0011      	movs	r1, r2
 800770a:	0018      	movs	r0, r3
 800770c:	f7fb fa7a 	bl	8002c04 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	4a1c      	ldr	r2, [pc, #112]	@ (8007788 <UART_AdvFeatureConfig+0x308>)
 8007718:	4013      	ands	r3, r2
 800771a:	0019      	movs	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	605a      	str	r2, [r3, #4]
  }
}
 8007728:	46c0      	nop			@ (mov r8, r8)
 800772a:	46bd      	mov	sp, r7
 800772c:	b002      	add	sp, #8
 800772e:	bd80      	pop	{r7, pc}
 8007730:	00000cd2 	.word	0x00000cd2
 8007734:	0800b4b0 	.word	0x0800b4b0
 8007738:	00000cd7 	.word	0x00000cd7
 800773c:	ffff7fff 	.word	0xffff7fff
 8007740:	00000cde 	.word	0x00000cde
 8007744:	fffdffff 	.word	0xfffdffff
 8007748:	00000ce5 	.word	0x00000ce5
 800774c:	fffeffff 	.word	0xfffeffff
 8007750:	00000cec 	.word	0x00000cec
 8007754:	fffbffff 	.word	0xfffbffff
 8007758:	00000cf3 	.word	0x00000cf3
 800775c:	ffffefff 	.word	0xffffefff
 8007760:	00000cfb 	.word	0x00000cfb
 8007764:	ffffdfff 	.word	0xffffdfff
 8007768:	40013800 	.word	0x40013800
 800776c:	40004400 	.word	0x40004400
 8007770:	00000d03 	.word	0x00000d03
 8007774:	00000d04 	.word	0x00000d04
 8007778:	ffefffff 	.word	0xffefffff
 800777c:	00000d09 	.word	0x00000d09
 8007780:	ff9fffff 	.word	0xff9fffff
 8007784:	00000d11 	.word	0x00000d11
 8007788:	fff7ffff 	.word	0xfff7ffff

0800778c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b092      	sub	sp, #72	@ 0x48
 8007790:	af02      	add	r7, sp, #8
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2290      	movs	r2, #144	@ 0x90
 8007798:	2100      	movs	r1, #0
 800779a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800779c:	f7fb fcbe 	bl	800311c <HAL_GetTick>
 80077a0:	0003      	movs	r3, r0
 80077a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2208      	movs	r2, #8
 80077ac:	4013      	ands	r3, r2
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d12d      	bne.n	800780e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b4:	2280      	movs	r2, #128	@ 0x80
 80077b6:	0391      	lsls	r1, r2, #14
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4a47      	ldr	r2, [pc, #284]	@ (80078d8 <UART_CheckIdleState+0x14c>)
 80077bc:	9200      	str	r2, [sp, #0]
 80077be:	2200      	movs	r2, #0
 80077c0:	f000 f88e 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 80077c4:	1e03      	subs	r3, r0, #0
 80077c6:	d022      	beq.n	800780e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80077c8:	f3ef 8310 	mrs	r3, PRIMASK
 80077cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077d2:	2301      	movs	r3, #1
 80077d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	f383 8810 	msr	PRIMASK, r3
}
 80077dc:	46c0      	nop			@ (mov r8, r8)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2180      	movs	r1, #128	@ 0x80
 80077ea:	438a      	bics	r2, r1
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f4:	f383 8810 	msr	PRIMASK, r3
}
 80077f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2288      	movs	r2, #136	@ 0x88
 80077fe:	2120      	movs	r1, #32
 8007800:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2284      	movs	r2, #132	@ 0x84
 8007806:	2100      	movs	r1, #0
 8007808:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e060      	b.n	80078d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2204      	movs	r2, #4
 8007816:	4013      	ands	r3, r2
 8007818:	2b04      	cmp	r3, #4
 800781a:	d146      	bne.n	80078aa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800781c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800781e:	2280      	movs	r2, #128	@ 0x80
 8007820:	03d1      	lsls	r1, r2, #15
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4a2c      	ldr	r2, [pc, #176]	@ (80078d8 <UART_CheckIdleState+0x14c>)
 8007826:	9200      	str	r2, [sp, #0]
 8007828:	2200      	movs	r2, #0
 800782a:	f000 f859 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 800782e:	1e03      	subs	r3, r0, #0
 8007830:	d03b      	beq.n	80078aa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007832:	f3ef 8310 	mrs	r3, PRIMASK
 8007836:	60fb      	str	r3, [r7, #12]
  return(result);
 8007838:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
 800783c:	2301      	movs	r3, #1
 800783e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f383 8810 	msr	PRIMASK, r3
}
 8007846:	46c0      	nop			@ (mov r8, r8)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4922      	ldr	r1, [pc, #136]	@ (80078dc <UART_CheckIdleState+0x150>)
 8007854:	400a      	ands	r2, r1
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800785a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f383 8810 	msr	PRIMASK, r3
}
 8007862:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007864:	f3ef 8310 	mrs	r3, PRIMASK
 8007868:	61bb      	str	r3, [r7, #24]
  return(result);
 800786a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786c:	633b      	str	r3, [r7, #48]	@ 0x30
 800786e:	2301      	movs	r3, #1
 8007870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	f383 8810 	msr	PRIMASK, r3
}
 8007878:	46c0      	nop			@ (mov r8, r8)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2101      	movs	r1, #1
 8007886:	438a      	bics	r2, r1
 8007888:	609a      	str	r2, [r3, #8]
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	f383 8810 	msr	PRIMASK, r3
}
 8007894:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	228c      	movs	r2, #140	@ 0x8c
 800789a:	2120      	movs	r1, #32
 800789c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2284      	movs	r2, #132	@ 0x84
 80078a2:	2100      	movs	r1, #0
 80078a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e012      	b.n	80078d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2288      	movs	r2, #136	@ 0x88
 80078ae:	2120      	movs	r1, #32
 80078b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	228c      	movs	r2, #140	@ 0x8c
 80078b6:	2120      	movs	r1, #32
 80078b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2284      	movs	r2, #132	@ 0x84
 80078ca:	2100      	movs	r1, #0
 80078cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	0018      	movs	r0, r3
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b010      	add	sp, #64	@ 0x40
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	01ffffff 	.word	0x01ffffff
 80078dc:	fffffedf 	.word	0xfffffedf

080078e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	1dfb      	adds	r3, r7, #7
 80078ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f0:	e051      	b.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	3301      	adds	r3, #1
 80078f6:	d04e      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f8:	f7fb fc10 	bl	800311c <HAL_GetTick>
 80078fc:	0002      	movs	r2, r0
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	429a      	cmp	r2, r3
 8007906:	d302      	bcc.n	800790e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e051      	b.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2204      	movs	r2, #4
 800791a:	4013      	ands	r3, r2
 800791c:	d03b      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b80      	cmp	r3, #128	@ 0x80
 8007922:	d038      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b40      	cmp	r3, #64	@ 0x40
 8007928:	d035      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	2208      	movs	r2, #8
 8007932:	4013      	ands	r3, r2
 8007934:	2b08      	cmp	r3, #8
 8007936:	d111      	bne.n	800795c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2208      	movs	r2, #8
 800793e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	0018      	movs	r0, r3
 8007944:	f000 f83c 	bl	80079c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2290      	movs	r2, #144	@ 0x90
 800794c:	2108      	movs	r1, #8
 800794e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2284      	movs	r2, #132	@ 0x84
 8007954:	2100      	movs	r1, #0
 8007956:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e02c      	b.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69da      	ldr	r2, [r3, #28]
 8007962:	2380      	movs	r3, #128	@ 0x80
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	401a      	ands	r2, r3
 8007968:	2380      	movs	r3, #128	@ 0x80
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	429a      	cmp	r2, r3
 800796e:	d112      	bne.n	8007996 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2280      	movs	r2, #128	@ 0x80
 8007976:	0112      	lsls	r2, r2, #4
 8007978:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	0018      	movs	r0, r3
 800797e:	f000 f81f 	bl	80079c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2290      	movs	r2, #144	@ 0x90
 8007986:	2120      	movs	r1, #32
 8007988:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2284      	movs	r2, #132	@ 0x84
 800798e:	2100      	movs	r1, #0
 8007990:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e00f      	b.n	80079b6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	4013      	ands	r3, r2
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	425a      	negs	r2, r3
 80079a6:	4153      	adcs	r3, r2
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	001a      	movs	r2, r3
 80079ac:	1dfb      	adds	r3, r7, #7
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d09e      	beq.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	0018      	movs	r0, r3
 80079b8:	46bd      	mov	sp, r7
 80079ba:	b004      	add	sp, #16
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08e      	sub	sp, #56	@ 0x38
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80079c8:	f3ef 8310 	mrs	r3, PRIMASK
 80079cc:	617b      	str	r3, [r7, #20]
  return(result);
 80079ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d2:	2301      	movs	r3, #1
 80079d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	f383 8810 	msr	PRIMASK, r3
}
 80079dc:	46c0      	nop			@ (mov r8, r8)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4926      	ldr	r1, [pc, #152]	@ (8007a84 <UART_EndRxTransfer+0xc4>)
 80079ea:	400a      	ands	r2, r1
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	f383 8810 	msr	PRIMASK, r3
}
 80079f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80079fa:	f3ef 8310 	mrs	r3, PRIMASK
 80079fe:	623b      	str	r3, [r7, #32]
  return(result);
 8007a00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a02:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a04:	2301      	movs	r3, #1
 8007a06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0a:	f383 8810 	msr	PRIMASK, r3
}
 8007a0e:	46c0      	nop			@ (mov r8, r8)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	491b      	ldr	r1, [pc, #108]	@ (8007a88 <UART_EndRxTransfer+0xc8>)
 8007a1c:	400a      	ands	r2, r1
 8007a1e:	609a      	str	r2, [r3, #8]
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a26:	f383 8810 	msr	PRIMASK, r3
}
 8007a2a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d118      	bne.n	8007a66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007a34:	f3ef 8310 	mrs	r3, PRIMASK
 8007a38:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a3e:	2301      	movs	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f383 8810 	msr	PRIMASK, r3
}
 8007a48:	46c0      	nop			@ (mov r8, r8)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2110      	movs	r1, #16
 8007a56:	438a      	bics	r2, r1
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f383 8810 	msr	PRIMASK, r3
}
 8007a64:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	228c      	movs	r2, #140	@ 0x8c
 8007a6a:	2120      	movs	r1, #32
 8007a6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a7a:	46c0      	nop			@ (mov r8, r8)
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	b00e      	add	sp, #56	@ 0x38
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	46c0      	nop			@ (mov r8, r8)
 8007a84:	fffffedf 	.word	0xfffffedf
 8007a88:	effffffe 	.word	0xeffffffe

08007a8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a25      	ldr	r2, [pc, #148]	@ (8007b30 <HAL_UARTEx_DisableFifoMode+0xa4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d014      	beq.n	8007ac8 <HAL_UARTEx_DisableFifoMode+0x3c>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a24      	ldr	r2, [pc, #144]	@ (8007b34 <HAL_UARTEx_DisableFifoMode+0xa8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00f      	beq.n	8007ac8 <HAL_UARTEx_DisableFifoMode+0x3c>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a22      	ldr	r2, [pc, #136]	@ (8007b38 <HAL_UARTEx_DisableFifoMode+0xac>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_UARTEx_DisableFifoMode+0x3c>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a21      	ldr	r2, [pc, #132]	@ (8007b3c <HAL_UARTEx_DisableFifoMode+0xb0>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d005      	beq.n	8007ac8 <HAL_UARTEx_DisableFifoMode+0x3c>
 8007abc:	4a20      	ldr	r2, [pc, #128]	@ (8007b40 <HAL_UARTEx_DisableFifoMode+0xb4>)
 8007abe:	4b21      	ldr	r3, [pc, #132]	@ (8007b44 <HAL_UARTEx_DisableFifoMode+0xb8>)
 8007ac0:	0011      	movs	r1, r2
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	f7fb f89e 	bl	8002c04 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2284      	movs	r2, #132	@ 0x84
 8007acc:	5c9b      	ldrb	r3, [r3, r2]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d101      	bne.n	8007ad6 <HAL_UARTEx_DisableFifoMode+0x4a>
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	e027      	b.n	8007b26 <HAL_UARTEx_DisableFifoMode+0x9a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2284      	movs	r2, #132	@ 0x84
 8007ada:	2101      	movs	r1, #1
 8007adc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2288      	movs	r2, #136	@ 0x88
 8007ae2:	2124      	movs	r1, #36	@ 0x24
 8007ae4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2101      	movs	r1, #1
 8007afa:	438a      	bics	r2, r1
 8007afc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4a11      	ldr	r2, [pc, #68]	@ (8007b48 <HAL_UARTEx_DisableFifoMode+0xbc>)
 8007b02:	4013      	ands	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2288      	movs	r2, #136	@ 0x88
 8007b18:	2120      	movs	r1, #32
 8007b1a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2284      	movs	r2, #132	@ 0x84
 8007b20:	2100      	movs	r1, #0
 8007b22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	0018      	movs	r0, r3
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	b004      	add	sp, #16
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	46c0      	nop			@ (mov r8, r8)
 8007b30:	40013800 	.word	0x40013800
 8007b34:	40004400 	.word	0x40004400
 8007b38:	40008000 	.word	0x40008000
 8007b3c:	40008400 	.word	0x40008400
 8007b40:	00000236 	.word	0x00000236
 8007b44:	0800b4ec 	.word	0x0800b4ec
 8007b48:	dfffffff 	.word	0xdfffffff

08007b4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a3a      	ldr	r2, [pc, #232]	@ (8007c44 <HAL_UARTEx_SetTxFifoThreshold+0xf8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d015      	beq.n	8007b8c <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a38      	ldr	r2, [pc, #224]	@ (8007c48 <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d010      	beq.n	8007b8c <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a37      	ldr	r2, [pc, #220]	@ (8007c4c <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d00b      	beq.n	8007b8c <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a35      	ldr	r2, [pc, #212]	@ (8007c50 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d006      	beq.n	8007b8c <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8007b7e:	2399      	movs	r3, #153	@ 0x99
 8007b80:	009a      	lsls	r2, r3, #2
 8007b82:	4b34      	ldr	r3, [pc, #208]	@ (8007c54 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 8007b84:	0011      	movs	r1, r2
 8007b86:	0018      	movs	r0, r3
 8007b88:	f7fb f83c 	bl	8002c04 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d01e      	beq.n	8007bd0 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	2380      	movs	r3, #128	@ 0x80
 8007b96:	059b      	lsls	r3, r3, #22
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d019      	beq.n	8007bd0 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	2380      	movs	r3, #128	@ 0x80
 8007ba0:	05db      	lsls	r3, r3, #23
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d014      	beq.n	8007bd0 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	23c0      	movs	r3, #192	@ 0xc0
 8007baa:	05db      	lsls	r3, r3, #23
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d00f      	beq.n	8007bd0 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	2380      	movs	r3, #128	@ 0x80
 8007bb4:	061b      	lsls	r3, r3, #24
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d00a      	beq.n	8007bd0 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	23a0      	movs	r3, #160	@ 0xa0
 8007bbe:	061b      	lsls	r3, r3, #24
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d005      	beq.n	8007bd0 <HAL_UARTEx_SetTxFifoThreshold+0x84>
 8007bc4:	4a24      	ldr	r2, [pc, #144]	@ (8007c58 <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
 8007bc6:	4b23      	ldr	r3, [pc, #140]	@ (8007c54 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 8007bc8:	0011      	movs	r1, r2
 8007bca:	0018      	movs	r0, r3
 8007bcc:	f7fb f81a 	bl	8002c04 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2284      	movs	r2, #132	@ 0x84
 8007bd4:	5c9b      	ldrb	r3, [r3, r2]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_UARTEx_SetTxFifoThreshold+0x92>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e02e      	b.n	8007c3c <HAL_UARTEx_SetTxFifoThreshold+0xf0>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2284      	movs	r2, #132	@ 0x84
 8007be2:	2101      	movs	r1, #1
 8007be4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2288      	movs	r2, #136	@ 0x88
 8007bea:	2124      	movs	r1, #36	@ 0x24
 8007bec:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2101      	movs	r1, #1
 8007c02:	438a      	bics	r2, r1
 8007c04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	00db      	lsls	r3, r3, #3
 8007c0e:	08d9      	lsrs	r1, r3, #3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	f000 f8a9 	bl	8007d74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2288      	movs	r2, #136	@ 0x88
 8007c2e:	2120      	movs	r1, #32
 8007c30:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2284      	movs	r2, #132	@ 0x84
 8007c36:	2100      	movs	r1, #0
 8007c38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	0018      	movs	r0, r3
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	b004      	add	sp, #16
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	40013800 	.word	0x40013800
 8007c48:	40004400 	.word	0x40004400
 8007c4c:	40008000 	.word	0x40008000
 8007c50:	40008400 	.word	0x40008400
 8007c54:	0800b4ec 	.word	0x0800b4ec
 8007c58:	00000265 	.word	0x00000265

08007c5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a3a      	ldr	r2, [pc, #232]	@ (8007d54 <HAL_UARTEx_SetRxFifoThreshold+0xf8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d014      	beq.n	8007c9a <HAL_UARTEx_SetRxFifoThreshold+0x3e>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a38      	ldr	r2, [pc, #224]	@ (8007d58 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00f      	beq.n	8007c9a <HAL_UARTEx_SetRxFifoThreshold+0x3e>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a37      	ldr	r2, [pc, #220]	@ (8007d5c <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d00a      	beq.n	8007c9a <HAL_UARTEx_SetRxFifoThreshold+0x3e>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a35      	ldr	r2, [pc, #212]	@ (8007d60 <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d005      	beq.n	8007c9a <HAL_UARTEx_SetRxFifoThreshold+0x3e>
 8007c8e:	4a35      	ldr	r2, [pc, #212]	@ (8007d64 <HAL_UARTEx_SetRxFifoThreshold+0x108>)
 8007c90:	4b35      	ldr	r3, [pc, #212]	@ (8007d68 <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 8007c92:	0011      	movs	r1, r2
 8007c94:	0018      	movs	r0, r3
 8007c96:	f7fa ffb5 	bl	8002c04 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d01e      	beq.n	8007cde <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	2380      	movs	r3, #128	@ 0x80
 8007ca4:	049b      	lsls	r3, r3, #18
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d019      	beq.n	8007cde <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	2380      	movs	r3, #128	@ 0x80
 8007cae:	04db      	lsls	r3, r3, #19
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d014      	beq.n	8007cde <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	23c0      	movs	r3, #192	@ 0xc0
 8007cb8:	04db      	lsls	r3, r3, #19
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d00f      	beq.n	8007cde <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	2380      	movs	r3, #128	@ 0x80
 8007cc2:	051b      	lsls	r3, r3, #20
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d00a      	beq.n	8007cde <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	23a0      	movs	r3, #160	@ 0xa0
 8007ccc:	051b      	lsls	r3, r3, #20
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d005      	beq.n	8007cde <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8007cd2:	4a26      	ldr	r2, [pc, #152]	@ (8007d6c <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8007cd4:	4b24      	ldr	r3, [pc, #144]	@ (8007d68 <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 8007cd6:	0011      	movs	r1, r2
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f7fa ff93 	bl	8002c04 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2284      	movs	r2, #132	@ 0x84
 8007ce2:	5c9b      	ldrb	r3, [r3, r2]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d101      	bne.n	8007cec <HAL_UARTEx_SetRxFifoThreshold+0x90>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e02f      	b.n	8007d4c <HAL_UARTEx_SetRxFifoThreshold+0xf0>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2284      	movs	r2, #132	@ 0x84
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2288      	movs	r2, #136	@ 0x88
 8007cf8:	2124      	movs	r1, #36	@ 0x24
 8007cfa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2101      	movs	r1, #1
 8007d10:	438a      	bics	r2, r1
 8007d12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	4a15      	ldr	r2, [pc, #84]	@ (8007d70 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	0019      	movs	r1, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	0018      	movs	r0, r3
 8007d2e:	f000 f821 	bl	8007d74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2288      	movs	r2, #136	@ 0x88
 8007d3e:	2120      	movs	r1, #32
 8007d40:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2284      	movs	r2, #132	@ 0x84
 8007d46:	2100      	movs	r1, #0
 8007d48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	b004      	add	sp, #16
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	40013800 	.word	0x40013800
 8007d58:	40004400 	.word	0x40004400
 8007d5c:	40008000 	.word	0x40008000
 8007d60:	40008400 	.word	0x40008400
 8007d64:	00000295 	.word	0x00000295
 8007d68:	0800b4ec 	.word	0x0800b4ec
 8007d6c:	00000296 	.word	0x00000296
 8007d70:	f1ffffff 	.word	0xf1ffffff

08007d74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d108      	bne.n	8007d96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	226a      	movs	r2, #106	@ 0x6a
 8007d88:	2101      	movs	r1, #1
 8007d8a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2268      	movs	r2, #104	@ 0x68
 8007d90:	2101      	movs	r1, #1
 8007d92:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d94:	e043      	b.n	8007e1e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d96:	260f      	movs	r6, #15
 8007d98:	19bb      	adds	r3, r7, r6
 8007d9a:	2208      	movs	r2, #8
 8007d9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d9e:	200e      	movs	r0, #14
 8007da0:	183b      	adds	r3, r7, r0
 8007da2:	2208      	movs	r2, #8
 8007da4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	0e5b      	lsrs	r3, r3, #25
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	240d      	movs	r4, #13
 8007db2:	193b      	adds	r3, r7, r4
 8007db4:	2107      	movs	r1, #7
 8007db6:	400a      	ands	r2, r1
 8007db8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	0f5b      	lsrs	r3, r3, #29
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	250c      	movs	r5, #12
 8007dc6:	197b      	adds	r3, r7, r5
 8007dc8:	2107      	movs	r1, #7
 8007dca:	400a      	ands	r2, r1
 8007dcc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dce:	183b      	adds	r3, r7, r0
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	197a      	adds	r2, r7, r5
 8007dd4:	7812      	ldrb	r2, [r2, #0]
 8007dd6:	4914      	ldr	r1, [pc, #80]	@ (8007e28 <UARTEx_SetNbDataToProcess+0xb4>)
 8007dd8:	5c8a      	ldrb	r2, [r1, r2]
 8007dda:	435a      	muls	r2, r3
 8007ddc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007dde:	197b      	adds	r3, r7, r5
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	4a12      	ldr	r2, [pc, #72]	@ (8007e2c <UARTEx_SetNbDataToProcess+0xb8>)
 8007de4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007de6:	0019      	movs	r1, r3
 8007de8:	f7f8 fa2a 	bl	8000240 <__divsi3>
 8007dec:	0003      	movs	r3, r0
 8007dee:	b299      	uxth	r1, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	226a      	movs	r2, #106	@ 0x6a
 8007df4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007df6:	19bb      	adds	r3, r7, r6
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	193a      	adds	r2, r7, r4
 8007dfc:	7812      	ldrb	r2, [r2, #0]
 8007dfe:	490a      	ldr	r1, [pc, #40]	@ (8007e28 <UARTEx_SetNbDataToProcess+0xb4>)
 8007e00:	5c8a      	ldrb	r2, [r1, r2]
 8007e02:	435a      	muls	r2, r3
 8007e04:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e06:	193b      	adds	r3, r7, r4
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	4a08      	ldr	r2, [pc, #32]	@ (8007e2c <UARTEx_SetNbDataToProcess+0xb8>)
 8007e0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e0e:	0019      	movs	r1, r3
 8007e10:	f7f8 fa16 	bl	8000240 <__divsi3>
 8007e14:	0003      	movs	r3, r0
 8007e16:	b299      	uxth	r1, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2268      	movs	r2, #104	@ 0x68
 8007e1c:	5299      	strh	r1, [r3, r2]
}
 8007e1e:	46c0      	nop			@ (mov r8, r8)
 8007e20:	46bd      	mov	sp, r7
 8007e22:	b005      	add	sp, #20
 8007e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e26:	46c0      	nop			@ (mov r8, r8)
 8007e28:	0800b814 	.word	0x0800b814
 8007e2c:	0800b81c 	.word	0x0800b81c

08007e30 <log_monitor_init>:
 *
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_monitor_init(void (*PrintString_Function)(char*)){
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	plog = PrintString_Function;
 8007e38:	4b03      	ldr	r3, [pc, #12]	@ (8007e48 <log_monitor_init+0x18>)
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	601a      	str	r2, [r3, #0]
}
 8007e3e:	46c0      	nop			@ (mov r8, r8)
 8007e40:	46bd      	mov	sp, r7
 8007e42:	b002      	add	sp, #8
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	46c0      	nop			@ (mov r8, r8)
 8007e48:	20000344 	.word	0x20000344

08007e4c <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 8007e4c:	b40e      	push	{r1, r2, r3}
 8007e4e:	b5b0      	push	{r4, r5, r7, lr}
 8007e50:	b08b      	sub	sp, #44	@ 0x2c
 8007e52:	af04      	add	r7, sp, #16
 8007e54:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8007e56:	f7fb f961 	bl	800311c <HAL_GetTick>
 8007e5a:	0003      	movs	r3, r0
 8007e5c:	617b      	str	r3, [r7, #20]
	char *Temp_buffer = NULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8007e62:	2330      	movs	r3, #48	@ 0x30
 8007e64:	18fb      	adds	r3, r7, r3
 8007e66:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	18fb      	adds	r3, r7, r3
 8007e70:	0018      	movs	r0, r3
 8007e72:	f002 fc73 	bl	800a75c <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 8007e76:	4b16      	ldr	r3, [pc, #88]	@ (8007ed0 <LOG_INFO+0x84>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	001a      	movs	r2, r3
 8007e7c:	4b15      	ldr	r3, [pc, #84]	@ (8007ed4 <LOG_INFO+0x88>)
 8007e7e:	0092      	lsls	r2, r2, #2
 8007e80:	58d4      	ldr	r4, [r2, r3]
 8007e82:	4b15      	ldr	r3, [pc, #84]	@ (8007ed8 <LOG_INFO+0x8c>)
 8007e84:	681d      	ldr	r5, [r3, #0]
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	4b14      	ldr	r3, [pc, #80]	@ (8007edc <LOG_INFO+0x90>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4914      	ldr	r1, [pc, #80]	@ (8007ee0 <LOG_INFO+0x94>)
 8007e8e:	2008      	movs	r0, #8
 8007e90:	1838      	adds	r0, r7, r0
 8007e92:	9303      	str	r3, [sp, #12]
 8007e94:	9202      	str	r2, [sp, #8]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	002b      	movs	r3, r5
 8007ea0:	0022      	movs	r2, r4
 8007ea2:	f002 fc21 	bl	800a6e8 <asiprintf>
	plog(Output_buffer);
 8007ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee4 <LOG_INFO+0x98>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	0010      	movs	r0, r2
 8007eae:	4798      	blx	r3

	free(Temp_buffer);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f002 fb5c 	bl	800a570 <free>
	free(Output_buffer);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f002 fb58 	bl	800a570 <free>
}
 8007ec0:	46c0      	nop			@ (mov r8, r8)
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	b007      	add	sp, #28
 8007ec6:	bcb0      	pop	{r4, r5, r7}
 8007ec8:	bc08      	pop	{r3}
 8007eca:	b003      	add	sp, #12
 8007ecc:	4718      	bx	r3
 8007ece:	46c0      	nop			@ (mov r8, r8)
 8007ed0:	20000020 	.word	0x20000020
 8007ed4:	20000044 	.word	0x20000044
 8007ed8:	20000024 	.word	0x20000024
 8007edc:	20000040 	.word	0x20000040
 8007ee0:	0800b6c4 	.word	0x0800b6c4
 8007ee4:	20000344 	.word	0x20000344

08007ee8 <LOG_WARN>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_WARN(const char *tag,  const char *format, ...){
 8007ee8:	b40e      	push	{r1, r2, r3}
 8007eea:	b5b0      	push	{r4, r5, r7, lr}
 8007eec:	b08b      	sub	sp, #44	@ 0x2c
 8007eee:	af04      	add	r7, sp, #16
 8007ef0:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8007ef2:	f7fb f913 	bl	800311c <HAL_GetTick>
 8007ef6:	0003      	movs	r3, r0
 8007ef8:	617b      	str	r3, [r7, #20]
	char *Temp_buffer = NULL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8007efe:	2330      	movs	r3, #48	@ 0x30
 8007f00:	18fb      	adds	r3, r7, r3
 8007f02:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f08:	2310      	movs	r3, #16
 8007f0a:	18fb      	adds	r3, r7, r3
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f002 fc25 	bl	800a75c <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logw], log_level_str[1], time, tag, Temp_buffer, COLOR_END);
 8007f12:	4b16      	ldr	r3, [pc, #88]	@ (8007f6c <LOG_WARN+0x84>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	001a      	movs	r2, r3
 8007f18:	4b15      	ldr	r3, [pc, #84]	@ (8007f70 <LOG_WARN+0x88>)
 8007f1a:	0092      	lsls	r2, r2, #2
 8007f1c:	58d4      	ldr	r4, [r2, r3]
 8007f1e:	4b15      	ldr	r3, [pc, #84]	@ (8007f74 <LOG_WARN+0x8c>)
 8007f20:	685d      	ldr	r5, [r3, #4]
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4b14      	ldr	r3, [pc, #80]	@ (8007f78 <LOG_WARN+0x90>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4914      	ldr	r1, [pc, #80]	@ (8007f7c <LOG_WARN+0x94>)
 8007f2a:	2008      	movs	r0, #8
 8007f2c:	1838      	adds	r0, r7, r0
 8007f2e:	9303      	str	r3, [sp, #12]
 8007f30:	9202      	str	r2, [sp, #8]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	002b      	movs	r3, r5
 8007f3c:	0022      	movs	r2, r4
 8007f3e:	f002 fbd3 	bl	800a6e8 <asiprintf>
	plog(Output_buffer);
 8007f42:	4b0f      	ldr	r3, [pc, #60]	@ (8007f80 <LOG_WARN+0x98>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	0010      	movs	r0, r2
 8007f4a:	4798      	blx	r3

	free(Temp_buffer);
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f002 fb0e 	bl	800a570 <free>
	free(Output_buffer);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	0018      	movs	r0, r3
 8007f58:	f002 fb0a 	bl	800a570 <free>
}
 8007f5c:	46c0      	nop			@ (mov r8, r8)
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	b007      	add	sp, #28
 8007f62:	bcb0      	pop	{r4, r5, r7}
 8007f64:	bc08      	pop	{r3}
 8007f66:	b003      	add	sp, #12
 8007f68:	4718      	bx	r3
 8007f6a:	46c0      	nop			@ (mov r8, r8)
 8007f6c:	20000021 	.word	0x20000021
 8007f70:	20000044 	.word	0x20000044
 8007f74:	20000024 	.word	0x20000024
 8007f78:	20000040 	.word	0x20000040
 8007f7c:	0800b6c4 	.word	0x0800b6c4
 8007f80:	20000344 	.word	0x20000344

08007f84 <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 8007f84:	b40e      	push	{r1, r2, r3}
 8007f86:	b5b0      	push	{r4, r5, r7, lr}
 8007f88:	b08b      	sub	sp, #44	@ 0x2c
 8007f8a:	af04      	add	r7, sp, #16
 8007f8c:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8007f8e:	f7fb f8c5 	bl	800311c <HAL_GetTick>
 8007f92:	0003      	movs	r3, r0
 8007f94:	617b      	str	r3, [r7, #20]
	char *Temp_buffer = NULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8007f9a:	2330      	movs	r3, #48	@ 0x30
 8007f9c:	18fb      	adds	r3, r7, r3
 8007f9e:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	18fb      	adds	r3, r7, r3
 8007fa8:	0018      	movs	r0, r3
 8007faa:	f002 fbd7 	bl	800a75c <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 8007fae:	4b16      	ldr	r3, [pc, #88]	@ (8008008 <LOG_ERROR+0x84>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	001a      	movs	r2, r3
 8007fb4:	4b15      	ldr	r3, [pc, #84]	@ (800800c <LOG_ERROR+0x88>)
 8007fb6:	0092      	lsls	r2, r2, #2
 8007fb8:	58d4      	ldr	r4, [r2, r3]
 8007fba:	4b15      	ldr	r3, [pc, #84]	@ (8008010 <LOG_ERROR+0x8c>)
 8007fbc:	689d      	ldr	r5, [r3, #8]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	4b14      	ldr	r3, [pc, #80]	@ (8008014 <LOG_ERROR+0x90>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4914      	ldr	r1, [pc, #80]	@ (8008018 <LOG_ERROR+0x94>)
 8007fc6:	2008      	movs	r0, #8
 8007fc8:	1838      	adds	r0, r7, r0
 8007fca:	9303      	str	r3, [sp, #12]
 8007fcc:	9202      	str	r2, [sp, #8]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	002b      	movs	r3, r5
 8007fd8:	0022      	movs	r2, r4
 8007fda:	f002 fb85 	bl	800a6e8 <asiprintf>
	plog(Output_buffer);
 8007fde:	4b0f      	ldr	r3, [pc, #60]	@ (800801c <LOG_ERROR+0x98>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	0010      	movs	r0, r2
 8007fe6:	4798      	blx	r3

	free(Temp_buffer);
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	0018      	movs	r0, r3
 8007fec:	f002 fac0 	bl	800a570 <free>
	free(Output_buffer);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	f002 fabc 	bl	800a570 <free>
}
 8007ff8:	46c0      	nop			@ (mov r8, r8)
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b007      	add	sp, #28
 8007ffe:	bcb0      	pop	{r4, r5, r7}
 8008000:	bc08      	pop	{r3}
 8008002:	b003      	add	sp, #12
 8008004:	4718      	bx	r3
 8008006:	46c0      	nop			@ (mov r8, r8)
 8008008:	20000022 	.word	0x20000022
 800800c:	20000044 	.word	0x20000044
 8008010:	20000024 	.word	0x20000024
 8008014:	20000040 	.word	0x20000040
 8008018:	0800b6c4 	.word	0x0800b6c4
 800801c:	20000344 	.word	0x20000344

08008020 <LOG_EVENT>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_EVENT(const char *tag,  const char *format, ...){
 8008020:	b40e      	push	{r1, r2, r3}
 8008022:	b5b0      	push	{r4, r5, r7, lr}
 8008024:	b08b      	sub	sp, #44	@ 0x2c
 8008026:	af04      	add	r7, sp, #16
 8008028:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 800802a:	f7fb f877 	bl	800311c <HAL_GetTick>
 800802e:	0003      	movs	r3, r0
 8008030:	617b      	str	r3, [r7, #20]
	char *Temp_buffer = NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8008036:	2330      	movs	r3, #48	@ 0x30
 8008038:	18fb      	adds	r3, r7, r3
 800803a:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008040:	2310      	movs	r3, #16
 8008042:	18fb      	adds	r3, r7, r3
 8008044:	0018      	movs	r0, r3
 8008046:	f002 fb89 	bl	800a75c <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logv], log_level_str[5], time, tag, Temp_buffer, COLOR_END);
 800804a:	4b16      	ldr	r3, [pc, #88]	@ (80080a4 <LOG_EVENT+0x84>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	001a      	movs	r2, r3
 8008050:	4b15      	ldr	r3, [pc, #84]	@ (80080a8 <LOG_EVENT+0x88>)
 8008052:	0092      	lsls	r2, r2, #2
 8008054:	58d4      	ldr	r4, [r2, r3]
 8008056:	4b15      	ldr	r3, [pc, #84]	@ (80080ac <LOG_EVENT+0x8c>)
 8008058:	695d      	ldr	r5, [r3, #20]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	4b14      	ldr	r3, [pc, #80]	@ (80080b0 <LOG_EVENT+0x90>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4914      	ldr	r1, [pc, #80]	@ (80080b4 <LOG_EVENT+0x94>)
 8008062:	2008      	movs	r0, #8
 8008064:	1838      	adds	r0, r7, r0
 8008066:	9303      	str	r3, [sp, #12]
 8008068:	9202      	str	r2, [sp, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	002b      	movs	r3, r5
 8008074:	0022      	movs	r2, r4
 8008076:	f002 fb37 	bl	800a6e8 <asiprintf>
	plog(Output_buffer);
 800807a:	4b0f      	ldr	r3, [pc, #60]	@ (80080b8 <LOG_EVENT+0x98>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	0010      	movs	r0, r2
 8008082:	4798      	blx	r3

	free(Temp_buffer);
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	0018      	movs	r0, r3
 8008088:	f002 fa72 	bl	800a570 <free>
	free(Output_buffer);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	0018      	movs	r0, r3
 8008090:	f002 fa6e 	bl	800a570 <free>
}
 8008094:	46c0      	nop			@ (mov r8, r8)
 8008096:	46bd      	mov	sp, r7
 8008098:	b007      	add	sp, #28
 800809a:	bcb0      	pop	{r4, r5, r7}
 800809c:	bc08      	pop	{r3}
 800809e:	b003      	add	sp, #12
 80080a0:	4718      	bx	r3
 80080a2:	46c0      	nop			@ (mov r8, r8)
 80080a4:	20000023 	.word	0x20000023
 80080a8:	20000044 	.word	0x20000044
 80080ac:	20000024 	.word	0x20000024
 80080b0:	20000040 	.word	0x20000040
 80080b4:	0800b6c4 	.word	0x0800b6c4
 80080b8:	20000344 	.word	0x20000344

080080bc <RadioGetFskBandwidthRegValue>:
 * Returns the known FSK bandwidth registers value
 *
 * @param  bandwidth Bandwidth value in Hz
 * @retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue(uint32_t bandwidth) {
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
	uint8_t i;

	if (bandwidth == 0) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <RadioGetFskBandwidthRegValue+0x12>
		return (0x1F);
 80080ca:	231f      	movs	r3, #31
 80080cc:	e02b      	b.n	8008126 <RadioGetFskBandwidthRegValue+0x6a>
	}

	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++) {
 80080ce:	230f      	movs	r3, #15
 80080d0:	18fb      	adds	r3, r7, r3
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	e020      	b.n	800811a <RadioGetFskBandwidthRegValue+0x5e>
		if ((bandwidth >= FskBandwidths[i].bandwidth)
 80080d8:	210f      	movs	r1, #15
 80080da:	187b      	adds	r3, r7, r1
 80080dc:	781a      	ldrb	r2, [r3, #0]
 80080de:	4b14      	ldr	r3, [pc, #80]	@ (8008130 <RadioGetFskBandwidthRegValue+0x74>)
 80080e0:	00d2      	lsls	r2, r2, #3
 80080e2:	58d3      	ldr	r3, [r2, r3]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d311      	bcc.n	800810e <RadioGetFskBandwidthRegValue+0x52>
				&& (bandwidth < FskBandwidths[i + 1].bandwidth)) {
 80080ea:	187b      	adds	r3, r7, r1
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008130 <RadioGetFskBandwidthRegValue+0x74>)
 80080f2:	00d2      	lsls	r2, r2, #3
 80080f4:	58d3      	ldr	r3, [r2, r3]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d208      	bcs.n	800810e <RadioGetFskBandwidthRegValue+0x52>
			return FskBandwidths[i + 1].RegValue;
 80080fc:	187b      	adds	r3, r7, r1
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	3301      	adds	r3, #1
 8008102:	4a0b      	ldr	r2, [pc, #44]	@ (8008130 <RadioGetFskBandwidthRegValue+0x74>)
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	18d3      	adds	r3, r2, r3
 8008108:	3304      	adds	r3, #4
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	e00b      	b.n	8008126 <RadioGetFskBandwidthRegValue+0x6a>
	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++) {
 800810e:	210f      	movs	r1, #15
 8008110:	187b      	adds	r3, r7, r1
 8008112:	781a      	ldrb	r2, [r3, #0]
 8008114:	187b      	adds	r3, r7, r1
 8008116:	3201      	adds	r2, #1
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	230f      	movs	r3, #15
 800811c:	18fb      	adds	r3, r7, r3
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b14      	cmp	r3, #20
 8008122:	d9d9      	bls.n	80080d8 <RadioGetFskBandwidthRegValue+0x1c>
		}
	}
	// In case value not found, return bandwidth 0
	return (0x1F);
 8008124:	231f      	movs	r3, #31
}
 8008126:	0018      	movs	r0, r3
 8008128:	46bd      	mov	sp, r7
 800812a:	b004      	add	sp, #16
 800812c:	bd80      	pop	{r7, pc}
 800812e:	46c0      	nop			@ (mov r8, r8)
 8008130:	0800b8a0 	.word	0x0800b8a0

08008134 <RadioInit>:

void RadioInit(RadioEvents_t *events) {
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 800813c:	4b0f      	ldr	r3, [pc, #60]	@ (800817c <RadioInit+0x48>)
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	601a      	str	r2, [r3, #0]
	SX126xInit();
 8008142:	f001 f8fd 	bl	8009340 <SX126xInit>
	SX126xSetStandby(STDBY_RC);
 8008146:	2000      	movs	r0, #0
 8008148:	f001 fa64 	bl	8009614 <SX126xSetStandby>
	if (LORA_USE_LDO) {
		SX126xSetRegulatorMode(USE_LDO);
 800814c:	2000      	movs	r0, #0
 800814e:	f001 fb55 	bl	80097fc <SX126xSetRegulatorMode>
	}
	else {
		SX126xSetRegulatorMode(USE_DCDC);
	}

	SX126xSetBufferBaseAddress(0x00, 0x00);
 8008152:	2100      	movs	r1, #0
 8008154:	2000      	movs	r0, #0
 8008156:	f001 fed3 	bl	8009f00 <SX126xSetBufferBaseAddress>
	SX126xSetTxParams(0, RADIO_RAMP_200_US);
 800815a:	2104      	movs	r1, #4
 800815c:	2000      	movs	r0, #0
 800815e:	f001 fcbb 	bl	8009ad8 <SX126xSetTxParams>
	SX126xSetDioIrqParams(IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE,
 8008162:	4907      	ldr	r1, [pc, #28]	@ (8008180 <RadioInit+0x4c>)
 8008164:	4806      	ldr	r0, [pc, #24]	@ (8008180 <RadioInit+0x4c>)
 8008166:	2300      	movs	r3, #0
 8008168:	2200      	movs	r2, #0
 800816a:	f001 fbd9 	bl	8009920 <SX126xSetDioIrqParams>
//	TxTimeoutTimer.oneShot = true;
//	RxTimeoutTimer.oneShot = true;
//	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
//	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);

	IrqFired = false;
 800816e:	4b05      	ldr	r3, [pc, #20]	@ (8008184 <RadioInit+0x50>)
 8008170:	2200      	movs	r2, #0
 8008172:	701a      	strb	r2, [r3, #0]
}
 8008174:	46c0      	nop			@ (mov r8, r8)
 8008176:	46bd      	mov	sp, r7
 8008178:	b002      	add	sp, #8
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20000470 	.word	0x20000470
 8008180:	0000ffff 	.word	0x0000ffff
 8008184:	20000467 	.word	0x20000467

08008188 <RadioReInit>:

void RadioReInit(RadioEvents_t *events) {
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 8008190:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <RadioReInit+0x20>)
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	601a      	str	r2, [r3, #0]
	SX126xReInit();
 8008196:	f001 f8e5 	bl	8009364 <SX126xReInit>
//	TxTimeoutTimer.oneShot = true;
//	RxTimeoutTimer.oneShot = true;
//	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
//	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);

	IrqFired = false;
 800819a:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <RadioReInit+0x24>)
 800819c:	2200      	movs	r2, #0
 800819e:	701a      	strb	r2, [r3, #0]
}
 80081a0:	46c0      	nop			@ (mov r8, r8)
 80081a2:	46bd      	mov	sp, r7
 80081a4:	b002      	add	sp, #8
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20000470 	.word	0x20000470
 80081ac:	20000467 	.word	0x20000467

080081b0 <RadioGetStatus>:

RadioState_t RadioGetStatus(void) {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
	switch (SX126xGetOperatingMode()) {
 80081b4:	f001 f8dc 	bl	8009370 <SX126xGetOperatingMode>
 80081b8:	0003      	movs	r3, r0
 80081ba:	2b07      	cmp	r3, #7
 80081bc:	d009      	beq.n	80081d2 <RadioGetStatus+0x22>
 80081be:	dc0a      	bgt.n	80081d6 <RadioGetStatus+0x26>
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d002      	beq.n	80081ca <RadioGetStatus+0x1a>
 80081c4:	2b05      	cmp	r3, #5
 80081c6:	d002      	beq.n	80081ce <RadioGetStatus+0x1e>
 80081c8:	e005      	b.n	80081d6 <RadioGetStatus+0x26>
		case MODE_TX:
			return RF_TX_RUNNING;
 80081ca:	2302      	movs	r3, #2
 80081cc:	e004      	b.n	80081d8 <RadioGetStatus+0x28>
		case MODE_RX:
			return RF_RX_RUNNING;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e002      	b.n	80081d8 <RadioGetStatus+0x28>
		case MODE_CAD:
			return RF_CAD;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e000      	b.n	80081d8 <RadioGetStatus+0x28>
		default:
			return RF_IDLE;
 80081d6:	2300      	movs	r3, #0
	}
}
 80081d8:	0018      	movs	r0, r3
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <RadioSetModem>:

void RadioSetModem(RadioModems_t modem) {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	0002      	movs	r2, r0
 80081e8:	1dfb      	adds	r3, r7, #7
 80081ea:	701a      	strb	r2, [r3, #0]
	switch (modem) {
 80081ec:	1dfb      	adds	r3, r7, #7
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d00a      	beq.n	800820a <RadioSetModem+0x2a>
		default:
		case MODEM_FSK:
			SX126xSetPacketType(PACKET_TYPE_GFSK);
 80081f4:	2000      	movs	r0, #0
 80081f6:	f001 fc4f 	bl	8009a98 <SX126xSetPacketType>
			// When switching to GFSK mode the LoRa SyncWord register value is reset
			// Thus, we also reset the RadioPublicNetwork variable
			RadioPublicNetwork.Current = false;
 80081fa:	4b11      	ldr	r3, [pc, #68]	@ (8008240 <RadioSetModem+0x60>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	705a      	strb	r2, [r3, #1]
			_modem = modem;
 8008200:	4b10      	ldr	r3, [pc, #64]	@ (8008244 <RadioSetModem+0x64>)
 8008202:	1dfa      	adds	r2, r7, #7
 8008204:	7812      	ldrb	r2, [r2, #0]
 8008206:	701a      	strb	r2, [r3, #0]
		break;
 8008208:	e016      	b.n	8008238 <RadioSetModem+0x58>
		case MODEM_LORA:
			SX126xSetPacketType(PACKET_TYPE_LORA);
 800820a:	2001      	movs	r0, #1
 800820c:	f001 fc44 	bl	8009a98 <SX126xSetPacketType>
			// Public/Private network register is reset when switching modems
			if (RadioPublicNetwork.Current != RadioPublicNetwork.Previous) {
 8008210:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <RadioSetModem+0x60>)
 8008212:	785a      	ldrb	r2, [r3, #1]
 8008214:	4b0a      	ldr	r3, [pc, #40]	@ (8008240 <RadioSetModem+0x60>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d008      	beq.n	800822e <RadioSetModem+0x4e>
				RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 800821c:	4b08      	ldr	r3, [pc, #32]	@ (8008240 <RadioSetModem+0x60>)
 800821e:	781a      	ldrb	r2, [r3, #0]
 8008220:	4b07      	ldr	r3, [pc, #28]	@ (8008240 <RadioSetModem+0x60>)
 8008222:	705a      	strb	r2, [r3, #1]
				RadioSetPublicNetwork(RadioPublicNetwork.Current);
 8008224:	4b06      	ldr	r3, [pc, #24]	@ (8008240 <RadioSetModem+0x60>)
 8008226:	785b      	ldrb	r3, [r3, #1]
 8008228:	0018      	movs	r0, r3
 800822a:	f000 feb1 	bl	8008f90 <RadioSetPublicNetwork>
			}
			_modem = modem;
 800822e:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <RadioSetModem+0x64>)
 8008230:	1dfa      	adds	r2, r7, #7
 8008232:	7812      	ldrb	r2, [r2, #0]
 8008234:	701a      	strb	r2, [r3, #0]
		break;
 8008236:	46c0      	nop			@ (mov r8, r8)
	}
}
 8008238:	46c0      	nop			@ (mov r8, r8)
 800823a:	46bd      	mov	sp, r7
 800823c:	b002      	add	sp, #8
 800823e:	bd80      	pop	{r7, pc}
 8008240:	2000046c 	.word	0x2000046c
 8008244:	2000046a 	.word	0x2000046a

08008248 <RadioSetChannel>:

void RadioSetChannel(uint32_t freq) {
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	SX126xSetRfFrequency(freq);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	0018      	movs	r0, r3
 8008254:	f001 fbda 	bl	8009a0c <SX126xSetRfFrequency>
}
 8008258:	46c0      	nop			@ (mov r8, r8)
 800825a:	46bd      	mov	sp, r7
 800825c:	b002      	add	sp, #8
 800825e:	bd80      	pop	{r7, pc}

08008260 <RadioIsChannelFree>:

bool RadioIsChannelFree(RadioModems_t modem, uint32_t freq, int16_t rssiThresh,
		uint32_t maxCarrierSenseTime) {
 8008260:	b5b0      	push	{r4, r5, r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	0011      	movs	r1, r2
 800826a:	607b      	str	r3, [r7, #4]
 800826c:	230f      	movs	r3, #15
 800826e:	18fb      	adds	r3, r7, r3
 8008270:	1c02      	adds	r2, r0, #0
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	230c      	movs	r3, #12
 8008276:	18fb      	adds	r3, r7, r3
 8008278:	1c0a      	adds	r2, r1, #0
 800827a:	801a      	strh	r2, [r3, #0]
	bool status = true;
 800827c:	2317      	movs	r3, #23
 800827e:	18fb      	adds	r3, r7, r3
 8008280:	2201      	movs	r2, #1
 8008282:	701a      	strb	r2, [r3, #0]
	int16_t rssi = 0;
 8008284:	2314      	movs	r3, #20
 8008286:	18fb      	adds	r3, r7, r3
 8008288:	2200      	movs	r2, #0
 800828a:	801a      	strh	r2, [r3, #0]
	uint32_t carrierSenseTime = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	613b      	str	r3, [r7, #16]

	if (RadioGetStatus() != RF_IDLE) {
 8008290:	f7ff ff8e 	bl	80081b0 <RadioGetStatus>
 8008294:	1e03      	subs	r3, r0, #0
 8008296:	d001      	beq.n	800829c <RadioIsChannelFree+0x3c>
		return false;
 8008298:	2300      	movs	r3, #0
 800829a:	e039      	b.n	8008310 <RadioIsChannelFree+0xb0>
	}

	RadioSetModem(modem);
 800829c:	230f      	movs	r3, #15
 800829e:	18fb      	adds	r3, r7, r3
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	0018      	movs	r0, r3
 80082a4:	f7ff ff9c 	bl	80081e0 <RadioSetModem>
	RadioSetChannel(freq);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	0018      	movs	r0, r3
 80082ac:	f7ff ffcc 	bl	8008248 <RadioSetChannel>
	RadioRx(0);
 80082b0:	2000      	movs	r0, #0
 80082b2:	f000 fd21 	bl	8008cf8 <RadioRx>

	HAL_Delay(1);
 80082b6:	2001      	movs	r0, #1
 80082b8:	f7fa ff3a 	bl	8003130 <HAL_Delay>

	carrierSenseTime = HAL_GetTick();
 80082bc:	f7fa ff2e 	bl	800311c <HAL_GetTick>
 80082c0:	0003      	movs	r3, r0
 80082c2:	613b      	str	r3, [r7, #16]

	while (HAL_GetTick() - carrierSenseTime < maxCarrierSenseTime) {
 80082c4:	e017      	b.n	80082f6 <RadioIsChannelFree+0x96>
		rssi = RadioRssi(modem);
 80082c6:	2514      	movs	r5, #20
 80082c8:	197c      	adds	r4, r7, r5
 80082ca:	230f      	movs	r3, #15
 80082cc:	18fb      	adds	r3, r7, r3
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	0018      	movs	r0, r3
 80082d2:	f000 fdc4 	bl	8008e5e <RadioRssi>
 80082d6:	0003      	movs	r3, r0
 80082d8:	8023      	strh	r3, [r4, #0]
		if (rssi > rssiThresh) {
 80082da:	197a      	adds	r2, r7, r5
 80082dc:	230c      	movs	r3, #12
 80082de:	18fb      	adds	r3, r7, r3
 80082e0:	2100      	movs	r1, #0
 80082e2:	5e52      	ldrsh	r2, [r2, r1]
 80082e4:	2100      	movs	r1, #0
 80082e6:	5e5b      	ldrsh	r3, [r3, r1]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	dd04      	ble.n	80082f6 <RadioIsChannelFree+0x96>
			status = false;
 80082ec:	2317      	movs	r3, #23
 80082ee:	18fb      	adds	r3, r7, r3
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
			break;
 80082f4:	e007      	b.n	8008306 <RadioIsChannelFree+0xa6>
	while (HAL_GetTick() - carrierSenseTime < maxCarrierSenseTime) {
 80082f6:	f7fa ff11 	bl	800311c <HAL_GetTick>
 80082fa:	0002      	movs	r2, r0
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d8df      	bhi.n	80082c6 <RadioIsChannelFree+0x66>
		}
	}
	RadioSleep();
 8008306:	f000 fcd7 	bl	8008cb8 <RadioSleep>
	return status;
 800830a:	2317      	movs	r3, #23
 800830c:	18fb      	adds	r3, r7, r3
 800830e:	781b      	ldrb	r3, [r3, #0]
}
 8008310:	0018      	movs	r0, r3
 8008312:	46bd      	mov	sp, r7
 8008314:	b006      	add	sp, #24
 8008316:	bdb0      	pop	{r4, r5, r7, pc}

08008318 <RadioRandom>:

uint32_t RadioRandom(void) {
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
	uint32_t rnd = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	607b      	str	r3, [r7, #4]
	/*
	 * Radio setup for random number generation
	 */
	// Set LoRa modem ON
	RadioSetModem(MODEM_LORA);
 8008322:	2001      	movs	r0, #1
 8008324:	f7ff ff5c 	bl	80081e0 <RadioSetModem>
	// Set radio in continuous reception
	SX126xSetRx(0);
 8008328:	2000      	movs	r0, #0
 800832a:	f001 f9b1 	bl	8009690 <SX126xSetRx>

	rnd = SX126xGetRandom();
 800832e:	f001 f93d 	bl	80095ac <SX126xGetRandom>
 8008332:	0003      	movs	r3, r0
 8008334:	607b      	str	r3, [r7, #4]
	RadioSleep();
 8008336:	f000 fcbf 	bl	8008cb8 <RadioSleep>

	return rnd;
 800833a:	687b      	ldr	r3, [r7, #4]
}
 800833c:	0018      	movs	r0, r3
 800833e:	46bd      	mov	sp, r7
 8008340:	b002      	add	sp, #8
 8008342:	bd80      	pop	{r7, pc}

08008344 <RadioSetRxConfig>:
void RadioSetRxConfig(RadioModems_t modem, uint32_t bandwidth,
		uint32_t datarate, uint8_t coderate, uint32_t bandwidthAfc,
		uint16_t preambleLen, uint16_t symbTimeout, bool fixLen,
		uint8_t payloadLen,
		bool crcOn, bool freqHopOn, uint8_t hopPeriod,
		bool iqInverted, bool rxContinuous) {
 8008344:	b5b0      	push	{r4, r5, r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	607a      	str	r2, [r7, #4]
 800834e:	0019      	movs	r1, r3
 8008350:	230f      	movs	r3, #15
 8008352:	18fb      	adds	r3, r7, r3
 8008354:	1c02      	adds	r2, r0, #0
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	230e      	movs	r3, #14
 800835a:	18fb      	adds	r3, r7, r3
 800835c:	1c0a      	adds	r2, r1, #0
 800835e:	701a      	strb	r2, [r3, #0]

	RxContinuous = rxContinuous;
 8008360:	4bc2      	ldr	r3, [pc, #776]	@ (800866c <RadioSetRxConfig+0x328>)
 8008362:	2224      	movs	r2, #36	@ 0x24
 8008364:	2128      	movs	r1, #40	@ 0x28
 8008366:	1852      	adds	r2, r2, r1
 8008368:	19d2      	adds	r2, r2, r7
 800836a:	7812      	ldrb	r2, [r2, #0]
 800836c:	701a      	strb	r2, [r3, #0]
	if (rxContinuous == true) {
 800836e:	2324      	movs	r3, #36	@ 0x24
 8008370:	185b      	adds	r3, r3, r1
 8008372:	19db      	adds	r3, r3, r7
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <RadioSetRxConfig+0x3e>
		symbTimeout = 0;
 800837a:	2330      	movs	r3, #48	@ 0x30
 800837c:	18fb      	adds	r3, r7, r3
 800837e:	2200      	movs	r2, #0
 8008380:	801a      	strh	r2, [r3, #0]
	}
	if (fixLen == true) {
 8008382:	2334      	movs	r3, #52	@ 0x34
 8008384:	18fb      	adds	r3, r7, r3
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d005      	beq.n	8008398 <RadioSetRxConfig+0x54>
		MaxPayloadLength = payloadLen;
 800838c:	4bb8      	ldr	r3, [pc, #736]	@ (8008670 <RadioSetRxConfig+0x32c>)
 800838e:	2238      	movs	r2, #56	@ 0x38
 8008390:	18ba      	adds	r2, r7, r2
 8008392:	7812      	ldrb	r2, [r2, #0]
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	e002      	b.n	800839e <RadioSetRxConfig+0x5a>
	}
	else {
		MaxPayloadLength = 0xFF;
 8008398:	4bb5      	ldr	r3, [pc, #724]	@ (8008670 <RadioSetRxConfig+0x32c>)
 800839a:	22ff      	movs	r2, #255	@ 0xff
 800839c:	701a      	strb	r2, [r3, #0]
	}

	switch (modem) {
 800839e:	230f      	movs	r3, #15
 80083a0:	18fb      	adds	r3, r7, r3
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <RadioSetRxConfig+0x6c>
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d100      	bne.n	80083ae <RadioSetRxConfig+0x6a>
 80083ac:	e0af      	b.n	800850e <RadioSetRxConfig+0x1ca>
			// WORKAROUND END
			// Timeout Max, Timeout handled directly in SetRx function
			RxTimeout = RXTIMEOUT_LORA_MAX;
		break;
	}
}
 80083ae:	e159      	b.n	8008664 <RadioSetRxConfig+0x320>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 80083b0:	2000      	movs	r0, #0
 80083b2:	f001 fa03 	bl	80097bc <SX126xSetStopRxTimerOnPreambleDetect>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80083b6:	4baf      	ldr	r3, [pc, #700]	@ (8008674 <RadioSetRxConfig+0x330>)
 80083b8:	2240      	movs	r2, #64	@ 0x40
 80083ba:	2100      	movs	r1, #0
 80083bc:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 80083be:	4bad      	ldr	r3, [pc, #692]	@ (8008674 <RadioSetRxConfig+0x330>)
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	645a      	str	r2, [r3, #68]	@ 0x44
			SX126x.ModulationParams.Params.Gfsk.ModulationShaping =
 80083c4:	4bab      	ldr	r3, [pc, #684]	@ (8008674 <RadioSetRxConfig+0x330>)
 80083c6:	224c      	movs	r2, #76	@ 0x4c
 80083c8:	210b      	movs	r1, #11
 80083ca:	5499      	strb	r1, [r3, r2]
					RadioGetFskBandwidthRegValue(bandwidth);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	0018      	movs	r0, r3
 80083d0:	f7ff fe74 	bl	80080bc <RadioGetFskBandwidthRegValue>
 80083d4:	0003      	movs	r3, r0
 80083d6:	0019      	movs	r1, r3
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
 80083d8:	4ba6      	ldr	r3, [pc, #664]	@ (8008674 <RadioSetRxConfig+0x330>)
 80083da:	224d      	movs	r2, #77	@ 0x4d
 80083dc:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80083de:	4ba5      	ldr	r3, [pc, #660]	@ (8008674 <RadioSetRxConfig+0x330>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 80083e4:	232c      	movs	r3, #44	@ 0x2c
 80083e6:	18fb      	adds	r3, r7, r3
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	00db      	lsls	r3, r3, #3
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	4ba1      	ldr	r3, [pc, #644]	@ (8008674 <RadioSetRxConfig+0x330>)
 80083f0:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect =
 80083f2:	4ba0      	ldr	r3, [pc, #640]	@ (8008674 <RadioSetRxConfig+0x330>)
 80083f4:	2204      	movs	r2, #4
 80083f6:	771a      	strb	r2, [r3, #28]
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80083f8:	4b9e      	ldr	r3, [pc, #632]	@ (8008674 <RadioSetRxConfig+0x330>)
 80083fa:	2218      	movs	r2, #24
 80083fc:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp =
 80083fe:	4b9d      	ldr	r3, [pc, #628]	@ (8008674 <RadioSetRxConfig+0x330>)
 8008400:	2200      	movs	r2, #0
 8008402:	779a      	strb	r2, [r3, #30]
							RADIO_PACKET_FIXED_LENGTH :
 8008404:	2334      	movs	r3, #52	@ 0x34
 8008406:	18fb      	adds	r3, r7, r3
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2201      	movs	r2, #1
 800840c:	4053      	eors	r3, r2
 800840e:	b2db      	uxtb	r3, r3
 8008410:	001a      	movs	r2, r3
			SX126x.PacketParams.Params.Gfsk.HeaderType =
 8008412:	4b98      	ldr	r3, [pc, #608]	@ (8008674 <RadioSetRxConfig+0x330>)
 8008414:	77da      	strb	r2, [r3, #31]
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008416:	4b96      	ldr	r3, [pc, #600]	@ (8008670 <RadioSetRxConfig+0x32c>)
 8008418:	7819      	ldrb	r1, [r3, #0]
 800841a:	4b96      	ldr	r3, [pc, #600]	@ (8008674 <RadioSetRxConfig+0x330>)
 800841c:	2220      	movs	r2, #32
 800841e:	5499      	strb	r1, [r3, r2]
			if (crcOn == true) {
 8008420:	233c      	movs	r3, #60	@ 0x3c
 8008422:	18fb      	adds	r3, r7, r3
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d004      	beq.n	8008434 <RadioSetRxConfig+0xf0>
				SX126x.PacketParams.Params.Gfsk.CrcLength =
 800842a:	4b92      	ldr	r3, [pc, #584]	@ (8008674 <RadioSetRxConfig+0x330>)
 800842c:	2221      	movs	r2, #33	@ 0x21
 800842e:	21f2      	movs	r1, #242	@ 0xf2
 8008430:	5499      	strb	r1, [r3, r2]
 8008432:	e003      	b.n	800843c <RadioSetRxConfig+0xf8>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008434:	4b8f      	ldr	r3, [pc, #572]	@ (8008674 <RadioSetRxConfig+0x330>)
 8008436:	2221      	movs	r2, #33	@ 0x21
 8008438:	2101      	movs	r1, #1
 800843a:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800843c:	4b8d      	ldr	r3, [pc, #564]	@ (8008674 <RadioSetRxConfig+0x330>)
 800843e:	2222      	movs	r2, #34	@ 0x22
 8008440:	2101      	movs	r1, #1
 8008442:	5499      	strb	r1, [r3, r2]
			RadioStandby();
 8008444:	f000 fc4f 	bl	8008ce6 <RadioStandby>
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 8008448:	4b8a      	ldr	r3, [pc, #552]	@ (8008674 <RadioSetRxConfig+0x330>)
 800844a:	2240      	movs	r2, #64	@ 0x40
 800844c:	5c9b      	ldrb	r3, [r3, r2]
			RadioSetModem(
 800844e:	1e5a      	subs	r2, r3, #1
 8008450:	4193      	sbcs	r3, r2
 8008452:	b2db      	uxtb	r3, r3
 8008454:	0018      	movs	r0, r3
 8008456:	f7ff fec3 	bl	80081e0 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 800845a:	4b87      	ldr	r3, [pc, #540]	@ (8008678 <RadioSetRxConfig+0x334>)
 800845c:	0018      	movs	r0, r3
 800845e:	f001 fbb5 	bl	8009bcc <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 8008462:	4b86      	ldr	r3, [pc, #536]	@ (800867c <RadioSetRxConfig+0x338>)
 8008464:	0018      	movs	r0, r3
 8008466:	f001 fc57 	bl	8009d18 <SX126xSetPacketParams>
			syncWord[0] = 0xC1;
 800846a:	2110      	movs	r1, #16
 800846c:	187b      	adds	r3, r7, r1
 800846e:	22c1      	movs	r2, #193	@ 0xc1
 8008470:	701a      	strb	r2, [r3, #0]
			syncWord[1] = 0x94;
 8008472:	187b      	adds	r3, r7, r1
 8008474:	2294      	movs	r2, #148	@ 0x94
 8008476:	705a      	strb	r2, [r3, #1]
			syncWord[2] = 0xC1;
 8008478:	187b      	adds	r3, r7, r1
 800847a:	22c1      	movs	r2, #193	@ 0xc1
 800847c:	709a      	strb	r2, [r3, #2]
			syncWord[3] = 0x00;
 800847e:	187b      	adds	r3, r7, r1
 8008480:	2200      	movs	r2, #0
 8008482:	70da      	strb	r2, [r3, #3]
			syncWord[4] = 0x00;
 8008484:	187b      	adds	r3, r7, r1
 8008486:	2200      	movs	r2, #0
 8008488:	711a      	strb	r2, [r3, #4]
			syncWord[5] = 0x00;
 800848a:	187b      	adds	r3, r7, r1
 800848c:	2200      	movs	r2, #0
 800848e:	715a      	strb	r2, [r3, #5]
			syncWord[6] = 0x00;
 8008490:	187b      	adds	r3, r7, r1
 8008492:	2200      	movs	r2, #0
 8008494:	719a      	strb	r2, [r3, #6]
			syncWord[7] = 0x00;
 8008496:	187b      	adds	r3, r7, r1
 8008498:	2200      	movs	r2, #0
 800849a:	71da      	strb	r2, [r3, #7]
			SX126xSetSyncWord(syncWord);
 800849c:	187b      	adds	r3, r7, r1
 800849e:	0018      	movs	r0, r3
 80084a0:	f000 ffe5 	bl	800946e <SX126xSetSyncWord>
			SX126xSetWhiteningSeed(0x01FF);
 80084a4:	4b76      	ldr	r3, [pc, #472]	@ (8008680 <RadioSetRxConfig+0x33c>)
 80084a6:	0018      	movs	r0, r3
 80084a8:	f001 f83e 	bl	8009528 <SX126xSetWhiteningSeed>
					* ((1.0 / (double) datarate) * 8.0) * 1000);
 80084ac:	2330      	movs	r3, #48	@ 0x30
 80084ae:	18fb      	adds	r3, r7, r3
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	0018      	movs	r0, r3
 80084b4:	f7f9 ff40 	bl	8002338 <__aeabi_i2d>
 80084b8:	0004      	movs	r4, r0
 80084ba:	000d      	movs	r5, r1
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7f9 ff69 	bl	8002394 <__aeabi_ui2d>
 80084c2:	0002      	movs	r2, r0
 80084c4:	000b      	movs	r3, r1
 80084c6:	2000      	movs	r0, #0
 80084c8:	496e      	ldr	r1, [pc, #440]	@ (8008684 <RadioSetRxConfig+0x340>)
 80084ca:	f7f8 fc51 	bl	8000d70 <__aeabi_ddiv>
 80084ce:	0002      	movs	r2, r0
 80084d0:	000b      	movs	r3, r1
 80084d2:	0010      	movs	r0, r2
 80084d4:	0019      	movs	r1, r3
 80084d6:	2200      	movs	r2, #0
 80084d8:	4b6b      	ldr	r3, [pc, #428]	@ (8008688 <RadioSetRxConfig+0x344>)
 80084da:	f7f9 f88d 	bl	80015f8 <__aeabi_dmul>
 80084de:	0002      	movs	r2, r0
 80084e0:	000b      	movs	r3, r1
 80084e2:	0020      	movs	r0, r4
 80084e4:	0029      	movs	r1, r5
 80084e6:	f7f9 f887 	bl	80015f8 <__aeabi_dmul>
 80084ea:	0002      	movs	r2, r0
 80084ec:	000b      	movs	r3, r1
 80084ee:	0010      	movs	r0, r2
 80084f0:	0019      	movs	r1, r3
 80084f2:	2200      	movs	r2, #0
 80084f4:	4b65      	ldr	r3, [pc, #404]	@ (800868c <RadioSetRxConfig+0x348>)
 80084f6:	f7f9 f87f 	bl	80015f8 <__aeabi_dmul>
 80084fa:	0002      	movs	r2, r0
 80084fc:	000b      	movs	r3, r1
			RxTimeout = (uint32_t) (symbTimeout
 80084fe:	0010      	movs	r0, r2
 8008500:	0019      	movs	r1, r3
 8008502:	f7f7 ffe7 	bl	80004d4 <__aeabi_d2uiz>
 8008506:	0002      	movs	r2, r0
 8008508:	4b61      	ldr	r3, [pc, #388]	@ (8008690 <RadioSetRxConfig+0x34c>)
 800850a:	601a      	str	r2, [r3, #0]
		break;
 800850c:	e0aa      	b.n	8008664 <RadioSetRxConfig+0x320>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 800850e:	2000      	movs	r0, #0
 8008510:	f001 f954 	bl	80097bc <SX126xSetStopRxTimerOnPreambleDetect>
			SX126xSetLoRaSymbNumTimeout(symbTimeout);
 8008514:	2330      	movs	r3, #48	@ 0x30
 8008516:	18fb      	adds	r3, r7, r3
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	0018      	movs	r0, r3
 800851e:	f001 f95d 	bl	80097dc <SX126xSetLoRaSymbNumTimeout>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008522:	4b54      	ldr	r3, [pc, #336]	@ (8008674 <RadioSetRxConfig+0x330>)
 8008524:	2240      	movs	r2, #64	@ 0x40
 8008526:	2101      	movs	r1, #1
 8008528:	5499      	strb	r1, [r3, r2]
					(RadioLoRaSpreadingFactors_t) datarate;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	b2d9      	uxtb	r1, r3
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
 800852e:	4b51      	ldr	r3, [pc, #324]	@ (8008674 <RadioSetRxConfig+0x330>)
 8008530:	2250      	movs	r2, #80	@ 0x50
 8008532:	5499      	strb	r1, [r3, r2]
					Bandwidths[bandwidth];
 8008534:	4a57      	ldr	r2, [pc, #348]	@ (8008694 <RadioSetRxConfig+0x350>)
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	18d3      	adds	r3, r2, r3
 800853a:	7819      	ldrb	r1, [r3, #0]
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
 800853c:	4b4d      	ldr	r3, [pc, #308]	@ (8008674 <RadioSetRxConfig+0x330>)
 800853e:	2251      	movs	r2, #81	@ 0x51
 8008540:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.CodingRate =
 8008542:	4b4c      	ldr	r3, [pc, #304]	@ (8008674 <RadioSetRxConfig+0x330>)
 8008544:	220e      	movs	r2, #14
 8008546:	18ba      	adds	r2, r7, r2
 8008548:	2152      	movs	r1, #82	@ 0x52
 800854a:	7812      	ldrb	r2, [r2, #0]
 800854c:	545a      	strb	r2, [r3, r1]
			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12)))
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d105      	bne.n	8008560 <RadioSetRxConfig+0x21c>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b0b      	cmp	r3, #11
 8008558:	d008      	beq.n	800856c <RadioSetRxConfig+0x228>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b0c      	cmp	r3, #12
 800855e:	d005      	beq.n	800856c <RadioSetRxConfig+0x228>
					|| ((bandwidth == 1) && (datarate == 12))) {
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d107      	bne.n	8008576 <RadioSetRxConfig+0x232>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b0c      	cmp	r3, #12
 800856a:	d104      	bne.n	8008576 <RadioSetRxConfig+0x232>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800856c:	4b41      	ldr	r3, [pc, #260]	@ (8008674 <RadioSetRxConfig+0x330>)
 800856e:	2253      	movs	r2, #83	@ 0x53
 8008570:	2101      	movs	r1, #1
 8008572:	5499      	strb	r1, [r3, r2]
 8008574:	e003      	b.n	800857e <RadioSetRxConfig+0x23a>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008576:	4b3f      	ldr	r3, [pc, #252]	@ (8008674 <RadioSetRxConfig+0x330>)
 8008578:	2253      	movs	r2, #83	@ 0x53
 800857a:	2100      	movs	r1, #0
 800857c:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800857e:	4b3d      	ldr	r3, [pc, #244]	@ (8008674 <RadioSetRxConfig+0x330>)
 8008580:	2201      	movs	r2, #1
 8008582:	761a      	strb	r2, [r3, #24]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5)
 8008584:	4b3b      	ldr	r3, [pc, #236]	@ (8008674 <RadioSetRxConfig+0x330>)
 8008586:	2250      	movs	r2, #80	@ 0x50
 8008588:	5c9b      	ldrb	r3, [r3, r2]
 800858a:	2b05      	cmp	r3, #5
 800858c:	d004      	beq.n	8008598 <RadioSetRxConfig+0x254>
					|| (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 800858e:	4b39      	ldr	r3, [pc, #228]	@ (8008674 <RadioSetRxConfig+0x330>)
 8008590:	2250      	movs	r2, #80	@ 0x50
 8008592:	5c9b      	ldrb	r3, [r3, r2]
 8008594:	2b06      	cmp	r3, #6
 8008596:	d10e      	bne.n	80085b6 <RadioSetRxConfig+0x272>
				if (preambleLen < 12) {
 8008598:	232c      	movs	r3, #44	@ 0x2c
 800859a:	18fb      	adds	r3, r7, r3
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	2b0b      	cmp	r3, #11
 80085a0:	d803      	bhi.n	80085aa <RadioSetRxConfig+0x266>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 80085a2:	4b34      	ldr	r3, [pc, #208]	@ (8008674 <RadioSetRxConfig+0x330>)
 80085a4:	220c      	movs	r2, #12
 80085a6:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12) {
 80085a8:	e00a      	b.n	80085c0 <RadioSetRxConfig+0x27c>
					SX126x.PacketParams.Params.LoRa.PreambleLength =
 80085aa:	4b32      	ldr	r3, [pc, #200]	@ (8008674 <RadioSetRxConfig+0x330>)
 80085ac:	222c      	movs	r2, #44	@ 0x2c
 80085ae:	18ba      	adds	r2, r7, r2
 80085b0:	8812      	ldrh	r2, [r2, #0]
 80085b2:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12) {
 80085b4:	e004      	b.n	80085c0 <RadioSetRxConfig+0x27c>
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80085b6:	4b2f      	ldr	r3, [pc, #188]	@ (8008674 <RadioSetRxConfig+0x330>)
 80085b8:	222c      	movs	r2, #44	@ 0x2c
 80085ba:	18ba      	adds	r2, r7, r2
 80085bc:	8812      	ldrh	r2, [r2, #0]
 80085be:	849a      	strh	r2, [r3, #36]	@ 0x24
					(RadioLoRaPacketLengthsMode_t) fixLen;
 80085c0:	2334      	movs	r3, #52	@ 0x34
 80085c2:	18fb      	adds	r3, r7, r3
 80085c4:	7819      	ldrb	r1, [r3, #0]
			SX126x.PacketParams.Params.LoRa.HeaderType =
 80085c6:	4b2b      	ldr	r3, [pc, #172]	@ (8008674 <RadioSetRxConfig+0x330>)
 80085c8:	2226      	movs	r2, #38	@ 0x26
 80085ca:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80085cc:	4b28      	ldr	r3, [pc, #160]	@ (8008670 <RadioSetRxConfig+0x32c>)
 80085ce:	7819      	ldrb	r1, [r3, #0]
 80085d0:	4b28      	ldr	r3, [pc, #160]	@ (8008674 <RadioSetRxConfig+0x330>)
 80085d2:	2227      	movs	r2, #39	@ 0x27
 80085d4:	5499      	strb	r1, [r3, r2]
					(RadioLoRaCrcModes_t) crcOn;
 80085d6:	233c      	movs	r3, #60	@ 0x3c
 80085d8:	18fb      	adds	r3, r7, r3
 80085da:	7819      	ldrb	r1, [r3, #0]
			SX126x.PacketParams.Params.LoRa.CrcMode =
 80085dc:	4b25      	ldr	r3, [pc, #148]	@ (8008674 <RadioSetRxConfig+0x330>)
 80085de:	2228      	movs	r2, #40	@ 0x28
 80085e0:	5499      	strb	r1, [r3, r2]
					(RadioLoRaIQModes_t) iqInverted;
 80085e2:	2320      	movs	r3, #32
 80085e4:	2228      	movs	r2, #40	@ 0x28
 80085e6:	189b      	adds	r3, r3, r2
 80085e8:	19db      	adds	r3, r3, r7
 80085ea:	7819      	ldrb	r1, [r3, #0]
			SX126x.PacketParams.Params.LoRa.InvertIQ =
 80085ec:	4b21      	ldr	r3, [pc, #132]	@ (8008674 <RadioSetRxConfig+0x330>)
 80085ee:	2229      	movs	r2, #41	@ 0x29
 80085f0:	5499      	strb	r1, [r3, r2]
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 80085f2:	4b20      	ldr	r3, [pc, #128]	@ (8008674 <RadioSetRxConfig+0x330>)
 80085f4:	2240      	movs	r2, #64	@ 0x40
 80085f6:	5c9b      	ldrb	r3, [r3, r2]
			RadioSetModem(
 80085f8:	1e5a      	subs	r2, r3, #1
 80085fa:	4193      	sbcs	r3, r2
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	0018      	movs	r0, r3
 8008600:	f7ff fdee 	bl	80081e0 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 8008604:	4b1c      	ldr	r3, [pc, #112]	@ (8008678 <RadioSetRxConfig+0x334>)
 8008606:	0018      	movs	r0, r3
 8008608:	f001 fae0 	bl	8009bcc <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 800860c:	4b1b      	ldr	r3, [pc, #108]	@ (800867c <RadioSetRxConfig+0x338>)
 800860e:	0018      	movs	r0, r3
 8008610:	f001 fb82 	bl	8009d18 <SX126xSetPacketParams>
			if (SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED) {
 8008614:	4b17      	ldr	r3, [pc, #92]	@ (8008674 <RadioSetRxConfig+0x330>)
 8008616:	2229      	movs	r2, #41	@ 0x29
 8008618:	5c9b      	ldrb	r3, [r3, r2]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d10f      	bne.n	800863e <RadioSetRxConfig+0x2fa>
						SX126xReadRegister(0x0736) & ~(1 << 2));
 800861e:	4b1e      	ldr	r3, [pc, #120]	@ (8008698 <RadioSetRxConfig+0x354>)
 8008620:	0018      	movs	r0, r3
 8008622:	f001 fee7 	bl	800a3f4 <SX126xReadRegister>
 8008626:	0003      	movs	r3, r0
 8008628:	001a      	movs	r2, r3
				SX126xWriteRegister(0x0736,
 800862a:	2304      	movs	r3, #4
 800862c:	439a      	bics	r2, r3
 800862e:	0013      	movs	r3, r2
 8008630:	b2db      	uxtb	r3, r3
 8008632:	4a19      	ldr	r2, [pc, #100]	@ (8008698 <RadioSetRxConfig+0x354>)
 8008634:	0019      	movs	r1, r3
 8008636:	0010      	movs	r0, r2
 8008638:	f001 fe82 	bl	800a340 <SX126xWriteRegister>
 800863c:	e00d      	b.n	800865a <RadioSetRxConfig+0x316>
						SX126xReadRegister(0x0736) | (1 << 2));
 800863e:	4b16      	ldr	r3, [pc, #88]	@ (8008698 <RadioSetRxConfig+0x354>)
 8008640:	0018      	movs	r0, r3
 8008642:	f001 fed7 	bl	800a3f4 <SX126xReadRegister>
 8008646:	0003      	movs	r3, r0
 8008648:	001a      	movs	r2, r3
				SX126xWriteRegister(0x0736,
 800864a:	2304      	movs	r3, #4
 800864c:	4313      	orrs	r3, r2
 800864e:	b2db      	uxtb	r3, r3
 8008650:	4a11      	ldr	r2, [pc, #68]	@ (8008698 <RadioSetRxConfig+0x354>)
 8008652:	0019      	movs	r1, r3
 8008654:	0010      	movs	r0, r2
 8008656:	f001 fe73 	bl	800a340 <SX126xWriteRegister>
			RxTimeout = RXTIMEOUT_LORA_MAX;
 800865a:	4b0d      	ldr	r3, [pc, #52]	@ (8008690 <RadioSetRxConfig+0x34c>)
 800865c:	22e0      	movs	r2, #224	@ 0xe0
 800865e:	0092      	lsls	r2, r2, #2
 8008660:	601a      	str	r2, [r3, #0]
		break;
 8008662:	46c0      	nop			@ (mov r8, r8)
}
 8008664:	46c0      	nop			@ (mov r8, r8)
 8008666:	46bd      	mov	sp, r7
 8008668:	b006      	add	sp, #24
 800866a:	bdb0      	pop	{r4, r5, r7, pc}
 800866c:	20000350 	.word	0x20000350
 8008670:	20000158 	.word	0x20000158
 8008674:	20000474 	.word	0x20000474
 8008678:	200004b4 	.word	0x200004b4
 800867c:	2000048c 	.word	0x2000048c
 8008680:	000001ff 	.word	0x000001ff
 8008684:	3ff00000 	.word	0x3ff00000
 8008688:	40200000 	.word	0x40200000
 800868c:	408f4000 	.word	0x408f4000
 8008690:	2000034c 	.word	0x2000034c
 8008694:	0800b950 	.word	0x0800b950
 8008698:	00000736 	.word	0x00000736

0800869c <RadioSetTxConfig>:

void RadioSetTxConfig(RadioModems_t modem, int8_t power, uint32_t fdev,
		uint32_t bandwidth, uint32_t datarate, uint8_t coderate,
		uint16_t preambleLen,
		bool fixLen, bool crcOn, bool freqHopOn, uint8_t hopPeriod,
		bool iqInverted, uint32_t timeout) {
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60ba      	str	r2, [r7, #8]
 80086a4:	607b      	str	r3, [r7, #4]
 80086a6:	240f      	movs	r4, #15
 80086a8:	193b      	adds	r3, r7, r4
 80086aa:	1c02      	adds	r2, r0, #0
 80086ac:	701a      	strb	r2, [r3, #0]
 80086ae:	230e      	movs	r3, #14
 80086b0:	18fb      	adds	r3, r7, r3
 80086b2:	1c0a      	adds	r2, r1, #0
 80086b4:	701a      	strb	r2, [r3, #0]

	switch (modem) {
 80086b6:	193b      	adds	r3, r7, r4
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <RadioSetTxConfig+0x2a>
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d100      	bne.n	80086c4 <RadioSetTxConfig+0x28>
 80086c2:	e07e      	b.n	80087c2 <RadioSetTxConfig+0x126>
 80086c4:	e103      	b.n	80088ce <RadioSetTxConfig+0x232>
		case MODEM_FSK:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80086c6:	4b9d      	ldr	r3, [pc, #628]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80086c8:	2240      	movs	r2, #64	@ 0x40
 80086ca:	2100      	movs	r1, #0
 80086cc:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 80086ce:	4b9b      	ldr	r3, [pc, #620]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80086d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086d2:	645a      	str	r2, [r3, #68]	@ 0x44

			SX126x.ModulationParams.Params.Gfsk.ModulationShaping =
 80086d4:	4b99      	ldr	r3, [pc, #612]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80086d6:	224c      	movs	r2, #76	@ 0x4c
 80086d8:	210b      	movs	r1, #11
 80086da:	5499      	strb	r1, [r3, r2]
					MOD_SHAPING_G_BT_1;
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
					RadioGetFskBandwidthRegValue(bandwidth);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	0018      	movs	r0, r3
 80086e0:	f7ff fcec 	bl	80080bc <RadioGetFskBandwidthRegValue>
 80086e4:	0003      	movs	r3, r0
 80086e6:	0019      	movs	r1, r3
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
 80086e8:	4b94      	ldr	r3, [pc, #592]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80086ea:	224d      	movs	r2, #77	@ 0x4d
 80086ec:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 80086ee:	4b93      	ldr	r3, [pc, #588]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	649a      	str	r2, [r3, #72]	@ 0x48

			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80086f4:	4b91      	ldr	r3, [pc, #580]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 80086fa:	2328      	movs	r3, #40	@ 0x28
 80086fc:	2108      	movs	r1, #8
 80086fe:	185b      	adds	r3, r3, r1
 8008700:	19db      	adds	r3, r3, r7
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	b29a      	uxth	r2, r3
 8008708:	4b8c      	ldr	r3, [pc, #560]	@ (800893c <RadioSetTxConfig+0x2a0>)
 800870a:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect =
 800870c:	4b8b      	ldr	r3, [pc, #556]	@ (800893c <RadioSetTxConfig+0x2a0>)
 800870e:	2204      	movs	r2, #4
 8008710:	771a      	strb	r2, [r3, #28]
					RADIO_PREAMBLE_DETECTOR_08_BITS;
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8008712:	4b8a      	ldr	r3, [pc, #552]	@ (800893c <RadioSetTxConfig+0x2a0>)
 8008714:	2218      	movs	r2, #24
 8008716:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp =
 8008718:	4b88      	ldr	r3, [pc, #544]	@ (800893c <RadioSetTxConfig+0x2a0>)
 800871a:	2200      	movs	r2, #0
 800871c:	779a      	strb	r2, [r3, #30]
					RADIO_ADDRESSCOMP_FILT_OFF;
			SX126x.PacketParams.Params.Gfsk.HeaderType =
					(fixLen == true) ?
							RADIO_PACKET_FIXED_LENGTH :
 800871e:	232c      	movs	r3, #44	@ 0x2c
 8008720:	185b      	adds	r3, r3, r1
 8008722:	19db      	adds	r3, r3, r7
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	2201      	movs	r2, #1
 8008728:	4053      	eors	r3, r2
 800872a:	b2db      	uxtb	r3, r3
 800872c:	001a      	movs	r2, r3
			SX126x.PacketParams.Params.Gfsk.HeaderType =
 800872e:	4b83      	ldr	r3, [pc, #524]	@ (800893c <RadioSetTxConfig+0x2a0>)
 8008730:	77da      	strb	r2, [r3, #31]
							RADIO_PACKET_VARIABLE_LENGTH;

			if (crcOn == true) {
 8008732:	2330      	movs	r3, #48	@ 0x30
 8008734:	185b      	adds	r3, r3, r1
 8008736:	19db      	adds	r3, r3, r7
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d004      	beq.n	8008748 <RadioSetTxConfig+0xac>
				SX126x.PacketParams.Params.Gfsk.CrcLength =
 800873e:	4b7f      	ldr	r3, [pc, #508]	@ (800893c <RadioSetTxConfig+0x2a0>)
 8008740:	2221      	movs	r2, #33	@ 0x21
 8008742:	21f2      	movs	r1, #242	@ 0xf2
 8008744:	5499      	strb	r1, [r3, r2]
 8008746:	e003      	b.n	8008750 <RadioSetTxConfig+0xb4>
						RADIO_CRC_2_BYTES_CCIT;
			}
			else {
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008748:	4b7c      	ldr	r3, [pc, #496]	@ (800893c <RadioSetTxConfig+0x2a0>)
 800874a:	2221      	movs	r2, #33	@ 0x21
 800874c:	2101      	movs	r1, #1
 800874e:	5499      	strb	r1, [r3, r2]
			}
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008750:	4b7a      	ldr	r3, [pc, #488]	@ (800893c <RadioSetTxConfig+0x2a0>)
 8008752:	2222      	movs	r2, #34	@ 0x22
 8008754:	2101      	movs	r1, #1
 8008756:	5499      	strb	r1, [r3, r2]

			RadioStandby();
 8008758:	f000 fac5 	bl	8008ce6 <RadioStandby>
			RadioSetModem(
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 800875c:	4b77      	ldr	r3, [pc, #476]	@ (800893c <RadioSetTxConfig+0x2a0>)
 800875e:	2240      	movs	r2, #64	@ 0x40
 8008760:	5c9b      	ldrb	r3, [r3, r2]
			RadioSetModem(
 8008762:	1e5a      	subs	r2, r3, #1
 8008764:	4193      	sbcs	r3, r2
 8008766:	b2db      	uxtb	r3, r3
 8008768:	0018      	movs	r0, r3
 800876a:	f7ff fd39 	bl	80081e0 <RadioSetModem>
							MODEM_FSK : MODEM_LORA);
			SX126xSetModulationParams(&SX126x.ModulationParams);
 800876e:	4b74      	ldr	r3, [pc, #464]	@ (8008940 <RadioSetTxConfig+0x2a4>)
 8008770:	0018      	movs	r0, r3
 8008772:	f001 fa2b 	bl	8009bcc <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 8008776:	4b73      	ldr	r3, [pc, #460]	@ (8008944 <RadioSetTxConfig+0x2a8>)
 8008778:	0018      	movs	r0, r3
 800877a:	f001 facd 	bl	8009d18 <SX126xSetPacketParams>
			uint8_t syncWord[8];
			syncWord[0] = 0xC1;
 800877e:	2110      	movs	r1, #16
 8008780:	187b      	adds	r3, r7, r1
 8008782:	22c1      	movs	r2, #193	@ 0xc1
 8008784:	701a      	strb	r2, [r3, #0]
			syncWord[1] = 0x94;
 8008786:	187b      	adds	r3, r7, r1
 8008788:	2294      	movs	r2, #148	@ 0x94
 800878a:	705a      	strb	r2, [r3, #1]
			syncWord[2] = 0xC1;
 800878c:	187b      	adds	r3, r7, r1
 800878e:	22c1      	movs	r2, #193	@ 0xc1
 8008790:	709a      	strb	r2, [r3, #2]
			syncWord[3] = 0x00;
 8008792:	187b      	adds	r3, r7, r1
 8008794:	2200      	movs	r2, #0
 8008796:	70da      	strb	r2, [r3, #3]
			syncWord[4] = 0x00;
 8008798:	187b      	adds	r3, r7, r1
 800879a:	2200      	movs	r2, #0
 800879c:	711a      	strb	r2, [r3, #4]
			syncWord[5] = 0x00;
 800879e:	187b      	adds	r3, r7, r1
 80087a0:	2200      	movs	r2, #0
 80087a2:	715a      	strb	r2, [r3, #5]
			syncWord[6] = 0x00;
 80087a4:	187b      	adds	r3, r7, r1
 80087a6:	2200      	movs	r2, #0
 80087a8:	719a      	strb	r2, [r3, #6]
			syncWord[7] = 0x00;
 80087aa:	187b      	adds	r3, r7, r1
 80087ac:	2200      	movs	r2, #0
 80087ae:	71da      	strb	r2, [r3, #7]
			SX126xSetSyncWord(syncWord);
 80087b0:	187b      	adds	r3, r7, r1
 80087b2:	0018      	movs	r0, r3
 80087b4:	f000 fe5b 	bl	800946e <SX126xSetSyncWord>
			// SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
			SX126xSetWhiteningSeed(0x01FF);
 80087b8:	4b63      	ldr	r3, [pc, #396]	@ (8008948 <RadioSetTxConfig+0x2ac>)
 80087ba:	0018      	movs	r0, r3
 80087bc:	f000 feb4 	bl	8009528 <SX126xSetWhiteningSeed>
		break;
 80087c0:	e085      	b.n	80088ce <RadioSetTxConfig+0x232>

		case MODEM_LORA:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80087c2:	4b5e      	ldr	r3, [pc, #376]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80087c4:	2240      	movs	r2, #64	@ 0x40
 80087c6:	2101      	movs	r1, #1
 80087c8:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
					(RadioLoRaSpreadingFactors_t) datarate;
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	b2d9      	uxtb	r1, r3
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
 80087ce:	4b5b      	ldr	r3, [pc, #364]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80087d0:	2250      	movs	r2, #80	@ 0x50
 80087d2:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
					Bandwidths[bandwidth];
 80087d4:	4a5d      	ldr	r2, [pc, #372]	@ (800894c <RadioSetTxConfig+0x2b0>)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	18d3      	adds	r3, r2, r3
 80087da:	7819      	ldrb	r1, [r3, #0]
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
 80087dc:	4b57      	ldr	r3, [pc, #348]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80087de:	2251      	movs	r2, #81	@ 0x51
 80087e0:	5499      	strb	r1, [r3, r2]
			SX126x.ModulationParams.Params.LoRa.CodingRate =
 80087e2:	4b56      	ldr	r3, [pc, #344]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80087e4:	2224      	movs	r2, #36	@ 0x24
 80087e6:	2108      	movs	r1, #8
 80087e8:	1852      	adds	r2, r2, r1
 80087ea:	19d2      	adds	r2, r2, r7
 80087ec:	2152      	movs	r1, #82	@ 0x52
 80087ee:	7812      	ldrb	r2, [r2, #0]
 80087f0:	545a      	strb	r2, [r3, r1]
					(RadioLoRaCodingRates_t) coderate;

			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12)))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d105      	bne.n	8008804 <RadioSetTxConfig+0x168>
 80087f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fa:	2b0b      	cmp	r3, #11
 80087fc:	d008      	beq.n	8008810 <RadioSetTxConfig+0x174>
 80087fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008800:	2b0c      	cmp	r3, #12
 8008802:	d005      	beq.n	8008810 <RadioSetTxConfig+0x174>
					|| ((bandwidth == 1) && (datarate == 12))) {
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d107      	bne.n	800881a <RadioSetTxConfig+0x17e>
 800880a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880c:	2b0c      	cmp	r3, #12
 800880e:	d104      	bne.n	800881a <RadioSetTxConfig+0x17e>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008810:	4b4a      	ldr	r3, [pc, #296]	@ (800893c <RadioSetTxConfig+0x2a0>)
 8008812:	2253      	movs	r2, #83	@ 0x53
 8008814:	2101      	movs	r1, #1
 8008816:	5499      	strb	r1, [r3, r2]
 8008818:	e003      	b.n	8008822 <RadioSetTxConfig+0x186>
			}
			else {
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800881a:	4b48      	ldr	r3, [pc, #288]	@ (800893c <RadioSetTxConfig+0x2a0>)
 800881c:	2253      	movs	r2, #83	@ 0x53
 800881e:	2100      	movs	r1, #0
 8008820:	5499      	strb	r1, [r3, r2]
			}

			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008822:	4b46      	ldr	r3, [pc, #280]	@ (800893c <RadioSetTxConfig+0x2a0>)
 8008824:	2201      	movs	r2, #1
 8008826:	761a      	strb	r2, [r3, #24]

			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5)
 8008828:	4b44      	ldr	r3, [pc, #272]	@ (800893c <RadioSetTxConfig+0x2a0>)
 800882a:	2250      	movs	r2, #80	@ 0x50
 800882c:	5c9b      	ldrb	r3, [r3, r2]
 800882e:	2b05      	cmp	r3, #5
 8008830:	d004      	beq.n	800883c <RadioSetTxConfig+0x1a0>
					|| (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 8008832:	4b42      	ldr	r3, [pc, #264]	@ (800893c <RadioSetTxConfig+0x2a0>)
 8008834:	2250      	movs	r2, #80	@ 0x50
 8008836:	5c9b      	ldrb	r3, [r3, r2]
 8008838:	2b06      	cmp	r3, #6
 800883a:	d112      	bne.n	8008862 <RadioSetTxConfig+0x1c6>
							== LORA_SF6)) {
				if (preambleLen < 12) {
 800883c:	2328      	movs	r3, #40	@ 0x28
 800883e:	2208      	movs	r2, #8
 8008840:	189b      	adds	r3, r3, r2
 8008842:	19db      	adds	r3, r3, r7
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	2b0b      	cmp	r3, #11
 8008848:	d803      	bhi.n	8008852 <RadioSetTxConfig+0x1b6>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800884a:	4b3c      	ldr	r3, [pc, #240]	@ (800893c <RadioSetTxConfig+0x2a0>)
 800884c:	220c      	movs	r2, #12
 800884e:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12) {
 8008850:	e00e      	b.n	8008870 <RadioSetTxConfig+0x1d4>
				}
				else {
					SX126x.PacketParams.Params.LoRa.PreambleLength =
 8008852:	4b3a      	ldr	r3, [pc, #232]	@ (800893c <RadioSetTxConfig+0x2a0>)
 8008854:	2228      	movs	r2, #40	@ 0x28
 8008856:	2108      	movs	r1, #8
 8008858:	1852      	adds	r2, r2, r1
 800885a:	19d2      	adds	r2, r2, r7
 800885c:	8812      	ldrh	r2, [r2, #0]
 800885e:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12) {
 8008860:	e006      	b.n	8008870 <RadioSetTxConfig+0x1d4>
							preambleLen;
				}
			}
			else {
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008862:	4b36      	ldr	r3, [pc, #216]	@ (800893c <RadioSetTxConfig+0x2a0>)
 8008864:	2228      	movs	r2, #40	@ 0x28
 8008866:	2108      	movs	r1, #8
 8008868:	1852      	adds	r2, r2, r1
 800886a:	19d2      	adds	r2, r2, r7
 800886c:	8812      	ldrh	r2, [r2, #0]
 800886e:	849a      	strh	r2, [r3, #36]	@ 0x24
			}

			SX126x.PacketParams.Params.LoRa.HeaderType =
					(RadioLoRaPacketLengthsMode_t) fixLen;
 8008870:	232c      	movs	r3, #44	@ 0x2c
 8008872:	2008      	movs	r0, #8
 8008874:	181b      	adds	r3, r3, r0
 8008876:	19db      	adds	r3, r3, r7
 8008878:	7819      	ldrb	r1, [r3, #0]
			SX126x.PacketParams.Params.LoRa.HeaderType =
 800887a:	4b30      	ldr	r3, [pc, #192]	@ (800893c <RadioSetTxConfig+0x2a0>)
 800887c:	2226      	movs	r2, #38	@ 0x26
 800887e:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008880:	4b33      	ldr	r3, [pc, #204]	@ (8008950 <RadioSetTxConfig+0x2b4>)
 8008882:	7819      	ldrb	r1, [r3, #0]
 8008884:	4b2d      	ldr	r3, [pc, #180]	@ (800893c <RadioSetTxConfig+0x2a0>)
 8008886:	2227      	movs	r2, #39	@ 0x27
 8008888:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.CrcMode =
					(RadioLoRaCrcModes_t) crcOn;
 800888a:	2330      	movs	r3, #48	@ 0x30
 800888c:	181b      	adds	r3, r3, r0
 800888e:	19db      	adds	r3, r3, r7
 8008890:	7819      	ldrb	r1, [r3, #0]
			SX126x.PacketParams.Params.LoRa.CrcMode =
 8008892:	4b2a      	ldr	r3, [pc, #168]	@ (800893c <RadioSetTxConfig+0x2a0>)
 8008894:	2228      	movs	r2, #40	@ 0x28
 8008896:	5499      	strb	r1, [r3, r2]
			SX126x.PacketParams.Params.LoRa.InvertIQ =
					(RadioLoRaIQModes_t) iqInverted;
 8008898:	233c      	movs	r3, #60	@ 0x3c
 800889a:	181b      	adds	r3, r3, r0
 800889c:	19db      	adds	r3, r3, r7
 800889e:	7819      	ldrb	r1, [r3, #0]
			SX126x.PacketParams.Params.LoRa.InvertIQ =
 80088a0:	4b26      	ldr	r3, [pc, #152]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80088a2:	2229      	movs	r2, #41	@ 0x29
 80088a4:	5499      	strb	r1, [r3, r2]

			RadioStandby();
 80088a6:	f000 fa1e 	bl	8008ce6 <RadioStandby>
			RadioSetModem(
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 80088aa:	4b24      	ldr	r3, [pc, #144]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80088ac:	2240      	movs	r2, #64	@ 0x40
 80088ae:	5c9b      	ldrb	r3, [r3, r2]
			RadioSetModem(
 80088b0:	1e5a      	subs	r2, r3, #1
 80088b2:	4193      	sbcs	r3, r2
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	0018      	movs	r0, r3
 80088b8:	f7ff fc92 	bl	80081e0 <RadioSetModem>
							MODEM_FSK : MODEM_LORA);
			SX126xSetModulationParams(&SX126x.ModulationParams);
 80088bc:	4b20      	ldr	r3, [pc, #128]	@ (8008940 <RadioSetTxConfig+0x2a4>)
 80088be:	0018      	movs	r0, r3
 80088c0:	f001 f984 	bl	8009bcc <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 80088c4:	4b1f      	ldr	r3, [pc, #124]	@ (8008944 <RadioSetTxConfig+0x2a8>)
 80088c6:	0018      	movs	r0, r3
 80088c8:	f001 fa26 	bl	8009d18 <SX126xSetPacketParams>
		break;
 80088cc:	46c0      	nop			@ (mov r8, r8)
	}

	// WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see DS_SX1261-2_V1.2 datasheet chapter 15.1
	if ((modem == MODEM_LORA)
 80088ce:	230f      	movs	r3, #15
 80088d0:	18fb      	adds	r3, r7, r3
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d114      	bne.n	8008902 <RadioSetTxConfig+0x266>
			&& (SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500)) {
 80088d8:	4b18      	ldr	r3, [pc, #96]	@ (800893c <RadioSetTxConfig+0x2a0>)
 80088da:	2251      	movs	r2, #81	@ 0x51
 80088dc:	5c9b      	ldrb	r3, [r3, r2]
 80088de:	2b06      	cmp	r3, #6
 80088e0:	d10f      	bne.n	8008902 <RadioSetTxConfig+0x266>
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) & ~(1 << 2));
 80088e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008954 <RadioSetTxConfig+0x2b8>)
 80088e4:	0018      	movs	r0, r3
 80088e6:	f001 fd85 	bl	800a3f4 <SX126xReadRegister>
 80088ea:	0003      	movs	r3, r0
 80088ec:	001a      	movs	r2, r3
 80088ee:	2304      	movs	r3, #4
 80088f0:	439a      	bics	r2, r3
 80088f2:	0013      	movs	r3, r2
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	4a17      	ldr	r2, [pc, #92]	@ (8008954 <RadioSetTxConfig+0x2b8>)
 80088f8:	0019      	movs	r1, r3
 80088fa:	0010      	movs	r0, r2
 80088fc:	f001 fd20 	bl	800a340 <SX126xWriteRegister>
 8008900:	e00d      	b.n	800891e <RadioSetTxConfig+0x282>
	}
	else {
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) | (1 << 2));
 8008902:	4b14      	ldr	r3, [pc, #80]	@ (8008954 <RadioSetTxConfig+0x2b8>)
 8008904:	0018      	movs	r0, r3
 8008906:	f001 fd75 	bl	800a3f4 <SX126xReadRegister>
 800890a:	0003      	movs	r3, r0
 800890c:	001a      	movs	r2, r3
 800890e:	2304      	movs	r3, #4
 8008910:	4313      	orrs	r3, r2
 8008912:	b2db      	uxtb	r3, r3
 8008914:	4a0f      	ldr	r2, [pc, #60]	@ (8008954 <RadioSetTxConfig+0x2b8>)
 8008916:	0019      	movs	r1, r3
 8008918:	0010      	movs	r0, r2
 800891a:	f001 fd11 	bl	800a340 <SX126xWriteRegister>
	}
	// WORKAROUND END
	SX126xSetRfTxPower(power);
 800891e:	230e      	movs	r3, #14
 8008920:	18fb      	adds	r3, r7, r3
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	b25b      	sxtb	r3, r3
 8008926:	0018      	movs	r0, r3
 8008928:	f001 fdfe 	bl	800a528 <SX126xSetRfTxPower>
	TxTimeout = timeout;
 800892c:	4b0a      	ldr	r3, [pc, #40]	@ (8008958 <RadioSetTxConfig+0x2bc>)
 800892e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008930:	601a      	str	r2, [r3, #0]
}
 8008932:	46c0      	nop			@ (mov r8, r8)
 8008934:	46bd      	mov	sp, r7
 8008936:	b007      	add	sp, #28
 8008938:	bd90      	pop	{r4, r7, pc}
 800893a:	46c0      	nop			@ (mov r8, r8)
 800893c:	20000474 	.word	0x20000474
 8008940:	200004b4 	.word	0x200004b4
 8008944:	2000048c 	.word	0x2000048c
 8008948:	000001ff 	.word	0x000001ff
 800894c:	0800b950 	.word	0x0800b950
 8008950:	20000158 	.word	0x20000158
 8008954:	00000889 	.word	0x00000889
 8008958:	20000348 	.word	0x20000348

0800895c <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency(uint32_t frequency) {
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	return true;
 8008964:	2301      	movs	r3, #1
}
 8008966:	0018      	movs	r0, r3
 8008968:	46bd      	mov	sp, r7
 800896a:	b002      	add	sp, #8
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir(RadioModems_t modem, uint8_t pktLen) {
 8008970:	b5b0      	push	{r4, r5, r7, lr}
 8008972:	b090      	sub	sp, #64	@ 0x40
 8008974:	af00      	add	r7, sp, #0
 8008976:	0002      	movs	r2, r0
 8008978:	1dfb      	adds	r3, r7, #7
 800897a:	701a      	strb	r2, [r3, #0]
 800897c:	1dbb      	adds	r3, r7, #6
 800897e:	1c0a      	adds	r2, r1, #0
 8008980:	701a      	strb	r2, [r3, #0]
	uint32_t airTime = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch (modem) {
 8008986:	1dfb      	adds	r3, r7, #7
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <RadioTimeOnAir+0x26>
 800898e:	2b01      	cmp	r3, #1
 8008990:	d100      	bne.n	8008994 <RadioTimeOnAir+0x24>
 8008992:	e093      	b.n	8008abc <RadioTimeOnAir+0x14c>
 8008994:	e148      	b.n	8008c28 <RadioTimeOnAir+0x2b8>
		case MODEM_FSK: {
			// CRC Length calculation, catering for each type of CRC Calc offered in libary
			uint8_t crcLength =
 8008996:	203b      	movs	r0, #59	@ 0x3b
 8008998:	183b      	adds	r3, r7, r0
 800899a:	4aa6      	ldr	r2, [pc, #664]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 800899c:	2121      	movs	r1, #33	@ 0x21
 800899e:	5c52      	ldrb	r2, [r2, r1]
 80089a0:	701a      	strb	r2, [r3, #0]
					(uint8_t) (SX126x.PacketParams.Params.Gfsk.CrcLength);
			if ((crcLength == RADIO_CRC_2_BYTES)
 80089a2:	0002      	movs	r2, r0
 80089a4:	18bb      	adds	r3, r7, r2
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d00b      	beq.n	80089c4 <RadioTimeOnAir+0x54>
					|| (crcLength == RADIO_CRC_2_BYTES_INV)
 80089ac:	18bb      	adds	r3, r7, r2
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b06      	cmp	r3, #6
 80089b2:	d007      	beq.n	80089c4 <RadioTimeOnAir+0x54>
					|| (crcLength == RADIO_CRC_2_BYTES_IBM)
 80089b4:	18bb      	adds	r3, r7, r2
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2bf1      	cmp	r3, #241	@ 0xf1
 80089ba:	d003      	beq.n	80089c4 <RadioTimeOnAir+0x54>
					|| (crcLength == RADIO_CRC_2_BYTES_CCIT)) {
 80089bc:	18bb      	adds	r3, r7, r2
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2bf2      	cmp	r3, #242	@ 0xf2
 80089c2:	d104      	bne.n	80089ce <RadioTimeOnAir+0x5e>
				crcLength = 2;
 80089c4:	233b      	movs	r3, #59	@ 0x3b
 80089c6:	18fb      	adds	r3, r7, r3
 80089c8:	2202      	movs	r2, #2
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	e011      	b.n	80089f2 <RadioTimeOnAir+0x82>
			}
			else if ((crcLength == RADIO_CRC_1_BYTES)
 80089ce:	223b      	movs	r2, #59	@ 0x3b
 80089d0:	18bb      	adds	r3, r7, r2
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <RadioTimeOnAir+0x70>
					|| (crcLength == RADIO_CRC_1_BYTES_INV)) {
 80089d8:	18bb      	adds	r3, r7, r2
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d104      	bne.n	80089ea <RadioTimeOnAir+0x7a>
				crcLength = 1;
 80089e0:	233b      	movs	r3, #59	@ 0x3b
 80089e2:	18fb      	adds	r3, r7, r3
 80089e4:	2201      	movs	r2, #1
 80089e6:	701a      	strb	r2, [r3, #0]
 80089e8:	e003      	b.n	80089f2 <RadioTimeOnAir+0x82>
			}
			else {
				crcLength = 0;
 80089ea:	233b      	movs	r3, #59	@ 0x3b
 80089ec:	18fb      	adds	r3, r7, r3
 80089ee:	2200      	movs	r2, #0
 80089f0:	701a      	strb	r2, [r3, #0]
			}
			airTime =
					rint(
							(8
									* (SX126x.PacketParams.Params.Gfsk.PreambleLength
 80089f2:	4b90      	ldr	r3, [pc, #576]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 80089f4:	8b5b      	ldrh	r3, [r3, #26]
 80089f6:	001a      	movs	r2, r3
											+ (SX126x.PacketParams.Params.Gfsk.SyncWordLength
 80089f8:	4b8e      	ldr	r3, [pc, #568]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 80089fa:	7f5b      	ldrb	r3, [r3, #29]
													>> 3)
 80089fc:	08db      	lsrs	r3, r3, #3
 80089fe:	b2db      	uxtb	r3, r3
											+ (SX126x.PacketParams.Params.Gfsk.SyncWordLength
 8008a00:	18d3      	adds	r3, r2, r3
											+ ((SX126x.PacketParams.Params.Gfsk.HeaderType
 8008a02:	0018      	movs	r0, r3
 8008a04:	f7f9 fc98 	bl	8002338 <__aeabi_i2d>
 8008a08:	0002      	movs	r2, r0
 8008a0a:	000b      	movs	r3, r1
 8008a0c:	4989      	ldr	r1, [pc, #548]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 8008a0e:	7fc9      	ldrb	r1, [r1, #31]
													== RADIO_PACKET_FIXED_LENGTH) ?
													0.0 : 1.0) + pktLen
 8008a10:	2900      	cmp	r1, #0
 8008a12:	d102      	bne.n	8008a1a <RadioTimeOnAir+0xaa>
 8008a14:	2000      	movs	r0, #0
 8008a16:	2100      	movs	r1, #0
 8008a18:	e001      	b.n	8008a1e <RadioTimeOnAir+0xae>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	4986      	ldr	r1, [pc, #536]	@ (8008c38 <RadioTimeOnAir+0x2c8>)
											+ ((SX126x.PacketParams.Params.Gfsk.HeaderType
 8008a1e:	f7f7 fe43 	bl	80006a8 <__aeabi_dadd>
 8008a22:	0002      	movs	r2, r0
 8008a24:	000b      	movs	r3, r1
 8008a26:	0014      	movs	r4, r2
 8008a28:	001d      	movs	r5, r3
													0.0 : 1.0) + pktLen
 8008a2a:	1dbb      	adds	r3, r7, #6
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	0018      	movs	r0, r3
 8008a30:	f7f9 fc82 	bl	8002338 <__aeabi_i2d>
 8008a34:	0002      	movs	r2, r0
 8008a36:	000b      	movs	r3, r1
 8008a38:	0020      	movs	r0, r4
 8008a3a:	0029      	movs	r1, r5
 8008a3c:	f7f7 fe34 	bl	80006a8 <__aeabi_dadd>
 8008a40:	0002      	movs	r2, r0
 8008a42:	000b      	movs	r3, r1
 8008a44:	0014      	movs	r4, r2
 8008a46:	001d      	movs	r5, r3
											+ (crcLength))
 8008a48:	233b      	movs	r3, #59	@ 0x3b
 8008a4a:	18fb      	adds	r3, r7, r3
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	0018      	movs	r0, r3
 8008a50:	f7f9 fc72 	bl	8002338 <__aeabi_i2d>
 8008a54:	0002      	movs	r2, r0
 8008a56:	000b      	movs	r3, r1
 8008a58:	0020      	movs	r0, r4
 8008a5a:	0029      	movs	r1, r5
 8008a5c:	f7f7 fe24 	bl	80006a8 <__aeabi_dadd>
 8008a60:	0002      	movs	r2, r0
 8008a62:	000b      	movs	r3, r1
 8008a64:	0010      	movs	r0, r2
 8008a66:	0019      	movs	r1, r3
									* (SX126x.PacketParams.Params.Gfsk.PreambleLength
 8008a68:	2200      	movs	r2, #0
 8008a6a:	4b74      	ldr	r3, [pc, #464]	@ (8008c3c <RadioTimeOnAir+0x2cc>)
 8008a6c:	f7f8 fdc4 	bl	80015f8 <__aeabi_dmul>
 8008a70:	0002      	movs	r2, r0
 8008a72:	000b      	movs	r3, r1
 8008a74:	0014      	movs	r4, r2
 8008a76:	001d      	movs	r5, r3
									/ SX126x.ModulationParams.Params.Gfsk.BitRate)
 8008a78:	4b6e      	ldr	r3, [pc, #440]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 8008a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f7f9 fc89 	bl	8002394 <__aeabi_ui2d>
 8008a82:	0002      	movs	r2, r0
 8008a84:	000b      	movs	r3, r1
 8008a86:	0020      	movs	r0, r4
 8008a88:	0029      	movs	r1, r5
 8008a8a:	f7f8 f971 	bl	8000d70 <__aeabi_ddiv>
 8008a8e:	0002      	movs	r2, r0
 8008a90:	000b      	movs	r3, r1
 8008a92:	0010      	movs	r0, r2
 8008a94:	0019      	movs	r1, r3
					rint(
 8008a96:	2200      	movs	r2, #0
 8008a98:	4b69      	ldr	r3, [pc, #420]	@ (8008c40 <RadioTimeOnAir+0x2d0>)
 8008a9a:	f7f8 fdad 	bl	80015f8 <__aeabi_dmul>
 8008a9e:	0002      	movs	r2, r0
 8008aa0:	000b      	movs	r3, r1
 8008aa2:	0010      	movs	r0, r2
 8008aa4:	0019      	movs	r1, r3
 8008aa6:	f002 fb25 	bl	800b0f4 <rint>
 8008aaa:	0002      	movs	r2, r0
 8008aac:	000b      	movs	r3, r1
			airTime =
 8008aae:	0010      	movs	r0, r2
 8008ab0:	0019      	movs	r1, r3
 8008ab2:	f7f7 fd0f 	bl	80004d4 <__aeabi_d2uiz>
 8008ab6:	0003      	movs	r3, r0
 8008ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
									* 1e3);
		}
		break;
 8008aba:	e0b5      	b.n	8008c28 <RadioTimeOnAir+0x2b8>
		case MODEM_LORA: {
			double ts =
					RadioLoRaSymbTime[SX126x.ModulationParams.Params.LoRa.Bandwidth
 8008abc:	4b5d      	ldr	r3, [pc, #372]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 8008abe:	2251      	movs	r2, #81	@ 0x51
 8008ac0:	5c9b      	ldrb	r3, [r3, r2]
							- 4][12
 8008ac2:	1f1a      	subs	r2, r3, #4
							- SX126x.ModulationParams.Params.LoRa.SpreadingFactor];
 8008ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 8008ac6:	2150      	movs	r1, #80	@ 0x50
 8008ac8:	5c5b      	ldrb	r3, [r3, r1]
 8008aca:	0019      	movs	r1, r3
 8008acc:	230c      	movs	r3, #12
 8008ace:	1a58      	subs	r0, r3, r1
			double ts =
 8008ad0:	495c      	ldr	r1, [pc, #368]	@ (8008c44 <RadioTimeOnAir+0x2d4>)
 8008ad2:	0013      	movs	r3, r2
 8008ad4:	005b      	lsls	r3, r3, #1
 8008ad6:	189b      	adds	r3, r3, r2
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	181b      	adds	r3, r3, r0
 8008adc:	00db      	lsls	r3, r3, #3
 8008ade:	18cb      	adds	r3, r1, r3
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ae6:	637b      	str	r3, [r7, #52]	@ 0x34
			// time of preamble
			double tPreamble = (SX126x.PacketParams.Params.LoRa.PreambleLength
 8008ae8:	4b52      	ldr	r3, [pc, #328]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 8008aea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
					+ 4.25) * ts;
 8008aec:	0018      	movs	r0, r3
 8008aee:	f7f9 fc23 	bl	8002338 <__aeabi_i2d>
 8008af2:	2200      	movs	r2, #0
 8008af4:	4b54      	ldr	r3, [pc, #336]	@ (8008c48 <RadioTimeOnAir+0x2d8>)
 8008af6:	f7f7 fdd7 	bl	80006a8 <__aeabi_dadd>
 8008afa:	0002      	movs	r2, r0
 8008afc:	000b      	movs	r3, r1
			double tPreamble = (SX126x.PacketParams.Params.LoRa.PreambleLength
 8008afe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b00:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008b02:	f7f8 fd79 	bl	80015f8 <__aeabi_dmul>
 8008b06:	0002      	movs	r2, r0
 8008b08:	000b      	movs	r3, r1
 8008b0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			// Symbol length of payload and time
			double tmp =
					ceil(
							(8 * pktLen
									- 4
 8008b0e:	1dbb      	adds	r3, r7, #6
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	005b      	lsls	r3, r3, #1
											* SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 8008b14:	4a47      	ldr	r2, [pc, #284]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 8008b16:	2150      	movs	r1, #80	@ 0x50
 8008b18:	5c52      	ldrb	r2, [r2, r1]
									- 4
 8008b1a:	1a9b      	subs	r3, r3, r2
									+ 28
 8008b1c:	1dda      	adds	r2, r3, #7
									+ 16
											* SX126x.PacketParams.Params.LoRa.CrcMode
 8008b1e:	4b45      	ldr	r3, [pc, #276]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 8008b20:	2128      	movs	r1, #40	@ 0x28
 8008b22:	5c5b      	ldrb	r3, [r3, r1]
									+ 16
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	18d3      	adds	r3, r2, r3
 8008b28:	009a      	lsls	r2, r3, #2
									- ((SX126x.PacketParams.Params.LoRa.HeaderType
 8008b2a:	4b42      	ldr	r3, [pc, #264]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 8008b2c:	2126      	movs	r1, #38	@ 0x26
 8008b2e:	5c5b      	ldrb	r3, [r3, r1]
											== LORA_PACKET_FIXED_LENGTH) ?
											20 : 0))
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <RadioTimeOnAir+0x1c8>
 8008b34:	2314      	movs	r3, #20
 8008b36:	e000      	b.n	8008b3a <RadioTimeOnAir+0x1ca>
 8008b38:	2300      	movs	r3, #0
									- ((SX126x.PacketParams.Params.LoRa.HeaderType
 8008b3a:	1ad3      	subs	r3, r2, r3
					ceil(
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	f7f9 fbfb 	bl	8002338 <__aeabi_i2d>
 8008b42:	0004      	movs	r4, r0
 8008b44:	000d      	movs	r5, r1
									/ (double) (4
											* (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 8008b46:	4b3b      	ldr	r3, [pc, #236]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 8008b48:	2250      	movs	r2, #80	@ 0x50
 8008b4a:	5c9b      	ldrb	r3, [r3, r2]
 8008b4c:	0019      	movs	r1, r3
													- ((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize
 8008b4e:	4b39      	ldr	r3, [pc, #228]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 8008b50:	2253      	movs	r2, #83	@ 0x53
 8008b52:	5c9b      	ldrb	r3, [r3, r2]
															> 0) ? 2 : 0))))
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <RadioTimeOnAir+0x1ec>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e000      	b.n	8008b5e <RadioTimeOnAir+0x1ee>
 8008b5c:	2300      	movs	r3, #0
													- ((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize
 8008b5e:	1acb      	subs	r3, r1, r3
											* (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 8008b60:	009b      	lsls	r3, r3, #2
									/ (double) (4
 8008b62:	0018      	movs	r0, r3
 8008b64:	f7f9 fbe8 	bl	8002338 <__aeabi_i2d>
 8008b68:	0002      	movs	r2, r0
 8008b6a:	000b      	movs	r3, r1
					ceil(
 8008b6c:	0020      	movs	r0, r4
 8008b6e:	0029      	movs	r1, r5
 8008b70:	f7f8 f8fe 	bl	8000d70 <__aeabi_ddiv>
 8008b74:	0002      	movs	r2, r0
 8008b76:	000b      	movs	r3, r1
 8008b78:	0010      	movs	r0, r2
 8008b7a:	0019      	movs	r1, r3
 8008b7c:	f002 f9c6 	bl	800af0c <ceil>
 8008b80:	0004      	movs	r4, r0
 8008b82:	000d      	movs	r5, r1
							* ((SX126x.ModulationParams.Params.LoRa.CodingRate
 8008b84:	4b2b      	ldr	r3, [pc, #172]	@ (8008c34 <RadioTimeOnAir+0x2c4>)
 8008b86:	2252      	movs	r2, #82	@ 0x52
 8008b88:	5c9b      	ldrb	r3, [r3, r2]
									% 4) + 4);
 8008b8a:	001a      	movs	r2, r3
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	4013      	ands	r3, r2
 8008b90:	3304      	adds	r3, #4
							* ((SX126x.ModulationParams.Params.LoRa.CodingRate
 8008b92:	0018      	movs	r0, r3
 8008b94:	f7f9 fbd0 	bl	8002338 <__aeabi_i2d>
 8008b98:	0002      	movs	r2, r0
 8008b9a:	000b      	movs	r3, r1
			double tmp =
 8008b9c:	0020      	movs	r0, r4
 8008b9e:	0029      	movs	r1, r5
 8008ba0:	f7f8 fd2a 	bl	80015f8 <__aeabi_dmul>
 8008ba4:	0002      	movs	r2, r0
 8008ba6:	000b      	movs	r3, r1
 8008ba8:	623a      	str	r2, [r7, #32]
 8008baa:	627b      	str	r3, [r7, #36]	@ 0x24
			double nPayload = 8 + ((tmp > 0) ? tmp : 0);
 8008bac:	2200      	movs	r2, #0
 8008bae:	2300      	movs	r3, #0
 8008bb0:	6a38      	ldr	r0, [r7, #32]
 8008bb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008bb4:	f7f7 fc5a 	bl	800046c <__aeabi_dcmpgt>
 8008bb8:	1e03      	subs	r3, r0, #0
 8008bba:	d002      	beq.n	8008bc2 <RadioTimeOnAir+0x252>
 8008bbc:	6a38      	ldr	r0, [r7, #32]
 8008bbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008bc0:	e001      	b.n	8008bc6 <RadioTimeOnAir+0x256>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c3c <RadioTimeOnAir+0x2cc>)
 8008bca:	f7f7 fd6d 	bl	80006a8 <__aeabi_dadd>
 8008bce:	0002      	movs	r2, r0
 8008bd0:	000b      	movs	r3, r1
 8008bd2:	61ba      	str	r2, [r7, #24]
 8008bd4:	61fb      	str	r3, [r7, #28]
			double tPayload = nPayload * ts;
 8008bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bda:	69b8      	ldr	r0, [r7, #24]
 8008bdc:	69f9      	ldr	r1, [r7, #28]
 8008bde:	f7f8 fd0b 	bl	80015f8 <__aeabi_dmul>
 8008be2:	0002      	movs	r2, r0
 8008be4:	000b      	movs	r3, r1
 8008be6:	613a      	str	r2, [r7, #16]
 8008be8:	617b      	str	r3, [r7, #20]
			// Time on air
			double tOnAir = tPreamble + tPayload;
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bf2:	f7f7 fd59 	bl	80006a8 <__aeabi_dadd>
 8008bf6:	0002      	movs	r2, r0
 8008bf8:	000b      	movs	r3, r1
 8008bfa:	60ba      	str	r2, [r7, #8]
 8008bfc:	60fb      	str	r3, [r7, #12]
			// return milli seconds
			airTime = floor(tOnAir + 0.999);
 8008bfe:	4a13      	ldr	r2, [pc, #76]	@ (8008c4c <RadioTimeOnAir+0x2dc>)
 8008c00:	4b13      	ldr	r3, [pc, #76]	@ (8008c50 <RadioTimeOnAir+0x2e0>)
 8008c02:	68b8      	ldr	r0, [r7, #8]
 8008c04:	68f9      	ldr	r1, [r7, #12]
 8008c06:	f7f7 fd4f 	bl	80006a8 <__aeabi_dadd>
 8008c0a:	0002      	movs	r2, r0
 8008c0c:	000b      	movs	r3, r1
 8008c0e:	0010      	movs	r0, r2
 8008c10:	0019      	movs	r1, r3
 8008c12:	f002 f9f3 	bl	800affc <floor>
 8008c16:	0002      	movs	r2, r0
 8008c18:	000b      	movs	r3, r1
 8008c1a:	0010      	movs	r0, r2
 8008c1c:	0019      	movs	r1, r3
 8008c1e:	f7f7 fc59 	bl	80004d4 <__aeabi_d2uiz>
 8008c22:	0003      	movs	r3, r0
 8008c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		break;
 8008c26:	46c0      	nop			@ (mov r8, r8)
	}

	return airTime;
 8008c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	b010      	add	sp, #64	@ 0x40
 8008c30:	bdb0      	pop	{r4, r5, r7, pc}
 8008c32:	46c0      	nop			@ (mov r8, r8)
 8008c34:	20000474 	.word	0x20000474
 8008c38:	3ff00000 	.word	0x3ff00000
 8008c3c:	40200000 	.word	0x40200000
 8008c40:	408f4000 	.word	0x408f4000
 8008c44:	200000c8 	.word	0x200000c8
 8008c48:	40110000 	.word	0x40110000
 8008c4c:	d916872b 	.word	0xd916872b
 8008c50:	3feff7ce 	.word	0x3feff7ce

08008c54 <RadioSend>:
 *        the radio in transmission
 *
 * \param buffer     Buffer pointer
 * \param size       Buffer size
 */
void RadioSend(uint8_t *buffer, uint8_t size) {
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	000a      	movs	r2, r1
 8008c5e:	1cfb      	adds	r3, r7, #3
 8008c60:	701a      	strb	r2, [r3, #0]
	SX126xSetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8008c62:	4912      	ldr	r1, [pc, #72]	@ (8008cac <RadioSend+0x58>)
 8008c64:	4811      	ldr	r0, [pc, #68]	@ (8008cac <RadioSend+0x58>)
 8008c66:	2300      	movs	r3, #0
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f000 fe59 	bl	8009920 <SX126xSetDioIrqParams>
			IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);

	if (SX126xGetPacketType() == PACKET_TYPE_LORA) {
 8008c6e:	f000 ff29 	bl	8009ac4 <SX126xGetPacketType>
 8008c72:	0003      	movs	r3, r0
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d105      	bne.n	8008c84 <RadioSend+0x30>
		SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 8008c78:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb0 <RadioSend+0x5c>)
 8008c7a:	1cfa      	adds	r2, r7, #3
 8008c7c:	2127      	movs	r1, #39	@ 0x27
 8008c7e:	7812      	ldrb	r2, [r2, #0]
 8008c80:	545a      	strb	r2, [r3, r1]
 8008c82:	e004      	b.n	8008c8e <RadioSend+0x3a>
	}
	else {
		SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8008c84:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb0 <RadioSend+0x5c>)
 8008c86:	1cfa      	adds	r2, r7, #3
 8008c88:	2120      	movs	r1, #32
 8008c8a:	7812      	ldrb	r2, [r2, #0]
 8008c8c:	545a      	strb	r2, [r3, r1]
	}
	SX126xSetPacketParams(&SX126x.PacketParams);
 8008c8e:	4b09      	ldr	r3, [pc, #36]	@ (8008cb4 <RadioSend+0x60>)
 8008c90:	0018      	movs	r0, r3
 8008c92:	f001 f841 	bl	8009d18 <SX126xSetPacketParams>

	SX126xSendPayload(buffer, size, 0);
 8008c96:	1cfb      	adds	r3, r7, #3
 8008c98:	7819      	ldrb	r1, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	0018      	movs	r0, r3
 8008ca0:	f000 fbcd 	bl	800943e <SX126xSendPayload>
//	TimerSetValue(&TxTimeoutTimer, TxTimeout);
//	TimerStart(&TxTimeoutTimer);
}
 8008ca4:	46c0      	nop			@ (mov r8, r8)
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	b002      	add	sp, #8
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	00000201 	.word	0x00000201
 8008cb0:	20000474 	.word	0x20000474
 8008cb4:	2000048c 	.word	0x2000048c

08008cb8 <RadioSleep>:

void RadioSleep(void) {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
	SleepParams_t params = { 0 };
 8008cbe:	1d3b      	adds	r3, r7, #4
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	701a      	strb	r2, [r3, #0]

	params.Fields.WarmStart = 1;
 8008cc4:	1d3b      	adds	r3, r7, #4
 8008cc6:	781a      	ldrb	r2, [r3, #0]
 8008cc8:	2104      	movs	r1, #4
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	701a      	strb	r2, [r3, #0]
	SX126xSetSleep(params);
 8008cce:	1d3b      	adds	r3, r7, #4
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	1c18      	adds	r0, r3, #0
 8008cd4:	f000 fc8a 	bl	80095ec <SX126xSetSleep>

	HAL_Delay(2);
 8008cd8:	2002      	movs	r0, #2
 8008cda:	f7fa fa29 	bl	8003130 <HAL_Delay>
}
 8008cde:	46c0      	nop			@ (mov r8, r8)
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	b002      	add	sp, #8
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <RadioStandby>:

void RadioStandby(void) {
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	af00      	add	r7, sp, #0
	SX126xSetStandby(STDBY_RC);
 8008cea:	2000      	movs	r0, #0
 8008cec:	f000 fc92 	bl	8009614 <SX126xSetStandby>
}
 8008cf0:	46c0      	nop			@ (mov r8, r8)
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <RadioRx>:

void RadioRx(uint32_t timeout) {
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	SX126xSetDioIrqParams(
 8008d00:	490c      	ldr	r1, [pc, #48]	@ (8008d34 <RadioRx+0x3c>)
 8008d02:	480c      	ldr	r0, [pc, #48]	@ (8008d34 <RadioRx+0x3c>)
 8008d04:	2300      	movs	r3, #0
 8008d06:	2200      	movs	r2, #0
 8008d08:	f000 fe0a 	bl	8009920 <SX126xSetDioIrqParams>

	if (timeout != 0) {
//		TimerSetValue(&RxTimeoutTimer, timeout);
//		TimerStart(&RxTimeoutTimer);
	}
	if (RxContinuous == true) {
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d38 <RadioRx+0x40>)
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <RadioRx+0x26>
		SX126xSetRx(0xFFFFFF); // Rx Continuous
 8008d14:	4b09      	ldr	r3, [pc, #36]	@ (8008d3c <RadioRx+0x44>)
 8008d16:	0018      	movs	r0, r3
 8008d18:	f000 fcba 	bl	8009690 <SX126xSetRx>
	}
	else {
		SX126xSetRx(RxTimeout << 6);
	}
}
 8008d1c:	e005      	b.n	8008d2a <RadioRx+0x32>
		SX126xSetRx(RxTimeout << 6);
 8008d1e:	4b08      	ldr	r3, [pc, #32]	@ (8008d40 <RadioRx+0x48>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	019b      	lsls	r3, r3, #6
 8008d24:	0018      	movs	r0, r3
 8008d26:	f000 fcb3 	bl	8009690 <SX126xSetRx>
}
 8008d2a:	46c0      	nop			@ (mov r8, r8)
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	b002      	add	sp, #8
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	46c0      	nop			@ (mov r8, r8)
 8008d34:	00000262 	.word	0x00000262
 8008d38:	20000350 	.word	0x20000350
 8008d3c:	00ffffff 	.word	0x00ffffff
 8008d40:	2000034c 	.word	0x2000034c

08008d44 <RadioRxBoosted>:

void RadioRxBoosted(uint32_t timeout) {
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
	SX126xSetDioIrqParams(
 8008d4c:	490c      	ldr	r1, [pc, #48]	@ (8008d80 <RadioRxBoosted+0x3c>)
 8008d4e:	480c      	ldr	r0, [pc, #48]	@ (8008d80 <RadioRxBoosted+0x3c>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	2200      	movs	r2, #0
 8008d54:	f000 fde4 	bl	8009920 <SX126xSetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);

	if (RxContinuous == true) {
 8008d58:	4b0a      	ldr	r3, [pc, #40]	@ (8008d84 <RadioRxBoosted+0x40>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d004      	beq.n	8008d6a <RadioRxBoosted+0x26>
		// Even Continous mode is selected, put a timeout here
		if (timeout != 0) {
//			TimerSetValue(&RxTimeoutTimer, timeout);
//			TimerStart(&RxTimeoutTimer);
		}
		SX126xSetRxBoosted(0xFFFFFF); // Rx Continuous
 8008d60:	4b09      	ldr	r3, [pc, #36]	@ (8008d88 <RadioRxBoosted+0x44>)
 8008d62:	0018      	movs	r0, r3
 8008d64:	f000 fcbc 	bl	80096e0 <SX126xSetRxBoosted>
	}
	else {
		SX126xSetRxBoosted(RxTimeout << 6);
	}
}
 8008d68:	e005      	b.n	8008d76 <RadioRxBoosted+0x32>
		SX126xSetRxBoosted(RxTimeout << 6);
 8008d6a:	4b08      	ldr	r3, [pc, #32]	@ (8008d8c <RadioRxBoosted+0x48>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	019b      	lsls	r3, r3, #6
 8008d70:	0018      	movs	r0, r3
 8008d72:	f000 fcb5 	bl	80096e0 <SX126xSetRxBoosted>
}
 8008d76:	46c0      	nop			@ (mov r8, r8)
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	b002      	add	sp, #8
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	46c0      	nop			@ (mov r8, r8)
 8008d80:	00000262 	.word	0x00000262
 8008d84:	20000350 	.word	0x20000350
 8008d88:	00ffffff 	.word	0x00ffffff
 8008d8c:	2000034c 	.word	0x2000034c

08008d90 <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime) {
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
	SX126xSetDioIrqParams(IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT,
 8008d9a:	4908      	ldr	r1, [pc, #32]	@ (8008dbc <RadioSetRxDutyCycle+0x2c>)
 8008d9c:	4807      	ldr	r0, [pc, #28]	@ (8008dbc <RadioSetRxDutyCycle+0x2c>)
 8008d9e:	2300      	movs	r3, #0
 8008da0:	2200      	movs	r2, #0
 8008da2:	f000 fdbd 	bl	8009920 <SX126xSetDioIrqParams>
			IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SX126xSetRxDutyCycle(rxTime, sleepTime);
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	0011      	movs	r1, r2
 8008dac:	0018      	movs	r0, r3
 8008dae:	f000 fcbf 	bl	8009730 <SX126xSetRxDutyCycle>
}
 8008db2:	46c0      	nop			@ (mov r8, r8)
 8008db4:	46bd      	mov	sp, r7
 8008db6:	b002      	add	sp, #8
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	46c0      	nop			@ (mov r8, r8)
 8008dbc:	0000ffff 	.word	0x0000ffff

08008dc0 <RadioSetCadParams>:

void RadioSetCadParams(uint8_t cadSymbolNum, uint8_t cadDetPeak,
		uint8_t cadDetMin, uint8_t cadExitMode, uint32_t cadTimeout) {
 8008dc0:	b5b0      	push	{r4, r5, r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af02      	add	r7, sp, #8
 8008dc6:	0005      	movs	r5, r0
 8008dc8:	000c      	movs	r4, r1
 8008dca:	0010      	movs	r0, r2
 8008dcc:	0019      	movs	r1, r3
 8008dce:	1dfb      	adds	r3, r7, #7
 8008dd0:	1c2a      	adds	r2, r5, #0
 8008dd2:	701a      	strb	r2, [r3, #0]
 8008dd4:	1dbb      	adds	r3, r7, #6
 8008dd6:	1c22      	adds	r2, r4, #0
 8008dd8:	701a      	strb	r2, [r3, #0]
 8008dda:	1d7b      	adds	r3, r7, #5
 8008ddc:	1c02      	adds	r2, r0, #0
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	1d3b      	adds	r3, r7, #4
 8008de2:	1c0a      	adds	r2, r1, #0
 8008de4:	701a      	strb	r2, [r3, #0]
	SX126xSetCadParams((RadioLoRaCadSymbols_t) cadSymbolNum, cadDetPeak,
 8008de6:	1d3b      	adds	r3, r7, #4
 8008de8:	781c      	ldrb	r4, [r3, #0]
 8008dea:	1d7b      	adds	r3, r7, #5
 8008dec:	781a      	ldrb	r2, [r3, #0]
 8008dee:	1dbb      	adds	r3, r7, #6
 8008df0:	7819      	ldrb	r1, [r3, #0]
 8008df2:	1dfb      	adds	r3, r7, #7
 8008df4:	7818      	ldrb	r0, [r3, #0]
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	0023      	movs	r3, r4
 8008dfc:	f001 f83e 	bl	8009e7c <SX126xSetCadParams>
			cadDetMin, (RadioCadExitModes_t) cadExitMode, cadTimeout);
}
 8008e00:	46c0      	nop			@ (mov r8, r8)
 8008e02:	46bd      	mov	sp, r7
 8008e04:	b002      	add	sp, #8
 8008e06:	bdb0      	pop	{r4, r5, r7, pc}

08008e08 <RadioStartCad>:

void RadioStartCad(void) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
	SX126xSetDioIrqParams(IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED,
 8008e0c:	23c0      	movs	r3, #192	@ 0xc0
 8008e0e:	0059      	lsls	r1, r3, #1
 8008e10:	23c0      	movs	r3, #192	@ 0xc0
 8008e12:	0058      	lsls	r0, r3, #1
 8008e14:	2300      	movs	r3, #0
 8008e16:	2200      	movs	r2, #0
 8008e18:	f000 fd82 	bl	8009920 <SX126xSetDioIrqParams>
			IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);
	SX126xSetCad();
 8008e1c:	f000 fcb7 	bl	800978e <SX126xSetCad>
}
 8008e20:	46c0      	nop			@ (mov r8, r8)
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <RadioSetTxContinuousWave>:
 *
 * \param freq       Channel RF frequency
 * \param power      Sets the output power [dBm]
 * \param time       Transmission mode timeout [s]
 */
void RadioSetTxContinuousWave(uint32_t freq, int8_t power, uint16_t time) {
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	0008      	movs	r0, r1
 8008e30:	0011      	movs	r1, r2
 8008e32:	1cfb      	adds	r3, r7, #3
 8008e34:	1c02      	adds	r2, r0, #0
 8008e36:	701a      	strb	r2, [r3, #0]
 8008e38:	003b      	movs	r3, r7
 8008e3a:	1c0a      	adds	r2, r1, #0
 8008e3c:	801a      	strh	r2, [r3, #0]
	SX126xSetRfFrequency(freq);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	0018      	movs	r0, r3
 8008e42:	f000 fde3 	bl	8009a0c <SX126xSetRfFrequency>
	SX126xSetRfTxPower(power);
 8008e46:	1cfb      	adds	r3, r7, #3
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b25b      	sxtb	r3, r3
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f001 fb6b 	bl	800a528 <SX126xSetRfTxPower>
	SX126xSetTxContinuousWave();
 8008e52:	f000 fca9 	bl	80097a8 <SX126xSetTxContinuousWave>

//	TimerSetValue(&TxTimeoutTimer, time * 1e3);
//	TimerStart(&TxTimeoutTimer);
}
 8008e56:	46c0      	nop			@ (mov r8, r8)
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	b002      	add	sp, #8
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <RadioRssi>:

int16_t RadioRssi(RadioModems_t modem) {
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	0002      	movs	r2, r0
 8008e66:	1dfb      	adds	r3, r7, #7
 8008e68:	701a      	strb	r2, [r3, #0]
	return SX126xGetRssiInst();
 8008e6a:	f001 f865 	bl	8009f38 <SX126xGetRssiInst>
 8008e6e:	0003      	movs	r3, r0
}
 8008e70:	0018      	movs	r0, r3
 8008e72:	46bd      	mov	sp, r7
 8008e74:	b002      	add	sp, #8
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <RadioWrite>:
 * \brief Writes the radio register at the specified address
 *
 * \param  addr Register address
 * \param  data New register value
 */
void RadioWrite(uint16_t addr, uint8_t data) {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	0002      	movs	r2, r0
 8008e80:	1dbb      	adds	r3, r7, #6
 8008e82:	801a      	strh	r2, [r3, #0]
 8008e84:	1d7b      	adds	r3, r7, #5
 8008e86:	1c0a      	adds	r2, r1, #0
 8008e88:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegister(addr, data);
 8008e8a:	1d7b      	adds	r3, r7, #5
 8008e8c:	781a      	ldrb	r2, [r3, #0]
 8008e8e:	1dbb      	adds	r3, r7, #6
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	0011      	movs	r1, r2
 8008e94:	0018      	movs	r0, r3
 8008e96:	f001 fa53 	bl	800a340 <SX126xWriteRegister>
}
 8008e9a:	46c0      	nop			@ (mov r8, r8)
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	b002      	add	sp, #8
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <RadioRead>:
/*!
 * \brief Reads the radio register at the specified address
 *
 * \param  addr Register address
 */
uint8_t RadioRead(uint16_t addr) {
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	0002      	movs	r2, r0
 8008eaa:	1dbb      	adds	r3, r7, #6
 8008eac:	801a      	strh	r2, [r3, #0]
	return SX126xReadRegister(addr);
 8008eae:	1dbb      	adds	r3, r7, #6
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f001 fa9e 	bl	800a3f4 <SX126xReadRegister>
 8008eb8:	0003      	movs	r3, r0
}
 8008eba:	0018      	movs	r0, r3
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	b002      	add	sp, #8
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <RadioWriteBuffer>:

void RadioWriteBuffer(uint16_t addr, uint8_t *buffer, uint8_t size) {
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6039      	str	r1, [r7, #0]
 8008eca:	0011      	movs	r1, r2
 8008ecc:	1dbb      	adds	r3, r7, #6
 8008ece:	1c02      	adds	r2, r0, #0
 8008ed0:	801a      	strh	r2, [r3, #0]
 8008ed2:	1d7b      	adds	r3, r7, #5
 8008ed4:	1c0a      	adds	r2, r1, #0
 8008ed6:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegisters(addr, buffer, size);
 8008ed8:	1d7b      	adds	r3, r7, #5
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	1dbb      	adds	r3, r7, #6
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	f001 f9e7 	bl	800a2b8 <SX126xWriteRegisters>
}
 8008eea:	46c0      	nop			@ (mov r8, r8)
 8008eec:	46bd      	mov	sp, r7
 8008eee:	b002      	add	sp, #8
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <RadioReadBuffer>:

void RadioReadBuffer(uint16_t addr, uint8_t *buffer, uint8_t size) {
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b082      	sub	sp, #8
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6039      	str	r1, [r7, #0]
 8008efa:	0011      	movs	r1, r2
 8008efc:	1dbb      	adds	r3, r7, #6
 8008efe:	1c02      	adds	r2, r0, #0
 8008f00:	801a      	strh	r2, [r3, #0]
 8008f02:	1d7b      	adds	r3, r7, #5
 8008f04:	1c0a      	adds	r2, r1, #0
 8008f06:	701a      	strb	r2, [r3, #0]
	SX126xReadRegisters(addr, buffer, size);
 8008f08:	1d7b      	adds	r3, r7, #5
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	1dbb      	adds	r3, r7, #6
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	0018      	movs	r0, r3
 8008f16:	f001 fa27 	bl	800a368 <SX126xReadRegisters>
}
 8008f1a:	46c0      	nop			@ (mov r8, r8)
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	b002      	add	sp, #8
 8008f20:	bd80      	pop	{r7, pc}
	...

08008f24 <RadioSetMaxPayloadLength>:

void RadioReadFifo(uint8_t *buffer, uint8_t size) {
	SX126xReadBuffer(0, buffer, size);
}

void RadioSetMaxPayloadLength(RadioModems_t modem, uint8_t max) {
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	0002      	movs	r2, r0
 8008f2c:	1dfb      	adds	r3, r7, #7
 8008f2e:	701a      	strb	r2, [r3, #0]
 8008f30:	1dbb      	adds	r3, r7, #6
 8008f32:	1c0a      	adds	r2, r1, #0
 8008f34:	701a      	strb	r2, [r3, #0]
	if (modem == MODEM_LORA) {
 8008f36:	1dfb      	adds	r3, r7, #7
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d10d      	bne.n	8008f5a <RadioSetMaxPayloadLength+0x36>
		SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008f3e:	4b11      	ldr	r3, [pc, #68]	@ (8008f84 <RadioSetMaxPayloadLength+0x60>)
 8008f40:	1dba      	adds	r2, r7, #6
 8008f42:	7812      	ldrb	r2, [r2, #0]
 8008f44:	701a      	strb	r2, [r3, #0]
 8008f46:	4b0f      	ldr	r3, [pc, #60]	@ (8008f84 <RadioSetMaxPayloadLength+0x60>)
 8008f48:	7819      	ldrb	r1, [r3, #0]
 8008f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f88 <RadioSetMaxPayloadLength+0x64>)
 8008f4c:	2227      	movs	r2, #39	@ 0x27
 8008f4e:	5499      	strb	r1, [r3, r2]
		SX126xSetPacketParams(&SX126x.PacketParams);
 8008f50:	4b0e      	ldr	r3, [pc, #56]	@ (8008f8c <RadioSetMaxPayloadLength+0x68>)
 8008f52:	0018      	movs	r0, r3
 8008f54:	f000 fee0 	bl	8009d18 <SX126xSetPacketParams>
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength =
					max;
			SX126xSetPacketParams(&SX126x.PacketParams);
		}
	}
}
 8008f58:	e010      	b.n	8008f7c <RadioSetMaxPayloadLength+0x58>
		if (SX126x.PacketParams.Params.Gfsk.HeaderType
 8008f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f88 <RadioSetMaxPayloadLength+0x64>)
 8008f5c:	7fdb      	ldrb	r3, [r3, #31]
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d10c      	bne.n	8008f7c <RadioSetMaxPayloadLength+0x58>
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength =
 8008f62:	4b08      	ldr	r3, [pc, #32]	@ (8008f84 <RadioSetMaxPayloadLength+0x60>)
 8008f64:	1dba      	adds	r2, r7, #6
 8008f66:	7812      	ldrb	r2, [r2, #0]
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <RadioSetMaxPayloadLength+0x60>)
 8008f6c:	7819      	ldrb	r1, [r3, #0]
 8008f6e:	4b06      	ldr	r3, [pc, #24]	@ (8008f88 <RadioSetMaxPayloadLength+0x64>)
 8008f70:	2220      	movs	r2, #32
 8008f72:	5499      	strb	r1, [r3, r2]
			SX126xSetPacketParams(&SX126x.PacketParams);
 8008f74:	4b05      	ldr	r3, [pc, #20]	@ (8008f8c <RadioSetMaxPayloadLength+0x68>)
 8008f76:	0018      	movs	r0, r3
 8008f78:	f000 fece 	bl	8009d18 <SX126xSetPacketParams>
}
 8008f7c:	46c0      	nop			@ (mov r8, r8)
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	b002      	add	sp, #8
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20000158 	.word	0x20000158
 8008f88:	20000474 	.word	0x20000474
 8008f8c:	2000048c 	.word	0x2000048c

08008f90 <RadioSetPublicNetwork>:

void RadioSetPublicNetwork(bool enable) {
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	0002      	movs	r2, r0
 8008f98:	1dfb      	adds	r3, r7, #7
 8008f9a:	701a      	strb	r2, [r3, #0]
	RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8008f9c:	4b14      	ldr	r3, [pc, #80]	@ (8008ff0 <RadioSetPublicNetwork+0x60>)
 8008f9e:	1dfa      	adds	r2, r7, #7
 8008fa0:	7812      	ldrb	r2, [r2, #0]
 8008fa2:	701a      	strb	r2, [r3, #0]
 8008fa4:	4b12      	ldr	r3, [pc, #72]	@ (8008ff0 <RadioSetPublicNetwork+0x60>)
 8008fa6:	781a      	ldrb	r2, [r3, #0]
 8008fa8:	4b11      	ldr	r3, [pc, #68]	@ (8008ff0 <RadioSetPublicNetwork+0x60>)
 8008faa:	705a      	strb	r2, [r3, #1]

	RadioSetModem(MODEM_LORA);
 8008fac:	2001      	movs	r0, #1
 8008fae:	f7ff f917 	bl	80081e0 <RadioSetModem>
	if (enable == true) {
 8008fb2:	1dfb      	adds	r3, r7, #7
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00b      	beq.n	8008fd2 <RadioSetPublicNetwork+0x42>
		// Change LoRa modem SyncWord
		SX126xWriteRegister(REG_LR_SYNCWORD,
 8008fba:	23e8      	movs	r3, #232	@ 0xe8
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	2134      	movs	r1, #52	@ 0x34
 8008fc0:	0018      	movs	r0, r3
 8008fc2:	f001 f9bd 	bl	800a340 <SX126xWriteRegister>
				(LORA_MAC_PUBLIC_SYNCWORD >> 8) & 0xFF);
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
 8008fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff4 <RadioSetPublicNetwork+0x64>)
 8008fc8:	2144      	movs	r1, #68	@ 0x44
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f001 f9b8 	bl	800a340 <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD,
				(LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
				LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
	}
}
 8008fd0:	e00a      	b.n	8008fe8 <RadioSetPublicNetwork+0x58>
		SX126xWriteRegister(REG_LR_SYNCWORD,
 8008fd2:	23e8      	movs	r3, #232	@ 0xe8
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	2114      	movs	r1, #20
 8008fd8:	0018      	movs	r0, r3
 8008fda:	f001 f9b1 	bl	800a340 <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
 8008fde:	4b05      	ldr	r3, [pc, #20]	@ (8008ff4 <RadioSetPublicNetwork+0x64>)
 8008fe0:	2124      	movs	r1, #36	@ 0x24
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	f001 f9ac 	bl	800a340 <SX126xWriteRegister>
}
 8008fe8:	46c0      	nop			@ (mov r8, r8)
 8008fea:	46bd      	mov	sp, r7
 8008fec:	b002      	add	sp, #8
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	2000046c 	.word	0x2000046c
 8008ff4:	00000741 	.word	0x00000741

08008ff8 <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime(void) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	af00      	add	r7, sp, #0
	return (RADIO_WAKEUP_TIME);
 8008ffc:	2303      	movs	r3, #3
}
 8008ffe:	0018      	movs	r0, r3
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <RadioOnDioIrq>:
	RadioBgIrqProcess();
	RadioStandby();
	RadioSleep();
}

void RadioOnDioIrq(void) {
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009008:	b672      	cpsid	i
}
 800900a:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	IrqFired = true;
 800900c:	4b03      	ldr	r3, [pc, #12]	@ (800901c <RadioOnDioIrq+0x18>)
 800900e:	2201      	movs	r2, #1
 8009010:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009012:	b662      	cpsie	i
}
 8009014:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
 8009016:	46c0      	nop			@ (mov r8, r8)
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20000467 	.word	0x20000467

08009020 <RadioBgIrqProcess>:

void RadioBgIrqProcess(void) {
 8009020:	b590      	push	{r4, r7, lr}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
	bool rx_timeout_handled = false;
 8009026:	1dfb      	adds	r3, r7, #7
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
	bool tx_timeout_handled = false;
 800902c:	1dbb      	adds	r3, r7, #6
 800902e:	2200      	movs	r2, #0
 8009030:	701a      	strb	r2, [r3, #0]
	if (IrqFired == true) {
 8009032:	4bad      	ldr	r3, [pc, #692]	@ (80092e8 <RadioBgIrqProcess+0x2c8>)
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d100      	bne.n	800903c <RadioBgIrqProcess+0x1c>
 800903a:	e11a      	b.n	8009272 <RadioBgIrqProcess+0x252>
  __ASM volatile ("cpsid i" : : : "memory");
 800903c:	b672      	cpsid	i
}
 800903e:	46c0      	nop			@ (mov r8, r8)
		__disable_irq();
		IrqFired = false;
 8009040:	4ba9      	ldr	r3, [pc, #676]	@ (80092e8 <RadioBgIrqProcess+0x2c8>)
 8009042:	2200      	movs	r2, #0
 8009044:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009046:	b662      	cpsie	i
}
 8009048:	46c0      	nop			@ (mov r8, r8)
		__enable_irq();

		uint16_t irqRegs = SX126xGetIrqStatus();
 800904a:	1d3c      	adds	r4, r7, #4
 800904c:	f000 fcb6 	bl	80099bc <SX126xGetIrqStatus>
 8009050:	0003      	movs	r3, r0
 8009052:	8023      	strh	r3, [r4, #0]
		SX126xClearIrqStatus(IRQ_RADIO_ALL);
 8009054:	4ba5      	ldr	r3, [pc, #660]	@ (80092ec <RadioBgIrqProcess+0x2cc>)
 8009056:	0018      	movs	r0, r3
 8009058:	f001 f81a 	bl	800a090 <SX126xClearIrqStatus>

		if ((irqRegs & IRQ_TX_DONE) == IRQ_TX_DONE) {
 800905c:	1d3b      	adds	r3, r7, #4
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	2201      	movs	r2, #1
 8009062:	4013      	ands	r3, r2
 8009064:	d012      	beq.n	800908c <RadioBgIrqProcess+0x6c>
			tx_timeout_handled = true;
 8009066:	1dbb      	adds	r3, r7, #6
 8009068:	2201      	movs	r2, #1
 800906a:	701a      	strb	r2, [r3, #0]
//			TimerStop(&TxTimeoutTimer);
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 800906c:	2001      	movs	r0, #1
 800906e:	f000 f989 	bl	8009384 <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->TxDone != NULL)) {
 8009072:	4b9f      	ldr	r3, [pc, #636]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d008      	beq.n	800908c <RadioBgIrqProcess+0x6c>
 800907a:	4b9d      	ldr	r3, [pc, #628]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <RadioBgIrqProcess+0x6c>
				RadioEvents->TxDone();
 8009084:	4b9a      	ldr	r3, [pc, #616]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4798      	blx	r3
			}
		}

		if ((irqRegs & IRQ_RX_DONE) == IRQ_RX_DONE) {
 800908c:	1d3b      	adds	r3, r7, #4
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	2202      	movs	r2, #2
 8009092:	4013      	ands	r3, r2
 8009094:	d06a      	beq.n	800916c <RadioBgIrqProcess+0x14c>
			uint8_t size;

			rx_timeout_handled = true;
 8009096:	1dfb      	adds	r3, r7, #7
 8009098:	2201      	movs	r2, #1
 800909a:	701a      	strb	r2, [r3, #0]
//			TimerStop(&RxTimeoutTimer);
			if (RxContinuous == false) {
 800909c:	4b95      	ldr	r3, [pc, #596]	@ (80092f4 <RadioBgIrqProcess+0x2d4>)
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2201      	movs	r2, #1
 80090a2:	4053      	eors	r3, r2
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d015      	beq.n	80090d6 <RadioBgIrqProcess+0xb6>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 80090aa:	2001      	movs	r0, #1
 80090ac:	f000 f96a 	bl	8009384 <SX126xSetOperatingMode>

				// WORKAROUND - Implicit Header Mode Timeout Behavior, see DS_SX1261-2_V1.2 datasheet chapter 15.3
				// RegRtcControl = @address 0x0902
				SX126xWriteRegister(0x0902, 0x00);
 80090b0:	4b91      	ldr	r3, [pc, #580]	@ (80092f8 <RadioBgIrqProcess+0x2d8>)
 80090b2:	2100      	movs	r1, #0
 80090b4:	0018      	movs	r0, r3
 80090b6:	f001 f943 	bl	800a340 <SX126xWriteRegister>
				// RegEventMask = @address 0x0944
				SX126xWriteRegister(0x0944,
						SX126xReadRegister(0x0944) | (1 << 1));
 80090ba:	4b90      	ldr	r3, [pc, #576]	@ (80092fc <RadioBgIrqProcess+0x2dc>)
 80090bc:	0018      	movs	r0, r3
 80090be:	f001 f999 	bl	800a3f4 <SX126xReadRegister>
 80090c2:	0003      	movs	r3, r0
 80090c4:	001a      	movs	r2, r3
				SX126xWriteRegister(0x0944,
 80090c6:	2302      	movs	r3, #2
 80090c8:	4313      	orrs	r3, r2
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	4a8b      	ldr	r2, [pc, #556]	@ (80092fc <RadioBgIrqProcess+0x2dc>)
 80090ce:	0019      	movs	r1, r3
 80090d0:	0010      	movs	r0, r2
 80090d2:	f001 f935 	bl	800a340 <SX126xWriteRegister>
				// WORKAROUND END
			}
			memset(RadioRxPayload, 0, 255);
 80090d6:	4b8a      	ldr	r3, [pc, #552]	@ (8009300 <RadioBgIrqProcess+0x2e0>)
 80090d8:	22ff      	movs	r2, #255	@ 0xff
 80090da:	2100      	movs	r1, #0
 80090dc:	0018      	movs	r0, r3
 80090de:	f001 fb49 	bl	800a774 <memset>

			if ((irqRegs & IRQ_CRC_ERROR) == IRQ_CRC_ERROR) {
 80090e2:	1d3b      	adds	r3, r7, #4
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	2240      	movs	r2, #64	@ 0x40
 80090e8:	4013      	ands	r3, r2
 80090ea:	d01d      	beq.n	8009128 <RadioBgIrqProcess+0x108>
				uint8_t size;
				// Discard buffer
				memset(RadioRxPayload, 0, 255);
 80090ec:	4b84      	ldr	r3, [pc, #528]	@ (8009300 <RadioBgIrqProcess+0x2e0>)
 80090ee:	22ff      	movs	r2, #255	@ 0xff
 80090f0:	2100      	movs	r1, #0
 80090f2:	0018      	movs	r0, r3
 80090f4:	f001 fb3e 	bl	800a774 <memset>
				SX126xGetPayload(RadioRxPayload, &size, 255);
 80090f8:	1cb9      	adds	r1, r7, #2
 80090fa:	4b81      	ldr	r3, [pc, #516]	@ (8009300 <RadioBgIrqProcess+0x2e0>)
 80090fc:	22ff      	movs	r2, #255	@ 0xff
 80090fe:	0018      	movs	r0, r3
 8009100:	f000 f976 	bl	80093f0 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 8009104:	4b7f      	ldr	r3, [pc, #508]	@ (8009304 <RadioBgIrqProcess+0x2e4>)
 8009106:	0018      	movs	r0, r3
 8009108:	f000 ff66 	bl	8009fd8 <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxError)) {
 800910c:	4b78      	ldr	r3, [pc, #480]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d02b      	beq.n	800916c <RadioBgIrqProcess+0x14c>
 8009114:	4b76      	ldr	r3, [pc, #472]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d026      	beq.n	800916c <RadioBgIrqProcess+0x14c>
					RadioEvents->RxError();
 800911e:	4b74      	ldr	r3, [pc, #464]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	4798      	blx	r3
 8009126:	e021      	b.n	800916c <RadioBgIrqProcess+0x14c>
				}
			}
			else {
				SX126xGetPayload(RadioRxPayload, &size, 255);
 8009128:	1cf9      	adds	r1, r7, #3
 800912a:	4b75      	ldr	r3, [pc, #468]	@ (8009300 <RadioBgIrqProcess+0x2e0>)
 800912c:	22ff      	movs	r2, #255	@ 0xff
 800912e:	0018      	movs	r0, r3
 8009130:	f000 f95e 	bl	80093f0 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 8009134:	4b73      	ldr	r3, [pc, #460]	@ (8009304 <RadioBgIrqProcess+0x2e4>)
 8009136:	0018      	movs	r0, r3
 8009138:	f000 ff4e 	bl	8009fd8 <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxDone != NULL)) {
 800913c:	4b6c      	ldr	r3, [pc, #432]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d013      	beq.n	800916c <RadioBgIrqProcess+0x14c>
 8009144:	4b6a      	ldr	r3, [pc, #424]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00e      	beq.n	800916c <RadioBgIrqProcess+0x14c>
					RadioEvents->RxDone(RadioRxPayload, size,
 800914e:	4b68      	ldr	r3, [pc, #416]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	689c      	ldr	r4, [r3, #8]
 8009154:	1cfb      	adds	r3, r7, #3
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	0019      	movs	r1, r3
							RadioPktStatus.Params.LoRa.RssiPkt,
 800915a:	4b6a      	ldr	r3, [pc, #424]	@ (8009304 <RadioBgIrqProcess+0x2e4>)
 800915c:	7b1b      	ldrb	r3, [r3, #12]
 800915e:	b25b      	sxtb	r3, r3
					RadioEvents->RxDone(RadioRxPayload, size,
 8009160:	001a      	movs	r2, r3
 8009162:	4b68      	ldr	r3, [pc, #416]	@ (8009304 <RadioBgIrqProcess+0x2e4>)
 8009164:	7b5b      	ldrb	r3, [r3, #13]
 8009166:	b25b      	sxtb	r3, r3
 8009168:	4865      	ldr	r0, [pc, #404]	@ (8009300 <RadioBgIrqProcess+0x2e0>)
 800916a:	47a0      	blx	r4
							RadioPktStatus.Params.LoRa.SnrPkt);
				}
			}
		}

		if ((irqRegs & IRQ_CAD_DONE) == IRQ_CAD_DONE) {
 800916c:	1d3b      	adds	r3, r7, #4
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	2280      	movs	r2, #128	@ 0x80
 8009172:	4013      	ands	r3, r2
 8009174:	d018      	beq.n	80091a8 <RadioBgIrqProcess+0x188>
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 8009176:	2001      	movs	r0, #1
 8009178:	f000 f904 	bl	8009384 <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->CadDone != NULL)) {
 800917c:	4b5c      	ldr	r3, [pc, #368]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d011      	beq.n	80091a8 <RadioBgIrqProcess+0x188>
 8009184:	4b5a      	ldr	r3, [pc, #360]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00c      	beq.n	80091a8 <RadioBgIrqProcess+0x188>
				RadioEvents->CadDone(
 800918e:	4b58      	ldr	r3, [pc, #352]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69db      	ldr	r3, [r3, #28]
						((irqRegs & IRQ_CAD_ACTIVITY_DETECTED)
 8009194:	1d3a      	adds	r2, r7, #4
 8009196:	8811      	ldrh	r1, [r2, #0]
 8009198:	2280      	movs	r2, #128	@ 0x80
 800919a:	0052      	lsls	r2, r2, #1
 800919c:	400a      	ands	r2, r1
				RadioEvents->CadDone(
 800919e:	1e51      	subs	r1, r2, #1
 80091a0:	418a      	sbcs	r2, r1
 80091a2:	b2d2      	uxtb	r2, r2
 80091a4:	0010      	movs	r0, r2
 80091a6:	4798      	blx	r3
								== IRQ_CAD_ACTIVITY_DETECTED));
			}
		}

		if ((irqRegs & IRQ_RX_TX_TIMEOUT) == IRQ_RX_TX_TIMEOUT) {
 80091a8:	1d3b      	adds	r3, r7, #4
 80091aa:	881a      	ldrh	r2, [r3, #0]
 80091ac:	2380      	movs	r3, #128	@ 0x80
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4013      	ands	r3, r2
 80091b2:	d030      	beq.n	8009216 <RadioBgIrqProcess+0x1f6>
			if (SX126xGetOperatingMode() == MODE_TX) {
 80091b4:	f000 f8dc 	bl	8009370 <SX126xGetOperatingMode>
 80091b8:	0003      	movs	r3, r0
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	d113      	bne.n	80091e6 <RadioBgIrqProcess+0x1c6>
				tx_timeout_handled = true;
 80091be:	1dbb      	adds	r3, r7, #6
 80091c0:	2201      	movs	r2, #1
 80091c2:	701a      	strb	r2, [r3, #0]
//				TimerStop(&TxTimeoutTimer);
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 80091c4:	2001      	movs	r0, #1
 80091c6:	f000 f8dd 	bl	8009384 <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL)) {
 80091ca:	4b49      	ldr	r3, [pc, #292]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d021      	beq.n	8009216 <RadioBgIrqProcess+0x1f6>
 80091d2:	4b47      	ldr	r3, [pc, #284]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d01c      	beq.n	8009216 <RadioBgIrqProcess+0x1f6>
					RadioEvents->TxTimeout();
 80091dc:	4b44      	ldr	r3, [pc, #272]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	4798      	blx	r3
 80091e4:	e017      	b.n	8009216 <RadioBgIrqProcess+0x1f6>
				}
			}
			else if (SX126xGetOperatingMode() == MODE_RX) {
 80091e6:	f000 f8c3 	bl	8009370 <SX126xGetOperatingMode>
 80091ea:	0003      	movs	r3, r0
 80091ec:	2b05      	cmp	r3, #5
 80091ee:	d112      	bne.n	8009216 <RadioBgIrqProcess+0x1f6>
				rx_timeout_handled = true;
 80091f0:	1dfb      	adds	r3, r7, #7
 80091f2:	2201      	movs	r2, #1
 80091f4:	701a      	strb	r2, [r3, #0]
//				TimerStop(&RxTimeoutTimer);
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 80091f6:	2001      	movs	r0, #1
 80091f8:	f000 f8c4 	bl	8009384 <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)) {
 80091fc:	4b3c      	ldr	r3, [pc, #240]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d008      	beq.n	8009216 <RadioBgIrqProcess+0x1f6>
 8009204:	4b3a      	ldr	r3, [pc, #232]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <RadioBgIrqProcess+0x1f6>
					RadioEvents->RxTimeout();
 800920e:	4b38      	ldr	r3, [pc, #224]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	4798      	blx	r3
				}
			}
		}

		if ((irqRegs & IRQ_PREAMBLE_DETECTED) == IRQ_PREAMBLE_DETECTED) {
 8009216:	1d3b      	adds	r3, r7, #4
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	2204      	movs	r2, #4
 800921c:	4013      	ands	r3, r2
 800921e:	d00c      	beq.n	800923a <RadioBgIrqProcess+0x21a>
			if ((RadioEvents != NULL) && (RadioEvents->PreAmpDetect != NULL)) {
 8009220:	4b33      	ldr	r3, [pc, #204]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d008      	beq.n	800923a <RadioBgIrqProcess+0x21a>
 8009228:	4b31      	ldr	r3, [pc, #196]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <RadioBgIrqProcess+0x21a>
				RadioEvents->PreAmpDetect();
 8009232:	4b2f      	ldr	r3, [pc, #188]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	4798      	blx	r3

		if ((irqRegs & IRQ_HEADER_VALID) == IRQ_HEADER_VALID) {
			//__NOP( );
		}

		if ((irqRegs & IRQ_HEADER_ERROR) == IRQ_HEADER_ERROR) {
 800923a:	1d3b      	adds	r3, r7, #4
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	2220      	movs	r2, #32
 8009240:	4013      	ands	r3, r2
 8009242:	d016      	beq.n	8009272 <RadioBgIrqProcess+0x252>
//			TimerStop(&RxTimeoutTimer);
			if (RxContinuous == false) {
 8009244:	4b2b      	ldr	r3, [pc, #172]	@ (80092f4 <RadioBgIrqProcess+0x2d4>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2201      	movs	r2, #1
 800924a:	4053      	eors	r3, r2
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <RadioBgIrqProcess+0x238>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 8009252:	2001      	movs	r0, #1
 8009254:	f000 f896 	bl	8009384 <SX126xSetOperatingMode>
			}
			if ((RadioEvents != NULL) && (RadioEvents->RxError != NULL)) {
 8009258:	4b25      	ldr	r3, [pc, #148]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d008      	beq.n	8009272 <RadioBgIrqProcess+0x252>
 8009260:	4b23      	ldr	r3, [pc, #140]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <RadioBgIrqProcess+0x252>
				RadioEvents->RxError();
 800926a:	4b21      	ldr	r3, [pc, #132]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	4798      	blx	r3
			}
		}
	}
	if (TimerRxTimeout) {
 8009272:	4b25      	ldr	r3, [pc, #148]	@ (8009308 <RadioBgIrqProcess+0x2e8>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d016      	beq.n	80092a8 <RadioBgIrqProcess+0x288>
		TimerRxTimeout = false;
 800927a:	4b23      	ldr	r3, [pc, #140]	@ (8009308 <RadioBgIrqProcess+0x2e8>)
 800927c:	2200      	movs	r2, #0
 800927e:	701a      	strb	r2, [r3, #0]
		if (!rx_timeout_handled) {
 8009280:	1dfb      	adds	r3, r7, #7
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2201      	movs	r2, #1
 8009286:	4053      	eors	r3, r2
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00c      	beq.n	80092a8 <RadioBgIrqProcess+0x288>
//			TimerStop(&RxTimeoutTimer);
			if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)) {
 800928e:	4b18      	ldr	r3, [pc, #96]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d008      	beq.n	80092a8 <RadioBgIrqProcess+0x288>
 8009296:	4b16      	ldr	r3, [pc, #88]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <RadioBgIrqProcess+0x288>
				RadioEvents->RxTimeout();
 80092a0:	4b13      	ldr	r3, [pc, #76]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	4798      	blx	r3
			}
		}
	}
	if (TimerTxTimeout) {
 80092a8:	4b18      	ldr	r3, [pc, #96]	@ (800930c <RadioBgIrqProcess+0x2ec>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d016      	beq.n	80092de <RadioBgIrqProcess+0x2be>
		TimerTxTimeout = false;
 80092b0:	4b16      	ldr	r3, [pc, #88]	@ (800930c <RadioBgIrqProcess+0x2ec>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	701a      	strb	r2, [r3, #0]
		if (!tx_timeout_handled) {
 80092b6:	1dbb      	adds	r3, r7, #6
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2201      	movs	r2, #1
 80092bc:	4053      	eors	r3, r2
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00c      	beq.n	80092de <RadioBgIrqProcess+0x2be>
//			TimerStop(&TxTimeoutTimer);
			if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL)) {
 80092c4:	4b0a      	ldr	r3, [pc, #40]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d008      	beq.n	80092de <RadioBgIrqProcess+0x2be>
 80092cc:	4b08      	ldr	r3, [pc, #32]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <RadioBgIrqProcess+0x2be>
				RadioEvents->TxTimeout();
 80092d6:	4b06      	ldr	r3, [pc, #24]	@ (80092f0 <RadioBgIrqProcess+0x2d0>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	4798      	blx	r3
			}
		}
	}
}
 80092de:	46c0      	nop			@ (mov r8, r8)
 80092e0:	46bd      	mov	sp, r7
 80092e2:	b003      	add	sp, #12
 80092e4:	bd90      	pop	{r4, r7, pc}
 80092e6:	46c0      	nop			@ (mov r8, r8)
 80092e8:	20000467 	.word	0x20000467
 80092ec:	0000ffff 	.word	0x0000ffff
 80092f0:	20000470 	.word	0x20000470
 80092f4:	20000350 	.word	0x20000350
 80092f8:	00000902 	.word	0x00000902
 80092fc:	00000944 	.word	0x00000944
 8009300:	20000368 	.word	0x20000368
 8009304:	20000354 	.word	0x20000354
 8009308:	20000468 	.word	0x20000468
 800930c:	20000469 	.word	0x20000469

08009310 <RadioIrqProcess>:

void RadioIrqProcess(void) {
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0
	RadioBgIrqProcess();
 8009314:	f7ff fe84 	bl	8009020 <RadioBgIrqProcess>
}
 8009318:	46c0      	nop			@ (mov r8, r8)
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
	...

08009320 <RadioIrqProcessAfterDeepSleep>:

void RadioIrqProcessAfterDeepSleep(void) {
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009324:	b672      	cpsid	i
}
 8009326:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	IrqFired = true;
 8009328:	4b04      	ldr	r3, [pc, #16]	@ (800933c <RadioIrqProcessAfterDeepSleep+0x1c>)
 800932a:	2201      	movs	r2, #1
 800932c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800932e:	b662      	cpsie	i
}
 8009330:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
	RadioBgIrqProcess();
 8009332:	f7ff fe75 	bl	8009020 <RadioBgIrqProcess>
}
 8009336:	46c0      	nop			@ (mov r8, r8)
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000467 	.word	0x20000467

08009340 <SX126xInit>:
/*
 * \brief Process the IRQ if handled by the driver
 */
void SX126xProcessIrqs(void);

void SX126xInit(void){
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
	SX126xReset();
 8009344:	f000 fece 	bl	800a0e4 <SX126xReset>
	SX126xWakeup();
 8009348:	f000 ff16 	bl	800a178 <SX126xWakeup>
	SX126xSetStandby(STDBY_RC);
 800934c:	2000      	movs	r0, #0
 800934e:	f000 f961 	bl	8009614 <SX126xSetStandby>

	SX126xSetDio2AsRfSwitchCtrl(true);
 8009352:	2001      	movs	r0, #1
 8009354:	f000 fb49 	bl	80099ea <SX126xSetDio2AsRfSwitchCtrl>

	SX126xSetOperatingMode(MODE_STDBY_RC);
 8009358:	2001      	movs	r0, #1
 800935a:	f000 f813 	bl	8009384 <SX126xSetOperatingMode>
}
 800935e:	46c0      	nop			@ (mov r8, r8)
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <SX126xReInit>:

void SX126xReInit(void){
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
}
 8009368:	46c0      	nop			@ (mov r8, r8)
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode(void){
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
	return OperatingMode;
 8009374:	4b02      	ldr	r3, [pc, #8]	@ (8009380 <SX126xGetOperatingMode+0x10>)
 8009376:	781b      	ldrb	r3, [r3, #0]
}
 8009378:	0018      	movs	r0, r3
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	46c0      	nop			@ (mov r8, r8)
 8009380:	200004c8 	.word	0x200004c8

08009384 <SX126xSetOperatingMode>:

void SX126xSetOperatingMode(RadioOperatingModes_t mode){
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	0002      	movs	r2, r0
 800938c:	1dfb      	adds	r3, r7, #7
 800938e:	701a      	strb	r2, [r3, #0]
	OperatingMode = mode;
 8009390:	4b03      	ldr	r3, [pc, #12]	@ (80093a0 <SX126xSetOperatingMode+0x1c>)
 8009392:	1dfa      	adds	r2, r7, #7
 8009394:	7812      	ldrb	r2, [r2, #0]
 8009396:	701a      	strb	r2, [r3, #0]
}
 8009398:	46c0      	nop			@ (mov r8, r8)
 800939a:	46bd      	mov	sp, r7
 800939c:	b002      	add	sp, #8
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	200004c8 	.word	0x200004c8

080093a4 <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady(void){
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
	if ((SX126xGetOperatingMode() == MODE_SLEEP) || (SX126xGetOperatingMode() == MODE_RX_DC)){
 80093a8:	f7ff ffe2 	bl	8009370 <SX126xGetOperatingMode>
 80093ac:	1e03      	subs	r3, r0, #0
 80093ae:	d004      	beq.n	80093ba <SX126xCheckDeviceReady+0x16>
 80093b0:	f7ff ffde 	bl	8009370 <SX126xGetOperatingMode>
 80093b4:	0003      	movs	r3, r0
 80093b6:	2b06      	cmp	r3, #6
 80093b8:	d103      	bne.n	80093c2 <SX126xCheckDeviceReady+0x1e>
		SX126xWakeup();
 80093ba:	f000 fedd 	bl	800a178 <SX126xWakeup>
		// Switch is turned off when device is in sleep mode and turned on is all other modes
		SX126xAntSwOn();
 80093be:	f001 f8cd 	bl	800a55c <SX126xAntSwOn>
	}
	SX126xWaitOnBusy();
 80093c2:	f000 feaf 	bl	800a124 <SX126xWaitOnBusy>
}
 80093c6:	46c0      	nop			@ (mov r8, r8)
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <SX126xSetPayload>:

void SX126xSetPayload(uint8_t *payload, uint8_t size){
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	000a      	movs	r2, r1
 80093d6:	1cfb      	adds	r3, r7, #3
 80093d8:	701a      	strb	r2, [r3, #0]
	SX126xWriteBuffer(0x00, payload, size);
 80093da:	1cfb      	adds	r3, r7, #3
 80093dc:	781a      	ldrb	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	0019      	movs	r1, r3
 80093e2:	2000      	movs	r0, #0
 80093e4:	f001 f81a 	bl	800a41c <SX126xWriteBuffer>
}
 80093e8:	46c0      	nop			@ (mov r8, r8)
 80093ea:	46bd      	mov	sp, r7
 80093ec:	b002      	add	sp, #8
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <SX126xGetPayload>:

uint8_t SX126xGetPayload(uint8_t *buffer, uint8_t *size, uint8_t maxSize){
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	1dfb      	adds	r3, r7, #7
 80093fc:	701a      	strb	r2, [r3, #0]
	uint8_t offset = 0;
 80093fe:	2117      	movs	r1, #23
 8009400:	187b      	adds	r3, r7, r1
 8009402:	2200      	movs	r2, #0
 8009404:	701a      	strb	r2, [r3, #0]

	SX126xGetRxBufferStatus(size, &offset);
 8009406:	187a      	adds	r2, r7, r1
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	0011      	movs	r1, r2
 800940c:	0018      	movs	r0, r3
 800940e:	f000 fdad 	bl	8009f6c <SX126xGetRxBufferStatus>
	if (*size > maxSize)
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	1dfa      	adds	r2, r7, #7
 8009418:	7812      	ldrb	r2, [r2, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d201      	bcs.n	8009422 <SX126xGetPayload+0x32>
		return 1;
 800941e:	2301      	movs	r3, #1
 8009420:	e009      	b.n	8009436 <SX126xGetPayload+0x46>
	SX126xReadBuffer(offset, buffer, *size);
 8009422:	2317      	movs	r3, #23
 8009424:	18fb      	adds	r3, r7, r3
 8009426:	7818      	ldrb	r0, [r3, #0]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	781a      	ldrb	r2, [r3, #0]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	0019      	movs	r1, r3
 8009430:	f001 f830 	bl	800a494 <SX126xReadBuffer>
	return 0;
 8009434:	2300      	movs	r3, #0
}
 8009436:	0018      	movs	r0, r3
 8009438:	46bd      	mov	sp, r7
 800943a:	b006      	add	sp, #24
 800943c:	bd80      	pop	{r7, pc}

0800943e <SX126xSendPayload>:

void SX126xSendPayload(uint8_t *payload, uint8_t size, uint32_t timeout){
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	60f8      	str	r0, [r7, #12]
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	200b      	movs	r0, #11
 800944a:	183b      	adds	r3, r7, r0
 800944c:	1c0a      	adds	r2, r1, #0
 800944e:	701a      	strb	r2, [r3, #0]
	SX126xSetPayload(payload, size);
 8009450:	183b      	adds	r3, r7, r0
 8009452:	781a      	ldrb	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	0011      	movs	r1, r2
 8009458:	0018      	movs	r0, r3
 800945a:	f7ff ffb7 	bl	80093cc <SX126xSetPayload>
	SX126xSetTx(timeout);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	0018      	movs	r0, r3
 8009462:	f000 f8f4 	bl	800964e <SX126xSetTx>
}
 8009466:	46c0      	nop			@ (mov r8, r8)
 8009468:	46bd      	mov	sp, r7
 800946a:	b004      	add	sp, #16
 800946c:	bd80      	pop	{r7, pc}

0800946e <SX126xSetSyncWord>:

uint8_t SX126xSetSyncWord(uint8_t *syncWord){
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
	SX126xWriteRegisters(REG_LR_SYNCWORDBASEADDRESS, syncWord, 8);
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	23d8      	movs	r3, #216	@ 0xd8
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	2208      	movs	r2, #8
 800947e:	0018      	movs	r0, r3
 8009480:	f000 ff1a 	bl	800a2b8 <SX126xWriteRegisters>
	return 0;
 8009484:	2300      	movs	r3, #0
}
 8009486:	0018      	movs	r0, r3
 8009488:	46bd      	mov	sp, r7
 800948a:	b002      	add	sp, #8
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <SX126xSetCrcSeed>:

void SX126xSetCrcSeed(uint16_t seed){
 8009490:	b590      	push	{r4, r7, lr}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	0002      	movs	r2, r0
 8009498:	1dbb      	adds	r3, r7, #6
 800949a:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)((seed >> 8) & 0xFF);
 800949c:	1dbb      	adds	r3, r7, #6
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	0a1b      	lsrs	r3, r3, #8
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	240c      	movs	r4, #12
 80094a8:	193b      	adds	r3, r7, r4
 80094aa:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(seed & 0xFF);
 80094ac:	1dbb      	adds	r3, r7, #6
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	193b      	adds	r3, r7, r4
 80094b4:	705a      	strb	r2, [r3, #1]

	switch (SX126xGetPacketType()){
 80094b6:	f000 fb05 	bl	8009ac4 <SX126xGetPacketType>
 80094ba:	1e03      	subs	r3, r0, #0
 80094bc:	d106      	bne.n	80094cc <SX126xSetCrcSeed+0x3c>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCSEEDBASEADDR, buf, 2);
 80094be:	193b      	adds	r3, r7, r4
 80094c0:	4805      	ldr	r0, [pc, #20]	@ (80094d8 <SX126xSetCrcSeed+0x48>)
 80094c2:	2202      	movs	r2, #2
 80094c4:	0019      	movs	r1, r3
 80094c6:	f000 fef7 	bl	800a2b8 <SX126xWriteRegisters>
		break;
 80094ca:	e000      	b.n	80094ce <SX126xSetCrcSeed+0x3e>

		default:
		break;
 80094cc:	46c0      	nop			@ (mov r8, r8)
	}
}
 80094ce:	46c0      	nop			@ (mov r8, r8)
 80094d0:	46bd      	mov	sp, r7
 80094d2:	b005      	add	sp, #20
 80094d4:	bd90      	pop	{r4, r7, pc}
 80094d6:	46c0      	nop			@ (mov r8, r8)
 80094d8:	000006bc 	.word	0x000006bc

080094dc <SX126xSetCrcPolynomial>:

void SX126xSetCrcPolynomial(uint16_t polynomial){
 80094dc:	b590      	push	{r4, r7, lr}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	0002      	movs	r2, r0
 80094e4:	1dbb      	adds	r3, r7, #6
 80094e6:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)((polynomial >> 8) & 0xFF);
 80094e8:	1dbb      	adds	r3, r7, #6
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	0a1b      	lsrs	r3, r3, #8
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	240c      	movs	r4, #12
 80094f4:	193b      	adds	r3, r7, r4
 80094f6:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(polynomial & 0xFF);
 80094f8:	1dbb      	adds	r3, r7, #6
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	193b      	adds	r3, r7, r4
 8009500:	705a      	strb	r2, [r3, #1]

	switch (SX126xGetPacketType()){
 8009502:	f000 fadf 	bl	8009ac4 <SX126xGetPacketType>
 8009506:	1e03      	subs	r3, r0, #0
 8009508:	d106      	bne.n	8009518 <SX126xSetCrcPolynomial+0x3c>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCPOLYBASEADDR, buf, 2);
 800950a:	193b      	adds	r3, r7, r4
 800950c:	4805      	ldr	r0, [pc, #20]	@ (8009524 <SX126xSetCrcPolynomial+0x48>)
 800950e:	2202      	movs	r2, #2
 8009510:	0019      	movs	r1, r3
 8009512:	f000 fed1 	bl	800a2b8 <SX126xWriteRegisters>
		break;
 8009516:	e000      	b.n	800951a <SX126xSetCrcPolynomial+0x3e>

		default:
		break;
 8009518:	46c0      	nop			@ (mov r8, r8)
	}
}
 800951a:	46c0      	nop			@ (mov r8, r8)
 800951c:	46bd      	mov	sp, r7
 800951e:	b005      	add	sp, #20
 8009520:	bd90      	pop	{r4, r7, pc}
 8009522:	46c0      	nop			@ (mov r8, r8)
 8009524:	000006be 	.word	0x000006be

08009528 <SX126xSetWhiteningSeed>:

void SX126xSetWhiteningSeed(uint16_t seed){
 8009528:	b590      	push	{r4, r7, lr}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	0002      	movs	r2, r0
 8009530:	1dbb      	adds	r3, r7, #6
 8009532:	801a      	strh	r2, [r3, #0]
	uint8_t regValue = 0;
 8009534:	240f      	movs	r4, #15
 8009536:	193b      	adds	r3, r7, r4
 8009538:	2200      	movs	r2, #0
 800953a:	701a      	strb	r2, [r3, #0]

	switch (SX126xGetPacketType()){
 800953c:	f000 fac2 	bl	8009ac4 <SX126xGetPacketType>
 8009540:	1e03      	subs	r3, r0, #0
 8009542:	d12c      	bne.n	800959e <SX126xSetWhiteningSeed+0x76>
		case PACKET_TYPE_GFSK:
			regValue = SX126xReadRegister(REG_LR_WHITSEEDBASEADDR_MSB) & 0xFE;
 8009544:	23d7      	movs	r3, #215	@ 0xd7
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	0018      	movs	r0, r3
 800954a:	f000 ff53 	bl	800a3f4 <SX126xReadRegister>
 800954e:	0003      	movs	r3, r0
 8009550:	0019      	movs	r1, r3
 8009552:	0020      	movs	r0, r4
 8009554:	183b      	adds	r3, r7, r0
 8009556:	2201      	movs	r2, #1
 8009558:	4391      	bics	r1, r2
 800955a:	000a      	movs	r2, r1
 800955c:	701a      	strb	r2, [r3, #0]
			regValue = ((seed >> 8) & 0x01) | regValue;
 800955e:	1dbb      	adds	r3, r7, #6
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	0a1b      	lsrs	r3, r3, #8
 8009564:	b29b      	uxth	r3, r3
 8009566:	b25b      	sxtb	r3, r3
 8009568:	2201      	movs	r2, #1
 800956a:	4013      	ands	r3, r2
 800956c:	b25a      	sxtb	r2, r3
 800956e:	183b      	adds	r3, r7, r0
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	b25b      	sxtb	r3, r3
 8009574:	4313      	orrs	r3, r2
 8009576:	b25a      	sxtb	r2, r3
 8009578:	183b      	adds	r3, r7, r0
 800957a:	701a      	strb	r2, [r3, #0]
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_MSB, regValue); // only 1 bit.
 800957c:	183b      	adds	r3, r7, r0
 800957e:	781a      	ldrb	r2, [r3, #0]
 8009580:	23d7      	movs	r3, #215	@ 0xd7
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	0011      	movs	r1, r2
 8009586:	0018      	movs	r0, r3
 8009588:	f000 feda 	bl	800a340 <SX126xWriteRegister>
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed);
 800958c:	1dbb      	adds	r3, r7, #6
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	b2db      	uxtb	r3, r3
 8009592:	4a05      	ldr	r2, [pc, #20]	@ (80095a8 <SX126xSetWhiteningSeed+0x80>)
 8009594:	0019      	movs	r1, r3
 8009596:	0010      	movs	r0, r2
 8009598:	f000 fed2 	bl	800a340 <SX126xWriteRegister>
		break;
 800959c:	e000      	b.n	80095a0 <SX126xSetWhiteningSeed+0x78>

		default:
		break;
 800959e:	46c0      	nop			@ (mov r8, r8)
	}
}
 80095a0:	46c0      	nop			@ (mov r8, r8)
 80095a2:	46bd      	mov	sp, r7
 80095a4:	b005      	add	sp, #20
 80095a6:	bd90      	pop	{r4, r7, pc}
 80095a8:	000006b9 	.word	0x000006b9

080095ac <SX126xGetRandom>:

uint32_t SX126xGetRandom(void){
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
	uint8_t buf[] = {0, 0, 0, 0};
 80095b2:	1d3b      	adds	r3, r7, #4
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]

	SX126xReadRegisters(RANDOM_NUMBER_GENERATORBASEADDR, buf, 4);
 80095b8:	1d3b      	adds	r3, r7, #4
 80095ba:	480b      	ldr	r0, [pc, #44]	@ (80095e8 <SX126xGetRandom+0x3c>)
 80095bc:	2204      	movs	r2, #4
 80095be:	0019      	movs	r1, r3
 80095c0:	f000 fed2 	bl	800a368 <SX126xReadRegisters>

	return (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 80095c4:	1d3b      	adds	r3, r7, #4
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	061a      	lsls	r2, r3, #24
 80095ca:	1d3b      	adds	r3, r7, #4
 80095cc:	785b      	ldrb	r3, [r3, #1]
 80095ce:	041b      	lsls	r3, r3, #16
 80095d0:	431a      	orrs	r2, r3
 80095d2:	1d3b      	adds	r3, r7, #4
 80095d4:	789b      	ldrb	r3, [r3, #2]
 80095d6:	021b      	lsls	r3, r3, #8
 80095d8:	4313      	orrs	r3, r2
 80095da:	1d3a      	adds	r2, r7, #4
 80095dc:	78d2      	ldrb	r2, [r2, #3]
 80095de:	4313      	orrs	r3, r2
}
 80095e0:	0018      	movs	r0, r3
 80095e2:	46bd      	mov	sp, r7
 80095e4:	b002      	add	sp, #8
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	00000819 	.word	0x00000819

080095ec <SX126xSetSleep>:

void SX126xSetSleep(SleepParams_t sleepConfig){
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	1d3b      	adds	r3, r7, #4
 80095f4:	7018      	strb	r0, [r3, #0]
	SX126xAntSwOff();
 80095f6:	f000 ffb6 	bl	800a566 <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_SLEEP, &sleepConfig.Value, 1);
 80095fa:	1d3b      	adds	r3, r7, #4
 80095fc:	2201      	movs	r2, #1
 80095fe:	0019      	movs	r1, r3
 8009600:	2084      	movs	r0, #132	@ 0x84
 8009602:	f000 fde5 	bl	800a1d0 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_SLEEP);
 8009606:	2000      	movs	r0, #0
 8009608:	f7ff febc 	bl	8009384 <SX126xSetOperatingMode>
}
 800960c:	46c0      	nop			@ (mov r8, r8)
 800960e:	46bd      	mov	sp, r7
 8009610:	b002      	add	sp, #8
 8009612:	bd80      	pop	{r7, pc}

08009614 <SX126xSetStandby>:

void SX126xSetStandby(RadioStandbyModes_t standbyConfig){
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	0002      	movs	r2, r0
 800961c:	1dfb      	adds	r3, r7, #7
 800961e:	701a      	strb	r2, [r3, #0]
	SX126xAntSwOff();
 8009620:	f000 ffa1 	bl	800a566 <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_STANDBY, (uint8_t *)&standbyConfig, 1);
 8009624:	1dfb      	adds	r3, r7, #7
 8009626:	2201      	movs	r2, #1
 8009628:	0019      	movs	r1, r3
 800962a:	2080      	movs	r0, #128	@ 0x80
 800962c:	f000 fdd0 	bl	800a1d0 <SX126xWriteCommand>
	if (standbyConfig == STDBY_RC){
 8009630:	1dfb      	adds	r3, r7, #7
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d103      	bne.n	8009640 <SX126xSetStandby+0x2c>
		SX126xSetOperatingMode(MODE_STDBY_RC);
 8009638:	2001      	movs	r0, #1
 800963a:	f7ff fea3 	bl	8009384 <SX126xSetOperatingMode>
	}
	else{
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
	}
}
 800963e:	e002      	b.n	8009646 <SX126xSetStandby+0x32>
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
 8009640:	2002      	movs	r0, #2
 8009642:	f7ff fe9f 	bl	8009384 <SX126xSetOperatingMode>
}
 8009646:	46c0      	nop			@ (mov r8, r8)
 8009648:	46bd      	mov	sp, r7
 800964a:	b002      	add	sp, #8
 800964c:	bd80      	pop	{r7, pc}

0800964e <SX126xSetTx>:
void SX126xSetFs(void){
	SX126xWriteCommand(RADIO_SET_FS, 0, 0);
	SX126xSetOperatingMode(MODE_FS);
}

void SX126xSetTx(uint32_t timeout){
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_TX);
 8009656:	2004      	movs	r0, #4
 8009658:	f7ff fe94 	bl	8009384 <SX126xSetOperatingMode>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	0c1b      	lsrs	r3, r3, #16
 8009660:	b2da      	uxtb	r2, r3
 8009662:	210c      	movs	r1, #12
 8009664:	187b      	adds	r3, r7, r1
 8009666:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	0a1b      	lsrs	r3, r3, #8
 800966c:	b2da      	uxtb	r2, r3
 800966e:	187b      	adds	r3, r7, r1
 8009670:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	b2da      	uxtb	r2, r3
 8009676:	187b      	adds	r3, r7, r1
 8009678:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_TX, buf, 3);
 800967a:	187b      	adds	r3, r7, r1
 800967c:	2203      	movs	r2, #3
 800967e:	0019      	movs	r1, r3
 8009680:	2083      	movs	r0, #131	@ 0x83
 8009682:	f000 fda5 	bl	800a1d0 <SX126xWriteCommand>
}
 8009686:	46c0      	nop			@ (mov r8, r8)
 8009688:	46bd      	mov	sp, r7
 800968a:	b004      	add	sp, #16
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <SX126xSetRx>:

void SX126xSetRx(uint32_t timeout){
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 8009698:	2005      	movs	r0, #5
 800969a:	f7ff fe73 	bl	8009384 <SX126xSetOperatingMode>

    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 800969e:	4b0f      	ldr	r3, [pc, #60]	@ (80096dc <SX126xSetRx+0x4c>)
 80096a0:	2194      	movs	r1, #148	@ 0x94
 80096a2:	0018      	movs	r0, r3
 80096a4:	f000 fe4c 	bl	800a340 <SX126xWriteRegister>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	0c1b      	lsrs	r3, r3, #16
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	210c      	movs	r1, #12
 80096b0:	187b      	adds	r3, r7, r1
 80096b2:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	0a1b      	lsrs	r3, r3, #8
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	187b      	adds	r3, r7, r1
 80096bc:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	187b      	adds	r3, r7, r1
 80096c4:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 80096c6:	187b      	adds	r3, r7, r1
 80096c8:	2203      	movs	r2, #3
 80096ca:	0019      	movs	r1, r3
 80096cc:	2082      	movs	r0, #130	@ 0x82
 80096ce:	f000 fd7f 	bl	800a1d0 <SX126xWriteCommand>
}
 80096d2:	46c0      	nop			@ (mov r8, r8)
 80096d4:	46bd      	mov	sp, r7
 80096d6:	b004      	add	sp, #16
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	46c0      	nop			@ (mov r8, r8)
 80096dc:	000008ac 	.word	0x000008ac

080096e0 <SX126xSetRxBoosted>:

void SX126xSetRxBoosted(uint32_t timeout){
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 80096e8:	2005      	movs	r0, #5
 80096ea:	f7ff fe4b 	bl	8009384 <SX126xSetOperatingMode>

	SX126xWriteRegister(REG_RX_GAIN, 0x96); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 80096ee:	4b0f      	ldr	r3, [pc, #60]	@ (800972c <SX126xSetRxBoosted+0x4c>)
 80096f0:	2196      	movs	r1, #150	@ 0x96
 80096f2:	0018      	movs	r0, r3
 80096f4:	f000 fe24 	bl	800a340 <SX126xWriteRegister>

	buf[0] = (uint8_t)((timeout >> 16) & 0xFF);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	0c1b      	lsrs	r3, r3, #16
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	210c      	movs	r1, #12
 8009700:	187b      	adds	r3, r7, r1
 8009702:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((timeout >> 8) & 0xFF);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	0a1b      	lsrs	r3, r3, #8
 8009708:	b2da      	uxtb	r2, r3
 800970a:	187b      	adds	r3, r7, r1
 800970c:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(timeout & 0xFF);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	b2da      	uxtb	r2, r3
 8009712:	187b      	adds	r3, r7, r1
 8009714:	709a      	strb	r2, [r3, #2]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 8009716:	187b      	adds	r3, r7, r1
 8009718:	2203      	movs	r2, #3
 800971a:	0019      	movs	r1, r3
 800971c:	2082      	movs	r0, #130	@ 0x82
 800971e:	f000 fd57 	bl	800a1d0 <SX126xWriteCommand>
}
 8009722:	46c0      	nop			@ (mov r8, r8)
 8009724:	46bd      	mov	sp, r7
 8009726:	b004      	add	sp, #16
 8009728:	bd80      	pop	{r7, pc}
 800972a:	46c0      	nop			@ (mov r8, r8)
 800972c:	000008ac 	.word	0x000008ac

08009730 <SX126xSetRxDutyCycle>:

void SX126xSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime){
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	buf[0] = (uint8_t)((rxTime >> 16) & 0xFF);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	0c1b      	lsrs	r3, r3, #16
 800973e:	b2da      	uxtb	r2, r3
 8009740:	2108      	movs	r1, #8
 8009742:	187b      	adds	r3, r7, r1
 8009744:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((rxTime >> 8) & 0xFF);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	0a1b      	lsrs	r3, r3, #8
 800974a:	b2da      	uxtb	r2, r3
 800974c:	187b      	adds	r3, r7, r1
 800974e:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(rxTime & 0xFF);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	b2da      	uxtb	r2, r3
 8009754:	187b      	adds	r3, r7, r1
 8009756:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)((sleepTime >> 16) & 0xFF);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	0c1b      	lsrs	r3, r3, #16
 800975c:	b2da      	uxtb	r2, r3
 800975e:	187b      	adds	r3, r7, r1
 8009760:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((sleepTime >> 8) & 0xFF);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	0a1b      	lsrs	r3, r3, #8
 8009766:	b2da      	uxtb	r2, r3
 8009768:	187b      	adds	r3, r7, r1
 800976a:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)(sleepTime & 0xFF);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	b2da      	uxtb	r2, r3
 8009770:	187b      	adds	r3, r7, r1
 8009772:	715a      	strb	r2, [r3, #5]
	SX126xWriteCommand(RADIO_SET_RXDUTYCYCLE, buf, 6);
 8009774:	187b      	adds	r3, r7, r1
 8009776:	2206      	movs	r2, #6
 8009778:	0019      	movs	r1, r3
 800977a:	2094      	movs	r0, #148	@ 0x94
 800977c:	f000 fd28 	bl	800a1d0 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_RX_DC);
 8009780:	2006      	movs	r0, #6
 8009782:	f7ff fdff 	bl	8009384 <SX126xSetOperatingMode>
}
 8009786:	46c0      	nop			@ (mov r8, r8)
 8009788:	46bd      	mov	sp, r7
 800978a:	b004      	add	sp, #16
 800978c:	bd80      	pop	{r7, pc}

0800978e <SX126xSetCad>:

void SX126xSetCad(void){
 800978e:	b580      	push	{r7, lr}
 8009790:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_CAD, 0, 0);
 8009792:	2200      	movs	r2, #0
 8009794:	2100      	movs	r1, #0
 8009796:	20c5      	movs	r0, #197	@ 0xc5
 8009798:	f000 fd1a 	bl	800a1d0 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_CAD);
 800979c:	2007      	movs	r0, #7
 800979e:	f7ff fdf1 	bl	8009384 <SX126xSetOperatingMode>
}
 80097a2:	46c0      	nop			@ (mov r8, r8)
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <SX126xSetTxContinuousWave>:

void SX126xSetTxContinuousWave(void){
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSWAVE, 0, 0);
 80097ac:	2200      	movs	r2, #0
 80097ae:	2100      	movs	r1, #0
 80097b0:	20d1      	movs	r0, #209	@ 0xd1
 80097b2:	f000 fd0d 	bl	800a1d0 <SX126xWriteCommand>
}
 80097b6:	46c0      	nop			@ (mov r8, r8)
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <SX126xSetStopRxTimerOnPreambleDetect>:

void SX126xSetTxInfinitePreamble(void){
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0);
}

void SX126xSetStopRxTimerOnPreambleDetect(bool enable){
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	0002      	movs	r2, r0
 80097c4:	1dfb      	adds	r3, r7, #7
 80097c6:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_STOPRXTIMERONPREAMBLE, (uint8_t *)&enable, 1);
 80097c8:	1dfb      	adds	r3, r7, #7
 80097ca:	2201      	movs	r2, #1
 80097cc:	0019      	movs	r1, r3
 80097ce:	209f      	movs	r0, #159	@ 0x9f
 80097d0:	f000 fcfe 	bl	800a1d0 <SX126xWriteCommand>
}
 80097d4:	46c0      	nop			@ (mov r8, r8)
 80097d6:	46bd      	mov	sp, r7
 80097d8:	b002      	add	sp, #8
 80097da:	bd80      	pop	{r7, pc}

080097dc <SX126xSetLoRaSymbNumTimeout>:

void SX126xSetLoRaSymbNumTimeout(uint8_t SymbNum){
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	0002      	movs	r2, r0
 80097e4:	1dfb      	adds	r3, r7, #7
 80097e6:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_LORASYMBTIMEOUT, &SymbNum, 1);
 80097e8:	1dfb      	adds	r3, r7, #7
 80097ea:	2201      	movs	r2, #1
 80097ec:	0019      	movs	r1, r3
 80097ee:	20a0      	movs	r0, #160	@ 0xa0
 80097f0:	f000 fcee 	bl	800a1d0 <SX126xWriteCommand>
}
 80097f4:	46c0      	nop			@ (mov r8, r8)
 80097f6:	46bd      	mov	sp, r7
 80097f8:	b002      	add	sp, #8
 80097fa:	bd80      	pop	{r7, pc}

080097fc <SX126xSetRegulatorMode>:

void SX126xSetRegulatorMode(RadioRegulatorMode_t mode){
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	0002      	movs	r2, r0
 8009804:	1dfb      	adds	r3, r7, #7
 8009806:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_REGULATORMODE, (uint8_t *)&mode, 1);
 8009808:	1dfb      	adds	r3, r7, #7
 800980a:	2201      	movs	r2, #1
 800980c:	0019      	movs	r1, r3
 800980e:	2096      	movs	r0, #150	@ 0x96
 8009810:	f000 fcde 	bl	800a1d0 <SX126xWriteCommand>
}
 8009814:	46c0      	nop			@ (mov r8, r8)
 8009816:	46bd      	mov	sp, r7
 8009818:	b002      	add	sp, #8
 800981a:	bd80      	pop	{r7, pc}

0800981c <SX126xCalibrateImage>:

void SX126xCalibrate(CalibrationParams_t calibParam){
	SX126xWriteCommand(RADIO_CALIBRATE, (uint8_t *)&calibParam, 1);
}

void SX126xCalibrateImage(uint32_t freq){
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
	uint8_t calFreq[2];

	if (freq > 900000000){
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a22      	ldr	r2, [pc, #136]	@ (80098b0 <SX126xCalibrateImage+0x94>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d907      	bls.n	800983c <SX126xCalibrateImage+0x20>
		calFreq[0] = 0xE1;
 800982c:	210c      	movs	r1, #12
 800982e:	187b      	adds	r3, r7, r1
 8009830:	22e1      	movs	r2, #225	@ 0xe1
 8009832:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xE9;
 8009834:	187b      	adds	r3, r7, r1
 8009836:	22e9      	movs	r2, #233	@ 0xe9
 8009838:	705a      	strb	r2, [r3, #1]
 800983a:	e02e      	b.n	800989a <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 850000000){
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a1d      	ldr	r2, [pc, #116]	@ (80098b4 <SX126xCalibrateImage+0x98>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d907      	bls.n	8009854 <SX126xCalibrateImage+0x38>
		calFreq[0] = 0xD7;
 8009844:	210c      	movs	r1, #12
 8009846:	187b      	adds	r3, r7, r1
 8009848:	22d7      	movs	r2, #215	@ 0xd7
 800984a:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xDB;
 800984c:	187b      	adds	r3, r7, r1
 800984e:	22db      	movs	r2, #219	@ 0xdb
 8009850:	705a      	strb	r2, [r3, #1]
 8009852:	e022      	b.n	800989a <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 770000000){
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a18      	ldr	r2, [pc, #96]	@ (80098b8 <SX126xCalibrateImage+0x9c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d907      	bls.n	800986c <SX126xCalibrateImage+0x50>
		calFreq[0] = 0xC1;
 800985c:	210c      	movs	r1, #12
 800985e:	187b      	adds	r3, r7, r1
 8009860:	22c1      	movs	r2, #193	@ 0xc1
 8009862:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0xC5;
 8009864:	187b      	adds	r3, r7, r1
 8009866:	22c5      	movs	r2, #197	@ 0xc5
 8009868:	705a      	strb	r2, [r3, #1]
 800986a:	e016      	b.n	800989a <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 460000000){
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a13      	ldr	r2, [pc, #76]	@ (80098bc <SX126xCalibrateImage+0xa0>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d907      	bls.n	8009884 <SX126xCalibrateImage+0x68>
		calFreq[0] = 0x75;
 8009874:	210c      	movs	r1, #12
 8009876:	187b      	adds	r3, r7, r1
 8009878:	2275      	movs	r2, #117	@ 0x75
 800987a:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0x81;
 800987c:	187b      	adds	r3, r7, r1
 800987e:	2281      	movs	r2, #129	@ 0x81
 8009880:	705a      	strb	r2, [r3, #1]
 8009882:	e00a      	b.n	800989a <SX126xCalibrateImage+0x7e>
	}
	else if (freq > 425000000){
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a0e      	ldr	r2, [pc, #56]	@ (80098c0 <SX126xCalibrateImage+0xa4>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d906      	bls.n	800989a <SX126xCalibrateImage+0x7e>
		calFreq[0] = 0x6B;
 800988c:	210c      	movs	r1, #12
 800988e:	187b      	adds	r3, r7, r1
 8009890:	226b      	movs	r2, #107	@ 0x6b
 8009892:	701a      	strb	r2, [r3, #0]
		calFreq[1] = 0x6F;
 8009894:	187b      	adds	r3, r7, r1
 8009896:	226f      	movs	r2, #111	@ 0x6f
 8009898:	705a      	strb	r2, [r3, #1]
	}
	SX126xWriteCommand(RADIO_CALIBRATEIMAGE, calFreq, 2);
 800989a:	230c      	movs	r3, #12
 800989c:	18fb      	adds	r3, r7, r3
 800989e:	2202      	movs	r2, #2
 80098a0:	0019      	movs	r1, r3
 80098a2:	2098      	movs	r0, #152	@ 0x98
 80098a4:	f000 fc94 	bl	800a1d0 <SX126xWriteCommand>
}
 80098a8:	46c0      	nop			@ (mov r8, r8)
 80098aa:	46bd      	mov	sp, r7
 80098ac:	b004      	add	sp, #16
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	35a4e900 	.word	0x35a4e900
 80098b4:	32a9f880 	.word	0x32a9f880
 80098b8:	2de54480 	.word	0x2de54480
 80098bc:	1b6b0b00 	.word	0x1b6b0b00
 80098c0:	1954fc40 	.word	0x1954fc40

080098c4 <SX126xSetPaConfig>:

void SX126xSetPaConfig(uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut){
 80098c4:	b5b0      	push	{r4, r5, r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	0005      	movs	r5, r0
 80098cc:	000c      	movs	r4, r1
 80098ce:	0010      	movs	r0, r2
 80098d0:	0019      	movs	r1, r3
 80098d2:	1dfb      	adds	r3, r7, #7
 80098d4:	1c2a      	adds	r2, r5, #0
 80098d6:	701a      	strb	r2, [r3, #0]
 80098d8:	1dbb      	adds	r3, r7, #6
 80098da:	1c22      	adds	r2, r4, #0
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	1d7b      	adds	r3, r7, #5
 80098e0:	1c02      	adds	r2, r0, #0
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	1d3b      	adds	r3, r7, #4
 80098e6:	1c0a      	adds	r2, r1, #0
 80098e8:	701a      	strb	r2, [r3, #0]
	uint8_t buf[4];

	buf[0] = paDutyCycle;
 80098ea:	210c      	movs	r1, #12
 80098ec:	187b      	adds	r3, r7, r1
 80098ee:	1dfa      	adds	r2, r7, #7
 80098f0:	7812      	ldrb	r2, [r2, #0]
 80098f2:	701a      	strb	r2, [r3, #0]
	buf[1] = hpMax;
 80098f4:	187b      	adds	r3, r7, r1
 80098f6:	1dba      	adds	r2, r7, #6
 80098f8:	7812      	ldrb	r2, [r2, #0]
 80098fa:	705a      	strb	r2, [r3, #1]
	buf[2] = deviceSel;
 80098fc:	187b      	adds	r3, r7, r1
 80098fe:	1d7a      	adds	r2, r7, #5
 8009900:	7812      	ldrb	r2, [r2, #0]
 8009902:	709a      	strb	r2, [r3, #2]
	buf[3] = paLut;
 8009904:	187b      	adds	r3, r7, r1
 8009906:	1d3a      	adds	r2, r7, #4
 8009908:	7812      	ldrb	r2, [r2, #0]
 800990a:	70da      	strb	r2, [r3, #3]
	SX126xWriteCommand(RADIO_SET_PACONFIG, buf, 4);
 800990c:	187b      	adds	r3, r7, r1
 800990e:	2204      	movs	r2, #4
 8009910:	0019      	movs	r1, r3
 8009912:	2095      	movs	r0, #149	@ 0x95
 8009914:	f000 fc5c 	bl	800a1d0 <SX126xWriteCommand>
}
 8009918:	46c0      	nop			@ (mov r8, r8)
 800991a:	46bd      	mov	sp, r7
 800991c:	b004      	add	sp, #16
 800991e:	bdb0      	pop	{r4, r5, r7, pc}

08009920 <SX126xSetDioIrqParams>:

void SX126xSetRxTxFallbackMode(uint8_t fallbackMode){
	SX126xWriteCommand(RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1);
}

void SX126xSetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask){
 8009920:	b5b0      	push	{r4, r5, r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	0005      	movs	r5, r0
 8009928:	000c      	movs	r4, r1
 800992a:	0010      	movs	r0, r2
 800992c:	0019      	movs	r1, r3
 800992e:	1dbb      	adds	r3, r7, #6
 8009930:	1c2a      	adds	r2, r5, #0
 8009932:	801a      	strh	r2, [r3, #0]
 8009934:	1d3b      	adds	r3, r7, #4
 8009936:	1c22      	adds	r2, r4, #0
 8009938:	801a      	strh	r2, [r3, #0]
 800993a:	1cbb      	adds	r3, r7, #2
 800993c:	1c02      	adds	r2, r0, #0
 800993e:	801a      	strh	r2, [r3, #0]
 8009940:	003b      	movs	r3, r7
 8009942:	1c0a      	adds	r2, r1, #0
 8009944:	801a      	strh	r2, [r3, #0]
	uint8_t buf[8];

	buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 8009946:	1dbb      	adds	r3, r7, #6
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	0a1b      	lsrs	r3, r3, #8
 800994c:	b29b      	uxth	r3, r3
 800994e:	b2da      	uxtb	r2, r3
 8009950:	2108      	movs	r1, #8
 8009952:	187b      	adds	r3, r7, r1
 8009954:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(irqMask & 0x00FF);
 8009956:	1dbb      	adds	r3, r7, #6
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	b2da      	uxtb	r2, r3
 800995c:	187b      	adds	r3, r7, r1
 800995e:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)((dio1Mask >> 8) & 0x00FF);
 8009960:	1d3b      	adds	r3, r7, #4
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	0a1b      	lsrs	r3, r3, #8
 8009966:	b29b      	uxth	r3, r3
 8009968:	b2da      	uxtb	r2, r3
 800996a:	187b      	adds	r3, r7, r1
 800996c:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)(dio1Mask & 0x00FF);
 800996e:	1d3b      	adds	r3, r7, #4
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	b2da      	uxtb	r2, r3
 8009974:	187b      	adds	r3, r7, r1
 8009976:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((dio2Mask >> 8) & 0x00FF);
 8009978:	1cbb      	adds	r3, r7, #2
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	0a1b      	lsrs	r3, r3, #8
 800997e:	b29b      	uxth	r3, r3
 8009980:	b2da      	uxtb	r2, r3
 8009982:	187b      	adds	r3, r7, r1
 8009984:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)(dio2Mask & 0x00FF);
 8009986:	1cbb      	adds	r3, r7, #2
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	b2da      	uxtb	r2, r3
 800998c:	187b      	adds	r3, r7, r1
 800998e:	715a      	strb	r2, [r3, #5]
	buf[6] = (uint8_t)((dio3Mask >> 8) & 0x00FF);
 8009990:	003b      	movs	r3, r7
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	0a1b      	lsrs	r3, r3, #8
 8009996:	b29b      	uxth	r3, r3
 8009998:	b2da      	uxtb	r2, r3
 800999a:	187b      	adds	r3, r7, r1
 800999c:	719a      	strb	r2, [r3, #6]
	buf[7] = (uint8_t)(dio3Mask & 0x00FF);
 800999e:	003b      	movs	r3, r7
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	187b      	adds	r3, r7, r1
 80099a6:	71da      	strb	r2, [r3, #7]
	SX126xWriteCommand(RADIO_CFG_DIOIRQ, buf, 8);
 80099a8:	187b      	adds	r3, r7, r1
 80099aa:	2208      	movs	r2, #8
 80099ac:	0019      	movs	r1, r3
 80099ae:	2008      	movs	r0, #8
 80099b0:	f000 fc0e 	bl	800a1d0 <SX126xWriteCommand>
}
 80099b4:	46c0      	nop			@ (mov r8, r8)
 80099b6:	46bd      	mov	sp, r7
 80099b8:	b004      	add	sp, #16
 80099ba:	bdb0      	pop	{r4, r5, r7, pc}

080099bc <SX126xGetIrqStatus>:

uint16_t SX126xGetIrqStatus(void){
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
	uint8_t irqStatus[2];

	SX126xReadCommand(RADIO_GET_IRQSTATUS, irqStatus, 2);
 80099c2:	1d3b      	adds	r3, r7, #4
 80099c4:	2202      	movs	r2, #2
 80099c6:	0019      	movs	r1, r3
 80099c8:	2012      	movs	r0, #18
 80099ca:	f000 fc39 	bl	800a240 <SX126xReadCommand>
	return (irqStatus[0] << 8) | irqStatus[1];
 80099ce:	1d3b      	adds	r3, r7, #4
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	021b      	lsls	r3, r3, #8
 80099d4:	b21a      	sxth	r2, r3
 80099d6:	1d3b      	adds	r3, r7, #4
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	b21b      	sxth	r3, r3
 80099dc:	4313      	orrs	r3, r2
 80099de:	b21b      	sxth	r3, r3
 80099e0:	b29b      	uxth	r3, r3
}
 80099e2:	0018      	movs	r0, r3
 80099e4:	46bd      	mov	sp, r7
 80099e6:	b002      	add	sp, #8
 80099e8:	bd80      	pop	{r7, pc}

080099ea <SX126xSetDio2AsRfSwitchCtrl>:

void SX126xSetDio2AsRfSwitchCtrl(uint8_t enable){
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	0002      	movs	r2, r0
 80099f2:	1dfb      	adds	r3, r7, #7
 80099f4:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_RFSWITCHMODE, &enable, 1);
 80099f6:	1dfb      	adds	r3, r7, #7
 80099f8:	2201      	movs	r2, #1
 80099fa:	0019      	movs	r1, r3
 80099fc:	209d      	movs	r0, #157	@ 0x9d
 80099fe:	f000 fbe7 	bl	800a1d0 <SX126xWriteCommand>
}
 8009a02:	46c0      	nop			@ (mov r8, r8)
 8009a04:	46bd      	mov	sp, r7
 8009a06:	b002      	add	sp, #8
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <SX126xSetRfFrequency>:
	buf[3] = (uint8_t)(timeout & 0xFF);

	SX126xWriteCommand(RADIO_SET_TCXOMODE, buf, 4);
}

void SX126xSetRfFrequency(uint32_t frequency){
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
	uint8_t buf[4];
	uint32_t freq = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]

	if (ImageCalibrated == false){
 8009a18:	4b1d      	ldr	r3, [pc, #116]	@ (8009a90 <SX126xSetRfFrequency+0x84>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	4053      	eors	r3, r2
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d006      	beq.n	8009a34 <SX126xSetRfFrequency+0x28>
		SX126xCalibrateImage(frequency);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	0018      	movs	r0, r3
 8009a2a:	f7ff fef7 	bl	800981c <SX126xCalibrateImage>
		ImageCalibrated = true;
 8009a2e:	4b18      	ldr	r3, [pc, #96]	@ (8009a90 <SX126xSetRfFrequency+0x84>)
 8009a30:	2201      	movs	r2, #1
 8009a32:	701a      	strb	r2, [r3, #0]
	}

	freq = (uint32_t)((double)frequency / (double)FREQ_STEP);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7f8 fcad 	bl	8002394 <__aeabi_ui2d>
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	4b15      	ldr	r3, [pc, #84]	@ (8009a94 <SX126xSetRfFrequency+0x88>)
 8009a3e:	f7f7 f997 	bl	8000d70 <__aeabi_ddiv>
 8009a42:	0002      	movs	r2, r0
 8009a44:	000b      	movs	r3, r1
 8009a46:	0010      	movs	r0, r2
 8009a48:	0019      	movs	r1, r3
 8009a4a:	f7f6 fd43 	bl	80004d4 <__aeabi_d2uiz>
 8009a4e:	0003      	movs	r3, r0
 8009a50:	60fb      	str	r3, [r7, #12]
	buf[0] = (uint8_t)((freq >> 24) & 0xFF);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	0e1b      	lsrs	r3, r3, #24
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	2108      	movs	r1, #8
 8009a5a:	187b      	adds	r3, r7, r1
 8009a5c:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((freq >> 16) & 0xFF);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	0c1b      	lsrs	r3, r3, #16
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	187b      	adds	r3, r7, r1
 8009a66:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)((freq >> 8) & 0xFF);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	0a1b      	lsrs	r3, r3, #8
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	187b      	adds	r3, r7, r1
 8009a70:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)(freq & 0xFF);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	187b      	adds	r3, r7, r1
 8009a78:	70da      	strb	r2, [r3, #3]
	SX126xWriteCommand(RADIO_SET_RFFREQUENCY, buf, 4);
 8009a7a:	187b      	adds	r3, r7, r1
 8009a7c:	2204      	movs	r2, #4
 8009a7e:	0019      	movs	r1, r3
 8009a80:	2086      	movs	r0, #134	@ 0x86
 8009a82:	f000 fba5 	bl	800a1d0 <SX126xWriteCommand>
}
 8009a86:	46c0      	nop			@ (mov r8, r8)
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	b004      	add	sp, #16
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	46c0      	nop			@ (mov r8, r8)
 8009a90:	200004d0 	.word	0x200004d0
 8009a94:	3fee8480 	.word	0x3fee8480

08009a98 <SX126xSetPacketType>:

void SX126xSetPacketType(RadioPacketTypes_t packetType){
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	0002      	movs	r2, r0
 8009aa0:	1dfb      	adds	r3, r7, #7
 8009aa2:	701a      	strb	r2, [r3, #0]
	// Save packet type internally to avoid questioning the radio
	PacketType = packetType;
 8009aa4:	1dfb      	adds	r3, r7, #7
 8009aa6:	781a      	ldrb	r2, [r3, #0]
 8009aa8:	4b05      	ldr	r3, [pc, #20]	@ (8009ac0 <SX126xSetPacketType+0x28>)
 8009aaa:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_PACKETTYPE, (uint8_t *)&packetType, 1);
 8009aac:	1dfb      	adds	r3, r7, #7
 8009aae:	2201      	movs	r2, #1
 8009ab0:	0019      	movs	r1, r3
 8009ab2:	208a      	movs	r0, #138	@ 0x8a
 8009ab4:	f000 fb8c 	bl	800a1d0 <SX126xWriteCommand>
}
 8009ab8:	46c0      	nop			@ (mov r8, r8)
 8009aba:	46bd      	mov	sp, r7
 8009abc:	b002      	add	sp, #8
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	200004c9 	.word	0x200004c9

08009ac4 <SX126xGetPacketType>:

RadioPacketTypes_t SX126xGetPacketType(void){
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
	return PacketType;
 8009ac8:	4b02      	ldr	r3, [pc, #8]	@ (8009ad4 <SX126xGetPacketType+0x10>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
}
 8009acc:	0018      	movs	r0, r3
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	46c0      	nop			@ (mov r8, r8)
 8009ad4:	200004c9 	.word	0x200004c9

08009ad8 <SX126xSetTxParams>:

void SX126xSetTxParams(int8_t power, RadioRampTimes_t rampTime){
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	0002      	movs	r2, r0
 8009ae0:	1dfb      	adds	r3, r7, #7
 8009ae2:	701a      	strb	r2, [r3, #0]
 8009ae4:	1dbb      	adds	r3, r7, #6
 8009ae6:	1c0a      	adds	r2, r1, #0
 8009ae8:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];

	if (SX126xGetPaSelect(0) == SX1261){
 8009aea:	2000      	movs	r0, #0
 8009aec:	f000 fd2d 	bl	800a54a <SX126xGetPaSelect>
 8009af0:	0003      	movs	r3, r0
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d128      	bne.n	8009b48 <SX126xSetTxParams+0x70>
		if (power == 15){
 8009af6:	1dfb      	adds	r3, r7, #7
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	b25b      	sxtb	r3, r3
 8009afc:	2b0f      	cmp	r3, #15
 8009afe:	d106      	bne.n	8009b0e <SX126xSetTxParams+0x36>
			SX126xSetPaConfig(0x06, 0x00, 0x01, 0x01);
 8009b00:	2301      	movs	r3, #1
 8009b02:	2201      	movs	r2, #1
 8009b04:	2100      	movs	r1, #0
 8009b06:	2006      	movs	r0, #6
 8009b08:	f7ff fedc 	bl	80098c4 <SX126xSetPaConfig>
 8009b0c:	e005      	b.n	8009b1a <SX126xSetTxParams+0x42>
		}
		else{
			SX126xSetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009b0e:	2301      	movs	r3, #1
 8009b10:	2201      	movs	r2, #1
 8009b12:	2100      	movs	r1, #0
 8009b14:	2004      	movs	r0, #4
 8009b16:	f7ff fed5 	bl	80098c4 <SX126xSetPaConfig>
		}
		if (power >= 14){
 8009b1a:	1dfb      	adds	r3, r7, #7
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	b25b      	sxtb	r3, r3
 8009b20:	2b0d      	cmp	r3, #13
 8009b22:	dd03      	ble.n	8009b2c <SX126xSetTxParams+0x54>
			power = 14;
 8009b24:	1dfb      	adds	r3, r7, #7
 8009b26:	220e      	movs	r2, #14
 8009b28:	701a      	strb	r2, [r3, #0]
 8009b2a:	e007      	b.n	8009b3c <SX126xSetTxParams+0x64>
		}
		else if (power < -17){
 8009b2c:	1dfb      	adds	r3, r7, #7
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	b25b      	sxtb	r3, r3
 8009b32:	3311      	adds	r3, #17
 8009b34:	da02      	bge.n	8009b3c <SX126xSetTxParams+0x64>
			power = -17;
 8009b36:	1dfb      	adds	r3, r7, #7
 8009b38:	22ef      	movs	r2, #239	@ 0xef
 8009b3a:	701a      	strb	r2, [r3, #0]
		}
		SX126xWriteRegister(REG_OCP, 0x18); // current max is 80 mA for the whole device
 8009b3c:	4b21      	ldr	r3, [pc, #132]	@ (8009bc4 <SX126xSetTxParams+0xec>)
 8009b3e:	2118      	movs	r1, #24
 8009b40:	0018      	movs	r0, r3
 8009b42:	f000 fbfd 	bl	800a340 <SX126xWriteRegister>
 8009b46:	e029      	b.n	8009b9c <SX126xSetTxParams+0xc4>
	}
	else {
		// WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
		// RegTxClampConfig = @address 0x08D8
		SX126xWriteRegister(0x08D8, SX126xReadRegister(0x08D8) | (0x0F << 1));
 8009b48:	4b1f      	ldr	r3, [pc, #124]	@ (8009bc8 <SX126xSetTxParams+0xf0>)
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f000 fc52 	bl	800a3f4 <SX126xReadRegister>
 8009b50:	0003      	movs	r3, r0
 8009b52:	001a      	movs	r2, r3
 8009b54:	231e      	movs	r3, #30
 8009b56:	4313      	orrs	r3, r2
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8009bc8 <SX126xSetTxParams+0xf0>)
 8009b5c:	0019      	movs	r1, r3
 8009b5e:	0010      	movs	r0, r2
 8009b60:	f000 fbee 	bl	800a340 <SX126xWriteRegister>
		// WORKAROUND END
		SX126xSetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009b64:	2301      	movs	r3, #1
 8009b66:	2200      	movs	r2, #0
 8009b68:	2107      	movs	r1, #7
 8009b6a:	2004      	movs	r0, #4
 8009b6c:	f7ff feaa 	bl	80098c4 <SX126xSetPaConfig>
		if (power > 22){
 8009b70:	1dfb      	adds	r3, r7, #7
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	b25b      	sxtb	r3, r3
 8009b76:	2b16      	cmp	r3, #22
 8009b78:	dd03      	ble.n	8009b82 <SX126xSetTxParams+0xaa>
			power = 22;
 8009b7a:	1dfb      	adds	r3, r7, #7
 8009b7c:	2216      	movs	r2, #22
 8009b7e:	701a      	strb	r2, [r3, #0]
 8009b80:	e007      	b.n	8009b92 <SX126xSetTxParams+0xba>
		}
		else if (power < -9){
 8009b82:	1dfb      	adds	r3, r7, #7
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	b25b      	sxtb	r3, r3
 8009b88:	3309      	adds	r3, #9
 8009b8a:	da02      	bge.n	8009b92 <SX126xSetTxParams+0xba>
			power = -9;
 8009b8c:	1dfb      	adds	r3, r7, #7
 8009b8e:	22f7      	movs	r2, #247	@ 0xf7
 8009b90:	701a      	strb	r2, [r3, #0]
		}
		SX126xWriteRegister(REG_OCP, 0x38); // current max 160mA for the whole device
 8009b92:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc4 <SX126xSetTxParams+0xec>)
 8009b94:	2138      	movs	r1, #56	@ 0x38
 8009b96:	0018      	movs	r0, r3
 8009b98:	f000 fbd2 	bl	800a340 <SX126xWriteRegister>
	}
	buf[0] = power;
 8009b9c:	1dfb      	adds	r3, r7, #7
 8009b9e:	781a      	ldrb	r2, [r3, #0]
 8009ba0:	210c      	movs	r1, #12
 8009ba2:	187b      	adds	r3, r7, r1
 8009ba4:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)rampTime;
 8009ba6:	187b      	adds	r3, r7, r1
 8009ba8:	1dba      	adds	r2, r7, #6
 8009baa:	7812      	ldrb	r2, [r2, #0]
 8009bac:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009bae:	187b      	adds	r3, r7, r1
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	0019      	movs	r1, r3
 8009bb4:	208e      	movs	r0, #142	@ 0x8e
 8009bb6:	f000 fb0b 	bl	800a1d0 <SX126xWriteCommand>
}
 8009bba:	46c0      	nop			@ (mov r8, r8)
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	b004      	add	sp, #16
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	46c0      	nop			@ (mov r8, r8)
 8009bc4:	000008e7 	.word	0x000008e7
 8009bc8:	000008d8 	.word	0x000008d8

08009bcc <SX126xSetModulationParams>:

void SX126xSetModulationParams(ModulationParams_t *modulationParams){
 8009bcc:	b5b0      	push	{r4, r5, r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint32_t tempVal = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	617b      	str	r3, [r7, #20]
	uint8_t buf[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8009bd8:	2308      	movs	r3, #8
 8009bda:	18fb      	adds	r3, r7, r3
 8009bdc:	4a49      	ldr	r2, [pc, #292]	@ (8009d04 <SX126xSetModulationParams+0x138>)
 8009bde:	ca03      	ldmia	r2!, {r0, r1}
 8009be0:	c303      	stmia	r3!, {r0, r1}

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != modulationParams->PacketType){
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	781a      	ldrb	r2, [r3, #0]
 8009be6:	4b48      	ldr	r3, [pc, #288]	@ (8009d08 <SX126xSetModulationParams+0x13c>)
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d004      	beq.n	8009bf8 <SX126xSetModulationParams+0x2c>
		SX126xSetPacketType(modulationParams->PacketType);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	0018      	movs	r0, r3
 8009bf4:	f7ff ff50 	bl	8009a98 <SX126xSetPacketType>
	}

	switch (modulationParams->PacketType){
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <SX126xSetModulationParams+0x3a>
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d05e      	beq.n	8009cc2 <SX126xSetModulationParams+0xf6>

			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
		break;
		case PACKET_TYPE_NONE:
		default:
		return;
 8009c04:	e07b      	b.n	8009cfe <SX126xSetModulationParams+0x132>
			n = 8;
 8009c06:	2513      	movs	r5, #19
 8009c08:	197b      	adds	r3, r7, r5
 8009c0a:	2208      	movs	r2, #8
 8009c0c:	701a      	strb	r2, [r3, #0]
			tempVal = (uint32_t)(32 * ((double)XTAL_FREQ / (double)modulationParams->Params.Gfsk.BitRate));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	0018      	movs	r0, r3
 8009c14:	f7f8 fbbe 	bl	8002394 <__aeabi_ui2d>
 8009c18:	0002      	movs	r2, r0
 8009c1a:	000b      	movs	r3, r1
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	493b      	ldr	r1, [pc, #236]	@ (8009d0c <SX126xSetModulationParams+0x140>)
 8009c20:	f7f7 f8a6 	bl	8000d70 <__aeabi_ddiv>
 8009c24:	0002      	movs	r2, r0
 8009c26:	000b      	movs	r3, r1
 8009c28:	0010      	movs	r0, r2
 8009c2a:	0019      	movs	r1, r3
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4b38      	ldr	r3, [pc, #224]	@ (8009d10 <SX126xSetModulationParams+0x144>)
 8009c30:	f7f7 fce2 	bl	80015f8 <__aeabi_dmul>
 8009c34:	0002      	movs	r2, r0
 8009c36:	000b      	movs	r3, r1
 8009c38:	0010      	movs	r0, r2
 8009c3a:	0019      	movs	r1, r3
 8009c3c:	f7f6 fc4a 	bl	80004d4 <__aeabi_d2uiz>
 8009c40:	0003      	movs	r3, r0
 8009c42:	617b      	str	r3, [r7, #20]
			buf[0] = (tempVal >> 16) & 0xFF;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	0c1b      	lsrs	r3, r3, #16
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	2408      	movs	r4, #8
 8009c4c:	193b      	adds	r3, r7, r4
 8009c4e:	701a      	strb	r2, [r3, #0]
			buf[1] = (tempVal >> 8) & 0xFF;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	0a1b      	lsrs	r3, r3, #8
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	193b      	adds	r3, r7, r4
 8009c58:	705a      	strb	r2, [r3, #1]
			buf[2] = tempVal & 0xFF;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	193b      	adds	r3, r7, r4
 8009c60:	709a      	strb	r2, [r3, #2]
			buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	7b1a      	ldrb	r2, [r3, #12]
 8009c66:	193b      	adds	r3, r7, r4
 8009c68:	70da      	strb	r2, [r3, #3]
			buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	7b5a      	ldrb	r2, [r3, #13]
 8009c6e:	193b      	adds	r3, r7, r4
 8009c70:	711a      	strb	r2, [r3, #4]
			tempVal = (uint32_t)((double)modulationParams->Params.Gfsk.Fdev / (double)FREQ_STEP);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	0018      	movs	r0, r3
 8009c78:	f7f8 fb8c 	bl	8002394 <__aeabi_ui2d>
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	4b25      	ldr	r3, [pc, #148]	@ (8009d14 <SX126xSetModulationParams+0x148>)
 8009c80:	f7f7 f876 	bl	8000d70 <__aeabi_ddiv>
 8009c84:	0002      	movs	r2, r0
 8009c86:	000b      	movs	r3, r1
 8009c88:	0010      	movs	r0, r2
 8009c8a:	0019      	movs	r1, r3
 8009c8c:	f7f6 fc22 	bl	80004d4 <__aeabi_d2uiz>
 8009c90:	0003      	movs	r3, r0
 8009c92:	617b      	str	r3, [r7, #20]
			buf[5] = (tempVal >> 16) & 0xFF;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	0c1b      	lsrs	r3, r3, #16
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	193b      	adds	r3, r7, r4
 8009c9c:	715a      	strb	r2, [r3, #5]
			buf[6] = (tempVal >> 8) & 0xFF;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	0a1b      	lsrs	r3, r3, #8
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	193b      	adds	r3, r7, r4
 8009ca6:	719a      	strb	r2, [r3, #6]
			buf[7] = (tempVal & 0xFF);
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	193b      	adds	r3, r7, r4
 8009cae:	71da      	strb	r2, [r3, #7]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 8009cb0:	197b      	adds	r3, r7, r5
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	193b      	adds	r3, r7, r4
 8009cb8:	0019      	movs	r1, r3
 8009cba:	208b      	movs	r0, #139	@ 0x8b
 8009cbc:	f000 fa88 	bl	800a1d0 <SX126xWriteCommand>
		break;
 8009cc0:	e01d      	b.n	8009cfe <SX126xSetModulationParams+0x132>
			n = 4;
 8009cc2:	2013      	movs	r0, #19
 8009cc4:	183b      	adds	r3, r7, r0
 8009cc6:	2204      	movs	r2, #4
 8009cc8:	701a      	strb	r2, [r3, #0]
			buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	7c1a      	ldrb	r2, [r3, #16]
 8009cce:	2108      	movs	r1, #8
 8009cd0:	187b      	adds	r3, r7, r1
 8009cd2:	701a      	strb	r2, [r3, #0]
			buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	7c5a      	ldrb	r2, [r3, #17]
 8009cd8:	187b      	adds	r3, r7, r1
 8009cda:	705a      	strb	r2, [r3, #1]
			buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	7c9a      	ldrb	r2, [r3, #18]
 8009ce0:	187b      	adds	r3, r7, r1
 8009ce2:	709a      	strb	r2, [r3, #2]
			buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	7cda      	ldrb	r2, [r3, #19]
 8009ce8:	187b      	adds	r3, r7, r1
 8009cea:	70da      	strb	r2, [r3, #3]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 8009cec:	183b      	adds	r3, r7, r0
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	187b      	adds	r3, r7, r1
 8009cf4:	0019      	movs	r1, r3
 8009cf6:	208b      	movs	r0, #139	@ 0x8b
 8009cf8:	f000 fa6a 	bl	800a1d0 <SX126xWriteCommand>
		break;
 8009cfc:	46c0      	nop			@ (mov r8, r8)
	}
}
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	b006      	add	sp, #24
 8009d02:	bdb0      	pop	{r4, r5, r7, pc}
 8009d04:	0800b6dc 	.word	0x0800b6dc
 8009d08:	200004c9 	.word	0x200004c9
 8009d0c:	417e8480 	.word	0x417e8480
 8009d10:	40400000 	.word	0x40400000
 8009d14:	3fee8480 	.word	0x3fee8480

08009d18 <SX126xSetPacketParams>:

void SX126xSetPacketParams(PacketParams_t *packetParams){
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint8_t crcVal = 0;
 8009d20:	2316      	movs	r3, #22
 8009d22:	18fb      	adds	r3, r7, r3
 8009d24:	2200      	movs	r2, #0
 8009d26:	701a      	strb	r2, [r3, #0]
	uint8_t buf[9] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8009d28:	230c      	movs	r3, #12
 8009d2a:	18fb      	adds	r3, r7, r3
 8009d2c:	4a4d      	ldr	r2, [pc, #308]	@ (8009e64 <SX126xSetPacketParams+0x14c>)
 8009d2e:	ca03      	ldmia	r2!, {r0, r1}
 8009d30:	c303      	stmia	r3!, {r0, r1}
 8009d32:	7812      	ldrb	r2, [r2, #0]
 8009d34:	701a      	strb	r2, [r3, #0]

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != packetParams->PacketType){
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	781a      	ldrb	r2, [r3, #0]
 8009d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8009e68 <SX126xSetPacketParams+0x150>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d004      	beq.n	8009d4c <SX126xSetPacketParams+0x34>
		SX126xSetPacketType(packetParams->PacketType);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	0018      	movs	r0, r3
 8009d48:	f7ff fea6 	bl	8009a98 <SX126xSetPacketType>
	}

	switch (packetParams->PacketType){
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <SX126xSetPacketParams+0x42>
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d056      	beq.n	8009e06 <SX126xSetPacketParams+0xee>
			buf[4] = packetParams->Params.LoRa.CrcMode;
			buf[5] = packetParams->Params.LoRa.InvertIQ;
		break;
		default:
		case PACKET_TYPE_NONE:
		return;
 8009d58:	e081      	b.n	8009e5e <SX126xSetPacketParams+0x146>
			if (packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM){
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	7a5b      	ldrb	r3, [r3, #9]
 8009d5e:	2bf1      	cmp	r3, #241	@ 0xf1
 8009d60:	d10c      	bne.n	8009d7c <SX126xSetPacketParams+0x64>
				SX126xSetCrcSeed(CRC_IBM_SEED);
 8009d62:	4b42      	ldr	r3, [pc, #264]	@ (8009e6c <SX126xSetPacketParams+0x154>)
 8009d64:	0018      	movs	r0, r3
 8009d66:	f7ff fb93 	bl	8009490 <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_IBM);
 8009d6a:	4b41      	ldr	r3, [pc, #260]	@ (8009e70 <SX126xSetPacketParams+0x158>)
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	f7ff fbb5 	bl	80094dc <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES;
 8009d72:	2316      	movs	r3, #22
 8009d74:	18fb      	adds	r3, r7, r3
 8009d76:	2202      	movs	r2, #2
 8009d78:	701a      	strb	r2, [r3, #0]
 8009d7a:	e015      	b.n	8009da8 <SX126xSetPacketParams+0x90>
			else if (packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT){
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	7a5b      	ldrb	r3, [r3, #9]
 8009d80:	2bf2      	cmp	r3, #242	@ 0xf2
 8009d82:	d10c      	bne.n	8009d9e <SX126xSetPacketParams+0x86>
				SX126xSetCrcSeed(CRC_CCITT_SEED);
 8009d84:	4b3b      	ldr	r3, [pc, #236]	@ (8009e74 <SX126xSetPacketParams+0x15c>)
 8009d86:	0018      	movs	r0, r3
 8009d88:	f7ff fb82 	bl	8009490 <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_CCITT);
 8009d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8009e78 <SX126xSetPacketParams+0x160>)
 8009d8e:	0018      	movs	r0, r3
 8009d90:	f7ff fba4 	bl	80094dc <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES_INV;
 8009d94:	2316      	movs	r3, #22
 8009d96:	18fb      	adds	r3, r7, r3
 8009d98:	2206      	movs	r2, #6
 8009d9a:	701a      	strb	r2, [r3, #0]
 8009d9c:	e004      	b.n	8009da8 <SX126xSetPacketParams+0x90>
				crcVal = packetParams->Params.Gfsk.CrcLength;
 8009d9e:	2316      	movs	r3, #22
 8009da0:	18fb      	adds	r3, r7, r3
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	7a52      	ldrb	r2, [r2, #9]
 8009da6:	701a      	strb	r2, [r3, #0]
			n = 9;
 8009da8:	2317      	movs	r3, #23
 8009daa:	18fb      	adds	r3, r7, r3
 8009dac:	2209      	movs	r2, #9
 8009dae:	701a      	strb	r2, [r3, #0]
			buf[0] = (packetParams->Params.Gfsk.PreambleLength >> 8) & 0xFF;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	885b      	ldrh	r3, [r3, #2]
 8009db4:	0a1b      	lsrs	r3, r3, #8
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	210c      	movs	r1, #12
 8009dbc:	187b      	adds	r3, r7, r1
 8009dbe:	701a      	strb	r2, [r3, #0]
			buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	885b      	ldrh	r3, [r3, #2]
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	187b      	adds	r3, r7, r1
 8009dc8:	705a      	strb	r2, [r3, #1]
			buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	791a      	ldrb	r2, [r3, #4]
 8009dce:	187b      	adds	r3, r7, r1
 8009dd0:	709a      	strb	r2, [r3, #2]
			buf[3] = (packetParams->Params.Gfsk.SyncWordLength /*<< 3*/); // convert from byte to bit
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	795a      	ldrb	r2, [r3, #5]
 8009dd6:	187b      	adds	r3, r7, r1
 8009dd8:	70da      	strb	r2, [r3, #3]
			buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	799a      	ldrb	r2, [r3, #6]
 8009dde:	187b      	adds	r3, r7, r1
 8009de0:	711a      	strb	r2, [r3, #4]
			buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	79da      	ldrb	r2, [r3, #7]
 8009de6:	187b      	adds	r3, r7, r1
 8009de8:	715a      	strb	r2, [r3, #5]
			buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	7a1a      	ldrb	r2, [r3, #8]
 8009dee:	187b      	adds	r3, r7, r1
 8009df0:	719a      	strb	r2, [r3, #6]
			buf[7] = crcVal;
 8009df2:	187b      	adds	r3, r7, r1
 8009df4:	2216      	movs	r2, #22
 8009df6:	18ba      	adds	r2, r7, r2
 8009df8:	7812      	ldrb	r2, [r2, #0]
 8009dfa:	71da      	strb	r2, [r3, #7]
			buf[8] = packetParams->Params.Gfsk.DcFree;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	7a9a      	ldrb	r2, [r3, #10]
 8009e00:	187b      	adds	r3, r7, r1
 8009e02:	721a      	strb	r2, [r3, #8]
		break;
 8009e04:	e021      	b.n	8009e4a <SX126xSetPacketParams+0x132>
			n = 6;
 8009e06:	2317      	movs	r3, #23
 8009e08:	18fb      	adds	r3, r7, r3
 8009e0a:	2206      	movs	r2, #6
 8009e0c:	701a      	strb	r2, [r3, #0]
			buf[0] = (packetParams->Params.LoRa.PreambleLength >> 8) & 0xFF;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	899b      	ldrh	r3, [r3, #12]
 8009e12:	0a1b      	lsrs	r3, r3, #8
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	210c      	movs	r1, #12
 8009e1a:	187b      	adds	r3, r7, r1
 8009e1c:	701a      	strb	r2, [r3, #0]
			buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	899b      	ldrh	r3, [r3, #12]
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	187b      	adds	r3, r7, r1
 8009e26:	705a      	strb	r2, [r3, #1]
			buf[2] = packetParams->Params.LoRa.HeaderType;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	7b9a      	ldrb	r2, [r3, #14]
 8009e2c:	187b      	adds	r3, r7, r1
 8009e2e:	709a      	strb	r2, [r3, #2]
			buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	7bda      	ldrb	r2, [r3, #15]
 8009e34:	187b      	adds	r3, r7, r1
 8009e36:	70da      	strb	r2, [r3, #3]
			buf[4] = packetParams->Params.LoRa.CrcMode;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	7c1a      	ldrb	r2, [r3, #16]
 8009e3c:	187b      	adds	r3, r7, r1
 8009e3e:	711a      	strb	r2, [r3, #4]
			buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	7c5a      	ldrb	r2, [r3, #17]
 8009e44:	187b      	adds	r3, r7, r1
 8009e46:	715a      	strb	r2, [r3, #5]
		break;
 8009e48:	46c0      	nop			@ (mov r8, r8)
	}
	SX126xWriteCommand(RADIO_SET_PACKETPARAMS, buf, n);
 8009e4a:	2317      	movs	r3, #23
 8009e4c:	18fb      	adds	r3, r7, r3
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	230c      	movs	r3, #12
 8009e54:	18fb      	adds	r3, r7, r3
 8009e56:	0019      	movs	r1, r3
 8009e58:	208c      	movs	r0, #140	@ 0x8c
 8009e5a:	f000 f9b9 	bl	800a1d0 <SX126xWriteCommand>
}
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	b006      	add	sp, #24
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	0800b6e4 	.word	0x0800b6e4
 8009e68:	200004c9 	.word	0x200004c9
 8009e6c:	0000ffff 	.word	0x0000ffff
 8009e70:	00008005 	.word	0x00008005
 8009e74:	00001d0f 	.word	0x00001d0f
 8009e78:	00001021 	.word	0x00001021

08009e7c <SX126xSetCadParams>:

void SX126xSetCadParams(RadioLoRaCadSymbols_t cadSymbolNum, uint8_t cadDetPeak, uint8_t cadDetMin, RadioCadExitModes_t cadExitMode, uint32_t cadTimeout){
 8009e7c:	b5b0      	push	{r4, r5, r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	0005      	movs	r5, r0
 8009e84:	000c      	movs	r4, r1
 8009e86:	0010      	movs	r0, r2
 8009e88:	0019      	movs	r1, r3
 8009e8a:	1dfb      	adds	r3, r7, #7
 8009e8c:	1c2a      	adds	r2, r5, #0
 8009e8e:	701a      	strb	r2, [r3, #0]
 8009e90:	1dbb      	adds	r3, r7, #6
 8009e92:	1c22      	adds	r2, r4, #0
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	1d7b      	adds	r3, r7, #5
 8009e98:	1c02      	adds	r2, r0, #0
 8009e9a:	701a      	strb	r2, [r3, #0]
 8009e9c:	1d3b      	adds	r3, r7, #4
 8009e9e:	1c0a      	adds	r2, r1, #0
 8009ea0:	701a      	strb	r2, [r3, #0]
	uint8_t buf[7];

	buf[0] = (uint8_t)cadSymbolNum;
 8009ea2:	2108      	movs	r1, #8
 8009ea4:	187b      	adds	r3, r7, r1
 8009ea6:	1dfa      	adds	r2, r7, #7
 8009ea8:	7812      	ldrb	r2, [r2, #0]
 8009eaa:	701a      	strb	r2, [r3, #0]
	buf[1] = cadDetPeak;
 8009eac:	187b      	adds	r3, r7, r1
 8009eae:	1dba      	adds	r2, r7, #6
 8009eb0:	7812      	ldrb	r2, [r2, #0]
 8009eb2:	705a      	strb	r2, [r3, #1]
	buf[2] = cadDetMin;
 8009eb4:	187b      	adds	r3, r7, r1
 8009eb6:	1d7a      	adds	r2, r7, #5
 8009eb8:	7812      	ldrb	r2, [r2, #0]
 8009eba:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t)cadExitMode;
 8009ebc:	187b      	adds	r3, r7, r1
 8009ebe:	1d3a      	adds	r2, r7, #4
 8009ec0:	7812      	ldrb	r2, [r2, #0]
 8009ec2:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t)((cadTimeout >> 16) & 0xFF);
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	0c1b      	lsrs	r3, r3, #16
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	187b      	adds	r3, r7, r1
 8009ecc:	711a      	strb	r2, [r3, #4]
	buf[5] = (uint8_t)((cadTimeout >> 8) & 0xFF);
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	0a1b      	lsrs	r3, r3, #8
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	187b      	adds	r3, r7, r1
 8009ed6:	715a      	strb	r2, [r3, #5]
	buf[6] = (uint8_t)(cadTimeout & 0xFF);
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	187b      	adds	r3, r7, r1
 8009ede:	719a      	strb	r2, [r3, #6]
	SX126xWriteCommand(RADIO_SET_CADPARAMS, buf, 7);
 8009ee0:	187b      	adds	r3, r7, r1
 8009ee2:	2207      	movs	r2, #7
 8009ee4:	0019      	movs	r1, r3
 8009ee6:	2088      	movs	r0, #136	@ 0x88
 8009ee8:	f000 f972 	bl	800a1d0 <SX126xWriteCommand>
	OperatingMode = MODE_CAD;
 8009eec:	4b03      	ldr	r3, [pc, #12]	@ (8009efc <SX126xSetCadParams+0x80>)
 8009eee:	2207      	movs	r2, #7
 8009ef0:	701a      	strb	r2, [r3, #0]
}
 8009ef2:	46c0      	nop			@ (mov r8, r8)
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b004      	add	sp, #16
 8009ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8009efa:	46c0      	nop			@ (mov r8, r8)
 8009efc:	200004c8 	.word	0x200004c8

08009f00 <SX126xSetBufferBaseAddress>:

void SX126xSetBufferBaseAddress(uint8_t txBaseAddress, uint8_t rxBaseAddress){
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	0002      	movs	r2, r0
 8009f08:	1dfb      	adds	r3, r7, #7
 8009f0a:	701a      	strb	r2, [r3, #0]
 8009f0c:	1dbb      	adds	r3, r7, #6
 8009f0e:	1c0a      	adds	r2, r1, #0
 8009f10:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 8009f12:	210c      	movs	r1, #12
 8009f14:	187b      	adds	r3, r7, r1
 8009f16:	1dfa      	adds	r2, r7, #7
 8009f18:	7812      	ldrb	r2, [r2, #0]
 8009f1a:	701a      	strb	r2, [r3, #0]
	buf[1] = rxBaseAddress;
 8009f1c:	187b      	adds	r3, r7, r1
 8009f1e:	1dba      	adds	r2, r7, #6
 8009f20:	7812      	ldrb	r2, [r2, #0]
 8009f22:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_SET_BUFFERBASEADDRESS, buf, 2);
 8009f24:	187b      	adds	r3, r7, r1
 8009f26:	2202      	movs	r2, #2
 8009f28:	0019      	movs	r1, r3
 8009f2a:	208f      	movs	r0, #143	@ 0x8f
 8009f2c:	f000 f950 	bl	800a1d0 <SX126xWriteCommand>
}
 8009f30:	46c0      	nop			@ (mov r8, r8)
 8009f32:	46bd      	mov	sp, r7
 8009f34:	b004      	add	sp, #16
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <SX126xGetRssiInst>:
	SX126xReadCommand(RADIO_GET_STATUS, (uint8_t *)&stat, 1);
	status.Value = stat;
	return status;
}

int8_t SX126xGetRssiInst(void){
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
	uint8_t buf[1];
	int8_t rssi = 0;
 8009f3e:	1dfb      	adds	r3, r7, #7
 8009f40:	2200      	movs	r2, #0
 8009f42:	701a      	strb	r2, [r3, #0]

	SX126xReadCommand(RADIO_GET_RSSIINST, buf, 1);
 8009f44:	1d3b      	adds	r3, r7, #4
 8009f46:	2201      	movs	r2, #1
 8009f48:	0019      	movs	r1, r3
 8009f4a:	2015      	movs	r0, #21
 8009f4c:	f000 f978 	bl	800a240 <SX126xReadCommand>
	rssi = -buf[0] >> 1;
 8009f50:	1d3b      	adds	r3, r7, #4
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	425b      	negs	r3, r3
 8009f56:	105a      	asrs	r2, r3, #1
 8009f58:	1dfb      	adds	r3, r7, #7
 8009f5a:	701a      	strb	r2, [r3, #0]
	return rssi;
 8009f5c:	1dfb      	adds	r3, r7, #7
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	b25b      	sxtb	r3, r3
}
 8009f62:	0018      	movs	r0, r3
 8009f64:	46bd      	mov	sp, r7
 8009f66:	b002      	add	sp, #8
 8009f68:	bd80      	pop	{r7, pc}
	...

08009f6c <SX126xGetRxBufferStatus>:

void SX126xGetRxBufferStatus(uint8_t *payloadLength, uint8_t *rxStartBufferPointer){
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
	uint8_t status[2];

	SX126xReadCommand(RADIO_GET_RXBUFFERSTATUS, status, 2);
 8009f76:	230c      	movs	r3, #12
 8009f78:	18fb      	adds	r3, r7, r3
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	0019      	movs	r1, r3
 8009f7e:	2013      	movs	r0, #19
 8009f80:	f000 f95e 	bl	800a240 <SX126xReadCommand>
	// In case of LORA fixed header, the payloadLength is obtained by reading
	// the register REG_LR_PAYLOADLENGTH
	if ((SX126xGetPacketType() == PACKET_TYPE_LORA) && (SX126xReadRegister(REG_LR_PACKETPARAMS) >> 7 == 1)){
 8009f84:	f7ff fd9e 	bl	8009ac4 <SX126xGetPacketType>
 8009f88:	0003      	movs	r3, r0
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d111      	bne.n	8009fb2 <SX126xGetRxBufferStatus+0x46>
 8009f8e:	4b10      	ldr	r3, [pc, #64]	@ (8009fd0 <SX126xGetRxBufferStatus+0x64>)
 8009f90:	0018      	movs	r0, r3
 8009f92:	f000 fa2f 	bl	800a3f4 <SX126xReadRegister>
 8009f96:	0003      	movs	r3, r0
 8009f98:	09db      	lsrs	r3, r3, #7
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d108      	bne.n	8009fb2 <SX126xGetRxBufferStatus+0x46>
		*payloadLength = SX126xReadRegister(REG_LR_PAYLOADLENGTH);
 8009fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd4 <SX126xGetRxBufferStatus+0x68>)
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f000 fa26 	bl	800a3f4 <SX126xReadRegister>
 8009fa8:	0003      	movs	r3, r0
 8009faa:	001a      	movs	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	701a      	strb	r2, [r3, #0]
 8009fb0:	e004      	b.n	8009fbc <SX126xGetRxBufferStatus+0x50>
	}
	else{
		*payloadLength = status[0];
 8009fb2:	230c      	movs	r3, #12
 8009fb4:	18fb      	adds	r3, r7, r3
 8009fb6:	781a      	ldrb	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	701a      	strb	r2, [r3, #0]
	}
	*rxStartBufferPointer = status[1];
 8009fbc:	230c      	movs	r3, #12
 8009fbe:	18fb      	adds	r3, r7, r3
 8009fc0:	785a      	ldrb	r2, [r3, #1]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	701a      	strb	r2, [r3, #0]
}
 8009fc6:	46c0      	nop			@ (mov r8, r8)
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	b004      	add	sp, #16
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	46c0      	nop			@ (mov r8, r8)
 8009fd0:	00000704 	.word	0x00000704
 8009fd4:	00000702 	.word	0x00000702

08009fd8 <SX126xGetPacketStatus>:

void SX126xGetPacketStatus(PacketStatus_t *pktStatus){
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
	uint8_t status[3];

	SX126xReadCommand(RADIO_GET_PACKETSTATUS, status, 3);
 8009fe0:	230c      	movs	r3, #12
 8009fe2:	18fb      	adds	r3, r7, r3
 8009fe4:	2203      	movs	r2, #3
 8009fe6:	0019      	movs	r1, r3
 8009fe8:	2014      	movs	r0, #20
 8009fea:	f000 f929 	bl	800a240 <SX126xReadCommand>

	pktStatus->packetType = SX126xGetPacketType();
 8009fee:	f7ff fd69 	bl	8009ac4 <SX126xGetPacketType>
 8009ff2:	0003      	movs	r3, r0
 8009ff4:	001a      	movs	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	701a      	strb	r2, [r3, #0]
	switch (pktStatus->packetType){
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <SX126xGetPacketStatus+0x30>
 800a002:	2b01      	cmp	r3, #1
 800a004:	d017      	beq.n	800a036 <SX126xGetPacketStatus+0x5e>
 800a006:	e032      	b.n	800a06e <SX126xGetPacketStatus+0x96>
		case PACKET_TYPE_GFSK:
			pktStatus->Params.Gfsk.RxStatus = status[0];
 800a008:	210c      	movs	r1, #12
 800a00a:	187b      	adds	r3, r7, r1
 800a00c:	781a      	ldrb	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	711a      	strb	r2, [r3, #4]
			pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a012:	187b      	adds	r3, r7, r1
 800a014:	785b      	ldrb	r3, [r3, #1]
 800a016:	425b      	negs	r3, r3
 800a018:	105b      	asrs	r3, r3, #1
 800a01a:	b25a      	sxtb	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	719a      	strb	r2, [r3, #6]
			pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a020:	187b      	adds	r3, r7, r1
 800a022:	789b      	ldrb	r3, [r3, #2]
 800a024:	425b      	negs	r3, r3
 800a026:	105b      	asrs	r3, r3, #1
 800a028:	b25a      	sxtb	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	715a      	strb	r2, [r3, #5]
			pktStatus->Params.Gfsk.FreqError = 0;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	609a      	str	r2, [r3, #8]
			break;
 800a034:	e025      	b.n	800a082 <SX126xGetPacketStatus+0xaa>

		case PACKET_TYPE_LORA:
			pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a036:	210c      	movs	r1, #12
 800a038:	187b      	adds	r3, r7, r1
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	425b      	negs	r3, r3
 800a03e:	105b      	asrs	r3, r3, #1
 800a040:	b25a      	sxtb	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	731a      	strb	r2, [r3, #12]
			// Returns SNR value [dB] rounded to the nearest integer value
			pktStatus->Params.LoRa.SnrPkt = (((int8_t)status[1]) + 2) >> 2;
 800a046:	187b      	adds	r3, r7, r1
 800a048:	785b      	ldrb	r3, [r3, #1]
 800a04a:	b25b      	sxtb	r3, r3
 800a04c:	3302      	adds	r3, #2
 800a04e:	109b      	asrs	r3, r3, #2
 800a050:	b25a      	sxtb	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	735a      	strb	r2, [r3, #13]
			pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a056:	187b      	adds	r3, r7, r1
 800a058:	789b      	ldrb	r3, [r3, #2]
 800a05a:	425b      	negs	r3, r3
 800a05c:	105b      	asrs	r3, r3, #1
 800a05e:	b25a      	sxtb	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	739a      	strb	r2, [r3, #14]
			pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a064:	4b09      	ldr	r3, [pc, #36]	@ (800a08c <SX126xGetPacketStatus+0xb4>)
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	611a      	str	r2, [r3, #16]
			break;
 800a06c:	e009      	b.n	800a082 <SX126xGetPacketStatus+0xaa>

		default:
		case PACKET_TYPE_NONE:
			// In that specific case, we set everything in the pktStatus to zeros
			// and reset the packet type accordingly
			memset(pktStatus, 0, sizeof(PacketStatus_t));
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2214      	movs	r2, #20
 800a072:	2100      	movs	r1, #0
 800a074:	0018      	movs	r0, r3
 800a076:	f000 fb7d 	bl	800a774 <memset>
			pktStatus->packetType = PACKET_TYPE_NONE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	220f      	movs	r2, #15
 800a07e:	701a      	strb	r2, [r3, #0]
		break;
 800a080:	46c0      	nop			@ (mov r8, r8)
	}
}
 800a082:	46c0      	nop			@ (mov r8, r8)
 800a084:	46bd      	mov	sp, r7
 800a086:	b004      	add	sp, #16
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	46c0      	nop			@ (mov r8, r8)
 800a08c:	200004cc 	.word	0x200004cc

0800a090 <SX126xClearIrqStatus>:
void SX126xClearDeviceErrors(void){
	uint8_t buf[2] = {0x00, 0x00};
	SX126xWriteCommand(RADIO_CLR_ERROR, buf, 2);
}

void SX126xClearIrqStatus(uint16_t irq){
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	0002      	movs	r2, r0
 800a098:	1dbb      	adds	r3, r7, #6
 800a09a:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2];

	buf[0] = (uint8_t)(((uint16_t)irq >> 8) & 0x00FF);
 800a09c:	1dbb      	adds	r3, r7, #6
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	0a1b      	lsrs	r3, r3, #8
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	210c      	movs	r1, #12
 800a0a8:	187b      	adds	r3, r7, r1
 800a0aa:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)((uint16_t)irq & 0x00FF);
 800a0ac:	1dbb      	adds	r3, r7, #6
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	187b      	adds	r3, r7, r1
 800a0b4:	705a      	strb	r2, [r3, #1]
	SX126xWriteCommand(RADIO_CLR_IRQSTATUS, buf, 2);
 800a0b6:	187b      	adds	r3, r7, r1
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	0019      	movs	r1, r3
 800a0bc:	2002      	movs	r0, #2
 800a0be:	f000 f887 	bl	800a1d0 <SX126xWriteCommand>
}
 800a0c2:	46c0      	nop			@ (mov r8, r8)
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	b004      	add	sp, #16
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <SX126xIoInit>:
extern SPI_HandleTypeDef hspi1;


bool dio3IsOutput = false;

void SX126xIoInit(void){
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 800a0d0:	4b03      	ldr	r3, [pc, #12]	@ (800a0e0 <SX126xIoInit+0x14>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	701a      	strb	r2, [r3, #0]

	SX126xReset();
 800a0d6:	f000 f805 	bl	800a0e4 <SX126xReset>
}
 800a0da:	46c0      	nop			@ (mov r8, r8)
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	200004d1 	.word	0x200004d1

0800a0e4 <SX126xReset>:

void SX126xIoDeInit(void){
	dio3IsOutput = false;
}

void SX126xReset(void){
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 800a0e8:	2380      	movs	r3, #128	@ 0x80
 800a0ea:	0059      	lsls	r1, r3, #1
 800a0ec:	23a0      	movs	r3, #160	@ 0xa0
 800a0ee:	05db      	lsls	r3, r3, #23
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	f7f9 fb92 	bl	800381c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800a0f8:	200a      	movs	r0, #10
 800a0fa:	f7f9 f819 	bl	8003130 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 800a0fe:	2380      	movs	r3, #128	@ 0x80
 800a100:	0059      	lsls	r1, r3, #1
 800a102:	23a0      	movs	r3, #160	@ 0xa0
 800a104:	05db      	lsls	r3, r3, #23
 800a106:	2201      	movs	r2, #1
 800a108:	0018      	movs	r0, r3
 800a10a:	f7f9 fb87 	bl	800381c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800a10e:	2014      	movs	r0, #20
 800a110:	f7f9 f80e 	bl	8003130 <HAL_Delay>
	dio3IsOutput = false;
 800a114:	4b02      	ldr	r3, [pc, #8]	@ (800a120 <SX126xReset+0x3c>)
 800a116:	2200      	movs	r2, #0
 800a118:	701a      	strb	r2, [r3, #0]
}
 800a11a:	46c0      	nop			@ (mov r8, r8)
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	200004d1 	.word	0x200004d1

0800a124 <SX126xWaitOnBusy>:

void SX126xWaitOnBusy(void){
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
	int timeout = 1000;
 800a12a:	23fa      	movs	r3, #250	@ 0xfa
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	607b      	str	r3, [r7, #4]
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 800a130:	e010      	b.n	800a154 <SX126xWaitOnBusy+0x30>
		for(int i=0; i<12000; i++)__NOP();
 800a132:	2300      	movs	r3, #0
 800a134:	603b      	str	r3, [r7, #0]
 800a136:	e003      	b.n	800a140 <SX126xWaitOnBusy+0x1c>
 800a138:	46c0      	nop			@ (mov r8, r8)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	3301      	adds	r3, #1
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	4a0c      	ldr	r2, [pc, #48]	@ (800a174 <SX126xWaitOnBusy+0x50>)
 800a144:	4293      	cmp	r3, r2
 800a146:	ddf7      	ble.n	800a138 <SX126xWaitOnBusy+0x14>
		timeout -= 1;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	607b      	str	r3, [r7, #4]
		if (timeout < 0){
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	db0b      	blt.n	800a16c <SX126xWaitOnBusy+0x48>
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 800a154:	2380      	movs	r3, #128	@ 0x80
 800a156:	009a      	lsls	r2, r3, #2
 800a158:	23a0      	movs	r3, #160	@ 0xa0
 800a15a:	05db      	lsls	r3, r3, #23
 800a15c:	0011      	movs	r1, r2
 800a15e:	0018      	movs	r0, r3
 800a160:	f7f9 fb30 	bl	80037c4 <HAL_GPIO_ReadPin>
 800a164:	0003      	movs	r3, r0
 800a166:	2b01      	cmp	r3, #1
 800a168:	d0e3      	beq.n	800a132 <SX126xWaitOnBusy+0xe>
 800a16a:	e000      	b.n	800a16e <SX126xWaitOnBusy+0x4a>
			return;
 800a16c:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 800a16e:	46bd      	mov	sp, r7
 800a170:	b002      	add	sp, #8
 800a172:	bd80      	pop	{r7, pc}
 800a174:	00002edf 	.word	0x00002edf

0800a178 <SX126xWakeup>:

void SX126xWakeup(void){
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 800a17e:	4b12      	ldr	r3, [pc, #72]	@ (800a1c8 <SX126xWakeup+0x50>)
 800a180:	2200      	movs	r2, #0
 800a182:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a184:	b672      	cpsid	i
}
 800a186:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800a188:	23a0      	movs	r3, #160	@ 0xa0
 800a18a:	05db      	lsls	r3, r3, #23
 800a18c:	2200      	movs	r2, #0
 800a18e:	2110      	movs	r1, #16
 800a190:	0018      	movs	r0, r3
 800a192:	f7f9 fb43 	bl	800381c <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_GET_STATUS, 0x00};
 800a196:	1d3b      	adds	r3, r7, #4
 800a198:	22c0      	movs	r2, #192	@ 0xc0
 800a19a:	801a      	strh	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800a19c:	23fa      	movs	r3, #250	@ 0xfa
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	1d39      	adds	r1, r7, #4
 800a1a2:	480a      	ldr	r0, [pc, #40]	@ (800a1cc <SX126xWakeup+0x54>)
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	f7fb fec5 	bl	8005f34 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800a1aa:	23a0      	movs	r3, #160	@ 0xa0
 800a1ac:	05db      	lsls	r3, r3, #23
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	2110      	movs	r1, #16
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f7f9 fb32 	bl	800381c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800a1b8:	f7ff ffb4 	bl	800a124 <SX126xWaitOnBusy>
  __ASM volatile ("cpsie i" : : : "memory");
 800a1bc:	b662      	cpsie	i
}
 800a1be:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
 800a1c0:	46c0      	nop			@ (mov r8, r8)
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	b002      	add	sp, #8
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	200004d1 	.word	0x200004d1
 800a1cc:	20000244 	.word	0x20000244

0800a1d0 <SX126xWriteCommand>:

void SX126xWriteCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 800a1d0:	b590      	push	{r4, r7, lr}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6039      	str	r1, [r7, #0]
 800a1d8:	0011      	movs	r1, r2
 800a1da:	1dfb      	adds	r3, r7, #7
 800a1dc:	1c02      	adds	r2, r0, #0
 800a1de:	701a      	strb	r2, [r3, #0]
 800a1e0:	1d3b      	adds	r3, r7, #4
 800a1e2:	1c0a      	adds	r2, r1, #0
 800a1e4:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800a1e6:	f7ff f8dd 	bl	80093a4 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800a1ea:	23a0      	movs	r3, #160	@ 0xa0
 800a1ec:	05db      	lsls	r3, r3, #23
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2110      	movs	r1, #16
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	f7f9 fb12 	bl	800381c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&command, 1, 1000);
 800a1f8:	23fa      	movs	r3, #250	@ 0xfa
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	1df9      	adds	r1, r7, #7
 800a1fe:	480f      	ldr	r0, [pc, #60]	@ (800a23c <SX126xWriteCommand+0x6c>)
 800a200:	2201      	movs	r2, #1
 800a202:	f7fb fe97 	bl	8005f34 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buffer, size, 1000);
 800a206:	23fa      	movs	r3, #250	@ 0xfa
 800a208:	009c      	lsls	r4, r3, #2
 800a20a:	1d3b      	adds	r3, r7, #4
 800a20c:	881a      	ldrh	r2, [r3, #0]
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	480a      	ldr	r0, [pc, #40]	@ (800a23c <SX126xWriteCommand+0x6c>)
 800a212:	0023      	movs	r3, r4
 800a214:	f7fb fe8e 	bl	8005f34 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800a218:	23a0      	movs	r3, #160	@ 0xa0
 800a21a:	05db      	lsls	r3, r3, #23
 800a21c:	2201      	movs	r2, #1
 800a21e:	2110      	movs	r1, #16
 800a220:	0018      	movs	r0, r3
 800a222:	f7f9 fafb 	bl	800381c <HAL_GPIO_WritePin>

	if (command != RADIO_SET_SLEEP)
 800a226:	1dfb      	adds	r3, r7, #7
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	2b84      	cmp	r3, #132	@ 0x84
 800a22c:	d001      	beq.n	800a232 <SX126xWriteCommand+0x62>
		SX126xWaitOnBusy();
 800a22e:	f7ff ff79 	bl	800a124 <SX126xWaitOnBusy>
}
 800a232:	46c0      	nop			@ (mov r8, r8)
 800a234:	46bd      	mov	sp, r7
 800a236:	b003      	add	sp, #12
 800a238:	bd90      	pop	{r4, r7, pc}
 800a23a:	46c0      	nop			@ (mov r8, r8)
 800a23c:	20000244 	.word	0x20000244

0800a240 <SX126xReadCommand>:

void SX126xReadCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 800a240:	b590      	push	{r4, r7, lr}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6039      	str	r1, [r7, #0]
 800a248:	0011      	movs	r1, r2
 800a24a:	1dfb      	adds	r3, r7, #7
 800a24c:	1c02      	adds	r2, r0, #0
 800a24e:	701a      	strb	r2, [r3, #0]
 800a250:	1d3b      	adds	r3, r7, #4
 800a252:	1c0a      	adds	r2, r1, #0
 800a254:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800a256:	f7ff f8a5 	bl	80093a4 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800a25a:	23a0      	movs	r3, #160	@ 0xa0
 800a25c:	05db      	lsls	r3, r3, #23
 800a25e:	2200      	movs	r2, #0
 800a260:	2110      	movs	r1, #16
 800a262:	0018      	movs	r0, r3
 800a264:	f7f9 fada 	bl	800381c <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)command, 0x00};
 800a268:	210c      	movs	r1, #12
 800a26a:	187b      	adds	r3, r7, r1
 800a26c:	1dfa      	adds	r2, r7, #7
 800a26e:	7812      	ldrb	r2, [r2, #0]
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	187b      	adds	r3, r7, r1
 800a274:	2200      	movs	r2, #0
 800a276:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800a278:	23fa      	movs	r3, #250	@ 0xfa
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	1879      	adds	r1, r7, r1
 800a27e:	480d      	ldr	r0, [pc, #52]	@ (800a2b4 <SX126xReadCommand+0x74>)
 800a280:	2202      	movs	r2, #2
 800a282:	f7fb fe57 	bl	8005f34 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, size, 1000);
 800a286:	23fa      	movs	r3, #250	@ 0xfa
 800a288:	009c      	lsls	r4, r3, #2
 800a28a:	1d3b      	adds	r3, r7, #4
 800a28c:	881a      	ldrh	r2, [r3, #0]
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	4808      	ldr	r0, [pc, #32]	@ (800a2b4 <SX126xReadCommand+0x74>)
 800a292:	0023      	movs	r3, r4
 800a294:	f7fb ffc0 	bl	8006218 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800a298:	23a0      	movs	r3, #160	@ 0xa0
 800a29a:	05db      	lsls	r3, r3, #23
 800a29c:	2201      	movs	r2, #1
 800a29e:	2110      	movs	r1, #16
 800a2a0:	0018      	movs	r0, r3
 800a2a2:	f7f9 fabb 	bl	800381c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800a2a6:	f7ff ff3d 	bl	800a124 <SX126xWaitOnBusy>
}
 800a2aa:	46c0      	nop			@ (mov r8, r8)
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	b005      	add	sp, #20
 800a2b0:	bd90      	pop	{r4, r7, pc}
 800a2b2:	46c0      	nop			@ (mov r8, r8)
 800a2b4:	20000244 	.word	0x20000244

0800a2b8 <SX126xWriteRegisters>:

void SX126xWriteRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 800a2b8:	b590      	push	{r4, r7, lr}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6039      	str	r1, [r7, #0]
 800a2c0:	0011      	movs	r1, r2
 800a2c2:	1dbb      	adds	r3, r7, #6
 800a2c4:	1c02      	adds	r2, r0, #0
 800a2c6:	801a      	strh	r2, [r3, #0]
 800a2c8:	1d3b      	adds	r3, r7, #4
 800a2ca:	1c0a      	adds	r2, r1, #0
 800a2cc:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800a2ce:	f7ff f869 	bl	80093a4 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800a2d2:	23a0      	movs	r3, #160	@ 0xa0
 800a2d4:	05db      	lsls	r3, r3, #23
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	2110      	movs	r1, #16
 800a2da:	0018      	movs	r0, r3
 800a2dc:	f7f9 fa9e 	bl	800381c <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_WRITE_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF)};
 800a2e0:	210c      	movs	r1, #12
 800a2e2:	187b      	adds	r3, r7, r1
 800a2e4:	220d      	movs	r2, #13
 800a2e6:	701a      	strb	r2, [r3, #0]
 800a2e8:	1dbb      	adds	r3, r7, #6
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	0a1b      	lsrs	r3, r3, #8
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	187b      	adds	r3, r7, r1
 800a2f4:	705a      	strb	r2, [r3, #1]
 800a2f6:	1dbb      	adds	r3, r7, #6
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	187b      	adds	r3, r7, r1
 800a2fe:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit(&hspi1, buf, 3, 1000);
 800a300:	23fa      	movs	r3, #250	@ 0xfa
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	1879      	adds	r1, r7, r1
 800a306:	480d      	ldr	r0, [pc, #52]	@ (800a33c <SX126xWriteRegisters+0x84>)
 800a308:	2203      	movs	r2, #3
 800a30a:	f7fb fe13 	bl	8005f34 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buffer, size, 1000);
 800a30e:	23fa      	movs	r3, #250	@ 0xfa
 800a310:	009c      	lsls	r4, r3, #2
 800a312:	1d3b      	adds	r3, r7, #4
 800a314:	881a      	ldrh	r2, [r3, #0]
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	4808      	ldr	r0, [pc, #32]	@ (800a33c <SX126xWriteRegisters+0x84>)
 800a31a:	0023      	movs	r3, r4
 800a31c:	f7fb fe0a 	bl	8005f34 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800a320:	23a0      	movs	r3, #160	@ 0xa0
 800a322:	05db      	lsls	r3, r3, #23
 800a324:	2201      	movs	r2, #1
 800a326:	2110      	movs	r1, #16
 800a328:	0018      	movs	r0, r3
 800a32a:	f7f9 fa77 	bl	800381c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800a32e:	f7ff fef9 	bl	800a124 <SX126xWaitOnBusy>
}
 800a332:	46c0      	nop			@ (mov r8, r8)
 800a334:	46bd      	mov	sp, r7
 800a336:	b005      	add	sp, #20
 800a338:	bd90      	pop	{r4, r7, pc}
 800a33a:	46c0      	nop			@ (mov r8, r8)
 800a33c:	20000244 	.word	0x20000244

0800a340 <SX126xWriteRegister>:

void SX126xWriteRegister(uint16_t address, uint8_t value){
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	0002      	movs	r2, r0
 800a348:	1dbb      	adds	r3, r7, #6
 800a34a:	801a      	strh	r2, [r3, #0]
 800a34c:	1d7b      	adds	r3, r7, #5
 800a34e:	1c0a      	adds	r2, r1, #0
 800a350:	701a      	strb	r2, [r3, #0]
	SX126xWriteRegisters(address, &value, 1);
 800a352:	1d79      	adds	r1, r7, #5
 800a354:	1dbb      	adds	r3, r7, #6
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	2201      	movs	r2, #1
 800a35a:	0018      	movs	r0, r3
 800a35c:	f7ff ffac 	bl	800a2b8 <SX126xWriteRegisters>
}
 800a360:	46c0      	nop			@ (mov r8, r8)
 800a362:	46bd      	mov	sp, r7
 800a364:	b002      	add	sp, #8
 800a366:	bd80      	pop	{r7, pc}

0800a368 <SX126xReadRegisters>:

void SX126xReadRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 800a368:	b590      	push	{r4, r7, lr}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6039      	str	r1, [r7, #0]
 800a370:	0011      	movs	r1, r2
 800a372:	1dbb      	adds	r3, r7, #6
 800a374:	1c02      	adds	r2, r0, #0
 800a376:	801a      	strh	r2, [r3, #0]
 800a378:	1d3b      	adds	r3, r7, #4
 800a37a:	1c0a      	adds	r2, r1, #0
 800a37c:	801a      	strh	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800a37e:	f7ff f811 	bl	80093a4 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800a382:	23a0      	movs	r3, #160	@ 0xa0
 800a384:	05db      	lsls	r3, r3, #23
 800a386:	2200      	movs	r2, #0
 800a388:	2110      	movs	r1, #16
 800a38a:	0018      	movs	r0, r3
 800a38c:	f7f9 fa46 	bl	800381c <HAL_GPIO_WritePin>
	uint8_t buf[4] = {(uint8_t)RADIO_READ_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF), 0x00};
 800a390:	210c      	movs	r1, #12
 800a392:	187b      	adds	r3, r7, r1
 800a394:	221d      	movs	r2, #29
 800a396:	701a      	strb	r2, [r3, #0]
 800a398:	1dbb      	adds	r3, r7, #6
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	0a1b      	lsrs	r3, r3, #8
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	187b      	adds	r3, r7, r1
 800a3a4:	705a      	strb	r2, [r3, #1]
 800a3a6:	1dbb      	adds	r3, r7, #6
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	187b      	adds	r3, r7, r1
 800a3ae:	709a      	strb	r2, [r3, #2]
 800a3b0:	187b      	adds	r3, r7, r1
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, buf, 4, 1000);
 800a3b6:	23fa      	movs	r3, #250	@ 0xfa
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	1879      	adds	r1, r7, r1
 800a3bc:	480c      	ldr	r0, [pc, #48]	@ (800a3f0 <SX126xReadRegisters+0x88>)
 800a3be:	2204      	movs	r2, #4
 800a3c0:	f7fb fdb8 	bl	8005f34 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, size, 1000);
 800a3c4:	23fa      	movs	r3, #250	@ 0xfa
 800a3c6:	009c      	lsls	r4, r3, #2
 800a3c8:	1d3b      	adds	r3, r7, #4
 800a3ca:	881a      	ldrh	r2, [r3, #0]
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	4808      	ldr	r0, [pc, #32]	@ (800a3f0 <SX126xReadRegisters+0x88>)
 800a3d0:	0023      	movs	r3, r4
 800a3d2:	f7fb ff21 	bl	8006218 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800a3d6:	23a0      	movs	r3, #160	@ 0xa0
 800a3d8:	05db      	lsls	r3, r3, #23
 800a3da:	2201      	movs	r2, #1
 800a3dc:	2110      	movs	r1, #16
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f7f9 fa1c 	bl	800381c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800a3e4:	f7ff fe9e 	bl	800a124 <SX126xWaitOnBusy>
}
 800a3e8:	46c0      	nop			@ (mov r8, r8)
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	b005      	add	sp, #20
 800a3ee:	bd90      	pop	{r4, r7, pc}
 800a3f0:	20000244 	.word	0x20000244

0800a3f4 <SX126xReadRegister>:

uint8_t SX126xReadRegister(uint16_t address){
 800a3f4:	b590      	push	{r4, r7, lr}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	0002      	movs	r2, r0
 800a3fc:	1dbb      	adds	r3, r7, #6
 800a3fe:	801a      	strh	r2, [r3, #0]
	uint8_t data;
	SX126xReadRegisters(address, &data, 1);
 800a400:	240f      	movs	r4, #15
 800a402:	1939      	adds	r1, r7, r4
 800a404:	1dbb      	adds	r3, r7, #6
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	2201      	movs	r2, #1
 800a40a:	0018      	movs	r0, r3
 800a40c:	f7ff ffac 	bl	800a368 <SX126xReadRegisters>
	return data;
 800a410:	193b      	adds	r3, r7, r4
 800a412:	781b      	ldrb	r3, [r3, #0]
}
 800a414:	0018      	movs	r0, r3
 800a416:	46bd      	mov	sp, r7
 800a418:	b005      	add	sp, #20
 800a41a:	bd90      	pop	{r4, r7, pc}

0800a41c <SX126xWriteBuffer>:

void SX126xWriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6039      	str	r1, [r7, #0]
 800a424:	0011      	movs	r1, r2
 800a426:	1dfb      	adds	r3, r7, #7
 800a428:	1c02      	adds	r2, r0, #0
 800a42a:	701a      	strb	r2, [r3, #0]
 800a42c:	1dbb      	adds	r3, r7, #6
 800a42e:	1c0a      	adds	r2, r1, #0
 800a430:	701a      	strb	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800a432:	f7fe ffb7 	bl	80093a4 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800a436:	23a0      	movs	r3, #160	@ 0xa0
 800a438:	05db      	lsls	r3, r3, #23
 800a43a:	2200      	movs	r2, #0
 800a43c:	2110      	movs	r1, #16
 800a43e:	0018      	movs	r0, r3
 800a440:	f7f9 f9ec 	bl	800381c <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_WRITE_BUFFER, offset};
 800a444:	210c      	movs	r1, #12
 800a446:	187b      	adds	r3, r7, r1
 800a448:	220e      	movs	r2, #14
 800a44a:	701a      	strb	r2, [r3, #0]
 800a44c:	187b      	adds	r3, r7, r1
 800a44e:	1dfa      	adds	r2, r7, #7
 800a450:	7812      	ldrb	r2, [r2, #0]
 800a452:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800a454:	23fa      	movs	r3, #250	@ 0xfa
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	1879      	adds	r1, r7, r1
 800a45a:	480d      	ldr	r0, [pc, #52]	@ (800a490 <SX126xWriteBuffer+0x74>)
 800a45c:	2202      	movs	r2, #2
 800a45e:	f7fb fd69 	bl	8005f34 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buffer, size, 1000);
 800a462:	1dbb      	adds	r3, r7, #6
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	b29a      	uxth	r2, r3
 800a468:	23fa      	movs	r3, #250	@ 0xfa
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	4808      	ldr	r0, [pc, #32]	@ (800a490 <SX126xWriteBuffer+0x74>)
 800a470:	f7fb fd60 	bl	8005f34 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800a474:	23a0      	movs	r3, #160	@ 0xa0
 800a476:	05db      	lsls	r3, r3, #23
 800a478:	2201      	movs	r2, #1
 800a47a:	2110      	movs	r1, #16
 800a47c:	0018      	movs	r0, r3
 800a47e:	f7f9 f9cd 	bl	800381c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800a482:	f7ff fe4f 	bl	800a124 <SX126xWaitOnBusy>
}
 800a486:	46c0      	nop			@ (mov r8, r8)
 800a488:	46bd      	mov	sp, r7
 800a48a:	b004      	add	sp, #16
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	46c0      	nop			@ (mov r8, r8)
 800a490:	20000244 	.word	0x20000244

0800a494 <SX126xReadBuffer>:

void SX126xReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6039      	str	r1, [r7, #0]
 800a49c:	0011      	movs	r1, r2
 800a49e:	1dfb      	adds	r3, r7, #7
 800a4a0:	1c02      	adds	r2, r0, #0
 800a4a2:	701a      	strb	r2, [r3, #0]
 800a4a4:	1dbb      	adds	r3, r7, #6
 800a4a6:	1c0a      	adds	r2, r1, #0
 800a4a8:	701a      	strb	r2, [r3, #0]
	SX126xCheckDeviceReady();
 800a4aa:	f7fe ff7b 	bl	80093a4 <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 800a4ae:	23a0      	movs	r3, #160	@ 0xa0
 800a4b0:	05db      	lsls	r3, r3, #23
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2110      	movs	r1, #16
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f7f9 f9b0 	bl	800381c <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_READ_BUFFER, offset, 0x00};
 800a4bc:	210c      	movs	r1, #12
 800a4be:	187b      	adds	r3, r7, r1
 800a4c0:	221e      	movs	r2, #30
 800a4c2:	701a      	strb	r2, [r3, #0]
 800a4c4:	187b      	adds	r3, r7, r1
 800a4c6:	1dfa      	adds	r2, r7, #7
 800a4c8:	7812      	ldrb	r2, [r2, #0]
 800a4ca:	705a      	strb	r2, [r3, #1]
 800a4cc:	187b      	adds	r3, r7, r1
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800a4d2:	23fa      	movs	r3, #250	@ 0xfa
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	1879      	adds	r1, r7, r1
 800a4d8:	4812      	ldr	r0, [pc, #72]	@ (800a524 <SX126xReadBuffer+0x90>)
 800a4da:	2202      	movs	r2, #2
 800a4dc:	f7fb fd2a 	bl	8005f34 <HAL_SPI_Transmit>
	uint8_t dummy = 0;
 800a4e0:	210b      	movs	r1, #11
 800a4e2:	187b      	adds	r3, r7, r1
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1, &dummy, 1, 1000);
 800a4e8:	23fa      	movs	r3, #250	@ 0xfa
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	1879      	adds	r1, r7, r1
 800a4ee:	480d      	ldr	r0, [pc, #52]	@ (800a524 <SX126xReadBuffer+0x90>)
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f7fb fe91 	bl	8006218 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, buffer, size, 1000);
 800a4f6:	1dbb      	adds	r3, r7, #6
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	23fa      	movs	r3, #250	@ 0xfa
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	6839      	ldr	r1, [r7, #0]
 800a502:	4808      	ldr	r0, [pc, #32]	@ (800a524 <SX126xReadBuffer+0x90>)
 800a504:	f7fb fe88 	bl	8006218 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 800a508:	23a0      	movs	r3, #160	@ 0xa0
 800a50a:	05db      	lsls	r3, r3, #23
 800a50c:	2201      	movs	r2, #1
 800a50e:	2110      	movs	r1, #16
 800a510:	0018      	movs	r0, r3
 800a512:	f7f9 f983 	bl	800381c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 800a516:	f7ff fe05 	bl	800a124 <SX126xWaitOnBusy>
}
 800a51a:	46c0      	nop			@ (mov r8, r8)
 800a51c:	46bd      	mov	sp, r7
 800a51e:	b004      	add	sp, #16
 800a520:	bd80      	pop	{r7, pc}
 800a522:	46c0      	nop			@ (mov r8, r8)
 800a524:	20000244 	.word	0x20000244

0800a528 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower(int8_t power){
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	0002      	movs	r2, r0
 800a530:	1dfb      	adds	r3, r7, #7
 800a532:	701a      	strb	r2, [r3, #0]
	SX126xSetTxParams(power, RADIO_RAMP_40_US);
 800a534:	1dfb      	adds	r3, r7, #7
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	b25b      	sxtb	r3, r3
 800a53a:	2102      	movs	r1, #2
 800a53c:	0018      	movs	r0, r3
 800a53e:	f7ff facb 	bl	8009ad8 <SX126xSetTxParams>
}
 800a542:	46c0      	nop			@ (mov r8, r8)
 800a544:	46bd      	mov	sp, r7
 800a546:	b002      	add	sp, #8
 800a548:	bd80      	pop	{r7, pc}

0800a54a <SX126xGetPaSelect>:

uint8_t SX126xGetPaSelect(uint32_t channel){
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
	return SX1262;
 800a552:	2302      	movs	r3, #2
}
 800a554:	0018      	movs	r0, r3
 800a556:	46bd      	mov	sp, r7
 800a558:	b002      	add	sp, #8
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <SX126xAntSwOn>:
		SPI_LORA.endTransaction();
		digitalWrite(_hwConfig.PIN_LORA_NSS, HIGH);
	}
}
*/
void SX126xAntSwOn(void){
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
}
 800a560:	46c0      	nop			@ (mov r8, r8)
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <SX126xAntSwOff>:

void SX126xAntSwOff(void){
 800a566:	b580      	push	{r7, lr}
 800a568:	af00      	add	r7, sp, #0
}
 800a56a:	46c0      	nop			@ (mov r8, r8)
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <free>:
 800a570:	b510      	push	{r4, lr}
 800a572:	4b03      	ldr	r3, [pc, #12]	@ (800a580 <free+0x10>)
 800a574:	0001      	movs	r1, r0
 800a576:	6818      	ldr	r0, [r3, #0]
 800a578:	f000 f94c 	bl	800a814 <_free_r>
 800a57c:	bd10      	pop	{r4, pc}
 800a57e:	46c0      	nop			@ (mov r8, r8)
 800a580:	2000015c 	.word	0x2000015c

0800a584 <sbrk_aligned>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	4e0f      	ldr	r6, [pc, #60]	@ (800a5c4 <sbrk_aligned+0x40>)
 800a588:	000d      	movs	r5, r1
 800a58a:	6831      	ldr	r1, [r6, #0]
 800a58c:	0004      	movs	r4, r0
 800a58e:	2900      	cmp	r1, #0
 800a590:	d102      	bne.n	800a598 <sbrk_aligned+0x14>
 800a592:	f000 f8f7 	bl	800a784 <_sbrk_r>
 800a596:	6030      	str	r0, [r6, #0]
 800a598:	0029      	movs	r1, r5
 800a59a:	0020      	movs	r0, r4
 800a59c:	f000 f8f2 	bl	800a784 <_sbrk_r>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d103      	bne.n	800a5ac <sbrk_aligned+0x28>
 800a5a4:	2501      	movs	r5, #1
 800a5a6:	426d      	negs	r5, r5
 800a5a8:	0028      	movs	r0, r5
 800a5aa:	bd70      	pop	{r4, r5, r6, pc}
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	1cc5      	adds	r5, r0, #3
 800a5b0:	439d      	bics	r5, r3
 800a5b2:	42a8      	cmp	r0, r5
 800a5b4:	d0f8      	beq.n	800a5a8 <sbrk_aligned+0x24>
 800a5b6:	1a29      	subs	r1, r5, r0
 800a5b8:	0020      	movs	r0, r4
 800a5ba:	f000 f8e3 	bl	800a784 <_sbrk_r>
 800a5be:	3001      	adds	r0, #1
 800a5c0:	d1f2      	bne.n	800a5a8 <sbrk_aligned+0x24>
 800a5c2:	e7ef      	b.n	800a5a4 <sbrk_aligned+0x20>
 800a5c4:	200004d4 	.word	0x200004d4

0800a5c8 <_malloc_r>:
 800a5c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5ca:	2203      	movs	r2, #3
 800a5cc:	1ccb      	adds	r3, r1, #3
 800a5ce:	4393      	bics	r3, r2
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	0005      	movs	r5, r0
 800a5d4:	001f      	movs	r7, r3
 800a5d6:	2b0c      	cmp	r3, #12
 800a5d8:	d234      	bcs.n	800a644 <_malloc_r+0x7c>
 800a5da:	270c      	movs	r7, #12
 800a5dc:	42b9      	cmp	r1, r7
 800a5de:	d833      	bhi.n	800a648 <_malloc_r+0x80>
 800a5e0:	0028      	movs	r0, r5
 800a5e2:	f000 f871 	bl	800a6c8 <__malloc_lock>
 800a5e6:	4e37      	ldr	r6, [pc, #220]	@ (800a6c4 <_malloc_r+0xfc>)
 800a5e8:	6833      	ldr	r3, [r6, #0]
 800a5ea:	001c      	movs	r4, r3
 800a5ec:	2c00      	cmp	r4, #0
 800a5ee:	d12f      	bne.n	800a650 <_malloc_r+0x88>
 800a5f0:	0039      	movs	r1, r7
 800a5f2:	0028      	movs	r0, r5
 800a5f4:	f7ff ffc6 	bl	800a584 <sbrk_aligned>
 800a5f8:	0004      	movs	r4, r0
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	d15f      	bne.n	800a6be <_malloc_r+0xf6>
 800a5fe:	6834      	ldr	r4, [r6, #0]
 800a600:	9400      	str	r4, [sp, #0]
 800a602:	9b00      	ldr	r3, [sp, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d14a      	bne.n	800a69e <_malloc_r+0xd6>
 800a608:	2c00      	cmp	r4, #0
 800a60a:	d052      	beq.n	800a6b2 <_malloc_r+0xea>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	0028      	movs	r0, r5
 800a610:	18e3      	adds	r3, r4, r3
 800a612:	9900      	ldr	r1, [sp, #0]
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	f000 f8b5 	bl	800a784 <_sbrk_r>
 800a61a:	9b01      	ldr	r3, [sp, #4]
 800a61c:	4283      	cmp	r3, r0
 800a61e:	d148      	bne.n	800a6b2 <_malloc_r+0xea>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	0028      	movs	r0, r5
 800a624:	1aff      	subs	r7, r7, r3
 800a626:	0039      	movs	r1, r7
 800a628:	f7ff ffac 	bl	800a584 <sbrk_aligned>
 800a62c:	3001      	adds	r0, #1
 800a62e:	d040      	beq.n	800a6b2 <_malloc_r+0xea>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	19db      	adds	r3, r3, r7
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	6833      	ldr	r3, [r6, #0]
 800a638:	685a      	ldr	r2, [r3, #4]
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	d133      	bne.n	800a6a6 <_malloc_r+0xde>
 800a63e:	9b00      	ldr	r3, [sp, #0]
 800a640:	6033      	str	r3, [r6, #0]
 800a642:	e019      	b.n	800a678 <_malloc_r+0xb0>
 800a644:	2b00      	cmp	r3, #0
 800a646:	dac9      	bge.n	800a5dc <_malloc_r+0x14>
 800a648:	230c      	movs	r3, #12
 800a64a:	602b      	str	r3, [r5, #0]
 800a64c:	2000      	movs	r0, #0
 800a64e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a650:	6821      	ldr	r1, [r4, #0]
 800a652:	1bc9      	subs	r1, r1, r7
 800a654:	d420      	bmi.n	800a698 <_malloc_r+0xd0>
 800a656:	290b      	cmp	r1, #11
 800a658:	d90a      	bls.n	800a670 <_malloc_r+0xa8>
 800a65a:	19e2      	adds	r2, r4, r7
 800a65c:	6027      	str	r7, [r4, #0]
 800a65e:	42a3      	cmp	r3, r4
 800a660:	d104      	bne.n	800a66c <_malloc_r+0xa4>
 800a662:	6032      	str	r2, [r6, #0]
 800a664:	6863      	ldr	r3, [r4, #4]
 800a666:	6011      	str	r1, [r2, #0]
 800a668:	6053      	str	r3, [r2, #4]
 800a66a:	e005      	b.n	800a678 <_malloc_r+0xb0>
 800a66c:	605a      	str	r2, [r3, #4]
 800a66e:	e7f9      	b.n	800a664 <_malloc_r+0x9c>
 800a670:	6862      	ldr	r2, [r4, #4]
 800a672:	42a3      	cmp	r3, r4
 800a674:	d10e      	bne.n	800a694 <_malloc_r+0xcc>
 800a676:	6032      	str	r2, [r6, #0]
 800a678:	0028      	movs	r0, r5
 800a67a:	f000 f82d 	bl	800a6d8 <__malloc_unlock>
 800a67e:	0020      	movs	r0, r4
 800a680:	2207      	movs	r2, #7
 800a682:	300b      	adds	r0, #11
 800a684:	1d23      	adds	r3, r4, #4
 800a686:	4390      	bics	r0, r2
 800a688:	1ac2      	subs	r2, r0, r3
 800a68a:	4298      	cmp	r0, r3
 800a68c:	d0df      	beq.n	800a64e <_malloc_r+0x86>
 800a68e:	1a1b      	subs	r3, r3, r0
 800a690:	50a3      	str	r3, [r4, r2]
 800a692:	e7dc      	b.n	800a64e <_malloc_r+0x86>
 800a694:	605a      	str	r2, [r3, #4]
 800a696:	e7ef      	b.n	800a678 <_malloc_r+0xb0>
 800a698:	0023      	movs	r3, r4
 800a69a:	6864      	ldr	r4, [r4, #4]
 800a69c:	e7a6      	b.n	800a5ec <_malloc_r+0x24>
 800a69e:	9c00      	ldr	r4, [sp, #0]
 800a6a0:	6863      	ldr	r3, [r4, #4]
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	e7ad      	b.n	800a602 <_malloc_r+0x3a>
 800a6a6:	001a      	movs	r2, r3
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	42a3      	cmp	r3, r4
 800a6ac:	d1fb      	bne.n	800a6a6 <_malloc_r+0xde>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e7da      	b.n	800a668 <_malloc_r+0xa0>
 800a6b2:	230c      	movs	r3, #12
 800a6b4:	0028      	movs	r0, r5
 800a6b6:	602b      	str	r3, [r5, #0]
 800a6b8:	f000 f80e 	bl	800a6d8 <__malloc_unlock>
 800a6bc:	e7c6      	b.n	800a64c <_malloc_r+0x84>
 800a6be:	6007      	str	r7, [r0, #0]
 800a6c0:	e7da      	b.n	800a678 <_malloc_r+0xb0>
 800a6c2:	46c0      	nop			@ (mov r8, r8)
 800a6c4:	200004d8 	.word	0x200004d8

0800a6c8 <__malloc_lock>:
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	4802      	ldr	r0, [pc, #8]	@ (800a6d4 <__malloc_lock+0xc>)
 800a6cc:	f000 f896 	bl	800a7fc <__retarget_lock_acquire_recursive>
 800a6d0:	bd10      	pop	{r4, pc}
 800a6d2:	46c0      	nop			@ (mov r8, r8)
 800a6d4:	20000618 	.word	0x20000618

0800a6d8 <__malloc_unlock>:
 800a6d8:	b510      	push	{r4, lr}
 800a6da:	4802      	ldr	r0, [pc, #8]	@ (800a6e4 <__malloc_unlock+0xc>)
 800a6dc:	f000 f88f 	bl	800a7fe <__retarget_lock_release_recursive>
 800a6e0:	bd10      	pop	{r4, pc}
 800a6e2:	46c0      	nop			@ (mov r8, r8)
 800a6e4:	20000618 	.word	0x20000618

0800a6e8 <asiprintf>:
 800a6e8:	b40e      	push	{r1, r2, r3}
 800a6ea:	b530      	push	{r4, r5, lr}
 800a6ec:	2400      	movs	r4, #0
 800a6ee:	b09c      	sub	sp, #112	@ 0x70
 800a6f0:	490c      	ldr	r1, [pc, #48]	@ (800a724 <asiprintf+0x3c>)
 800a6f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a6f4:	0005      	movs	r5, r0
 800a6f6:	480c      	ldr	r0, [pc, #48]	@ (800a728 <asiprintf+0x40>)
 800a6f8:	cb04      	ldmia	r3!, {r2}
 800a6fa:	9105      	str	r1, [sp, #20]
 800a6fc:	6800      	ldr	r0, [r0, #0]
 800a6fe:	a902      	add	r1, sp, #8
 800a700:	9402      	str	r4, [sp, #8]
 800a702:	9404      	str	r4, [sp, #16]
 800a704:	9406      	str	r4, [sp, #24]
 800a706:	9407      	str	r4, [sp, #28]
 800a708:	9301      	str	r3, [sp, #4]
 800a70a:	f000 f92d 	bl	800a968 <_svfiprintf_r>
 800a70e:	42a0      	cmp	r0, r4
 800a710:	db03      	blt.n	800a71a <asiprintf+0x32>
 800a712:	9b02      	ldr	r3, [sp, #8]
 800a714:	701c      	strb	r4, [r3, #0]
 800a716:	9b06      	ldr	r3, [sp, #24]
 800a718:	602b      	str	r3, [r5, #0]
 800a71a:	b01c      	add	sp, #112	@ 0x70
 800a71c:	bc30      	pop	{r4, r5}
 800a71e:	bc08      	pop	{r3}
 800a720:	b003      	add	sp, #12
 800a722:	4718      	bx	r3
 800a724:	ffff0288 	.word	0xffff0288
 800a728:	2000015c 	.word	0x2000015c

0800a72c <_vasiprintf_r>:
 800a72c:	b530      	push	{r4, r5, lr}
 800a72e:	2400      	movs	r4, #0
 800a730:	000d      	movs	r5, r1
 800a732:	4909      	ldr	r1, [pc, #36]	@ (800a758 <_vasiprintf_r+0x2c>)
 800a734:	b09b      	sub	sp, #108	@ 0x6c
 800a736:	9103      	str	r1, [sp, #12]
 800a738:	4669      	mov	r1, sp
 800a73a:	9400      	str	r4, [sp, #0]
 800a73c:	9402      	str	r4, [sp, #8]
 800a73e:	9404      	str	r4, [sp, #16]
 800a740:	9405      	str	r4, [sp, #20]
 800a742:	f000 f911 	bl	800a968 <_svfiprintf_r>
 800a746:	42a0      	cmp	r0, r4
 800a748:	db03      	blt.n	800a752 <_vasiprintf_r+0x26>
 800a74a:	9b00      	ldr	r3, [sp, #0]
 800a74c:	701c      	strb	r4, [r3, #0]
 800a74e:	9b04      	ldr	r3, [sp, #16]
 800a750:	602b      	str	r3, [r5, #0]
 800a752:	b01b      	add	sp, #108	@ 0x6c
 800a754:	bd30      	pop	{r4, r5, pc}
 800a756:	46c0      	nop			@ (mov r8, r8)
 800a758:	ffff0288 	.word	0xffff0288

0800a75c <vasiprintf>:
 800a75c:	b510      	push	{r4, lr}
 800a75e:	4c04      	ldr	r4, [pc, #16]	@ (800a770 <vasiprintf+0x14>)
 800a760:	0013      	movs	r3, r2
 800a762:	000a      	movs	r2, r1
 800a764:	0001      	movs	r1, r0
 800a766:	6820      	ldr	r0, [r4, #0]
 800a768:	f7ff ffe0 	bl	800a72c <_vasiprintf_r>
 800a76c:	bd10      	pop	{r4, pc}
 800a76e:	46c0      	nop			@ (mov r8, r8)
 800a770:	2000015c 	.word	0x2000015c

0800a774 <memset>:
 800a774:	0003      	movs	r3, r0
 800a776:	1882      	adds	r2, r0, r2
 800a778:	4293      	cmp	r3, r2
 800a77a:	d100      	bne.n	800a77e <memset+0xa>
 800a77c:	4770      	bx	lr
 800a77e:	7019      	strb	r1, [r3, #0]
 800a780:	3301      	adds	r3, #1
 800a782:	e7f9      	b.n	800a778 <memset+0x4>

0800a784 <_sbrk_r>:
 800a784:	2300      	movs	r3, #0
 800a786:	b570      	push	{r4, r5, r6, lr}
 800a788:	4d06      	ldr	r5, [pc, #24]	@ (800a7a4 <_sbrk_r+0x20>)
 800a78a:	0004      	movs	r4, r0
 800a78c:	0008      	movs	r0, r1
 800a78e:	602b      	str	r3, [r5, #0]
 800a790:	f7f8 fb1a 	bl	8002dc8 <_sbrk>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d103      	bne.n	800a7a0 <_sbrk_r+0x1c>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d000      	beq.n	800a7a0 <_sbrk_r+0x1c>
 800a79e:	6023      	str	r3, [r4, #0]
 800a7a0:	bd70      	pop	{r4, r5, r6, pc}
 800a7a2:	46c0      	nop			@ (mov r8, r8)
 800a7a4:	20000614 	.word	0x20000614

0800a7a8 <__errno>:
 800a7a8:	4b01      	ldr	r3, [pc, #4]	@ (800a7b0 <__errno+0x8>)
 800a7aa:	6818      	ldr	r0, [r3, #0]
 800a7ac:	4770      	bx	lr
 800a7ae:	46c0      	nop			@ (mov r8, r8)
 800a7b0:	2000015c 	.word	0x2000015c

0800a7b4 <__libc_init_array>:
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	2600      	movs	r6, #0
 800a7b8:	4c0c      	ldr	r4, [pc, #48]	@ (800a7ec <__libc_init_array+0x38>)
 800a7ba:	4d0d      	ldr	r5, [pc, #52]	@ (800a7f0 <__libc_init_array+0x3c>)
 800a7bc:	1b64      	subs	r4, r4, r5
 800a7be:	10a4      	asrs	r4, r4, #2
 800a7c0:	42a6      	cmp	r6, r4
 800a7c2:	d109      	bne.n	800a7d8 <__libc_init_array+0x24>
 800a7c4:	2600      	movs	r6, #0
 800a7c6:	f000 fd1f 	bl	800b208 <_init>
 800a7ca:	4c0a      	ldr	r4, [pc, #40]	@ (800a7f4 <__libc_init_array+0x40>)
 800a7cc:	4d0a      	ldr	r5, [pc, #40]	@ (800a7f8 <__libc_init_array+0x44>)
 800a7ce:	1b64      	subs	r4, r4, r5
 800a7d0:	10a4      	asrs	r4, r4, #2
 800a7d2:	42a6      	cmp	r6, r4
 800a7d4:	d105      	bne.n	800a7e2 <__libc_init_array+0x2e>
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
 800a7d8:	00b3      	lsls	r3, r6, #2
 800a7da:	58eb      	ldr	r3, [r5, r3]
 800a7dc:	4798      	blx	r3
 800a7de:	3601      	adds	r6, #1
 800a7e0:	e7ee      	b.n	800a7c0 <__libc_init_array+0xc>
 800a7e2:	00b3      	lsls	r3, r6, #2
 800a7e4:	58eb      	ldr	r3, [r5, r3]
 800a7e6:	4798      	blx	r3
 800a7e8:	3601      	adds	r6, #1
 800a7ea:	e7f2      	b.n	800a7d2 <__libc_init_array+0x1e>
 800a7ec:	0800b9a8 	.word	0x0800b9a8
 800a7f0:	0800b9a8 	.word	0x0800b9a8
 800a7f4:	0800b9ac 	.word	0x0800b9ac
 800a7f8:	0800b9a8 	.word	0x0800b9a8

0800a7fc <__retarget_lock_acquire_recursive>:
 800a7fc:	4770      	bx	lr

0800a7fe <__retarget_lock_release_recursive>:
 800a7fe:	4770      	bx	lr

0800a800 <memcpy>:
 800a800:	2300      	movs	r3, #0
 800a802:	b510      	push	{r4, lr}
 800a804:	429a      	cmp	r2, r3
 800a806:	d100      	bne.n	800a80a <memcpy+0xa>
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	5ccc      	ldrb	r4, [r1, r3]
 800a80c:	54c4      	strb	r4, [r0, r3]
 800a80e:	3301      	adds	r3, #1
 800a810:	e7f8      	b.n	800a804 <memcpy+0x4>
	...

0800a814 <_free_r>:
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	0005      	movs	r5, r0
 800a818:	1e0c      	subs	r4, r1, #0
 800a81a:	d010      	beq.n	800a83e <_free_r+0x2a>
 800a81c:	3c04      	subs	r4, #4
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	da00      	bge.n	800a826 <_free_r+0x12>
 800a824:	18e4      	adds	r4, r4, r3
 800a826:	0028      	movs	r0, r5
 800a828:	f7ff ff4e 	bl	800a6c8 <__malloc_lock>
 800a82c:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a4 <_free_r+0x90>)
 800a82e:	6813      	ldr	r3, [r2, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d105      	bne.n	800a840 <_free_r+0x2c>
 800a834:	6063      	str	r3, [r4, #4]
 800a836:	6014      	str	r4, [r2, #0]
 800a838:	0028      	movs	r0, r5
 800a83a:	f7ff ff4d 	bl	800a6d8 <__malloc_unlock>
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	42a3      	cmp	r3, r4
 800a842:	d908      	bls.n	800a856 <_free_r+0x42>
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	1821      	adds	r1, r4, r0
 800a848:	428b      	cmp	r3, r1
 800a84a:	d1f3      	bne.n	800a834 <_free_r+0x20>
 800a84c:	6819      	ldr	r1, [r3, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	1809      	adds	r1, r1, r0
 800a852:	6021      	str	r1, [r4, #0]
 800a854:	e7ee      	b.n	800a834 <_free_r+0x20>
 800a856:	001a      	movs	r2, r3
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <_free_r+0x4e>
 800a85e:	42a3      	cmp	r3, r4
 800a860:	d9f9      	bls.n	800a856 <_free_r+0x42>
 800a862:	6811      	ldr	r1, [r2, #0]
 800a864:	1850      	adds	r0, r2, r1
 800a866:	42a0      	cmp	r0, r4
 800a868:	d10b      	bne.n	800a882 <_free_r+0x6e>
 800a86a:	6820      	ldr	r0, [r4, #0]
 800a86c:	1809      	adds	r1, r1, r0
 800a86e:	1850      	adds	r0, r2, r1
 800a870:	6011      	str	r1, [r2, #0]
 800a872:	4283      	cmp	r3, r0
 800a874:	d1e0      	bne.n	800a838 <_free_r+0x24>
 800a876:	6818      	ldr	r0, [r3, #0]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	1841      	adds	r1, r0, r1
 800a87c:	6011      	str	r1, [r2, #0]
 800a87e:	6053      	str	r3, [r2, #4]
 800a880:	e7da      	b.n	800a838 <_free_r+0x24>
 800a882:	42a0      	cmp	r0, r4
 800a884:	d902      	bls.n	800a88c <_free_r+0x78>
 800a886:	230c      	movs	r3, #12
 800a888:	602b      	str	r3, [r5, #0]
 800a88a:	e7d5      	b.n	800a838 <_free_r+0x24>
 800a88c:	6820      	ldr	r0, [r4, #0]
 800a88e:	1821      	adds	r1, r4, r0
 800a890:	428b      	cmp	r3, r1
 800a892:	d103      	bne.n	800a89c <_free_r+0x88>
 800a894:	6819      	ldr	r1, [r3, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	1809      	adds	r1, r1, r0
 800a89a:	6021      	str	r1, [r4, #0]
 800a89c:	6063      	str	r3, [r4, #4]
 800a89e:	6054      	str	r4, [r2, #4]
 800a8a0:	e7ca      	b.n	800a838 <_free_r+0x24>
 800a8a2:	46c0      	nop			@ (mov r8, r8)
 800a8a4:	200004d8 	.word	0x200004d8

0800a8a8 <__ssputs_r>:
 800a8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8aa:	688e      	ldr	r6, [r1, #8]
 800a8ac:	b085      	sub	sp, #20
 800a8ae:	001f      	movs	r7, r3
 800a8b0:	000c      	movs	r4, r1
 800a8b2:	680b      	ldr	r3, [r1, #0]
 800a8b4:	9002      	str	r0, [sp, #8]
 800a8b6:	9203      	str	r2, [sp, #12]
 800a8b8:	42be      	cmp	r6, r7
 800a8ba:	d830      	bhi.n	800a91e <__ssputs_r+0x76>
 800a8bc:	210c      	movs	r1, #12
 800a8be:	5e62      	ldrsh	r2, [r4, r1]
 800a8c0:	2190      	movs	r1, #144	@ 0x90
 800a8c2:	00c9      	lsls	r1, r1, #3
 800a8c4:	420a      	tst	r2, r1
 800a8c6:	d028      	beq.n	800a91a <__ssputs_r+0x72>
 800a8c8:	2003      	movs	r0, #3
 800a8ca:	6921      	ldr	r1, [r4, #16]
 800a8cc:	1a5b      	subs	r3, r3, r1
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	6963      	ldr	r3, [r4, #20]
 800a8d2:	4343      	muls	r3, r0
 800a8d4:	9801      	ldr	r0, [sp, #4]
 800a8d6:	0fdd      	lsrs	r5, r3, #31
 800a8d8:	18ed      	adds	r5, r5, r3
 800a8da:	1c7b      	adds	r3, r7, #1
 800a8dc:	181b      	adds	r3, r3, r0
 800a8de:	106d      	asrs	r5, r5, #1
 800a8e0:	42ab      	cmp	r3, r5
 800a8e2:	d900      	bls.n	800a8e6 <__ssputs_r+0x3e>
 800a8e4:	001d      	movs	r5, r3
 800a8e6:	0552      	lsls	r2, r2, #21
 800a8e8:	d528      	bpl.n	800a93c <__ssputs_r+0x94>
 800a8ea:	0029      	movs	r1, r5
 800a8ec:	9802      	ldr	r0, [sp, #8]
 800a8ee:	f7ff fe6b 	bl	800a5c8 <_malloc_r>
 800a8f2:	1e06      	subs	r6, r0, #0
 800a8f4:	d02c      	beq.n	800a950 <__ssputs_r+0xa8>
 800a8f6:	9a01      	ldr	r2, [sp, #4]
 800a8f8:	6921      	ldr	r1, [r4, #16]
 800a8fa:	f7ff ff81 	bl	800a800 <memcpy>
 800a8fe:	89a2      	ldrh	r2, [r4, #12]
 800a900:	4b18      	ldr	r3, [pc, #96]	@ (800a964 <__ssputs_r+0xbc>)
 800a902:	401a      	ands	r2, r3
 800a904:	2380      	movs	r3, #128	@ 0x80
 800a906:	4313      	orrs	r3, r2
 800a908:	81a3      	strh	r3, [r4, #12]
 800a90a:	9b01      	ldr	r3, [sp, #4]
 800a90c:	6126      	str	r6, [r4, #16]
 800a90e:	18f6      	adds	r6, r6, r3
 800a910:	6026      	str	r6, [r4, #0]
 800a912:	003e      	movs	r6, r7
 800a914:	6165      	str	r5, [r4, #20]
 800a916:	1aed      	subs	r5, r5, r3
 800a918:	60a5      	str	r5, [r4, #8]
 800a91a:	42be      	cmp	r6, r7
 800a91c:	d900      	bls.n	800a920 <__ssputs_r+0x78>
 800a91e:	003e      	movs	r6, r7
 800a920:	0032      	movs	r2, r6
 800a922:	9903      	ldr	r1, [sp, #12]
 800a924:	6820      	ldr	r0, [r4, #0]
 800a926:	f000 fa9b 	bl	800ae60 <memmove>
 800a92a:	2000      	movs	r0, #0
 800a92c:	68a3      	ldr	r3, [r4, #8]
 800a92e:	1b9b      	subs	r3, r3, r6
 800a930:	60a3      	str	r3, [r4, #8]
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	199b      	adds	r3, r3, r6
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	b005      	add	sp, #20
 800a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a93c:	002a      	movs	r2, r5
 800a93e:	9802      	ldr	r0, [sp, #8]
 800a940:	f000 faac 	bl	800ae9c <_realloc_r>
 800a944:	1e06      	subs	r6, r0, #0
 800a946:	d1e0      	bne.n	800a90a <__ssputs_r+0x62>
 800a948:	6921      	ldr	r1, [r4, #16]
 800a94a:	9802      	ldr	r0, [sp, #8]
 800a94c:	f7ff ff62 	bl	800a814 <_free_r>
 800a950:	230c      	movs	r3, #12
 800a952:	2001      	movs	r0, #1
 800a954:	9a02      	ldr	r2, [sp, #8]
 800a956:	4240      	negs	r0, r0
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	89a2      	ldrh	r2, [r4, #12]
 800a95c:	3334      	adds	r3, #52	@ 0x34
 800a95e:	4313      	orrs	r3, r2
 800a960:	81a3      	strh	r3, [r4, #12]
 800a962:	e7e9      	b.n	800a938 <__ssputs_r+0x90>
 800a964:	fffffb7f 	.word	0xfffffb7f

0800a968 <_svfiprintf_r>:
 800a968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a96a:	b0a1      	sub	sp, #132	@ 0x84
 800a96c:	9003      	str	r0, [sp, #12]
 800a96e:	001d      	movs	r5, r3
 800a970:	898b      	ldrh	r3, [r1, #12]
 800a972:	000f      	movs	r7, r1
 800a974:	0016      	movs	r6, r2
 800a976:	061b      	lsls	r3, r3, #24
 800a978:	d511      	bpl.n	800a99e <_svfiprintf_r+0x36>
 800a97a:	690b      	ldr	r3, [r1, #16]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10e      	bne.n	800a99e <_svfiprintf_r+0x36>
 800a980:	2140      	movs	r1, #64	@ 0x40
 800a982:	f7ff fe21 	bl	800a5c8 <_malloc_r>
 800a986:	6038      	str	r0, [r7, #0]
 800a988:	6138      	str	r0, [r7, #16]
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d105      	bne.n	800a99a <_svfiprintf_r+0x32>
 800a98e:	230c      	movs	r3, #12
 800a990:	9a03      	ldr	r2, [sp, #12]
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	2001      	movs	r0, #1
 800a996:	4240      	negs	r0, r0
 800a998:	e0cf      	b.n	800ab3a <_svfiprintf_r+0x1d2>
 800a99a:	2340      	movs	r3, #64	@ 0x40
 800a99c:	617b      	str	r3, [r7, #20]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	ac08      	add	r4, sp, #32
 800a9a2:	6163      	str	r3, [r4, #20]
 800a9a4:	3320      	adds	r3, #32
 800a9a6:	7663      	strb	r3, [r4, #25]
 800a9a8:	3310      	adds	r3, #16
 800a9aa:	76a3      	strb	r3, [r4, #26]
 800a9ac:	9507      	str	r5, [sp, #28]
 800a9ae:	0035      	movs	r5, r6
 800a9b0:	782b      	ldrb	r3, [r5, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <_svfiprintf_r+0x52>
 800a9b6:	2b25      	cmp	r3, #37	@ 0x25
 800a9b8:	d148      	bne.n	800aa4c <_svfiprintf_r+0xe4>
 800a9ba:	1bab      	subs	r3, r5, r6
 800a9bc:	9305      	str	r3, [sp, #20]
 800a9be:	42b5      	cmp	r5, r6
 800a9c0:	d00b      	beq.n	800a9da <_svfiprintf_r+0x72>
 800a9c2:	0032      	movs	r2, r6
 800a9c4:	0039      	movs	r1, r7
 800a9c6:	9803      	ldr	r0, [sp, #12]
 800a9c8:	f7ff ff6e 	bl	800a8a8 <__ssputs_r>
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	d100      	bne.n	800a9d2 <_svfiprintf_r+0x6a>
 800a9d0:	e0ae      	b.n	800ab30 <_svfiprintf_r+0x1c8>
 800a9d2:	6963      	ldr	r3, [r4, #20]
 800a9d4:	9a05      	ldr	r2, [sp, #20]
 800a9d6:	189b      	adds	r3, r3, r2
 800a9d8:	6163      	str	r3, [r4, #20]
 800a9da:	782b      	ldrb	r3, [r5, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d100      	bne.n	800a9e2 <_svfiprintf_r+0x7a>
 800a9e0:	e0a6      	b.n	800ab30 <_svfiprintf_r+0x1c8>
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	4252      	negs	r2, r2
 800a9e8:	6062      	str	r2, [r4, #4]
 800a9ea:	a904      	add	r1, sp, #16
 800a9ec:	3254      	adds	r2, #84	@ 0x54
 800a9ee:	1852      	adds	r2, r2, r1
 800a9f0:	1c6e      	adds	r6, r5, #1
 800a9f2:	6023      	str	r3, [r4, #0]
 800a9f4:	60e3      	str	r3, [r4, #12]
 800a9f6:	60a3      	str	r3, [r4, #8]
 800a9f8:	7013      	strb	r3, [r2, #0]
 800a9fa:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a9fc:	4b54      	ldr	r3, [pc, #336]	@ (800ab50 <_svfiprintf_r+0x1e8>)
 800a9fe:	2205      	movs	r2, #5
 800aa00:	0018      	movs	r0, r3
 800aa02:	7831      	ldrb	r1, [r6, #0]
 800aa04:	9305      	str	r3, [sp, #20]
 800aa06:	f000 fa3e 	bl	800ae86 <memchr>
 800aa0a:	1c75      	adds	r5, r6, #1
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d11f      	bne.n	800aa50 <_svfiprintf_r+0xe8>
 800aa10:	6822      	ldr	r2, [r4, #0]
 800aa12:	06d3      	lsls	r3, r2, #27
 800aa14:	d504      	bpl.n	800aa20 <_svfiprintf_r+0xb8>
 800aa16:	2353      	movs	r3, #83	@ 0x53
 800aa18:	a904      	add	r1, sp, #16
 800aa1a:	185b      	adds	r3, r3, r1
 800aa1c:	2120      	movs	r1, #32
 800aa1e:	7019      	strb	r1, [r3, #0]
 800aa20:	0713      	lsls	r3, r2, #28
 800aa22:	d504      	bpl.n	800aa2e <_svfiprintf_r+0xc6>
 800aa24:	2353      	movs	r3, #83	@ 0x53
 800aa26:	a904      	add	r1, sp, #16
 800aa28:	185b      	adds	r3, r3, r1
 800aa2a:	212b      	movs	r1, #43	@ 0x2b
 800aa2c:	7019      	strb	r1, [r3, #0]
 800aa2e:	7833      	ldrb	r3, [r6, #0]
 800aa30:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa32:	d016      	beq.n	800aa62 <_svfiprintf_r+0xfa>
 800aa34:	0035      	movs	r5, r6
 800aa36:	2100      	movs	r1, #0
 800aa38:	200a      	movs	r0, #10
 800aa3a:	68e3      	ldr	r3, [r4, #12]
 800aa3c:	782a      	ldrb	r2, [r5, #0]
 800aa3e:	1c6e      	adds	r6, r5, #1
 800aa40:	3a30      	subs	r2, #48	@ 0x30
 800aa42:	2a09      	cmp	r2, #9
 800aa44:	d950      	bls.n	800aae8 <_svfiprintf_r+0x180>
 800aa46:	2900      	cmp	r1, #0
 800aa48:	d111      	bne.n	800aa6e <_svfiprintf_r+0x106>
 800aa4a:	e017      	b.n	800aa7c <_svfiprintf_r+0x114>
 800aa4c:	3501      	adds	r5, #1
 800aa4e:	e7af      	b.n	800a9b0 <_svfiprintf_r+0x48>
 800aa50:	9b05      	ldr	r3, [sp, #20]
 800aa52:	6822      	ldr	r2, [r4, #0]
 800aa54:	1ac0      	subs	r0, r0, r3
 800aa56:	2301      	movs	r3, #1
 800aa58:	4083      	lsls	r3, r0
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	002e      	movs	r6, r5
 800aa5e:	6023      	str	r3, [r4, #0]
 800aa60:	e7cc      	b.n	800a9fc <_svfiprintf_r+0x94>
 800aa62:	9b07      	ldr	r3, [sp, #28]
 800aa64:	1d19      	adds	r1, r3, #4
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	9107      	str	r1, [sp, #28]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	db01      	blt.n	800aa72 <_svfiprintf_r+0x10a>
 800aa6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa70:	e004      	b.n	800aa7c <_svfiprintf_r+0x114>
 800aa72:	425b      	negs	r3, r3
 800aa74:	60e3      	str	r3, [r4, #12]
 800aa76:	2302      	movs	r3, #2
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	6023      	str	r3, [r4, #0]
 800aa7c:	782b      	ldrb	r3, [r5, #0]
 800aa7e:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa80:	d10c      	bne.n	800aa9c <_svfiprintf_r+0x134>
 800aa82:	786b      	ldrb	r3, [r5, #1]
 800aa84:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa86:	d134      	bne.n	800aaf2 <_svfiprintf_r+0x18a>
 800aa88:	9b07      	ldr	r3, [sp, #28]
 800aa8a:	3502      	adds	r5, #2
 800aa8c:	1d1a      	adds	r2, r3, #4
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	9207      	str	r2, [sp, #28]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	da01      	bge.n	800aa9a <_svfiprintf_r+0x132>
 800aa96:	2301      	movs	r3, #1
 800aa98:	425b      	negs	r3, r3
 800aa9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa9c:	4e2d      	ldr	r6, [pc, #180]	@ (800ab54 <_svfiprintf_r+0x1ec>)
 800aa9e:	2203      	movs	r2, #3
 800aaa0:	0030      	movs	r0, r6
 800aaa2:	7829      	ldrb	r1, [r5, #0]
 800aaa4:	f000 f9ef 	bl	800ae86 <memchr>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d006      	beq.n	800aaba <_svfiprintf_r+0x152>
 800aaac:	2340      	movs	r3, #64	@ 0x40
 800aaae:	1b80      	subs	r0, r0, r6
 800aab0:	4083      	lsls	r3, r0
 800aab2:	6822      	ldr	r2, [r4, #0]
 800aab4:	3501      	adds	r5, #1
 800aab6:	4313      	orrs	r3, r2
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	7829      	ldrb	r1, [r5, #0]
 800aabc:	2206      	movs	r2, #6
 800aabe:	4826      	ldr	r0, [pc, #152]	@ (800ab58 <_svfiprintf_r+0x1f0>)
 800aac0:	1c6e      	adds	r6, r5, #1
 800aac2:	7621      	strb	r1, [r4, #24]
 800aac4:	f000 f9df 	bl	800ae86 <memchr>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d038      	beq.n	800ab3e <_svfiprintf_r+0x1d6>
 800aacc:	4b23      	ldr	r3, [pc, #140]	@ (800ab5c <_svfiprintf_r+0x1f4>)
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d122      	bne.n	800ab18 <_svfiprintf_r+0x1b0>
 800aad2:	2207      	movs	r2, #7
 800aad4:	9b07      	ldr	r3, [sp, #28]
 800aad6:	3307      	adds	r3, #7
 800aad8:	4393      	bics	r3, r2
 800aada:	3308      	adds	r3, #8
 800aadc:	9307      	str	r3, [sp, #28]
 800aade:	6963      	ldr	r3, [r4, #20]
 800aae0:	9a04      	ldr	r2, [sp, #16]
 800aae2:	189b      	adds	r3, r3, r2
 800aae4:	6163      	str	r3, [r4, #20]
 800aae6:	e762      	b.n	800a9ae <_svfiprintf_r+0x46>
 800aae8:	4343      	muls	r3, r0
 800aaea:	0035      	movs	r5, r6
 800aaec:	2101      	movs	r1, #1
 800aaee:	189b      	adds	r3, r3, r2
 800aaf0:	e7a4      	b.n	800aa3c <_svfiprintf_r+0xd4>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	200a      	movs	r0, #10
 800aaf6:	0019      	movs	r1, r3
 800aaf8:	3501      	adds	r5, #1
 800aafa:	6063      	str	r3, [r4, #4]
 800aafc:	782a      	ldrb	r2, [r5, #0]
 800aafe:	1c6e      	adds	r6, r5, #1
 800ab00:	3a30      	subs	r2, #48	@ 0x30
 800ab02:	2a09      	cmp	r2, #9
 800ab04:	d903      	bls.n	800ab0e <_svfiprintf_r+0x1a6>
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0c8      	beq.n	800aa9c <_svfiprintf_r+0x134>
 800ab0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab0c:	e7c6      	b.n	800aa9c <_svfiprintf_r+0x134>
 800ab0e:	4341      	muls	r1, r0
 800ab10:	0035      	movs	r5, r6
 800ab12:	2301      	movs	r3, #1
 800ab14:	1889      	adds	r1, r1, r2
 800ab16:	e7f1      	b.n	800aafc <_svfiprintf_r+0x194>
 800ab18:	aa07      	add	r2, sp, #28
 800ab1a:	9200      	str	r2, [sp, #0]
 800ab1c:	0021      	movs	r1, r4
 800ab1e:	003a      	movs	r2, r7
 800ab20:	4b0f      	ldr	r3, [pc, #60]	@ (800ab60 <_svfiprintf_r+0x1f8>)
 800ab22:	9803      	ldr	r0, [sp, #12]
 800ab24:	e000      	b.n	800ab28 <_svfiprintf_r+0x1c0>
 800ab26:	bf00      	nop
 800ab28:	9004      	str	r0, [sp, #16]
 800ab2a:	9b04      	ldr	r3, [sp, #16]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	d1d6      	bne.n	800aade <_svfiprintf_r+0x176>
 800ab30:	89bb      	ldrh	r3, [r7, #12]
 800ab32:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ab34:	065b      	lsls	r3, r3, #25
 800ab36:	d500      	bpl.n	800ab3a <_svfiprintf_r+0x1d2>
 800ab38:	e72c      	b.n	800a994 <_svfiprintf_r+0x2c>
 800ab3a:	b021      	add	sp, #132	@ 0x84
 800ab3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab3e:	aa07      	add	r2, sp, #28
 800ab40:	9200      	str	r2, [sp, #0]
 800ab42:	0021      	movs	r1, r4
 800ab44:	003a      	movs	r2, r7
 800ab46:	4b06      	ldr	r3, [pc, #24]	@ (800ab60 <_svfiprintf_r+0x1f8>)
 800ab48:	9803      	ldr	r0, [sp, #12]
 800ab4a:	f000 f87b 	bl	800ac44 <_printf_i>
 800ab4e:	e7eb      	b.n	800ab28 <_svfiprintf_r+0x1c0>
 800ab50:	0800b95a 	.word	0x0800b95a
 800ab54:	0800b960 	.word	0x0800b960
 800ab58:	0800b964 	.word	0x0800b964
 800ab5c:	00000000 	.word	0x00000000
 800ab60:	0800a8a9 	.word	0x0800a8a9

0800ab64 <_printf_common>:
 800ab64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab66:	0016      	movs	r6, r2
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	688a      	ldr	r2, [r1, #8]
 800ab6c:	690b      	ldr	r3, [r1, #16]
 800ab6e:	000c      	movs	r4, r1
 800ab70:	9000      	str	r0, [sp, #0]
 800ab72:	4293      	cmp	r3, r2
 800ab74:	da00      	bge.n	800ab78 <_printf_common+0x14>
 800ab76:	0013      	movs	r3, r2
 800ab78:	0022      	movs	r2, r4
 800ab7a:	6033      	str	r3, [r6, #0]
 800ab7c:	3243      	adds	r2, #67	@ 0x43
 800ab7e:	7812      	ldrb	r2, [r2, #0]
 800ab80:	2a00      	cmp	r2, #0
 800ab82:	d001      	beq.n	800ab88 <_printf_common+0x24>
 800ab84:	3301      	adds	r3, #1
 800ab86:	6033      	str	r3, [r6, #0]
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	069b      	lsls	r3, r3, #26
 800ab8c:	d502      	bpl.n	800ab94 <_printf_common+0x30>
 800ab8e:	6833      	ldr	r3, [r6, #0]
 800ab90:	3302      	adds	r3, #2
 800ab92:	6033      	str	r3, [r6, #0]
 800ab94:	6822      	ldr	r2, [r4, #0]
 800ab96:	2306      	movs	r3, #6
 800ab98:	0015      	movs	r5, r2
 800ab9a:	401d      	ands	r5, r3
 800ab9c:	421a      	tst	r2, r3
 800ab9e:	d027      	beq.n	800abf0 <_printf_common+0x8c>
 800aba0:	0023      	movs	r3, r4
 800aba2:	3343      	adds	r3, #67	@ 0x43
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	1e5a      	subs	r2, r3, #1
 800aba8:	4193      	sbcs	r3, r2
 800abaa:	6822      	ldr	r2, [r4, #0]
 800abac:	0692      	lsls	r2, r2, #26
 800abae:	d430      	bmi.n	800ac12 <_printf_common+0xae>
 800abb0:	0022      	movs	r2, r4
 800abb2:	9901      	ldr	r1, [sp, #4]
 800abb4:	9800      	ldr	r0, [sp, #0]
 800abb6:	9d08      	ldr	r5, [sp, #32]
 800abb8:	3243      	adds	r2, #67	@ 0x43
 800abba:	47a8      	blx	r5
 800abbc:	3001      	adds	r0, #1
 800abbe:	d025      	beq.n	800ac0c <_printf_common+0xa8>
 800abc0:	2206      	movs	r2, #6
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	2500      	movs	r5, #0
 800abc6:	4013      	ands	r3, r2
 800abc8:	2b04      	cmp	r3, #4
 800abca:	d105      	bne.n	800abd8 <_printf_common+0x74>
 800abcc:	6833      	ldr	r3, [r6, #0]
 800abce:	68e5      	ldr	r5, [r4, #12]
 800abd0:	1aed      	subs	r5, r5, r3
 800abd2:	43eb      	mvns	r3, r5
 800abd4:	17db      	asrs	r3, r3, #31
 800abd6:	401d      	ands	r5, r3
 800abd8:	68a3      	ldr	r3, [r4, #8]
 800abda:	6922      	ldr	r2, [r4, #16]
 800abdc:	4293      	cmp	r3, r2
 800abde:	dd01      	ble.n	800abe4 <_printf_common+0x80>
 800abe0:	1a9b      	subs	r3, r3, r2
 800abe2:	18ed      	adds	r5, r5, r3
 800abe4:	2600      	movs	r6, #0
 800abe6:	42b5      	cmp	r5, r6
 800abe8:	d120      	bne.n	800ac2c <_printf_common+0xc8>
 800abea:	2000      	movs	r0, #0
 800abec:	e010      	b.n	800ac10 <_printf_common+0xac>
 800abee:	3501      	adds	r5, #1
 800abf0:	68e3      	ldr	r3, [r4, #12]
 800abf2:	6832      	ldr	r2, [r6, #0]
 800abf4:	1a9b      	subs	r3, r3, r2
 800abf6:	42ab      	cmp	r3, r5
 800abf8:	ddd2      	ble.n	800aba0 <_printf_common+0x3c>
 800abfa:	0022      	movs	r2, r4
 800abfc:	2301      	movs	r3, #1
 800abfe:	9901      	ldr	r1, [sp, #4]
 800ac00:	9800      	ldr	r0, [sp, #0]
 800ac02:	9f08      	ldr	r7, [sp, #32]
 800ac04:	3219      	adds	r2, #25
 800ac06:	47b8      	blx	r7
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d1f0      	bne.n	800abee <_printf_common+0x8a>
 800ac0c:	2001      	movs	r0, #1
 800ac0e:	4240      	negs	r0, r0
 800ac10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac12:	2030      	movs	r0, #48	@ 0x30
 800ac14:	18e1      	adds	r1, r4, r3
 800ac16:	3143      	adds	r1, #67	@ 0x43
 800ac18:	7008      	strb	r0, [r1, #0]
 800ac1a:	0021      	movs	r1, r4
 800ac1c:	1c5a      	adds	r2, r3, #1
 800ac1e:	3145      	adds	r1, #69	@ 0x45
 800ac20:	7809      	ldrb	r1, [r1, #0]
 800ac22:	18a2      	adds	r2, r4, r2
 800ac24:	3243      	adds	r2, #67	@ 0x43
 800ac26:	3302      	adds	r3, #2
 800ac28:	7011      	strb	r1, [r2, #0]
 800ac2a:	e7c1      	b.n	800abb0 <_printf_common+0x4c>
 800ac2c:	0022      	movs	r2, r4
 800ac2e:	2301      	movs	r3, #1
 800ac30:	9901      	ldr	r1, [sp, #4]
 800ac32:	9800      	ldr	r0, [sp, #0]
 800ac34:	9f08      	ldr	r7, [sp, #32]
 800ac36:	321a      	adds	r2, #26
 800ac38:	47b8      	blx	r7
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	d0e6      	beq.n	800ac0c <_printf_common+0xa8>
 800ac3e:	3601      	adds	r6, #1
 800ac40:	e7d1      	b.n	800abe6 <_printf_common+0x82>
	...

0800ac44 <_printf_i>:
 800ac44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac46:	b08b      	sub	sp, #44	@ 0x2c
 800ac48:	9206      	str	r2, [sp, #24]
 800ac4a:	000a      	movs	r2, r1
 800ac4c:	3243      	adds	r2, #67	@ 0x43
 800ac4e:	9307      	str	r3, [sp, #28]
 800ac50:	9005      	str	r0, [sp, #20]
 800ac52:	9203      	str	r2, [sp, #12]
 800ac54:	7e0a      	ldrb	r2, [r1, #24]
 800ac56:	000c      	movs	r4, r1
 800ac58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac5a:	2a78      	cmp	r2, #120	@ 0x78
 800ac5c:	d809      	bhi.n	800ac72 <_printf_i+0x2e>
 800ac5e:	2a62      	cmp	r2, #98	@ 0x62
 800ac60:	d80b      	bhi.n	800ac7a <_printf_i+0x36>
 800ac62:	2a00      	cmp	r2, #0
 800ac64:	d100      	bne.n	800ac68 <_printf_i+0x24>
 800ac66:	e0bc      	b.n	800ade2 <_printf_i+0x19e>
 800ac68:	497b      	ldr	r1, [pc, #492]	@ (800ae58 <_printf_i+0x214>)
 800ac6a:	9104      	str	r1, [sp, #16]
 800ac6c:	2a58      	cmp	r2, #88	@ 0x58
 800ac6e:	d100      	bne.n	800ac72 <_printf_i+0x2e>
 800ac70:	e090      	b.n	800ad94 <_printf_i+0x150>
 800ac72:	0025      	movs	r5, r4
 800ac74:	3542      	adds	r5, #66	@ 0x42
 800ac76:	702a      	strb	r2, [r5, #0]
 800ac78:	e022      	b.n	800acc0 <_printf_i+0x7c>
 800ac7a:	0010      	movs	r0, r2
 800ac7c:	3863      	subs	r0, #99	@ 0x63
 800ac7e:	2815      	cmp	r0, #21
 800ac80:	d8f7      	bhi.n	800ac72 <_printf_i+0x2e>
 800ac82:	f7f5 fa49 	bl	8000118 <__gnu_thumb1_case_shi>
 800ac86:	0016      	.short	0x0016
 800ac88:	fff6001f 	.word	0xfff6001f
 800ac8c:	fff6fff6 	.word	0xfff6fff6
 800ac90:	001ffff6 	.word	0x001ffff6
 800ac94:	fff6fff6 	.word	0xfff6fff6
 800ac98:	fff6fff6 	.word	0xfff6fff6
 800ac9c:	003600a1 	.word	0x003600a1
 800aca0:	fff60080 	.word	0xfff60080
 800aca4:	00b2fff6 	.word	0x00b2fff6
 800aca8:	0036fff6 	.word	0x0036fff6
 800acac:	fff6fff6 	.word	0xfff6fff6
 800acb0:	0084      	.short	0x0084
 800acb2:	0025      	movs	r5, r4
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	3542      	adds	r5, #66	@ 0x42
 800acb8:	1d11      	adds	r1, r2, #4
 800acba:	6019      	str	r1, [r3, #0]
 800acbc:	6813      	ldr	r3, [r2, #0]
 800acbe:	702b      	strb	r3, [r5, #0]
 800acc0:	2301      	movs	r3, #1
 800acc2:	e0a0      	b.n	800ae06 <_printf_i+0x1c2>
 800acc4:	6818      	ldr	r0, [r3, #0]
 800acc6:	6809      	ldr	r1, [r1, #0]
 800acc8:	1d02      	adds	r2, r0, #4
 800acca:	060d      	lsls	r5, r1, #24
 800accc:	d50b      	bpl.n	800ace6 <_printf_i+0xa2>
 800acce:	6806      	ldr	r6, [r0, #0]
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	2e00      	cmp	r6, #0
 800acd4:	da03      	bge.n	800acde <_printf_i+0x9a>
 800acd6:	232d      	movs	r3, #45	@ 0x2d
 800acd8:	9a03      	ldr	r2, [sp, #12]
 800acda:	4276      	negs	r6, r6
 800acdc:	7013      	strb	r3, [r2, #0]
 800acde:	4b5e      	ldr	r3, [pc, #376]	@ (800ae58 <_printf_i+0x214>)
 800ace0:	270a      	movs	r7, #10
 800ace2:	9304      	str	r3, [sp, #16]
 800ace4:	e018      	b.n	800ad18 <_printf_i+0xd4>
 800ace6:	6806      	ldr	r6, [r0, #0]
 800ace8:	601a      	str	r2, [r3, #0]
 800acea:	0649      	lsls	r1, r1, #25
 800acec:	d5f1      	bpl.n	800acd2 <_printf_i+0x8e>
 800acee:	b236      	sxth	r6, r6
 800acf0:	e7ef      	b.n	800acd2 <_printf_i+0x8e>
 800acf2:	6808      	ldr	r0, [r1, #0]
 800acf4:	6819      	ldr	r1, [r3, #0]
 800acf6:	c940      	ldmia	r1!, {r6}
 800acf8:	0605      	lsls	r5, r0, #24
 800acfa:	d402      	bmi.n	800ad02 <_printf_i+0xbe>
 800acfc:	0640      	lsls	r0, r0, #25
 800acfe:	d500      	bpl.n	800ad02 <_printf_i+0xbe>
 800ad00:	b2b6      	uxth	r6, r6
 800ad02:	6019      	str	r1, [r3, #0]
 800ad04:	4b54      	ldr	r3, [pc, #336]	@ (800ae58 <_printf_i+0x214>)
 800ad06:	270a      	movs	r7, #10
 800ad08:	9304      	str	r3, [sp, #16]
 800ad0a:	2a6f      	cmp	r2, #111	@ 0x6f
 800ad0c:	d100      	bne.n	800ad10 <_printf_i+0xcc>
 800ad0e:	3f02      	subs	r7, #2
 800ad10:	0023      	movs	r3, r4
 800ad12:	2200      	movs	r2, #0
 800ad14:	3343      	adds	r3, #67	@ 0x43
 800ad16:	701a      	strb	r2, [r3, #0]
 800ad18:	6863      	ldr	r3, [r4, #4]
 800ad1a:	60a3      	str	r3, [r4, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	db03      	blt.n	800ad28 <_printf_i+0xe4>
 800ad20:	2104      	movs	r1, #4
 800ad22:	6822      	ldr	r2, [r4, #0]
 800ad24:	438a      	bics	r2, r1
 800ad26:	6022      	str	r2, [r4, #0]
 800ad28:	2e00      	cmp	r6, #0
 800ad2a:	d102      	bne.n	800ad32 <_printf_i+0xee>
 800ad2c:	9d03      	ldr	r5, [sp, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00c      	beq.n	800ad4c <_printf_i+0x108>
 800ad32:	9d03      	ldr	r5, [sp, #12]
 800ad34:	0030      	movs	r0, r6
 800ad36:	0039      	movs	r1, r7
 800ad38:	f7f5 fa7e 	bl	8000238 <__aeabi_uidivmod>
 800ad3c:	9b04      	ldr	r3, [sp, #16]
 800ad3e:	3d01      	subs	r5, #1
 800ad40:	5c5b      	ldrb	r3, [r3, r1]
 800ad42:	702b      	strb	r3, [r5, #0]
 800ad44:	0033      	movs	r3, r6
 800ad46:	0006      	movs	r6, r0
 800ad48:	429f      	cmp	r7, r3
 800ad4a:	d9f3      	bls.n	800ad34 <_printf_i+0xf0>
 800ad4c:	2f08      	cmp	r7, #8
 800ad4e:	d109      	bne.n	800ad64 <_printf_i+0x120>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	07db      	lsls	r3, r3, #31
 800ad54:	d506      	bpl.n	800ad64 <_printf_i+0x120>
 800ad56:	6862      	ldr	r2, [r4, #4]
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	dc02      	bgt.n	800ad64 <_printf_i+0x120>
 800ad5e:	2330      	movs	r3, #48	@ 0x30
 800ad60:	3d01      	subs	r5, #1
 800ad62:	702b      	strb	r3, [r5, #0]
 800ad64:	9b03      	ldr	r3, [sp, #12]
 800ad66:	1b5b      	subs	r3, r3, r5
 800ad68:	6123      	str	r3, [r4, #16]
 800ad6a:	9b07      	ldr	r3, [sp, #28]
 800ad6c:	0021      	movs	r1, r4
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	9805      	ldr	r0, [sp, #20]
 800ad72:	9b06      	ldr	r3, [sp, #24]
 800ad74:	aa09      	add	r2, sp, #36	@ 0x24
 800ad76:	f7ff fef5 	bl	800ab64 <_printf_common>
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	d148      	bne.n	800ae10 <_printf_i+0x1cc>
 800ad7e:	2001      	movs	r0, #1
 800ad80:	4240      	negs	r0, r0
 800ad82:	b00b      	add	sp, #44	@ 0x2c
 800ad84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad86:	2220      	movs	r2, #32
 800ad88:	6809      	ldr	r1, [r1, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	6022      	str	r2, [r4, #0]
 800ad8e:	2278      	movs	r2, #120	@ 0x78
 800ad90:	4932      	ldr	r1, [pc, #200]	@ (800ae5c <_printf_i+0x218>)
 800ad92:	9104      	str	r1, [sp, #16]
 800ad94:	0021      	movs	r1, r4
 800ad96:	3145      	adds	r1, #69	@ 0x45
 800ad98:	700a      	strb	r2, [r1, #0]
 800ad9a:	6819      	ldr	r1, [r3, #0]
 800ad9c:	6822      	ldr	r2, [r4, #0]
 800ad9e:	c940      	ldmia	r1!, {r6}
 800ada0:	0610      	lsls	r0, r2, #24
 800ada2:	d402      	bmi.n	800adaa <_printf_i+0x166>
 800ada4:	0650      	lsls	r0, r2, #25
 800ada6:	d500      	bpl.n	800adaa <_printf_i+0x166>
 800ada8:	b2b6      	uxth	r6, r6
 800adaa:	6019      	str	r1, [r3, #0]
 800adac:	07d3      	lsls	r3, r2, #31
 800adae:	d502      	bpl.n	800adb6 <_printf_i+0x172>
 800adb0:	2320      	movs	r3, #32
 800adb2:	4313      	orrs	r3, r2
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	2e00      	cmp	r6, #0
 800adb8:	d001      	beq.n	800adbe <_printf_i+0x17a>
 800adba:	2710      	movs	r7, #16
 800adbc:	e7a8      	b.n	800ad10 <_printf_i+0xcc>
 800adbe:	2220      	movs	r2, #32
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	4393      	bics	r3, r2
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	e7f8      	b.n	800adba <_printf_i+0x176>
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	680d      	ldr	r5, [r1, #0]
 800adcc:	1d10      	adds	r0, r2, #4
 800adce:	6949      	ldr	r1, [r1, #20]
 800add0:	6018      	str	r0, [r3, #0]
 800add2:	6813      	ldr	r3, [r2, #0]
 800add4:	062e      	lsls	r6, r5, #24
 800add6:	d501      	bpl.n	800addc <_printf_i+0x198>
 800add8:	6019      	str	r1, [r3, #0]
 800adda:	e002      	b.n	800ade2 <_printf_i+0x19e>
 800addc:	066d      	lsls	r5, r5, #25
 800adde:	d5fb      	bpl.n	800add8 <_printf_i+0x194>
 800ade0:	8019      	strh	r1, [r3, #0]
 800ade2:	2300      	movs	r3, #0
 800ade4:	9d03      	ldr	r5, [sp, #12]
 800ade6:	6123      	str	r3, [r4, #16]
 800ade8:	e7bf      	b.n	800ad6a <_printf_i+0x126>
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	1d11      	adds	r1, r2, #4
 800adee:	6019      	str	r1, [r3, #0]
 800adf0:	6815      	ldr	r5, [r2, #0]
 800adf2:	2100      	movs	r1, #0
 800adf4:	0028      	movs	r0, r5
 800adf6:	6862      	ldr	r2, [r4, #4]
 800adf8:	f000 f845 	bl	800ae86 <memchr>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d001      	beq.n	800ae04 <_printf_i+0x1c0>
 800ae00:	1b40      	subs	r0, r0, r5
 800ae02:	6060      	str	r0, [r4, #4]
 800ae04:	6863      	ldr	r3, [r4, #4]
 800ae06:	6123      	str	r3, [r4, #16]
 800ae08:	2300      	movs	r3, #0
 800ae0a:	9a03      	ldr	r2, [sp, #12]
 800ae0c:	7013      	strb	r3, [r2, #0]
 800ae0e:	e7ac      	b.n	800ad6a <_printf_i+0x126>
 800ae10:	002a      	movs	r2, r5
 800ae12:	6923      	ldr	r3, [r4, #16]
 800ae14:	9906      	ldr	r1, [sp, #24]
 800ae16:	9805      	ldr	r0, [sp, #20]
 800ae18:	9d07      	ldr	r5, [sp, #28]
 800ae1a:	47a8      	blx	r5
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d0ae      	beq.n	800ad7e <_printf_i+0x13a>
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	079b      	lsls	r3, r3, #30
 800ae24:	d415      	bmi.n	800ae52 <_printf_i+0x20e>
 800ae26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae28:	68e0      	ldr	r0, [r4, #12]
 800ae2a:	4298      	cmp	r0, r3
 800ae2c:	daa9      	bge.n	800ad82 <_printf_i+0x13e>
 800ae2e:	0018      	movs	r0, r3
 800ae30:	e7a7      	b.n	800ad82 <_printf_i+0x13e>
 800ae32:	0022      	movs	r2, r4
 800ae34:	2301      	movs	r3, #1
 800ae36:	9906      	ldr	r1, [sp, #24]
 800ae38:	9805      	ldr	r0, [sp, #20]
 800ae3a:	9e07      	ldr	r6, [sp, #28]
 800ae3c:	3219      	adds	r2, #25
 800ae3e:	47b0      	blx	r6
 800ae40:	3001      	adds	r0, #1
 800ae42:	d09c      	beq.n	800ad7e <_printf_i+0x13a>
 800ae44:	3501      	adds	r5, #1
 800ae46:	68e3      	ldr	r3, [r4, #12]
 800ae48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae4a:	1a9b      	subs	r3, r3, r2
 800ae4c:	42ab      	cmp	r3, r5
 800ae4e:	dcf0      	bgt.n	800ae32 <_printf_i+0x1ee>
 800ae50:	e7e9      	b.n	800ae26 <_printf_i+0x1e2>
 800ae52:	2500      	movs	r5, #0
 800ae54:	e7f7      	b.n	800ae46 <_printf_i+0x202>
 800ae56:	46c0      	nop			@ (mov r8, r8)
 800ae58:	0800b96b 	.word	0x0800b96b
 800ae5c:	0800b97c 	.word	0x0800b97c

0800ae60 <memmove>:
 800ae60:	b510      	push	{r4, lr}
 800ae62:	4288      	cmp	r0, r1
 800ae64:	d806      	bhi.n	800ae74 <memmove+0x14>
 800ae66:	2300      	movs	r3, #0
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d008      	beq.n	800ae7e <memmove+0x1e>
 800ae6c:	5ccc      	ldrb	r4, [r1, r3]
 800ae6e:	54c4      	strb	r4, [r0, r3]
 800ae70:	3301      	adds	r3, #1
 800ae72:	e7f9      	b.n	800ae68 <memmove+0x8>
 800ae74:	188b      	adds	r3, r1, r2
 800ae76:	4298      	cmp	r0, r3
 800ae78:	d2f5      	bcs.n	800ae66 <memmove+0x6>
 800ae7a:	3a01      	subs	r2, #1
 800ae7c:	d200      	bcs.n	800ae80 <memmove+0x20>
 800ae7e:	bd10      	pop	{r4, pc}
 800ae80:	5c8b      	ldrb	r3, [r1, r2]
 800ae82:	5483      	strb	r3, [r0, r2]
 800ae84:	e7f9      	b.n	800ae7a <memmove+0x1a>

0800ae86 <memchr>:
 800ae86:	b2c9      	uxtb	r1, r1
 800ae88:	1882      	adds	r2, r0, r2
 800ae8a:	4290      	cmp	r0, r2
 800ae8c:	d101      	bne.n	800ae92 <memchr+0xc>
 800ae8e:	2000      	movs	r0, #0
 800ae90:	4770      	bx	lr
 800ae92:	7803      	ldrb	r3, [r0, #0]
 800ae94:	428b      	cmp	r3, r1
 800ae96:	d0fb      	beq.n	800ae90 <memchr+0xa>
 800ae98:	3001      	adds	r0, #1
 800ae9a:	e7f6      	b.n	800ae8a <memchr+0x4>

0800ae9c <_realloc_r>:
 800ae9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae9e:	0006      	movs	r6, r0
 800aea0:	000c      	movs	r4, r1
 800aea2:	0015      	movs	r5, r2
 800aea4:	2900      	cmp	r1, #0
 800aea6:	d105      	bne.n	800aeb4 <_realloc_r+0x18>
 800aea8:	0011      	movs	r1, r2
 800aeaa:	f7ff fb8d 	bl	800a5c8 <_malloc_r>
 800aeae:	0004      	movs	r4, r0
 800aeb0:	0020      	movs	r0, r4
 800aeb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aeb4:	2a00      	cmp	r2, #0
 800aeb6:	d103      	bne.n	800aec0 <_realloc_r+0x24>
 800aeb8:	f7ff fcac 	bl	800a814 <_free_r>
 800aebc:	2400      	movs	r4, #0
 800aebe:	e7f7      	b.n	800aeb0 <_realloc_r+0x14>
 800aec0:	f000 f81b 	bl	800aefa <_malloc_usable_size_r>
 800aec4:	0007      	movs	r7, r0
 800aec6:	4285      	cmp	r5, r0
 800aec8:	d802      	bhi.n	800aed0 <_realloc_r+0x34>
 800aeca:	0843      	lsrs	r3, r0, #1
 800aecc:	42ab      	cmp	r3, r5
 800aece:	d3ef      	bcc.n	800aeb0 <_realloc_r+0x14>
 800aed0:	0029      	movs	r1, r5
 800aed2:	0030      	movs	r0, r6
 800aed4:	f7ff fb78 	bl	800a5c8 <_malloc_r>
 800aed8:	9001      	str	r0, [sp, #4]
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d0ee      	beq.n	800aebc <_realloc_r+0x20>
 800aede:	002a      	movs	r2, r5
 800aee0:	42bd      	cmp	r5, r7
 800aee2:	d900      	bls.n	800aee6 <_realloc_r+0x4a>
 800aee4:	003a      	movs	r2, r7
 800aee6:	0021      	movs	r1, r4
 800aee8:	9801      	ldr	r0, [sp, #4]
 800aeea:	f7ff fc89 	bl	800a800 <memcpy>
 800aeee:	0021      	movs	r1, r4
 800aef0:	0030      	movs	r0, r6
 800aef2:	f7ff fc8f 	bl	800a814 <_free_r>
 800aef6:	9c01      	ldr	r4, [sp, #4]
 800aef8:	e7da      	b.n	800aeb0 <_realloc_r+0x14>

0800aefa <_malloc_usable_size_r>:
 800aefa:	1f0b      	subs	r3, r1, #4
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	1f18      	subs	r0, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	da01      	bge.n	800af08 <_malloc_usable_size_r+0xe>
 800af04:	580b      	ldr	r3, [r1, r0]
 800af06:	18c0      	adds	r0, r0, r3
 800af08:	4770      	bx	lr
	...

0800af0c <ceil>:
 800af0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af0e:	004b      	lsls	r3, r1, #1
 800af10:	4a34      	ldr	r2, [pc, #208]	@ (800afe4 <ceil+0xd8>)
 800af12:	0d5b      	lsrs	r3, r3, #21
 800af14:	189e      	adds	r6, r3, r2
 800af16:	000d      	movs	r5, r1
 800af18:	0004      	movs	r4, r0
 800af1a:	9001      	str	r0, [sp, #4]
 800af1c:	2e13      	cmp	r6, #19
 800af1e:	dc2e      	bgt.n	800af7e <ceil+0x72>
 800af20:	2e00      	cmp	r6, #0
 800af22:	da11      	bge.n	800af48 <ceil+0x3c>
 800af24:	4a30      	ldr	r2, [pc, #192]	@ (800afe8 <ceil+0xdc>)
 800af26:	4b31      	ldr	r3, [pc, #196]	@ (800afec <ceil+0xe0>)
 800af28:	f7f5 fbbe 	bl	80006a8 <__aeabi_dadd>
 800af2c:	2200      	movs	r2, #0
 800af2e:	2300      	movs	r3, #0
 800af30:	f7f5 fa9c 	bl	800046c <__aeabi_dcmpgt>
 800af34:	2800      	cmp	r0, #0
 800af36:	d01f      	beq.n	800af78 <ceil+0x6c>
 800af38:	2d00      	cmp	r5, #0
 800af3a:	db4f      	blt.n	800afdc <ceil+0xd0>
 800af3c:	432c      	orrs	r4, r5
 800af3e:	1e25      	subs	r5, r4, #0
 800af40:	d01a      	beq.n	800af78 <ceil+0x6c>
 800af42:	2400      	movs	r4, #0
 800af44:	4d2a      	ldr	r5, [pc, #168]	@ (800aff0 <ceil+0xe4>)
 800af46:	e017      	b.n	800af78 <ceil+0x6c>
 800af48:	4f2a      	ldr	r7, [pc, #168]	@ (800aff4 <ceil+0xe8>)
 800af4a:	4137      	asrs	r7, r6
 800af4c:	003b      	movs	r3, r7
 800af4e:	400b      	ands	r3, r1
 800af50:	4303      	orrs	r3, r0
 800af52:	d01e      	beq.n	800af92 <ceil+0x86>
 800af54:	4a24      	ldr	r2, [pc, #144]	@ (800afe8 <ceil+0xdc>)
 800af56:	4b25      	ldr	r3, [pc, #148]	@ (800afec <ceil+0xe0>)
 800af58:	f7f5 fba6 	bl	80006a8 <__aeabi_dadd>
 800af5c:	2200      	movs	r2, #0
 800af5e:	2300      	movs	r3, #0
 800af60:	f7f5 fa84 	bl	800046c <__aeabi_dcmpgt>
 800af64:	2800      	cmp	r0, #0
 800af66:	d007      	beq.n	800af78 <ceil+0x6c>
 800af68:	2d00      	cmp	r5, #0
 800af6a:	dd03      	ble.n	800af74 <ceil+0x68>
 800af6c:	2380      	movs	r3, #128	@ 0x80
 800af6e:	035b      	lsls	r3, r3, #13
 800af70:	4133      	asrs	r3, r6
 800af72:	18ed      	adds	r5, r5, r3
 800af74:	2400      	movs	r4, #0
 800af76:	43bd      	bics	r5, r7
 800af78:	0029      	movs	r1, r5
 800af7a:	0020      	movs	r0, r4
 800af7c:	e009      	b.n	800af92 <ceil+0x86>
 800af7e:	2e33      	cmp	r6, #51	@ 0x33
 800af80:	dd09      	ble.n	800af96 <ceil+0x8a>
 800af82:	2380      	movs	r3, #128	@ 0x80
 800af84:	00db      	lsls	r3, r3, #3
 800af86:	429e      	cmp	r6, r3
 800af88:	d103      	bne.n	800af92 <ceil+0x86>
 800af8a:	0002      	movs	r2, r0
 800af8c:	000b      	movs	r3, r1
 800af8e:	f7f5 fb8b 	bl	80006a8 <__aeabi_dadd>
 800af92:	b003      	add	sp, #12
 800af94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af96:	2701      	movs	r7, #1
 800af98:	4a17      	ldr	r2, [pc, #92]	@ (800aff8 <ceil+0xec>)
 800af9a:	427f      	negs	r7, r7
 800af9c:	189b      	adds	r3, r3, r2
 800af9e:	40df      	lsrs	r7, r3
 800afa0:	4207      	tst	r7, r0
 800afa2:	d0f6      	beq.n	800af92 <ceil+0x86>
 800afa4:	4a10      	ldr	r2, [pc, #64]	@ (800afe8 <ceil+0xdc>)
 800afa6:	4b11      	ldr	r3, [pc, #68]	@ (800afec <ceil+0xe0>)
 800afa8:	f7f5 fb7e 	bl	80006a8 <__aeabi_dadd>
 800afac:	2200      	movs	r2, #0
 800afae:	2300      	movs	r3, #0
 800afb0:	f7f5 fa5c 	bl	800046c <__aeabi_dcmpgt>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d0df      	beq.n	800af78 <ceil+0x6c>
 800afb8:	2d00      	cmp	r5, #0
 800afba:	dd02      	ble.n	800afc2 <ceil+0xb6>
 800afbc:	2e14      	cmp	r6, #20
 800afbe:	d102      	bne.n	800afc6 <ceil+0xba>
 800afc0:	3501      	adds	r5, #1
 800afc2:	43bc      	bics	r4, r7
 800afc4:	e7d8      	b.n	800af78 <ceil+0x6c>
 800afc6:	2234      	movs	r2, #52	@ 0x34
 800afc8:	2301      	movs	r3, #1
 800afca:	1b92      	subs	r2, r2, r6
 800afcc:	4093      	lsls	r3, r2
 800afce:	18e4      	adds	r4, r4, r3
 800afd0:	9b01      	ldr	r3, [sp, #4]
 800afd2:	429c      	cmp	r4, r3
 800afd4:	419b      	sbcs	r3, r3
 800afd6:	425b      	negs	r3, r3
 800afd8:	18ed      	adds	r5, r5, r3
 800afda:	e7f2      	b.n	800afc2 <ceil+0xb6>
 800afdc:	2580      	movs	r5, #128	@ 0x80
 800afde:	2400      	movs	r4, #0
 800afe0:	062d      	lsls	r5, r5, #24
 800afe2:	e7c9      	b.n	800af78 <ceil+0x6c>
 800afe4:	fffffc01 	.word	0xfffffc01
 800afe8:	8800759c 	.word	0x8800759c
 800afec:	7e37e43c 	.word	0x7e37e43c
 800aff0:	3ff00000 	.word	0x3ff00000
 800aff4:	000fffff 	.word	0x000fffff
 800aff8:	fffffbed 	.word	0xfffffbed

0800affc <floor>:
 800affc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800affe:	004b      	lsls	r3, r1, #1
 800b000:	4a36      	ldr	r2, [pc, #216]	@ (800b0dc <floor+0xe0>)
 800b002:	0d5b      	lsrs	r3, r3, #21
 800b004:	189e      	adds	r6, r3, r2
 800b006:	000c      	movs	r4, r1
 800b008:	0005      	movs	r5, r0
 800b00a:	9001      	str	r0, [sp, #4]
 800b00c:	2e13      	cmp	r6, #19
 800b00e:	dc2f      	bgt.n	800b070 <floor+0x74>
 800b010:	2e00      	cmp	r6, #0
 800b012:	da14      	bge.n	800b03e <floor+0x42>
 800b014:	4a32      	ldr	r2, [pc, #200]	@ (800b0e0 <floor+0xe4>)
 800b016:	4b33      	ldr	r3, [pc, #204]	@ (800b0e4 <floor+0xe8>)
 800b018:	f7f5 fb46 	bl	80006a8 <__aeabi_dadd>
 800b01c:	2200      	movs	r2, #0
 800b01e:	2300      	movs	r3, #0
 800b020:	f7f5 fa24 	bl	800046c <__aeabi_dcmpgt>
 800b024:	2800      	cmp	r0, #0
 800b026:	d007      	beq.n	800b038 <floor+0x3c>
 800b028:	2c00      	cmp	r4, #0
 800b02a:	da50      	bge.n	800b0ce <floor+0xd2>
 800b02c:	0064      	lsls	r4, r4, #1
 800b02e:	0864      	lsrs	r4, r4, #1
 800b030:	4325      	orrs	r5, r4
 800b032:	d14f      	bne.n	800b0d4 <floor+0xd8>
 800b034:	2480      	movs	r4, #128	@ 0x80
 800b036:	0624      	lsls	r4, r4, #24
 800b038:	0021      	movs	r1, r4
 800b03a:	0028      	movs	r0, r5
 800b03c:	e022      	b.n	800b084 <floor+0x88>
 800b03e:	4f2a      	ldr	r7, [pc, #168]	@ (800b0e8 <floor+0xec>)
 800b040:	4137      	asrs	r7, r6
 800b042:	003b      	movs	r3, r7
 800b044:	400b      	ands	r3, r1
 800b046:	4303      	orrs	r3, r0
 800b048:	d01c      	beq.n	800b084 <floor+0x88>
 800b04a:	4a25      	ldr	r2, [pc, #148]	@ (800b0e0 <floor+0xe4>)
 800b04c:	4b25      	ldr	r3, [pc, #148]	@ (800b0e4 <floor+0xe8>)
 800b04e:	f7f5 fb2b 	bl	80006a8 <__aeabi_dadd>
 800b052:	2200      	movs	r2, #0
 800b054:	2300      	movs	r3, #0
 800b056:	f7f5 fa09 	bl	800046c <__aeabi_dcmpgt>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d0ec      	beq.n	800b038 <floor+0x3c>
 800b05e:	2c00      	cmp	r4, #0
 800b060:	da03      	bge.n	800b06a <floor+0x6e>
 800b062:	2380      	movs	r3, #128	@ 0x80
 800b064:	035b      	lsls	r3, r3, #13
 800b066:	4133      	asrs	r3, r6
 800b068:	18e4      	adds	r4, r4, r3
 800b06a:	2500      	movs	r5, #0
 800b06c:	43bc      	bics	r4, r7
 800b06e:	e7e3      	b.n	800b038 <floor+0x3c>
 800b070:	2e33      	cmp	r6, #51	@ 0x33
 800b072:	dd09      	ble.n	800b088 <floor+0x8c>
 800b074:	2380      	movs	r3, #128	@ 0x80
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	429e      	cmp	r6, r3
 800b07a:	d103      	bne.n	800b084 <floor+0x88>
 800b07c:	0002      	movs	r2, r0
 800b07e:	000b      	movs	r3, r1
 800b080:	f7f5 fb12 	bl	80006a8 <__aeabi_dadd>
 800b084:	b003      	add	sp, #12
 800b086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b088:	2701      	movs	r7, #1
 800b08a:	4a18      	ldr	r2, [pc, #96]	@ (800b0ec <floor+0xf0>)
 800b08c:	427f      	negs	r7, r7
 800b08e:	189b      	adds	r3, r3, r2
 800b090:	40df      	lsrs	r7, r3
 800b092:	4238      	tst	r0, r7
 800b094:	d0f6      	beq.n	800b084 <floor+0x88>
 800b096:	4a12      	ldr	r2, [pc, #72]	@ (800b0e0 <floor+0xe4>)
 800b098:	4b12      	ldr	r3, [pc, #72]	@ (800b0e4 <floor+0xe8>)
 800b09a:	f7f5 fb05 	bl	80006a8 <__aeabi_dadd>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f7f5 f9e3 	bl	800046c <__aeabi_dcmpgt>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d0c6      	beq.n	800b038 <floor+0x3c>
 800b0aa:	2c00      	cmp	r4, #0
 800b0ac:	da02      	bge.n	800b0b4 <floor+0xb8>
 800b0ae:	2e14      	cmp	r6, #20
 800b0b0:	d102      	bne.n	800b0b8 <floor+0xbc>
 800b0b2:	3401      	adds	r4, #1
 800b0b4:	43bd      	bics	r5, r7
 800b0b6:	e7bf      	b.n	800b038 <floor+0x3c>
 800b0b8:	2234      	movs	r2, #52	@ 0x34
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	1b92      	subs	r2, r2, r6
 800b0be:	4093      	lsls	r3, r2
 800b0c0:	18ed      	adds	r5, r5, r3
 800b0c2:	9b01      	ldr	r3, [sp, #4]
 800b0c4:	429d      	cmp	r5, r3
 800b0c6:	419b      	sbcs	r3, r3
 800b0c8:	425b      	negs	r3, r3
 800b0ca:	18e4      	adds	r4, r4, r3
 800b0cc:	e7f2      	b.n	800b0b4 <floor+0xb8>
 800b0ce:	2500      	movs	r5, #0
 800b0d0:	002c      	movs	r4, r5
 800b0d2:	e7b1      	b.n	800b038 <floor+0x3c>
 800b0d4:	2500      	movs	r5, #0
 800b0d6:	4c06      	ldr	r4, [pc, #24]	@ (800b0f0 <floor+0xf4>)
 800b0d8:	e7ae      	b.n	800b038 <floor+0x3c>
 800b0da:	46c0      	nop			@ (mov r8, r8)
 800b0dc:	fffffc01 	.word	0xfffffc01
 800b0e0:	8800759c 	.word	0x8800759c
 800b0e4:	7e37e43c 	.word	0x7e37e43c
 800b0e8:	000fffff 	.word	0x000fffff
 800b0ec:	fffffbed 	.word	0xfffffbed
 800b0f0:	bff00000 	.word	0xbff00000

0800b0f4 <rint>:
 800b0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0f6:	004a      	lsls	r2, r1, #1
 800b0f8:	b085      	sub	sp, #20
 800b0fa:	0d52      	lsrs	r2, r2, #21
 800b0fc:	9201      	str	r2, [sp, #4]
 800b0fe:	9e01      	ldr	r6, [sp, #4]
 800b100:	4a3c      	ldr	r2, [pc, #240]	@ (800b1f4 <rint+0x100>)
 800b102:	000d      	movs	r5, r1
 800b104:	18b6      	adds	r6, r6, r2
 800b106:	0003      	movs	r3, r0
 800b108:	0fcc      	lsrs	r4, r1, #31
 800b10a:	2e13      	cmp	r6, #19
 800b10c:	dc55      	bgt.n	800b1ba <rint+0xc6>
 800b10e:	2e00      	cmp	r6, #0
 800b110:	da2a      	bge.n	800b168 <rint+0x74>
 800b112:	004a      	lsls	r2, r1, #1
 800b114:	0852      	lsrs	r2, r2, #1
 800b116:	4302      	orrs	r2, r0
 800b118:	d024      	beq.n	800b164 <rint+0x70>
 800b11a:	030a      	lsls	r2, r1, #12
 800b11c:	0b12      	lsrs	r2, r2, #12
 800b11e:	4302      	orrs	r2, r0
 800b120:	4253      	negs	r3, r2
 800b122:	4313      	orrs	r3, r2
 800b124:	2280      	movs	r2, #128	@ 0x80
 800b126:	0c4d      	lsrs	r5, r1, #17
 800b128:	0312      	lsls	r2, r2, #12
 800b12a:	0b1b      	lsrs	r3, r3, #12
 800b12c:	4013      	ands	r3, r2
 800b12e:	046d      	lsls	r5, r5, #17
 800b130:	432b      	orrs	r3, r5
 800b132:	0019      	movs	r1, r3
 800b134:	4b30      	ldr	r3, [pc, #192]	@ (800b1f8 <rint+0x104>)
 800b136:	00e2      	lsls	r2, r4, #3
 800b138:	189b      	adds	r3, r3, r2
 800b13a:	681e      	ldr	r6, [r3, #0]
 800b13c:	685f      	ldr	r7, [r3, #4]
 800b13e:	0002      	movs	r2, r0
 800b140:	000b      	movs	r3, r1
 800b142:	0030      	movs	r0, r6
 800b144:	0039      	movs	r1, r7
 800b146:	f7f5 faaf 	bl	80006a8 <__aeabi_dadd>
 800b14a:	9002      	str	r0, [sp, #8]
 800b14c:	9103      	str	r1, [sp, #12]
 800b14e:	9802      	ldr	r0, [sp, #8]
 800b150:	9903      	ldr	r1, [sp, #12]
 800b152:	003b      	movs	r3, r7
 800b154:	0032      	movs	r2, r6
 800b156:	f7f6 fd17 	bl	8001b88 <__aeabi_dsub>
 800b15a:	004b      	lsls	r3, r1, #1
 800b15c:	07e4      	lsls	r4, r4, #31
 800b15e:	085b      	lsrs	r3, r3, #1
 800b160:	431c      	orrs	r4, r3
 800b162:	0021      	movs	r1, r4
 800b164:	b005      	add	sp, #20
 800b166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b168:	4f24      	ldr	r7, [pc, #144]	@ (800b1fc <rint+0x108>)
 800b16a:	000a      	movs	r2, r1
 800b16c:	4137      	asrs	r7, r6
 800b16e:	403a      	ands	r2, r7
 800b170:	4302      	orrs	r2, r0
 800b172:	d0f7      	beq.n	800b164 <rint+0x70>
 800b174:	087f      	lsrs	r7, r7, #1
 800b176:	4039      	ands	r1, r7
 800b178:	430b      	orrs	r3, r1
 800b17a:	d00a      	beq.n	800b192 <rint+0x9e>
 800b17c:	4b20      	ldr	r3, [pc, #128]	@ (800b200 <rint+0x10c>)
 800b17e:	9a01      	ldr	r2, [sp, #4]
 800b180:	43bd      	bics	r5, r7
 800b182:	18d2      	adds	r2, r2, r3
 800b184:	4253      	negs	r3, r2
 800b186:	415a      	adcs	r2, r3
 800b188:	07d3      	lsls	r3, r2, #31
 800b18a:	2280      	movs	r2, #128	@ 0x80
 800b18c:	02d2      	lsls	r2, r2, #11
 800b18e:	4132      	asrs	r2, r6
 800b190:	4315      	orrs	r5, r2
 800b192:	4919      	ldr	r1, [pc, #100]	@ (800b1f8 <rint+0x104>)
 800b194:	00e4      	lsls	r4, r4, #3
 800b196:	1909      	adds	r1, r1, r4
 800b198:	001a      	movs	r2, r3
 800b19a:	002b      	movs	r3, r5
 800b19c:	680c      	ldr	r4, [r1, #0]
 800b19e:	684d      	ldr	r5, [r1, #4]
 800b1a0:	0020      	movs	r0, r4
 800b1a2:	0029      	movs	r1, r5
 800b1a4:	f7f5 fa80 	bl	80006a8 <__aeabi_dadd>
 800b1a8:	9002      	str	r0, [sp, #8]
 800b1aa:	9103      	str	r1, [sp, #12]
 800b1ac:	9802      	ldr	r0, [sp, #8]
 800b1ae:	9903      	ldr	r1, [sp, #12]
 800b1b0:	0022      	movs	r2, r4
 800b1b2:	002b      	movs	r3, r5
 800b1b4:	f7f6 fce8 	bl	8001b88 <__aeabi_dsub>
 800b1b8:	e7d4      	b.n	800b164 <rint+0x70>
 800b1ba:	2e33      	cmp	r6, #51	@ 0x33
 800b1bc:	dd08      	ble.n	800b1d0 <rint+0xdc>
 800b1be:	2380      	movs	r3, #128	@ 0x80
 800b1c0:	00db      	lsls	r3, r3, #3
 800b1c2:	429e      	cmp	r6, r3
 800b1c4:	d1ce      	bne.n	800b164 <rint+0x70>
 800b1c6:	0002      	movs	r2, r0
 800b1c8:	000b      	movs	r3, r1
 800b1ca:	f7f5 fa6d 	bl	80006a8 <__aeabi_dadd>
 800b1ce:	e7c9      	b.n	800b164 <rint+0x70>
 800b1d0:	9e01      	ldr	r6, [sp, #4]
 800b1d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b204 <rint+0x110>)
 800b1d4:	18b2      	adds	r2, r6, r2
 800b1d6:	2601      	movs	r6, #1
 800b1d8:	4276      	negs	r6, r6
 800b1da:	40d6      	lsrs	r6, r2
 800b1dc:	4206      	tst	r6, r0
 800b1de:	d0c1      	beq.n	800b164 <rint+0x70>
 800b1e0:	0876      	lsrs	r6, r6, #1
 800b1e2:	4206      	tst	r6, r0
 800b1e4:	d0d5      	beq.n	800b192 <rint+0x9e>
 800b1e6:	2180      	movs	r1, #128	@ 0x80
 800b1e8:	05c9      	lsls	r1, r1, #23
 800b1ea:	4111      	asrs	r1, r2
 800b1ec:	43b3      	bics	r3, r6
 800b1ee:	430b      	orrs	r3, r1
 800b1f0:	e7cf      	b.n	800b192 <rint+0x9e>
 800b1f2:	46c0      	nop			@ (mov r8, r8)
 800b1f4:	fffffc01 	.word	0xfffffc01
 800b1f8:	0800b990 	.word	0x0800b990
 800b1fc:	000fffff 	.word	0x000fffff
 800b200:	fffffbee 	.word	0xfffffbee
 800b204:	fffffbed 	.word	0xfffffbed

0800b208 <_init>:
 800b208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20a:	46c0      	nop			@ (mov r8, r8)
 800b20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20e:	bc08      	pop	{r3}
 800b210:	469e      	mov	lr, r3
 800b212:	4770      	bx	lr

0800b214 <_fini>:
 800b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b216:	46c0      	nop			@ (mov r8, r8)
 800b218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21a:	bc08      	pop	{r3}
 800b21c:	469e      	mov	lr, r3
 800b21e:	4770      	bx	lr
